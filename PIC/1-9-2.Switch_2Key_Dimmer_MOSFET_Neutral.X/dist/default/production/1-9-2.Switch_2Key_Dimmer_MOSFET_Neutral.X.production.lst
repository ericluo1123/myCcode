

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Dec 12 15:49:53 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	intentry,global,class=CODE,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	dabs	1,0x7E,2
   146  0000                     	;# 
   147  0001                     	;# 
   148  0002                     	;# 
   149  0003                     	;# 
   150  0004                     	;# 
   151  0005                     	;# 
   152  0006                     	;# 
   153  0007                     	;# 
   154  0008                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0015                     	;# 
   165  0016                     	;# 
   166  0016                     	;# 
   167  0017                     	;# 
   168  0018                     	;# 
   169  0019                     	;# 
   170  001A                     	;# 
   171  001B                     	;# 
   172  001C                     	;# 
   173  008C                     	;# 
   174  008D                     	;# 
   175  008E                     	;# 
   176  0090                     	;# 
   177  0091                     	;# 
   178  0092                     	;# 
   179  0095                     	;# 
   180  0096                     	;# 
   181  0097                     	;# 
   182  0099                     	;# 
   183  009A                     	;# 
   184  009B                     	;# 
   185  009B                     	;# 
   186  009C                     	;# 
   187  009D                     	;# 
   188  009E                     	;# 
   189  010C                     	;# 
   190  010D                     	;# 
   191  010E                     	;# 
   192  0116                     	;# 
   193  0117                     	;# 
   194  011D                     	;# 
   195  018C                     	;# 
   196  018D                     	;# 
   197  018E                     	;# 
   198  0191                     	;# 
   199  0191                     	;# 
   200  0192                     	;# 
   201  0193                     	;# 
   202  0193                     	;# 
   203  0194                     	;# 
   204  0195                     	;# 
   205  0196                     	;# 
   206  0197                     	;# 
   207  0199                     	;# 
   208  019A                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019B                     	;# 
   213  019C                     	;# 
   214  019C                     	;# 
   215  019D                     	;# 
   216  019E                     	;# 
   217  019F                     	;# 
   218  020D                     	;# 
   219  0210                     	;# 
   220  0211                     	;# 
   221  0211                     	;# 
   222  0212                     	;# 
   223  0212                     	;# 
   224  0213                     	;# 
   225  0213                     	;# 
   226  0214                     	;# 
   227  0214                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0215                     	;# 
   231  0216                     	;# 
   232  0216                     	;# 
   233  0217                     	;# 
   234  0217                     	;# 
   235  0291                     	;# 
   236  0291                     	;# 
   237  0292                     	;# 
   238  0293                     	;# 
   239  0298                     	;# 
   240  0298                     	;# 
   241  0299                     	;# 
   242  029A                     	;# 
   243  0394                     	;# 
   244  0395                     	;# 
   245  0396                     	;# 
   246  0FE4                     	;# 
   247  0FE5                     	;# 
   248  0FE6                     	;# 
   249  0FE7                     	;# 
   250  0FE8                     	;# 
   251  0FE9                     	;# 
   252  0FEA                     	;# 
   253  0FEB                     	;# 
   254  0FED                     	;# 
   255  0FEE                     	;# 
   256  0FEF                     	;# 
   257  0000                     	;# 
   258  0001                     	;# 
   259  0002                     	;# 
   260  0003                     	;# 
   261  0004                     	;# 
   262  0005                     	;# 
   263  0006                     	;# 
   264  0007                     	;# 
   265  0008                     	;# 
   266  0009                     	;# 
   267  000A                     	;# 
   268  000B                     	;# 
   269  000C                     	;# 
   270  000D                     	;# 
   271  000E                     	;# 
   272  0010                     	;# 
   273  0011                     	;# 
   274  0012                     	;# 
   275  0015                     	;# 
   276  0016                     	;# 
   277  0016                     	;# 
   278  0017                     	;# 
   279  0018                     	;# 
   280  0019                     	;# 
   281  001A                     	;# 
   282  001B                     	;# 
   283  001C                     	;# 
   284  008C                     	;# 
   285  008D                     	;# 
   286  008E                     	;# 
   287  0090                     	;# 
   288  0091                     	;# 
   289  0092                     	;# 
   290  0095                     	;# 
   291  0096                     	;# 
   292  0097                     	;# 
   293  0099                     	;# 
   294  009A                     	;# 
   295  009B                     	;# 
   296  009B                     	;# 
   297  009C                     	;# 
   298  009D                     	;# 
   299  009E                     	;# 
   300  010C                     	;# 
   301  010D                     	;# 
   302  010E                     	;# 
   303  0116                     	;# 
   304  0117                     	;# 
   305  011D                     	;# 
   306  018C                     	;# 
   307  018D                     	;# 
   308  018E                     	;# 
   309  0191                     	;# 
   310  0191                     	;# 
   311  0192                     	;# 
   312  0193                     	;# 
   313  0193                     	;# 
   314  0194                     	;# 
   315  0195                     	;# 
   316  0196                     	;# 
   317  0197                     	;# 
   318  0199                     	;# 
   319  019A                     	;# 
   320  019B                     	;# 
   321  019B                     	;# 
   322  019B                     	;# 
   323  019B                     	;# 
   324  019C                     	;# 
   325  019C                     	;# 
   326  019D                     	;# 
   327  019E                     	;# 
   328  019F                     	;# 
   329  020D                     	;# 
   330  0210                     	;# 
   331  0211                     	;# 
   332  0211                     	;# 
   333  0212                     	;# 
   334  0212                     	;# 
   335  0213                     	;# 
   336  0213                     	;# 
   337  0214                     	;# 
   338  0214                     	;# 
   339  0215                     	;# 
   340  0215                     	;# 
   341  0215                     	;# 
   342  0216                     	;# 
   343  0216                     	;# 
   344  0217                     	;# 
   345  0217                     	;# 
   346  0291                     	;# 
   347  0291                     	;# 
   348  0292                     	;# 
   349  0293                     	;# 
   350  0298                     	;# 
   351  0298                     	;# 
   352  0299                     	;# 
   353  029A                     	;# 
   354  0394                     	;# 
   355  0395                     	;# 
   356  0396                     	;# 
   357  0FE4                     	;# 
   358  0FE5                     	;# 
   359  0FE6                     	;# 
   360  0FE7                     	;# 
   361  0FE8                     	;# 
   362  0FE9                     	;# 
   363  0FEA                     	;# 
   364  0FEB                     	;# 
   365  0FED                     	;# 
   366  0FEE                     	;# 
   367  0FEF                     	;# 
   368  0000                     	;# 
   369  0001                     	;# 
   370  0002                     	;# 
   371  0003                     	;# 
   372  0004                     	;# 
   373  0005                     	;# 
   374  0006                     	;# 
   375  0007                     	;# 
   376  0008                     	;# 
   377  0009                     	;# 
   378  000A                     	;# 
   379  000B                     	;# 
   380  000C                     	;# 
   381  000D                     	;# 
   382  000E                     	;# 
   383  0010                     	;# 
   384  0011                     	;# 
   385  0012                     	;# 
   386  0015                     	;# 
   387  0016                     	;# 
   388  0016                     	;# 
   389  0017                     	;# 
   390  0018                     	;# 
   391  0019                     	;# 
   392  001A                     	;# 
   393  001B                     	;# 
   394  001C                     	;# 
   395  008C                     	;# 
   396  008D                     	;# 
   397  008E                     	;# 
   398  0090                     	;# 
   399  0091                     	;# 
   400  0092                     	;# 
   401  0095                     	;# 
   402  0096                     	;# 
   403  0097                     	;# 
   404  0099                     	;# 
   405  009A                     	;# 
   406  009B                     	;# 
   407  009B                     	;# 
   408  009C                     	;# 
   409  009D                     	;# 
   410  009E                     	;# 
   411  010C                     	;# 
   412  010D                     	;# 
   413  010E                     	;# 
   414  0116                     	;# 
   415  0117                     	;# 
   416  011D                     	;# 
   417  018C                     	;# 
   418  018D                     	;# 
   419  018E                     	;# 
   420  0191                     	;# 
   421  0191                     	;# 
   422  0192                     	;# 
   423  0193                     	;# 
   424  0193                     	;# 
   425  0194                     	;# 
   426  0195                     	;# 
   427  0196                     	;# 
   428  0197                     	;# 
   429  0199                     	;# 
   430  019A                     	;# 
   431  019B                     	;# 
   432  019B                     	;# 
   433  019B                     	;# 
   434  019B                     	;# 
   435  019C                     	;# 
   436  019C                     	;# 
   437  019D                     	;# 
   438  019E                     	;# 
   439  019F                     	;# 
   440  020D                     	;# 
   441  0210                     	;# 
   442  0211                     	;# 
   443  0211                     	;# 
   444  0212                     	;# 
   445  0212                     	;# 
   446  0213                     	;# 
   447  0213                     	;# 
   448  0214                     	;# 
   449  0214                     	;# 
   450  0215                     	;# 
   451  0215                     	;# 
   452  0215                     	;# 
   453  0216                     	;# 
   454  0216                     	;# 
   455  0217                     	;# 
   456  0217                     	;# 
   457  0291                     	;# 
   458  0291                     	;# 
   459  0292                     	;# 
   460  0293                     	;# 
   461  0298                     	;# 
   462  0298                     	;# 
   463  0299                     	;# 
   464  029A                     	;# 
   465  0394                     	;# 
   466  0395                     	;# 
   467  0396                     	;# 
   468  0FE4                     	;# 
   469  0FE5                     	;# 
   470  0FE6                     	;# 
   471  0FE7                     	;# 
   472  0FE8                     	;# 
   473  0FE9                     	;# 
   474  0FEA                     	;# 
   475  0FEB                     	;# 
   476  0FED                     	;# 
   477  0FEE                     	;# 
   478  0FEF                     	;# 
   479  0000                     	;# 
   480  0001                     	;# 
   481  0002                     	;# 
   482  0003                     	;# 
   483  0004                     	;# 
   484  0005                     	;# 
   485  0006                     	;# 
   486  0007                     	;# 
   487  0008                     	;# 
   488  0009                     	;# 
   489  000A                     	;# 
   490  000B                     	;# 
   491  000C                     	;# 
   492  000D                     	;# 
   493  000E                     	;# 
   494  0010                     	;# 
   495  0011                     	;# 
   496  0012                     	;# 
   497  0015                     	;# 
   498  0016                     	;# 
   499  0016                     	;# 
   500  0017                     	;# 
   501  0018                     	;# 
   502  0019                     	;# 
   503  001A                     	;# 
   504  001B                     	;# 
   505  001C                     	;# 
   506  008C                     	;# 
   507  008D                     	;# 
   508  008E                     	;# 
   509  0090                     	;# 
   510  0091                     	;# 
   511  0092                     	;# 
   512  0095                     	;# 
   513  0096                     	;# 
   514  0097                     	;# 
   515  0099                     	;# 
   516  009A                     	;# 
   517  009B                     	;# 
   518  009B                     	;# 
   519  009C                     	;# 
   520  009D                     	;# 
   521  009E                     	;# 
   522  010C                     	;# 
   523  010D                     	;# 
   524  010E                     	;# 
   525  0116                     	;# 
   526  0117                     	;# 
   527  011D                     	;# 
   528  018C                     	;# 
   529  018D                     	;# 
   530  018E                     	;# 
   531  0191                     	;# 
   532  0191                     	;# 
   533  0192                     	;# 
   534  0193                     	;# 
   535  0193                     	;# 
   536  0194                     	;# 
   537  0195                     	;# 
   538  0196                     	;# 
   539  0197                     	;# 
   540  0199                     	;# 
   541  019A                     	;# 
   542  019B                     	;# 
   543  019B                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019C                     	;# 
   547  019C                     	;# 
   548  019D                     	;# 
   549  019E                     	;# 
   550  019F                     	;# 
   551  020D                     	;# 
   552  0210                     	;# 
   553  0211                     	;# 
   554  0211                     	;# 
   555  0212                     	;# 
   556  0212                     	;# 
   557  0213                     	;# 
   558  0213                     	;# 
   559  0214                     	;# 
   560  0214                     	;# 
   561  0215                     	;# 
   562  0215                     	;# 
   563  0215                     	;# 
   564  0216                     	;# 
   565  0216                     	;# 
   566  0217                     	;# 
   567  0217                     	;# 
   568  0291                     	;# 
   569  0291                     	;# 
   570  0292                     	;# 
   571  0293                     	;# 
   572  0298                     	;# 
   573  0298                     	;# 
   574  0299                     	;# 
   575  029A                     	;# 
   576  0394                     	;# 
   577  0395                     	;# 
   578  0396                     	;# 
   579  0FE4                     	;# 
   580  0FE5                     	;# 
   581  0FE6                     	;# 
   582  0FE7                     	;# 
   583  0FE8                     	;# 
   584  0FE9                     	;# 
   585  0FEA                     	;# 
   586  0FEB                     	;# 
   587  0FED                     	;# 
   588  0FEE                     	;# 
   589  0FEF                     	;# 
   590  0000                     	;# 
   591  0001                     	;# 
   592  0002                     	;# 
   593  0003                     	;# 
   594  0004                     	;# 
   595  0005                     	;# 
   596  0006                     	;# 
   597  0007                     	;# 
   598  0008                     	;# 
   599  0009                     	;# 
   600  000A                     	;# 
   601  000B                     	;# 
   602  000C                     	;# 
   603  000D                     	;# 
   604  000E                     	;# 
   605  0010                     	;# 
   606  0011                     	;# 
   607  0012                     	;# 
   608  0015                     	;# 
   609  0016                     	;# 
   610  0016                     	;# 
   611  0017                     	;# 
   612  0018                     	;# 
   613  0019                     	;# 
   614  001A                     	;# 
   615  001B                     	;# 
   616  001C                     	;# 
   617  008C                     	;# 
   618  008D                     	;# 
   619  008E                     	;# 
   620  0090                     	;# 
   621  0091                     	;# 
   622  0092                     	;# 
   623  0095                     	;# 
   624  0096                     	;# 
   625  0097                     	;# 
   626  0099                     	;# 
   627  009A                     	;# 
   628  009B                     	;# 
   629  009B                     	;# 
   630  009C                     	;# 
   631  009D                     	;# 
   632  009E                     	;# 
   633  010C                     	;# 
   634  010D                     	;# 
   635  010E                     	;# 
   636  0116                     	;# 
   637  0117                     	;# 
   638  011D                     	;# 
   639  018C                     	;# 
   640  018D                     	;# 
   641  018E                     	;# 
   642  0191                     	;# 
   643  0191                     	;# 
   644  0192                     	;# 
   645  0193                     	;# 
   646  0193                     	;# 
   647  0194                     	;# 
   648  0195                     	;# 
   649  0196                     	;# 
   650  0197                     	;# 
   651  0199                     	;# 
   652  019A                     	;# 
   653  019B                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019B                     	;# 
   657  019C                     	;# 
   658  019C                     	;# 
   659  019D                     	;# 
   660  019E                     	;# 
   661  019F                     	;# 
   662  020D                     	;# 
   663  0210                     	;# 
   664  0211                     	;# 
   665  0211                     	;# 
   666  0212                     	;# 
   667  0212                     	;# 
   668  0213                     	;# 
   669  0213                     	;# 
   670  0214                     	;# 
   671  0214                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0215                     	;# 
   675  0216                     	;# 
   676  0216                     	;# 
   677  0217                     	;# 
   678  0217                     	;# 
   679  0291                     	;# 
   680  0291                     	;# 
   681  0292                     	;# 
   682  0293                     	;# 
   683  0298                     	;# 
   684  0298                     	;# 
   685  0299                     	;# 
   686  029A                     	;# 
   687  0394                     	;# 
   688  0395                     	;# 
   689  0396                     	;# 
   690  0FE4                     	;# 
   691  0FE5                     	;# 
   692  0FE6                     	;# 
   693  0FE7                     	;# 
   694  0FE8                     	;# 
   695  0FE9                     	;# 
   696  0FEA                     	;# 
   697  0FEB                     	;# 
   698  0FED                     	;# 
   699  0FEE                     	;# 
   700  0FEF                     	;# 
   701  0000                     	;# 
   702  0001                     	;# 
   703  0002                     	;# 
   704  0003                     	;# 
   705  0004                     	;# 
   706  0005                     	;# 
   707  0006                     	;# 
   708  0007                     	;# 
   709  0008                     	;# 
   710  0009                     	;# 
   711  000A                     	;# 
   712  000B                     	;# 
   713  000C                     	;# 
   714  000D                     	;# 
   715  000E                     	;# 
   716  0010                     	;# 
   717  0011                     	;# 
   718  0012                     	;# 
   719  0015                     	;# 
   720  0016                     	;# 
   721  0016                     	;# 
   722  0017                     	;# 
   723  0018                     	;# 
   724  0019                     	;# 
   725  001A                     	;# 
   726  001B                     	;# 
   727  001C                     	;# 
   728  008C                     	;# 
   729  008D                     	;# 
   730  008E                     	;# 
   731  0090                     	;# 
   732  0091                     	;# 
   733  0092                     	;# 
   734  0095                     	;# 
   735  0096                     	;# 
   736  0097                     	;# 
   737  0099                     	;# 
   738  009A                     	;# 
   739  009B                     	;# 
   740  009B                     	;# 
   741  009C                     	;# 
   742  009D                     	;# 
   743  009E                     	;# 
   744  010C                     	;# 
   745  010D                     	;# 
   746  010E                     	;# 
   747  0116                     	;# 
   748  0117                     	;# 
   749  011D                     	;# 
   750  018C                     	;# 
   751  018D                     	;# 
   752  018E                     	;# 
   753  0191                     	;# 
   754  0191                     	;# 
   755  0192                     	;# 
   756  0193                     	;# 
   757  0193                     	;# 
   758  0194                     	;# 
   759  0195                     	;# 
   760  0196                     	;# 
   761  0197                     	;# 
   762  0199                     	;# 
   763  019A                     	;# 
   764  019B                     	;# 
   765  019B                     	;# 
   766  019B                     	;# 
   767  019B                     	;# 
   768  019C                     	;# 
   769  019C                     	;# 
   770  019D                     	;# 
   771  019E                     	;# 
   772  019F                     	;# 
   773  020D                     	;# 
   774  0210                     	;# 
   775  0211                     	;# 
   776  0211                     	;# 
   777  0212                     	;# 
   778  0212                     	;# 
   779  0213                     	;# 
   780  0213                     	;# 
   781  0214                     	;# 
   782  0214                     	;# 
   783  0215                     	;# 
   784  0215                     	;# 
   785  0215                     	;# 
   786  0216                     	;# 
   787  0216                     	;# 
   788  0217                     	;# 
   789  0217                     	;# 
   790  0291                     	;# 
   791  0291                     	;# 
   792  0292                     	;# 
   793  0293                     	;# 
   794  0298                     	;# 
   795  0298                     	;# 
   796  0299                     	;# 
   797  029A                     	;# 
   798  0394                     	;# 
   799  0395                     	;# 
   800  0396                     	;# 
   801  0FE4                     	;# 
   802  0FE5                     	;# 
   803  0FE6                     	;# 
   804  0FE7                     	;# 
   805  0FE8                     	;# 
   806  0FE9                     	;# 
   807  0FEA                     	;# 
   808  0FEB                     	;# 
   809  0FED                     	;# 
   810  0FEE                     	;# 
   811  0FEF                     	;# 
   812  0000                     	;# 
   813  0001                     	;# 
   814  0002                     	;# 
   815  0003                     	;# 
   816  0004                     	;# 
   817  0005                     	;# 
   818  0006                     	;# 
   819  0007                     	;# 
   820  0008                     	;# 
   821  0009                     	;# 
   822  000A                     	;# 
   823  000B                     	;# 
   824  000C                     	;# 
   825  000D                     	;# 
   826  000E                     	;# 
   827  0010                     	;# 
   828  0011                     	;# 
   829  0012                     	;# 
   830  0015                     	;# 
   831  0016                     	;# 
   832  0016                     	;# 
   833  0017                     	;# 
   834  0018                     	;# 
   835  0019                     	;# 
   836  001A                     	;# 
   837  001B                     	;# 
   838  001C                     	;# 
   839  008C                     	;# 
   840  008D                     	;# 
   841  008E                     	;# 
   842  0090                     	;# 
   843  0091                     	;# 
   844  0092                     	;# 
   845  0095                     	;# 
   846  0096                     	;# 
   847  0097                     	;# 
   848  0099                     	;# 
   849  009A                     	;# 
   850  009B                     	;# 
   851  009B                     	;# 
   852  009C                     	;# 
   853  009D                     	;# 
   854  009E                     	;# 
   855  010C                     	;# 
   856  010D                     	;# 
   857  010E                     	;# 
   858  0116                     	;# 
   859  0117                     	;# 
   860  011D                     	;# 
   861  018C                     	;# 
   862  018D                     	;# 
   863  018E                     	;# 
   864  0191                     	;# 
   865  0191                     	;# 
   866  0192                     	;# 
   867  0193                     	;# 
   868  0193                     	;# 
   869  0194                     	;# 
   870  0195                     	;# 
   871  0196                     	;# 
   872  0197                     	;# 
   873  0199                     	;# 
   874  019A                     	;# 
   875  019B                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019B                     	;# 
   879  019C                     	;# 
   880  019C                     	;# 
   881  019D                     	;# 
   882  019E                     	;# 
   883  019F                     	;# 
   884  020D                     	;# 
   885  0210                     	;# 
   886  0211                     	;# 
   887  0211                     	;# 
   888  0212                     	;# 
   889  0212                     	;# 
   890  0213                     	;# 
   891  0213                     	;# 
   892  0214                     	;# 
   893  0214                     	;# 
   894  0215                     	;# 
   895  0215                     	;# 
   896  0215                     	;# 
   897  0216                     	;# 
   898  0216                     	;# 
   899  0217                     	;# 
   900  0217                     	;# 
   901  0291                     	;# 
   902  0291                     	;# 
   903  0292                     	;# 
   904  0293                     	;# 
   905  0298                     	;# 
   906  0298                     	;# 
   907  0299                     	;# 
   908  029A                     	;# 
   909  0394                     	;# 
   910  0395                     	;# 
   911  0396                     	;# 
   912  0FE4                     	;# 
   913  0FE5                     	;# 
   914  0FE6                     	;# 
   915  0FE7                     	;# 
   916  0FE8                     	;# 
   917  0FE9                     	;# 
   918  0FEA                     	;# 
   919  0FEB                     	;# 
   920  0FED                     	;# 
   921  0FEE                     	;# 
   922  0FEF                     	;# 
   923  0000                     	;# 
   924  0001                     	;# 
   925  0002                     	;# 
   926  0003                     	;# 
   927  0004                     	;# 
   928  0005                     	;# 
   929  0006                     	;# 
   930  0007                     	;# 
   931  0008                     	;# 
   932  0009                     	;# 
   933  000A                     	;# 
   934  000B                     	;# 
   935  000C                     	;# 
   936  000D                     	;# 
   937  000E                     	;# 
   938  0010                     	;# 
   939  0011                     	;# 
   940  0012                     	;# 
   941  0015                     	;# 
   942  0016                     	;# 
   943  0016                     	;# 
   944  0017                     	;# 
   945  0018                     	;# 
   946  0019                     	;# 
   947  001A                     	;# 
   948  001B                     	;# 
   949  001C                     	;# 
   950  008C                     	;# 
   951  008D                     	;# 
   952  008E                     	;# 
   953  0090                     	;# 
   954  0091                     	;# 
   955  0092                     	;# 
   956  0095                     	;# 
   957  0096                     	;# 
   958  0097                     	;# 
   959  0099                     	;# 
   960  009A                     	;# 
   961  009B                     	;# 
   962  009B                     	;# 
   963  009C                     	;# 
   964  009D                     	;# 
   965  009E                     	;# 
   966  010C                     	;# 
   967  010D                     	;# 
   968  010E                     	;# 
   969  0116                     	;# 
   970  0117                     	;# 
   971  011D                     	;# 
   972  018C                     	;# 
   973  018D                     	;# 
   974  018E                     	;# 
   975  0191                     	;# 
   976  0191                     	;# 
   977  0192                     	;# 
   978  0193                     	;# 
   979  0193                     	;# 
   980  0194                     	;# 
   981  0195                     	;# 
   982  0196                     	;# 
   983  0197                     	;# 
   984  0199                     	;# 
   985  019A                     	;# 
   986  019B                     	;# 
   987  019B                     	;# 
   988  019B                     	;# 
   989  019B                     	;# 
   990  019C                     	;# 
   991  019C                     	;# 
   992  019D                     	;# 
   993  019E                     	;# 
   994  019F                     	;# 
   995  020D                     	;# 
   996  0210                     	;# 
   997  0211                     	;# 
   998  0211                     	;# 
   999  0212                     	;# 
  1000  0212                     	;# 
  1001  0213                     	;# 
  1002  0213                     	;# 
  1003  0214                     	;# 
  1004  0214                     	;# 
  1005  0215                     	;# 
  1006  0215                     	;# 
  1007  0215                     	;# 
  1008  0216                     	;# 
  1009  0216                     	;# 
  1010  0217                     	;# 
  1011  0217                     	;# 
  1012  0291                     	;# 
  1013  0291                     	;# 
  1014  0292                     	;# 
  1015  0293                     	;# 
  1016  0298                     	;# 
  1017  0298                     	;# 
  1018  0299                     	;# 
  1019  029A                     	;# 
  1020  0394                     	;# 
  1021  0395                     	;# 
  1022  0396                     	;# 
  1023  0FE4                     	;# 
  1024  0FE5                     	;# 
  1025  0FE6                     	;# 
  1026  0FE7                     	;# 
  1027  0FE8                     	;# 
  1028  0FE9                     	;# 
  1029  0FEA                     	;# 
  1030  0FEB                     	;# 
  1031  0FED                     	;# 
  1032  0FEE                     	;# 
  1033  0FEF                     	;# 
  1034  0000                     	;# 
  1035  0001                     	;# 
  1036  0002                     	;# 
  1037  0003                     	;# 
  1038  0004                     	;# 
  1039  0005                     	;# 
  1040  0006                     	;# 
  1041  0007                     	;# 
  1042  0008                     	;# 
  1043  0009                     	;# 
  1044  000A                     	;# 
  1045  000B                     	;# 
  1046  000C                     	;# 
  1047  000D                     	;# 
  1048  000E                     	;# 
  1049  0010                     	;# 
  1050  0011                     	;# 
  1051  0012                     	;# 
  1052  0015                     	;# 
  1053  0016                     	;# 
  1054  0016                     	;# 
  1055  0017                     	;# 
  1056  0018                     	;# 
  1057  0019                     	;# 
  1058  001A                     	;# 
  1059  001B                     	;# 
  1060  001C                     	;# 
  1061  008C                     	;# 
  1062  008D                     	;# 
  1063  008E                     	;# 
  1064  0090                     	;# 
  1065  0091                     	;# 
  1066  0092                     	;# 
  1067  0095                     	;# 
  1068  0096                     	;# 
  1069  0097                     	;# 
  1070  0099                     	;# 
  1071  009A                     	;# 
  1072  009B                     	;# 
  1073  009B                     	;# 
  1074  009C                     	;# 
  1075  009D                     	;# 
  1076  009E                     	;# 
  1077  010C                     	;# 
  1078  010D                     	;# 
  1079  010E                     	;# 
  1080  0116                     	;# 
  1081  0117                     	;# 
  1082  011D                     	;# 
  1083  018C                     	;# 
  1084  018D                     	;# 
  1085  018E                     	;# 
  1086  0191                     	;# 
  1087  0191                     	;# 
  1088  0192                     	;# 
  1089  0193                     	;# 
  1090  0193                     	;# 
  1091  0194                     	;# 
  1092  0195                     	;# 
  1093  0196                     	;# 
  1094  0197                     	;# 
  1095  0199                     	;# 
  1096  019A                     	;# 
  1097  019B                     	;# 
  1098  019B                     	;# 
  1099  019B                     	;# 
  1100  019B                     	;# 
  1101  019C                     	;# 
  1102  019C                     	;# 
  1103  019D                     	;# 
  1104  019E                     	;# 
  1105  019F                     	;# 
  1106  020D                     	;# 
  1107  0210                     	;# 
  1108  0211                     	;# 
  1109  0211                     	;# 
  1110  0212                     	;# 
  1111  0212                     	;# 
  1112  0213                     	;# 
  1113  0213                     	;# 
  1114  0214                     	;# 
  1115  0214                     	;# 
  1116  0215                     	;# 
  1117  0215                     	;# 
  1118  0215                     	;# 
  1119  0216                     	;# 
  1120  0216                     	;# 
  1121  0217                     	;# 
  1122  0217                     	;# 
  1123  0291                     	;# 
  1124  0291                     	;# 
  1125  0292                     	;# 
  1126  0293                     	;# 
  1127  0298                     	;# 
  1128  0298                     	;# 
  1129  0299                     	;# 
  1130  029A                     	;# 
  1131  0394                     	;# 
  1132  0395                     	;# 
  1133  0396                     	;# 
  1134  0FE4                     	;# 
  1135  0FE5                     	;# 
  1136  0FE6                     	;# 
  1137  0FE7                     	;# 
  1138  0FE8                     	;# 
  1139  0FE9                     	;# 
  1140  0FEA                     	;# 
  1141  0FEB                     	;# 
  1142  0FED                     	;# 
  1143  0FEE                     	;# 
  1144  0FEF                     	;# 
  1145  0000                     	;# 
  1146  0001                     	;# 
  1147  0002                     	;# 
  1148  0003                     	;# 
  1149  0004                     	;# 
  1150  0005                     	;# 
  1151  0006                     	;# 
  1152  0007                     	;# 
  1153  0008                     	;# 
  1154  0009                     	;# 
  1155  000A                     	;# 
  1156  000B                     	;# 
  1157  000C                     	;# 
  1158  000D                     	;# 
  1159  000E                     	;# 
  1160  0010                     	;# 
  1161  0011                     	;# 
  1162  0012                     	;# 
  1163  0015                     	;# 
  1164  0016                     	;# 
  1165  0016                     	;# 
  1166  0017                     	;# 
  1167  0018                     	;# 
  1168  0019                     	;# 
  1169  001A                     	;# 
  1170  001B                     	;# 
  1171  001C                     	;# 
  1172  008C                     	;# 
  1173  008D                     	;# 
  1174  008E                     	;# 
  1175  0090                     	;# 
  1176  0091                     	;# 
  1177  0092                     	;# 
  1178  0095                     	;# 
  1179  0096                     	;# 
  1180  0097                     	;# 
  1181  0099                     	;# 
  1182  009A                     	;# 
  1183  009B                     	;# 
  1184  009B                     	;# 
  1185  009C                     	;# 
  1186  009D                     	;# 
  1187  009E                     	;# 
  1188  010C                     	;# 
  1189  010D                     	;# 
  1190  010E                     	;# 
  1191  0116                     	;# 
  1192  0117                     	;# 
  1193  011D                     	;# 
  1194  018C                     	;# 
  1195  018D                     	;# 
  1196  018E                     	;# 
  1197  0191                     	;# 
  1198  0191                     	;# 
  1199  0192                     	;# 
  1200  0193                     	;# 
  1201  0193                     	;# 
  1202  0194                     	;# 
  1203  0195                     	;# 
  1204  0196                     	;# 
  1205  0197                     	;# 
  1206  0199                     	;# 
  1207  019A                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019B                     	;# 
  1211  019B                     	;# 
  1212  019C                     	;# 
  1213  019C                     	;# 
  1214  019D                     	;# 
  1215  019E                     	;# 
  1216  019F                     	;# 
  1217  020D                     	;# 
  1218  0210                     	;# 
  1219  0211                     	;# 
  1220  0211                     	;# 
  1221  0212                     	;# 
  1222  0212                     	;# 
  1223  0213                     	;# 
  1224  0213                     	;# 
  1225  0214                     	;# 
  1226  0214                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0215                     	;# 
  1230  0216                     	;# 
  1231  0216                     	;# 
  1232  0217                     	;# 
  1233  0217                     	;# 
  1234  0291                     	;# 
  1235  0291                     	;# 
  1236  0292                     	;# 
  1237  0293                     	;# 
  1238  0298                     	;# 
  1239  0298                     	;# 
  1240  0299                     	;# 
  1241  029A                     	;# 
  1242  0394                     	;# 
  1243  0395                     	;# 
  1244  0396                     	;# 
  1245  0FE4                     	;# 
  1246  0FE5                     	;# 
  1247  0FE6                     	;# 
  1248  0FE7                     	;# 
  1249  0FE8                     	;# 
  1250  0FE9                     	;# 
  1251  0FEA                     	;# 
  1252  0FEB                     	;# 
  1253  0FED                     	;# 
  1254  0FEE                     	;# 
  1255  0FEF                     	;# 
  1256  0000                     	;# 
  1257  0001                     	;# 
  1258  0002                     	;# 
  1259  0003                     	;# 
  1260  0004                     	;# 
  1261  0005                     	;# 
  1262  0006                     	;# 
  1263  0007                     	;# 
  1264  0008                     	;# 
  1265  0009                     	;# 
  1266  000A                     	;# 
  1267  000B                     	;# 
  1268  000C                     	;# 
  1269  000D                     	;# 
  1270  000E                     	;# 
  1271  0010                     	;# 
  1272  0011                     	;# 
  1273  0012                     	;# 
  1274  0015                     	;# 
  1275  0016                     	;# 
  1276  0016                     	;# 
  1277  0017                     	;# 
  1278  0018                     	;# 
  1279  0019                     	;# 
  1280  001A                     	;# 
  1281  001B                     	;# 
  1282  001C                     	;# 
  1283  008C                     	;# 
  1284  008D                     	;# 
  1285  008E                     	;# 
  1286  0090                     	;# 
  1287  0091                     	;# 
  1288  0092                     	;# 
  1289  0095                     	;# 
  1290  0096                     	;# 
  1291  0097                     	;# 
  1292  0099                     	;# 
  1293  009A                     	;# 
  1294  009B                     	;# 
  1295  009B                     	;# 
  1296  009C                     	;# 
  1297  009D                     	;# 
  1298  009E                     	;# 
  1299  010C                     	;# 
  1300  010D                     	;# 
  1301  010E                     	;# 
  1302  0116                     	;# 
  1303  0117                     	;# 
  1304  011D                     	;# 
  1305  018C                     	;# 
  1306  018D                     	;# 
  1307  018E                     	;# 
  1308  0191                     	;# 
  1309  0191                     	;# 
  1310  0192                     	;# 
  1311  0193                     	;# 
  1312  0193                     	;# 
  1313  0194                     	;# 
  1314  0195                     	;# 
  1315  0196                     	;# 
  1316  0197                     	;# 
  1317  0199                     	;# 
  1318  019A                     	;# 
  1319  019B                     	;# 
  1320  019B                     	;# 
  1321  019B                     	;# 
  1322  019B                     	;# 
  1323  019C                     	;# 
  1324  019C                     	;# 
  1325  019D                     	;# 
  1326  019E                     	;# 
  1327  019F                     	;# 
  1328  020D                     	;# 
  1329  0210                     	;# 
  1330  0211                     	;# 
  1331  0211                     	;# 
  1332  0212                     	;# 
  1333  0212                     	;# 
  1334  0213                     	;# 
  1335  0213                     	;# 
  1336  0214                     	;# 
  1337  0214                     	;# 
  1338  0215                     	;# 
  1339  0215                     	;# 
  1340  0215                     	;# 
  1341  0216                     	;# 
  1342  0216                     	;# 
  1343  0217                     	;# 
  1344  0217                     	;# 
  1345  0291                     	;# 
  1346  0291                     	;# 
  1347  0292                     	;# 
  1348  0293                     	;# 
  1349  0298                     	;# 
  1350  0298                     	;# 
  1351  0299                     	;# 
  1352  029A                     	;# 
  1353  0394                     	;# 
  1354  0395                     	;# 
  1355  0396                     	;# 
  1356  0FE4                     	;# 
  1357  0FE5                     	;# 
  1358  0FE6                     	;# 
  1359  0FE7                     	;# 
  1360  0FE8                     	;# 
  1361  0FE9                     	;# 
  1362  0FEA                     	;# 
  1363  0FEB                     	;# 
  1364  0FED                     	;# 
  1365  0FEE                     	;# 
  1366  0FEF                     	;# 
  1367  0000                     	;# 
  1368  0001                     	;# 
  1369  0002                     	;# 
  1370  0003                     	;# 
  1371  0004                     	;# 
  1372  0005                     	;# 
  1373  0006                     	;# 
  1374  0007                     	;# 
  1375  0008                     	;# 
  1376  0009                     	;# 
  1377  000A                     	;# 
  1378  000B                     	;# 
  1379  000C                     	;# 
  1380  000D                     	;# 
  1381  000E                     	;# 
  1382  0010                     	;# 
  1383  0011                     	;# 
  1384  0012                     	;# 
  1385  0015                     	;# 
  1386  0016                     	;# 
  1387  0016                     	;# 
  1388  0017                     	;# 
  1389  0018                     	;# 
  1390  0019                     	;# 
  1391  001A                     	;# 
  1392  001B                     	;# 
  1393  001C                     	;# 
  1394  008C                     	;# 
  1395  008D                     	;# 
  1396  008E                     	;# 
  1397  0090                     	;# 
  1398  0091                     	;# 
  1399  0092                     	;# 
  1400  0095                     	;# 
  1401  0096                     	;# 
  1402  0097                     	;# 
  1403  0099                     	;# 
  1404  009A                     	;# 
  1405  009B                     	;# 
  1406  009B                     	;# 
  1407  009C                     	;# 
  1408  009D                     	;# 
  1409  009E                     	;# 
  1410  010C                     	;# 
  1411  010D                     	;# 
  1412  010E                     	;# 
  1413  0116                     	;# 
  1414  0117                     	;# 
  1415  011D                     	;# 
  1416  018C                     	;# 
  1417  018D                     	;# 
  1418  018E                     	;# 
  1419  0191                     	;# 
  1420  0191                     	;# 
  1421  0192                     	;# 
  1422  0193                     	;# 
  1423  0193                     	;# 
  1424  0194                     	;# 
  1425  0195                     	;# 
  1426  0196                     	;# 
  1427  0197                     	;# 
  1428  0199                     	;# 
  1429  019A                     	;# 
  1430  019B                     	;# 
  1431  019B                     	;# 
  1432  019B                     	;# 
  1433  019B                     	;# 
  1434  019C                     	;# 
  1435  019C                     	;# 
  1436  019D                     	;# 
  1437  019E                     	;# 
  1438  019F                     	;# 
  1439  020D                     	;# 
  1440  0210                     	;# 
  1441  0211                     	;# 
  1442  0211                     	;# 
  1443  0212                     	;# 
  1444  0212                     	;# 
  1445  0213                     	;# 
  1446  0213                     	;# 
  1447  0214                     	;# 
  1448  0214                     	;# 
  1449  0215                     	;# 
  1450  0215                     	;# 
  1451  0215                     	;# 
  1452  0216                     	;# 
  1453  0216                     	;# 
  1454  0217                     	;# 
  1455  0217                     	;# 
  1456  0291                     	;# 
  1457  0291                     	;# 
  1458  0292                     	;# 
  1459  0293                     	;# 
  1460  0298                     	;# 
  1461  0298                     	;# 
  1462  0299                     	;# 
  1463  029A                     	;# 
  1464  0394                     	;# 
  1465  0395                     	;# 
  1466  0396                     	;# 
  1467  0FE4                     	;# 
  1468  0FE5                     	;# 
  1469  0FE6                     	;# 
  1470  0FE7                     	;# 
  1471  0FE8                     	;# 
  1472  0FE9                     	;# 
  1473  0FEA                     	;# 
  1474  0FEB                     	;# 
  1475  0FED                     	;# 
  1476  0FEE                     	;# 
  1477  0FEF                     	;# 
  1478  0000                     	;# 
  1479  0001                     	;# 
  1480  0002                     	;# 
  1481  0003                     	;# 
  1482  0004                     	;# 
  1483  0005                     	;# 
  1484  0006                     	;# 
  1485  0007                     	;# 
  1486  0008                     	;# 
  1487  0009                     	;# 
  1488  000A                     	;# 
  1489  000B                     	;# 
  1490  000C                     	;# 
  1491  000D                     	;# 
  1492  000E                     	;# 
  1493  0010                     	;# 
  1494  0011                     	;# 
  1495  0012                     	;# 
  1496  0015                     	;# 
  1497  0016                     	;# 
  1498  0016                     	;# 
  1499  0017                     	;# 
  1500  0018                     	;# 
  1501  0019                     	;# 
  1502  001A                     	;# 
  1503  001B                     	;# 
  1504  001C                     	;# 
  1505  008C                     	;# 
  1506  008D                     	;# 
  1507  008E                     	;# 
  1508  0090                     	;# 
  1509  0091                     	;# 
  1510  0092                     	;# 
  1511  0095                     	;# 
  1512  0096                     	;# 
  1513  0097                     	;# 
  1514  0099                     	;# 
  1515  009A                     	;# 
  1516  009B                     	;# 
  1517  009B                     	;# 
  1518  009C                     	;# 
  1519  009D                     	;# 
  1520  009E                     	;# 
  1521  010C                     	;# 
  1522  010D                     	;# 
  1523  010E                     	;# 
  1524  0116                     	;# 
  1525  0117                     	;# 
  1526  011D                     	;# 
  1527  018C                     	;# 
  1528  018D                     	;# 
  1529  018E                     	;# 
  1530  0191                     	;# 
  1531  0191                     	;# 
  1532  0192                     	;# 
  1533  0193                     	;# 
  1534  0193                     	;# 
  1535  0194                     	;# 
  1536  0195                     	;# 
  1537  0196                     	;# 
  1538  0197                     	;# 
  1539  0199                     	;# 
  1540  019A                     	;# 
  1541  019B                     	;# 
  1542  019B                     	;# 
  1543  019B                     	;# 
  1544  019B                     	;# 
  1545  019C                     	;# 
  1546  019C                     	;# 
  1547  019D                     	;# 
  1548  019E                     	;# 
  1549  019F                     	;# 
  1550  020D                     	;# 
  1551  0210                     	;# 
  1552  0211                     	;# 
  1553  0211                     	;# 
  1554  0212                     	;# 
  1555  0212                     	;# 
  1556  0213                     	;# 
  1557  0213                     	;# 
  1558  0214                     	;# 
  1559  0214                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0215                     	;# 
  1563  0216                     	;# 
  1564  0216                     	;# 
  1565  0217                     	;# 
  1566  0217                     	;# 
  1567  0291                     	;# 
  1568  0291                     	;# 
  1569  0292                     	;# 
  1570  0293                     	;# 
  1571  0298                     	;# 
  1572  0298                     	;# 
  1573  0299                     	;# 
  1574  029A                     	;# 
  1575  0394                     	;# 
  1576  0395                     	;# 
  1577  0396                     	;# 
  1578  0FE4                     	;# 
  1579  0FE5                     	;# 
  1580  0FE6                     	;# 
  1581  0FE7                     	;# 
  1582  0FE8                     	;# 
  1583  0FE9                     	;# 
  1584  0FEA                     	;# 
  1585  0FEB                     	;# 
  1586  0FED                     	;# 
  1587  0FEE                     	;# 
  1588  0FEF                     	;# 
  1589  0000                     	;# 
  1590  0001                     	;# 
  1591  0002                     	;# 
  1592  0003                     	;# 
  1593  0004                     	;# 
  1594  0005                     	;# 
  1595  0006                     	;# 
  1596  0007                     	;# 
  1597  0008                     	;# 
  1598  0009                     	;# 
  1599  000A                     	;# 
  1600  000B                     	;# 
  1601  000C                     	;# 
  1602  000D                     	;# 
  1603  000E                     	;# 
  1604  0010                     	;# 
  1605  0011                     	;# 
  1606  0012                     	;# 
  1607  0015                     	;# 
  1608  0016                     	;# 
  1609  0016                     	;# 
  1610  0017                     	;# 
  1611  0018                     	;# 
  1612  0019                     	;# 
  1613  001A                     	;# 
  1614  001B                     	;# 
  1615  001C                     	;# 
  1616  008C                     	;# 
  1617  008D                     	;# 
  1618  008E                     	;# 
  1619  0090                     	;# 
  1620  0091                     	;# 
  1621  0092                     	;# 
  1622  0095                     	;# 
  1623  0096                     	;# 
  1624  0097                     	;# 
  1625  0099                     	;# 
  1626  009A                     	;# 
  1627  009B                     	;# 
  1628  009B                     	;# 
  1629  009C                     	;# 
  1630  009D                     	;# 
  1631  009E                     	;# 
  1632  010C                     	;# 
  1633  010D                     	;# 
  1634  010E                     	;# 
  1635  0116                     	;# 
  1636  0117                     	;# 
  1637  011D                     	;# 
  1638  018C                     	;# 
  1639  018D                     	;# 
  1640  018E                     	;# 
  1641  0191                     	;# 
  1642  0191                     	;# 
  1643  0192                     	;# 
  1644  0193                     	;# 
  1645  0193                     	;# 
  1646  0194                     	;# 
  1647  0195                     	;# 
  1648  0196                     	;# 
  1649  0197                     	;# 
  1650  0199                     	;# 
  1651  019A                     	;# 
  1652  019B                     	;# 
  1653  019B                     	;# 
  1654  019B                     	;# 
  1655  019B                     	;# 
  1656  019C                     	;# 
  1657  019C                     	;# 
  1658  019D                     	;# 
  1659  019E                     	;# 
  1660  019F                     	;# 
  1661  020D                     	;# 
  1662  0210                     	;# 
  1663  0211                     	;# 
  1664  0211                     	;# 
  1665  0212                     	;# 
  1666  0212                     	;# 
  1667  0213                     	;# 
  1668  0213                     	;# 
  1669  0214                     	;# 
  1670  0214                     	;# 
  1671  0215                     	;# 
  1672  0215                     	;# 
  1673  0215                     	;# 
  1674  0216                     	;# 
  1675  0216                     	;# 
  1676  0217                     	;# 
  1677  0217                     	;# 
  1678  0291                     	;# 
  1679  0291                     	;# 
  1680  0292                     	;# 
  1681  0293                     	;# 
  1682  0298                     	;# 
  1683  0298                     	;# 
  1684  0299                     	;# 
  1685  029A                     	;# 
  1686  0394                     	;# 
  1687  0395                     	;# 
  1688  0396                     	;# 
  1689  0FE4                     	;# 
  1690  0FE5                     	;# 
  1691  0FE6                     	;# 
  1692  0FE7                     	;# 
  1693  0FE8                     	;# 
  1694  0FE9                     	;# 
  1695  0FEA                     	;# 
  1696  0FEB                     	;# 
  1697  0FED                     	;# 
  1698  0FEE                     	;# 
  1699  0FEF                     	;# 
  1700  0000                     	;# 
  1701  0001                     	;# 
  1702  0002                     	;# 
  1703  0003                     	;# 
  1704  0004                     	;# 
  1705  0005                     	;# 
  1706  0006                     	;# 
  1707  0007                     	;# 
  1708  0008                     	;# 
  1709  0009                     	;# 
  1710  000A                     	;# 
  1711  000B                     	;# 
  1712  000C                     	;# 
  1713  000D                     	;# 
  1714  000E                     	;# 
  1715  0010                     	;# 
  1716  0011                     	;# 
  1717  0012                     	;# 
  1718  0015                     	;# 
  1719  0016                     	;# 
  1720  0016                     	;# 
  1721  0017                     	;# 
  1722  0018                     	;# 
  1723  0019                     	;# 
  1724  001A                     	;# 
  1725  001B                     	;# 
  1726  001C                     	;# 
  1727  008C                     	;# 
  1728  008D                     	;# 
  1729  008E                     	;# 
  1730  0090                     	;# 
  1731  0091                     	;# 
  1732  0092                     	;# 
  1733  0095                     	;# 
  1734  0096                     	;# 
  1735  0097                     	;# 
  1736  0099                     	;# 
  1737  009A                     	;# 
  1738  009B                     	;# 
  1739  009B                     	;# 
  1740  009C                     	;# 
  1741  009D                     	;# 
  1742  009E                     	;# 
  1743  010C                     	;# 
  1744  010D                     	;# 
  1745  010E                     	;# 
  1746  0116                     	;# 
  1747  0117                     	;# 
  1748  011D                     	;# 
  1749  018C                     	;# 
  1750  018D                     	;# 
  1751  018E                     	;# 
  1752  0191                     	;# 
  1753  0191                     	;# 
  1754  0192                     	;# 
  1755  0193                     	;# 
  1756  0193                     	;# 
  1757  0194                     	;# 
  1758  0195                     	;# 
  1759  0196                     	;# 
  1760  0197                     	;# 
  1761  0199                     	;# 
  1762  019A                     	;# 
  1763  019B                     	;# 
  1764  019B                     	;# 
  1765  019B                     	;# 
  1766  019B                     	;# 
  1767  019C                     	;# 
  1768  019C                     	;# 
  1769  019D                     	;# 
  1770  019E                     	;# 
  1771  019F                     	;# 
  1772  020D                     	;# 
  1773  0210                     	;# 
  1774  0211                     	;# 
  1775  0211                     	;# 
  1776  0212                     	;# 
  1777  0212                     	;# 
  1778  0213                     	;# 
  1779  0213                     	;# 
  1780  0214                     	;# 
  1781  0214                     	;# 
  1782  0215                     	;# 
  1783  0215                     	;# 
  1784  0215                     	;# 
  1785  0216                     	;# 
  1786  0216                     	;# 
  1787  0217                     	;# 
  1788  0217                     	;# 
  1789  0291                     	;# 
  1790  0291                     	;# 
  1791  0292                     	;# 
  1792  0293                     	;# 
  1793  0298                     	;# 
  1794  0298                     	;# 
  1795  0299                     	;# 
  1796  029A                     	;# 
  1797  0394                     	;# 
  1798  0395                     	;# 
  1799  0396                     	;# 
  1800  0FE4                     	;# 
  1801  0FE5                     	;# 
  1802  0FE6                     	;# 
  1803  0FE7                     	;# 
  1804  0FE8                     	;# 
  1805  0FE9                     	;# 
  1806  0FEA                     	;# 
  1807  0FEB                     	;# 
  1808  0FED                     	;# 
  1809  0FEE                     	;# 
  1810  0FEF                     	;# 
  1811  0000                     	;# 
  1812  0001                     	;# 
  1813  0002                     	;# 
  1814  0003                     	;# 
  1815  0004                     	;# 
  1816  0005                     	;# 
  1817  0006                     	;# 
  1818  0007                     	;# 
  1819  0008                     	;# 
  1820  0009                     	;# 
  1821  000A                     	;# 
  1822  000B                     	;# 
  1823  000C                     	;# 
  1824  000D                     	;# 
  1825  000E                     	;# 
  1826  0010                     	;# 
  1827  0011                     	;# 
  1828  0012                     	;# 
  1829  0015                     	;# 
  1830  0016                     	;# 
  1831  0016                     	;# 
  1832  0017                     	;# 
  1833  0018                     	;# 
  1834  0019                     	;# 
  1835  001A                     	;# 
  1836  001B                     	;# 
  1837  001C                     	;# 
  1838  008C                     	;# 
  1839  008D                     	;# 
  1840  008E                     	;# 
  1841  0090                     	;# 
  1842  0091                     	;# 
  1843  0092                     	;# 
  1844  0095                     	;# 
  1845  0096                     	;# 
  1846  0097                     	;# 
  1847  0099                     	;# 
  1848  009A                     	;# 
  1849  009B                     	;# 
  1850  009B                     	;# 
  1851  009C                     	;# 
  1852  009D                     	;# 
  1853  009E                     	;# 
  1854  010C                     	;# 
  1855  010D                     	;# 
  1856  010E                     	;# 
  1857  0116                     	;# 
  1858  0117                     	;# 
  1859  011D                     	;# 
  1860  018C                     	;# 
  1861  018D                     	;# 
  1862  018E                     	;# 
  1863  0191                     	;# 
  1864  0191                     	;# 
  1865  0192                     	;# 
  1866  0193                     	;# 
  1867  0193                     	;# 
  1868  0194                     	;# 
  1869  0195                     	;# 
  1870  0196                     	;# 
  1871  0197                     	;# 
  1872  0199                     	;# 
  1873  019A                     	;# 
  1874  019B                     	;# 
  1875  019B                     	;# 
  1876  019B                     	;# 
  1877  019B                     	;# 
  1878  019C                     	;# 
  1879  019C                     	;# 
  1880  019D                     	;# 
  1881  019E                     	;# 
  1882  019F                     	;# 
  1883  020D                     	;# 
  1884  0210                     	;# 
  1885  0211                     	;# 
  1886  0211                     	;# 
  1887  0212                     	;# 
  1888  0212                     	;# 
  1889  0213                     	;# 
  1890  0213                     	;# 
  1891  0214                     	;# 
  1892  0214                     	;# 
  1893  0215                     	;# 
  1894  0215                     	;# 
  1895  0215                     	;# 
  1896  0216                     	;# 
  1897  0216                     	;# 
  1898  0217                     	;# 
  1899  0217                     	;# 
  1900  0291                     	;# 
  1901  0291                     	;# 
  1902  0292                     	;# 
  1903  0293                     	;# 
  1904  0298                     	;# 
  1905  0298                     	;# 
  1906  0299                     	;# 
  1907  029A                     	;# 
  1908  0394                     	;# 
  1909  0395                     	;# 
  1910  0396                     	;# 
  1911  0FE4                     	;# 
  1912  0FE5                     	;# 
  1913  0FE6                     	;# 
  1914  0FE7                     	;# 
  1915  0FE8                     	;# 
  1916  0FE9                     	;# 
  1917  0FEA                     	;# 
  1918  0FEB                     	;# 
  1919  0FED                     	;# 
  1920  0FEE                     	;# 
  1921  0FEF                     	;# 
  1922  0000                     	;# 
  1923  0001                     	;# 
  1924  0002                     	;# 
  1925  0003                     	;# 
  1926  0004                     	;# 
  1927  0005                     	;# 
  1928  0006                     	;# 
  1929  0007                     	;# 
  1930  0008                     	;# 
  1931  0009                     	;# 
  1932  000A                     	;# 
  1933  000B                     	;# 
  1934  000C                     	;# 
  1935  000D                     	;# 
  1936  000E                     	;# 
  1937  0010                     	;# 
  1938  0011                     	;# 
  1939  0012                     	;# 
  1940  0015                     	;# 
  1941  0016                     	;# 
  1942  0016                     	;# 
  1943  0017                     	;# 
  1944  0018                     	;# 
  1945  0019                     	;# 
  1946  001A                     	;# 
  1947  001B                     	;# 
  1948  001C                     	;# 
  1949  008C                     	;# 
  1950  008D                     	;# 
  1951  008E                     	;# 
  1952  0090                     	;# 
  1953  0091                     	;# 
  1954  0092                     	;# 
  1955  0095                     	;# 
  1956  0096                     	;# 
  1957  0097                     	;# 
  1958  0099                     	;# 
  1959  009A                     	;# 
  1960  009B                     	;# 
  1961  009B                     	;# 
  1962  009C                     	;# 
  1963  009D                     	;# 
  1964  009E                     	;# 
  1965  010C                     	;# 
  1966  010D                     	;# 
  1967  010E                     	;# 
  1968  0116                     	;# 
  1969  0117                     	;# 
  1970  011D                     	;# 
  1971  018C                     	;# 
  1972  018D                     	;# 
  1973  018E                     	;# 
  1974  0191                     	;# 
  1975  0191                     	;# 
  1976  0192                     	;# 
  1977  0193                     	;# 
  1978  0193                     	;# 
  1979  0194                     	;# 
  1980  0195                     	;# 
  1981  0196                     	;# 
  1982  0197                     	;# 
  1983  0199                     	;# 
  1984  019A                     	;# 
  1985  019B                     	;# 
  1986  019B                     	;# 
  1987  019B                     	;# 
  1988  019B                     	;# 
  1989  019C                     	;# 
  1990  019C                     	;# 
  1991  019D                     	;# 
  1992  019E                     	;# 
  1993  019F                     	;# 
  1994  020D                     	;# 
  1995  0210                     	;# 
  1996  0211                     	;# 
  1997  0211                     	;# 
  1998  0212                     	;# 
  1999  0212                     	;# 
  2000  0213                     	;# 
  2001  0213                     	;# 
  2002  0214                     	;# 
  2003  0214                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0215                     	;# 
  2007  0216                     	;# 
  2008  0216                     	;# 
  2009  0217                     	;# 
  2010  0217                     	;# 
  2011  0291                     	;# 
  2012  0291                     	;# 
  2013  0292                     	;# 
  2014  0293                     	;# 
  2015  0298                     	;# 
  2016  0298                     	;# 
  2017  0299                     	;# 
  2018  029A                     	;# 
  2019  0394                     	;# 
  2020  0395                     	;# 
  2021  0396                     	;# 
  2022  0FE4                     	;# 
  2023  0FE5                     	;# 
  2024  0FE6                     	;# 
  2025  0FE7                     	;# 
  2026  0FE8                     	;# 
  2027  0FE9                     	;# 
  2028  0FEA                     	;# 
  2029  0FEB                     	;# 
  2030  0FED                     	;# 
  2031  0FEE                     	;# 
  2032  0FEF                     	;# 
  2033  0000                     	;# 
  2034  0001                     	;# 
  2035  0002                     	;# 
  2036  0003                     	;# 
  2037  0004                     	;# 
  2038  0005                     	;# 
  2039  0006                     	;# 
  2040  0007                     	;# 
  2041  0008                     	;# 
  2042  0009                     	;# 
  2043  000A                     	;# 
  2044  000B                     	;# 
  2045  000C                     	;# 
  2046  000D                     	;# 
  2047  000E                     	;# 
  2048  0010                     	;# 
  2049  0011                     	;# 
  2050  0012                     	;# 
  2051  0015                     	;# 
  2052  0016                     	;# 
  2053  0016                     	;# 
  2054  0017                     	;# 
  2055  0018                     	;# 
  2056  0019                     	;# 
  2057  001A                     	;# 
  2058  001B                     	;# 
  2059  001C                     	;# 
  2060  008C                     	;# 
  2061  008D                     	;# 
  2062  008E                     	;# 
  2063  0090                     	;# 
  2064  0091                     	;# 
  2065  0092                     	;# 
  2066  0095                     	;# 
  2067  0096                     	;# 
  2068  0097                     	;# 
  2069  0099                     	;# 
  2070  009A                     	;# 
  2071  009B                     	;# 
  2072  009B                     	;# 
  2073  009C                     	;# 
  2074  009D                     	;# 
  2075  009E                     	;# 
  2076  010C                     	;# 
  2077  010D                     	;# 
  2078  010E                     	;# 
  2079  0116                     	;# 
  2080  0117                     	;# 
  2081  011D                     	;# 
  2082  018C                     	;# 
  2083  018D                     	;# 
  2084  018E                     	;# 
  2085  0191                     	;# 
  2086  0191                     	;# 
  2087  0192                     	;# 
  2088  0193                     	;# 
  2089  0193                     	;# 
  2090  0194                     	;# 
  2091  0195                     	;# 
  2092  0196                     	;# 
  2093  0197                     	;# 
  2094  0199                     	;# 
  2095  019A                     	;# 
  2096  019B                     	;# 
  2097  019B                     	;# 
  2098  019B                     	;# 
  2099  019B                     	;# 
  2100  019C                     	;# 
  2101  019C                     	;# 
  2102  019D                     	;# 
  2103  019E                     	;# 
  2104  019F                     	;# 
  2105  020D                     	;# 
  2106  0210                     	;# 
  2107  0211                     	;# 
  2108  0211                     	;# 
  2109  0212                     	;# 
  2110  0212                     	;# 
  2111  0213                     	;# 
  2112  0213                     	;# 
  2113  0214                     	;# 
  2114  0214                     	;# 
  2115  0215                     	;# 
  2116  0215                     	;# 
  2117  0215                     	;# 
  2118  0216                     	;# 
  2119  0216                     	;# 
  2120  0217                     	;# 
  2121  0217                     	;# 
  2122  0291                     	;# 
  2123  0291                     	;# 
  2124  0292                     	;# 
  2125  0293                     	;# 
  2126  0298                     	;# 
  2127  0298                     	;# 
  2128  0299                     	;# 
  2129  029A                     	;# 
  2130  0394                     	;# 
  2131  0395                     	;# 
  2132  0396                     	;# 
  2133  0FE4                     	;# 
  2134  0FE5                     	;# 
  2135  0FE6                     	;# 
  2136  0FE7                     	;# 
  2137  0FE8                     	;# 
  2138  0FE9                     	;# 
  2139  0FEA                     	;# 
  2140  0FEB                     	;# 
  2141  0FED                     	;# 
  2142  0FEE                     	;# 
  2143  0FEF                     	;# 
  2144                           
  2145                           	psect	idataBANK4
  2146  1237                     __pidataBANK4:	
  2147                           
  2148                           ;initializer for __product
  2149  1237  3463               	retlw	99
  2150  1238  3402               	retlw	2
  2151  1239  3400               	retlw	0
  2152  123A  3400               	retlw	0
  2153  123B  3400               	retlw	0
  2154  123C  3400               	retlw	0
  2155  123D  3400               	retlw	0
  2156  123E  3400               	retlw	0
  2157  123F  3400               	retlw	0
  2158  1240  3400               	retlw	0
  2159  1241  3400               	retlw	0
  2160  1242  3400               	retlw	0
  2161  1243  34FF               	retlw	255
  2162  1244  34FF               	retlw	255
  2163  1245  34FF               	retlw	255
  2164  1246  3400               	retlw	0
  2165  1247  3400               	retlw	0
  2166  1248  3400               	retlw	0
  2167  1249  3400               	retlw	0
  2168  124A  3400               	retlw	0
  2169  124B  3400               	retlw	0
  2170  124C  3400               	retlw	0
  2171  124D  3400               	retlw	0
  2172  124E  3400               	retlw	0
  2173  124F  3400               	retlw	0
  2174  1250  3400               	retlw	0
  2175  1251  3400               	retlw	0
  2176  1252  3400               	retlw	0
  2177  1253  3400               	retlw	0
  2178  1254  3400               	retlw	0
  2179  1255  3400               	retlw	0
  2180  1256  3400               	retlw	0
  2181                           
  2182                           	psect	stringtext
  2183  1000                     __pstringtext:	
  2184  1000                     _CC2500_registers_address:	
  2185  1000  3403               	retlw	3
  2186  1001  3416               	retlw	22
  2187  1002  3417               	retlw	23
  2188  1003  341E               	retlw	30
  2189  1004  341F               	retlw	31
  2190  1005  3420               	retlw	32
  2191  1006  342A               	retlw	42
  2192  1007  342B               	retlw	43
  2193  1008  340B               	retlw	11
  2194  1009  340C               	retlw	12
  2195  100A  340D               	retlw	13
  2196  100B  340E               	retlw	14
  2197  100C  340F               	retlw	15
  2198  100D  3410               	retlw	16
  2199  100E  3411               	retlw	17
  2200  100F  3412               	retlw	18
  2201  1010  3413               	retlw	19
  2202  1011  3414               	retlw	20
  2203  1012  340A               	retlw	10
  2204  1013  3415               	retlw	21
  2205  1014  3421               	retlw	33
  2206  1015  3422               	retlw	34
  2207  1016  3418               	retlw	24
  2208  1017  3419               	retlw	25
  2209  1018  341A               	retlw	26
  2210  1019  341B               	retlw	27
  2211  101A  341C               	retlw	28
  2212  101B  341D               	retlw	29
  2213  101C  3423               	retlw	35
  2214  101D  3424               	retlw	36
  2215  101E  3425               	retlw	37
  2216  101F  3426               	retlw	38
  2217  1020  3429               	retlw	41
  2218  1021  342C               	retlw	44
  2219  1022  342D               	retlw	45
  2220  1023  342E               	retlw	46
  2221  1024  3400               	retlw	0
  2222  1025  3401               	retlw	1
  2223  1026  3402               	retlw	2
  2224  1027  3407               	retlw	7
  2225  1028  3408               	retlw	8
  2226  1029  3409               	retlw	9
  2227  102A  3406               	retlw	6
  2228  102B  3404               	retlw	4
  2229  102C  3405               	retlw	5
  2230  102D  3427               	retlw	39
  2231  102E  3428               	retlw	40
  2232  102F                     __end_of_CC2500_registers_address:	
  2233  102F                     _CC2500_rfSettings:	
  2234  102F  3407               	retlw	7
  2235  1030  3407               	retlw	7
  2236  1031  3430               	retlw	48
  2237  1032  3487               	retlw	135
  2238  1033  346B               	retlw	107
  2239  1034  34F8               	retlw	248
  2240  1035  347F               	retlw	127
  2241  1036  343F               	retlw	63
  2242  1037  3409               	retlw	9
  2243  1038  3400               	retlw	0
  2244  1039  345C               	retlw	92
  2245  103A  34A7               	retlw	167
  2246  103B  3462               	retlw	98
  2247  103C  3486               	retlw	134
  2248  103D  3483               	retlw	131
  2249  103E  3403               	retlw	3
  2250  103F  3422               	retlw	34
  2251  1040  34F8               	retlw	248
  2252  1041  3400               	retlw	0
  2253  1042  3444               	retlw	68
  2254  1043  34B6               	retlw	182
  2255  1044  3410               	retlw	16
  2256  1045  3418               	retlw	24
  2257  1046  341D               	retlw	29
  2258  1047  341C               	retlw	28
  2259  1048  34C7               	retlw	199
  2260  1049  3400               	retlw	0
  2261  104A  34B2               	retlw	178
  2262  104B  34EA               	retlw	234
  2263  104C  340A               	retlw	10
  2264  104D  3400               	retlw	0
  2265  104E  3411               	retlw	17
  2266  104F  3459               	retlw	89
  2267  1050  3488               	retlw	136
  2268  1051  3431               	retlw	49
  2269  1052  340B               	retlw	11
  2270  1053  342F               	retlw	47
  2271  1054  342E               	retlw	46
  2272  1055  3406               	retlw	6
  2273  1056  3404               	retlw	4
  2274  1057  3405               	retlw	5
  2275  1058  3400               	retlw	0
  2276  1059  3430               	retlw	48
  2277  105A  34D3               	retlw	211
  2278  105B  3491               	retlw	145
  2279  105C  3441               	retlw	65
  2280  105D  3400               	retlw	0
  2281  105E                     __end_of_CC2500_rfSettings:	
  2282  105E                     _CC2500_patable_vaule:	
  2283  105E  34FE               	retlw	254
  2284  105F  34FE               	retlw	254
  2285  1060  34FE               	retlw	254
  2286  1061  34FE               	retlw	254
  2287  1062  34FE               	retlw	254
  2288  1063  34FE               	retlw	254
  2289  1064  34FE               	retlw	254
  2290  1065  34FE               	retlw	254
  2291  1066                     __end_of_CC2500_patable_vaule:	
  2292                           
  2293                           	psect	nvCOMMON
  2294  0079                     __pnvCOMMON:	
  2295  0079                     _product:	
  2296  0079                     	ds	1
  2297  000C                     _PORTA	set	12
  2298  000D                     _PORTB	set	13
  2299  000E                     _PORTC	set	14
  2300  0018                     _T1CON	set	24
  2301  0017                     _TMR1H	set	23
  2302  0016                     _TMR1L	set	22
  2303  005F                     _GIE	set	95
  2304  005B                     _IOCIE	set	91
  2305  0058                     _IOCIF	set	88
  2306  005E                     _PEIE	set	94
  2307  0060                     _RA0	set	96
  2308  0063                     _RA3	set	99
  2309  0064                     _RA4	set	100
  2310  0066                     _RA6	set	102
  2311  0067                     _RA7	set	103
  2312  0068                     _RB0	set	104
  2313  0069                     _RB1	set	105
  2314  006A                     _RB2	set	106
  2315  006B                     _RB3	set	107
  2316  006C                     _RB4	set	108
  2317  006D                     _RB5	set	109
  2318  0070                     _RC0	set	112
  2319  0071                     _RC1	set	113
  2320  0072                     _RC2	set	114
  2321  0074                     _RC4	set	116
  2322  0075                     _RC5	set	117
  2323  0077                     _RC7	set	119
  2324  0088                     _TMR1IF	set	136
  2325  009D                     _ADCON0	set	157
  2326  009E                     _ADCON1	set	158
  2327  009C                     _ADRESH	set	156
  2328  009B                     _ADRESL	set	155
  2329  0099                     _OSCCON	set	153
  2330  008C                     _TRISA	set	140
  2331  008D                     _TRISB	set	141
  2332  008E                     _TRISC	set	142
  2333  0097                     _WDTCON	set	151
  2334  04E9                     _GO_nDONE	set	1257
  2335  0488                     _TMR1IE	set	1160
  2336  0117                     _FVRCON	set	279
  2337  010C                     _LATA	set	268
  2338  010D                     _LATB	set	269
  2339  010E                     _LATC	set	270
  2340  018C                     _ANSELA	set	396
  2341  018D                     _ANSELB	set	397
  2342  018E                     _ANSELC	set	398
  2343  0192                     _PMADRH	set	402
  2344  0191                     _PMADRL	set	401
  2345  0196                     _PMCON2	set	406
  2346  0194                     _PMDATH	set	404
  2347  0193                     _PMDATL	set	403
  2348  0CAE                     _CFGS	set	3246
  2349  0CAC                     _FREE	set	3244
  2350  0CAD                     _LWLO	set	3245
  2351  0CA8                     _RD	set	3240
  2352  0CA9                     _WR	set	3241
  2353  0CAA                     _WREN	set	3242
  2354  1069                     _WPUB1	set	4201
  2355  106A                     _WPUB2	set	4202
  2356  0396                     _IOCBF	set	918
  2357  0395                     _IOCBN	set	917
  2358  0394                     _IOCBP	set	916
  2359  1CB2                     _IOCBF2	set	7346
  2360                           
  2361                           ; #config settings
  2362  0000                     
  2363                           	psect	cinit
  2364  0015                     start_initialization:	
  2365  0015                     __initialization:	
  2366                           
  2367                           ; Clear objects allocated to BITCOMMON
  2368  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2369                           
  2370                           ; Clear objects allocated to COMMON
  2371  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2372  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2373  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2374                           
  2375                           ; Clear objects allocated to BANK1
  2376  0019  30A0               	movlw	low __pbssBANK1
  2377  001A  0084               	movwf	4
  2378  001B  3000               	movlw	high __pbssBANK1
  2379  001C  0085               	movwf	5
  2380  001D  3048               	movlw	72
  2381  001E  319E  2614  3180   	fcall	clear_ram0
  2382                           
  2383                           ; Clear objects allocated to BANK2
  2384  0021  3020               	movlw	low __pbssBANK2
  2385  0022  0084               	movwf	4
  2386  0023  3001               	movlw	high __pbssBANK2
  2387  0024  0085               	movwf	5
  2388  0025  3050               	movlw	80
  2389  0026  319E  2614  3180   	fcall	clear_ram0
  2390                           
  2391                           ; Clear objects allocated to BANK3
  2392  0029  30A0               	movlw	low __pbssBANK3
  2393  002A  0084               	movwf	4
  2394  002B  3001               	movlw	high __pbssBANK3
  2395  002C  0085               	movwf	5
  2396  002D  3045               	movlw	69
  2397  002E  319E  2614  3180   	fcall	clear_ram0
  2398                           
  2399                           ; Initialize objects allocated to BANK4
  2400  0031  3037               	movlw	low __pidataBANK4
  2401  0032  0084               	movwf	4
  2402  0033  3092               	movlw	(high __pidataBANK4)| (0+128)
  2403  0034  0085               	movwf	5
  2404  0035  3020               	movlw	low __pdataBANK4
  2405  0036  0086               	movwf	6
  2406  0037  3002               	movlw	high __pdataBANK4
  2407  0038  0087               	movwf	7
  2408  0039  3020               	movlw	32
  2409  003A  319E  260E         	fcall	init_ram
  2410  003C                     end_of_initialization:	
  2411                           ;End of C runtime variable initialization code
  2412                           
  2413  003C                     __end_of__initialization:	
  2414  003C  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2415  003D  0020               	movlb	0
  2416  003E  3188  2859         	ljmp	_main	;jump to C main() function
  2417                           
  2418                           	psect	bitbssCOMMON
  2419  03C0                     __pbitbssCOMMON:	
  2420  03C0                     _Receive_OK:	
  2421  03C0                     	ds	1
  2422  03C1                     _Transceive_OK:	
  2423  03C1                     	ds	1
  2424                           
  2425                           	psect	bssCOMMON
  2426  0075                     __pbssCOMMON:	
  2427  0075                     _DimmerLights:	
  2428  0075                     	ds	1
  2429  0076                     _DimmerLightsIntr:	
  2430  0076                     	ds	1
  2431  0077                     _Sw:	
  2432  0077                     	ds	1
  2433                           
  2434                           	psect	bssBANK1
  2435  00A0                     __pbssBANK1:	
  2436  00A0                     _myMain:	
  2437  00A0                     	ds	14
  2438  00AE                     _Buz1:	
  2439  00AE                     	ds	12
  2440  00BA                     _RF1:	
  2441  00BA                     	ds	12
  2442  00C6                     _WDT:	
  2443  00C6                     	ds	2
  2444  00C8                     _CRC:	
  2445  00C8                     	ds	1
  2446  00C9                     _DelayOff:	
  2447  00C9                     	ds	1
  2448  00CA                     _DimmerLights11:	
  2449  00CA                     	ds	1
  2450  00CB                     _DimmerLights22:	
  2451  00CB                     	ds	1
  2452  00CC                     _DimmerLightsIntrIOC:	
  2453  00CC                     	ds	1
  2454  00CD                     _LED:	
  2455  00CD                     	ds	1
  2456  00CE                     _RSSI:	
  2457  00CE                     	ds	1
  2458  00CF                     _Rx_Length:	
  2459  00CF                     	ds	1
  2460  00D0                     _SPI0Buffer:	
  2461  00D0                     	ds	1
  2462  00D1                     _SwDetect:	
  2463  00D1                     	ds	1
  2464  00D2                     _Tx_Length:	
  2465  00D2                     	ds	1
  2466  00D3                     _r_address:	
  2467  00D3                     	ds	1
  2468  00D4                     _r_data:	
  2469  00D4                     	ds	1
  2470  00D5                     _s_data:	
  2471  00D5                     	ds	1
  2472  00D6                     _Temp:	
  2473  00D6                     	ds	18
  2474                           
  2475                           	psect	bssBANK2
  2476  0120                     __pbssBANK2:	
  2477  0120                     _RF_Data:	
  2478  0120                     	ds	30
  2479  013E                     _Dimmer:	
  2480  013E                     	ds	3
  2481  0141                     _Timer1:	
  2482  0141                     	ds	3
  2483  0144                     _RF_Count:	
  2484  0144                     	ds	2
  2485  0146                     _DimmerLights1:	
  2486  0146                     	ds	17
  2487  0157                     _DimmerLights2:	
  2488  0157                     	ds	17
  2489  0168                     _VarErrLED:	
  2490  0168                     	ds	4
  2491  016C                     _VarLED1:	
  2492  016C                     	ds	4
  2493                           
  2494                           	psect	bssBANK3
  2495  01A0                     __pbssBANK3:	
  2496  01A0                     _Memory:	
  2497  01A0                     	ds	37
  2498  01C5                     _Sw1:	
  2499  01C5                     	ds	9
  2500  01CE                     _Sw2:	
  2501  01CE                     	ds	9
  2502  01D7                     _DlySw1:	
  2503  01D7                     	ds	5
  2504  01DC                     _DlySw2:	
  2505  01DC                     	ds	5
  2506  01E1                     _VarLED2:	
  2507  01E1                     	ds	4
  2508                           
  2509                           	psect	dataBANK4
  2510  0220                     __pdataBANK4:	
  2511  0220                     __product:	
  2512  0220                     	ds	32
  2513                           
  2514                           	psect	clrtext
  2515  1E14                     clear_ram0:	
  2516                           ;	Called with FSR0 containing the base address, and
  2517                           ;	WREG with the size to clear
  2518                           
  2519  1E14  0064               	clrwdt	;clear the watchdog before getting into this loop
  2520  1E15                     clrloop0:	
  2521  1E15  0180               	clrf	0	;clear RAM location pointed to by FSR
  2522  1E16  3101               	addfsr 0,1
  2523  1E17  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2524  1E18  2E15               	goto	clrloop0	;have we reached the end yet?
  2525  1E19  3400               	retlw	0	;all done for this memory range, return
  2526                           
  2527                           	psect	inittext
  2528  1E0E                     init_ram:	
  2529  1E0E  00FE               	movwf	126
  2530  1E0F                     initloop:	
  2531  1E0F  0012               	moviw fsr0++
  2532  1E10  001E               	movwi fsr1++
  2533  1E11  0BFE               	decfsz	126,f
  2534  1E12  2E0F               	goto	initloop
  2535  1E13  3400               	retlw	0
  2536                           
  2537                           	psect	cstackBANK3
  2538  01E5                     __pcstackBANK3:	
  2539  01E5                     setRF_Main@loop_f:	
  2540                           
  2541                           ; 1 bytes @ 0x0
  2542  01E5                     	ds	1
  2543  01E6                     setRF_Main@Receive_OK:	
  2544                           
  2545                           ; 1 bytes @ 0x1
  2546  01E6                     	ds	1
  2547  01E7                     setRF_Main@error:	
  2548                           
  2549                           ; 1 bytes @ 0x2
  2550  01E7                     	ds	1
  2551  01E8                     ?_main:	
  2552  01E8                     main@argc:	
  2553                           ; 2 bytes @ 0x3
  2554                           
  2555                           
  2556                           ; 2 bytes @ 0x3
  2557  01E8                     	ds	2
  2558  01EA                     main@argv:	
  2559                           
  2560                           ; 2 bytes @ 0x5
  2561  01EA                     	ds	2
  2562                           
  2563                           	psect	cstackBANK1
  2564  00E8                     __pcstackBANK1:	
  2565  00E8                     setDimmerLights_ErrorClose@count:	
  2566  00E8                     Exception_Main@count:	
  2567                           ; 1 bytes @ 0x0
  2568                           
  2569                           
  2570                           ; 1 bytes @ 0x0
  2571  00E8                     	ds	1
  2572  00E9                     setDimmerLights_ErrorClose@lights:	
  2573  00E9                     Exception_Main@error:	
  2574                           ; 1 bytes @ 0x1
  2575                           
  2576                           
  2577                           ; 1 bytes @ 0x1
  2578  00E9                     	ds	1
  2579  00EA                     Exception_Main@lights:	
  2580  00EA                     setDimmerLights_ErrorClose@i:	
  2581                           ; 1 bytes @ 0x2
  2582                           
  2583                           
  2584                           ; 2 bytes @ 0x2
  2585  00EA                     	ds	1
  2586  00EB                     Exception_Main@i:	
  2587                           
  2588                           ; 2 bytes @ 0x3
  2589  00EB                     	ds	1
  2590  00EC                     getRxData@error:	
  2591                           
  2592                           ; 1 bytes @ 0x4
  2593  00EC                     	ds	1
  2594  00ED                     ??_setRF_Main:	
  2595                           
  2596                           ; 0 bytes @ 0x5
  2597  00ED                     	ds	1
  2598                           
  2599                           	psect	cstackCOMMON
  2600  0070                     __pcstackCOMMON:	
  2601  0070                     ?_Timeout_Counter:	
  2602  0070                     ?_set_TimeoutCleared:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_WriteByte:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_WriteCommand:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_ReadStatus:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_ReadByte:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_PowerRST:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_InitSetREG:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_InitPATable:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_ClearTXFIFO:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_ClearRXFIFO:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_FrequencyCabr:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_SIDLEMode:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_DlyOff_Initialization:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_DlyOff_Main:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setDimmerLights_ErrorClose:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setDimmerLights_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setDimmerLights_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_Line:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setTxData:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setLED_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setLED_Main:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Fosc_Set:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_IO_Set:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_TMR1_Set:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_ADC_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_IOC_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_WDT_Set:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_IOC_ISR:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_TMR1_ISR:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_Flash_Memory_Write:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_Flash_Memory_Modify:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_WDT_Clearing:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_myMain_Initialization:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Temp_Initialization:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Switch_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_RF_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_getTemp_AD:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_my_MainTimer:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Temp_Main:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Switch_Main:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_RF_Main:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Exception_Main:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setTemp_Initialization:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setTemp_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setRF_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_setRF_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_RF_RxDisable:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_getRxData:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setLog_Code:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setControl_Lights_Table:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setRFSW_Control:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setRFSW_AdjControl:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setRF_DimmerValue:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setSw_Initialization:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_setSw_Main:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_Buzzer_Initialization:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_Buzzer_Main:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_CC2500_TxData:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_CC2500_RxData:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_CC2500_PowerOnInitial:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_DelayOffPointSelect:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_DelayOff_Initialization:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_DelayOff_Main:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DimmerIntrIOCPointSelect:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ??_DimmerIntrIOCPointSelect:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_DimmerIntrPointSelect:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ??_DimmerIntrPointSelect:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setDimmerLights_IntrControl:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DimmerLightsPointSelect:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DimmerLights_Initialization:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_setDimmerLights_SwOn:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_setDimmerLights_SwOff:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_setDimmerLights_AdjOn:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerLights_Main:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_setDimmerLights_AdjRF:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_LedPointSelect:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_LED_Initialization:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_LED_Main:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_Mcu_Initialization:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_ISR:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_setDimmerReClock:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_Flash_Memory_Initialization:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_Flash_Memory_Main:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_Flash_Memory_Unlock:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_Flash_Memory_Erasing:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_setMemory_Modify:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_setMemory_LoopSave:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_WDT_Main:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_setRF_Learn:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_TouchPower:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_SwPointSelect:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_DelayTimejudge:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_getDimmerLights_Allow_Condition:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0070                     ?_setPercentValue:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_getPercentValue:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_Flash_Memory_Read:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getMain_LightsStatus:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getRF_KeyStatus:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getSw_KeyStatus:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getDelayOff_GO:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getDimmerLights_Line:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getDimmerLights_Status:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getMain_All_Error_Status:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914                           
  2915                           ; 1 bytes @ 0x0
  2916  0070                     	ds	1
  2917  0071                     DimmerIntrIOCPointSelect@lights:	
  2918  0071                     DimmerIntrPointSelect@lights:	
  2919                           ; 1 bytes @ 0x1
  2920                           
  2921                           
  2922                           ; 1 bytes @ 0x1
  2923  0071                     	ds	1
  2924  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2925  0072                     ??_setDimmerLights_IntrControl:	
  2926                           ; 0 bytes @ 0x2
  2927                           
  2928  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2929                           ; 0 bytes @ 0x2
  2930                           
  2931                           
  2932                           ; 1 bytes @ 0x2
  2933  0072                     	ds	1
  2934  0073                     ??_IOC_ISR:	
  2935  0073                     ??_setDimmerReClock:	
  2936                           ; 0 bytes @ 0x3
  2937                           
  2938  0073                     setDimmerLights_IntrControl@lights:	
  2939                           ; 0 bytes @ 0x3
  2940                           
  2941                           
  2942                           ; 1 bytes @ 0x3
  2943  0073                     	ds	1
  2944  0074                     ??_TMR1_ISR:	
  2945  0074                     ??_ISR:	
  2946                           ; 0 bytes @ 0x4
  2947                           
  2948                           
  2949                           ; 0 bytes @ 0x4
  2950  0074                     	ds	1
  2951                           
  2952                           	psect	cstackBANK0
  2953  0020                     __pcstackBANK0:	
  2954  0020                     ??_Timeout_Counter:	
  2955  0020                     ??_set_TimeoutCleared:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0020                     ??_CC2500_WriteByte:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0020                     ??_CC2500_ReadByte:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0020                     ?_DelayTime_1us:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0020                     ??_getDimmerLights_Allow_Condition:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_setDimmerLights_Line:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_setTxData:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_Fosc_Set:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_IO_Set:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_TMR1_Set:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_ADC_Set:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ??_IOC_Set:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ??_WDT_Set:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_Flash_Memory_Read:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ?_setMemory_Data:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_Flash_Memory_Write:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_WDT_Clearing:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ??_myMain_Initialization:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ??_Temp_Initialization:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ??_setTemp_Initialization:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_setRF_Initialization:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_getRF_KeyStatus:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_getSw_KeyStatus:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_Buzzer_Initialization:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_Buzzer_Main:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_DelayOffPointSelect:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_DimmerLightsPointSelect:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_getDimmerLights_Line:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_LedPointSelect:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_Flash_Memory_Unlock:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_Flash_Memory_Erasing:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_setMemory_Modify:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_setMemory_LoopSave:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_WDT_Main:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_getMain_All_Error_Status:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_setRF_Learn:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_TouchPower:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_SwPointSelect:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ?___bmul:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ?_getBuz_GO:	
  3073                           ; 1 bytes @ 0x0
  3074                           
  3075  0020                     ?_getAD:	
  3076                           ; 2 bytes @ 0x0
  3077                           
  3078  0020                     ?___awdiv:	
  3079                           ; 2 bytes @ 0x0
  3080                           
  3081  0020                     ?___ftpack:	
  3082                           ; 2 bytes @ 0x0
  3083                           
  3084  0020                     setDimmerLights_Line@lights:	
  3085                           ; 3 bytes @ 0x0
  3086                           
  3087  0020                     getAD@adcon1:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090  0020                     setMemory_Data@data:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093  0020                     ___bmul@multiplicand:	
  3094                           ; 1 bytes @ 0x0
  3095                           
  3096  0020                     DelayTime_1us@count:	
  3097                           ; 1 bytes @ 0x0
  3098                           
  3099  0020                     ___awdiv@divisor:	
  3100                           ; 2 bytes @ 0x0
  3101                           
  3102  0020                     ___ftpack@arg:	
  3103                           ; 2 bytes @ 0x0
  3104                           
  3105                           
  3106                           ; 3 bytes @ 0x0
  3107  0020                     	ds	1
  3108  0021                     ??_setMemory_Data:	
  3109  0021                     ??_RF_Initialization:	
  3110                           ; 0 bytes @ 0x1
  3111                           
  3112  0021                     ??_Mcu_Initialization:	
  3113                           ; 0 bytes @ 0x1
  3114                           
  3115  0021                     ??___bmul:	
  3116                           ; 0 bytes @ 0x1
  3117                           
  3118  0021                     CC2500_WriteByte@loop_a:	
  3119                           ; 0 bytes @ 0x1
  3120                           
  3121  0021                     CC2500_ReadByte@loop_b:	
  3122                           ; 1 bytes @ 0x1
  3123                           
  3124  0021                     DelayOffPointSelect@sw:	
  3125                           ; 1 bytes @ 0x1
  3126                           
  3127  0021                     DimmerLightsPointSelect@lights:	
  3128                           ; 1 bytes @ 0x1
  3129                           
  3130  0021                     _getDimmerLights_Allow_Condition$2146:	
  3131                           ; 1 bytes @ 0x1
  3132                           
  3133  0021                     getDimmerLights_Line@line:	
  3134                           ; 1 bytes @ 0x1
  3135                           
  3136  0021                     LedPointSelect@led:	
  3137                           ; 1 bytes @ 0x1
  3138                           
  3139  0021                     Flash_Memory_Read@i:	
  3140                           ; 1 bytes @ 0x1
  3141                           
  3142  0021                     Flash_Memory_Write@i:	
  3143                           ; 1 bytes @ 0x1
  3144                           
  3145  0021                     setMemory_Modify@command:	
  3146                           ; 1 bytes @ 0x1
  3147                           
  3148  0021                     setMemory_LoopSave@command:	
  3149                           ; 1 bytes @ 0x1
  3150                           
  3151  0021                     getMain_All_Error_Status@command:	
  3152                           ; 1 bytes @ 0x1
  3153                           
  3154  0021                     setRF_Learn@command:	
  3155                           ; 1 bytes @ 0x1
  3156                           
  3157  0021                     getRF_KeyStatus@key:	
  3158                           ; 1 bytes @ 0x1
  3159                           
  3160  0021                     SwPointSelect@sw:	
  3161                           ; 1 bytes @ 0x1
  3162                           
  3163  0021                     _getSw_KeyStatus$5696:	
  3164                           ; 1 bytes @ 0x1
  3165                           
  3166                           
  3167                           ; 1 bytes @ 0x1
  3168  0021                     	ds	1
  3169  0022                     ??_CC2500_WriteCommand:	
  3170  0022                     ??_CC2500_ReadStatus:	
  3171                           ; 0 bytes @ 0x2
  3172                           
  3173  0022                     ??_DelayTime_1us:	
  3174                           ; 0 bytes @ 0x2
  3175                           
  3176  0022                     ?_CC2500_WriteREG:	
  3177                           ; 0 bytes @ 0x2
  3178                           
  3179  0022                     ??_DlyOff_Initialization:	
  3180                           ; 0 bytes @ 0x2
  3181                           
  3182  0022                     ??_setDimmerLights_Initialization:	
  3183                           ; 0 bytes @ 0x2
  3184                           
  3185  0022                     ?_setLED:	
  3186                           ; 0 bytes @ 0x2
  3187                           
  3188  0022                     ??_setLED_Main:	
  3189                           ; 0 bytes @ 0x2
  3190                           
  3191  0022                     ??_getBuz_GO:	
  3192                           ; 0 bytes @ 0x2
  3193                           
  3194  0022                     ??_getDelayOff_GO:	
  3195                           ; 0 bytes @ 0x2
  3196                           
  3197  0022                     ??_getDimmerLights_Status:	
  3198                           ; 0 bytes @ 0x2
  3199                           
  3200  0022                     CC2500_WriteREG@value:	
  3201                           ; 0 bytes @ 0x2
  3202                           
  3203  0022                     DlyOff_Initialization@sw:	
  3204                           ; 1 bytes @ 0x2
  3205                           
  3206  0022                     getDelayOff_GO@sw:	
  3207                           ; 1 bytes @ 0x2
  3208                           
  3209  0022                     _getDimmerLights_Allow_Condition$2147:	
  3210                           ; 1 bytes @ 0x2
  3211                           
  3212  0022                     getDimmerLights_Status@lights:	
  3213                           ; 1 bytes @ 0x2
  3214                           
  3215  0022                     setLED@command:	
  3216                           ; 1 bytes @ 0x2
  3217                           
  3218  0022                     Flash_Memory_Read@address:	
  3219                           ; 1 bytes @ 0x2
  3220                           
  3221  0022                     setMemory_Data@address:	
  3222                           ; 1 bytes @ 0x2
  3223                           
  3224  0022                     _getRF_KeyStatus$4797:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227  0022                     _getSw_KeyStatus$5697:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230  0022                     ___bmul@product:	
  3231                           ; 1 bytes @ 0x2
  3232                           
  3233  0022                     DelayTime_1us@i:	
  3234                           ; 1 bytes @ 0x2
  3235                           
  3236  0022                     _getMain_All_Error_Status$3324:	
  3237                           ; 2 bytes @ 0x2
  3238                           
  3239  0022                     ___awdiv@dividend:	
  3240                           ; 2 bytes @ 0x2
  3241                           
  3242                           
  3243                           ; 2 bytes @ 0x2
  3244  0022                     	ds	1
  3245  0023                     ??_CC2500_WriteREG:	
  3246  0023                     ??_setLED:	
  3247                           ; 0 bytes @ 0x3
  3248                           
  3249  0023                     ??_DelayOff_Initialization:	
  3250                           ; 0 bytes @ 0x3
  3251                           
  3252  0023                     ??_getAD:	
  3253                           ; 0 bytes @ 0x3
  3254                           
  3255  0023                     CC2500_WriteCommand@command:	
  3256                           ; 0 bytes @ 0x3
  3257                           
  3258  0023                     CC2500_ReadStatus@status_addr:	
  3259                           ; 1 bytes @ 0x3
  3260                           
  3261  0023                     getDelayOff_GO@go:	
  3262                           ; 1 bytes @ 0x3
  3263                           
  3264  0023                     setDimmerLights_Initialization@lights:	
  3265                           ; 1 bytes @ 0x3
  3266                           
  3267  0023                     getDimmerLights_Allow_Condition@lights:	
  3268                           ; 1 bytes @ 0x3
  3269                           
  3270  0023                     getDimmerLights_Status@status:	
  3271                           ; 1 bytes @ 0x3
  3272                           
  3273  0023                     setLED@led:	
  3274                           ; 1 bytes @ 0x3
  3275                           
  3276  0023                     getAD@adcon0:	
  3277                           ; 1 bytes @ 0x3
  3278                           
  3279  0023                     Flash_Memory_Read@ret:	
  3280                           ; 1 bytes @ 0x3
  3281                           
  3282  0023                     getSw_KeyStatus@status:	
  3283                           ; 1 bytes @ 0x3
  3284                           
  3285  0023                     ___bmul@multiplier:	
  3286                           ; 1 bytes @ 0x3
  3287                           
  3288  0023                     ___ftpack@exp:	
  3289                           ; 1 bytes @ 0x3
  3290                           
  3291                           
  3292                           ; 1 bytes @ 0x3
  3293  0023                     	ds	1
  3294  0024                     ??_CC2500_ClearTXFIFO:	
  3295  0024                     ??_CC2500_ClearRXFIFO:	
  3296                           ; 0 bytes @ 0x4
  3297                           
  3298  0024                     ??_CC2500_SIDLEMode:	
  3299                           ; 0 bytes @ 0x4
  3300                           
  3301  0024                     ??_DelayTimejudge:	
  3302                           ; 0 bytes @ 0x4
  3303                           
  3304  0024                     ??_setLED_Initialization:	
  3305                           ; 0 bytes @ 0x4
  3306                           
  3307  0024                     ??_getMain_LightsStatus:	
  3308                           ; 0 bytes @ 0x4
  3309                           
  3310  0024                     ??_Flash_Memory_Modify:	
  3311                           ; 0 bytes @ 0x4
  3312                           
  3313  0024                     ??_getTemp_AD:	
  3314                           ; 0 bytes @ 0x4
  3315                           
  3316  0024                     ??_RF_RxDisable:	
  3317                           ; 0 bytes @ 0x4
  3318                           
  3319  0024                     ??_setSw_Initialization:	
  3320                           ; 0 bytes @ 0x4
  3321                           
  3322  0024                     ??_CC2500_TxData:	
  3323                           ; 0 bytes @ 0x4
  3324                           
  3325  0024                     ??_CC2500_RxData:	
  3326                           ; 0 bytes @ 0x4
  3327                           
  3328  0024                     ??_DimmerLights_Initialization:	
  3329                           ; 0 bytes @ 0x4
  3330                           
  3331  0024                     ??___awdiv:	
  3332                           ; 0 bytes @ 0x4
  3333                           
  3334  0024                     CC2500_WriteREG@w_addr:	
  3335                           ; 0 bytes @ 0x4
  3336                           
  3337  0024                     getDimmerLights_Allow_Condition@allow:	
  3338                           ; 1 bytes @ 0x4
  3339                           
  3340  0024                     setLED_Initialization@led:	
  3341                           ; 1 bytes @ 0x4
  3342                           
  3343  0024                     setLED_Main@led:	
  3344                           ; 1 bytes @ 0x4
  3345                           
  3346  0024                     getMain_All_Error_Status@status:	
  3347                           ; 1 bytes @ 0x4
  3348                           
  3349  0024                     setSw_Initialization@sw:	
  3350                           ; 1 bytes @ 0x4
  3351                           
  3352  0024                     getSw_KeyStatus@sw:	
  3353                           ; 1 bytes @ 0x4
  3354                           
  3355  0024                     ___ftpack@sign:	
  3356                           ; 1 bytes @ 0x4
  3357                           
  3358  0024                     getBuz_GO@i:	
  3359                           ; 1 bytes @ 0x4
  3360                           
  3361  0024                     DelayTime_1us@j:	
  3362                           ; 2 bytes @ 0x4
  3363                           
  3364                           
  3365                           ; 2 bytes @ 0x4
  3366  0024                     	ds	1
  3367  0025                     ??_CC2500_InitSetREG:	
  3368  0025                     ??_CC2500_InitPATable:	
  3369                           ; 0 bytes @ 0x5
  3370                           
  3371  0025                     ??_Switch_Initialization:	
  3372                           ; 0 bytes @ 0x5
  3373                           
  3374  0025                     ??___ftpack:	
  3375                           ; 0 bytes @ 0x5
  3376                           
  3377  0025                     ??_setDimmerLights_AdjOn:	
  3378                           ; 0 bytes @ 0x5
  3379                           
  3380  0025                     ??_LED_Initialization:	
  3381                           ; 0 bytes @ 0x5
  3382                           
  3383  0025                     ??_LED_Main:	
  3384                           ; 0 bytes @ 0x5
  3385                           
  3386  0025                     CC2500_TxData@loop_e:	
  3387                           ; 0 bytes @ 0x5
  3388                           
  3389  0025                     CC2500_RxData@loop_f:	
  3390                           ; 1 bytes @ 0x5
  3391                           
  3392  0025                     setDimmerLights_AdjOn@sw:	
  3393                           ; 1 bytes @ 0x5
  3394                           
  3395  0025                     Flash_Memory_Modify@i:	
  3396                           ; 1 bytes @ 0x5
  3397                           
  3398  0025                     getMain_LightsStatus@count:	
  3399                           ; 1 bytes @ 0x5
  3400                           
  3401  0025                     getTemp_AD@channel:	
  3402                           ; 1 bytes @ 0x5
  3403                           
  3404  0025                     ___awdiv@counter:	
  3405                           ; 1 bytes @ 0x5
  3406                           
  3407                           
  3408                           ; 1 bytes @ 0x5
  3409  0025                     	ds	1
  3410  0026                     ??_CC2500_PowerRST:	
  3411  0026                     ??_CC2500_FrequencyCabr:	
  3412                           ; 0 bytes @ 0x6
  3413                           
  3414  0026                     CC2500_InitSetREG@temp1:	
  3415                           ; 0 bytes @ 0x6
  3416                           
  3417  0026                     CC2500_InitPATable@temp:	
  3418                           ; 1 bytes @ 0x6
  3419                           
  3420  0026                     DelayTimejudge@i:	
  3421                           ; 1 bytes @ 0x6
  3422                           
  3423  0026                     ___awdiv@sign:	
  3424                           ; 1 bytes @ 0x6
  3425                           
  3426  0026                     getMain_LightsStatus@i:	
  3427                           ; 1 bytes @ 0x6
  3428                           
  3429                           
  3430                           ; 2 bytes @ 0x6
  3431  0026                     	ds	1
  3432  0027                     CC2500_InitSetREG@temp2:	
  3433  0027                     CC2500_InitPATable@loop_d:	
  3434                           ; 1 bytes @ 0x7
  3435                           
  3436  0027                     DelayTimejudge@j:	
  3437                           ; 1 bytes @ 0x7
  3438                           
  3439  0027                     ___awdiv@quotient:	
  3440                           ; 1 bytes @ 0x7
  3441                           
  3442                           
  3443                           ; 2 bytes @ 0x7
  3444  0027                     	ds	1
  3445  0028                     ?___awtoft:	
  3446  0028                     CC2500_InitSetREG@loop_c:	
  3447                           ; 3 bytes @ 0x8
  3448                           
  3449  0028                     DelayTimejudge@k:	
  3450                           ; 1 bytes @ 0x8
  3451                           
  3452  0028                     getMain_LightsStatus@status:	
  3453                           ; 1 bytes @ 0x8
  3454                           
  3455  0028                     ___awtoft@c:	
  3456                           ; 1 bytes @ 0x8
  3457                           
  3458                           
  3459                           ; 2 bytes @ 0x8
  3460  0028                     	ds	1
  3461  0029                     ?_setBuz:	
  3462  0029                     ??_CC2500_PowerOnInitial:	
  3463                           ; 0 bytes @ 0x9
  3464                           
  3465  0029                     ??_Flash_Memory_Main:	
  3466                           ; 0 bytes @ 0x9
  3467                           
  3468  0029                     DelayTimejudge@value:	
  3469                           ; 0 bytes @ 0x9
  3470                           
  3471  0029                     setBuz@time:	
  3472                           ; 1 bytes @ 0x9
  3473                           
  3474                           
  3475                           ; 2 bytes @ 0x9
  3476  0029                     	ds	2
  3477  002B                     ??_setBuz:	
  3478  002B                     ??___awtoft:	
  3479                           ; 0 bytes @ 0xB
  3480                           
  3481                           
  3482                           ; 0 bytes @ 0xB
  3483  002B                     	ds	1
  3484  002C                     setBuz@count:	
  3485                           
  3486                           ; 1 bytes @ 0xC
  3487  002C                     	ds	1
  3488  002D                     ??_my_MainTimer:	
  3489  002D                     ??_setDimmerLights_SwOn:	
  3490                           ; 0 bytes @ 0xD
  3491                           
  3492  002D                     ___awtoft@sign:	
  3493                           ; 0 bytes @ 0xD
  3494                           
  3495                           
  3496                           ; 1 bytes @ 0xD
  3497  002D                     	ds	1
  3498  002E                     ?___ftdiv:	
  3499  002E                     ?___ftmul:	
  3500                           ; 3 bytes @ 0xE
  3501                           
  3502  002E                     setDimmerLights_SwOn@idle:	
  3503                           ; 3 bytes @ 0xE
  3504                           
  3505  002E                     ___ftdiv@f2:	
  3506                           ; 1 bytes @ 0xE
  3507                           
  3508  002E                     ___ftmul@f1:	
  3509                           ; 3 bytes @ 0xE
  3510                           
  3511                           
  3512                           ; 3 bytes @ 0xE
  3513  002E                     	ds	1
  3514  002F                     setDimmerLights_SwOn@sw:	
  3515                           
  3516                           ; 1 bytes @ 0xF
  3517  002F                     	ds	2
  3518  0031                     ___ftdiv@f1:	
  3519  0031                     ___ftmul@f2:	
  3520                           ; 3 bytes @ 0x11
  3521                           
  3522                           
  3523                           ; 3 bytes @ 0x11
  3524  0031                     	ds	3
  3525  0034                     ??___ftdiv:	
  3526  0034                     ??___ftmul:	
  3527                           ; 0 bytes @ 0x14
  3528                           
  3529                           
  3530                           ; 0 bytes @ 0x14
  3531  0034                     	ds	4
  3532  0038                     ___ftdiv@cntr:	
  3533  0038                     ___ftmul@exp:	
  3534                           ; 1 bytes @ 0x18
  3535                           
  3536                           
  3537                           ; 1 bytes @ 0x18
  3538  0038                     	ds	1
  3539  0039                     ___ftdiv@f3:	
  3540  0039                     ___ftmul@f3_as_product:	
  3541                           ; 3 bytes @ 0x19
  3542                           
  3543                           
  3544                           ; 3 bytes @ 0x19
  3545  0039                     	ds	3
  3546  003C                     ___ftdiv@exp:	
  3547  003C                     ___ftmul@cntr:	
  3548                           ; 1 bytes @ 0x1C
  3549                           
  3550                           
  3551                           ; 1 bytes @ 0x1C
  3552  003C                     	ds	1
  3553  003D                     ___ftdiv@sign:	
  3554  003D                     ___ftmul@sign:	
  3555                           ; 1 bytes @ 0x1D
  3556                           
  3557                           
  3558                           ; 1 bytes @ 0x1D
  3559  003D                     	ds	1
  3560  003E                     ?___ftneg:	
  3561  003E                     ___ftneg@f1:	
  3562                           ; 3 bytes @ 0x1E
  3563                           
  3564                           
  3565                           ; 3 bytes @ 0x1E
  3566  003E                     	ds	3
  3567  0041                     ??___ftneg:	
  3568  0041                     ?___ftadd:	
  3569                           ; 0 bytes @ 0x21
  3570                           
  3571  0041                     ___ftadd@f1:	
  3572                           ; 3 bytes @ 0x21
  3573                           
  3574                           
  3575                           ; 3 bytes @ 0x21
  3576  0041                     	ds	3
  3577  0044                     ___ftadd@f2:	
  3578                           
  3579                           ; 3 bytes @ 0x24
  3580  0044                     	ds	3
  3581  0047                     ??___ftadd:	
  3582                           
  3583                           ; 0 bytes @ 0x27
  3584  0047                     	ds	4
  3585  004B                     ___ftadd@sign:	
  3586                           
  3587                           ; 1 bytes @ 0x2B
  3588  004B                     	ds	1
  3589  004C                     ___ftadd@exp2:	
  3590                           
  3591                           ; 1 bytes @ 0x2C
  3592  004C                     	ds	1
  3593  004D                     ___ftadd@exp1:	
  3594                           
  3595                           ; 1 bytes @ 0x2D
  3596  004D                     	ds	1
  3597  004E                     ?___fttol:	
  3598  004E                     ___fttol@f1:	
  3599                           ; 4 bytes @ 0x2E
  3600                           
  3601                           
  3602                           ; 3 bytes @ 0x2E
  3603  004E                     	ds	4
  3604  0052                     ??___fttol:	
  3605                           
  3606                           ; 0 bytes @ 0x32
  3607  0052                     	ds	4
  3608  0056                     ___fttol@sign1:	
  3609                           
  3610                           ; 1 bytes @ 0x36
  3611  0056                     	ds	1
  3612  0057                     ___fttol@lval:	
  3613                           
  3614                           ; 4 bytes @ 0x37
  3615  0057                     	ds	4
  3616  005B                     ___fttol@exp1:	
  3617                           
  3618                           ; 1 bytes @ 0x3B
  3619  005B                     	ds	1
  3620  005C                     ??_setPercentValue:	
  3621  005C                     ??_getPercentValue:	
  3622                           ; 0 bytes @ 0x3C
  3623                           
  3624                           
  3625                           ; 0 bytes @ 0x3C
  3626  005C                     	ds	2
  3627  005E                     getPercentValue@value:	
  3628  005E                     setPercentValue@value:	
  3629                           ; 1 bytes @ 0x3E
  3630                           
  3631                           
  3632                           ; 1 bytes @ 0x3E
  3633  005E                     	ds	1
  3634  005F                     getPercentValue@i:	
  3635  005F                     setPercentValue@i:	
  3636                           ; 3 bytes @ 0x3F
  3637                           
  3638                           
  3639                           ; 3 bytes @ 0x3F
  3640  005F                     	ds	3
  3641  0062                     ?_setProductData:	
  3642  0062                     ??_setDimmerLights_AdjRF:	
  3643                           ; 0 bytes @ 0x42
  3644                           
  3645  0062                     ??_Flash_Memory_Initialization:	
  3646                           ; 0 bytes @ 0x42
  3647                           
  3648  0062                     setProductData@value:	
  3649                           ; 0 bytes @ 0x42
  3650                           
  3651                           
  3652                           ; 1 bytes @ 0x42
  3653  0062                     	ds	1
  3654  0063                     ??_setProductData:	
  3655  0063                     setDimmerLights_AdjRF@lights:	
  3656                           ; 0 bytes @ 0x43
  3657                           
  3658  0063                     Flash_Memory_Initialization@i:	
  3659                           ; 1 bytes @ 0x43
  3660                           
  3661                           
  3662                           ; 1 bytes @ 0x43
  3663  0063                     	ds	2
  3664  0065                     setProductData@address:	
  3665                           
  3666                           ; 1 bytes @ 0x45
  3667  0065                     	ds	1
  3668  0066                     ?_setRF_DimmerLights:	
  3669  0066                     ??_setTemp_Main:	
  3670                           ; 0 bytes @ 0x46
  3671                           
  3672  0066                     ??_setLog_Code:	
  3673                           ; 0 bytes @ 0x46
  3674                           
  3675  0066                     ??_setRF_DimmerValue:	
  3676                           ; 0 bytes @ 0x46
  3677                           
  3678  0066                     ?_setDelayOff_GO:	
  3679                           ; 0 bytes @ 0x46
  3680                           
  3681  0066                     setDelayOff_GO@command:	
  3682                           ; 0 bytes @ 0x46
  3683                           
  3684  0066                     setRF_DimmerLights@on:	
  3685                           ; 1 bytes @ 0x46
  3686                           
  3687                           
  3688                           ; 1 bytes @ 0x46
  3689  0066                     	ds	1
  3690  0067                     ??_setRF_DimmerLights:	
  3691  0067                     setDelayOff_GO@value:	
  3692                           ; 0 bytes @ 0x47
  3693                           
  3694  0067                     setRF_DimmerValue@lights:	
  3695                           ; 1 bytes @ 0x47
  3696                           
  3697                           
  3698                           ; 1 bytes @ 0x47
  3699  0067                     	ds	1
  3700  0068                     ??_setRFSW_AdjControl:	
  3701  0068                     ??_setDelayOff_GO:	
  3702                           ; 0 bytes @ 0x48
  3703                           
  3704  0068                     setTemp_Main@error:	
  3705                           ; 0 bytes @ 0x48
  3706                           
  3707                           
  3708                           ; 1 bytes @ 0x48
  3709  0068                     	ds	1
  3710  0069                     ??_Temp_Main:	
  3711  0069                     setDelayOff_GO@sw:	
  3712                           ; 0 bytes @ 0x49
  3713                           
  3714  0069                     setRF_DimmerLights@status:	
  3715                           ; 1 bytes @ 0x49
  3716                           
  3717                           
  3718                           ; 1 bytes @ 0x49
  3719  0069                     	ds	1
  3720  006A                     ??_setDimmerLights_SwOff:	
  3721  006A                     setDimmerLights_SwOff@command:	
  3722                           ; 0 bytes @ 0x4A
  3723                           
  3724  006A                     setRFSW_AdjControl@status:	
  3725                           ; 1 bytes @ 0x4A
  3726                           
  3727  006A                     setRF_DimmerLights@lights:	
  3728                           ; 1 bytes @ 0x4A
  3729                           
  3730                           
  3731                           ; 1 bytes @ 0x4A
  3732  006A                     	ds	1
  3733  006B                     ?_setDimmerLights:	
  3734  006B                     ?_setDimmerLights_Adj:	
  3735                           ; 0 bytes @ 0x4B
  3736                           
  3737  006B                     setDimmerLights_SwOff@sw:	
  3738                           ; 0 bytes @ 0x4B
  3739                           
  3740  006B                     setDimmerLights@status:	
  3741                           ; 1 bytes @ 0x4B
  3742                           
  3743  006B                     setDimmerLights_Adj@status:	
  3744                           ; 1 bytes @ 0x4B
  3745                           
  3746  006B                     setRFSW_AdjControl@sw:	
  3747                           ; 1 bytes @ 0x4B
  3748                           
  3749                           
  3750                           ; 1 bytes @ 0x4B
  3751  006B                     	ds	1
  3752  006C                     ??_setDimmerLights_ErrorClose:	
  3753  006C                     ??_setDimmerLights:	
  3754                           ; 0 bytes @ 0x4C
  3755                           
  3756  006C                     ??_setDimmerLights_Adj:	
  3757                           ; 0 bytes @ 0x4C
  3758                           
  3759  006C                     ??_Exception_Main:	
  3760                           ; 0 bytes @ 0x4C
  3761                           
  3762  006C                     ??_setRFSW_Control:	
  3763                           ; 0 bytes @ 0x4C
  3764                           
  3765  006C                     ??_setSw_Main:	
  3766                           ; 0 bytes @ 0x4C
  3767                           
  3768                           
  3769                           ; 0 bytes @ 0x4C
  3770  006C                     	ds	1
  3771  006D                     ??_DlyOff_Main:	
  3772  006D                     setDimmerLights@lights:	
  3773                           ; 0 bytes @ 0x4D
  3774                           
  3775  006D                     setDimmerLights_Adj@lights:	
  3776                           ; 1 bytes @ 0x4D
  3777                           
  3778  006D                     setRFSW_Control@status:	
  3779                           ; 1 bytes @ 0x4D
  3780                           
  3781                           
  3782                           ; 1 bytes @ 0x4D
  3783  006D                     	ds	1
  3784  006E                     ??_setDimmerLights_Main:	
  3785  006E                     setDimmerLights_Main@lights:	
  3786                           ; 0 bytes @ 0x4E
  3787                           
  3788  006E                     setRFSW_Control@sw:	
  3789                           ; 1 bytes @ 0x4E
  3790                           
  3791  006E                     setSw_Main@sw:	
  3792                           ; 1 bytes @ 0x4E
  3793                           
  3794                           
  3795                           ; 1 bytes @ 0x4E
  3796  006E                     	ds	1
  3797  006F                     ??_Switch_Main:	
  3798  006F                     ??_getRxData:	
  3799                           ; 0 bytes @ 0x4F
  3800                           
  3801  006F                     ??_setControl_Lights_Table:	
  3802                           ; 0 bytes @ 0x4F
  3803                           
  3804  006F                     ??_DimmerLights_Main:	
  3805                           ; 0 bytes @ 0x4F
  3806                           
  3807  006F                     DlyOff_Main@sw:	
  3808                           ; 0 bytes @ 0x4F
  3809                           
  3810                           
  3811                           ; 1 bytes @ 0x4F
  3812  006F                     	ds	1
  3813  0070                     ??_RF_Main:	
  3814  0070                     ??_DelayOff_Main:	
  3815                           ; 0 bytes @ 0x50
  3816                           
  3817  0070                     ??_main:	
  3818                           ; 0 bytes @ 0x50
  3819                           
  3820                           
  3821                           	psect	maintext
  3822  0859                     __pmaintext:	
  3823                           ; 0 bytes @ 0x50
  3824 ;;
  3825 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3826 ;;
  3827 ;; *************** function _main *****************
  3828 ;; Defined at:
  3829 ;;		line 7 in file "../src/Main_B1.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  argc            2    3[BANK3 ] int 
  3832 ;;  argv            2    5[BANK3 ] PTR PTR unsigned char 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;		None
  3835 ;; Return value:  Size  Location     Type
  3836 ;;                  2    3[BANK3 ] int 
  3837 ;; Registers used:
  3838 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3839 ;; Tracked objects:
  3840 ;;		On entry : 17F/0
  3841 ;;		On exit  : 0/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3844 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3847 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3848 ;;Total ram usage:        4 bytes
  3849 ;; Hardware stack levels required when called:   15
  3850 ;; This function calls:
  3851 ;;		_Buzzer_Initialization
  3852 ;;		_Buzzer_Main
  3853 ;;		_CC2500_PowerOnInitial
  3854 ;;		_DelayOff_Initialization
  3855 ;;		_DelayOff_Main
  3856 ;;		_DimmerLights_Initialization
  3857 ;;		_DimmerLights_Main
  3858 ;;		_Exception_Main
  3859 ;;		_Flash_Memory_Initialization
  3860 ;;		_Flash_Memory_Main
  3861 ;;		_LED_Initialization
  3862 ;;		_LED_Main
  3863 ;;		_Mcu_Initialization
  3864 ;;		_RF_Initialization
  3865 ;;		_RF_Main
  3866 ;;		_Switch_Initialization
  3867 ;;		_Switch_Main
  3868 ;;		_Temp_Initialization
  3869 ;;		_Temp_Main
  3870 ;;		_WDT_Main
  3871 ;;		_getTemp_AD
  3872 ;;		_myMain_Initialization
  3873 ;;		_my_MainTimer
  3874 ;; This function is called by:
  3875 ;;		Startup code after reset
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           
  3880                           ;psect for function _main
  3881  0859                     _main:	
  3882                           
  3883                           ;Main_B1.c: 8: myMain_Initialization();
  3884                           
  3885                           ;incstack = 0
  3886                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3887  0859  319E  26F3  3188   	fcall	_myMain_Initialization
  3888                           
  3889                           ;Main_B1.c: 9: Mcu_Initialization();
  3890  085C  319F  277C  3188   	fcall	_Mcu_Initialization
  3891                           
  3892                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3893  085F  3183  23AA  3188   	fcall	_Flash_Memory_Initialization
  3894                           
  3895                           ;Main_B1.c: 11: LED_Initialization();
  3896  0862  319E  2697  3188   	fcall	_LED_Initialization
  3897                           
  3898                           ;Main_B1.c: 12: Buzzer_Initialization();
  3899  0865  319D  25E4  3188   	fcall	_Buzzer_Initialization
  3900                           
  3901                           ;Main_B1.c: 14: ;;
  3902                           ;Main_B1.c: 15: Temp_Initialization();
  3903  0868  319D  25ED  3188   	fcall	_Temp_Initialization
  3904                           
  3905                           ;Main_B1.c: 16: ;;
  3906                           ;Main_B1.c: 17: ;;
  3907                           ;Main_B1.c: 18: DelayOff_Initialization();
  3908  086B  319E  2629  3188   	fcall	_DelayOff_Initialization
  3909                           
  3910                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3911  086E  3190  2073  3188   	fcall	_DimmerLights_Initialization
  3912                           
  3913                           ;Main_B1.c: 21: ;;
  3914                           ;Main_B1.c: 22: ;;
  3915                           ;Main_B1.c: 23: ;;
  3916                           ;Main_B1.c: 24: Switch_Initialization();
  3917  0871  3190  2066  3188   	fcall	_Switch_Initialization
  3918                           
  3919                           ;Main_B1.c: 25: RF_Initialization();
  3920  0874  319D  25E7  3188   	fcall	_RF_Initialization
  3921                           
  3922                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3923  0877  3190  20C4  3188   	fcall	_CC2500_PowerOnInitial
  3924  087A                     l9906:	
  3925                           ;Main_B1.c: 27: ;;
  3926                           ;Main_B1.c: 28: ;;
  3927                           ;Main_B1.c: 30: while (1) {
  3928                           
  3929                           
  3930                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  3931  087A  0021               	movlb	1	; select bank1
  3932  087B  1C20               	btfss	_myMain^(0+128),0
  3933  087C  2881               	goto	l9910
  3934                           
  3935                           ;Main_B1.c: 42: getTemp_AD(0x09);
  3936  087D  3009               	movlw	9
  3937  087E  3195  25C6  3188   	fcall	_getTemp_AD
  3938  0881                     l9910:	
  3939                           
  3940                           ;Main_B1.c: 57: }
  3941                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  3942  0881  0022               	movlb	2	; select bank2
  3943  0882  1C41               	btfss	_Timer1^(0+256),0
  3944  0883  287A               	goto	l9906
  3945                           
  3946                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  3947  0884  1041               	bcf	_Timer1^(0+256),0
  3948                           
  3949                           ;Main_B1.c: 96: my_MainTimer();
  3950  0885  3195  250F  3188   	fcall	_my_MainTimer
  3951                           
  3952                           ;Main_B1.c: 97: WDT_Main();
  3953  0888  319F  278E  3188   	fcall	_WDT_Main
  3954                           
  3955                           ;Main_B1.c: 98: ;;
  3956                           ;Main_B1.c: 99: ;;
  3957                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  3958  088B  0021               	movlb	1	; select bank1
  3959  088C  1C20               	btfss	_myMain^(0+128),0
  3960  088D  287A               	goto	l9906
  3961                           
  3962                           ;Main_B1.c: 101: Flash_Memory_Main();
  3963  088E  3194  24D9  3188   	fcall	_Flash_Memory_Main
  3964                           
  3965                           ;Main_B1.c: 103: LED_Main();
  3966  0891  319E  26A3  3188   	fcall	_LED_Main
  3967                           
  3968                           ;Main_B1.c: 104: Buzzer_Main();
  3969  0894  3196  26C9  3188   	fcall	_Buzzer_Main
  3970                           
  3971                           ;Main_B1.c: 106: ;;
  3972                           ;Main_B1.c: 107: Temp_Main();
  3973  0897  319D  25F0  3188   	fcall	_Temp_Main
  3974                           
  3975                           ;Main_B1.c: 108: ;;
  3976                           ;Main_B1.c: 109: ;;
  3977                           ;Main_B1.c: 111: ;;
  3978                           ;Main_B1.c: 112: DimmerLights_Main();
  3979  089A  319E  2639  3188   	fcall	_DimmerLights_Main
  3980                           
  3981                           ;Main_B1.c: 113: Switch_Main();
  3982  089D  319E  2668  3188   	fcall	_Switch_Main
  3983                           
  3984                           ;Main_B1.c: 114: ;;
  3985                           ;Main_B1.c: 115: ;;
  3986                           ;Main_B1.c: 117: RF_Main();
  3987  08A0  319D  25EA  3188   	fcall	_RF_Main
  3988                           
  3989                           ;Main_B1.c: 118: DelayOff_Main();
  3990  08A3  319E  2631  3188   	fcall	_DelayOff_Main
  3991                           
  3992                           ;Main_B1.c: 119: ;;
  3993                           ;Main_B1.c: 120: ;;
  3994                           ;Main_B1.c: 121: Exception_Main();
  3995  08A6  3186  26C5  3188   	fcall	_Exception_Main
  3996  08A9  287A               	goto	l9906
  3997  08AA                     __end_of_main:	
  3998                           ;Main_B1.c: 128: }
  3999                           ;Main_B1.c: 129: }
  4000                           ;Main_B1.c: 163: }
  4001                           ;Main_B1.c: 164: return (0);
  4002                           ;	Return value of _main is never used
  4003                           
  4004                           
  4005                           	psect	text1
  4006  150F                     __ptext1:	
  4007 ;; *************** function _my_MainTimer *****************
  4008 ;; Defined at:
  4009 ;;		line 185 in file "../src/Main_B1.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;		None
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;		None
  4014 ;; Return value:  Size  Location     Type
  4015 ;;		None               void
  4016 ;; Registers used:
  4017 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;Total ram usage:        1 bytes
  4028 ;; Hardware stack levels used:    1
  4029 ;; Hardware stack levels required when called:    7
  4030 ;; This function calls:
  4031 ;;		_setBuz
  4032 ;; This function is called by:
  4033 ;;		_main
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           
  4038                           ;psect for function _my_MainTimer
  4039  150F                     _my_MainTimer:	
  4040                           
  4041                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4042                           
  4043                           ;incstack = 0
  4044                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4045  150F  0021               	movlb	1	; select bank1
  4046  1510  1820               	btfsc	_myMain^(0+128),0
  4047  1511  2D29               	goto	l9770
  4048                           
  4049                           ;Main_B1.c: 189: myMain.PowerCount++;
  4050  1512  3001               	movlw	1
  4051  1513  0020               	movlb	0	; select bank0
  4052  1514  00AD               	movwf	??_my_MainTimer
  4053  1515  082D               	movf	??_my_MainTimer,w
  4054  1516  0021               	movlb	1	; select bank1
  4055  1517  07A1               	addwf	(_myMain^(0+128)+1),f
  4056                           
  4057                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4058  1518  0821               	movf	(_myMain^(0+128)+1),w
  4059  1519  3A96               	xorlw	150
  4060  151A  1D03               	skipz
  4061  151B  0008               	return
  4062                           
  4063                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4064  151C  01A1               	clrf	(_myMain^(0+128)+1)
  4065                           
  4066                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4067  151D  1420               	bsf	_myMain^(0+128),0
  4068                           
  4069                           ;Main_B1.c: 197: setBuz(3, 50);
  4070  151E  3032               	movlw	50
  4071  151F  0020               	movlb	0	; select bank0
  4072  1520  00A9               	movwf	setBuz@time
  4073  1521  3000               	movlw	0
  4074  1522  00AA               	movwf	setBuz@time+1
  4075  1523  3003               	movlw	3
  4076  1524  318A  2201         	fcall	_setBuz
  4077                           
  4078                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4079  1526  0021               	movlb	1	; select bank1
  4080  1527  1620               	bsf	_myMain^(0+128),4
  4081                           
  4082                           ;Main_B1.c: 207: }
  4083                           ;Main_B1.c: 208: } else {
  4084  1528  0008               	return
  4085  1529                     l9770:	
  4086                           
  4087                           ;Main_B1.c: 209: myMain.PowerCount++;
  4088  1529  3001               	movlw	1
  4089  152A  0020               	movlb	0	; select bank0
  4090  152B  00AD               	movwf	??_my_MainTimer
  4091  152C  082D               	movf	??_my_MainTimer,w
  4092  152D  0021               	movlb	1	; select bank1
  4093  152E  07A1               	addwf	(_myMain^(0+128)+1),f
  4094                           
  4095                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4096  152F  0821               	movf	(_myMain^(0+128)+1),w
  4097  1530  3A64               	xorlw	100
  4098  1531  1903               	btfsc	3,2
  4099                           
  4100                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4101  1532  01A1               	clrf	(_myMain^(0+128)+1)
  4102                           
  4103                           ;Main_B1.c: 226: }
  4104                           ;Main_B1.c: 228: myMain.Count1++;
  4105  1533  3001               	movlw	1
  4106  1534  07A4               	addwf	(_myMain^(0+128)+4),f
  4107  1535  3000               	movlw	0
  4108  1536  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4109                           
  4110                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4111  1537  3004               	movlw	4
  4112  1538  3EA0               	addlw	_myMain& (0+255)
  4113  1539  0086               	movwf	6
  4114  153A  0187               	clrf	7
  4115  153B  3F40               	moviw [0]fsr1
  4116  153C  3A64               	xorlw	100
  4117  153D  1D03               	skipz
  4118  153E  2D41               	goto	u10855
  4119  153F  3F41               	moviw [1]fsr1
  4120  1540  3A00               	xorlw	0
  4121  1541                     u10855:	
  4122  1541  1D03               	skipz
  4123  1542  0008               	return
  4124                           
  4125                           ;Main_B1.c: 230: {
  4126                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4127  1543  01A4               	clrf	(_myMain^(0+128)+4)
  4128  1544  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4129                           
  4130                           ;Main_B1.c: 243: if (myMain.Flag) {
  4131  1545  1CA0               	btfss	_myMain^(0+128),1
  4132  1546  2D49               	goto	l1498
  4133                           
  4134                           ;Main_B1.c: 244: myMain.Flag = 0;
  4135  1547  10A0               	bcf	_myMain^(0+128),1
  4136                           
  4137                           ;Main_B1.c: 253: } else {
  4138  1548  0008               	return
  4139  1549                     l1498:	
  4140                           
  4141                           ;Main_B1.c: 254: myMain.Flag = 1;
  4142  1549  14A0               	bsf	_myMain^(0+128),1
  4143  154A  0008               	return
  4144  154B                     __end_of_my_MainTimer:	
  4145                           
  4146                           	psect	text2
  4147  1EF3                     __ptext2:	
  4148 ;; *************** function _myMain_Initialization *****************
  4149 ;; Defined at:
  4150 ;;		line 170 in file "../src/Main_B1.c"
  4151 ;; Parameters:    Size  Location     Type
  4152 ;;		None
  4153 ;; Auto vars:     Size  Location     Type
  4154 ;;		None
  4155 ;; Return value:  Size  Location     Type
  4156 ;;		None               void
  4157 ;; Registers used:
  4158 ;;		wreg, fsr1l, fsr1h
  4159 ;; Tracked objects:
  4160 ;;		On entry : 0/0
  4161 ;;		On exit  : 0/0
  4162 ;;		Unchanged: 0/0
  4163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4168 ;;Total ram usage:        1 bytes
  4169 ;; Hardware stack levels used:    1
  4170 ;; Hardware stack levels required when called:    5
  4171 ;; This function calls:
  4172 ;;		Nothing
  4173 ;; This function is called by:
  4174 ;;		_main
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           
  4179                           ;psect for function _myMain_Initialization
  4180  1EF3                     _myMain_Initialization:	
  4181                           
  4182                           ;Main_B1.c: 173: product = &_product;
  4183                           
  4184                           ;incstack = 0
  4185                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4186  1EF3  3020               	movlw	__product& (0+255)
  4187  1EF4  0020               	movlb	0	; select bank0
  4188  1EF5  00A0               	movwf	??_myMain_Initialization
  4189  1EF6  0820               	movf	??_myMain_Initialization,w
  4190  1EF7  00F9               	movwf	_product
  4191                           
  4192                           ;Main_B1.c: 174: product->Data[20] = 210;
  4193  1EF8  30D2               	movlw	210
  4194  1EF9  00A0               	movwf	??_myMain_Initialization
  4195  1EFA  0879               	movf	_product,w
  4196  1EFB  3E14               	addlw	20
  4197  1EFC  0086               	movwf	6
  4198  1EFD  3002               	movlw	2	; select bank4/5
  4199  1EFE  0087               	movwf	7
  4200  1EFF  0820               	movf	??_myMain_Initialization,w
  4201  1F00  0081               	movwf	1
  4202  1F01  0008               	return
  4203  1F02                     __end_of_myMain_Initialization:	
  4204                           
  4205                           	psect	text3
  4206  15C6                     __ptext3:	
  4207 ;; *************** function _getTemp_AD *****************
  4208 ;; Defined at:
  4209 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;  channel         1    wreg     unsigned char 
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;  channel         1    5[BANK0 ] unsigned char 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;		None               void
  4216 ;; Registers used:
  4217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;Total ram usage:        2 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    7
  4230 ;; This function calls:
  4231 ;;		_getAD
  4232 ;; This function is called by:
  4233 ;;		_main
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           
  4238                           ;psect for function _getTemp_AD
  4239  15C6                     _getTemp_AD:	
  4240                           
  4241                           ;incstack = 0
  4242                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4243                           ;getTemp_AD@channel stored from wreg
  4244  15C6  0020               	movlb	0	; select bank0
  4245  15C7  00A5               	movwf	getTemp_AD@channel
  4246                           
  4247                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4248  15C8  0021               	movlb	1	; select bank1
  4249  15C9  1D56               	btfss	_Temp^(0+128),2
  4250  15CA  0008               	return
  4251                           
  4252                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4253  15CB  30F0               	movlw	240
  4254  15CC  0020               	movlb	0	; select bank0
  4255  15CD  00A4               	movwf	??_getTemp_AD
  4256  15CE  0824               	movf	??_getTemp_AD,w
  4257  15CF  00A0               	movwf	getAD@adcon1
  4258  15D0  0825               	movf	getTemp_AD@channel,w
  4259  15D1  3192  2217  3195   	fcall	_getAD
  4260  15D4  0020               	movlb	0	; select bank0
  4261  15D5  0821               	movf	?_getAD+1,w
  4262  15D6  0021               	movlb	1	; select bank1
  4263  15D7  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4264  15D8  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4265  15D9  0020               	movlb	0	; select bank0
  4266  15DA  0820               	movf	?_getAD,w
  4267  15DB  0021               	movlb	1	; select bank1
  4268  15DC  01E2               	clrf	(_Temp^(0+128)+12)
  4269  15DD  07E2               	addwf	(_Temp^(0+128)+12),f
  4270                           
  4271                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4272  15DE  300C               	movlw	12
  4273  15DF  3ED6               	addlw	_Temp& (0+255)
  4274  15E0  0086               	movwf	6
  4275  15E1  0187               	clrf	7
  4276  15E2  0016               	moviw fsr1++
  4277  15E3  0401               	iorwf	1,w
  4278  15E4  1903               	skipnz
  4279  15E5  0008               	return
  4280                           
  4281                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4282  15E6  0863               	movf	((_Temp+1)^(0+128)+12),w
  4283  15E7  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4284  15E8  1D03               	skipz
  4285  15E9  2DEC               	goto	u10805
  4286  15EA  0862               	movf	(_Temp^(0+128)+12),w
  4287  15EB  025E               	subwf	(_Temp^(0+128)+8),w
  4288  15EC                     u10805:	
  4289  15EC  1803               	skipnc
  4290  15ED  2DF5               	goto	l9752
  4291                           
  4292                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4293  15EE  0863               	movf	((_Temp+1)^(0+128)+12),w
  4294  15EF  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4295  15F0  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4296  15F1  0862               	movf	(_Temp^(0+128)+12),w
  4297  15F2  01DE               	clrf	(_Temp^(0+128)+8)
  4298  15F3  07DE               	addwf	(_Temp^(0+128)+8),f
  4299                           
  4300                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4301  15F4  0008               	return
  4302  15F5                     l9752:	
  4303  15F5  0863               	movf	((_Temp+1)^(0+128)+12),w
  4304  15F6  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4305  15F7  1D03               	skipz
  4306  15F8  2DFB               	goto	u10815
  4307  15F9  0862               	movf	(_Temp^(0+128)+12),w
  4308  15FA  0260               	subwf	(_Temp^(0+128)+10),w
  4309  15FB                     u10815:	
  4310  15FB  1803               	skipnc
  4311  15FC  0008               	return
  4312                           
  4313                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4314  15FD  0863               	movf	((_Temp+1)^(0+128)+12),w
  4315  15FE  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4316  15FF  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4317  1600  0862               	movf	(_Temp^(0+128)+12),w
  4318  1601  01E0               	clrf	(_Temp^(0+128)+10)
  4319  1602  07E0               	addwf	(_Temp^(0+128)+10),f
  4320  1603  0008               	return
  4321  1604                     __end_of_getTemp_AD:	
  4322                           
  4323                           	psect	text4
  4324  1217                     __ptext4:	
  4325 ;; *************** function _getAD *****************
  4326 ;; Defined at:
  4327 ;;		line 453 in file "../src/MCU_B1.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;  adcon0          1    wreg     unsigned char 
  4330 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  2    0[BANK0 ] int 
  4335 ;; Registers used:
  4336 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4342 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4343 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4345 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4346 ;;Total ram usage:        4 bytes
  4347 ;; Hardware stack levels used:    1
  4348 ;; Hardware stack levels required when called:    6
  4349 ;; This function calls:
  4350 ;;		_Timeout_Counter
  4351 ;;		_set_TimeoutCleared
  4352 ;; This function is called by:
  4353 ;;		_getTemp_AD
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           
  4358                           ;psect for function _getAD
  4359  1217                     _getAD:	
  4360                           
  4361                           ;incstack = 0
  4362                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4363                           ;getAD@adcon0 stored from wreg
  4364  1217  0020               	movlb	0	; select bank0
  4365  1218  00A3               	movwf	getAD@adcon0
  4366                           
  4367                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4368  1219  0823               	movf	getAD@adcon0,w
  4369  121A  0021               	movlb	1	; select bank1
  4370  121B  009D               	movwf	29	;volatile
  4371                           
  4372                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4373  121C  0020               	movlb	0	; select bank0
  4374  121D  0820               	movf	getAD@adcon1,w
  4375  121E  0021               	movlb	1	; select bank1
  4376  121F  009E               	movwf	30	;volatile
  4377                           
  4378                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4379  1220  149D               	bsf	29,1	;volatile
  4380                           
  4381                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4382  1221  2A25               	goto	l9264
  4383  1222                     l9262:	
  4384                           
  4385                           ;MCU_B1.c: 458: Timeout_Counter();
  4386  1222  3190  20AF  3192   	fcall	_Timeout_Counter
  4387  1225                     l9264:	
  4388  1225  0021               	movlb	1	; select bank1
  4389  1226  1C9D               	btfss	29,1	;volatile
  4390  1227  2A2A               	goto	l9268
  4391  1228  1D2B               	btfss	(_myMain^(0+128)+11),2
  4392  1229  2A22               	goto	l9262
  4393  122A                     l9268:	
  4394                           
  4395                           ;MCU_B1.c: 459: };
  4396                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4397  122A  319E  2603         	fcall	_set_TimeoutCleared
  4398                           
  4399                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4400  122C  0021               	movlb	1	; select bank1
  4401  122D  081C               	movf	28,w	;volatile
  4402  122E  0020               	movlb	0	; select bank0
  4403  122F  01A1               	clrf	?_getAD+1
  4404  1230  07A1               	addwf	?_getAD+1,f
  4405  1231  0021               	movlb	1	; select bank1
  4406  1232  081B               	movf	27,w	;volatile
  4407  1233  0020               	movlb	0	; select bank0
  4408  1234  01A0               	clrf	?_getAD
  4409  1235  07A0               	addwf	?_getAD,f
  4410  1236  0008               	return
  4411  1237                     __end_of_getAD:	
  4412                           
  4413                           	psect	text5
  4414  1F8E                     __ptext5:	
  4415 ;; *************** function _WDT_Main *****************
  4416 ;; Defined at:
  4417 ;;		line 1097 in file "../src/MCU_B1.c"
  4418 ;; Parameters:    Size  Location     Type
  4419 ;;		None
  4420 ;; Auto vars:     Size  Location     Type
  4421 ;;		None
  4422 ;; Return value:  Size  Location     Type
  4423 ;;		None               void
  4424 ;; Registers used:
  4425 ;;		wreg, status,2, status,0, pclath, cstack
  4426 ;; Tracked objects:
  4427 ;;		On entry : 0/0
  4428 ;;		On exit  : 0/0
  4429 ;;		Unchanged: 0/0
  4430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4434 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4435 ;;Total ram usage:        1 bytes
  4436 ;; Hardware stack levels used:    1
  4437 ;; Hardware stack levels required when called:    6
  4438 ;; This function calls:
  4439 ;;		_WDT_Clearing
  4440 ;; This function is called by:
  4441 ;;		_main
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445                           
  4446                           ;psect for function _WDT_Main
  4447  1F8E                     _WDT_Main:	
  4448                           
  4449                           ;MCU_B1.c: 1098: if (WDT.Enable == 1) {
  4450                           
  4451                           ;incstack = 0
  4452                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4453  1F8E  0021               	movlb	1	; select bank1
  4454  1F8F  1C46               	btfss	_WDT^(0+128),0
  4455  1F90  0008               	return
  4456                           
  4457                           ;MCU_B1.c: 1099: if (WDT.Timer-- > 0) {
  4458  1F91  3001               	movlw	1
  4459  1F92  02C7               	subwf	(_WDT^(0+128)+1),f
  4460  1F93  0847               	movf	(_WDT^(0+128)+1),w
  4461  1F94  3AFF               	xorlw	255
  4462  1F95  1903               	skipnz
  4463  1F96  0008               	return
  4464                           
  4465                           ;MCU_B1.c: 1100: WDT.Timer = 100;
  4466  1F97  3064               	movlw	100
  4467  1F98  0020               	movlb	0	; select bank0
  4468  1F99  00A0               	movwf	??_WDT_Main
  4469  1F9A  0820               	movf	??_WDT_Main,w
  4470  1F9B  0021               	movlb	1	; select bank1
  4471  1F9C  00C7               	movwf	(_WDT^(0+128)+1)
  4472                           
  4473                           ;MCU_B1.c: 1101: WDT_Clearing();
  4474  1F9D  3180  2002         	fcall	_WDT_Clearing
  4475  1F9F  0008               	return
  4476  1FA0                     __end_of_WDT_Main:	
  4477                           
  4478                           	psect	text6
  4479  0002                     __ptext6:	
  4480 ;; *************** function _WDT_Clearing *****************
  4481 ;; Defined at:
  4482 ;;		line 1107 in file "../src/MCU_B1.c"
  4483 ;; Parameters:    Size  Location     Type
  4484 ;;		None
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;		None
  4487 ;; Return value:  Size  Location     Type
  4488 ;;		None               void
  4489 ;; Registers used:
  4490 ;;		None
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4500 ;;Total ram usage:        0 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    5
  4503 ;; This function calls:
  4504 ;;		Nothing
  4505 ;; This function is called by:
  4506 ;;		_WDT_Main
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           
  4511                           ;psect for function _WDT_Clearing
  4512  0002                     _WDT_Clearing:	
  4513                           
  4514                           ;incstack = 0
  4515                           ; Regs used in _WDT_Clearing: []
  4516  0002  0064               	clrwdt	;# 
  4517  0003  0008               	return
  4518  0004                     __end_of_WDT_Clearing:	
  4519                           
  4520                           	psect	text7
  4521  1DF0                     __ptext7:	
  4522 ;; *************** function _Temp_Main *****************
  4523 ;; Defined at:
  4524 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4525 ;; Parameters:    Size  Location     Type
  4526 ;;		None
  4527 ;; Auto vars:     Size  Location     Type
  4528 ;;		None
  4529 ;; Return value:  Size  Location     Type
  4530 ;;		None               void
  4531 ;; Registers used:
  4532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4542 ;;Total ram usage:        0 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:    8
  4545 ;; This function calls:
  4546 ;;		_setTemp_Main
  4547 ;; This function is called by:
  4548 ;;		_main
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           
  4553                           ;psect for function _Temp_Main
  4554  1DF0                     _Temp_Main:	
  4555                           
  4556                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4557                           
  4558                           ;incstack = 0
  4559                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4560  1DF0  3186  2615         	fcall	_setTemp_Main
  4561  1DF2  0008               	return
  4562  1DF3                     __end_of_Temp_Main:	
  4563                           
  4564                           	psect	text8
  4565  0615                     __ptext8:	
  4566 ;; *************** function _setTemp_Main *****************
  4567 ;; Defined at:
  4568 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;		None
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;  error           1   72[BANK0 ] unsigned char 
  4573 ;; Return value:  Size  Location     Type
  4574 ;;		None               void
  4575 ;; Registers used:
  4576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4577 ;; Tracked objects:
  4578 ;;		On entry : 0/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4584 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4585 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;Total ram usage:        3 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; Hardware stack levels required when called:    7
  4589 ;; This function calls:
  4590 ;;		_getMain_All_Error_Status
  4591 ;;		_setBuz
  4592 ;;		_setProductData
  4593 ;; This function is called by:
  4594 ;;		_Temp_Main
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           
  4599                           ;psect for function _setTemp_Main
  4600  0615                     _setTemp_Main:	
  4601                           
  4602                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4603                           
  4604                           ;incstack = 0
  4605                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4606  0615  3000               	movlw	0
  4607  0616  3191  2180  3186   	fcall	_getMain_All_Error_Status
  4608  0619  0020               	movlb	0	; select bank0
  4609  061A  00E6               	movwf	??_setTemp_Main
  4610  061B  0866               	movf	??_setTemp_Main,w
  4611  061C  00E8               	movwf	setTemp_Main@error
  4612                           
  4613                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4614  061D  0021               	movlb	1	; select bank1
  4615  061E  1C56               	btfss	_Temp^(0+128),0
  4616  061F  2EC1               	goto	l1763
  4617                           
  4618                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4619  0620  1956               	btfsc	_Temp^(0+128),2
  4620  0621  2E31               	goto	l9330
  4621                           
  4622                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4623  0622  3001               	movlw	1
  4624  0623  07D7               	addwf	(_Temp^(0+128)+1),f
  4625  0624  3000               	movlw	0
  4626  0625  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  4627                           
  4628                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  4629  0626  3001               	movlw	1
  4630  0627  0258               	subwf	((_Temp+1)^(0+128)+1),w
  4631  0628  30F4               	movlw	244
  4632  0629  1903               	skipnz
  4633  062A  0257               	subwf	(_Temp^(0+128)+1),w
  4634  062B  1C03               	skipc
  4635  062C  0008               	return
  4636                           
  4637                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  4638  062D  01D7               	clrf	(_Temp^(0+128)+1)
  4639  062E  01D8               	clrf	((_Temp+1)^(0+128)+1)
  4640                           
  4641                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  4642  062F  1556               	bsf	_Temp^(0+128),2
  4643                           
  4644                           ;OverTemperature_B1.c: 70: }
  4645                           ;OverTemperature_B1.c: 71: } else {
  4646  0630  0008               	return
  4647  0631                     l9330:	
  4648                           
  4649                           ;OverTemperature_B1.c: 72: Temp.Time++;
  4650  0631  3001               	movlw	1
  4651  0632  07D7               	addwf	(_Temp^(0+128)+1),f
  4652  0633  3000               	movlw	0
  4653  0634  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  4654                           
  4655                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  4656  0635  3000               	movlw	0
  4657  0636  0258               	subwf	((_Temp+1)^(0+128)+1),w
  4658  0637  3005               	movlw	5
  4659  0638  1903               	skipnz
  4660  0639  0257               	subwf	(_Temp^(0+128)+1),w
  4661  063A  1C03               	skipc
  4662  063B  0008               	return
  4663                           
  4664                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  4665  063C  01D7               	clrf	(_Temp^(0+128)+1)
  4666  063D  01D8               	clrf	((_Temp+1)^(0+128)+1)
  4667                           
  4668                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  4669  063E  3008               	movlw	8
  4670  063F  3ED6               	addlw	_Temp& (0+255)
  4671  0640  0086               	movwf	6
  4672  0641  0187               	clrf	7
  4673  0642  0016               	moviw fsr1++
  4674  0643  0401               	iorwf	1,w
  4675  0644  1903               	skipnz
  4676  0645  2EBB               	goto	l1768
  4677  0646  300A               	movlw	10
  4678  0647  3ED6               	addlw	_Temp& (0+255)
  4679  0648  0086               	movwf	6
  4680  0649  0187               	clrf	7
  4681  064A  0016               	moviw fsr1++
  4682  064B  0401               	iorwf	1,w
  4683  064C  1903               	skipnz
  4684  064D  2EBB               	goto	l1768
  4685                           
  4686                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  4687  064E  1156               	bcf	_Temp^(0+128),2
  4688                           
  4689                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4690  064F  300A               	movlw	10
  4691  0650  3ED6               	addlw	_Temp& (0+255)
  4692  0651  0086               	movwf	6
  4693  0652  0187               	clrf	7
  4694  0653  3008               	movlw	8
  4695  0654  3ED6               	addlw	_Temp& (0+255)
  4696  0655  0084               	movwf	4
  4697  0656  0185               	clrf	5
  4698  0657  3F40               	moviw [0]fsr1
  4699  0658  0700               	addwf	0,w
  4700  0659  0020               	movlb	0	; select bank0
  4701  065A  00E6               	movwf	??_setTemp_Main
  4702  065B  3101               	addfsr 0,1
  4703  065C  3F41               	moviw [1]fsr1
  4704  065D  3D00               	addwfc	0,w
  4705  065E  00E7               	movwf	??_setTemp_Main+1
  4706  065F  36E7               	lsrf	??_setTemp_Main+1,f
  4707  0660  0CE6               	rrf	??_setTemp_Main,f
  4708  0661  0866               	movf	??_setTemp_Main,w
  4709  0662  0021               	movlb	1	; select bank1
  4710  0663  00DC               	movwf	(_Temp^(0+128)+6)
  4711  0664  0020               	movlb	0	; select bank0
  4712  0665  0867               	movf	??_setTemp_Main+1,w
  4713  0666  0021               	movlb	1	; select bank1
  4714  0667  00DD               	movwf	((_Temp+1)^(0+128)+6)
  4715                           
  4716                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  4717  0668  30C7               	movlw	199
  4718  0669  00E4               	movwf	(_Temp^(0+128)+14)
  4719  066A  3001               	movlw	1
  4720  066B  00E5               	movwf	(_Temp^(0+128)+15)
  4721                           
  4722                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  4723  066C  309F               	movlw	159
  4724  066D  00E6               	movwf	(_Temp^(0+128)+16)
  4725  066E  3001               	movlw	1
  4726  066F  00E7               	movwf	(_Temp^(0+128)+17)
  4727                           
  4728                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  4729  0670  1CD6               	btfss	_Temp^(0+128),1
  4730  0671  2E92               	goto	l9362
  4731                           
  4732                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  4733  0672  0865               	movf	((_Temp+1)^(0+128)+14),w
  4734  0673  025D               	subwf	((_Temp+1)^(0+128)+6),w
  4735  0674  1D03               	skipz
  4736  0675  2E78               	goto	u10115
  4737  0676  0864               	movf	(_Temp^(0+128)+14),w
  4738  0677  025C               	subwf	(_Temp^(0+128)+6),w
  4739  0678                     u10115:	
  4740  0678  1C03               	skipc
  4741  0679  2E90               	goto	l9360
  4742                           
  4743                           ;OverTemperature_B1.c: 98: Temp.Count++;
  4744  067A  3001               	movlw	1
  4745  067B  0020               	movlb	0	; select bank0
  4746  067C  00E6               	movwf	??_setTemp_Main
  4747  067D  0866               	movf	??_setTemp_Main,w
  4748  067E  0021               	movlb	1	; select bank1
  4749  067F  07D9               	addwf	(_Temp^(0+128)+3),f
  4750                           
  4751                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  4752  0680  3003               	movlw	3
  4753  0681  0259               	subwf	(_Temp^(0+128)+3),w
  4754  0682  1C03               	skipc
  4755  0683  2EA8               	goto	l9374
  4756                           
  4757                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  4758  0684  01D9               	clrf	(_Temp^(0+128)+3)
  4759                           
  4760                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  4761  0685  10D6               	bcf	_Temp^(0+128),1
  4762                           
  4763                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  4764  0686  3064               	movlw	100
  4765  0687  0020               	movlb	0	; select bank0
  4766  0688  00A9               	movwf	setBuz@time
  4767  0689  3000               	movlw	0
  4768  068A  00AA               	movwf	setBuz@time+1
  4769  068B  3002               	movlw	2
  4770  068C  318A  2201  3186   	fcall	_setBuz
  4771                           
  4772                           ;OverTemperature_B1.c: 103: }
  4773                           ;OverTemperature_B1.c: 104: } else {
  4774  068F  2EA8               	goto	l9374
  4775  0690                     l9360:	
  4776                           
  4777                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  4778  0690  0021               	movlb	1	; select bank1
  4779  0691  2EA7               	goto	l9372
  4780  0692                     l9362:	
  4781                           ;OverTemperature_B1.c: 106: }
  4782                           ;OverTemperature_B1.c: 107: } else {
  4783                           
  4784                           
  4785                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  4786  0692  085D               	movf	((_Temp+1)^(0+128)+6),w
  4787  0693  0267               	subwf	((_Temp+1)^(0+128)+16),w
  4788  0694  1D03               	skipz
  4789  0695  2E98               	goto	u10135
  4790  0696  085C               	movf	(_Temp^(0+128)+6),w
  4791  0697  0266               	subwf	(_Temp^(0+128)+16),w
  4792  0698                     u10135:	
  4793  0698  1C03               	skipc
  4794  0699  2EA7               	goto	l9372
  4795                           
  4796                           ;OverTemperature_B1.c: 109: Temp.Count++;
  4797  069A  3001               	movlw	1
  4798  069B  0020               	movlb	0	; select bank0
  4799  069C  00E6               	movwf	??_setTemp_Main
  4800  069D  0866               	movf	??_setTemp_Main,w
  4801  069E  0021               	movlb	1	; select bank1
  4802  069F  07D9               	addwf	(_Temp^(0+128)+3),f
  4803                           
  4804                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  4805  06A0  3003               	movlw	3
  4806  06A1  0259               	subwf	(_Temp^(0+128)+3),w
  4807  06A2  1C03               	skipc
  4808  06A3  2EA8               	goto	l9374
  4809                           
  4810                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  4811  06A4  01D9               	clrf	(_Temp^(0+128)+3)
  4812                           
  4813                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  4814  06A5  14D6               	bsf	_Temp^(0+128),1
  4815                           
  4816                           ;OverTemperature_B1.c: 113: }
  4817                           ;OverTemperature_B1.c: 114: } else {
  4818  06A6  2EA8               	goto	l9374
  4819  06A7                     l9372:	
  4820                           
  4821                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  4822  06A7  01D9               	clrf	(_Temp^(0+128)+3)
  4823  06A8                     l9374:	
  4824                           
  4825                           ;OverTemperature_B1.c: 116: }
  4826                           ;OverTemperature_B1.c: 117: }
  4827                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  4828  06A8  0021               	movlb	1	; select bank1
  4829  06A9  085D               	movf	((_Temp+1)^(0+128)+6),w
  4830  06AA  0020               	movlb	0	; select bank0
  4831  06AB  00E6               	movwf	??_setTemp_Main
  4832  06AC  0866               	movf	??_setTemp_Main,w
  4833  06AD  00E2               	movwf	setProductData@value
  4834  06AE  3018               	movlw	24
  4835  06AF  319E  26C7  3186   	fcall	_setProductData
  4836                           
  4837                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  4838  06B2  0021               	movlb	1	; select bank1
  4839  06B3  085C               	movf	(_Temp^(0+128)+6),w
  4840  06B4  0020               	movlb	0	; select bank0
  4841  06B5  00E6               	movwf	??_setTemp_Main
  4842  06B6  0866               	movf	??_setTemp_Main,w
  4843  06B7  00E2               	movwf	setProductData@value
  4844  06B8  3019               	movlw	25
  4845  06B9  319E  26C7         	fcall	_setProductData
  4846  06BB                     l1768:	
  4847                           
  4848                           ;OverTemperature_B1.c: 135: }
  4849                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  4850  06BB  0021               	movlb	1	; select bank1
  4851  06BC  01DE               	clrf	(_Temp^(0+128)+8)
  4852  06BD  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4853                           
  4854                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  4855  06BE  01E0               	clrf	(_Temp^(0+128)+10)
  4856  06BF  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4857                           
  4858                           ;OverTemperature_B1.c: 138: }
  4859                           ;OverTemperature_B1.c: 139: }
  4860                           ;OverTemperature_B1.c: 141: } else {
  4861  06C0  0008               	return
  4862  06C1                     l1763:	
  4863                           
  4864                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  4865  06C1  1C20               	btfss	_myMain^(0+128),0
  4866  06C2  0008               	return
  4867                           
  4868                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  4869  06C3  1456               	bsf	_Temp^(0+128),0
  4870  06C4  0008               	return
  4871  06C5                     __end_of_setTemp_Main:	
  4872                           
  4873                           	psect	text9
  4874  1DED                     __ptext9:	
  4875 ;; *************** function _Temp_Initialization *****************
  4876 ;; Defined at:
  4877 ;;		line 8 in file "../src/OverTemperature_B1.c"
  4878 ;; Parameters:    Size  Location     Type
  4879 ;;		None
  4880 ;; Auto vars:     Size  Location     Type
  4881 ;;		None
  4882 ;; Return value:  Size  Location     Type
  4883 ;;		None               void
  4884 ;; Registers used:
  4885 ;;		status,2, status,0, pclath, cstack
  4886 ;; Tracked objects:
  4887 ;;		On entry : 0/0
  4888 ;;		On exit  : 0/0
  4889 ;;		Unchanged: 0/0
  4890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4895 ;;Total ram usage:        0 bytes
  4896 ;; Hardware stack levels used:    1
  4897 ;; Hardware stack levels required when called:    6
  4898 ;; This function calls:
  4899 ;;		_setTemp_Initialization
  4900 ;; This function is called by:
  4901 ;;		_main
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           
  4906                           ;psect for function _Temp_Initialization
  4907  1DED                     _Temp_Initialization:	
  4908                           
  4909                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  4910                           
  4911                           ;incstack = 0
  4912                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4913  1DED  319D  25E3         	fcall	_setTemp_Initialization
  4914  1DEF  0008               	return
  4915  1DF0                     __end_of_Temp_Initialization:	
  4916                           
  4917                           	psect	text10
  4918  1DE3                     __ptext10:	
  4919 ;; *************** function _setTemp_Initialization *****************
  4920 ;; Defined at:
  4921 ;;		line 44 in file "../src/OverTemperature_B1.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;		None
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;		None
  4926 ;; Return value:  Size  Location     Type
  4927 ;;		None               void
  4928 ;; Registers used:
  4929 ;;		None
  4930 ;; Tracked objects:
  4931 ;;		On entry : 0/0
  4932 ;;		On exit  : 0/0
  4933 ;;		Unchanged: 0/0
  4934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4939 ;;Total ram usage:        0 bytes
  4940 ;; Hardware stack levels used:    1
  4941 ;; Hardware stack levels required when called:    5
  4942 ;; This function calls:
  4943 ;;		Nothing
  4944 ;; This function is called by:
  4945 ;;		_Temp_Initialization
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           
  4950                           ;psect for function _setTemp_Initialization
  4951  1DE3                     _setTemp_Initialization:	
  4952                           
  4953                           ;incstack = 0
  4954                           ; Regs used in _setTemp_Initialization: []
  4955  1DE3  0008               	return
  4956  1DE4                     __end_of_setTemp_Initialization:	
  4957                           
  4958                           	psect	text11
  4959  1E68                     __ptext11:	
  4960 ;; *************** function _Switch_Main *****************
  4961 ;; Defined at:
  4962 ;;		line 72 in file "../src/Switch_B1.c"
  4963 ;; Parameters:    Size  Location     Type
  4964 ;;		None
  4965 ;; Auto vars:     Size  Location     Type
  4966 ;;		None
  4967 ;; Return value:  Size  Location     Type
  4968 ;;		None               void
  4969 ;; Registers used:
  4970 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4971 ;; Tracked objects:
  4972 ;;		On entry : 0/0
  4973 ;;		On exit  : 0/0
  4974 ;;		Unchanged: 0/0
  4975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4980 ;;Total ram usage:        0 bytes
  4981 ;; Hardware stack levels used:    1
  4982 ;; Hardware stack levels required when called:   10
  4983 ;; This function calls:
  4984 ;;		_TouchPower
  4985 ;;		_setSw_Main
  4986 ;; This function is called by:
  4987 ;;		_main
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           
  4992                           ;psect for function _Switch_Main
  4993  1E68                     _Switch_Main:	
  4994                           
  4995                           ;Switch_B1.c: 75: setSw_Main(1);
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4999  1E68  3001               	movlw	1
  5000  1E69  3180  2040  319E   	fcall	_setSw_Main
  5001                           
  5002                           ;Switch_B1.c: 79: setSw_Main(2);
  5003  1E6C  3002               	movlw	2
  5004  1E6D  3180  2040  319E   	fcall	_setSw_Main
  5005                           
  5006                           ;Switch_B1.c: 87: TouchPower();
  5007  1E70  3190  20EE         	fcall	_TouchPower
  5008  1E72  0008               	return
  5009  1E73                     __end_of_Switch_Main:	
  5010                           
  5011                           	psect	text12
  5012  0040                     __ptext12:	
  5013 ;; *************** function _setSw_Main *****************
  5014 ;; Defined at:
  5015 ;;		line 121 in file "../src/Switch_B1.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;  sw              1    wreg     unsigned char 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  sw              1   78[BANK0 ] unsigned char 
  5020 ;; Return value:  Size  Location     Type
  5021 ;;		None               void
  5022 ;; Registers used:
  5023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5031 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5032 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5033 ;;Total ram usage:        3 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    9
  5036 ;; This function calls:
  5037 ;;		_SwPointSelect
  5038 ;;		_getMain_All_Error_Status
  5039 ;;		_getSw_KeyStatus
  5040 ;;		_setBuz
  5041 ;;		_setDimmerLights_AdjOn
  5042 ;;		_setDimmerLights_SwOff
  5043 ;;		_setDimmerLights_SwOn
  5044 ;;		_setRF_Learn
  5045 ;; This function is called by:
  5046 ;;		_Switch_Main
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           
  5051                           ;psect for function _setSw_Main
  5052  0040                     _setSw_Main:	
  5053                           
  5054                           ;incstack = 0
  5055                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5056                           ;setSw_Main@sw stored from wreg
  5057  0040  0020               	movlb	0	; select bank0
  5058  0041  00EE               	movwf	setSw_Main@sw
  5059                           
  5060                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5061  0042  086E               	movf	setSw_Main@sw,w
  5062  0043  3190  2087  3180   	fcall	_SwPointSelect
  5063                           
  5064                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5065  0046  0877               	movf	_Sw,w
  5066  0047  0086               	movwf	6
  5067  0048  3001               	movlw	1	; select bank2/3
  5068  0049  0087               	movwf	7
  5069  004A  1C01               	btfss	1,0
  5070  004B  29AA               	goto	l2526
  5071                           
  5072                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5073  004C  3000               	movlw	0
  5074  004D  3191  2180  3180   	fcall	_getMain_All_Error_Status
  5075  0050  3800               	iorlw	0
  5076  0051  1D03               	skipz
  5077  0052  286E               	goto	l9510
  5078                           
  5079                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5080  0053  0A77               	incf	_Sw,w
  5081  0054  0086               	movwf	6
  5082  0055  3001               	movlw	1	; select bank2/3
  5083  0056  0087               	movwf	7
  5084  0057  1081               	bcf	1,1
  5085                           
  5086                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5087  0058  0020               	movlb	0	; select bank0
  5088  0059  086E               	movf	setSw_Main@sw,w
  5089  005A  3191  21D8  3180   	fcall	_getSw_KeyStatus
  5090  005D  3A01               	xorlw	1
  5091  005E  3000               	movlw	0
  5092  005F  1903               	skipnz
  5093  0060  3001               	movlw	1
  5094  0061  0020               	movlb	0	; select bank0
  5095  0062  00EC               	movwf	??_setSw_Main
  5096  0063  0877               	movf	_Sw,w
  5097  0064  0086               	movwf	6
  5098  0065  3001               	movlw	1	; select bank2/3
  5099  0066  0087               	movwf	7
  5100  0067  0DEC               	rlf	??_setSw_Main,f
  5101  0068  0801               	movf	1,w
  5102  0069  066C               	xorwf	??_setSw_Main,w
  5103  006A  39FD               	andlw	-3
  5104  006B  066C               	xorwf	??_setSw_Main,w
  5105  006C  0081               	movwf	1
  5106                           
  5107                           ;Switch_B1.c: 128: } else {
  5108  006D  2883               	goto	l2528
  5109  006E                     l9510:	
  5110                           
  5111                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5112  006E  0A77               	incf	_Sw,w
  5113  006F  0086               	movwf	6
  5114  0070  3001               	movlw	1	; select bank2/3
  5115  0071  0087               	movwf	7
  5116  0072  1881               	btfsc	1,1
  5117  0073  2883               	goto	l2528
  5118                           
  5119                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5120  0074  0A77               	incf	_Sw,w
  5121  0075  0086               	movwf	6
  5122  0076  3001               	movlw	1	; select bank2/3
  5123  0077  0087               	movwf	7
  5124  0078  1481               	bsf	1,1
  5125                           
  5126                           ;Switch_B1.c: 131: Sw->Touch = 0;
  5127  0079  0877               	movf	_Sw,w
  5128  007A  0086               	movwf	6
  5129  007B  3001               	movlw	1	; select bank2/3
  5130  007C  0087               	movwf	7
  5131  007D  1081               	bcf	1,1
  5132                           
  5133                           ;Switch_B1.c: 132: Sw->Debounce = 1;
  5134  007E  0877               	movf	_Sw,w
  5135  007F  0086               	movwf	6
  5136  0080  3001               	movlw	1	; select bank2/3
  5137  0081  0087               	movwf	7
  5138  0082  1501               	bsf	1,2
  5139  0083                     l2528:	
  5140                           
  5141                           ;Switch_B1.c: 133: }
  5142                           ;Switch_B1.c: 134: }
  5143                           ;Switch_B1.c: 136: if (Sw->Touch == 1) {
  5144  0083  0877               	movf	_Sw,w
  5145  0084  0086               	movwf	6
  5146  0085  3001               	movlw	1	; select bank2/3
  5147  0086  0087               	movwf	7
  5148  0087  1C81               	btfss	1,1
  5149  0088  2953               	goto	l9560
  5150                           
  5151                           ;Switch_B1.c: 137: if (Sw->Debounce == 0) {
  5152  0089  0877               	movf	_Sw,w
  5153  008A  0086               	movwf	6
  5154  008B  3001               	movlw	1	; select bank2/3
  5155  008C  0087               	movwf	7
  5156  008D  1901               	btfsc	1,2
  5157  008E  28B1               	goto	l9526
  5158                           
  5159                           ;Switch_B1.c: 138: Sw->DebounceTime++;
  5160  008F  3001               	movlw	1
  5161  0090  0020               	movlb	0	; select bank0
  5162  0091  00EC               	movwf	??_setSw_Main
  5163  0092  0877               	movf	_Sw,w
  5164  0093  3E02               	addlw	2
  5165  0094  0086               	movwf	6
  5166  0095  3001               	movlw	1	; select bank2/3
  5167  0096  0087               	movwf	7
  5168  0097  086C               	movf	??_setSw_Main,w
  5169  0098  0781               	addwf	1,f
  5170                           
  5171                           ;Switch_B1.c: 139: if (Sw->DebounceTime >= 5) {
  5172  0099  0877               	movf	_Sw,w
  5173  009A  3E02               	addlw	2
  5174  009B  0086               	movwf	6
  5175  009C  3001               	movlw	1	; select bank2/3
  5176  009D  0087               	movwf	7
  5177  009E  3005               	movlw	5
  5178  009F  0201               	subwf	1,w
  5179  00A0  1C03               	skipc
  5180  00A1  0008               	return
  5181                           
  5182                           ;Switch_B1.c: 140: Sw->DebounceTime = 0;
  5183  00A2  0877               	movf	_Sw,w
  5184  00A3  3E02               	addlw	2
  5185  00A4  0086               	movwf	6
  5186  00A5  3001               	movlw	1	; select bank2/3
  5187  00A6  0087               	movwf	7
  5188  00A7  0181               	clrf	1
  5189                           
  5190                           ;Switch_B1.c: 141: Sw->Debounce = 1;
  5191  00A8  0877               	movf	_Sw,w
  5192  00A9  0086               	movwf	6
  5193  00AA  3001               	movlw	1	; select bank2/3
  5194  00AB  0087               	movwf	7
  5195  00AC  1501               	bsf	1,2
  5196                           
  5197                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5198  00AD  086E               	movf	setSw_Main@sw,w
  5199  00AE  3196  2604         	fcall	_setDimmerLights_SwOn
  5200                           
  5201                           ;Switch_B1.c: 147: }
  5202                           ;Switch_B1.c: 148: } else {
  5203  00B0  0008               	return
  5204  00B1                     l9526:	
  5205                           
  5206                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5207  00B1  0877               	movf	_Sw,w
  5208  00B2  0086               	movwf	6
  5209  00B3  3001               	movlw	1	; select bank2/3
  5210  00B4  0087               	movwf	7
  5211  00B5  1981               	btfsc	1,3
  5212  00B6  28E3               	goto	l9536
  5213                           
  5214                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5215  00B7  0877               	movf	_Sw,w
  5216  00B8  3E03               	addlw	3
  5217  00B9  0086               	movwf	6
  5218  00BA  3001               	movlw	1	; select bank2/3
  5219  00BB  0087               	movwf	7
  5220  00BC  3001               	movlw	1
  5221  00BD  0781               	addwf	1,f
  5222  00BE  3141               	addfsr 1,1
  5223  00BF  1803               	skipnc
  5224  00C0  0A81               	incf	1,f
  5225                           
  5226                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= 150) {
  5227  00C1  0877               	movf	_Sw,w
  5228  00C2  3E03               	addlw	3
  5229  00C3  0086               	movwf	6
  5230  00C4  3001               	movlw	1	; select bank2/3
  5231  00C5  0087               	movwf	7
  5232  00C6  3F40               	moviw [0]fsr1
  5233  00C7  0020               	movlb	0	; select bank0
  5234  00C8  00EC               	movwf	??_setSw_Main
  5235  00C9  3F41               	moviw [1]fsr1
  5236  00CA  00ED               	movwf	??_setSw_Main+1
  5237  00CB  3000               	movlw	0
  5238  00CC  026D               	subwf	??_setSw_Main+1,w
  5239  00CD  3096               	movlw	150
  5240  00CE  1903               	skipnz
  5241  00CF  026C               	subwf	??_setSw_Main,w
  5242  00D0  1C03               	skipc
  5243  00D1  0008               	return
  5244                           
  5245                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  5246  00D2  0877               	movf	_Sw,w
  5247  00D3  3E03               	addlw	3
  5248  00D4  0086               	movwf	6
  5249  00D5  3001               	movlw	1	; select bank2/3
  5250  00D6  0087               	movwf	7
  5251  00D7  3000               	movlw	0
  5252  00D8  3FC0               	movwi [0]fsr1
  5253  00D9  3FC1               	movwi [1]fsr1
  5254                           
  5255                           ;Switch_B1.c: 155: Sw->Hold1 = 1;
  5256  00DA  0877               	movf	_Sw,w
  5257  00DB  0086               	movwf	6
  5258  00DC  3001               	movlw	1	; select bank2/3
  5259  00DD  0087               	movwf	7
  5260  00DE  1581               	bsf	1,3
  5261                           
  5262                           ;Switch_B1.c: 156: setDimmerLights_AdjOn(sw);
  5263  00DF  086E               	movf	setSw_Main@sw,w
  5264  00E0  3194  24A4         	fcall	_setDimmerLights_AdjOn
  5265                           
  5266                           ;Switch_B1.c: 159: }
  5267                           ;Switch_B1.c: 160: } else {
  5268  00E2  0008               	return
  5269  00E3                     l9536:	
  5270                           
  5271                           ;Switch_B1.c: 161: if (Sw->Hold2 == 0) {
  5272  00E3  0877               	movf	_Sw,w
  5273  00E4  0086               	movwf	6
  5274  00E5  3001               	movlw	1	; select bank2/3
  5275  00E6  0087               	movwf	7
  5276  00E7  1A01               	btfsc	1,4
  5277  00E8  2921               	goto	l9550
  5278                           
  5279                           ;Switch_B1.c: 162: Sw->Hold2Time++;
  5280  00E9  0877               	movf	_Sw,w
  5281  00EA  3E05               	addlw	5
  5282  00EB  0086               	movwf	6
  5283  00EC  3001               	movlw	1	; select bank2/3
  5284  00ED  0087               	movwf	7
  5285  00EE  3001               	movlw	1
  5286  00EF  0781               	addwf	1,f
  5287  00F0  3141               	addfsr 1,1
  5288  00F1  1803               	skipnc
  5289  00F2  0A81               	incf	1,f
  5290                           
  5291                           ;Switch_B1.c: 163: if (Sw->Hold2Time >= 150) {
  5292  00F3  0877               	movf	_Sw,w
  5293  00F4  3E05               	addlw	5
  5294  00F5  0086               	movwf	6
  5295  00F6  3001               	movlw	1	; select bank2/3
  5296  00F7  0087               	movwf	7
  5297  00F8  3F40               	moviw [0]fsr1
  5298  00F9  0020               	movlb	0	; select bank0
  5299  00FA  00EC               	movwf	??_setSw_Main
  5300  00FB  3F41               	moviw [1]fsr1
  5301  00FC  00ED               	movwf	??_setSw_Main+1
  5302  00FD  3000               	movlw	0
  5303  00FE  026D               	subwf	??_setSw_Main+1,w
  5304  00FF  3096               	movlw	150
  5305  0100  1903               	skipnz
  5306  0101  026C               	subwf	??_setSw_Main,w
  5307  0102  1C03               	skipc
  5308  0103  0008               	return
  5309                           
  5310                           ;Switch_B1.c: 164: Sw->Hold2Time = 0;
  5311  0104  0877               	movf	_Sw,w
  5312  0105  3E05               	addlw	5
  5313  0106  0086               	movwf	6
  5314  0107  3001               	movlw	1	; select bank2/3
  5315  0108  0087               	movwf	7
  5316  0109  3000               	movlw	0
  5317  010A  3FC0               	movwi [0]fsr1
  5318  010B  3FC1               	movwi [1]fsr1
  5319                           
  5320                           ;Switch_B1.c: 165: Sw->Hold2 = 1;
  5321  010C  0877               	movf	_Sw,w
  5322  010D  0086               	movwf	6
  5323  010E  3001               	movlw	1	; select bank2/3
  5324  010F  0087               	movwf	7
  5325  0110  1601               	bsf	1,4
  5326                           
  5327                           ;Switch_B1.c: 168: setRF_Learn(1);
  5328  0111  3001               	movlw	1
  5329  0112  3190  209B  3180   	fcall	_setRF_Learn
  5330                           
  5331                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5332  0115  0021               	movlb	1	; select bank1
  5333  0116  1EA0               	btfss	_myMain^(0+128),5
  5334  0117  0008               	return
  5335                           
  5336                           ;Switch_B1.c: 171: setBuz(2, 100);
  5337  0118  3064               	movlw	100
  5338  0119  0020               	movlb	0	; select bank0
  5339  011A  00A9               	movwf	setBuz@time
  5340  011B  3000               	movlw	0
  5341  011C  00AA               	movwf	setBuz@time+1
  5342  011D  3002               	movlw	2
  5343  011E  318A  2201         	fcall	_setBuz
  5344                           
  5345                           ;Switch_B1.c: 172: }
  5346                           ;Switch_B1.c: 174: }
  5347                           ;Switch_B1.c: 175: } else {
  5348  0120  0008               	return
  5349  0121                     l9550:	
  5350                           
  5351                           ;Switch_B1.c: 176: if (Sw->Hold3 == 0) {
  5352  0121  0877               	movf	_Sw,w
  5353  0122  0086               	movwf	6
  5354  0123  3001               	movlw	1	; select bank2/3
  5355  0124  0087               	movwf	7
  5356  0125  1A81               	btfsc	1,5
  5357  0126  0008               	return
  5358                           
  5359                           ;Switch_B1.c: 177: Sw->Hold3Time++;
  5360  0127  0877               	movf	_Sw,w
  5361  0128  3E07               	addlw	7
  5362  0129  0086               	movwf	6
  5363  012A  3001               	movlw	1	; select bank2/3
  5364  012B  0087               	movwf	7
  5365  012C  3001               	movlw	1
  5366  012D  0781               	addwf	1,f
  5367  012E  3141               	addfsr 1,1
  5368  012F  1803               	skipnc
  5369  0130  0A81               	incf	1,f
  5370                           
  5371                           ;Switch_B1.c: 178: if (Sw->Hold3Time >= 300) {
  5372  0131  0877               	movf	_Sw,w
  5373  0132  3E07               	addlw	7
  5374  0133  0086               	movwf	6
  5375  0134  3001               	movlw	1	; select bank2/3
  5376  0135  0087               	movwf	7
  5377  0136  3F40               	moviw [0]fsr1
  5378  0137  0020               	movlb	0	; select bank0
  5379  0138  00EC               	movwf	??_setSw_Main
  5380  0139  3F41               	moviw [1]fsr1
  5381  013A  00ED               	movwf	??_setSw_Main+1
  5382  013B  3001               	movlw	1
  5383  013C  026D               	subwf	??_setSw_Main+1,w
  5384  013D  302C               	movlw	44
  5385  013E  1903               	skipnz
  5386  013F  026C               	subwf	??_setSw_Main,w
  5387  0140  1C03               	skipc
  5388  0141  0008               	return
  5389                           
  5390                           ;Switch_B1.c: 179: Sw->Hold3Time = 0;
  5391  0142  0877               	movf	_Sw,w
  5392  0143  3E07               	addlw	7
  5393  0144  0086               	movwf	6
  5394  0145  3001               	movlw	1	; select bank2/3
  5395  0146  0087               	movwf	7
  5396  0147  3000               	movlw	0
  5397  0148  3FC0               	movwi [0]fsr1
  5398  0149  3FC1               	movwi [1]fsr1
  5399                           
  5400                           ;Switch_B1.c: 180: Sw->Hold3 = 1;
  5401  014A  0877               	movf	_Sw,w
  5402  014B  0086               	movwf	6
  5403  014C  3001               	movlw	1	; select bank2/3
  5404  014D  0087               	movwf	7
  5405  014E  1681               	bsf	1,5
  5406                           
  5407                           ;Switch_B1.c: 183: setRF_Learn(0);
  5408  014F  3000               	movlw	0
  5409  0150  3190  209B         	fcall	_setRF_Learn
  5410                           
  5411                           ;Switch_B1.c: 186: }
  5412                           ;Switch_B1.c: 187: }
  5413                           ;Switch_B1.c: 188: }
  5414                           ;Switch_B1.c: 189: }
  5415                           ;Switch_B1.c: 190: }
  5416                           ;Switch_B1.c: 191: } else {
  5417  0152  0008               	return
  5418  0153                     l9560:	
  5419                           
  5420                           ;Switch_B1.c: 192: if (Sw->Debounce == 1) {
  5421  0153  0877               	movf	_Sw,w
  5422  0154  0086               	movwf	6
  5423  0155  3001               	movlw	1	; select bank2/3
  5424  0156  0087               	movwf	7
  5425  0157  1D01               	btfss	1,2
  5426  0158  0008               	return
  5427                           
  5428                           ;Switch_B1.c: 193: Sw->DebounceTime++;
  5429  0159  3001               	movlw	1
  5430  015A  0020               	movlb	0	; select bank0
  5431  015B  00EC               	movwf	??_setSw_Main
  5432  015C  0877               	movf	_Sw,w
  5433  015D  3E02               	addlw	2
  5434  015E  0086               	movwf	6
  5435  015F  3001               	movlw	1	; select bank2/3
  5436  0160  0087               	movwf	7
  5437  0161  086C               	movf	??_setSw_Main,w
  5438  0162  0781               	addwf	1,f
  5439                           
  5440                           ;Switch_B1.c: 194: if (Sw->DebounceTime >= 5) {
  5441  0163  0877               	movf	_Sw,w
  5442  0164  3E02               	addlw	2
  5443  0165  0086               	movwf	6
  5444  0166  3001               	movlw	1	; select bank2/3
  5445  0167  0087               	movwf	7
  5446  0168  3005               	movlw	5
  5447  0169  0201               	subwf	1,w
  5448  016A  1C03               	skipc
  5449  016B  0008               	return
  5450                           
  5451                           ;Switch_B1.c: 195: Sw->DebounceTime = 0;
  5452  016C  0877               	movf	_Sw,w
  5453  016D  3E02               	addlw	2
  5454  016E  0086               	movwf	6
  5455  016F  3001               	movlw	1	; select bank2/3
  5456  0170  0087               	movwf	7
  5457  0171  0181               	clrf	1
  5458                           
  5459                           ;Switch_B1.c: 196: Sw->Debounce = 0;
  5460  0172  0877               	movf	_Sw,w
  5461  0173  0086               	movwf	6
  5462  0174  3001               	movlw	1	; select bank2/3
  5463  0175  0087               	movwf	7
  5464  0176  1101               	bcf	1,2
  5465                           
  5466                           ;Switch_B1.c: 197: Sw->Hold1Time = 0;
  5467  0177  0877               	movf	_Sw,w
  5468  0178  3E03               	addlw	3
  5469  0179  0086               	movwf	6
  5470  017A  3001               	movlw	1	; select bank2/3
  5471  017B  0087               	movwf	7
  5472  017C  3000               	movlw	0
  5473  017D  3FC0               	movwi [0]fsr1
  5474  017E  3FC1               	movwi [1]fsr1
  5475                           
  5476                           ;Switch_B1.c: 198: Sw->Hold1 = 0;
  5477  017F  0877               	movf	_Sw,w
  5478  0180  0086               	movwf	6
  5479  0181  3001               	movlw	1	; select bank2/3
  5480  0182  0087               	movwf	7
  5481  0183  1181               	bcf	1,3
  5482                           
  5483                           ;Switch_B1.c: 199: Sw->Hold2Time = 0;
  5484  0184  0877               	movf	_Sw,w
  5485  0185  3E05               	addlw	5
  5486  0186  0086               	movwf	6
  5487  0187  3001               	movlw	1	; select bank2/3
  5488  0188  0087               	movwf	7
  5489  0189  3000               	movlw	0
  5490  018A  3FC0               	movwi [0]fsr1
  5491  018B  3FC1               	movwi [1]fsr1
  5492                           
  5493                           ;Switch_B1.c: 200: Sw->Hold2 = 0;
  5494  018C  0877               	movf	_Sw,w
  5495  018D  0086               	movwf	6
  5496  018E  3001               	movlw	1	; select bank2/3
  5497  018F  0087               	movwf	7
  5498  0190  1201               	bcf	1,4
  5499                           
  5500                           ;Switch_B1.c: 201: Sw->Hold3Time = 0;
  5501  0191  0877               	movf	_Sw,w
  5502  0192  3E07               	addlw	7
  5503  0193  0086               	movwf	6
  5504  0194  3001               	movlw	1	; select bank2/3
  5505  0195  0087               	movwf	7
  5506  0196  3000               	movlw	0
  5507  0197  3FC0               	movwi [0]fsr1
  5508  0198  3FC1               	movwi [1]fsr1
  5509                           
  5510                           ;Switch_B1.c: 202: Sw->Hold3 = 0;
  5511  0199  0877               	movf	_Sw,w
  5512  019A  0086               	movwf	6
  5513  019B  3001               	movlw	1	; select bank2/3
  5514  019C  0087               	movwf	7
  5515  019D  1281               	bcf	1,5
  5516                           
  5517                           ;Switch_B1.c: 204: if (SwDetect.Error == 0) {
  5518  019E  0021               	movlb	1	; select bank1
  5519  019F  1851               	btfsc	_SwDetect^(0+128),0
  5520  01A0  29A6               	goto	l9586
  5521                           
  5522                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5523  01A1  0020               	movlb	0	; select bank0
  5524  01A2  086E               	movf	setSw_Main@sw,w
  5525  01A3  3189  21A9  3180   	fcall	_setDimmerLights_SwOff
  5526  01A6                     l9586:	
  5527                           
  5528                           ;Switch_B1.c: 206: }
  5529                           ;Switch_B1.c: 209: setRF_Learn(0);
  5530  01A6  3000               	movlw	0
  5531  01A7  3190  209B         	fcall	_setRF_Learn
  5532                           
  5533                           ;Switch_B1.c: 211: }
  5534                           ;Switch_B1.c: 212: }
  5535                           ;Switch_B1.c: 213: }
  5536                           ;Switch_B1.c: 214: } else {
  5537  01A9  0008               	return
  5538  01AA                     l2526:	
  5539                           
  5540                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5541  01AA  0021               	movlb	1	; select bank1
  5542  01AB  1C20               	btfss	_myMain^(0+128),0
  5543  01AC  0008               	return
  5544                           
  5545                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5546  01AD  0877               	movf	_Sw,w
  5547  01AE  0086               	movwf	6
  5548  01AF  3001               	movlw	1	; select bank2/3
  5549  01B0  0087               	movwf	7
  5550  01B1  1401               	bsf	1,0
  5551  01B2  0008               	return
  5552  01B3                     __end_of_setSw_Main:	
  5553                           
  5554                           	psect	text13
  5555  109B                     __ptext13:	
  5556 ;; *************** function _setRF_Learn *****************
  5557 ;; Defined at:
  5558 ;;		line 23 in file "../src/RF_Control_B1.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  command         1    wreg     unsigned char 
  5561 ;; Auto vars:     Size  Location     Type
  5562 ;;  command         1    1[BANK0 ] unsigned char 
  5563 ;; Return value:  Size  Location     Type
  5564 ;;		None               void
  5565 ;; Registers used:
  5566 ;;		wreg, status,2, status,0
  5567 ;; Tracked objects:
  5568 ;;		On entry : 0/0
  5569 ;;		On exit  : 0/0
  5570 ;;		Unchanged: 0/0
  5571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5573 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5574 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;Total ram usage:        2 bytes
  5577 ;; Hardware stack levels used:    1
  5578 ;; Hardware stack levels required when called:    5
  5579 ;; This function calls:
  5580 ;;		Nothing
  5581 ;; This function is called by:
  5582 ;;		_setSw_Main
  5583 ;; This function uses a non-reentrant model
  5584 ;;
  5585                           
  5586                           
  5587                           ;psect for function _setRF_Learn
  5588  109B                     _setRF_Learn:	
  5589                           
  5590                           ;incstack = 0
  5591                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5592                           ;setRF_Learn@command stored from wreg
  5593  109B  0020               	movlb	0	; select bank0
  5594  109C  00A1               	movwf	setRF_Learn@command
  5595                           
  5596                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5597  109D  0821               	movf	setRF_Learn@command,w
  5598  109E  3A01               	xorlw	1
  5599  109F  3000               	movlw	0
  5600  10A0  1903               	skipnz
  5601  10A1  3001               	movlw	1
  5602  10A2  00A0               	movwf	??_setRF_Learn
  5603  10A3  0EA0               	swapf	??_setRF_Learn,f
  5604  10A4  0DA0               	rlf	??_setRF_Learn,f
  5605  10A5  0DA0               	rlf	??_setRF_Learn,f
  5606  10A6  0021               	movlb	1	; select bank1
  5607  10A7  083A               	movf	_RF1^(0+128),w
  5608  10A8  0020               	movlb	0	; select bank0
  5609  10A9  0620               	xorwf	??_setRF_Learn,w
  5610  10AA  39BF               	andlw	-65
  5611  10AB  0620               	xorwf	??_setRF_Learn,w
  5612  10AC  0021               	movlb	1	; select bank1
  5613  10AD  00BA               	movwf	_RF1^(0+128)
  5614  10AE  0008               	return
  5615  10AF                     __end_of_setRF_Learn:	
  5616                           
  5617                           	psect	text14
  5618  14A4                     __ptext14:	
  5619 ;; *************** function _setDimmerLights_AdjOn *****************
  5620 ;; Defined at:
  5621 ;;		line 454 in file "../src/Dimmer_B1.c"
  5622 ;; Parameters:    Size  Location     Type
  5623 ;;  sw              1    wreg     unsigned char 
  5624 ;; Auto vars:     Size  Location     Type
  5625 ;;  sw              1    5[BANK0 ] unsigned char 
  5626 ;; Return value:  Size  Location     Type
  5627 ;;		None               void
  5628 ;; Registers used:
  5629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 0/0
  5632 ;;		On exit  : 0/0
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5638 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5639 ;;Total ram usage:        1 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:    6
  5642 ;; This function calls:
  5643 ;;		_DimmerLightsPointSelect
  5644 ;;		_getDimmerLights_Allow_Condition
  5645 ;; This function is called by:
  5646 ;;		_setSw_Main
  5647 ;; This function uses a non-reentrant model
  5648 ;;
  5649                           
  5650                           
  5651                           ;psect for function _setDimmerLights_AdjOn
  5652  14A4                     _setDimmerLights_AdjOn:	
  5653                           
  5654                           ;incstack = 0
  5655                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5656                           ;setDimmerLights_AdjOn@sw stored from wreg
  5657  14A4  0020               	movlb	0	; select bank0
  5658  14A5  00A5               	movwf	setDimmerLights_AdjOn@sw
  5659                           
  5660                           ;Dimmer_B1.c: 455: DimmerLightsPointSelect(sw);
  5661  14A6  0825               	movf	setDimmerLights_AdjOn@sw,w
  5662  14A7  319F  27A0  3194   	fcall	_DimmerLightsPointSelect
  5663                           
  5664                           ;Dimmer_B1.c: 465: if (DimmerLights->Trigger == 0 && getDimmerLights_Allow_Condition(sw)
      +                           == 0) {
  5665  14AA  0875               	movf	_DimmerLights,w
  5666  14AB  3E0A               	addlw	10
  5667  14AC  0086               	movwf	6
  5668  14AD  3001               	movlw	1	; select bank2/3
  5669  14AE  0087               	movwf	7
  5670  14AF  1881               	btfsc	1,1
  5671  14B0  0008               	return
  5672  14B1  0020               	movlb	0	; select bank0
  5673  14B2  0825               	movf	setDimmerLights_AdjOn@sw,w
  5674  14B3  3193  2387  3194   	fcall	_getDimmerLights_Allow_Condition
  5675  14B6  3800               	iorlw	0
  5676  14B7  1D03               	skipz
  5677  14B8  0008               	return
  5678                           
  5679                           ;Dimmer_B1.c: 466: if (DimmerLights->SwFlag == 1) {
  5680  14B9  0875               	movf	_DimmerLights,w
  5681  14BA  3E0B               	addlw	11
  5682  14BB  0086               	movwf	6
  5683  14BC  3001               	movlw	1	; select bank2/3
  5684  14BD  0087               	movwf	7
  5685  14BE  1C81               	btfss	1,1
  5686  14BF  0008               	return
  5687                           
  5688                           ;Dimmer_B1.c: 467: DimmerLights->SwAdj = 1;
  5689  14C0  0875               	movf	_DimmerLights,w
  5690  14C1  3E0B               	addlw	11
  5691  14C2  0086               	movwf	6
  5692  14C3  3001               	movlw	1	; select bank2/3
  5693  14C4  0087               	movwf	7
  5694  14C5  1501               	bsf	1,2
  5695                           
  5696                           ;Dimmer_B1.c: 468: DimmerLights->Status = 1;
  5697  14C6  0875               	movf	_DimmerLights,w
  5698  14C7  3E02               	addlw	2
  5699  14C8  0086               	movwf	6
  5700  14C9  3001               	movlw	1	; select bank2/3
  5701  14CA  0087               	movwf	7
  5702  14CB  1481               	bsf	1,1
  5703                           
  5704                           ;Dimmer_B1.c: 470: DimmerLights->TriggerAdj = 1;
  5705  14CC  0875               	movf	_DimmerLights,w
  5706  14CD  3E0A               	addlw	10
  5707  14CE  0086               	movwf	6
  5708  14CF  3001               	movlw	1	; select bank2/3
  5709  14D0  0087               	movwf	7
  5710  14D1  1581               	bsf	1,3
  5711                           
  5712                           ;Dimmer_B1.c: 471: DimmerLights->SwitchAdj = 1;
  5713  14D2  0875               	movf	_DimmerLights,w
  5714  14D3  3E0A               	addlw	10
  5715  14D4  0086               	movwf	6
  5716  14D5  3001               	movlw	1	; select bank2/3
  5717  14D6  0087               	movwf	7
  5718  14D7  1501               	bsf	1,2
  5719  14D8  0008               	return
  5720  14D9                     __end_of_setDimmerLights_AdjOn:	
  5721                           
  5722                           	psect	text15
  5723  11D8                     __ptext15:	
  5724 ;; *************** function _getSw_KeyStatus *****************
  5725 ;; Defined at:
  5726 ;;		line 222 in file "../src/Switch_B1.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  sw              1    wreg     unsigned char 
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;  sw              1    4[BANK0 ] unsigned char 
  5731 ;;  status          1    3[BANK0 ] unsigned char 
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  1    wreg      unsigned char 
  5734 ;; Registers used:
  5735 ;;		wreg, status,2
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5742 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5745 ;;Total ram usage:        5 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    5
  5748 ;; This function calls:
  5749 ;;		Nothing
  5750 ;; This function is called by:
  5751 ;;		_setSw_Main
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           
  5756                           ;psect for function _getSw_KeyStatus
  5757  11D8                     _getSw_KeyStatus:	
  5758                           
  5759                           ;incstack = 0
  5760                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  5761                           ;getSw_KeyStatus@sw stored from wreg
  5762  11D8  0020               	movlb	0	; select bank0
  5763  11D9  00A4               	movwf	getSw_KeyStatus@sw
  5764                           
  5765                           ;Switch_B1.c: 223: char status = 0;
  5766  11DA  01A3               	clrf	getSw_KeyStatus@status
  5767                           
  5768                           ;Switch_B1.c: 235: if (sw == 1) {
  5769  11DB  0824               	movf	getSw_KeyStatus@sw,w
  5770  11DC  3A01               	xorlw	1
  5771  11DD  1D03               	skipz
  5772  11DE  29E7               	goto	l9034
  5773                           
  5774                           ;Switch_B1.c: 236: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  5775  11DF  01A1               	clrf	_getSw_KeyStatus$5696
  5776  11E0  0AA1               	incf	_getSw_KeyStatus$5696,f
  5777  11E1  1F0C               	btfss	12,6	;volatile
  5778  11E2  1A0C               	btfsc	12,4	;volatile
  5779  11E3  29E5               	goto	l9032
  5780  11E4  01A1               	clrf	_getSw_KeyStatus$5696
  5781  11E5                     l9032:	
  5782  11E5  0821               	movf	_getSw_KeyStatus$5696,w
  5783  11E6  29F2               	goto	L1
  5784  11E7                     l9034:	
  5785                           ;Switch_B1.c: 237: } else if (sw == 2) {
  5786                           
  5787  11E7  0824               	movf	getSw_KeyStatus@sw,w
  5788  11E8  3A02               	xorlw	2
  5789  11E9  1D03               	skipz
  5790  11EA  29F5               	goto	l9044
  5791                           
  5792                           ;Switch_B1.c: 238: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  5793  11EB  01A2               	clrf	_getSw_KeyStatus$5697
  5794  11EC  0AA2               	incf	_getSw_KeyStatus$5697,f
  5795  11ED  1C0C               	btfss	12,0	;volatile
  5796  11EE  188D               	btfsc	13,1	;volatile
  5797  11EF  29F1               	goto	l9042
  5798  11F0  01A2               	clrf	_getSw_KeyStatus$5697
  5799  11F1                     l9042:	
  5800  11F1  0822               	movf	_getSw_KeyStatus$5697,w
  5801  11F2                     L1:	
  5802  11F2  00A0               	movwf	??_getSw_KeyStatus
  5803  11F3  0820               	movf	??_getSw_KeyStatus,w
  5804  11F4  00A3               	movwf	getSw_KeyStatus@status
  5805  11F5                     l9044:	
  5806                           
  5807                           ;Switch_B1.c: 239: }
  5808                           ;Switch_B1.c: 246: return status;
  5809  11F5  0823               	movf	getSw_KeyStatus@status,w
  5810  11F6  0008               	return
  5811  11F7                     __end_of_getSw_KeyStatus:	
  5812                           
  5813                           	psect	text16
  5814  1087                     __ptext16:	
  5815 ;; *************** function _SwPointSelect *****************
  5816 ;; Defined at:
  5817 ;;		line 25 in file "../src/Switch_B1.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;  sw              1    wreg     unsigned char 
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;  sw              1    1[BANK0 ] unsigned char 
  5822 ;; Return value:  Size  Location     Type
  5823 ;;		None               void
  5824 ;; Registers used:
  5825 ;;		wreg
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5835 ;;Total ram usage:        2 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    5
  5838 ;; This function calls:
  5839 ;;		Nothing
  5840 ;; This function is called by:
  5841 ;;		_setSw_Main
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           
  5846                           ;psect for function _SwPointSelect
  5847  1087                     _SwPointSelect:	
  5848                           
  5849                           ;incstack = 0
  5850                           ; Regs used in _SwPointSelect: [wreg]
  5851                           ;SwPointSelect@sw stored from wreg
  5852  1087  0020               	movlb	0	; select bank0
  5853  1088  00A1               	movwf	SwPointSelect@sw
  5854                           
  5855                           ;Switch_B1.c: 28: if (sw == 1) {
  5856  1089  0821               	movf	SwPointSelect@sw,w
  5857  108A  3A01               	xorlw	1
  5858  108B  1D03               	skipz
  5859  108C  2892               	goto	l9018
  5860                           
  5861                           ;Switch_B1.c: 29: Sw = &Sw1;
  5862  108D  30C5               	movlw	_Sw1& (0+255)
  5863  108E  00A0               	movwf	??_SwPointSelect
  5864  108F  0820               	movf	??_SwPointSelect,w
  5865  1090  00F7               	movwf	_Sw
  5866                           
  5867                           ;Switch_B1.c: 30: }
  5868  1091  0008               	return
  5869  1092                     l9018:	
  5870                           
  5871                           ;Switch_B1.c: 33: else if (sw == 2) {
  5872  1092  0821               	movf	SwPointSelect@sw,w
  5873  1093  3A02               	xorlw	2
  5874  1094  1D03               	skipz
  5875  1095  0008               	return
  5876                           
  5877                           ;Switch_B1.c: 34: Sw = &Sw2;
  5878  1096  30CE               	movlw	_Sw2& (0+255)
  5879  1097  00A0               	movwf	??_SwPointSelect
  5880  1098  0820               	movf	??_SwPointSelect,w
  5881  1099  00F7               	movwf	_Sw
  5882  109A  0008               	return
  5883  109B                     __end_of_SwPointSelect:	
  5884                           
  5885                           	psect	text17
  5886  1066                     __ptext17:	
  5887 ;; *************** function _Switch_Initialization *****************
  5888 ;; Defined at:
  5889 ;;		line 46 in file "../src/Switch_B1.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;		None
  5892 ;; Auto vars:     Size  Location     Type
  5893 ;;		None
  5894 ;; Return value:  Size  Location     Type
  5895 ;;		None               void
  5896 ;; Registers used:
  5897 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5898 ;; Tracked objects:
  5899 ;;		On entry : 0/0
  5900 ;;		On exit  : 0/0
  5901 ;;		Unchanged: 0/0
  5902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5907 ;;Total ram usage:        0 bytes
  5908 ;; Hardware stack levels used:    1
  5909 ;; Hardware stack levels required when called:    8
  5910 ;; This function calls:
  5911 ;;		_TouchPower
  5912 ;;		_setSw_Initialization
  5913 ;; This function is called by:
  5914 ;;		_main
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           
  5919                           ;psect for function _Switch_Initialization
  5920  1066                     _Switch_Initialization:	
  5921                           
  5922                           ;Switch_B1.c: 47: TouchPower();
  5923                           
  5924                           ;incstack = 0
  5925                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5926  1066  3190  20EE  3190   	fcall	_TouchPower
  5927                           
  5928                           ;Switch_B1.c: 49: WPUB1 = 0;
  5929  1069  0024               	movlb	4	; select bank4
  5930  106A  108D               	bcf	13,1	;volatile
  5931                           
  5932                           ;Switch_B1.c: 58: setSw_Initialization(1);
  5933  106B  3001               	movlw	1
  5934  106C  319E  2641  3190   	fcall	_setSw_Initialization
  5935                           
  5936                           ;Switch_B1.c: 62: setSw_Initialization(2);
  5937  106F  3002               	movlw	2
  5938  1070  319E  2641         	fcall	_setSw_Initialization
  5939  1072  0008               	return
  5940  1073                     __end_of_Switch_Initialization:	
  5941                           
  5942                           	psect	text18
  5943  1E41                     __ptext18:	
  5944 ;; *************** function _setSw_Initialization *****************
  5945 ;; Defined at:
  5946 ;;		line 93 in file "../src/Switch_B1.c"
  5947 ;; Parameters:    Size  Location     Type
  5948 ;;  sw              1    wreg     unsigned char 
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;  sw              1    4[BANK0 ] unsigned char 
  5951 ;; Return value:  Size  Location     Type
  5952 ;;		None               void
  5953 ;; Registers used:
  5954 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5955 ;; Tracked objects:
  5956 ;;		On entry : 0/0
  5957 ;;		On exit  : 0/0
  5958 ;;		Unchanged: 0/0
  5959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5961 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5963 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5964 ;;Total ram usage:        1 bytes
  5965 ;; Hardware stack levels used:    1
  5966 ;; Hardware stack levels required when called:    7
  5967 ;; This function calls:
  5968 ;;		_setLED
  5969 ;; This function is called by:
  5970 ;;		_Switch_Initialization
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           
  5975                           ;psect for function _setSw_Initialization
  5976  1E41                     _setSw_Initialization:	
  5977                           
  5978                           ;incstack = 0
  5979                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5980                           ;setSw_Initialization@sw stored from wreg
  5981  1E41  0020               	movlb	0	; select bank0
  5982  1E42  00A4               	movwf	setSw_Initialization@sw
  5983                           
  5984                           ;Switch_B1.c: 94: setLED(sw, 1);
  5985  1E43  01A2               	clrf	setLED@command
  5986  1E44  0AA2               	incf	setLED@command,f
  5987  1E45  0824               	movf	setSw_Initialization@sw,w
  5988  1E46  3188  20AA         	fcall	_setLED
  5989  1E48  0008               	return
  5990  1E49                     __end_of_setSw_Initialization:	
  5991                           
  5992                           	psect	text19
  5993  10EE                     __ptext19:	
  5994 ;; *************** function _TouchPower *****************
  5995 ;; Defined at:
  5996 ;;		line 10 in file "../src/Switch_B1.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;		None
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;		None
  6001 ;; Return value:  Size  Location     Type
  6002 ;;		None               void
  6003 ;; Registers used:
  6004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6014 ;;Total ram usage:        0 bytes
  6015 ;; Hardware stack levels used:    1
  6016 ;; Hardware stack levels required when called:    6
  6017 ;; This function calls:
  6018 ;;		_Timeout_Counter
  6019 ;;		_set_TimeoutCleared
  6020 ;; This function is called by:
  6021 ;;		_Switch_Initialization
  6022 ;;		_Switch_Main
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026                           
  6027                           ;psect for function _TouchPower
  6028  10EE                     _TouchPower:	
  6029                           
  6030                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6031                           
  6032                           ;incstack = 0
  6033                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6034  10EE  0020               	movlb	0	; select bank0
  6035  10EF  1A8E               	btfsc	14,5	;volatile
  6036  10F0  0008               	return
  6037                           
  6038                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6039  10F1  0021               	movlb	1	; select bank1
  6040  10F2  1C20               	btfss	_myMain^(0+128),0
  6041  10F3  0008               	return
  6042  10F4  28FA               	goto	l9492
  6043  10F5                     l2504:	
  6044                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6045                           
  6046                           
  6047                           ;Switch_B1.c: 14: RC5 = 1;
  6048  10F5  0020               	movlb	0	; select bank0
  6049  10F6  168E               	bsf	14,5	;volatile
  6050                           
  6051                           ;Switch_B1.c: 15: Timeout_Counter();
  6052  10F7  3190  20AF  3190   	fcall	_Timeout_Counter
  6053  10FA                     l9492:	
  6054  10FA  0020               	movlb	0	; select bank0
  6055  10FB  1A8E               	btfsc	14,5	;volatile
  6056  10FC  2900               	goto	l9496
  6057  10FD  0021               	movlb	1	; select bank1
  6058  10FE  1D2B               	btfss	(_myMain^(0+128)+11),2
  6059  10FF  28F5               	goto	l2504
  6060  1100                     l9496:	
  6061                           
  6062                           ;Switch_B1.c: 16: }
  6063                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6064  1100  319E  2603         	fcall	_set_TimeoutCleared
  6065  1102  0008               	return
  6066  1103                     __end_of_TouchPower:	
  6067                           
  6068                           	psect	text20
  6069  1DEA                     __ptext20:	
  6070 ;; *************** function _RF_Main *****************
  6071 ;; Defined at:
  6072 ;;		line 16 in file "../src/RF_Control_B1.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;		None
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;		None
  6077 ;; Return value:  Size  Location     Type
  6078 ;;		None               void
  6079 ;; Registers used:
  6080 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6081 ;; Tracked objects:
  6082 ;;		On entry : 0/0
  6083 ;;		On exit  : 0/0
  6084 ;;		Unchanged: 0/0
  6085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;Total ram usage:        0 bytes
  6091 ;; Hardware stack levels used:    1
  6092 ;; Hardware stack levels required when called:   14
  6093 ;; This function calls:
  6094 ;;		_setRF_Main
  6095 ;; This function is called by:
  6096 ;;		_main
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           
  6101                           ;psect for function _RF_Main
  6102  1DEA                     _RF_Main:	
  6103                           
  6104                           ;RF_Control_B1.c: 18: setRF_Main();
  6105                           
  6106                           ;incstack = 0
  6107                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6108  1DEA  3184  2486         	fcall	_setRF_Main
  6109  1DEC  0008               	return
  6110  1DED                     __end_of_RF_Main:	
  6111                           
  6112                           	psect	text21
  6113  0486                     __ptext21:	
  6114 ;; *************** function _setRF_Main *****************
  6115 ;; Defined at:
  6116 ;;		line 52 in file "../src/RF_Control_B1.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;		None
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;  error           1    2[BANK3 ] unsigned char 
  6121 ;;  Receive_OK      1    1[BANK3 ] unsigned char 
  6122 ;;  loop_f          1    0[BANK3 ] unsigned char 
  6123 ;; Return value:  Size  Location     Type
  6124 ;;		None               void
  6125 ;; Registers used:
  6126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Totals:         0       0       1       0       3       0       0       0       0       0       0       0       
      +0       0
  6136 ;;Total ram usage:        4 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:   13
  6139 ;; This function calls:
  6140 ;;		_CC2500_RxData
  6141 ;;		_CC2500_TxData
  6142 ;;		_CC2500_WriteCommand
  6143 ;;		_RF_RxDisable
  6144 ;;		_getBuz_GO
  6145 ;;		_getMain_All_Error_Status
  6146 ;;		_getRF_KeyStatus
  6147 ;;		_getRxData
  6148 ;; This function is called by:
  6149 ;;		_RF_Main
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           
  6154                           ;psect for function _setRF_Main
  6155  0486                     _setRF_Main:	
  6156                           
  6157                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6158                           
  6159                           ;incstack = 0
  6160                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6161  0486  0023               	movlb	3	; select bank3
  6162  0487  01E5               	clrf	setRF_Main@loop_f^(0+384)
  6163  0488  01E6               	clrf	setRF_Main@Receive_OK^(0+384)
  6164  0489  01E7               	clrf	setRF_Main@error^(0+384)
  6165                           
  6166                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6167  048A  0021               	movlb	1	; select bank1
  6168  048B  1C3A               	btfss	_RF1^(0+128),0
  6169  048C  2D5D               	goto	l2111
  6170                           
  6171                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6172  048D  319F  2724  3184   	fcall	_getBuz_GO
  6173  0490  0020               	movlb	0	; select bank0
  6174  0491  0821               	movf	?_getBuz_GO+1,w
  6175  0492  0420               	iorwf	?_getBuz_GO,w
  6176  0493  1D03               	skipz
  6177  0494  0008               	return
  6178                           
  6179                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6180  0495  3000               	movlw	0
  6181  0496  3191  2180  3184   	fcall	_getMain_All_Error_Status
  6182  0499  3800               	iorlw	0
  6183  049A  1D03               	skipz
  6184  049B  2CAD               	goto	l2113
  6185                           
  6186                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6187  049C  319F  2735  3184   	fcall	_getRF_KeyStatus
  6188  049F  3A01               	xorlw	1
  6189  04A0  3000               	movlw	0
  6190  04A1  1903               	skipnz
  6191  04A2  3001               	movlw	1
  6192  04A3  0021               	movlb	1	; select bank1
  6193  04A4  00ED               	movwf	??_setRF_Main^(0+128)
  6194  04A5  0CED               	rrf	??_setRF_Main^(0+128),f
  6195  04A6  0CED               	rrf	??_setRF_Main^(0+128),f
  6196  04A7  083A               	movf	_RF1^(0+128),w
  6197  04A8  066D               	xorwf	??_setRF_Main^(0+128),w
  6198  04A9  397F               	andlw	-129
  6199  04AA  066D               	xorwf	??_setRF_Main^(0+128),w
  6200  04AB  00BA               	movwf	_RF1^(0+128)
  6201                           
  6202                           ;RF_Control_B1.c: 65: } else {
  6203  04AC  2CAF               	goto	l2114
  6204  04AD                     l2113:	
  6205                           
  6206                           ;RF_Control_B1.c: 66: RF1.Key = 0;
  6207  04AD  0021               	movlb	1	; select bank1
  6208  04AE  13BA               	bcf	_RF1^(0+128),7
  6209  04AF                     l2114:	
  6210                           
  6211                           ;RF_Control_B1.c: 67: }
  6212                           ;RF_Control_B1.c: 69: if (RF1.Key == 1 && RF1.Learn == 0) {
  6213  04AF  1BBA               	btfsc	_RF1^(0+128),7
  6214  04B0  1B3A               	btfsc	_RF1^(0+128),6
  6215  04B1  2CB7               	goto	l2115
  6216                           
  6217                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  6218  04B2  01BC               	clrf	(_RF1^(0+128)+2)
  6219  04B3  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6220                           
  6221                           ;RF_Control_B1.c: 71: RF1.Run = 1;
  6222  04B4  14BB               	bsf	(_RF1^(0+128)+1),1
  6223                           
  6224                           ;RF_Control_B1.c: 72: RF1.RxStatus = 0;
  6225  04B5  11BA               	bcf	_RF1^(0+128),3
  6226                           
  6227                           ;RF_Control_B1.c: 73: } else {
  6228  04B6  0008               	return
  6229  04B7                     l2115:	
  6230                           
  6231                           ;RF_Control_B1.c: 74: if (RF1.Run == 1 && RF1.Learn == 0) {
  6232  04B7  18BB               	btfsc	(_RF1^(0+128)+1),1
  6233  04B8  1B3A               	btfsc	_RF1^(0+128),6
  6234  04B9  2CCE               	goto	l9410
  6235                           
  6236                           ;RF_Control_B1.c: 75: RF1.Count++;
  6237  04BA  3001               	movlw	1
  6238  04BB  07BC               	addwf	(_RF1^(0+128)+2),f
  6239  04BC  3000               	movlw	0
  6240  04BD  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6241                           
  6242                           ;RF_Control_B1.c: 76: if (RF1.Count == RF1.RunTime) {
  6243  04BE  3002               	movlw	2
  6244  04BF  3EBA               	addlw	_RF1& (0+255)
  6245  04C0  0086               	movwf	6
  6246  04C1  0187               	clrf	7
  6247  04C2  3F40               	moviw [0]fsr1
  6248  04C3  0641               	xorwf	(_RF1^(0+128)+7),w
  6249  04C4  1D03               	skipz
  6250  04C5  2CC8               	goto	u10235
  6251  04C6  3F41               	moviw [1]fsr1
  6252  04C7  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6253  04C8                     u10235:	
  6254  04C8  1D03               	skipz
  6255  04C9  2D2A               	goto	l9462
  6256                           
  6257                           ;RF_Control_B1.c: 77: RF1.Count = 0;
  6258  04CA  01BC               	clrf	(_RF1^(0+128)+2)
  6259  04CB  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6260                           
  6261                           ;RF_Control_B1.c: 78: RF1.Run = 0;
  6262  04CC  10BB               	bcf	(_RF1^(0+128)+1),1
  6263                           
  6264                           ;RF_Control_B1.c: 79: }
  6265                           ;RF_Control_B1.c: 80: } else {
  6266  04CD  2D2A               	goto	l9462
  6267  04CE                     l9410:	
  6268                           
  6269                           ;RF_Control_B1.c: 81: RF1.Count = 0;
  6270  04CE  01BC               	clrf	(_RF1^(0+128)+2)
  6271  04CF  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6272                           
  6273                           ;RF_Control_B1.c: 82: RF1.Run = 0;
  6274  04D0  10BB               	bcf	(_RF1^(0+128)+1),1
  6275                           
  6276                           ;RF_Control_B1.c: 84: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6277  04D1  193A               	btfsc	_RF1^(0+128),2
  6278  04D2  1B3A               	btfsc	_RF1^(0+128),6
  6279  04D3  2CE2               	goto	l2120
  6280                           
  6281                           ;RF_Control_B1.c: 85: RF1.TransceiveGO = 0;
  6282  04D4  113A               	bcf	_RF1^(0+128),2
  6283                           
  6284                           ;RF_Control_B1.c: 86: RF1.RxStatus = 0;
  6285  04D5  11BA               	bcf	_RF1^(0+128),3
  6286                           
  6287                           ;RF_Control_B1.c: 87: RF1.ReceiveGO = 0;
  6288  04D6  10BA               	bcf	_RF1^(0+128),1
  6289                           
  6290                           ;RF_Control_B1.c: 88: RF1.RunTime = 5;
  6291  04D7  3005               	movlw	5
  6292  04D8  00C1               	movwf	(_RF1^(0+128)+7)
  6293  04D9  3000               	movlw	0
  6294  04DA  00C2               	movwf	(_RF1^(0+128)+8)
  6295                           
  6296                           ;RF_Control_B1.c: 92: RF_RxDisable();
  6297  04DB  319E  26E4  3184   	fcall	_RF_RxDisable
  6298                           
  6299                           ;RF_Control_B1.c: 99: CC2500_TxData();
  6300  04DE  318C  2431  3184   	fcall	_CC2500_TxData
  6301                           
  6302                           ;RF_Control_B1.c: 101: } else {
  6303  04E1  2D2A               	goto	l9462
  6304  04E2                     l2120:	
  6305                           
  6306                           ;RF_Control_B1.c: 103: if (RF1.RxStatus == 1) {
  6307  04E2  1DBA               	btfss	_RF1^(0+128),3
  6308  04E3  2D19               	goto	l2122
  6309                           
  6310                           ;RF_Control_B1.c: 105: CC2500_RxData();
  6311  04E4  318D  25C6  3184   	fcall	_CC2500_RxData
  6312                           
  6313                           ;RF_Control_B1.c: 107: if (RF1.ReceiveGO == 1) {
  6314  04E7  0021               	movlb	1	; select bank1
  6315  04E8  1CBA               	btfss	_RF1^(0+128),1
  6316  04E9  2D2A               	goto	l9462
  6317                           
  6318                           ;RF_Control_B1.c: 108: RF1.ReceiveGO = 0;
  6319  04EA  10BA               	bcf	_RF1^(0+128),1
  6320                           
  6321                           ;RF_Control_B1.c: 109: RF1.Correction = 0;
  6322  04EB  12BB               	bcf	(_RF1^(0+128)+1),5
  6323                           
  6324                           ;RF_Control_B1.c: 110: RF1.CorrectionCounter = 0;
  6325  04EC  01C4               	clrf	(_RF1^(0+128)+10)
  6326  04ED  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6327                           
  6328                           ;RF_Control_B1.c: 121: getRxData();
  6329  04EE  3187  2775  3184   	fcall	_getRxData
  6330                           
  6331                           ;RF_Control_B1.c: 122: RF1.Run = 1;
  6332  04F1  0021               	movlb	1	; select bank1
  6333  04F2  14BB               	bsf	(_RF1^(0+128)+1),1
  6334                           
  6335                           ;RF_Control_B1.c: 124: if (RF1.Checked == 1) {
  6336  04F3  1DBB               	btfss	(_RF1^(0+128)+1),3
  6337  04F4  2D02               	goto	l9446
  6338                           
  6339                           ;RF_Control_B1.c: 125: if (RF1.RunTime > 5) {
  6340  04F5  3000               	movlw	0
  6341  04F6  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6342  04F7  3006               	movlw	6
  6343  04F8  1903               	skipnz
  6344  04F9  0241               	subwf	(_RF1^(0+128)+7),w
  6345  04FA  1C03               	skipc
  6346  04FB  2D00               	goto	l9444
  6347                           
  6348                           ;RF_Control_B1.c: 126: RF1.RunTime = 5;
  6349  04FC  3005               	movlw	5
  6350  04FD  00C1               	movwf	(_RF1^(0+128)+7)
  6351  04FE  3000               	movlw	0
  6352  04FF  00C2               	movwf	(_RF1^(0+128)+8)
  6353  0500                     l9444:	
  6354                           
  6355                           ;RF_Control_B1.c: 127: }
  6356                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  6357  0500  01BE               	clrf	(_RF1^(0+128)+4)
  6358                           
  6359                           ;RF_Control_B1.c: 129: } else {
  6360  0501  2D2A               	goto	l9462
  6361  0502                     l9446:	
  6362                           
  6363                           ;RF_Control_B1.c: 130: RF1.CheckCount++;
  6364  0502  3001               	movlw	1
  6365  0503  00ED               	movwf	??_setRF_Main^(0+128)
  6366  0504  086D               	movf	??_setRF_Main^(0+128),w
  6367  0505  07BE               	addwf	(_RF1^(0+128)+4),f
  6368                           
  6369                           ;RF_Control_B1.c: 131: if (RF1.CheckCount == 2) {
  6370  0506  083E               	movf	(_RF1^(0+128)+4),w
  6371  0507  3A02               	xorlw	2
  6372  0508  1D03               	skipz
  6373  0509  2D2A               	goto	l9462
  6374                           
  6375                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  6376  050A  01BE               	clrf	(_RF1^(0+128)+4)
  6377                           
  6378                           ;RF_Control_B1.c: 133: RF1.CheckedCounter = 0;
  6379  050B  01BF               	clrf	(_RF1^(0+128)+5)
  6380  050C  01C0               	clrf	((_RF1+1)^(0+128)+5)
  6381                           
  6382                           ;RF_Control_B1.c: 135: if (RF1.RunTime < (5 * 20)) {
  6383  050D  3000               	movlw	0
  6384  050E  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6385  050F  3064               	movlw	100
  6386  0510  1903               	skipnz
  6387  0511  0241               	subwf	(_RF1^(0+128)+7),w
  6388  0512  1803               	skipnc
  6389  0513  2D2A               	goto	l9462
  6390                           
  6391                           ;RF_Control_B1.c: 136: RF1.RunTime += 5;
  6392  0514  3005               	movlw	5
  6393  0515  07C1               	addwf	(_RF1^(0+128)+7),f
  6394  0516  3000               	movlw	0
  6395  0517  3DC2               	addwfc	((_RF1+1)^(0+128)+7),f
  6396                           
  6397                           ;RF_Control_B1.c: 137: }
  6398                           ;RF_Control_B1.c: 138: }
  6399                           ;RF_Control_B1.c: 139: }
  6400                           ;RF_Control_B1.c: 140: }
  6401                           ;RF_Control_B1.c: 141: } else {
  6402  0518  2D2A               	goto	l9462
  6403  0519                     l2122:	
  6404                           
  6405                           ;RF_Control_B1.c: 143: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6406  0519  1DBA               	btfss	_RF1^(0+128),3
  6407  051A  18BA               	btfsc	_RF1^(0+128),1
  6408  051B  2D2A               	goto	l9462
  6409                           
  6410                           ;RF_Control_B1.c: 144: RF1.RxStatus = 1;
  6411  051C  15BA               	bsf	_RF1^(0+128),3
  6412                           
  6413                           ;RF_Control_B1.c: 145: RF1.Correction = 1;
  6414  051D  16BB               	bsf	(_RF1^(0+128)+1),5
  6415                           
  6416                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x36);
  6417  051E  3036               	movlw	54
  6418  051F  3191  214C  3184   	fcall	_CC2500_WriteCommand
  6419                           
  6420                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x3A);
  6421  0522  303A               	movlw	58
  6422  0523  3191  214C  3184   	fcall	_CC2500_WriteCommand
  6423                           
  6424                           ;RF_Control_B1.c: 150: CC2500_WriteCommand(0x34);
  6425  0526  3034               	movlw	52
  6426  0527  3191  214C  3184   	fcall	_CC2500_WriteCommand
  6427  052A                     l9462:	
  6428                           
  6429                           ;RF_Control_B1.c: 151: }
  6430                           ;RF_Control_B1.c: 153: }
  6431                           ;RF_Control_B1.c: 154: }
  6432                           ;RF_Control_B1.c: 155: }
  6433                           ;RF_Control_B1.c: 157: if (RF1.RxStatus == 1) {
  6434  052A  0021               	movlb	1	; select bank1
  6435  052B  1DBA               	btfss	_RF1^(0+128),3
  6436  052C  2D4B               	goto	l9474
  6437                           
  6438                           ;RF_Control_B1.c: 158: RF1.CheckedCounter++;
  6439  052D  3001               	movlw	1
  6440  052E  07BF               	addwf	(_RF1^(0+128)+5),f
  6441  052F  3000               	movlw	0
  6442  0530  3DC0               	addwfc	((_RF1+1)^(0+128)+5),f
  6443                           
  6444                           ;RF_Control_B1.c: 159: if (RF1.CheckedCounter == 100) {
  6445  0531  3005               	movlw	5
  6446  0532  3EBA               	addlw	_RF1& (0+255)
  6447  0533  0086               	movwf	6
  6448  0534  0187               	clrf	7
  6449  0535  3F40               	moviw [0]fsr1
  6450  0536  3A64               	xorlw	100
  6451  0537  1D03               	skipz
  6452  0538  2D3B               	goto	u10355
  6453  0539  3F41               	moviw [1]fsr1
  6454  053A  3A00               	xorlw	0
  6455  053B                     u10355:	
  6456  053B  1D03               	skipz
  6457  053C  2D4B               	goto	l9474
  6458                           
  6459                           ;RF_Control_B1.c: 160: RF1.CheckedCounter = 0;
  6460  053D  01BF               	clrf	(_RF1^(0+128)+5)
  6461  053E  01C0               	clrf	((_RF1+1)^(0+128)+5)
  6462                           
  6463                           ;RF_Control_B1.c: 161: RF1.CheckCount = 0;
  6464  053F  01BE               	clrf	(_RF1^(0+128)+4)
  6465                           
  6466                           ;RF_Control_B1.c: 162: if (RF1.RunTime > 5) {
  6467  0540  3000               	movlw	0
  6468  0541  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6469  0542  3006               	movlw	6
  6470  0543  1903               	skipnz
  6471  0544  0241               	subwf	(_RF1^(0+128)+7),w
  6472  0545  1C03               	skipc
  6473  0546  2D4B               	goto	l9474
  6474                           
  6475                           ;RF_Control_B1.c: 163: RF1.RunTime -= 5;
  6476  0547  3005               	movlw	5
  6477  0548  02C1               	subwf	(_RF1^(0+128)+7),f
  6478  0549  3000               	movlw	0
  6479  054A  3BC2               	subwfb	((_RF1+1)^(0+128)+7),f
  6480  054B                     l9474:	
  6481                           
  6482                           ;RF_Control_B1.c: 164: }
  6483                           ;RF_Control_B1.c: 165: }
  6484                           ;RF_Control_B1.c: 166: }
  6485                           ;RF_Control_B1.c: 167: if (RF1.Correction == 1) {
  6486  054B  1EBB               	btfss	(_RF1^(0+128)+1),5
  6487  054C  0008               	return
  6488                           
  6489                           ;RF_Control_B1.c: 168: RF1.CorrectionCounter++;
  6490  054D  3001               	movlw	1
  6491  054E  07C4               	addwf	(_RF1^(0+128)+10),f
  6492  054F  3000               	movlw	0
  6493  0550  3DC5               	addwfc	((_RF1+1)^(0+128)+10),f
  6494                           
  6495                           ;RF_Control_B1.c: 169: if (RF1.CorrectionCounter >= 6000) {
  6496  0551  3017               	movlw	23
  6497  0552  0245               	subwf	((_RF1+1)^(0+128)+10),w
  6498  0553  3070               	movlw	112
  6499  0554  1903               	skipnz
  6500  0555  0244               	subwf	(_RF1^(0+128)+10),w
  6501  0556  1C03               	skipc
  6502  0557  0008               	return
  6503                           
  6504                           ;RF_Control_B1.c: 170: RF1.CorrectionCounter = 0;
  6505  0558  01C4               	clrf	(_RF1^(0+128)+10)
  6506  0559  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6507                           
  6508                           ;RF_Control_B1.c: 171: RF_RxDisable();
  6509  055A  319E  26E4         	fcall	_RF_RxDisable
  6510                           
  6511                           ;RF_Control_B1.c: 172: }
  6512                           ;RF_Control_B1.c: 173: }
  6513                           ;RF_Control_B1.c: 174: }
  6514                           ;RF_Control_B1.c: 175: }
  6515                           ;RF_Control_B1.c: 182: } else {
  6516  055C  0008               	return
  6517  055D                     l2111:	
  6518                           
  6519                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  6520  055D  1C20               	btfss	_myMain^(0+128),0
  6521  055E  0008               	return
  6522                           
  6523                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  6524  055F  143A               	bsf	_RF1^(0+128),0
  6525  0560  0008               	return
  6526  0561                     __end_of_setRF_Main:	
  6527                           
  6528                           	psect	text22
  6529  0775                     __ptext22:	
  6530 ;; *************** function _getRxData *****************
  6531 ;; Defined at:
  6532 ;;		line 278 in file "../src/RF_Control_B1.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;		None
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;  error           1    4[BANK1 ] unsigned char 
  6537 ;; Return value:  Size  Location     Type
  6538 ;;		None               void
  6539 ;; Registers used:
  6540 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;Total ram usage:        2 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:   12
  6553 ;; This function calls:
  6554 ;;		_getMain_All_Error_Status
  6555 ;;		_setControl_Lights_Table
  6556 ;;		_setLog_Code
  6557 ;;		_setTxData
  6558 ;; This function is called by:
  6559 ;;		_setRF_Main
  6560 ;; This function uses a non-reentrant model
  6561 ;;
  6562                           
  6563                           
  6564                           ;psect for function _getRxData
  6565  0775                     _getRxData:	
  6566                           
  6567                           ;RF_Control_B1.c: 279: char error = getMain_All_Error_Status(0);
  6568                           
  6569                           ;incstack = 0
  6570                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6571  0775  3000               	movlw	0
  6572  0776  3191  2180  3187   	fcall	_getMain_All_Error_Status
  6573  0779  0020               	movlb	0	; select bank0
  6574  077A  00EF               	movwf	??_getRxData
  6575  077B  086F               	movf	??_getRxData,w
  6576  077C  0021               	movlb	1	; select bank1
  6577  077D  00EC               	movwf	getRxData@error^(0+128)
  6578                           
  6579                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6580  077E  0022               	movlb	2	; select bank2
  6581  077F  0820               	movf	_RF_Data^(0+256),w
  6582  0780  3AAA               	xorlw	170
  6583  0781  1D03               	skipz
  6584  0782  2F99               	goto	l8968
  6585  0783  0821               	movf	(_RF_Data^(0+256)+1),w
  6586  0784  3A01               	xorlw	1
  6587  0785  1D03               	skipz
  6588  0786  2F99               	goto	l8968
  6589                           
  6590                           ;RF_Control_B1.c: 282: product->Data[2] = 0x55;
  6591  0787  3055               	movlw	85
  6592  0788  0020               	movlb	0	; select bank0
  6593  0789  00EF               	movwf	??_getRxData
  6594  078A  0879               	movf	_product,w
  6595  078B  3E02               	addlw	2
  6596  078C  0086               	movwf	6
  6597  078D  3002               	movlw	2	; select bank4/5
  6598  078E  0087               	movwf	7
  6599  078F  086F               	movf	??_getRxData,w
  6600  0790  0081               	movwf	1
  6601                           
  6602                           ;RF_Control_B1.c: 283: setTxData();
  6603  0791  318E  26BC         	fcall	_setTxData
  6604                           
  6605                           ;RF_Control_B1.c: 284: RF1.RunTime = 10;
  6606  0793  300A               	movlw	10
  6607  0794  0021               	movlb	1	; select bank1
  6608  0795  00C1               	movwf	(_RF1^(0+128)+7)
  6609  0796  3000               	movlw	0
  6610  0797  00C2               	movwf	(_RF1^(0+128)+8)
  6611                           
  6612                           ;RF_Control_B1.c: 290: } else {
  6613  0798  0008               	return
  6614  0799                     l8968:	
  6615                           
  6616                           ;RF_Control_B1.c: 292: if (error == 0) {
  6617  0799  0021               	movlb	1	; select bank1
  6618  079A  08EC               	movf	getRxData@error^(0+128),f
  6619  079B  1D03               	skipz
  6620  079C  0008               	return
  6621                           
  6622                           ;RF_Control_B1.c: 293: if (RF1.Learn == 1) {
  6623  079D  1F3A               	btfss	_RF1^(0+128),6
  6624  079E  2FAF               	goto	l8980
  6625                           
  6626                           ;RF_Control_B1.c: 294: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6627  079F  0022               	movlb	2	; select bank2
  6628  07A0  08A0               	movf	_RF_Data^(0+256),f
  6629  07A1  1D03               	skipz
  6630  07A2  2FAC               	goto	l2164
  6631  07A3  0821               	movf	(_RF_Data^(0+256)+1),w
  6632  07A4  3A64               	xorlw	100
  6633  07A5  1D03               	skipz
  6634  07A6  2FAC               	goto	l2164
  6635                           
  6636                           ;RF_Control_B1.c: 295: setLog_Code();
  6637  07A7  3194  2470         	fcall	_setLog_Code
  6638                           
  6639                           ;RF_Control_B1.c: 296: RF1.Checked = 1;
  6640  07A9  0021               	movlb	1	; select bank1
  6641  07AA  15BB               	bsf	(_RF1^(0+128)+1),3
  6642                           
  6643                           ;RF_Control_B1.c: 297: } else {
  6644  07AB  0008               	return
  6645  07AC                     l2164:	
  6646                           
  6647                           ;RF_Control_B1.c: 298: RF1.Checked = 0;
  6648  07AC  0021               	movlb	1	; select bank1
  6649  07AD  11BB               	bcf	(_RF1^(0+128)+1),3
  6650                           
  6651                           ;RF_Control_B1.c: 299: }
  6652                           ;RF_Control_B1.c: 300: } else {
  6653  07AE  0008               	return
  6654  07AF                     l8980:	
  6655                           
  6656                           ;RF_Control_B1.c: 301: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6657  07AF  0022               	movlb	2	; select bank2
  6658  07B0  08A0               	movf	_RF_Data^(0+256),f
  6659  07B1  1D03               	skipz
  6660  07B2  2FE8               	goto	l9002
  6661  07B3  0821               	movf	(_RF_Data^(0+256)+1),w
  6662  07B4  3A02               	xorlw	2
  6663  07B5  1D03               	skipz
  6664  07B6  2FE8               	goto	l9002
  6665                           
  6666                           ;RF_Control_B1.c: 303: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6667  07B7  082C               	movf	(_RF_Data^(0+256)+12),w
  6668  07B8  3AFF               	xorlw	255
  6669  07B9  1D03               	skipz
  6670  07BA  2FC7               	goto	l8992
  6671  07BB  082D               	movf	(_RF_Data^(0+256)+13),w
  6672  07BC  3AFF               	xorlw	255
  6673  07BD  1D03               	skipz
  6674  07BE  2FC7               	goto	l8992
  6675  07BF  082E               	movf	(_RF_Data^(0+256)+14),w
  6676  07C0  3AFF               	xorlw	255
  6677  07C1  1D03               	skipz
  6678  07C2  2FC7               	goto	l8992
  6679                           
  6680                           ;RF_Control_B1.c: 304: __nop();
  6681  07C3  0000               	nop
  6682                           
  6683                           ;RF_Control_B1.c: 305: RF1.Checked = 0;
  6684  07C4  0021               	movlb	1	; select bank1
  6685  07C5  11BB               	bcf	(_RF1^(0+128)+1),3
  6686                           
  6687                           ;RF_Control_B1.c: 306: } else {
  6688  07C6  0008               	return
  6689  07C7                     l8992:	
  6690                           
  6691                           ;RF_Control_B1.c: 307: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6692  07C7  0879               	movf	_product,w
  6693  07C8  3E0C               	addlw	12
  6694  07C9  0086               	movwf	6
  6695  07CA  3002               	movlw	2	; select bank4/5
  6696  07CB  0087               	movwf	7
  6697  07CC  0022               	movlb	2	; select bank2
  6698  07CD  082C               	movf	(_RF_Data^(0+256)+12),w
  6699  07CE  0601               	xorwf	1,w
  6700  07CF  1D03               	skipz
  6701  07D0  0008               	return
  6702  07D1  0879               	movf	_product,w
  6703  07D2  3E0D               	addlw	13
  6704  07D3  0086               	movwf	6
  6705  07D4  3002               	movlw	2	; select bank4/5
  6706  07D5  0087               	movwf	7
  6707  07D6  082D               	movf	(_RF_Data^(0+256)+13),w
  6708  07D7  0601               	xorwf	1,w
  6709  07D8  1D03               	skipz
  6710  07D9  0008               	return
  6711  07DA  0879               	movf	_product,w
  6712  07DB  3E0E               	addlw	14
  6713  07DC  0086               	movwf	6
  6714  07DD  3002               	movlw	2	; select bank4/5
  6715  07DE  0087               	movwf	7
  6716  07DF  082E               	movf	(_RF_Data^(0+256)+14),w
  6717  07E0  0601               	xorwf	1,w
  6718  07E1  1D03               	skipz
  6719  07E2  0008               	return
  6720                           
  6721                           ;RF_Control_B1.c: 308: setControl_Lights_Table();
  6722  07E3  318D  255F         	fcall	_setControl_Lights_Table
  6723                           
  6724                           ;RF_Control_B1.c: 309: RF1.Checked = 1;
  6725  07E5  0021               	movlb	1	; select bank1
  6726  07E6  15BB               	bsf	(_RF1^(0+128)+1),3
  6727                           
  6728                           ;RF_Control_B1.c: 310: }
  6729                           ;RF_Control_B1.c: 311: }
  6730                           ;RF_Control_B1.c: 312: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6731  07E7  0008               	return
  6732  07E8                     l9002:	
  6733  07E8  0022               	movlb	2	; select bank2
  6734  07E9  0820               	movf	_RF_Data^(0+256),w
  6735  07EA  3AFF               	xorlw	255
  6736  07EB  1D03               	skipz
  6737  07EC  2FF3               	goto	l9008
  6738  07ED  0821               	movf	(_RF_Data^(0+256)+1),w
  6739  07EE  3A02               	xorlw	2
  6740  07EF  1D03               	skipz
  6741  07F0  2FF3               	goto	l9008
  6742                           
  6743                           ;RF_Control_B1.c: 313: __nop();
  6744  07F1  0000               	nop
  6745                           
  6746                           ;RF_Control_B1.c: 314: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6747  07F2  0008               	return
  6748  07F3                     l9008:	
  6749  07F3  0022               	movlb	2	; select bank2
  6750  07F4  08A0               	movf	_RF_Data^(0+256),f
  6751  07F5  1D03               	skipz
  6752  07F6  2FFD               	goto	l2174
  6753  07F7  0821               	movf	(_RF_Data^(0+256)+1),w
  6754  07F8  3A65               	xorlw	101
  6755  07F9  1D03               	skipz
  6756  07FA  2FFD               	goto	l2174
  6757                           
  6758                           ;RF_Control_B1.c: 315: __nop();
  6759  07FB  0000               	nop
  6760                           
  6761                           ;RF_Control_B1.c: 316: } else {
  6762  07FC  0008               	return
  6763  07FD                     l2174:	
  6764                           
  6765                           ;RF_Control_B1.c: 317: RF1.Checked = 0;
  6766  07FD  0021               	movlb	1	; select bank1
  6767  07FE  11BB               	bcf	(_RF1^(0+128)+1),3
  6768                           
  6769                           ;RF_Control_B1.c: 325: ;
  6770                           
  6771                           ;RF_Control_B1.c: 318: }
  6772                           ;RF_Control_B1.c: 323: }
  6773                           ;RF_Control_B1.c: 324: } else {
  6774  07FF  0008               	return
  6775  0800                     __end_of_getRxData:	
  6776                           
  6777                           	psect	text23
  6778  1470                     __ptext23:	
  6779 ;; *************** function _setLog_Code *****************
  6780 ;; Defined at:
  6781 ;;		line 331 in file "../src/RF_Control_B1.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;		None
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;		None
  6786 ;; Return value:  Size  Location     Type
  6787 ;;		None               void
  6788 ;; Registers used:
  6789 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;Total ram usage:        1 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    7
  6802 ;; This function calls:
  6803 ;;		_setBuz
  6804 ;;		_setMemory_LoopSave
  6805 ;;		_setMemory_Modify
  6806 ;;		_setProductData
  6807 ;; This function is called by:
  6808 ;;		_getRxData
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           
  6813                           ;psect for function _setLog_Code
  6814  1470                     _setLog_Code:	
  6815                           
  6816                           ;RF_Control_B1.c: 332: RF1.Learn = 0;
  6817                           
  6818                           ;incstack = 0
  6819                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6820  1470  0021               	movlb	1	; select bank1
  6821  1471  133A               	bcf	_RF1^(0+128),6
  6822                           
  6823                           ;RF_Control_B1.c: 333: setProductData(12, RF_Data[12]);
  6824  1472  0022               	movlb	2	; select bank2
  6825  1473  082C               	movf	(_RF_Data^(0+256)+12),w
  6826  1474  0020               	movlb	0	; select bank0
  6827  1475  00E6               	movwf	??_setLog_Code
  6828  1476  0866               	movf	??_setLog_Code,w
  6829  1477  00E2               	movwf	setProductData@value
  6830  1478  300C               	movlw	12
  6831  1479  319E  26C7  3194   	fcall	_setProductData
  6832                           
  6833                           ;RF_Control_B1.c: 334: setProductData(13, RF_Data[13]);
  6834  147C  0022               	movlb	2	; select bank2
  6835  147D  082D               	movf	(_RF_Data^(0+256)+13),w
  6836  147E  0020               	movlb	0	; select bank0
  6837  147F  00E6               	movwf	??_setLog_Code
  6838  1480  0866               	movf	??_setLog_Code,w
  6839  1481  00E2               	movwf	setProductData@value
  6840  1482  300D               	movlw	13
  6841  1483  319E  26C7  3194   	fcall	_setProductData
  6842                           
  6843                           ;RF_Control_B1.c: 335: setProductData(14, RF_Data[14]);
  6844  1486  0022               	movlb	2	; select bank2
  6845  1487  082E               	movf	(_RF_Data^(0+256)+14),w
  6846  1488  0020               	movlb	0	; select bank0
  6847  1489  00E6               	movwf	??_setLog_Code
  6848  148A  0866               	movf	??_setLog_Code,w
  6849  148B  00E2               	movwf	setProductData@value
  6850  148C  300E               	movlw	14
  6851  148D  319E  26C7  3194   	fcall	_setProductData
  6852                           
  6853                           ;RF_Control_B1.c: 336: setBuz(1, 100);
  6854  1490  3064               	movlw	100
  6855  1491  0020               	movlb	0	; select bank0
  6856  1492  00A9               	movwf	setBuz@time
  6857  1493  3000               	movlw	0
  6858  1494  00AA               	movwf	setBuz@time+1
  6859  1495  3001               	movlw	1
  6860  1496  318A  2201  3194   	fcall	_setBuz
  6861                           
  6862                           ;RF_Control_B1.c: 337: if (myMain.First == 1) {
  6863  1499  0021               	movlb	1	; select bank1
  6864  149A  1EA0               	btfss	_myMain^(0+128),5
  6865  149B  2CA0               	goto	l2180
  6866                           
  6867                           ;RF_Control_B1.c: 338: setMemory_LoopSave(1);
  6868  149C  3001               	movlw	1
  6869  149D  319F  27D9  3194   	fcall	_setMemory_LoopSave
  6870  14A0                     l2180:	
  6871                           
  6872                           ;RF_Control_B1.c: 339: }
  6873                           ;RF_Control_B1.c: 340: setMemory_Modify(1);
  6874  14A0  3001               	movlw	1
  6875  14A1  319F  27C6         	fcall	_setMemory_Modify
  6876  14A3  0008               	return
  6877  14A4                     __end_of_setLog_Code:	
  6878                           
  6879                           	psect	text24
  6880  1FD9                     __ptext24:	
  6881 ;; *************** function _setMemory_LoopSave *****************
  6882 ;; Defined at:
  6883 ;;		line 1070 in file "../src/MCU_B1.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;  command         1    wreg     unsigned char 
  6886 ;; Auto vars:     Size  Location     Type
  6887 ;;  command         1    1[BANK0 ] unsigned char 
  6888 ;; Return value:  Size  Location     Type
  6889 ;;		None               void
  6890 ;; Registers used:
  6891 ;;		wreg, status,2, status,0
  6892 ;; Tracked objects:
  6893 ;;		On entry : 0/0
  6894 ;;		On exit  : 0/0
  6895 ;;		Unchanged: 0/0
  6896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6900 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6901 ;;Total ram usage:        2 bytes
  6902 ;; Hardware stack levels used:    1
  6903 ;; Hardware stack levels required when called:    5
  6904 ;; This function calls:
  6905 ;;		Nothing
  6906 ;; This function is called by:
  6907 ;;		_setLog_Code
  6908 ;; This function uses a non-reentrant model
  6909 ;;
  6910                           
  6911                           
  6912                           ;psect for function _setMemory_LoopSave
  6913  1FD9                     _setMemory_LoopSave:	
  6914                           
  6915                           ;incstack = 0
  6916                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  6917                           ;setMemory_LoopSave@command stored from wreg
  6918  1FD9  0020               	movlb	0	; select bank0
  6919  1FDA  00A1               	movwf	setMemory_LoopSave@command
  6920                           
  6921                           ;MCU_B1.c: 1071: Memory.LoopSave = command == 1 ? 1 : 0;
  6922  1FDB  0821               	movf	setMemory_LoopSave@command,w
  6923  1FDC  3A01               	xorlw	1
  6924  1FDD  3000               	movlw	0
  6925  1FDE  1903               	skipnz
  6926  1FDF  3001               	movlw	1
  6927  1FE0  00A0               	movwf	??_setMemory_LoopSave
  6928  1FE1  0DA0               	rlf	??_setMemory_LoopSave,f
  6929  1FE2  0DA0               	rlf	??_setMemory_LoopSave,f
  6930  1FE3  0023               	movlb	3	; select bank3
  6931  1FE4  0844               	movf	(_Memory^(0+384)+36),w
  6932  1FE5  0020               	movlb	0	; select bank0
  6933  1FE6  0620               	xorwf	??_setMemory_LoopSave,w
  6934  1FE7  39FB               	andlw	-5
  6935  1FE8  0620               	xorwf	??_setMemory_LoopSave,w
  6936  1FE9  0023               	movlb	3	; select bank3
  6937  1FEA  00C4               	movwf	(_Memory^(0+384)+36)
  6938  1FEB  0008               	return
  6939  1FEC                     __end_of_setMemory_LoopSave:	
  6940                           
  6941                           	psect	text25
  6942  0D5F                     __ptext25:	
  6943 ;; *************** function _setControl_Lights_Table *****************
  6944 ;; Defined at:
  6945 ;;		line 344 in file "../src/RF_Control_B1.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;		None
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;		None
  6950 ;; Return value:  Size  Location     Type
  6951 ;;		None               void
  6952 ;; Registers used:
  6953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6954 ;; Tracked objects:
  6955 ;;		On entry : 0/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6963 ;;Total ram usage:        0 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:   11
  6966 ;; This function calls:
  6967 ;;		_setBuz
  6968 ;;		_setDimmerLights_ErrorClose
  6969 ;;		_setProductData
  6970 ;;		_setRFSW_AdjControl
  6971 ;;		_setRFSW_Control
  6972 ;;		_setTxData
  6973 ;; This function is called by:
  6974 ;;		_getRxData
  6975 ;; This function uses a non-reentrant model
  6976 ;;
  6977                           
  6978                           
  6979                           ;psect for function _setControl_Lights_Table
  6980  0D5F                     _setControl_Lights_Table:	
  6981                           
  6982                           ;RF_Control_B1.c: 345: switch (RF_Data[15]) {
  6983                           
  6984                           ;incstack = 0
  6985                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6986  0D5F  2DAA               	goto	l8668
  6987  0D60                     l8652:	
  6988                           ;RF_Control_B1.c: 346: case 0x00:
  6989                           
  6990                           
  6991                           ;RF_Control_B1.c: 348: setDimmerLights_ErrorClose(255);
  6992  0D60  30FF               	movlw	255
  6993  0D61  318B  230C  318D   	fcall	_setDimmerLights_ErrorClose
  6994                           
  6995                           ;RF_Control_B1.c: 350: setProductData(9, 0);
  6996  0D64  0020               	movlb	0	; select bank0
  6997  0D65  01E2               	clrf	setProductData@value
  6998  0D66  3009               	movlw	9
  6999  0D67  319E  26C7  318D   	fcall	_setProductData
  7000                           
  7001                           ;RF_Control_B1.c: 351: setProductData(11, 0);
  7002  0D6A  0020               	movlb	0	; select bank0
  7003  0D6B  01E2               	clrf	setProductData@value
  7004  0D6C  300B               	movlw	11
  7005  0D6D  319E  26C7  318D   	fcall	_setProductData
  7006                           
  7007                           ;RF_Control_B1.c: 352: setProductData(15, 0);
  7008  0D70  0020               	movlb	0	; select bank0
  7009  0D71  01E2               	clrf	setProductData@value
  7010  0D72  300F               	movlw	15
  7011  0D73  319E  26C7  318D   	fcall	_setProductData
  7012                           
  7013                           ;RF_Control_B1.c: 353: setProductData(17, 0);
  7014  0D76  0020               	movlb	0	; select bank0
  7015  0D77  01E2               	clrf	setProductData@value
  7016  0D78  3011               	movlw	17
  7017  0D79  319E  26C7  318D   	fcall	_setProductData
  7018                           
  7019                           ;RF_Control_B1.c: 354: setBuz(1, 100);
  7020  0D7C  3064               	movlw	100
  7021  0D7D  0020               	movlb	0	; select bank0
  7022  0D7E  00A9               	movwf	setBuz@time
  7023  0D7F  3000               	movlw	0
  7024  0D80  00AA               	movwf	setBuz@time+1
  7025  0D81  3001               	movlw	1
  7026  0D82  318A  2201         	fcall	_setBuz
  7027                           
  7028                           ;RF_Control_B1.c: 356: break;
  7029  0D84  0008               	return
  7030  0D85                     l8656:	
  7031                           ;RF_Control_B1.c: 357: case 0x20:
  7032                           
  7033                           
  7034                           ;RF_Control_B1.c: 358: setProductData(9, 0);
  7035  0D85  0020               	movlb	0	; select bank0
  7036  0D86  01E2               	clrf	setProductData@value
  7037  0D87  3009               	movlw	9
  7038  0D88  319E  26C7  318D   	fcall	_setProductData
  7039                           
  7040                           ;RF_Control_B1.c: 359: setProductData(11, 0);
  7041  0D8B  0020               	movlb	0	; select bank0
  7042  0D8C  01E2               	clrf	setProductData@value
  7043  0D8D  300B               	movlw	11
  7044  0D8E  319E  26C7  318D   	fcall	_setProductData
  7045                           
  7046                           ;RF_Control_B1.c: 360: setProductData(17, 0);
  7047  0D91  0020               	movlb	0	; select bank0
  7048  0D92  01E2               	clrf	setProductData@value
  7049  0D93  3011               	movlw	17
  7050  0D94  319E  26C7  318D   	fcall	_setProductData
  7051                           
  7052                           ;RF_Control_B1.c: 361: setTxData();
  7053  0D97  318E  26BC         	fcall	_setTxData
  7054                           
  7055                           ;RF_Control_B1.c: 362: break;
  7056  0D99  0008               	return
  7057  0D9A                     l8658:	
  7058                           ;RF_Control_B1.c: 363: case 0x01:
  7059                           
  7060                           
  7061                           ;RF_Control_B1.c: 365: setRFSW_Control(1);
  7062  0D9A  3001               	movlw	1
  7063  0D9B  3197  2761         	fcall	_setRFSW_Control
  7064                           
  7065                           ;RF_Control_B1.c: 367: break;
  7066  0D9D  0008               	return
  7067  0D9E                     l8660:	
  7068                           ;RF_Control_B1.c: 368: case 0x02:
  7069                           
  7070                           
  7071                           ;RF_Control_B1.c: 370: setRFSW_Control(2);
  7072  0D9E  3002               	movlw	2
  7073  0D9F  3197  2761         	fcall	_setRFSW_Control
  7074                           
  7075                           ;RF_Control_B1.c: 377: break;
  7076                           
  7077                           ;RF_Control_B1.c: 373: case 0x03:
  7078                           
  7079                           ;RF_Control_B1.c: 372: break;
  7080  0DA1  0008               	return
  7081  0DA2                     l8662:	
  7082                           ;RF_Control_B1.c: 378: case 0x11:
  7083                           
  7084                           
  7085                           ;RF_Control_B1.c: 381: setRFSW_AdjControl(1);
  7086  0DA2  3001               	movlw	1
  7087  0DA3  3195  2588         	fcall	_setRFSW_AdjControl
  7088                           
  7089                           ;RF_Control_B1.c: 384: break;
  7090  0DA5  0008               	return
  7091  0DA6                     l8664:	
  7092                           ;RF_Control_B1.c: 385: case 0x21:
  7093                           
  7094                           
  7095                           ;RF_Control_B1.c: 388: setRFSW_AdjControl(2);
  7096  0DA6  3002               	movlw	2
  7097  0DA7  3195  2588         	fcall	_setRFSW_AdjControl
  7098                           
  7099                           ;RF_Control_B1.c: 399: }
  7100                           
  7101                           ;RF_Control_B1.c: 398: break;
  7102                           
  7103                           ;RF_Control_B1.c: 392: case 0x31:
  7104                           
  7105                           ;RF_Control_B1.c: 391: break;
  7106  0DA9  0008               	return
  7107  0DAA                     l8668:	
  7108  0DAA  0022               	movlb	2	; select bank2
  7109  0DAB  082F               	movf	(_RF_Data^(0+256)+15),w
  7110                           
  7111                           ; Switch size 1, requested type "space"
  7112                           ; Number of cases is 8, Range of values is 0 to 49
  7113                           ; switch strategies available:
  7114                           ; Name         Instructions Cycles
  7115                           ; simple_byte           25    13 (average)
  7116                           ; direct_byte          106     6 (fixed)
  7117                           ; jumptable            260     6 (fixed)
  7118                           ;	Chosen strategy is simple_byte
  7119  0DAC  3A00               	xorlw	0	; case 0
  7120  0DAD  1903               	skipnz
  7121  0DAE  2D60               	goto	l8652
  7122  0DAF  3A01               	xorlw	1	; case 1
  7123  0DB0  1903               	skipnz
  7124  0DB1  2D9A               	goto	l8658
  7125  0DB2  3A03               	xorlw	3	; case 2
  7126  0DB3  1903               	skipnz
  7127  0DB4  2D9E               	goto	l8660
  7128  0DB5  3A01               	xorlw	1	; case 3
  7129  0DB6  1903               	skipnz
  7130  0DB7  2DC5               	goto	l2194
  7131  0DB8  3A12               	xorlw	18	; case 17
  7132  0DB9  1903               	skipnz
  7133  0DBA  2DA2               	goto	l8662
  7134  0DBB  3A31               	xorlw	49	; case 32
  7135  0DBC  1903               	skipnz
  7136  0DBD  2D85               	goto	l8656
  7137  0DBE  3A01               	xorlw	1	; case 33
  7138  0DBF  1903               	skipnz
  7139  0DC0  2DA6               	goto	l8664
  7140  0DC1  3A10               	xorlw	16	; case 49
  7141  0DC2  1903               	skipnz
  7142  0DC3  2DC5               	goto	l2194
  7143  0DC4  2DC5               	goto	l2194
  7144  0DC5                     l2194:	
  7145  0DC5  0008               	return
  7146  0DC6                     __end_of_setControl_Lights_Table:	
  7147                           
  7148                           	psect	text26
  7149  1761                     __ptext26:	
  7150 ;; *************** function _setRFSW_Control *****************
  7151 ;; Defined at:
  7152 ;;		line 426 in file "../src/RF_Control_B1.c"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;  sw              1    wreg     unsigned char 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  sw              1   78[BANK0 ] unsigned char 
  7157 ;;  status          1   77[BANK0 ] unsigned char 
  7158 ;; Return value:  Size  Location     Type
  7159 ;;		None               void
  7160 ;; Registers used:
  7161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;Total ram usage:        3 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:    9
  7174 ;; This function calls:
  7175 ;;		_getDelayOff_GO
  7176 ;;		_getDimmerLights_Status
  7177 ;;		_setBuz
  7178 ;;		_setDelayOff_GO
  7179 ;;		_setDimmerLights_SwOff
  7180 ;;		_setDimmerLights_SwOn
  7181 ;;		_setRF_DimmerLights
  7182 ;;		_setTxData
  7183 ;; This function is called by:
  7184 ;;		_setControl_Lights_Table
  7185 ;; This function uses a non-reentrant model
  7186 ;;
  7187                           
  7188                           
  7189                           ;psect for function _setRFSW_Control
  7190  1761                     _setRFSW_Control:	
  7191                           
  7192                           ;incstack = 0
  7193                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7194                           ;setRFSW_Control@sw stored from wreg
  7195  1761  0020               	movlb	0	; select bank0
  7196  1762  00EE               	movwf	setRFSW_Control@sw
  7197                           
  7198                           ;RF_Control_B1.c: 427: char status = 0;
  7199  1763  01ED               	clrf	setRFSW_Control@status
  7200                           
  7201                           ;RF_Control_B1.c: 430: if (RF_Data[16] == 0x80) {
  7202  1764  0022               	movlb	2	; select bank2
  7203  1765  0830               	movf	(_RF_Data^(0+256)+16),w
  7204  1766  3A80               	xorlw	128
  7205  1767  1D03               	skipz
  7206  1768  2F94               	goto	l8494
  7207                           
  7208                           ;RF_Control_B1.c: 431: setDelayOff_GO(sw, 1, RF_Data[17]);
  7209  1769  0020               	movlb	0	; select bank0
  7210  176A  01E6               	clrf	setDelayOff_GO@command
  7211  176B  0AE6               	incf	setDelayOff_GO@command,f
  7212  176C  0022               	movlb	2	; select bank2
  7213  176D  0831               	movf	(_RF_Data^(0+256)+17),w
  7214  176E  0020               	movlb	0	; select bank0
  7215  176F  00EC               	movwf	??_setRFSW_Control
  7216  1770  086C               	movf	??_setRFSW_Control,w
  7217  1771  00E7               	movwf	setDelayOff_GO@value
  7218  1772  086E               	movf	setRFSW_Control@sw,w
  7219  1773  3189  2151  3197   	fcall	_setDelayOff_GO
  7220                           
  7221                           ;RF_Control_B1.c: 432: if (getDimmerLights_Status(sw) == 1) {
  7222  1776  0020               	movlb	0	; select bank0
  7223  1777  086E               	movf	setRFSW_Control@sw,w
  7224  1778  319F  2702  3197   	fcall	_getDimmerLights_Status
  7225  177B  3A01               	xorlw	1
  7226  177C  1D03               	skipz
  7227  177D  2FA3               	goto	l8498
  7228                           
  7229                           ;RF_Control_B1.c: 433: setBuz(1, 100);
  7230  177E  3064               	movlw	100
  7231  177F  0020               	movlb	0	; select bank0
  7232  1780  00A9               	movwf	setBuz@time
  7233  1781  3000               	movlw	0
  7234  1782  00AA               	movwf	setBuz@time+1
  7235  1783  3001               	movlw	1
  7236  1784  318A  2201  3197   	fcall	_setBuz
  7237                           
  7238                           ;RF_Control_B1.c: 434: status = 1;
  7239  1787  0020               	movlb	0	; select bank0
  7240  1788  01ED               	clrf	setRFSW_Control@status
  7241  1789  0AED               	incf	setRFSW_Control@status,f
  7242                           
  7243                           ;RF_Control_B1.c: 435: setRF_DimmerLights(sw, 1);
  7244  178A  01E6               	clrf	setRF_DimmerLights@on
  7245  178B  0AE6               	incf	setRF_DimmerLights@on,f
  7246  178C  086E               	movf	setRFSW_Control@sw,w
  7247  178D  318A  225A  3197   	fcall	_setRF_DimmerLights
  7248                           
  7249                           ;RF_Control_B1.c: 436: setTxData();
  7250  1790  318E  26BC  3197   	fcall	_setTxData
  7251                           
  7252                           ;RF_Control_B1.c: 438: }
  7253                           ;RF_Control_B1.c: 439: } else {
  7254  1793  2FA3               	goto	l8498
  7255  1794                     l8494:	
  7256                           
  7257                           ;RF_Control_B1.c: 441: if (getDelayOff_GO(sw) == 1) {
  7258  1794  0020               	movlb	0	; select bank0
  7259  1795  086E               	movf	setRFSW_Control@sw,w
  7260  1796  319F  2713  3197   	fcall	_getDelayOff_GO
  7261  1799  3A01               	xorlw	1
  7262  179A  1D03               	skipz
  7263  179B  2FA3               	goto	l8498
  7264                           
  7265                           ;RF_Control_B1.c: 442: setDelayOff_GO(sw, 0, 0);
  7266  179C  0020               	movlb	0	; select bank0
  7267  179D  01E6               	clrf	setDelayOff_GO@command
  7268  179E  01E7               	clrf	setDelayOff_GO@value
  7269  179F  086E               	movf	setRFSW_Control@sw,w
  7270  17A0  3189  2151  3197   	fcall	_setDelayOff_GO
  7271  17A3                     l8498:	
  7272                           
  7273                           ;RF_Control_B1.c: 443: }
  7274                           ;RF_Control_B1.c: 445: }
  7275                           ;RF_Control_B1.c: 446: if (status == 0) {
  7276  17A3  0020               	movlb	0	; select bank0
  7277  17A4  08ED               	movf	setRFSW_Control@status,f
  7278  17A5  1D03               	skipz
  7279  17A6  0008               	return
  7280                           
  7281                           ;RF_Control_B1.c: 448: setDimmerLights_SwOn(sw);
  7282  17A7  086E               	movf	setRFSW_Control@sw,w
  7283  17A8  3196  2604  3197   	fcall	_setDimmerLights_SwOn
  7284                           
  7285                           ;RF_Control_B1.c: 449: setDimmerLights_SwOff(sw);
  7286  17AB  0020               	movlb	0	; select bank0
  7287  17AC  086E               	movf	setRFSW_Control@sw,w
  7288  17AD  3189  21A9         	fcall	_setDimmerLights_SwOff
  7289  17AF  0008               	return
  7290  17B0                     __end_of_setRFSW_Control:	
  7291                           
  7292                           	psect	text27
  7293  1604                     __ptext27:	
  7294 ;; *************** function _setDimmerLights_SwOn *****************
  7295 ;; Defined at:
  7296 ;;		line 405 in file "../src/Dimmer_B1.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  sw              1    wreg     unsigned char 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;  sw              1   15[BANK0 ] unsigned char 
  7301 ;;  idle            1   14[BANK0 ] unsigned char 
  7302 ;; Return value:  Size  Location     Type
  7303 ;;		None               void
  7304 ;; Registers used:
  7305 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7306 ;; Tracked objects:
  7307 ;;		On entry : 0/0
  7308 ;;		On exit  : 0/0
  7309 ;;		Unchanged: 0/0
  7310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7315 ;;Total ram usage:        3 bytes
  7316 ;; Hardware stack levels used:    1
  7317 ;; Hardware stack levels required when called:    7
  7318 ;; This function calls:
  7319 ;;		_DimmerLightsPointSelect
  7320 ;;		_getDimmerLights_Allow_Condition
  7321 ;;		_setBuz
  7322 ;; This function is called by:
  7323 ;;		_setRFSW_Control
  7324 ;;		_setSw_Main
  7325 ;; This function uses a non-reentrant model
  7326 ;;
  7327                           
  7328                           
  7329                           ;psect for function _setDimmerLights_SwOn
  7330  1604                     _setDimmerLights_SwOn:	
  7331                           
  7332                           ;incstack = 0
  7333                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7334                           ;setDimmerLights_SwOn@sw stored from wreg
  7335  1604  0020               	movlb	0	; select bank0
  7336  1605  00AF               	movwf	setDimmerLights_SwOn@sw
  7337                           
  7338                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7339  1606  082F               	movf	setDimmerLights_SwOn@sw,w
  7340  1607  319F  27A0  3196   	fcall	_DimmerLightsPointSelect
  7341                           
  7342                           ;Dimmer_B1.c: 407: char idle = getDimmerLights_Allow_Condition(sw);
  7343  160A  0020               	movlb	0	; select bank0
  7344  160B  082F               	movf	setDimmerLights_SwOn@sw,w
  7345  160C  3193  2387  3196   	fcall	_getDimmerLights_Allow_Condition
  7346  160F  0020               	movlb	0	; select bank0
  7347  1610  00AD               	movwf	??_setDimmerLights_SwOn
  7348  1611  082D               	movf	??_setDimmerLights_SwOn,w
  7349  1612  00AE               	movwf	setDimmerLights_SwOn@idle
  7350                           
  7351                           ;Dimmer_B1.c: 412: if (idle == 0) {
  7352  1613  08AE               	movf	setDimmerLights_SwOn@idle,f
  7353  1614  1D03               	skipz
  7354  1615  0008               	return
  7355                           
  7356                           ;Dimmer_B1.c: 413: DimmerLights->SwFlag = 1;
  7357  1616  0875               	movf	_DimmerLights,w
  7358  1617  3E0B               	addlw	11
  7359  1618  0086               	movwf	6
  7360  1619  3001               	movlw	1	; select bank2/3
  7361  161A  0087               	movwf	7
  7362  161B  1481               	bsf	1,1
  7363                           
  7364                           ;Dimmer_B1.c: 414: if (DimmerLights->Status == 0) {
  7365  161C  0875               	movf	_DimmerLights,w
  7366  161D  3E02               	addlw	2
  7367  161E  0086               	movwf	6
  7368  161F  3001               	movlw	1	; select bank2/3
  7369  1620  0087               	movwf	7
  7370  1621  1881               	btfsc	1,1
  7371  1622  2E36               	goto	l8292
  7372                           
  7373                           ;Dimmer_B1.c: 415: DimmerLights->Status = 1;
  7374  1623  0875               	movf	_DimmerLights,w
  7375  1624  3E02               	addlw	2
  7376  1625  0086               	movwf	6
  7377  1626  3001               	movlw	1	; select bank2/3
  7378  1627  0087               	movwf	7
  7379  1628  1481               	bsf	1,1
  7380                           
  7381                           ;Dimmer_B1.c: 416: DimmerLights->Trigger = 1;
  7382  1629  0875               	movf	_DimmerLights,w
  7383  162A  3E0A               	addlw	10
  7384  162B  0086               	movwf	6
  7385  162C  3001               	movlw	1	; select bank2/3
  7386  162D  0087               	movwf	7
  7387  162E  1481               	bsf	1,1
  7388                           
  7389                           ;Dimmer_B1.c: 417: DimmerLights->Switch = 1;
  7390  162F  0875               	movf	_DimmerLights,w
  7391  1630  3E0A               	addlw	10
  7392  1631  0086               	movwf	6
  7393  1632  3001               	movlw	1	; select bank2/3
  7394  1633  0087               	movwf	7
  7395  1634  1401               	bsf	1,0
  7396                           
  7397                           ;Dimmer_B1.c: 418: } else {
  7398  1635  2E3C               	goto	l8294
  7399  1636                     l8292:	
  7400                           
  7401                           ;Dimmer_B1.c: 419: DimmerLights->Status = 0;
  7402  1636  0875               	movf	_DimmerLights,w
  7403  1637  3E02               	addlw	2
  7404  1638  0086               	movwf	6
  7405  1639  3001               	movlw	1	; select bank2/3
  7406  163A  0087               	movwf	7
  7407  163B  1081               	bcf	1,1
  7408  163C                     l8294:	
  7409                           
  7410                           ;Dimmer_B1.c: 420: }
  7411                           ;Dimmer_B1.c: 421: setBuz(1, 100);
  7412  163C  3064               	movlw	100
  7413  163D  00A9               	movwf	setBuz@time
  7414  163E  3000               	movlw	0
  7415  163F  00AA               	movwf	setBuz@time+1
  7416  1640  3001               	movlw	1
  7417  1641  318A  2201         	fcall	_setBuz
  7418  1643  0008               	return
  7419  1644                     __end_of_setDimmerLights_SwOn:	
  7420                           
  7421                           	psect	text28
  7422  1588                     __ptext28:	
  7423 ;; *************** function _setRFSW_AdjControl *****************
  7424 ;; Defined at:
  7425 ;;		line 455 in file "../src/RF_Control_B1.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;  sw              1    wreg     unsigned char 
  7428 ;; Auto vars:     Size  Location     Type
  7429 ;;  sw              1   75[BANK0 ] unsigned char 
  7430 ;;  status          1   74[BANK0 ] unsigned char 
  7431 ;; Return value:  Size  Location     Type
  7432 ;;		None               void
  7433 ;; Registers used:
  7434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7435 ;; Tracked objects:
  7436 ;;		On entry : 0/0
  7437 ;;		On exit  : 0/0
  7438 ;;		Unchanged: 0/0
  7439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7441 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7442 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7443 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7444 ;;Total ram usage:        4 bytes
  7445 ;; Hardware stack levels used:    1
  7446 ;; Hardware stack levels required when called:   10
  7447 ;; This function calls:
  7448 ;;		_getDimmerLights_Status
  7449 ;;		_setMemory_Modify
  7450 ;;		_setProductData
  7451 ;;		_setRF_DimmerValue
  7452 ;;		_setTxData
  7453 ;; This function is called by:
  7454 ;;		_setControl_Lights_Table
  7455 ;; This function uses a non-reentrant model
  7456 ;;
  7457                           
  7458                           
  7459                           ;psect for function _setRFSW_AdjControl
  7460  1588                     _setRFSW_AdjControl:	
  7461                           
  7462                           ;incstack = 0
  7463                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7464                           ;setRFSW_AdjControl@sw stored from wreg
  7465  1588  0020               	movlb	0	; select bank0
  7466  1589  00EB               	movwf	setRFSW_AdjControl@sw
  7467                           
  7468                           ;RF_Control_B1.c: 456: char status = 0;
  7469  158A  01EA               	clrf	setRFSW_AdjControl@status
  7470                           
  7471                           ;RF_Control_B1.c: 458: status = getDimmerLights_Status(sw);
  7472  158B  086B               	movf	setRFSW_AdjControl@sw,w
  7473  158C  319F  2702  3195   	fcall	_getDimmerLights_Status
  7474  158F  0020               	movlb	0	; select bank0
  7475  1590  00E8               	movwf	??_setRFSW_AdjControl
  7476  1591  0868               	movf	??_setRFSW_AdjControl,w
  7477  1592  00EA               	movwf	setRFSW_AdjControl@status
  7478                           
  7479                           ;RF_Control_B1.c: 461: if (status == 1) {
  7480  1593  086A               	movf	setRFSW_AdjControl@status,w
  7481  1594  3A01               	xorlw	1
  7482  1595  1D03               	skipz
  7483  1596  2DA1               	goto	l8512
  7484                           
  7485                           ;RF_Control_B1.c: 462: setMemory_Modify(1);
  7486  1597  3001               	movlw	1
  7487  1598  319F  27C6  3195   	fcall	_setMemory_Modify
  7488                           
  7489                           ;RF_Control_B1.c: 463: setRF_DimmerValue(sw);
  7490  159B  0020               	movlb	0	; select bank0
  7491  159C  086B               	movf	setRFSW_AdjControl@sw,w
  7492  159D  3194  2410  3195   	fcall	_setRF_DimmerValue
  7493                           
  7494                           ;RF_Control_B1.c: 464: } else {
  7495  15A0  2DB2               	goto	l2206
  7496  15A1                     l8512:	
  7497                           
  7498                           ;RF_Control_B1.c: 465: setProductData(9, product->Data[20 + sw]);
  7499  15A1  0020               	movlb	0	; select bank0
  7500  15A2  086B               	movf	setRFSW_AdjControl@sw,w
  7501  15A3  3E14               	addlw	20
  7502  15A4  0779               	addwf	_product,w
  7503  15A5  00E8               	movwf	??_setRFSW_AdjControl
  7504  15A6  0868               	movf	??_setRFSW_AdjControl,w
  7505  15A7  0086               	movwf	6
  7506  15A8  3002               	movlw	2	; select bank4/5
  7507  15A9  0087               	movwf	7
  7508  15AA  0801               	movf	1,w
  7509  15AB  00E9               	movwf	??_setRFSW_AdjControl+1
  7510  15AC  0869               	movf	??_setRFSW_AdjControl+1,w
  7511  15AD  00E2               	movwf	setProductData@value
  7512  15AE  3009               	movlw	9
  7513  15AF  319E  26C7  3195   	fcall	_setProductData
  7514  15B2                     l2206:	
  7515                           
  7516                           ;RF_Control_B1.c: 466: }
  7517                           ;RF_Control_B1.c: 467: setProductData(17, product->Data[26 + sw]);
  7518  15B2  0020               	movlb	0	; select bank0
  7519  15B3  086B               	movf	setRFSW_AdjControl@sw,w
  7520  15B4  3E1A               	addlw	26
  7521  15B5  0779               	addwf	_product,w
  7522  15B6  00E8               	movwf	??_setRFSW_AdjControl
  7523  15B7  0868               	movf	??_setRFSW_AdjControl,w
  7524  15B8  0086               	movwf	6
  7525  15B9  3002               	movlw	2	; select bank4/5
  7526  15BA  0087               	movwf	7
  7527  15BB  0801               	movf	1,w
  7528  15BC  00E9               	movwf	??_setRFSW_AdjControl+1
  7529  15BD  0869               	movf	??_setRFSW_AdjControl+1,w
  7530  15BE  00E2               	movwf	setProductData@value
  7531  15BF  3011               	movlw	17
  7532  15C0  319E  26C7  3195   	fcall	_setProductData
  7533                           
  7534                           ;RF_Control_B1.c: 468: setTxData();
  7535  15C3  318E  26BC         	fcall	_setTxData
  7536  15C5  0008               	return
  7537  15C6                     __end_of_setRFSW_AdjControl:	
  7538                           
  7539                           	psect	text29
  7540  1410                     __ptext29:	
  7541 ;; *************** function _setRF_DimmerValue *****************
  7542 ;; Defined at:
  7543 ;;		line 473 in file "../src/RF_Control_B1.c"
  7544 ;; Parameters:    Size  Location     Type
  7545 ;;  lights          1    wreg     unsigned char 
  7546 ;; Auto vars:     Size  Location     Type
  7547 ;;  lights          1   71[BANK0 ] unsigned char 
  7548 ;; Return value:  Size  Location     Type
  7549 ;;		None               void
  7550 ;; Registers used:
  7551 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7552 ;; Tracked objects:
  7553 ;;		On entry : 0/0
  7554 ;;		On exit  : 0/0
  7555 ;;		Unchanged: 0/0
  7556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7558 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7560 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7561 ;;Total ram usage:        2 bytes
  7562 ;; Hardware stack levels used:    1
  7563 ;; Hardware stack levels required when called:    9
  7564 ;; This function calls:
  7565 ;;		_setDimmerLights_AdjRF
  7566 ;;		_setProductData
  7567 ;; This function is called by:
  7568 ;;		_setRFSW_AdjControl
  7569 ;; This function uses a non-reentrant model
  7570 ;;
  7571                           
  7572                           
  7573                           ;psect for function _setRF_DimmerValue
  7574  1410                     _setRF_DimmerValue:	
  7575                           
  7576                           ;incstack = 0
  7577                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7578                           ;setRF_DimmerValue@lights stored from wreg
  7579  1410  0020               	movlb	0	; select bank0
  7580  1411  00E7               	movwf	setRF_DimmerValue@lights
  7581                           
  7582                           ;RF_Control_B1.c: 474: if (RF_Data[9] > 0x64) {
  7583  1412  3065               	movlw	101
  7584  1413  0022               	movlb	2	; select bank2
  7585  1414  0229               	subwf	(_RF_Data^(0+256)+9),w
  7586  1415  1C03               	skipc
  7587  1416  2C1D               	goto	l8390
  7588                           
  7589                           ;RF_Control_B1.c: 475: RF_Data[9] = 0x64;
  7590  1417  3064               	movlw	100
  7591  1418  0020               	movlb	0	; select bank0
  7592  1419  00E6               	movwf	??_setRF_DimmerValue
  7593  141A  0866               	movf	??_setRF_DimmerValue,w
  7594  141B  0022               	movlb	2	; select bank2
  7595  141C  00A9               	movwf	(_RF_Data^(0+256)+9)
  7596  141D                     l8390:	
  7597                           
  7598                           ;RF_Control_B1.c: 476: }
  7599                           ;RF_Control_B1.c: 477: setProductData(9, RF_Data[9]);
  7600  141D  0829               	movf	(_RF_Data^(0+256)+9),w
  7601  141E  0020               	movlb	0	; select bank0
  7602  141F  00E6               	movwf	??_setRF_DimmerValue
  7603  1420  0866               	movf	??_setRF_DimmerValue,w
  7604  1421  00E2               	movwf	setProductData@value
  7605  1422  3009               	movlw	9
  7606  1423  319E  26C7  3194   	fcall	_setProductData
  7607                           
  7608                           ;RF_Control_B1.c: 478: setProductData(11, lights);
  7609  1426  0020               	movlb	0	; select bank0
  7610  1427  0867               	movf	setRF_DimmerValue@lights,w
  7611  1428  00E6               	movwf	??_setRF_DimmerValue
  7612  1429  0866               	movf	??_setRF_DimmerValue,w
  7613  142A  00E2               	movwf	setProductData@value
  7614  142B  300B               	movlw	11
  7615  142C  319E  26C7  3194   	fcall	_setProductData
  7616                           
  7617                           ;RF_Control_B1.c: 479: setProductData((20 + lights), RF_Data[9]);
  7618  142F  0022               	movlb	2	; select bank2
  7619  1430  0829               	movf	(_RF_Data^(0+256)+9),w
  7620  1431  0020               	movlb	0	; select bank0
  7621  1432  00E6               	movwf	??_setRF_DimmerValue
  7622  1433  0866               	movf	??_setRF_DimmerValue,w
  7623  1434  00E2               	movwf	setProductData@value
  7624  1435  0867               	movf	setRF_DimmerValue@lights,w
  7625  1436  3E14               	addlw	20
  7626  1437  319E  26C7  3194   	fcall	_setProductData
  7627                           
  7628                           ;RF_Control_B1.c: 480: setDimmerLights_AdjRF(lights);
  7629  143A  0020               	movlb	0	; select bank0
  7630  143B  0867               	movf	setRF_DimmerValue@lights,w
  7631  143C  3192  229C         	fcall	_setDimmerLights_AdjRF
  7632  143E  0008               	return
  7633  143F                     __end_of_setRF_DimmerValue:	
  7634                           
  7635                           	psect	text30
  7636  129C                     __ptext30:	
  7637 ;; *************** function _setDimmerLights_AdjRF *****************
  7638 ;; Defined at:
  7639 ;;		line 837 in file "../src/Dimmer_B1.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;  lights          1    wreg     unsigned char 
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;  lights          1   67[BANK0 ] unsigned char 
  7644 ;; Return value:  Size  Location     Type
  7645 ;;		None               void
  7646 ;; Registers used:
  7647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7656 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7657 ;;Total ram usage:        2 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; Hardware stack levels required when called:    8
  7660 ;; This function calls:
  7661 ;;		_DimmerLightsPointSelect
  7662 ;;		_getPercentValue
  7663 ;; This function is called by:
  7664 ;;		_setRF_DimmerValue
  7665 ;; This function uses a non-reentrant model
  7666 ;;
  7667                           
  7668                           
  7669                           ;psect for function _setDimmerLights_AdjRF
  7670  129C                     _setDimmerLights_AdjRF:	
  7671                           
  7672                           ;incstack = 0
  7673                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7674                           ;setDimmerLights_AdjRF@lights stored from wreg
  7675  129C  0020               	movlb	0	; select bank0
  7676  129D  00E3               	movwf	setDimmerLights_AdjRF@lights
  7677                           
  7678                           ;Dimmer_B1.c: 839: DimmerLightsPointSelect(lights);
  7679  129E  0863               	movf	setDimmerLights_AdjRF@lights,w
  7680  129F  319F  27A0  3192   	fcall	_DimmerLightsPointSelect
  7681                           
  7682                           ;Dimmer_B1.c: 840: DimmerLights->AdjRF = 1;
  7683  12A2  0875               	movf	_DimmerLights,w
  7684  12A3  3E02               	addlw	2
  7685  12A4  0086               	movwf	6
  7686  12A5  3001               	movlw	1	; select bank2/3
  7687  12A6  0087               	movwf	7
  7688  12A7  1401               	bsf	1,0
  7689                           
  7690                           ;Dimmer_B1.c: 841: DimmerLights->Signal = 1;
  7691  12A8  0A75               	incf	_DimmerLights,w
  7692  12A9  0086               	movwf	6
  7693  12AA  3001               	movlw	1	; select bank2/3
  7694  12AB  0087               	movwf	7
  7695  12AC  1681               	bsf	1,5
  7696                           
  7697                           ;Dimmer_B1.c: 842: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7698  12AD  0879               	movf	_product,w
  7699  12AE  3E09               	addlw	9
  7700  12AF  0086               	movwf	6
  7701  12B0  3002               	movlw	2	; select bank4/5
  7702  12B1  0087               	movwf	7
  7703  12B2  0801               	movf	1,w
  7704  12B3  318C  24FA         	fcall	_getPercentValue
  7705  12B5  0020               	movlb	0	; select bank0
  7706  12B6  00E2               	movwf	??_setDimmerLights_AdjRF
  7707  12B7  0875               	movf	_DimmerLights,w
  7708  12B8  3E06               	addlw	6
  7709  12B9  0086               	movwf	6
  7710  12BA  3001               	movlw	1	; select bank2/3
  7711  12BB  0087               	movwf	7
  7712  12BC  0862               	movf	??_setDimmerLights_AdjRF,w
  7713  12BD  0081               	movwf	1
  7714  12BE  0008               	return
  7715  12BF                     __end_of_setDimmerLights_AdjRF:	
  7716                           
  7717                           	psect	text31
  7718  0CFA                     __ptext31:	
  7719 ;; *************** function _getPercentValue *****************
  7720 ;; Defined at:
  7721 ;;		line 952 in file "../src/Dimmer_B1.c"
  7722 ;; Parameters:    Size  Location     Type
  7723 ;;  value           1    wreg     unsigned char 
  7724 ;; Auto vars:     Size  Location     Type
  7725 ;;  value           1   62[BANK0 ] unsigned char 
  7726 ;;  i               3   63[BANK0 ] float 
  7727 ;; Return value:  Size  Location     Type
  7728 ;;                  1    wreg      unsigned char 
  7729 ;; Registers used:
  7730 ;;		wreg, status,2, status,0, pclath, cstack
  7731 ;; Tracked objects:
  7732 ;;		On entry : 0/0
  7733 ;;		On exit  : 0/0
  7734 ;;		Unchanged: 0/0
  7735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7737 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7739 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7740 ;;Total ram usage:        6 bytes
  7741 ;; Hardware stack levels used:    1
  7742 ;; Hardware stack levels required when called:    7
  7743 ;; This function calls:
  7744 ;;		___awtoft
  7745 ;;		___ftadd
  7746 ;;		___ftdiv
  7747 ;;		___ftmul
  7748 ;;		___ftneg
  7749 ;;		___fttol
  7750 ;; This function is called by:
  7751 ;;		_setDimmerLights_AdjRF
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           
  7756                           ;psect for function _getPercentValue
  7757  0CFA                     _getPercentValue:	
  7758                           
  7759                           ;incstack = 0
  7760                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7761                           ;getPercentValue@value stored from wreg
  7762  0CFA  0020               	movlb	0	; select bank0
  7763  0CFB  00DE               	movwf	getPercentValue@value
  7764                           
  7765                           ;Dimmer_B1.c: 960: float i = ((char)(75*0.8)) - ((char)(15*0.8));
  7766  0CFC  3000               	movlw	0
  7767  0CFD  00DF               	movwf	getPercentValue@i
  7768  0CFE  3040               	movlw	64
  7769  0CFF  00E0               	movwf	getPercentValue@i+1
  7770  0D00  3042               	movlw	66
  7771  0D01  00E1               	movwf	getPercentValue@i+2
  7772                           
  7773                           ;Dimmer_B1.c: 961: i /= 100;
  7774  0D02  3000               	movlw	0
  7775  0D03  00AE               	movwf	___ftdiv@f2
  7776  0D04  30C8               	movlw	200
  7777  0D05  00AF               	movwf	___ftdiv@f2+1
  7778  0D06  3042               	movlw	66
  7779  0D07  00B0               	movwf	___ftdiv@f2+2
  7780  0D08  085F               	movf	getPercentValue@i,w
  7781  0D09  00B1               	movwf	___ftdiv@f1
  7782  0D0A  0860               	movf	getPercentValue@i+1,w
  7783  0D0B  00B2               	movwf	___ftdiv@f1+1
  7784  0D0C  0861               	movf	getPercentValue@i+2,w
  7785  0D0D  00B3               	movwf	___ftdiv@f1+2
  7786  0D0E  318F  2757  318C   	fcall	___ftdiv
  7787  0D11  0020               	movlb	0	; select bank0
  7788  0D12  082E               	movf	?___ftdiv,w
  7789  0D13  00DF               	movwf	getPercentValue@i
  7790  0D14  082F               	movf	?___ftdiv+1,w
  7791  0D15  00E0               	movwf	getPercentValue@i+1
  7792  0D16  0830               	movf	?___ftdiv+2,w
  7793  0D17  00E1               	movwf	getPercentValue@i+2
  7794                           
  7795                           ;Dimmer_B1.c: 963: return (char) (((char)(75*0.8)) - ((100 - value) * i));
  7796  0D18  085E               	movf	getPercentValue@value,w
  7797  0D19  00DC               	movwf	??_getPercentValue
  7798  0D1A  01DD               	clrf	??_getPercentValue+1
  7799  0D1B  09DC               	comf	??_getPercentValue,f
  7800  0D1C  09DD               	comf	??_getPercentValue+1,f
  7801  0D1D  0ADC               	incf	??_getPercentValue,f
  7802  0D1E  1903               	skipnz
  7803  0D1F  0ADD               	incf	??_getPercentValue+1,f
  7804  0D20  085C               	movf	??_getPercentValue,w
  7805  0D21  3E64               	addlw	100
  7806  0D22  00A8               	movwf	___awtoft@c
  7807  0D23  3000               	movlw	0
  7808  0D24  3D5D               	addwfc	??_getPercentValue+1,w
  7809  0D25  00A9               	movwf	___awtoft@c+1
  7810  0D26  3192  2257  318C   	fcall	___awtoft
  7811  0D29  0020               	movlb	0	; select bank0
  7812  0D2A  0828               	movf	?___awtoft,w
  7813  0D2B  00B1               	movwf	___ftmul@f2
  7814  0D2C  0829               	movf	?___awtoft+1,w
  7815  0D2D  00B2               	movwf	___ftmul@f2+1
  7816  0D2E  082A               	movf	?___awtoft+2,w
  7817  0D2F  00B3               	movwf	___ftmul@f2+2
  7818  0D30  085F               	movf	getPercentValue@i,w
  7819  0D31  00AE               	movwf	___ftmul@f1
  7820  0D32  0860               	movf	getPercentValue@i+1,w
  7821  0D33  00AF               	movwf	___ftmul@f1+1
  7822  0D34  0861               	movf	getPercentValue@i+2,w
  7823  0D35  00B0               	movwf	___ftmul@f1+2
  7824  0D36  3185  2561  318C   	fcall	___ftmul
  7825  0D39  0020               	movlb	0	; select bank0
  7826  0D3A  082E               	movf	?___ftmul,w
  7827  0D3B  00BE               	movwf	___ftneg@f1
  7828  0D3C  082F               	movf	?___ftmul+1,w
  7829  0D3D  00BF               	movwf	___ftneg@f1+1
  7830  0D3E  0830               	movf	?___ftmul+2,w
  7831  0D3F  00C0               	movwf	___ftneg@f1+2
  7832  0D40  319E  2649  318C   	fcall	___ftneg
  7833  0D43  0020               	movlb	0	; select bank0
  7834  0D44  083E               	movf	?___ftneg,w
  7835  0D45  00C4               	movwf	___ftadd@f2
  7836  0D46  083F               	movf	?___ftneg+1,w
  7837  0D47  00C5               	movwf	___ftadd@f2+1
  7838  0D48  0840               	movf	?___ftneg+2,w
  7839  0D49  00C6               	movwf	___ftadd@f2+2
  7840  0D4A  3000               	movlw	0
  7841  0D4B  00C1               	movwf	___ftadd@f1
  7842  0D4C  3070               	movlw	112
  7843  0D4D  00C2               	movwf	___ftadd@f1+1
  7844  0D4E  3042               	movlw	66
  7845  0D4F  00C3               	movwf	___ftadd@f1+2
  7846  0D50  3182  22B4  318C   	fcall	___ftadd
  7847  0D53  0020               	movlb	0	; select bank0
  7848  0D54  0841               	movf	?___ftadd,w
  7849  0D55  00CE               	movwf	___fttol@f1
  7850  0D56  0842               	movf	?___ftadd+1,w
  7851  0D57  00CF               	movwf	___fttol@f1+1
  7852  0D58  0843               	movf	?___ftadd+2,w
  7853  0D59  00D0               	movwf	___fttol@f1+2
  7854  0D5A  318E  2635         	fcall	___fttol
  7855  0D5C  0020               	movlb	0	; select bank0
  7856  0D5D  084E               	movf	?___fttol,w
  7857  0D5E  0008               	return
  7858  0D5F                     __end_of_getPercentValue:	
  7859                           
  7860                           	psect	text32
  7861  0561                     __ptext32:	
  7862 ;; *************** function ___ftmul *****************
  7863 ;; Defined at:
  7864 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;  f1              3   14[BANK0 ] float 
  7867 ;;  f2              3   17[BANK0 ] float 
  7868 ;; Auto vars:     Size  Location     Type
  7869 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7870 ;;  sign            1   29[BANK0 ] unsigned char 
  7871 ;;  cntr            1   28[BANK0 ] unsigned char 
  7872 ;;  exp             1   24[BANK0 ] unsigned char 
  7873 ;; Return value:  Size  Location     Type
  7874 ;;                  3   14[BANK0 ] float 
  7875 ;; Registers used:
  7876 ;;		wreg, status,2, status,0, pclath, cstack
  7877 ;; Tracked objects:
  7878 ;;		On entry : 0/0
  7879 ;;		On exit  : 0/0
  7880 ;;		Unchanged: 0/0
  7881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7882 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7883 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7884 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7885 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7886 ;;Total ram usage:       16 bytes
  7887 ;; Hardware stack levels used:    1
  7888 ;; Hardware stack levels required when called:    6
  7889 ;; This function calls:
  7890 ;;		___ftpack
  7891 ;; This function is called by:
  7892 ;;		_getPercentValue
  7893 ;; This function uses a non-reentrant model
  7894 ;;
  7895                           
  7896                           
  7897                           ;psect for function ___ftmul
  7898  0561                     ___ftmul:	
  7899                           
  7900                           ;incstack = 0
  7901                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7902  0561  0020               	movlb	0	; select bank0
  7903  0562  082E               	movf	___ftmul@f1,w
  7904  0563  00B4               	movwf	??___ftmul
  7905  0564  082F               	movf	___ftmul@f1+1,w
  7906  0565  00B5               	movwf	??___ftmul+1
  7907  0566  0830               	movf	___ftmul@f1+2,w
  7908  0567  00B6               	movwf	??___ftmul+2
  7909  0568  1003               	clrc
  7910  0569  0D35               	rlf	??___ftmul+1,w
  7911  056A  0D36               	rlf	??___ftmul+2,w
  7912  056B  00B7               	movwf	??___ftmul+3
  7913  056C  0837               	movf	??___ftmul+3,w
  7914  056D  00B8               	movwf	___ftmul@exp
  7915  056E  08B8               	movf	___ftmul@exp,f
  7916  056F  1D03               	skipz
  7917  0570  2D78               	goto	l8006
  7918  0571  3000               	movlw	0
  7919  0572  00AE               	movwf	?___ftmul
  7920  0573  3000               	movlw	0
  7921  0574  00AF               	movwf	?___ftmul+1
  7922  0575  3000               	movlw	0
  7923  0576  00B0               	movwf	?___ftmul+2
  7924  0577  0008               	return
  7925  0578                     l8006:	
  7926  0578  0831               	movf	___ftmul@f2,w
  7927  0579  00B4               	movwf	??___ftmul
  7928  057A  0832               	movf	___ftmul@f2+1,w
  7929  057B  00B5               	movwf	??___ftmul+1
  7930  057C  0833               	movf	___ftmul@f2+2,w
  7931  057D  00B6               	movwf	??___ftmul+2
  7932  057E  1003               	clrc
  7933  057F  0D35               	rlf	??___ftmul+1,w
  7934  0580  0D36               	rlf	??___ftmul+2,w
  7935  0581  00B7               	movwf	??___ftmul+3
  7936  0582  0837               	movf	??___ftmul+3,w
  7937  0583  00BD               	movwf	___ftmul@sign
  7938  0584  08BD               	movf	___ftmul@sign,f
  7939  0585  1D03               	skipz
  7940  0586  2D8E               	goto	l8012
  7941  0587  3000               	movlw	0
  7942  0588  00AE               	movwf	?___ftmul
  7943  0589  3000               	movlw	0
  7944  058A  00AF               	movwf	?___ftmul+1
  7945  058B  3000               	movlw	0
  7946  058C  00B0               	movwf	?___ftmul+2
  7947  058D  0008               	return
  7948  058E                     l8012:	
  7949  058E  083D               	movf	___ftmul@sign,w
  7950  058F  3E7B               	addlw	123
  7951  0590  00B4               	movwf	??___ftmul
  7952  0591  0834               	movf	??___ftmul,w
  7953  0592  07B8               	addwf	___ftmul@exp,f
  7954  0593  082E               	movf	___ftmul@f1,w
  7955  0594  00B4               	movwf	??___ftmul
  7956  0595  082F               	movf	___ftmul@f1+1,w
  7957  0596  00B5               	movwf	??___ftmul+1
  7958  0597  0830               	movf	___ftmul@f1+2,w
  7959  0598  00B6               	movwf	??___ftmul+2
  7960  0599  3010               	movlw	16
  7961  059A                     u8085:	
  7962  059A  36B6               	lsrf	??___ftmul+2,f
  7963  059B  0CB5               	rrf	??___ftmul+1,f
  7964  059C  0CB4               	rrf	??___ftmul,f
  7965  059D  0B89               	decfsz	9,f
  7966  059E  2D9A               	goto	u8085
  7967  059F  0834               	movf	??___ftmul,w
  7968  05A0  00B7               	movwf	??___ftmul+3
  7969  05A1  0837               	movf	??___ftmul+3,w
  7970  05A2  00BD               	movwf	___ftmul@sign
  7971  05A3  0831               	movf	___ftmul@f2,w
  7972  05A4  00B4               	movwf	??___ftmul
  7973  05A5  0832               	movf	___ftmul@f2+1,w
  7974  05A6  00B5               	movwf	??___ftmul+1
  7975  05A7  0833               	movf	___ftmul@f2+2,w
  7976  05A8  00B6               	movwf	??___ftmul+2
  7977  05A9  3010               	movlw	16
  7978  05AA                     u8095:	
  7979  05AA  36B6               	lsrf	??___ftmul+2,f
  7980  05AB  0CB5               	rrf	??___ftmul+1,f
  7981  05AC  0CB4               	rrf	??___ftmul,f
  7982  05AD  0B89               	decfsz	9,f
  7983  05AE  2DAA               	goto	u8095
  7984  05AF  0834               	movf	??___ftmul,w
  7985  05B0  00B7               	movwf	??___ftmul+3
  7986  05B1  0837               	movf	??___ftmul+3,w
  7987  05B2  06BD               	xorwf	___ftmul@sign,f
  7988  05B3  3080               	movlw	128
  7989  05B4  00B4               	movwf	??___ftmul
  7990  05B5  0834               	movf	??___ftmul,w
  7991  05B6  05BD               	andwf	___ftmul@sign,f
  7992  05B7  17AF               	bsf	___ftmul@f1+1,7
  7993  05B8  17B2               	bsf	___ftmul@f2+1,7
  7994  05B9  30FF               	movlw	255
  7995  05BA  05B1               	andwf	___ftmul@f2,f
  7996  05BB  30FF               	movlw	255
  7997  05BC  05B2               	andwf	___ftmul@f2+1,f
  7998  05BD  3000               	movlw	0
  7999  05BE  05B3               	andwf	___ftmul@f2+2,f
  8000  05BF  3000               	movlw	0
  8001  05C0  00B9               	movwf	___ftmul@f3_as_product
  8002  05C1  3000               	movlw	0
  8003  05C2  00BA               	movwf	___ftmul@f3_as_product+1
  8004  05C3  3000               	movlw	0
  8005  05C4  00BB               	movwf	___ftmul@f3_as_product+2
  8006  05C5  3007               	movlw	7
  8007  05C6  00B4               	movwf	??___ftmul
  8008  05C7  0834               	movf	??___ftmul,w
  8009  05C8  00BC               	movwf	___ftmul@cntr
  8010  05C9                     l8024:	
  8011  05C9  1C2E               	btfss	___ftmul@f1,0
  8012  05CA  2DD1               	goto	l8028
  8013  05CB  0831               	movf	___ftmul@f2,w
  8014  05CC  07B9               	addwf	___ftmul@f3_as_product,f
  8015  05CD  0832               	movf	___ftmul@f2+1,w
  8016  05CE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8017  05CF  0833               	movf	___ftmul@f2+2,w
  8018  05D0  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8019  05D1                     l8028:	
  8020  05D1  3001               	movlw	1
  8021  05D2                     u8115:	
  8022  05D2  36B0               	lsrf	___ftmul@f1+2,f
  8023  05D3  0CAF               	rrf	___ftmul@f1+1,f
  8024  05D4  0CAE               	rrf	___ftmul@f1,f
  8025  05D5  0B89               	decfsz	9,f
  8026  05D6  2DD2               	goto	u8115
  8027  05D7  3001               	movlw	1
  8028  05D8                     u8125:	
  8029  05D8  35B1               	lslf	___ftmul@f2,f
  8030  05D9  0DB2               	rlf	___ftmul@f2+1,f
  8031  05DA  0DB3               	rlf	___ftmul@f2+2,f
  8032  05DB  0B89               	decfsz	9,f
  8033  05DC  2DD8               	goto	u8125
  8034  05DD  3001               	movlw	1
  8035  05DE  02BC               	subwf	___ftmul@cntr,f
  8036  05DF  1D03               	btfss	3,2
  8037  05E0  2DC9               	goto	l8024
  8038  05E1  3009               	movlw	9
  8039  05E2  00B4               	movwf	??___ftmul
  8040  05E3  0834               	movf	??___ftmul,w
  8041  05E4  00BC               	movwf	___ftmul@cntr
  8042  05E5                     l8036:	
  8043  05E5  1C2E               	btfss	___ftmul@f1,0
  8044  05E6  2DED               	goto	l8040
  8045  05E7  0831               	movf	___ftmul@f2,w
  8046  05E8  07B9               	addwf	___ftmul@f3_as_product,f
  8047  05E9  0832               	movf	___ftmul@f2+1,w
  8048  05EA  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8049  05EB  0833               	movf	___ftmul@f2+2,w
  8050  05EC  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8051  05ED                     l8040:	
  8052  05ED  3001               	movlw	1
  8053  05EE                     u8155:	
  8054  05EE  36B0               	lsrf	___ftmul@f1+2,f
  8055  05EF  0CAF               	rrf	___ftmul@f1+1,f
  8056  05F0  0CAE               	rrf	___ftmul@f1,f
  8057  05F1  0B89               	decfsz	9,f
  8058  05F2  2DEE               	goto	u8155
  8059  05F3  3001               	movlw	1
  8060  05F4                     u8165:	
  8061  05F4  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8062  05F5  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8063  05F6  0CB9               	rrf	___ftmul@f3_as_product,f
  8064  05F7  0B89               	decfsz	9,f
  8065  05F8  2DF4               	goto	u8165
  8066  05F9  3001               	movlw	1
  8067  05FA  02BC               	subwf	___ftmul@cntr,f
  8068  05FB  1D03               	btfss	3,2
  8069  05FC  2DE5               	goto	l8036
  8070  05FD  0839               	movf	___ftmul@f3_as_product,w
  8071  05FE  00A0               	movwf	___ftpack@arg
  8072  05FF  083A               	movf	___ftmul@f3_as_product+1,w
  8073  0600  00A1               	movwf	___ftpack@arg+1
  8074  0601  083B               	movf	___ftmul@f3_as_product+2,w
  8075  0602  00A2               	movwf	___ftpack@arg+2
  8076  0603  0838               	movf	___ftmul@exp,w
  8077  0604  00B4               	movwf	??___ftmul
  8078  0605  0834               	movf	??___ftmul,w
  8079  0606  00A3               	movwf	___ftpack@exp
  8080  0607  083D               	movf	___ftmul@sign,w
  8081  0608  00B5               	movwf	??___ftmul+1
  8082  0609  0835               	movf	??___ftmul+1,w
  8083  060A  00A4               	movwf	___ftpack@sign
  8084  060B  318B  236C         	fcall	___ftpack
  8085  060D  0020               	movlb	0	; select bank0
  8086  060E  0820               	movf	?___ftpack,w
  8087  060F  00AE               	movwf	?___ftmul
  8088  0610  0821               	movf	?___ftpack+1,w
  8089  0611  00AF               	movwf	?___ftmul+1
  8090  0612  0822               	movf	?___ftpack+2,w
  8091  0613  00B0               	movwf	?___ftmul+2
  8092  0614  0008               	return
  8093  0615                     __end_of___ftmul:	
  8094                           
  8095                           	psect	text33
  8096  1FC6                     __ptext33:	
  8097 ;; *************** function _setMemory_Modify *****************
  8098 ;; Defined at:
  8099 ;;		line 1064 in file "../src/MCU_B1.c"
  8100 ;; Parameters:    Size  Location     Type
  8101 ;;  command         1    wreg     unsigned char 
  8102 ;; Auto vars:     Size  Location     Type
  8103 ;;  command         1    1[BANK0 ] unsigned char 
  8104 ;; Return value:  Size  Location     Type
  8105 ;;		None               void
  8106 ;; Registers used:
  8107 ;;		wreg, status,2, status,0
  8108 ;; Tracked objects:
  8109 ;;		On entry : 0/0
  8110 ;;		On exit  : 0/0
  8111 ;;		Unchanged: 0/0
  8112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8116 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8117 ;;Total ram usage:        2 bytes
  8118 ;; Hardware stack levels used:    1
  8119 ;; Hardware stack levels required when called:    5
  8120 ;; This function calls:
  8121 ;;		Nothing
  8122 ;; This function is called by:
  8123 ;;		_setLog_Code
  8124 ;;		_setRFSW_AdjControl
  8125 ;; This function uses a non-reentrant model
  8126 ;;
  8127                           
  8128                           
  8129                           ;psect for function _setMemory_Modify
  8130  1FC6                     _setMemory_Modify:	
  8131                           
  8132                           ;incstack = 0
  8133                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8134                           ;setMemory_Modify@command stored from wreg
  8135  1FC6  0020               	movlb	0	; select bank0
  8136  1FC7  00A1               	movwf	setMemory_Modify@command
  8137                           
  8138                           ;MCU_B1.c: 1065: Memory.Modify = command == 1 ? 1 : 0;
  8139  1FC8  0821               	movf	setMemory_Modify@command,w
  8140  1FC9  3A01               	xorlw	1
  8141  1FCA  3000               	movlw	0
  8142  1FCB  1903               	skipnz
  8143  1FCC  3001               	movlw	1
  8144  1FCD  00A0               	movwf	??_setMemory_Modify
  8145  1FCE  0023               	movlb	3	; select bank3
  8146  1FCF  0844               	movf	(_Memory^(0+384)+36),w
  8147  1FD0  0020               	movlb	0	; select bank0
  8148  1FD1  0620               	xorwf	??_setMemory_Modify,w
  8149  1FD2  39FE               	andlw	-2
  8150  1FD3  0620               	xorwf	??_setMemory_Modify,w
  8151  1FD4  0023               	movlb	3	; select bank3
  8152  1FD5  00C4               	movwf	(_Memory^(0+384)+36)
  8153                           
  8154                           ;MCU_B1.c: 1066: Memory.Time = 0;
  8155  1FD6  01C2               	clrf	(_Memory^(0+384)+34)
  8156  1FD7  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8157  1FD8  0008               	return
  8158  1FD9                     __end_of_setMemory_Modify:	
  8159                           
  8160                           	psect	text34
  8161  1F35                     __ptext34:	
  8162 ;; *************** function _getRF_KeyStatus *****************
  8163 ;; Defined at:
  8164 ;;		line 190 in file "../src/RF_Control_B1.c"
  8165 ;; Parameters:    Size  Location     Type
  8166 ;;		None
  8167 ;; Auto vars:     Size  Location     Type
  8168 ;;  key             1    1[BANK0 ] unsigned char 
  8169 ;; Return value:  Size  Location     Type
  8170 ;;                  1    wreg      unsigned char 
  8171 ;; Registers used:
  8172 ;;		wreg, status,2
  8173 ;; Tracked objects:
  8174 ;;		On entry : 0/0
  8175 ;;		On exit  : 0/0
  8176 ;;		Unchanged: 0/0
  8177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8182 ;;Total ram usage:        3 bytes
  8183 ;; Hardware stack levels used:    1
  8184 ;; Hardware stack levels required when called:    5
  8185 ;; This function calls:
  8186 ;;		Nothing
  8187 ;; This function is called by:
  8188 ;;		_setRF_Main
  8189 ;; This function uses a non-reentrant model
  8190 ;;
  8191                           
  8192                           
  8193                           ;psect for function _getRF_KeyStatus
  8194  1F35                     _getRF_KeyStatus:	
  8195                           
  8196                           ;RF_Control_B1.c: 191: char key = 0;
  8197                           
  8198                           ;incstack = 0
  8199                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8200  1F35  0020               	movlb	0	; select bank0
  8201  1F36  01A1               	clrf	getRF_KeyStatus@key
  8202                           
  8203                           ;RF_Control_B1.c: 197: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8204  1F37  01A2               	clrf	_getRF_KeyStatus$4797
  8205  1F38  0AA2               	incf	_getRF_KeyStatus$4797,f
  8206  1F39  1F0C               	btfss	12,6	;volatile
  8207  1F3A  1A0C               	btfsc	12,4	;volatile
  8208  1F3B  2F40               	goto	l8944
  8209  1F3C  1C0C               	btfss	12,0	;volatile
  8210  1F3D  188D               	btfsc	13,1	;volatile
  8211  1F3E  2F40               	goto	l8944
  8212  1F3F  01A2               	clrf	_getRF_KeyStatus$4797
  8213  1F40                     l8944:	
  8214  1F40  0822               	movf	_getRF_KeyStatus$4797,w
  8215  1F41  00A0               	movwf	??_getRF_KeyStatus
  8216  1F42  0820               	movf	??_getRF_KeyStatus,w
  8217  1F43  00A1               	movwf	getRF_KeyStatus@key
  8218                           
  8219                           ;RF_Control_B1.c: 203: return key;
  8220  1F44  0821               	movf	getRF_KeyStatus@key,w
  8221  1F45  0008               	return
  8222  1F46                     __end_of_getRF_KeyStatus:	
  8223                           
  8224                           	psect	text35
  8225  1F24                     __ptext35:	
  8226 ;; *************** function _getBuz_GO *****************
  8227 ;; Defined at:
  8228 ;;		line 82 in file "../src/Buzzer_B1.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;		None
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  i               2    4[BANK0 ] int 
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  2    0[BANK0 ] int 
  8235 ;; Registers used:
  8236 ;;		wreg, status,2, status,0
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8242 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8243 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8244 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;Total ram usage:        6 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    5
  8249 ;; This function calls:
  8250 ;;		Nothing
  8251 ;; This function is called by:
  8252 ;;		_setRF_Main
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           
  8257                           ;psect for function _getBuz_GO
  8258  1F24                     _getBuz_GO:	
  8259                           
  8260                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8261                           
  8262                           ;incstack = 0
  8263                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8264  1F24  0021               	movlb	1	; select bank1
  8265  1F25  0C2E               	rrf	_Buz1^(0+128),w
  8266  1F26  3901               	andlw	1
  8267  1F27  0020               	movlb	0	; select bank0
  8268  1F28  00A2               	movwf	??_getBuz_GO
  8269  1F29  01A3               	clrf	??_getBuz_GO+1
  8270  1F2A  0822               	movf	??_getBuz_GO,w
  8271  1F2B  00A4               	movwf	getBuz_GO@i
  8272  1F2C  0823               	movf	??_getBuz_GO+1,w
  8273  1F2D  00A5               	movwf	getBuz_GO@i+1
  8274                           
  8275                           ;Buzzer_B1.c: 84: return i;
  8276  1F2E  0825               	movf	getBuz_GO@i+1,w
  8277  1F2F  01A1               	clrf	?_getBuz_GO+1
  8278  1F30  07A1               	addwf	?_getBuz_GO+1,f
  8279  1F31  0824               	movf	getBuz_GO@i,w
  8280  1F32  01A0               	clrf	?_getBuz_GO
  8281  1F33  07A0               	addwf	?_getBuz_GO,f
  8282  1F34  0008               	return
  8283  1F35                     __end_of_getBuz_GO:	
  8284                           
  8285                           	psect	text36
  8286  1EE4                     __ptext36:	
  8287 ;; *************** function _RF_RxDisable *****************
  8288 ;; Defined at:
  8289 ;;		line 265 in file "../src/RF_Control_B1.c"
  8290 ;; Parameters:    Size  Location     Type
  8291 ;;		None
  8292 ;; Auto vars:     Size  Location     Type
  8293 ;;		None
  8294 ;; Return value:  Size  Location     Type
  8295 ;;		None               void
  8296 ;; Registers used:
  8297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8298 ;; Tracked objects:
  8299 ;;		On entry : 0/0
  8300 ;;		On exit  : 0/0
  8301 ;;		Unchanged: 0/0
  8302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8307 ;;Total ram usage:        0 bytes
  8308 ;; Hardware stack levels used:    1
  8309 ;; Hardware stack levels required when called:    7
  8310 ;; This function calls:
  8311 ;;		_CC2500_WriteCommand
  8312 ;; This function is called by:
  8313 ;;		_setRF_Main
  8314 ;; This function uses a non-reentrant model
  8315 ;;
  8316                           
  8317                           
  8318                           ;psect for function _RF_RxDisable
  8319  1EE4                     _RF_RxDisable:	
  8320                           
  8321                           ;RF_Control_B1.c: 266: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8322                           
  8323                           ;incstack = 0
  8324                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8325  1EE4  0021               	movlb	1	; select bank1
  8326  1EE5  18BA               	btfsc	_RF1^(0+128),1
  8327  1EE6  2EE9               	goto	l2156
  8328  1EE7  1DBA               	btfss	_RF1^(0+128),3
  8329  1EE8  0008               	return
  8330  1EE9                     l2156:	
  8331                           
  8332                           ;RF_Control_B1.c: 267: RF1.RxStatus = 0;
  8333  1EE9  11BA               	bcf	_RF1^(0+128),3
  8334                           
  8335                           ;RF_Control_B1.c: 268: RF1.ReceiveGO = 0;
  8336  1EEA  10BA               	bcf	_RF1^(0+128),1
  8337                           
  8338                           ;RF_Control_B1.c: 269: CC2500_WriteCommand(0x36);
  8339  1EEB  3036               	movlw	54
  8340  1EEC  3191  214C  319E   	fcall	_CC2500_WriteCommand
  8341                           
  8342                           ;RF_Control_B1.c: 271: CC2500_WriteCommand(0x3A);
  8343  1EEF  303A               	movlw	58
  8344  1EF0  3191  214C         	fcall	_CC2500_WriteCommand
  8345  1EF2  0008               	return
  8346  1EF3                     __end_of_RF_RxDisable:	
  8347                           
  8348                           	psect	text37
  8349  0C31                     __ptext37:	
  8350 ;; *************** function _CC2500_TxData *****************
  8351 ;; Defined at:
  8352 ;;		line 32 in file "../src/CC2500_B1.c"
  8353 ;; Parameters:    Size  Location     Type
  8354 ;;		None
  8355 ;; Auto vars:     Size  Location     Type
  8356 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8357 ;; Return value:  Size  Location     Type
  8358 ;;		None               void
  8359 ;; Registers used:
  8360 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8361 ;; Tracked objects:
  8362 ;;		On entry : 0/0
  8363 ;;		On exit  : 0/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8369 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8370 ;;Total ram usage:        2 bytes
  8371 ;; Hardware stack levels used:    1
  8372 ;; Hardware stack levels required when called:    7
  8373 ;; This function calls:
  8374 ;;		_CC2500_WriteByte
  8375 ;;		_CC2500_WriteCommand
  8376 ;;		_Timeout_Counter
  8377 ;;		_set_TimeoutCleared
  8378 ;; This function is called by:
  8379 ;;		_setRF_Main
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           
  8384                           ;psect for function _CC2500_TxData
  8385  0C31                     _CC2500_TxData:	
  8386                           
  8387                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8388                           ;CC2500_B1.c: 35: RC4 = 0;
  8389                           
  8390                           ;incstack = 0
  8391                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8392  0C31  0020               	movlb	0	; select bank0
  8393  0C32  120E               	bcf	14,4	;volatile
  8394                           
  8395                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8396  0C33  307F               	movlw	127
  8397  0C34  00A4               	movwf	??_CC2500_TxData
  8398  0C35  0824               	movf	??_CC2500_TxData,w
  8399  0C36  0021               	movlb	1	; select bank1
  8400  0C37  00D0               	movwf	_SPI0Buffer^(0+128)
  8401                           
  8402                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8403  0C38  2C3C               	goto	l8680
  8404  0C39                     l8678:	
  8405                           
  8406                           ;CC2500_B1.c: 38: Timeout_Counter();
  8407  0C39  3190  20AF  318C   	fcall	_Timeout_Counter
  8408  0C3C                     l8680:	
  8409  0C3C  0020               	movlb	0	; select bank0
  8410  0C3D  1D0E               	btfss	14,2	;volatile
  8411  0C3E  2C42               	goto	l8684
  8412  0C3F  0021               	movlb	1	; select bank1
  8413  0C40  1D2B               	btfss	(_myMain^(0+128)+11),2
  8414  0C41  2C39               	goto	l8678
  8415  0C42                     l8684:	
  8416                           
  8417                           ;CC2500_B1.c: 39: };
  8418                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8419  0C42  319E  2603  318C   	fcall	_set_TimeoutCleared
  8420                           
  8421                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8422  0C45  3191  211A  318C   	fcall	_CC2500_WriteByte
  8423                           
  8424                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8425  0C48  0021               	movlb	1	; select bank1
  8426  0C49  0852               	movf	_Tx_Length^(0+128),w
  8427  0C4A  0020               	movlb	0	; select bank0
  8428  0C4B  00A4               	movwf	??_CC2500_TxData
  8429  0C4C  0824               	movf	??_CC2500_TxData,w
  8430  0C4D  0021               	movlb	1	; select bank1
  8431  0C4E  00D0               	movwf	_SPI0Buffer^(0+128)
  8432                           
  8433                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8434  0C4F  3191  211A  318C   	fcall	_CC2500_WriteByte
  8435                           
  8436                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8437  0C52  0020               	movlb	0	; select bank0
  8438  0C53  01A5               	clrf	CC2500_TxData@loop_e
  8439  0C54                     l8698:	
  8440  0C54  0021               	movlb	1	; select bank1
  8441  0C55  0852               	movf	_Tx_Length^(0+128),w
  8442  0C56  0020               	movlb	0	; select bank0
  8443  0C57  0225               	subwf	CC2500_TxData@loop_e,w
  8444  0C58  1803               	btfsc	3,0
  8445  0C59  2C6D               	goto	l251
  8446                           
  8447                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8448  0C5A  0825               	movf	CC2500_TxData@loop_e,w
  8449  0C5B  3E20               	addlw	_RF_Data& (0+255)
  8450  0C5C  0086               	movwf	6
  8451  0C5D  3001               	movlw	1	; select bank2/3
  8452  0C5E  0087               	movwf	7
  8453  0C5F  0801               	movf	1,w
  8454  0C60  00A4               	movwf	??_CC2500_TxData
  8455  0C61  0824               	movf	??_CC2500_TxData,w
  8456  0C62  0021               	movlb	1	; select bank1
  8457  0C63  00D0               	movwf	_SPI0Buffer^(0+128)
  8458                           
  8459                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8460  0C64  3191  211A  318C   	fcall	_CC2500_WriteByte
  8461  0C67  3001               	movlw	1
  8462  0C68  0020               	movlb	0	; select bank0
  8463  0C69  00A4               	movwf	??_CC2500_TxData
  8464  0C6A  0824               	movf	??_CC2500_TxData,w
  8465  0C6B  07A5               	addwf	CC2500_TxData@loop_e,f
  8466  0C6C  2C54               	goto	l8698
  8467  0C6D                     l251:	
  8468                           
  8469                           ;CC2500_B1.c: 48: }
  8470                           ;CC2500_B1.c: 49: RC4 = 1;
  8471  0C6D  160E               	bsf	14,4	;volatile
  8472                           
  8473                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8474  0C6E  3035               	movlw	53
  8475  0C6F  3191  214C  318C   	fcall	_CC2500_WriteCommand
  8476                           
  8477                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8478  0C72  2C76               	goto	l8704
  8479  0C73                     l8702:	
  8480                           
  8481                           ;CC2500_B1.c: 52: Timeout_Counter();
  8482  0C73  3190  20AF  318C   	fcall	_Timeout_Counter
  8483  0C76                     l8704:	
  8484  0C76  0020               	movlb	0	; select bank0
  8485  0C77  180D               	btfsc	13,0	;volatile
  8486  0C78  2C7C               	goto	l8708
  8487  0C79  0021               	movlb	1	; select bank1
  8488  0C7A  1D2B               	btfss	(_myMain^(0+128)+11),2
  8489  0C7B  2C73               	goto	l8702
  8490  0C7C                     l8708:	
  8491                           
  8492                           ;CC2500_B1.c: 53: };
  8493                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8494  0C7C  319E  2603  318C   	fcall	_set_TimeoutCleared
  8495                           
  8496                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8497  0C7F  2C83               	goto	l8712
  8498  0C80                     l8710:	
  8499                           
  8500                           ;CC2500_B1.c: 57: Timeout_Counter();
  8501  0C80  3190  20AF  318C   	fcall	_Timeout_Counter
  8502  0C83                     l8712:	
  8503  0C83  0020               	movlb	0	; select bank0
  8504  0C84  1C0D               	btfss	13,0	;volatile
  8505  0C85  2C89               	goto	l8716
  8506  0C86  0021               	movlb	1	; select bank1
  8507  0C87  1D2B               	btfss	(_myMain^(0+128)+11),2
  8508  0C88  2C80               	goto	l8710
  8509  0C89                     l8716:	
  8510                           
  8511                           ;CC2500_B1.c: 58: };
  8512                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8513  0C89  319E  2603  318C   	fcall	_set_TimeoutCleared
  8514                           
  8515                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8516  0C8C  3036               	movlw	54
  8517  0C8D  3191  214C  318C   	fcall	_CC2500_WriteCommand
  8518                           
  8519                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8520  0C90  303B               	movlw	59
  8521  0C91  3191  214C         	fcall	_CC2500_WriteCommand
  8522                           
  8523                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8524  0C93  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8525  0C94  0008               	return
  8526  0C95                     __end_of_CC2500_TxData:	
  8527                           
  8528                           	psect	text38
  8529  0DC6                     __ptext38:	
  8530 ;; *************** function _CC2500_RxData *****************
  8531 ;; Defined at:
  8532 ;;		line 70 in file "../src/CC2500_B1.c"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;		None
  8535 ;; Auto vars:     Size  Location     Type
  8536 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8537 ;; Return value:  Size  Location     Type
  8538 ;;		None               void
  8539 ;; Registers used:
  8540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8541 ;; Tracked objects:
  8542 ;;		On entry : 0/0
  8543 ;;		On exit  : 0/0
  8544 ;;		Unchanged: 0/0
  8545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8549 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;Total ram usage:        2 bytes
  8551 ;; Hardware stack levels used:    1
  8552 ;; Hardware stack levels required when called:    7
  8553 ;; This function calls:
  8554 ;;		_CC2500_ReadByte
  8555 ;;		_CC2500_ReadStatus
  8556 ;;		_CC2500_WriteByte
  8557 ;;		_Timeout_Counter
  8558 ;;		_set_TimeoutCleared
  8559 ;; This function is called by:
  8560 ;;		_setRF_Main
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           
  8565                           ;psect for function _CC2500_RxData
  8566  0DC6                     _CC2500_RxData:	
  8567                           
  8568                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8569                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8570                           
  8571                           ;incstack = 0
  8572                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8573  0DC6  0020               	movlb	0	; select bank0
  8574  0DC7  180D               	btfsc	13,0	;volatile
  8575  0DC8  2DCD               	goto	l8730
  8576  0DC9  2DD6               	goto	l8736
  8577  0DCA                     l8728:	
  8578                           ;CC2500_B1.c: 76: {
  8579                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8580                           
  8581                           
  8582                           ;CC2500_B1.c: 78: Timeout_Counter();
  8583  0DCA  3190  20AF  318D   	fcall	_Timeout_Counter
  8584  0DCD                     l8730:	
  8585  0DCD  0020               	movlb	0	; select bank0
  8586  0DCE  1C0D               	btfss	13,0	;volatile
  8587  0DCF  2DD3               	goto	l8734
  8588  0DD0  0021               	movlb	1	; select bank1
  8589  0DD1  1D2B               	btfss	(_myMain^(0+128)+11),2
  8590  0DD2  2DCA               	goto	l8728
  8591  0DD3                     l8734:	
  8592                           
  8593                           ;CC2500_B1.c: 79: };
  8594                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8595  0DD3  319E  2603  318D   	fcall	_set_TimeoutCleared
  8596  0DD6                     l8736:	
  8597                           
  8598                           ;CC2500_B1.c: 81: }
  8599                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8600  0DD6  303B               	movlw	59
  8601  0DD7  3192  22BF  318D   	fcall	_CC2500_ReadStatus
  8602                           
  8603                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8604  0DDA  0021               	movlb	1	; select bank1
  8605  0DDB  0855               	movf	_s_data^(0+128),w
  8606  0DDC  1903               	btfsc	3,2
  8607  0DDD  0008               	return
  8608                           
  8609                           ;CC2500_B1.c: 86: RC4 = 0;
  8610  0DDE  0020               	movlb	0	; select bank0
  8611  0DDF  120E               	bcf	14,4	;volatile
  8612                           
  8613                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8614  0DE0  30FF               	movlw	255
  8615  0DE1  00A4               	movwf	??_CC2500_RxData
  8616  0DE2  0824               	movf	??_CC2500_RxData,w
  8617  0DE3  0021               	movlb	1	; select bank1
  8618  0DE4  00D0               	movwf	_SPI0Buffer^(0+128)
  8619                           
  8620                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8621  0DE5  2DE9               	goto	l8746
  8622  0DE6                     l8744:	
  8623                           
  8624                           ;CC2500_B1.c: 89: Timeout_Counter();
  8625  0DE6  3190  20AF  318D   	fcall	_Timeout_Counter
  8626  0DE9                     l8746:	
  8627  0DE9  0020               	movlb	0	; select bank0
  8628  0DEA  1D0E               	btfss	14,2	;volatile
  8629  0DEB  2DEF               	goto	l8750
  8630  0DEC  0021               	movlb	1	; select bank1
  8631  0DED  1D2B               	btfss	(_myMain^(0+128)+11),2
  8632  0DEE  2DE6               	goto	l8744
  8633  0DEF                     l8750:	
  8634                           
  8635                           ;CC2500_B1.c: 90: };
  8636                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8637  0DEF  319E  2603  318D   	fcall	_set_TimeoutCleared
  8638                           
  8639                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8640  0DF2  3191  211A  318D   	fcall	_CC2500_WriteByte
  8641                           
  8642                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8643  0DF5  3191  219C  318D   	fcall	_CC2500_ReadByte
  8644                           
  8645                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8646  0DF8  0021               	movlb	1	; select bank1
  8647  0DF9  0850               	movf	_SPI0Buffer^(0+128),w
  8648  0DFA  0020               	movlb	0	; select bank0
  8649  0DFB  00A4               	movwf	??_CC2500_RxData
  8650  0DFC  0824               	movf	??_CC2500_RxData,w
  8651  0DFD  0021               	movlb	1	; select bank1
  8652  0DFE  00CF               	movwf	_Rx_Length^(0+128)
  8653                           
  8654                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8655  0DFF  0020               	movlb	0	; select bank0
  8656  0E00  01A5               	clrf	CC2500_RxData@loop_f
  8657  0E01                     l8766:	
  8658  0E01  0021               	movlb	1	; select bank1
  8659  0E02  084F               	movf	_Rx_Length^(0+128),w
  8660  0E03  0020               	movlb	0	; select bank0
  8661  0E04  0225               	subwf	CC2500_RxData@loop_f,w
  8662  0E05  1803               	btfsc	3,0
  8663  0E06  2E1A               	goto	l8768
  8664                           
  8665                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8666  0E07  3191  219C  318D   	fcall	_CC2500_ReadByte
  8667                           
  8668                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8669  0E0A  0021               	movlb	1	; select bank1
  8670  0E0B  0850               	movf	_SPI0Buffer^(0+128),w
  8671  0E0C  0020               	movlb	0	; select bank0
  8672  0E0D  00A4               	movwf	??_CC2500_RxData
  8673  0E0E  0825               	movf	CC2500_RxData@loop_f,w
  8674  0E0F  3E20               	addlw	_RF_Data& (0+255)
  8675  0E10  0086               	movwf	6
  8676  0E11  3001               	movlw	1	; select bank2/3
  8677  0E12  0087               	movwf	7
  8678  0E13  0824               	movf	??_CC2500_RxData,w
  8679  0E14  0081               	movwf	1
  8680  0E15  3001               	movlw	1
  8681  0E16  00A4               	movwf	??_CC2500_RxData
  8682  0E17  0824               	movf	??_CC2500_RxData,w
  8683  0E18  07A5               	addwf	CC2500_RxData@loop_f,f
  8684  0E19  2E01               	goto	l8766
  8685  0E1A                     l8768:	
  8686                           
  8687                           ;CC2500_B1.c: 99: }
  8688                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8689  0E1A  3191  219C  318D   	fcall	_CC2500_ReadByte
  8690                           
  8691                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8692  0E1D  0021               	movlb	1	; select bank1
  8693  0E1E  0850               	movf	_SPI0Buffer^(0+128),w
  8694  0E1F  0020               	movlb	0	; select bank0
  8695  0E20  00A4               	movwf	??_CC2500_RxData
  8696  0E21  0824               	movf	??_CC2500_RxData,w
  8697  0E22  0021               	movlb	1	; select bank1
  8698  0E23  00CE               	movwf	_RSSI^(0+128)
  8699                           
  8700                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8701  0E24  3191  219C         	fcall	_CC2500_ReadByte
  8702                           
  8703                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8704  0E26  0021               	movlb	1	; select bank1
  8705  0E27  0850               	movf	_SPI0Buffer^(0+128),w
  8706  0E28  0020               	movlb	0	; select bank0
  8707  0E29  00A4               	movwf	??_CC2500_RxData
  8708  0E2A  0824               	movf	??_CC2500_RxData,w
  8709  0E2B  0021               	movlb	1	; select bank1
  8710  0E2C  00C8               	movwf	_CRC^(0+128)
  8711                           
  8712                           ;CC2500_B1.c: 104: RC4 = 1;
  8713  0E2D  0020               	movlb	0	; select bank0
  8714  0E2E  160E               	bsf	14,4	;volatile
  8715                           
  8716                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8717  0E2F  0021               	movlb	1	; select bank1
  8718  0E30  1BC8               	btfsc	_CRC^(0+128),7
  8719                           
  8720                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8721  0E31  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8722                           
  8723                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8724  0E32  11BA               	bcf	_RF1^(0+128),3
  8725                           
  8726                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8727  0E33  14BA               	bsf	_RF1^(0+128),1
  8728  0E34  0008               	return
  8729  0E35                     __end_of_CC2500_RxData:	
  8730                           
  8731                           	psect	text39
  8732  12BF                     __ptext39:	
  8733 ;; *************** function _CC2500_ReadStatus *****************
  8734 ;; Defined at:
  8735 ;;		line 301 in file "../src/CC2500_B1.c"
  8736 ;; Parameters:    Size  Location     Type
  8737 ;;  status_addr     1    wreg     unsigned char 
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8740 ;; Return value:  Size  Location     Type
  8741 ;;		None               void
  8742 ;; Registers used:
  8743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8744 ;; Tracked objects:
  8745 ;;		On entry : 0/0
  8746 ;;		On exit  : 0/0
  8747 ;;		Unchanged: 0/0
  8748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8753 ;;Total ram usage:        2 bytes
  8754 ;; Hardware stack levels used:    1
  8755 ;; Hardware stack levels required when called:    6
  8756 ;; This function calls:
  8757 ;;		_CC2500_ReadByte
  8758 ;;		_CC2500_WriteByte
  8759 ;;		_Timeout_Counter
  8760 ;;		_set_TimeoutCleared
  8761 ;; This function is called by:
  8762 ;;		_CC2500_RxData
  8763 ;; This function uses a non-reentrant model
  8764 ;;
  8765                           
  8766                           
  8767                           ;psect for function _CC2500_ReadStatus
  8768  12BF                     _CC2500_ReadStatus:	
  8769                           
  8770                           ;incstack = 0
  8771                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8772                           ;CC2500_ReadStatus@status_addr stored from wreg
  8773  12BF  0020               	movlb	0	; select bank0
  8774  12C0  00A3               	movwf	CC2500_ReadStatus@status_addr
  8775                           
  8776                           ;CC2500_B1.c: 302: RC4 = 0;
  8777  12C1  120E               	bcf	14,4	;volatile
  8778                           
  8779                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  8780  12C2  0823               	movf	CC2500_ReadStatus@status_addr,w
  8781  12C3  3EC0               	addlw	192
  8782  12C4  00A2               	movwf	??_CC2500_ReadStatus
  8783  12C5  0822               	movf	??_CC2500_ReadStatus,w
  8784  12C6  0021               	movlb	1	; select bank1
  8785  12C7  00D0               	movwf	_SPI0Buffer^(0+128)
  8786                           
  8787                           ;CC2500_B1.c: 305: while (RC2 == 1 && myMain.Timeout == 0) {
  8788  12C8  2ACC               	goto	l8536
  8789  12C9                     l8534:	
  8790                           
  8791                           ;CC2500_B1.c: 306: Timeout_Counter();
  8792  12C9  3190  20AF  3192   	fcall	_Timeout_Counter
  8793  12CC                     l8536:	
  8794  12CC  0020               	movlb	0	; select bank0
  8795  12CD  1D0E               	btfss	14,2	;volatile
  8796  12CE  2AD2               	goto	l8540
  8797  12CF  0021               	movlb	1	; select bank1
  8798  12D0  1D2B               	btfss	(_myMain^(0+128)+11),2
  8799  12D1  2AC9               	goto	l8534
  8800  12D2                     l8540:	
  8801                           
  8802                           ;CC2500_B1.c: 307: };
  8803                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  8804  12D2  319E  2603  3192   	fcall	_set_TimeoutCleared
  8805                           
  8806                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  8807  12D5  3191  211A  3192   	fcall	_CC2500_WriteByte
  8808                           
  8809                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  8810  12D8  3191  219C         	fcall	_CC2500_ReadByte
  8811                           
  8812                           ;CC2500_B1.c: 312: RC4 = 1;
  8813  12DA  0020               	movlb	0	; select bank0
  8814  12DB  160E               	bsf	14,4	;volatile
  8815                           
  8816                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  8817  12DC  0021               	movlb	1	; select bank1
  8818  12DD  0850               	movf	_SPI0Buffer^(0+128),w
  8819  12DE  0020               	movlb	0	; select bank0
  8820  12DF  00A2               	movwf	??_CC2500_ReadStatus
  8821  12E0  0822               	movf	??_CC2500_ReadStatus,w
  8822  12E1  0021               	movlb	1	; select bank1
  8823  12E2  00D5               	movwf	_s_data^(0+128)
  8824  12E3  0008               	return
  8825  12E4                     __end_of_CC2500_ReadStatus:	
  8826                           
  8827                           	psect	text40
  8828  119C                     __ptext40:	
  8829 ;; *************** function _CC2500_ReadByte *****************
  8830 ;; Defined at:
  8831 ;;		line 235 in file "../src/CC2500_B1.c"
  8832 ;; Parameters:    Size  Location     Type
  8833 ;;		None
  8834 ;; Auto vars:     Size  Location     Type
  8835 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8836 ;; Return value:  Size  Location     Type
  8837 ;;		None               void
  8838 ;; Registers used:
  8839 ;;		wreg, status,2, status,0
  8840 ;; Tracked objects:
  8841 ;;		On entry : 0/0
  8842 ;;		On exit  : 0/0
  8843 ;;		Unchanged: 0/0
  8844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;Total ram usage:        2 bytes
  8850 ;; Hardware stack levels used:    1
  8851 ;; Hardware stack levels required when called:    5
  8852 ;; This function calls:
  8853 ;;		Nothing
  8854 ;; This function is called by:
  8855 ;;		_CC2500_RxData
  8856 ;;		_CC2500_ReadStatus
  8857 ;;		_CC2500_ReadREG
  8858 ;; This function uses a non-reentrant model
  8859 ;;
  8860                           
  8861                           
  8862                           ;psect for function _CC2500_ReadByte
  8863  119C                     _CC2500_ReadByte:	
  8864                           
  8865                           ;CC2500_B1.c: 236: unsigned char loop_b;
  8866                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  8867                           
  8868                           ;incstack = 0
  8869                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8870  119C  0020               	movlb	0	; select bank0
  8871  119D  01A1               	clrf	CC2500_ReadByte@loop_b
  8872  119E                     L2:	
  8873  119E  3008               	movlw	8
  8874  119F  0221               	subwf	CC2500_ReadByte@loop_b,w
  8875  11A0  1803               	btfsc	3,0
  8876  11A1  0008               	return
  8877                           
  8878                           ;CC2500_B1.c: 238: RC1 = 1;
  8879  11A2  148E               	bsf	14,1	;volatile
  8880                           
  8881                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  8882  11A3  1003               	clrc
  8883  11A4  0021               	movlb	1	; select bank1
  8884  11A5  0DD0               	rlf	_SPI0Buffer^(0+128),f
  8885                           
  8886                           ;CC2500_B1.c: 240: if (RC2 == 1)
  8887  11A6  0020               	movlb	0	; select bank0
  8888  11A7  1D0E               	btfss	14,2	;volatile
  8889  11A8  29AC               	goto	l8438
  8890                           
  8891                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  8892  11A9  0021               	movlb	1	; select bank1
  8893  11AA  1450               	bsf	_SPI0Buffer^(0+128),0
  8894  11AB  29B2               	goto	l8440
  8895  11AC                     l8438:	
  8896                           
  8897                           ;CC2500_B1.c: 242: else
  8898                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  8899  11AC  30FE               	movlw	254
  8900  11AD  0020               	movlb	0	; select bank0
  8901  11AE  00A0               	movwf	??_CC2500_ReadByte
  8902  11AF  0820               	movf	??_CC2500_ReadByte,w
  8903  11B0  0021               	movlb	1	; select bank1
  8904  11B1  05D0               	andwf	_SPI0Buffer^(0+128),f
  8905  11B2                     l8440:	
  8906                           
  8907                           ;CC2500_B1.c: 244: RC1 = 0;
  8908  11B2  0020               	movlb	0	; select bank0
  8909  11B3  108E               	bcf	14,1	;volatile
  8910  11B4  3001               	movlw	1
  8911  11B5  00A0               	movwf	??_CC2500_ReadByte
  8912  11B6  0820               	movf	??_CC2500_ReadByte,w
  8913  11B7  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8914  11B8  299E               	goto	L2
  8915  11B9                     __end_of_CC2500_ReadByte:	
  8916                           
  8917                           	psect	text41
  8918  1DE7                     __ptext41:	
  8919 ;; *************** function _RF_Initialization *****************
  8920 ;; Defined at:
  8921 ;;		line 9 in file "../src/RF_Control_B1.c"
  8922 ;; Parameters:    Size  Location     Type
  8923 ;;		None
  8924 ;; Auto vars:     Size  Location     Type
  8925 ;;		None
  8926 ;; Return value:  Size  Location     Type
  8927 ;;		None               void
  8928 ;; Registers used:
  8929 ;;		wreg, status,2, status,0, pclath, cstack
  8930 ;; Tracked objects:
  8931 ;;		On entry : 0/0
  8932 ;;		On exit  : 0/0
  8933 ;;		Unchanged: 0/0
  8934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8939 ;;Total ram usage:        0 bytes
  8940 ;; Hardware stack levels used:    1
  8941 ;; Hardware stack levels required when called:    6
  8942 ;; This function calls:
  8943 ;;		_setRF_Initialization
  8944 ;; This function is called by:
  8945 ;;		_main
  8946 ;; This function uses a non-reentrant model
  8947 ;;
  8948                           
  8949                           
  8950                           ;psect for function _RF_Initialization
  8951  1DE7                     _RF_Initialization:	
  8952                           
  8953                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8954                           
  8955                           ;incstack = 0
  8956                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8957  1DE7  319E  265D         	fcall	_setRF_Initialization
  8958  1DE9  0008               	return
  8959  1DEA                     __end_of_RF_Initialization:	
  8960                           
  8961                           	psect	text42
  8962  1E5D                     __ptext42:	
  8963 ;; *************** function _setRF_Initialization *****************
  8964 ;; Defined at:
  8965 ;;		line 43 in file "../src/RF_Control_B1.c"
  8966 ;; Parameters:    Size  Location     Type
  8967 ;;		None
  8968 ;; Auto vars:     Size  Location     Type
  8969 ;;		None
  8970 ;; Return value:  Size  Location     Type
  8971 ;;		None               void
  8972 ;; Registers used:
  8973 ;;		wreg
  8974 ;; Tracked objects:
  8975 ;;		On entry : 0/0
  8976 ;;		On exit  : 0/0
  8977 ;;		Unchanged: 0/0
  8978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8982 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8983 ;;Total ram usage:        1 bytes
  8984 ;; Hardware stack levels used:    1
  8985 ;; Hardware stack levels required when called:    5
  8986 ;; This function calls:
  8987 ;;		Nothing
  8988 ;; This function is called by:
  8989 ;;		_RF_Initialization
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           
  8994                           ;psect for function _setRF_Initialization
  8995  1E5D                     _setRF_Initialization:	
  8996                           
  8997                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  8998                           
  8999                           ;incstack = 0
  9000                           ; Regs used in _setRF_Initialization: [wreg]
  9001  1E5D  3015               	movlw	21
  9002  1E5E  0020               	movlb	0	; select bank0
  9003  1E5F  00A0               	movwf	??_setRF_Initialization
  9004  1E60  0820               	movf	??_setRF_Initialization,w
  9005  1E61  0021               	movlb	1	; select bank1
  9006  1E62  00D2               	movwf	_Tx_Length^(0+128)
  9007                           
  9008                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9009  1E63  3005               	movlw	5
  9010  1E64  00C1               	movwf	(_RF1^(0+128)+7)
  9011  1E65  3000               	movlw	0
  9012  1E66  00C2               	movwf	(_RF1^(0+128)+8)
  9013  1E67  0008               	return
  9014  1E68                     __end_of_setRF_Initialization:	
  9015                           
  9016                           	psect	text43
  9017  1F7C                     __ptext43:	
  9018 ;; *************** function _Mcu_Initialization *****************
  9019 ;; Defined at:
  9020 ;;		line 30 in file "../src/MCU_B1.c"
  9021 ;; Parameters:    Size  Location     Type
  9022 ;;		None
  9023 ;; Auto vars:     Size  Location     Type
  9024 ;;		None
  9025 ;; Return value:  Size  Location     Type
  9026 ;;		None               void
  9027 ;; Registers used:
  9028 ;;		wreg, status,2, status,0, pclath, cstack
  9029 ;; Tracked objects:
  9030 ;;		On entry : 0/0
  9031 ;;		On exit  : 0/0
  9032 ;;		Unchanged: 0/0
  9033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9038 ;;Total ram usage:        0 bytes
  9039 ;; Hardware stack levels used:    1
  9040 ;; Hardware stack levels required when called:    6
  9041 ;; This function calls:
  9042 ;;		_ADC_Set
  9043 ;;		_Fosc_Set
  9044 ;;		_IOC_Set
  9045 ;;		_IO_Set
  9046 ;;		_TMR1_Set
  9047 ;;		_WDT_Set
  9048 ;; This function is called by:
  9049 ;;		_main
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           
  9054                           ;psect for function _Mcu_Initialization
  9055  1F7C                     _Mcu_Initialization:	
  9056                           
  9057                           ;MCU_B1.c: 32: Fosc_Set();
  9058                           
  9059                           ;incstack = 0
  9060                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9061  1F7C  319D  25FF  319F   	fcall	_Fosc_Set
  9062                           
  9063                           ;MCU_B1.c: 34: IO_Set();
  9064  1F7F  3191  2133  319F   	fcall	_IO_Set
  9065                           
  9066                           ;MCU_B1.c: 36: ;;
  9067                           ;MCU_B1.c: 38: TMR1_Set();
  9068  1F82  319E  26BB  319F   	fcall	_TMR1_Set
  9069                           
  9070                           ;MCU_B1.c: 40: ADC_Set();
  9071  1F85  319E  261A  319F   	fcall	_ADC_Set
  9072                           
  9073                           ;MCU_B1.c: 42: ;;
  9074                           ;MCU_B1.c: 44: ;;
  9075                           ;MCU_B1.c: 46: IOC_Set();
  9076  1F88  319E  26AF  319F   	fcall	_IOC_Set
  9077                           
  9078                           ;MCU_B1.c: 48: ;;
  9079                           ;MCU_B1.c: 50: ;;
  9080                           ;MCU_B1.c: 52: WDT_Set();
  9081  1F8B  319E  2652         	fcall	_WDT_Set
  9082  1F8D  0008               	return
  9083  1F8E                     __end_of_Mcu_Initialization:	
  9084                           
  9085                           	psect	text44
  9086  1E52                     __ptext44:	
  9087 ;; *************** function _WDT_Set *****************
  9088 ;; Defined at:
  9089 ;;		line 1083 in file "../src/MCU_B1.c"
  9090 ;; Parameters:    Size  Location     Type
  9091 ;;		None
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;		None
  9094 ;; Return value:  Size  Location     Type
  9095 ;;		None               void
  9096 ;; Registers used:
  9097 ;;		wreg
  9098 ;; Tracked objects:
  9099 ;;		On entry : 0/0
  9100 ;;		On exit  : 0/0
  9101 ;;		Unchanged: 0/0
  9102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;Total ram usage:        1 bytes
  9108 ;; Hardware stack levels used:    1
  9109 ;; Hardware stack levels required when called:    5
  9110 ;; This function calls:
  9111 ;;		Nothing
  9112 ;; This function is called by:
  9113 ;;		_Mcu_Initialization
  9114 ;; This function uses a non-reentrant model
  9115 ;;
  9116                           
  9117                           
  9118                           ;psect for function _WDT_Set
  9119  1E52                     _WDT_Set:	
  9120                           
  9121                           ;MCU_B1.c: 1090: WDTCON = 0b00010111;;
  9122                           
  9123                           ;incstack = 0
  9124                           ; Regs used in _WDT_Set: [wreg]
  9125  1E52  3017               	movlw	23
  9126  1E53  0021               	movlb	1	; select bank1
  9127  1E54  0097               	movwf	23	;volatile
  9128                           
  9129                           ;MCU_B1.c: 1092: WDT.Enable = 1;
  9130  1E55  1446               	bsf	_WDT^(0+128),0
  9131                           
  9132                           ;MCU_B1.c: 1093: WDT.Timer = 10;
  9133  1E56  300A               	movlw	10
  9134  1E57  0020               	movlb	0	; select bank0
  9135  1E58  00A0               	movwf	??_WDT_Set
  9136  1E59  0820               	movf	??_WDT_Set,w
  9137  1E5A  0021               	movlb	1	; select bank1
  9138  1E5B  00C7               	movwf	(_WDT^(0+128)+1)
  9139  1E5C  0008               	return
  9140  1E5D                     __end_of_WDT_Set:	
  9141                           
  9142                           	psect	text45
  9143  1EBB                     __ptext45:	
  9144 ;; *************** function _TMR1_Set *****************
  9145 ;; Defined at:
  9146 ;;		line 199 in file "../src/MCU_B1.c"
  9147 ;; Parameters:    Size  Location     Type
  9148 ;;		None
  9149 ;; Auto vars:     Size  Location     Type
  9150 ;;		None
  9151 ;; Return value:  Size  Location     Type
  9152 ;;		None               void
  9153 ;; Registers used:
  9154 ;;		wreg
  9155 ;; Tracked objects:
  9156 ;;		On entry : 0/0
  9157 ;;		On exit  : 0/0
  9158 ;;		Unchanged: 0/0
  9159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;Total ram usage:        0 bytes
  9165 ;; Hardware stack levels used:    1
  9166 ;; Hardware stack levels required when called:    5
  9167 ;; This function calls:
  9168 ;;		Nothing
  9169 ;; This function is called by:
  9170 ;;		_Mcu_Initialization
  9171 ;; This function uses a non-reentrant model
  9172 ;;
  9173                           
  9174                           
  9175                           ;psect for function _TMR1_Set
  9176  1EBB                     _TMR1_Set:	
  9177                           
  9178                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9179                           
  9180                           ;incstack = 0
  9181                           ; Regs used in _TMR1_Set: [wreg]
  9182  1EBB  3041               	movlw	65
  9183  1EBC  0020               	movlb	0	; select bank0
  9184  1EBD  0098               	movwf	24	;volatile
  9185                           
  9186                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9187  1EBE  30FA               	movlw	250
  9188  1EBF  0097               	movwf	23	;volatile
  9189                           
  9190                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9191  1EC0  3038               	movlw	56
  9192  1EC1  0096               	movwf	22	;volatile
  9193                           
  9194                           ;MCU_B1.c: 203: TMR1IE = 1;
  9195  1EC2  0021               	movlb	1	; select bank1
  9196  1EC3  1411               	bsf	17,0	;volatile
  9197                           
  9198                           ;MCU_B1.c: 204: PEIE = 1;
  9199  1EC4  170B               	bsf	11,6	;volatile
  9200                           
  9201                           ;MCU_B1.c: 205: GIE = 1;
  9202  1EC5  178B               	bsf	11,7	;volatile
  9203  1EC6  0008               	return
  9204  1EC7                     __end_of_TMR1_Set:	
  9205                           
  9206                           	psect	text46
  9207  1133                     __ptext46:	
  9208 ;; *************** function _IO_Set *****************
  9209 ;; Defined at:
  9210 ;;		line 60 in file "../src/MCU_B1.c"
  9211 ;; Parameters:    Size  Location     Type
  9212 ;;		None
  9213 ;; Auto vars:     Size  Location     Type
  9214 ;;		None
  9215 ;; Return value:  Size  Location     Type
  9216 ;;		None               void
  9217 ;; Registers used:
  9218 ;;		wreg, status,2
  9219 ;; Tracked objects:
  9220 ;;		On entry : 0/0
  9221 ;;		On exit  : 0/0
  9222 ;;		Unchanged: 0/0
  9223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;Total ram usage:        0 bytes
  9229 ;; Hardware stack levels used:    1
  9230 ;; Hardware stack levels required when called:    5
  9231 ;; This function calls:
  9232 ;;		Nothing
  9233 ;; This function is called by:
  9234 ;;		_Mcu_Initialization
  9235 ;; This function uses a non-reentrant model
  9236 ;;
  9237                           
  9238                           
  9239                           ;psect for function _IO_Set
  9240  1133                     _IO_Set:	
  9241                           
  9242                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9243                           
  9244                           ;incstack = 0
  9245                           ; Regs used in _IO_Set: [wreg+status,2]
  9246  1133  3077               	movlw	119
  9247  1134  0021               	movlb	1	; select bank1
  9248  1135  008C               	movwf	12	;volatile
  9249                           
  9250                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9251  1136  3007               	movlw	7
  9252  1137  008D               	movwf	13	;volatile
  9253                           
  9254                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9255  1138  300C               	movlw	12
  9256  1139  008E               	movwf	14	;volatile
  9257                           
  9258                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9259  113A  0022               	movlb	2	; select bank2
  9260  113B  018C               	clrf	12	;volatile
  9261                           
  9262                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9263  113C  3002               	movlw	2
  9264  113D  008D               	movwf	13	;volatile
  9265                           
  9266                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9267  113E  018E               	clrf	14	;volatile
  9268                           
  9269                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9270  113F  3022               	movlw	34
  9271  1140  0023               	movlb	3	; select bank3
  9272  1141  008C               	movwf	12	;volatile
  9273                           
  9274                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9275  1142  018D               	clrf	13	;volatile
  9276                           
  9277                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9278  1143  018E               	clrf	14	;volatile
  9279                           
  9280                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9281  1144  3077               	movlw	119
  9282  1145  0020               	movlb	0	; select bank0
  9283  1146  008C               	movwf	12	;volatile
  9284                           
  9285                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9286  1147  3007               	movlw	7
  9287  1148  008D               	movwf	13	;volatile
  9288                           
  9289                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9290  1149  300C               	movlw	12
  9291  114A  008E               	movwf	14	;volatile
  9292  114B  0008               	return
  9293  114C                     __end_of_IO_Set:	
  9294                           
  9295                           	psect	text47
  9296  1EAF                     __ptext47:	
  9297 ;; *************** function _IOC_Set *****************
  9298 ;; Defined at:
  9299 ;;		line 365 in file "../src/MCU_B1.c"
  9300 ;; Parameters:    Size  Location     Type
  9301 ;;		None
  9302 ;; Auto vars:     Size  Location     Type
  9303 ;;		None
  9304 ;; Return value:  Size  Location     Type
  9305 ;;		None               void
  9306 ;; Registers used:
  9307 ;;		wreg, status,2
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : 0/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;Total ram usage:        0 bytes
  9318 ;; Hardware stack levels used:    1
  9319 ;; Hardware stack levels required when called:    5
  9320 ;; This function calls:
  9321 ;;		Nothing
  9322 ;; This function is called by:
  9323 ;;		_Mcu_Initialization
  9324 ;; This function uses a non-reentrant model
  9325 ;;
  9326                           
  9327                           
  9328                           ;psect for function _IOC_Set
  9329  1EAF                     _IOC_Set:	
  9330                           
  9331                           ;MCU_B1.c: 366: WPUB2 = 0;
  9332                           
  9333                           ;incstack = 0
  9334                           ; Regs used in _IOC_Set: [wreg+status,2]
  9335  1EAF  0024               	movlb	4	; select bank4
  9336  1EB0  110D               	bcf	13,2	;volatile
  9337                           
  9338                           ;MCU_B1.c: 386: IOCBP = 0b00000000;
  9339  1EB1  0027               	movlb	7	; select bank7
  9340  1EB2  0194               	clrf	20	;volatile
  9341                           
  9342                           ;MCU_B1.c: 387: IOCBN = 0b00000100;
  9343  1EB3  3004               	movlw	4
  9344  1EB4  0095               	movwf	21	;volatile
  9345                           
  9346                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9347  1EB5  0196               	clrf	22	;volatile
  9348                           
  9349                           ;MCU_B1.c: 393: IOCIE = 1;
  9350  1EB6  158B               	bsf	11,3	;volatile
  9351                           
  9352                           ;MCU_B1.c: 394: IOCIF = 0;
  9353  1EB7  100B               	bcf	11,0	;volatile
  9354                           
  9355                           ;MCU_B1.c: 395: PEIE = 1;
  9356  1EB8  170B               	bsf	11,6	;volatile
  9357                           
  9358                           ;MCU_B1.c: 396: GIE = 1;
  9359  1EB9  178B               	bsf	11,7	;volatile
  9360  1EBA  0008               	return
  9361  1EBB                     __end_of_IOC_Set:	
  9362                           
  9363                           	psect	text48
  9364  1DFF                     __ptext48:	
  9365 ;; *************** function _Fosc_Set *****************
  9366 ;; Defined at:
  9367 ;;		line 56 in file "../src/MCU_B1.c"
  9368 ;; Parameters:    Size  Location     Type
  9369 ;;		None
  9370 ;; Auto vars:     Size  Location     Type
  9371 ;;		None
  9372 ;; Return value:  Size  Location     Type
  9373 ;;		None               void
  9374 ;; Registers used:
  9375 ;;		wreg
  9376 ;; Tracked objects:
  9377 ;;		On entry : 0/0
  9378 ;;		On exit  : 0/0
  9379 ;;		Unchanged: 0/0
  9380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;Total ram usage:        0 bytes
  9386 ;; Hardware stack levels used:    1
  9387 ;; Hardware stack levels required when called:    5
  9388 ;; This function calls:
  9389 ;;		Nothing
  9390 ;; This function is called by:
  9391 ;;		_Mcu_Initialization
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           
  9396                           ;psect for function _Fosc_Set
  9397  1DFF                     _Fosc_Set:	
  9398                           
  9399                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9400                           
  9401                           ;incstack = 0
  9402                           ; Regs used in _Fosc_Set: [wreg]
  9403  1DFF  3078               	movlw	120
  9404  1E00  0021               	movlb	1	; select bank1
  9405  1E01  0099               	movwf	25	;volatile
  9406  1E02  0008               	return
  9407  1E03                     __end_of_Fosc_Set:	
  9408                           
  9409                           	psect	text49
  9410  1E1A                     __ptext49:	
  9411 ;; *************** function _ADC_Set *****************
  9412 ;; Defined at:
  9413 ;;		line 419 in file "../src/MCU_B1.c"
  9414 ;; Parameters:    Size  Location     Type
  9415 ;;		None
  9416 ;; Auto vars:     Size  Location     Type
  9417 ;;		None
  9418 ;; Return value:  Size  Location     Type
  9419 ;;		None               void
  9420 ;; Registers used:
  9421 ;;		wreg
  9422 ;; Tracked objects:
  9423 ;;		On entry : 0/0
  9424 ;;		On exit  : 0/0
  9425 ;;		Unchanged: 0/0
  9426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;Total ram usage:        0 bytes
  9432 ;; Hardware stack levels used:    1
  9433 ;; Hardware stack levels required when called:    5
  9434 ;; This function calls:
  9435 ;;		Nothing
  9436 ;; This function is called by:
  9437 ;;		_Mcu_Initialization
  9438 ;; This function uses a non-reentrant model
  9439 ;;
  9440                           
  9441                           
  9442                           ;psect for function _ADC_Set
  9443  1E1A                     _ADC_Set:	
  9444                           
  9445                           ;MCU_B1.c: 420: ADCON1 = 0xf3;
  9446                           
  9447                           ;incstack = 0
  9448                           ; Regs used in _ADC_Set: [wreg]
  9449  1E1A  30F3               	movlw	243
  9450  1E1B  0021               	movlb	1	; select bank1
  9451  1E1C  009E               	movwf	30	;volatile
  9452                           
  9453                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  9454  1E1D  30C1               	movlw	193
  9455  1E1E  0022               	movlb	2	; select bank2
  9456  1E1F  0097               	movwf	23	;volatile
  9457  1E20  0008               	return
  9458  1E21                     __end_of_ADC_Set:	
  9459                           
  9460                           	psect	text50
  9461  1EA3                     __ptext50:	
  9462 ;; *************** function _LED_Main *****************
  9463 ;; Defined at:
  9464 ;;		line 47 in file "../src/LED_B1.c"
  9465 ;; Parameters:    Size  Location     Type
  9466 ;;		None
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;		None
  9469 ;; Return value:  Size  Location     Type
  9470 ;;		None               void
  9471 ;; Registers used:
  9472 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9473 ;; Tracked objects:
  9474 ;;		On entry : 0/0
  9475 ;;		On exit  : 0/0
  9476 ;;		Unchanged: 0/0
  9477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;Total ram usage:        0 bytes
  9483 ;; Hardware stack levels used:    1
  9484 ;; Hardware stack levels required when called:    7
  9485 ;; This function calls:
  9486 ;;		_setLED_Main
  9487 ;; This function is called by:
  9488 ;;		_main
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           
  9493                           ;psect for function _LED_Main
  9494  1EA3                     _LED_Main:	
  9495                           
  9496                           ;LED_B1.c: 53: setLED_Main(1);
  9497                           
  9498                           ;incstack = 0
  9499                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9500  1EA3  3001               	movlw	1
  9501  1EA4  3196  2644  319E   	fcall	_setLED_Main
  9502                           
  9503                           ;LED_B1.c: 56: setLED_Main(2);
  9504  1EA7  3002               	movlw	2
  9505  1EA8  3196  2644  319E   	fcall	_setLED_Main
  9506                           
  9507                           ;LED_B1.c: 62: setLED_Main(99);
  9508  1EAB  3063               	movlw	99
  9509  1EAC  3196  2644         	fcall	_setLED_Main
  9510  1EAE  0008               	return
  9511  1EAF                     __end_of_LED_Main:	
  9512                           
  9513                           	psect	text51
  9514  1644                     __ptext51:	
  9515 ;; *************** function _setLED_Main *****************
  9516 ;; Defined at:
  9517 ;;		line 221 in file "../src/LED_B1.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;  led             1    wreg     unsigned char 
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;  led             1    4[BANK0 ] unsigned char 
  9522 ;; Return value:  Size  Location     Type
  9523 ;;		None               void
  9524 ;; Registers used:
  9525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;Total ram usage:        3 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    6
  9538 ;; This function calls:
  9539 ;;		_LedPointSelect
  9540 ;; This function is called by:
  9541 ;;		_LED_Main
  9542 ;; This function uses a non-reentrant model
  9543 ;;
  9544                           
  9545                           
  9546                           ;psect for function _setLED_Main
  9547  1644                     _setLED_Main:	
  9548                           
  9549                           ;incstack = 0
  9550                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9551                           ;setLED_Main@led stored from wreg
  9552  1644  0020               	movlb	0	; select bank0
  9553  1645  00A4               	movwf	setLED_Main@led
  9554                           
  9555                           ;LED_B1.c: 222: LedPointSelect(led);
  9556  1646  0824               	movf	setLED_Main@led,w
  9557  1647  3191  21F7  3196   	fcall	_LedPointSelect
  9558                           
  9559                           ;LED_B1.c: 223: if (LED->GO == 1) {
  9560  164A  0021               	movlb	1	; select bank1
  9561  164B  084D               	movf	_LED^(0+128),w
  9562  164C  0086               	movwf	6
  9563  164D  3001               	movlw	1	; select bank2/3
  9564  164E  0087               	movwf	7
  9565  164F  1C81               	btfss	1,1
  9566  1650  0008               	return
  9567                           
  9568                           ;LED_B1.c: 224: LED->Time++;
  9569  1651  0A4D               	incf	_LED^(0+128),w
  9570  1652  0086               	movwf	6
  9571  1653  3001               	movlw	1	; select bank2/3
  9572  1654  0087               	movwf	7
  9573  1655  3001               	movlw	1
  9574  1656  0781               	addwf	1,f
  9575  1657  3141               	addfsr 1,1
  9576  1658  1803               	skipnc
  9577  1659  0A81               	incf	1,f
  9578                           
  9579                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
  9580  165A  0A4D               	incf	_LED^(0+128),w
  9581  165B  0086               	movwf	6
  9582  165C  3001               	movlw	1	; select bank2/3
  9583  165D  0087               	movwf	7
  9584  165E  3F40               	moviw [0]fsr1
  9585  165F  0020               	movlb	0	; select bank0
  9586  1660  00A2               	movwf	??_setLED_Main
  9587  1661  3F41               	moviw [1]fsr1
  9588  1662  00A3               	movwf	??_setLED_Main+1
  9589  1663  3000               	movlw	0
  9590  1664  0223               	subwf	??_setLED_Main+1,w
  9591  1665  3032               	movlw	50
  9592  1666  1903               	skipnz
  9593  1667  0222               	subwf	??_setLED_Main,w
  9594  1668  1C03               	skipc
  9595  1669  0008               	return
  9596                           
  9597                           ;LED_B1.c: 226: LED->Time = 0;
  9598  166A  0021               	movlb	1	; select bank1
  9599  166B  0A4D               	incf	_LED^(0+128),w
  9600  166C  0086               	movwf	6
  9601  166D  3001               	movlw	1	; select bank2/3
  9602  166E  0087               	movwf	7
  9603  166F  3000               	movlw	0
  9604  1670  3FC0               	movwi [0]fsr1
  9605  1671  3FC1               	movwi [1]fsr1
  9606                           
  9607                           ;LED_B1.c: 228: if (led == 1) {
  9608  1672  0020               	movlb	0	; select bank0
  9609  1673  0824               	movf	setLED_Main@led,w
  9610  1674  3A01               	xorlw	1
  9611                           
  9612                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
  9613  1675  3008               	movlw	8
  9614  1676  1903               	btfsc	3,2
  9615  1677  068C               	xorwf	12,f
  9616                           
  9617                           ;LED_B1.c: 230: }
  9618                           ;LED_B1.c: 233: if (led == 2) {
  9619  1678  0824               	movf	setLED_Main@led,w
  9620  1679  3A02               	xorlw	2
  9621  167A  1D03               	skipz
  9622  167B  2E7E               	goto	l1022
  9623                           
  9624                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
  9625  167C  3080               	movlw	128
  9626  167D  068E               	xorwf	14,f
  9627  167E                     l1022:	
  9628                           
  9629                           ;LED_B1.c: 235: }
  9630                           ;LED_B1.c: 243: if (led == 99) {
  9631  167E  0824               	movf	setLED_Main@led,w
  9632  167F  3A63               	xorlw	99
  9633  1680  1D03               	skipz
  9634  1681  0008               	return
  9635                           
  9636                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
  9637  1682  3020               	movlw	32
  9638  1683  068D               	xorwf	13,f
  9639  1684  0008               	return
  9640  1685                     __end_of_setLED_Main:	
  9641                           
  9642                           	psect	text52
  9643  1E97                     __ptext52:	
  9644 ;; *************** function _LED_Initialization *****************
  9645 ;; Defined at:
  9646 ;;		line 31 in file "../src/LED_B1.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;		None
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;		None
  9651 ;; Return value:  Size  Location     Type
  9652 ;;		None               void
  9653 ;; Registers used:
  9654 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9655 ;; Tracked objects:
  9656 ;;		On entry : 0/0
  9657 ;;		On exit  : 0/0
  9658 ;;		Unchanged: 0/0
  9659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9663 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9664 ;;Total ram usage:        0 bytes
  9665 ;; Hardware stack levels used:    1
  9666 ;; Hardware stack levels required when called:    8
  9667 ;; This function calls:
  9668 ;;		_setLED_Initialization
  9669 ;; This function is called by:
  9670 ;;		_main
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           
  9675                           ;psect for function _LED_Initialization
  9676  1E97                     _LED_Initialization:	
  9677                           
  9678                           ;LED_B1.c: 33: setLED_Initialization(1);
  9679                           
  9680                           ;incstack = 0
  9681                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9682  1E97  3001               	movlw	1
  9683  1E98  319F  276A  319E   	fcall	_setLED_Initialization
  9684                           
  9685                           ;LED_B1.c: 36: setLED_Initialization(2);
  9686  1E9B  3002               	movlw	2
  9687  1E9C  319F  276A  319E   	fcall	_setLED_Initialization
  9688                           
  9689                           ;LED_B1.c: 42: setLED_Initialization(99);
  9690  1E9F  3063               	movlw	99
  9691  1EA0  319F  276A         	fcall	_setLED_Initialization
  9692  1EA2  0008               	return
  9693  1EA3                     __end_of_LED_Initialization:	
  9694                           
  9695                           	psect	text53
  9696  1F6A                     __ptext53:	
  9697 ;; *************** function _setLED_Initialization *****************
  9698 ;; Defined at:
  9699 ;;		line 69 in file "../src/LED_B1.c"
  9700 ;; Parameters:    Size  Location     Type
  9701 ;;  led             1    wreg     unsigned char 
  9702 ;; Auto vars:     Size  Location     Type
  9703 ;;  led             1    4[BANK0 ] unsigned char 
  9704 ;; Return value:  Size  Location     Type
  9705 ;;		None               void
  9706 ;; Registers used:
  9707 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9708 ;; Tracked objects:
  9709 ;;		On entry : 0/0
  9710 ;;		On exit  : 0/0
  9711 ;;		Unchanged: 0/0
  9712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9716 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9717 ;;Total ram usage:        1 bytes
  9718 ;; Hardware stack levels used:    1
  9719 ;; Hardware stack levels required when called:    7
  9720 ;; This function calls:
  9721 ;;		_LedPointSelect
  9722 ;;		_setLED
  9723 ;; This function is called by:
  9724 ;;		_LED_Initialization
  9725 ;; This function uses a non-reentrant model
  9726 ;;
  9727                           
  9728                           
  9729                           ;psect for function _setLED_Initialization
  9730  1F6A                     _setLED_Initialization:	
  9731                           
  9732                           ;incstack = 0
  9733                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9734                           ;setLED_Initialization@led stored from wreg
  9735  1F6A  0020               	movlb	0	; select bank0
  9736  1F6B  00A4               	movwf	setLED_Initialization@led
  9737                           
  9738                           ;LED_B1.c: 70: LedPointSelect(led);
  9739  1F6C  0824               	movf	setLED_Initialization@led,w
  9740  1F6D  3191  21F7  319F   	fcall	_LedPointSelect
  9741                           
  9742                           ;LED_B1.c: 71: LED->Enable = 1;
  9743  1F70  0021               	movlb	1	; select bank1
  9744  1F71  084D               	movf	_LED^(0+128),w
  9745  1F72  0086               	movwf	6
  9746  1F73  3001               	movlw	1	; select bank2/3
  9747  1F74  0087               	movwf	7
  9748  1F75  1401               	bsf	1,0
  9749                           
  9750                           ;LED_B1.c: 72: setLED(led, 0);
  9751  1F76  0020               	movlb	0	; select bank0
  9752  1F77  01A2               	clrf	setLED@command
  9753  1F78  0824               	movf	setLED_Initialization@led,w
  9754  1F79  3188  20AA         	fcall	_setLED
  9755  1F7B  0008               	return
  9756  1F7C                     __end_of_setLED_Initialization:	
  9757                           
  9758                           	psect	text54
  9759  14D9                     __ptext54:	
  9760 ;; *************** function _Flash_Memory_Main *****************
  9761 ;; Defined at:
  9762 ;;		line 965 in file "../src/MCU_B1.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;		None
  9765 ;; Auto vars:     Size  Location     Type
  9766 ;;		None
  9767 ;; Return value:  Size  Location     Type
  9768 ;;		None               void
  9769 ;; Registers used:
  9770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9771 ;; Tracked objects:
  9772 ;;		On entry : 0/0
  9773 ;;		On exit  : 0/0
  9774 ;;		Unchanged: 0/0
  9775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;Total ram usage:        1 bytes
  9781 ;; Hardware stack levels used:    1
  9782 ;; Hardware stack levels required when called:    8
  9783 ;; This function calls:
  9784 ;;		_Flash_Memory_Modify
  9785 ;;		_getMain_LightsStatus
  9786 ;; This function is called by:
  9787 ;;		_main
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           
  9792                           ;psect for function _Flash_Memory_Main
  9793  14D9                     _Flash_Memory_Main:	
  9794                           
  9795                           ;MCU_B1.c: 966: if (Memory.Modify == 1) {
  9796                           
  9797                           ;incstack = 0
  9798                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9799  14D9  0023               	movlb	3	; select bank3
  9800  14DA  1C44               	btfss	(_Memory^(0+384)+36),0
  9801  14DB  0008               	return
  9802                           
  9803                           ;MCU_B1.c: 967: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
  9804  14DC  3193  23B4  3194   	fcall	_getMain_LightsStatus
  9805  14DF  3A00               	xorlw	0
  9806  14E0  3000               	movlw	0
  9807  14E1  1903               	skipnz
  9808  14E2  3001               	movlw	1
  9809  14E3  0020               	movlb	0	; select bank0
  9810  14E4  00A9               	movwf	??_Flash_Memory_Main
  9811  14E5  0DA9               	rlf	??_Flash_Memory_Main,f
  9812  14E6  0023               	movlb	3	; select bank3
  9813  14E7  0844               	movf	(_Memory^(0+384)+36),w
  9814  14E8  0020               	movlb	0	; select bank0
  9815  14E9  0629               	xorwf	??_Flash_Memory_Main,w
  9816  14EA  39FD               	andlw	-3
  9817  14EB  0629               	xorwf	??_Flash_Memory_Main,w
  9818  14EC  0023               	movlb	3	; select bank3
  9819  14ED  00C4               	movwf	(_Memory^(0+384)+36)
  9820                           
  9821                           ;MCU_B1.c: 968: if (Memory.GO == 1) {
  9822  14EE  1CC4               	btfss	(_Memory^(0+384)+36),1
  9823  14EF  2D09               	goto	l1288
  9824                           
  9825                           ;MCU_B1.c: 969: Memory.Runtime = 1;
  9826  14F0  15C4               	bsf	(_Memory^(0+384)+36),3
  9827                           
  9828                           ;MCU_B1.c: 970: Memory.Time++;
  9829  14F1  3001               	movlw	1
  9830  14F2  07C2               	addwf	(_Memory^(0+384)+34),f
  9831  14F3  3000               	movlw	0
  9832  14F4  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9833                           
  9834                           ;MCU_B1.c: 971: if (Memory.Time == 25) {
  9835  14F5  3022               	movlw	34
  9836  14F6  3EA0               	addlw	_Memory& (0+255)
  9837  14F7  0086               	movwf	6
  9838  14F8  3001               	movlw	1	; select bank3/4
  9839  14F9  0087               	movwf	7
  9840  14FA  3F40               	moviw [0]fsr1
  9841  14FB  3A19               	xorlw	25
  9842  14FC  1D03               	skipz
  9843  14FD  2D00               	goto	u10745
  9844  14FE  3F41               	moviw [1]fsr1
  9845  14FF  3A00               	xorlw	0
  9846  1500                     u10745:	
  9847  1500  1D03               	skipz
  9848  1501  0008               	return
  9849                           
  9850                           ;MCU_B1.c: 972: Memory.Time = 0;
  9851  1502  01C2               	clrf	(_Memory^(0+384)+34)
  9852  1503  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9853                           
  9854                           ;MCU_B1.c: 973: Memory.Modify = 0;
  9855  1504  1044               	bcf	(_Memory^(0+384)+36),0
  9856                           
  9857                           ;MCU_B1.c: 974: Memory.GO = 0;
  9858  1505  10C4               	bcf	(_Memory^(0+384)+36),1
  9859                           
  9860                           ;MCU_B1.c: 975: Flash_Memory_Modify();
  9861  1506  3197  2713         	fcall	_Flash_Memory_Modify
  9862                           
  9863                           ;MCU_B1.c: 976: }
  9864                           ;MCU_B1.c: 977: } else {
  9865  1508  0008               	return
  9866  1509                     l1288:	
  9867                           
  9868                           ;MCU_B1.c: 978: if (Memory.Runtime == 1) {
  9869  1509  1DC4               	btfss	(_Memory^(0+384)+36),3
  9870  150A  0008               	return
  9871                           
  9872                           ;MCU_B1.c: 979: Memory.Runtime = 0;
  9873  150B  11C4               	bcf	(_Memory^(0+384)+36),3
  9874                           
  9875                           ;MCU_B1.c: 980: Memory.Time = 0;
  9876  150C  01C2               	clrf	(_Memory^(0+384)+34)
  9877  150D  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9878  150E  0008               	return
  9879  150F                     __end_of_Flash_Memory_Main:	
  9880                           
  9881                           	psect	text55
  9882  1713                     __ptext55:	
  9883 ;; *************** function _Flash_Memory_Modify *****************
  9884 ;; Defined at:
  9885 ;;		line 1038 in file "../src/MCU_B1.c"
  9886 ;; Parameters:    Size  Location     Type
  9887 ;;		None
  9888 ;; Auto vars:     Size  Location     Type
  9889 ;;  i               1    5[BANK0 ] unsigned char 
  9890 ;; Return value:  Size  Location     Type
  9891 ;;		None               void
  9892 ;; Registers used:
  9893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9894 ;; Tracked objects:
  9895 ;;		On entry : 0/0
  9896 ;;		On exit  : 0/0
  9897 ;;		Unchanged: 0/0
  9898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9901 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;Total ram usage:        2 bytes
  9904 ;; Hardware stack levels used:    1
  9905 ;; Hardware stack levels required when called:    7
  9906 ;; This function calls:
  9907 ;;		_Flash_Memory_Erasing
  9908 ;;		_Flash_Memory_Read
  9909 ;;		_Flash_Memory_Write
  9910 ;;		_setMemory_Data
  9911 ;; This function is called by:
  9912 ;;		_Flash_Memory_Main
  9913 ;; This function uses a non-reentrant model
  9914 ;;
  9915                           
  9916                           
  9917                           ;psect for function _Flash_Memory_Modify
  9918  1713                     _Flash_Memory_Modify:	
  9919                           
  9920                           ;MCU_B1.c: 1039: char i = 0;
  9921                           
  9922                           ;incstack = 0
  9923                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9924  1713  0020               	movlb	0	; select bank0
  9925  1714  01A5               	clrf	Flash_Memory_Modify@i
  9926                           
  9927                           ;MCU_B1.c: 1040: for (i = 0; i < 32; i++) {
  9928  1715  01A5               	clrf	Flash_Memory_Modify@i
  9929  1716  3020               	movlw	32
  9930  1717  0225               	subwf	Flash_Memory_Modify@i,w
  9931  1718  1803               	btfsc	3,0
  9932  1719  2F2F               	goto	l9304
  9933  171A                     l9298:	
  9934                           
  9935                           ;MCU_B1.c: 1041: Memory.Data[i] = Flash_Memory_Read(i);
  9936  171A  0825               	movf	Flash_Memory_Modify@i,w
  9937  171B  3191  2166  3197   	fcall	_Flash_Memory_Read
  9938  171E  0020               	movlb	0	; select bank0
  9939  171F  00A4               	movwf	??_Flash_Memory_Modify
  9940  1720  0825               	movf	Flash_Memory_Modify@i,w
  9941  1721  3EA0               	addlw	_Memory& (0+255)
  9942  1722  0086               	movwf	6
  9943  1723  3001               	movlw	1	; select bank3/4
  9944  1724  0087               	movwf	7
  9945  1725  0824               	movf	??_Flash_Memory_Modify,w
  9946  1726  0081               	movwf	1
  9947  1727  3001               	movlw	1
  9948  1728  00A4               	movwf	??_Flash_Memory_Modify
  9949  1729  0824               	movf	??_Flash_Memory_Modify,w
  9950  172A  07A5               	addwf	Flash_Memory_Modify@i,f
  9951  172B  3020               	movlw	32
  9952  172C  0225               	subwf	Flash_Memory_Modify@i,w
  9953  172D  1C03               	skipc
  9954  172E  2F1A               	goto	l9298
  9955  172F                     l9304:	
  9956                           
  9957                           ;MCU_B1.c: 1042: }
  9958                           ;MCU_B1.c: 1043: setMemory_Data(0, product->Data[12]);
  9959  172F  0879               	movf	_product,w
  9960  1730  0086               	movwf	6
  9961  1731  3002               	movlw	2	; select bank4/5
  9962  1732  0087               	movwf	7
  9963  1733  3002               	movlw	2	; select bank4/5
  9964  1734  3F4C               	moviw [12]fsr1
  9965  1735  00A0               	movwf	setMemory_Data@data
  9966  1736  3000               	movlw	0
  9967  1737  319E  267F  3197   	fcall	_setMemory_Data
  9968                           
  9969                           ;MCU_B1.c: 1044: setMemory_Data(1, product->Data[13]);
  9970  173A  0879               	movf	_product,w
  9971  173B  0086               	movwf	6
  9972  173C  3002               	movlw	2	; select bank4/5
  9973  173D  0087               	movwf	7
  9974  173E  3002               	movlw	2	; select bank4/5
  9975  173F  3F4D               	moviw [13]fsr1
  9976  1740  0020               	movlb	0	; select bank0
  9977  1741  00A0               	movwf	setMemory_Data@data
  9978  1742  3001               	movlw	1
  9979  1743  319E  267F  3197   	fcall	_setMemory_Data
  9980                           
  9981                           ;MCU_B1.c: 1045: setMemory_Data(2, product->Data[14]);
  9982  1746  0879               	movf	_product,w
  9983  1747  0086               	movwf	6
  9984  1748  3002               	movlw	2	; select bank4/5
  9985  1749  0087               	movwf	7
  9986  174A  3002               	movlw	2	; select bank4/5
  9987  174B  3F4E               	moviw [14]fsr1
  9988  174C  0020               	movlb	0	; select bank0
  9989  174D  00A0               	movwf	setMemory_Data@data
  9990  174E  3002               	movlw	2
  9991  174F  319E  267F  3197   	fcall	_setMemory_Data
  9992                           
  9993                           ;MCU_B1.c: 1051: if (Memory.LoopSave == 1) {
  9994  1752  0023               	movlb	3	; select bank3
  9995  1753  1D44               	btfss	(_Memory^(0+384)+36),2
  9996  1754  2F59               	goto	l1311
  9997                           
  9998                           ;MCU_B1.c: 1052: Memory.LoopSave = 0;
  9999  1755  1144               	bcf	(_Memory^(0+384)+36),2
 10000                           
 10001                           ;MCU_B1.c: 1053: myMain.FirstOpen = 0;
 10002  1756  0021               	movlb	1	; select bank1
 10003  1757  11A0               	bcf	_myMain^(0+128),3
 10004                           
 10005                           ;MCU_B1.c: 1054: myMain.First = 0;
 10006  1758  12A0               	bcf	_myMain^(0+128),5
 10007  1759                     l1311:	
 10008                           
 10009                           ;MCU_B1.c: 1056: }
 10010                           ;MCU_B1.c: 1057: GIE = 0;
 10011  1759  138B               	bcf	11,7	;volatile
 10012                           
 10013                           ;MCU_B1.c: 1058: Flash_Memory_Erasing();
 10014  175A  319E  268B  3197   	fcall	_Flash_Memory_Erasing
 10015                           
 10016                           ;MCU_B1.c: 1059: Flash_Memory_Write();
 10017  175D  3193  23E1         	fcall	_Flash_Memory_Write
 10018                           
 10019                           ;MCU_B1.c: 1060: GIE = 1;
 10020  175F  178B               	bsf	11,7	;volatile
 10021  1760  0008               	return
 10022  1761                     __end_of_Flash_Memory_Modify:	
 10023                           
 10024                           	psect	text56
 10025  1E8B                     __ptext56:	
 10026 ;; *************** function _Flash_Memory_Erasing *****************
 10027 ;; Defined at:
 10028 ;;		line 1027 in file "../src/MCU_B1.c"
 10029 ;; Parameters:    Size  Location     Type
 10030 ;;		None
 10031 ;; Auto vars:     Size  Location     Type
 10032 ;;		None
 10033 ;; Return value:  Size  Location     Type
 10034 ;;		None               void
 10035 ;; Registers used:
 10036 ;;		wreg, status,2, status,0, pclath, cstack
 10037 ;; Tracked objects:
 10038 ;;		On entry : 0/0
 10039 ;;		On exit  : 0/0
 10040 ;;		Unchanged: 0/0
 10041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10046 ;;Total ram usage:        0 bytes
 10047 ;; Hardware stack levels used:    1
 10048 ;; Hardware stack levels required when called:    6
 10049 ;; This function calls:
 10050 ;;		_Flash_Memory_Unlock
 10051 ;; This function is called by:
 10052 ;;		_Flash_Memory_Modify
 10053 ;; This function uses a non-reentrant model
 10054 ;;
 10055                           
 10056                           
 10057                           ;psect for function _Flash_Memory_Erasing
 10058  1E8B                     _Flash_Memory_Erasing:	
 10059                           
 10060                           ;MCU_B1.c: 1028: CFGS = 0;
 10061                           
 10062                           ;incstack = 0
 10063                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10064  1E8B  0023               	movlb	3	; select bank3
 10065  1E8C  1315               	bcf	21,6	;volatile
 10066                           
 10067                           ;MCU_B1.c: 1029: PMADRH = 0x30;
 10068  1E8D  3030               	movlw	48
 10069  1E8E  0092               	movwf	18	;volatile
 10070                           
 10071                           ;MCU_B1.c: 1030: PMADRL = 0x00;
 10072  1E8F  0191               	clrf	17	;volatile
 10073                           
 10074                           ;MCU_B1.c: 1031: FREE = 1;
 10075  1E90  1615               	bsf	21,4	;volatile
 10076                           
 10077                           ;MCU_B1.c: 1032: WREN = 1;
 10078  1E91  1515               	bsf	21,2	;volatile
 10079                           
 10080                           ;MCU_B1.c: 1033: Flash_Memory_Unlock();
 10081  1E92  3188  2000         	fcall	_Flash_Memory_Unlock
 10082                           
 10083                           ;MCU_B1.c: 1034: WREN = 0;
 10084  1E94  0023               	movlb	3	; select bank3
 10085  1E95  1115               	bcf	21,2	;volatile
 10086  1E96  0008               	return
 10087  1E97                     __end_of_Flash_Memory_Erasing:	
 10088                           
 10089                           	psect	text57
 10090  03AA                     __ptext57:	
 10091 ;; *************** function _Flash_Memory_Initialization *****************
 10092 ;; Defined at:
 10093 ;;		line 924 in file "../src/MCU_B1.c"
 10094 ;; Parameters:    Size  Location     Type
 10095 ;;		None
 10096 ;; Auto vars:     Size  Location     Type
 10097 ;;  i               1   67[BANK0 ] unsigned char 
 10098 ;; Return value:  Size  Location     Type
 10099 ;;		None               void
 10100 ;; Registers used:
 10101 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10102 ;; Tracked objects:
 10103 ;;		On entry : 0/0
 10104 ;;		On exit  : 0/0
 10105 ;;		Unchanged: 0/0
 10106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;Total ram usage:        2 bytes
 10112 ;; Hardware stack levels used:    1
 10113 ;; Hardware stack levels required when called:    8
 10114 ;; This function calls:
 10115 ;;		_Flash_Memory_Read
 10116 ;;		_Flash_Memory_Write
 10117 ;;		_setMemory_Data
 10118 ;;		_setPercentValue
 10119 ;; This function is called by:
 10120 ;;		_main
 10121 ;; This function uses a non-reentrant model
 10122 ;;
 10123                           
 10124                           
 10125                           ;psect for function _Flash_Memory_Initialization
 10126  03AA                     _Flash_Memory_Initialization:	
 10127                           
 10128                           ;MCU_B1.c: 925: char i = 0;
 10129                           
 10130                           ;incstack = 0
 10131                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10132  03AA  0020               	movlb	0	; select bank0
 10133  03AB  01E3               	clrf	Flash_Memory_Initialization@i
 10134                           
 10135                           ;MCU_B1.c: 926: if (Flash_Memory_Read(31) == 0xaa) {
 10136  03AC  301F               	movlw	31
 10137  03AD  3191  2166  3183   	fcall	_Flash_Memory_Read
 10138  03B0  3AAA               	xorlw	170
 10139  03B1  1D03               	skipz
 10140  03B2  2C1C               	goto	l9666
 10141                           
 10142                           ;MCU_B1.c: 927: product->Data[12] = Flash_Memory_Read(0);
 10143  03B3  3000               	movlw	0
 10144  03B4  3191  2166  3183   	fcall	_Flash_Memory_Read
 10145  03B7  0020               	movlb	0	; select bank0
 10146  03B8  00E2               	movwf	??_Flash_Memory_Initialization
 10147  03B9  0879               	movf	_product,w
 10148  03BA  3E0C               	addlw	12
 10149  03BB  0086               	movwf	6
 10150  03BC  3002               	movlw	2	; select bank4/5
 10151  03BD  0087               	movwf	7
 10152  03BE  0862               	movf	??_Flash_Memory_Initialization,w
 10153  03BF  0081               	movwf	1
 10154                           
 10155                           ;MCU_B1.c: 928: product->Data[13] = Flash_Memory_Read(1);
 10156  03C0  3001               	movlw	1
 10157  03C1  3191  2166  3183   	fcall	_Flash_Memory_Read
 10158  03C4  0020               	movlb	0	; select bank0
 10159  03C5  00E2               	movwf	??_Flash_Memory_Initialization
 10160  03C6  0879               	movf	_product,w
 10161  03C7  3E0D               	addlw	13
 10162  03C8  0086               	movwf	6
 10163  03C9  3002               	movlw	2	; select bank4/5
 10164  03CA  0087               	movwf	7
 10165  03CB  0862               	movf	??_Flash_Memory_Initialization,w
 10166  03CC  0081               	movwf	1
 10167                           
 10168                           ;MCU_B1.c: 929: product->Data[14] = Flash_Memory_Read(2);
 10169  03CD  3002               	movlw	2
 10170  03CE  3191  2166  3183   	fcall	_Flash_Memory_Read
 10171  03D1  0020               	movlb	0	; select bank0
 10172  03D2  00E2               	movwf	??_Flash_Memory_Initialization
 10173  03D3  0879               	movf	_product,w
 10174  03D4  3E0E               	addlw	14
 10175  03D5  0086               	movwf	6
 10176  03D6  3002               	movlw	2	; select bank4/5
 10177  03D7  0087               	movwf	7
 10178  03D8  0862               	movf	??_Flash_Memory_Initialization,w
 10179  03D9  0081               	movwf	1
 10180                           
 10181                           ;MCU_B1.c: 935: i = setPercentValue(((char)(75*0.8)));
 10182  03DA  303C               	movlw	60
 10183  03DB  318C  2495  3183   	fcall	_setPercentValue
 10184  03DE  0020               	movlb	0	; select bank0
 10185  03DF  00E2               	movwf	??_Flash_Memory_Initialization
 10186  03E0  0862               	movf	??_Flash_Memory_Initialization,w
 10187  03E1  00E3               	movwf	Flash_Memory_Initialization@i
 10188                           
 10189                           ;MCU_B1.c: 936: product->Data[21] = i;
 10190  03E2  0863               	movf	Flash_Memory_Initialization@i,w
 10191  03E3  00E2               	movwf	??_Flash_Memory_Initialization
 10192  03E4  0879               	movf	_product,w
 10193  03E5  3E15               	addlw	21
 10194  03E6  0086               	movwf	6
 10195  03E7  3002               	movlw	2	; select bank4/5
 10196  03E8  0087               	movwf	7
 10197  03E9  0862               	movf	??_Flash_Memory_Initialization,w
 10198  03EA  0081               	movwf	1
 10199                           
 10200                           ;MCU_B1.c: 937: product->Data[22] = i;
 10201  03EB  0863               	movf	Flash_Memory_Initialization@i,w
 10202  03EC  00E2               	movwf	??_Flash_Memory_Initialization
 10203  03ED  0879               	movf	_product,w
 10204  03EE  3E16               	addlw	22
 10205  03EF  0086               	movwf	6
 10206  03F0  3002               	movlw	2	; select bank4/5
 10207  03F1  0087               	movwf	7
 10208  03F2  0862               	movf	??_Flash_Memory_Initialization,w
 10209  03F3  0081               	movwf	1
 10210                           
 10211                           ;MCU_B1.c: 938: product->Data[23] = i;
 10212  03F4  0863               	movf	Flash_Memory_Initialization@i,w
 10213  03F5  00E2               	movwf	??_Flash_Memory_Initialization
 10214  03F6  0879               	movf	_product,w
 10215  03F7  3E17               	addlw	23
 10216  03F8  0086               	movwf	6
 10217  03F9  3002               	movlw	2	; select bank4/5
 10218  03FA  0087               	movwf	7
 10219  03FB  0862               	movf	??_Flash_Memory_Initialization,w
 10220  03FC  0081               	movwf	1
 10221                           
 10222                           ;MCU_B1.c: 940: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10223  03FD  0879               	movf	_product,w
 10224  03FE  3E0C               	addlw	12
 10225  03FF  0086               	movwf	6
 10226  0400  3002               	movlw	2	; select bank4/5
 10227  0401  0087               	movwf	7
 10228  0402  0801               	movf	1,w
 10229  0403  3AFF               	xorlw	255
 10230  0404  1D03               	skipz
 10231  0405  0008               	return
 10232  0406  0879               	movf	_product,w
 10233  0407  3E0D               	addlw	13
 10234  0408  0086               	movwf	6
 10235  0409  3002               	movlw	2	; select bank4/5
 10236  040A  0087               	movwf	7
 10237  040B  0801               	movf	1,w
 10238  040C  3AFF               	xorlw	255
 10239  040D  1D03               	skipz
 10240  040E  0008               	return
 10241  040F  0879               	movf	_product,w
 10242  0410  3E0E               	addlw	14
 10243  0411  0086               	movwf	6
 10244  0412  3002               	movlw	2	; select bank4/5
 10245  0413  0087               	movwf	7
 10246  0414  0801               	movf	1,w
 10247  0415  3AFF               	xorlw	255
 10248  0416  1D03               	skipz
 10249  0417  0008               	return
 10250                           
 10251                           ;MCU_B1.c: 941: myMain.FirstOpen = 1;
 10252  0418  0021               	movlb	1	; select bank1
 10253  0419  15A0               	bsf	_myMain^(0+128),3
 10254                           
 10255                           ;MCU_B1.c: 942: myMain.First = 1;
 10256  041A  16A0               	bsf	_myMain^(0+128),5
 10257                           
 10258                           ;MCU_B1.c: 943: }
 10259                           ;MCU_B1.c: 944: } else {
 10260  041B  0008               	return
 10261  041C                     l9666:	
 10262                           
 10263                           ;MCU_B1.c: 945: i = setPercentValue(((char)(75*0.8)));
 10264  041C  303C               	movlw	60
 10265  041D  318C  2495  3183   	fcall	_setPercentValue
 10266  0420  0020               	movlb	0	; select bank0
 10267  0421  00E2               	movwf	??_Flash_Memory_Initialization
 10268  0422  0862               	movf	??_Flash_Memory_Initialization,w
 10269  0423  00E3               	movwf	Flash_Memory_Initialization@i
 10270                           
 10271                           ;MCU_B1.c: 946: setMemory_Data(0, 0xff);
 10272  0424  30FF               	movlw	255
 10273  0425  00E2               	movwf	??_Flash_Memory_Initialization
 10274  0426  0862               	movf	??_Flash_Memory_Initialization,w
 10275  0427  00A0               	movwf	setMemory_Data@data
 10276  0428  3000               	movlw	0
 10277  0429  319E  267F  3183   	fcall	_setMemory_Data
 10278                           
 10279                           ;MCU_B1.c: 947: setMemory_Data(1, 0xff);
 10280  042C  30FF               	movlw	255
 10281  042D  0020               	movlb	0	; select bank0
 10282  042E  00E2               	movwf	??_Flash_Memory_Initialization
 10283  042F  0862               	movf	??_Flash_Memory_Initialization,w
 10284  0430  00A0               	movwf	setMemory_Data@data
 10285  0431  3001               	movlw	1
 10286  0432  319E  267F  3183   	fcall	_setMemory_Data
 10287                           
 10288                           ;MCU_B1.c: 948: setMemory_Data(2, 0xff);
 10289  0435  30FF               	movlw	255
 10290  0436  0020               	movlb	0	; select bank0
 10291  0437  00E2               	movwf	??_Flash_Memory_Initialization
 10292  0438  0862               	movf	??_Flash_Memory_Initialization,w
 10293  0439  00A0               	movwf	setMemory_Data@data
 10294  043A  3002               	movlw	2
 10295  043B  319E  267F  3183   	fcall	_setMemory_Data
 10296                           
 10297                           ;MCU_B1.c: 949: setMemory_Data(3, 0xff);
 10298  043E  30FF               	movlw	255
 10299  043F  0020               	movlb	0	; select bank0
 10300  0440  00E2               	movwf	??_Flash_Memory_Initialization
 10301  0441  0862               	movf	??_Flash_Memory_Initialization,w
 10302  0442  00A0               	movwf	setMemory_Data@data
 10303  0443  3003               	movlw	3
 10304  0444  319E  267F  3183   	fcall	_setMemory_Data
 10305                           
 10306                           ;MCU_B1.c: 950: setMemory_Data(4, 0xff);
 10307  0447  30FF               	movlw	255
 10308  0448  0020               	movlb	0	; select bank0
 10309  0449  00E2               	movwf	??_Flash_Memory_Initialization
 10310  044A  0862               	movf	??_Flash_Memory_Initialization,w
 10311  044B  00A0               	movwf	setMemory_Data@data
 10312  044C  3004               	movlw	4
 10313  044D  319E  267F  3183   	fcall	_setMemory_Data
 10314                           
 10315                           ;MCU_B1.c: 951: setMemory_Data(5, 0xff);
 10316  0450  30FF               	movlw	255
 10317  0451  0020               	movlb	0	; select bank0
 10318  0452  00E2               	movwf	??_Flash_Memory_Initialization
 10319  0453  0862               	movf	??_Flash_Memory_Initialization,w
 10320  0454  00A0               	movwf	setMemory_Data@data
 10321  0455  3005               	movlw	5
 10322  0456  319E  267F  3183   	fcall	_setMemory_Data
 10323                           
 10324                           ;MCU_B1.c: 952: setMemory_Data(31, 0xaa);
 10325  0459  30AA               	movlw	170
 10326  045A  0020               	movlb	0	; select bank0
 10327  045B  00E2               	movwf	??_Flash_Memory_Initialization
 10328  045C  0862               	movf	??_Flash_Memory_Initialization,w
 10329  045D  00A0               	movwf	setMemory_Data@data
 10330  045E  301F               	movlw	31
 10331  045F  319E  267F  3183   	fcall	_setMemory_Data
 10332                           
 10333                           ;MCU_B1.c: 953: product->Data[21] = i;
 10334  0462  0020               	movlb	0	; select bank0
 10335  0463  0863               	movf	Flash_Memory_Initialization@i,w
 10336  0464  00E2               	movwf	??_Flash_Memory_Initialization
 10337  0465  0879               	movf	_product,w
 10338  0466  3E15               	addlw	21
 10339  0467  0086               	movwf	6
 10340  0468  3002               	movlw	2	; select bank4/5
 10341  0469  0087               	movwf	7
 10342  046A  0862               	movf	??_Flash_Memory_Initialization,w
 10343  046B  0081               	movwf	1
 10344                           
 10345                           ;MCU_B1.c: 954: product->Data[22] = i;
 10346  046C  0863               	movf	Flash_Memory_Initialization@i,w
 10347  046D  00E2               	movwf	??_Flash_Memory_Initialization
 10348  046E  0879               	movf	_product,w
 10349  046F  3E16               	addlw	22
 10350  0470  0086               	movwf	6
 10351  0471  3002               	movlw	2	; select bank4/5
 10352  0472  0087               	movwf	7
 10353  0473  0862               	movf	??_Flash_Memory_Initialization,w
 10354  0474  0081               	movwf	1
 10355                           
 10356                           ;MCU_B1.c: 955: product->Data[23] = i;
 10357  0475  0863               	movf	Flash_Memory_Initialization@i,w
 10358  0476  00E2               	movwf	??_Flash_Memory_Initialization
 10359  0477  0879               	movf	_product,w
 10360  0478  3E17               	addlw	23
 10361  0479  0086               	movwf	6
 10362  047A  3002               	movlw	2	; select bank4/5
 10363  047B  0087               	movwf	7
 10364  047C  0862               	movf	??_Flash_Memory_Initialization,w
 10365  047D  0081               	movwf	1
 10366                           
 10367                           ;MCU_B1.c: 956: GIE = 0;
 10368  047E  138B               	bcf	11,7	;volatile
 10369                           
 10370                           ;MCU_B1.c: 957: Flash_Memory_Write();
 10371  047F  3193  23E1         	fcall	_Flash_Memory_Write
 10372                           
 10373                           ;MCU_B1.c: 958: GIE = 1;
 10374  0481  178B               	bsf	11,7	;volatile
 10375                           
 10376                           ;MCU_B1.c: 959: myMain.FirstOpen = 1;
 10377  0482  0021               	movlb	1	; select bank1
 10378  0483  15A0               	bsf	_myMain^(0+128),3
 10379                           
 10380                           ;MCU_B1.c: 960: myMain.First = 1;
 10381  0484  16A0               	bsf	_myMain^(0+128),5
 10382  0485  0008               	return
 10383  0486                     __end_of_Flash_Memory_Initialization:	
 10384                           
 10385                           	psect	text58
 10386  1E7F                     __ptext58:	
 10387 ;; *************** function _setMemory_Data *****************
 10388 ;; Defined at:
 10389 ;;		line 1075 in file "../src/MCU_B1.c"
 10390 ;; Parameters:    Size  Location     Type
 10391 ;;  address         1    wreg     unsigned char 
 10392 ;;  data            1    0[BANK0 ] unsigned char 
 10393 ;; Auto vars:     Size  Location     Type
 10394 ;;  address         1    2[BANK0 ] unsigned char 
 10395 ;; Return value:  Size  Location     Type
 10396 ;;		None               void
 10397 ;; Registers used:
 10398 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10399 ;; Tracked objects:
 10400 ;;		On entry : 0/0
 10401 ;;		On exit  : 0/0
 10402 ;;		Unchanged: 0/0
 10403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10404 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10405 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10408 ;;Total ram usage:        3 bytes
 10409 ;; Hardware stack levels used:    1
 10410 ;; Hardware stack levels required when called:    5
 10411 ;; This function calls:
 10412 ;;		Nothing
 10413 ;; This function is called by:
 10414 ;;		_Flash_Memory_Initialization
 10415 ;;		_Flash_Memory_Modify
 10416 ;; This function uses a non-reentrant model
 10417 ;;
 10418                           
 10419                           
 10420                           ;psect for function _setMemory_Data
 10421  1E7F                     _setMemory_Data:	
 10422                           
 10423                           ;incstack = 0
 10424                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 10425                           ;setMemory_Data@address stored from wreg
 10426  1E7F  0020               	movlb	0	; select bank0
 10427  1E80  00A2               	movwf	setMemory_Data@address
 10428                           
 10429                           ;MCU_B1.c: 1076: Memory.Data[address] = data;
 10430  1E81  0820               	movf	setMemory_Data@data,w
 10431  1E82  00A1               	movwf	??_setMemory_Data
 10432  1E83  0822               	movf	setMemory_Data@address,w
 10433  1E84  3EA0               	addlw	_Memory& (0+255)
 10434  1E85  0086               	movwf	6
 10435  1E86  3001               	movlw	1	; select bank3/4
 10436  1E87  0087               	movwf	7
 10437  1E88  0821               	movf	??_setMemory_Data,w
 10438  1E89  0081               	movwf	1
 10439  1E8A  0008               	return
 10440  1E8B                     __end_of_setMemory_Data:	
 10441                           
 10442                           	psect	text59
 10443  13E1                     __ptext59:	
 10444 ;; *************** function _Flash_Memory_Write *****************
 10445 ;; Defined at:
 10446 ;;		line 1008 in file "../src/MCU_B1.c"
 10447 ;; Parameters:    Size  Location     Type
 10448 ;;		None
 10449 ;; Auto vars:     Size  Location     Type
 10450 ;;  i               1    1[BANK0 ] unsigned char 
 10451 ;; Return value:  Size  Location     Type
 10452 ;;		None               void
 10453 ;; Registers used:
 10454 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10455 ;; Tracked objects:
 10456 ;;		On entry : 0/0
 10457 ;;		On exit  : 0/0
 10458 ;;		Unchanged: 0/0
 10459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10461 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10462 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;Total ram usage:        2 bytes
 10465 ;; Hardware stack levels used:    1
 10466 ;; Hardware stack levels required when called:    6
 10467 ;; This function calls:
 10468 ;;		_Flash_Memory_Unlock
 10469 ;; This function is called by:
 10470 ;;		_Flash_Memory_Initialization
 10471 ;;		_Flash_Memory_Modify
 10472 ;; This function uses a non-reentrant model
 10473 ;;
 10474                           
 10475                           
 10476                           ;psect for function _Flash_Memory_Write
 10477  13E1                     _Flash_Memory_Write:	
 10478                           
 10479                           ;MCU_B1.c: 1009: char i = 0;
 10480                           
 10481                           ;incstack = 0
 10482                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10483  13E1  0020               	movlb	0	; select bank0
 10484  13E2  01A1               	clrf	Flash_Memory_Write@i
 10485                           
 10486                           ;MCU_B1.c: 1010: CFGS = 0;
 10487  13E3  0023               	movlb	3	; select bank3
 10488  13E4  1315               	bcf	21,6	;volatile
 10489                           
 10490                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 10491  13E5  3030               	movlw	48
 10492  13E6  0092               	movwf	18	;volatile
 10493                           
 10494                           ;MCU_B1.c: 1012: PMDATH = 0;
 10495  13E7  0194               	clrf	20	;volatile
 10496                           
 10497                           ;MCU_B1.c: 1013: FREE = 0;
 10498  13E8  1215               	bcf	21,4	;volatile
 10499                           
 10500                           ;MCU_B1.c: 1014: LWLO = 1;
 10501  13E9  1695               	bsf	21,5	;volatile
 10502                           
 10503                           ;MCU_B1.c: 1015: WREN = 1;
 10504  13EA  1515               	bsf	21,2	;volatile
 10505                           
 10506                           ;MCU_B1.c: 1016: for (i = 0; i < 32; i++) {
 10507  13EB  0020               	movlb	0	; select bank0
 10508  13EC  01A1               	clrf	Flash_Memory_Write@i
 10509  13ED  3020               	movlw	32
 10510  13EE  0221               	subwf	Flash_Memory_Write@i,w
 10511  13EF  1803               	btfsc	3,0
 10512  13F0  2C09               	goto	l1302
 10513  13F1                     l8900:	
 10514                           
 10515                           ;MCU_B1.c: 1017: PMADRL = i;
 10516  13F1  0821               	movf	Flash_Memory_Write@i,w
 10517  13F2  0023               	movlb	3	; select bank3
 10518  13F3  0091               	movwf	17	;volatile
 10519                           
 10520                           ;MCU_B1.c: 1018: PMDATL = Memory.Data[i];
 10521  13F4  0020               	movlb	0	; select bank0
 10522  13F5  0821               	movf	Flash_Memory_Write@i,w
 10523  13F6  3EA0               	addlw	_Memory& (0+255)
 10524  13F7  0086               	movwf	6
 10525  13F8  3001               	movlw	1	; select bank3/4
 10526  13F9  0087               	movwf	7
 10527  13FA  0801               	movf	1,w
 10528  13FB  0023               	movlb	3	; select bank3
 10529  13FC  0093               	movwf	19	;volatile
 10530                           
 10531                           ;MCU_B1.c: 1019: Flash_Memory_Unlock();
 10532  13FD  3188  2000  3193   	fcall	_Flash_Memory_Unlock
 10533  1400  3001               	movlw	1
 10534  1401  0020               	movlb	0	; select bank0
 10535  1402  00A0               	movwf	??_Flash_Memory_Write
 10536  1403  0820               	movf	??_Flash_Memory_Write,w
 10537  1404  07A1               	addwf	Flash_Memory_Write@i,f
 10538  1405  3020               	movlw	32
 10539  1406  0221               	subwf	Flash_Memory_Write@i,w
 10540  1407  1C03               	skipc
 10541  1408  2BF1               	goto	l8900
 10542  1409                     l1302:	
 10543                           
 10544                           ;MCU_B1.c: 1020: }
 10545                           ;MCU_B1.c: 1021: LWLO = 0;
 10546  1409  0023               	movlb	3	; select bank3
 10547  140A  1295               	bcf	21,5	;volatile
 10548                           
 10549                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 10550  140B  3188  2000         	fcall	_Flash_Memory_Unlock
 10551                           
 10552                           ;MCU_B1.c: 1023: WREN = 0;
 10553  140D  0023               	movlb	3	; select bank3
 10554  140E  1115               	bcf	21,2	;volatile
 10555  140F  0008               	return
 10556  1410                     __end_of_Flash_Memory_Write:	
 10557                           
 10558                           	psect	text60
 10559  0800                     __ptext60:	
 10560 ;; *************** function _Flash_Memory_Unlock *****************
 10561 ;; Defined at:
 10562 ;;		line 987 in file "../src/MCU_B1.c"
 10563 ;; Parameters:    Size  Location     Type
 10564 ;;		None
 10565 ;; Auto vars:     Size  Location     Type
 10566 ;;		None
 10567 ;; Return value:  Size  Location     Type
 10568 ;;		None               void
 10569 ;; Registers used:
 10570 ;;		wreg
 10571 ;; Tracked objects:
 10572 ;;		On entry : 0/0
 10573 ;;		On exit  : 0/0
 10574 ;;		Unchanged: 0/0
 10575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;Total ram usage:        0 bytes
 10581 ;; Hardware stack levels used:    1
 10582 ;; Hardware stack levels required when called:    5
 10583 ;; This function calls:
 10584 ;;		Nothing
 10585 ;; This function is called by:
 10586 ;;		_Flash_Memory_Write
 10587 ;;		_Flash_Memory_Erasing
 10588 ;; This function uses a non-reentrant model
 10589 ;;
 10590                           
 10591                           
 10592                           ;psect for function _Flash_Memory_Unlock
 10593  0800                     _Flash_Memory_Unlock:	
 10594                           
 10595                           ;MCU_B1.c: 988: PMCON2 = 0x55;
 10596                           
 10597                           ;incstack = 0
 10598                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10599  0800  3055               	movlw	85
 10600  0801  0023               	movlb	3	; select bank3
 10601  0802  0096               	movwf	22	;volatile
 10602                           
 10603                           ;MCU_B1.c: 989: PMCON2 = 0xaa;
 10604  0803  30AA               	movlw	170
 10605  0804  0096               	movwf	22	;volatile
 10606                           
 10607                           ;MCU_B1.c: 990: WR = 1;
 10608  0805  1495               	bsf	21,1	;volatile
 10609                           
 10610                           ;MCU_B1.c: 991: __nop();
 10611  0806  0000               	nop
 10612                           
 10613                           ;MCU_B1.c: 992: __nop();
 10614  0807  0000               	nop
 10615  0808  0008               	return
 10616  0809                     __end_of_Flash_Memory_Unlock:	
 10617                           
 10618                           	psect	text61
 10619  1166                     __ptext61:	
 10620 ;; *************** function _Flash_Memory_Read *****************
 10621 ;; Defined at:
 10622 ;;		line 996 in file "../src/MCU_B1.c"
 10623 ;; Parameters:    Size  Location     Type
 10624 ;;  address         1    wreg     unsigned char 
 10625 ;; Auto vars:     Size  Location     Type
 10626 ;;  address         1    2[BANK0 ] unsigned char 
 10627 ;;  ret             1    3[BANK0 ] unsigned char 
 10628 ;;  i               1    1[BANK0 ] unsigned char 
 10629 ;; Return value:  Size  Location     Type
 10630 ;;                  1    wreg      unsigned char 
 10631 ;; Registers used:
 10632 ;;		wreg, status,2
 10633 ;; Tracked objects:
 10634 ;;		On entry : 0/0
 10635 ;;		On exit  : 0/0
 10636 ;;		Unchanged: 0/0
 10637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10639 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10640 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10641 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10642 ;;Total ram usage:        4 bytes
 10643 ;; Hardware stack levels used:    1
 10644 ;; Hardware stack levels required when called:    5
 10645 ;; This function calls:
 10646 ;;		Nothing
 10647 ;; This function is called by:
 10648 ;;		_Flash_Memory_Initialization
 10649 ;;		_Flash_Memory_Modify
 10650 ;; This function uses a non-reentrant model
 10651 ;;
 10652                           
 10653                           
 10654                           ;psect for function _Flash_Memory_Read
 10655  1166                     _Flash_Memory_Read:	
 10656                           
 10657                           ;incstack = 0
 10658                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10659                           ;Flash_Memory_Read@address stored from wreg
 10660  1166  0020               	movlb	0	; select bank0
 10661  1167  00A2               	movwf	Flash_Memory_Read@address
 10662                           
 10663                           ;MCU_B1.c: 997: char i = 0, ret = 0;
 10664  1168  01A1               	clrf	Flash_Memory_Read@i
 10665  1169  01A3               	clrf	Flash_Memory_Read@ret
 10666                           
 10667                           ;MCU_B1.c: 998: PMADRH = 0x30;
 10668  116A  3030               	movlw	48
 10669  116B  0023               	movlb	3	; select bank3
 10670  116C  0092               	movwf	18	;volatile
 10671                           
 10672                           ;MCU_B1.c: 999: PMADRL = address;
 10673  116D  0020               	movlb	0	; select bank0
 10674  116E  0822               	movf	Flash_Memory_Read@address,w
 10675  116F  0023               	movlb	3	; select bank3
 10676  1170  0091               	movwf	17	;volatile
 10677                           
 10678                           ;MCU_B1.c: 1000: CFGS = 0;
 10679  1171  1315               	bcf	21,6	;volatile
 10680                           
 10681                           ;MCU_B1.c: 1001: RD = 1;
 10682  1172  1415               	bsf	21,0	;volatile
 10683                           
 10684                           ;MCU_B1.c: 1002: i = PMDATH;
 10685  1173  0814               	movf	20,w	;volatile
 10686  1174  0020               	movlb	0	; select bank0
 10687  1175  00A0               	movwf	??_Flash_Memory_Read
 10688  1176  0820               	movf	??_Flash_Memory_Read,w
 10689  1177  00A1               	movwf	Flash_Memory_Read@i
 10690                           
 10691                           ;MCU_B1.c: 1003: ret = PMDATL;
 10692  1178  0023               	movlb	3	; select bank3
 10693  1179  0813               	movf	19,w	;volatile
 10694  117A  0020               	movlb	0	; select bank0
 10695  117B  00A0               	movwf	??_Flash_Memory_Read
 10696  117C  0820               	movf	??_Flash_Memory_Read,w
 10697  117D  00A3               	movwf	Flash_Memory_Read@ret
 10698                           
 10699                           ;MCU_B1.c: 1004: return ret;
 10700  117E  0823               	movf	Flash_Memory_Read@ret,w
 10701  117F  0008               	return
 10702  1180                     __end_of_Flash_Memory_Read:	
 10703                           
 10704                           	psect	text62
 10705  06C5                     __ptext62:	
 10706 ;; *************** function _Exception_Main *****************
 10707 ;; Defined at:
 10708 ;;		line 488 in file "../src/Main_B1.c"
 10709 ;; Parameters:    Size  Location     Type
 10710 ;;		None
 10711 ;; Auto vars:     Size  Location     Type
 10712 ;;  i               2    3[BANK1 ] int 
 10713 ;;  lights          1    2[BANK1 ] unsigned char 
 10714 ;;  count           1    0[BANK1 ] unsigned char 
 10715 ;;  error           1    1[BANK1 ] unsigned char 
 10716 ;; Return value:  Size  Location     Type
 10717 ;;		None               void
 10718 ;; Registers used:
 10719 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10720 ;; Tracked objects:
 10721 ;;		On entry : 0/0
 10722 ;;		On exit  : 0/0
 10723 ;;		Unchanged: 0/0
 10724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10726 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;Total ram usage:        6 bytes
 10730 ;; Hardware stack levels used:    1
 10731 ;; Hardware stack levels required when called:    9
 10732 ;; This function calls:
 10733 ;;		_DimmerLightsPointSelect
 10734 ;;		_getDimmerLights_Line
 10735 ;;		_getDimmerLights_Status
 10736 ;;		_getMain_All_Error_Status
 10737 ;;		_getMain_LightsStatus
 10738 ;;		_setBuz
 10739 ;;		_setDimmerLights_SwOff
 10740 ;;		_setLED
 10741 ;; This function is called by:
 10742 ;;		_main
 10743 ;; This function uses a non-reentrant model
 10744 ;;
 10745                           
 10746                           
 10747                           ;psect for function _Exception_Main
 10748  06C5                     _Exception_Main:	
 10749                           
 10750                           ;Main_B1.c: 489: char error = getMain_All_Error_Status(0);
 10751                           
 10752                           ;incstack = 0
 10753                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10754  06C5  3000               	movlw	0
 10755  06C6  3191  2180  3186   	fcall	_getMain_All_Error_Status
 10756  06C9  0020               	movlb	0	; select bank0
 10757  06CA  00EC               	movwf	??_Exception_Main
 10758  06CB  086C               	movf	??_Exception_Main,w
 10759  06CC  0021               	movlb	1	; select bank1
 10760  06CD  00E9               	movwf	Exception_Main@error^(0+128)
 10761                           
 10762                           ;Main_B1.c: 491: if (myMain.Error_Run == 1) {
 10763  06CE  1DAB               	btfss	(_myMain^(0+128)+11),3
 10764  06CF  2EDD               	goto	l9802
 10765                           
 10766                           ;Main_B1.c: 492: if (error == 0) {
 10767  06D0  08E9               	movf	Exception_Main@error^(0+128),f
 10768  06D1  1D03               	skipz
 10769  06D2  0008               	return
 10770                           
 10771                           ;Main_B1.c: 493: myMain.Error_Run = 0;
 10772  06D3  11AB               	bcf	(_myMain^(0+128)+11),3
 10773                           
 10774                           ;Main_B1.c: 498: setLED(99, 10);
 10775  06D4  300A               	movlw	10
 10776  06D5  0020               	movlb	0	; select bank0
 10777  06D6  00EC               	movwf	??_Exception_Main
 10778  06D7  086C               	movf	??_Exception_Main,w
 10779  06D8  00A2               	movwf	setLED@command
 10780  06D9  3063               	movlw	99
 10781  06DA  3188  20AA         	fcall	_setLED
 10782                           
 10783                           ;Main_B1.c: 500: }
 10784                           ;Main_B1.c: 501: } else {
 10785  06DC  0008               	return
 10786  06DD                     l9802:	
 10787                           
 10788                           ;Main_B1.c: 502: if (error != 0) {
 10789  06DD  0021               	movlb	1	; select bank1
 10790  06DE  0869               	movf	Exception_Main@error^(0+128),w
 10791  06DF  1903               	btfsc	3,2
 10792  06E0  0008               	return
 10793                           
 10794                           ;Main_B1.c: 503: myMain.Error_Run = 1;
 10795  06E1  15AB               	bsf	(_myMain^(0+128)+11),3
 10796                           
 10797                           ;Main_B1.c: 506: setLED(99, 11);
 10798  06E2  300B               	movlw	11
 10799  06E3  0020               	movlb	0	; select bank0
 10800  06E4  00EC               	movwf	??_Exception_Main
 10801  06E5  086C               	movf	??_Exception_Main,w
 10802  06E6  00A2               	movwf	setLED@command
 10803  06E7  3063               	movlw	99
 10804  06E8  3188  20AA  3186   	fcall	_setLED
 10805                           
 10806                           ;Main_B1.c: 508: switch (error) {
 10807  06EB  2F6A               	goto	l9842
 10808  06EC                     l9808:	
 10809                           ;Main_B1.c: 509: case 2:
 10810                           
 10811                           
 10812                           ;Main_B1.c: 510: if (getMain_LightsStatus() == 1) {
 10813  06EC  3193  23B4  3186   	fcall	_getMain_LightsStatus
 10814  06EF  3A01               	xorlw	1
 10815  06F0  1D03               	skipz
 10816  06F1  2EFB               	goto	l9812
 10817                           
 10818                           ;Main_B1.c: 511: setBuz(10, 300);
 10819  06F2  302C               	movlw	44
 10820  06F3  0020               	movlb	0	; select bank0
 10821  06F4  00A9               	movwf	setBuz@time
 10822  06F5  3001               	movlw	1
 10823  06F6  00AA               	movwf	setBuz@time+1
 10824  06F7  300A               	movlw	10
 10825  06F8  318A  2201  3186   	fcall	_setBuz
 10826  06FB                     l9812:	
 10827                           
 10828                           ;Main_B1.c: 512: }
 10829                           ;Main_B1.c: 518: char count = 2;
 10830  06FB  3002               	movlw	2
 10831  06FC  0020               	movlb	0	; select bank0
 10832  06FD  00EC               	movwf	??_Exception_Main
 10833  06FE  086C               	movf	??_Exception_Main,w
 10834  06FF  0021               	movlb	1	; select bank1
 10835  0700  00E8               	movwf	Exception_Main@count^(0+128)
 10836                           
 10837                           ;Main_B1.c: 523: for (int i = 0; i < count; i++) {
 10838  0701  01EB               	clrf	Exception_Main@i^(0+128)
 10839  0702  01EC               	clrf	(Exception_Main@i+1)^(0+128)
 10840  0703                     l9826:	
 10841  0703  086C               	movf	(Exception_Main@i+1)^(0+128),w
 10842  0704  3A80               	xorlw	128
 10843  0705  0020               	movlb	0	; select bank0
 10844  0706  00EC               	movwf	??_Exception_Main
 10845  0707  3080               	movlw	128
 10846  0708  026C               	subwf	??_Exception_Main,w
 10847  0709  1D03               	skipz
 10848  070A  2F0E               	goto	u10925
 10849  070B  0021               	movlb	1	; select bank1
 10850  070C  0868               	movf	Exception_Main@count^(0+128),w
 10851  070D  026B               	subwf	Exception_Main@i^(0+128),w
 10852  070E                     u10925:	
 10853  070E  1803               	btfsc	3,0
 10854  070F  2F37               	goto	u10920
 10855                           
 10856                           ;Main_B1.c: 524: DimmerLightsPointSelect(i + 1);
 10857  0710  0021               	movlb	1	; select bank1
 10858  0711  086B               	movf	Exception_Main@i^(0+128),w
 10859  0712  3E01               	addlw	1
 10860  0713  319F  27A0  3186   	fcall	_DimmerLightsPointSelect
 10861                           
 10862                           ;Main_B1.c: 525: if (getDimmerLights_Status(i + 1) == 1) {
 10863  0716  0021               	movlb	1	; select bank1
 10864  0717  086B               	movf	Exception_Main@i^(0+128),w
 10865  0718  3E01               	addlw	1
 10866  0719  319F  2702  3186   	fcall	_getDimmerLights_Status
 10867  071C  3A01               	xorlw	1
 10868  071D  1D03               	skipz
 10869  071E  2F31               	goto	l9824
 10870                           
 10871                           ;Main_B1.c: 526: DimmerLights->SwFlag = 1;
 10872  071F  0875               	movf	_DimmerLights,w
 10873  0720  3E0B               	addlw	11
 10874  0721  0086               	movwf	6
 10875  0722  3001               	movlw	1	; select bank2/3
 10876  0723  0087               	movwf	7
 10877  0724  1481               	bsf	1,1
 10878                           
 10879                           ;Main_B1.c: 527: DimmerLights->Status = 0;
 10880  0725  0875               	movf	_DimmerLights,w
 10881  0726  3E02               	addlw	2
 10882  0727  0086               	movwf	6
 10883  0728  3001               	movlw	1	; select bank2/3
 10884  0729  0087               	movwf	7
 10885  072A  1081               	bcf	1,1
 10886                           
 10887                           ;Main_B1.c: 528: setDimmerLights_SwOff(i + 1);
 10888  072B  0021               	movlb	1	; select bank1
 10889  072C  086B               	movf	Exception_Main@i^(0+128),w
 10890  072D  3E01               	addlw	1
 10891  072E  3189  21A9  3186   	fcall	_setDimmerLights_SwOff
 10892  0731                     l9824:	
 10893  0731  3001               	movlw	1
 10894  0732  0021               	movlb	1	; select bank1
 10895  0733  07EB               	addwf	Exception_Main@i^(0+128),f
 10896  0734  3000               	movlw	0
 10897  0735  3DEC               	addwfc	(Exception_Main@i+1)^(0+128),f
 10898  0736  2F03               	goto	l9826
 10899  0737                     u10920:	
 10900  0737  0021               	movlb	1	; select bank1
 10901  0738  0008               	return
 10902  0739                     l9828:	
 10903                           ;Main_B1.c: 532: case 3:
 10904                           
 10905                           ;Main_B1.c: 529: }
 10906                           ;Main_B1.c: 530: }
 10907                           ;Main_B1.c: 531: break;
 10908                           
 10909                           
 10910                           ;Main_B1.c: 533: setBuz(5, 300);
 10911  0739  302C               	movlw	44
 10912  073A  0020               	movlb	0	; select bank0
 10913  073B  00A9               	movwf	setBuz@time
 10914  073C  3001               	movlw	1
 10915  073D  00AA               	movwf	setBuz@time+1
 10916  073E  3005               	movlw	5
 10917  073F  318A  2201  3186   	fcall	_setBuz
 10918                           
 10919                           ;Main_B1.c: 534: char lights = getDimmerLights_Line();
 10920  0742  319F  27B3  3186   	fcall	_getDimmerLights_Line
 10921  0745  0020               	movlb	0	; select bank0
 10922  0746  00EC               	movwf	??_Exception_Main
 10923  0747  086C               	movf	??_Exception_Main,w
 10924  0748  0021               	movlb	1	; select bank1
 10925  0749  00EA               	movwf	Exception_Main@lights^(0+128)
 10926                           
 10927                           ;Main_B1.c: 535: DimmerLightsPointSelect(lights);
 10928  074A  086A               	movf	Exception_Main@lights^(0+128),w
 10929  074B  319F  27A0  3186   	fcall	_DimmerLightsPointSelect
 10930                           
 10931                           ;Main_B1.c: 536: if (getDimmerLights_Status(lights) == 1) {
 10932  074E  0021               	movlb	1	; select bank1
 10933  074F  086A               	movf	Exception_Main@lights^(0+128),w
 10934  0750  319F  2702  3186   	fcall	_getDimmerLights_Status
 10935  0753  3A01               	xorlw	1
 10936  0754  1903               	btfsc	3,2
 10937  0755  2F58               	goto	l9836
 10938  0756  0021               	movlb	1	; select bank1
 10939  0757  0008               	return
 10940  0758                     l9836:	
 10941                           
 10942                           ;Main_B1.c: 537: DimmerLights->SwFlag = 1;
 10943  0758  0875               	movf	_DimmerLights,w
 10944  0759  3E0B               	addlw	11
 10945  075A  0086               	movwf	6
 10946  075B  3001               	movlw	1	; select bank2/3
 10947  075C  0087               	movwf	7
 10948  075D  1481               	bsf	1,1
 10949                           
 10950                           ;Main_B1.c: 538: DimmerLights->Status = 0;
 10951  075E  0875               	movf	_DimmerLights,w
 10952  075F  3E02               	addlw	2
 10953  0760  0086               	movwf	6
 10954  0761  3001               	movlw	1	; select bank2/3
 10955  0762  0087               	movwf	7
 10956  0763  1081               	bcf	1,1
 10957                           
 10958                           ;Main_B1.c: 539: setDimmerLights_SwOff(lights);
 10959  0764  0021               	movlb	1	; select bank1
 10960  0765  086A               	movf	Exception_Main@lights^(0+128),w
 10961  0766  3189  21A9         	fcall	_setDimmerLights_SwOff
 10962  0768  0021               	movlb	1	; select bank1
 10963  0769  0008               	return
 10964  076A                     l9842:	
 10965                           ;Main_B1.c: 542: }
 10966                           
 10967                           ;Main_B1.c: 540: }
 10968                           ;Main_B1.c: 541: break;
 10969                           
 10970  076A  0021               	movlb	1	; select bank1
 10971  076B  0869               	movf	Exception_Main@error^(0+128),w
 10972                           
 10973                           ; Switch size 1, requested type "space"
 10974                           ; Number of cases is 2, Range of values is 2 to 3
 10975                           ; switch strategies available:
 10976                           ; Name         Instructions Cycles
 10977                           ; simple_byte            7     4 (average)
 10978                           ; direct_byte           13     9 (fixed)
 10979                           ; jumptable            263     9 (fixed)
 10980                           ;	Chosen strategy is simple_byte
 10981  076C  3A02               	xorlw	2	; case 2
 10982  076D  1903               	skipnz
 10983  076E  2EEC               	goto	l9808
 10984  076F  3A01               	xorlw	1	; case 3
 10985  0770  1903               	skipnz
 10986  0771  2F39               	goto	l9828
 10987  0772  2F74               	goto	l1564
 10988  0773  0008               	return
 10989  0774                     l1564:	
 10990  0774  0008               	return
 10991  0775                     __end_of_Exception_Main:	
 10992                           
 10993                           	psect	text63
 10994  13B4                     __ptext63:	
 10995 ;; *************** function _getMain_LightsStatus *****************
 10996 ;; Defined at:
 10997 ;;		line 375 in file "../src/Main_B1.c"
 10998 ;; Parameters:    Size  Location     Type
 10999 ;;		None
 11000 ;; Auto vars:     Size  Location     Type
 11001 ;;  i               2    6[BANK0 ] int 
 11002 ;;  status          1    8[BANK0 ] unsigned char 
 11003 ;;  count           1    5[BANK0 ] unsigned char 
 11004 ;; Return value:  Size  Location     Type
 11005 ;;                  1    wreg      unsigned char 
 11006 ;; Registers used:
 11007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11008 ;; Tracked objects:
 11009 ;;		On entry : 0/0
 11010 ;;		On exit  : 0/0
 11011 ;;		Unchanged: 0/0
 11012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11016 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11017 ;;Total ram usage:        5 bytes
 11018 ;; Hardware stack levels used:    1
 11019 ;; Hardware stack levels required when called:    7
 11020 ;; This function calls:
 11021 ;;		_getDimmerLights_Status
 11022 ;; This function is called by:
 11023 ;;		_Flash_Memory_Main
 11024 ;;		_Exception_Main
 11025 ;;		_setMain_Exception
 11026 ;; This function uses a non-reentrant model
 11027 ;;
 11028                           
 11029                           
 11030                           ;psect for function _getMain_LightsStatus
 11031  13B4                     _getMain_LightsStatus:	
 11032                           
 11033                           ;Main_B1.c: 376: char status = 0, count = 0;
 11034                           
 11035                           ;incstack = 0
 11036                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11037  13B4  0020               	movlb	0	; select bank0
 11038  13B5  01A8               	clrf	getMain_LightsStatus@status
 11039  13B6  01A5               	clrf	getMain_LightsStatus@count
 11040                           
 11041                           ;Main_B1.c: 383: count = 2;
 11042  13B7  3002               	movlw	2
 11043  13B8  00A4               	movwf	??_getMain_LightsStatus
 11044  13B9  0824               	movf	??_getMain_LightsStatus,w
 11045  13BA  00A5               	movwf	getMain_LightsStatus@count
 11046                           
 11047                           ;Main_B1.c: 390: for (int i = 0; i < count; i++) {
 11048  13BB  01A6               	clrf	getMain_LightsStatus@i
 11049  13BC  01A7               	clrf	getMain_LightsStatus@i+1
 11050  13BD                     l9286:	
 11051  13BD  0827               	movf	getMain_LightsStatus@i+1,w
 11052  13BE  3A80               	xorlw	128
 11053  13BF  00A4               	movwf	??_getMain_LightsStatus
 11054  13C0  3080               	movlw	128
 11055  13C1  0224               	subwf	??_getMain_LightsStatus,w
 11056  13C2  1D03               	skipz
 11057  13C3  2BC6               	goto	u10005
 11058  13C4  0825               	movf	getMain_LightsStatus@count,w
 11059  13C5  0226               	subwf	getMain_LightsStatus@i,w
 11060  13C6                     u10005:	
 11061  13C6  1803               	btfsc	3,0
 11062  13C7  2BDE               	goto	l9288
 11063                           
 11064                           ;Main_B1.c: 391: if (status == 0) {
 11065  13C8  0020               	movlb	0	; select bank0
 11066  13C9  08A8               	movf	getMain_LightsStatus@status,f
 11067  13CA  1D03               	skipz
 11068  13CB  2BD9               	goto	l9284
 11069                           
 11070                           ;Main_B1.c: 396: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 11071  13CC  0826               	movf	getMain_LightsStatus@i,w
 11072  13CD  3E01               	addlw	1
 11073  13CE  319F  2702  3193   	fcall	_getDimmerLights_Status
 11074  13D1  3A01               	xorlw	1
 11075  13D2  3000               	movlw	0
 11076  13D3  1903               	skipnz
 11077  13D4  3001               	movlw	1
 11078  13D5  0020               	movlb	0	; select bank0
 11079  13D6  00A4               	movwf	??_getMain_LightsStatus
 11080  13D7  0824               	movf	??_getMain_LightsStatus,w
 11081  13D8  00A8               	movwf	getMain_LightsStatus@status
 11082  13D9                     l9284:	
 11083  13D9  3001               	movlw	1
 11084  13DA  07A6               	addwf	getMain_LightsStatus@i,f
 11085  13DB  3000               	movlw	0
 11086  13DC  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 11087  13DD  2BBD               	goto	l9286
 11088  13DE                     l9288:	
 11089                           
 11090                           ;Main_B1.c: 398: }
 11091                           ;Main_B1.c: 399: }
 11092                           ;Main_B1.c: 400: return status;
 11093  13DE  0020               	movlb	0	; select bank0
 11094  13DF  0828               	movf	getMain_LightsStatus@status,w
 11095  13E0  0008               	return
 11096  13E1                     __end_of_getMain_LightsStatus:	
 11097                           
 11098                           	psect	text64
 11099  1180                     __ptext64:	
 11100 ;; *************** function _getMain_All_Error_Status *****************
 11101 ;; Defined at:
 11102 ;;		line 404 in file "../src/Main_B1.c"
 11103 ;; Parameters:    Size  Location     Type
 11104 ;;  command         1    wreg     unsigned char 
 11105 ;; Auto vars:     Size  Location     Type
 11106 ;;  command         1    1[BANK0 ] unsigned char 
 11107 ;;  status          1    4[BANK0 ] unsigned char 
 11108 ;; Return value:  Size  Location     Type
 11109 ;;                  1    wreg      unsigned char 
 11110 ;; Registers used:
 11111 ;;		wreg, status,2, status,0
 11112 ;; Tracked objects:
 11113 ;;		On entry : 0/0
 11114 ;;		On exit  : 0/0
 11115 ;;		Unchanged: 0/0
 11116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11118 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11119 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11120 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11121 ;;Total ram usage:        5 bytes
 11122 ;; Hardware stack levels used:    1
 11123 ;; Hardware stack levels required when called:    5
 11124 ;; This function calls:
 11125 ;;		Nothing
 11126 ;; This function is called by:
 11127 ;;		_Exception_Main
 11128 ;;		_setTemp_Main
 11129 ;;		_setRF_Main
 11130 ;;		_getRxData
 11131 ;;		_setSw_Main
 11132 ;; This function uses a non-reentrant model
 11133 ;;
 11134                           
 11135                           
 11136                           ;psect for function _getMain_All_Error_Status
 11137  1180                     _getMain_All_Error_Status:	
 11138                           
 11139                           ;incstack = 0
 11140                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 11141                           ;getMain_All_Error_Status@command stored from wreg
 11142  1180  0020               	movlb	0	; select bank0
 11143  1181  00A1               	movwf	getMain_All_Error_Status@command
 11144                           
 11145                           ;Main_B1.c: 405: char status = 0;
 11146  1182  01A4               	clrf	getMain_All_Error_Status@status
 11147                           
 11148                           ;Main_B1.c: 416: if (status == 0 && command != 2) {
 11149  1183  08A4               	movf	getMain_All_Error_Status@status,f
 11150  1184  1D03               	skipz
 11151  1185  299A               	goto	l1536
 11152  1186  0821               	movf	getMain_All_Error_Status@command,w
 11153  1187  3A02               	xorlw	2
 11154  1188  1903               	skipnz
 11155  1189  299A               	goto	l1536
 11156                           
 11157                           ;Main_B1.c: 417: status = Temp.ERROR == 1 ? 2 : 0;
 11158  118A  0021               	movlb	1	; select bank1
 11159  118B  18D6               	btfsc	_Temp^(0+128),1
 11160  118C  2991               	goto	l8636
 11161  118D  0020               	movlb	0	; select bank0
 11162  118E  01A2               	clrf	_getMain_All_Error_Status$3324
 11163  118F  01A3               	clrf	_getMain_All_Error_Status$3324+1
 11164  1190  2996               	goto	l1540
 11165  1191                     l8636:	
 11166  1191  3002               	movlw	2
 11167  1192  0020               	movlb	0	; select bank0
 11168  1193  00A2               	movwf	_getMain_All_Error_Status$3324
 11169  1194  3000               	movlw	0
 11170  1195  00A3               	movwf	_getMain_All_Error_Status$3324+1
 11171  1196                     l1540:	
 11172  1196  0822               	movf	_getMain_All_Error_Status$3324,w
 11173  1197  00A0               	movwf	??_getMain_All_Error_Status
 11174  1198  0820               	movf	??_getMain_All_Error_Status,w
 11175  1199  00A4               	movwf	getMain_All_Error_Status@status
 11176  119A                     l1536:	
 11177                           
 11178                           ;Main_B1.c: 418: }
 11179                           ;Main_B1.c: 441: return status;
 11180  119A  0824               	movf	getMain_All_Error_Status@status,w
 11181  119B  0008               	return
 11182  119C                     __end_of_getMain_All_Error_Status:	
 11183                           
 11184                           	psect	text65
 11185  1FB3                     __ptext65:	
 11186 ;; *************** function _getDimmerLights_Line *****************
 11187 ;; Defined at:
 11188 ;;		line 685 in file "../src/Dimmer_B1.c"
 11189 ;; Parameters:    Size  Location     Type
 11190 ;;		None
 11191 ;; Auto vars:     Size  Location     Type
 11192 ;;  line            1    1[BANK0 ] unsigned char 
 11193 ;; Return value:  Size  Location     Type
 11194 ;;                  1    wreg      unsigned char 
 11195 ;; Registers used:
 11196 ;;		wreg, status,2
 11197 ;; Tracked objects:
 11198 ;;		On entry : 0/0
 11199 ;;		On exit  : 0/0
 11200 ;;		Unchanged: 0/0
 11201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11204 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11205 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11206 ;;Total ram usage:        2 bytes
 11207 ;; Hardware stack levels used:    1
 11208 ;; Hardware stack levels required when called:    5
 11209 ;; This function calls:
 11210 ;;		Nothing
 11211 ;; This function is called by:
 11212 ;;		_Exception_Main
 11213 ;;		_setMain_Exception
 11214 ;; This function uses a non-reentrant model
 11215 ;;
 11216                           
 11217                           
 11218                           ;psect for function _getDimmerLights_Line
 11219  1FB3                     _getDimmerLights_Line:	
 11220                           
 11221                           ;Dimmer_B1.c: 686: char line = 0;
 11222                           
 11223                           ;incstack = 0
 11224                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 11225  1FB3  0020               	movlb	0	; select bank0
 11226  1FB4  01A1               	clrf	getDimmerLights_Line@line
 11227                           
 11228                           ;Dimmer_B1.c: 688: if (DimmerLights1.Line == 1) {
 11229  1FB5  0022               	movlb	2	; select bank2
 11230  1FB6  1F50               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 11231  1FB7  2FBC               	goto	l827
 11232                           
 11233                           ;Dimmer_B1.c: 689: line = 1;
 11234  1FB8  0020               	movlb	0	; select bank0
 11235  1FB9  01A1               	clrf	getDimmerLights_Line@line
 11236  1FBA  0AA1               	incf	getDimmerLights_Line@line,f
 11237                           
 11238                           ;Dimmer_B1.c: 690: }
 11239  1FBB  2FC3               	goto	l828
 11240  1FBC                     l827:	
 11241                           
 11242                           ;Dimmer_B1.c: 693: else if (DimmerLights2.Line == 1) {
 11243  1FBC  1F61               	btfss	(_DimmerLights2^(0+256)+10),6	;volatile
 11244  1FBD  2FC3               	goto	l828
 11245                           
 11246                           ;Dimmer_B1.c: 694: line = 2;
 11247  1FBE  3002               	movlw	2
 11248  1FBF  0020               	movlb	0	; select bank0
 11249  1FC0  00A0               	movwf	??_getDimmerLights_Line
 11250  1FC1  0820               	movf	??_getDimmerLights_Line,w
 11251  1FC2  00A1               	movwf	getDimmerLights_Line@line
 11252  1FC3                     l828:	
 11253                           
 11254                           ;Dimmer_B1.c: 695: }
 11255                           ;Dimmer_B1.c: 702: return line;
 11256  1FC3  0020               	movlb	0	; select bank0
 11257  1FC4  0821               	movf	getDimmerLights_Line@line,w
 11258  1FC5  0008               	return
 11259  1FC6                     __end_of_getDimmerLights_Line:	
 11260                           
 11261                           	psect	text66
 11262  1E39                     __ptext66:	
 11263 ;; *************** function _DimmerLights_Main *****************
 11264 ;; Defined at:
 11265 ;;		line 478 in file "../src/Dimmer_B1.c"
 11266 ;; Parameters:    Size  Location     Type
 11267 ;;		None
 11268 ;; Auto vars:     Size  Location     Type
 11269 ;;		None
 11270 ;; Return value:  Size  Location     Type
 11271 ;;		None               void
 11272 ;; Registers used:
 11273 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11274 ;; Tracked objects:
 11275 ;;		On entry : 0/0
 11276 ;;		On exit  : 0/0
 11277 ;;		Unchanged: 0/0
 11278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11283 ;;Total ram usage:        0 bytes
 11284 ;; Hardware stack levels used:    1
 11285 ;; Hardware stack levels required when called:   10
 11286 ;; This function calls:
 11287 ;;		_setDimmerLights_Main
 11288 ;; This function is called by:
 11289 ;;		_main
 11290 ;; This function uses a non-reentrant model
 11291 ;;
 11292                           
 11293                           
 11294                           ;psect for function _DimmerLights_Main
 11295  1E39                     _DimmerLights_Main:	
 11296                           
 11297                           ;Dimmer_B1.c: 491: setDimmerLights_Main(1);
 11298                           
 11299                           ;incstack = 0
 11300                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11301  1E39  3001               	movlw	1
 11302  1E3A  3188  2009  319E   	fcall	_setDimmerLights_Main
 11303                           
 11304                           ;Dimmer_B1.c: 495: setDimmerLights_Main(2);
 11305  1E3D  3002               	movlw	2
 11306  1E3E  3188  2009         	fcall	_setDimmerLights_Main
 11307  1E40  0008               	return
 11308  1E41                     __end_of_DimmerLights_Main:	
 11309                           
 11310                           	psect	text67
 11311  0809                     __ptext67:	
 11312 ;; *************** function _setDimmerLights_Main *****************
 11313 ;; Defined at:
 11314 ;;		line 505 in file "../src/Dimmer_B1.c"
 11315 ;; Parameters:    Size  Location     Type
 11316 ;;  lights          1    wreg     unsigned char 
 11317 ;; Auto vars:     Size  Location     Type
 11318 ;;  lights          1   78[BANK0 ] unsigned char 
 11319 ;; Return value:  Size  Location     Type
 11320 ;;		None               void
 11321 ;; Registers used:
 11322 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11323 ;; Tracked objects:
 11324 ;;		On entry : 0/0
 11325 ;;		On exit  : 0/0
 11326 ;;		Unchanged: 0/0
 11327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;Total ram usage:        1 bytes
 11333 ;; Hardware stack levels used:    1
 11334 ;; Hardware stack levels required when called:    9
 11335 ;; This function calls:
 11336 ;;		_DimmerLightsPointSelect
 11337 ;;		_getDimmerLights_Allow_Condition
 11338 ;;		_setDimmerLights
 11339 ;;		_setDimmerLights_Adj
 11340 ;; This function is called by:
 11341 ;;		_DimmerLights_Main
 11342 ;; This function uses a non-reentrant model
 11343 ;;
 11344                           
 11345                           
 11346                           ;psect for function _setDimmerLights_Main
 11347  0809                     _setDimmerLights_Main:	
 11348                           
 11349                           ;incstack = 0
 11350                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11351                           ;setDimmerLights_Main@lights stored from wreg
 11352  0809  0020               	movlb	0	; select bank0
 11353  080A  00EE               	movwf	setDimmerLights_Main@lights
 11354                           
 11355                           ;Dimmer_B1.c: 506: DimmerLightsPointSelect(lights);
 11356  080B  086E               	movf	setDimmerLights_Main@lights,w
 11357  080C  319F  27A0  3188   	fcall	_DimmerLightsPointSelect
 11358                           
 11359                           ;Dimmer_B1.c: 508: if (DimmerLights->Trigger == 1) {
 11360  080F  0875               	movf	_DimmerLights,w
 11361  0810  3E0A               	addlw	10
 11362  0811  0086               	movwf	6
 11363  0812  3001               	movlw	1	; select bank2/3
 11364  0813  0087               	movwf	7
 11365  0814  1C81               	btfss	1,1
 11366  0815  2838               	goto	l9166
 11367                           
 11368                           ;Dimmer_B1.c: 509: if (getDimmerLights_Allow_Condition(lights) == 0) {
 11369  0816  0020               	movlb	0	; select bank0
 11370  0817  086E               	movf	setDimmerLights_Main@lights,w
 11371  0818  3193  2387  3188   	fcall	_getDimmerLights_Allow_Condition
 11372  081B  3800               	iorlw	0
 11373  081C  1D03               	skipz
 11374  081D  0008               	return
 11375                           
 11376                           ;Dimmer_B1.c: 510: DimmerLights->Trigger = 0;
 11377  081E  0875               	movf	_DimmerLights,w
 11378  081F  3E0A               	addlw	10
 11379  0820  0086               	movwf	6
 11380  0821  3001               	movlw	1	; select bank2/3
 11381  0822  0087               	movwf	7
 11382  0823  1081               	bcf	1,1
 11383                           
 11384                           ;Dimmer_B1.c: 511: if (DimmerLights->Switch == 1) {
 11385  0824  0875               	movf	_DimmerLights,w
 11386  0825  3E0A               	addlw	10
 11387  0826  0086               	movwf	6
 11388  0827  3001               	movlw	1	; select bank2/3
 11389  0828  0087               	movwf	7
 11390  0829  1C01               	btfss	1,0
 11391  082A  2832               	goto	l9164
 11392                           
 11393                           ;Dimmer_B1.c: 512: setDimmerLights(lights, 1);
 11394  082B  0020               	movlb	0	; select bank0
 11395  082C  01EB               	clrf	setDimmerLights@status
 11396  082D  0AEB               	incf	setDimmerLights@status,f
 11397  082E  086E               	movf	setDimmerLights_Main@lights,w
 11398  082F  318A  22B3         	fcall	_setDimmerLights
 11399                           
 11400                           ;Dimmer_B1.c: 513: } else {
 11401  0831  0008               	return
 11402  0832                     l9164:	
 11403                           
 11404                           ;Dimmer_B1.c: 514: setDimmerLights(lights, 0);
 11405  0832  0020               	movlb	0	; select bank0
 11406  0833  01EB               	clrf	setDimmerLights@status
 11407  0834  086E               	movf	setDimmerLights_Main@lights,w
 11408  0835  318A  22B3         	fcall	_setDimmerLights
 11409                           
 11410                           ;Dimmer_B1.c: 515: }
 11411                           ;Dimmer_B1.c: 516: }
 11412                           ;Dimmer_B1.c: 517: } else {
 11413  0837  0008               	return
 11414  0838                     l9166:	
 11415                           
 11416                           ;Dimmer_B1.c: 518: if (DimmerLights->TriggerAdj == 1) {
 11417  0838  0875               	movf	_DimmerLights,w
 11418  0839  3E0A               	addlw	10
 11419  083A  0086               	movwf	6
 11420  083B  3001               	movlw	1	; select bank2/3
 11421  083C  0087               	movwf	7
 11422  083D  1D81               	btfss	1,3
 11423  083E  0008               	return
 11424                           
 11425                           ;Dimmer_B1.c: 519: DimmerLights->TriggerAdj = 0;
 11426  083F  0875               	movf	_DimmerLights,w
 11427  0840  3E0A               	addlw	10
 11428  0841  0086               	movwf	6
 11429  0842  3001               	movlw	1	; select bank2/3
 11430  0843  0087               	movwf	7
 11431  0844  1181               	bcf	1,3
 11432                           
 11433                           ;Dimmer_B1.c: 520: if (DimmerLights->SwitchAdj == 1) {
 11434  0845  0875               	movf	_DimmerLights,w
 11435  0846  3E0A               	addlw	10
 11436  0847  0086               	movwf	6
 11437  0848  3001               	movlw	1	; select bank2/3
 11438  0849  0087               	movwf	7
 11439  084A  1D01               	btfss	1,2
 11440  084B  2853               	goto	l9172
 11441                           
 11442                           ;Dimmer_B1.c: 521: setDimmerLights_Adj(lights, 1);
 11443  084C  0020               	movlb	0	; select bank0
 11444  084D  01EB               	clrf	setDimmerLights_Adj@status
 11445  084E  0AEB               	incf	setDimmerLights_Adj@status,f
 11446  084F  086E               	movf	setDimmerLights_Main@lights,w
 11447  0850  3197  27B0         	fcall	_setDimmerLights_Adj
 11448                           
 11449                           ;Dimmer_B1.c: 522: } else {
 11450  0852  0008               	return
 11451  0853                     l9172:	
 11452                           
 11453                           ;Dimmer_B1.c: 523: setDimmerLights_Adj(lights, 0);
 11454  0853  0020               	movlb	0	; select bank0
 11455  0854  01EB               	clrf	setDimmerLights_Adj@status
 11456  0855  086E               	movf	setDimmerLights_Main@lights,w
 11457  0856  3197  27B0         	fcall	_setDimmerLights_Adj
 11458  0858  0008               	return
 11459  0859                     __end_of_setDimmerLights_Main:	
 11460                           
 11461                           	psect	text68
 11462  17B0                     __ptext68:	
 11463 ;; *************** function _setDimmerLights_Adj *****************
 11464 ;; Defined at:
 11465 ;;		line 624 in file "../src/Dimmer_B1.c"
 11466 ;; Parameters:    Size  Location     Type
 11467 ;;  lights          1    wreg     unsigned char 
 11468 ;;  status          1   75[BANK0 ] unsigned char 
 11469 ;; Auto vars:     Size  Location     Type
 11470 ;;  lights          1   77[BANK0 ] unsigned char 
 11471 ;; Return value:  Size  Location     Type
 11472 ;;		None               void
 11473 ;; Registers used:
 11474 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11475 ;; Tracked objects:
 11476 ;;		On entry : 0/0
 11477 ;;		On exit  : 0/0
 11478 ;;		Unchanged: 0/0
 11479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11480 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11482 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11483 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11484 ;;Total ram usage:        3 bytes
 11485 ;; Hardware stack levels used:    1
 11486 ;; Hardware stack levels required when called:    8
 11487 ;; This function calls:
 11488 ;;		_setBuz
 11489 ;;		_setPercentValue
 11490 ;;		_setProductData
 11491 ;;		_setRF_DimmerLights
 11492 ;;		_setTxData
 11493 ;; This function is called by:
 11494 ;;		_setDimmerLights_Main
 11495 ;; This function uses a non-reentrant model
 11496 ;;
 11497                           
 11498                           
 11499                           ;psect for function _setDimmerLights_Adj
 11500  17B0                     _setDimmerLights_Adj:	
 11501                           
 11502                           ;incstack = 0
 11503                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11504                           ;setDimmerLights_Adj@lights stored from wreg
 11505  17B0  0020               	movlb	0	; select bank0
 11506  17B1  00ED               	movwf	setDimmerLights_Adj@lights
 11507                           
 11508                           ;Dimmer_B1.c: 626: if (status == 1) {
 11509  17B2  086B               	movf	setDimmerLights_Adj@status,w
 11510  17B3  3A01               	xorlw	1
 11511  17B4  1D03               	skipz
 11512  17B5  2FC8               	goto	l8850
 11513                           
 11514                           ;Dimmer_B1.c: 627: DimmerLights->AdjSw = 1;
 11515  17B6  0A75               	incf	_DimmerLights,w
 11516  17B7  0086               	movwf	6
 11517  17B8  3001               	movlw	1	; select bank2/3
 11518  17B9  0087               	movwf	7
 11519  17BA  1701               	bsf	1,6
 11520                           
 11521                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 11522  17BB  0A75               	incf	_DimmerLights,w
 11523  17BC  0086               	movwf	6
 11524  17BD  3001               	movlw	1	; select bank2/3
 11525  17BE  0087               	movwf	7
 11526  17BF  1681               	bsf	1,5
 11527                           
 11528                           ;Dimmer_B1.c: 629: setBuz(1, 100);
 11529  17C0  3064               	movlw	100
 11530  17C1  00A9               	movwf	setBuz@time
 11531  17C2  3000               	movlw	0
 11532  17C3  00AA               	movwf	setBuz@time+1
 11533  17C4  3001               	movlw	1
 11534  17C5  318A  2201         	fcall	_setBuz
 11535                           
 11536                           ;Dimmer_B1.c: 630: } else if (status == 0) {
 11537  17C7  0008               	return
 11538  17C8                     l8850:	
 11539  17C8  0020               	movlb	0	; select bank0
 11540  17C9  08EB               	movf	setDimmerLights_Adj@status,f
 11541  17CA  1D03               	skipz
 11542  17CB  0008               	return
 11543                           
 11544                           ;Dimmer_B1.c: 631: DimmerLights->AdjSw = 0;
 11545  17CC  0A75               	incf	_DimmerLights,w
 11546  17CD  0086               	movwf	6
 11547  17CE  3001               	movlw	1	; select bank2/3
 11548  17CF  0087               	movwf	7
 11549  17D0  1301               	bcf	1,6
 11550                           
 11551                           ;Dimmer_B1.c: 632: DimmerLights->Signal = 0;
 11552  17D1  0A75               	incf	_DimmerLights,w
 11553  17D2  0086               	movwf	6
 11554  17D3  3001               	movlw	1	; select bank2/3
 11555  17D4  0087               	movwf	7
 11556  17D5  1281               	bcf	1,5
 11557                           
 11558                           ;Dimmer_B1.c: 634: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11559  17D6  0875               	movf	_DimmerLights,w
 11560  17D7  3E04               	addlw	4
 11561  17D8  0086               	movwf	6
 11562  17D9  3001               	movlw	1	; select bank2/3
 11563  17DA  0087               	movwf	7
 11564  17DB  0801               	movf	1,w
 11565  17DC  00EC               	movwf	??_setDimmerLights_Adj
 11566  17DD  0875               	movf	_DimmerLights,w
 11567  17DE  3E06               	addlw	6
 11568  17DF  0086               	movwf	6
 11569  17E0  3001               	movlw	1	; select bank2/3
 11570  17E1  0087               	movwf	7
 11571  17E2  086C               	movf	??_setDimmerLights_Adj,w
 11572  17E3  0081               	movwf	1
 11573                           
 11574                           ;Dimmer_B1.c: 635: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 11575  17E4  0875               	movf	_DimmerLights,w
 11576  17E5  3E04               	addlw	4
 11577  17E6  0086               	movwf	6
 11578  17E7  3001               	movlw	1	; select bank2/3
 11579  17E8  0087               	movwf	7
 11580  17E9  0801               	movf	1,w
 11581  17EA  318C  2495  3197   	fcall	_setPercentValue
 11582  17ED  0020               	movlb	0	; select bank0
 11583  17EE  00EC               	movwf	??_setDimmerLights_Adj
 11584  17EF  086C               	movf	??_setDimmerLights_Adj,w
 11585  17F0  00E2               	movwf	setProductData@value
 11586  17F1  086D               	movf	setDimmerLights_Adj@lights,w
 11587  17F2  3E14               	addlw	20
 11588  17F3  319E  26C7  3197   	fcall	_setProductData
 11589                           
 11590                           ;Dimmer_B1.c: 649: setRF_DimmerLights(lights, 1);
 11591  17F6  0020               	movlb	0	; select bank0
 11592  17F7  01E6               	clrf	setRF_DimmerLights@on
 11593  17F8  0AE6               	incf	setRF_DimmerLights@on,f
 11594  17F9  086D               	movf	setDimmerLights_Adj@lights,w
 11595  17FA  318A  225A  3197   	fcall	_setRF_DimmerLights
 11596                           
 11597                           ;Dimmer_B1.c: 650: setTxData();
 11598  17FD  318E  26BC         	fcall	_setTxData
 11599  17FF  0008               	return
 11600  1800                     __end_of_setDimmerLights_Adj:	
 11601                           
 11602                           	psect	text69
 11603  0AB3                     __ptext69:	
 11604 ;; *************** function _setDimmerLights *****************
 11605 ;; Defined at:
 11606 ;;		line 587 in file "../src/Dimmer_B1.c"
 11607 ;; Parameters:    Size  Location     Type
 11608 ;;  lights          1    wreg     unsigned char 
 11609 ;;  status          1   75[BANK0 ] unsigned char 
 11610 ;; Auto vars:     Size  Location     Type
 11611 ;;  lights          1   77[BANK0 ] unsigned char 
 11612 ;; Return value:  Size  Location     Type
 11613 ;;		None               void
 11614 ;; Registers used:
 11615 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11616 ;; Tracked objects:
 11617 ;;		On entry : 0/0
 11618 ;;		On exit  : 0/0
 11619 ;;		Unchanged: 0/0
 11620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11621 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11623 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11625 ;;Total ram usage:        3 bytes
 11626 ;; Hardware stack levels used:    1
 11627 ;; Hardware stack levels required when called:    8
 11628 ;; This function calls:
 11629 ;;		_setDimmerLights_Line
 11630 ;;		_setLED
 11631 ;;		_setPercentValue
 11632 ;;		_setProductData
 11633 ;;		_setRF_DimmerLights
 11634 ;;		_setTxData
 11635 ;; This function is called by:
 11636 ;;		_setDimmerLights_Main
 11637 ;; This function uses a non-reentrant model
 11638 ;;
 11639                           
 11640                           
 11641                           ;psect for function _setDimmerLights
 11642  0AB3                     _setDimmerLights:	
 11643                           
 11644                           ;incstack = 0
 11645                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11646                           ;setDimmerLights@lights stored from wreg
 11647  0AB3  0020               	movlb	0	; select bank0
 11648  0AB4  00ED               	movwf	setDimmerLights@lights
 11649                           
 11650                           ;Dimmer_B1.c: 595: if (status == 1) {
 11651  0AB5  086B               	movf	setDimmerLights@status,w
 11652  0AB6  3A01               	xorlw	1
 11653  0AB7  1D03               	skipz
 11654  0AB8  2AE6               	goto	l8832
 11655                           
 11656                           ;Dimmer_B1.c: 596: DimmerLights->StatusFlag = 1;
 11657  0AB9  0A75               	incf	_DimmerLights,w
 11658  0ABA  0086               	movwf	6
 11659  0ABB  3001               	movlw	1	; select bank2/3
 11660  0ABC  0087               	movwf	7
 11661  0ABD  1501               	bsf	1,2
 11662                           
 11663                           ;Dimmer_B1.c: 597: DimmerLights->Loop = 1;
 11664  0ABE  0875               	movf	_DimmerLights,w
 11665  0ABF  3E0A               	addlw	10
 11666  0AC0  0086               	movwf	6
 11667  0AC1  3001               	movlw	1	; select bank2/3
 11668  0AC2  0087               	movwf	7
 11669  0AC3  1781               	bsf	1,7
 11670                           
 11671                           ;Dimmer_B1.c: 598: setDimmerLights_Line(lights);
 11672  0AC4  086D               	movf	setDimmerLights@lights,w
 11673  0AC5  3190  20D9  318A   	fcall	_setDimmerLights_Line
 11674                           
 11675                           ;Dimmer_B1.c: 600: setLED(lights, 0);
 11676  0AC8  0020               	movlb	0	; select bank0
 11677  0AC9  01A2               	clrf	setLED@command
 11678  0ACA  086D               	movf	setDimmerLights@lights,w
 11679  0ACB  3188  20AA  318A   	fcall	_setLED
 11680                           
 11681                           ;Dimmer_B1.c: 605: DimmerLights->DimmingValue = ((char)(75*0.8));
 11682  0ACE  303C               	movlw	60
 11683  0ACF  0020               	movlb	0	; select bank0
 11684  0AD0  00EC               	movwf	??_setDimmerLights
 11685  0AD1  0875               	movf	_DimmerLights,w
 11686  0AD2  3E04               	addlw	4
 11687  0AD3  0086               	movwf	6
 11688  0AD4  3001               	movlw	1	; select bank2/3
 11689  0AD5  0087               	movwf	7
 11690  0AD6  086C               	movf	??_setDimmerLights,w
 11691  0AD7  0081               	movwf	1
 11692                           
 11693                           ;Dimmer_B1.c: 606: setProductData((20 + lights), setPercentValue(((char)(75*0.8))));
 11694  0AD8  303C               	movlw	60
 11695  0AD9  318C  2495  318A   	fcall	_setPercentValue
 11696  0ADC  0020               	movlb	0	; select bank0
 11697  0ADD  00EC               	movwf	??_setDimmerLights
 11698  0ADE  086C               	movf	??_setDimmerLights,w
 11699  0ADF  00E2               	movwf	setProductData@value
 11700  0AE0  086D               	movf	setDimmerLights@lights,w
 11701  0AE1  3E14               	addlw	20
 11702  0AE2  319E  26C7  318A   	fcall	_setProductData
 11703                           
 11704                           ;Dimmer_B1.c: 609: } else if (status == 0) {
 11705  0AE5  2B00               	goto	l8840
 11706  0AE6                     l8832:	
 11707  0AE6  0020               	movlb	0	; select bank0
 11708  0AE7  08EB               	movf	setDimmerLights@status,f
 11709  0AE8  1D03               	skipz
 11710  0AE9  2B00               	goto	l8840
 11711                           
 11712                           ;Dimmer_B1.c: 610: DimmerLights->StatusFlag = 0;
 11713  0AEA  0A75               	incf	_DimmerLights,w
 11714  0AEB  0086               	movwf	6
 11715  0AEC  3001               	movlw	1	; select bank2/3
 11716  0AED  0087               	movwf	7
 11717  0AEE  1101               	bcf	1,2
 11718                           
 11719                           ;Dimmer_B1.c: 611: DimmerLights->Loop = 0;
 11720  0AEF  0875               	movf	_DimmerLights,w
 11721  0AF0  3E0A               	addlw	10
 11722  0AF1  0086               	movwf	6
 11723  0AF2  3001               	movlw	1	; select bank2/3
 11724  0AF3  0087               	movwf	7
 11725  0AF4  1381               	bcf	1,7
 11726                           
 11727                           ;Dimmer_B1.c: 612: setDimmerLights_Line(0);
 11728  0AF5  3000               	movlw	0
 11729  0AF6  3190  20D9  318A   	fcall	_setDimmerLights_Line
 11730                           
 11731                           ;Dimmer_B1.c: 614: setLED(lights, 1);
 11732  0AF9  0020               	movlb	0	; select bank0
 11733  0AFA  01A2               	clrf	setLED@command
 11734  0AFB  0AA2               	incf	setLED@command,f
 11735  0AFC  086D               	movf	setDimmerLights@lights,w
 11736  0AFD  3188  20AA  318A   	fcall	_setLED
 11737  0B00                     l8840:	
 11738                           
 11739                           ;Dimmer_B1.c: 616: }
 11740                           ;Dimmer_B1.c: 618: setRF_DimmerLights(lights, status);
 11741  0B00  0020               	movlb	0	; select bank0
 11742  0B01  086B               	movf	setDimmerLights@status,w
 11743  0B02  00EC               	movwf	??_setDimmerLights
 11744  0B03  086C               	movf	??_setDimmerLights,w
 11745  0B04  00E6               	movwf	setRF_DimmerLights@on
 11746  0B05  086D               	movf	setDimmerLights@lights,w
 11747  0B06  318A  225A  318A   	fcall	_setRF_DimmerLights
 11748                           
 11749                           ;Dimmer_B1.c: 619: setTxData();
 11750  0B09  318E  26BC         	fcall	_setTxData
 11751  0B0B  0008               	return
 11752  0B0C                     __end_of_setDimmerLights:	
 11753                           
 11754                           	psect	text70
 11755  0EBC                     __ptext70:	
 11756 ;; *************** function _setTxData *****************
 11757 ;; Defined at:
 11758 ;;		line 207 in file "../src/RF_Control_B1.c"
 11759 ;; Parameters:    Size  Location     Type
 11760 ;;		None
 11761 ;; Auto vars:     Size  Location     Type
 11762 ;;  i               1    0        unsigned char 
 11763 ;; Return value:  Size  Location     Type
 11764 ;;		None               void
 11765 ;; Registers used:
 11766 ;;		wreg, fsr1l, fsr1h
 11767 ;; Tracked objects:
 11768 ;;		On entry : 0/0
 11769 ;;		On exit  : 0/0
 11770 ;;		Unchanged: 0/0
 11771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;Total ram usage:        1 bytes
 11777 ;; Hardware stack levels used:    1
 11778 ;; Hardware stack levels required when called:    5
 11779 ;; This function calls:
 11780 ;;		Nothing
 11781 ;; This function is called by:
 11782 ;;		_setDimmerLights
 11783 ;;		_setDimmerLights_Adj
 11784 ;;		_getRxData
 11785 ;;		_setControl_Lights_Table
 11786 ;;		_setRFSW_Control
 11787 ;;		_setRFSW_AdjControl
 11788 ;; This function uses a non-reentrant model
 11789 ;;
 11790                           
 11791                           
 11792                           ;psect for function _setTxData
 11793  0EBC                     _setTxData:	
 11794                           
 11795                           ;RF_Control_B1.c: 208: char i;
 11796                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
 11797                           
 11798                           ;incstack = 0
 11799                           ; Regs used in _setTxData: [wregfsr1]
 11800  0EBC  0021               	movlb	1	; select bank1
 11801  0EBD  1C3A               	btfss	_RF1^(0+128),0
 11802  0EBE  0008               	return
 11803                           
 11804                           ;RF_Control_B1.c: 211: if (RF1.TransceiveGO == 0) {
 11805  0EBF  193A               	btfsc	_RF1^(0+128),2
 11806  0EC0  0008               	return
 11807                           
 11808                           ;RF_Control_B1.c: 212: RF1.TransceiveGO = 1;
 11809  0EC1  153A               	bsf	_RF1^(0+128),2
 11810                           
 11811                           ;RF_Control_B1.c: 213: RF1.RunTime = 20;
 11812  0EC2  3014               	movlw	20
 11813  0EC3  00C1               	movwf	(_RF1^(0+128)+7)
 11814  0EC4  3000               	movlw	0
 11815  0EC5  00C2               	movwf	(_RF1^(0+128)+8)
 11816                           
 11817                           ;RF_Control_B1.c: 225: RF_Data[0] = 0x63;
 11818  0EC6  3063               	movlw	99
 11819  0EC7  0020               	movlb	0	; select bank0
 11820  0EC8  00A0               	movwf	??_setTxData
 11821  0EC9  0820               	movf	??_setTxData,w
 11822  0ECA  0022               	movlb	2	; select bank2
 11823  0ECB  00A0               	movwf	_RF_Data^(0+256)
 11824                           
 11825                           ;RF_Control_B1.c: 226: RF_Data[1] = 0x02;
 11826  0ECC  3002               	movlw	2
 11827  0ECD  0020               	movlb	0	; select bank0
 11828  0ECE  00A0               	movwf	??_setTxData
 11829  0ECF  0820               	movf	??_setTxData,w
 11830  0ED0  0022               	movlb	2	; select bank2
 11831  0ED1  00A1               	movwf	(_RF_Data^(0+256)+1)
 11832                           
 11833                           ;RF_Control_B1.c: 228: RF_Data[2] = product->Data[2];
 11834  0ED2  0879               	movf	_product,w
 11835  0ED3  0086               	movwf	6
 11836  0ED4  3002               	movlw	2	; select bank4/5
 11837  0ED5  0087               	movwf	7
 11838  0ED6  3002               	movlw	2	; select bank4/5
 11839  0ED7  3F42               	moviw [2]fsr1
 11840  0ED8  00A2               	movwf	(_RF_Data^(0+256)+2)
 11841                           
 11842                           ;RF_Control_B1.c: 229: RF_Data[3] = product->Data[3];
 11843  0ED9  0879               	movf	_product,w
 11844  0EDA  0086               	movwf	6
 11845  0EDB  3002               	movlw	2	; select bank4/5
 11846  0EDC  0087               	movwf	7
 11847  0EDD  3002               	movlw	2	; select bank4/5
 11848  0EDE  3F43               	moviw [3]fsr1
 11849  0EDF  00A3               	movwf	(_RF_Data^(0+256)+3)
 11850                           
 11851                           ;RF_Control_B1.c: 230: RF_Data[4] = product->Data[4];
 11852  0EE0  0879               	movf	_product,w
 11853  0EE1  0086               	movwf	6
 11854  0EE2  3002               	movlw	2	; select bank4/5
 11855  0EE3  0087               	movwf	7
 11856  0EE4  3002               	movlw	2	; select bank4/5
 11857  0EE5  3F44               	moviw [4]fsr1
 11858  0EE6  00A4               	movwf	(_RF_Data^(0+256)+4)
 11859                           
 11860                           ;RF_Control_B1.c: 231: RF_Data[5] = product->Data[5];
 11861  0EE7  0879               	movf	_product,w
 11862  0EE8  0086               	movwf	6
 11863  0EE9  3002               	movlw	2	; select bank4/5
 11864  0EEA  0087               	movwf	7
 11865  0EEB  3002               	movlw	2	; select bank4/5
 11866  0EEC  3F45               	moviw [5]fsr1
 11867  0EED  00A5               	movwf	(_RF_Data^(0+256)+5)
 11868                           
 11869                           ;RF_Control_B1.c: 232: RF_Data[6] = product->Data[6];
 11870  0EEE  0879               	movf	_product,w
 11871  0EEF  0086               	movwf	6
 11872  0EF0  3002               	movlw	2	; select bank4/5
 11873  0EF1  0087               	movwf	7
 11874  0EF2  3002               	movlw	2	; select bank4/5
 11875  0EF3  3F46               	moviw [6]fsr1
 11876  0EF4  00A6               	movwf	(_RF_Data^(0+256)+6)
 11877                           
 11878                           ;RF_Control_B1.c: 233: RF_Data[7] = product->Data[7];
 11879  0EF5  0879               	movf	_product,w
 11880  0EF6  0086               	movwf	6
 11881  0EF7  3002               	movlw	2	; select bank4/5
 11882  0EF8  0087               	movwf	7
 11883  0EF9  3002               	movlw	2	; select bank4/5
 11884  0EFA  3F47               	moviw [7]fsr1
 11885  0EFB  00A7               	movwf	(_RF_Data^(0+256)+7)
 11886                           
 11887                           ;RF_Control_B1.c: 234: RF_Data[8] = product->Data[8];
 11888  0EFC  0879               	movf	_product,w
 11889  0EFD  0086               	movwf	6
 11890  0EFE  3002               	movlw	2	; select bank4/5
 11891  0EFF  0087               	movwf	7
 11892  0F00  3002               	movlw	2	; select bank4/5
 11893  0F01  3F48               	moviw [8]fsr1
 11894  0F02  00A8               	movwf	(_RF_Data^(0+256)+8)
 11895                           
 11896                           ;RF_Control_B1.c: 235: RF_Data[9] = product->Data[9];
 11897  0F03  0879               	movf	_product,w
 11898  0F04  0086               	movwf	6
 11899  0F05  3002               	movlw	2	; select bank4/5
 11900  0F06  0087               	movwf	7
 11901  0F07  3002               	movlw	2	; select bank4/5
 11902  0F08  3F49               	moviw [9]fsr1
 11903  0F09  00A9               	movwf	(_RF_Data^(0+256)+9)
 11904                           
 11905                           ;RF_Control_B1.c: 236: RF_Data[10] = product->Data[10];
 11906  0F0A  0879               	movf	_product,w
 11907  0F0B  0086               	movwf	6
 11908  0F0C  3002               	movlw	2	; select bank4/5
 11909  0F0D  0087               	movwf	7
 11910  0F0E  3002               	movlw	2	; select bank4/5
 11911  0F0F  3F4A               	moviw [10]fsr1
 11912  0F10  00AA               	movwf	(_RF_Data^(0+256)+10)
 11913                           
 11914                           ;RF_Control_B1.c: 237: RF_Data[11] = product->Data[11];
 11915  0F11  0879               	movf	_product,w
 11916  0F12  0086               	movwf	6
 11917  0F13  3002               	movlw	2	; select bank4/5
 11918  0F14  0087               	movwf	7
 11919  0F15  3002               	movlw	2	; select bank4/5
 11920  0F16  3F4B               	moviw [11]fsr1
 11921  0F17  00AB               	movwf	(_RF_Data^(0+256)+11)
 11922                           
 11923                           ;RF_Control_B1.c: 238: RF_Data[12] = product->Data[12];
 11924  0F18  0879               	movf	_product,w
 11925  0F19  0086               	movwf	6
 11926  0F1A  3002               	movlw	2	; select bank4/5
 11927  0F1B  0087               	movwf	7
 11928  0F1C  3002               	movlw	2	; select bank4/5
 11929  0F1D  3F4C               	moviw [12]fsr1
 11930  0F1E  00AC               	movwf	(_RF_Data^(0+256)+12)
 11931                           
 11932                           ;RF_Control_B1.c: 239: RF_Data[13] = product->Data[13];
 11933  0F1F  0879               	movf	_product,w
 11934  0F20  0086               	movwf	6
 11935  0F21  3002               	movlw	2	; select bank4/5
 11936  0F22  0087               	movwf	7
 11937  0F23  3002               	movlw	2	; select bank4/5
 11938  0F24  3F4D               	moviw [13]fsr1
 11939  0F25  00AD               	movwf	(_RF_Data^(0+256)+13)
 11940                           
 11941                           ;RF_Control_B1.c: 240: RF_Data[14] = product->Data[14];
 11942  0F26  0879               	movf	_product,w
 11943  0F27  0086               	movwf	6
 11944  0F28  3002               	movlw	2	; select bank4/5
 11945  0F29  0087               	movwf	7
 11946  0F2A  3002               	movlw	2	; select bank4/5
 11947  0F2B  3F4E               	moviw [14]fsr1
 11948  0F2C  00AE               	movwf	(_RF_Data^(0+256)+14)
 11949                           
 11950                           ;RF_Control_B1.c: 241: RF_Data[15] = product->Data[15];
 11951  0F2D  0879               	movf	_product,w
 11952  0F2E  0086               	movwf	6
 11953  0F2F  3002               	movlw	2	; select bank4/5
 11954  0F30  0087               	movwf	7
 11955  0F31  3002               	movlw	2	; select bank4/5
 11956  0F32  3F4F               	moviw [15]fsr1
 11957  0F33  00AF               	movwf	(_RF_Data^(0+256)+15)
 11958                           
 11959                           ;RF_Control_B1.c: 242: RF_Data[16] = product->Data[16];
 11960  0F34  0879               	movf	_product,w
 11961  0F35  0086               	movwf	6
 11962  0F36  3002               	movlw	2	; select bank4/5
 11963  0F37  0087               	movwf	7
 11964  0F38  3002               	movlw	2	; select bank4/5
 11965  0F39  3F50               	moviw [16]fsr1
 11966  0F3A  00B0               	movwf	(_RF_Data^(0+256)+16)
 11967                           
 11968                           ;RF_Control_B1.c: 243: RF_Data[17] = product->Data[17];
 11969  0F3B  0879               	movf	_product,w
 11970  0F3C  0086               	movwf	6
 11971  0F3D  3002               	movlw	2	; select bank4/5
 11972  0F3E  0087               	movwf	7
 11973  0F3F  3002               	movlw	2	; select bank4/5
 11974  0F40  3F51               	moviw [17]fsr1
 11975  0F41  00B1               	movwf	(_RF_Data^(0+256)+17)
 11976                           
 11977                           ;RF_Control_B1.c: 244: RF_Data[18] = product->Data[18];
 11978  0F42  0879               	movf	_product,w
 11979  0F43  0086               	movwf	6
 11980  0F44  3002               	movlw	2	; select bank4/5
 11981  0F45  0087               	movwf	7
 11982  0F46  3002               	movlw	2	; select bank4/5
 11983  0F47  3F52               	moviw [18]fsr1
 11984  0F48  00B2               	movwf	(_RF_Data^(0+256)+18)
 11985                           
 11986                           ;RF_Control_B1.c: 245: RF_Data[19] = product->Data[19];
 11987  0F49  0879               	movf	_product,w
 11988  0F4A  0086               	movwf	6
 11989  0F4B  3002               	movlw	2	; select bank4/5
 11990  0F4C  0087               	movwf	7
 11991  0F4D  3002               	movlw	2	; select bank4/5
 11992  0F4E  3F53               	moviw [19]fsr1
 11993  0F4F  00B3               	movwf	(_RF_Data^(0+256)+19)
 11994                           
 11995                           ;RF_Control_B1.c: 246: RF_Data[20] = 210;
 11996  0F50  30D2               	movlw	210
 11997  0F51  0020               	movlb	0	; select bank0
 11998  0F52  00A0               	movwf	??_setTxData
 11999  0F53  0820               	movf	??_setTxData,w
 12000  0F54  0022               	movlb	2	; select bank2
 12001  0F55  00B4               	movwf	(_RF_Data^(0+256)+20)
 12002  0F56  0008               	return
 12003  0F57                     __end_of_setTxData:	
 12004                           
 12005                           	psect	text71
 12006  0A5A                     __ptext71:	
 12007 ;; *************** function _setRF_DimmerLights *****************
 12008 ;; Defined at:
 12009 ;;		line 484 in file "../src/RF_Control_B1.c"
 12010 ;; Parameters:    Size  Location     Type
 12011 ;;  lights          1    wreg     unsigned char 
 12012 ;;  on              1   70[BANK0 ] unsigned char 
 12013 ;; Auto vars:     Size  Location     Type
 12014 ;;  lights          1   74[BANK0 ] unsigned char 
 12015 ;;  status          1   73[BANK0 ] unsigned char 
 12016 ;; Return value:  Size  Location     Type
 12017 ;;		None               void
 12018 ;; Registers used:
 12019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12020 ;; Tracked objects:
 12021 ;;		On entry : 0/0
 12022 ;;		On exit  : 0/0
 12023 ;;		Unchanged: 0/0
 12024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12025 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12027 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12028 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12029 ;;Total ram usage:        5 bytes
 12030 ;; Hardware stack levels used:    1
 12031 ;; Hardware stack levels required when called:    6
 12032 ;; This function calls:
 12033 ;;		_setProductData
 12034 ;; This function is called by:
 12035 ;;		_setDimmerLights
 12036 ;;		_setDimmerLights_Adj
 12037 ;;		_setRFSW_Control
 12038 ;; This function uses a non-reentrant model
 12039 ;;
 12040                           
 12041                           
 12042                           ;psect for function _setRF_DimmerLights
 12043  0A5A                     _setRF_DimmerLights:	
 12044                           
 12045                           ;incstack = 0
 12046                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12047                           ;setRF_DimmerLights@lights stored from wreg
 12048  0A5A  0020               	movlb	0	; select bank0
 12049  0A5B  00EA               	movwf	setRF_DimmerLights@lights
 12050                           
 12051                           ;RF_Control_B1.c: 485: char status = 1;
 12052  0A5C  01E9               	clrf	setRF_DimmerLights@status
 12053  0A5D  0AE9               	incf	setRF_DimmerLights@status,f
 12054                           
 12055                           ;RF_Control_B1.c: 486: status <<= (lights - 1);
 12056  0A5E  086A               	movf	setRF_DimmerLights@lights,w
 12057  0A5F  3EFF               	addlw	-1
 12058  0A60  0A89               	incf	9,f
 12059  0A61  2A64               	goto	u8660
 12060  0A62                     u8665:	
 12061  0A62  1003               	clrc
 12062  0A63  0DE9               	rlf	setRF_DimmerLights@status,f
 12063  0A64                     u8660:	
 12064  0A64  3EFF               	addlw	-1
 12065  0A65  1D03               	skipz
 12066  0A66  2A62               	goto	u8665
 12067                           
 12068                           ;RF_Control_B1.c: 487: setProductData(11, lights);
 12069  0A67  086A               	movf	setRF_DimmerLights@lights,w
 12070  0A68  00E7               	movwf	??_setRF_DimmerLights
 12071  0A69  0867               	movf	??_setRF_DimmerLights,w
 12072  0A6A  00E2               	movwf	setProductData@value
 12073  0A6B  300B               	movlw	11
 12074  0A6C  319E  26C7  318A   	fcall	_setProductData
 12075                           
 12076                           ;RF_Control_B1.c: 495: setProductData(9, product->Data[20 + lights]);
 12077  0A6F  0020               	movlb	0	; select bank0
 12078  0A70  086A               	movf	setRF_DimmerLights@lights,w
 12079  0A71  3E14               	addlw	20
 12080  0A72  0779               	addwf	_product,w
 12081  0A73  00E7               	movwf	??_setRF_DimmerLights
 12082  0A74  0867               	movf	??_setRF_DimmerLights,w
 12083  0A75  0086               	movwf	6
 12084  0A76  3002               	movlw	2	; select bank4/5
 12085  0A77  0087               	movwf	7
 12086  0A78  0801               	movf	1,w
 12087  0A79  00E8               	movwf	??_setRF_DimmerLights+1
 12088  0A7A  0868               	movf	??_setRF_DimmerLights+1,w
 12089  0A7B  00E2               	movwf	setProductData@value
 12090  0A7C  3009               	movlw	9
 12091  0A7D  319E  26C7  318A   	fcall	_setProductData
 12092                           
 12093                           ;RF_Control_B1.c: 496: setProductData(17, product->Data[26 + lights]);
 12094  0A80  0020               	movlb	0	; select bank0
 12095  0A81  086A               	movf	setRF_DimmerLights@lights,w
 12096  0A82  3E1A               	addlw	26
 12097  0A83  0779               	addwf	_product,w
 12098  0A84  00E7               	movwf	??_setRF_DimmerLights
 12099  0A85  0867               	movf	??_setRF_DimmerLights,w
 12100  0A86  0086               	movwf	6
 12101  0A87  3002               	movlw	2	; select bank4/5
 12102  0A88  0087               	movwf	7
 12103  0A89  0801               	movf	1,w
 12104  0A8A  00E8               	movwf	??_setRF_DimmerLights+1
 12105  0A8B  0868               	movf	??_setRF_DimmerLights+1,w
 12106  0A8C  00E2               	movwf	setProductData@value
 12107  0A8D  3011               	movlw	17
 12108  0A8E  319E  26C7  318A   	fcall	_setProductData
 12109                           
 12110                           ;RF_Control_B1.c: 497: if (on == 1) {
 12111  0A91  0020               	movlb	0	; select bank0
 12112  0A92  0866               	movf	setRF_DimmerLights@on,w
 12113  0A93  3A01               	xorlw	1
 12114  0A94  1D03               	skipz
 12115  0A95  2AA4               	goto	l8328
 12116                           
 12117                           ;RF_Control_B1.c: 498: setProductData(15, (product->Data[15] | status));
 12118  0A96  0879               	movf	_product,w
 12119  0A97  3E0F               	addlw	15
 12120  0A98  0086               	movwf	6
 12121  0A99  3002               	movlw	2	; select bank4/5
 12122  0A9A  0087               	movwf	7
 12123  0A9B  0801               	movf	1,w
 12124  0A9C  0469               	iorwf	setRF_DimmerLights@status,w
 12125  0A9D  00E7               	movwf	??_setRF_DimmerLights
 12126  0A9E  0867               	movf	??_setRF_DimmerLights,w
 12127  0A9F  00E2               	movwf	setProductData@value
 12128  0AA0  300F               	movlw	15
 12129  0AA1  319E  26C7         	fcall	_setProductData
 12130                           
 12131                           ;RF_Control_B1.c: 499: } else {
 12132  0AA3  0008               	return
 12133  0AA4                     l8328:	
 12134                           
 12135                           ;RF_Control_B1.c: 500: setProductData(15, (product->Data[15]&(~status)));
 12136  0AA4  0879               	movf	_product,w
 12137  0AA5  3E0F               	addlw	15
 12138  0AA6  0086               	movwf	6
 12139  0AA7  3002               	movlw	2	; select bank4/5
 12140  0AA8  0087               	movwf	7
 12141  0AA9  0020               	movlb	0	; select bank0
 12142  0AAA  0969               	comf	setRF_DimmerLights@status,w
 12143  0AAB  0501               	andwf	1,w
 12144  0AAC  00E7               	movwf	??_setRF_DimmerLights
 12145  0AAD  0867               	movf	??_setRF_DimmerLights,w
 12146  0AAE  00E2               	movwf	setProductData@value
 12147  0AAF  300F               	movlw	15
 12148  0AB0  319E  26C7         	fcall	_setProductData
 12149  0AB2  0008               	return
 12150  0AB3                     __end_of_setRF_DimmerLights:	
 12151                           
 12152                           	psect	text72
 12153  0C95                     __ptext72:	
 12154 ;; *************** function _setPercentValue *****************
 12155 ;; Defined at:
 12156 ;;		line 968 in file "../src/Dimmer_B1.c"
 12157 ;; Parameters:    Size  Location     Type
 12158 ;;  value           1    wreg     unsigned char 
 12159 ;; Auto vars:     Size  Location     Type
 12160 ;;  value           1   62[BANK0 ] unsigned char 
 12161 ;;  i               3   63[BANK0 ] float 
 12162 ;; Return value:  Size  Location     Type
 12163 ;;                  1    wreg      unsigned char 
 12164 ;; Registers used:
 12165 ;;		wreg, status,2, status,0, pclath, cstack
 12166 ;; Tracked objects:
 12167 ;;		On entry : 0/0
 12168 ;;		On exit  : 0/0
 12169 ;;		Unchanged: 0/0
 12170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12172 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12173 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;Total ram usage:        6 bytes
 12176 ;; Hardware stack levels used:    1
 12177 ;; Hardware stack levels required when called:    7
 12178 ;; This function calls:
 12179 ;;		___awtoft
 12180 ;;		___ftadd
 12181 ;;		___ftdiv
 12182 ;;		___ftneg
 12183 ;;		___fttol
 12184 ;; This function is called by:
 12185 ;;		_setDimmerLights
 12186 ;;		_setDimmerLights_Adj
 12187 ;;		_Flash_Memory_Initialization
 12188 ;; This function uses a non-reentrant model
 12189 ;;
 12190                           
 12191                           
 12192                           ;psect for function _setPercentValue
 12193  0C95                     _setPercentValue:	
 12194                           
 12195                           ;incstack = 0
 12196                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12197                           ;setPercentValue@value stored from wreg
 12198  0C95  0020               	movlb	0	; select bank0
 12199  0C96  00DE               	movwf	setPercentValue@value
 12200                           
 12201                           ;Dimmer_B1.c: 976: float i = ((char)(75*0.8)) - ((char)(15*0.8));
 12202  0C97  3000               	movlw	0
 12203  0C98  00DF               	movwf	setPercentValue@i
 12204  0C99  3040               	movlw	64
 12205  0C9A  00E0               	movwf	setPercentValue@i+1
 12206  0C9B  3042               	movlw	66
 12207  0C9C  00E1               	movwf	setPercentValue@i+2
 12208                           
 12209                           ;Dimmer_B1.c: 977: i /= 100;
 12210  0C9D  3000               	movlw	0
 12211  0C9E  00AE               	movwf	___ftdiv@f2
 12212  0C9F  30C8               	movlw	200
 12213  0CA0  00AF               	movwf	___ftdiv@f2+1
 12214  0CA1  3042               	movlw	66
 12215  0CA2  00B0               	movwf	___ftdiv@f2+2
 12216  0CA3  085F               	movf	setPercentValue@i,w
 12217  0CA4  00B1               	movwf	___ftdiv@f1
 12218  0CA5  0860               	movf	setPercentValue@i+1,w
 12219  0CA6  00B2               	movwf	___ftdiv@f1+1
 12220  0CA7  0861               	movf	setPercentValue@i+2,w
 12221  0CA8  00B3               	movwf	___ftdiv@f1+2
 12222  0CA9  318F  2757  318C   	fcall	___ftdiv
 12223  0CAC  0020               	movlb	0	; select bank0
 12224  0CAD  082E               	movf	?___ftdiv,w
 12225  0CAE  00DF               	movwf	setPercentValue@i
 12226  0CAF  082F               	movf	?___ftdiv+1,w
 12227  0CB0  00E0               	movwf	setPercentValue@i+1
 12228  0CB1  0830               	movf	?___ftdiv+2,w
 12229  0CB2  00E1               	movwf	setPercentValue@i+2
 12230                           
 12231                           ;Dimmer_B1.c: 979: return (char) (100 - ((((char)(75*0.8)) - value) / i));
 12232  0CB3  085E               	movf	setPercentValue@value,w
 12233  0CB4  00DC               	movwf	??_setPercentValue
 12234  0CB5  01DD               	clrf	??_setPercentValue+1
 12235  0CB6  09DC               	comf	??_setPercentValue,f
 12236  0CB7  09DD               	comf	??_setPercentValue+1,f
 12237  0CB8  0ADC               	incf	??_setPercentValue,f
 12238  0CB9  1903               	skipnz
 12239  0CBA  0ADD               	incf	??_setPercentValue+1,f
 12240  0CBB  085C               	movf	??_setPercentValue,w
 12241  0CBC  3E3C               	addlw	60
 12242  0CBD  00A8               	movwf	___awtoft@c
 12243  0CBE  3000               	movlw	0
 12244  0CBF  3D5D               	addwfc	??_setPercentValue+1,w
 12245  0CC0  00A9               	movwf	___awtoft@c+1
 12246  0CC1  3192  2257  318C   	fcall	___awtoft
 12247  0CC4  0020               	movlb	0	; select bank0
 12248  0CC5  0828               	movf	?___awtoft,w
 12249  0CC6  00B1               	movwf	___ftdiv@f1
 12250  0CC7  0829               	movf	?___awtoft+1,w
 12251  0CC8  00B2               	movwf	___ftdiv@f1+1
 12252  0CC9  082A               	movf	?___awtoft+2,w
 12253  0CCA  00B3               	movwf	___ftdiv@f1+2
 12254  0CCB  085F               	movf	setPercentValue@i,w
 12255  0CCC  00AE               	movwf	___ftdiv@f2
 12256  0CCD  0860               	movf	setPercentValue@i+1,w
 12257  0CCE  00AF               	movwf	___ftdiv@f2+1
 12258  0CCF  0861               	movf	setPercentValue@i+2,w
 12259  0CD0  00B0               	movwf	___ftdiv@f2+2
 12260  0CD1  318F  2757  318C   	fcall	___ftdiv
 12261  0CD4  0020               	movlb	0	; select bank0
 12262  0CD5  082E               	movf	?___ftdiv,w
 12263  0CD6  00BE               	movwf	___ftneg@f1
 12264  0CD7  082F               	movf	?___ftdiv+1,w
 12265  0CD8  00BF               	movwf	___ftneg@f1+1
 12266  0CD9  0830               	movf	?___ftdiv+2,w
 12267  0CDA  00C0               	movwf	___ftneg@f1+2
 12268  0CDB  319E  2649  318C   	fcall	___ftneg
 12269  0CDE  0020               	movlb	0	; select bank0
 12270  0CDF  083E               	movf	?___ftneg,w
 12271  0CE0  00C4               	movwf	___ftadd@f2
 12272  0CE1  083F               	movf	?___ftneg+1,w
 12273  0CE2  00C5               	movwf	___ftadd@f2+1
 12274  0CE3  0840               	movf	?___ftneg+2,w
 12275  0CE4  00C6               	movwf	___ftadd@f2+2
 12276  0CE5  3000               	movlw	0
 12277  0CE6  00C1               	movwf	___ftadd@f1
 12278  0CE7  30C8               	movlw	200
 12279  0CE8  00C2               	movwf	___ftadd@f1+1
 12280  0CE9  3042               	movlw	66
 12281  0CEA  00C3               	movwf	___ftadd@f1+2
 12282  0CEB  3182  22B4  318C   	fcall	___ftadd
 12283  0CEE  0020               	movlb	0	; select bank0
 12284  0CEF  0841               	movf	?___ftadd,w
 12285  0CF0  00CE               	movwf	___fttol@f1
 12286  0CF1  0842               	movf	?___ftadd+1,w
 12287  0CF2  00CF               	movwf	___fttol@f1+1
 12288  0CF3  0843               	movf	?___ftadd+2,w
 12289  0CF4  00D0               	movwf	___fttol@f1+2
 12290  0CF5  318E  2635         	fcall	___fttol
 12291  0CF7  0020               	movlb	0	; select bank0
 12292  0CF8  084E               	movf	?___fttol,w
 12293  0CF9  0008               	return
 12294  0CFA                     __end_of_setPercentValue:	
 12295                           
 12296                           	psect	text73
 12297  0E35                     __ptext73:	
 12298 ;; *************** function ___fttol *****************
 12299 ;; Defined at:
 12300 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 12301 ;; Parameters:    Size  Location     Type
 12302 ;;  f1              3   46[BANK0 ] float 
 12303 ;; Auto vars:     Size  Location     Type
 12304 ;;  lval            4   55[BANK0 ] unsigned long 
 12305 ;;  exp1            1   59[BANK0 ] unsigned char 
 12306 ;;  sign1           1   54[BANK0 ] unsigned char 
 12307 ;; Return value:  Size  Location     Type
 12308 ;;                  4   46[BANK0 ] long 
 12309 ;; Registers used:
 12310 ;;		wreg, status,2, status,0
 12311 ;; Tracked objects:
 12312 ;;		On entry : 0/0
 12313 ;;		On exit  : 0/0
 12314 ;;		Unchanged: 0/0
 12315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12316 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12317 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12318 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12319 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;Total ram usage:       14 bytes
 12321 ;; Hardware stack levels used:    1
 12322 ;; Hardware stack levels required when called:    5
 12323 ;; This function calls:
 12324 ;;		Nothing
 12325 ;; This function is called by:
 12326 ;;		_getPercentValue
 12327 ;;		_setPercentValue
 12328 ;; This function uses a non-reentrant model
 12329 ;;
 12330                           
 12331                           
 12332                           ;psect for function ___fttol
 12333  0E35                     ___fttol:	
 12334                           
 12335                           ;incstack = 0
 12336                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 12337  0E35  0020               	movlb	0	; select bank0
 12338  0E36  084E               	movf	___fttol@f1,w
 12339  0E37  00D2               	movwf	??___fttol
 12340  0E38  084F               	movf	___fttol@f1+1,w
 12341  0E39  00D3               	movwf	??___fttol+1
 12342  0E3A  0850               	movf	___fttol@f1+2,w
 12343  0E3B  00D4               	movwf	??___fttol+2
 12344  0E3C  1003               	clrc
 12345  0E3D  0D53               	rlf	??___fttol+1,w
 12346  0E3E  0D54               	rlf	??___fttol+2,w
 12347  0E3F  00D5               	movwf	??___fttol+3
 12348  0E40  0855               	movf	??___fttol+3,w
 12349  0E41  00DB               	movwf	___fttol@exp1
 12350  0E42  08DB               	movf	___fttol@exp1,f
 12351  0E43  1D03               	skipz
 12352  0E44  2E4E               	goto	l8064
 12353  0E45  3000               	movlw	0
 12354  0E46  00D1               	movwf	?___fttol+3
 12355  0E47  3000               	movlw	0
 12356  0E48  00D0               	movwf	?___fttol+2
 12357  0E49  3000               	movlw	0
 12358  0E4A  00CF               	movwf	?___fttol+1
 12359  0E4B  3000               	movlw	0
 12360  0E4C  00CE               	movwf	?___fttol
 12361  0E4D  0008               	return
 12362  0E4E                     l8064:	
 12363  0E4E  084E               	movf	___fttol@f1,w
 12364  0E4F  00D2               	movwf	??___fttol
 12365  0E50  084F               	movf	___fttol@f1+1,w
 12366  0E51  00D3               	movwf	??___fttol+1
 12367  0E52  0850               	movf	___fttol@f1+2,w
 12368  0E53  00D4               	movwf	??___fttol+2
 12369  0E54  3017               	movlw	23
 12370  0E55                     u8205:	
 12371  0E55  36D4               	lsrf	??___fttol+2,f
 12372  0E56  0CD3               	rrf	??___fttol+1,f
 12373  0E57  0CD2               	rrf	??___fttol,f
 12374  0E58  0B89               	decfsz	9,f
 12375  0E59  2E55               	goto	u8205
 12376  0E5A  0852               	movf	??___fttol,w
 12377  0E5B  00D5               	movwf	??___fttol+3
 12378  0E5C  0855               	movf	??___fttol+3,w
 12379  0E5D  00D6               	movwf	___fttol@sign1
 12380  0E5E  17CF               	bsf	___fttol@f1+1,7
 12381  0E5F  30FF               	movlw	255
 12382  0E60  05CE               	andwf	___fttol@f1,f
 12383  0E61  30FF               	movlw	255
 12384  0E62  05CF               	andwf	___fttol@f1+1,f
 12385  0E63  3000               	movlw	0
 12386  0E64  05D0               	andwf	___fttol@f1+2,f
 12387  0E65  084E               	movf	___fttol@f1,w
 12388  0E66  00D7               	movwf	___fttol@lval
 12389  0E67  084F               	movf	___fttol@f1+1,w
 12390  0E68  00D8               	movwf	___fttol@lval+1
 12391  0E69  0850               	movf	___fttol@f1+2,w
 12392  0E6A  00D9               	movwf	___fttol@lval+2
 12393  0E6B  01DA               	clrf	___fttol@lval+3
 12394  0E6C  308E               	movlw	142
 12395  0E6D  02DB               	subwf	___fttol@exp1,f
 12396  0E6E  1FDB               	btfss	___fttol@exp1,7
 12397  0E6F  2E8C               	goto	l8084
 12398  0E70  085B               	movf	___fttol@exp1,w
 12399  0E71  3A80               	xorlw	128
 12400  0E72  3E8F               	addlw	143
 12401  0E73  1803               	skipnc
 12402  0E74  2E7E               	goto	l8082
 12403  0E75  3000               	movlw	0
 12404  0E76  00D1               	movwf	?___fttol+3
 12405  0E77  3000               	movlw	0
 12406  0E78  00D0               	movwf	?___fttol+2
 12407  0E79  3000               	movlw	0
 12408  0E7A  00CF               	movwf	?___fttol+1
 12409  0E7B  3000               	movlw	0
 12410  0E7C  00CE               	movwf	?___fttol
 12411  0E7D  0008               	return
 12412  0E7E                     l8082:	
 12413  0E7E  3001               	movlw	1
 12414  0E7F                     u8235:	
 12415  0E7F  36DA               	lsrf	___fttol@lval+3,f
 12416  0E80  0CD9               	rrf	___fttol@lval+2,f
 12417  0E81  0CD8               	rrf	___fttol@lval+1,f
 12418  0E82  0CD7               	rrf	___fttol@lval,f
 12419  0E83  0B89               	decfsz	9,f
 12420  0E84  2E7F               	goto	u8235
 12421  0E85  3001               	movlw	1
 12422  0E86  00D2               	movwf	??___fttol
 12423  0E87  0852               	movf	??___fttol,w
 12424  0E88  07DB               	addwf	___fttol@exp1,f
 12425  0E89  1903               	btfsc	3,2
 12426  0E8A  2EA5               	goto	l8094
 12427  0E8B  2E7E               	goto	l8082
 12428  0E8C                     l8084:	
 12429  0E8C  3018               	movlw	24
 12430  0E8D  025B               	subwf	___fttol@exp1,w
 12431  0E8E  1C03               	skipc
 12432  0E8F  2EA2               	goto	l8092
 12433  0E90  3000               	movlw	0
 12434  0E91  00D1               	movwf	?___fttol+3
 12435  0E92  3000               	movlw	0
 12436  0E93  00D0               	movwf	?___fttol+2
 12437  0E94  3000               	movlw	0
 12438  0E95  00CF               	movwf	?___fttol+1
 12439  0E96  3000               	movlw	0
 12440  0E97  00CE               	movwf	?___fttol
 12441  0E98  0008               	return
 12442  0E99                     l8090:	
 12443  0E99  3001               	movlw	1
 12444  0E9A                     u8265:	
 12445  0E9A  35D7               	lslf	___fttol@lval,f
 12446  0E9B  0DD8               	rlf	___fttol@lval+1,f
 12447  0E9C  0DD9               	rlf	___fttol@lval+2,f
 12448  0E9D  0DDA               	rlf	___fttol@lval+3,f
 12449  0E9E  0B89               	decfsz	9,f
 12450  0E9F  2E9A               	goto	u8265
 12451  0EA0  3001               	movlw	1
 12452  0EA1  02DB               	subwf	___fttol@exp1,f
 12453  0EA2                     l8092:	
 12454  0EA2  08DB               	movf	___fttol@exp1,f
 12455  0EA3  1D03               	skipz
 12456  0EA4  2E99               	goto	l8090
 12457  0EA5                     l8094:	
 12458  0EA5  0856               	movf	___fttol@sign1,w
 12459  0EA6  1903               	btfsc	3,2
 12460  0EA7  2EB3               	goto	l8098
 12461  0EA8  09D7               	comf	___fttol@lval,f
 12462  0EA9  09D8               	comf	___fttol@lval+1,f
 12463  0EAA  09D9               	comf	___fttol@lval+2,f
 12464  0EAB  09DA               	comf	___fttol@lval+3,f
 12465  0EAC  0AD7               	incf	___fttol@lval,f
 12466  0EAD  1903               	skipnz
 12467  0EAE  0AD8               	incf	___fttol@lval+1,f
 12468  0EAF  1903               	skipnz
 12469  0EB0  0AD9               	incf	___fttol@lval+2,f
 12470  0EB1  1903               	skipnz
 12471  0EB2  0ADA               	incf	___fttol@lval+3,f
 12472  0EB3                     l8098:	
 12473  0EB3  085A               	movf	___fttol@lval+3,w
 12474  0EB4  00D1               	movwf	?___fttol+3
 12475  0EB5  0859               	movf	___fttol@lval+2,w
 12476  0EB6  00D0               	movwf	?___fttol+2
 12477  0EB7  0858               	movf	___fttol@lval+1,w
 12478  0EB8  00CF               	movwf	?___fttol+1
 12479  0EB9  0857               	movf	___fttol@lval,w
 12480  0EBA  00CE               	movwf	?___fttol
 12481  0EBB  0008               	return
 12482  0EBC                     __end_of___fttol:	
 12483                           
 12484                           	psect	text74
 12485  1E49                     __ptext74:	
 12486 ;; *************** function ___ftneg *****************
 12487 ;; Defined at:
 12488 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 12489 ;; Parameters:    Size  Location     Type
 12490 ;;  f1              3   30[BANK0 ] float 
 12491 ;; Auto vars:     Size  Location     Type
 12492 ;;		None
 12493 ;; Return value:  Size  Location     Type
 12494 ;;                  3   30[BANK0 ] float 
 12495 ;; Registers used:
 12496 ;;		wreg
 12497 ;; Tracked objects:
 12498 ;;		On entry : 0/0
 12499 ;;		On exit  : 0/0
 12500 ;;		Unchanged: 0/0
 12501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12502 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12505 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;Total ram usage:        3 bytes
 12507 ;; Hardware stack levels used:    1
 12508 ;; Hardware stack levels required when called:    5
 12509 ;; This function calls:
 12510 ;;		Nothing
 12511 ;; This function is called by:
 12512 ;;		_getPercentValue
 12513 ;;		_setPercentValue
 12514 ;; This function uses a non-reentrant model
 12515 ;;
 12516                           
 12517                           
 12518                           ;psect for function ___ftneg
 12519  1E49                     ___ftneg:	
 12520                           
 12521                           ;incstack = 0
 12522                           ; Regs used in ___ftneg: [wreg]
 12523  1E49  0020               	movlb	0	; select bank0
 12524  1E4A  0840               	movf	___ftneg@f1+2,w
 12525  1E4B  043F               	iorwf	___ftneg@f1+1,w
 12526  1E4C  043E               	iorwf	___ftneg@f1,w
 12527  1E4D  1903               	skipnz
 12528  1E4E  0008               	return
 12529  1E4F  3080               	movlw	128
 12530  1E50  06C0               	xorwf	___ftneg@f1+2,f
 12531  1E51  0008               	return
 12532  1E52                     __end_of___ftneg:	
 12533                           
 12534                           	psect	text75
 12535  0F57                     __ptext75:	
 12536 ;; *************** function ___ftdiv *****************
 12537 ;; Defined at:
 12538 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 12539 ;; Parameters:    Size  Location     Type
 12540 ;;  f2              3   14[BANK0 ] float 
 12541 ;;  f1              3   17[BANK0 ] float 
 12542 ;; Auto vars:     Size  Location     Type
 12543 ;;  f3              3   25[BANK0 ] float 
 12544 ;;  sign            1   29[BANK0 ] unsigned char 
 12545 ;;  exp             1   28[BANK0 ] unsigned char 
 12546 ;;  cntr            1   24[BANK0 ] unsigned char 
 12547 ;; Return value:  Size  Location     Type
 12548 ;;                  3   14[BANK0 ] float 
 12549 ;; Registers used:
 12550 ;;		wreg, status,2, status,0, pclath, cstack
 12551 ;; Tracked objects:
 12552 ;;		On entry : 0/0
 12553 ;;		On exit  : 0/0
 12554 ;;		Unchanged: 0/0
 12555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12556 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;Total ram usage:       16 bytes
 12561 ;; Hardware stack levels used:    1
 12562 ;; Hardware stack levels required when called:    6
 12563 ;; This function calls:
 12564 ;;		___ftpack
 12565 ;; This function is called by:
 12566 ;;		_getPercentValue
 12567 ;;		_setPercentValue
 12568 ;; This function uses a non-reentrant model
 12569 ;;
 12570                           
 12571                           
 12572                           ;psect for function ___ftdiv
 12573  0F57                     ___ftdiv:	
 12574                           
 12575                           ;incstack = 0
 12576                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12577  0F57  0020               	movlb	0	; select bank0
 12578  0F58  0831               	movf	___ftdiv@f1,w
 12579  0F59  00B4               	movwf	??___ftdiv
 12580  0F5A  0832               	movf	___ftdiv@f1+1,w
 12581  0F5B  00B5               	movwf	??___ftdiv+1
 12582  0F5C  0833               	movf	___ftdiv@f1+2,w
 12583  0F5D  00B6               	movwf	??___ftdiv+2
 12584  0F5E  1003               	clrc
 12585  0F5F  0D35               	rlf	??___ftdiv+1,w
 12586  0F60  0D36               	rlf	??___ftdiv+2,w
 12587  0F61  00B7               	movwf	??___ftdiv+3
 12588  0F62  0837               	movf	??___ftdiv+3,w
 12589  0F63  00BC               	movwf	___ftdiv@exp
 12590  0F64  08BC               	movf	___ftdiv@exp,f
 12591  0F65  1D03               	skipz
 12592  0F66  2F6E               	goto	l7964
 12593  0F67  3000               	movlw	0
 12594  0F68  00AE               	movwf	?___ftdiv
 12595  0F69  3000               	movlw	0
 12596  0F6A  00AF               	movwf	?___ftdiv+1
 12597  0F6B  3000               	movlw	0
 12598  0F6C  00B0               	movwf	?___ftdiv+2
 12599  0F6D  0008               	return
 12600  0F6E                     l7964:	
 12601  0F6E  082E               	movf	___ftdiv@f2,w
 12602  0F6F  00B4               	movwf	??___ftdiv
 12603  0F70  082F               	movf	___ftdiv@f2+1,w
 12604  0F71  00B5               	movwf	??___ftdiv+1
 12605  0F72  0830               	movf	___ftdiv@f2+2,w
 12606  0F73  00B6               	movwf	??___ftdiv+2
 12607  0F74  1003               	clrc
 12608  0F75  0D35               	rlf	??___ftdiv+1,w
 12609  0F76  0D36               	rlf	??___ftdiv+2,w
 12610  0F77  00B7               	movwf	??___ftdiv+3
 12611  0F78  0837               	movf	??___ftdiv+3,w
 12612  0F79  00BD               	movwf	___ftdiv@sign
 12613  0F7A  08BD               	movf	___ftdiv@sign,f
 12614  0F7B  1D03               	skipz
 12615  0F7C  2F84               	goto	l7970
 12616  0F7D  3000               	movlw	0
 12617  0F7E  00AE               	movwf	?___ftdiv
 12618  0F7F  3000               	movlw	0
 12619  0F80  00AF               	movwf	?___ftdiv+1
 12620  0F81  3000               	movlw	0
 12621  0F82  00B0               	movwf	?___ftdiv+2
 12622  0F83  0008               	return
 12623  0F84                     l7970:	
 12624  0F84  3000               	movlw	0
 12625  0F85  00B9               	movwf	___ftdiv@f3
 12626  0F86  3000               	movlw	0
 12627  0F87  00BA               	movwf	___ftdiv@f3+1
 12628  0F88  3000               	movlw	0
 12629  0F89  00BB               	movwf	___ftdiv@f3+2
 12630  0F8A  3089               	movlw	137
 12631  0F8B  073D               	addwf	___ftdiv@sign,w
 12632  0F8C  00B4               	movwf	??___ftdiv
 12633  0F8D  0834               	movf	??___ftdiv,w
 12634  0F8E  02BC               	subwf	___ftdiv@exp,f
 12635  0F8F  0831               	movf	___ftdiv@f1,w
 12636  0F90  00B4               	movwf	??___ftdiv
 12637  0F91  0832               	movf	___ftdiv@f1+1,w
 12638  0F92  00B5               	movwf	??___ftdiv+1
 12639  0F93  0833               	movf	___ftdiv@f1+2,w
 12640  0F94  00B6               	movwf	??___ftdiv+2
 12641  0F95  3010               	movlw	16
 12642  0F96                     u8005:	
 12643  0F96  36B6               	lsrf	??___ftdiv+2,f
 12644  0F97  0CB5               	rrf	??___ftdiv+1,f
 12645  0F98  0CB4               	rrf	??___ftdiv,f
 12646  0F99  0B89               	decfsz	9,f
 12647  0F9A  2F96               	goto	u8005
 12648  0F9B  0834               	movf	??___ftdiv,w
 12649  0F9C  00B7               	movwf	??___ftdiv+3
 12650  0F9D  0837               	movf	??___ftdiv+3,w
 12651  0F9E  00BD               	movwf	___ftdiv@sign
 12652  0F9F  082E               	movf	___ftdiv@f2,w
 12653  0FA0  00B4               	movwf	??___ftdiv
 12654  0FA1  082F               	movf	___ftdiv@f2+1,w
 12655  0FA2  00B5               	movwf	??___ftdiv+1
 12656  0FA3  0830               	movf	___ftdiv@f2+2,w
 12657  0FA4  00B6               	movwf	??___ftdiv+2
 12658  0FA5  3010               	movlw	16
 12659  0FA6                     u8015:	
 12660  0FA6  36B6               	lsrf	??___ftdiv+2,f
 12661  0FA7  0CB5               	rrf	??___ftdiv+1,f
 12662  0FA8  0CB4               	rrf	??___ftdiv,f
 12663  0FA9  0B89               	decfsz	9,f
 12664  0FAA  2FA6               	goto	u8015
 12665  0FAB  0834               	movf	??___ftdiv,w
 12666  0FAC  00B7               	movwf	??___ftdiv+3
 12667  0FAD  0837               	movf	??___ftdiv+3,w
 12668  0FAE  06BD               	xorwf	___ftdiv@sign,f
 12669  0FAF  3080               	movlw	128
 12670  0FB0  00B4               	movwf	??___ftdiv
 12671  0FB1  0834               	movf	??___ftdiv,w
 12672  0FB2  05BD               	andwf	___ftdiv@sign,f
 12673  0FB3  17B2               	bsf	___ftdiv@f1+1,7
 12674  0FB4  30FF               	movlw	255
 12675  0FB5  05B1               	andwf	___ftdiv@f1,f
 12676  0FB6  30FF               	movlw	255
 12677  0FB7  05B2               	andwf	___ftdiv@f1+1,f
 12678  0FB8  3000               	movlw	0
 12679  0FB9  05B3               	andwf	___ftdiv@f1+2,f
 12680  0FBA  17AF               	bsf	___ftdiv@f2+1,7
 12681  0FBB  30FF               	movlw	255
 12682  0FBC  05AE               	andwf	___ftdiv@f2,f
 12683  0FBD  30FF               	movlw	255
 12684  0FBE  05AF               	andwf	___ftdiv@f2+1,f
 12685  0FBF  3000               	movlw	0
 12686  0FC0  05B0               	andwf	___ftdiv@f2+2,f
 12687  0FC1  3018               	movlw	24
 12688  0FC2  00B4               	movwf	??___ftdiv
 12689  0FC3  0834               	movf	??___ftdiv,w
 12690  0FC4  00B8               	movwf	___ftdiv@cntr
 12691  0FC5                     l7984:	
 12692  0FC5  3001               	movlw	1
 12693  0FC6                     u8025:	
 12694  0FC6  35B9               	lslf	___ftdiv@f3,f
 12695  0FC7  0DBA               	rlf	___ftdiv@f3+1,f
 12696  0FC8  0DBB               	rlf	___ftdiv@f3+2,f
 12697  0FC9  0B89               	decfsz	9,f
 12698  0FCA  2FC6               	goto	u8025
 12699  0FCB  0830               	movf	___ftdiv@f2+2,w
 12700  0FCC  0233               	subwf	___ftdiv@f1+2,w
 12701  0FCD  1D03               	skipz
 12702  0FCE  2FD5               	goto	u8035
 12703  0FCF  082F               	movf	___ftdiv@f2+1,w
 12704  0FD0  0232               	subwf	___ftdiv@f1+1,w
 12705  0FD1  1D03               	skipz
 12706  0FD2  2FD5               	goto	u8035
 12707  0FD3  082E               	movf	___ftdiv@f2,w
 12708  0FD4  0231               	subwf	___ftdiv@f1,w
 12709  0FD5                     u8035:	
 12710  0FD5  1C03               	skipc
 12711  0FD6  2FDE               	goto	l7992
 12712  0FD7  082E               	movf	___ftdiv@f2,w
 12713  0FD8  02B1               	subwf	___ftdiv@f1,f
 12714  0FD9  082F               	movf	___ftdiv@f2+1,w
 12715  0FDA  3BB2               	subwfb	___ftdiv@f1+1,f
 12716  0FDB  0830               	movf	___ftdiv@f2+2,w
 12717  0FDC  3BB3               	subwfb	___ftdiv@f1+2,f
 12718  0FDD  1439               	bsf	___ftdiv@f3,0
 12719  0FDE                     l7992:	
 12720  0FDE  3001               	movlw	1
 12721  0FDF                     u8045:	
 12722  0FDF  35B1               	lslf	___ftdiv@f1,f
 12723  0FE0  0DB2               	rlf	___ftdiv@f1+1,f
 12724  0FE1  0DB3               	rlf	___ftdiv@f1+2,f
 12725  0FE2  0B89               	decfsz	9,f
 12726  0FE3  2FDF               	goto	u8045
 12727  0FE4  3001               	movlw	1
 12728  0FE5  02B8               	subwf	___ftdiv@cntr,f
 12729  0FE6  1D03               	btfss	3,2
 12730  0FE7  2FC5               	goto	l7984
 12731  0FE8  0839               	movf	___ftdiv@f3,w
 12732  0FE9  00A0               	movwf	___ftpack@arg
 12733  0FEA  083A               	movf	___ftdiv@f3+1,w
 12734  0FEB  00A1               	movwf	___ftpack@arg+1
 12735  0FEC  083B               	movf	___ftdiv@f3+2,w
 12736  0FED  00A2               	movwf	___ftpack@arg+2
 12737  0FEE  083C               	movf	___ftdiv@exp,w
 12738  0FEF  00B4               	movwf	??___ftdiv
 12739  0FF0  0834               	movf	??___ftdiv,w
 12740  0FF1  00A3               	movwf	___ftpack@exp
 12741  0FF2  083D               	movf	___ftdiv@sign,w
 12742  0FF3  00B5               	movwf	??___ftdiv+1
 12743  0FF4  0835               	movf	??___ftdiv+1,w
 12744  0FF5  00A4               	movwf	___ftpack@sign
 12745  0FF6  318B  236C         	fcall	___ftpack
 12746  0FF8  0020               	movlb	0	; select bank0
 12747  0FF9  0820               	movf	?___ftpack,w
 12748  0FFA  00AE               	movwf	?___ftdiv
 12749  0FFB  0821               	movf	?___ftpack+1,w
 12750  0FFC  00AF               	movwf	?___ftdiv+1
 12751  0FFD  0822               	movf	?___ftpack+2,w
 12752  0FFE  00B0               	movwf	?___ftdiv+2
 12753  0FFF  0008               	return
 12754  1000                     __end_of___ftdiv:	
 12755                           
 12756                           	psect	text76
 12757  02B4                     __ptext76:	
 12758 ;; *************** function ___ftadd *****************
 12759 ;; Defined at:
 12760 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;  f1              3   33[BANK0 ] float 
 12763 ;;  f2              3   36[BANK0 ] float 
 12764 ;; Auto vars:     Size  Location     Type
 12765 ;;  exp1            1   45[BANK0 ] unsigned char 
 12766 ;;  exp2            1   44[BANK0 ] unsigned char 
 12767 ;;  sign            1   43[BANK0 ] unsigned char 
 12768 ;; Return value:  Size  Location     Type
 12769 ;;                  3   33[BANK0 ] float 
 12770 ;; Registers used:
 12771 ;;		wreg, status,2, status,0, pclath, cstack
 12772 ;; Tracked objects:
 12773 ;;		On entry : 0/0
 12774 ;;		On exit  : 0/0
 12775 ;;		Unchanged: 0/0
 12776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12777 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12778 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12779 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12780 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12781 ;;Total ram usage:       13 bytes
 12782 ;; Hardware stack levels used:    1
 12783 ;; Hardware stack levels required when called:    6
 12784 ;; This function calls:
 12785 ;;		___ftpack
 12786 ;; This function is called by:
 12787 ;;		_getPercentValue
 12788 ;;		_setPercentValue
 12789 ;; This function uses a non-reentrant model
 12790 ;;
 12791                           
 12792                           
 12793                           ;psect for function ___ftadd
 12794  02B4                     ___ftadd:	
 12795                           
 12796                           ;incstack = 0
 12797                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 12798  02B4  0020               	movlb	0	; select bank0
 12799  02B5  0841               	movf	___ftadd@f1,w
 12800  02B6  00C7               	movwf	??___ftadd
 12801  02B7  0842               	movf	___ftadd@f1+1,w
 12802  02B8  00C8               	movwf	??___ftadd+1
 12803  02B9  0843               	movf	___ftadd@f1+2,w
 12804  02BA  00C9               	movwf	??___ftadd+2
 12805  02BB  1003               	clrc
 12806  02BC  0D48               	rlf	??___ftadd+1,w
 12807  02BD  0D49               	rlf	??___ftadd+2,w
 12808  02BE  00CA               	movwf	??___ftadd+3
 12809  02BF  084A               	movf	??___ftadd+3,w
 12810  02C0  00CD               	movwf	___ftadd@exp1
 12811  02C1  0844               	movf	___ftadd@f2,w
 12812  02C2  00C7               	movwf	??___ftadd
 12813  02C3  0845               	movf	___ftadd@f2+1,w
 12814  02C4  00C8               	movwf	??___ftadd+1
 12815  02C5  0846               	movf	___ftadd@f2+2,w
 12816  02C6  00C9               	movwf	??___ftadd+2
 12817  02C7  1003               	clrc
 12818  02C8  0D48               	rlf	??___ftadd+1,w
 12819  02C9  0D49               	rlf	??___ftadd+2,w
 12820  02CA  00CA               	movwf	??___ftadd+3
 12821  02CB  084A               	movf	??___ftadd+3,w
 12822  02CC  00CC               	movwf	___ftadd@exp2
 12823  02CD  084D               	movf	___ftadd@exp1,w
 12824  02CE  1903               	btfsc	3,2
 12825  02CF  2ADC               	goto	l7894
 12826  02D0  084C               	movf	___ftadd@exp2,w
 12827  02D1  024D               	subwf	___ftadd@exp1,w
 12828  02D2  1803               	skipnc
 12829  02D3  2AE3               	goto	l7898
 12830  02D4  034D               	decf	___ftadd@exp1,w
 12831  02D5  3AFF               	xorlw	255
 12832  02D6  074C               	addwf	___ftadd@exp2,w
 12833  02D7  00C7               	movwf	??___ftadd
 12834  02D8  3019               	movlw	25
 12835  02D9  0247               	subwf	??___ftadd,w
 12836  02DA  1C03               	skipc
 12837  02DB  2AE3               	goto	l7898
 12838  02DC                     l7894:	
 12839  02DC  0844               	movf	___ftadd@f2,w
 12840  02DD  00C1               	movwf	?___ftadd
 12841  02DE  0845               	movf	___ftadd@f2+1,w
 12842  02DF  00C2               	movwf	?___ftadd+1
 12843  02E0  0846               	movf	___ftadd@f2+2,w
 12844  02E1  00C3               	movwf	?___ftadd+2
 12845  02E2  0008               	return
 12846  02E3                     l7898:	
 12847  02E3  084C               	movf	___ftadd@exp2,w
 12848  02E4  1903               	btfsc	3,2
 12849  02E5  0008               	return
 12850  02E6  084D               	movf	___ftadd@exp1,w
 12851  02E7  024C               	subwf	___ftadd@exp2,w
 12852  02E8  1803               	skipnc
 12853  02E9  2AF2               	goto	l7904
 12854  02EA  034C               	decf	___ftadd@exp2,w
 12855  02EB  3AFF               	xorlw	255
 12856  02EC  074D               	addwf	___ftadd@exp1,w
 12857  02ED  00C7               	movwf	??___ftadd
 12858  02EE  3019               	movlw	25
 12859  02EF  0247               	subwf	??___ftadd,w
 12860  02F0  1803               	btfsc	3,0
 12861  02F1  0008               	return
 12862  02F2                     l7904:	
 12863  02F2  3006               	movlw	6
 12864  02F3  00C7               	movwf	??___ftadd
 12865  02F4  0847               	movf	??___ftadd,w
 12866  02F5  00CB               	movwf	___ftadd@sign
 12867  02F6  1BC3               	btfsc	___ftadd@f1+2,7
 12868  02F7  17CB               	bsf	___ftadd@sign,7
 12869  02F8  1BC6               	btfsc	___ftadd@f2+2,7
 12870  02F9  174B               	bsf	___ftadd@sign,6
 12871  02FA  17C2               	bsf	___ftadd@f1+1,7
 12872  02FB  30FF               	movlw	255
 12873  02FC  05C1               	andwf	___ftadd@f1,f
 12874  02FD  30FF               	movlw	255
 12875  02FE  05C2               	andwf	___ftadd@f1+1,f
 12876  02FF  3000               	movlw	0
 12877  0300  05C3               	andwf	___ftadd@f1+2,f
 12878  0301  17C5               	bsf	___ftadd@f2+1,7
 12879  0302  30FF               	movlw	255
 12880  0303  05C4               	andwf	___ftadd@f2,f
 12881  0304  30FF               	movlw	255
 12882  0305  05C5               	andwf	___ftadd@f2+1,f
 12883  0306  3000               	movlw	0
 12884  0307  05C6               	andwf	___ftadd@f2+2,f
 12885  0308  084C               	movf	___ftadd@exp2,w
 12886  0309  024D               	subwf	___ftadd@exp1,w
 12887  030A  1803               	skipnc
 12888  030B  2B2E               	goto	l7926
 12889  030C                     l7916:	
 12890  030C  3001               	movlw	1
 12891  030D                     u7845:	
 12892  030D  35C4               	lslf	___ftadd@f2,f
 12893  030E  0DC5               	rlf	___ftadd@f2+1,f
 12894  030F  0DC6               	rlf	___ftadd@f2+2,f
 12895  0310  0B89               	decfsz	9,f
 12896  0311  2B0D               	goto	u7845
 12897  0312  3001               	movlw	1
 12898  0313  02CC               	subwf	___ftadd@exp2,f
 12899  0314  084C               	movf	___ftadd@exp2,w
 12900  0315  064D               	xorwf	___ftadd@exp1,w
 12901  0316  1903               	skipnz
 12902  0317  2B29               	goto	l7924
 12903  0318  3001               	movlw	1
 12904  0319  02CB               	subwf	___ftadd@sign,f
 12905  031A  084B               	movf	___ftadd@sign,w
 12906  031B  3907               	andlw	7
 12907  031C  1903               	btfsc	3,2
 12908  031D  2B29               	goto	l7924
 12909  031E  2B0C               	goto	l7916
 12910  031F                     l7922:	
 12911  031F  3001               	movlw	1
 12912  0320                     u7875:	
 12913  0320  36C3               	lsrf	___ftadd@f1+2,f
 12914  0321  0CC2               	rrf	___ftadd@f1+1,f
 12915  0322  0CC1               	rrf	___ftadd@f1,f
 12916  0323  0B89               	decfsz	9,f
 12917  0324  2B20               	goto	u7875
 12918  0325  3001               	movlw	1
 12919  0326  00C7               	movwf	??___ftadd
 12920  0327  0847               	movf	??___ftadd,w
 12921  0328  07CD               	addwf	___ftadd@exp1,f
 12922  0329                     l7924:	
 12923  0329  084D               	movf	___ftadd@exp1,w
 12924  032A  064C               	xorwf	___ftadd@exp2,w
 12925  032B  1903               	btfsc	3,2
 12926  032C  2B53               	goto	l2917
 12927  032D  2B1F               	goto	l7922
 12928  032E                     l7926:	
 12929  032E  084D               	movf	___ftadd@exp1,w
 12930  032F  024C               	subwf	___ftadd@exp2,w
 12931  0330  1803               	skipnc
 12932  0331  2B53               	goto	l2917
 12933  0332                     l7928:	
 12934  0332  3001               	movlw	1
 12935  0333                     u7905:	
 12936  0333  35C1               	lslf	___ftadd@f1,f
 12937  0334  0DC2               	rlf	___ftadd@f1+1,f
 12938  0335  0DC3               	rlf	___ftadd@f1+2,f
 12939  0336  0B89               	decfsz	9,f
 12940  0337  2B33               	goto	u7905
 12941  0338  3001               	movlw	1
 12942  0339  02CD               	subwf	___ftadd@exp1,f
 12943  033A  084C               	movf	___ftadd@exp2,w
 12944  033B  064D               	xorwf	___ftadd@exp1,w
 12945  033C  1903               	skipnz
 12946  033D  2B4F               	goto	l7936
 12947  033E  3001               	movlw	1
 12948  033F  02CB               	subwf	___ftadd@sign,f
 12949  0340  084B               	movf	___ftadd@sign,w
 12950  0341  3907               	andlw	7
 12951  0342  1903               	btfsc	3,2
 12952  0343  2B4F               	goto	l7936
 12953  0344  2B32               	goto	l7928
 12954  0345                     l7934:	
 12955  0345  3001               	movlw	1
 12956  0346                     u7935:	
 12957  0346  36C6               	lsrf	___ftadd@f2+2,f
 12958  0347  0CC5               	rrf	___ftadd@f2+1,f
 12959  0348  0CC4               	rrf	___ftadd@f2,f
 12960  0349  0B89               	decfsz	9,f
 12961  034A  2B46               	goto	u7935
 12962  034B  3001               	movlw	1
 12963  034C  00C7               	movwf	??___ftadd
 12964  034D  0847               	movf	??___ftadd,w
 12965  034E  07CC               	addwf	___ftadd@exp2,f
 12966  034F                     l7936:	
 12967  034F  084D               	movf	___ftadd@exp1,w
 12968  0350  064C               	xorwf	___ftadd@exp2,w
 12969  0351  1D03               	skipz
 12970  0352  2B45               	goto	l7934
 12971  0353                     l2917:	
 12972  0353  1FCB               	btfss	___ftadd@sign,7
 12973  0354  2B65               	goto	l7940
 12974  0355  30FF               	movlw	255
 12975  0356  06C1               	xorwf	___ftadd@f1,f
 12976  0357  30FF               	movlw	255
 12977  0358  06C2               	xorwf	___ftadd@f1+1,f
 12978  0359  30FF               	movlw	255
 12979  035A  06C3               	xorwf	___ftadd@f1+2,f
 12980  035B  3001               	movlw	1
 12981  035C  07C1               	addwf	___ftadd@f1,f
 12982  035D  3000               	movlw	0
 12983  035E  1803               	skipnc
 12984  035F  3001               	movlw	1
 12985  0360  07C2               	addwf	___ftadd@f1+1,f
 12986  0361  3000               	movlw	0
 12987  0362  1803               	skipnc
 12988  0363  3001               	movlw	1
 12989  0364  07C3               	addwf	___ftadd@f1+2,f
 12990  0365                     l7940:	
 12991  0365  1F4B               	btfss	___ftadd@sign,6
 12992  0366  2B77               	goto	l7944
 12993  0367  30FF               	movlw	255
 12994  0368  06C4               	xorwf	___ftadd@f2,f
 12995  0369  30FF               	movlw	255
 12996  036A  06C5               	xorwf	___ftadd@f2+1,f
 12997  036B  30FF               	movlw	255
 12998  036C  06C6               	xorwf	___ftadd@f2+2,f
 12999  036D  3001               	movlw	1
 13000  036E  07C4               	addwf	___ftadd@f2,f
 13001  036F  3000               	movlw	0
 13002  0370  1803               	skipnc
 13003  0371  3001               	movlw	1
 13004  0372  07C5               	addwf	___ftadd@f2+1,f
 13005  0373  3000               	movlw	0
 13006  0374  1803               	skipnc
 13007  0375  3001               	movlw	1
 13008  0376  07C6               	addwf	___ftadd@f2+2,f
 13009  0377                     l7944:	
 13010  0377  01CB               	clrf	___ftadd@sign
 13011  0378  0841               	movf	___ftadd@f1,w
 13012  0379  07C4               	addwf	___ftadd@f2,f
 13013  037A  0842               	movf	___ftadd@f1+1,w
 13014  037B  3DC5               	addwfc	___ftadd@f2+1,f
 13015  037C  0843               	movf	___ftadd@f1+2,w
 13016  037D  3DC6               	addwfc	___ftadd@f2+2,f
 13017  037E  1FC6               	btfss	___ftadd@f2+2,7
 13018  037F  2B92               	goto	l7954
 13019  0380  30FF               	movlw	255
 13020  0381  06C4               	xorwf	___ftadd@f2,f
 13021  0382  30FF               	movlw	255
 13022  0383  06C5               	xorwf	___ftadd@f2+1,f
 13023  0384  30FF               	movlw	255
 13024  0385  06C6               	xorwf	___ftadd@f2+2,f
 13025  0386  3001               	movlw	1
 13026  0387  07C4               	addwf	___ftadd@f2,f
 13027  0388  3000               	movlw	0
 13028  0389  1803               	skipnc
 13029  038A  3001               	movlw	1
 13030  038B  07C5               	addwf	___ftadd@f2+1,f
 13031  038C  3000               	movlw	0
 13032  038D  1803               	skipnc
 13033  038E  3001               	movlw	1
 13034  038F  07C6               	addwf	___ftadd@f2+2,f
 13035  0390  01CB               	clrf	___ftadd@sign
 13036  0391  0ACB               	incf	___ftadd@sign,f
 13037  0392                     l7954:	
 13038  0392  0844               	movf	___ftadd@f2,w
 13039  0393  00A0               	movwf	___ftpack@arg
 13040  0394  0845               	movf	___ftadd@f2+1,w
 13041  0395  00A1               	movwf	___ftpack@arg+1
 13042  0396  0846               	movf	___ftadd@f2+2,w
 13043  0397  00A2               	movwf	___ftpack@arg+2
 13044  0398  084D               	movf	___ftadd@exp1,w
 13045  0399  00C7               	movwf	??___ftadd
 13046  039A  0847               	movf	??___ftadd,w
 13047  039B  00A3               	movwf	___ftpack@exp
 13048  039C  084B               	movf	___ftadd@sign,w
 13049  039D  00C8               	movwf	??___ftadd+1
 13050  039E  0848               	movf	??___ftadd+1,w
 13051  039F  00A4               	movwf	___ftpack@sign
 13052  03A0  318B  236C         	fcall	___ftpack
 13053  03A2  0020               	movlb	0	; select bank0
 13054  03A3  0820               	movf	?___ftpack,w
 13055  03A4  00C1               	movwf	?___ftadd
 13056  03A5  0821               	movf	?___ftpack+1,w
 13057  03A6  00C2               	movwf	?___ftadd+1
 13058  03A7  0822               	movf	?___ftpack+2,w
 13059  03A8  00C3               	movwf	?___ftadd+2
 13060  03A9  0008               	return
 13061  03AA                     __end_of___ftadd:	
 13062                           
 13063                           	psect	text77
 13064  1257                     __ptext77:	
 13065 ;; *************** function ___awtoft *****************
 13066 ;; Defined at:
 13067 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13068 ;; Parameters:    Size  Location     Type
 13069 ;;  c               2    8[BANK0 ] int 
 13070 ;; Auto vars:     Size  Location     Type
 13071 ;;  sign            1   13[BANK0 ] unsigned char 
 13072 ;; Return value:  Size  Location     Type
 13073 ;;                  3    8[BANK0 ] float 
 13074 ;; Registers used:
 13075 ;;		wreg, status,2, status,0, pclath, cstack
 13076 ;; Tracked objects:
 13077 ;;		On entry : 0/0
 13078 ;;		On exit  : 0/0
 13079 ;;		Unchanged: 0/0
 13080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13081 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13082 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13083 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13085 ;;Total ram usage:        6 bytes
 13086 ;; Hardware stack levels used:    1
 13087 ;; Hardware stack levels required when called:    6
 13088 ;; This function calls:
 13089 ;;		___ftpack
 13090 ;; This function is called by:
 13091 ;;		_getPercentValue
 13092 ;;		_setPercentValue
 13093 ;; This function uses a non-reentrant model
 13094 ;;
 13095                           
 13096                           
 13097                           ;psect for function ___awtoft
 13098  1257                     ___awtoft:	
 13099                           
 13100                           ;incstack = 0
 13101                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13102  1257  0020               	movlb	0	; select bank0
 13103  1258  01AD               	clrf	___awtoft@sign
 13104  1259  1FA9               	btfss	___awtoft@c+1,7
 13105  125A  2A62               	goto	l7882
 13106  125B  09A8               	comf	___awtoft@c,f
 13107  125C  09A9               	comf	___awtoft@c+1,f
 13108  125D  0AA8               	incf	___awtoft@c,f
 13109  125E  1903               	skipnz
 13110  125F  0AA9               	incf	___awtoft@c+1,f
 13111  1260  01AD               	clrf	___awtoft@sign
 13112  1261  0AAD               	incf	___awtoft@sign,f
 13113  1262                     l7882:	
 13114  1262  0828               	movf	___awtoft@c,w
 13115  1263  00A0               	movwf	___ftpack@arg
 13116  1264  0829               	movf	___awtoft@c+1,w
 13117  1265  00A1               	movwf	___ftpack@arg+1
 13118  1266  01A2               	clrf	___ftpack@arg+2
 13119  1267  308E               	movlw	142
 13120  1268  00AB               	movwf	??___awtoft
 13121  1269  082B               	movf	??___awtoft,w
 13122  126A  00A3               	movwf	___ftpack@exp
 13123  126B  082D               	movf	___awtoft@sign,w
 13124  126C  00AC               	movwf	??___awtoft+1
 13125  126D  082C               	movf	??___awtoft+1,w
 13126  126E  00A4               	movwf	___ftpack@sign
 13127  126F  318B  236C         	fcall	___ftpack
 13128  1271  0020               	movlb	0	; select bank0
 13129  1272  0820               	movf	?___ftpack,w
 13130  1273  00A8               	movwf	?___awtoft
 13131  1274  0821               	movf	?___ftpack+1,w
 13132  1275  00A9               	movwf	?___awtoft+1
 13133  1276  0822               	movf	?___ftpack+2,w
 13134  1277  00AA               	movwf	?___awtoft+2
 13135  1278  0008               	return
 13136  1279                     __end_of___awtoft:	
 13137                           
 13138                           	psect	text78
 13139  0B6C                     __ptext78:	
 13140 ;; *************** function ___ftpack *****************
 13141 ;; Defined at:
 13142 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13143 ;; Parameters:    Size  Location     Type
 13144 ;;  arg             3    0[BANK0 ] unsigned um
 13145 ;;  exp             1    3[BANK0 ] unsigned char 
 13146 ;;  sign            1    4[BANK0 ] unsigned char 
 13147 ;; Auto vars:     Size  Location     Type
 13148 ;;		None
 13149 ;; Return value:  Size  Location     Type
 13150 ;;                  3    0[BANK0 ] float 
 13151 ;; Registers used:
 13152 ;;		wreg, status,2, status,0
 13153 ;; Tracked objects:
 13154 ;;		On entry : 0/0
 13155 ;;		On exit  : 0/0
 13156 ;;		Unchanged: 0/0
 13157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13158 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13161 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;Total ram usage:        8 bytes
 13163 ;; Hardware stack levels used:    1
 13164 ;; Hardware stack levels required when called:    5
 13165 ;; This function calls:
 13166 ;;		Nothing
 13167 ;; This function is called by:
 13168 ;;		___awtoft
 13169 ;;		___ftadd
 13170 ;;		___ftdiv
 13171 ;;		___ftmul
 13172 ;; This function uses a non-reentrant model
 13173 ;;
 13174                           
 13175                           
 13176                           ;psect for function ___ftpack
 13177  0B6C                     ___ftpack:	
 13178                           
 13179                           ;incstack = 0
 13180                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13181  0B6C  0020               	movlb	0	; select bank0
 13182  0B6D  0823               	movf	___ftpack@exp,w
 13183  0B6E  1903               	btfsc	3,2
 13184  0B6F  2B75               	goto	l7832
 13185  0B70  0822               	movf	___ftpack@arg+2,w
 13186  0B71  0421               	iorwf	___ftpack@arg+1,w
 13187  0B72  0420               	iorwf	___ftpack@arg,w
 13188  0B73  1D03               	skipz
 13189  0B74  2B86               	goto	l7838
 13190  0B75                     l7832:	
 13191  0B75  3000               	movlw	0
 13192  0B76  00A0               	movwf	?___ftpack
 13193  0B77  3000               	movlw	0
 13194  0B78  00A1               	movwf	?___ftpack+1
 13195  0B79  3000               	movlw	0
 13196  0B7A  00A2               	movwf	?___ftpack+2
 13197  0B7B  0008               	return
 13198  0B7C                     l7836:	
 13199  0B7C  3001               	movlw	1
 13200  0B7D  00A5               	movwf	??___ftpack
 13201  0B7E  0825               	movf	??___ftpack,w
 13202  0B7F  07A3               	addwf	___ftpack@exp,f
 13203  0B80  3001               	movlw	1
 13204  0B81                     u7635:	
 13205  0B81  36A2               	lsrf	___ftpack@arg+2,f
 13206  0B82  0CA1               	rrf	___ftpack@arg+1,f
 13207  0B83  0CA0               	rrf	___ftpack@arg,f
 13208  0B84  0B89               	decfsz	9,f
 13209  0B85  2B81               	goto	u7635
 13210  0B86                     l7838:	
 13211  0B86  30FE               	movlw	254
 13212  0B87  0522               	andwf	___ftpack@arg+2,w
 13213  0B88  1903               	btfsc	3,2
 13214  0B89  2B9F               	goto	l2888
 13215  0B8A  2B7C               	goto	l7836
 13216  0B8B                     l7840:	
 13217  0B8B  3001               	movlw	1
 13218  0B8C  00A5               	movwf	??___ftpack
 13219  0B8D  0825               	movf	??___ftpack,w
 13220  0B8E  07A3               	addwf	___ftpack@exp,f
 13221  0B8F  3001               	movlw	1
 13222  0B90  07A0               	addwf	___ftpack@arg,f
 13223  0B91  3000               	movlw	0
 13224  0B92  1803               	skipnc
 13225  0B93  3001               	movlw	1
 13226  0B94  07A1               	addwf	___ftpack@arg+1,f
 13227  0B95  3000               	movlw	0
 13228  0B96  1803               	skipnc
 13229  0B97  3001               	movlw	1
 13230  0B98  07A2               	addwf	___ftpack@arg+2,f
 13231  0B99  3001               	movlw	1
 13232  0B9A                     u7655:	
 13233  0B9A  36A2               	lsrf	___ftpack@arg+2,f
 13234  0B9B  0CA1               	rrf	___ftpack@arg+1,f
 13235  0B9C  0CA0               	rrf	___ftpack@arg,f
 13236  0B9D  0B89               	decfsz	9,f
 13237  0B9E  2B9A               	goto	u7655
 13238  0B9F                     l2888:	
 13239  0B9F  30FF               	movlw	255
 13240  0BA0  0522               	andwf	___ftpack@arg+2,w
 13241  0BA1  1903               	btfsc	3,2
 13242  0BA2  2BAC               	goto	l7848
 13243  0BA3  2B8B               	goto	l7840
 13244  0BA4                     l7846:	
 13245  0BA4  3001               	movlw	1
 13246  0BA5  02A3               	subwf	___ftpack@exp,f
 13247  0BA6  3001               	movlw	1
 13248  0BA7                     u7675:	
 13249  0BA7  35A0               	lslf	___ftpack@arg,f
 13250  0BA8  0DA1               	rlf	___ftpack@arg+1,f
 13251  0BA9  0DA2               	rlf	___ftpack@arg+2,f
 13252  0BAA  0B89               	decfsz	9,f
 13253  0BAB  2BA7               	goto	u7675
 13254  0BAC                     l7848:	
 13255  0BAC  1FA1               	btfss	___ftpack@arg+1,7
 13256  0BAD  2BA4               	goto	l7846
 13257  0BAE  1823               	btfsc	___ftpack@exp,0
 13258  0BAF  2BB6               	goto	l2894
 13259  0BB0  30FF               	movlw	255
 13260  0BB1  05A0               	andwf	___ftpack@arg,f
 13261  0BB2  307F               	movlw	127
 13262  0BB3  05A1               	andwf	___ftpack@arg+1,f
 13263  0BB4  30FF               	movlw	255
 13264  0BB5  05A2               	andwf	___ftpack@arg+2,f
 13265  0BB6                     l2894:	
 13266  0BB6  1003               	clrc
 13267  0BB7  0CA3               	rrf	___ftpack@exp,f
 13268  0BB8  0823               	movf	___ftpack@exp,w
 13269  0BB9  00A5               	movwf	??___ftpack
 13270  0BBA  01A6               	clrf	??___ftpack+1
 13271  0BBB  01A7               	clrf	??___ftpack+2
 13272  0BBC  3010               	movlw	16
 13273  0BBD                     u7705:	
 13274  0BBD  35A5               	lslf	??___ftpack,f
 13275  0BBE  0DA6               	rlf	??___ftpack+1,f
 13276  0BBF  0DA7               	rlf	??___ftpack+2,f
 13277  0BC0  0B89               	decfsz	9,f
 13278  0BC1  2BBD               	goto	u7705
 13279  0BC2  0825               	movf	??___ftpack,w
 13280  0BC3  04A0               	iorwf	___ftpack@arg,f
 13281  0BC4  0826               	movf	??___ftpack+1,w
 13282  0BC5  04A1               	iorwf	___ftpack@arg+1,f
 13283  0BC6  0827               	movf	??___ftpack+2,w
 13284  0BC7  04A2               	iorwf	___ftpack@arg+2,f
 13285  0BC8  0824               	movf	___ftpack@sign,w
 13286  0BC9  1903               	btfsc	3,2
 13287  0BCA  0008               	return
 13288  0BCB  17A2               	bsf	___ftpack@arg+2,7
 13289  0BCC  0008               	return
 13290  0BCD                     __end_of___ftpack:	
 13291                           
 13292                           	psect	text79
 13293  08AA                     __ptext79:	
 13294 ;; *************** function _setLED *****************
 13295 ;; Defined at:
 13296 ;;		line 76 in file "../src/LED_B1.c"
 13297 ;; Parameters:    Size  Location     Type
 13298 ;;  led             1    wreg     unsigned char 
 13299 ;;  command         1    2[BANK0 ] unsigned char 
 13300 ;; Auto vars:     Size  Location     Type
 13301 ;;  led             1    3[BANK0 ] unsigned char 
 13302 ;; Return value:  Size  Location     Type
 13303 ;;		None               void
 13304 ;; Registers used:
 13305 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13306 ;; Tracked objects:
 13307 ;;		On entry : 0/0
 13308 ;;		On exit  : 0/0
 13309 ;;		Unchanged: 0/0
 13310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13311 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;Total ram usage:        2 bytes
 13316 ;; Hardware stack levels used:    1
 13317 ;; Hardware stack levels required when called:    6
 13318 ;; This function calls:
 13319 ;;		_LedPointSelect
 13320 ;; This function is called by:
 13321 ;;		_setDimmerLights
 13322 ;;		_setLED_Initialization
 13323 ;;		_Exception_Main
 13324 ;;		_setSw_Initialization
 13325 ;;		_setMain_Exception
 13326 ;; This function uses a non-reentrant model
 13327 ;;
 13328                           
 13329                           
 13330                           ;psect for function _setLED
 13331  08AA                     _setLED:	
 13332                           
 13333                           ;incstack = 0
 13334                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13335                           ;setLED@led stored from wreg
 13336  08AA  0020               	movlb	0	; select bank0
 13337  08AB  00A3               	movwf	setLED@led
 13338                           
 13339                           ;LED_B1.c: 77: LedPointSelect(led);
 13340  08AC  0823               	movf	setLED@led,w
 13341  08AD  3191  21F7  3188   	fcall	_LedPointSelect
 13342                           
 13343                           ;LED_B1.c: 78: if (command == 0) {
 13344  08B0  0020               	movlb	0	; select bank0
 13345  08B1  08A2               	movf	setLED@command,f
 13346  08B2  1D03               	skipz
 13347  08B3  28C1               	goto	l8576
 13348                           
 13349                           ;LED_B1.c: 80: if (led == 1) {
 13350  08B4  0823               	movf	setLED@led,w
 13351  08B5  3A01               	xorlw	1
 13352  08B6  1D03               	skipz
 13353  08B7  28B9               	goto	l8568
 13354                           
 13355                           ;LED_B1.c: 84: RA3 = 1;
 13356  08B8  158C               	bsf	12,3	;volatile
 13357  08B9                     l8568:	
 13358                           
 13359                           ;LED_B1.c: 86: }
 13360                           ;LED_B1.c: 89: if (led == 2) {
 13361  08B9  0823               	movf	setLED@led,w
 13362  08BA  3A02               	xorlw	2
 13363  08BB  1903               	btfsc	3,2
 13364                           
 13365                           ;LED_B1.c: 93: RC7 = 1;
 13366  08BC  178E               	bsf	14,7	;volatile
 13367                           
 13368                           ;LED_B1.c: 95: }
 13369                           ;LED_B1.c: 107: if (led == 99) {
 13370  08BD  0823               	movf	setLED@led,w
 13371  08BE  3A63               	xorlw	99
 13372  08BF  1903               	btfsc	3,2
 13373                           
 13374                           ;LED_B1.c: 111: RB5 = 1;
 13375  08C0  168D               	bsf	13,5	;volatile
 13376  08C1                     l8576:	
 13377                           
 13378                           ;LED_B1.c: 113: }
 13379                           ;LED_B1.c: 115: }
 13380                           ;LED_B1.c: 116: if (command == 1) {
 13381  08C1  0822               	movf	setLED@command,w
 13382  08C2  3A01               	xorlw	1
 13383  08C3  1D03               	skipz
 13384  08C4  28D2               	goto	l8590
 13385                           
 13386                           ;LED_B1.c: 118: if (led == 1) {
 13387  08C5  0823               	movf	setLED@led,w
 13388  08C6  3A01               	xorlw	1
 13389  08C7  1D03               	skipz
 13390  08C8  28CA               	goto	l8582
 13391                           
 13392                           ;LED_B1.c: 122: RA3 = 0;
 13393  08C9  118C               	bcf	12,3	;volatile
 13394  08CA                     l8582:	
 13395                           
 13396                           ;LED_B1.c: 124: }
 13397                           ;LED_B1.c: 127: if (led == 2) {
 13398  08CA  0823               	movf	setLED@led,w
 13399  08CB  3A02               	xorlw	2
 13400  08CC  1903               	btfsc	3,2
 13401                           
 13402                           ;LED_B1.c: 131: RC7 = 0;
 13403  08CD  138E               	bcf	14,7	;volatile
 13404                           
 13405                           ;LED_B1.c: 133: }
 13406                           ;LED_B1.c: 145: if (led == 99) {
 13407  08CE  0823               	movf	setLED@led,w
 13408  08CF  3A63               	xorlw	99
 13409  08D0  1903               	btfsc	3,2
 13410                           
 13411                           ;LED_B1.c: 149: RB5 = 0;
 13412  08D1  128D               	bcf	13,5	;volatile
 13413  08D2                     l8590:	
 13414                           
 13415                           ;LED_B1.c: 151: }
 13416                           ;LED_B1.c: 153: }
 13417                           ;LED_B1.c: 154: if (command == 10) {
 13418  08D2  0822               	movf	setLED@command,w
 13419  08D3  3A0A               	xorlw	10
 13420  08D4  1D03               	skipz
 13421  08D5  28F2               	goto	l8606
 13422                           
 13423                           ;LED_B1.c: 155: LED->GO = 0;
 13424  08D6  0021               	movlb	1	; select bank1
 13425  08D7  084D               	movf	_LED^(0+128),w
 13426  08D8  0086               	movwf	6
 13427  08D9  3001               	movlw	1	; select bank2/3
 13428  08DA  0087               	movwf	7
 13429  08DB  1081               	bcf	1,1
 13430                           
 13431                           ;LED_B1.c: 156: LED->Time = 0;
 13432  08DC  0A4D               	incf	_LED^(0+128),w
 13433  08DD  0086               	movwf	6
 13434  08DE  3001               	movlw	1	; select bank2/3
 13435  08DF  0087               	movwf	7
 13436  08E0  3000               	movlw	0
 13437  08E1  3FC0               	movwi [0]fsr1
 13438  08E2  3FC1               	movwi [1]fsr1
 13439                           
 13440                           ;LED_B1.c: 158: if (led == 1) {
 13441  08E3  0020               	movlb	0	; select bank0
 13442  08E4  0823               	movf	setLED@led,w
 13443  08E5  3A01               	xorlw	1
 13444  08E6  1D03               	skipz
 13445  08E7  28EA               	goto	l8598
 13446                           
 13447                           ;LED_B1.c: 162: RA3 = 1;
 13448  08E8  158C               	bsf	12,3	;volatile
 13449                           
 13450                           ;LED_B1.c: 164: }
 13451  08E9  28EE               	goto	l8602
 13452  08EA                     l8598:	
 13453                           
 13454                           ;LED_B1.c: 167: else if (led == 2) {
 13455  08EA  0823               	movf	setLED@led,w
 13456  08EB  3A02               	xorlw	2
 13457  08EC  1903               	btfsc	3,2
 13458                           
 13459                           ;LED_B1.c: 171: RC7 = 1;
 13460  08ED  178E               	bsf	14,7	;volatile
 13461  08EE                     l8602:	
 13462                           
 13463                           ;LED_B1.c: 173: }
 13464                           ;LED_B1.c: 185: if (led == 99) {
 13465  08EE  0823               	movf	setLED@led,w
 13466  08EF  3A63               	xorlw	99
 13467  08F0  1903               	btfsc	3,2
 13468                           
 13469                           ;LED_B1.c: 189: RB5 = 1;
 13470  08F1  168D               	bsf	13,5	;volatile
 13471  08F2                     l8606:	
 13472                           
 13473                           ;LED_B1.c: 191: }
 13474                           ;LED_B1.c: 193: }
 13475                           ;LED_B1.c: 194: if (command == 11) {
 13476  08F2  0822               	movf	setLED@command,w
 13477  08F3  3A0B               	xorlw	11
 13478  08F4  1D03               	skipz
 13479  08F5  0008               	return
 13480                           
 13481                           ;LED_B1.c: 195: LED->GO = 1;
 13482  08F6  0021               	movlb	1	; select bank1
 13483  08F7  084D               	movf	_LED^(0+128),w
 13484  08F8  0086               	movwf	6
 13485  08F9  3001               	movlw	1	; select bank2/3
 13486  08FA  0087               	movwf	7
 13487  08FB  1481               	bsf	1,1
 13488  08FC  0008               	return
 13489  08FD                     __end_of_setLED:	
 13490                           
 13491                           	psect	text80
 13492  11F7                     __ptext80:	
 13493 ;; *************** function _LedPointSelect *****************
 13494 ;; Defined at:
 13495 ;;		line 7 in file "../src/LED_B1.c"
 13496 ;; Parameters:    Size  Location     Type
 13497 ;;  led             1    wreg     unsigned char 
 13498 ;; Auto vars:     Size  Location     Type
 13499 ;;  led             1    1[BANK0 ] unsigned char 
 13500 ;; Return value:  Size  Location     Type
 13501 ;;		None               void
 13502 ;; Registers used:
 13503 ;;		wreg
 13504 ;; Tracked objects:
 13505 ;;		On entry : 0/0
 13506 ;;		On exit  : 0/0
 13507 ;;		Unchanged: 0/0
 13508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13510 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13512 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13513 ;;Total ram usage:        2 bytes
 13514 ;; Hardware stack levels used:    1
 13515 ;; Hardware stack levels required when called:    5
 13516 ;; This function calls:
 13517 ;;		Nothing
 13518 ;; This function is called by:
 13519 ;;		_setLED_Initialization
 13520 ;;		_setLED
 13521 ;;		_setLED_Main
 13522 ;; This function uses a non-reentrant model
 13523 ;;
 13524                           
 13525                           
 13526                           ;psect for function _LedPointSelect
 13527  11F7                     _LedPointSelect:	
 13528                           
 13529                           ;incstack = 0
 13530                           ; Regs used in _LedPointSelect: [wreg]
 13531                           ;LedPointSelect@led stored from wreg
 13532  11F7  0020               	movlb	0	; select bank0
 13533  11F8  00A1               	movwf	LedPointSelect@led
 13534                           
 13535                           ;LED_B1.c: 9: if (led == 1) {
 13536  11F9  0821               	movf	LedPointSelect@led,w
 13537  11FA  3A01               	xorlw	1
 13538  11FB  1D03               	skipz
 13539  11FC  2A02               	goto	l987
 13540                           
 13541                           ;LED_B1.c: 10: LED = &VarLED1;
 13542  11FD  306C               	movlw	_VarLED1& (0+255)
 13543  11FE  00A0               	movwf	??_LedPointSelect
 13544  11FF  0820               	movf	??_LedPointSelect,w
 13545  1200  0021               	movlb	1	; select bank1
 13546  1201  00CD               	movwf	_LED^(0+128)
 13547  1202                     l987:	
 13548                           
 13549                           ;LED_B1.c: 11: }
 13550                           ;LED_B1.c: 14: if (led == 2) {
 13551  1202  0020               	movlb	0	; select bank0
 13552  1203  0821               	movf	LedPointSelect@led,w
 13553  1204  3A02               	xorlw	2
 13554  1205  1D03               	skipz
 13555  1206  2A0C               	goto	l988
 13556                           
 13557                           ;LED_B1.c: 15: LED = &VarLED2;
 13558  1207  30E1               	movlw	_VarLED2& (0+255)
 13559  1208  00A0               	movwf	??_LedPointSelect
 13560  1209  0820               	movf	??_LedPointSelect,w
 13561  120A  0021               	movlb	1	; select bank1
 13562  120B  00CD               	movwf	_LED^(0+128)
 13563  120C                     l988:	
 13564                           
 13565                           ;LED_B1.c: 16: }
 13566                           ;LED_B1.c: 24: if (led == 99) {
 13567  120C  0020               	movlb	0	; select bank0
 13568  120D  0821               	movf	LedPointSelect@led,w
 13569  120E  3A63               	xorlw	99
 13570  120F  1D03               	skipz
 13571  1210  0008               	return
 13572                           
 13573                           ;LED_B1.c: 25: LED = &VarErrLED;
 13574  1211  3068               	movlw	_VarErrLED& (0+255)
 13575  1212  00A0               	movwf	??_LedPointSelect
 13576  1213  0820               	movf	??_LedPointSelect,w
 13577  1214  0021               	movlb	1	; select bank1
 13578  1215  00CD               	movwf	_LED^(0+128)
 13579  1216  0008               	return
 13580  1217                     __end_of_LedPointSelect:	
 13581                           
 13582                           	psect	text81
 13583  10D9                     __ptext81:	
 13584 ;; *************** function _setDimmerLights_Line *****************
 13585 ;; Defined at:
 13586 ;;		line 655 in file "../src/Dimmer_B1.c"
 13587 ;; Parameters:    Size  Location     Type
 13588 ;;  lights          1    wreg     unsigned char 
 13589 ;; Auto vars:     Size  Location     Type
 13590 ;;  lights          1    0[BANK0 ] unsigned char 
 13591 ;; Return value:  Size  Location     Type
 13592 ;;		None               void
 13593 ;; Registers used:
 13594 ;;		wreg
 13595 ;; Tracked objects:
 13596 ;;		On entry : 0/0
 13597 ;;		On exit  : 0/0
 13598 ;;		Unchanged: 0/0
 13599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13604 ;;Total ram usage:        1 bytes
 13605 ;; Hardware stack levels used:    1
 13606 ;; Hardware stack levels required when called:    5
 13607 ;; This function calls:
 13608 ;;		Nothing
 13609 ;; This function is called by:
 13610 ;;		_setDimmerLights
 13611 ;; This function uses a non-reentrant model
 13612 ;;
 13613                           
 13614                           
 13615                           ;psect for function _setDimmerLights_Line
 13616  10D9                     _setDimmerLights_Line:	
 13617                           
 13618                           ;incstack = 0
 13619                           ; Regs used in _setDimmerLights_Line: [wreg]
 13620                           ;setDimmerLights_Line@lights stored from wreg
 13621  10D9  0020               	movlb	0	; select bank0
 13622  10DA  00A0               	movwf	setDimmerLights_Line@lights
 13623                           
 13624                           ;Dimmer_B1.c: 658: DimmerLights1.Line = 0;
 13625  10DB  0022               	movlb	2	; select bank2
 13626  10DC  1350               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 13627                           
 13628                           ;Dimmer_B1.c: 661: DimmerLights2.Line = 0;
 13629  10DD  1361               	bcf	(_DimmerLights2^(0+256)+10),6	;volatile
 13630                           
 13631                           ;Dimmer_B1.c: 667: if (lights == 1) {
 13632  10DE  0020               	movlb	0	; select bank0
 13633  10DF  0820               	movf	setDimmerLights_Line@lights,w
 13634  10E0  3A01               	xorlw	1
 13635  10E1  1D03               	skipz
 13636  10E2  28E6               	goto	l8556
 13637                           
 13638                           ;Dimmer_B1.c: 668: DimmerLights1.Line = 1;
 13639  10E3  0022               	movlb	2	; select bank2
 13640  10E4  1750               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 13641                           
 13642                           ;Dimmer_B1.c: 669: }
 13643  10E5  0008               	return
 13644  10E6                     l8556:	
 13645                           
 13646                           ;Dimmer_B1.c: 672: else if (lights == 2) {
 13647  10E6  0020               	movlb	0	; select bank0
 13648  10E7  0820               	movf	setDimmerLights_Line@lights,w
 13649  10E8  3A02               	xorlw	2
 13650  10E9  1D03               	skipz
 13651  10EA  0008               	return
 13652                           
 13653                           ;Dimmer_B1.c: 673: DimmerLights2.Line = 1;
 13654  10EB  0022               	movlb	2	; select bank2
 13655  10EC  1761               	bsf	(_DimmerLights2^(0+256)+10),6	;volatile
 13656  10ED  0008               	return
 13657  10EE                     __end_of_setDimmerLights_Line:	
 13658                           
 13659                           	psect	text82
 13660  1387                     __ptext82:	
 13661 ;; *************** function _getDimmerLights_Allow_Condition *****************
 13662 ;; Defined at:
 13663 ;;		line 554 in file "../src/Dimmer_B1.c"
 13664 ;; Parameters:    Size  Location     Type
 13665 ;;  lights          1    wreg     unsigned char 
 13666 ;; Auto vars:     Size  Location     Type
 13667 ;;  lights          1    3[BANK0 ] unsigned char 
 13668 ;;  allow           1    4[BANK0 ] unsigned char 
 13669 ;; Return value:  Size  Location     Type
 13670 ;;                  1    wreg      unsigned char 
 13671 ;; Registers used:
 13672 ;;		wreg, status,2, status,0
 13673 ;; Tracked objects:
 13674 ;;		On entry : 0/0
 13675 ;;		On exit  : 0/0
 13676 ;;		Unchanged: 0/0
 13677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13679 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13680 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13681 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13682 ;;Total ram usage:        5 bytes
 13683 ;; Hardware stack levels used:    1
 13684 ;; Hardware stack levels required when called:    5
 13685 ;; This function calls:
 13686 ;;		Nothing
 13687 ;; This function is called by:
 13688 ;;		_setDimmerLights_SwOn
 13689 ;;		_setDimmerLights_AdjOn
 13690 ;;		_setDimmerLights_Main
 13691 ;; This function uses a non-reentrant model
 13692 ;;
 13693                           
 13694                           
 13695                           ;psect for function _getDimmerLights_Allow_Condition
 13696  1387                     _getDimmerLights_Allow_Condition:	
 13697                           
 13698                           ;incstack = 0
 13699                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0]
 13700                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 13701  1387  0020               	movlb	0	; select bank0
 13702  1388  00A3               	movwf	getDimmerLights_Allow_Condition@lights
 13703                           
 13704                           ;Dimmer_B1.c: 555: char allow = 0;
 13705  1389  01A4               	clrf	getDimmerLights_Allow_Condition@allow
 13706                           
 13707                           ;Dimmer_B1.c: 561: if (allow == 0) {
 13708  138A  08A4               	movf	getDimmerLights_Allow_Condition@allow,f
 13709  138B  1D03               	skipz
 13710  138C  2BB2               	goto	l8272
 13711                           
 13712                           ;Dimmer_B1.c: 562: if (lights == 1) {
 13713  138D  0823               	movf	getDimmerLights_Allow_Condition@lights,w
 13714  138E  3A01               	xorlw	1
 13715  138F  1D03               	skipz
 13716  1390  2BA1               	goto	l8262
 13717                           
 13718                           ;Dimmer_B1.c: 563: allow = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1
      +                           : 0;
 13719  1391  01A1               	clrf	_getDimmerLights_Allow_Condition$2146
 13720  1392  0AA1               	incf	_getDimmerLights_Allow_Condition$2146,f
 13721  1393  0022               	movlb	2	; select bank2
 13722  1394  1DE1               	btfss	(_DimmerLights2^(0+256)+10),3	;volatile
 13723  1395  1B58               	btfsc	(_DimmerLights2^(0+256)+1),6	;volatile
 13724  1396  2B99               	goto	l8258
 13725  1397  0020               	movlb	0	; select bank0
 13726  1398  01A1               	clrf	_getDimmerLights_Allow_Condition$2146
 13727  1399                     l8258:	
 13728  1399  0020               	movlb	0	; select bank0
 13729  139A  0821               	movf	_getDimmerLights_Allow_Condition$2146,w
 13730  139B  00A0               	movwf	??_getDimmerLights_Allow_Condition
 13731  139C  0820               	movf	??_getDimmerLights_Allow_Condition,w
 13732  139D  00A4               	movwf	getDimmerLights_Allow_Condition@allow
 13733                           
 13734                           ;Dimmer_B1.c: 564: RB5 = RB5 == 1 ? 0 : 1;
 13735  139E  3020               	movlw	32
 13736  139F  068D               	xorwf	13,f
 13737                           
 13738                           ;Dimmer_B1.c: 565: } else if (lights == 2) {
 13739  13A0  2BB2               	goto	l8272
 13740  13A1                     l8262:	
 13741  13A1  0823               	movf	getDimmerLights_Allow_Condition@lights,w
 13742  13A2  3A02               	xorlw	2
 13743  13A3  1D03               	skipz
 13744  13A4  2BB2               	goto	l8272
 13745                           
 13746                           ;Dimmer_B1.c: 566: allow = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1
      +                           : 0;
 13747  13A5  01A2               	clrf	_getDimmerLights_Allow_Condition$2147
 13748  13A6  0AA2               	incf	_getDimmerLights_Allow_Condition$2147,f
 13749  13A7  0022               	movlb	2	; select bank2
 13750  13A8  1DD0               	btfss	(_DimmerLights1^(0+256)+10),3	;volatile
 13751  13A9  1B47               	btfsc	(_DimmerLights1^(0+256)+1),6	;volatile
 13752  13AA  2BAD               	goto	l8270
 13753  13AB  0020               	movlb	0	; select bank0
 13754  13AC  01A2               	clrf	_getDimmerLights_Allow_Condition$2147
 13755  13AD                     l8270:	
 13756  13AD  0020               	movlb	0	; select bank0
 13757  13AE  0822               	movf	_getDimmerLights_Allow_Condition$2147,w
 13758  13AF  00A0               	movwf	??_getDimmerLights_Allow_Condition
 13759  13B0  0820               	movf	??_getDimmerLights_Allow_Condition,w
 13760  13B1  00A4               	movwf	getDimmerLights_Allow_Condition@allow
 13761  13B2                     l8272:	
 13762                           
 13763                           ;Dimmer_B1.c: 567: }
 13764                           ;Dimmer_B1.c: 568: }
 13765                           ;Dimmer_B1.c: 583: return allow;
 13766  13B2  0824               	movf	getDimmerLights_Allow_Condition@allow,w
 13767  13B3  0008               	return
 13768  13B4                     __end_of_getDimmerLights_Allow_Condition:	
 13769                           
 13770                           	psect	text83
 13771  1073                     __ptext83:	
 13772 ;; *************** function _DimmerLights_Initialization *****************
 13773 ;; Defined at:
 13774 ;;		line 341 in file "../src/Dimmer_B1.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;		None
 13777 ;; Auto vars:     Size  Location     Type
 13778 ;;		None
 13779 ;; Return value:  Size  Location     Type
 13780 ;;		None               void
 13781 ;; Registers used:
 13782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13783 ;; Tracked objects:
 13784 ;;		On entry : 0/0
 13785 ;;		On exit  : 0/0
 13786 ;;		Unchanged: 0/0
 13787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;Total ram usage:        1 bytes
 13793 ;; Hardware stack levels used:    1
 13794 ;; Hardware stack levels required when called:    7
 13795 ;; This function calls:
 13796 ;;		_setDimmerLights_Initialization
 13797 ;; This function is called by:
 13798 ;;		_main
 13799 ;; This function uses a non-reentrant model
 13800 ;;
 13801                           
 13802                           
 13803                           ;psect for function _DimmerLights_Initialization
 13804  1073                     _DimmerLights_Initialization:	
 13805                           
 13806                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 13807                           
 13808                           ;incstack = 0
 13809                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13810  1073  3046               	movlw	_DimmerLights1& (0+255)
 13811  1074  0020               	movlb	0	; select bank0
 13812  1075  00A4               	movwf	??_DimmerLights_Initialization
 13813  1076  0824               	movf	??_DimmerLights_Initialization,w
 13814  1077  0021               	movlb	1	; select bank1
 13815  1078  00CA               	movwf	_DimmerLights11^(0+128)
 13816                           
 13817                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 13818  1079  3001               	movlw	1
 13819  107A  3194  243F  3190   	fcall	_setDimmerLights_Initialization
 13820                           
 13821                           ;Dimmer_B1.c: 349: DimmerLights22 = &DimmerLights2;
 13822  107D  3057               	movlw	_DimmerLights2& (0+255)
 13823  107E  0020               	movlb	0	; select bank0
 13824  107F  00A4               	movwf	??_DimmerLights_Initialization
 13825  1080  0824               	movf	??_DimmerLights_Initialization,w
 13826  1081  0021               	movlb	1	; select bank1
 13827  1082  00CB               	movwf	_DimmerLights22^(0+128)
 13828                           
 13829                           ;Dimmer_B1.c: 350: setDimmerLights_Initialization(2);
 13830  1083  3002               	movlw	2
 13831  1084  3194  243F         	fcall	_setDimmerLights_Initialization
 13832  1086  0008               	return
 13833  1087                     __end_of_DimmerLights_Initialization:	
 13834                           
 13835                           	psect	text84
 13836  143F                     __ptext84:	
 13837 ;; *************** function _setDimmerLights_Initialization *****************
 13838 ;; Defined at:
 13839 ;;		line 365 in file "../src/Dimmer_B1.c"
 13840 ;; Parameters:    Size  Location     Type
 13841 ;;  lights          1    wreg     unsigned char 
 13842 ;; Auto vars:     Size  Location     Type
 13843 ;;  lights          1    3[BANK0 ] unsigned char 
 13844 ;; Return value:  Size  Location     Type
 13845 ;;		None               void
 13846 ;; Registers used:
 13847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13848 ;; Tracked objects:
 13849 ;;		On entry : 0/0
 13850 ;;		On exit  : 0/0
 13851 ;;		Unchanged: 0/0
 13852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13855 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13856 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13857 ;;Total ram usage:        2 bytes
 13858 ;; Hardware stack levels used:    1
 13859 ;; Hardware stack levels required when called:    6
 13860 ;; This function calls:
 13861 ;;		_DimmerLightsPointSelect
 13862 ;; This function is called by:
 13863 ;;		_DimmerLights_Initialization
 13864 ;; This function uses a non-reentrant model
 13865 ;;
 13866                           
 13867                           
 13868                           ;psect for function _setDimmerLights_Initialization
 13869  143F                     _setDimmerLights_Initialization:	
 13870                           
 13871                           ;incstack = 0
 13872                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13873                           ;setDimmerLights_Initialization@lights stored from wreg
 13874  143F  0020               	movlb	0	; select bank0
 13875  1440  00A3               	movwf	setDimmerLights_Initialization@lights
 13876                           
 13877                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 13878  1441  0823               	movf	setDimmerLights_Initialization@lights,w
 13879  1442  319F  27A0  3194   	fcall	_DimmerLightsPointSelect
 13880                           
 13881                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 13882  1445  3007               	movlw	7
 13883  1446  0020               	movlb	0	; select bank0
 13884  1447  00A2               	movwf	??_setDimmerLights_Initialization
 13885  1448  0875               	movf	_DimmerLights,w
 13886  1449  3E08               	addlw	8
 13887  144A  0086               	movwf	6
 13888  144B  3001               	movlw	1	; select bank2/3
 13889  144C  0087               	movwf	7
 13890  144D  0822               	movf	??_setDimmerLights_Initialization,w
 13891  144E  0081               	movwf	1
 13892                           
 13893                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(75*0.8));
 13894  144F  303C               	movlw	60
 13895  1450  00A2               	movwf	??_setDimmerLights_Initialization
 13896  1451  0875               	movf	_DimmerLights,w
 13897  1452  3E06               	addlw	6
 13898  1453  0086               	movwf	6
 13899  1454  3001               	movlw	1	; select bank2/3
 13900  1455  0087               	movwf	7
 13901  1456  0822               	movf	??_setDimmerLights_Initialization,w
 13902  1457  0081               	movwf	1
 13903                           
 13904                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 13905  1458  300C               	movlw	12
 13906  1459  00A2               	movwf	??_setDimmerLights_Initialization
 13907  145A  0875               	movf	_DimmerLights,w
 13908  145B  3E09               	addlw	9
 13909  145C  0086               	movwf	6
 13910  145D  3001               	movlw	1	; select bank2/3
 13911  145E  0087               	movwf	7
 13912  145F  0822               	movf	??_setDimmerLights_Initialization,w
 13913  1460  0081               	movwf	1
 13914                           
 13915                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13916  1461  0875               	movf	_DimmerLights,w
 13917  1462  3E06               	addlw	6
 13918  1463  0086               	movwf	6
 13919  1464  3001               	movlw	1	; select bank2/3
 13920  1465  0087               	movwf	7
 13921  1466  0801               	movf	1,w
 13922  1467  00A2               	movwf	??_setDimmerLights_Initialization
 13923  1468  0875               	movf	_DimmerLights,w
 13924  1469  3E04               	addlw	4
 13925  146A  0086               	movwf	6
 13926  146B  3001               	movlw	1	; select bank2/3
 13927  146C  0087               	movwf	7
 13928  146D  0822               	movf	??_setDimmerLights_Initialization,w
 13929  146E  0081               	movwf	1
 13930  146F  0008               	return
 13931  1470                     __end_of_setDimmerLights_Initialization:	
 13932                           
 13933                           	psect	text85
 13934  1E31                     __ptext85:	
 13935 ;; *************** function _DelayOff_Main *****************
 13936 ;; Defined at:
 13937 ;;		line 41 in file "../src/DelayOff_B1.c"
 13938 ;; Parameters:    Size  Location     Type
 13939 ;;		None
 13940 ;; Auto vars:     Size  Location     Type
 13941 ;;		None
 13942 ;; Return value:  Size  Location     Type
 13943 ;;		None               void
 13944 ;; Registers used:
 13945 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13946 ;; Tracked objects:
 13947 ;;		On entry : 0/0
 13948 ;;		On exit  : 0/0
 13949 ;;		Unchanged: 0/0
 13950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13955 ;;Total ram usage:        0 bytes
 13956 ;; Hardware stack levels used:    1
 13957 ;; Hardware stack levels required when called:   11
 13958 ;; This function calls:
 13959 ;;		_DlyOff_Main
 13960 ;; This function is called by:
 13961 ;;		_main
 13962 ;; This function uses a non-reentrant model
 13963 ;;
 13964                           
 13965                           
 13966                           ;psect for function _DelayOff_Main
 13967  1E31                     _DelayOff_Main:	
 13968                           
 13969                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13970                           
 13971                           ;incstack = 0
 13972                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13973  1E31  3001               	movlw	1
 13974  1E32  318B  23CD  319E   	fcall	_DlyOff_Main
 13975                           
 13976                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 13977  1E35  3002               	movlw	2
 13978  1E36  318B  23CD         	fcall	_DlyOff_Main
 13979  1E38  0008               	return
 13980  1E39                     __end_of_DelayOff_Main:	
 13981                           
 13982                           	psect	text86
 13983  0BCD                     __ptext86:	
 13984 ;; *************** function _DlyOff_Main *****************
 13985 ;; Defined at:
 13986 ;;		line 61 in file "../src/DelayOff_B1.c"
 13987 ;; Parameters:    Size  Location     Type
 13988 ;;  sw              1    wreg     unsigned char 
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;  sw              1   79[BANK0 ] unsigned char 
 13991 ;; Return value:  Size  Location     Type
 13992 ;;		None               void
 13993 ;; Registers used:
 13994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14004 ;;Total ram usage:        3 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:   10
 14007 ;; This function calls:
 14008 ;;		_DelayOffPointSelect
 14009 ;;		_setBuz
 14010 ;;		_setDimmerLights_ErrorClose
 14011 ;; This function is called by:
 14012 ;;		_DelayOff_Main
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           
 14017                           ;psect for function _DlyOff_Main
 14018  0BCD                     _DlyOff_Main:	
 14019                           
 14020                           ;incstack = 0
 14021                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14022                           ;DlyOff_Main@sw stored from wreg
 14023  0BCD  0020               	movlb	0	; select bank0
 14024  0BCE  00EF               	movwf	DlyOff_Main@sw
 14025                           
 14026                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 14027  0BCF  086F               	movf	DlyOff_Main@sw,w
 14028  0BD0  3191  2103  318B   	fcall	_DelayOffPointSelect
 14029                           
 14030                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 14031  0BD3  0021               	movlb	1	; select bank1
 14032  0BD4  0849               	movf	_DelayOff^(0+128),w
 14033  0BD5  0086               	movwf	6
 14034  0BD6  3001               	movlw	1	; select bank2/3
 14035  0BD7  0087               	movwf	7
 14036  0BD8  1C81               	btfss	1,1
 14037  0BD9  0008               	return
 14038                           
 14039                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 14040  0BDA  0849               	movf	_DelayOff^(0+128),w
 14041  0BDB  3E02               	addlw	2
 14042  0BDC  0086               	movwf	6
 14043  0BDD  3001               	movlw	1	; select bank2/3
 14044  0BDE  0087               	movwf	7
 14045  0BDF  3001               	movlw	1
 14046  0BE0  0781               	addwf	1,f
 14047  0BE1  3141               	addfsr 1,1
 14048  0BE2  1803               	skipnc
 14049  0BE3  0A81               	incf	1,f
 14050                           
 14051                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 14052  0BE4  0849               	movf	_DelayOff^(0+128),w
 14053  0BE5  3E02               	addlw	2
 14054  0BE6  0086               	movwf	6
 14055  0BE7  3001               	movlw	1	; select bank2/3
 14056  0BE8  0087               	movwf	7
 14057  0BE9  3F40               	moviw [0]fsr1
 14058  0BEA  0020               	movlb	0	; select bank0
 14059  0BEB  00ED               	movwf	??_DlyOff_Main
 14060  0BEC  3F41               	moviw [1]fsr1
 14061  0BED  00EE               	movwf	??_DlyOff_Main+1
 14062  0BEE  3017               	movlw	23
 14063  0BEF  026E               	subwf	??_DlyOff_Main+1,w
 14064  0BF0  3070               	movlw	112
 14065  0BF1  1903               	skipnz
 14066  0BF2  026D               	subwf	??_DlyOff_Main,w
 14067  0BF3  1C03               	skipc
 14068  0BF4  0008               	return
 14069                           
 14070                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 14071  0BF5  0021               	movlb	1	; select bank1
 14072  0BF6  0849               	movf	_DelayOff^(0+128),w
 14073  0BF7  3E02               	addlw	2
 14074  0BF8  0086               	movwf	6
 14075  0BF9  3001               	movlw	1	; select bank2/3
 14076  0BFA  0087               	movwf	7
 14077  0BFB  3000               	movlw	0
 14078  0BFC  3FC0               	movwi [0]fsr1
 14079  0BFD  3FC1               	movwi [1]fsr1
 14080                           
 14081                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 14082  0BFE  3001               	movlw	1
 14083  0BFF  0020               	movlb	0	; select bank0
 14084  0C00  00ED               	movwf	??_DlyOff_Main
 14085  0C01  0021               	movlb	1	; select bank1
 14086  0C02  0849               	movf	_DelayOff^(0+128),w
 14087  0C03  3E04               	addlw	4
 14088  0C04  0086               	movwf	6
 14089  0C05  3001               	movlw	1	; select bank2/3
 14090  0C06  0087               	movwf	7
 14091  0C07  0020               	movlb	0	; select bank0
 14092  0C08  086D               	movf	??_DlyOff_Main,w
 14093  0C09  0781               	addwf	1,f
 14094                           
 14095                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 14096  0C0A  0021               	movlb	1	; select bank1
 14097  0C0B  0849               	movf	_DelayOff^(0+128),w
 14098  0C0C  3E04               	addlw	4
 14099  0C0D  0086               	movwf	6
 14100  0C0E  3001               	movlw	1	; select bank2/3
 14101  0C0F  0087               	movwf	7
 14102  0C10  0A49               	incf	_DelayOff^(0+128),w
 14103  0C11  0084               	movwf	4
 14104  0C12  3001               	movlw	1	; select bank2/3
 14105  0C13  0085               	movwf	5
 14106  0C14  0800               	movf	0,w
 14107  0C15  0201               	subwf	1,w
 14108  0C16  1C03               	skipc
 14109  0C17  0008               	return
 14110                           
 14111                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 14112  0C18  0849               	movf	_DelayOff^(0+128),w
 14113  0C19  3E04               	addlw	4
 14114  0C1A  0086               	movwf	6
 14115  0C1B  3001               	movlw	1	; select bank2/3
 14116  0C1C  0087               	movwf	7
 14117  0C1D  0181               	clrf	1
 14118                           
 14119                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14120  0C1E  0849               	movf	_DelayOff^(0+128),w
 14121  0C1F  0086               	movwf	6
 14122  0C20  3001               	movlw	1	; select bank2/3
 14123  0C21  0087               	movwf	7
 14124  0C22  1081               	bcf	1,1
 14125                           
 14126                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 14127  0C23  3064               	movlw	100
 14128  0C24  0020               	movlb	0	; select bank0
 14129  0C25  00A9               	movwf	setBuz@time
 14130  0C26  3000               	movlw	0
 14131  0C27  00AA               	movwf	setBuz@time+1
 14132  0C28  3001               	movlw	1
 14133  0C29  318A  2201  318B   	fcall	_setBuz
 14134                           
 14135                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 14136  0C2C  0020               	movlb	0	; select bank0
 14137  0C2D  086F               	movf	DlyOff_Main@sw,w
 14138  0C2E  318B  230C         	fcall	_setDimmerLights_ErrorClose
 14139  0C30  0008               	return
 14140  0C31                     __end_of_DlyOff_Main:	
 14141                           
 14142                           	psect	text87
 14143  0B0C                     __ptext87:	
 14144 ;; *************** function _setDimmerLights_ErrorClose *****************
 14145 ;; Defined at:
 14146 ;;		line 784 in file "../src/Dimmer_B1.c"
 14147 ;; Parameters:    Size  Location     Type
 14148 ;;  lights          1    wreg     unsigned char 
 14149 ;; Auto vars:     Size  Location     Type
 14150 ;;  lights          1    1[BANK1 ] unsigned char 
 14151 ;;  i               2    2[BANK1 ] int 
 14152 ;;  count           1    0[BANK1 ] unsigned char 
 14153 ;; Return value:  Size  Location     Type
 14154 ;;		None               void
 14155 ;; Registers used:
 14156 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14157 ;; Tracked objects:
 14158 ;;		On entry : 0/0
 14159 ;;		On exit  : 0/0
 14160 ;;		Unchanged: 0/0
 14161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14163 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 14164 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14165 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 14166 ;;Total ram usage:        5 bytes
 14167 ;; Hardware stack levels used:    1
 14168 ;; Hardware stack levels required when called:    9
 14169 ;; This function calls:
 14170 ;;		_DimmerLightsPointSelect
 14171 ;;		_getDimmerLights_Status
 14172 ;;		_setDimmerLights_SwOff
 14173 ;; This function is called by:
 14174 ;;		_DlyOff_Main
 14175 ;;		_setControl_Lights_Table
 14176 ;;		_setMain_Exception
 14177 ;; This function uses a non-reentrant model
 14178 ;;
 14179                           
 14180                           
 14181                           ;psect for function _setDimmerLights_ErrorClose
 14182  0B0C                     _setDimmerLights_ErrorClose:	
 14183                           
 14184                           ;incstack = 0
 14185                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14186                           ;setDimmerLights_ErrorClose@lights stored from wreg
 14187  0B0C  0021               	movlb	1	; select bank1
 14188  0B0D  00E9               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 14189                           
 14190                           ;Dimmer_B1.c: 785: if (lights == 255) {
 14191  0B0E  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 14192  0B0F  3AFF               	xorlw	255
 14193  0B10  1D03               	skipz
 14194  0B11  2B4E               	goto	l8462
 14195                           
 14196                           ;Dimmer_B1.c: 790: char count = 2;
 14197  0B12  3002               	movlw	2
 14198  0B13  0020               	movlb	0	; select bank0
 14199  0B14  00EC               	movwf	??_setDimmerLights_ErrorClose
 14200  0B15  086C               	movf	??_setDimmerLights_ErrorClose,w
 14201  0B16  0021               	movlb	1	; select bank1
 14202  0B17  00E8               	movwf	setDimmerLights_ErrorClose@count^(0+128)
 14203                           
 14204                           ;Dimmer_B1.c: 795: for (int i = 0; i < count; i++) {
 14205  0B18  01EA               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 14206  0B19  01EB               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 14207  0B1A                     l8460:	
 14208  0B1A  086B               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 14209  0B1B  3A80               	xorlw	128
 14210  0B1C  0020               	movlb	0	; select bank0
 14211  0B1D  00EC               	movwf	??_setDimmerLights_ErrorClose
 14212  0B1E  3080               	movlw	128
 14213  0B1F  026C               	subwf	??_setDimmerLights_ErrorClose,w
 14214  0B20  1D03               	skipz
 14215  0B21  2B25               	goto	u8805
 14216  0B22  0021               	movlb	1	; select bank1
 14217  0B23  0868               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 14218  0B24  026A               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 14219  0B25                     u8805:	
 14220  0B25  1803               	btfsc	3,0
 14221  0B26  0008               	return
 14222                           
 14223                           ;Dimmer_B1.c: 796: DimmerLightsPointSelect(i + 1);
 14224  0B27  0021               	movlb	1	; select bank1
 14225  0B28  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 14226  0B29  3E01               	addlw	1
 14227  0B2A  319F  27A0  318B   	fcall	_DimmerLightsPointSelect
 14228                           
 14229                           ;Dimmer_B1.c: 797: if (getDimmerLights_Status(i + 1) == 1) {
 14230  0B2D  0021               	movlb	1	; select bank1
 14231  0B2E  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 14232  0B2F  3E01               	addlw	1
 14233  0B30  319F  2702  318B   	fcall	_getDimmerLights_Status
 14234  0B33  3A01               	xorlw	1
 14235  0B34  1D03               	skipz
 14236  0B35  2B48               	goto	l8458
 14237                           
 14238                           ;Dimmer_B1.c: 798: DimmerLights->SwFlag = 1;
 14239  0B36  0875               	movf	_DimmerLights,w
 14240  0B37  3E0B               	addlw	11
 14241  0B38  0086               	movwf	6
 14242  0B39  3001               	movlw	1	; select bank2/3
 14243  0B3A  0087               	movwf	7
 14244  0B3B  1481               	bsf	1,1
 14245                           
 14246                           ;Dimmer_B1.c: 799: DimmerLights->Status = 0;
 14247  0B3C  0875               	movf	_DimmerLights,w
 14248  0B3D  3E02               	addlw	2
 14249  0B3E  0086               	movwf	6
 14250  0B3F  3001               	movlw	1	; select bank2/3
 14251  0B40  0087               	movwf	7
 14252  0B41  1081               	bcf	1,1
 14253                           
 14254                           ;Dimmer_B1.c: 800: setDimmerLights_SwOff(i + 1);
 14255  0B42  0021               	movlb	1	; select bank1
 14256  0B43  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 14257  0B44  3E01               	addlw	1
 14258  0B45  3189  21A9  318B   	fcall	_setDimmerLights_SwOff
 14259  0B48                     l8458:	
 14260  0B48  3001               	movlw	1
 14261  0B49  0021               	movlb	1	; select bank1
 14262  0B4A  07EA               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 14263  0B4B  3000               	movlw	0
 14264  0B4C  3DEB               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 14265  0B4D  2B1A               	goto	l8460
 14266  0B4E                     l8462:	
 14267                           ;Dimmer_B1.c: 801: }
 14268                           ;Dimmer_B1.c: 802: }
 14269                           ;Dimmer_B1.c: 803: } else {
 14270                           
 14271                           
 14272                           ;Dimmer_B1.c: 804: DimmerLightsPointSelect(lights);
 14273  0B4E  0021               	movlb	1	; select bank1
 14274  0B4F  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 14275  0B50  319F  27A0  318B   	fcall	_DimmerLightsPointSelect
 14276                           
 14277                           ;Dimmer_B1.c: 805: if (getDimmerLights_Status(lights) == 1) {
 14278  0B53  0021               	movlb	1	; select bank1
 14279  0B54  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 14280  0B55  319F  2702  318B   	fcall	_getDimmerLights_Status
 14281  0B58  3A01               	xorlw	1
 14282  0B59  1D03               	skipz
 14283  0B5A  0008               	return
 14284                           
 14285                           ;Dimmer_B1.c: 806: DimmerLights->SwFlag = 1;
 14286  0B5B  0875               	movf	_DimmerLights,w
 14287  0B5C  3E0B               	addlw	11
 14288  0B5D  0086               	movwf	6
 14289  0B5E  3001               	movlw	1	; select bank2/3
 14290  0B5F  0087               	movwf	7
 14291  0B60  1481               	bsf	1,1
 14292                           
 14293                           ;Dimmer_B1.c: 807: DimmerLights->Status = 0;
 14294  0B61  0875               	movf	_DimmerLights,w
 14295  0B62  3E02               	addlw	2
 14296  0B63  0086               	movwf	6
 14297  0B64  3001               	movlw	1	; select bank2/3
 14298  0B65  0087               	movwf	7
 14299  0B66  1081               	bcf	1,1
 14300                           
 14301                           ;Dimmer_B1.c: 808: setDimmerLights_SwOff(lights);
 14302  0B67  0021               	movlb	1	; select bank1
 14303  0B68  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 14304  0B69  3189  21A9         	fcall	_setDimmerLights_SwOff
 14305  0B6B  0008               	return
 14306  0B6C                     __end_of_setDimmerLights_ErrorClose:	
 14307                           
 14308                           	psect	text88
 14309  09A9                     __ptext88:	
 14310 ;; *************** function _setDimmerLights_SwOff *****************
 14311 ;; Defined at:
 14312 ;;		line 426 in file "../src/Dimmer_B1.c"
 14313 ;; Parameters:    Size  Location     Type
 14314 ;;  sw              1    wreg     unsigned char 
 14315 ;; Auto vars:     Size  Location     Type
 14316 ;;  sw              1   75[BANK0 ] unsigned char 
 14317 ;;  command         1   74[BANK0 ] unsigned char 
 14318 ;; Return value:  Size  Location     Type
 14319 ;;		None               void
 14320 ;; Registers used:
 14321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14322 ;; Tracked objects:
 14323 ;;		On entry : 0/0
 14324 ;;		On exit  : 0/0
 14325 ;;		Unchanged: 0/0
 14326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14330 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14331 ;;Total ram usage:        2 bytes
 14332 ;; Hardware stack levels used:    1
 14333 ;; Hardware stack levels required when called:    8
 14334 ;; This function calls:
 14335 ;;		_DimmerLightsPointSelect
 14336 ;;		_getDelayOff_GO
 14337 ;;		_setDelayOff_GO
 14338 ;; This function is called by:
 14339 ;;		_setDimmerLights_ErrorClose
 14340 ;;		_Exception_Main
 14341 ;;		_setRFSW_Control
 14342 ;;		_setSw_Main
 14343 ;; This function uses a non-reentrant model
 14344 ;;
 14345                           
 14346                           
 14347                           ;psect for function _setDimmerLights_SwOff
 14348  09A9                     _setDimmerLights_SwOff:	
 14349                           
 14350                           ;incstack = 0
 14351                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14352                           ;setDimmerLights_SwOff@sw stored from wreg
 14353  09A9  0020               	movlb	0	; select bank0
 14354  09AA  00EB               	movwf	setDimmerLights_SwOff@sw
 14355                           
 14356                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(sw);
 14357  09AB  086B               	movf	setDimmerLights_SwOff@sw,w
 14358  09AC  319F  27A0  3189   	fcall	_DimmerLightsPointSelect
 14359                           
 14360                           ;Dimmer_B1.c: 428: char command = DimmerLights->Status == 1 ? 1 : 0;
 14361  09AF  0875               	movf	_DimmerLights,w
 14362  09B0  3E02               	addlw	2
 14363  09B1  0086               	movwf	6
 14364  09B2  3001               	movlw	1	; select bank2/3
 14365  09B3  0087               	movwf	7
 14366  09B4  3000               	movlw	0
 14367  09B5  1881               	btfsc	1,1
 14368  09B6  3001               	movlw	1
 14369  09B7  0020               	movlb	0	; select bank0
 14370  09B8  00EA               	movwf	setDimmerLights_SwOff@command
 14371                           
 14372                           ;Dimmer_B1.c: 429: if (DimmerLights->SwFlag == 1) {
 14373  09B9  0875               	movf	_DimmerLights,w
 14374  09BA  3E0B               	addlw	11
 14375  09BB  0086               	movwf	6
 14376  09BC  3001               	movlw	1	; select bank2/3
 14377  09BD  0087               	movwf	7
 14378  09BE  1C81               	btfss	1,1
 14379  09BF  0008               	return
 14380                           
 14381                           ;Dimmer_B1.c: 430: DimmerLights->SwFlag = 0;
 14382  09C0  0875               	movf	_DimmerLights,w
 14383  09C1  3E0B               	addlw	11
 14384  09C2  0086               	movwf	6
 14385  09C3  3001               	movlw	1	; select bank2/3
 14386  09C4  0087               	movwf	7
 14387  09C5  1081               	bcf	1,1
 14388                           
 14389                           ;Dimmer_B1.c: 431: if (DimmerLights->Status == 1) {
 14390  09C6  0875               	movf	_DimmerLights,w
 14391  09C7  3E02               	addlw	2
 14392  09C8  0086               	movwf	6
 14393  09C9  3001               	movlw	1	; select bank2/3
 14394  09CA  0087               	movwf	7
 14395  09CB  1C81               	btfss	1,1
 14396  09CC  29E7               	goto	l8308
 14397                           
 14398                           ;Dimmer_B1.c: 433: if (DimmerLights->SwAdj == 1) {
 14399  09CD  0875               	movf	_DimmerLights,w
 14400  09CE  3E0B               	addlw	11
 14401  09CF  0086               	movwf	6
 14402  09D0  3001               	movlw	1	; select bank2/3
 14403  09D1  0087               	movwf	7
 14404  09D2  1D01               	btfss	1,2
 14405  09D3  0008               	return
 14406                           
 14407                           ;Dimmer_B1.c: 434: DimmerLights->SwAdj = 0;
 14408  09D4  0875               	movf	_DimmerLights,w
 14409  09D5  3E0B               	addlw	11
 14410  09D6  0086               	movwf	6
 14411  09D7  3001               	movlw	1	; select bank2/3
 14412  09D8  0087               	movwf	7
 14413  09D9  1101               	bcf	1,2
 14414                           
 14415                           ;Dimmer_B1.c: 436: DimmerLights->TriggerAdj = 1;
 14416  09DA  0875               	movf	_DimmerLights,w
 14417  09DB  3E0A               	addlw	10
 14418  09DC  0086               	movwf	6
 14419  09DD  3001               	movlw	1	; select bank2/3
 14420  09DE  0087               	movwf	7
 14421  09DF  1581               	bsf	1,3
 14422                           
 14423                           ;Dimmer_B1.c: 437: DimmerLights->SwitchAdj = 0;
 14424  09E0  0875               	movf	_DimmerLights,w
 14425  09E1  3E0A               	addlw	10
 14426  09E2  0086               	movwf	6
 14427  09E3  3001               	movlw	1	; select bank2/3
 14428  09E4  0087               	movwf	7
 14429  09E5  1101               	bcf	1,2
 14430                           
 14431                           ;Dimmer_B1.c: 438: }
 14432                           ;Dimmer_B1.c: 439: } else {
 14433  09E6  0008               	return
 14434  09E7                     l8308:	
 14435                           
 14436                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
 14437  09E7  0875               	movf	_DimmerLights,w
 14438  09E8  3E0A               	addlw	10
 14439  09E9  0086               	movwf	6
 14440  09EA  3001               	movlw	1	; select bank2/3
 14441  09EB  0087               	movwf	7
 14442  09EC  1481               	bsf	1,1
 14443                           
 14444                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 0;
 14445  09ED  0875               	movf	_DimmerLights,w
 14446  09EE  3E0A               	addlw	10
 14447  09EF  0086               	movwf	6
 14448  09F0  3001               	movlw	1	; select bank2/3
 14449  09F1  0087               	movwf	7
 14450  09F2  1001               	bcf	1,0
 14451                           
 14452                           ;Dimmer_B1.c: 444: if (getDelayOff_GO(sw) == 1) {
 14453  09F3  086B               	movf	setDimmerLights_SwOff@sw,w
 14454  09F4  319F  2713  3189   	fcall	_getDelayOff_GO
 14455  09F7  3A01               	xorlw	1
 14456  09F8  1D03               	skipz
 14457  09F9  0008               	return
 14458                           
 14459                           ;Dimmer_B1.c: 446: setDelayOff_GO(sw, 0, 0);
 14460  09FA  0020               	movlb	0	; select bank0
 14461  09FB  01E6               	clrf	setDelayOff_GO@command
 14462  09FC  01E7               	clrf	setDelayOff_GO@value
 14463  09FD  086B               	movf	setDimmerLights_SwOff@sw,w
 14464  09FE  3189  2151         	fcall	_setDelayOff_GO
 14465  0A00  0008               	return
 14466  0A01                     __end_of_setDimmerLights_SwOff:	
 14467                           
 14468                           	psect	text89
 14469  0951                     __ptext89:	
 14470 ;; *************** function _setDelayOff_GO *****************
 14471 ;; Defined at:
 14472 ;;		line 83 in file "../src/DelayOff_B1.c"
 14473 ;; Parameters:    Size  Location     Type
 14474 ;;  sw              1    wreg     unsigned char 
 14475 ;;  command         1   70[BANK0 ] unsigned char 
 14476 ;;  value           1   71[BANK0 ] unsigned char 
 14477 ;; Auto vars:     Size  Location     Type
 14478 ;;  sw              1   73[BANK0 ] unsigned char 
 14479 ;; Return value:  Size  Location     Type
 14480 ;;		None               void
 14481 ;; Registers used:
 14482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14483 ;; Tracked objects:
 14484 ;;		On entry : 0/0
 14485 ;;		On exit  : 0/0
 14486 ;;		Unchanged: 0/0
 14487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14488 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14491 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14492 ;;Total ram usage:        4 bytes
 14493 ;; Hardware stack levels used:    1
 14494 ;; Hardware stack levels required when called:    7
 14495 ;; This function calls:
 14496 ;;		_DelayOffPointSelect
 14497 ;;		_DelayTimejudge
 14498 ;;		_setProductData
 14499 ;; This function is called by:
 14500 ;;		_setDimmerLights_SwOff
 14501 ;;		_setRFSW_Control
 14502 ;; This function uses a non-reentrant model
 14503 ;;
 14504                           
 14505                           
 14506                           ;psect for function _setDelayOff_GO
 14507  0951                     _setDelayOff_GO:	
 14508                           
 14509                           ;incstack = 0
 14510                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14511                           ;setDelayOff_GO@sw stored from wreg
 14512  0951  0020               	movlb	0	; select bank0
 14513  0952  00E9               	movwf	setDelayOff_GO@sw
 14514                           
 14515                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 14516  0953  0869               	movf	setDelayOff_GO@sw,w
 14517  0954  3191  2103  3189   	fcall	_DelayOffPointSelect
 14518                           
 14519                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 14520  0957  0020               	movlb	0	; select bank0
 14521  0958  0866               	movf	setDelayOff_GO@command,w
 14522  0959  3A01               	xorlw	1
 14523  095A  3000               	movlw	0
 14524  095B  1903               	skipnz
 14525  095C  3001               	movlw	1
 14526  095D  00E8               	movwf	??_setDelayOff_GO
 14527  095E  0021               	movlb	1	; select bank1
 14528  095F  0849               	movf	_DelayOff^(0+128),w
 14529  0960  0086               	movwf	6
 14530  0961  3001               	movlw	1	; select bank2/3
 14531  0962  0087               	movwf	7
 14532  0963  0020               	movlb	0	; select bank0
 14533  0964  0DE8               	rlf	??_setDelayOff_GO,f
 14534  0965  0801               	movf	1,w
 14535  0966  0668               	xorwf	??_setDelayOff_GO,w
 14536  0967  39FD               	andlw	-3
 14537  0968  0668               	xorwf	??_setDelayOff_GO,w
 14538  0969  0081               	movwf	1
 14539                           
 14540                           ;DelayOff_B1.c: 89: if (command == 1) {
 14541  096A  0866               	movf	setDelayOff_GO@command,w
 14542  096B  3A01               	xorlw	1
 14543  096C  1D03               	skipz
 14544  096D  2993               	goto	l8232
 14545                           
 14546                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 14547  096E  0867               	movf	setDelayOff_GO@value,w
 14548  096F  3193  235D  3189   	fcall	_DelayTimejudge
 14549  0972  0020               	movlb	0	; select bank0
 14550  0973  00E8               	movwf	??_setDelayOff_GO
 14551  0974  0021               	movlb	1	; select bank1
 14552  0975  0A49               	incf	_DelayOff^(0+128),w
 14553  0976  0086               	movwf	6
 14554  0977  3001               	movlw	1	; select bank2/3
 14555  0978  0087               	movwf	7
 14556  0979  0020               	movlb	0	; select bank0
 14557  097A  0868               	movf	??_setDelayOff_GO,w
 14558  097B  0081               	movwf	1
 14559                           
 14560                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 14561  097C  300F               	movlw	15
 14562  097D  0567               	andwf	setDelayOff_GO@value,w
 14563  097E  00E8               	movwf	??_setDelayOff_GO
 14564  097F  0868               	movf	??_setDelayOff_GO,w
 14565  0980  3A05               	xorlw	5
 14566  0981  1903               	skipnz
 14567  0982  2987               	goto	l8226
 14568  0983  0867               	movf	setDelayOff_GO@value,w
 14569  0984  390F               	andlw	15
 14570  0985  1D03               	btfss	3,2
 14571  0986  298D               	goto	l8230
 14572  0987                     l8226:	
 14573  0987  3026               	movlw	38
 14574  0988  0267               	subwf	setDelayOff_GO@value,w
 14575  0989  1803               	skipnc
 14576  098A  298D               	goto	l8230
 14577                           
 14578                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 14579  098B  0867               	movf	setDelayOff_GO@value,w
 14580  098C  298F               	goto	L4
 14581  098D                     l8230:	
 14582                           ;DelayOff_B1.c: 93: } else {
 14583                           
 14584                           
 14585                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 14586  098D  3005               	movlw	5
 14587  098E  0020               	movlb	0	; select bank0
 14588  098F                     L4:	
 14589  098F  00E8               	movwf	??_setDelayOff_GO
 14590  0990  0868               	movf	??_setDelayOff_GO,w
 14591  0991  00E2               	movwf	setProductData@value
 14592  0992  2995               	goto	L3
 14593  0993                     l8232:	
 14594                           ;DelayOff_B1.c: 95: }
 14595                           ;DelayOff_B1.c: 96: } else {
 14596                           
 14597                           
 14598                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 14599  0993  0020               	movlb	0	; select bank0
 14600  0994  01E2               	clrf	setProductData@value
 14601  0995                     L3:	
 14602  0995  0869               	movf	setDelayOff_GO@sw,w
 14603  0996  3E1A               	addlw	26
 14604  0997  319E  26C7         	fcall	_setProductData
 14605                           
 14606                           ;DelayOff_B1.c: 98: }
 14607                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 14608  0999  0021               	movlb	1	; select bank1
 14609  099A  0849               	movf	_DelayOff^(0+128),w
 14610  099B  3E02               	addlw	2
 14611  099C  0086               	movwf	6
 14612  099D  3001               	movlw	1	; select bank2/3
 14613  099E  0087               	movwf	7
 14614  099F  3000               	movlw	0
 14615  09A0  3FC0               	movwi [0]fsr1
 14616  09A1  3FC1               	movwi [1]fsr1
 14617                           
 14618                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 14619  09A2  0849               	movf	_DelayOff^(0+128),w
 14620  09A3  3E04               	addlw	4
 14621  09A4  0086               	movwf	6
 14622  09A5  3001               	movlw	1	; select bank2/3
 14623  09A6  0087               	movwf	7
 14624  09A7  0181               	clrf	1
 14625  09A8  0008               	return
 14626  09A9                     __end_of_setDelayOff_GO:	
 14627                           
 14628                           	psect	text90
 14629  1EC7                     __ptext90:	
 14630 ;; *************** function _setProductData *****************
 14631 ;; Defined at:
 14632 ;;		line 573 in file "../src/Main_B1.c"
 14633 ;; Parameters:    Size  Location     Type
 14634 ;;  address         1    wreg     unsigned char 
 14635 ;;  value           1   66[BANK0 ] unsigned char 
 14636 ;; Auto vars:     Size  Location     Type
 14637 ;;  address         1   69[BANK0 ] unsigned char 
 14638 ;; Return value:  Size  Location     Type
 14639 ;;		None               void
 14640 ;; Registers used:
 14641 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14642 ;; Tracked objects:
 14643 ;;		On entry : 0/0
 14644 ;;		On exit  : 0/0
 14645 ;;		Unchanged: 0/0
 14646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14647 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14648 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14649 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14650 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14651 ;;Total ram usage:        4 bytes
 14652 ;; Hardware stack levels used:    1
 14653 ;; Hardware stack levels required when called:    5
 14654 ;; This function calls:
 14655 ;;		Nothing
 14656 ;; This function is called by:
 14657 ;;		_setDelayOff_GO
 14658 ;;		_setDimmerLights
 14659 ;;		_setDimmerLights_Adj
 14660 ;;		_setTemp_Main
 14661 ;;		_setLog_Code
 14662 ;;		_setControl_Lights_Table
 14663 ;;		_setRFSW_AdjControl
 14664 ;;		_setRF_DimmerValue
 14665 ;;		_setRF_DimmerLights
 14666 ;; This function uses a non-reentrant model
 14667 ;;
 14668                           
 14669                           
 14670                           ;psect for function _setProductData
 14671  1EC7                     _setProductData:	
 14672                           
 14673                           ;incstack = 0
 14674                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 14675                           ;setProductData@address stored from wreg
 14676  1EC7  0020               	movlb	0	; select bank0
 14677  1EC8  00E5               	movwf	setProductData@address
 14678                           
 14679                           ;Main_B1.c: 574: product->Data[address] = value;
 14680  1EC9  0862               	movf	setProductData@value,w
 14681  1ECA  00E3               	movwf	??_setProductData
 14682  1ECB  0865               	movf	setProductData@address,w
 14683  1ECC  0779               	addwf	_product,w
 14684  1ECD  00E4               	movwf	??_setProductData+1
 14685  1ECE  0864               	movf	??_setProductData+1,w
 14686  1ECF  0086               	movwf	6
 14687  1ED0  3002               	movlw	2	; select bank4/5
 14688  1ED1  0087               	movwf	7
 14689  1ED2  0863               	movf	??_setProductData,w
 14690  1ED3  0081               	movwf	1
 14691  1ED4  0008               	return
 14692  1ED5                     __end_of_setProductData:	
 14693                           
 14694                           	psect	text91
 14695  135D                     __ptext91:	
 14696 ;; *************** function _DelayTimejudge *****************
 14697 ;; Defined at:
 14698 ;;		line 112 in file "../src/DelayOff_B1.c"
 14699 ;; Parameters:    Size  Location     Type
 14700 ;;  value           1    wreg     unsigned char 
 14701 ;; Auto vars:     Size  Location     Type
 14702 ;;  value           1    9[BANK0 ] unsigned char 
 14703 ;;  k               1    8[BANK0 ] unsigned char 
 14704 ;;  j               1    7[BANK0 ] unsigned char 
 14705 ;;  i               1    6[BANK0 ] unsigned char 
 14706 ;; Return value:  Size  Location     Type
 14707 ;;                  1    wreg      unsigned char 
 14708 ;; Registers used:
 14709 ;;		wreg, status,2, status,0, pclath, cstack
 14710 ;; Tracked objects:
 14711 ;;		On entry : 0/0
 14712 ;;		On exit  : 0/0
 14713 ;;		Unchanged: 0/0
 14714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14716 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14717 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14718 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;Total ram usage:        6 bytes
 14720 ;; Hardware stack levels used:    1
 14721 ;; Hardware stack levels required when called:    6
 14722 ;; This function calls:
 14723 ;;		___bmul
 14724 ;; This function is called by:
 14725 ;;		_setDelayOff_GO
 14726 ;; This function uses a non-reentrant model
 14727 ;;
 14728                           
 14729                           
 14730                           ;psect for function _DelayTimejudge
 14731  135D                     _DelayTimejudge:	
 14732                           
 14733                           ;incstack = 0
 14734                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 14735                           ;DelayTimejudge@value stored from wreg
 14736  135D  0020               	movlb	0	; select bank0
 14737  135E  00A9               	movwf	DelayTimejudge@value
 14738                           
 14739                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 14740  135F  3005               	movlw	5
 14741  1360  00A4               	movwf	??_DelayTimejudge
 14742  1361  0824               	movf	??_DelayTimejudge,w
 14743  1362  00A6               	movwf	DelayTimejudge@i
 14744  1363  01A7               	clrf	DelayTimejudge@j
 14745  1364  01A8               	clrf	DelayTimejudge@k
 14746                           
 14747                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 14748  1365  3031               	movlw	49
 14749  1366  0229               	subwf	DelayTimejudge@value,w
 14750  1367  1803               	skipnc
 14751  1368  2B85               	goto	l8122
 14752                           
 14753                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 14754  1369  0829               	movf	DelayTimejudge@value,w
 14755  136A  390F               	andlw	15
 14756  136B  00A4               	movwf	??_DelayTimejudge
 14757  136C  0824               	movf	??_DelayTimejudge,w
 14758  136D  00A7               	movwf	DelayTimejudge@j
 14759                           
 14760                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 14761  136E  0829               	movf	DelayTimejudge@value,w
 14762  136F  00A4               	movwf	??_DelayTimejudge
 14763  1370  3004               	movlw	4
 14764  1371                     u8325:	
 14765  1371  36A4               	lsrf	??_DelayTimejudge,f
 14766  1372  0B89               	decfsz	9,f
 14767  1373  2B71               	goto	u8325
 14768  1374  0824               	movf	??_DelayTimejudge,w
 14769  1375  390F               	andlw	15
 14770  1376  00A5               	movwf	??_DelayTimejudge+1
 14771  1377  0825               	movf	??_DelayTimejudge+1,w
 14772  1378  00A8               	movwf	DelayTimejudge@k
 14773                           
 14774                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 14775  1379  300A               	movlw	10
 14776  137A  00A4               	movwf	??_DelayTimejudge
 14777  137B  0824               	movf	??_DelayTimejudge,w
 14778  137C  00A0               	movwf	___bmul@multiplicand
 14779  137D  0828               	movf	DelayTimejudge@k,w
 14780  137E  319F  2758         	fcall	___bmul
 14781  1380  0020               	movlb	0	; select bank0
 14782  1381  0727               	addwf	DelayTimejudge@j,w
 14783  1382  00A5               	movwf	??_DelayTimejudge+1
 14784  1383  0825               	movf	??_DelayTimejudge+1,w
 14785  1384  00A6               	movwf	DelayTimejudge@i
 14786  1385                     l8122:	
 14787                           
 14788                           ;DelayOff_B1.c: 118: }
 14789                           ;DelayOff_B1.c: 139: return i;
 14790  1385  0826               	movf	DelayTimejudge@i,w
 14791  1386  0008               	return
 14792  1387                     __end_of_DelayTimejudge:	
 14793                           
 14794                           	psect	text92
 14795  1F58                     __ptext92:	
 14796 ;; *************** function ___bmul *****************
 14797 ;; Defined at:
 14798 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14799 ;; Parameters:    Size  Location     Type
 14800 ;;  multiplier      1    wreg     unsigned char 
 14801 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14802 ;; Auto vars:     Size  Location     Type
 14803 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14804 ;;  product         1    2[BANK0 ] unsigned char 
 14805 ;; Return value:  Size  Location     Type
 14806 ;;                  1    wreg      unsigned char 
 14807 ;; Registers used:
 14808 ;;		wreg, status,2, status,0
 14809 ;; Tracked objects:
 14810 ;;		On entry : 0/0
 14811 ;;		On exit  : 0/0
 14812 ;;		Unchanged: 0/0
 14813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14814 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14815 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14818 ;;Total ram usage:        4 bytes
 14819 ;; Hardware stack levels used:    1
 14820 ;; Hardware stack levels required when called:    5
 14821 ;; This function calls:
 14822 ;;		Nothing
 14823 ;; This function is called by:
 14824 ;;		_DelayTimejudge
 14825 ;; This function uses a non-reentrant model
 14826 ;;
 14827                           
 14828                           
 14829                           ;psect for function ___bmul
 14830  1F58                     ___bmul:	
 14831                           
 14832                           ;incstack = 0
 14833                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14834                           ;___bmul@multiplier stored from wreg
 14835  1F58  0020               	movlb	0	; select bank0
 14836  1F59  00A3               	movwf	___bmul@multiplier
 14837  1F5A  01A2               	clrf	___bmul@product
 14838  1F5B                     l7860:	
 14839  1F5B  1C23               	btfss	___bmul@multiplier,0
 14840  1F5C  2F61               	goto	l7864
 14841  1F5D  0820               	movf	___bmul@multiplicand,w
 14842  1F5E  00A1               	movwf	??___bmul
 14843  1F5F  0821               	movf	??___bmul,w
 14844  1F60  07A2               	addwf	___bmul@product,f
 14845  1F61                     l7864:	
 14846  1F61  1003               	clrc
 14847  1F62  0DA0               	rlf	___bmul@multiplicand,f
 14848  1F63  1003               	clrc
 14849  1F64  0CA3               	rrf	___bmul@multiplier,f
 14850  1F65  08A3               	movf	___bmul@multiplier,f
 14851  1F66  1D03               	skipz
 14852  1F67  2F5B               	goto	l7860
 14853  1F68  0822               	movf	___bmul@product,w
 14854  1F69  0008               	return
 14855  1F6A                     __end_of___bmul:	
 14856                           
 14857                           	psect	text93
 14858  1F13                     __ptext93:	
 14859 ;; *************** function _getDelayOff_GO *****************
 14860 ;; Defined at:
 14861 ;;		line 105 in file "../src/DelayOff_B1.c"
 14862 ;; Parameters:    Size  Location     Type
 14863 ;;  sw              1    wreg     unsigned char 
 14864 ;; Auto vars:     Size  Location     Type
 14865 ;;  sw              1    2[BANK0 ] unsigned char 
 14866 ;;  go              1    3[BANK0 ] unsigned char 
 14867 ;; Return value:  Size  Location     Type
 14868 ;;                  1    wreg      unsigned char 
 14869 ;; Registers used:
 14870 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14871 ;; Tracked objects:
 14872 ;;		On entry : 0/0
 14873 ;;		On exit  : 0/0
 14874 ;;		Unchanged: 0/0
 14875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14877 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14879 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14880 ;;Total ram usage:        2 bytes
 14881 ;; Hardware stack levels used:    1
 14882 ;; Hardware stack levels required when called:    6
 14883 ;; This function calls:
 14884 ;;		_DelayOffPointSelect
 14885 ;; This function is called by:
 14886 ;;		_setDimmerLights_SwOff
 14887 ;;		_setRFSW_Control
 14888 ;; This function uses a non-reentrant model
 14889 ;;
 14890                           
 14891                           
 14892                           ;psect for function _getDelayOff_GO
 14893  1F13                     _getDelayOff_GO:	
 14894                           
 14895                           ;incstack = 0
 14896                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14897                           ;getDelayOff_GO@sw stored from wreg
 14898  1F13  0020               	movlb	0	; select bank0
 14899  1F14  00A2               	movwf	getDelayOff_GO@sw
 14900                           
 14901                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 14902  1F15  0822               	movf	getDelayOff_GO@sw,w
 14903  1F16  3191  2103         	fcall	_DelayOffPointSelect
 14904                           
 14905                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 14906  1F18  0021               	movlb	1	; select bank1
 14907  1F19  0849               	movf	_DelayOff^(0+128),w
 14908  1F1A  0086               	movwf	6
 14909  1F1B  3001               	movlw	1	; select bank2/3
 14910  1F1C  0087               	movwf	7
 14911  1F1D  3000               	movlw	0
 14912  1F1E  1881               	btfsc	1,1
 14913  1F1F  3001               	movlw	1
 14914  1F20  0020               	movlb	0	; select bank0
 14915  1F21  00A3               	movwf	getDelayOff_GO@go
 14916                           
 14917                           ;DelayOff_B1.c: 108: return go;
 14918  1F22  0823               	movf	getDelayOff_GO@go,w
 14919  1F23  0008               	return
 14920  1F24                     __end_of_getDelayOff_GO:	
 14921                           
 14922                           	psect	text94
 14923  1F02                     __ptext94:	
 14924 ;; *************** function _getDimmerLights_Status *****************
 14925 ;; Defined at:
 14926 ;;		line 706 in file "../src/Dimmer_B1.c"
 14927 ;; Parameters:    Size  Location     Type
 14928 ;;  lights          1    wreg     unsigned char 
 14929 ;; Auto vars:     Size  Location     Type
 14930 ;;  lights          1    2[BANK0 ] unsigned char 
 14931 ;;  status          1    3[BANK0 ] unsigned char 
 14932 ;; Return value:  Size  Location     Type
 14933 ;;                  1    wreg      unsigned char 
 14934 ;; Registers used:
 14935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14936 ;; Tracked objects:
 14937 ;;		On entry : 0/0
 14938 ;;		On exit  : 0/0
 14939 ;;		Unchanged: 0/0
 14940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14942 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14945 ;;Total ram usage:        2 bytes
 14946 ;; Hardware stack levels used:    1
 14947 ;; Hardware stack levels required when called:    6
 14948 ;; This function calls:
 14949 ;;		_DimmerLightsPointSelect
 14950 ;; This function is called by:
 14951 ;;		_setDimmerLights_ErrorClose
 14952 ;;		_getMain_LightsStatus
 14953 ;;		_Exception_Main
 14954 ;;		_setRFSW_Control
 14955 ;;		_setRFSW_AdjControl
 14956 ;; This function uses a non-reentrant model
 14957 ;;
 14958                           
 14959                           
 14960                           ;psect for function _getDimmerLights_Status
 14961  1F02                     _getDimmerLights_Status:	
 14962                           
 14963                           ;incstack = 0
 14964                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14965                           ;getDimmerLights_Status@lights stored from wreg
 14966  1F02  0020               	movlb	0	; select bank0
 14967  1F03  00A2               	movwf	getDimmerLights_Status@lights
 14968                           
 14969                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
 14970  1F04  0822               	movf	getDimmerLights_Status@lights,w
 14971  1F05  319F  27A0         	fcall	_DimmerLightsPointSelect
 14972                           
 14973                           ;Dimmer_B1.c: 708: char status = DimmerLights->Status == 1 ? 1 : 0;
 14974  1F07  0875               	movf	_DimmerLights,w
 14975  1F08  3E02               	addlw	2
 14976  1F09  0086               	movwf	6
 14977  1F0A  3001               	movlw	1	; select bank2/3
 14978  1F0B  0087               	movwf	7
 14979  1F0C  3000               	movlw	0
 14980  1F0D  1881               	btfsc	1,1
 14981  1F0E  3001               	movlw	1
 14982  1F0F  0020               	movlb	0	; select bank0
 14983  1F10  00A3               	movwf	getDimmerLights_Status@status
 14984                           
 14985                           ;Dimmer_B1.c: 710: return status;
 14986  1F11  0823               	movf	getDimmerLights_Status@status,w
 14987  1F12  0008               	return
 14988  1F13                     __end_of_getDimmerLights_Status:	
 14989                           
 14990                           	psect	text95
 14991  1FA0                     __ptext95:	
 14992 ;; *************** function _DimmerLightsPointSelect *****************
 14993 ;; Defined at:
 14994 ;;		line 321 in file "../src/Dimmer_B1.c"
 14995 ;; Parameters:    Size  Location     Type
 14996 ;;  lights          1    wreg     unsigned char 
 14997 ;; Auto vars:     Size  Location     Type
 14998 ;;  lights          1    1[BANK0 ] unsigned char 
 14999 ;; Return value:  Size  Location     Type
 15000 ;;		None               void
 15001 ;; Registers used:
 15002 ;;		wreg
 15003 ;; Tracked objects:
 15004 ;;		On entry : 0/0
 15005 ;;		On exit  : 0/0
 15006 ;;		Unchanged: 0/0
 15007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15009 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15010 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15011 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;Total ram usage:        2 bytes
 15013 ;; Hardware stack levels used:    1
 15014 ;; Hardware stack levels required when called:    5
 15015 ;; This function calls:
 15016 ;;		Nothing
 15017 ;; This function is called by:
 15018 ;;		_setDimmerLights_Initialization
 15019 ;;		_setDimmerLights_SwOn
 15020 ;;		_setDimmerLights_SwOff
 15021 ;;		_setDimmerLights_AdjOn
 15022 ;;		_setDimmerLights_Main
 15023 ;;		_getDimmerLights_Status
 15024 ;;		_setDimmerLights_ErrorClose
 15025 ;;		_setDimmerLights_AdjRF
 15026 ;;		_Exception_Main
 15027 ;;		_setDimmerLights_Status
 15028 ;;		_setDimmerLights_GO
 15029 ;;		_setDimmerLights_MaxmumValue
 15030 ;;		_setDimmerLights_Trigger
 15031 ;;		_setDimmerLights_TriggerAdj
 15032 ;; This function uses a non-reentrant model
 15033 ;;
 15034                           
 15035                           
 15036                           ;psect for function _DimmerLightsPointSelect
 15037  1FA0                     _DimmerLightsPointSelect:	
 15038                           
 15039                           ;incstack = 0
 15040                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15041                           ;DimmerLightsPointSelect@lights stored from wreg
 15042  1FA0  0020               	movlb	0	; select bank0
 15043  1FA1  00A1               	movwf	DimmerLightsPointSelect@lights
 15044                           
 15045                           ;Dimmer_B1.c: 323: if (lights == 1) {
 15046  1FA2  0821               	movf	DimmerLightsPointSelect@lights,w
 15047  1FA3  3A01               	xorlw	1
 15048  1FA4  1D03               	skipz
 15049  1FA5  2FAA               	goto	l754
 15050                           
 15051                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 15052  1FA6  3046               	movlw	_DimmerLights1& (0+255)
 15053  1FA7  00A0               	movwf	??_DimmerLightsPointSelect
 15054  1FA8  0820               	movf	??_DimmerLightsPointSelect,w
 15055  1FA9  00F5               	movwf	_DimmerLights
 15056  1FAA                     l754:	
 15057                           
 15058                           ;Dimmer_B1.c: 325: }
 15059                           ;Dimmer_B1.c: 328: if (lights == 2) {
 15060  1FAA  0821               	movf	DimmerLightsPointSelect@lights,w
 15061  1FAB  3A02               	xorlw	2
 15062  1FAC  1D03               	skipz
 15063  1FAD  0008               	return
 15064                           
 15065                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights2;
 15066  1FAE  3057               	movlw	_DimmerLights2& (0+255)
 15067  1FAF  00A0               	movwf	??_DimmerLightsPointSelect
 15068  1FB0  0820               	movf	??_DimmerLightsPointSelect,w
 15069  1FB1  00F5               	movwf	_DimmerLights
 15070  1FB2  0008               	return
 15071  1FB3                     __end_of_DimmerLightsPointSelect:	
 15072                           
 15073                           	psect	text96
 15074  0A01                     __ptext96:	
 15075 ;; *************** function _setBuz *****************
 15076 ;; Defined at:
 15077 ;;		line 22 in file "../src/Buzzer_B1.c"
 15078 ;; Parameters:    Size  Location     Type
 15079 ;;  count           1    wreg     unsigned char 
 15080 ;;  time            2    9[BANK0 ] int 
 15081 ;; Auto vars:     Size  Location     Type
 15082 ;;  count           1   12[BANK0 ] unsigned char 
 15083 ;; Return value:  Size  Location     Type
 15084 ;;		None               void
 15085 ;; Registers used:
 15086 ;;		wreg, status,2, status,0, pclath, cstack
 15087 ;; Tracked objects:
 15088 ;;		On entry : 0/0
 15089 ;;		On exit  : 0/0
 15090 ;;		Unchanged: 0/0
 15091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15092 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15094 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15095 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15096 ;;Total ram usage:        4 bytes
 15097 ;; Hardware stack levels used:    1
 15098 ;; Hardware stack levels required when called:    6
 15099 ;; This function calls:
 15100 ;;		___awdiv
 15101 ;; This function is called by:
 15102 ;;		_DlyOff_Main
 15103 ;;		_setDimmerLights_SwOn
 15104 ;;		_setDimmerLights_Adj
 15105 ;;		_my_MainTimer
 15106 ;;		_Exception_Main
 15107 ;;		_setTemp_Main
 15108 ;;		_setLog_Code
 15109 ;;		_setControl_Lights_Table
 15110 ;;		_setRFSW_Control
 15111 ;;		_setSw_Main
 15112 ;;		_setMain_Exception
 15113 ;; This function uses a non-reentrant model
 15114 ;;
 15115                           
 15116                           
 15117                           ;psect for function _setBuz
 15118  0A01                     _setBuz:	
 15119                           
 15120                           ;incstack = 0
 15121                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15122                           ;setBuz@count stored from wreg
 15123  0A01  0020               	movlb	0	; select bank0
 15124  0A02  00AC               	movwf	setBuz@count
 15125                           
 15126                           ;Buzzer_B1.c: 23: time /= 10;
 15127  0A03  300A               	movlw	10
 15128  0A04  00A0               	movwf	___awdiv@divisor
 15129  0A05  3000               	movlw	0
 15130  0A06  00A1               	movwf	___awdiv@divisor+1
 15131  0A07  082A               	movf	setBuz@time+1,w
 15132  0A08  01A3               	clrf	___awdiv@dividend+1
 15133  0A09  07A3               	addwf	___awdiv@dividend+1,f
 15134  0A0A  0829               	movf	setBuz@time,w
 15135  0A0B  01A2               	clrf	___awdiv@dividend
 15136  0A0C  07A2               	addwf	___awdiv@dividend,f
 15137  0A0D  3188  20FD  318A   	fcall	___awdiv
 15138  0A10  0020               	movlb	0	; select bank0
 15139  0A11  0821               	movf	?___awdiv+1,w
 15140  0A12  01AA               	clrf	setBuz@time+1
 15141  0A13  07AA               	addwf	setBuz@time+1,f
 15142  0A14  0820               	movf	?___awdiv,w
 15143  0A15  01A9               	clrf	setBuz@time
 15144  0A16  07A9               	addwf	setBuz@time,f
 15145                           
 15146                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15147  0A17  0021               	movlb	1	; select bank1
 15148  0A18  1C2E               	btfss	_Buz1^(0+128),0
 15149  0A19  0008               	return
 15150                           
 15151                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15152  0A1A  18AE               	btfsc	_Buz1^(0+128),1
 15153  0A1B  2A32               	goto	l94
 15154                           
 15155                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15156  0A1C  14AE               	bsf	_Buz1^(0+128),1
 15157                           
 15158                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15159  0A1D  01AF               	clrf	(_Buz1^(0+128)+1)
 15160  0A1E  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 15161                           
 15162                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15163  0A1F  0020               	movlb	0	; select bank0
 15164  0A20  082C               	movf	setBuz@count,w
 15165  0A21  00AB               	movwf	??_setBuz
 15166  0A22  082B               	movf	??_setBuz,w
 15167  0A23  0021               	movlb	1	; select bank1
 15168  0A24  00B1               	movwf	(_Buz1^(0+128)+3)
 15169                           
 15170                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15171  0A25  0020               	movlb	0	; select bank0
 15172  0A26  082A               	movf	setBuz@time+1,w
 15173  0A27  0021               	movlb	1	; select bank1
 15174  0A28  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 15175  0A29  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 15176  0A2A  0020               	movlb	0	; select bank0
 15177  0A2B  0829               	movf	setBuz@time,w
 15178  0A2C  0021               	movlb	1	; select bank1
 15179  0A2D  01B4               	clrf	(_Buz1^(0+128)+6)
 15180  0A2E  07B4               	addwf	(_Buz1^(0+128)+6),f
 15181                           
 15182                           ;Buzzer_B1.c: 30: RB3 = 1;
 15183  0A2F  0020               	movlb	0	; select bank0
 15184  0A30  158D               	bsf	13,3	;volatile
 15185                           
 15186                           ;Buzzer_B1.c: 31: } else {
 15187  0A31  0008               	return
 15188  0A32                     l94:	
 15189                           
 15190                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15191  0A32  19AE               	btfsc	_Buz1^(0+128),3
 15192  0A33  2A46               	goto	l96
 15193                           
 15194                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15195  0A34  15AE               	bsf	_Buz1^(0+128),3
 15196                           
 15197                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15198  0A35  0020               	movlb	0	; select bank0
 15199  0A36  082C               	movf	setBuz@count,w
 15200  0A37  00AB               	movwf	??_setBuz
 15201  0A38  082B               	movf	??_setBuz,w
 15202  0A39  0021               	movlb	1	; select bank1
 15203  0A3A  00B2               	movwf	(_Buz1^(0+128)+4)
 15204                           
 15205                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15206  0A3B  0020               	movlb	0	; select bank0
 15207  0A3C  082A               	movf	setBuz@time+1,w
 15208  0A3D  0021               	movlb	1	; select bank1
 15209  0A3E  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 15210  0A3F  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 15211  0A40  0020               	movlb	0	; select bank0
 15212  0A41  0829               	movf	setBuz@time,w
 15213  0A42  0021               	movlb	1	; select bank1
 15214  0A43  01B6               	clrf	(_Buz1^(0+128)+8)
 15215  0A44  07B6               	addwf	(_Buz1^(0+128)+8),f
 15216                           
 15217                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15218  0A45  0008               	return
 15219  0A46                     l96:	
 15220  0A46  1A2E               	btfsc	_Buz1^(0+128),4
 15221  0A47  0008               	return
 15222                           
 15223                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15224  0A48  162E               	bsf	_Buz1^(0+128),4
 15225                           
 15226                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15227  0A49  0020               	movlb	0	; select bank0
 15228  0A4A  082C               	movf	setBuz@count,w
 15229  0A4B  00AB               	movwf	??_setBuz
 15230  0A4C  082B               	movf	??_setBuz,w
 15231  0A4D  0021               	movlb	1	; select bank1
 15232  0A4E  00B3               	movwf	(_Buz1^(0+128)+5)
 15233                           
 15234                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15235  0A4F  0020               	movlb	0	; select bank0
 15236  0A50  082A               	movf	setBuz@time+1,w
 15237  0A51  0021               	movlb	1	; select bank1
 15238  0A52  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 15239  0A53  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 15240  0A54  0020               	movlb	0	; select bank0
 15241  0A55  0829               	movf	setBuz@time,w
 15242  0A56  0021               	movlb	1	; select bank1
 15243  0A57  01B8               	clrf	(_Buz1^(0+128)+10)
 15244  0A58  07B8               	addwf	(_Buz1^(0+128)+10),f
 15245  0A59  0008               	return
 15246  0A5A                     __end_of_setBuz:	
 15247                           
 15248                           	psect	text97
 15249  08FD                     __ptext97:	
 15250 ;; *************** function ___awdiv *****************
 15251 ;; Defined at:
 15252 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15253 ;; Parameters:    Size  Location     Type
 15254 ;;  divisor         2    0[BANK0 ] int 
 15255 ;;  dividend        2    2[BANK0 ] int 
 15256 ;; Auto vars:     Size  Location     Type
 15257 ;;  quotient        2    7[BANK0 ] int 
 15258 ;;  sign            1    6[BANK0 ] unsigned char 
 15259 ;;  counter         1    5[BANK0 ] unsigned char 
 15260 ;; Return value:  Size  Location     Type
 15261 ;;                  2    0[BANK0 ] int 
 15262 ;; Registers used:
 15263 ;;		wreg, status,2, status,0
 15264 ;; Tracked objects:
 15265 ;;		On entry : 0/0
 15266 ;;		On exit  : 0/0
 15267 ;;		Unchanged: 0/0
 15268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15269 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15272 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15273 ;;Total ram usage:        9 bytes
 15274 ;; Hardware stack levels used:    1
 15275 ;; Hardware stack levels required when called:    5
 15276 ;; This function calls:
 15277 ;;		Nothing
 15278 ;; This function is called by:
 15279 ;;		_setBuz
 15280 ;; This function uses a non-reentrant model
 15281 ;;
 15282                           
 15283                           
 15284                           ;psect for function ___awdiv
 15285  08FD                     ___awdiv:	
 15286                           
 15287                           ;incstack = 0
 15288                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15289  08FD  0020               	movlb	0	; select bank0
 15290  08FE  01A6               	clrf	___awdiv@sign
 15291  08FF  1FA1               	btfss	___awdiv@divisor+1,7
 15292  0900  2908               	goto	l8150
 15293  0901  09A0               	comf	___awdiv@divisor,f
 15294  0902  09A1               	comf	___awdiv@divisor+1,f
 15295  0903  0AA0               	incf	___awdiv@divisor,f
 15296  0904  1903               	skipnz
 15297  0905  0AA1               	incf	___awdiv@divisor+1,f
 15298  0906  01A6               	clrf	___awdiv@sign
 15299  0907  0AA6               	incf	___awdiv@sign,f
 15300  0908                     l8150:	
 15301  0908  1FA3               	btfss	___awdiv@dividend+1,7
 15302  0909  2913               	goto	l8156
 15303  090A  09A2               	comf	___awdiv@dividend,f
 15304  090B  09A3               	comf	___awdiv@dividend+1,f
 15305  090C  0AA2               	incf	___awdiv@dividend,f
 15306  090D  1903               	skipnz
 15307  090E  0AA3               	incf	___awdiv@dividend+1,f
 15308  090F  3001               	movlw	1
 15309  0910  00A4               	movwf	??___awdiv
 15310  0911  0824               	movf	??___awdiv,w
 15311  0912  06A6               	xorwf	___awdiv@sign,f
 15312  0913                     l8156:	
 15313  0913  01A7               	clrf	___awdiv@quotient
 15314  0914  01A8               	clrf	___awdiv@quotient+1
 15315  0915  0821               	movf	___awdiv@divisor+1,w
 15316  0916  0420               	iorwf	___awdiv@divisor,w
 15317  0917  1903               	skipnz
 15318  0918  2942               	goto	l8178
 15319  0919  01A5               	clrf	___awdiv@counter
 15320  091A  0AA5               	incf	___awdiv@counter,f
 15321  091B                     l8166:	
 15322  091B  1BA1               	btfsc	___awdiv@divisor+1,7
 15323  091C  2927               	goto	l8168
 15324  091D  3001               	movlw	1
 15325  091E                     u8385:	
 15326  091E  35A0               	lslf	___awdiv@divisor,f
 15327  091F  0DA1               	rlf	___awdiv@divisor+1,f
 15328  0920  0B89               	decfsz	9,f
 15329  0921  291E               	goto	u8385
 15330  0922  3001               	movlw	1
 15331  0923  00A4               	movwf	??___awdiv
 15332  0924  0824               	movf	??___awdiv,w
 15333  0925  07A5               	addwf	___awdiv@counter,f
 15334  0926  291B               	goto	l8166
 15335  0927                     l8168:	
 15336  0927  3001               	movlw	1
 15337  0928                     u8405:	
 15338  0928  35A7               	lslf	___awdiv@quotient,f
 15339  0929  0DA8               	rlf	___awdiv@quotient+1,f
 15340  092A  0B89               	decfsz	9,f
 15341  092B  2928               	goto	u8405
 15342  092C  0821               	movf	___awdiv@divisor+1,w
 15343  092D  0223               	subwf	___awdiv@dividend+1,w
 15344  092E  1D03               	skipz
 15345  092F  2932               	goto	u8415
 15346  0930  0820               	movf	___awdiv@divisor,w
 15347  0931  0222               	subwf	___awdiv@dividend,w
 15348  0932                     u8415:	
 15349  0932  1C03               	skipc
 15350  0933  2939               	goto	l8174
 15351  0934  0820               	movf	___awdiv@divisor,w
 15352  0935  02A2               	subwf	___awdiv@dividend,f
 15353  0936  0821               	movf	___awdiv@divisor+1,w
 15354  0937  3BA3               	subwfb	___awdiv@dividend+1,f
 15355  0938  1427               	bsf	___awdiv@quotient,0
 15356  0939                     l8174:	
 15357  0939  3001               	movlw	1
 15358  093A                     u8425:	
 15359  093A  36A1               	lsrf	___awdiv@divisor+1,f
 15360  093B  0CA0               	rrf	___awdiv@divisor,f
 15361  093C  0B89               	decfsz	9,f
 15362  093D  293A               	goto	u8425
 15363  093E  3001               	movlw	1
 15364  093F  02A5               	subwf	___awdiv@counter,f
 15365  0940  1D03               	btfss	3,2
 15366  0941  2927               	goto	l8168
 15367  0942                     l8178:	
 15368  0942  0826               	movf	___awdiv@sign,w
 15369  0943  1903               	btfsc	3,2
 15370  0944  294A               	goto	l8182
 15371  0945  09A7               	comf	___awdiv@quotient,f
 15372  0946  09A8               	comf	___awdiv@quotient+1,f
 15373  0947  0AA7               	incf	___awdiv@quotient,f
 15374  0948  1903               	skipnz
 15375  0949  0AA8               	incf	___awdiv@quotient+1,f
 15376  094A                     l8182:	
 15377  094A  0828               	movf	___awdiv@quotient+1,w
 15378  094B  01A1               	clrf	?___awdiv+1
 15379  094C  07A1               	addwf	?___awdiv+1,f
 15380  094D  0827               	movf	___awdiv@quotient,w
 15381  094E  01A0               	clrf	?___awdiv
 15382  094F  07A0               	addwf	?___awdiv,f
 15383  0950  0008               	return
 15384  0951                     __end_of___awdiv:	
 15385                           
 15386                           	psect	text98
 15387  1E29                     __ptext98:	
 15388 ;; *************** function _DelayOff_Initialization *****************
 15389 ;; Defined at:
 15390 ;;		line 26 in file "../src/DelayOff_B1.c"
 15391 ;; Parameters:    Size  Location     Type
 15392 ;;		None
 15393 ;; Auto vars:     Size  Location     Type
 15394 ;;		None
 15395 ;; Return value:  Size  Location     Type
 15396 ;;		None               void
 15397 ;; Registers used:
 15398 ;;		wreg, status,2, status,0, pclath, cstack
 15399 ;; Tracked objects:
 15400 ;;		On entry : 0/0
 15401 ;;		On exit  : 0/0
 15402 ;;		Unchanged: 0/0
 15403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15408 ;;Total ram usage:        0 bytes
 15409 ;; Hardware stack levels used:    1
 15410 ;; Hardware stack levels required when called:    7
 15411 ;; This function calls:
 15412 ;;		_DlyOff_Initialization
 15413 ;; This function is called by:
 15414 ;;		_main
 15415 ;; This function uses a non-reentrant model
 15416 ;;
 15417                           
 15418                           
 15419                           ;psect for function _DelayOff_Initialization
 15420  1E29                     _DelayOff_Initialization:	
 15421                           
 15422                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15423                           
 15424                           ;incstack = 0
 15425                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 15426  1E29  3001               	movlw	1
 15427  1E2A  319E  2608  319E   	fcall	_DlyOff_Initialization
 15428                           
 15429                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 15430  1E2D  3002               	movlw	2
 15431  1E2E  319E  2608         	fcall	_DlyOff_Initialization
 15432  1E30  0008               	return
 15433  1E31                     __end_of_DelayOff_Initialization:	
 15434                           
 15435                           	psect	text99
 15436  1E08                     __ptext99:	
 15437 ;; *************** function _DlyOff_Initialization *****************
 15438 ;; Defined at:
 15439 ;;		line 56 in file "../src/DelayOff_B1.c"
 15440 ;; Parameters:    Size  Location     Type
 15441 ;;  sw              1    wreg     unsigned char 
 15442 ;; Auto vars:     Size  Location     Type
 15443 ;;  sw              1    2[BANK0 ] unsigned char 
 15444 ;; Return value:  Size  Location     Type
 15445 ;;		None               void
 15446 ;; Registers used:
 15447 ;;		wreg, status,2, status,0, pclath, cstack
 15448 ;; Tracked objects:
 15449 ;;		On entry : 0/0
 15450 ;;		On exit  : 0/0
 15451 ;;		Unchanged: 0/0
 15452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15454 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15456 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15457 ;;Total ram usage:        1 bytes
 15458 ;; Hardware stack levels used:    1
 15459 ;; Hardware stack levels required when called:    6
 15460 ;; This function calls:
 15461 ;;		_DelayOffPointSelect
 15462 ;; This function is called by:
 15463 ;;		_DelayOff_Initialization
 15464 ;; This function uses a non-reentrant model
 15465 ;;
 15466                           
 15467                           
 15468                           ;psect for function _DlyOff_Initialization
 15469  1E08                     _DlyOff_Initialization:	
 15470                           
 15471                           ;incstack = 0
 15472                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 15473                           ;DlyOff_Initialization@sw stored from wreg
 15474  1E08  0020               	movlb	0	; select bank0
 15475  1E09  00A2               	movwf	DlyOff_Initialization@sw
 15476                           
 15477                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15478  1E0A  0822               	movf	DlyOff_Initialization@sw,w
 15479  1E0B  3191  2103         	fcall	_DelayOffPointSelect
 15480  1E0D  0008               	return
 15481  1E0E                     __end_of_DlyOff_Initialization:	
 15482                           
 15483                           	psect	text100
 15484  1103                     __ptext100:	
 15485 ;; *************** function _DelayOffPointSelect *****************
 15486 ;; Defined at:
 15487 ;;		line 7 in file "../src/DelayOff_B1.c"
 15488 ;; Parameters:    Size  Location     Type
 15489 ;;  sw              1    wreg     unsigned char 
 15490 ;; Auto vars:     Size  Location     Type
 15491 ;;  sw              1    1[BANK0 ] unsigned char 
 15492 ;; Return value:  Size  Location     Type
 15493 ;;		None               void
 15494 ;; Registers used:
 15495 ;;		wreg
 15496 ;; Tracked objects:
 15497 ;;		On entry : 0/0
 15498 ;;		On exit  : 0/0
 15499 ;;		Unchanged: 0/0
 15500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15502 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15504 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15505 ;;Total ram usage:        2 bytes
 15506 ;; Hardware stack levels used:    1
 15507 ;; Hardware stack levels required when called:    5
 15508 ;; This function calls:
 15509 ;;		Nothing
 15510 ;; This function is called by:
 15511 ;;		_DlyOff_Initialization
 15512 ;;		_DlyOff_Main
 15513 ;;		_setDelayOff_GO
 15514 ;;		_getDelayOff_GO
 15515 ;; This function uses a non-reentrant model
 15516 ;;
 15517                           
 15518                           
 15519                           ;psect for function _DelayOffPointSelect
 15520  1103                     _DelayOffPointSelect:	
 15521                           
 15522                           ;incstack = 0
 15523                           ; Regs used in _DelayOffPointSelect: [wreg]
 15524                           ;DelayOffPointSelect@sw stored from wreg
 15525  1103  0020               	movlb	0	; select bank0
 15526  1104  00A1               	movwf	DelayOffPointSelect@sw
 15527                           
 15528                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15529  1105  0821               	movf	DelayOffPointSelect@sw,w
 15530  1106  3A01               	xorlw	1
 15531  1107  1D03               	skipz
 15532  1108  290F               	goto	l8106
 15533                           
 15534                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15535  1109  30D7               	movlw	_DlySw1& (0+255)
 15536  110A  00A0               	movwf	??_DelayOffPointSelect
 15537  110B  0820               	movf	??_DelayOffPointSelect,w
 15538  110C  0021               	movlb	1	; select bank1
 15539  110D  00C9               	movwf	_DelayOff^(0+128)
 15540                           
 15541                           ;DelayOff_B1.c: 11: }
 15542  110E  0008               	return
 15543  110F                     l8106:	
 15544                           
 15545                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 15546  110F  0020               	movlb	0	; select bank0
 15547  1110  0821               	movf	DelayOffPointSelect@sw,w
 15548  1111  3A02               	xorlw	2
 15549  1112  1D03               	skipz
 15550  1113  0008               	return
 15551                           
 15552                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 15553  1114  30DC               	movlw	_DlySw2& (0+255)
 15554  1115  00A0               	movwf	??_DelayOffPointSelect
 15555  1116  0820               	movf	??_DelayOffPointSelect,w
 15556  1117  0021               	movlb	1	; select bank1
 15557  1118  00C9               	movwf	_DelayOff^(0+128)
 15558  1119  0008               	return
 15559  111A                     __end_of_DelayOffPointSelect:	
 15560                           
 15561                           	psect	text101
 15562  10C4                     __ptext101:	
 15563 ;; *************** function _CC2500_PowerOnInitial *****************
 15564 ;; Defined at:
 15565 ;;		line 119 in file "../src/CC2500_B1.c"
 15566 ;; Parameters:    Size  Location     Type
 15567 ;;		None
 15568 ;; Auto vars:     Size  Location     Type
 15569 ;;		None
 15570 ;; Return value:  Size  Location     Type
 15571 ;;		None               void
 15572 ;; Registers used:
 15573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15574 ;; Tracked objects:
 15575 ;;		On entry : 0/0
 15576 ;;		On exit  : 0/0
 15577 ;;		Unchanged: 0/0
 15578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15583 ;;Total ram usage:        0 bytes
 15584 ;; Hardware stack levels used:    1
 15585 ;; Hardware stack levels required when called:    8
 15586 ;; This function calls:
 15587 ;;		_CC2500_ClearRXFIFO
 15588 ;;		_CC2500_ClearTXFIFO
 15589 ;;		_CC2500_FrequencyCabr
 15590 ;;		_CC2500_InitPATable
 15591 ;;		_CC2500_InitSetREG
 15592 ;;		_CC2500_PowerRST
 15593 ;;		_CC2500_SIDLEMode
 15594 ;; This function is called by:
 15595 ;;		_main
 15596 ;; This function uses a non-reentrant model
 15597 ;;
 15598                           
 15599                           
 15600                           ;psect for function _CC2500_PowerOnInitial
 15601  10C4                     _CC2500_PowerOnInitial:	
 15602                           
 15603                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 15604                           
 15605                           ;incstack = 0
 15606                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15607  10C4  3196  2685  3190   	fcall	_CC2500_PowerRST
 15608                           
 15609                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 15610  10C7  3193  2333  3190   	fcall	_CC2500_InitSetREG
 15611                           
 15612                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 15613  10CA  3191  21B9  3190   	fcall	_CC2500_InitPATable
 15614                           
 15615                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 15616  10CD  319D  25F7  3190   	fcall	_CC2500_ClearTXFIFO
 15617                           
 15618                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 15619  10D0  319D  25F3  3190   	fcall	_CC2500_ClearRXFIFO
 15620                           
 15621                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 15622  10D3  319E  2673  3190   	fcall	_CC2500_FrequencyCabr
 15623                           
 15624                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 15625  10D6  319D  25FB         	fcall	_CC2500_SIDLEMode
 15626  10D8  0008               	return
 15627  10D9                     __end_of_CC2500_PowerOnInitial:	
 15628                           
 15629                           	psect	text102
 15630  1DFB                     __ptext102:	
 15631 ;; *************** function _CC2500_SIDLEMode *****************
 15632 ;; Defined at:
 15633 ;;		line 209 in file "../src/CC2500_B1.c"
 15634 ;; Parameters:    Size  Location     Type
 15635 ;;		None
 15636 ;; Auto vars:     Size  Location     Type
 15637 ;;		None
 15638 ;; Return value:  Size  Location     Type
 15639 ;;		None               void
 15640 ;; Registers used:
 15641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15642 ;; Tracked objects:
 15643 ;;		On entry : 0/0
 15644 ;;		On exit  : 0/0
 15645 ;;		Unchanged: 0/0
 15646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15651 ;;Total ram usage:        0 bytes
 15652 ;; Hardware stack levels used:    1
 15653 ;; Hardware stack levels required when called:    7
 15654 ;; This function calls:
 15655 ;;		_CC2500_WriteCommand
 15656 ;; This function is called by:
 15657 ;;		_CC2500_PowerOnInitial
 15658 ;; This function uses a non-reentrant model
 15659 ;;
 15660                           
 15661                           
 15662                           ;psect for function _CC2500_SIDLEMode
 15663  1DFB                     _CC2500_SIDLEMode:	
 15664                           
 15665                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 15666                           
 15667                           ;incstack = 0
 15668                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15669  1DFB  3036               	movlw	54
 15670  1DFC  3191  214C         	fcall	_CC2500_WriteCommand
 15671  1DFE  0008               	return
 15672  1DFF                     __end_of_CC2500_SIDLEMode:	
 15673                           
 15674                           	psect	text103
 15675  1685                     __ptext103:	
 15676 ;; *************** function _CC2500_PowerRST *****************
 15677 ;; Defined at:
 15678 ;;		line 132 in file "../src/CC2500_B1.c"
 15679 ;; Parameters:    Size  Location     Type
 15680 ;;		None
 15681 ;; Auto vars:     Size  Location     Type
 15682 ;;		None
 15683 ;; Return value:  Size  Location     Type
 15684 ;;		None               void
 15685 ;; Registers used:
 15686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15687 ;; Tracked objects:
 15688 ;;		On entry : 0/0
 15689 ;;		On exit  : 0/0
 15690 ;;		Unchanged: 0/0
 15691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15694 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15695 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15696 ;;Total ram usage:        1 bytes
 15697 ;; Hardware stack levels used:    1
 15698 ;; Hardware stack levels required when called:    6
 15699 ;; This function calls:
 15700 ;;		_CC2500_WriteByte
 15701 ;;		_DelayTime_1us
 15702 ;;		_Timeout_Counter
 15703 ;;		_set_TimeoutCleared
 15704 ;; This function is called by:
 15705 ;;		_CC2500_PowerOnInitial
 15706 ;; This function uses a non-reentrant model
 15707 ;;
 15708                           
 15709                           
 15710                           ;psect for function _CC2500_PowerRST
 15711  1685                     _CC2500_PowerRST:	
 15712                           
 15713                           ;CC2500_B1.c: 133: RC1 = 0;
 15714                           
 15715                           ;incstack = 0
 15716                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15717  1685  0020               	movlb	0	; select bank0
 15718  1686  108E               	bcf	14,1	;volatile
 15719                           
 15720                           ;CC2500_B1.c: 134: RC0 = 0;
 15721  1687  100E               	bcf	14,0	;volatile
 15722                           
 15723                           ;CC2500_B1.c: 135: RC4 = 1;
 15724  1688  160E               	bsf	14,4	;volatile
 15725                           
 15726                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 15727  1689  300A               	movlw	10
 15728  168A  00A0               	movwf	DelayTime_1us@count
 15729  168B  3000               	movlw	0
 15730  168C  00A1               	movwf	DelayTime_1us@count+1
 15731  168D  3192  22E4  3196   	fcall	_DelayTime_1us
 15732                           
 15733                           ;CC2500_B1.c: 137: RC4 = 0;
 15734  1690  0020               	movlb	0	; select bank0
 15735  1691  120E               	bcf	14,4	;volatile
 15736                           
 15737                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 15738  1692  300A               	movlw	10
 15739  1693  00A0               	movwf	DelayTime_1us@count
 15740  1694  3000               	movlw	0
 15741  1695  00A1               	movwf	DelayTime_1us@count+1
 15742  1696  3192  22E4  3196   	fcall	_DelayTime_1us
 15743                           
 15744                           ;CC2500_B1.c: 139: RC4 = 1;
 15745  1699  0020               	movlb	0	; select bank0
 15746  169A  160E               	bsf	14,4	;volatile
 15747                           
 15748                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 15749  169B  3028               	movlw	40
 15750  169C  00A0               	movwf	DelayTime_1us@count
 15751  169D  3000               	movlw	0
 15752  169E  00A1               	movwf	DelayTime_1us@count+1
 15753  169F  3192  22E4  3196   	fcall	_DelayTime_1us
 15754                           
 15755                           ;CC2500_B1.c: 141: RC4 = 0;
 15756  16A2  0020               	movlb	0	; select bank0
 15757  16A3  120E               	bcf	14,4	;volatile
 15758                           
 15759                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 15760  16A4  3030               	movlw	48
 15761  16A5  00A6               	movwf	??_CC2500_PowerRST
 15762  16A6  0826               	movf	??_CC2500_PowerRST,w
 15763  16A7  0021               	movlb	1	; select bank1
 15764  16A8  00D0               	movwf	_SPI0Buffer^(0+128)
 15765                           
 15766                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 15767  16A9  2EAD               	goto	l9062
 15768  16AA                     l9060:	
 15769                           
 15770                           ;CC2500_B1.c: 144: Timeout_Counter();
 15771  16AA  3190  20AF  3196   	fcall	_Timeout_Counter
 15772  16AD                     l9062:	
 15773  16AD  0020               	movlb	0	; select bank0
 15774  16AE  1D0E               	btfss	14,2	;volatile
 15775  16AF  2EB3               	goto	l9066
 15776  16B0  0021               	movlb	1	; select bank1
 15777  16B1  1D2B               	btfss	(_myMain^(0+128)+11),2
 15778  16B2  2EAA               	goto	l9060
 15779  16B3                     l9066:	
 15780                           
 15781                           ;CC2500_B1.c: 145: };
 15782                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 15783  16B3  319E  2603  3196   	fcall	_set_TimeoutCleared
 15784                           
 15785                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 15786  16B6  3191  211A  3196   	fcall	_CC2500_WriteByte
 15787                           
 15788                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 15789  16B9  2EBD               	goto	l9072
 15790  16BA                     l9070:	
 15791                           
 15792                           ;CC2500_B1.c: 149: Timeout_Counter();
 15793  16BA  3190  20AF  3196   	fcall	_Timeout_Counter
 15794  16BD                     l9072:	
 15795  16BD  0020               	movlb	0	; select bank0
 15796  16BE  1D0E               	btfss	14,2	;volatile
 15797  16BF  2EC3               	goto	l9076
 15798  16C0  0021               	movlb	1	; select bank1
 15799  16C1  1D2B               	btfss	(_myMain^(0+128)+11),2
 15800  16C2  2EBA               	goto	l9070
 15801  16C3                     l9076:	
 15802                           
 15803                           ;CC2500_B1.c: 150: };
 15804                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 15805  16C3  319E  2603         	fcall	_set_TimeoutCleared
 15806                           
 15807                           ;CC2500_B1.c: 152: RC0 = 0;
 15808  16C5  0020               	movlb	0	; select bank0
 15809  16C6  100E               	bcf	14,0	;volatile
 15810                           
 15811                           ;CC2500_B1.c: 153: RC4 = 1;
 15812  16C7  160E               	bsf	14,4	;volatile
 15813  16C8  0008               	return
 15814  16C9                     __end_of_CC2500_PowerRST:	
 15815                           
 15816                           	psect	text104
 15817  1333                     __ptext104:	
 15818 ;; *************** function _CC2500_InitSetREG *****************
 15819 ;; Defined at:
 15820 ;;		line 159 in file "../src/CC2500_B1.c"
 15821 ;; Parameters:    Size  Location     Type
 15822 ;;		None
 15823 ;; Auto vars:     Size  Location     Type
 15824 ;;  loop_c          1    8[BANK0 ] unsigned char 
 15825 ;;  temp2           1    7[BANK0 ] unsigned char 
 15826 ;;  temp1           1    6[BANK0 ] unsigned char 
 15827 ;; Return value:  Size  Location     Type
 15828 ;;		None               void
 15829 ;; Registers used:
 15830 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15831 ;; Tracked objects:
 15832 ;;		On entry : 0/0
 15833 ;;		On exit  : 0/0
 15834 ;;		Unchanged: 0/0
 15835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15837 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15838 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15839 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15840 ;;Total ram usage:        4 bytes
 15841 ;; Hardware stack levels used:    1
 15842 ;; Hardware stack levels required when called:    7
 15843 ;; This function calls:
 15844 ;;		_CC2500_WriteREG
 15845 ;; This function is called by:
 15846 ;;		_CC2500_PowerOnInitial
 15847 ;; This function uses a non-reentrant model
 15848 ;;
 15849                           
 15850                           
 15851                           ;psect for function _CC2500_InitSetREG
 15852  1333                     _CC2500_InitSetREG:	
 15853                           
 15854                           ;CC2500_B1.c: 160: unsigned char loop_c;
 15855                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 15856                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 15857                           
 15858                           ;incstack = 0
 15859                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15860  1333  0020               	movlb	0	; select bank0
 15861  1334  01A8               	clrf	CC2500_InitSetREG@loop_c
 15862  1335                     L5:	
 15863  1335  302F               	movlw	47
 15864  1336  0228               	subwf	CC2500_InitSetREG@loop_c,w
 15865  1337  1803               	btfsc	3,0
 15866  1338  0008               	return
 15867                           
 15868                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 15869  1339  0828               	movf	CC2500_InitSetREG@loop_c,w
 15870  133A  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 15871  133B  0084               	movwf	4
 15872  133C  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 15873  133D  1803               	skipnc
 15874  133E  3E01               	addlw	1
 15875  133F  0085               	movwf	5
 15876  1340  0800               	movf	0,w	;code access
 15877  1341  00A5               	movwf	??_CC2500_InitSetREG
 15878  1342  0825               	movf	??_CC2500_InitSetREG,w
 15879  1343  00A6               	movwf	CC2500_InitSetREG@temp1
 15880                           
 15881                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 15882  1344  0828               	movf	CC2500_InitSetREG@loop_c,w
 15883  1345  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 15884  1346  0084               	movwf	4
 15885  1347  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 15886  1348  1803               	skipnc
 15887  1349  3E01               	addlw	1
 15888  134A  0085               	movwf	5
 15889  134B  0800               	movf	0,w	;code access
 15890  134C  00A5               	movwf	??_CC2500_InitSetREG
 15891  134D  0825               	movf	??_CC2500_InitSetREG,w
 15892  134E  00A7               	movwf	CC2500_InitSetREG@temp2
 15893                           
 15894                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 15895  134F  0827               	movf	CC2500_InitSetREG@temp2,w
 15896  1350  00A5               	movwf	??_CC2500_InitSetREG
 15897  1351  0825               	movf	??_CC2500_InitSetREG,w
 15898  1352  00A2               	movwf	CC2500_WriteREG@value
 15899  1353  0826               	movf	CC2500_InitSetREG@temp1,w
 15900  1354  3192  2279  3193   	fcall	_CC2500_WriteREG
 15901  1357  3001               	movlw	1
 15902  1358  0020               	movlb	0	; select bank0
 15903  1359  00A5               	movwf	??_CC2500_InitSetREG
 15904  135A  0825               	movf	??_CC2500_InitSetREG,w
 15905  135B  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 15906  135C  2B35               	goto	L5
 15907  135D                     __end_of_CC2500_InitSetREG:	
 15908                           
 15909                           	psect	text105
 15910  11B9                     __ptext105:	
 15911 ;; *************** function _CC2500_InitPATable *****************
 15912 ;; Defined at:
 15913 ;;		line 174 in file "../src/CC2500_B1.c"
 15914 ;; Parameters:    Size  Location     Type
 15915 ;;		None
 15916 ;; Auto vars:     Size  Location     Type
 15917 ;;  loop_d          1    7[BANK0 ] unsigned char 
 15918 ;;  temp            1    6[BANK0 ] unsigned char 
 15919 ;; Return value:  Size  Location     Type
 15920 ;;		None               void
 15921 ;; Registers used:
 15922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15923 ;; Tracked objects:
 15924 ;;		On entry : 0/0
 15925 ;;		On exit  : 0/0
 15926 ;;		Unchanged: 0/0
 15927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15929 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15930 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15931 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15932 ;;Total ram usage:        3 bytes
 15933 ;; Hardware stack levels used:    1
 15934 ;; Hardware stack levels required when called:    7
 15935 ;; This function calls:
 15936 ;;		_CC2500_WriteREG
 15937 ;; This function is called by:
 15938 ;;		_CC2500_PowerOnInitial
 15939 ;; This function uses a non-reentrant model
 15940 ;;
 15941                           
 15942                           
 15943                           ;psect for function _CC2500_InitPATable
 15944  11B9                     _CC2500_InitPATable:	
 15945                           
 15946                           ;CC2500_B1.c: 175: unsigned char loop_d;
 15947                           ;CC2500_B1.c: 176: unsigned char temp;
 15948                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 15949                           
 15950                           ;incstack = 0
 15951                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15952  11B9  0020               	movlb	0	; select bank0
 15953  11BA  01A7               	clrf	CC2500_InitPATable@loop_d
 15954  11BB                     L6:	
 15955  11BB  3008               	movlw	8
 15956  11BC  0227               	subwf	CC2500_InitPATable@loop_d,w
 15957  11BD  1803               	btfsc	3,0
 15958  11BE  0008               	return
 15959                           
 15960                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 15961  11BF  0827               	movf	CC2500_InitPATable@loop_d,w
 15962  11C0  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 15963  11C1  0084               	movwf	4
 15964  11C2  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 15965  11C3  1803               	skipnc
 15966  11C4  3E01               	addlw	1
 15967  11C5  0085               	movwf	5
 15968  11C6  0800               	movf	0,w	;code access
 15969  11C7  00A5               	movwf	??_CC2500_InitPATable
 15970  11C8  0825               	movf	??_CC2500_InitPATable,w
 15971  11C9  00A6               	movwf	CC2500_InitPATable@temp
 15972                           
 15973                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 15974  11CA  0826               	movf	CC2500_InitPATable@temp,w
 15975  11CB  00A5               	movwf	??_CC2500_InitPATable
 15976  11CC  0825               	movf	??_CC2500_InitPATable,w
 15977  11CD  00A2               	movwf	CC2500_WriteREG@value
 15978  11CE  303E               	movlw	62
 15979  11CF  3192  2279  3191   	fcall	_CC2500_WriteREG
 15980  11D2  3001               	movlw	1
 15981  11D3  0020               	movlb	0	; select bank0
 15982  11D4  00A5               	movwf	??_CC2500_InitPATable
 15983  11D5  0825               	movf	??_CC2500_InitPATable,w
 15984  11D6  07A7               	addwf	CC2500_InitPATable@loop_d,f
 15985  11D7  29BB               	goto	L6
 15986  11D8                     __end_of_CC2500_InitPATable:	
 15987                           
 15988                           	psect	text106
 15989  1279                     __ptext106:	
 15990 ;; *************** function _CC2500_WriteREG *****************
 15991 ;; Defined at:
 15992 ;;		line 251 in file "../src/CC2500_B1.c"
 15993 ;; Parameters:    Size  Location     Type
 15994 ;;  w_addr          1    wreg     unsigned char 
 15995 ;;  value           1    2[BANK0 ] unsigned char 
 15996 ;; Auto vars:     Size  Location     Type
 15997 ;;  w_addr          1    4[BANK0 ] unsigned char 
 15998 ;; Return value:  Size  Location     Type
 15999 ;;		None               void
 16000 ;; Registers used:
 16001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16002 ;; Tracked objects:
 16003 ;;		On entry : 0/0
 16004 ;;		On exit  : 0/0
 16005 ;;		Unchanged: 0/0
 16006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16007 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16010 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16011 ;;Total ram usage:        3 bytes
 16012 ;; Hardware stack levels used:    1
 16013 ;; Hardware stack levels required when called:    6
 16014 ;; This function calls:
 16015 ;;		_CC2500_WriteByte
 16016 ;;		_Timeout_Counter
 16017 ;;		_set_TimeoutCleared
 16018 ;; This function is called by:
 16019 ;;		_CC2500_InitSetREG
 16020 ;;		_CC2500_InitPATable
 16021 ;; This function uses a non-reentrant model
 16022 ;;
 16023                           
 16024                           
 16025                           ;psect for function _CC2500_WriteREG
 16026  1279                     _CC2500_WriteREG:	
 16027                           
 16028                           ;incstack = 0
 16029                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16030                           ;CC2500_WriteREG@w_addr stored from wreg
 16031  1279  0020               	movlb	0	; select bank0
 16032  127A  00A4               	movwf	CC2500_WriteREG@w_addr
 16033                           
 16034                           ;CC2500_B1.c: 252: RC4 = 0;
 16035  127B  120E               	bcf	14,4	;volatile
 16036                           
 16037                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 16038  127C  0824               	movf	CC2500_WriteREG@w_addr,w
 16039  127D  00A3               	movwf	??_CC2500_WriteREG
 16040  127E  0823               	movf	??_CC2500_WriteREG,w
 16041  127F  0021               	movlb	1	; select bank1
 16042  1280  00D0               	movwf	_SPI0Buffer^(0+128)
 16043                           
 16044                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 16045  1281  2A85               	goto	l8798
 16046  1282                     l8796:	
 16047                           
 16048                           ;CC2500_B1.c: 255: Timeout_Counter();
 16049  1282  3190  20AF  3192   	fcall	_Timeout_Counter
 16050  1285                     l8798:	
 16051  1285  0020               	movlb	0	; select bank0
 16052  1286  1D0E               	btfss	14,2	;volatile
 16053  1287  2A8B               	goto	l8802
 16054  1288  0021               	movlb	1	; select bank1
 16055  1289  1D2B               	btfss	(_myMain^(0+128)+11),2
 16056  128A  2A82               	goto	l8796
 16057  128B                     l8802:	
 16058                           
 16059                           ;CC2500_B1.c: 256: };
 16060                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 16061  128B  319E  2603  3192   	fcall	_set_TimeoutCleared
 16062                           
 16063                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 16064  128E  3191  211A  3192   	fcall	_CC2500_WriteByte
 16065                           
 16066                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 16067  1291  0020               	movlb	0	; select bank0
 16068  1292  0822               	movf	CC2500_WriteREG@value,w
 16069  1293  00A3               	movwf	??_CC2500_WriteREG
 16070  1294  0823               	movf	??_CC2500_WriteREG,w
 16071  1295  0021               	movlb	1	; select bank1
 16072  1296  00D0               	movwf	_SPI0Buffer^(0+128)
 16073                           
 16074                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 16075  1297  3191  211A         	fcall	_CC2500_WriteByte
 16076                           
 16077                           ;CC2500_B1.c: 262: RC4 = 1;
 16078  1299  0020               	movlb	0	; select bank0
 16079  129A  160E               	bsf	14,4	;volatile
 16080  129B  0008               	return
 16081  129C                     __end_of_CC2500_WriteREG:	
 16082                           
 16083                           	psect	text107
 16084  1E73                     __ptext107:	
 16085 ;; *************** function _CC2500_FrequencyCabr *****************
 16086 ;; Defined at:
 16087 ;;		line 201 in file "../src/CC2500_B1.c"
 16088 ;; Parameters:    Size  Location     Type
 16089 ;;		None
 16090 ;; Auto vars:     Size  Location     Type
 16091 ;;		None
 16092 ;; Return value:  Size  Location     Type
 16093 ;;		None               void
 16094 ;; Registers used:
 16095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16096 ;; Tracked objects:
 16097 ;;		On entry : 0/0
 16098 ;;		On exit  : 0/0
 16099 ;;		Unchanged: 0/0
 16100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16105 ;;Total ram usage:        0 bytes
 16106 ;; Hardware stack levels used:    1
 16107 ;; Hardware stack levels required when called:    7
 16108 ;; This function calls:
 16109 ;;		_CC2500_WriteCommand
 16110 ;;		_DelayTime_1us
 16111 ;; This function is called by:
 16112 ;;		_CC2500_PowerOnInitial
 16113 ;; This function uses a non-reentrant model
 16114 ;;
 16115                           
 16116                           
 16117                           ;psect for function _CC2500_FrequencyCabr
 16118  1E73                     _CC2500_FrequencyCabr:	
 16119                           
 16120                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 16121                           
 16122                           ;incstack = 0
 16123                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16124  1E73  3033               	movlw	51
 16125  1E74  3191  214C  319E   	fcall	_CC2500_WriteCommand
 16126                           
 16127                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 16128  1E77  30E8               	movlw	232
 16129  1E78  0020               	movlb	0	; select bank0
 16130  1E79  00A0               	movwf	DelayTime_1us@count
 16131  1E7A  3003               	movlw	3
 16132  1E7B  00A1               	movwf	DelayTime_1us@count+1
 16133  1E7C  3192  22E4         	fcall	_DelayTime_1us
 16134  1E7E  0008               	return
 16135  1E7F                     __end_of_CC2500_FrequencyCabr:	
 16136                           
 16137                           	psect	text108
 16138  12E4                     __ptext108:	
 16139 ;; *************** function _DelayTime_1us *****************
 16140 ;; Defined at:
 16141 ;;		line 320 in file "../src/CC2500_B1.c"
 16142 ;; Parameters:    Size  Location     Type
 16143 ;;  count           2    0[BANK0 ] int 
 16144 ;; Auto vars:     Size  Location     Type
 16145 ;;  j               2    4[BANK0 ] unsigned int 
 16146 ;;  i               2    2[BANK0 ] unsigned int 
 16147 ;; Return value:  Size  Location     Type
 16148 ;;		None               void
 16149 ;; Registers used:
 16150 ;;		wreg, status,2
 16151 ;; Tracked objects:
 16152 ;;		On entry : 0/0
 16153 ;;		On exit  : 0/0
 16154 ;;		Unchanged: 0/0
 16155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16156 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16157 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16159 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16160 ;;Total ram usage:        6 bytes
 16161 ;; Hardware stack levels used:    1
 16162 ;; Hardware stack levels required when called:    5
 16163 ;; This function calls:
 16164 ;;		Nothing
 16165 ;; This function is called by:
 16166 ;;		_CC2500_PowerRST
 16167 ;;		_CC2500_FrequencyCabr
 16168 ;; This function uses a non-reentrant model
 16169 ;;
 16170                           
 16171                           
 16172                           ;psect for function _DelayTime_1us
 16173  12E4                     _DelayTime_1us:	
 16174                           
 16175                           ;CC2500_B1.c: 321: unsigned int i, j;
 16176                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 16177                           
 16178                           ;incstack = 0
 16179                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16180  12E4  3001               	movlw	1
 16181  12E5  0020               	movlb	0	; select bank0
 16182  12E6  00A2               	movwf	DelayTime_1us@i
 16183  12E7  3000               	movlw	0
 16184  12E8  00A3               	movwf	DelayTime_1us@i+1
 16185  12E9                     l368:	
 16186  12E9  0821               	movf	DelayTime_1us@count+1,w
 16187  12EA  0223               	subwf	DelayTime_1us@i+1,w
 16188  12EB  1D03               	skipz
 16189  12EC  2AEF               	goto	u9305
 16190  12ED  0820               	movf	DelayTime_1us@count,w
 16191  12EE  0222               	subwf	DelayTime_1us@i,w
 16192  12EF                     u9305:	
 16193  12EF  1803               	btfsc	3,0
 16194  12F0  0008               	return
 16195                           
 16196                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 16197  12F1  01A4               	clrf	DelayTime_1us@j
 16198  12F2  01A5               	clrf	DelayTime_1us@j+1
 16199  12F3  3000               	movlw	0
 16200  12F4  0225               	subwf	DelayTime_1us@j+1,w
 16201  12F5  3002               	movlw	2
 16202  12F6  1903               	skipnz
 16203  12F7  0224               	subwf	DelayTime_1us@j,w
 16204  12F8  1803               	btfsc	3,0
 16205  12F9  2B05               	goto	l8790
 16206  12FA                     l8788:	
 16207  12FA  3001               	movlw	1
 16208  12FB  07A4               	addwf	DelayTime_1us@j,f
 16209  12FC  3000               	movlw	0
 16210  12FD  3DA5               	addwfc	DelayTime_1us@j+1,f
 16211  12FE  3000               	movlw	0
 16212  12FF  0225               	subwf	DelayTime_1us@j+1,w
 16213  1300  3002               	movlw	2
 16214  1301  1903               	skipnz
 16215  1302  0224               	subwf	DelayTime_1us@j,w
 16216  1303  1C03               	skipc
 16217  1304  2AFA               	goto	l8788
 16218  1305                     l8790:	
 16219  1305  3001               	movlw	1
 16220  1306  07A2               	addwf	DelayTime_1us@i,f
 16221  1307  3000               	movlw	0
 16222  1308  3DA3               	addwfc	DelayTime_1us@i+1,f
 16223  1309  2AE9               	goto	l368
 16224  130A                     __end_of_DelayTime_1us:	
 16225                           
 16226                           	psect	text109
 16227  1DF7                     __ptext109:	
 16228 ;; *************** function _CC2500_ClearTXFIFO *****************
 16229 ;; Defined at:
 16230 ;;		line 187 in file "../src/CC2500_B1.c"
 16231 ;; Parameters:    Size  Location     Type
 16232 ;;		None
 16233 ;; Auto vars:     Size  Location     Type
 16234 ;;		None
 16235 ;; Return value:  Size  Location     Type
 16236 ;;		None               void
 16237 ;; Registers used:
 16238 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16239 ;; Tracked objects:
 16240 ;;		On entry : 0/0
 16241 ;;		On exit  : 0/0
 16242 ;;		Unchanged: 0/0
 16243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16248 ;;Total ram usage:        0 bytes
 16249 ;; Hardware stack levels used:    1
 16250 ;; Hardware stack levels required when called:    7
 16251 ;; This function calls:
 16252 ;;		_CC2500_WriteCommand
 16253 ;; This function is called by:
 16254 ;;		_CC2500_PowerOnInitial
 16255 ;; This function uses a non-reentrant model
 16256 ;;
 16257                           
 16258                           
 16259                           ;psect for function _CC2500_ClearTXFIFO
 16260  1DF7                     _CC2500_ClearTXFIFO:	
 16261                           
 16262                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 16263                           
 16264                           ;incstack = 0
 16265                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16266  1DF7  303B               	movlw	59
 16267  1DF8  3191  214C         	fcall	_CC2500_WriteCommand
 16268  1DFA  0008               	return
 16269  1DFB                     __end_of_CC2500_ClearTXFIFO:	
 16270                           
 16271                           	psect	text110
 16272  1DF3                     __ptext110:	
 16273 ;; *************** function _CC2500_ClearRXFIFO *****************
 16274 ;; Defined at:
 16275 ;;		line 194 in file "../src/CC2500_B1.c"
 16276 ;; Parameters:    Size  Location     Type
 16277 ;;		None
 16278 ;; Auto vars:     Size  Location     Type
 16279 ;;		None
 16280 ;; Return value:  Size  Location     Type
 16281 ;;		None               void
 16282 ;; Registers used:
 16283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16284 ;; Tracked objects:
 16285 ;;		On entry : 0/0
 16286 ;;		On exit  : 0/0
 16287 ;;		Unchanged: 0/0
 16288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16293 ;;Total ram usage:        0 bytes
 16294 ;; Hardware stack levels used:    1
 16295 ;; Hardware stack levels required when called:    7
 16296 ;; This function calls:
 16297 ;;		_CC2500_WriteCommand
 16298 ;; This function is called by:
 16299 ;;		_CC2500_PowerOnInitial
 16300 ;; This function uses a non-reentrant model
 16301 ;;
 16302                           
 16303                           
 16304                           ;psect for function _CC2500_ClearRXFIFO
 16305  1DF3                     _CC2500_ClearRXFIFO:	
 16306                           
 16307                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 16308                           
 16309                           ;incstack = 0
 16310                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16311  1DF3  303A               	movlw	58
 16312  1DF4  3191  214C         	fcall	_CC2500_WriteCommand
 16313  1DF6  0008               	return
 16314  1DF7                     __end_of_CC2500_ClearRXFIFO:	
 16315                           
 16316                           	psect	text111
 16317  114C                     __ptext111:	
 16318 ;; *************** function _CC2500_WriteCommand *****************
 16319 ;; Defined at:
 16320 ;;		line 285 in file "../src/CC2500_B1.c"
 16321 ;; Parameters:    Size  Location     Type
 16322 ;;  command         1    wreg     unsigned char 
 16323 ;; Auto vars:     Size  Location     Type
 16324 ;;  command         1    3[BANK0 ] unsigned char 
 16325 ;; Return value:  Size  Location     Type
 16326 ;;		None               void
 16327 ;; Registers used:
 16328 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16329 ;; Tracked objects:
 16330 ;;		On entry : 0/0
 16331 ;;		On exit  : 0/0
 16332 ;;		Unchanged: 0/0
 16333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16337 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16338 ;;Total ram usage:        2 bytes
 16339 ;; Hardware stack levels used:    1
 16340 ;; Hardware stack levels required when called:    6
 16341 ;; This function calls:
 16342 ;;		_CC2500_WriteByte
 16343 ;;		_Timeout_Counter
 16344 ;;		_set_TimeoutCleared
 16345 ;; This function is called by:
 16346 ;;		_CC2500_TxData
 16347 ;;		_CC2500_ClearTXFIFO
 16348 ;;		_CC2500_ClearRXFIFO
 16349 ;;		_CC2500_FrequencyCabr
 16350 ;;		_CC2500_SIDLEMode
 16351 ;;		_setRF_Main
 16352 ;;		_RF_RxDisable
 16353 ;; This function uses a non-reentrant model
 16354 ;;
 16355                           
 16356                           
 16357                           ;psect for function _CC2500_WriteCommand
 16358  114C                     _CC2500_WriteCommand:	
 16359                           
 16360                           ;incstack = 0
 16361                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16362                           ;CC2500_WriteCommand@command stored from wreg
 16363  114C  0020               	movlb	0	; select bank0
 16364  114D  00A3               	movwf	CC2500_WriteCommand@command
 16365                           
 16366                           ;CC2500_B1.c: 286: RC4 = 0;
 16367  114E  120E               	bcf	14,4	;volatile
 16368                           
 16369                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 16370  114F  0823               	movf	CC2500_WriteCommand@command,w
 16371  1150  00A2               	movwf	??_CC2500_WriteCommand
 16372  1151  0822               	movf	??_CC2500_WriteCommand,w
 16373  1152  0021               	movlb	1	; select bank1
 16374  1153  00D0               	movwf	_SPI0Buffer^(0+128)
 16375                           
 16376                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 16377  1154  2958               	goto	l8520
 16378  1155                     l8518:	
 16379                           
 16380                           ;CC2500_B1.c: 290: Timeout_Counter();
 16381  1155  3190  20AF  3191   	fcall	_Timeout_Counter
 16382  1158                     l8520:	
 16383  1158  0020               	movlb	0	; select bank0
 16384  1159  1D0E               	btfss	14,2	;volatile
 16385  115A  295E               	goto	l8524
 16386  115B  0021               	movlb	1	; select bank1
 16387  115C  1D2B               	btfss	(_myMain^(0+128)+11),2
 16388  115D  2955               	goto	l8518
 16389  115E                     l8524:	
 16390                           
 16391                           ;CC2500_B1.c: 291: };
 16392                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 16393  115E  319E  2603  3191   	fcall	_set_TimeoutCleared
 16394                           
 16395                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 16396  1161  3191  211A         	fcall	_CC2500_WriteByte
 16397                           
 16398                           ;CC2500_B1.c: 295: RC4 = 1;
 16399  1163  0020               	movlb	0	; select bank0
 16400  1164  160E               	bsf	14,4	;volatile
 16401  1165  0008               	return
 16402  1166                     __end_of_CC2500_WriteCommand:	
 16403                           
 16404                           	psect	text112
 16405  1E03                     __ptext112:	
 16406 ;; *************** function _set_TimeoutCleared *****************
 16407 ;; Defined at:
 16408 ;;		line 283 in file "../src/Main_B1.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;		None
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;		None
 16413 ;; Return value:  Size  Location     Type
 16414 ;;		None               void
 16415 ;; Registers used:
 16416 ;;		status,2
 16417 ;; Tracked objects:
 16418 ;;		On entry : 0/0
 16419 ;;		On exit  : 0/0
 16420 ;;		Unchanged: 0/0
 16421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;Total ram usage:        0 bytes
 16427 ;; Hardware stack levels used:    1
 16428 ;; Hardware stack levels required when called:    5
 16429 ;; This function calls:
 16430 ;;		Nothing
 16431 ;; This function is called by:
 16432 ;;		_CC2500_TxData
 16433 ;;		_CC2500_RxData
 16434 ;;		_CC2500_PowerRST
 16435 ;;		_CC2500_WriteREG
 16436 ;;		_CC2500_WriteCommand
 16437 ;;		_CC2500_ReadStatus
 16438 ;;		_getAD
 16439 ;;		_TouchPower
 16440 ;;		_CC2500_ReadREG
 16441 ;; This function uses a non-reentrant model
 16442 ;;
 16443                           
 16444                           
 16445                           ;psect for function _set_TimeoutCleared
 16446  1E03                     _set_TimeoutCleared:	
 16447                           
 16448                           ;Main_B1.c: 284: myMain.Timeout = 0;
 16449                           
 16450                           ;incstack = 0
 16451                           ; Regs used in _set_TimeoutCleared: [status,2]
 16452  1E03  0021               	movlb	1	; select bank1
 16453  1E04  112B               	bcf	(_myMain^(0+128)+11),2
 16454                           
 16455                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 16456  1E05  01AC               	clrf	(_myMain^(0+128)+12)
 16457  1E06  01AD               	clrf	((_myMain+1)^(0+128)+12)
 16458  1E07  0008               	return
 16459  1E08                     __end_of_set_TimeoutCleared:	
 16460                           
 16461                           	psect	text113
 16462  10AF                     __ptext113:	
 16463 ;; *************** function _Timeout_Counter *****************
 16464 ;; Defined at:
 16465 ;;		line 274 in file "../src/Main_B1.c"
 16466 ;; Parameters:    Size  Location     Type
 16467 ;;		None
 16468 ;; Auto vars:     Size  Location     Type
 16469 ;;		None
 16470 ;; Return value:  Size  Location     Type
 16471 ;;		None               void
 16472 ;; Registers used:
 16473 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16474 ;; Tracked objects:
 16475 ;;		On entry : 0/0
 16476 ;;		On exit  : 0/0
 16477 ;;		Unchanged: 0/0
 16478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16483 ;;Total ram usage:        0 bytes
 16484 ;; Hardware stack levels used:    1
 16485 ;; Hardware stack levels required when called:    5
 16486 ;; This function calls:
 16487 ;;		Nothing
 16488 ;; This function is called by:
 16489 ;;		_CC2500_TxData
 16490 ;;		_CC2500_RxData
 16491 ;;		_CC2500_PowerRST
 16492 ;;		_CC2500_WriteREG
 16493 ;;		_CC2500_WriteCommand
 16494 ;;		_CC2500_ReadStatus
 16495 ;;		_getAD
 16496 ;;		_TouchPower
 16497 ;;		_CC2500_ReadREG
 16498 ;; This function uses a non-reentrant model
 16499 ;;
 16500                           
 16501                           
 16502                           ;psect for function _Timeout_Counter
 16503  10AF                     _Timeout_Counter:	
 16504                           
 16505                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 16506                           
 16507                           ;incstack = 0
 16508                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16509  10AF  3001               	movlw	1
 16510  10B0  0021               	movlb	1	; select bank1
 16511  10B1  07AC               	addwf	(_myMain^(0+128)+12),f
 16512  10B2  3000               	movlw	0
 16513  10B3  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 16514                           
 16515                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 16516  10B4  300C               	movlw	12
 16517  10B5  3EA0               	addlw	_myMain& (0+255)
 16518  10B6  0086               	movwf	6
 16519  10B7  0187               	clrf	7
 16520  10B8  3F40               	moviw [0]fsr1
 16521  10B9  3A10               	xorlw	16
 16522  10BA  1D03               	skipz
 16523  10BB  28BE               	goto	u8715
 16524  10BC  3F41               	moviw [1]fsr1
 16525  10BD  3A27               	xorlw	39
 16526  10BE                     u8715:	
 16527  10BE  1D03               	skipz
 16528  10BF  0008               	return
 16529                           
 16530                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 16531  10C0  01AC               	clrf	(_myMain^(0+128)+12)
 16532  10C1  01AD               	clrf	((_myMain+1)^(0+128)+12)
 16533                           
 16534                           ;Main_B1.c: 278: myMain.Timeout = 1;
 16535  10C2  152B               	bsf	(_myMain^(0+128)+11),2
 16536  10C3  0008               	return
 16537  10C4                     __end_of_Timeout_Counter:	
 16538                           
 16539                           	psect	text114
 16540  111A                     __ptext114:	
 16541 ;; *************** function _CC2500_WriteByte *****************
 16542 ;; Defined at:
 16543 ;;		line 219 in file "../src/CC2500_B1.c"
 16544 ;; Parameters:    Size  Location     Type
 16545 ;;		None
 16546 ;; Auto vars:     Size  Location     Type
 16547 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16548 ;; Return value:  Size  Location     Type
 16549 ;;		None               void
 16550 ;; Registers used:
 16551 ;;		wreg, status,2, status,0
 16552 ;; Tracked objects:
 16553 ;;		On entry : 0/0
 16554 ;;		On exit  : 0/0
 16555 ;;		Unchanged: 0/0
 16556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16558 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16559 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16560 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16561 ;;Total ram usage:        2 bytes
 16562 ;; Hardware stack levels used:    1
 16563 ;; Hardware stack levels required when called:    5
 16564 ;; This function calls:
 16565 ;;		Nothing
 16566 ;; This function is called by:
 16567 ;;		_CC2500_TxData
 16568 ;;		_CC2500_RxData
 16569 ;;		_CC2500_PowerRST
 16570 ;;		_CC2500_WriteREG
 16571 ;;		_CC2500_WriteCommand
 16572 ;;		_CC2500_ReadStatus
 16573 ;;		_CC2500_ReadREG
 16574 ;; This function uses a non-reentrant model
 16575 ;;
 16576                           
 16577                           
 16578                           ;psect for function _CC2500_WriteByte
 16579  111A                     _CC2500_WriteByte:	
 16580                           
 16581                           ;CC2500_B1.c: 220: unsigned char loop_a;
 16582                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 16583                           
 16584                           ;incstack = 0
 16585                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16586  111A  0020               	movlb	0	; select bank0
 16587  111B  01A1               	clrf	CC2500_WriteByte@loop_a
 16588  111C                     L7:	
 16589  111C  3008               	movlw	8
 16590  111D  0221               	subwf	CC2500_WriteByte@loop_a,w
 16591  111E  1803               	btfsc	3,0
 16592  111F  0008               	return
 16593                           
 16594                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 16595  1120  0021               	movlb	1	; select bank1
 16596  1121  1FD0               	btfss	_SPI0Buffer^(0+128),7
 16597  1122  2926               	goto	l324
 16598                           
 16599                           ;CC2500_B1.c: 223: RC0 = 1;
 16600  1123  0020               	movlb	0	; select bank0
 16601  1124  140E               	bsf	14,0	;volatile
 16602  1125  2928               	goto	l325
 16603  1126                     l324:	
 16604                           
 16605                           ;CC2500_B1.c: 224: else
 16606                           ;CC2500_B1.c: 225: RC0 = 0;
 16607  1126  0020               	movlb	0	; select bank0
 16608  1127  100E               	bcf	14,0	;volatile
 16609  1128                     l325:	
 16610                           
 16611                           ;CC2500_B1.c: 226: RC1 = 1;
 16612  1128  148E               	bsf	14,1	;volatile
 16613                           
 16614                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 16615  1129  1003               	clrc
 16616  112A  0021               	movlb	1	; select bank1
 16617  112B  0DD0               	rlf	_SPI0Buffer^(0+128),f
 16618                           
 16619                           ;CC2500_B1.c: 228: RC1 = 0;
 16620  112C  0020               	movlb	0	; select bank0
 16621  112D  108E               	bcf	14,1	;volatile
 16622  112E  3001               	movlw	1
 16623  112F  00A0               	movwf	??_CC2500_WriteByte
 16624  1130  0820               	movf	??_CC2500_WriteByte,w
 16625  1131  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16626  1132  291C               	goto	L7
 16627  1133                     __end_of_CC2500_WriteByte:	
 16628                           
 16629                           	psect	text115
 16630  16C9                     __ptext115:	
 16631 ;; *************** function _Buzzer_Main *****************
 16632 ;; Defined at:
 16633 ;;		line 46 in file "../src/Buzzer_B1.c"
 16634 ;; Parameters:    Size  Location     Type
 16635 ;;		None
 16636 ;; Auto vars:     Size  Location     Type
 16637 ;;		None
 16638 ;; Return value:  Size  Location     Type
 16639 ;;		None               void
 16640 ;; Registers used:
 16641 ;;		wreg, status,2, status,0
 16642 ;; Tracked objects:
 16643 ;;		On entry : 0/0
 16644 ;;		On exit  : 0/0
 16645 ;;		Unchanged: 0/0
 16646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16649 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16650 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16651 ;;Total ram usage:        1 bytes
 16652 ;; Hardware stack levels used:    1
 16653 ;; Hardware stack levels required when called:    5
 16654 ;; This function calls:
 16655 ;;		Nothing
 16656 ;; This function is called by:
 16657 ;;		_main
 16658 ;; This function uses a non-reentrant model
 16659 ;;
 16660                           
 16661                           
 16662                           ;psect for function _Buzzer_Main
 16663  16C9                     _Buzzer_Main:	
 16664                           
 16665                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16666                           
 16667                           ;incstack = 0
 16668                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16669  16C9  0021               	movlb	1	; select bank1
 16670  16CA  1CAE               	btfss	_Buz1^(0+128),1
 16671  16CB  0008               	return
 16672                           
 16673                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16674  16CC  3001               	movlw	1
 16675  16CD  07AF               	addwf	(_Buz1^(0+128)+1),f
 16676  16CE  3000               	movlw	0
 16677  16CF  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 16678                           
 16679                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16680  16D0  0835               	movf	((_Buz1+1)^(0+128)+6),w
 16681  16D1  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 16682  16D2  1D03               	skipz
 16683  16D3  2ED6               	goto	u10625
 16684  16D4  0834               	movf	(_Buz1^(0+128)+6),w
 16685  16D5  022F               	subwf	(_Buz1^(0+128)+1),w
 16686  16D6                     u10625:	
 16687  16D6  1C03               	skipc
 16688  16D7  0008               	return
 16689                           
 16690                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16691  16D8  01AF               	clrf	(_Buz1^(0+128)+1)
 16692  16D9  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16693                           
 16694                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16695  16DA  12AE               	bcf	_Buz1^(0+128),5
 16696  16DB  0020               	movlb	0	; select bank0
 16697  16DC  1D8D               	btfss	13,3	;volatile
 16698  16DD  2EE0               	goto	l9600
 16699  16DE  0021               	movlb	1	; select bank1
 16700  16DF  16AE               	bsf	_Buz1^(0+128),5
 16701  16E0                     l9600:	
 16702                           
 16703                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16704  16E0  0021               	movlb	1	; select bank1
 16705  16E1  1AAE               	btfsc	_Buz1^(0+128),5
 16706  16E2  2F0C               	goto	l104
 16707                           
 16708                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16709  16E3  08B1               	movf	(_Buz1^(0+128)+3),f
 16710  16E4  1D03               	skipz
 16711  16E5  2F08               	goto	l105
 16712                           
 16713                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16714  16E6  1DAE               	btfss	_Buz1^(0+128),3
 16715  16E7  2EF6               	goto	l106
 16716                           
 16717                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 16718  16E8  11AE               	bcf	_Buz1^(0+128),3
 16719                           
 16720                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 16721  16E9  0832               	movf	(_Buz1^(0+128)+4),w
 16722  16EA  0020               	movlb	0	; select bank0
 16723  16EB  00A0               	movwf	??_Buzzer_Main
 16724  16EC  0820               	movf	??_Buzzer_Main,w
 16725  16ED  0021               	movlb	1	; select bank1
 16726  16EE  00B1               	movwf	(_Buz1^(0+128)+3)
 16727                           
 16728                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 16729  16EF  0837               	movf	((_Buz1+1)^(0+128)+8),w
 16730  16F0  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16731  16F1  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16732  16F2  0836               	movf	(_Buz1^(0+128)+8),w
 16733  16F3  01B4               	clrf	(_Buz1^(0+128)+6)
 16734  16F4  07B4               	addwf	(_Buz1^(0+128)+6),f
 16735                           
 16736                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 16737  16F5  0008               	return
 16738  16F6                     l106:	
 16739  16F6  1E2E               	btfss	_Buz1^(0+128),4
 16740  16F7  2F06               	goto	l108
 16741                           
 16742                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 16743  16F8  122E               	bcf	_Buz1^(0+128),4
 16744                           
 16745                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 16746  16F9  0833               	movf	(_Buz1^(0+128)+5),w
 16747  16FA  0020               	movlb	0	; select bank0
 16748  16FB  00A0               	movwf	??_Buzzer_Main
 16749  16FC  0820               	movf	??_Buzzer_Main,w
 16750  16FD  0021               	movlb	1	; select bank1
 16751  16FE  00B1               	movwf	(_Buz1^(0+128)+3)
 16752                           
 16753                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 16754  16FF  0839               	movf	((_Buz1+1)^(0+128)+10),w
 16755  1700  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16756  1701  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16757  1702  0838               	movf	(_Buz1^(0+128)+10),w
 16758  1703  01B4               	clrf	(_Buz1^(0+128)+6)
 16759  1704  07B4               	addwf	(_Buz1^(0+128)+6),f
 16760                           
 16761                           ;Buzzer_B1.c: 62: } else {
 16762  1705  0008               	return
 16763  1706                     l108:	
 16764                           
 16765                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 16766  1706  10AE               	bcf	_Buz1^(0+128),1
 16767                           
 16768                           ;Buzzer_B1.c: 64: }
 16769                           ;Buzzer_B1.c: 65: } else {
 16770  1707  0008               	return
 16771  1708                     l105:	
 16772                           
 16773                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 16774  1708  16AE               	bsf	_Buz1^(0+128),5
 16775                           
 16776                           ;Buzzer_B1.c: 68: RB3 = 1;
 16777  1709  0020               	movlb	0	; select bank0
 16778  170A  158D               	bsf	13,3	;volatile
 16779                           
 16780                           ;Buzzer_B1.c: 69: }
 16781                           ;Buzzer_B1.c: 70: } else {
 16782  170B  0008               	return
 16783  170C                     l104:	
 16784                           
 16785                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 16786  170C  12AE               	bcf	_Buz1^(0+128),5
 16787                           
 16788                           ;Buzzer_B1.c: 73: RB3 = 0;
 16789  170D  0020               	movlb	0	; select bank0
 16790  170E  118D               	bcf	13,3	;volatile
 16791                           
 16792                           ;Buzzer_B1.c: 75: Buz1.Count--;
 16793  170F  3001               	movlw	1
 16794  1710  0021               	movlb	1	; select bank1
 16795  1711  02B1               	subwf	(_Buz1^(0+128)+3),f
 16796  1712  0008               	return
 16797  1713                     __end_of_Buzzer_Main:	
 16798                           
 16799                           	psect	text116
 16800  1DE4                     __ptext116:	
 16801 ;; *************** function _Buzzer_Initialization *****************
 16802 ;; Defined at:
 16803 ;;		line 11 in file "../src/Buzzer_B1.c"
 16804 ;; Parameters:    Size  Location     Type
 16805 ;;		None
 16806 ;; Auto vars:     Size  Location     Type
 16807 ;;		None
 16808 ;; Return value:  Size  Location     Type
 16809 ;;		None               void
 16810 ;; Registers used:
 16811 ;;		None
 16812 ;; Tracked objects:
 16813 ;;		On entry : 0/0
 16814 ;;		On exit  : 0/0
 16815 ;;		Unchanged: 0/0
 16816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16821 ;;Total ram usage:        0 bytes
 16822 ;; Hardware stack levels used:    1
 16823 ;; Hardware stack levels required when called:    5
 16824 ;; This function calls:
 16825 ;;		Nothing
 16826 ;; This function is called by:
 16827 ;;		_main
 16828 ;; This function uses a non-reentrant model
 16829 ;;
 16830                           
 16831                           
 16832                           ;psect for function _Buzzer_Initialization
 16833  1DE4                     _Buzzer_Initialization:	
 16834                           
 16835                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 16836                           
 16837                           ;incstack = 0
 16838                           ; Regs used in _Buzzer_Initialization: []
 16839  1DE4  0021               	movlb	1	; select bank1
 16840  1DE5  142E               	bsf	_Buz1^(0+128),0
 16841  1DE6  0008               	return
 16842  1DE7                     __end_of_Buzzer_Initialization:	
 16843                           
 16844                           	psect	intentry
 16845  0004                     __pintentry:	
 16846 ;; *************** function _ISR *****************
 16847 ;; Defined at:
 16848 ;;		line 107 in file "../src/MCU_B1.c"
 16849 ;; Parameters:    Size  Location     Type
 16850 ;;		None
 16851 ;; Auto vars:     Size  Location     Type
 16852 ;;		None
 16853 ;; Return value:  Size  Location     Type
 16854 ;;		None               void
 16855 ;; Registers used:
 16856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16857 ;; Tracked objects:
 16858 ;;		On entry : 0/0
 16859 ;;		On exit  : 0/0
 16860 ;;		Unchanged: 0/0
 16861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16864 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16865 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16866 ;;Total ram usage:        1 bytes
 16867 ;; Hardware stack levels used:    1
 16868 ;; Hardware stack levels required when called:    4
 16869 ;; This function calls:
 16870 ;;		_IOC_ISR
 16871 ;;		_TMR1_ISR
 16872 ;; This function is called by:
 16873 ;;		Interrupt level 1
 16874 ;; This function uses a non-reentrant model
 16875 ;;
 16876                           
 16877  0004                     _ISR:	
 16878                           
 16879                           ;incstack = 0
 16880                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16881  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16882  0005  3180               	pagesel	$
 16883  0006  0020               	movlb	0	; select bank0
 16884  0007  087F               	movf	127,w
 16885  0008  00F4               	movwf	??_ISR
 16886                           
 16887                           ;MCU_B1.c: 109: IOC_ISR();
 16888  0009  319E  26D5  3180   	fcall	_IOC_ISR
 16889                           
 16890                           ;MCU_B1.c: 111: ;;
 16891                           ;MCU_B1.c: 113: TMR1_ISR();
 16892  000C  3193  230A         	fcall	_TMR1_ISR
 16893  000E  0874               	movf	??_ISR,w
 16894  000F  0020               	movlb	0	; select bank0
 16895  0010  00FF               	movwf	127
 16896  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 16897  0012  0009               	retfie
 16898  0013                     __end_of_ISR:	
 16899                           
 16900                           	psect	text118
 16901  130A                     __ptext118:	
 16902 ;; *************** function _TMR1_ISR *****************
 16903 ;; Defined at:
 16904 ;;		line 209 in file "../src/MCU_B1.c"
 16905 ;; Parameters:    Size  Location     Type
 16906 ;;		None
 16907 ;; Auto vars:     Size  Location     Type
 16908 ;;		None
 16909 ;; Return value:  Size  Location     Type
 16910 ;;		None               void
 16911 ;; Registers used:
 16912 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16913 ;; Tracked objects:
 16914 ;;		On entry : 0/0
 16915 ;;		On exit  : 0/0
 16916 ;;		Unchanged: 0/0
 16917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16922 ;;Total ram usage:        0 bytes
 16923 ;; Hardware stack levels used:    1
 16924 ;; Hardware stack levels required when called:    2
 16925 ;; This function calls:
 16926 ;;		_setDimmerLights_IntrControl
 16927 ;; This function is called by:
 16928 ;;		_ISR
 16929 ;; This function uses a non-reentrant model
 16930 ;;
 16931                           
 16932                           
 16933                           ;psect for function _TMR1_ISR
 16934  130A                     _TMR1_ISR:	
 16935                           
 16936                           ;MCU_B1.c: 211: if (TMR1IE == 1 && TMR1IF == 1) {
 16937                           
 16938                           ;incstack = 0
 16939                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16940  130A  0021               	movlb	1	; select bank1
 16941  130B  1C11               	btfss	17,0	;volatile
 16942  130C  0008               	return
 16943  130D  0020               	movlb	0	; select bank0
 16944  130E  1C11               	btfss	17,0	;volatile
 16945  130F  0008               	return
 16946                           
 16947                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 16948  1310  30FA               	movlw	250
 16949  1311  0097               	movwf	23	;volatile
 16950                           
 16951                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 16952  1312  3038               	movlw	56
 16953  1313  0096               	movwf	22	;volatile
 16954                           
 16955                           ;MCU_B1.c: 214: TMR1IF = 0;
 16956  1314  1011               	bcf	17,0	;volatile
 16957                           
 16958                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 16959  1315  3001               	movlw	1
 16960  1316  3181  21B3  3193   	fcall	_setDimmerLights_IntrControl
 16961                           
 16962                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 16963  1319  3002               	movlw	2
 16964  131A  3181  21B3  3193   	fcall	_setDimmerLights_IntrControl
 16965                           
 16966                           ;MCU_B1.c: 235: Timer1.Count++;
 16967  131D  3001               	movlw	1
 16968  131E  0022               	movlb	2	; select bank2
 16969  131F  07C2               	addwf	(_Timer1^(0+256)+1),f
 16970  1320  3000               	movlw	0
 16971  1321  3DC3               	addwfc	((_Timer1+1)^(0+256)+1),f
 16972                           
 16973                           ;MCU_B1.c: 236: if (Timer1.Count == 100) {
 16974  1322  3001               	movlw	1
 16975  1323  3E41               	addlw	_Timer1& (0+255)
 16976  1324  0086               	movwf	6
 16977  1325  3001               	movlw	1	; select bank2/3
 16978  1326  0087               	movwf	7
 16979  1327  3F40               	moviw [0]fsr1
 16980  1328  3A64               	xorlw	100
 16981  1329  1D03               	skipz
 16982  132A  2B2D               	goto	u719_25
 16983  132B  3F41               	moviw [1]fsr1
 16984  132C  3A00               	xorlw	0
 16985  132D                     u719_25:	
 16986  132D  1D03               	skipz
 16987  132E  0008               	return
 16988                           
 16989                           ;MCU_B1.c: 237: Timer1.Count = 0;
 16990  132F  01C2               	clrf	(_Timer1^(0+256)+1)
 16991  1330  01C3               	clrf	((_Timer1+1)^(0+256)+1)
 16992                           
 16993                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 16994  1331  1441               	bsf	_Timer1^(0+256),0
 16995  1332  0008               	return
 16996  1333                     __end_of_TMR1_ISR:	
 16997                           
 16998                           	psect	text119
 16999  01B3                     __ptext119:	
 17000 ;; *************** function _setDimmerLights_IntrControl *****************
 17001 ;; Defined at:
 17002 ;;		line 96 in file "../src/Dimmer_B1.c"
 17003 ;; Parameters:    Size  Location     Type
 17004 ;;  lights          1    wreg     unsigned char 
 17005 ;; Auto vars:     Size  Location     Type
 17006 ;;  lights          1    3[COMMON] unsigned char 
 17007 ;; Return value:  Size  Location     Type
 17008 ;;		None               void
 17009 ;; Registers used:
 17010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17011 ;; Tracked objects:
 17012 ;;		On entry : 0/0
 17013 ;;		On exit  : 0/0
 17014 ;;		Unchanged: 0/0
 17015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17017 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17018 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17019 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17020 ;;Total ram usage:        2 bytes
 17021 ;; Hardware stack levels used:    1
 17022 ;; Hardware stack levels required when called:    1
 17023 ;; This function calls:
 17024 ;;		_DimmerIntrPointSelect
 17025 ;; This function is called by:
 17026 ;;		_TMR1_ISR
 17027 ;; This function uses a non-reentrant model
 17028 ;;
 17029                           
 17030                           
 17031                           ;psect for function _setDimmerLights_IntrControl
 17032  01B3                     _setDimmerLights_IntrControl:	
 17033                           
 17034                           ;incstack = 0
 17035                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17036                           ;setDimmerLights_IntrControl@lights stored from wreg
 17037  01B3  00F3               	movwf	setDimmerLights_IntrControl@lights
 17038                           
 17039                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 17040  01B4  0873               	movf	setDimmerLights_IntrControl@lights,w
 17041  01B5  319F  2746  3181   	fcall	_DimmerIntrPointSelect
 17042                           
 17043                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 17044  01B8  0876               	movf	_DimmerLightsIntr,w
 17045  01B9  3E02               	addlw	2
 17046  01BA  0086               	movwf	6
 17047  01BB  3001               	movlw	1	; select bank2/3
 17048  01BC  0087               	movwf	7
 17049  01BD  1D81               	btfss	1,3
 17050  01BE  29DD               	goto	i1l6830
 17051                           
 17052                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 17053  01BF  3001               	movlw	1
 17054  01C0  00F2               	movwf	??_setDimmerLights_IntrControl
 17055  01C1  0876               	movf	_DimmerLightsIntr,w
 17056  01C2  3E03               	addlw	3
 17057  01C3  0086               	movwf	6
 17058  01C4  3001               	movlw	1	; select bank2/3
 17059  01C5  0087               	movwf	7
 17060  01C6  0872               	movf	??_setDimmerLights_IntrControl,w
 17061  01C7  0781               	addwf	1,f
 17062                           
 17063                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(75*0.8)) + 1) {
 17064  01C8  0876               	movf	_DimmerLightsIntr,w
 17065  01C9  3E03               	addlw	3
 17066  01CA  0086               	movwf	6
 17067  01CB  3001               	movlw	1	; select bank2/3
 17068  01CC  0087               	movwf	7
 17069  01CD  303D               	movlw	61
 17070  01CE  0201               	subwf	1,w
 17071  01CF  1C03               	skipc
 17072  01D0  29DD               	goto	i1l6830
 17073                           
 17074                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 17075  01D1  0876               	movf	_DimmerLightsIntr,w
 17076  01D2  3E03               	addlw	3
 17077  01D3  0086               	movwf	6
 17078  01D4  3001               	movlw	1	; select bank2/3
 17079  01D5  0087               	movwf	7
 17080  01D6  0181               	clrf	1
 17081                           
 17082                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 17083  01D7  0876               	movf	_DimmerLightsIntr,w
 17084  01D8  3E02               	addlw	2
 17085  01D9  0086               	movwf	6
 17086  01DA  3001               	movlw	1	; select bank2/3
 17087  01DB  0087               	movwf	7
 17088  01DC  1181               	bcf	1,3
 17089  01DD                     i1l6830:	
 17090                           
 17091                           ;Dimmer_B1.c: 241: }
 17092                           ;Dimmer_B1.c: 242: }
 17093                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 17094  01DD  0A76               	incf	_DimmerLightsIntr,w
 17095  01DE  0086               	movwf	6
 17096  01DF  3001               	movlw	1	; select bank2/3
 17097  01E0  0087               	movwf	7
 17098  01E1  1C01               	btfss	1,0
 17099  01E2  2A14               	goto	i1l6846
 17100                           
 17101                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 17102  01E3  0876               	movf	_DimmerLightsIntr,w
 17103  01E4  3E03               	addlw	3
 17104  01E5  0086               	movwf	6
 17105  01E6  3001               	movlw	1	; select bank2/3
 17106  01E7  0087               	movwf	7
 17107  01E8  0876               	movf	_DimmerLightsIntr,w
 17108  01E9  3E04               	addlw	4
 17109  01EA  0084               	movwf	4
 17110  01EB  3001               	movlw	1	; select bank2/3
 17111  01EC  0085               	movwf	5
 17112  01ED  0800               	movf	0,w
 17113  01EE  0201               	subwf	1,w
 17114  01EF  1C03               	skipc
 17115  01F0  0008               	return
 17116                           
 17117                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 17118  01F1  0A76               	incf	_DimmerLightsIntr,w
 17119  01F2  0086               	movwf	6
 17120  01F3  3001               	movlw	1	; select bank2/3
 17121  01F4  0087               	movwf	7
 17122  01F5  1001               	bcf	1,0
 17123                           
 17124                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 17125  01F6  0A76               	incf	_DimmerLightsIntr,w
 17126  01F7  0086               	movwf	6
 17127  01F8  3001               	movlw	1	; select bank2/3
 17128  01F9  0087               	movwf	7
 17129  01FA  1581               	bsf	1,3
 17130                           
 17131                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 17132  01FB  0876               	movf	_DimmerLightsIntr,w
 17133  01FC  0086               	movwf	6
 17134  01FD  3001               	movlw	1	; select bank2/3
 17135  01FE  0087               	movwf	7
 17136  01FF  1C01               	btfss	1,0
 17137  0200  0008               	return
 17138                           
 17139                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 17140  0201  0876               	movf	_DimmerLightsIntr,w
 17141  0202  0086               	movwf	6
 17142  0203  3001               	movlw	1	; select bank2/3
 17143  0204  0087               	movwf	7
 17144  0205  1001               	bcf	1,0
 17145                           
 17146                           ;Dimmer_B1.c: 252: if (lights == 1) {
 17147  0206  0873               	movf	setDimmerLights_IntrControl@lights,w
 17148  0207  3A01               	xorlw	1
 17149  0208  1D03               	skipz
 17150  0209  2A0D               	goto	i1l6842
 17151                           
 17152                           ;Dimmer_B1.c: 253: RA7 = 0;
 17153  020A  0020               	movlb	0	; select bank0
 17154  020B  138C               	bcf	12,7	;volatile
 17155                           
 17156                           ;Dimmer_B1.c: 255: }
 17157  020C  0008               	return
 17158  020D                     i1l6842:	
 17159                           
 17160                           ;Dimmer_B1.c: 258: else if (lights == 2) {
 17161  020D  0873               	movf	setDimmerLights_IntrControl@lights,w
 17162  020E  3A02               	xorlw	2
 17163  020F  1D03               	skipz
 17164  0210  0008               	return
 17165                           
 17166                           ;Dimmer_B1.c: 259: RB4 = 0;
 17167  0211  0020               	movlb	0	; select bank0
 17168  0212  120D               	bcf	13,4	;volatile
 17169                           
 17170                           ;Dimmer_B1.c: 260: }
 17171                           ;Dimmer_B1.c: 262: }
 17172                           ;Dimmer_B1.c: 263: }
 17173                           ;Dimmer_B1.c: 264: } else {
 17174  0213  0008               	return
 17175  0214                     i1l6846:	
 17176                           
 17177                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 17178  0214  0A76               	incf	_DimmerLightsIntr,w
 17179  0215  0086               	movwf	6
 17180  0216  3001               	movlw	1	; select bank2/3
 17181  0217  0087               	movwf	7
 17182  0218  1D81               	btfss	1,3
 17183  0219  0008               	return
 17184                           
 17185                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 17186  021A  0A76               	incf	_DimmerLightsIntr,w
 17187  021B  0086               	movwf	6
 17188  021C  3001               	movlw	1	; select bank2/3
 17189  021D  0087               	movwf	7
 17190  021E  1181               	bcf	1,3
 17191                           
 17192                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 17193  021F  3001               	movlw	1
 17194  0220  00F2               	movwf	??_setDimmerLights_IntrControl
 17195  0221  0876               	movf	_DimmerLightsIntr,w
 17196  0222  3E05               	addlw	5
 17197  0223  0086               	movwf	6
 17198  0224  3001               	movlw	1	; select bank2/3
 17199  0225  0087               	movwf	7
 17200  0226  0872               	movf	??_setDimmerLights_IntrControl,w
 17201  0227  0781               	addwf	1,f
 17202                           
 17203                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17204  0228  0876               	movf	_DimmerLightsIntr,w
 17205  0229  3E05               	addlw	5
 17206  022A  0086               	movwf	6
 17207  022B  3001               	movlw	1	; select bank2/3
 17208  022C  0087               	movwf	7
 17209  022D  0876               	movf	_DimmerLightsIntr,w
 17210  022E  3E08               	addlw	8
 17211  022F  0084               	movwf	4
 17212  0230  3001               	movlw	1	; select bank2/3
 17213  0231  0085               	movwf	5
 17214  0232  0800               	movf	0,w
 17215  0233  0201               	subwf	1,w
 17216  0234  1C03               	skipc
 17217  0235  2A78               	goto	i1l6872
 17218                           
 17219                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 17220  0236  0876               	movf	_DimmerLightsIntr,w
 17221  0237  3E05               	addlw	5
 17222  0238  0086               	movwf	6
 17223  0239  3001               	movlw	1	; select bank2/3
 17224  023A  0087               	movwf	7
 17225  023B  0181               	clrf	1
 17226                           
 17227                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 17228  023C  0A76               	incf	_DimmerLightsIntr,w
 17229  023D  0086               	movwf	6
 17230  023E  3001               	movlw	1	; select bank2/3
 17231  023F  0087               	movwf	7
 17232  0240  1F01               	btfss	1,6
 17233  0241  0008               	return
 17234                           
 17235                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 17236  0242  0A76               	incf	_DimmerLightsIntr,w
 17237  0243  0086               	movwf	6
 17238  0244  3001               	movlw	1	; select bank2/3
 17239  0245  0087               	movwf	7
 17240  0246  1B81               	btfsc	1,7
 17241  0247  2A61               	goto	i1l6866
 17242                           
 17243                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(75*0.8))) {
 17244  0248  0876               	movf	_DimmerLightsIntr,w
 17245  0249  3E04               	addlw	4
 17246  024A  0086               	movwf	6
 17247  024B  3001               	movlw	1	; select bank2/3
 17248  024C  0087               	movwf	7
 17249  024D  303C               	movlw	60
 17250  024E  0201               	subwf	1,w
 17251  024F  1803               	skipnc
 17252  0250  2A5B               	goto	i1l6864
 17253                           
 17254                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 17255  0251  3001               	movlw	1
 17256  0252  00F2               	movwf	??_setDimmerLights_IntrControl
 17257  0253  0876               	movf	_DimmerLightsIntr,w
 17258  0254  3E04               	addlw	4
 17259  0255  0086               	movwf	6
 17260  0256  3001               	movlw	1	; select bank2/3
 17261  0257  0087               	movwf	7
 17262  0258  0872               	movf	??_setDimmerLights_IntrControl,w
 17263  0259  0781               	addwf	1,f
 17264                           
 17265                           ;Dimmer_B1.c: 274: } else {
 17266  025A  0008               	return
 17267  025B                     i1l6864:	
 17268                           
 17269                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 17270  025B  0A76               	incf	_DimmerLightsIntr,w
 17271  025C  0086               	movwf	6
 17272  025D  3001               	movlw	1	; select bank2/3
 17273  025E  0087               	movwf	7
 17274  025F  1781               	bsf	1,7
 17275                           
 17276                           ;Dimmer_B1.c: 276: }
 17277                           ;Dimmer_B1.c: 277: } else {
 17278  0260  0008               	return
 17279  0261                     i1l6866:	
 17280                           
 17281                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 17282  0261  0876               	movf	_DimmerLightsIntr,w
 17283  0262  3E04               	addlw	4
 17284  0263  0086               	movwf	6
 17285  0264  3001               	movlw	1	; select bank2/3
 17286  0265  0087               	movwf	7
 17287  0266  300D               	movlw	13
 17288  0267  0201               	subwf	1,w
 17289  0268  1C03               	skipc
 17290  0269  2A72               	goto	i1l6870
 17291                           
 17292                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 17293  026A  0876               	movf	_DimmerLightsIntr,w
 17294  026B  3E04               	addlw	4
 17295  026C  0086               	movwf	6
 17296  026D  3001               	movlw	1	; select bank2/3
 17297  026E  0087               	movwf	7
 17298  026F  3001               	movlw	1
 17299  0270  0281               	subwf	1,f
 17300                           
 17301                           ;Dimmer_B1.c: 280: } else
 17302  0271  0008               	return
 17303  0272                     i1l6870:	
 17304                           
 17305                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 17306  0272  0A76               	incf	_DimmerLightsIntr,w
 17307  0273  0086               	movwf	6
 17308  0274  3001               	movlw	1	; select bank2/3
 17309  0275  0087               	movwf	7
 17310  0276  1381               	bcf	1,7
 17311                           
 17312                           ;Dimmer_B1.c: 282: }
 17313                           ;Dimmer_B1.c: 283: }
 17314                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 17315  0277  0008               	return
 17316  0278                     i1l6872:	
 17317  0278  0876               	movf	_DimmerLightsIntr,w
 17318  0279  3E02               	addlw	2
 17319  027A  0086               	movwf	6
 17320  027B  3001               	movlw	1	; select bank2/3
 17321  027C  0087               	movwf	7
 17322  027D  1C01               	btfss	1,0
 17323  027E  0008               	return
 17324                           
 17325                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 17326  027F  0876               	movf	_DimmerLightsIntr,w
 17327  0280  3E04               	addlw	4
 17328  0281  0086               	movwf	6
 17329  0282  3001               	movlw	1	; select bank2/3
 17330  0283  0087               	movwf	7
 17331  0284  0876               	movf	_DimmerLightsIntr,w
 17332  0285  3E06               	addlw	6
 17333  0286  0084               	movwf	4
 17334  0287  3001               	movlw	1	; select bank2/3
 17335  0288  0085               	movwf	5
 17336  0289  0800               	movf	0,w
 17337  028A  0201               	subwf	1,w
 17338  028B  1803               	skipnc
 17339  028C  2A97               	goto	i1l6878
 17340                           
 17341                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 17342  028D  3001               	movlw	1
 17343  028E  00F2               	movwf	??_setDimmerLights_IntrControl
 17344  028F  0876               	movf	_DimmerLightsIntr,w
 17345  0290  3E04               	addlw	4
 17346  0291  0086               	movwf	6
 17347  0292  3001               	movlw	1	; select bank2/3
 17348  0293  0087               	movwf	7
 17349  0294  0872               	movf	??_setDimmerLights_IntrControl,w
 17350  0295  0781               	addwf	1,f
 17351                           
 17352                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 17353  0296  0008               	return
 17354  0297                     i1l6878:	
 17355  0297  0876               	movf	_DimmerLightsIntr,w
 17356  0298  3E06               	addlw	6
 17357  0299  0086               	movwf	6
 17358  029A  3001               	movlw	1	; select bank2/3
 17359  029B  0087               	movwf	7
 17360  029C  0876               	movf	_DimmerLightsIntr,w
 17361  029D  3E04               	addlw	4
 17362  029E  0084               	movwf	4
 17363  029F  3001               	movlw	1	; select bank2/3
 17364  02A0  0085               	movwf	5
 17365  02A1  0800               	movf	0,w
 17366  02A2  0201               	subwf	1,w
 17367  02A3  1803               	skipnc
 17368  02A4  2AAD               	goto	i1l6882
 17369                           
 17370                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 17371  02A5  0876               	movf	_DimmerLightsIntr,w
 17372  02A6  3E04               	addlw	4
 17373  02A7  0086               	movwf	6
 17374  02A8  3001               	movlw	1	; select bank2/3
 17375  02A9  0087               	movwf	7
 17376  02AA  3001               	movlw	1
 17377  02AB  0281               	subwf	1,f
 17378                           
 17379                           ;Dimmer_B1.c: 289: } else {
 17380  02AC  0008               	return
 17381  02AD                     i1l6882:	
 17382                           
 17383                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 17384  02AD  0876               	movf	_DimmerLightsIntr,w
 17385  02AE  3E02               	addlw	2
 17386  02AF  0086               	movwf	6
 17387  02B0  3001               	movlw	1	; select bank2/3
 17388  02B1  0087               	movwf	7
 17389  02B2  1001               	bcf	1,0
 17390  02B3  0008               	return
 17391  02B4                     __end_of_setDimmerLights_IntrControl:	
 17392                           
 17393                           	psect	text120
 17394  1F46                     __ptext120:	
 17395 ;; *************** function _DimmerIntrPointSelect *****************
 17396 ;; Defined at:
 17397 ;;		line 74 in file "../src/Dimmer_B1.c"
 17398 ;; Parameters:    Size  Location     Type
 17399 ;;  lights          1    wreg     unsigned char 
 17400 ;; Auto vars:     Size  Location     Type
 17401 ;;  lights          1    1[COMMON] unsigned char 
 17402 ;; Return value:  Size  Location     Type
 17403 ;;		None               void
 17404 ;; Registers used:
 17405 ;;		wreg
 17406 ;; Tracked objects:
 17407 ;;		On entry : 0/0
 17408 ;;		On exit  : 0/0
 17409 ;;		Unchanged: 0/0
 17410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17412 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17414 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17415 ;;Total ram usage:        2 bytes
 17416 ;; Hardware stack levels used:    1
 17417 ;; This function calls:
 17418 ;;		Nothing
 17419 ;; This function is called by:
 17420 ;;		_setDimmerLights_IntrControl
 17421 ;; This function uses a non-reentrant model
 17422 ;;
 17423                           
 17424                           
 17425                           ;psect for function _DimmerIntrPointSelect
 17426  1F46                     _DimmerIntrPointSelect:	
 17427                           
 17428                           ;incstack = 0
 17429                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17430                           ;DimmerIntrPointSelect@lights stored from wreg
 17431  1F46  00F1               	movwf	DimmerIntrPointSelect@lights
 17432                           
 17433                           ;Dimmer_B1.c: 76: if (lights == 1) {
 17434  1F47  0871               	movf	DimmerIntrPointSelect@lights,w
 17435  1F48  3A01               	xorlw	1
 17436  1F49  1D03               	skipz
 17437  1F4A  2F4F               	goto	i1l722
 17438                           
 17439                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 17440  1F4B  3046               	movlw	_DimmerLights1& (0+255)
 17441  1F4C  00F0               	movwf	??_DimmerIntrPointSelect
 17442  1F4D  0870               	movf	??_DimmerIntrPointSelect,w
 17443  1F4E  00F6               	movwf	_DimmerLightsIntr
 17444  1F4F                     i1l722:	
 17445                           
 17446                           ;Dimmer_B1.c: 78: }
 17447                           ;Dimmer_B1.c: 81: if (lights == 2) {
 17448  1F4F  0871               	movf	DimmerIntrPointSelect@lights,w
 17449  1F50  3A02               	xorlw	2
 17450  1F51  1D03               	skipz
 17451  1F52  0008               	return
 17452                           
 17453                           ;Dimmer_B1.c: 82: DimmerLightsIntr = &DimmerLights2;
 17454  1F53  3057               	movlw	_DimmerLights2& (0+255)
 17455  1F54  00F0               	movwf	??_DimmerIntrPointSelect
 17456  1F55  0870               	movf	??_DimmerIntrPointSelect,w
 17457  1F56  00F6               	movwf	_DimmerLightsIntr
 17458  1F57  0008               	return
 17459  1F58                     __end_of_DimmerIntrPointSelect:	
 17460                           
 17461                           	psect	text121
 17462  1ED5                     __ptext121:	
 17463 ;; *************** function _IOC_ISR *****************
 17464 ;; Defined at:
 17465 ;;		line 400 in file "../src/MCU_B1.c"
 17466 ;; Parameters:    Size  Location     Type
 17467 ;;		None
 17468 ;; Auto vars:     Size  Location     Type
 17469 ;;		None
 17470 ;; Return value:  Size  Location     Type
 17471 ;;		None               void
 17472 ;; Registers used:
 17473 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17474 ;; Tracked objects:
 17475 ;;		On entry : 0/0
 17476 ;;		On exit  : 0/0
 17477 ;;		Unchanged: 0/0
 17478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17483 ;;Total ram usage:        0 bytes
 17484 ;; Hardware stack levels used:    1
 17485 ;; Hardware stack levels required when called:    3
 17486 ;; This function calls:
 17487 ;;		_setDimmerReClock
 17488 ;; This function is called by:
 17489 ;;		_ISR
 17490 ;; This function uses a non-reentrant model
 17491 ;;
 17492                           
 17493                           
 17494                           ;psect for function _IOC_ISR
 17495  1ED5                     _IOC_ISR:	
 17496                           
 17497                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 17498                           
 17499                           ;incstack = 0
 17500                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17501  1ED5  1D8B               	btfss	11,3	;volatile
 17502  1ED6  0008               	return
 17503  1ED7  1C0B               	btfss	11,0	;volatile
 17504  1ED8  0008               	return
 17505  1ED9  0027               	movlb	7	; select bank7
 17506  1EDA  1D16               	btfss	22,2	;volatile
 17507  1EDB  0008               	return
 17508                           
 17509                           ;MCU_B1.c: 402: IOCBF2 = 0;
 17510  1EDC  1116               	bcf	22,2	;volatile
 17511                           
 17512                           ;MCU_B1.c: 403: IOCIF = 0;
 17513  1EDD  100B               	bcf	11,0	;volatile
 17514                           
 17515                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 17516  1EDE  0021               	movlb	1	; select bank1
 17517  1EDF  1C20               	btfss	_myMain^(0+128),0
 17518  1EE0  0008               	return
 17519                           
 17520                           ;MCU_B1.c: 407: setDimmerReClock();
 17521  1EE1  319E  2621         	fcall	_setDimmerReClock
 17522  1EE3  0008               	return
 17523  1EE4                     __end_of_IOC_ISR:	
 17524                           
 17525                           	psect	text122
 17526  1E21                     __ptext122:	
 17527 ;; *************** function _setDimmerReClock *****************
 17528 ;; Defined at:
 17529 ;;		line 243 in file "../src/MCU_B1.c"
 17530 ;; Parameters:    Size  Location     Type
 17531 ;;		None
 17532 ;; Auto vars:     Size  Location     Type
 17533 ;;		None
 17534 ;; Return value:  Size  Location     Type
 17535 ;;		None               void
 17536 ;; Registers used:
 17537 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17538 ;; Tracked objects:
 17539 ;;		On entry : 0/0
 17540 ;;		On exit  : 0/0
 17541 ;;		Unchanged: 0/0
 17542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17547 ;;Total ram usage:        0 bytes
 17548 ;; Hardware stack levels used:    1
 17549 ;; Hardware stack levels required when called:    2
 17550 ;; This function calls:
 17551 ;;		_setDimmerLights_IntrIOC_GO
 17552 ;; This function is called by:
 17553 ;;		_IOC_ISR
 17554 ;; This function uses a non-reentrant model
 17555 ;;
 17556                           
 17557                           
 17558                           ;psect for function _setDimmerReClock
 17559  1E21                     _setDimmerReClock:	
 17560                           
 17561                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 17562                           
 17563                           ;incstack = 0
 17564                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17565  1E21  3001               	movlw	1
 17566  1E22  3195  254B  319E   	fcall	_setDimmerLights_IntrIOC_GO
 17567                           
 17568                           ;MCU_B1.c: 252: setDimmerLights_IntrIOC_GO(2);
 17569  1E25  3002               	movlw	2
 17570  1E26  3195  254B         	fcall	_setDimmerLights_IntrIOC_GO
 17571  1E28  0008               	return
 17572  1E29                     __end_of_setDimmerReClock:	
 17573                           
 17574                           	psect	text123
 17575  154B                     __ptext123:	
 17576 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 17577 ;; Defined at:
 17578 ;;		line 28 in file "../src/Dimmer_B1.c"
 17579 ;; Parameters:    Size  Location     Type
 17580 ;;  lights          1    wreg     unsigned char 
 17581 ;; Auto vars:     Size  Location     Type
 17582 ;;  lights          1    2[COMMON] unsigned char 
 17583 ;; Return value:  Size  Location     Type
 17584 ;;		None               void
 17585 ;; Registers used:
 17586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17587 ;; Tracked objects:
 17588 ;;		On entry : 0/0
 17589 ;;		On exit  : 0/0
 17590 ;;		Unchanged: 0/0
 17591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17593 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17595 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17596 ;;Total ram usage:        1 bytes
 17597 ;; Hardware stack levels used:    1
 17598 ;; Hardware stack levels required when called:    1
 17599 ;; This function calls:
 17600 ;;		_DimmerIntrIOCPointSelect
 17601 ;; This function is called by:
 17602 ;;		_setDimmerReClock
 17603 ;; This function uses a non-reentrant model
 17604 ;;
 17605                           
 17606                           
 17607                           ;psect for function _setDimmerLights_IntrIOC_GO
 17608  154B                     _setDimmerLights_IntrIOC_GO:	
 17609                           
 17610                           ;incstack = 0
 17611                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17612                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 17613  154B  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 17614                           
 17615                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 17616  154C  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17617  154D  319F  27EC  3195   	fcall	_DimmerIntrIOCPointSelect
 17618                           
 17619                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 0) {
 17620  1550  0021               	movlb	1	; select bank1
 17621  1551  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17622  1552  3E02               	addlw	2
 17623  1553  0086               	movwf	6
 17624  1554  3001               	movlw	1	; select bank2/3
 17625  1555  0087               	movwf	7
 17626  1556  1981               	btfsc	1,3
 17627  1557  0008               	return
 17628  1558  0020               	movlb	0	; select bank0
 17629  1559  190D               	btfsc	13,2	;volatile
 17630  155A  0008               	return
 17631                           
 17632                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 17633  155B  0021               	movlb	1	; select bank1
 17634  155C  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17635  155D  3E02               	addlw	2
 17636  155E  0086               	movwf	6
 17637  155F  3001               	movlw	1	; select bank2/3
 17638  1560  0087               	movwf	7
 17639  1561  1581               	bsf	1,3
 17640                           
 17641                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 17642  1562  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 17643  1563  0086               	movwf	6
 17644  1564  3001               	movlw	1	; select bank2/3
 17645  1565  0087               	movwf	7
 17646  1566  1401               	bsf	1,0
 17647                           
 17648                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 17649  1567  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 17650  1568  0086               	movwf	6
 17651  1569  3001               	movlw	1	; select bank2/3
 17652  156A  0087               	movwf	7
 17653  156B  1481               	bsf	1,1
 17654                           
 17655                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 17656  156C  0022               	movlb	2	; select bank2
 17657  156D  01C0               	clrf	(_Dimmer^(0+256)+2)	;volatile
 17658                           
 17659                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 17660  156E  0021               	movlb	1	; select bank1
 17661  156F  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 17662  1570  0086               	movwf	6
 17663  1571  3001               	movlw	1	; select bank2/3
 17664  1572  0087               	movwf	7
 17665  1573  1D01               	btfss	1,2
 17666  1574  0008               	return
 17667                           
 17668                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 17669  1575  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17670  1576  0086               	movwf	6
 17671  1577  3001               	movlw	1	; select bank2/3
 17672  1578  0087               	movwf	7
 17673  1579  1401               	bsf	1,0
 17674                           
 17675                           ;Dimmer_B1.c: 55: if (lights == 1) {
 17676  157A  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17677  157B  3A01               	xorlw	1
 17678  157C  1D03               	skipz
 17679  157D  2D81               	goto	i1l6474
 17680                           
 17681                           ;Dimmer_B1.c: 56: RA7 = 1;
 17682  157E  0020               	movlb	0	; select bank0
 17683  157F  178C               	bsf	12,7	;volatile
 17684                           
 17685                           ;Dimmer_B1.c: 58: }
 17686  1580  0008               	return
 17687  1581                     i1l6474:	
 17688                           
 17689                           ;Dimmer_B1.c: 61: else if (lights == 2) {
 17690  1581  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17691  1582  3A02               	xorlw	2
 17692  1583  1D03               	skipz
 17693  1584  0008               	return
 17694                           
 17695                           ;Dimmer_B1.c: 62: RB4 = 1;
 17696  1585  0020               	movlb	0	; select bank0
 17697  1586  160D               	bsf	13,4	;volatile
 17698  1587  0008               	return
 17699  1588                     __end_of_setDimmerLights_IntrIOC_GO:	
 17700                           
 17701                           	psect	text124
 17702  1FEC                     __ptext124:	
 17703 ;; *************** function _DimmerIntrIOCPointSelect *****************
 17704 ;; Defined at:
 17705 ;;		line 8 in file "../src/Dimmer_B1.c"
 17706 ;; Parameters:    Size  Location     Type
 17707 ;;  lights          1    wreg     unsigned char 
 17708 ;; Auto vars:     Size  Location     Type
 17709 ;;  lights          1    1[COMMON] unsigned char 
 17710 ;; Return value:  Size  Location     Type
 17711 ;;		None               void
 17712 ;; Registers used:
 17713 ;;		wreg
 17714 ;; Tracked objects:
 17715 ;;		On entry : 0/0
 17716 ;;		On exit  : 0/0
 17717 ;;		Unchanged: 0/0
 17718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17720 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17721 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17722 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17723 ;;Total ram usage:        2 bytes
 17724 ;; Hardware stack levels used:    1
 17725 ;; This function calls:
 17726 ;;		Nothing
 17727 ;; This function is called by:
 17728 ;;		_setDimmerLights_IntrIOC_GO
 17729 ;; This function uses a non-reentrant model
 17730 ;;
 17731                           
 17732                           
 17733                           ;psect for function _DimmerIntrIOCPointSelect
 17734  1FEC                     _DimmerIntrIOCPointSelect:	
 17735                           
 17736                           ;incstack = 0
 17737                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 17738                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17739  1FEC  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 17740                           
 17741                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17742  1FED  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17743  1FEE  3A01               	xorlw	1
 17744  1FEF  1D03               	skipz
 17745  1FF0  2FF6               	goto	i1l709
 17746                           
 17747                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17748  1FF1  3046               	movlw	_DimmerLights1& (0+255)
 17749  1FF2  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17750  1FF3  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17751  1FF4  0021               	movlb	1	; select bank1
 17752  1FF5  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 17753  1FF6                     i1l709:	
 17754                           
 17755                           ;Dimmer_B1.c: 12: }
 17756                           ;Dimmer_B1.c: 15: if (lights == 2) {
 17757  1FF6  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17758  1FF7  3A02               	xorlw	2
 17759  1FF8  1D03               	skipz
 17760  1FF9  0008               	return
 17761                           
 17762                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 17763  1FFA  3057               	movlw	_DimmerLights2& (0+255)
 17764  1FFB  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17765  1FFC  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17766  1FFD  0021               	movlb	1	; select bank1
 17767  1FFE  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 17768  1FFF  0008               	return
 17769  2000                     __end_of_DimmerIntrIOCPointSelect:	
 17770  007E                     btemp	set	126	;btemp
 17771  007E                     pic14e$flags	set	126
 17772  007E                     wtemp	set	126
 17773  007E                     wtemp0	set	126
 17774  0080                     wtemp1	set	128
 17775  0082                     wtemp2	set	130
 17776  0084                     wtemp3	set	132
 17777  0086                     wtemp4	set	134
 17778  0088                     wtemp5	set	136
 17779  007F                     wtemp6	set	127
 17780  007E                     ttemp	set	126
 17781  007E                     ttemp0	set	126
 17782  0081                     ttemp1	set	129
 17783  0084                     ttemp2	set	132
 17784  0087                     ttemp3	set	135
 17785  007F                     ttemp4	set	127
 17786  007E                     ltemp	set	126
 17787  007E                     ltemp0	set	126
 17788  0082                     ltemp1	set	130
 17789  0086                     ltemp2	set	134
 17790  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         224
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     80      80
    BANK1            80      6      78
    BANK2            80      0      80
    BANK3            80      7      76
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights22	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_getDimmerLights_Allow_Condition
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  129308
                                              3 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1820
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     170
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     139
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4100
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4100
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    8604
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    8604
                                             76 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0     331
                                              5 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1174
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1174
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   46455
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   46455
                                              5 BANK1      1     1      0
                                              0 BANK3      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   45398
                                             79 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4023
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   41205
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   14239
                                             76 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    2185
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18820
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16360
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14126
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1298
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1298
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1472
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       6     6      0    7692
                                             76 BANK0      1     1      0
                                              0 BANK1      5     5      0
            _DimmerLightsPointSelect
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 5     5      0     300
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             5     5      0     136
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35548
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   35548
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17792
                                             75 BANK0      3     2      1
                             _setBuz
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   17301
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1143
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Allow_Condition                      5     5      0     207
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    6129
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    6129
                                             77 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4185
                                             76 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    3708
                                             74 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3423
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1820
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0     110
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _DimmerLightsPointSelect
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getDimmerLights_Allow_Condition
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      6      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      7      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     164      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     164      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Dec 12 15:49:53 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
                                      l94 0A32                                        l96 0A46  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 129C  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 0077                      _getDimmerLights_Line 1FB3  
                  __end_of_setDelayOff_GO 09A9                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0809  
                    _setDimmerLights_Line 10D9                              ___ftadd@sign 004B  
                                     l104 170C                                       l105 1708  
                                     l106 16F6                                       l108 1706  
                                     l251 0C6D                      _setDimmerLights_SwOn 1604  
                                     l324 1126                                       l325 1128  
                                     l368 12E9                                       l754 1FAA  
                                     l827 1FBC                                       l828 1FC3  
                                     l987 1202                                       _GIE 005F  
                                     _CRC 00C8                                       l988 120C  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 0014                                       _RB1 0069  
                                     _RA3 0063                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00CD                                       _RC1 0071  
                                     _RB3 006B                                       _RC2 0072  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RC7 0077                                       _RF1 00BA  
                                     _ISR 0004                                       _WDT 00C6  
            getDimmerLights_Status@lights 0022                                       _Sw1 01C5  
                                     _Sw2 01CE                 setDimmerLights_Adj@status 006B  
                __end_of_CC2500_WriteByte 1133                     _Buzzer_Initialization 1DE4  
                         __end_of_ADC_Set 1E21                           ?_DelayTimejudge 0070  
                                     wreg 0009      setDimmerLights_Initialization@lights 0023  
            getDimmerLights_Status@status 0023                           _setDimmerLights 0AB3  
                       ??_getSw_KeyStatus 0020                     _setDimmerLights_AdjRF 129C  
                   _setDimmerLights_AdjOn 14A4                                      ?_ISR 0070  
         setDimmerLights_ErrorClose@count 00E8                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 1EE4                              ___ftdiv@sign 003D  
                                    l1022 167E                                      l1302 1409  
                                    l1311 1759                                      l2111 055D  
                                    l2120 04E2                                      l2113 04AD  
                                    l2122 0519                                      l2114 04AF  
                                    l2115 04B7                                      l2206 15B2  
                ?_DimmerLightsPointSelect 0070                                      l1540 1196  
                                    l2156 1EE9                                      l2180 14A0  
                                    l2164 07AC                                      l2174 07FD  
                                    l1536 119A                                      l1288 1509  
                                    l2504 10F5                                      l2194 0DC5  
                                    l1564 0774                           __end_of_IOC_Set 1EBB  
                                    l2526 01AA                                      l2528 0083  
                                    l1498 1549                                      l1763 06C1  
                                    l1768 06BB                                      l2917 0353  
                                    l8012 058E                                      l2894 0BB6  
                                    l8006 0578                                      l2888 0B9F  
                                    l8040 05ED                                      l8024 05C9  
                                    l8106 110F                                      l8122 1385  
                                    l9002 07E8                                      l8036 05E5  
                                    l8028 05D1                     _setDimmerLights_SwOff 09A9  
                                    l8150 0908                                      l8230 098D  
                                    l8232 0993                                      l8064 0E4E  
                                    l9008 07F3                                      l9032 11E5  
                                    l8226 0987                                      l8090 0E99  
                                    l8082 0E7E                                      l9018 1092  
                                    l9042 11F1                                      l9034 11E7  
                                    l9060 16AA                                      l8156 0913  
                                    l8308 09E7                                      l8092 0EA2  
                                    l8084 0E8C                                      l9044 11F5  
                                    l9070 16BA                                      l9062 16AD  
                                    l8182 094A                                      l8174 0939  
                                    l8166 091B                                      l8270 13AD  
                                    l8262 13A1                                      l8094 0EA5  
                                    l8520 1158                                      l9072 16BD  
                                    l8168 0927                                      l8272 13B2  
                                    l8328 0AA4                                      l9304 172F  
                                    l8440 11B2                                      l8512 15A1  
                                    l9066 16B3                                      l8178 0942  
                                    l8258 1399                                      l8602 08EE  
                                    l8098 0EB3                                      l9410 04CE  
                                    l9330 0631                                      l8524 115E  
                                    l9076 16C3                                      l8460 0B1A  
                                    l9172 0853                                      l9164 0832  
                                    l8540 12D2                                      l8292 1636  
                                    l8518 1155                                      l8462 0B4E  
                                    l8606 08F2                                      l9166 0838  
                                    l8438 11AC                                      l8534 12C9  
                                    l8710 0C80                                      l8702 0C73  
                                    l8390 141D                                      l8294 163C  
                                    l9510 006E                                      l9262 1222  
                                    l9600 16E0                                      l7840 0B8B  
                                    l7832 0B75                                      l7904 02F2  
                                    l8536 12CC                                      l8712 0C83  
                                    l8704 0C76                                      l9360 0690  
                                    l9264 1225                                      l8802 128B  
                                    l8458 0B48                                      l7922 031F  
                                    l8730 0DCD                                      l9362 0692  
                                    l7860 1F5B                                      l8556 10E6  
                                    l7836 0B7C                                      l7940 0365  
                                    l7924 0329                                      l7916 030C  
                                    l8636 1191                                      l9284 13D9  
                                    l8900 13F1                                      l8716 0C89  
                                    l8708 0C7C                                      l8660 0D9E  
                                    l8652 0D60                                      l9444 0500  
                                    l9372 06A7                                      l9268 122A  
                   _myMain_Initialization 1EF3                                      l8582 08CA  
                                    l8590 08D2                                      l7846 0BA4  
                                    l7838 0B86                                      l7934 0345  
                                    l7926 032E                                      l9286 13BD  
                                    l8750 0DEF                                      l8734 0DD3  
                                    l8494 1794                                      l8662 0DA2  
                                    l9446 0502                                      l9462 052A  
                                    l9550 0121                                      l9526 00B1  
                                    l9374 06A8                                      l7864 1F61  
                                    l8568 08B9                                      l8576 08C1  
                                    l7848 0BAC                                      l7944 0377  
                                    l7936 034F                                      l7928 0332  
                                    l8840 0B00                                      l8832 0AE6  
                                    l9288 13DE                                      l8744 0DE6  
                                    l8728 0DCA                                      l8736 0DD6  
                                    l8680 0C3C                                      l8664 0DA6  
                                    l8656 0D85                                      l9536 00E3  
                                    l9560 0153                                      l7882 1262  
                                    l7954 0392                                      l7970 0F84  
                                    l8850 17C8                                      l9802 06DD  
                                    l9298 171A                                      l8746 0DE9  
                                    l8498 17A3                                      l8658 0D9A  
                                    l9474 054B                                      l7964 0F6E  
                                    l9812 06FB                                      l8684 0C42  
                                    l8668 0DAA                                      l9492 10FA  
                                    l8790 1305                                      l8598 08EA  
                                    l7894 02DC                                      l8766 0E01  
                                    l8678 0C39                                      l9910 0881  
                                    l7992 0FDE                                      l7984 0FC5  
                                    l9824 0731                                      l9808 06EC  
                                    l8768 0E1A                                      l8944 1F40  
                                    l9496 1100                                      l9752 15F5  
                                    _CFGS 0CAE                                      l7898 02E3  
                                    l9826 0703                                      l9842 076A  
                                    l9666 041C                                      l8698 0C54  
                                    l9586 01A6                                      l9770 1529  
                                    l9906 087A                                      l8788 12FA  
                                    l8796 1282                                      l9836 0758  
                                    l9828 0739                                      l8980 07AF  
                                    l8798 1285                                      l8992 07C7  
                                    l8968 0799                              __CFG_WDTE$ON 0000  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u8005 0F96  
                                    u8015 0FA6                                      u8025 0FC6  
                                    u8035 0FD5                                      u8115 05D2  
                                    u8045 0FDF                                      u8205 0E55  
                                    u8125 05D8                                      u8235 0E7F  
                                    u8155 05EE                                      u8405 0928  
                                    u8325 1371                                      u8165 05F4  
                                    u8085 059A                                      u8415 0932  
                                    u8095 05AA                                      u9305 12EF  
                                    u8425 093A                                      u7705 0BBD  
                                    u8265 0E9A                                      u7635 0B81  
                                    u7655 0B9A                                      u8385 091E  
                                    u7905 0333                                      u8715 10BE  
                                    u7675 0BA7                                      u8660 0A64  
                                    u8805 0B25                                      u7845 030D  
                                    u7935 0346                                      u8665 0A62  
                                    u7875 0320                                      _LWLO 0CAD  
                                    _RSSI 00CE                                      _WREN 0CAA  
                                    _Buz1 00AE                                      _Temp 00D6  
                                    _main 0859                              ___ftpack@arg 0020  
                     __end_of_DlyOff_Main 0C31                           __end_of_RF_Main 1DED  
                            ___ftpack@exp 0023                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1E5D                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                          _setDimmerReClock 1E21  
                                    start 0013                                      ttemp 007E  
                                    wtemp 007E                       DelayTimejudge@value 0029  
              __end_of_setRFSW_AdjControl 15C6                         ___bmul@multiplier 0023  
                            ___ftmul@cntr 003C                              ___ftmul@sign 003D  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2146 0021  
    _getDimmerLights_Allow_Condition$2147 0022                                     ??_ISR 0074  
                            ___fttol@exp1 005B                              ___fttol@lval 0057  
 __end_of_getDimmerLights_Allow_Condition 13B4  __size_of_getDimmerLights_Allow_Condition 002D  
       ??_getDimmerLights_Allow_Condition 0020          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1387                    _getDimmerLights_Status 1F02  
          __size_of_DimmerIntrPointSelect 0012                          __end_of_LED_Main 1EAF  
        setDimmerLights_ErrorClose@lights 00E9             __end_of_DimmerIntrPointSelect 1F58  
                   ?_getDimmerLights_Line 0070                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0066  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 01E8  
                         __end_of___awdiv 0951                           __end_of___ftadd 03AA  
                         __end_of___ftdiv 1000                           __end_of___ftneg 1E52  
                                   u10005 13C6                                     u10115 0678  
                                   u10135 0698                                     u10235 04C8  
                         __end_of___ftmul 0615                                     u10355 053B  
                         ___awdiv@divisor 0020                                     _T1CON 0018  
                                   u10625 16D6                           __end_of___fttol 0EBC  
                                   u10805 15EC                                     u10815 15FB  
                                   u10920 0737                                     u10745 1500  
                                   u10925 070E                                     u10855 1541  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                                     i1l722 1F4F  
                                   i1l709 1FF6                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _WPUB1 1069  
                                   _WPUB2 106A                   __end_of_Timeout_Counter 10C4  
                           __CFG_WRT$HALF 0000        __end_of_setDimmerLights_IntrIOC_GO 1588  
              _setDimmerLights_IntrIOC_GO 154B                          __end_of_TMR1_ISR 1333  
                 __size_of_setProductData 000E              __size_of_CC2500_WriteCommand 001A  
      __end_of_setDimmerLights_ErrorClose 0B6C                _setDimmerLights_ErrorClose 0B0C  
                        __end_of_TMR1_Set 1EC7                                     _getAD 1217  
                           ___awtoft@sign 002D               DimmerIntrPointSelect@lights 0071  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1FA0  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03C0                            __CFG_BOREN$OFF 0000  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012              __end_of_getMain_LightsStatus 13E1  
           __end_of_setLED_Initialization 1F7C                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 0A5A  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                       setTemp_Main@error 0068                    ??_Flash_Memory_Erasing 0020  
                         _getPercentValue 0CFA                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0015                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                   __size_of_getDelayOff_GO 0011  
                       ??_setPercentValue 005C                              __end_of_main 08AA  
                     ?_setRF_DimmerLights 0066                          __end_of_Fosc_Set 1E03  
                      ??_setMemory_Modify 0020                            _Exception_Main 06C5  
                        ?_CC2500_WriteREG 0022                                 ??_ADC_Set 0020  
                 __end_of_setDimmerLights 0B0C                      _setSw_Initialization 1E41  
                                  ??_main 0070                             ___fttol@sign1 0056  
                            ?_setLog_Code 0070                   _setControl_Lights_Table 0D5F  
                          _setMemory_Data 1E7F                    ?_Buzzer_Initialization 0070  
       __size_of_DimmerIntrIOCPointSelect 0014                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 03C0                 ?_DimmerIntrIOCPointSelect 0070  
                               ??_IOC_ISR 0073                                 ??_IOC_Set 0020  
         __end_of_DimmerLightsPointSelect 1FB3                    ?_setDimmerLights_AdjRF 0070  
                  ?_setDimmerLights_AdjOn 0070                  __size_of_setRFSW_Control 004F  
                 ??_Switch_Initialization 0025                      ??_setRF_DimmerLights 0067  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0BCD  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                                 ??_WDT_Set 0020  
                        __end_of___awtoft 1279                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 0BCD                  _getMain_All_Error_Status 1180  
                                  _IOCBF2 1CB2                                    i1l6474 1581  
                                  i1l6830 01DD                                    i1l6842 020D  
                                  i1l6870 0272                                    i1l6846 0214  
                                  i1l6864 025B                                    i1l6872 0278  
                                  i1l6882 02AD                                    i1l6866 0261  
                                  i1l6878 0297                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0024                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
                                  _OSCCON 0099                                    u719_25 132D  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1133                                    _WDTCON 0097  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 10D9                                    _Dimmer 013E  
                                  _DlySw1 01D7                                    _DlySw2 01DC  
              __end_of_Mcu_Initialization 1F8E                       __end_of_Buzzer_Main 1713  
                                  _Memory 01A0                                    _Timer1 0141  
                                  ___bmul 1F58                    __end_of_Exception_Main 0775  
                    Exception_Main@lights 00EA                                 ??___awdiv 0024  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 0017  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                   setDimmerLights@lights 006D                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020               setDimmerLights_AdjRF@lights 0063  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D4                                    _s_data 00D5  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 08AA  
                                  _myMain 00A0                    __end_of_setMemory_Data 1E8B  
                        _DimmerLightsIntr 0076                     ?_setSw_Initialization 0070  
                   setDimmerLights@status 006B                          ___awdiv@quotient 0027  
                                  _setBuz 0A01                        __size_of_Temp_Main 0003  
        ??_setDimmerLights_Initialization 0022           ?_setDimmerLights_Initialization 0070  
                   ___ftmul@f3_as_product 0039       __end_of_setDimmerLights_IntrControl 02B4  
             _setDimmerLights_IntrControl 01B3                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1FEC  
                   __end_of_SwPointSelect 109B              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 0020  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0028                                _TouchPower 10EE  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
                 __end_of_getPercentValue 0D5F          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 003C                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$4797 0022                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                                ___fttol@f1 004E  
                          __pcstackCOMMON 0070            DimmerIntrIOCPointSelect@lights 0071  
                         ?_Exception_Main 0070                              __pidataBANK4 1237  
                           __end_of_getAD 1237                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0050                        _LED_Initialization 1E97  
                         _getSw_KeyStatus 11D8                 ??_setControl_Lights_Table 006F  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 0062  
                        ?_setDimmerLights 006B                                 ?_WDT_Main 0070  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 13B4  
              __end_of_set_TimeoutCleared 1E08                  __end_of_setDimmerReClock 1E29  
                      __size_of_getRxData 008B                       ?_LED_Initialization 0070  
                   getMain_LightsStatus@i 0026                         ?_CC2500_WriteByte 0070  
                          _setProductData 1EC7                            _DimmerLights11 00CA  
                          _DimmerLights22 00CB                      __size_of_setLED_Main 0041  
                                 ??_getAD 0023                       _Temp_Initialization 1DED  
                      ??_CC2500_WriteByte 0020                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0070                               _Buzzer_Main 16C9  
                       ??_setRFSW_Control 006C                         __end_of_Temp_Main 1DF3  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1E29                                __pnvCOMMON 0079  
               getMain_LightsStatus@count 0025                             ??_Switch_Main 006F  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 0075  
                       LedPointSelect@led 0021                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 0859  
                          _getDelayOff_GO 1F13                       _CC2500_WriteCommand 114C  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
        __size_of_DimmerLightsPointSelect 0013                          ??_setDelayOff_GO 0068  
           ??_DimmerLights_Initialization 0024                                ??_TMR1_ISR 0074  
                           ?_setTemp_Main 0070                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                      __size_of_setTxData 009B                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                                   _ADC_Set 1E1A  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 15C6  
                              ??_WDT_Main 0020                     ?_getMain_LightsStatus 0070  
            __end_of_setRF_Initialization 1E68                        _setRFSW_AdjControl 1588  
                  __end_of_setProductData 1ED5                                   _IOC_ISR 1ED5  
                                 _IOC_Set 1EAF                      __size_of_setLog_Code 0034  
   getDimmerLights_Allow_Condition@lights 0023                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 14D9                         _Flash_Memory_Read 1166  
             ?_setDimmerLights_IntrIOC_GO 0070                    __size_of_CC2500_RxData 006F  
                  __size_of_CC2500_TxData 0064               ?_setDimmerLights_ErrorClose 0070  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 0120  
                                 _RF_Main 1DEA                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1E52  
         __end_of_setControl_Lights_Table 0DC6                           setRF_Main@error 01E7  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
                         _setPercentValue 0C95                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1E7F                           __size_of_IO_Set 0019  
                       __end_of_getBuz_GO 1F35                       ??_Flash_Memory_Main 0029  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1F24  
                                 _VarLED1 016C                                   _VarLED2 01E1  
          __end_of_getDimmerLights_Status 1F13                         __end_of_getRxData 0800  
                 __end_of_getSw_KeyStatus 11F7                  _CC2500_registers_address 1000  
        __end_of_DimmerIntrIOCPointSelect 2000                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0068                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 08FD                                   ___ftadd 02B4  
                                 ___ftdiv 0F57                                   ___ftneg 1E49  
                                 ___ftmul 0561                                   ___fttol 0E35  
                     __end_of_Switch_Main 1E73                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1F35                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0053  
                    setRFSW_AdjControl@sw 006B                           __size_of_setBuz 0059  
                                 __ptext1 150F                                   __ptext2 1EF3  
                                 __ptext3 15C6                                   __ptext4 1217  
                                 __ptext5 1F8E                                   __ptext6 0002  
                                 __ptext7 1DF0                                   __ptext8 0615  
                                 __ptext9 1DED                   ??_setDimmerLights_AdjRF 0062  
                 ??_setDimmerLights_AdjOn 0025                 __size_of_CC2500_SIDLEMode 0004  
                   _DimmerIntrPointSelect 1F46                              __size_of_ISR 000F  
              ??_getMain_All_Error_Status 0020                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 150F                 __end_of_Flash_Memory_Read 1180  
                 ??_setDimmerLights_SwOff 006A                                _setRF_Main 0486  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1E31  
                       _DimmerLights_Main 1E39            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1E0E                __end_of_CC2500_ClearRXFIFO 1DF7  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1DFB  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 0079  
                          _LedPointSelect 11F7                       _DelayOffPointSelect 1103  
                                 clrloop0 1E15            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1073                      end_of_initialization 003C  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1333  
                           _DelayTime_1us 12E4                         __end_of_setTxData 0F57  
              __end_of_Flash_Memory_Write 1410                                   init_ram 1E0E  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006F  
                    Flash_Memory_Read@ret 0023                                   initloop 1E0F  
                              _setSw_Main 0040                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002F                         _CC2500_ReadStatus 12BF  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1F6A  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0DC6                             _CC2500_TxData 0C31  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 1713  
                            __pstringtext 1000                       _Flash_Memory_Unlock 0800  
                     ??_CC2500_ReadStatus 0022                    ??_getMain_LightsStatus 0024  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1E41  
                      _Mcu_Initialization 1F7C                  __size_of_CC2500_PowerRST 0044  
                    __end_of_my_MainTimer 154B                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1217  
                 __end_of_setPercentValue 0CFA                  __size_of_CC2500_WriteREG 0023  
               __end_of_CC2500_InitSetREG 135D                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0059  
                          ?_DelayTime_1us 0020                       _setDimmerLights_Adj 17B0  
                    ?_Flash_Memory_Unlock 0070                 __end_of_CC2500_ReadStatus 12E4  
                           ?_RF_RxDisable 0070           getMain_All_Error_Status@command 0021  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006C  
                          __end_of_IO_Set 114C                      _setRF_Initialization 1E5D  
                      _setMemory_LoopSave 1FD9                               _Switch_Main 1E68  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1FA0                   __end_of_getRF_KeyStatus 1F46  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 10C4                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 006B  
                          __end_of___bmul 1F6A                      setRF_DimmerLights@on 0066  
                _DimmerIntrIOCPointSelect 1FEC                         getSw_KeyStatus@sw 0024  
                       __size_of_TMR1_ISR 0029             __size_of_getDimmerLights_Line 0013  
                  ?_DimmerIntrPointSelect 0070                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 0050                            __end_of_setLED 08FD  
           __size_of_setDimmerLights_Line 0015             __size_of_setDimmerLights_SwOn 0040  
                          __end_of_setBuz 0A5A                      _CC2500_FrequencyCabr 1E73  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 1761  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0070  
                     start_initialization 0015                         _setRF_DimmerValue 1410  
                         ?_LedPointSelect 0070                               __end_of_ISR 0013  
                   ??_Flash_Memory_Modify 0024                        ??_setDimmerReClock 0073  
                      ?_setRF_DimmerValue 0070                __end_of_CC2500_InitPATable 11D8  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 06C5  
                          ??_RF_RxDisable 0024                              ?_Buzzer_Main 0070  
                      _set_TimeoutCleared 1E03                                  ??_IO_Set 0020  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 0168  
                             ?_setSw_Main 0070                       ??_setRF_DimmerValue 0066  
                     __size_of_getTemp_AD 003E                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 1DF0  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 00CF                     setProductData@address 0065  
                     Exception_Main@count 00E8                   setRF_DimmerValue@lights 0067  
                     Exception_Main@error 00E9                                  ??___bmul 0021  
                   ??_setDimmerLights_Adj 006C                    __size_of_SwPointSelect 0014  
                               _Tx_Length 00D2                               __pdataBANK4 0220  
                                ??_setLED 0023                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 0070  
                       ??_CC2500_ReadByte 0020          __end_of_getMain_All_Error_Status 119C  
                        _CC2500_SIDLEMode 1DFB                __size_of_DimmerLights_Main 0008  
               __end_of_setRF_DimmerValue 143F                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                               __pbssCOMMON 0075  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1FC6                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E8                             __pcstackBANK3 01E5  
                    ??_set_TimeoutCleared 0020                          ?_setPercentValue 0070  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                __size_of_setDimmerLights 0059                             DlyOff_Main@sw 006F  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 0064                __size_of_CC2500_ReadStatus 0025  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 0146                             _DimmerLights2 0157  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0066  
               ??_DimmerLightsPointSelect 0020                           ??_CC2500_RxData 0024  
                setRFSW_AdjControl@status 006A                           ??_CC2500_TxData 0024  
                          getRxData@error 00EC               __size_of_LED_Initialization 000C  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 00EB  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00DB  
                   DelayOffPointSelect@sw 0021                                setBuz@time 0029  
                     setDelayOff_GO@value 0067                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                    _setTemp_Initialization 1DE3  
                               _getBuz_GO 1F24       __end_of_Flash_Memory_Initialization 0486  
             _Flash_Memory_Initialization 03AA                                  ?___awdiv 0020  
                               __ptext100 1103                                 __ptext101 10C4  
                               __ptext110 1DF3                                 __ptext102 1DFB  
                               __ptext111 114C                                 __ptext103 1685  
                               __ptext120 1F46                                 __ptext112 1E03  
                               __ptext104 1333                                 __ptext121 1ED5  
                               __ptext113 10AF                                 __ptext105 11B9  
                               __ptext122 1E21                                 __ptext114 111A  
                               __ptext106 1279                                 __ptext123 154B  
                               __ptext115 16C9                                 __ptext107 1E73  
                               __ptext124 1FEC                                 __ptext116 1DE4  
                               __ptext108 12E4                                 __ptext109 1DF7  
                                ?___ftadd 0041                                 __ptext118 130A  
                               __ptext119 01B3                                 _getRxData 0775  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 003C                   __end_of_setRFSW_Control 17B0  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0008  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1DE7  
                        getPercentValue@i 005F                          setPercentValue@i 005F  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0021  
                      __end_of_TouchPower 1103                           DelayTimejudge@i 0026  
                         DelayTimejudge@j 0027                           DelayTimejudge@k 0028  
                     __size_of_setSw_Main 0173              CC2500_ReadStatus@status_addr 0023  
          __size_of_setDimmerLights_AdjRF 0023            __size_of_setDimmerLights_AdjOn 0035  
           __end_of_setDimmerLights_AdjRF 12BF             __end_of_setDimmerLights_AdjOn 14D9  
                  CC2500_WriteByte@loop_a 0021                                 _r_address 00D3  
          __size_of_setDimmerLights_SwOff 0058            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 0A01              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1F02                            __size_of_getAD 0020  
                 __size_of_DelayTimejudge 002A                             _SwPointSelect 1087  
                     __end_of_setLED_Main 1685                          ??_getDelayOff_GO 0022  
                     _DimmerLightsIntrIOC 00CC                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 1DF0              setDimmerLights_SwOff@command 006A  
                       _CC2500_rfSettings 102F                                  _LED_Main 1EA3  
                         SwPointSelect@sw 0021                                 clear_ram0 1E14  
                CC2500_InitPATable@loop_d 0027                              _my_MainTimer 150F  
                               _setTxData 0EBC       __end_of_DimmerLights_Initialization 1087  
             _DimmerLights_Initialization 1073                        _CC2500_ClearRXFIFO 1DF3  
                      _CC2500_ClearTXFIFO 1DF7                  setRF_DimmerLights@lights 006A  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 10AF  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                __size_of_getPercentValue 0065                  setRF_DimmerLights@status 0069  
             __size_of_setRFSW_AdjControl 003E                        _Flash_Memory_Write 13E1  
                              ?_getRxData 0070                                  _TMR1_ISR 130A  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                                _TMR1_Set 1EBB                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                                  _RF_Count 0144  
                    __end_of_RF_RxDisable 1EF3                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1166                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 1F8E                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0023                          __size_of_ADC_Set 0007  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 01E5                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0058                                  _DelayOff 00C9  
                            setSw_Main@sw 006E          setDimmerLights_IntrIOC_GO@lights 0072  
                        __size_of_IOC_ISR 000F              ?_setDimmerLights_IntrControl 0070  
          getMain_All_Error_Status@status 0024                          __size_of_IOC_Set 000C  
            __end_of_Flash_Memory_Erasing 1E97                            ?_SwPointSelect 0070  
                             getAD@adcon0 0023                               getAD@adcon1 0020  
                          setLED_Main@led 0024                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 14A4                     _DlyOff_Initialization 1E08  
                    ??_CC2500_ClearRXFIFO 0024                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                                _Fosc_Set 1DFF                          __size_of_WDT_Set 000B  
                   setRFSW_Control@status 006D                     _Switch_Initialization 1066  
       __size_of_getMain_All_Error_Status 001C                      ??_Flash_Memory_Write 0020  
                       ??_setDimmerLights 006C                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 1604  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
              ??_DimmerIntrIOCPointSelect 0070                          _CC2500_WriteByte 111A  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00D1  
                             ??_Temp_Main 0069                         setRFSW_Control@sw 006E  
           _getMain_All_Error_Status$3324 0022                                 setLED@led 0023  
                 ??_DimmerIntrPointSelect 0070                              _setTemp_Main 0615  
                        __size_of___awdiv 0054                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                  setDimmerLights_SwOn@idle 002E  
                                ___awtoft 1257                          ??_LedPointSelect 0020  
                                ___ftpack 0B6C             __size_of_getMain_LightsStatus 002D  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00ED  
                    CC2500_WriteREG@value 0022                               _setLED_Main 1644  
              __end_of_setRF_DimmerLights 0AB3                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
                        setDelayOff_GO@sw 0069                                  __ptext10 1DE3  
                                __ptext11 1E68                                  __ptext20 1DEA  
                                __ptext12 0040                                  __ptext21 0486  
                                __ptext13 109B                                  __ptext30 129C  
                                __ptext22 0775                                  __ptext14 14A4  
                                __ptext31 0CFA                                  __ptext23 1470  
                                __ptext15 11D8                                  __ptext40 119C  
                                __ptext32 0561                                  __ptext24 1FD9  
                                __ptext16 1087                                  __ptext41 1DE7  
                                __ptext33 1FC6                                  __ptext25 0D5F  
                                __ptext17 1066                                  __ptext50 1EA3  
                                __ptext42 1E5D                                  __ptext34 1F35  
                                __ptext26 1761                                  __ptext18 1E41  
                                __ptext51 1644                                  __ptext43 1F7C  
                                __ptext35 1F24                                  __ptext27 1604  
                                __ptext19 10EE                                  __ptext60 0800  
                                __ptext52 1E97                                  __ptext44 1E52  
                                __ptext36 1EE4                                  __ptext28 1588  
                                __ptext61 1166                                  __ptext53 1F6A  
                                __ptext45 1EBB                                  __ptext37 0C31  
                                __ptext29 1410                                  __ptext70 0EBC  
                                __ptext62 06C5                                  __ptext54 14D9  
                                __ptext46 1133                                  __ptext38 0DC6  
                                __ptext71 0A5A                                  __ptext63 13B4  
                                __ptext55 1713                                  __ptext47 1EAF  
                                __ptext39 12BF                                  __ptext80 11F7  
                                __ptext72 0C95                                  __ptext64 1180  
                                __ptext56 1E8B                                  __ptext48 1DFF  
                                __ptext81 10D9                                  __ptext73 0E35  
                                __ptext65 1FB3                                  __ptext57 03AA  
                                __ptext49 1E1A                                  __ptext90 1EC7  
                                __ptext82 1387                                  __ptext74 1E49  
                                __ptext66 1E39                                  __ptext58 1E7F  
                                __ptext91 135D                                  __ptext83 1073  
                                __ptext75 0F57                                  __ptext67 0809  
                                __ptext59 13E1                                  __ptext92 1F58  
                                __ptext84 143F                                  __ptext76 02B4  
                                __ptext68 17B0                                  __ptext93 1F13  
                                __ptext85 1E31                                  __ptext77 1257  
                                __ptext69 0AB3                                  __ptext94 1F02  
                                __ptext86 0BCD                                  __ptext78 0B6C  
                                __ptext95 1FA0                                  __ptext87 0B0C  
                                __ptext79 08AA                                  __ptext96 0A01  
                                __ptext88 09A9                                  __ptext97 08FD  
                                __ptext89 0951                                  __ptext98 1E29  
                                __ptext99 1E08                                  __product 0220  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1FC6  
            __end_of_setDimmerLights_Main 0859              __end_of_setDimmerLights_Line 10EE  
            __end_of_setDimmerLights_SwOn 1644                              ??_setSw_Main 006C  
                           setLED@command 0022                             __size_of_main 0051  
                             _setRF_Learn 109B                  __end_of_CC2500_SIDLEMode 1DFF  
              setDimmerLights_Main@lights 006E               __end_of_DelayOffPointSelect 111A  
              CC2500_WriteCommand@command 0023                      setRF_Main@Receive_OK 01E6  
               __size_of_setDimmerReClock 0008                   setDimmerLights_AdjOn@sw 0025  
                         _CC2500_ReadByte 119C                        _CC2500_InitPATable 11B9  
                __end_of_setMemory_Modify 1FD9                        __end_of_setRF_Main 0561  
                             ??_getBuz_GO 0022               __size_of_Mcu_Initialization 0012  
             setDimmerLights_ErrorClose@i 00EA                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006F                                  main@argc 01E8  
                                main@argv 01EA                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$5696 0021                      _getSw_KeyStatus$5697 0022  
                         _CC2500_PowerRST 1685                  __size_of_getSw_KeyStatus 001F  
             __end_of_Flash_Memory_Modify 1761                         ??_getPercentValue 005C  
                             _setLog_Code 1470               __end_of_Flash_Memory_Unlock 0809  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 1279  
                      __end_of_setSw_Main 01B3                             _Transceive_OK 03C1  
                  ?_DlyOff_Initialization 0070                            _DelayTimejudge 135D  
                             pic14e$flags 007E              ??_setDimmerLights_IntrIOC_GO 0072  
              setDimmerLights_Line@lights 0020              ??_setDimmerLights_ErrorClose 006C  
                 setDimmerLights_SwOff@sw 006B               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                   ??_CC2500_PowerOnInitial 0029  
  __end_of_setDimmerLights_Initialization 1470   __size_of_setDimmerLights_Initialization 0031  
          _setDimmerLights_Initialization 143F               __end_of_setDimmerLights_Adj 1800  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1DE7      __size_of_setDimmerLights_IntrControl 0101  
                    _Flash_Memory_Erasing 1E8B                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D0                   __size_of_Exception_Main 00B0  
         __end_of_DelayOff_Initialization 1E31       __size_of_setDimmerLights_IntrIOC_GO 003D  
     __size_of_setDimmerLights_ErrorClose 0060                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1E39                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0951  
        __size_of_setControl_Lights_Table 0067                    __end_of_DelayTimejudge 1387  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 006D                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 130A                   __end_of_CC2500_ReadByte 11B9  
            __end_of_setSw_Initialization 1E49                           _Timeout_Counter 10AF  
         __size_of_getDimmerLights_Status 0011                      getPercentValue@value 005E  
                            _RF_RxDisable 1EE4                __end_of_LED_Initialization 1EA3  
          __end_of_setTemp_Initialization 1DE4                  __size_of_setPercentValue 0065  
                 setMemory_Modify@command 0021                      setPercentValue@value 005E  
               __end_of_RF_Initialization 1DEA                     __end_of_CC2500_RxData 0E35  
                   __end_of_CC2500_TxData 0C95                   __end_of_CC2500_PowerRST 16C9  
