

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Dec 19 15:43:35 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	intentry,global,class=CODE,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   158                           	dabs	1,0x7E,2
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0197                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019C                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020D                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0FE4                     	;# 
   260  0FE5                     	;# 
   261  0FE6                     	;# 
   262  0FE7                     	;# 
   263  0FE8                     	;# 
   264  0FE9                     	;# 
   265  0FEA                     	;# 
   266  0FEB                     	;# 
   267  0FED                     	;# 
   268  0FEE                     	;# 
   269  0FEF                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0097                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020D                     	;# 
   343  0210                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0298                     	;# 
   364  0298                     	;# 
   365  0299                     	;# 
   366  029A                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0197                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020D                     	;# 
   454  0210                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  011D                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0191                     	;# 
   545  0191                     	;# 
   546  0192                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020D                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0216                     	;# 
   579  0217                     	;# 
   580  0217                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0298                     	;# 
   586  0298                     	;# 
   587  0299                     	;# 
   588  029A                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0099                     	;# 
   640  009A                     	;# 
   641  009B                     	;# 
   642  009B                     	;# 
   643  009C                     	;# 
   644  009D                     	;# 
   645  009E                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  011D                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  018E                     	;# 
   655  0191                     	;# 
   656  0191                     	;# 
   657  0192                     	;# 
   658  0193                     	;# 
   659  0193                     	;# 
   660  0194                     	;# 
   661  0195                     	;# 
   662  0196                     	;# 
   663  0197                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019E                     	;# 
   674  019F                     	;# 
   675  020D                     	;# 
   676  0210                     	;# 
   677  0211                     	;# 
   678  0211                     	;# 
   679  0212                     	;# 
   680  0212                     	;# 
   681  0213                     	;# 
   682  0213                     	;# 
   683  0214                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0298                     	;# 
   697  0298                     	;# 
   698  0299                     	;# 
   699  029A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0099                     	;# 
   751  009A                     	;# 
   752  009B                     	;# 
   753  009B                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009E                     	;# 
   757  010C                     	;# 
   758  010D                     	;# 
   759  010E                     	;# 
   760  0116                     	;# 
   761  0117                     	;# 
   762  011D                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  0191                     	;# 
   767  0191                     	;# 
   768  0192                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0197                     	;# 
   775  0199                     	;# 
   776  019A                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019C                     	;# 
   782  019C                     	;# 
   783  019D                     	;# 
   784  019E                     	;# 
   785  019F                     	;# 
   786  020D                     	;# 
   787  0210                     	;# 
   788  0211                     	;# 
   789  0211                     	;# 
   790  0212                     	;# 
   791  0212                     	;# 
   792  0213                     	;# 
   793  0213                     	;# 
   794  0214                     	;# 
   795  0214                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0216                     	;# 
   800  0216                     	;# 
   801  0217                     	;# 
   802  0217                     	;# 
   803  0291                     	;# 
   804  0291                     	;# 
   805  0292                     	;# 
   806  0293                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  001A                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0090                     	;# 
   856  0091                     	;# 
   857  0092                     	;# 
   858  0095                     	;# 
   859  0096                     	;# 
   860  0097                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0116                     	;# 
   872  0117                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019C                     	;# 
   893  019C                     	;# 
   894  019D                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  020D                     	;# 
   898  0210                     	;# 
   899  0211                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0212                     	;# 
   903  0213                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0214                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0216                     	;# 
   911  0216                     	;# 
   912  0217                     	;# 
   913  0217                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0090                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0197                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020D                     	;# 
  1009  0210                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0298                     	;# 
  1030  0298                     	;# 
  1031  0299                     	;# 
  1032  029A                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0FE4                     	;# 
  1037  0FE5                     	;# 
  1038  0FE6                     	;# 
  1039  0FE7                     	;# 
  1040  0FE8                     	;# 
  1041  0FE9                     	;# 
  1042  0FEA                     	;# 
  1043  0FEB                     	;# 
  1044  0FED                     	;# 
  1045  0FEE                     	;# 
  1046  0FEF                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0008                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0015                     	;# 
  1066  0016                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  010E                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0197                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020D                     	;# 
  1120  0210                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  0394                     	;# 
  1145  0395                     	;# 
  1146  0396                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0015                     	;# 
  1177  0016                     	;# 
  1178  0016                     	;# 
  1179  0017                     	;# 
  1180  0018                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  008C                     	;# 
  1186  008D                     	;# 
  1187  008E                     	;# 
  1188  0090                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0099                     	;# 
  1195  009A                     	;# 
  1196  009B                     	;# 
  1197  009B                     	;# 
  1198  009C                     	;# 
  1199  009D                     	;# 
  1200  009E                     	;# 
  1201  010C                     	;# 
  1202  010D                     	;# 
  1203  010E                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  011D                     	;# 
  1207  018C                     	;# 
  1208  018D                     	;# 
  1209  018E                     	;# 
  1210  0191                     	;# 
  1211  0191                     	;# 
  1212  0192                     	;# 
  1213  0193                     	;# 
  1214  0193                     	;# 
  1215  0194                     	;# 
  1216  0195                     	;# 
  1217  0196                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  019A                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019C                     	;# 
  1227  019D                     	;# 
  1228  019E                     	;# 
  1229  019F                     	;# 
  1230  020D                     	;# 
  1231  0210                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0298                     	;# 
  1252  0298                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000D                     	;# 
  1283  000E                     	;# 
  1284  0010                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0099                     	;# 
  1306  009A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010E                     	;# 
  1315  0116                     	;# 
  1316  0117                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018D                     	;# 
  1320  018E                     	;# 
  1321  0191                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0197                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019C                     	;# 
  1337  019C                     	;# 
  1338  019D                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  020D                     	;# 
  1342  0210                     	;# 
  1343  0211                     	;# 
  1344  0211                     	;# 
  1345  0212                     	;# 
  1346  0212                     	;# 
  1347  0213                     	;# 
  1348  0213                     	;# 
  1349  0214                     	;# 
  1350  0214                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0216                     	;# 
  1355  0216                     	;# 
  1356  0217                     	;# 
  1357  0217                     	;# 
  1358  0291                     	;# 
  1359  0291                     	;# 
  1360  0292                     	;# 
  1361  0293                     	;# 
  1362  0298                     	;# 
  1363  0298                     	;# 
  1364  0299                     	;# 
  1365  029A                     	;# 
  1366  0394                     	;# 
  1367  0395                     	;# 
  1368  0396                     	;# 
  1369  0FE4                     	;# 
  1370  0FE5                     	;# 
  1371  0FE6                     	;# 
  1372  0FE7                     	;# 
  1373  0FE8                     	;# 
  1374  0FE9                     	;# 
  1375  0FEA                     	;# 
  1376  0FEB                     	;# 
  1377  0FED                     	;# 
  1378  0FEE                     	;# 
  1379  0FEF                     	;# 
  1380  0000                     	;# 
  1381  0001                     	;# 
  1382  0002                     	;# 
  1383  0003                     	;# 
  1384  0004                     	;# 
  1385  0005                     	;# 
  1386  0006                     	;# 
  1387  0007                     	;# 
  1388  0008                     	;# 
  1389  0009                     	;# 
  1390  000A                     	;# 
  1391  000B                     	;# 
  1392  000C                     	;# 
  1393  000D                     	;# 
  1394  000E                     	;# 
  1395  0010                     	;# 
  1396  0011                     	;# 
  1397  0012                     	;# 
  1398  0015                     	;# 
  1399  0016                     	;# 
  1400  0016                     	;# 
  1401  0017                     	;# 
  1402  0018                     	;# 
  1403  0019                     	;# 
  1404  001A                     	;# 
  1405  001B                     	;# 
  1406  001C                     	;# 
  1407  008C                     	;# 
  1408  008D                     	;# 
  1409  008E                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0095                     	;# 
  1414  0096                     	;# 
  1415  0097                     	;# 
  1416  0099                     	;# 
  1417  009A                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  010C                     	;# 
  1424  010D                     	;# 
  1425  010E                     	;# 
  1426  0116                     	;# 
  1427  0117                     	;# 
  1428  011D                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  018E                     	;# 
  1432  0191                     	;# 
  1433  0191                     	;# 
  1434  0192                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0197                     	;# 
  1441  0199                     	;# 
  1442  019A                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019E                     	;# 
  1451  019F                     	;# 
  1452  020D                     	;# 
  1453  0210                     	;# 
  1454  0211                     	;# 
  1455  0211                     	;# 
  1456  0212                     	;# 
  1457  0212                     	;# 
  1458  0213                     	;# 
  1459  0213                     	;# 
  1460  0214                     	;# 
  1461  0214                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  0394                     	;# 
  1478  0395                     	;# 
  1479  0396                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0010                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0090                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020D                     	;# 
  1564  0210                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  010C                     	;# 
  1646  010D                     	;# 
  1647  010E                     	;# 
  1648  0116                     	;# 
  1649  0117                     	;# 
  1650  011D                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0191                     	;# 
  1655  0191                     	;# 
  1656  0192                     	;# 
  1657  0193                     	;# 
  1658  0193                     	;# 
  1659  0194                     	;# 
  1660  0195                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0199                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019F                     	;# 
  1674  020D                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0298                     	;# 
  1696  0298                     	;# 
  1697  0299                     	;# 
  1698  029A                     	;# 
  1699  0394                     	;# 
  1700  0395                     	;# 
  1701  0396                     	;# 
  1702  0FE4                     	;# 
  1703  0FE5                     	;# 
  1704  0FE6                     	;# 
  1705  0FE7                     	;# 
  1706  0FE8                     	;# 
  1707  0FE9                     	;# 
  1708  0FEA                     	;# 
  1709  0FEB                     	;# 
  1710  0FED                     	;# 
  1711  0FEE                     	;# 
  1712  0FEF                     	;# 
  1713  0000                     	;# 
  1714  0001                     	;# 
  1715  0002                     	;# 
  1716  0003                     	;# 
  1717  0004                     	;# 
  1718  0005                     	;# 
  1719  0006                     	;# 
  1720  0007                     	;# 
  1721  0008                     	;# 
  1722  0009                     	;# 
  1723  000A                     	;# 
  1724  000B                     	;# 
  1725  000C                     	;# 
  1726  000D                     	;# 
  1727  000E                     	;# 
  1728  0010                     	;# 
  1729  0011                     	;# 
  1730  0012                     	;# 
  1731  0015                     	;# 
  1732  0016                     	;# 
  1733  0016                     	;# 
  1734  0017                     	;# 
  1735  0018                     	;# 
  1736  0019                     	;# 
  1737  001A                     	;# 
  1738  001B                     	;# 
  1739  001C                     	;# 
  1740  008C                     	;# 
  1741  008D                     	;# 
  1742  008E                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0095                     	;# 
  1747  0096                     	;# 
  1748  0097                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009B                     	;# 
  1753  009C                     	;# 
  1754  009D                     	;# 
  1755  009E                     	;# 
  1756  010C                     	;# 
  1757  010D                     	;# 
  1758  010E                     	;# 
  1759  0116                     	;# 
  1760  0117                     	;# 
  1761  011D                     	;# 
  1762  018C                     	;# 
  1763  018D                     	;# 
  1764  018E                     	;# 
  1765  0191                     	;# 
  1766  0191                     	;# 
  1767  0192                     	;# 
  1768  0193                     	;# 
  1769  0193                     	;# 
  1770  0194                     	;# 
  1771  0195                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0199                     	;# 
  1775  019A                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019C                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020D                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0298                     	;# 
  1807  0298                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0010                     	;# 
  1840  0011                     	;# 
  1841  0012                     	;# 
  1842  0015                     	;# 
  1843  0016                     	;# 
  1844  0016                     	;# 
  1845  0017                     	;# 
  1846  0018                     	;# 
  1847  0019                     	;# 
  1848  001A                     	;# 
  1849  001B                     	;# 
  1850  001C                     	;# 
  1851  008C                     	;# 
  1852  008D                     	;# 
  1853  008E                     	;# 
  1854  0090                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0095                     	;# 
  1858  0096                     	;# 
  1859  0097                     	;# 
  1860  0099                     	;# 
  1861  009A                     	;# 
  1862  009B                     	;# 
  1863  009B                     	;# 
  1864  009C                     	;# 
  1865  009D                     	;# 
  1866  009E                     	;# 
  1867  010C                     	;# 
  1868  010D                     	;# 
  1869  010E                     	;# 
  1870  0116                     	;# 
  1871  0117                     	;# 
  1872  011D                     	;# 
  1873  018C                     	;# 
  1874  018D                     	;# 
  1875  018E                     	;# 
  1876  0191                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0193                     	;# 
  1880  0193                     	;# 
  1881  0194                     	;# 
  1882  0195                     	;# 
  1883  0196                     	;# 
  1884  0197                     	;# 
  1885  0199                     	;# 
  1886  019A                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019D                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  020D                     	;# 
  1897  0210                     	;# 
  1898  0211                     	;# 
  1899  0211                     	;# 
  1900  0212                     	;# 
  1901  0212                     	;# 
  1902  0213                     	;# 
  1903  0213                     	;# 
  1904  0214                     	;# 
  1905  0214                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0216                     	;# 
  1910  0216                     	;# 
  1911  0217                     	;# 
  1912  0217                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0298                     	;# 
  1918  0298                     	;# 
  1919  0299                     	;# 
  1920  029A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0015                     	;# 
  1954  0016                     	;# 
  1955  0016                     	;# 
  1956  0017                     	;# 
  1957  0018                     	;# 
  1958  0019                     	;# 
  1959  001A                     	;# 
  1960  001B                     	;# 
  1961  001C                     	;# 
  1962  008C                     	;# 
  1963  008D                     	;# 
  1964  008E                     	;# 
  1965  0090                     	;# 
  1966  0091                     	;# 
  1967  0092                     	;# 
  1968  0095                     	;# 
  1969  0096                     	;# 
  1970  0097                     	;# 
  1971  0099                     	;# 
  1972  009A                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0116                     	;# 
  1982  0117                     	;# 
  1983  011D                     	;# 
  1984  018C                     	;# 
  1985  018D                     	;# 
  1986  018E                     	;# 
  1987  0191                     	;# 
  1988  0191                     	;# 
  1989  0192                     	;# 
  1990  0193                     	;# 
  1991  0193                     	;# 
  1992  0194                     	;# 
  1993  0195                     	;# 
  1994  0196                     	;# 
  1995  0197                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  020D                     	;# 
  2008  0210                     	;# 
  2009  0211                     	;# 
  2010  0211                     	;# 
  2011  0212                     	;# 
  2012  0212                     	;# 
  2013  0213                     	;# 
  2014  0213                     	;# 
  2015  0214                     	;# 
  2016  0214                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0216                     	;# 
  2021  0216                     	;# 
  2022  0217                     	;# 
  2023  0217                     	;# 
  2024  0291                     	;# 
  2025  0291                     	;# 
  2026  0292                     	;# 
  2027  0293                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000D                     	;# 
  2060  000E                     	;# 
  2061  0010                     	;# 
  2062  0011                     	;# 
  2063  0012                     	;# 
  2064  0015                     	;# 
  2065  0016                     	;# 
  2066  0016                     	;# 
  2067  0017                     	;# 
  2068  0018                     	;# 
  2069  0019                     	;# 
  2070  001A                     	;# 
  2071  001B                     	;# 
  2072  001C                     	;# 
  2073  008C                     	;# 
  2074  008D                     	;# 
  2075  008E                     	;# 
  2076  0090                     	;# 
  2077  0091                     	;# 
  2078  0092                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0099                     	;# 
  2083  009A                     	;# 
  2084  009B                     	;# 
  2085  009B                     	;# 
  2086  009C                     	;# 
  2087  009D                     	;# 
  2088  009E                     	;# 
  2089  010C                     	;# 
  2090  010D                     	;# 
  2091  010E                     	;# 
  2092  0116                     	;# 
  2093  0117                     	;# 
  2094  011D                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  0191                     	;# 
  2099  0191                     	;# 
  2100  0192                     	;# 
  2101  0193                     	;# 
  2102  0193                     	;# 
  2103  0194                     	;# 
  2104  0195                     	;# 
  2105  0196                     	;# 
  2106  0197                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020D                     	;# 
  2119  0210                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0291                     	;# 
  2136  0291                     	;# 
  2137  0292                     	;# 
  2138  0293                     	;# 
  2139  0298                     	;# 
  2140  0298                     	;# 
  2141  0299                     	;# 
  2142  029A                     	;# 
  2143  0394                     	;# 
  2144  0395                     	;# 
  2145  0396                     	;# 
  2146  0FE4                     	;# 
  2147  0FE5                     	;# 
  2148  0FE6                     	;# 
  2149  0FE7                     	;# 
  2150  0FE8                     	;# 
  2151  0FE9                     	;# 
  2152  0FEA                     	;# 
  2153  0FEB                     	;# 
  2154  0FED                     	;# 
  2155  0FEE                     	;# 
  2156  0FEF                     	;# 
  2157                           
  2158                           	psect	idataBANK4
  2159  1F50                     __pidataBANK4:	
  2160                           
  2161                           ;initializer for __product
  2162  1F50  3463               	retlw	99
  2163  1F51  3402               	retlw	2
  2164  1F52  3400               	retlw	0
  2165  1F53  3400               	retlw	0
  2166  1F54  3400               	retlw	0
  2167  1F55  3400               	retlw	0
  2168  1F56  3400               	retlw	0
  2169  1F57  3400               	retlw	0
  2170  1F58  3400               	retlw	0
  2171  1F59  3400               	retlw	0
  2172  1F5A  3400               	retlw	0
  2173  1F5B  3400               	retlw	0
  2174  1F5C  34FF               	retlw	255
  2175  1F5D  34FF               	retlw	255
  2176  1F5E  34FF               	retlw	255
  2177  1F5F  3400               	retlw	0
  2178  1F60  3400               	retlw	0
  2179  1F61  3400               	retlw	0
  2180  1F62  3400               	retlw	0
  2181  1F63  3400               	retlw	0
  2182  1F64  3400               	retlw	0
  2183  1F65  3400               	retlw	0
  2184  1F66  3400               	retlw	0
  2185  1F67  3400               	retlw	0
  2186  1F68  3400               	retlw	0
  2187  1F69  3400               	retlw	0
  2188  1F6A  3400               	retlw	0
  2189  1F6B  3400               	retlw	0
  2190  1F6C  3400               	retlw	0
  2191  1F6D  3400               	retlw	0
  2192  1F6E  3400               	retlw	0
  2193  1F6F  3400               	retlw	0
  2194                           
  2195                           	psect	stringtext
  2196  1000                     __pstringtext:	
  2197  1000                     _CC2500_registers_address:	
  2198  1000  3403               	retlw	3
  2199  1001  3416               	retlw	22
  2200  1002  3417               	retlw	23
  2201  1003  341E               	retlw	30
  2202  1004  341F               	retlw	31
  2203  1005  3420               	retlw	32
  2204  1006  342A               	retlw	42
  2205  1007  342B               	retlw	43
  2206  1008  340B               	retlw	11
  2207  1009  340C               	retlw	12
  2208  100A  340D               	retlw	13
  2209  100B  340E               	retlw	14
  2210  100C  340F               	retlw	15
  2211  100D  3410               	retlw	16
  2212  100E  3411               	retlw	17
  2213  100F  3412               	retlw	18
  2214  1010  3413               	retlw	19
  2215  1011  3414               	retlw	20
  2216  1012  340A               	retlw	10
  2217  1013  3415               	retlw	21
  2218  1014  3421               	retlw	33
  2219  1015  3422               	retlw	34
  2220  1016  3418               	retlw	24
  2221  1017  3419               	retlw	25
  2222  1018  341A               	retlw	26
  2223  1019  341B               	retlw	27
  2224  101A  341C               	retlw	28
  2225  101B  341D               	retlw	29
  2226  101C  3423               	retlw	35
  2227  101D  3424               	retlw	36
  2228  101E  3425               	retlw	37
  2229  101F  3426               	retlw	38
  2230  1020  3429               	retlw	41
  2231  1021  342C               	retlw	44
  2232  1022  342D               	retlw	45
  2233  1023  342E               	retlw	46
  2234  1024  3400               	retlw	0
  2235  1025  3401               	retlw	1
  2236  1026  3402               	retlw	2
  2237  1027  3407               	retlw	7
  2238  1028  3408               	retlw	8
  2239  1029  3409               	retlw	9
  2240  102A  3406               	retlw	6
  2241  102B  3404               	retlw	4
  2242  102C  3405               	retlw	5
  2243  102D  3427               	retlw	39
  2244  102E  3428               	retlw	40
  2245  102F                     __end_of_CC2500_registers_address:	
  2246  102F                     _CC2500_rfSettings:	
  2247  102F  3407               	retlw	7
  2248  1030  3407               	retlw	7
  2249  1031  3430               	retlw	48
  2250  1032  3487               	retlw	135
  2251  1033  346B               	retlw	107
  2252  1034  34F8               	retlw	248
  2253  1035  347F               	retlw	127
  2254  1036  343F               	retlw	63
  2255  1037  3409               	retlw	9
  2256  1038  3400               	retlw	0
  2257  1039  345C               	retlw	92
  2258  103A  34A7               	retlw	167
  2259  103B  3462               	retlw	98
  2260  103C  3486               	retlw	134
  2261  103D  3483               	retlw	131
  2262  103E  3403               	retlw	3
  2263  103F  3422               	retlw	34
  2264  1040  34F8               	retlw	248
  2265  1041  3400               	retlw	0
  2266  1042  3444               	retlw	68
  2267  1043  34B6               	retlw	182
  2268  1044  3410               	retlw	16
  2269  1045  3418               	retlw	24
  2270  1046  341D               	retlw	29
  2271  1047  341C               	retlw	28
  2272  1048  34C7               	retlw	199
  2273  1049  3400               	retlw	0
  2274  104A  34B2               	retlw	178
  2275  104B  34EA               	retlw	234
  2276  104C  340A               	retlw	10
  2277  104D  3400               	retlw	0
  2278  104E  3411               	retlw	17
  2279  104F  3459               	retlw	89
  2280  1050  3488               	retlw	136
  2281  1051  3431               	retlw	49
  2282  1052  340B               	retlw	11
  2283  1053  342F               	retlw	47
  2284  1054  342E               	retlw	46
  2285  1055  3406               	retlw	6
  2286  1056  3404               	retlw	4
  2287  1057  3405               	retlw	5
  2288  1058  3400               	retlw	0
  2289  1059  3430               	retlw	48
  2290  105A  34D3               	retlw	211
  2291  105B  3491               	retlw	145
  2292  105C  3441               	retlw	65
  2293  105D  3400               	retlw	0
  2294  105E                     __end_of_CC2500_rfSettings:	
  2295  105E                     _CC2500_patable_vaule:	
  2296  105E  34FE               	retlw	254
  2297  105F  34FE               	retlw	254
  2298  1060  34FE               	retlw	254
  2299  1061  34FE               	retlw	254
  2300  1062  34FE               	retlw	254
  2301  1063  34FE               	retlw	254
  2302  1064  34FE               	retlw	254
  2303  1065  34FE               	retlw	254
  2304  1066                     __end_of_CC2500_patable_vaule:	
  2305                           
  2306                           	psect	nvCOMMON
  2307  0079                     __pnvCOMMON:	
  2308  0079                     _product:	
  2309  0079                     	ds	1
  2310  000C                     _PORTA	set	12
  2311  000D                     _PORTB	set	13
  2312  000E                     _PORTC	set	14
  2313  0018                     _T1CON	set	24
  2314  0017                     _TMR1H	set	23
  2315  0016                     _TMR1L	set	22
  2316  005F                     _GIE	set	95
  2317  005B                     _IOCIE	set	91
  2318  0058                     _IOCIF	set	88
  2319  005E                     _PEIE	set	94
  2320  0060                     _RA0	set	96
  2321  0063                     _RA3	set	99
  2322  0064                     _RA4	set	100
  2323  0066                     _RA6	set	102
  2324  0067                     _RA7	set	103
  2325  0068                     _RB0	set	104
  2326  0069                     _RB1	set	105
  2327  006A                     _RB2	set	106
  2328  006B                     _RB3	set	107
  2329  006C                     _RB4	set	108
  2330  006D                     _RB5	set	109
  2331  0070                     _RC0	set	112
  2332  0071                     _RC1	set	113
  2333  0072                     _RC2	set	114
  2334  0074                     _RC4	set	116
  2335  0075                     _RC5	set	117
  2336  0077                     _RC7	set	119
  2337  0088                     _TMR1IF	set	136
  2338  009D                     _ADCON0	set	157
  2339  009E                     _ADCON1	set	158
  2340  009C                     _ADRESH	set	156
  2341  009B                     _ADRESL	set	155
  2342  0099                     _OSCCON	set	153
  2343  008C                     _TRISA	set	140
  2344  008D                     _TRISB	set	141
  2345  008E                     _TRISC	set	142
  2346  0097                     _WDTCON	set	151
  2347  04E9                     _GO_nDONE	set	1257
  2348  0488                     _TMR1IE	set	1160
  2349  0117                     _FVRCON	set	279
  2350  010C                     _LATA	set	268
  2351  010D                     _LATB	set	269
  2352  010E                     _LATC	set	270
  2353  018C                     _ANSELA	set	396
  2354  018D                     _ANSELB	set	397
  2355  018E                     _ANSELC	set	398
  2356  0192                     _PMADRH	set	402
  2357  0191                     _PMADRL	set	401
  2358  0196                     _PMCON2	set	406
  2359  0194                     _PMDATH	set	404
  2360  0193                     _PMDATL	set	403
  2361  0CAE                     _CFGS	set	3246
  2362  0CAC                     _FREE	set	3244
  2363  0CAD                     _LWLO	set	3245
  2364  0CA8                     _RD	set	3240
  2365  0CA9                     _WR	set	3241
  2366  0CAA                     _WREN	set	3242
  2367  1069                     _WPUB1	set	4201
  2368  106A                     _WPUB2	set	4202
  2369  0396                     _IOCBF	set	918
  2370  0395                     _IOCBN	set	917
  2371  0394                     _IOCBP	set	916
  2372  1CB2                     _IOCBF2	set	7346
  2373                           
  2374                           ; #config settings
  2375  0000                     
  2376                           	psect	cinit
  2377  0015                     start_initialization:	
  2378  0015                     __initialization:	
  2379                           
  2380                           ; Clear objects allocated to BITCOMMON
  2381  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2382                           
  2383                           ; Clear objects allocated to COMMON
  2384  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2385  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2386  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BANK0
  2389  0019  01EF               	clrf	__pbssBANK0& (0+127)
  2390                           
  2391                           ; Clear objects allocated to BANK1
  2392  001A  30A0               	movlw	low __pbssBANK1
  2393  001B  0084               	movwf	4
  2394  001C  3000               	movlw	high __pbssBANK1
  2395  001D  0085               	movwf	5
  2396  001E  3048               	movlw	72
  2397  001F  319B  230F  3180   	fcall	clear_ram0
  2398                           
  2399                           ; Clear objects allocated to BANK2
  2400  0022  3020               	movlw	low __pbssBANK2
  2401  0023  0084               	movwf	4
  2402  0024  3001               	movlw	high __pbssBANK2
  2403  0025  0085               	movwf	5
  2404  0026  304E               	movlw	78
  2405  0027  319B  230F  3180   	fcall	clear_ram0
  2406                           
  2407                           ; Clear objects allocated to BANK3
  2408  002A  30A0               	movlw	low __pbssBANK3
  2409  002B  0084               	movwf	4
  2410  002C  3001               	movlw	high __pbssBANK3
  2411  002D  0085               	movwf	5
  2412  002E  304F               	movlw	79
  2413  002F  319B  230F  3180   	fcall	clear_ram0
  2414                           
  2415                           ; Clear objects allocated to BANK4
  2416  0032  3020               	movlw	low __pbssBANK4
  2417  0033  0084               	movwf	4
  2418  0034  3002               	movlw	high __pbssBANK4
  2419  0035  0085               	movwf	5
  2420  0036  3025               	movlw	37
  2421  0037  319B  230F  3180   	fcall	clear_ram0
  2422                           
  2423                           ; Initialize objects allocated to BANK4
  2424  003A  3050               	movlw	low __pidataBANK4
  2425  003B  0084               	movwf	4
  2426  003C  309F               	movlw	(high __pidataBANK4)| (0+128)
  2427  003D  0085               	movwf	5
  2428  003E  3045               	movlw	low __pdataBANK4
  2429  003F  0086               	movwf	6
  2430  0040  3002               	movlw	high __pdataBANK4
  2431  0041  0087               	movwf	7
  2432  0042  3020               	movlw	32
  2433  0043  319B  2309         	fcall	init_ram
  2434  0045                     end_of_initialization:	
  2435                           ;End of C runtime variable initialization code
  2436                           
  2437  0045                     __end_of__initialization:	
  2438  0045  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2439  0046  0020               	movlb	0
  2440  0047  3188  282B         	ljmp	_main	;jump to C main() function
  2441                           
  2442                           	psect	bitbssCOMMON
  2443  03C0                     __pbitbssCOMMON:	
  2444  03C0                     _Receive_OK:	
  2445  03C0                     	ds	1
  2446  03C1                     _Transceive_OK:	
  2447  03C1                     	ds	1
  2448                           
  2449                           	psect	bssCOMMON
  2450  0075                     __pbssCOMMON:	
  2451  0075                     _DelayOff:	
  2452  0075                     	ds	1
  2453  0076                     _DimmerLightsIntr:	
  2454  0076                     	ds	1
  2455  0077                     _Sw:	
  2456  0077                     	ds	1
  2457                           
  2458                           	psect	bssBANK0
  2459  006F                     __pbssBANK0:	
  2460  006F                     _DimmerLights:	
  2461  006F                     	ds	1
  2462                           
  2463                           	psect	bssBANK1
  2464  00A0                     __pbssBANK1:	
  2465  00A0                     _myMain:	
  2466  00A0                     	ds	14
  2467  00AE                     _Buz1:	
  2468  00AE                     	ds	12
  2469  00BA                     _RF1:	
  2470  00BA                     	ds	12
  2471  00C6                     _Dimmer:	
  2472  00C6                     	ds	3
  2473  00C9                     _CRC:	
  2474  00C9                     	ds	1
  2475  00CA                     _DimmerLights11:	
  2476  00CA                     	ds	1
  2477  00CB                     _DimmerLights22:	
  2478  00CB                     	ds	1
  2479  00CC                     _DimmerLightsIntrIOC:	
  2480  00CC                     	ds	1
  2481  00CD                     _LED:	
  2482  00CD                     	ds	1
  2483  00CE                     _RSSI:	
  2484  00CE                     	ds	1
  2485  00CF                     _Rx_Length:	
  2486  00CF                     	ds	1
  2487  00D0                     _SPI0Buffer:	
  2488  00D0                     	ds	1
  2489  00D1                     _SwDetect:	
  2490  00D1                     	ds	1
  2491  00D2                     _Tx_Length:	
  2492  00D2                     	ds	1
  2493  00D3                     _r_address:	
  2494  00D3                     	ds	1
  2495  00D4                     _r_data:	
  2496  00D4                     	ds	1
  2497  00D5                     _s_data:	
  2498  00D5                     	ds	1
  2499  00D6                     _Temp:	
  2500  00D6                     	ds	18
  2501                           
  2502                           	psect	bssBANK2
  2503  0120                     __pbssBANK2:	
  2504  0120                     _Timer1:	
  2505  0120                     	ds	3
  2506  0123                     _RF_Count:	
  2507  0123                     	ds	2
  2508  0125                     _WDT:	
  2509  0125                     	ds	2
  2510  0127                     _Load:	
  2511  0127                     	ds	46
  2512  0155                     _DimmerLights1:	
  2513  0155                     	ds	17
  2514  0166                     _VarErrLED:	
  2515  0166                     	ds	4
  2516  016A                     _VarLED1:	
  2517  016A                     	ds	4
  2518                           
  2519                           	psect	bssBANK3
  2520  01A0                     __pbssBANK3:	
  2521  01A0                     _RF_Data:	
  2522  01A0                     	ds	30
  2523  01BE                     _DimmerLights2:	
  2524  01BE                     	ds	17
  2525  01CF                     _Sw1:	
  2526  01CF                     	ds	9
  2527  01D8                     _Sw2:	
  2528  01D8                     	ds	9
  2529  01E1                     _DlySw1:	
  2530  01E1                     	ds	5
  2531  01E6                     _DlySw2:	
  2532  01E6                     	ds	5
  2533  01EB                     _VarLED2:	
  2534  01EB                     	ds	4
  2535                           
  2536                           	psect	bssBANK4
  2537  0220                     __pbssBANK4:	
  2538  0220                     _Memory:	
  2539  0220                     	ds	37
  2540                           
  2541                           	psect	dataBANK4
  2542  0245                     __pdataBANK4:	
  2543  0245                     __product:	
  2544  0245                     	ds	32
  2545                           
  2546                           	psect	clrtext
  2547  1B0F                     clear_ram0:	
  2548                           ;	Called with FSR0 containing the base address, and
  2549                           ;	WREG with the size to clear
  2550                           
  2551  1B0F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2552  1B10                     clrloop0:	
  2553  1B10  0180               	clrf	0	;clear RAM location pointed to by FSR
  2554  1B11  3101               	addfsr 0,1
  2555  1B12  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2556  1B13  2B10               	goto	clrloop0	;have we reached the end yet?
  2557  1B14  3400               	retlw	0	;all done for this memory range, return
  2558                           
  2559                           	psect	inittext
  2560  1B09                     init_ram:	
  2561  1B09  00FE               	movwf	126
  2562  1B0A                     initloop:	
  2563  1B0A  0012               	moviw fsr0++
  2564  1B0B  001E               	movwi fsr1++
  2565  1B0C  0BFE               	decfsz	126,f
  2566  1B0D  2B0A               	goto	initloop
  2567  1B0E  3400               	retlw	0
  2568                           
  2569                           	psect	cstackBANK4
  2570  0265                     __pcstackBANK4:	
  2571  0265                     ?_main:	
  2572  0265                     main@argc:	
  2573                           ; 2 bytes @ 0x0
  2574                           
  2575                           
  2576                           ; 2 bytes @ 0x0
  2577  0265                     	ds	2
  2578  0267                     main@argv:	
  2579                           
  2580                           ; 2 bytes @ 0x2
  2581  0267                     	ds	2
  2582                           
  2583                           	psect	cstackBANK1
  2584  00E8                     __pcstackBANK1:	
  2585  00E8                     setDimmerLights_ErrorClose@count:	
  2586  00E8                     Exception_Main@count:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589                           
  2590                           ; 1 bytes @ 0x0
  2591  00E8                     	ds	1
  2592  00E9                     setDimmerLights_ErrorClose@lights:	
  2593  00E9                     Exception_Main@error:	
  2594                           ; 1 bytes @ 0x1
  2595                           
  2596                           
  2597                           ; 1 bytes @ 0x1
  2598  00E9                     	ds	1
  2599  00EA                     setDimmerLights_ErrorClose@i:	
  2600  00EA                     Exception_Main@i:	
  2601                           ; 2 bytes @ 0x2
  2602                           
  2603                           
  2604                           ; 2 bytes @ 0x2
  2605  00EA                     	ds	2
  2606  00EC                     getRxData@error:	
  2607  00EC                     Exception_Main@i_3620:	
  2608                           ; 1 bytes @ 0x4
  2609                           
  2610                           
  2611                           ; 2 bytes @ 0x4
  2612  00EC                     	ds	1
  2613  00ED                     setRF_Main@loop_f:	
  2614                           
  2615                           ; 1 bytes @ 0x5
  2616  00ED                     	ds	1
  2617  00EE                     Exception_Main@lights:	
  2618  00EE                     setRF_Main@Receive_OK:	
  2619                           ; 1 bytes @ 0x6
  2620                           
  2621                           
  2622                           ; 1 bytes @ 0x6
  2623  00EE                     	ds	1
  2624  00EF                     setRF_Main@error:	
  2625                           
  2626                           ; 1 bytes @ 0x7
  2627  00EF                     	ds	1
  2628                           
  2629                           	psect	cstackCOMMON
  2630  0070                     __pcstackCOMMON:	
  2631  0070                     ?_Timeout_Counter:	
  2632  0070                     ?_set_TimeoutCleared:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_WriteByte:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_WriteCommand:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_ReadStatus:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_ReadByte:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_CC2500_PowerRST:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_CC2500_InitSetREG:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_CC2500_InitPATable:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_CC2500_ClearTXFIFO:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_CC2500_ClearRXFIFO:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_CC2500_FrequencyCabr:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_CC2500_SIDLEMode:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_DlyOff_Initialization:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_DlyOff_Main:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setDimmerLights_ErrorClose:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_setDimmerLights_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_setDimmerLights_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_setDimmerLights_Line:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setTxData:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_setLED_Initialization:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_setLED_Main:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_Fosc_Set:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_IO_Set:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_TMR1_Set:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_ADC_Set:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_IOC_Set:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_WDT_Set:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_IOC_ISR:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_TMR1_ISR:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Flash_Memory_Write:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Flash_Memory_Modify:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_WDT_Clearing:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_myMain_Initialization:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Temp_Initialization:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Load_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_Switch_Initialization:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_RF_Initialization:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_getLoad_AD:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_getTemp_AD:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_my_MainTimer:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_Temp_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_Load_Main:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_Switch_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_RF_Main:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_Exception_Main:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_setLoad_AH_AL_Restore:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setTemp_Initialization:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setTemp_Main:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setRF_Initialization:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setRF_Main:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_RF_RxDisable:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_getRxData:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_setLog_Code:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_setControl_Lights_Table:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_setRFSW_Control:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_setRFSW_AdjControl:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setRF_DimmerValue:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setSw_Initialization:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setSw_Main:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_Buzzer_Initialization:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_Buzzer_Main:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_CC2500_TxData:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_CC2500_RxData:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_CC2500_PowerOnInitial:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DelayOffPointSelect:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_DelayOff_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_DelayOff_Main:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerIntrIOCPointSelect:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ??_DimmerIntrIOCPointSelect:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_DimmerIntrPointSelect:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ??_DimmerIntrPointSelect:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_setDimmerLights_IntrControl:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_DimmerLightsPointSelect:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_DimmerLights_Initialization:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_setDimmerLights_SwOn:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_setDimmerLights_SwOff:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_setDimmerLights_AdjOn:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_DimmerLights_Main:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_setDimmerLights_AdjRF:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_LedPointSelect:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_LED_Initialization:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_LED_Main:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_Mcu_Initialization:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_ISR:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_setDimmerReClock:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_Flash_Memory_Initialization:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_Flash_Memory_Main:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_Flash_Memory_Unlock:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_Flash_Memory_Erasing:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_setMemory_Modify:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0070                     ?_setMemory_LoopSave:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0070                     ?_WDT_Main:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0070                     ?_setRF_Learn:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0070                     ?_TouchPower:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0070                     ?_SwPointSelect:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0070                     ?_DelayTimejudge:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0070                     ?_getDimmerLights_Allow_Condition:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getLoad_OK:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getMain_All_Error_Status:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getMain_LightsStatus:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_setPercentValue:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getPercentValue:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_Flash_Memory_Read:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getRF_KeyStatus:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getSw_KeyStatus:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_getDelayOff_GO:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_getDimmer_LoadGO:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?_getDimmerLights_Line:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     ?_getDimmerLights_Status:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     ?_getAll_DimmerLights_AdjSw:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     ?_getDimmer_Load_Status:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0070                     ?_getMain_Lights_Count:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971                           
  2972                           ; 1 bytes @ 0x0
  2973  0070                     	ds	1
  2974  0071                     DimmerIntrIOCPointSelect@lights:	
  2975  0071                     DimmerIntrPointSelect@lights:	
  2976                           ; 1 bytes @ 0x1
  2977                           
  2978                           
  2979                           ; 1 bytes @ 0x1
  2980  0071                     	ds	1
  2981  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2982  0072                     ??_setDimmerLights_IntrControl:	
  2983                           ; 0 bytes @ 0x2
  2984                           
  2985  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2986                           ; 0 bytes @ 0x2
  2987                           
  2988                           
  2989                           ; 1 bytes @ 0x2
  2990  0072                     	ds	1
  2991  0073                     ??_IOC_ISR:	
  2992  0073                     ??_setDimmerReClock:	
  2993                           ; 0 bytes @ 0x3
  2994                           
  2995  0073                     setDimmerLights_IntrControl@lights:	
  2996                           ; 0 bytes @ 0x3
  2997                           
  2998                           
  2999                           ; 1 bytes @ 0x3
  3000  0073                     	ds	1
  3001  0074                     ??_TMR1_ISR:	
  3002  0074                     ??_ISR:	
  3003                           ; 0 bytes @ 0x4
  3004                           
  3005                           
  3006                           ; 0 bytes @ 0x4
  3007  0074                     	ds	1
  3008                           
  3009                           	psect	cstackBANK0
  3010  0020                     __pcstackBANK0:	
  3011  0020                     ??_Timeout_Counter:	
  3012  0020                     ??_set_TimeoutCleared:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_CC2500_WriteByte:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_CC2500_ReadByte:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ?_DelayTime_1us:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_getLoad_OK:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_getMain_All_Error_Status:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_getMain_LightsStatus:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_setDimmerLights_Line:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_setTxData:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_Fosc_Set:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_IO_Set:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_TMR1_Set:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_ADC_Set:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_IOC_Set:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_WDT_Set:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_Flash_Memory_Read:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ?_setMemory_Data:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_Flash_Memory_Write:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_WDT_Clearing:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_myMain_Initialization:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_Temp_Initialization:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_setLoad_AH_AL_Restore:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_setTemp_Initialization:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_setRF_Initialization:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_getRF_KeyStatus:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_getSw_KeyStatus:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_Buzzer_Initialization:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ??_Buzzer_Main:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_DelayOffPointSelect:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_DimmerLightsPointSelect:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_getDimmer_LoadGO:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_getDimmerLights_Line:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_getDimmer_Load_Status:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_LedPointSelect:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_Flash_Memory_Unlock:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_Flash_Memory_Erasing:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_setMemory_Modify:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_setMemory_LoopSave:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ??_WDT_Main:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ??_getMain_Lights_Count:	
  3130                           ; 0 bytes @ 0x0
  3131                           
  3132  0020                     ??_setRF_Learn:	
  3133                           ; 0 bytes @ 0x0
  3134                           
  3135  0020                     ??_TouchPower:	
  3136                           ; 0 bytes @ 0x0
  3137                           
  3138  0020                     ??_SwPointSelect:	
  3139                           ; 0 bytes @ 0x0
  3140                           
  3141  0020                     ?___bmul:	
  3142                           ; 0 bytes @ 0x0
  3143                           
  3144  0020                     ?_getBuz_GO:	
  3145                           ; 1 bytes @ 0x0
  3146                           
  3147  0020                     ?_getAD:	
  3148                           ; 2 bytes @ 0x0
  3149                           
  3150  0020                     ?___wmul:	
  3151                           ; 2 bytes @ 0x0
  3152                           
  3153  0020                     ?___awdiv:	
  3154                           ; 2 bytes @ 0x0
  3155                           
  3156  0020                     ?___lwdiv:	
  3157                           ; 2 bytes @ 0x0
  3158                           
  3159  0020                     ?___ftpack:	
  3160                           ; 2 bytes @ 0x0
  3161                           
  3162  0020                     getDimmer_LoadGO@loadgo:	
  3163                           ; 3 bytes @ 0x0
  3164                           
  3165  0020                     setDimmerLights_Line@lights:	
  3166                           ; 1 bytes @ 0x0
  3167                           
  3168  0020                     getDimmer_Load_Status@status:	
  3169                           ; 1 bytes @ 0x0
  3170                           
  3171  0020                     getAD@adcon1:	
  3172                           ; 1 bytes @ 0x0
  3173                           
  3174  0020                     setMemory_Data@data:	
  3175                           ; 1 bytes @ 0x0
  3176                           
  3177  0020                     getMain_LightsStatus@status:	
  3178                           ; 1 bytes @ 0x0
  3179                           
  3180  0020                     getMain_Lights_Count@count:	
  3181                           ; 1 bytes @ 0x0
  3182                           
  3183  0020                     getLoad_OK@ok:	
  3184                           ; 1 bytes @ 0x0
  3185                           
  3186  0020                     ___bmul@multiplicand:	
  3187                           ; 1 bytes @ 0x0
  3188                           
  3189  0020                     DelayTime_1us@count:	
  3190                           ; 1 bytes @ 0x0
  3191                           
  3192  0020                     ___wmul@multiplier:	
  3193                           ; 2 bytes @ 0x0
  3194                           
  3195  0020                     ___awdiv@divisor:	
  3196                           ; 2 bytes @ 0x0
  3197                           
  3198  0020                     ___lwdiv@divisor:	
  3199                           ; 2 bytes @ 0x0
  3200                           
  3201  0020                     ___ftpack@arg:	
  3202                           ; 2 bytes @ 0x0
  3203                           
  3204                           
  3205                           ; 3 bytes @ 0x0
  3206  0020                     	ds	1
  3207  0021                     ??_getDimmerLights_Allow_Condition:	
  3208  0021                     ??_setMemory_Data:	
  3209                           ; 0 bytes @ 0x1
  3210                           
  3211  0021                     ??_RF_Initialization:	
  3212                           ; 0 bytes @ 0x1
  3213                           
  3214  0021                     ??_Mcu_Initialization:	
  3215                           ; 0 bytes @ 0x1
  3216                           
  3217  0021                     ??___bmul:	
  3218                           ; 0 bytes @ 0x1
  3219                           
  3220  0021                     CC2500_WriteByte@loop_a:	
  3221                           ; 0 bytes @ 0x1
  3222                           
  3223  0021                     CC2500_ReadByte@loop_b:	
  3224                           ; 1 bytes @ 0x1
  3225                           
  3226  0021                     DelayOffPointSelect@sw:	
  3227                           ; 1 bytes @ 0x1
  3228                           
  3229  0021                     DimmerLightsPointSelect@lights:	
  3230                           ; 1 bytes @ 0x1
  3231                           
  3232  0021                     getDimmerLights_Line@line:	
  3233                           ; 1 bytes @ 0x1
  3234                           
  3235  0021                     LedPointSelect@led:	
  3236                           ; 1 bytes @ 0x1
  3237                           
  3238  0021                     Flash_Memory_Read@i:	
  3239                           ; 1 bytes @ 0x1
  3240                           
  3241  0021                     Flash_Memory_Write@i:	
  3242                           ; 1 bytes @ 0x1
  3243                           
  3244  0021                     setMemory_Modify@command:	
  3245                           ; 1 bytes @ 0x1
  3246                           
  3247  0021                     setMemory_LoopSave@command:	
  3248                           ; 1 bytes @ 0x1
  3249                           
  3250  0021                     getMain_Lights_Count@status1:	
  3251                           ; 1 bytes @ 0x1
  3252                           
  3253  0021                     setLoad_AH_AL_Restore@i:	
  3254                           ; 1 bytes @ 0x1
  3255                           
  3256  0021                     setRF_Learn@command:	
  3257                           ; 1 bytes @ 0x1
  3258                           
  3259  0021                     getRF_KeyStatus@key:	
  3260                           ; 1 bytes @ 0x1
  3261                           
  3262  0021                     SwPointSelect@sw:	
  3263                           ; 1 bytes @ 0x1
  3264                           
  3265  0021                     _getSw_KeyStatus$6247:	
  3266                           ; 1 bytes @ 0x1
  3267                           
  3268  0021                     _getMain_All_Error_Status$3605:	
  3269                           ; 1 bytes @ 0x1
  3270                           
  3271                           
  3272                           ; 2 bytes @ 0x1
  3273  0021                     	ds	1
  3274  0022                     ??_CC2500_WriteCommand:	
  3275  0022                     ??_CC2500_ReadStatus:	
  3276                           ; 0 bytes @ 0x2
  3277                           
  3278  0022                     ??_DelayTime_1us:	
  3279                           ; 0 bytes @ 0x2
  3280                           
  3281  0022                     ?_CC2500_WriteREG:	
  3282                           ; 0 bytes @ 0x2
  3283                           
  3284  0022                     ??_DlyOff_Initialization:	
  3285                           ; 0 bytes @ 0x2
  3286                           
  3287  0022                     ??_setDimmerLights_Initialization:	
  3288                           ; 0 bytes @ 0x2
  3289                           
  3290  0022                     ?_setLED:	
  3291                           ; 0 bytes @ 0x2
  3292                           
  3293  0022                     ??_setLED_Main:	
  3294                           ; 0 bytes @ 0x2
  3295                           
  3296  0022                     ??_Load_Initialization:	
  3297                           ; 0 bytes @ 0x2
  3298                           
  3299  0022                     ??_getBuz_GO:	
  3300                           ; 0 bytes @ 0x2
  3301                           
  3302  0022                     ??_getDelayOff_GO:	
  3303                           ; 0 bytes @ 0x2
  3304                           
  3305  0022                     ??_getDimmerLights_Status:	
  3306                           ; 0 bytes @ 0x2
  3307                           
  3308  0022                     ??_getAll_DimmerLights_AdjSw:	
  3309                           ; 0 bytes @ 0x2
  3310                           
  3311  0022                     CC2500_WriteREG@value:	
  3312                           ; 0 bytes @ 0x2
  3313                           
  3314  0022                     DlyOff_Initialization@sw:	
  3315                           ; 1 bytes @ 0x2
  3316                           
  3317  0022                     getDelayOff_GO@sw:	
  3318                           ; 1 bytes @ 0x2
  3319                           
  3320  0022                     _getDimmerLights_Allow_Condition$2329:	
  3321                           ; 1 bytes @ 0x2
  3322                           
  3323  0022                     getDimmerLights_Status@lights:	
  3324                           ; 1 bytes @ 0x2
  3325                           
  3326  0022                     setLED@command:	
  3327                           ; 1 bytes @ 0x2
  3328                           
  3329  0022                     Flash_Memory_Read@address:	
  3330                           ; 1 bytes @ 0x2
  3331                           
  3332  0022                     setMemory_Data@address:	
  3333                           ; 1 bytes @ 0x2
  3334                           
  3335  0022                     getMain_Lights_Count@status2:	
  3336                           ; 1 bytes @ 0x2
  3337                           
  3338  0022                     _getRF_KeyStatus$5261:	
  3339                           ; 1 bytes @ 0x2
  3340                           
  3341  0022                     _getSw_KeyStatus$6248:	
  3342                           ; 1 bytes @ 0x2
  3343                           
  3344  0022                     ___bmul@product:	
  3345                           ; 1 bytes @ 0x2
  3346                           
  3347  0022                     DelayTime_1us@i:	
  3348                           ; 1 bytes @ 0x2
  3349                           
  3350  0022                     ___wmul@multiplicand:	
  3351                           ; 2 bytes @ 0x2
  3352                           
  3353  0022                     ___awdiv@dividend:	
  3354                           ; 2 bytes @ 0x2
  3355                           
  3356  0022                     ___lwdiv@dividend:	
  3357                           ; 2 bytes @ 0x2
  3358                           
  3359                           
  3360                           ; 2 bytes @ 0x2
  3361  0022                     	ds	1
  3362  0023                     ??_CC2500_WriteREG:	
  3363  0023                     ??_setLED:	
  3364                           ; 0 bytes @ 0x3
  3365                           
  3366  0023                     ??_DelayOff_Initialization:	
  3367                           ; 0 bytes @ 0x3
  3368                           
  3369  0023                     ??_getAD:	
  3370                           ; 0 bytes @ 0x3
  3371                           
  3372  0023                     CC2500_WriteCommand@command:	
  3373                           ; 0 bytes @ 0x3
  3374                           
  3375  0023                     CC2500_ReadStatus@status_addr:	
  3376                           ; 1 bytes @ 0x3
  3377                           
  3378  0023                     getDelayOff_GO@go:	
  3379                           ; 1 bytes @ 0x3
  3380                           
  3381  0023                     setDimmerLights_Initialization@lights:	
  3382                           ; 1 bytes @ 0x3
  3383                           
  3384  0023                     _getDimmerLights_Allow_Condition$2330:	
  3385                           ; 1 bytes @ 0x3
  3386                           
  3387  0023                     getDimmerLights_Status@status:	
  3388                           ; 1 bytes @ 0x3
  3389                           
  3390  0023                     getAll_DimmerLights_AdjSw@count:	
  3391                           ; 1 bytes @ 0x3
  3392                           
  3393  0023                     setLED@led:	
  3394                           ; 1 bytes @ 0x3
  3395                           
  3396  0023                     getAD@adcon0:	
  3397                           ; 1 bytes @ 0x3
  3398                           
  3399  0023                     Flash_Memory_Read@ret:	
  3400                           ; 1 bytes @ 0x3
  3401                           
  3402  0023                     getSw_KeyStatus@status:	
  3403                           ; 1 bytes @ 0x3
  3404                           
  3405  0023                     ___bmul@multiplier:	
  3406                           ; 1 bytes @ 0x3
  3407                           
  3408  0023                     ___ftpack@exp:	
  3409                           ; 1 bytes @ 0x3
  3410                           
  3411  0023                     _getMain_All_Error_Status$3606:	
  3412                           ; 1 bytes @ 0x3
  3413                           
  3414                           
  3415                           ; 2 bytes @ 0x3
  3416  0023                     	ds	1
  3417  0024                     ??_CC2500_ClearTXFIFO:	
  3418  0024                     ??_CC2500_ClearRXFIFO:	
  3419                           ; 0 bytes @ 0x4
  3420                           
  3421  0024                     ??_CC2500_SIDLEMode:	
  3422                           ; 0 bytes @ 0x4
  3423                           
  3424  0024                     ??_DelayTimejudge:	
  3425                           ; 0 bytes @ 0x4
  3426                           
  3427  0024                     ??_setLED_Initialization:	
  3428                           ; 0 bytes @ 0x4
  3429                           
  3430  0024                     ??_Flash_Memory_Modify:	
  3431                           ; 0 bytes @ 0x4
  3432                           
  3433  0024                     ??_getLoad_AD:	
  3434                           ; 0 bytes @ 0x4
  3435                           
  3436  0024                     ??_getTemp_AD:	
  3437                           ; 0 bytes @ 0x4
  3438                           
  3439  0024                     ??_RF_RxDisable:	
  3440                           ; 0 bytes @ 0x4
  3441                           
  3442  0024                     ??_setSw_Initialization:	
  3443                           ; 0 bytes @ 0x4
  3444                           
  3445  0024                     ??_CC2500_TxData:	
  3446                           ; 0 bytes @ 0x4
  3447                           
  3448  0024                     ??_CC2500_RxData:	
  3449                           ; 0 bytes @ 0x4
  3450                           
  3451  0024                     ??_DimmerLights_Initialization:	
  3452                           ; 0 bytes @ 0x4
  3453                           
  3454  0024                     ??___wmul:	
  3455                           ; 0 bytes @ 0x4
  3456                           
  3457  0024                     ??___awdiv:	
  3458                           ; 0 bytes @ 0x4
  3459                           
  3460  0024                     ??___lwdiv:	
  3461                           ; 0 bytes @ 0x4
  3462                           
  3463  0024                     CC2500_WriteREG@w_addr:	
  3464                           ; 0 bytes @ 0x4
  3465                           
  3466  0024                     _getDimmerLights_Allow_Condition$2331:	
  3467                           ; 1 bytes @ 0x4
  3468                           
  3469  0024                     setLED_Initialization@led:	
  3470                           ; 1 bytes @ 0x4
  3471                           
  3472  0024                     setLED_Main@led:	
  3473                           ; 1 bytes @ 0x4
  3474                           
  3475  0024                     setSw_Initialization@sw:	
  3476                           ; 1 bytes @ 0x4
  3477                           
  3478  0024                     getSw_KeyStatus@sw:	
  3479                           ; 1 bytes @ 0x4
  3480                           
  3481  0024                     ___ftpack@sign:	
  3482                           ; 1 bytes @ 0x4
  3483                           
  3484  0024                     getBuz_GO@i:	
  3485                           ; 1 bytes @ 0x4
  3486                           
  3487  0024                     DelayTime_1us@j:	
  3488                           ; 2 bytes @ 0x4
  3489                           
  3490  0024                     getAll_DimmerLights_AdjSw@i:	
  3491                           ; 2 bytes @ 0x4
  3492                           
  3493  0024                     ___wmul@product:	
  3494                           ; 2 bytes @ 0x4
  3495                           
  3496                           
  3497                           ; 2 bytes @ 0x4
  3498  0024                     	ds	1
  3499  0025                     ??_CC2500_InitSetREG:	
  3500  0025                     ??_CC2500_InitPATable:	
  3501                           ; 0 bytes @ 0x5
  3502                           
  3503  0025                     ??_Switch_Initialization:	
  3504                           ; 0 bytes @ 0x5
  3505                           
  3506  0025                     ??___ftpack:	
  3507                           ; 0 bytes @ 0x5
  3508                           
  3509  0025                     ??_LED_Initialization:	
  3510                           ; 0 bytes @ 0x5
  3511                           
  3512  0025                     ??_LED_Main:	
  3513                           ; 0 bytes @ 0x5
  3514                           
  3515  0025                     CC2500_TxData@loop_e:	
  3516                           ; 0 bytes @ 0x5
  3517                           
  3518  0025                     CC2500_RxData@loop_f:	
  3519                           ; 1 bytes @ 0x5
  3520                           
  3521  0025                     getDimmerLights_Allow_Condition@lights:	
  3522                           ; 1 bytes @ 0x5
  3523                           
  3524  0025                     Flash_Memory_Modify@i:	
  3525                           ; 1 bytes @ 0x5
  3526                           
  3527  0025                     getMain_All_Error_Status@command:	
  3528                           ; 1 bytes @ 0x5
  3529                           
  3530  0025                     getTemp_AD@channel:	
  3531                           ; 1 bytes @ 0x5
  3532                           
  3533  0025                     ___awdiv@counter:	
  3534                           ; 1 bytes @ 0x5
  3535                           
  3536  0025                     ___lwdiv@counter:	
  3537                           ; 1 bytes @ 0x5
  3538                           
  3539                           
  3540                           ; 1 bytes @ 0x5
  3541  0025                     	ds	1
  3542  0026                     ??_CC2500_PowerRST:	
  3543  0026                     ??_CC2500_FrequencyCabr:	
  3544                           ; 0 bytes @ 0x6
  3545                           
  3546  0026                     ??_Flash_Memory_Main:	
  3547                           ; 0 bytes @ 0x6
  3548                           
  3549  0026                     CC2500_InitSetREG@temp1:	
  3550                           ; 0 bytes @ 0x6
  3551                           
  3552  0026                     CC2500_InitPATable@temp:	
  3553                           ; 1 bytes @ 0x6
  3554                           
  3555  0026                     DelayTimejudge@i:	
  3556                           ; 1 bytes @ 0x6
  3557                           
  3558  0026                     getDimmerLights_Allow_Condition@allow:	
  3559                           ; 1 bytes @ 0x6
  3560                           
  3561  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3562                           ; 1 bytes @ 0x6
  3563                           
  3564  0026                     getMain_All_Error_Status@status:	
  3565                           ; 1 bytes @ 0x6
  3566                           
  3567  0026                     getLoad_AD@channel:	
  3568                           ; 1 bytes @ 0x6
  3569                           
  3570  0026                     ___awdiv@sign:	
  3571                           ; 1 bytes @ 0x6
  3572                           
  3573  0026                     ___lwdiv@quotient:	
  3574                           ; 1 bytes @ 0x6
  3575                           
  3576                           
  3577                           ; 2 bytes @ 0x6
  3578  0026                     	ds	1
  3579  0027                     ??_setDimmerLights_AdjOn:	
  3580  0027                     CC2500_InitSetREG@temp2:	
  3581                           ; 0 bytes @ 0x7
  3582                           
  3583  0027                     CC2500_InitPATable@loop_d:	
  3584                           ; 1 bytes @ 0x7
  3585                           
  3586  0027                     DelayTimejudge@j:	
  3587                           ; 1 bytes @ 0x7
  3588                           
  3589  0027                     setDimmerLights_AdjOn@sw:	
  3590                           ; 1 bytes @ 0x7
  3591                           
  3592  0027                     getLoad_AD@k:	
  3593                           ; 1 bytes @ 0x7
  3594                           
  3595  0027                     ___awdiv@quotient:	
  3596                           ; 1 bytes @ 0x7
  3597                           
  3598                           
  3599                           ; 2 bytes @ 0x7
  3600  0027                     	ds	1
  3601  0028                     ??_Load_Main:	
  3602  0028                     ?___awtoft:	
  3603                           ; 0 bytes @ 0x8
  3604                           
  3605  0028                     CC2500_InitSetREG@loop_c:	
  3606                           ; 3 bytes @ 0x8
  3607                           
  3608  0028                     DelayTimejudge@k:	
  3609                           ; 1 bytes @ 0x8
  3610                           
  3611  0028                     getLoad_AD@j:	
  3612                           ; 1 bytes @ 0x8
  3613                           
  3614  0028                     ___awtoft@c:	
  3615                           ; 1 bytes @ 0x8
  3616                           
  3617                           
  3618                           ; 2 bytes @ 0x8
  3619  0028                     	ds	1
  3620  0029                     ?_setBuz:	
  3621  0029                     ??_CC2500_PowerOnInitial:	
  3622                           ; 0 bytes @ 0x9
  3623                           
  3624  0029                     DelayTimejudge@value:	
  3625                           ; 0 bytes @ 0x9
  3626                           
  3627  0029                     getLoad_AD@i:	
  3628                           ; 1 bytes @ 0x9
  3629                           
  3630  0029                     setBuz@time:	
  3631                           ; 1 bytes @ 0x9
  3632                           
  3633                           
  3634                           ; 2 bytes @ 0x9
  3635  0029                     	ds	1
  3636  002A                     Load_Main@error:	
  3637                           
  3638                           ; 1 bytes @ 0xA
  3639  002A                     	ds	1
  3640  002B                     ??_setBuz:	
  3641  002B                     ??___awtoft:	
  3642                           ; 0 bytes @ 0xB
  3643                           
  3644  002B                     Load_Main@Load_Status:	
  3645                           ; 0 bytes @ 0xB
  3646                           
  3647                           
  3648                           ; 1 bytes @ 0xB
  3649  002B                     	ds	1
  3650  002C                     setBuz@count:	
  3651  002C                     Load_Main@i:	
  3652                           ; 1 bytes @ 0xC
  3653                           
  3654                           
  3655                           ; 2 bytes @ 0xC
  3656  002C                     	ds	1
  3657  002D                     ??_my_MainTimer:	
  3658  002D                     ??_setDimmerLights_SwOn:	
  3659                           ; 0 bytes @ 0xD
  3660                           
  3661  002D                     ___awtoft@sign:	
  3662                           ; 0 bytes @ 0xD
  3663                           
  3664                           
  3665                           ; 1 bytes @ 0xD
  3666  002D                     	ds	1
  3667  002E                     ?___ftdiv:	
  3668  002E                     ?___ftmul:	
  3669                           ; 3 bytes @ 0xE
  3670                           
  3671  002E                     _setDimmerLights_SwOn$2310:	
  3672                           ; 3 bytes @ 0xE
  3673                           
  3674  002E                     ___ftdiv@f2:	
  3675                           ; 1 bytes @ 0xE
  3676                           
  3677  002E                     ___ftmul@f1:	
  3678                           ; 3 bytes @ 0xE
  3679                           
  3680                           
  3681                           ; 3 bytes @ 0xE
  3682  002E                     	ds	1
  3683  002F                     _setDimmerLights_SwOn$2311:	
  3684                           
  3685                           ; 1 bytes @ 0xF
  3686  002F                     	ds	1
  3687  0030                     setDimmerLights_SwOn@idle:	
  3688                           
  3689                           ; 1 bytes @ 0x10
  3690  0030                     	ds	1
  3691  0031                     setDimmerLights_SwOn@sw:	
  3692  0031                     ___ftdiv@f1:	
  3693                           ; 1 bytes @ 0x11
  3694                           
  3695  0031                     ___ftmul@f2:	
  3696                           ; 3 bytes @ 0x11
  3697                           
  3698                           
  3699                           ; 3 bytes @ 0x11
  3700  0031                     	ds	3
  3701  0034                     ??___ftdiv:	
  3702  0034                     ??___ftmul:	
  3703                           ; 0 bytes @ 0x14
  3704                           
  3705                           
  3706                           ; 0 bytes @ 0x14
  3707  0034                     	ds	4
  3708  0038                     ___ftdiv@cntr:	
  3709  0038                     ___ftmul@exp:	
  3710                           ; 1 bytes @ 0x18
  3711                           
  3712                           
  3713                           ; 1 bytes @ 0x18
  3714  0038                     	ds	1
  3715  0039                     ___ftdiv@f3:	
  3716  0039                     ___ftmul@f3_as_product:	
  3717                           ; 3 bytes @ 0x19
  3718                           
  3719                           
  3720                           ; 3 bytes @ 0x19
  3721  0039                     	ds	3
  3722  003C                     ___ftdiv@exp:	
  3723  003C                     ___ftmul@cntr:	
  3724                           ; 1 bytes @ 0x1C
  3725                           
  3726                           
  3727                           ; 1 bytes @ 0x1C
  3728  003C                     	ds	1
  3729  003D                     ___ftdiv@sign:	
  3730  003D                     ___ftmul@sign:	
  3731                           ; 1 bytes @ 0x1D
  3732                           
  3733                           
  3734                           ; 1 bytes @ 0x1D
  3735  003D                     	ds	1
  3736  003E                     ?___ftneg:	
  3737  003E                     ___ftneg@f1:	
  3738                           ; 3 bytes @ 0x1E
  3739                           
  3740                           
  3741                           ; 3 bytes @ 0x1E
  3742  003E                     	ds	3
  3743  0041                     ??___ftneg:	
  3744  0041                     ?___ftadd:	
  3745                           ; 0 bytes @ 0x21
  3746                           
  3747  0041                     ___ftadd@f1:	
  3748                           ; 3 bytes @ 0x21
  3749                           
  3750                           
  3751                           ; 3 bytes @ 0x21
  3752  0041                     	ds	3
  3753  0044                     ___ftadd@f2:	
  3754                           
  3755                           ; 3 bytes @ 0x24
  3756  0044                     	ds	3
  3757  0047                     ??___ftadd:	
  3758                           
  3759                           ; 0 bytes @ 0x27
  3760  0047                     	ds	4
  3761  004B                     ___ftadd@sign:	
  3762                           
  3763                           ; 1 bytes @ 0x2B
  3764  004B                     	ds	1
  3765  004C                     ___ftadd@exp2:	
  3766                           
  3767                           ; 1 bytes @ 0x2C
  3768  004C                     	ds	1
  3769  004D                     ___ftadd@exp1:	
  3770                           
  3771                           ; 1 bytes @ 0x2D
  3772  004D                     	ds	1
  3773  004E                     ?___fttol:	
  3774  004E                     ___fttol@f1:	
  3775                           ; 4 bytes @ 0x2E
  3776                           
  3777                           
  3778                           ; 3 bytes @ 0x2E
  3779  004E                     	ds	4
  3780  0052                     ??___fttol:	
  3781                           
  3782                           ; 0 bytes @ 0x32
  3783  0052                     	ds	4
  3784  0056                     ___fttol@sign1:	
  3785                           
  3786                           ; 1 bytes @ 0x36
  3787  0056                     	ds	1
  3788  0057                     ___fttol@lval:	
  3789                           
  3790                           ; 4 bytes @ 0x37
  3791  0057                     	ds	4
  3792  005B                     ___fttol@exp1:	
  3793                           
  3794                           ; 1 bytes @ 0x3B
  3795  005B                     	ds	1
  3796  005C                     ??_setPercentValue:	
  3797  005C                     ??_getPercentValue:	
  3798                           ; 0 bytes @ 0x3C
  3799                           
  3800                           
  3801                           ; 0 bytes @ 0x3C
  3802  005C                     	ds	2
  3803  005E                     getPercentValue@value:	
  3804  005E                     setPercentValue@value:	
  3805                           ; 1 bytes @ 0x3E
  3806                           
  3807                           
  3808                           ; 1 bytes @ 0x3E
  3809  005E                     	ds	1
  3810  005F                     getPercentValue@i:	
  3811  005F                     setPercentValue@i:	
  3812                           ; 3 bytes @ 0x3F
  3813                           
  3814                           
  3815                           ; 3 bytes @ 0x3F
  3816  005F                     	ds	3
  3817  0062                     ?_setProductData:	
  3818  0062                     ??_setDimmerLights_AdjRF:	
  3819                           ; 0 bytes @ 0x42
  3820                           
  3821  0062                     ??_Flash_Memory_Initialization:	
  3822                           ; 0 bytes @ 0x42
  3823                           
  3824  0062                     setProductData@value:	
  3825                           ; 0 bytes @ 0x42
  3826                           
  3827                           
  3828                           ; 1 bytes @ 0x42
  3829  0062                     	ds	1
  3830  0063                     ??_setProductData:	
  3831  0063                     setDimmerLights_AdjRF@lights:	
  3832                           ; 0 bytes @ 0x43
  3833                           
  3834  0063                     Flash_Memory_Initialization@i:	
  3835                           ; 1 bytes @ 0x43
  3836                           
  3837                           
  3838                           ; 1 bytes @ 0x43
  3839  0063                     	ds	2
  3840  0065                     setProductData@address:	
  3841                           
  3842                           ; 1 bytes @ 0x45
  3843  0065                     	ds	1
  3844  0066                     ?_setRF_DimmerLights:	
  3845  0066                     ??_setTemp_Main:	
  3846                           ; 0 bytes @ 0x46
  3847                           
  3848  0066                     ??_setLog_Code:	
  3849                           ; 0 bytes @ 0x46
  3850                           
  3851  0066                     ??_setRF_DimmerValue:	
  3852                           ; 0 bytes @ 0x46
  3853                           
  3854  0066                     ?_setDelayOff_GO:	
  3855                           ; 0 bytes @ 0x46
  3856                           
  3857  0066                     setDelayOff_GO@command:	
  3858                           ; 0 bytes @ 0x46
  3859                           
  3860  0066                     setRF_DimmerLights@on:	
  3861                           ; 1 bytes @ 0x46
  3862                           
  3863                           
  3864                           ; 1 bytes @ 0x46
  3865  0066                     	ds	1
  3866  0067                     ??_setRF_DimmerLights:	
  3867  0067                     setDelayOff_GO@value:	
  3868                           ; 0 bytes @ 0x47
  3869                           
  3870  0067                     setRF_DimmerValue@lights:	
  3871                           ; 1 bytes @ 0x47
  3872                           
  3873                           
  3874                           ; 1 bytes @ 0x47
  3875  0067                     	ds	1
  3876  0068                     ??_setRFSW_AdjControl:	
  3877  0068                     ??_setDelayOff_GO:	
  3878                           ; 0 bytes @ 0x48
  3879                           
  3880  0068                     setTemp_Main@error:	
  3881                           ; 0 bytes @ 0x48
  3882                           
  3883                           
  3884                           ; 1 bytes @ 0x48
  3885  0068                     	ds	1
  3886  0069                     ??_Temp_Main:	
  3887  0069                     setDelayOff_GO@sw:	
  3888                           ; 0 bytes @ 0x49
  3889                           
  3890  0069                     setRF_DimmerLights@status:	
  3891                           ; 1 bytes @ 0x49
  3892                           
  3893                           
  3894                           ; 1 bytes @ 0x49
  3895  0069                     	ds	1
  3896  006A                     ??_setDimmerLights_SwOff:	
  3897  006A                     setDimmerLights_SwOff@sw:	
  3898                           ; 0 bytes @ 0x4A
  3899                           
  3900  006A                     setRFSW_AdjControl@status:	
  3901                           ; 1 bytes @ 0x4A
  3902                           
  3903  006A                     setRF_DimmerLights@lights:	
  3904                           ; 1 bytes @ 0x4A
  3905                           
  3906                           
  3907                           ; 1 bytes @ 0x4A
  3908  006A                     	ds	1
  3909  006B                     ??_setDimmerLights_ErrorClose:	
  3910  006B                     ?_setDimmerLights:	
  3911                           ; 0 bytes @ 0x4B
  3912                           
  3913  006B                     ?_setDimmerLights_Adj:	
  3914                           ; 0 bytes @ 0x4B
  3915                           
  3916  006B                     ??_Exception_Main:	
  3917                           ; 0 bytes @ 0x4B
  3918                           
  3919  006B                     ??_setRFSW_Control:	
  3920                           ; 0 bytes @ 0x4B
  3921                           
  3922  006B                     ??_setSw_Main:	
  3923                           ; 0 bytes @ 0x4B
  3924                           
  3925  006B                     setDimmerLights@status:	
  3926                           ; 0 bytes @ 0x4B
  3927                           
  3928  006B                     setDimmerLights_Adj@status:	
  3929                           ; 1 bytes @ 0x4B
  3930                           
  3931  006B                     setRFSW_AdjControl@sw:	
  3932                           ; 1 bytes @ 0x4B
  3933                           
  3934                           
  3935                           ; 1 bytes @ 0x4B
  3936  006B                     	ds	1
  3937  006C                     ??_DlyOff_Main:	
  3938  006C                     ??_setDimmerLights:	
  3939                           ; 0 bytes @ 0x4C
  3940                           
  3941  006C                     ??_setDimmerLights_Adj:	
  3942                           ; 0 bytes @ 0x4C
  3943                           
  3944  006C                     setRFSW_Control@status:	
  3945                           ; 0 bytes @ 0x4C
  3946                           
  3947                           
  3948                           ; 1 bytes @ 0x4C
  3949  006C                     	ds	1
  3950  006D                     setDimmerLights@lights:	
  3951  006D                     setDimmerLights_Adj@lights:	
  3952                           ; 1 bytes @ 0x4D
  3953                           
  3954  006D                     setRFSW_Control@sw:	
  3955                           ; 1 bytes @ 0x4D
  3956                           
  3957  006D                     setSw_Main@sw:	
  3958                           ; 1 bytes @ 0x4D
  3959                           
  3960                           
  3961                           ; 1 bytes @ 0x4D
  3962  006D                     	ds	1
  3963  006E                     ??_setDimmerLights_Main:	
  3964  006E                     ??_Switch_Main:	
  3965                           ; 0 bytes @ 0x4E
  3966                           
  3967  006E                     ??_getRxData:	
  3968                           ; 0 bytes @ 0x4E
  3969                           
  3970  006E                     ??_setControl_Lights_Table:	
  3971                           ; 0 bytes @ 0x4E
  3972                           
  3973  006E                     DlyOff_Main@sw:	
  3974                           ; 0 bytes @ 0x4E
  3975                           
  3976  006E                     setDimmerLights_Main@lights:	
  3977                           ; 1 bytes @ 0x4E
  3978                           
  3979                           
  3980                           ; 1 bytes @ 0x4E
  3981  006E                     	ds	1
  3982  006F                     ??_RF_Main:	
  3983  006F                     ??_setRF_Main:	
  3984                           ; 0 bytes @ 0x4F
  3985                           
  3986  006F                     ??_DelayOff_Main:	
  3987                           ; 0 bytes @ 0x4F
  3988                           
  3989  006F                     ??_DimmerLights_Main:	
  3990                           ; 0 bytes @ 0x4F
  3991                           
  3992  006F                     ??_main:	
  3993                           ; 0 bytes @ 0x4F
  3994                           
  3995                           
  3996                           	psect	maintext
  3997  082B                     __pmaintext:	
  3998                           ; 0 bytes @ 0x4F
  3999 ;;
  4000 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4001 ;;
  4002 ;; *************** function _main *****************
  4003 ;; Defined at:
  4004 ;;		line 7 in file "../src/Main_B1.c"
  4005 ;; Parameters:    Size  Location     Type
  4006 ;;  argc            2    0[BANK4 ] int 
  4007 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;		None
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  2    0[BANK4 ] int 
  4012 ;; Registers used:
  4013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 17F/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4019 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4022 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4023 ;;Total ram usage:        4 bytes
  4024 ;; Hardware stack levels required when called:   15
  4025 ;; This function calls:
  4026 ;;		_Buzzer_Initialization
  4027 ;;		_Buzzer_Main
  4028 ;;		_CC2500_PowerOnInitial
  4029 ;;		_DelayOff_Initialization
  4030 ;;		_DelayOff_Main
  4031 ;;		_DimmerLights_Initialization
  4032 ;;		_DimmerLights_Main
  4033 ;;		_Exception_Main
  4034 ;;		_Flash_Memory_Initialization
  4035 ;;		_Flash_Memory_Main
  4036 ;;		_LED_Initialization
  4037 ;;		_LED_Main
  4038 ;;		_Load_Initialization
  4039 ;;		_Load_Main
  4040 ;;		_Mcu_Initialization
  4041 ;;		_RF_Initialization
  4042 ;;		_RF_Main
  4043 ;;		_Switch_Initialization
  4044 ;;		_Switch_Main
  4045 ;;		_Temp_Initialization
  4046 ;;		_Temp_Main
  4047 ;;		_WDT_Main
  4048 ;;		_getLoad_AD
  4049 ;;		_getTemp_AD
  4050 ;;		_myMain_Initialization
  4051 ;;		_my_MainTimer
  4052 ;; This function is called by:
  4053 ;;		Startup code after reset
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           
  4058                           ;psect for function _main
  4059  082B                     _main:	
  4060                           
  4061                           ;Main_B1.c: 8: myMain_Initialization();
  4062                           
  4063                           ;incstack = 0
  4064                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4065  082B  319C  2406  3188   	fcall	_myMain_Initialization
  4066                           
  4067                           ;Main_B1.c: 9: Mcu_Initialization();
  4068  082E  319C  248E  3188   	fcall	_Mcu_Initialization
  4069                           
  4070                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4071  0831  3186  263F  3188   	fcall	_Flash_Memory_Initialization
  4072                           
  4073                           ;Main_B1.c: 11: LED_Initialization();
  4074  0834  319B  23A0  3188   	fcall	_LED_Initialization
  4075                           
  4076                           ;Main_B1.c: 12: Buzzer_Initialization();
  4077  0837  319A  22DC  3188   	fcall	_Buzzer_Initialization
  4078                           
  4079                           ;Main_B1.c: 14: ;;
  4080                           ;Main_B1.c: 15: Temp_Initialization();
  4081  083A  319A  22E8  3188   	fcall	_Temp_Initialization
  4082                           
  4083                           ;Main_B1.c: 16: Load_Initialization();
  4084  083D  319A  22DF  3188   	fcall	_Load_Initialization
  4085                           
  4086                           ;Main_B1.c: 17: ;;
  4087                           ;Main_B1.c: 18: DelayOff_Initialization();
  4088  0840  319B  2324  3188   	fcall	_DelayOff_Initialization
  4089                           
  4090                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4091  0843  319D  2525  3188   	fcall	_DimmerLights_Initialization
  4092                           
  4093                           ;Main_B1.c: 21: ;;
  4094                           ;Main_B1.c: 22: ;;
  4095                           ;Main_B1.c: 23: ;;
  4096                           ;Main_B1.c: 24: Switch_Initialization();
  4097  0846  319B  23DC  3188   	fcall	_Switch_Initialization
  4098                           
  4099                           ;Main_B1.c: 25: RF_Initialization();
  4100  0849  319A  22E2  3188   	fcall	_RF_Initialization
  4101                           
  4102                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4103  084C  319D  25B3  3188   	fcall	_CC2500_PowerOnInitial
  4104  084F                     l10947:	
  4105                           ;Main_B1.c: 27: ;;
  4106                           ;Main_B1.c: 28: ;;
  4107                           ;Main_B1.c: 30: while (1) {
  4108                           
  4109                           
  4110                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4111  084F  0021               	movlb	1	; select bank1
  4112  0850  1C20               	btfss	_myMain^(0+128),0
  4113  0851  285A               	goto	l10951
  4114                           
  4115                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4116  0852  3005               	movlw	5
  4117  0853  318D  2504  3188   	fcall	_getLoad_AD
  4118                           
  4119                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4120  0856  3009               	movlw	9
  4121  0857  3193  2361  3188   	fcall	_getTemp_AD
  4122  085A                     l10951:	
  4123                           
  4124                           ;Main_B1.c: 57: }
  4125                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4126  085A  0022               	movlb	2	; select bank2
  4127  085B  1C20               	btfss	_Timer1^(0+256),0
  4128  085C  284F               	goto	l10947
  4129                           
  4130                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4131  085D  1020               	bcf	_Timer1^(0+256),0
  4132                           
  4133                           ;Main_B1.c: 96: my_MainTimer();
  4134  085E  3192  22E7  3188   	fcall	_my_MainTimer
  4135                           
  4136                           ;Main_B1.c: 97: WDT_Main();
  4137  0861  319C  24A0  3188   	fcall	_WDT_Main
  4138                           
  4139                           ;Main_B1.c: 98: ;;
  4140                           ;Main_B1.c: 99: ;;
  4141                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4142  0864  0021               	movlb	1	; select bank1
  4143  0865  1C20               	btfss	_myMain^(0+128),0
  4144  0866  284F               	goto	l10947
  4145                           
  4146                           ;Main_B1.c: 101: Flash_Memory_Main();
  4147  0867  3191  21CF  3188   	fcall	_Flash_Memory_Main
  4148                           
  4149                           ;Main_B1.c: 103: LED_Main();
  4150  086A  319B  23AC  3188   	fcall	_LED_Main
  4151                           
  4152                           ;Main_B1.c: 104: Buzzer_Main();
  4153  086D  3194  2424  3188   	fcall	_Buzzer_Main
  4154                           
  4155                           ;Main_B1.c: 106: ;;
  4156                           ;Main_B1.c: 107: Temp_Main();
  4157  0870  319A  22EB  3188   	fcall	_Temp_Main
  4158                           
  4159                           ;Main_B1.c: 108: Load_Main();
  4160  0873  3180  2049  3188   	fcall	_Load_Main
  4161                           
  4162                           ;Main_B1.c: 109: ;;
  4163                           ;Main_B1.c: 111: ;;
  4164                           ;Main_B1.c: 112: DimmerLights_Main();
  4165  0876  319F  2710  3188   	fcall	_DimmerLights_Main
  4166                           
  4167                           ;Main_B1.c: 113: Switch_Main();
  4168  0879  319B  2371  3188   	fcall	_Switch_Main
  4169                           
  4170                           ;Main_B1.c: 114: ;;
  4171                           ;Main_B1.c: 115: ;;
  4172                           ;Main_B1.c: 117: RF_Main();
  4173  087C  319A  22E5  3188   	fcall	_RF_Main
  4174                           
  4175                           ;Main_B1.c: 118: DelayOff_Main();
  4176  087F  319B  232C  3188   	fcall	_DelayOff_Main
  4177                           
  4178                           ;Main_B1.c: 119: ;;
  4179                           ;Main_B1.c: 120: ;;
  4180                           ;Main_B1.c: 121: Exception_Main();
  4181  0882  3185  255F  3188   	fcall	_Exception_Main
  4182  0885  284F               	goto	l10947
  4183  0886                     __end_of_main:	
  4184                           ;Main_B1.c: 128: }
  4185                           ;Main_B1.c: 129: }
  4186                           ;Main_B1.c: 163: }
  4187                           ;Main_B1.c: 164: return (0);
  4188                           ;	Return value of _main is never used
  4189                           
  4190                           
  4191                           	psect	text1
  4192  12E7                     __ptext1:	
  4193 ;; *************** function _my_MainTimer *****************
  4194 ;; Defined at:
  4195 ;;		line 185 in file "../src/Main_B1.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;		None
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;		None
  4200 ;; Return value:  Size  Location     Type
  4201 ;;		None               void
  4202 ;; Registers used:
  4203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4204 ;; Tracked objects:
  4205 ;;		On entry : 0/0
  4206 ;;		On exit  : 0/0
  4207 ;;		Unchanged: 0/0
  4208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;Total ram usage:        1 bytes
  4214 ;; Hardware stack levels used:    1
  4215 ;; Hardware stack levels required when called:    7
  4216 ;; This function calls:
  4217 ;;		_setBuz
  4218 ;; This function is called by:
  4219 ;;		_main
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           
  4224                           ;psect for function _my_MainTimer
  4225  12E7                     _my_MainTimer:	
  4226                           
  4227                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4228                           
  4229                           ;incstack = 0
  4230                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4231  12E7  0021               	movlb	1	; select bank1
  4232  12E8  1820               	btfsc	_myMain^(0+128),0
  4233  12E9  2B01               	goto	l10649
  4234                           
  4235                           ;Main_B1.c: 189: myMain.PowerCount++;
  4236  12EA  3001               	movlw	1
  4237  12EB  0020               	movlb	0	; select bank0
  4238  12EC  00AD               	movwf	??_my_MainTimer
  4239  12ED  082D               	movf	??_my_MainTimer,w
  4240  12EE  0021               	movlb	1	; select bank1
  4241  12EF  07A1               	addwf	(_myMain^(0+128)+1),f
  4242                           
  4243                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4244  12F0  0821               	movf	(_myMain^(0+128)+1),w
  4245  12F1  3A96               	xorlw	150
  4246  12F2  1D03               	skipz
  4247  12F3  0008               	return
  4248                           
  4249                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4250  12F4  01A1               	clrf	(_myMain^(0+128)+1)
  4251                           
  4252                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4253  12F5  1420               	bsf	_myMain^(0+128),0
  4254                           
  4255                           ;Main_B1.c: 197: setBuz(3, 50);
  4256  12F6  3032               	movlw	50
  4257  12F7  0020               	movlb	0	; select bank0
  4258  12F8  00A9               	movwf	setBuz@time
  4259  12F9  3000               	movlw	0
  4260  12FA  00AA               	movwf	setBuz@time+1
  4261  12FB  3003               	movlw	3
  4262  12FC  3197  274E         	fcall	_setBuz
  4263                           
  4264                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4265  12FE  0021               	movlb	1	; select bank1
  4266  12FF  1620               	bsf	_myMain^(0+128),4
  4267                           
  4268                           ;Main_B1.c: 207: }
  4269                           ;Main_B1.c: 208: } else {
  4270  1300  0008               	return
  4271  1301                     l10649:	
  4272                           
  4273                           ;Main_B1.c: 209: myMain.PowerCount++;
  4274  1301  3001               	movlw	1
  4275  1302  0020               	movlb	0	; select bank0
  4276  1303  00AD               	movwf	??_my_MainTimer
  4277  1304  082D               	movf	??_my_MainTimer,w
  4278  1305  0021               	movlb	1	; select bank1
  4279  1306  07A1               	addwf	(_myMain^(0+128)+1),f
  4280                           
  4281                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4282  1307  0821               	movf	(_myMain^(0+128)+1),w
  4283  1308  3A64               	xorlw	100
  4284  1309  1903               	btfsc	3,2
  4285                           
  4286                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4287  130A  01A1               	clrf	(_myMain^(0+128)+1)
  4288                           
  4289                           ;Main_B1.c: 226: }
  4290                           ;Main_B1.c: 228: myMain.Count1++;
  4291  130B  3001               	movlw	1
  4292  130C  07A4               	addwf	(_myMain^(0+128)+4),f
  4293  130D  3000               	movlw	0
  4294  130E  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4295                           
  4296                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4297  130F  3004               	movlw	4
  4298  1310  3EA0               	addlw	_myMain& (0+255)
  4299  1311  0086               	movwf	6
  4300  1312  0187               	clrf	7
  4301  1313  3F40               	moviw [0]fsr1
  4302  1314  3A64               	xorlw	100
  4303  1315  1D03               	skipz
  4304  1316  2B19               	goto	u12405
  4305  1317  3F41               	moviw [1]fsr1
  4306  1318  3A00               	xorlw	0
  4307  1319                     u12405:	
  4308  1319  1D03               	skipz
  4309  131A  0008               	return
  4310                           
  4311                           ;Main_B1.c: 230: {
  4312                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4313  131B  01A4               	clrf	(_myMain^(0+128)+4)
  4314  131C  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4315                           
  4316                           ;Main_B1.c: 243: if (myMain.Flag) {
  4317  131D  1CA0               	btfss	_myMain^(0+128),1
  4318  131E  2B21               	goto	l1546
  4319                           
  4320                           ;Main_B1.c: 244: myMain.Flag = 0;
  4321  131F  10A0               	bcf	_myMain^(0+128),1
  4322                           
  4323                           ;Main_B1.c: 253: } else {
  4324  1320  0008               	return
  4325  1321                     l1546:	
  4326                           
  4327                           ;Main_B1.c: 254: myMain.Flag = 1;
  4328  1321  14A0               	bsf	_myMain^(0+128),1
  4329  1322  0008               	return
  4330  1323                     __end_of_my_MainTimer:	
  4331                           
  4332                           	psect	text2
  4333  1C06                     __ptext2:	
  4334 ;; *************** function _myMain_Initialization *****************
  4335 ;; Defined at:
  4336 ;;		line 170 in file "../src/Main_B1.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;		None
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;		None
  4341 ;; Return value:  Size  Location     Type
  4342 ;;		None               void
  4343 ;; Registers used:
  4344 ;;		wreg, fsr1l, fsr1h
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;Total ram usage:        1 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    5
  4357 ;; This function calls:
  4358 ;;		Nothing
  4359 ;; This function is called by:
  4360 ;;		_main
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _myMain_Initialization
  4366  1C06                     _myMain_Initialization:	
  4367                           
  4368                           ;Main_B1.c: 173: product = &_product;
  4369                           
  4370                           ;incstack = 0
  4371                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4372  1C06  3045               	movlw	__product& (0+255)
  4373  1C07  0020               	movlb	0	; select bank0
  4374  1C08  00A0               	movwf	??_myMain_Initialization
  4375  1C09  0820               	movf	??_myMain_Initialization,w
  4376  1C0A  00F9               	movwf	_product
  4377                           
  4378                           ;Main_B1.c: 174: product->Data[20] = 210;
  4379  1C0B  30D2               	movlw	210
  4380  1C0C  00A0               	movwf	??_myMain_Initialization
  4381  1C0D  0879               	movf	_product,w
  4382  1C0E  3E14               	addlw	20
  4383  1C0F  0086               	movwf	6
  4384  1C10  3002               	movlw	2	; select bank4/5
  4385  1C11  0087               	movwf	7
  4386  1C12  0820               	movf	??_myMain_Initialization,w
  4387  1C13  0081               	movwf	1
  4388  1C14  0008               	return
  4389  1C15                     __end_of_myMain_Initialization:	
  4390                           
  4391                           	psect	text3
  4392  1361                     __ptext3:	
  4393 ;; *************** function _getTemp_AD *****************
  4394 ;; Defined at:
  4395 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;  channel         1    wreg     unsigned char 
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;  channel         1    5[BANK0 ] unsigned char 
  4400 ;; Return value:  Size  Location     Type
  4401 ;;		None               void
  4402 ;; Registers used:
  4403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;Total ram usage:        2 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    7
  4416 ;; This function calls:
  4417 ;;		_getAD
  4418 ;; This function is called by:
  4419 ;;		_main
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           
  4424                           ;psect for function _getTemp_AD
  4425  1361                     _getTemp_AD:	
  4426                           
  4427                           ;incstack = 0
  4428                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4429                           ;getTemp_AD@channel stored from wreg
  4430  1361  0020               	movlb	0	; select bank0
  4431  1362  00A5               	movwf	getTemp_AD@channel
  4432                           
  4433                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4434  1363  0021               	movlb	1	; select bank1
  4435  1364  1D56               	btfss	_Temp^(0+128),2
  4436  1365  0008               	return
  4437                           
  4438                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4439  1366  30F0               	movlw	240
  4440  1367  0020               	movlb	0	; select bank0
  4441  1368  00A4               	movwf	??_getTemp_AD
  4442  1369  0824               	movf	??_getTemp_AD,w
  4443  136A  00A0               	movwf	getAD@adcon1
  4444  136B  0825               	movf	getTemp_AD@channel,w
  4445  136C  319F  2730  3193   	fcall	_getAD
  4446  136F  0020               	movlb	0	; select bank0
  4447  1370  0821               	movf	?_getAD+1,w
  4448  1371  0021               	movlb	1	; select bank1
  4449  1372  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4450  1373  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4451  1374  0020               	movlb	0	; select bank0
  4452  1375  0820               	movf	?_getAD,w
  4453  1376  0021               	movlb	1	; select bank1
  4454  1377  01E2               	clrf	(_Temp^(0+128)+12)
  4455  1378  07E2               	addwf	(_Temp^(0+128)+12),f
  4456                           
  4457                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4458  1379  300C               	movlw	12
  4459  137A  3ED6               	addlw	_Temp& (0+255)
  4460  137B  0086               	movwf	6
  4461  137C  0187               	clrf	7
  4462  137D  0016               	moviw fsr1++
  4463  137E  0401               	iorwf	1,w
  4464  137F  1903               	skipnz
  4465  1380  0008               	return
  4466                           
  4467                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4468  1381  0863               	movf	((_Temp+1)^(0+128)+12),w
  4469  1382  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4470  1383  1D03               	skipz
  4471  1384  2B87               	goto	u12355
  4472  1385  0862               	movf	(_Temp^(0+128)+12),w
  4473  1386  025E               	subwf	(_Temp^(0+128)+8),w
  4474  1387                     u12355:	
  4475  1387  1803               	skipnc
  4476  1388  2B90               	goto	l10631
  4477                           
  4478                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4479  1389  0863               	movf	((_Temp+1)^(0+128)+12),w
  4480  138A  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4481  138B  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4482  138C  0862               	movf	(_Temp^(0+128)+12),w
  4483  138D  01DE               	clrf	(_Temp^(0+128)+8)
  4484  138E  07DE               	addwf	(_Temp^(0+128)+8),f
  4485                           
  4486                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4487  138F  0008               	return
  4488  1390                     l10631:	
  4489  1390  0863               	movf	((_Temp+1)^(0+128)+12),w
  4490  1391  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4491  1392  1D03               	skipz
  4492  1393  2B96               	goto	u12365
  4493  1394  0862               	movf	(_Temp^(0+128)+12),w
  4494  1395  0260               	subwf	(_Temp^(0+128)+10),w
  4495  1396                     u12365:	
  4496  1396  1803               	skipnc
  4497  1397  0008               	return
  4498                           
  4499                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4500  1398  0863               	movf	((_Temp+1)^(0+128)+12),w
  4501  1399  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4502  139A  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4503  139B  0862               	movf	(_Temp^(0+128)+12),w
  4504  139C  01E0               	clrf	(_Temp^(0+128)+10)
  4505  139D  07E0               	addwf	(_Temp^(0+128)+10),f
  4506  139E  0008               	return
  4507  139F                     __end_of_getTemp_AD:	
  4508                           
  4509                           	psect	text4
  4510  0D04                     __ptext4:	
  4511 ;; *************** function _getLoad_AD *****************
  4512 ;; Defined at:
  4513 ;;		line 15 in file "../src/OverLoad_B1.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  channel         1    wreg     unsigned char 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;  channel         1    6[BANK0 ] unsigned char 
  4518 ;;  i               1    9[BANK0 ] unsigned char 
  4519 ;;  j               1    8[BANK0 ] unsigned char 
  4520 ;;  k               1    7[BANK0 ] unsigned char 
  4521 ;; Return value:  Size  Location     Type
  4522 ;;		None               void
  4523 ;; Registers used:
  4524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4531 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;Total ram usage:        6 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    7
  4537 ;; This function calls:
  4538 ;;		_getAD
  4539 ;; This function is called by:
  4540 ;;		_main
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           
  4545                           ;psect for function _getLoad_AD
  4546  0D04                     _getLoad_AD:	
  4547                           
  4548                           ;incstack = 0
  4549                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4550                           ;getLoad_AD@channel stored from wreg
  4551  0D04  0020               	movlb	0	; select bank0
  4552  0D05  00A6               	movwf	getLoad_AD@channel
  4553                           
  4554                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4555  0D06  01A9               	clrf	getLoad_AD@i
  4556  0D07  01A8               	clrf	getLoad_AD@j
  4557  0D08  01A7               	clrf	getLoad_AD@k
  4558                           
  4559                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4560  0D09  0022               	movlb	2	; select bank2
  4561  0D0A  1E27               	btfss	_Load^(0+256),4
  4562  0D0B  0008               	return
  4563                           
  4564                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4565  0D0C  30F3               	movlw	243
  4566  0D0D  0020               	movlb	0	; select bank0
  4567  0D0E  00A4               	movwf	??_getLoad_AD
  4568  0D0F  0824               	movf	??_getLoad_AD,w
  4569  0D10  00A0               	movwf	getAD@adcon1
  4570  0D11  0826               	movf	getLoad_AD@channel,w
  4571  0D12  319F  2730  318D   	fcall	_getAD
  4572  0D15  0020               	movlb	0	; select bank0
  4573  0D16  0821               	movf	?_getAD+1,w
  4574  0D17  0022               	movlb	2	; select bank2
  4575  0D18  01C9               	clrf	((_Load+1)^(0+256)+33)
  4576  0D19  07C9               	addwf	((_Load+1)^(0+256)+33),f
  4577  0D1A  0020               	movlb	0	; select bank0
  4578  0D1B  0820               	movf	?_getAD,w
  4579  0D1C  0022               	movlb	2	; select bank2
  4580  0D1D  01C8               	clrf	(_Load^(0+256)+33)
  4581  0D1E  07C8               	addwf	(_Load^(0+256)+33),f
  4582                           
  4583                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4584  0D1F  0020               	movlb	0	; select bank0
  4585  0D20  01A9               	clrf	getLoad_AD@i
  4586  0D21  3004               	movlw	4
  4587  0D22  0229               	subwf	getLoad_AD@i,w
  4588  0D23  1803               	btfsc	3,0
  4589  0D24  2D52               	goto	l10601
  4590  0D25                     l10589:	
  4591                           
  4592                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4593  0D25  3529               	lslf	getLoad_AD@i,w
  4594  0D26  3E32               	addlw	(_Load+11)& (0+255)
  4595  0D27  0086               	movwf	6
  4596  0D28  3001               	movlw	1	; select bank2/3
  4597  0D29  0087               	movwf	7
  4598  0D2A  3F40               	moviw [0]fsr1
  4599  0D2B  00A4               	movwf	??_getLoad_AD
  4600  0D2C  3F41               	moviw [1]fsr1
  4601  0D2D  00A5               	movwf	??_getLoad_AD+1
  4602  0D2E  0022               	movlb	2	; select bank2
  4603  0D2F  0849               	movf	((_Load+1)^(0+256)+33),w
  4604  0D30  0020               	movlb	0	; select bank0
  4605  0D31  0225               	subwf	??_getLoad_AD+1,w
  4606  0D32  1D03               	skipz
  4607  0D33  2D38               	goto	u12255
  4608  0D34  0022               	movlb	2	; select bank2
  4609  0D35  0848               	movf	(_Load^(0+256)+33),w
  4610  0D36  0020               	movlb	0	; select bank0
  4611  0D37  0224               	subwf	??_getLoad_AD,w
  4612  0D38                     u12255:	
  4613  0D38  1803               	skipnc
  4614  0D39  2D4A               	goto	l10597
  4615  0D3A  08A8               	movf	getLoad_AD@j,f
  4616  0D3B  1D03               	skipz
  4617  0D3C  2D4A               	goto	l10597
  4618                           
  4619                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4620  0D3D  3529               	lslf	getLoad_AD@i,w
  4621  0D3E  3E32               	addlw	(_Load+11)& (0+255)
  4622  0D3F  0086               	movwf	6
  4623  0D40  3001               	movlw	1	; select bank2/3
  4624  0D41  0087               	movwf	7
  4625  0D42  0022               	movlb	2	; select bank2
  4626  0D43  0848               	movf	(_Load^(0+256)+33),w
  4627  0D44  3FC0               	movwi [0]fsr1
  4628  0D45  0849               	movf	((_Load+1)^(0+256)+33),w
  4629  0D46  3FC1               	movwi [1]fsr1
  4630                           
  4631                           ;OverLoad_B1.c: 24: j = 1;
  4632  0D47  0020               	movlb	0	; select bank0
  4633  0D48  01A8               	clrf	getLoad_AD@j
  4634  0D49  0AA8               	incf	getLoad_AD@j,f
  4635  0D4A                     l10597:	
  4636  0D4A  3001               	movlw	1
  4637  0D4B  00A4               	movwf	??_getLoad_AD
  4638  0D4C  0824               	movf	??_getLoad_AD,w
  4639  0D4D  07A9               	addwf	getLoad_AD@i,f
  4640  0D4E  3004               	movlw	4
  4641  0D4F  0229               	subwf	getLoad_AD@i,w
  4642  0D50  1C03               	skipc
  4643  0D51  2D25               	goto	l10589
  4644  0D52                     l10601:	
  4645                           
  4646                           ;OverLoad_B1.c: 25: }
  4647                           ;OverLoad_B1.c: 26: }
  4648                           ;OverLoad_B1.c: 27: if (j == 0) {
  4649  0D52  08A8               	movf	getLoad_AD@j,f
  4650  0D53  1D03               	skipz
  4651  0D54  0008               	return
  4652                           
  4653                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4654  0D55  01A9               	clrf	getLoad_AD@i
  4655  0D56                     L1:	
  4656  0D56  3004               	movlw	4
  4657  0D57  0229               	subwf	getLoad_AD@i,w
  4658  0D58  1803               	btfsc	3,0
  4659  0D59  0008               	return
  4660                           
  4661                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4662  0D5A  3529               	lslf	getLoad_AD@i,w
  4663  0D5B  3E3C               	addlw	(_Load+21)& (0+255)
  4664  0D5C  0086               	movwf	6
  4665  0D5D  3001               	movlw	1	; select bank2/3
  4666  0D5E  0087               	movwf	7
  4667  0D5F  3F40               	moviw [0]fsr1
  4668  0D60  00A4               	movwf	??_getLoad_AD
  4669  0D61  3F41               	moviw [1]fsr1
  4670  0D62  00A5               	movwf	??_getLoad_AD+1
  4671  0D63  0825               	movf	??_getLoad_AD+1,w
  4672  0D64  0022               	movlb	2	; select bank2
  4673  0D65  0249               	subwf	((_Load+1)^(0+256)+33),w
  4674  0D66  1D03               	skipz
  4675  0D67  2D6C               	goto	u12305
  4676  0D68  0020               	movlb	0	; select bank0
  4677  0D69  0824               	movf	??_getLoad_AD,w
  4678  0D6A  0022               	movlb	2	; select bank2
  4679  0D6B  0248               	subwf	(_Load^(0+256)+33),w
  4680  0D6C                     u12305:	
  4681  0D6C  1803               	skipnc
  4682  0D6D  2D7F               	goto	l10617
  4683  0D6E  0020               	movlb	0	; select bank0
  4684  0D6F  08A7               	movf	getLoad_AD@k,f
  4685  0D70  1D03               	skipz
  4686  0D71  2D7F               	goto	l10617
  4687                           
  4688                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4689  0D72  3529               	lslf	getLoad_AD@i,w
  4690  0D73  3E3C               	addlw	(_Load+21)& (0+255)
  4691  0D74  0086               	movwf	6
  4692  0D75  3001               	movlw	1	; select bank2/3
  4693  0D76  0087               	movwf	7
  4694  0D77  0022               	movlb	2	; select bank2
  4695  0D78  0848               	movf	(_Load^(0+256)+33),w
  4696  0D79  3FC0               	movwi [0]fsr1
  4697  0D7A  0849               	movf	((_Load+1)^(0+256)+33),w
  4698  0D7B  3FC1               	movwi [1]fsr1
  4699                           
  4700                           ;OverLoad_B1.c: 31: k = 1;
  4701  0D7C  0020               	movlb	0	; select bank0
  4702  0D7D  01A7               	clrf	getLoad_AD@k
  4703  0D7E  0AA7               	incf	getLoad_AD@k,f
  4704  0D7F                     l10617:	
  4705  0D7F  3001               	movlw	1
  4706  0D80  0020               	movlb	0	; select bank0
  4707  0D81  00A4               	movwf	??_getLoad_AD
  4708  0D82  0824               	movf	??_getLoad_AD,w
  4709  0D83  07A9               	addwf	getLoad_AD@i,f
  4710  0D84  2D56               	goto	L1
  4711  0D85                     __end_of_getLoad_AD:	
  4712                           
  4713                           	psect	text5
  4714  1F30                     __ptext5:	
  4715 ;; *************** function _getAD *****************
  4716 ;; Defined at:
  4717 ;;		line 453 in file "../src/MCU_B1.c"
  4718 ;; Parameters:    Size  Location     Type
  4719 ;;  adcon0          1    wreg     unsigned char 
  4720 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4723 ;; Return value:  Size  Location     Type
  4724 ;;                  2    0[BANK0 ] int 
  4725 ;; Registers used:
  4726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4727 ;; Tracked objects:
  4728 ;;		On entry : 0/0
  4729 ;;		On exit  : 0/0
  4730 ;;		Unchanged: 0/0
  4731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4732 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4733 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;Total ram usage:        4 bytes
  4737 ;; Hardware stack levels used:    1
  4738 ;; Hardware stack levels required when called:    6
  4739 ;; This function calls:
  4740 ;;		_Timeout_Counter
  4741 ;;		_set_TimeoutCleared
  4742 ;; This function is called by:
  4743 ;;		_getLoad_AD
  4744 ;;		_getTemp_AD
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           
  4749                           ;psect for function _getAD
  4750  1F30                     _getAD:	
  4751                           
  4752                           ;incstack = 0
  4753                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4754                           ;getAD@adcon0 stored from wreg
  4755  1F30  0020               	movlb	0	; select bank0
  4756  1F31  00A3               	movwf	getAD@adcon0
  4757                           
  4758                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4759  1F32  0823               	movf	getAD@adcon0,w
  4760  1F33  0021               	movlb	1	; select bank1
  4761  1F34  009D               	movwf	29	;volatile
  4762                           
  4763                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4764  1F35  0020               	movlb	0	; select bank0
  4765  1F36  0820               	movf	getAD@adcon1,w
  4766  1F37  0021               	movlb	1	; select bank1
  4767  1F38  009E               	movwf	30	;volatile
  4768                           
  4769                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4770  1F39  149D               	bsf	29,1	;volatile
  4771                           
  4772                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4773  1F3A  2F3E               	goto	l10083
  4774  1F3B                     l10081:	
  4775                           
  4776                           ;MCU_B1.c: 458: Timeout_Counter();
  4777  1F3B  319D  259E  319F   	fcall	_Timeout_Counter
  4778  1F3E                     l10083:	
  4779  1F3E  0021               	movlb	1	; select bank1
  4780  1F3F  1C9D               	btfss	29,1	;volatile
  4781  1F40  2F43               	goto	l10087
  4782  1F41  1D2B               	btfss	(_myMain^(0+128)+11),2
  4783  1F42  2F3B               	goto	l10081
  4784  1F43                     l10087:	
  4785                           
  4786                           ;MCU_B1.c: 459: };
  4787                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4788  1F43  319A  22FE         	fcall	_set_TimeoutCleared
  4789                           
  4790                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4791  1F45  0021               	movlb	1	; select bank1
  4792  1F46  081C               	movf	28,w	;volatile
  4793  1F47  0020               	movlb	0	; select bank0
  4794  1F48  01A1               	clrf	?_getAD+1
  4795  1F49  07A1               	addwf	?_getAD+1,f
  4796  1F4A  0021               	movlb	1	; select bank1
  4797  1F4B  081B               	movf	27,w	;volatile
  4798  1F4C  0020               	movlb	0	; select bank0
  4799  1F4D  01A0               	clrf	?_getAD
  4800  1F4E  07A0               	addwf	?_getAD,f
  4801  1F4F  0008               	return
  4802  1F50                     __end_of_getAD:	
  4803                           
  4804                           	psect	text6
  4805  1CA0                     __ptext6:	
  4806 ;; *************** function _WDT_Main *****************
  4807 ;; Defined at:
  4808 ;;		line 1097 in file "../src/MCU_B1.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;		None
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;		None
  4813 ;; Return value:  Size  Location     Type
  4814 ;;		None               void
  4815 ;; Registers used:
  4816 ;;		wreg, status,2, status,0, pclath, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4824 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;Total ram usage:        1 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    6
  4829 ;; This function calls:
  4830 ;;		_WDT_Clearing
  4831 ;; This function is called by:
  4832 ;;		_main
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           
  4837                           ;psect for function _WDT_Main
  4838  1CA0                     _WDT_Main:	
  4839                           
  4840                           ;MCU_B1.c: 1098: if (WDT.Enable == 1) {
  4841                           
  4842                           ;incstack = 0
  4843                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4844  1CA0  0022               	movlb	2	; select bank2
  4845  1CA1  1C25               	btfss	_WDT^(0+256),0
  4846  1CA2  0008               	return
  4847                           
  4848                           ;MCU_B1.c: 1099: if (WDT.Timer-- > 0) {
  4849  1CA3  3001               	movlw	1
  4850  1CA4  02A6               	subwf	(_WDT^(0+256)+1),f
  4851  1CA5  0826               	movf	(_WDT^(0+256)+1),w
  4852  1CA6  3AFF               	xorlw	255
  4853  1CA7  1903               	skipnz
  4854  1CA8  0008               	return
  4855                           
  4856                           ;MCU_B1.c: 1100: WDT.Timer = 100;
  4857  1CA9  3064               	movlw	100
  4858  1CAA  0020               	movlb	0	; select bank0
  4859  1CAB  00A0               	movwf	??_WDT_Main
  4860  1CAC  0820               	movf	??_WDT_Main,w
  4861  1CAD  0022               	movlb	2	; select bank2
  4862  1CAE  00A6               	movwf	(_WDT^(0+256)+1)
  4863                           
  4864                           ;MCU_B1.c: 1101: WDT_Clearing();
  4865  1CAF  3180  2002         	fcall	_WDT_Clearing
  4866  1CB1  0008               	return
  4867  1CB2                     __end_of_WDT_Main:	
  4868                           
  4869                           	psect	text7
  4870  0002                     __ptext7:	
  4871 ;; *************** function _WDT_Clearing *****************
  4872 ;; Defined at:
  4873 ;;		line 1107 in file "../src/MCU_B1.c"
  4874 ;; Parameters:    Size  Location     Type
  4875 ;;		None
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;		None
  4878 ;; Return value:  Size  Location     Type
  4879 ;;		None               void
  4880 ;; Registers used:
  4881 ;;		None
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;Total ram usage:        0 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    5
  4894 ;; This function calls:
  4895 ;;		Nothing
  4896 ;; This function is called by:
  4897 ;;		_WDT_Main
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           
  4902                           ;psect for function _WDT_Clearing
  4903  0002                     _WDT_Clearing:	
  4904                           
  4905                           ;incstack = 0
  4906                           ; Regs used in _WDT_Clearing: []
  4907  0002  0064               	clrwdt	;# 
  4908  0003  0008               	return
  4909  0004                     __end_of_WDT_Clearing:	
  4910                           
  4911                           	psect	text8
  4912  1AEB                     __ptext8:	
  4913 ;; *************** function _Temp_Main *****************
  4914 ;; Defined at:
  4915 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;		None
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;		None
  4920 ;; Return value:  Size  Location     Type
  4921 ;;		None               void
  4922 ;; Registers used:
  4923 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;Total ram usage:        0 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    8
  4936 ;; This function calls:
  4937 ;;		_setTemp_Main
  4938 ;; This function is called by:
  4939 ;;		_main
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           
  4944                           ;psect for function _Temp_Main
  4945  1AEB                     _Temp_Main:	
  4946                           
  4947                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4948                           
  4949                           ;incstack = 0
  4950                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4951  1AEB  318F  2750         	fcall	_setTemp_Main
  4952  1AED  0008               	return
  4953  1AEE                     __end_of_Temp_Main:	
  4954                           
  4955                           	psect	text9
  4956  0F50                     __ptext9:	
  4957 ;; *************** function _setTemp_Main *****************
  4958 ;; Defined at:
  4959 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;		None
  4962 ;; Auto vars:     Size  Location     Type
  4963 ;;  error           1   72[BANK0 ] unsigned char 
  4964 ;; Return value:  Size  Location     Type
  4965 ;;		None               void
  4966 ;; Registers used:
  4967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4968 ;; Tracked objects:
  4969 ;;		On entry : 0/0
  4970 ;;		On exit  : 0/0
  4971 ;;		Unchanged: 0/0
  4972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;Total ram usage:        3 bytes
  4978 ;; Hardware stack levels used:    1
  4979 ;; Hardware stack levels required when called:    7
  4980 ;; This function calls:
  4981 ;;		_getMain_All_Error_Status
  4982 ;;		_setBuz
  4983 ;;		_setProductData
  4984 ;; This function is called by:
  4985 ;;		_Temp_Main
  4986 ;; This function uses a non-reentrant model
  4987 ;;
  4988                           
  4989                           
  4990                           ;psect for function _setTemp_Main
  4991  0F50                     _setTemp_Main:	
  4992                           
  4993                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4994                           
  4995                           ;incstack = 0
  4996                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4997  0F50  3000               	movlw	0
  4998  0F51  3191  2168  318F   	fcall	_getMain_All_Error_Status
  4999  0F54  0020               	movlb	0	; select bank0
  5000  0F55  00E6               	movwf	??_setTemp_Main
  5001  0F56  0866               	movf	??_setTemp_Main,w
  5002  0F57  00E8               	movwf	setTemp_Main@error
  5003                           
  5004                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5005  0F58  0021               	movlb	1	; select bank1
  5006  0F59  1C56               	btfss	_Temp^(0+128),0
  5007  0F5A  2FFC               	goto	l1896
  5008                           
  5009                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5010  0F5B  1956               	btfsc	_Temp^(0+128),2
  5011  0F5C  2F6C               	goto	l10153
  5012                           
  5013                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5014  0F5D  3001               	movlw	1
  5015  0F5E  07D7               	addwf	(_Temp^(0+128)+1),f
  5016  0F5F  3000               	movlw	0
  5017  0F60  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5018                           
  5019                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  5020  0F61  3001               	movlw	1
  5021  0F62  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5022  0F63  30F4               	movlw	244
  5023  0F64  1903               	skipnz
  5024  0F65  0257               	subwf	(_Temp^(0+128)+1),w
  5025  0F66  1C03               	skipc
  5026  0F67  0008               	return
  5027                           
  5028                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5029  0F68  01D7               	clrf	(_Temp^(0+128)+1)
  5030  0F69  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5031                           
  5032                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5033  0F6A  1556               	bsf	_Temp^(0+128),2
  5034                           
  5035                           ;OverTemperature_B1.c: 70: }
  5036                           ;OverTemperature_B1.c: 71: } else {
  5037  0F6B  0008               	return
  5038  0F6C                     l10153:	
  5039                           
  5040                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5041  0F6C  3001               	movlw	1
  5042  0F6D  07D7               	addwf	(_Temp^(0+128)+1),f
  5043  0F6E  3000               	movlw	0
  5044  0F6F  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5045                           
  5046                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5047  0F70  3000               	movlw	0
  5048  0F71  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5049  0F72  3005               	movlw	5
  5050  0F73  1903               	skipnz
  5051  0F74  0257               	subwf	(_Temp^(0+128)+1),w
  5052  0F75  1C03               	skipc
  5053  0F76  0008               	return
  5054                           
  5055                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5056  0F77  01D7               	clrf	(_Temp^(0+128)+1)
  5057  0F78  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5058                           
  5059                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5060  0F79  3008               	movlw	8
  5061  0F7A  3ED6               	addlw	_Temp& (0+255)
  5062  0F7B  0086               	movwf	6
  5063  0F7C  0187               	clrf	7
  5064  0F7D  0016               	moviw fsr1++
  5065  0F7E  0401               	iorwf	1,w
  5066  0F7F  1903               	skipnz
  5067  0F80  2FF6               	goto	l1901
  5068  0F81  300A               	movlw	10
  5069  0F82  3ED6               	addlw	_Temp& (0+255)
  5070  0F83  0086               	movwf	6
  5071  0F84  0187               	clrf	7
  5072  0F85  0016               	moviw fsr1++
  5073  0F86  0401               	iorwf	1,w
  5074  0F87  1903               	skipnz
  5075  0F88  2FF6               	goto	l1901
  5076                           
  5077                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5078  0F89  1156               	bcf	_Temp^(0+128),2
  5079                           
  5080                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5081  0F8A  300A               	movlw	10
  5082  0F8B  3ED6               	addlw	_Temp& (0+255)
  5083  0F8C  0086               	movwf	6
  5084  0F8D  0187               	clrf	7
  5085  0F8E  3008               	movlw	8
  5086  0F8F  3ED6               	addlw	_Temp& (0+255)
  5087  0F90  0084               	movwf	4
  5088  0F91  0185               	clrf	5
  5089  0F92  3F40               	moviw [0]fsr1
  5090  0F93  0700               	addwf	0,w
  5091  0F94  0020               	movlb	0	; select bank0
  5092  0F95  00E6               	movwf	??_setTemp_Main
  5093  0F96  3101               	addfsr 0,1
  5094  0F97  3F41               	moviw [1]fsr1
  5095  0F98  3D00               	addwfc	0,w
  5096  0F99  00E7               	movwf	??_setTemp_Main+1
  5097  0F9A  36E7               	lsrf	??_setTemp_Main+1,f
  5098  0F9B  0CE6               	rrf	??_setTemp_Main,f
  5099  0F9C  0866               	movf	??_setTemp_Main,w
  5100  0F9D  0021               	movlb	1	; select bank1
  5101  0F9E  00DC               	movwf	(_Temp^(0+128)+6)
  5102  0F9F  0020               	movlb	0	; select bank0
  5103  0FA0  0867               	movf	??_setTemp_Main+1,w
  5104  0FA1  0021               	movlb	1	; select bank1
  5105  0FA2  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5106                           
  5107                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5108  0FA3  30C7               	movlw	199
  5109  0FA4  00E4               	movwf	(_Temp^(0+128)+14)
  5110  0FA5  3001               	movlw	1
  5111  0FA6  00E5               	movwf	(_Temp^(0+128)+15)
  5112                           
  5113                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5114  0FA7  309F               	movlw	159
  5115  0FA8  00E6               	movwf	(_Temp^(0+128)+16)
  5116  0FA9  3001               	movlw	1
  5117  0FAA  00E7               	movwf	(_Temp^(0+128)+17)
  5118                           
  5119                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5120  0FAB  1CD6               	btfss	_Temp^(0+128),1
  5121  0FAC  2FCD               	goto	l10185
  5122                           
  5123                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5124  0FAD  0865               	movf	((_Temp+1)^(0+128)+14),w
  5125  0FAE  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5126  0FAF  1D03               	skipz
  5127  0FB0  2FB3               	goto	u11485
  5128  0FB1  0864               	movf	(_Temp^(0+128)+14),w
  5129  0FB2  025C               	subwf	(_Temp^(0+128)+6),w
  5130  0FB3                     u11485:	
  5131  0FB3  1C03               	skipc
  5132  0FB4  2FCB               	goto	l10183
  5133                           
  5134                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5135  0FB5  3001               	movlw	1
  5136  0FB6  0020               	movlb	0	; select bank0
  5137  0FB7  00E6               	movwf	??_setTemp_Main
  5138  0FB8  0866               	movf	??_setTemp_Main,w
  5139  0FB9  0021               	movlb	1	; select bank1
  5140  0FBA  07D9               	addwf	(_Temp^(0+128)+3),f
  5141                           
  5142                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5143  0FBB  3003               	movlw	3
  5144  0FBC  0259               	subwf	(_Temp^(0+128)+3),w
  5145  0FBD  1C03               	skipc
  5146  0FBE  2FE3               	goto	l10197
  5147                           
  5148                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5149  0FBF  01D9               	clrf	(_Temp^(0+128)+3)
  5150                           
  5151                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5152  0FC0  10D6               	bcf	_Temp^(0+128),1
  5153                           
  5154                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5155  0FC1  3064               	movlw	100
  5156  0FC2  0020               	movlb	0	; select bank0
  5157  0FC3  00A9               	movwf	setBuz@time
  5158  0FC4  3000               	movlw	0
  5159  0FC5  00AA               	movwf	setBuz@time+1
  5160  0FC6  3002               	movlw	2
  5161  0FC7  3197  274E  318F   	fcall	_setBuz
  5162                           
  5163                           ;OverTemperature_B1.c: 103: }
  5164                           ;OverTemperature_B1.c: 104: } else {
  5165  0FCA  2FE3               	goto	l10197
  5166  0FCB                     l10183:	
  5167                           
  5168                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5169  0FCB  0021               	movlb	1	; select bank1
  5170  0FCC  2FE2               	goto	l10195
  5171  0FCD                     l10185:	
  5172                           ;OverTemperature_B1.c: 106: }
  5173                           ;OverTemperature_B1.c: 107: } else {
  5174                           
  5175                           
  5176                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5177  0FCD  085D               	movf	((_Temp+1)^(0+128)+6),w
  5178  0FCE  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5179  0FCF  1D03               	skipz
  5180  0FD0  2FD3               	goto	u11505
  5181  0FD1  085C               	movf	(_Temp^(0+128)+6),w
  5182  0FD2  0266               	subwf	(_Temp^(0+128)+16),w
  5183  0FD3                     u11505:	
  5184  0FD3  1C03               	skipc
  5185  0FD4  2FE2               	goto	l10195
  5186                           
  5187                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5188  0FD5  3001               	movlw	1
  5189  0FD6  0020               	movlb	0	; select bank0
  5190  0FD7  00E6               	movwf	??_setTemp_Main
  5191  0FD8  0866               	movf	??_setTemp_Main,w
  5192  0FD9  0021               	movlb	1	; select bank1
  5193  0FDA  07D9               	addwf	(_Temp^(0+128)+3),f
  5194                           
  5195                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5196  0FDB  3003               	movlw	3
  5197  0FDC  0259               	subwf	(_Temp^(0+128)+3),w
  5198  0FDD  1C03               	skipc
  5199  0FDE  2FE3               	goto	l10197
  5200                           
  5201                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5202  0FDF  01D9               	clrf	(_Temp^(0+128)+3)
  5203                           
  5204                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5205  0FE0  14D6               	bsf	_Temp^(0+128),1
  5206                           
  5207                           ;OverTemperature_B1.c: 113: }
  5208                           ;OverTemperature_B1.c: 114: } else {
  5209  0FE1  2FE3               	goto	l10197
  5210  0FE2                     l10195:	
  5211                           
  5212                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5213  0FE2  01D9               	clrf	(_Temp^(0+128)+3)
  5214  0FE3                     l10197:	
  5215                           
  5216                           ;OverTemperature_B1.c: 116: }
  5217                           ;OverTemperature_B1.c: 117: }
  5218                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5219  0FE3  0021               	movlb	1	; select bank1
  5220  0FE4  085D               	movf	((_Temp+1)^(0+128)+6),w
  5221  0FE5  0020               	movlb	0	; select bank0
  5222  0FE6  00E6               	movwf	??_setTemp_Main
  5223  0FE7  0866               	movf	??_setTemp_Main,w
  5224  0FE8  00E2               	movwf	setProductData@value
  5225  0FE9  3018               	movlw	24
  5226  0FEA  319B  23E9  318F   	fcall	_setProductData
  5227                           
  5228                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5229  0FED  0021               	movlb	1	; select bank1
  5230  0FEE  085C               	movf	(_Temp^(0+128)+6),w
  5231  0FEF  0020               	movlb	0	; select bank0
  5232  0FF0  00E6               	movwf	??_setTemp_Main
  5233  0FF1  0866               	movf	??_setTemp_Main,w
  5234  0FF2  00E2               	movwf	setProductData@value
  5235  0FF3  3019               	movlw	25
  5236  0FF4  319B  23E9         	fcall	_setProductData
  5237  0FF6                     l1901:	
  5238                           
  5239                           ;OverTemperature_B1.c: 135: }
  5240                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5241  0FF6  0021               	movlb	1	; select bank1
  5242  0FF7  01DE               	clrf	(_Temp^(0+128)+8)
  5243  0FF8  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5244                           
  5245                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5246  0FF9  01E0               	clrf	(_Temp^(0+128)+10)
  5247  0FFA  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5248                           
  5249                           ;OverTemperature_B1.c: 138: }
  5250                           ;OverTemperature_B1.c: 139: }
  5251                           ;OverTemperature_B1.c: 141: } else {
  5252  0FFB  0008               	return
  5253  0FFC                     l1896:	
  5254                           
  5255                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5256  0FFC  1C20               	btfss	_myMain^(0+128),0
  5257  0FFD  0008               	return
  5258                           
  5259                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5260  0FFE  1456               	bsf	_Temp^(0+128),0
  5261  0FFF  0008               	return
  5262  1000                     __end_of_setTemp_Main:	
  5263                           
  5264                           	psect	text10
  5265  1AE8                     __ptext10:	
  5266 ;; *************** function _Temp_Initialization *****************
  5267 ;; Defined at:
  5268 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5269 ;; Parameters:    Size  Location     Type
  5270 ;;		None
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;		None
  5273 ;; Return value:  Size  Location     Type
  5274 ;;		None               void
  5275 ;; Registers used:
  5276 ;;		status,2, status,0, pclath, cstack
  5277 ;; Tracked objects:
  5278 ;;		On entry : 0/0
  5279 ;;		On exit  : 0/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;Total ram usage:        0 bytes
  5287 ;; Hardware stack levels used:    1
  5288 ;; Hardware stack levels required when called:    6
  5289 ;; This function calls:
  5290 ;;		_setTemp_Initialization
  5291 ;; This function is called by:
  5292 ;;		_main
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           
  5297                           ;psect for function _Temp_Initialization
  5298  1AE8                     _Temp_Initialization:	
  5299                           
  5300                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5304  1AE8  3188  2000         	fcall	_setTemp_Initialization
  5305  1AEA  0008               	return
  5306  1AEB                     __end_of_Temp_Initialization:	
  5307                           
  5308                           	psect	text11
  5309  0800                     __ptext11:	
  5310 ;; *************** function _setTemp_Initialization *****************
  5311 ;; Defined at:
  5312 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;		None
  5315 ;; Auto vars:     Size  Location     Type
  5316 ;;		None
  5317 ;; Return value:  Size  Location     Type
  5318 ;;		None               void
  5319 ;; Registers used:
  5320 ;;		None
  5321 ;; Tracked objects:
  5322 ;;		On entry : 0/0
  5323 ;;		On exit  : 0/0
  5324 ;;		Unchanged: 0/0
  5325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;Total ram usage:        0 bytes
  5331 ;; Hardware stack levels used:    1
  5332 ;; Hardware stack levels required when called:    5
  5333 ;; This function calls:
  5334 ;;		Nothing
  5335 ;; This function is called by:
  5336 ;;		_Temp_Initialization
  5337 ;; This function uses a non-reentrant model
  5338 ;;
  5339                           
  5340                           
  5341                           ;psect for function _setTemp_Initialization
  5342  0800                     _setTemp_Initialization:	
  5343                           
  5344                           ;incstack = 0
  5345                           ; Regs used in _setTemp_Initialization: []
  5346  0800  0008               	return
  5347  0801                     __end_of_setTemp_Initialization:	
  5348                           
  5349                           	psect	text12
  5350  1B71                     __ptext12:	
  5351 ;; *************** function _Switch_Main *****************
  5352 ;; Defined at:
  5353 ;;		line 72 in file "../src/Switch_B1.c"
  5354 ;; Parameters:    Size  Location     Type
  5355 ;;		None
  5356 ;; Auto vars:     Size  Location     Type
  5357 ;;		None
  5358 ;; Return value:  Size  Location     Type
  5359 ;;		None               void
  5360 ;; Registers used:
  5361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5362 ;; Tracked objects:
  5363 ;;		On entry : 0/0
  5364 ;;		On exit  : 0/0
  5365 ;;		Unchanged: 0/0
  5366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;Total ram usage:        0 bytes
  5372 ;; Hardware stack levels used:    1
  5373 ;; Hardware stack levels required when called:   10
  5374 ;; This function calls:
  5375 ;;		_TouchPower
  5376 ;;		_setSw_Main
  5377 ;; This function is called by:
  5378 ;;		_main
  5379 ;; This function uses a non-reentrant model
  5380 ;;
  5381                           
  5382                           
  5383                           ;psect for function _Switch_Main
  5384  1B71                     _Switch_Main:	
  5385                           
  5386                           ;Switch_B1.c: 75: setSw_Main(1);
  5387                           
  5388                           ;incstack = 0
  5389                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5390  1B71  3001               	movlw	1
  5391  1B72  3181  21F5  319B   	fcall	_setSw_Main
  5392                           
  5393                           ;Switch_B1.c: 79: setSw_Main(2);
  5394  1B75  3002               	movlw	2
  5395  1B76  3181  21F5  319B   	fcall	_setSw_Main
  5396                           
  5397                           ;Switch_B1.c: 87: TouchPower();
  5398  1B79  319D  25C8         	fcall	_TouchPower
  5399  1B7B  0008               	return
  5400  1B7C                     __end_of_Switch_Main:	
  5401                           
  5402                           	psect	text13
  5403  01F5                     __ptext13:	
  5404 ;; *************** function _setSw_Main *****************
  5405 ;; Defined at:
  5406 ;;		line 121 in file "../src/Switch_B1.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;  sw              1    wreg     unsigned char 
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  sw              1   77[BANK0 ] unsigned char 
  5411 ;; Return value:  Size  Location     Type
  5412 ;;		None               void
  5413 ;; Registers used:
  5414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5422 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;Total ram usage:        3 bytes
  5425 ;; Hardware stack levels used:    1
  5426 ;; Hardware stack levels required when called:    9
  5427 ;; This function calls:
  5428 ;;		_SwPointSelect
  5429 ;;		_getMain_All_Error_Status
  5430 ;;		_getSw_KeyStatus
  5431 ;;		_setBuz
  5432 ;;		_setDimmerLights_AdjOn
  5433 ;;		_setDimmerLights_SwOff
  5434 ;;		_setDimmerLights_SwOn
  5435 ;;		_setRF_Learn
  5436 ;; This function is called by:
  5437 ;;		_Switch_Main
  5438 ;; This function uses a non-reentrant model
  5439 ;;
  5440                           
  5441                           
  5442                           ;psect for function _setSw_Main
  5443  01F5                     _setSw_Main:	
  5444                           
  5445                           ;incstack = 0
  5446                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5447                           ;setSw_Main@sw stored from wreg
  5448  01F5  0020               	movlb	0	; select bank0
  5449  01F6  00ED               	movwf	setSw_Main@sw
  5450                           
  5451                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5452  01F7  086D               	movf	setSw_Main@sw,w
  5453  01F8  319D  2561  3181   	fcall	_SwPointSelect
  5454                           
  5455                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5456  01FB  0877               	movf	_Sw,w
  5457  01FC  0086               	movwf	6
  5458  01FD  3001               	movlw	1	; select bank2/3
  5459  01FE  0087               	movwf	7
  5460  01FF  1C01               	btfss	1,0
  5461  0200  2B5F               	goto	l2665
  5462                           
  5463                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5464  0201  3000               	movlw	0
  5465  0202  3191  2168  3181   	fcall	_getMain_All_Error_Status
  5466  0205  3800               	iorlw	0
  5467  0206  1D03               	skipz
  5468  0207  2A23               	goto	l10297
  5469                           
  5470                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5471  0208  0A77               	incf	_Sw,w
  5472  0209  0086               	movwf	6
  5473  020A  3001               	movlw	1	; select bank2/3
  5474  020B  0087               	movwf	7
  5475  020C  1081               	bcf	1,1
  5476                           
  5477                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5478  020D  0020               	movlb	0	; select bank0
  5479  020E  086D               	movf	setSw_Main@sw,w
  5480  020F  319E  26D1  3181   	fcall	_getSw_KeyStatus
  5481  0212  3A01               	xorlw	1
  5482  0213  3000               	movlw	0
  5483  0214  1903               	skipnz
  5484  0215  3001               	movlw	1
  5485  0216  0020               	movlb	0	; select bank0
  5486  0217  00EB               	movwf	??_setSw_Main
  5487  0218  0877               	movf	_Sw,w
  5488  0219  0086               	movwf	6
  5489  021A  3001               	movlw	1	; select bank2/3
  5490  021B  0087               	movwf	7
  5491  021C  0DEB               	rlf	??_setSw_Main,f
  5492  021D  0801               	movf	1,w
  5493  021E  066B               	xorwf	??_setSw_Main,w
  5494  021F  39FD               	andlw	-3
  5495  0220  066B               	xorwf	??_setSw_Main,w
  5496  0221  0081               	movwf	1
  5497                           
  5498                           ;Switch_B1.c: 128: } else {
  5499  0222  2A38               	goto	l2667
  5500  0223                     l10297:	
  5501                           
  5502                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5503  0223  0A77               	incf	_Sw,w
  5504  0224  0086               	movwf	6
  5505  0225  3001               	movlw	1	; select bank2/3
  5506  0226  0087               	movwf	7
  5507  0227  1881               	btfsc	1,1
  5508  0228  2A38               	goto	l2667
  5509                           
  5510                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5511  0229  0A77               	incf	_Sw,w
  5512  022A  0086               	movwf	6
  5513  022B  3001               	movlw	1	; select bank2/3
  5514  022C  0087               	movwf	7
  5515  022D  1481               	bsf	1,1
  5516                           
  5517                           ;Switch_B1.c: 131: Sw->Touch = 0;
  5518  022E  0877               	movf	_Sw,w
  5519  022F  0086               	movwf	6
  5520  0230  3001               	movlw	1	; select bank2/3
  5521  0231  0087               	movwf	7
  5522  0232  1081               	bcf	1,1
  5523                           
  5524                           ;Switch_B1.c: 132: Sw->Debounce = 1;
  5525  0233  0877               	movf	_Sw,w
  5526  0234  0086               	movwf	6
  5527  0235  3001               	movlw	1	; select bank2/3
  5528  0236  0087               	movwf	7
  5529  0237  1501               	bsf	1,2
  5530  0238                     l2667:	
  5531                           
  5532                           ;Switch_B1.c: 133: }
  5533                           ;Switch_B1.c: 134: }
  5534                           ;Switch_B1.c: 136: if (Sw->Touch == 1) {
  5535  0238  0877               	movf	_Sw,w
  5536  0239  0086               	movwf	6
  5537  023A  3001               	movlw	1	; select bank2/3
  5538  023B  0087               	movwf	7
  5539  023C  1C81               	btfss	1,1
  5540  023D  2B08               	goto	l10347
  5541                           
  5542                           ;Switch_B1.c: 137: if (Sw->Debounce == 0) {
  5543  023E  0877               	movf	_Sw,w
  5544  023F  0086               	movwf	6
  5545  0240  3001               	movlw	1	; select bank2/3
  5546  0241  0087               	movwf	7
  5547  0242  1901               	btfsc	1,2
  5548  0243  2A66               	goto	l10313
  5549                           
  5550                           ;Switch_B1.c: 138: Sw->DebounceTime++;
  5551  0244  3001               	movlw	1
  5552  0245  0020               	movlb	0	; select bank0
  5553  0246  00EB               	movwf	??_setSw_Main
  5554  0247  0877               	movf	_Sw,w
  5555  0248  3E02               	addlw	2
  5556  0249  0086               	movwf	6
  5557  024A  3001               	movlw	1	; select bank2/3
  5558  024B  0087               	movwf	7
  5559  024C  086B               	movf	??_setSw_Main,w
  5560  024D  0781               	addwf	1,f
  5561                           
  5562                           ;Switch_B1.c: 139: if (Sw->DebounceTime >= 5) {
  5563  024E  0877               	movf	_Sw,w
  5564  024F  3E02               	addlw	2
  5565  0250  0086               	movwf	6
  5566  0251  3001               	movlw	1	; select bank2/3
  5567  0252  0087               	movwf	7
  5568  0253  3005               	movlw	5
  5569  0254  0201               	subwf	1,w
  5570  0255  1C03               	skipc
  5571  0256  0008               	return
  5572                           
  5573                           ;Switch_B1.c: 140: Sw->DebounceTime = 0;
  5574  0257  0877               	movf	_Sw,w
  5575  0258  3E02               	addlw	2
  5576  0259  0086               	movwf	6
  5577  025A  3001               	movlw	1	; select bank2/3
  5578  025B  0087               	movwf	7
  5579  025C  0181               	clrf	1
  5580                           
  5581                           ;Switch_B1.c: 141: Sw->Debounce = 1;
  5582  025D  0877               	movf	_Sw,w
  5583  025E  0086               	movwf	6
  5584  025F  3001               	movlw	1	; select bank2/3
  5585  0260  0087               	movwf	7
  5586  0261  1501               	bsf	1,2
  5587                           
  5588                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5589  0262  086D               	movf	setSw_Main@sw,w
  5590  0263  3188  2086         	fcall	_setDimmerLights_SwOn
  5591                           
  5592                           ;Switch_B1.c: 147: }
  5593                           ;Switch_B1.c: 148: } else {
  5594  0265  0008               	return
  5595  0266                     l10313:	
  5596                           
  5597                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5598  0266  0877               	movf	_Sw,w
  5599  0267  0086               	movwf	6
  5600  0268  3001               	movlw	1	; select bank2/3
  5601  0269  0087               	movwf	7
  5602  026A  1981               	btfsc	1,3
  5603  026B  2A98               	goto	l10323
  5604                           
  5605                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5606  026C  0877               	movf	_Sw,w
  5607  026D  3E03               	addlw	3
  5608  026E  0086               	movwf	6
  5609  026F  3001               	movlw	1	; select bank2/3
  5610  0270  0087               	movwf	7
  5611  0271  3001               	movlw	1
  5612  0272  0781               	addwf	1,f
  5613  0273  3141               	addfsr 1,1
  5614  0274  1803               	skipnc
  5615  0275  0A81               	incf	1,f
  5616                           
  5617                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= 150) {
  5618  0276  0877               	movf	_Sw,w
  5619  0277  3E03               	addlw	3
  5620  0278  0086               	movwf	6
  5621  0279  3001               	movlw	1	; select bank2/3
  5622  027A  0087               	movwf	7
  5623  027B  3F40               	moviw [0]fsr1
  5624  027C  0020               	movlb	0	; select bank0
  5625  027D  00EB               	movwf	??_setSw_Main
  5626  027E  3F41               	moviw [1]fsr1
  5627  027F  00EC               	movwf	??_setSw_Main+1
  5628  0280  3000               	movlw	0
  5629  0281  026C               	subwf	??_setSw_Main+1,w
  5630  0282  3096               	movlw	150
  5631  0283  1903               	skipnz
  5632  0284  026B               	subwf	??_setSw_Main,w
  5633  0285  1C03               	skipc
  5634  0286  0008               	return
  5635                           
  5636                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  5637  0287  0877               	movf	_Sw,w
  5638  0288  3E03               	addlw	3
  5639  0289  0086               	movwf	6
  5640  028A  3001               	movlw	1	; select bank2/3
  5641  028B  0087               	movwf	7
  5642  028C  3000               	movlw	0
  5643  028D  3FC0               	movwi [0]fsr1
  5644  028E  3FC1               	movwi [1]fsr1
  5645                           
  5646                           ;Switch_B1.c: 155: Sw->Hold1 = 1;
  5647  028F  0877               	movf	_Sw,w
  5648  0290  0086               	movwf	6
  5649  0291  3001               	movlw	1	; select bank2/3
  5650  0292  0087               	movwf	7
  5651  0293  1581               	bsf	1,3
  5652                           
  5653                           ;Switch_B1.c: 156: setDimmerLights_AdjOn(sw);
  5654  0294  086D               	movf	setSw_Main@sw,w
  5655  0295  3192  2205         	fcall	_setDimmerLights_AdjOn
  5656                           
  5657                           ;Switch_B1.c: 159: }
  5658                           ;Switch_B1.c: 160: } else {
  5659  0297  0008               	return
  5660  0298                     l10323:	
  5661                           
  5662                           ;Switch_B1.c: 161: if (Sw->Hold2 == 0) {
  5663  0298  0877               	movf	_Sw,w
  5664  0299  0086               	movwf	6
  5665  029A  3001               	movlw	1	; select bank2/3
  5666  029B  0087               	movwf	7
  5667  029C  1A01               	btfsc	1,4
  5668  029D  2AD6               	goto	l10337
  5669                           
  5670                           ;Switch_B1.c: 162: Sw->Hold2Time++;
  5671  029E  0877               	movf	_Sw,w
  5672  029F  3E05               	addlw	5
  5673  02A0  0086               	movwf	6
  5674  02A1  3001               	movlw	1	; select bank2/3
  5675  02A2  0087               	movwf	7
  5676  02A3  3001               	movlw	1
  5677  02A4  0781               	addwf	1,f
  5678  02A5  3141               	addfsr 1,1
  5679  02A6  1803               	skipnc
  5680  02A7  0A81               	incf	1,f
  5681                           
  5682                           ;Switch_B1.c: 163: if (Sw->Hold2Time >= 150) {
  5683  02A8  0877               	movf	_Sw,w
  5684  02A9  3E05               	addlw	5
  5685  02AA  0086               	movwf	6
  5686  02AB  3001               	movlw	1	; select bank2/3
  5687  02AC  0087               	movwf	7
  5688  02AD  3F40               	moviw [0]fsr1
  5689  02AE  0020               	movlb	0	; select bank0
  5690  02AF  00EB               	movwf	??_setSw_Main
  5691  02B0  3F41               	moviw [1]fsr1
  5692  02B1  00EC               	movwf	??_setSw_Main+1
  5693  02B2  3000               	movlw	0
  5694  02B3  026C               	subwf	??_setSw_Main+1,w
  5695  02B4  3096               	movlw	150
  5696  02B5  1903               	skipnz
  5697  02B6  026B               	subwf	??_setSw_Main,w
  5698  02B7  1C03               	skipc
  5699  02B8  0008               	return
  5700                           
  5701                           ;Switch_B1.c: 164: Sw->Hold2Time = 0;
  5702  02B9  0877               	movf	_Sw,w
  5703  02BA  3E05               	addlw	5
  5704  02BB  0086               	movwf	6
  5705  02BC  3001               	movlw	1	; select bank2/3
  5706  02BD  0087               	movwf	7
  5707  02BE  3000               	movlw	0
  5708  02BF  3FC0               	movwi [0]fsr1
  5709  02C0  3FC1               	movwi [1]fsr1
  5710                           
  5711                           ;Switch_B1.c: 165: Sw->Hold2 = 1;
  5712  02C1  0877               	movf	_Sw,w
  5713  02C2  0086               	movwf	6
  5714  02C3  3001               	movlw	1	; select bank2/3
  5715  02C4  0087               	movwf	7
  5716  02C5  1601               	bsf	1,4
  5717                           
  5718                           ;Switch_B1.c: 168: setRF_Learn(1);
  5719  02C6  3001               	movlw	1
  5720  02C7  319D  2575  3181   	fcall	_setRF_Learn
  5721                           
  5722                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5723  02CA  0021               	movlb	1	; select bank1
  5724  02CB  1EA0               	btfss	_myMain^(0+128),5
  5725  02CC  0008               	return
  5726                           
  5727                           ;Switch_B1.c: 171: setBuz(2, 100);
  5728  02CD  3064               	movlw	100
  5729  02CE  0020               	movlb	0	; select bank0
  5730  02CF  00A9               	movwf	setBuz@time
  5731  02D0  3000               	movlw	0
  5732  02D1  00AA               	movwf	setBuz@time+1
  5733  02D2  3002               	movlw	2
  5734  02D3  3197  274E         	fcall	_setBuz
  5735                           
  5736                           ;Switch_B1.c: 172: }
  5737                           ;Switch_B1.c: 174: }
  5738                           ;Switch_B1.c: 175: } else {
  5739  02D5  0008               	return
  5740  02D6                     l10337:	
  5741                           
  5742                           ;Switch_B1.c: 176: if (Sw->Hold3 == 0) {
  5743  02D6  0877               	movf	_Sw,w
  5744  02D7  0086               	movwf	6
  5745  02D8  3001               	movlw	1	; select bank2/3
  5746  02D9  0087               	movwf	7
  5747  02DA  1A81               	btfsc	1,5
  5748  02DB  0008               	return
  5749                           
  5750                           ;Switch_B1.c: 177: Sw->Hold3Time++;
  5751  02DC  0877               	movf	_Sw,w
  5752  02DD  3E07               	addlw	7
  5753  02DE  0086               	movwf	6
  5754  02DF  3001               	movlw	1	; select bank2/3
  5755  02E0  0087               	movwf	7
  5756  02E1  3001               	movlw	1
  5757  02E2  0781               	addwf	1,f
  5758  02E3  3141               	addfsr 1,1
  5759  02E4  1803               	skipnc
  5760  02E5  0A81               	incf	1,f
  5761                           
  5762                           ;Switch_B1.c: 178: if (Sw->Hold3Time >= 300) {
  5763  02E6  0877               	movf	_Sw,w
  5764  02E7  3E07               	addlw	7
  5765  02E8  0086               	movwf	6
  5766  02E9  3001               	movlw	1	; select bank2/3
  5767  02EA  0087               	movwf	7
  5768  02EB  3F40               	moviw [0]fsr1
  5769  02EC  0020               	movlb	0	; select bank0
  5770  02ED  00EB               	movwf	??_setSw_Main
  5771  02EE  3F41               	moviw [1]fsr1
  5772  02EF  00EC               	movwf	??_setSw_Main+1
  5773  02F0  3001               	movlw	1
  5774  02F1  026C               	subwf	??_setSw_Main+1,w
  5775  02F2  302C               	movlw	44
  5776  02F3  1903               	skipnz
  5777  02F4  026B               	subwf	??_setSw_Main,w
  5778  02F5  1C03               	skipc
  5779  02F6  0008               	return
  5780                           
  5781                           ;Switch_B1.c: 179: Sw->Hold3Time = 0;
  5782  02F7  0877               	movf	_Sw,w
  5783  02F8  3E07               	addlw	7
  5784  02F9  0086               	movwf	6
  5785  02FA  3001               	movlw	1	; select bank2/3
  5786  02FB  0087               	movwf	7
  5787  02FC  3000               	movlw	0
  5788  02FD  3FC0               	movwi [0]fsr1
  5789  02FE  3FC1               	movwi [1]fsr1
  5790                           
  5791                           ;Switch_B1.c: 180: Sw->Hold3 = 1;
  5792  02FF  0877               	movf	_Sw,w
  5793  0300  0086               	movwf	6
  5794  0301  3001               	movlw	1	; select bank2/3
  5795  0302  0087               	movwf	7
  5796  0303  1681               	bsf	1,5
  5797                           
  5798                           ;Switch_B1.c: 183: setRF_Learn(0);
  5799  0304  3000               	movlw	0
  5800  0305  319D  2575         	fcall	_setRF_Learn
  5801                           
  5802                           ;Switch_B1.c: 186: }
  5803                           ;Switch_B1.c: 187: }
  5804                           ;Switch_B1.c: 188: }
  5805                           ;Switch_B1.c: 189: }
  5806                           ;Switch_B1.c: 190: }
  5807                           ;Switch_B1.c: 191: } else {
  5808  0307  0008               	return
  5809  0308                     l10347:	
  5810                           
  5811                           ;Switch_B1.c: 192: if (Sw->Debounce == 1) {
  5812  0308  0877               	movf	_Sw,w
  5813  0309  0086               	movwf	6
  5814  030A  3001               	movlw	1	; select bank2/3
  5815  030B  0087               	movwf	7
  5816  030C  1D01               	btfss	1,2
  5817  030D  0008               	return
  5818                           
  5819                           ;Switch_B1.c: 193: Sw->DebounceTime++;
  5820  030E  3001               	movlw	1
  5821  030F  0020               	movlb	0	; select bank0
  5822  0310  00EB               	movwf	??_setSw_Main
  5823  0311  0877               	movf	_Sw,w
  5824  0312  3E02               	addlw	2
  5825  0313  0086               	movwf	6
  5826  0314  3001               	movlw	1	; select bank2/3
  5827  0315  0087               	movwf	7
  5828  0316  086B               	movf	??_setSw_Main,w
  5829  0317  0781               	addwf	1,f
  5830                           
  5831                           ;Switch_B1.c: 194: if (Sw->DebounceTime >= 5) {
  5832  0318  0877               	movf	_Sw,w
  5833  0319  3E02               	addlw	2
  5834  031A  0086               	movwf	6
  5835  031B  3001               	movlw	1	; select bank2/3
  5836  031C  0087               	movwf	7
  5837  031D  3005               	movlw	5
  5838  031E  0201               	subwf	1,w
  5839  031F  1C03               	skipc
  5840  0320  0008               	return
  5841                           
  5842                           ;Switch_B1.c: 195: Sw->DebounceTime = 0;
  5843  0321  0877               	movf	_Sw,w
  5844  0322  3E02               	addlw	2
  5845  0323  0086               	movwf	6
  5846  0324  3001               	movlw	1	; select bank2/3
  5847  0325  0087               	movwf	7
  5848  0326  0181               	clrf	1
  5849                           
  5850                           ;Switch_B1.c: 196: Sw->Debounce = 0;
  5851  0327  0877               	movf	_Sw,w
  5852  0328  0086               	movwf	6
  5853  0329  3001               	movlw	1	; select bank2/3
  5854  032A  0087               	movwf	7
  5855  032B  1101               	bcf	1,2
  5856                           
  5857                           ;Switch_B1.c: 197: Sw->Hold1Time = 0;
  5858  032C  0877               	movf	_Sw,w
  5859  032D  3E03               	addlw	3
  5860  032E  0086               	movwf	6
  5861  032F  3001               	movlw	1	; select bank2/3
  5862  0330  0087               	movwf	7
  5863  0331  3000               	movlw	0
  5864  0332  3FC0               	movwi [0]fsr1
  5865  0333  3FC1               	movwi [1]fsr1
  5866                           
  5867                           ;Switch_B1.c: 198: Sw->Hold1 = 0;
  5868  0334  0877               	movf	_Sw,w
  5869  0335  0086               	movwf	6
  5870  0336  3001               	movlw	1	; select bank2/3
  5871  0337  0087               	movwf	7
  5872  0338  1181               	bcf	1,3
  5873                           
  5874                           ;Switch_B1.c: 199: Sw->Hold2Time = 0;
  5875  0339  0877               	movf	_Sw,w
  5876  033A  3E05               	addlw	5
  5877  033B  0086               	movwf	6
  5878  033C  3001               	movlw	1	; select bank2/3
  5879  033D  0087               	movwf	7
  5880  033E  3000               	movlw	0
  5881  033F  3FC0               	movwi [0]fsr1
  5882  0340  3FC1               	movwi [1]fsr1
  5883                           
  5884                           ;Switch_B1.c: 200: Sw->Hold2 = 0;
  5885  0341  0877               	movf	_Sw,w
  5886  0342  0086               	movwf	6
  5887  0343  3001               	movlw	1	; select bank2/3
  5888  0344  0087               	movwf	7
  5889  0345  1201               	bcf	1,4
  5890                           
  5891                           ;Switch_B1.c: 201: Sw->Hold3Time = 0;
  5892  0346  0877               	movf	_Sw,w
  5893  0347  3E07               	addlw	7
  5894  0348  0086               	movwf	6
  5895  0349  3001               	movlw	1	; select bank2/3
  5896  034A  0087               	movwf	7
  5897  034B  3000               	movlw	0
  5898  034C  3FC0               	movwi [0]fsr1
  5899  034D  3FC1               	movwi [1]fsr1
  5900                           
  5901                           ;Switch_B1.c: 202: Sw->Hold3 = 0;
  5902  034E  0877               	movf	_Sw,w
  5903  034F  0086               	movwf	6
  5904  0350  3001               	movlw	1	; select bank2/3
  5905  0351  0087               	movwf	7
  5906  0352  1281               	bcf	1,5
  5907                           
  5908                           ;Switch_B1.c: 204: if (SwDetect.Error == 0) {
  5909  0353  0021               	movlb	1	; select bank1
  5910  0354  1851               	btfsc	_SwDetect^(0+128),0
  5911  0355  2B5B               	goto	l10373
  5912                           
  5913                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5914  0356  0020               	movlb	0	; select bank0
  5915  0357  086D               	movf	setSw_Main@sw,w
  5916  0358  3194  24BC  3181   	fcall	_setDimmerLights_SwOff
  5917  035B                     l10373:	
  5918                           
  5919                           ;Switch_B1.c: 206: }
  5920                           ;Switch_B1.c: 209: setRF_Learn(0);
  5921  035B  3000               	movlw	0
  5922  035C  319D  2575         	fcall	_setRF_Learn
  5923                           
  5924                           ;Switch_B1.c: 211: }
  5925                           ;Switch_B1.c: 212: }
  5926                           ;Switch_B1.c: 213: }
  5927                           ;Switch_B1.c: 214: } else {
  5928  035E  0008               	return
  5929  035F                     l2665:	
  5930                           
  5931                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5932  035F  0021               	movlb	1	; select bank1
  5933  0360  1C20               	btfss	_myMain^(0+128),0
  5934  0361  0008               	return
  5935                           
  5936                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5937  0362  0877               	movf	_Sw,w
  5938  0363  0086               	movwf	6
  5939  0364  3001               	movlw	1	; select bank2/3
  5940  0365  0087               	movwf	7
  5941  0366  1401               	bsf	1,0
  5942  0367  0008               	return
  5943  0368                     __end_of_setSw_Main:	
  5944                           
  5945                           	psect	text14
  5946  1D75                     __ptext14:	
  5947 ;; *************** function _setRF_Learn *****************
  5948 ;; Defined at:
  5949 ;;		line 23 in file "../src/RF_Control_B1.c"
  5950 ;; Parameters:    Size  Location     Type
  5951 ;;  command         1    wreg     unsigned char 
  5952 ;; Auto vars:     Size  Location     Type
  5953 ;;  command         1    1[BANK0 ] unsigned char 
  5954 ;; Return value:  Size  Location     Type
  5955 ;;		None               void
  5956 ;; Registers used:
  5957 ;;		wreg, status,2, status,0
  5958 ;; Tracked objects:
  5959 ;;		On entry : 0/0
  5960 ;;		On exit  : 0/0
  5961 ;;		Unchanged: 0/0
  5962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5967 ;;Total ram usage:        2 bytes
  5968 ;; Hardware stack levels used:    1
  5969 ;; Hardware stack levels required when called:    5
  5970 ;; This function calls:
  5971 ;;		Nothing
  5972 ;; This function is called by:
  5973 ;;		_setSw_Main
  5974 ;; This function uses a non-reentrant model
  5975 ;;
  5976                           
  5977                           
  5978                           ;psect for function _setRF_Learn
  5979  1D75                     _setRF_Learn:	
  5980                           
  5981                           ;incstack = 0
  5982                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5983                           ;setRF_Learn@command stored from wreg
  5984  1D75  0020               	movlb	0	; select bank0
  5985  1D76  00A1               	movwf	setRF_Learn@command
  5986                           
  5987                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5988  1D77  0821               	movf	setRF_Learn@command,w
  5989  1D78  3A01               	xorlw	1
  5990  1D79  3000               	movlw	0
  5991  1D7A  1903               	skipnz
  5992  1D7B  3001               	movlw	1
  5993  1D7C  00A0               	movwf	??_setRF_Learn
  5994  1D7D  0EA0               	swapf	??_setRF_Learn,f
  5995  1D7E  0DA0               	rlf	??_setRF_Learn,f
  5996  1D7F  0DA0               	rlf	??_setRF_Learn,f
  5997  1D80  0021               	movlb	1	; select bank1
  5998  1D81  083A               	movf	_RF1^(0+128),w
  5999  1D82  0020               	movlb	0	; select bank0
  6000  1D83  0620               	xorwf	??_setRF_Learn,w
  6001  1D84  39BF               	andlw	-65
  6002  1D85  0620               	xorwf	??_setRF_Learn,w
  6003  1D86  0021               	movlb	1	; select bank1
  6004  1D87  00BA               	movwf	_RF1^(0+128)
  6005  1D88  0008               	return
  6006  1D89                     __end_of_setRF_Learn:	
  6007                           
  6008                           	psect	text15
  6009  1205                     __ptext15:	
  6010 ;; *************** function _setDimmerLights_AdjOn *****************
  6011 ;; Defined at:
  6012 ;;		line 477 in file "../src/Dimmer_B1.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  sw              1    wreg     unsigned char 
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;  sw              1    7[BANK0 ] unsigned char 
  6017 ;; Return value:  Size  Location     Type
  6018 ;;		None               void
  6019 ;; Registers used:
  6020 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;Total ram usage:        1 bytes
  6031 ;; Hardware stack levels used:    1
  6032 ;; Hardware stack levels required when called:    7
  6033 ;; This function calls:
  6034 ;;		_DimmerLightsPointSelect
  6035 ;;		_getDimmerLights_Allow_Condition
  6036 ;; This function is called by:
  6037 ;;		_setSw_Main
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           
  6042                           ;psect for function _setDimmerLights_AdjOn
  6043  1205                     _setDimmerLights_AdjOn:	
  6044                           
  6045                           ;incstack = 0
  6046                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6047                           ;setDimmerLights_AdjOn@sw stored from wreg
  6048  1205  0020               	movlb	0	; select bank0
  6049  1206  00A7               	movwf	setDimmerLights_AdjOn@sw
  6050                           
  6051                           ;Dimmer_B1.c: 478: DimmerLightsPointSelect(sw);
  6052  1207  0827               	movf	setDimmerLights_AdjOn@sw,w
  6053  1208  319C  24B2  3192   	fcall	_DimmerLightsPointSelect
  6054                           
  6055                           ;Dimmer_B1.c: 488: if (DimmerLights->Trigger == 0 && getDimmerLights_Allow_Condition(sw)
      +                           == 0) {
  6056  120B  0020               	movlb	0	; select bank0
  6057  120C  086F               	movf	_DimmerLights,w
  6058  120D  3E0A               	addlw	10
  6059  120E  0086               	movwf	6
  6060  120F  3001               	movlw	1	; select bank2/3
  6061  1210  0087               	movwf	7
  6062  1211  1881               	btfsc	1,1
  6063  1212  0008               	return
  6064  1213  0827               	movf	setDimmerLights_AdjOn@sw,w
  6065  1214  3192  2272  3192   	fcall	_getDimmerLights_Allow_Condition
  6066  1217  3800               	iorlw	0
  6067  1218  1D03               	skipz
  6068  1219  0008               	return
  6069                           
  6070                           ;Dimmer_B1.c: 489: if (DimmerLights->SwFlag == 1) {
  6071  121A  0020               	movlb	0	; select bank0
  6072  121B  086F               	movf	_DimmerLights,w
  6073  121C  3E0B               	addlw	11
  6074  121D  0086               	movwf	6
  6075  121E  3001               	movlw	1	; select bank2/3
  6076  121F  0087               	movwf	7
  6077  1220  1C81               	btfss	1,1
  6078  1221  0008               	return
  6079                           
  6080                           ;Dimmer_B1.c: 490: DimmerLights->SwAdj = 1;
  6081  1222  086F               	movf	_DimmerLights,w
  6082  1223  3E0B               	addlw	11
  6083  1224  0086               	movwf	6
  6084  1225  3001               	movlw	1	; select bank2/3
  6085  1226  0087               	movwf	7
  6086  1227  1501               	bsf	1,2
  6087                           
  6088                           ;Dimmer_B1.c: 491: DimmerLights->Status = 1;
  6089  1228  086F               	movf	_DimmerLights,w
  6090  1229  3E02               	addlw	2
  6091  122A  0086               	movwf	6
  6092  122B  3001               	movlw	1	; select bank2/3
  6093  122C  0087               	movwf	7
  6094  122D  1481               	bsf	1,1
  6095                           
  6096                           ;Dimmer_B1.c: 493: DimmerLights->TriggerAdj = 1;
  6097  122E  086F               	movf	_DimmerLights,w
  6098  122F  3E0A               	addlw	10
  6099  1230  0086               	movwf	6
  6100  1231  3001               	movlw	1	; select bank2/3
  6101  1232  0087               	movwf	7
  6102  1233  1581               	bsf	1,3
  6103                           
  6104                           ;Dimmer_B1.c: 494: DimmerLights->SwitchAdj = 1;
  6105  1234  086F               	movf	_DimmerLights,w
  6106  1235  3E0A               	addlw	10
  6107  1236  0086               	movwf	6
  6108  1237  3001               	movlw	1	; select bank2/3
  6109  1238  0087               	movwf	7
  6110  1239  1501               	bsf	1,2
  6111  123A  0008               	return
  6112  123B                     __end_of_setDimmerLights_AdjOn:	
  6113                           
  6114                           	psect	text16
  6115  1ED1                     __ptext16:	
  6116 ;; *************** function _getSw_KeyStatus *****************
  6117 ;; Defined at:
  6118 ;;		line 222 in file "../src/Switch_B1.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;  sw              1    wreg     unsigned char 
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;  sw              1    4[BANK0 ] unsigned char 
  6123 ;;  status          1    3[BANK0 ] unsigned char 
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  1    wreg      unsigned char 
  6126 ;; Registers used:
  6127 ;;		wreg, status,2
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;Total ram usage:        5 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    5
  6140 ;; This function calls:
  6141 ;;		Nothing
  6142 ;; This function is called by:
  6143 ;;		_setSw_Main
  6144 ;; This function uses a non-reentrant model
  6145 ;;
  6146                           
  6147                           
  6148                           ;psect for function _getSw_KeyStatus
  6149  1ED1                     _getSw_KeyStatus:	
  6150                           
  6151                           ;incstack = 0
  6152                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6153                           ;getSw_KeyStatus@sw stored from wreg
  6154  1ED1  0020               	movlb	0	; select bank0
  6155  1ED2  00A4               	movwf	getSw_KeyStatus@sw
  6156                           
  6157                           ;Switch_B1.c: 223: char status = 0;
  6158  1ED3  01A3               	clrf	getSw_KeyStatus@status
  6159                           
  6160                           ;Switch_B1.c: 235: if (sw == 1) {
  6161  1ED4  0824               	movf	getSw_KeyStatus@sw,w
  6162  1ED5  3A01               	xorlw	1
  6163  1ED6  1D03               	skipz
  6164  1ED7  2EE0               	goto	l9809
  6165                           
  6166                           ;Switch_B1.c: 236: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6167  1ED8  01A1               	clrf	_getSw_KeyStatus$6247
  6168  1ED9  0AA1               	incf	_getSw_KeyStatus$6247,f
  6169  1EDA  1F0C               	btfss	12,6	;volatile
  6170  1EDB  1A0C               	btfsc	12,4	;volatile
  6171  1EDC  2EDE               	goto	l9807
  6172  1EDD  01A1               	clrf	_getSw_KeyStatus$6247
  6173  1EDE                     l9807:	
  6174  1EDE  0821               	movf	_getSw_KeyStatus$6247,w
  6175  1EDF  2EEB               	goto	L2
  6176  1EE0                     l9809:	
  6177                           ;Switch_B1.c: 237: } else if (sw == 2) {
  6178                           
  6179  1EE0  0824               	movf	getSw_KeyStatus@sw,w
  6180  1EE1  3A02               	xorlw	2
  6181  1EE2  1D03               	skipz
  6182  1EE3  2EEE               	goto	l9819
  6183                           
  6184                           ;Switch_B1.c: 238: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6185  1EE4  01A2               	clrf	_getSw_KeyStatus$6248
  6186  1EE5  0AA2               	incf	_getSw_KeyStatus$6248,f
  6187  1EE6  1C0C               	btfss	12,0	;volatile
  6188  1EE7  188D               	btfsc	13,1	;volatile
  6189  1EE8  2EEA               	goto	l9817
  6190  1EE9  01A2               	clrf	_getSw_KeyStatus$6248
  6191  1EEA                     l9817:	
  6192  1EEA  0822               	movf	_getSw_KeyStatus$6248,w
  6193  1EEB                     L2:	
  6194  1EEB  00A0               	movwf	??_getSw_KeyStatus
  6195  1EEC  0820               	movf	??_getSw_KeyStatus,w
  6196  1EED  00A3               	movwf	getSw_KeyStatus@status
  6197  1EEE                     l9819:	
  6198                           
  6199                           ;Switch_B1.c: 239: }
  6200                           ;Switch_B1.c: 246: return status;
  6201  1EEE  0823               	movf	getSw_KeyStatus@status,w
  6202  1EEF  0008               	return
  6203  1EF0                     __end_of_getSw_KeyStatus:	
  6204                           
  6205                           	psect	text17
  6206  1D61                     __ptext17:	
  6207 ;; *************** function _SwPointSelect *****************
  6208 ;; Defined at:
  6209 ;;		line 25 in file "../src/Switch_B1.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;  sw              1    wreg     unsigned char 
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;  sw              1    1[BANK0 ] unsigned char 
  6214 ;; Return value:  Size  Location     Type
  6215 ;;		None               void
  6216 ;; Registers used:
  6217 ;;		wreg
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6227 ;;Total ram usage:        2 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; Hardware stack levels required when called:    5
  6230 ;; This function calls:
  6231 ;;		Nothing
  6232 ;; This function is called by:
  6233 ;;		_setSw_Main
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           
  6238                           ;psect for function _SwPointSelect
  6239  1D61                     _SwPointSelect:	
  6240                           
  6241                           ;incstack = 0
  6242                           ; Regs used in _SwPointSelect: [wreg]
  6243                           ;SwPointSelect@sw stored from wreg
  6244  1D61  0020               	movlb	0	; select bank0
  6245  1D62  00A1               	movwf	SwPointSelect@sw
  6246                           
  6247                           ;Switch_B1.c: 28: if (sw == 1) {
  6248  1D63  0821               	movf	SwPointSelect@sw,w
  6249  1D64  3A01               	xorlw	1
  6250  1D65  1D03               	skipz
  6251  1D66  2D6C               	goto	l9793
  6252                           
  6253                           ;Switch_B1.c: 29: Sw = &Sw1;
  6254  1D67  30CF               	movlw	_Sw1& (0+255)
  6255  1D68  00A0               	movwf	??_SwPointSelect
  6256  1D69  0820               	movf	??_SwPointSelect,w
  6257  1D6A  00F7               	movwf	_Sw
  6258                           
  6259                           ;Switch_B1.c: 30: }
  6260  1D6B  0008               	return
  6261  1D6C                     l9793:	
  6262                           
  6263                           ;Switch_B1.c: 33: else if (sw == 2) {
  6264  1D6C  0821               	movf	SwPointSelect@sw,w
  6265  1D6D  3A02               	xorlw	2
  6266  1D6E  1D03               	skipz
  6267  1D6F  0008               	return
  6268                           
  6269                           ;Switch_B1.c: 34: Sw = &Sw2;
  6270  1D70  30D8               	movlw	_Sw2& (0+255)
  6271  1D71  00A0               	movwf	??_SwPointSelect
  6272  1D72  0820               	movf	??_SwPointSelect,w
  6273  1D73  00F7               	movwf	_Sw
  6274  1D74  0008               	return
  6275  1D75                     __end_of_SwPointSelect:	
  6276                           
  6277                           	psect	text18
  6278  1BDC                     __ptext18:	
  6279 ;; *************** function _Switch_Initialization *****************
  6280 ;; Defined at:
  6281 ;;		line 46 in file "../src/Switch_B1.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;		None
  6284 ;; Auto vars:     Size  Location     Type
  6285 ;;		None
  6286 ;; Return value:  Size  Location     Type
  6287 ;;		None               void
  6288 ;; Registers used:
  6289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6299 ;;Total ram usage:        0 bytes
  6300 ;; Hardware stack levels used:    1
  6301 ;; Hardware stack levels required when called:    8
  6302 ;; This function calls:
  6303 ;;		_TouchPower
  6304 ;;		_setSw_Initialization
  6305 ;; This function is called by:
  6306 ;;		_main
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310                           
  6311                           ;psect for function _Switch_Initialization
  6312  1BDC                     _Switch_Initialization:	
  6313                           
  6314                           ;Switch_B1.c: 47: TouchPower();
  6315                           
  6316                           ;incstack = 0
  6317                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6318  1BDC  319D  25C8  319B   	fcall	_TouchPower
  6319                           
  6320                           ;Switch_B1.c: 49: WPUB1 = 0;
  6321  1BDF  0024               	movlb	4	; select bank4
  6322  1BE0  108D               	bcf	13,1	;volatile
  6323                           
  6324                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6325  1BE1  3001               	movlw	1
  6326  1BE2  319B  234C  319B   	fcall	_setSw_Initialization
  6327                           
  6328                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6329  1BE5  3002               	movlw	2
  6330  1BE6  319B  234C         	fcall	_setSw_Initialization
  6331  1BE8  0008               	return
  6332  1BE9                     __end_of_Switch_Initialization:	
  6333                           
  6334                           	psect	text19
  6335  1B4C                     __ptext19:	
  6336 ;; *************** function _setSw_Initialization *****************
  6337 ;; Defined at:
  6338 ;;		line 93 in file "../src/Switch_B1.c"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;  sw              1    wreg     unsigned char 
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;  sw              1    4[BANK0 ] unsigned char 
  6343 ;; Return value:  Size  Location     Type
  6344 ;;		None               void
  6345 ;; Registers used:
  6346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6347 ;; Tracked objects:
  6348 ;;		On entry : 0/0
  6349 ;;		On exit  : 0/0
  6350 ;;		Unchanged: 0/0
  6351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6356 ;;Total ram usage:        1 bytes
  6357 ;; Hardware stack levels used:    1
  6358 ;; Hardware stack levels required when called:    7
  6359 ;; This function calls:
  6360 ;;		_setLED
  6361 ;; This function is called by:
  6362 ;;		_Switch_Initialization
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           
  6367                           ;psect for function _setSw_Initialization
  6368  1B4C                     _setSw_Initialization:	
  6369                           
  6370                           ;incstack = 0
  6371                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6372                           ;setSw_Initialization@sw stored from wreg
  6373  1B4C  0020               	movlb	0	; select bank0
  6374  1B4D  00A4               	movwf	setSw_Initialization@sw
  6375                           
  6376                           ;Switch_B1.c: 94: setLED(sw, 1);
  6377  1B4E  01A2               	clrf	setLED@command
  6378  1B4F  0AA2               	incf	setLED@command,f
  6379  1B50  0824               	movf	setSw_Initialization@sw,w
  6380  1B51  3196  264F         	fcall	_setLED
  6381  1B53  0008               	return
  6382  1B54                     __end_of_setSw_Initialization:	
  6383                           
  6384                           	psect	text20
  6385  1DC8                     __ptext20:	
  6386 ;; *************** function _TouchPower *****************
  6387 ;; Defined at:
  6388 ;;		line 10 in file "../src/Switch_B1.c"
  6389 ;; Parameters:    Size  Location     Type
  6390 ;;		None
  6391 ;; Auto vars:     Size  Location     Type
  6392 ;;		None
  6393 ;; Return value:  Size  Location     Type
  6394 ;;		None               void
  6395 ;; Registers used:
  6396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6406 ;;Total ram usage:        0 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:    6
  6409 ;; This function calls:
  6410 ;;		_Timeout_Counter
  6411 ;;		_set_TimeoutCleared
  6412 ;; This function is called by:
  6413 ;;		_Switch_Initialization
  6414 ;;		_Switch_Main
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           
  6419                           ;psect for function _TouchPower
  6420  1DC8                     _TouchPower:	
  6421                           
  6422                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6423                           
  6424                           ;incstack = 0
  6425                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6426  1DC8  0020               	movlb	0	; select bank0
  6427  1DC9  1A8E               	btfsc	14,5	;volatile
  6428  1DCA  0008               	return
  6429                           
  6430                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6431  1DCB  0021               	movlb	1	; select bank1
  6432  1DCC  1C20               	btfss	_myMain^(0+128),0
  6433  1DCD  0008               	return
  6434  1DCE  2DD4               	goto	l10279
  6435  1DCF                     l2643:	
  6436                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6437                           
  6438                           
  6439                           ;Switch_B1.c: 14: RC5 = 1;
  6440  1DCF  0020               	movlb	0	; select bank0
  6441  1DD0  168E               	bsf	14,5	;volatile
  6442                           
  6443                           ;Switch_B1.c: 15: Timeout_Counter();
  6444  1DD1  319D  259E  319D   	fcall	_Timeout_Counter
  6445  1DD4                     l10279:	
  6446  1DD4  0020               	movlb	0	; select bank0
  6447  1DD5  1A8E               	btfsc	14,5	;volatile
  6448  1DD6  2DDA               	goto	l10283
  6449  1DD7  0021               	movlb	1	; select bank1
  6450  1DD8  1D2B               	btfss	(_myMain^(0+128)+11),2
  6451  1DD9  2DCF               	goto	l2643
  6452  1DDA                     l10283:	
  6453                           
  6454                           ;Switch_B1.c: 16: }
  6455                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6456  1DDA  319A  22FE         	fcall	_set_TimeoutCleared
  6457  1DDC  0008               	return
  6458  1DDD                     __end_of_TouchPower:	
  6459                           
  6460                           	psect	text21
  6461  1AE5                     __ptext21:	
  6462 ;; *************** function _RF_Main *****************
  6463 ;; Defined at:
  6464 ;;		line 16 in file "../src/RF_Control_B1.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;		None
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;		None
  6469 ;; Return value:  Size  Location     Type
  6470 ;;		None               void
  6471 ;; Registers used:
  6472 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;Total ram usage:        0 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:   14
  6485 ;; This function calls:
  6486 ;;		_setRF_Main
  6487 ;; This function is called by:
  6488 ;;		_main
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           
  6493                           ;psect for function _RF_Main
  6494  1AE5                     _RF_Main:	
  6495                           
  6496                           ;RF_Control_B1.c: 18: setRF_Main();
  6497                           
  6498                           ;incstack = 0
  6499                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6500  1AE5  318C  2485         	fcall	_setRF_Main
  6501  1AE7  0008               	return
  6502  1AE8                     __end_of_RF_Main:	
  6503                           
  6504                           	psect	text22
  6505  0C85                     __ptext22:	
  6506 ;; *************** function _setRF_Main *****************
  6507 ;; Defined at:
  6508 ;;		line 52 in file "../src/RF_Control_B1.c"
  6509 ;; Parameters:    Size  Location     Type
  6510 ;;		None
  6511 ;; Auto vars:     Size  Location     Type
  6512 ;;  error           1    7[BANK1 ] unsigned char 
  6513 ;;  Receive_OK      1    6[BANK1 ] unsigned char 
  6514 ;;  loop_f          1    5[BANK1 ] unsigned char 
  6515 ;; Return value:  Size  Location     Type
  6516 ;;		None               void
  6517 ;; Registers used:
  6518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6519 ;; Tracked objects:
  6520 ;;		On entry : 0/0
  6521 ;;		On exit  : 0/0
  6522 ;;		Unchanged: 0/0
  6523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;Total ram usage:        3 bytes
  6529 ;; Hardware stack levels used:    1
  6530 ;; Hardware stack levels required when called:   13
  6531 ;; This function calls:
  6532 ;;		_CC2500_RxData
  6533 ;;		_CC2500_TxData
  6534 ;;		_CC2500_WriteCommand
  6535 ;;		_RF_RxDisable
  6536 ;;		_getBuz_GO
  6537 ;;		_getMain_All_Error_Status
  6538 ;;		_getRF_KeyStatus
  6539 ;;		_getRxData
  6540 ;; This function is called by:
  6541 ;;		_RF_Main
  6542 ;; This function uses a non-reentrant model
  6543 ;;
  6544                           
  6545                           
  6546                           ;psect for function _setRF_Main
  6547  0C85                     _setRF_Main:	
  6548                           
  6549                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6550                           
  6551                           ;incstack = 0
  6552                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6553  0C85  0021               	movlb	1	; select bank1
  6554  0C86  01ED               	clrf	setRF_Main@loop_f^(0+128)
  6555  0C87  01EE               	clrf	setRF_Main@Receive_OK^(0+128)
  6556  0C88  01EF               	clrf	setRF_Main@error^(0+128)
  6557                           
  6558                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6559  0C89  1C3A               	btfss	_RF1^(0+128),0
  6560  0C8A  2D00               	goto	l2252
  6561                           
  6562                           ;RF_Control_B1.c: 67: if (getBuz_GO() == 0) {
  6563  0C8B  319C  2436  318C   	fcall	_getBuz_GO
  6564  0C8E  0020               	movlb	0	; select bank0
  6565  0C8F  0821               	movf	?_getBuz_GO+1,w
  6566  0C90  0420               	iorwf	?_getBuz_GO,w
  6567  0C91  1D03               	skipz
  6568  0C92  0008               	return
  6569                           
  6570                           ;RF_Control_B1.c: 68: if (getMain_All_Error_Status(0) == 0) {
  6571  0C93  3000               	movlw	0
  6572  0C94  3191  2168  318C   	fcall	_getMain_All_Error_Status
  6573  0C97  3800               	iorlw	0
  6574  0C98  1D03               	skipz
  6575  0C99  2CAA               	goto	l10223
  6576                           
  6577                           ;RF_Control_B1.c: 70: if (getRF_KeyStatus() == 1 && RF1.Learn == 0) {
  6578  0C9A  319C  2447  318C   	fcall	_getRF_KeyStatus
  6579  0C9D  3A01               	xorlw	1
  6580  0C9E  1D03               	skipz
  6581  0C9F  2CAA               	goto	l10223
  6582  0CA0  0021               	movlb	1	; select bank1
  6583  0CA1  1B3A               	btfsc	_RF1^(0+128),6
  6584  0CA2  2CAA               	goto	l10223
  6585                           
  6586                           ;RF_Control_B1.c: 71: RF1.Count = 0;
  6587  0CA3  01BC               	clrf	(_RF1^(0+128)+2)
  6588  0CA4  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6589                           
  6590                           ;RF_Control_B1.c: 72: RF1.Run = 1;
  6591  0CA5  14BB               	bsf	(_RF1^(0+128)+1),1
  6592                           
  6593                           ;RF_Control_B1.c: 73: RF1.RunTime = 5;
  6594  0CA6  3005               	movlw	5
  6595  0CA7  00C1               	movwf	(_RF1^(0+128)+7)
  6596  0CA8  3000               	movlw	0
  6597  0CA9  00C2               	movwf	(_RF1^(0+128)+8)
  6598  0CAA                     l10223:	
  6599                           
  6600                           ;RF_Control_B1.c: 74: }
  6601                           ;RF_Control_B1.c: 84: }
  6602                           ;RF_Control_B1.c: 86: if (RF1.Learn == 0) {
  6603  0CAA  0021               	movlb	1	; select bank1
  6604  0CAB  1B3A               	btfsc	_RF1^(0+128),6
  6605  0CAC  2CC3               	goto	l2256
  6606                           
  6607                           ;RF_Control_B1.c: 87: if (RF1.Run == 1) {
  6608  0CAD  1CBB               	btfss	(_RF1^(0+128)+1),1
  6609  0CAE  2CC9               	goto	l10239
  6610                           
  6611                           ;RF_Control_B1.c: 88: RF1.Count++;
  6612  0CAF  3001               	movlw	1
  6613  0CB0  07BC               	addwf	(_RF1^(0+128)+2),f
  6614  0CB1  3000               	movlw	0
  6615  0CB2  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6616                           
  6617                           ;RF_Control_B1.c: 89: if (RF1.Count == RF1.RunTime) {
  6618  0CB3  3002               	movlw	2
  6619  0CB4  3EBA               	addlw	_RF1& (0+255)
  6620  0CB5  0086               	movwf	6
  6621  0CB6  0187               	clrf	7
  6622  0CB7  3F40               	moviw [0]fsr1
  6623  0CB8  0641               	xorwf	(_RF1^(0+128)+7),w
  6624  0CB9  1D03               	skipz
  6625  0CBA  2CBD               	goto	u11605
  6626  0CBB  3F41               	moviw [1]fsr1
  6627  0CBC  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6628  0CBD                     u11605:	
  6629  0CBD  1D03               	skipz
  6630  0CBE  2CC9               	goto	l10239
  6631                           
  6632                           ;RF_Control_B1.c: 90: RF1.Count = 0;
  6633  0CBF  01BC               	clrf	(_RF1^(0+128)+2)
  6634  0CC0  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6635                           
  6636                           ;RF_Control_B1.c: 91: RF1.Run = 0;
  6637  0CC1  10BB               	bcf	(_RF1^(0+128)+1),1
  6638                           
  6639                           ;RF_Control_B1.c: 92: }
  6640                           ;RF_Control_B1.c: 93: }
  6641                           ;RF_Control_B1.c: 94: } else {
  6642  0CC2  2CC9               	goto	l10239
  6643  0CC3                     l2256:	
  6644                           
  6645                           ;RF_Control_B1.c: 95: RF1.TransceiveGO = 0;
  6646  0CC3  113A               	bcf	_RF1^(0+128),2
  6647                           
  6648                           ;RF_Control_B1.c: 96: if (RF1.Run == 1) {
  6649  0CC4  1CBB               	btfss	(_RF1^(0+128)+1),1
  6650  0CC5  2CC9               	goto	l10239
  6651                           
  6652                           ;RF_Control_B1.c: 97: RF1.Run = 0;
  6653  0CC6  10BB               	bcf	(_RF1^(0+128)+1),1
  6654                           
  6655                           ;RF_Control_B1.c: 98: RF1.Count = 0;
  6656  0CC7  01BC               	clrf	(_RF1^(0+128)+2)
  6657  0CC8  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6658  0CC9                     l10239:	
  6659                           
  6660                           ;RF_Control_B1.c: 99: }
  6661                           ;RF_Control_B1.c: 100: }
  6662                           ;RF_Control_B1.c: 102: if (RF1.Run == 0) {
  6663  0CC9  18BB               	btfsc	(_RF1^(0+128)+1),1
  6664  0CCA  0008               	return
  6665                           
  6666                           ;RF_Control_B1.c: 103: if (RF1.TransceiveGO == 1) {
  6667  0CCB  1D3A               	btfss	_RF1^(0+128),2
  6668  0CCC  2CDC               	goto	l2262
  6669                           
  6670                           ;RF_Control_B1.c: 104: RF1.TransceiveGO = 0;
  6671  0CCD  113A               	bcf	_RF1^(0+128),2
  6672                           
  6673                           ;RF_Control_B1.c: 105: RF1.Run = 1;
  6674  0CCE  14BB               	bsf	(_RF1^(0+128)+1),1
  6675                           
  6676                           ;RF_Control_B1.c: 106: RF1.RunTime = 5;
  6677  0CCF  3005               	movlw	5
  6678  0CD0  00C1               	movwf	(_RF1^(0+128)+7)
  6679  0CD1  3000               	movlw	0
  6680  0CD2  00C2               	movwf	(_RF1^(0+128)+8)
  6681                           
  6682                           ;RF_Control_B1.c: 107: RF_RxDisable();
  6683  0CD3  319C  24D8  318C   	fcall	_RF_RxDisable
  6684                           
  6685                           ;RF_Control_B1.c: 108: CC2500_TxData();
  6686  0CD6  318A  2202         	fcall	_CC2500_TxData
  6687                           
  6688                           ;RF_Control_B1.c: 109: RB5 = RB5 == 1 ? 0 : 1;
  6689  0CD8  3020               	movlw	32
  6690  0CD9  0020               	movlb	0	; select bank0
  6691  0CDA  068D               	xorwf	13,f
  6692                           
  6693                           ;RF_Control_B1.c: 110: } else {
  6694  0CDB  0008               	return
  6695  0CDC                     l2262:	
  6696                           
  6697                           ;RF_Control_B1.c: 111: if (RF1.RxStatus == 1) {
  6698  0CDC  1DBA               	btfss	_RF1^(0+128),3
  6699  0CDD  2CF1               	goto	l2264
  6700                           
  6701                           ;RF_Control_B1.c: 112: if (RF1.Key == 0 || RF1.Learn == 1) {
  6702  0CDE  1FBA               	btfss	_RF1^(0+128),7
  6703  0CDF  2CE2               	goto	l10255
  6704  0CE0  1F3A               	btfss	_RF1^(0+128),6
  6705  0CE1  0008               	return
  6706  0CE2                     l10255:	
  6707                           
  6708                           ;RF_Control_B1.c: 114: CC2500_RxData();
  6709  0CE2  318B  2397  318C   	fcall	_CC2500_RxData
  6710                           
  6711                           ;RF_Control_B1.c: 116: if (RF1.ReceiveGO == 1) {
  6712  0CE5  0021               	movlb	1	; select bank1
  6713  0CE6  1CBA               	btfss	_RF1^(0+128),1
  6714  0CE7  0008               	return
  6715                           
  6716                           ;RF_Control_B1.c: 117: RF1.ReceiveGO = 0;
  6717  0CE8  10BA               	bcf	_RF1^(0+128),1
  6718                           
  6719                           ;RF_Control_B1.c: 118: RF1.Run = 1;
  6720  0CE9  14BB               	bsf	(_RF1^(0+128)+1),1
  6721                           
  6722                           ;RF_Control_B1.c: 119: RF1.RunTime = 5;
  6723  0CEA  3005               	movlw	5
  6724  0CEB  00C1               	movwf	(_RF1^(0+128)+7)
  6725  0CEC  3000               	movlw	0
  6726  0CED  00C2               	movwf	(_RF1^(0+128)+8)
  6727                           
  6728                           ;RF_Control_B1.c: 127: getRxData();
  6729  0CEE  318C  2406         	fcall	_getRxData
  6730                           
  6731                           ;RF_Control_B1.c: 129: }
  6732                           ;RF_Control_B1.c: 130: }
  6733                           ;RF_Control_B1.c: 131: } else {
  6734  0CF0  0008               	return
  6735  0CF1                     l2264:	
  6736                           
  6737                           ;RF_Control_B1.c: 133: if (RF1.ReceiveGO == 0) {
  6738  0CF1  18BA               	btfsc	_RF1^(0+128),1
  6739  0CF2  0008               	return
  6740                           
  6741                           ;RF_Control_B1.c: 134: RF1.RxStatus = 1;
  6742  0CF3  15BA               	bsf	_RF1^(0+128),3
  6743                           
  6744                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x36);
  6745  0CF4  3036               	movlw	54
  6746  0CF5  319E  2627  318C   	fcall	_CC2500_WriteCommand
  6747                           
  6748                           ;RF_Control_B1.c: 138: CC2500_WriteCommand(0x3A);
  6749  0CF8  303A               	movlw	58
  6750  0CF9  319E  2627  318C   	fcall	_CC2500_WriteCommand
  6751                           
  6752                           ;RF_Control_B1.c: 139: CC2500_WriteCommand(0x34);
  6753  0CFC  3034               	movlw	52
  6754  0CFD  319E  2627         	fcall	_CC2500_WriteCommand
  6755                           
  6756                           ;RF_Control_B1.c: 140: }
  6757                           ;RF_Control_B1.c: 142: }
  6758                           ;RF_Control_B1.c: 143: }
  6759                           ;RF_Control_B1.c: 144: }
  6760                           ;RF_Control_B1.c: 145: }
  6761                           ;RF_Control_B1.c: 146: } else {
  6762  0CFF  0008               	return
  6763  0D00                     l2252:	
  6764                           
  6765                           ;RF_Control_B1.c: 147: if (myMain.PowerON == 1) {
  6766  0D00  1C20               	btfss	_myMain^(0+128),0
  6767  0D01  0008               	return
  6768                           
  6769                           ;RF_Control_B1.c: 148: RF1.Enable = 1;
  6770  0D02  143A               	bsf	_RF1^(0+128),0
  6771  0D03  0008               	return
  6772  0D04                     __end_of_setRF_Main:	
  6773                           
  6774                           	psect	text23
  6775  0C06                     __ptext23:	
  6776 ;; *************** function _getRxData *****************
  6777 ;; Defined at:
  6778 ;;		line 243 in file "../src/RF_Control_B1.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;		None
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;  error           1    4[BANK1 ] unsigned char 
  6783 ;; Return value:  Size  Location     Type
  6784 ;;		None               void
  6785 ;; Registers used:
  6786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6787 ;; Tracked objects:
  6788 ;;		On entry : 0/0
  6789 ;;		On exit  : 0/0
  6790 ;;		Unchanged: 0/0
  6791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6793 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;Total ram usage:        2 bytes
  6797 ;; Hardware stack levels used:    1
  6798 ;; Hardware stack levels required when called:   12
  6799 ;; This function calls:
  6800 ;;		_getMain_All_Error_Status
  6801 ;;		_setControl_Lights_Table
  6802 ;;		_setLog_Code
  6803 ;;		_setTxData
  6804 ;; This function is called by:
  6805 ;;		_setRF_Main
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           
  6810                           ;psect for function _getRxData
  6811  0C06                     _getRxData:	
  6812                           
  6813                           ;RF_Control_B1.c: 244: char error = getMain_All_Error_Status(0);
  6814                           
  6815                           ;incstack = 0
  6816                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6817  0C06  3000               	movlw	0
  6818  0C07  3191  2168  318C   	fcall	_getMain_All_Error_Status
  6819  0C0A  0020               	movlb	0	; select bank0
  6820  0C0B  00EE               	movwf	??_getRxData
  6821  0C0C  086E               	movf	??_getRxData,w
  6822  0C0D  0021               	movlb	1	; select bank1
  6823  0C0E  00EC               	movwf	getRxData@error^(0+128)
  6824                           
  6825                           ;RF_Control_B1.c: 245: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6826  0C0F  0023               	movlb	3	; select bank3
  6827  0C10  0820               	movf	_RF_Data^(0+384),w
  6828  0C11  3AAA               	xorlw	170
  6829  0C12  1D03               	skipz
  6830  0C13  2C2A               	goto	l9747
  6831  0C14  0821               	movf	(_RF_Data^(0+384)+1),w
  6832  0C15  3A01               	xorlw	1
  6833  0C16  1D03               	skipz
  6834  0C17  2C2A               	goto	l9747
  6835                           
  6836                           ;RF_Control_B1.c: 247: product->Data[2] = 0x55;
  6837  0C18  3055               	movlw	85
  6838  0C19  0020               	movlb	0	; select bank0
  6839  0C1A  00EE               	movwf	??_getRxData
  6840  0C1B  0879               	movf	_product,w
  6841  0C1C  3E02               	addlw	2
  6842  0C1D  0086               	movwf	6
  6843  0C1E  3002               	movlw	2	; select bank4/5
  6844  0C1F  0087               	movwf	7
  6845  0C20  086E               	movf	??_getRxData,w
  6846  0C21  0081               	movwf	1
  6847                           
  6848                           ;RF_Control_B1.c: 248: setTxData();
  6849  0C22  318E  260C         	fcall	_setTxData
  6850                           
  6851                           ;RF_Control_B1.c: 249: RF1.RunTime = 10;
  6852  0C24  300A               	movlw	10
  6853  0C25  0021               	movlb	1	; select bank1
  6854  0C26  00C1               	movwf	(_RF1^(0+128)+7)
  6855  0C27  3000               	movlw	0
  6856  0C28  00C2               	movwf	(_RF1^(0+128)+8)
  6857                           
  6858                           ;RF_Control_B1.c: 255: } else {
  6859  0C29  0008               	return
  6860  0C2A                     l9747:	
  6861                           
  6862                           ;RF_Control_B1.c: 257: if (error == 0) {
  6863  0C2A  0021               	movlb	1	; select bank1
  6864  0C2B  08EC               	movf	getRxData@error^(0+128),f
  6865  0C2C  1D03               	skipz
  6866  0C2D  0008               	return
  6867                           
  6868                           ;RF_Control_B1.c: 258: if (RF1.Learn == 1) {
  6869  0C2E  1F3A               	btfss	_RF1^(0+128),6
  6870  0C2F  2C3B               	goto	l9757
  6871                           
  6872                           ;RF_Control_B1.c: 259: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6873  0C30  0023               	movlb	3	; select bank3
  6874  0C31  08A0               	movf	_RF_Data^(0+384),f
  6875  0C32  1D03               	skipz
  6876  0C33  0008               	return
  6877  0C34  0821               	movf	(_RF_Data^(0+384)+1),w
  6878  0C35  3A64               	xorlw	100
  6879  0C36  1D03               	skipz
  6880  0C37  0008               	return
  6881                           
  6882                           ;RF_Control_B1.c: 260: setLog_Code();
  6883  0C38  3191  219B         	fcall	_setLog_Code
  6884                           
  6885                           ;RF_Control_B1.c: 261: }
  6886                           ;RF_Control_B1.c: 262: } else {
  6887  0C3A  0008               	return
  6888  0C3B                     l9757:	
  6889                           
  6890                           ;RF_Control_B1.c: 263: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6891  0C3B  0023               	movlb	3	; select bank3
  6892  0C3C  08A0               	movf	_RF_Data^(0+384),f
  6893  0C3D  1D03               	skipz
  6894  0C3E  2C70               	goto	l9777
  6895  0C3F  0821               	movf	(_RF_Data^(0+384)+1),w
  6896  0C40  3A02               	xorlw	2
  6897  0C41  1D03               	skipz
  6898  0C42  2C70               	goto	l9777
  6899                           
  6900                           ;RF_Control_B1.c: 265: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6901  0C43  082C               	movf	(_RF_Data^(0+384)+12),w
  6902  0C44  3AFF               	xorlw	255
  6903  0C45  1D03               	skipz
  6904  0C46  2C51               	goto	l9769
  6905  0C47  082D               	movf	(_RF_Data^(0+384)+13),w
  6906  0C48  3AFF               	xorlw	255
  6907  0C49  1D03               	skipz
  6908  0C4A  2C51               	goto	l9769
  6909  0C4B  082E               	movf	(_RF_Data^(0+384)+14),w
  6910  0C4C  3AFF               	xorlw	255
  6911  0C4D  1D03               	skipz
  6912  0C4E  2C51               	goto	l9769
  6913                           
  6914                           ;RF_Control_B1.c: 266: __nop();
  6915  0C4F  0000               	nop
  6916                           
  6917                           ;RF_Control_B1.c: 267: } else {
  6918  0C50  0008               	return
  6919  0C51                     l9769:	
  6920                           
  6921                           ;RF_Control_B1.c: 268: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6922  0C51  0879               	movf	_product,w
  6923  0C52  3E0C               	addlw	12
  6924  0C53  0086               	movwf	6
  6925  0C54  3002               	movlw	2	; select bank4/5
  6926  0C55  0087               	movwf	7
  6927  0C56  0023               	movlb	3	; select bank3
  6928  0C57  082C               	movf	(_RF_Data^(0+384)+12),w
  6929  0C58  0601               	xorwf	1,w
  6930  0C59  1D03               	skipz
  6931  0C5A  0008               	return
  6932  0C5B  0879               	movf	_product,w
  6933  0C5C  3E0D               	addlw	13
  6934  0C5D  0086               	movwf	6
  6935  0C5E  3002               	movlw	2	; select bank4/5
  6936  0C5F  0087               	movwf	7
  6937  0C60  082D               	movf	(_RF_Data^(0+384)+13),w
  6938  0C61  0601               	xorwf	1,w
  6939  0C62  1D03               	skipz
  6940  0C63  0008               	return
  6941  0C64  0879               	movf	_product,w
  6942  0C65  3E0E               	addlw	14
  6943  0C66  0086               	movwf	6
  6944  0C67  3002               	movlw	2	; select bank4/5
  6945  0C68  0087               	movwf	7
  6946  0C69  082E               	movf	(_RF_Data^(0+384)+14),w
  6947  0C6A  0601               	xorwf	1,w
  6948  0C6B  1D03               	skipz
  6949  0C6C  0008               	return
  6950                           
  6951                           ;RF_Control_B1.c: 269: setControl_Lights_Table();
  6952  0C6D  318B  2330         	fcall	_setControl_Lights_Table
  6953                           
  6954                           ;RF_Control_B1.c: 270: }
  6955                           ;RF_Control_B1.c: 271: }
  6956                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6957  0C6F  0008               	return
  6958  0C70                     l9777:	
  6959  0C70  0023               	movlb	3	; select bank3
  6960  0C71  0820               	movf	_RF_Data^(0+384),w
  6961  0C72  3AFF               	xorlw	255
  6962  0C73  1D03               	skipz
  6963  0C74  2C7B               	goto	l9783
  6964  0C75  0821               	movf	(_RF_Data^(0+384)+1),w
  6965  0C76  3A02               	xorlw	2
  6966  0C77  1D03               	skipz
  6967  0C78  2C7B               	goto	l9783
  6968                           
  6969                           ;RF_Control_B1.c: 273: __nop();
  6970  0C79  0000               	nop
  6971                           
  6972                           ;RF_Control_B1.c: 274: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6973  0C7A  0008               	return
  6974  0C7B                     l9783:	
  6975  0C7B  0023               	movlb	3	; select bank3
  6976  0C7C  08A0               	movf	_RF_Data^(0+384),f
  6977  0C7D  1D03               	skipz
  6978  0C7E  0008               	return
  6979  0C7F  0821               	movf	(_RF_Data^(0+384)+1),w
  6980  0C80  3A65               	xorlw	101
  6981  0C81  1D03               	skipz
  6982  0C82  0008               	return
  6983                           
  6984                           ;RF_Control_B1.c: 275: __nop();
  6985  0C83  0000               	nop
  6986                           
  6987                           ;RF_Control_B1.c: 283: ;
  6988                           
  6989                           ;RF_Control_B1.c: 276: }
  6990                           ;RF_Control_B1.c: 281: }
  6991                           ;RF_Control_B1.c: 282: } else {
  6992  0C84  0008               	return
  6993  0C85                     __end_of_getRxData:	
  6994                           
  6995                           	psect	text24
  6996  119B                     __ptext24:	
  6997 ;; *************** function _setLog_Code *****************
  6998 ;; Defined at:
  6999 ;;		line 289 in file "../src/RF_Control_B1.c"
  7000 ;; Parameters:    Size  Location     Type
  7001 ;;		None
  7002 ;; Auto vars:     Size  Location     Type
  7003 ;;		None
  7004 ;; Return value:  Size  Location     Type
  7005 ;;		None               void
  7006 ;; Registers used:
  7007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7008 ;; Tracked objects:
  7009 ;;		On entry : 0/0
  7010 ;;		On exit  : 0/0
  7011 ;;		Unchanged: 0/0
  7012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7016 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;Total ram usage:        1 bytes
  7018 ;; Hardware stack levels used:    1
  7019 ;; Hardware stack levels required when called:    7
  7020 ;; This function calls:
  7021 ;;		_setBuz
  7022 ;;		_setMemory_LoopSave
  7023 ;;		_setMemory_Modify
  7024 ;;		_setProductData
  7025 ;; This function is called by:
  7026 ;;		_getRxData
  7027 ;; This function uses a non-reentrant model
  7028 ;;
  7029                           
  7030                           
  7031                           ;psect for function _setLog_Code
  7032  119B                     _setLog_Code:	
  7033                           
  7034                           ;RF_Control_B1.c: 290: RF1.Learn = 0;
  7035                           
  7036                           ;incstack = 0
  7037                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7038  119B  0021               	movlb	1	; select bank1
  7039  119C  133A               	bcf	_RF1^(0+128),6
  7040                           
  7041                           ;RF_Control_B1.c: 291: setProductData(12, RF_Data[12]);
  7042  119D  0023               	movlb	3	; select bank3
  7043  119E  082C               	movf	(_RF_Data^(0+384)+12),w
  7044  119F  0020               	movlb	0	; select bank0
  7045  11A0  00E6               	movwf	??_setLog_Code
  7046  11A1  0866               	movf	??_setLog_Code,w
  7047  11A2  00E2               	movwf	setProductData@value
  7048  11A3  300C               	movlw	12
  7049  11A4  319B  23E9  3191   	fcall	_setProductData
  7050                           
  7051                           ;RF_Control_B1.c: 292: setProductData(13, RF_Data[13]);
  7052  11A7  0023               	movlb	3	; select bank3
  7053  11A8  082D               	movf	(_RF_Data^(0+384)+13),w
  7054  11A9  0020               	movlb	0	; select bank0
  7055  11AA  00E6               	movwf	??_setLog_Code
  7056  11AB  0866               	movf	??_setLog_Code,w
  7057  11AC  00E2               	movwf	setProductData@value
  7058  11AD  300D               	movlw	13
  7059  11AE  319B  23E9  3191   	fcall	_setProductData
  7060                           
  7061                           ;RF_Control_B1.c: 293: setProductData(14, RF_Data[14]);
  7062  11B1  0023               	movlb	3	; select bank3
  7063  11B2  082E               	movf	(_RF_Data^(0+384)+14),w
  7064  11B3  0020               	movlb	0	; select bank0
  7065  11B4  00E6               	movwf	??_setLog_Code
  7066  11B5  0866               	movf	??_setLog_Code,w
  7067  11B6  00E2               	movwf	setProductData@value
  7068  11B7  300E               	movlw	14
  7069  11B8  319B  23E9  3191   	fcall	_setProductData
  7070                           
  7071                           ;RF_Control_B1.c: 294: setBuz(1, 100);
  7072  11BB  3064               	movlw	100
  7073  11BC  0020               	movlb	0	; select bank0
  7074  11BD  00A9               	movwf	setBuz@time
  7075  11BE  3000               	movlw	0
  7076  11BF  00AA               	movwf	setBuz@time+1
  7077  11C0  3001               	movlw	1
  7078  11C1  3197  274E  3191   	fcall	_setBuz
  7079                           
  7080                           ;RF_Control_B1.c: 295: if (myMain.First == 1) {
  7081  11C4  0021               	movlb	1	; select bank1
  7082  11C5  1EA0               	btfss	_myMain^(0+128),5
  7083  11C6  29CB               	goto	l2313
  7084                           
  7085                           ;RF_Control_B1.c: 296: setMemory_LoopSave(1);
  7086  11C7  3001               	movlw	1
  7087  11C8  319C  24FE  3191   	fcall	_setMemory_LoopSave
  7088  11CB                     l2313:	
  7089                           
  7090                           ;RF_Control_B1.c: 297: }
  7091                           ;RF_Control_B1.c: 298: setMemory_Modify(1);
  7092  11CB  3001               	movlw	1
  7093  11CC  319C  24EB         	fcall	_setMemory_Modify
  7094  11CE  0008               	return
  7095  11CF                     __end_of_setLog_Code:	
  7096                           
  7097                           	psect	text25
  7098  1CFE                     __ptext25:	
  7099 ;; *************** function _setMemory_LoopSave *****************
  7100 ;; Defined at:
  7101 ;;		line 1070 in file "../src/MCU_B1.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  command         1    wreg     unsigned char 
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;  command         1    1[BANK0 ] unsigned char 
  7106 ;; Return value:  Size  Location     Type
  7107 ;;		None               void
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7117 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7118 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7119 ;;Total ram usage:        2 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    5
  7122 ;; This function calls:
  7123 ;;		Nothing
  7124 ;; This function is called by:
  7125 ;;		_setLog_Code
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           
  7130                           ;psect for function _setMemory_LoopSave
  7131  1CFE                     _setMemory_LoopSave:	
  7132                           
  7133                           ;incstack = 0
  7134                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7135                           ;setMemory_LoopSave@command stored from wreg
  7136  1CFE  0020               	movlb	0	; select bank0
  7137  1CFF  00A1               	movwf	setMemory_LoopSave@command
  7138                           
  7139                           ;MCU_B1.c: 1071: Memory.LoopSave = command == 1 ? 1 : 0;
  7140  1D00  0821               	movf	setMemory_LoopSave@command,w
  7141  1D01  3A01               	xorlw	1
  7142  1D02  3000               	movlw	0
  7143  1D03  1903               	skipnz
  7144  1D04  3001               	movlw	1
  7145  1D05  00A0               	movwf	??_setMemory_LoopSave
  7146  1D06  0DA0               	rlf	??_setMemory_LoopSave,f
  7147  1D07  0DA0               	rlf	??_setMemory_LoopSave,f
  7148  1D08  0024               	movlb	4	; select bank4
  7149  1D09  0844               	movf	(_Memory^(0+512)+36),w
  7150  1D0A  0020               	movlb	0	; select bank0
  7151  1D0B  0620               	xorwf	??_setMemory_LoopSave,w
  7152  1D0C  39FB               	andlw	-5
  7153  1D0D  0620               	xorwf	??_setMemory_LoopSave,w
  7154  1D0E  0024               	movlb	4	; select bank4
  7155  1D0F  00C4               	movwf	(_Memory^(0+512)+36)
  7156  1D10  0008               	return
  7157  1D11                     __end_of_setMemory_LoopSave:	
  7158                           
  7159                           	psect	text26
  7160  0B30                     __ptext26:	
  7161 ;; *************** function _setControl_Lights_Table *****************
  7162 ;; Defined at:
  7163 ;;		line 302 in file "../src/RF_Control_B1.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;		None
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;		None
  7168 ;; Return value:  Size  Location     Type
  7169 ;;		None               void
  7170 ;; Registers used:
  7171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7181 ;;Total ram usage:        0 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; Hardware stack levels required when called:   11
  7184 ;; This function calls:
  7185 ;;		_setBuz
  7186 ;;		_setDimmerLights_ErrorClose
  7187 ;;		_setProductData
  7188 ;;		_setRFSW_AdjControl
  7189 ;;		_setRFSW_Control
  7190 ;;		_setTxData
  7191 ;; This function is called by:
  7192 ;;		_getRxData
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           
  7197                           ;psect for function _setControl_Lights_Table
  7198  0B30                     _setControl_Lights_Table:	
  7199                           
  7200                           ;RF_Control_B1.c: 303: switch (RF_Data[15]) {
  7201                           
  7202                           ;incstack = 0
  7203                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7204  0B30  2B7B               	goto	l9435
  7205  0B31                     l9419:	
  7206                           ;RF_Control_B1.c: 304: case 0x00:
  7207                           
  7208                           
  7209                           ;RF_Control_B1.c: 306: setDimmerLights_ErrorClose(255);
  7210  0B31  30FF               	movlw	255
  7211  0B32  3189  21A0  318B   	fcall	_setDimmerLights_ErrorClose
  7212                           
  7213                           ;RF_Control_B1.c: 308: setProductData(9, 0);
  7214  0B35  0020               	movlb	0	; select bank0
  7215  0B36  01E2               	clrf	setProductData@value
  7216  0B37  3009               	movlw	9
  7217  0B38  319B  23E9  318B   	fcall	_setProductData
  7218                           
  7219                           ;RF_Control_B1.c: 309: setProductData(11, 0);
  7220  0B3B  0020               	movlb	0	; select bank0
  7221  0B3C  01E2               	clrf	setProductData@value
  7222  0B3D  300B               	movlw	11
  7223  0B3E  319B  23E9  318B   	fcall	_setProductData
  7224                           
  7225                           ;RF_Control_B1.c: 310: setProductData(15, 0);
  7226  0B41  0020               	movlb	0	; select bank0
  7227  0B42  01E2               	clrf	setProductData@value
  7228  0B43  300F               	movlw	15
  7229  0B44  319B  23E9  318B   	fcall	_setProductData
  7230                           
  7231                           ;RF_Control_B1.c: 311: setProductData(17, 0);
  7232  0B47  0020               	movlb	0	; select bank0
  7233  0B48  01E2               	clrf	setProductData@value
  7234  0B49  3011               	movlw	17
  7235  0B4A  319B  23E9  318B   	fcall	_setProductData
  7236                           
  7237                           ;RF_Control_B1.c: 312: setBuz(1, 100);
  7238  0B4D  3064               	movlw	100
  7239  0B4E  0020               	movlb	0	; select bank0
  7240  0B4F  00A9               	movwf	setBuz@time
  7241  0B50  3000               	movlw	0
  7242  0B51  00AA               	movwf	setBuz@time+1
  7243  0B52  3001               	movlw	1
  7244  0B53  3197  274E         	fcall	_setBuz
  7245                           
  7246                           ;RF_Control_B1.c: 314: break;
  7247  0B55  0008               	return
  7248  0B56                     l9423:	
  7249                           ;RF_Control_B1.c: 315: case 0x20:
  7250                           
  7251                           
  7252                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7253  0B56  0020               	movlb	0	; select bank0
  7254  0B57  01E2               	clrf	setProductData@value
  7255  0B58  3009               	movlw	9
  7256  0B59  319B  23E9  318B   	fcall	_setProductData
  7257                           
  7258                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7259  0B5C  0020               	movlb	0	; select bank0
  7260  0B5D  01E2               	clrf	setProductData@value
  7261  0B5E  300B               	movlw	11
  7262  0B5F  319B  23E9  318B   	fcall	_setProductData
  7263                           
  7264                           ;RF_Control_B1.c: 318: setProductData(17, 0);
  7265  0B62  0020               	movlb	0	; select bank0
  7266  0B63  01E2               	clrf	setProductData@value
  7267  0B64  3011               	movlw	17
  7268  0B65  319B  23E9  318B   	fcall	_setProductData
  7269                           
  7270                           ;RF_Control_B1.c: 319: setTxData();
  7271  0B68  318E  260C         	fcall	_setTxData
  7272                           
  7273                           ;RF_Control_B1.c: 320: break;
  7274  0B6A  0008               	return
  7275  0B6B                     l9425:	
  7276                           ;RF_Control_B1.c: 321: case 0x01:
  7277                           
  7278                           
  7279                           ;RF_Control_B1.c: 323: setRFSW_Control(1);
  7280  0B6B  3001               	movlw	1
  7281  0B6C  3195  250B         	fcall	_setRFSW_Control
  7282                           
  7283                           ;RF_Control_B1.c: 325: break;
  7284  0B6E  0008               	return
  7285  0B6F                     l9427:	
  7286                           ;RF_Control_B1.c: 326: case 0x02:
  7287                           
  7288                           
  7289                           ;RF_Control_B1.c: 328: setRFSW_Control(2);
  7290  0B6F  3002               	movlw	2
  7291  0B70  3195  250B         	fcall	_setRFSW_Control
  7292                           
  7293                           ;RF_Control_B1.c: 335: break;
  7294                           
  7295                           ;RF_Control_B1.c: 331: case 0x03:
  7296                           
  7297                           ;RF_Control_B1.c: 330: break;
  7298  0B72  0008               	return
  7299  0B73                     l9429:	
  7300                           ;RF_Control_B1.c: 336: case 0x11:
  7301                           
  7302                           
  7303                           ;RF_Control_B1.c: 339: setRFSW_AdjControl(1);
  7304  0B73  3001               	movlw	1
  7305  0B74  3193  2323         	fcall	_setRFSW_AdjControl
  7306                           
  7307                           ;RF_Control_B1.c: 342: break;
  7308  0B76  0008               	return
  7309  0B77                     l9431:	
  7310                           ;RF_Control_B1.c: 343: case 0x21:
  7311                           
  7312                           
  7313                           ;RF_Control_B1.c: 346: setRFSW_AdjControl(2);
  7314  0B77  3002               	movlw	2
  7315  0B78  3193  2323         	fcall	_setRFSW_AdjControl
  7316                           
  7317                           ;RF_Control_B1.c: 357: }
  7318                           
  7319                           ;RF_Control_B1.c: 356: break;
  7320                           
  7321                           ;RF_Control_B1.c: 350: case 0x31:
  7322                           
  7323                           ;RF_Control_B1.c: 349: break;
  7324  0B7A  0008               	return
  7325  0B7B                     l9435:	
  7326  0B7B  0023               	movlb	3	; select bank3
  7327  0B7C  082F               	movf	(_RF_Data^(0+384)+15),w
  7328                           
  7329                           ; Switch size 1, requested type "space"
  7330                           ; Number of cases is 8, Range of values is 0 to 49
  7331                           ; switch strategies available:
  7332                           ; Name         Instructions Cycles
  7333                           ; simple_byte           25    13 (average)
  7334                           ; direct_byte          106     6 (fixed)
  7335                           ; jumptable            260     6 (fixed)
  7336                           ;	Chosen strategy is simple_byte
  7337  0B7D  3A00               	xorlw	0	; case 0
  7338  0B7E  1903               	skipnz
  7339  0B7F  2B31               	goto	l9419
  7340  0B80  3A01               	xorlw	1	; case 1
  7341  0B81  1903               	skipnz
  7342  0B82  2B6B               	goto	l9425
  7343  0B83  3A03               	xorlw	3	; case 2
  7344  0B84  1903               	skipnz
  7345  0B85  2B6F               	goto	l9427
  7346  0B86  3A01               	xorlw	1	; case 3
  7347  0B87  1903               	skipnz
  7348  0B88  2B96               	goto	l2327
  7349  0B89  3A12               	xorlw	18	; case 17
  7350  0B8A  1903               	skipnz
  7351  0B8B  2B73               	goto	l9429
  7352  0B8C  3A31               	xorlw	49	; case 32
  7353  0B8D  1903               	skipnz
  7354  0B8E  2B56               	goto	l9423
  7355  0B8F  3A01               	xorlw	1	; case 33
  7356  0B90  1903               	skipnz
  7357  0B91  2B77               	goto	l9431
  7358  0B92  3A10               	xorlw	16	; case 49
  7359  0B93  1903               	skipnz
  7360  0B94  2B96               	goto	l2327
  7361  0B95  2B96               	goto	l2327
  7362  0B96                     l2327:	
  7363  0B96  0008               	return
  7364  0B97                     __end_of_setControl_Lights_Table:	
  7365                           
  7366                           	psect	text27
  7367  150B                     __ptext27:	
  7368 ;; *************** function _setRFSW_Control *****************
  7369 ;; Defined at:
  7370 ;;		line 384 in file "../src/RF_Control_B1.c"
  7371 ;; Parameters:    Size  Location     Type
  7372 ;;  sw              1    wreg     unsigned char 
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;  sw              1   77[BANK0 ] unsigned char 
  7375 ;;  status          1   76[BANK0 ] unsigned char 
  7376 ;; Return value:  Size  Location     Type
  7377 ;;		None               void
  7378 ;; Registers used:
  7379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7387 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7388 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7389 ;;Total ram usage:        3 bytes
  7390 ;; Hardware stack levels used:    1
  7391 ;; Hardware stack levels required when called:    9
  7392 ;; This function calls:
  7393 ;;		_getDelayOff_GO
  7394 ;;		_getDimmerLights_Status
  7395 ;;		_setBuz
  7396 ;;		_setDelayOff_GO
  7397 ;;		_setDimmerLights_SwOff
  7398 ;;		_setDimmerLights_SwOn
  7399 ;;		_setRF_DimmerLights
  7400 ;;		_setTxData
  7401 ;; This function is called by:
  7402 ;;		_setControl_Lights_Table
  7403 ;; This function uses a non-reentrant model
  7404 ;;
  7405                           
  7406                           
  7407                           ;psect for function _setRFSW_Control
  7408  150B                     _setRFSW_Control:	
  7409                           
  7410                           ;incstack = 0
  7411                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7412                           ;setRFSW_Control@sw stored from wreg
  7413  150B  0020               	movlb	0	; select bank0
  7414  150C  00ED               	movwf	setRFSW_Control@sw
  7415                           
  7416                           ;RF_Control_B1.c: 385: char status = 0;
  7417  150D  01EC               	clrf	setRFSW_Control@status
  7418                           
  7419                           ;RF_Control_B1.c: 388: if (RF_Data[16] == 0x80) {
  7420  150E  0023               	movlb	3	; select bank3
  7421  150F  0830               	movf	(_RF_Data^(0+384)+16),w
  7422  1510  3A80               	xorlw	128
  7423  1511  1D03               	skipz
  7424  1512  2D3E               	goto	l9213
  7425                           
  7426                           ;RF_Control_B1.c: 389: setDelayOff_GO(sw, 1, RF_Data[17]);
  7427  1513  0020               	movlb	0	; select bank0
  7428  1514  01E6               	clrf	setDelayOff_GO@command
  7429  1515  0AE6               	incf	setDelayOff_GO@command,f
  7430  1516  0023               	movlb	3	; select bank3
  7431  1517  0831               	movf	(_RF_Data^(0+384)+17),w
  7432  1518  0020               	movlb	0	; select bank0
  7433  1519  00EB               	movwf	??_setRFSW_Control
  7434  151A  086B               	movf	??_setRFSW_Control,w
  7435  151B  00E7               	movwf	setDelayOff_GO@value
  7436  151C  086D               	movf	setRFSW_Control@sw,w
  7437  151D  3195  25FC  3195   	fcall	_setDelayOff_GO
  7438                           
  7439                           ;RF_Control_B1.c: 390: if (getDimmerLights_Status(sw) == 1) {
  7440  1520  0020               	movlb	0	; select bank0
  7441  1521  086D               	movf	setRFSW_Control@sw,w
  7442  1522  319C  2425  3195   	fcall	_getDimmerLights_Status
  7443  1525  3A01               	xorlw	1
  7444  1526  1D03               	skipz
  7445  1527  2D4D               	goto	l9217
  7446                           
  7447                           ;RF_Control_B1.c: 391: setBuz(1, 100);
  7448  1528  3064               	movlw	100
  7449  1529  0020               	movlb	0	; select bank0
  7450  152A  00A9               	movwf	setBuz@time
  7451  152B  3000               	movlw	0
  7452  152C  00AA               	movwf	setBuz@time+1
  7453  152D  3001               	movlw	1
  7454  152E  3197  274E  3195   	fcall	_setBuz
  7455                           
  7456                           ;RF_Control_B1.c: 392: status = 1;
  7457  1531  0020               	movlb	0	; select bank0
  7458  1532  01EC               	clrf	setRFSW_Control@status
  7459  1533  0AEC               	incf	setRFSW_Control@status,f
  7460                           
  7461                           ;RF_Control_B1.c: 393: setRF_DimmerLights(sw, 1);
  7462  1534  01E6               	clrf	setRF_DimmerLights@on
  7463  1535  0AE6               	incf	setRF_DimmerLights@on,f
  7464  1536  086D               	movf	setRFSW_Control@sw,w
  7465  1537  3197  27A7  3195   	fcall	_setRF_DimmerLights
  7466                           
  7467                           ;RF_Control_B1.c: 394: setTxData();
  7468  153A  318E  260C  3195   	fcall	_setTxData
  7469                           
  7470                           ;RF_Control_B1.c: 396: }
  7471                           ;RF_Control_B1.c: 397: } else {
  7472  153D  2D4D               	goto	l9217
  7473  153E                     l9213:	
  7474                           
  7475                           ;RF_Control_B1.c: 399: if (getDelayOff_GO(sw) == 1) {
  7476  153E  0020               	movlb	0	; select bank0
  7477  153F  086D               	movf	setRFSW_Control@sw,w
  7478  1540  319C  2415  3195   	fcall	_getDelayOff_GO
  7479  1543  3A01               	xorlw	1
  7480  1544  1D03               	skipz
  7481  1545  2D4D               	goto	l9217
  7482                           
  7483                           ;RF_Control_B1.c: 400: setDelayOff_GO(sw, 0, 0);
  7484  1546  0020               	movlb	0	; select bank0
  7485  1547  01E6               	clrf	setDelayOff_GO@command
  7486  1548  01E7               	clrf	setDelayOff_GO@value
  7487  1549  086D               	movf	setRFSW_Control@sw,w
  7488  154A  3195  25FC  3195   	fcall	_setDelayOff_GO
  7489  154D                     l9217:	
  7490                           
  7491                           ;RF_Control_B1.c: 401: }
  7492                           ;RF_Control_B1.c: 403: }
  7493                           ;RF_Control_B1.c: 404: if (status == 0) {
  7494  154D  0020               	movlb	0	; select bank0
  7495  154E  08EC               	movf	setRFSW_Control@status,f
  7496  154F  1D03               	skipz
  7497  1550  0008               	return
  7498                           
  7499                           ;RF_Control_B1.c: 406: setDimmerLights_SwOn(sw);
  7500  1551  086D               	movf	setRFSW_Control@sw,w
  7501  1552  3188  2086  3195   	fcall	_setDimmerLights_SwOn
  7502                           
  7503                           ;RF_Control_B1.c: 407: setDimmerLights_SwOff(sw);
  7504  1555  0020               	movlb	0	; select bank0
  7505  1556  086D               	movf	setRFSW_Control@sw,w
  7506  1557  3194  24BC         	fcall	_setDimmerLights_SwOff
  7507  1559  0008               	return
  7508  155A                     __end_of_setRFSW_Control:	
  7509                           
  7510                           	psect	text28
  7511  0886                     __ptext28:	
  7512 ;; *************** function _setDimmerLights_SwOn *****************
  7513 ;; Defined at:
  7514 ;;		line 405 in file "../src/Dimmer_B1.c"
  7515 ;; Parameters:    Size  Location     Type
  7516 ;;  sw              1    wreg     unsigned char 
  7517 ;; Auto vars:     Size  Location     Type
  7518 ;;  sw              1   17[BANK0 ] unsigned char 
  7519 ;;  idle            1   16[BANK0 ] unsigned char 
  7520 ;; Return value:  Size  Location     Type
  7521 ;;		None               void
  7522 ;; Registers used:
  7523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;Total ram usage:        5 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    7
  7536 ;; This function calls:
  7537 ;;		_DimmerLightsPointSelect
  7538 ;;		_setBuz
  7539 ;; This function is called by:
  7540 ;;		_setRFSW_Control
  7541 ;;		_setSw_Main
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           
  7546                           ;psect for function _setDimmerLights_SwOn
  7547  0886                     _setDimmerLights_SwOn:	
  7548                           
  7549                           ;incstack = 0
  7550                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7551                           ;setDimmerLights_SwOn@sw stored from wreg
  7552  0886  0020               	movlb	0	; select bank0
  7553  0887  00B1               	movwf	setDimmerLights_SwOn@sw
  7554                           
  7555                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7556  0888  0831               	movf	setDimmerLights_SwOn@sw,w
  7557  0889  319C  24B2  3188   	fcall	_DimmerLightsPointSelect
  7558                           
  7559                           ;Dimmer_B1.c: 407: char idle = 0;
  7560  088C  0020               	movlb	0	; select bank0
  7561  088D  01B0               	clrf	setDimmerLights_SwOn@idle
  7562                           
  7563                           ;Dimmer_B1.c: 410: if (idle == 0) {
  7564  088E  08B0               	movf	setDimmerLights_SwOn@idle,f
  7565  088F  1D03               	skipz
  7566  0890  28B1               	goto	l9001
  7567                           
  7568                           ;Dimmer_B1.c: 411: if (sw == 1) {
  7569  0891  0831               	movf	setDimmerLights_SwOn@sw,w
  7570  0892  3A01               	xorlw	1
  7571  0893  1D03               	skipz
  7572  0894  28A0               	goto	l8991
  7573                           
  7574                           ;Dimmer_B1.c: 412: idle = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1 
      +                          : 0;
  7575  0895  01AE               	clrf	_setDimmerLights_SwOn$2310
  7576  0896  0AAE               	incf	_setDimmerLights_SwOn$2310,f
  7577  0897  0023               	movlb	3	; select bank3
  7578  0898  1DC8               	btfss	(_DimmerLights2^(0+384)+10),3	;volatile
  7579  0899  1B3F               	btfsc	(_DimmerLights2^(0+384)+1),6	;volatile
  7580  089A  289D               	goto	l8989
  7581  089B  0020               	movlb	0	; select bank0
  7582  089C  01AE               	clrf	_setDimmerLights_SwOn$2310
  7583  089D                     l8989:	
  7584  089D  0020               	movlb	0	; select bank0
  7585  089E  082E               	movf	_setDimmerLights_SwOn$2310,w
  7586  089F  28AE               	goto	L3
  7587  08A0                     l8991:	
  7588                           ;Dimmer_B1.c: 413: } else if (sw == 2) {
  7589                           
  7590  08A0  0831               	movf	setDimmerLights_SwOn@sw,w
  7591  08A1  3A02               	xorlw	2
  7592  08A2  1D03               	skipz
  7593  08A3  28B1               	goto	l9001
  7594                           
  7595                           ;Dimmer_B1.c: 414: idle = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1 
      +                          : 0;
  7596  08A4  01AF               	clrf	_setDimmerLights_SwOn$2311
  7597  08A5  0AAF               	incf	_setDimmerLights_SwOn$2311,f
  7598  08A6  0022               	movlb	2	; select bank2
  7599  08A7  1DDF               	btfss	(_DimmerLights1^(0+256)+10),3	;volatile
  7600  08A8  1B56               	btfsc	(_DimmerLights1^(0+256)+1),6	;volatile
  7601  08A9  28AC               	goto	l8999
  7602  08AA  0020               	movlb	0	; select bank0
  7603  08AB  01AF               	clrf	_setDimmerLights_SwOn$2311
  7604  08AC                     l8999:	
  7605  08AC  0020               	movlb	0	; select bank0
  7606  08AD  082F               	movf	_setDimmerLights_SwOn$2311,w
  7607  08AE                     L3:	
  7608  08AE  00AD               	movwf	??_setDimmerLights_SwOn
  7609  08AF  082D               	movf	??_setDimmerLights_SwOn,w
  7610  08B0  00B0               	movwf	setDimmerLights_SwOn@idle
  7611  08B1                     l9001:	
  7612                           
  7613                           ;Dimmer_B1.c: 415: }
  7614                           ;Dimmer_B1.c: 416: }
  7615                           ;Dimmer_B1.c: 436: if (idle == 0) {
  7616  08B1  08B0               	movf	setDimmerLights_SwOn@idle,f
  7617  08B2  1D03               	skipz
  7618  08B3  0008               	return
  7619                           
  7620                           ;Dimmer_B1.c: 437: DimmerLights->SwFlag = 1;
  7621  08B4  086F               	movf	_DimmerLights,w
  7622  08B5  3E0B               	addlw	11
  7623  08B6  0086               	movwf	6
  7624  08B7  3001               	movlw	1	; select bank2/3
  7625  08B8  0087               	movwf	7
  7626  08B9  1481               	bsf	1,1
  7627                           
  7628                           ;Dimmer_B1.c: 438: if (DimmerLights->Status == 0) {
  7629  08BA  086F               	movf	_DimmerLights,w
  7630  08BB  3E02               	addlw	2
  7631  08BC  0086               	movwf	6
  7632  08BD  3001               	movlw	1	; select bank2/3
  7633  08BE  0087               	movwf	7
  7634  08BF  1881               	btfsc	1,1
  7635  08C0  28D4               	goto	l9007
  7636                           
  7637                           ;Dimmer_B1.c: 439: DimmerLights->Status = 1;
  7638  08C1  086F               	movf	_DimmerLights,w
  7639  08C2  3E02               	addlw	2
  7640  08C3  0086               	movwf	6
  7641  08C4  3001               	movlw	1	; select bank2/3
  7642  08C5  0087               	movwf	7
  7643  08C6  1481               	bsf	1,1
  7644                           
  7645                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
  7646  08C7  086F               	movf	_DimmerLights,w
  7647  08C8  3E0A               	addlw	10
  7648  08C9  0086               	movwf	6
  7649  08CA  3001               	movlw	1	; select bank2/3
  7650  08CB  0087               	movwf	7
  7651  08CC  1481               	bsf	1,1
  7652                           
  7653                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 1;
  7654  08CD  086F               	movf	_DimmerLights,w
  7655  08CE  3E0A               	addlw	10
  7656  08CF  0086               	movwf	6
  7657  08D0  3001               	movlw	1	; select bank2/3
  7658  08D1  0087               	movwf	7
  7659  08D2  1401               	bsf	1,0
  7660                           
  7661                           ;Dimmer_B1.c: 442: } else {
  7662  08D3  28DA               	goto	l9009
  7663  08D4                     l9007:	
  7664                           
  7665                           ;Dimmer_B1.c: 443: DimmerLights->Status = 0;
  7666  08D4  086F               	movf	_DimmerLights,w
  7667  08D5  3E02               	addlw	2
  7668  08D6  0086               	movwf	6
  7669  08D7  3001               	movlw	1	; select bank2/3
  7670  08D8  0087               	movwf	7
  7671  08D9  1081               	bcf	1,1
  7672  08DA                     l9009:	
  7673                           
  7674                           ;Dimmer_B1.c: 444: }
  7675                           ;Dimmer_B1.c: 445: setBuz(1, 100);
  7676  08DA  3064               	movlw	100
  7677  08DB  00A9               	movwf	setBuz@time
  7678  08DC  3000               	movlw	0
  7679  08DD  00AA               	movwf	setBuz@time+1
  7680  08DE  3001               	movlw	1
  7681  08DF  3197  274E         	fcall	_setBuz
  7682  08E1  0008               	return
  7683  08E2                     __end_of_setDimmerLights_SwOn:	
  7684                           
  7685                           	psect	text29
  7686  1323                     __ptext29:	
  7687 ;; *************** function _setRFSW_AdjControl *****************
  7688 ;; Defined at:
  7689 ;;		line 413 in file "../src/RF_Control_B1.c"
  7690 ;; Parameters:    Size  Location     Type
  7691 ;;  sw              1    wreg     unsigned char 
  7692 ;; Auto vars:     Size  Location     Type
  7693 ;;  sw              1   75[BANK0 ] unsigned char 
  7694 ;;  status          1   74[BANK0 ] unsigned char 
  7695 ;; Return value:  Size  Location     Type
  7696 ;;		None               void
  7697 ;; Registers used:
  7698 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7699 ;; Tracked objects:
  7700 ;;		On entry : 0/0
  7701 ;;		On exit  : 0/0
  7702 ;;		Unchanged: 0/0
  7703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;Total ram usage:        4 bytes
  7709 ;; Hardware stack levels used:    1
  7710 ;; Hardware stack levels required when called:   10
  7711 ;; This function calls:
  7712 ;;		_getDimmerLights_Status
  7713 ;;		_setMemory_Modify
  7714 ;;		_setProductData
  7715 ;;		_setRF_DimmerValue
  7716 ;;		_setTxData
  7717 ;; This function is called by:
  7718 ;;		_setControl_Lights_Table
  7719 ;; This function uses a non-reentrant model
  7720 ;;
  7721                           
  7722                           
  7723                           ;psect for function _setRFSW_AdjControl
  7724  1323                     _setRFSW_AdjControl:	
  7725                           
  7726                           ;incstack = 0
  7727                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7728                           ;setRFSW_AdjControl@sw stored from wreg
  7729  1323  0020               	movlb	0	; select bank0
  7730  1324  00EB               	movwf	setRFSW_AdjControl@sw
  7731                           
  7732                           ;RF_Control_B1.c: 414: char status = 0;
  7733  1325  01EA               	clrf	setRFSW_AdjControl@status
  7734                           
  7735                           ;RF_Control_B1.c: 416: status = getDimmerLights_Status(sw);
  7736  1326  086B               	movf	setRFSW_AdjControl@sw,w
  7737  1327  319C  2425  3193   	fcall	_getDimmerLights_Status
  7738  132A  0020               	movlb	0	; select bank0
  7739  132B  00E8               	movwf	??_setRFSW_AdjControl
  7740  132C  0868               	movf	??_setRFSW_AdjControl,w
  7741  132D  00EA               	movwf	setRFSW_AdjControl@status
  7742                           
  7743                           ;RF_Control_B1.c: 419: if (status == 1) {
  7744  132E  086A               	movf	setRFSW_AdjControl@status,w
  7745  132F  3A01               	xorlw	1
  7746  1330  1D03               	skipz
  7747  1331  2B3C               	goto	l9231
  7748                           
  7749                           ;RF_Control_B1.c: 420: setMemory_Modify(1);
  7750  1332  3001               	movlw	1
  7751  1333  319C  24EB  3193   	fcall	_setMemory_Modify
  7752                           
  7753                           ;RF_Control_B1.c: 421: setRF_DimmerValue(sw);
  7754  1336  0020               	movlb	0	; select bank0
  7755  1337  086B               	movf	setRFSW_AdjControl@sw,w
  7756  1338  3191  2139  3193   	fcall	_setRF_DimmerValue
  7757                           
  7758                           ;RF_Control_B1.c: 422: } else {
  7759  133B  2B4D               	goto	l2339
  7760  133C                     l9231:	
  7761                           
  7762                           ;RF_Control_B1.c: 423: setProductData(9, product->Data[20 + sw]);
  7763  133C  0020               	movlb	0	; select bank0
  7764  133D  086B               	movf	setRFSW_AdjControl@sw,w
  7765  133E  3E14               	addlw	20
  7766  133F  0779               	addwf	_product,w
  7767  1340  00E8               	movwf	??_setRFSW_AdjControl
  7768  1341  0868               	movf	??_setRFSW_AdjControl,w
  7769  1342  0086               	movwf	6
  7770  1343  3002               	movlw	2	; select bank4/5
  7771  1344  0087               	movwf	7
  7772  1345  0801               	movf	1,w
  7773  1346  00E9               	movwf	??_setRFSW_AdjControl+1
  7774  1347  0869               	movf	??_setRFSW_AdjControl+1,w
  7775  1348  00E2               	movwf	setProductData@value
  7776  1349  3009               	movlw	9
  7777  134A  319B  23E9  3193   	fcall	_setProductData
  7778  134D                     l2339:	
  7779                           
  7780                           ;RF_Control_B1.c: 424: }
  7781                           ;RF_Control_B1.c: 425: setProductData(17, product->Data[26 + sw]);
  7782  134D  0020               	movlb	0	; select bank0
  7783  134E  086B               	movf	setRFSW_AdjControl@sw,w
  7784  134F  3E1A               	addlw	26
  7785  1350  0779               	addwf	_product,w
  7786  1351  00E8               	movwf	??_setRFSW_AdjControl
  7787  1352  0868               	movf	??_setRFSW_AdjControl,w
  7788  1353  0086               	movwf	6
  7789  1354  3002               	movlw	2	; select bank4/5
  7790  1355  0087               	movwf	7
  7791  1356  0801               	movf	1,w
  7792  1357  00E9               	movwf	??_setRFSW_AdjControl+1
  7793  1358  0869               	movf	??_setRFSW_AdjControl+1,w
  7794  1359  00E2               	movwf	setProductData@value
  7795  135A  3011               	movlw	17
  7796  135B  319B  23E9  3193   	fcall	_setProductData
  7797                           
  7798                           ;RF_Control_B1.c: 426: setTxData();
  7799  135E  318E  260C         	fcall	_setTxData
  7800  1360  0008               	return
  7801  1361                     __end_of_setRFSW_AdjControl:	
  7802                           
  7803                           	psect	text30
  7804  1139                     __ptext30:	
  7805 ;; *************** function _setRF_DimmerValue *****************
  7806 ;; Defined at:
  7807 ;;		line 431 in file "../src/RF_Control_B1.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;  lights          1    wreg     unsigned char 
  7810 ;; Auto vars:     Size  Location     Type
  7811 ;;  lights          1   71[BANK0 ] unsigned char 
  7812 ;; Return value:  Size  Location     Type
  7813 ;;		None               void
  7814 ;; Registers used:
  7815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7822 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7823 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7824 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;Total ram usage:        2 bytes
  7826 ;; Hardware stack levels used:    1
  7827 ;; Hardware stack levels required when called:    9
  7828 ;; This function calls:
  7829 ;;		_setDimmerLights_AdjRF
  7830 ;;		_setProductData
  7831 ;; This function is called by:
  7832 ;;		_setRFSW_AdjControl
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           
  7837                           ;psect for function _setRF_DimmerValue
  7838  1139                     _setRF_DimmerValue:	
  7839                           
  7840                           ;incstack = 0
  7841                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7842                           ;setRF_DimmerValue@lights stored from wreg
  7843  1139  0020               	movlb	0	; select bank0
  7844  113A  00E7               	movwf	setRF_DimmerValue@lights
  7845                           
  7846                           ;RF_Control_B1.c: 432: if (RF_Data[9] > 0x64) {
  7847  113B  3065               	movlw	101
  7848  113C  0023               	movlb	3	; select bank3
  7849  113D  0229               	subwf	(_RF_Data^(0+384)+9),w
  7850  113E  1C03               	skipc
  7851  113F  2946               	goto	l9103
  7852                           
  7853                           ;RF_Control_B1.c: 433: RF_Data[9] = 0x64;
  7854  1140  3064               	movlw	100
  7855  1141  0020               	movlb	0	; select bank0
  7856  1142  00E6               	movwf	??_setRF_DimmerValue
  7857  1143  0866               	movf	??_setRF_DimmerValue,w
  7858  1144  0023               	movlb	3	; select bank3
  7859  1145  00A9               	movwf	(_RF_Data^(0+384)+9)
  7860  1146                     l9103:	
  7861                           
  7862                           ;RF_Control_B1.c: 434: }
  7863                           ;RF_Control_B1.c: 435: setProductData(9, RF_Data[9]);
  7864  1146  0829               	movf	(_RF_Data^(0+384)+9),w
  7865  1147  0020               	movlb	0	; select bank0
  7866  1148  00E6               	movwf	??_setRF_DimmerValue
  7867  1149  0866               	movf	??_setRF_DimmerValue,w
  7868  114A  00E2               	movwf	setProductData@value
  7869  114B  3009               	movlw	9
  7870  114C  319B  23E9  3191   	fcall	_setProductData
  7871                           
  7872                           ;RF_Control_B1.c: 436: setProductData(11, lights);
  7873  114F  0020               	movlb	0	; select bank0
  7874  1150  0867               	movf	setRF_DimmerValue@lights,w
  7875  1151  00E6               	movwf	??_setRF_DimmerValue
  7876  1152  0866               	movf	??_setRF_DimmerValue,w
  7877  1153  00E2               	movwf	setProductData@value
  7878  1154  300B               	movlw	11
  7879  1155  319B  23E9  3191   	fcall	_setProductData
  7880                           
  7881                           ;RF_Control_B1.c: 437: setProductData((20 + lights), RF_Data[9]);
  7882  1158  0023               	movlb	3	; select bank3
  7883  1159  0829               	movf	(_RF_Data^(0+384)+9),w
  7884  115A  0020               	movlb	0	; select bank0
  7885  115B  00E6               	movwf	??_setRF_DimmerValue
  7886  115C  0866               	movf	??_setRF_DimmerValue,w
  7887  115D  00E2               	movwf	setProductData@value
  7888  115E  0867               	movf	setRF_DimmerValue@lights,w
  7889  115F  3E14               	addlw	20
  7890  1160  319B  23E9  3191   	fcall	_setProductData
  7891                           
  7892                           ;RF_Control_B1.c: 438: setDimmerLights_AdjRF(lights);
  7893  1163  0020               	movlb	0	; select bank0
  7894  1164  0867               	movf	setRF_DimmerValue@lights,w
  7895  1165  3190  2066         	fcall	_setDimmerLights_AdjRF
  7896  1167  0008               	return
  7897  1168                     __end_of_setRF_DimmerValue:	
  7898                           
  7899                           	psect	text31
  7900  1066                     __ptext31:	
  7901 ;; *************** function _setDimmerLights_AdjRF *****************
  7902 ;; Defined at:
  7903 ;;		line 903 in file "../src/Dimmer_B1.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;  lights          1    wreg     unsigned char 
  7906 ;; Auto vars:     Size  Location     Type
  7907 ;;  lights          1   67[BANK0 ] unsigned char 
  7908 ;; Return value:  Size  Location     Type
  7909 ;;		None               void
  7910 ;; Registers used:
  7911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7912 ;; Tracked objects:
  7913 ;;		On entry : 0/0
  7914 ;;		On exit  : 0/0
  7915 ;;		Unchanged: 0/0
  7916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;Total ram usage:        2 bytes
  7922 ;; Hardware stack levels used:    1
  7923 ;; Hardware stack levels required when called:    8
  7924 ;; This function calls:
  7925 ;;		_DimmerLightsPointSelect
  7926 ;;		_getPercentValue
  7927 ;; This function is called by:
  7928 ;;		_setRF_DimmerValue
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           
  7933                           ;psect for function _setDimmerLights_AdjRF
  7934  1066                     _setDimmerLights_AdjRF:	
  7935                           
  7936                           ;incstack = 0
  7937                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7938                           ;setDimmerLights_AdjRF@lights stored from wreg
  7939  1066  0020               	movlb	0	; select bank0
  7940  1067  00E3               	movwf	setDimmerLights_AdjRF@lights
  7941                           
  7942                           ;Dimmer_B1.c: 905: DimmerLightsPointSelect(lights);
  7943  1068  0863               	movf	setDimmerLights_AdjRF@lights,w
  7944  1069  319C  24B2  3190   	fcall	_DimmerLightsPointSelect
  7945                           
  7946                           ;Dimmer_B1.c: 906: DimmerLights->AdjRF = 1;
  7947  106C  0020               	movlb	0	; select bank0
  7948  106D  086F               	movf	_DimmerLights,w
  7949  106E  3E02               	addlw	2
  7950  106F  0086               	movwf	6
  7951  1070  3001               	movlw	1	; select bank2/3
  7952  1071  0087               	movwf	7
  7953  1072  1401               	bsf	1,0
  7954                           
  7955                           ;Dimmer_B1.c: 907: DimmerLights->Signal = 1;
  7956  1073  0A6F               	incf	_DimmerLights,w
  7957  1074  0086               	movwf	6
  7958  1075  3001               	movlw	1	; select bank2/3
  7959  1076  0087               	movwf	7
  7960  1077  1681               	bsf	1,5
  7961                           
  7962                           ;Dimmer_B1.c: 908: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7963  1078  0879               	movf	_product,w
  7964  1079  3E09               	addlw	9
  7965  107A  0086               	movwf	6
  7966  107B  3002               	movlw	2	; select bank4/5
  7967  107C  0087               	movwf	7
  7968  107D  0801               	movf	1,w
  7969  107E  318A  22CB         	fcall	_getPercentValue
  7970  1080  0020               	movlb	0	; select bank0
  7971  1081  00E2               	movwf	??_setDimmerLights_AdjRF
  7972  1082  086F               	movf	_DimmerLights,w
  7973  1083  3E06               	addlw	6
  7974  1084  0086               	movwf	6
  7975  1085  3001               	movlw	1	; select bank2/3
  7976  1086  0087               	movwf	7
  7977  1087  0862               	movf	??_setDimmerLights_AdjRF,w
  7978  1088  0081               	movwf	1
  7979  1089  0008               	return
  7980  108A                     __end_of_setDimmerLights_AdjRF:	
  7981                           
  7982                           	psect	text32
  7983  0ACB                     __ptext32:	
  7984 ;; *************** function _getPercentValue *****************
  7985 ;; Defined at:
  7986 ;;		line 1018 in file "../src/Dimmer_B1.c"
  7987 ;; Parameters:    Size  Location     Type
  7988 ;;  value           1    wreg     unsigned char 
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;  value           1   62[BANK0 ] unsigned char 
  7991 ;;  i               3   63[BANK0 ] float 
  7992 ;; Return value:  Size  Location     Type
  7993 ;;                  1    wreg      unsigned char 
  7994 ;; Registers used:
  7995 ;;		wreg, status,2, status,0, pclath, cstack
  7996 ;; Tracked objects:
  7997 ;;		On entry : 0/0
  7998 ;;		On exit  : 0/0
  7999 ;;		Unchanged: 0/0
  8000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;Total ram usage:        6 bytes
  8006 ;; Hardware stack levels used:    1
  8007 ;; Hardware stack levels required when called:    7
  8008 ;; This function calls:
  8009 ;;		___awtoft
  8010 ;;		___ftadd
  8011 ;;		___ftdiv
  8012 ;;		___ftmul
  8013 ;;		___ftneg
  8014 ;;		___fttol
  8015 ;; This function is called by:
  8016 ;;		_setDimmerLights_AdjRF
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           
  8021                           ;psect for function _getPercentValue
  8022  0ACB                     _getPercentValue:	
  8023                           
  8024                           ;incstack = 0
  8025                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8026                           ;getPercentValue@value stored from wreg
  8027  0ACB  0020               	movlb	0	; select bank0
  8028  0ACC  00DE               	movwf	getPercentValue@value
  8029                           
  8030                           ;Dimmer_B1.c: 1026: float i = ((char)(70*0.8)) - ((char)(15*0.8));
  8031  0ACD  3000               	movlw	0
  8032  0ACE  00DF               	movwf	getPercentValue@i
  8033  0ACF  3030               	movlw	48
  8034  0AD0  00E0               	movwf	getPercentValue@i+1
  8035  0AD1  3042               	movlw	66
  8036  0AD2  00E1               	movwf	getPercentValue@i+2
  8037                           
  8038                           ;Dimmer_B1.c: 1027: i /= 100;
  8039  0AD3  3000               	movlw	0
  8040  0AD4  00AE               	movwf	___ftdiv@f2
  8041  0AD5  30C8               	movlw	200
  8042  0AD6  00AF               	movwf	___ftdiv@f2+1
  8043  0AD7  3042               	movlw	66
  8044  0AD8  00B0               	movwf	___ftdiv@f2+2
  8045  0AD9  085F               	movf	getPercentValue@i,w
  8046  0ADA  00B1               	movwf	___ftdiv@f1
  8047  0ADB  0860               	movf	getPercentValue@i+1,w
  8048  0ADC  00B2               	movwf	___ftdiv@f1+1
  8049  0ADD  0861               	movf	getPercentValue@i+2,w
  8050  0ADE  00B3               	movwf	___ftdiv@f1+2
  8051  0ADF  318E  26A7  318A   	fcall	___ftdiv
  8052  0AE2  0020               	movlb	0	; select bank0
  8053  0AE3  082E               	movf	?___ftdiv,w
  8054  0AE4  00DF               	movwf	getPercentValue@i
  8055  0AE5  082F               	movf	?___ftdiv+1,w
  8056  0AE6  00E0               	movwf	getPercentValue@i+1
  8057  0AE7  0830               	movf	?___ftdiv+2,w
  8058  0AE8  00E1               	movwf	getPercentValue@i+2
  8059                           
  8060                           ;Dimmer_B1.c: 1029: return (char) (((char)(70*0.8)) - ((100 - value) * i));
  8061  0AE9  085E               	movf	getPercentValue@value,w
  8062  0AEA  00DC               	movwf	??_getPercentValue
  8063  0AEB  01DD               	clrf	??_getPercentValue+1
  8064  0AEC  09DC               	comf	??_getPercentValue,f
  8065  0AED  09DD               	comf	??_getPercentValue+1,f
  8066  0AEE  0ADC               	incf	??_getPercentValue,f
  8067  0AEF  1903               	skipnz
  8068  0AF0  0ADD               	incf	??_getPercentValue+1,f
  8069  0AF1  085C               	movf	??_getPercentValue,w
  8070  0AF2  3E64               	addlw	100
  8071  0AF3  00A8               	movwf	___awtoft@c
  8072  0AF4  3000               	movlw	0
  8073  0AF5  3D5D               	addwfc	??_getPercentValue+1,w
  8074  0AF6  00A9               	movwf	___awtoft@c+1
  8075  0AF7  319F  2770  318A   	fcall	___awtoft
  8076  0AFA  0020               	movlb	0	; select bank0
  8077  0AFB  0828               	movf	?___awtoft,w
  8078  0AFC  00B1               	movwf	___ftmul@f2
  8079  0AFD  0829               	movf	?___awtoft+1,w
  8080  0AFE  00B2               	movwf	___ftmul@f2+1
  8081  0AFF  082A               	movf	?___awtoft+2,w
  8082  0B00  00B3               	movwf	___ftmul@f2+2
  8083  0B01  085F               	movf	getPercentValue@i,w
  8084  0B02  00AE               	movwf	___ftmul@f1
  8085  0B03  0860               	movf	getPercentValue@i+1,w
  8086  0B04  00AF               	movwf	___ftmul@f1+1
  8087  0B05  0861               	movf	getPercentValue@i+2,w
  8088  0B06  00B0               	movwf	___ftmul@f1+2
  8089  0B07  3187  271B  318A   	fcall	___ftmul
  8090  0B0A  0020               	movlb	0	; select bank0
  8091  0B0B  082E               	movf	?___ftmul,w
  8092  0B0C  00BE               	movwf	___ftneg@f1
  8093  0B0D  082F               	movf	?___ftmul+1,w
  8094  0B0E  00BF               	movwf	___ftneg@f1+1
  8095  0B0F  0830               	movf	?___ftmul+2,w
  8096  0B10  00C0               	movwf	___ftneg@f1+2
  8097  0B11  319B  2354  318A   	fcall	___ftneg
  8098  0B14  0020               	movlb	0	; select bank0
  8099  0B15  083E               	movf	?___ftneg,w
  8100  0B16  00C4               	movwf	___ftadd@f2
  8101  0B17  083F               	movf	?___ftneg+1,w
  8102  0B18  00C5               	movwf	___ftadd@f2+1
  8103  0B19  0840               	movf	?___ftneg+2,w
  8104  0B1A  00C6               	movwf	___ftadd@f2+2
  8105  0B1B  3000               	movlw	0
  8106  0B1C  00C1               	movwf	___ftadd@f1
  8107  0B1D  3060               	movlw	96
  8108  0B1E  00C2               	movwf	___ftadd@f1+1
  8109  0B1F  3042               	movlw	66
  8110  0B20  00C3               	movwf	___ftadd@f1+2
  8111  0B21  3184  2469  318A   	fcall	___ftadd
  8112  0B24  0020               	movlb	0	; select bank0
  8113  0B25  0841               	movf	?___ftadd,w
  8114  0B26  00CE               	movwf	___fttol@f1
  8115  0B27  0842               	movf	?___ftadd+1,w
  8116  0B28  00CF               	movwf	___fttol@f1+1
  8117  0B29  0843               	movf	?___ftadd+2,w
  8118  0B2A  00D0               	movwf	___fttol@f1+2
  8119  0B2B  318D  2585         	fcall	___fttol
  8120  0B2D  0020               	movlb	0	; select bank0
  8121  0B2E  084E               	movf	?___fttol,w
  8122  0B2F  0008               	return
  8123  0B30                     __end_of_getPercentValue:	
  8124                           
  8125                           	psect	text33
  8126  071B                     __ptext33:	
  8127 ;; *************** function ___ftmul *****************
  8128 ;; Defined at:
  8129 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;  f1              3   14[BANK0 ] float 
  8132 ;;  f2              3   17[BANK0 ] float 
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8135 ;;  sign            1   29[BANK0 ] unsigned char 
  8136 ;;  cntr            1   28[BANK0 ] unsigned char 
  8137 ;;  exp             1   24[BANK0 ] unsigned char 
  8138 ;; Return value:  Size  Location     Type
  8139 ;;                  3   14[BANK0 ] float 
  8140 ;; Registers used:
  8141 ;;		wreg, status,2, status,0, pclath, cstack
  8142 ;; Tracked objects:
  8143 ;;		On entry : 0/0
  8144 ;;		On exit  : 0/0
  8145 ;;		Unchanged: 0/0
  8146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8147 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8149 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8150 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8151 ;;Total ram usage:       16 bytes
  8152 ;; Hardware stack levels used:    1
  8153 ;; Hardware stack levels required when called:    6
  8154 ;; This function calls:
  8155 ;;		___ftpack
  8156 ;; This function is called by:
  8157 ;;		_getPercentValue
  8158 ;; This function uses a non-reentrant model
  8159 ;;
  8160                           
  8161                           
  8162                           ;psect for function ___ftmul
  8163  071B                     ___ftmul:	
  8164                           
  8165                           ;incstack = 0
  8166                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8167  071B  0020               	movlb	0	; select bank0
  8168  071C  082E               	movf	___ftmul@f1,w
  8169  071D  00B4               	movwf	??___ftmul
  8170  071E  082F               	movf	___ftmul@f1+1,w
  8171  071F  00B5               	movwf	??___ftmul+1
  8172  0720  0830               	movf	___ftmul@f1+2,w
  8173  0721  00B6               	movwf	??___ftmul+2
  8174  0722  1003               	clrc
  8175  0723  0D35               	rlf	??___ftmul+1,w
  8176  0724  0D36               	rlf	??___ftmul+2,w
  8177  0725  00B7               	movwf	??___ftmul+3
  8178  0726  0837               	movf	??___ftmul+3,w
  8179  0727  00B8               	movwf	___ftmul@exp
  8180  0728  08B8               	movf	___ftmul@exp,f
  8181  0729  1D03               	skipz
  8182  072A  2F32               	goto	l8727
  8183  072B  3000               	movlw	0
  8184  072C  00AE               	movwf	?___ftmul
  8185  072D  3000               	movlw	0
  8186  072E  00AF               	movwf	?___ftmul+1
  8187  072F  3000               	movlw	0
  8188  0730  00B0               	movwf	?___ftmul+2
  8189  0731  0008               	return
  8190  0732                     l8727:	
  8191  0732  0831               	movf	___ftmul@f2,w
  8192  0733  00B4               	movwf	??___ftmul
  8193  0734  0832               	movf	___ftmul@f2+1,w
  8194  0735  00B5               	movwf	??___ftmul+1
  8195  0736  0833               	movf	___ftmul@f2+2,w
  8196  0737  00B6               	movwf	??___ftmul+2
  8197  0738  1003               	clrc
  8198  0739  0D35               	rlf	??___ftmul+1,w
  8199  073A  0D36               	rlf	??___ftmul+2,w
  8200  073B  00B7               	movwf	??___ftmul+3
  8201  073C  0837               	movf	??___ftmul+3,w
  8202  073D  00BD               	movwf	___ftmul@sign
  8203  073E  08BD               	movf	___ftmul@sign,f
  8204  073F  1D03               	skipz
  8205  0740  2F48               	goto	l8733
  8206  0741  3000               	movlw	0
  8207  0742  00AE               	movwf	?___ftmul
  8208  0743  3000               	movlw	0
  8209  0744  00AF               	movwf	?___ftmul+1
  8210  0745  3000               	movlw	0
  8211  0746  00B0               	movwf	?___ftmul+2
  8212  0747  0008               	return
  8213  0748                     l8733:	
  8214  0748  083D               	movf	___ftmul@sign,w
  8215  0749  3E7B               	addlw	123
  8216  074A  00B4               	movwf	??___ftmul
  8217  074B  0834               	movf	??___ftmul,w
  8218  074C  07B8               	addwf	___ftmul@exp,f
  8219  074D  082E               	movf	___ftmul@f1,w
  8220  074E  00B4               	movwf	??___ftmul
  8221  074F  082F               	movf	___ftmul@f1+1,w
  8222  0750  00B5               	movwf	??___ftmul+1
  8223  0751  0830               	movf	___ftmul@f1+2,w
  8224  0752  00B6               	movwf	??___ftmul+2
  8225  0753  3010               	movlw	16
  8226  0754                     u9305:	
  8227  0754  36B6               	lsrf	??___ftmul+2,f
  8228  0755  0CB5               	rrf	??___ftmul+1,f
  8229  0756  0CB4               	rrf	??___ftmul,f
  8230  0757  0B89               	decfsz	9,f
  8231  0758  2F54               	goto	u9305
  8232  0759  0834               	movf	??___ftmul,w
  8233  075A  00B7               	movwf	??___ftmul+3
  8234  075B  0837               	movf	??___ftmul+3,w
  8235  075C  00BD               	movwf	___ftmul@sign
  8236  075D  0831               	movf	___ftmul@f2,w
  8237  075E  00B4               	movwf	??___ftmul
  8238  075F  0832               	movf	___ftmul@f2+1,w
  8239  0760  00B5               	movwf	??___ftmul+1
  8240  0761  0833               	movf	___ftmul@f2+2,w
  8241  0762  00B6               	movwf	??___ftmul+2
  8242  0763  3010               	movlw	16
  8243  0764                     u9315:	
  8244  0764  36B6               	lsrf	??___ftmul+2,f
  8245  0765  0CB5               	rrf	??___ftmul+1,f
  8246  0766  0CB4               	rrf	??___ftmul,f
  8247  0767  0B89               	decfsz	9,f
  8248  0768  2F64               	goto	u9315
  8249  0769  0834               	movf	??___ftmul,w
  8250  076A  00B7               	movwf	??___ftmul+3
  8251  076B  0837               	movf	??___ftmul+3,w
  8252  076C  06BD               	xorwf	___ftmul@sign,f
  8253  076D  3080               	movlw	128
  8254  076E  00B4               	movwf	??___ftmul
  8255  076F  0834               	movf	??___ftmul,w
  8256  0770  05BD               	andwf	___ftmul@sign,f
  8257  0771  17AF               	bsf	___ftmul@f1+1,7
  8258  0772  17B2               	bsf	___ftmul@f2+1,7
  8259  0773  30FF               	movlw	255
  8260  0774  05B1               	andwf	___ftmul@f2,f
  8261  0775  30FF               	movlw	255
  8262  0776  05B2               	andwf	___ftmul@f2+1,f
  8263  0777  3000               	movlw	0
  8264  0778  05B3               	andwf	___ftmul@f2+2,f
  8265  0779  3000               	movlw	0
  8266  077A  00B9               	movwf	___ftmul@f3_as_product
  8267  077B  3000               	movlw	0
  8268  077C  00BA               	movwf	___ftmul@f3_as_product+1
  8269  077D  3000               	movlw	0
  8270  077E  00BB               	movwf	___ftmul@f3_as_product+2
  8271  077F  3007               	movlw	7
  8272  0780  00B4               	movwf	??___ftmul
  8273  0781  0834               	movf	??___ftmul,w
  8274  0782  00BC               	movwf	___ftmul@cntr
  8275  0783                     l8745:	
  8276  0783  1C2E               	btfss	___ftmul@f1,0
  8277  0784  2F8B               	goto	l8749
  8278  0785  0831               	movf	___ftmul@f2,w
  8279  0786  07B9               	addwf	___ftmul@f3_as_product,f
  8280  0787  0832               	movf	___ftmul@f2+1,w
  8281  0788  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8282  0789  0833               	movf	___ftmul@f2+2,w
  8283  078A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8284  078B                     l8749:	
  8285  078B  3001               	movlw	1
  8286  078C                     u9335:	
  8287  078C  36B0               	lsrf	___ftmul@f1+2,f
  8288  078D  0CAF               	rrf	___ftmul@f1+1,f
  8289  078E  0CAE               	rrf	___ftmul@f1,f
  8290  078F  0B89               	decfsz	9,f
  8291  0790  2F8C               	goto	u9335
  8292  0791  3001               	movlw	1
  8293  0792                     u9345:	
  8294  0792  35B1               	lslf	___ftmul@f2,f
  8295  0793  0DB2               	rlf	___ftmul@f2+1,f
  8296  0794  0DB3               	rlf	___ftmul@f2+2,f
  8297  0795  0B89               	decfsz	9,f
  8298  0796  2F92               	goto	u9345
  8299  0797  3001               	movlw	1
  8300  0798  02BC               	subwf	___ftmul@cntr,f
  8301  0799  1D03               	btfss	3,2
  8302  079A  2F83               	goto	l8745
  8303  079B  3009               	movlw	9
  8304  079C  00B4               	movwf	??___ftmul
  8305  079D  0834               	movf	??___ftmul,w
  8306  079E  00BC               	movwf	___ftmul@cntr
  8307  079F                     l8757:	
  8308  079F  1C2E               	btfss	___ftmul@f1,0
  8309  07A0  2FA7               	goto	l8761
  8310  07A1  0831               	movf	___ftmul@f2,w
  8311  07A2  07B9               	addwf	___ftmul@f3_as_product,f
  8312  07A3  0832               	movf	___ftmul@f2+1,w
  8313  07A4  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8314  07A5  0833               	movf	___ftmul@f2+2,w
  8315  07A6  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8316  07A7                     l8761:	
  8317  07A7  3001               	movlw	1
  8318  07A8                     u9375:	
  8319  07A8  36B0               	lsrf	___ftmul@f1+2,f
  8320  07A9  0CAF               	rrf	___ftmul@f1+1,f
  8321  07AA  0CAE               	rrf	___ftmul@f1,f
  8322  07AB  0B89               	decfsz	9,f
  8323  07AC  2FA8               	goto	u9375
  8324  07AD  3001               	movlw	1
  8325  07AE                     u9385:	
  8326  07AE  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8327  07AF  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8328  07B0  0CB9               	rrf	___ftmul@f3_as_product,f
  8329  07B1  0B89               	decfsz	9,f
  8330  07B2  2FAE               	goto	u9385
  8331  07B3  3001               	movlw	1
  8332  07B4  02BC               	subwf	___ftmul@cntr,f
  8333  07B5  1D03               	btfss	3,2
  8334  07B6  2F9F               	goto	l8757
  8335  07B7  0839               	movf	___ftmul@f3_as_product,w
  8336  07B8  00A0               	movwf	___ftpack@arg
  8337  07B9  083A               	movf	___ftmul@f3_as_product+1,w
  8338  07BA  00A1               	movwf	___ftpack@arg+1
  8339  07BB  083B               	movf	___ftmul@f3_as_product+2,w
  8340  07BC  00A2               	movwf	___ftpack@arg+2
  8341  07BD  0838               	movf	___ftmul@exp,w
  8342  07BE  00B4               	movwf	??___ftmul
  8343  07BF  0834               	movf	??___ftmul,w
  8344  07C0  00A3               	movwf	___ftpack@exp
  8345  07C1  083D               	movf	___ftmul@sign,w
  8346  07C2  00B5               	movwf	??___ftmul+1
  8347  07C3  0835               	movf	??___ftmul+1,w
  8348  07C4  00A4               	movwf	___ftpack@sign
  8349  07C5  3189  213F         	fcall	___ftpack
  8350  07C7  0020               	movlb	0	; select bank0
  8351  07C8  0820               	movf	?___ftpack,w
  8352  07C9  00AE               	movwf	?___ftmul
  8353  07CA  0821               	movf	?___ftpack+1,w
  8354  07CB  00AF               	movwf	?___ftmul+1
  8355  07CC  0822               	movf	?___ftpack+2,w
  8356  07CD  00B0               	movwf	?___ftmul+2
  8357  07CE  0008               	return
  8358  07CF                     __end_of___ftmul:	
  8359                           
  8360                           	psect	text34
  8361  1CEB                     __ptext34:	
  8362 ;; *************** function _setMemory_Modify *****************
  8363 ;; Defined at:
  8364 ;;		line 1064 in file "../src/MCU_B1.c"
  8365 ;; Parameters:    Size  Location     Type
  8366 ;;  command         1    wreg     unsigned char 
  8367 ;; Auto vars:     Size  Location     Type
  8368 ;;  command         1    1[BANK0 ] unsigned char 
  8369 ;; Return value:  Size  Location     Type
  8370 ;;		None               void
  8371 ;; Registers used:
  8372 ;;		wreg, status,2, status,0
  8373 ;; Tracked objects:
  8374 ;;		On entry : 0/0
  8375 ;;		On exit  : 0/0
  8376 ;;		Unchanged: 0/0
  8377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8381 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8382 ;;Total ram usage:        2 bytes
  8383 ;; Hardware stack levels used:    1
  8384 ;; Hardware stack levels required when called:    5
  8385 ;; This function calls:
  8386 ;;		Nothing
  8387 ;; This function is called by:
  8388 ;;		_setLog_Code
  8389 ;;		_setRFSW_AdjControl
  8390 ;; This function uses a non-reentrant model
  8391 ;;
  8392                           
  8393                           
  8394                           ;psect for function _setMemory_Modify
  8395  1CEB                     _setMemory_Modify:	
  8396                           
  8397                           ;incstack = 0
  8398                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8399                           ;setMemory_Modify@command stored from wreg
  8400  1CEB  0020               	movlb	0	; select bank0
  8401  1CEC  00A1               	movwf	setMemory_Modify@command
  8402                           
  8403                           ;MCU_B1.c: 1065: Memory.Modify = command == 1 ? 1 : 0;
  8404  1CED  0821               	movf	setMemory_Modify@command,w
  8405  1CEE  3A01               	xorlw	1
  8406  1CEF  3000               	movlw	0
  8407  1CF0  1903               	skipnz
  8408  1CF1  3001               	movlw	1
  8409  1CF2  00A0               	movwf	??_setMemory_Modify
  8410  1CF3  0024               	movlb	4	; select bank4
  8411  1CF4  0844               	movf	(_Memory^(0+512)+36),w
  8412  1CF5  0020               	movlb	0	; select bank0
  8413  1CF6  0620               	xorwf	??_setMemory_Modify,w
  8414  1CF7  39FE               	andlw	-2
  8415  1CF8  0620               	xorwf	??_setMemory_Modify,w
  8416  1CF9  0024               	movlb	4	; select bank4
  8417  1CFA  00C4               	movwf	(_Memory^(0+512)+36)
  8418                           
  8419                           ;MCU_B1.c: 1066: Memory.Time = 0;
  8420  1CFB  01C2               	clrf	(_Memory^(0+512)+34)
  8421  1CFC  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8422  1CFD  0008               	return
  8423  1CFE                     __end_of_setMemory_Modify:	
  8424                           
  8425                           	psect	text35
  8426  1C47                     __ptext35:	
  8427 ;; *************** function _getRF_KeyStatus *****************
  8428 ;; Defined at:
  8429 ;;		line 154 in file "../src/RF_Control_B1.c"
  8430 ;; Parameters:    Size  Location     Type
  8431 ;;		None
  8432 ;; Auto vars:     Size  Location     Type
  8433 ;;  key             1    1[BANK0 ] unsigned char 
  8434 ;; Return value:  Size  Location     Type
  8435 ;;                  1    wreg      unsigned char 
  8436 ;; Registers used:
  8437 ;;		wreg, status,2
  8438 ;; Tracked objects:
  8439 ;;		On entry : 0/0
  8440 ;;		On exit  : 0/0
  8441 ;;		Unchanged: 0/0
  8442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8444 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8445 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8446 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;Total ram usage:        3 bytes
  8448 ;; Hardware stack levels used:    1
  8449 ;; Hardware stack levels required when called:    5
  8450 ;; This function calls:
  8451 ;;		Nothing
  8452 ;; This function is called by:
  8453 ;;		_setRF_Main
  8454 ;; This function uses a non-reentrant model
  8455 ;;
  8456                           
  8457                           
  8458                           ;psect for function _getRF_KeyStatus
  8459  1C47                     _getRF_KeyStatus:	
  8460                           
  8461                           ;RF_Control_B1.c: 155: char key = 0;
  8462                           
  8463                           ;incstack = 0
  8464                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8465  1C47  0020               	movlb	0	; select bank0
  8466  1C48  01A1               	clrf	getRF_KeyStatus@key
  8467                           
  8468                           ;RF_Control_B1.c: 161: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8469  1C49  01A2               	clrf	_getRF_KeyStatus$5261
  8470  1C4A  0AA2               	incf	_getRF_KeyStatus$5261,f
  8471  1C4B  1F0C               	btfss	12,6	;volatile
  8472  1C4C  1A0C               	btfsc	12,4	;volatile
  8473  1C4D  2C52               	goto	l9723
  8474  1C4E  1C0C               	btfss	12,0	;volatile
  8475  1C4F  188D               	btfsc	13,1	;volatile
  8476  1C50  2C52               	goto	l9723
  8477  1C51  01A2               	clrf	_getRF_KeyStatus$5261
  8478  1C52                     l9723:	
  8479  1C52  0822               	movf	_getRF_KeyStatus$5261,w
  8480  1C53  00A0               	movwf	??_getRF_KeyStatus
  8481  1C54  0820               	movf	??_getRF_KeyStatus,w
  8482  1C55  00A1               	movwf	getRF_KeyStatus@key
  8483                           
  8484                           ;RF_Control_B1.c: 167: return key;
  8485  1C56  0821               	movf	getRF_KeyStatus@key,w
  8486  1C57  0008               	return
  8487  1C58                     __end_of_getRF_KeyStatus:	
  8488                           
  8489                           	psect	text36
  8490  1C36                     __ptext36:	
  8491 ;; *************** function _getBuz_GO *****************
  8492 ;; Defined at:
  8493 ;;		line 82 in file "../src/Buzzer_B1.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;		None
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;  i               2    4[BANK0 ] int 
  8498 ;; Return value:  Size  Location     Type
  8499 ;;                  2    0[BANK0 ] int 
  8500 ;; Registers used:
  8501 ;;		wreg, status,2, status,0
  8502 ;; Tracked objects:
  8503 ;;		On entry : 0/0
  8504 ;;		On exit  : 0/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8507 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8508 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8509 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8510 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;Total ram usage:        6 bytes
  8512 ;; Hardware stack levels used:    1
  8513 ;; Hardware stack levels required when called:    5
  8514 ;; This function calls:
  8515 ;;		Nothing
  8516 ;; This function is called by:
  8517 ;;		_setRF_Main
  8518 ;; This function uses a non-reentrant model
  8519 ;;
  8520                           
  8521                           
  8522                           ;psect for function _getBuz_GO
  8523  1C36                     _getBuz_GO:	
  8524                           
  8525                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8526                           
  8527                           ;incstack = 0
  8528                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8529  1C36  0021               	movlb	1	; select bank1
  8530  1C37  0C2E               	rrf	_Buz1^(0+128),w
  8531  1C38  3901               	andlw	1
  8532  1C39  0020               	movlb	0	; select bank0
  8533  1C3A  00A2               	movwf	??_getBuz_GO
  8534  1C3B  01A3               	clrf	??_getBuz_GO+1
  8535  1C3C  0822               	movf	??_getBuz_GO,w
  8536  1C3D  00A4               	movwf	getBuz_GO@i
  8537  1C3E  0823               	movf	??_getBuz_GO+1,w
  8538  1C3F  00A5               	movwf	getBuz_GO@i+1
  8539                           
  8540                           ;Buzzer_B1.c: 84: return i;
  8541  1C40  0825               	movf	getBuz_GO@i+1,w
  8542  1C41  01A1               	clrf	?_getBuz_GO+1
  8543  1C42  07A1               	addwf	?_getBuz_GO+1,f
  8544  1C43  0824               	movf	getBuz_GO@i,w
  8545  1C44  01A0               	clrf	?_getBuz_GO
  8546  1C45  07A0               	addwf	?_getBuz_GO,f
  8547  1C46  0008               	return
  8548  1C47                     __end_of_getBuz_GO:	
  8549                           
  8550                           	psect	text37
  8551  1CD8                     __ptext37:	
  8552 ;; *************** function _RF_RxDisable *****************
  8553 ;; Defined at:
  8554 ;;		line 230 in file "../src/RF_Control_B1.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;		None
  8557 ;; Auto vars:     Size  Location     Type
  8558 ;;		None
  8559 ;; Return value:  Size  Location     Type
  8560 ;;		None               void
  8561 ;; Registers used:
  8562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8563 ;; Tracked objects:
  8564 ;;		On entry : 0/0
  8565 ;;		On exit  : 0/0
  8566 ;;		Unchanged: 0/0
  8567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8572 ;;Total ram usage:        0 bytes
  8573 ;; Hardware stack levels used:    1
  8574 ;; Hardware stack levels required when called:    7
  8575 ;; This function calls:
  8576 ;;		_CC2500_WriteCommand
  8577 ;; This function is called by:
  8578 ;;		_setRF_Main
  8579 ;; This function uses a non-reentrant model
  8580 ;;
  8581                           
  8582                           
  8583                           ;psect for function _RF_RxDisable
  8584  1CD8                     _RF_RxDisable:	
  8585                           
  8586                           ;RF_Control_B1.c: 231: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8587                           
  8588                           ;incstack = 0
  8589                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8590  1CD8  0021               	movlb	1	; select bank1
  8591  1CD9  18BA               	btfsc	_RF1^(0+128),1
  8592  1CDA  2CDD               	goto	l2291
  8593  1CDB  1DBA               	btfss	_RF1^(0+128),3
  8594  1CDC  0008               	return
  8595  1CDD                     l2291:	
  8596                           
  8597                           ;RF_Control_B1.c: 232: RF1.RxStatus = 0;
  8598  1CDD  11BA               	bcf	_RF1^(0+128),3
  8599                           
  8600                           ;RF_Control_B1.c: 233: RF1.ReceiveGO = 0;
  8601  1CDE  10BA               	bcf	_RF1^(0+128),1
  8602                           
  8603                           ;RF_Control_B1.c: 234: CC2500_WriteCommand(0x36);
  8604  1CDF  3036               	movlw	54
  8605  1CE0  319E  2627  319C   	fcall	_CC2500_WriteCommand
  8606                           
  8607                           ;RF_Control_B1.c: 236: CC2500_WriteCommand(0x3A);
  8608  1CE3  303A               	movlw	58
  8609  1CE4  319E  2627  319C   	fcall	_CC2500_WriteCommand
  8610                           
  8611                           ;RF_Control_B1.c: 237: CC2500_WriteCommand(0x3B);
  8612  1CE7  303B               	movlw	59
  8613  1CE8  319E  2627         	fcall	_CC2500_WriteCommand
  8614  1CEA  0008               	return
  8615  1CEB                     __end_of_RF_RxDisable:	
  8616                           
  8617                           	psect	text38
  8618  0A02                     __ptext38:	
  8619 ;; *************** function _CC2500_TxData *****************
  8620 ;; Defined at:
  8621 ;;		line 32 in file "../src/CC2500_B1.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;		None
  8624 ;; Auto vars:     Size  Location     Type
  8625 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8626 ;; Return value:  Size  Location     Type
  8627 ;;		None               void
  8628 ;; Registers used:
  8629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8630 ;; Tracked objects:
  8631 ;;		On entry : 0/0
  8632 ;;		On exit  : 0/0
  8633 ;;		Unchanged: 0/0
  8634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8637 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8638 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8639 ;;Total ram usage:        2 bytes
  8640 ;; Hardware stack levels used:    1
  8641 ;; Hardware stack levels required when called:    7
  8642 ;; This function calls:
  8643 ;;		_CC2500_WriteByte
  8644 ;;		_CC2500_WriteCommand
  8645 ;;		_Timeout_Counter
  8646 ;;		_set_TimeoutCleared
  8647 ;; This function is called by:
  8648 ;;		_setRF_Main
  8649 ;; This function uses a non-reentrant model
  8650 ;;
  8651                           
  8652                           
  8653                           ;psect for function _CC2500_TxData
  8654  0A02                     _CC2500_TxData:	
  8655                           
  8656                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8657                           ;CC2500_B1.c: 35: RC4 = 0;
  8658                           
  8659                           ;incstack = 0
  8660                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8661  0A02  0020               	movlb	0	; select bank0
  8662  0A03  120E               	bcf	14,4	;volatile
  8663                           
  8664                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8665  0A04  307F               	movlw	127
  8666  0A05  00A4               	movwf	??_CC2500_TxData
  8667  0A06  0824               	movf	??_CC2500_TxData,w
  8668  0A07  0021               	movlb	1	; select bank1
  8669  0A08  00D0               	movwf	_SPI0Buffer^(0+128)
  8670                           
  8671                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8672  0A09  2A0D               	goto	l9447
  8673  0A0A                     l9445:	
  8674                           
  8675                           ;CC2500_B1.c: 38: Timeout_Counter();
  8676  0A0A  319D  259E  318A   	fcall	_Timeout_Counter
  8677  0A0D                     l9447:	
  8678  0A0D  0020               	movlb	0	; select bank0
  8679  0A0E  1D0E               	btfss	14,2	;volatile
  8680  0A0F  2A13               	goto	l9451
  8681  0A10  0021               	movlb	1	; select bank1
  8682  0A11  1D2B               	btfss	(_myMain^(0+128)+11),2
  8683  0A12  2A0A               	goto	l9445
  8684  0A13                     l9451:	
  8685                           
  8686                           ;CC2500_B1.c: 39: };
  8687                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8688  0A13  319A  22FE  318A   	fcall	_set_TimeoutCleared
  8689                           
  8690                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8691  0A16  319D  25F5  318A   	fcall	_CC2500_WriteByte
  8692                           
  8693                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8694  0A19  0021               	movlb	1	; select bank1
  8695  0A1A  0852               	movf	_Tx_Length^(0+128),w
  8696  0A1B  0020               	movlb	0	; select bank0
  8697  0A1C  00A4               	movwf	??_CC2500_TxData
  8698  0A1D  0824               	movf	??_CC2500_TxData,w
  8699  0A1E  0021               	movlb	1	; select bank1
  8700  0A1F  00D0               	movwf	_SPI0Buffer^(0+128)
  8701                           
  8702                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8703  0A20  319D  25F5  318A   	fcall	_CC2500_WriteByte
  8704                           
  8705                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8706  0A23  0020               	movlb	0	; select bank0
  8707  0A24  01A5               	clrf	CC2500_TxData@loop_e
  8708  0A25                     l9465:	
  8709  0A25  0021               	movlb	1	; select bank1
  8710  0A26  0852               	movf	_Tx_Length^(0+128),w
  8711  0A27  0020               	movlb	0	; select bank0
  8712  0A28  0225               	subwf	CC2500_TxData@loop_e,w
  8713  0A29  1803               	btfsc	3,0
  8714  0A2A  2A3E               	goto	l255
  8715                           
  8716                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8717  0A2B  0825               	movf	CC2500_TxData@loop_e,w
  8718  0A2C  3EA0               	addlw	_RF_Data& (0+255)
  8719  0A2D  0086               	movwf	6
  8720  0A2E  3001               	movlw	1	; select bank3/4
  8721  0A2F  0087               	movwf	7
  8722  0A30  0801               	movf	1,w
  8723  0A31  00A4               	movwf	??_CC2500_TxData
  8724  0A32  0824               	movf	??_CC2500_TxData,w
  8725  0A33  0021               	movlb	1	; select bank1
  8726  0A34  00D0               	movwf	_SPI0Buffer^(0+128)
  8727                           
  8728                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8729  0A35  319D  25F5  318A   	fcall	_CC2500_WriteByte
  8730  0A38  3001               	movlw	1
  8731  0A39  0020               	movlb	0	; select bank0
  8732  0A3A  00A4               	movwf	??_CC2500_TxData
  8733  0A3B  0824               	movf	??_CC2500_TxData,w
  8734  0A3C  07A5               	addwf	CC2500_TxData@loop_e,f
  8735  0A3D  2A25               	goto	l9465
  8736  0A3E                     l255:	
  8737                           
  8738                           ;CC2500_B1.c: 48: }
  8739                           ;CC2500_B1.c: 49: RC4 = 1;
  8740  0A3E  160E               	bsf	14,4	;volatile
  8741                           
  8742                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8743  0A3F  3035               	movlw	53
  8744  0A40  319E  2627  318A   	fcall	_CC2500_WriteCommand
  8745                           
  8746                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8747  0A43  2A47               	goto	l9471
  8748  0A44                     l9469:	
  8749                           
  8750                           ;CC2500_B1.c: 52: Timeout_Counter();
  8751  0A44  319D  259E  318A   	fcall	_Timeout_Counter
  8752  0A47                     l9471:	
  8753  0A47  0020               	movlb	0	; select bank0
  8754  0A48  180D               	btfsc	13,0	;volatile
  8755  0A49  2A4D               	goto	l9475
  8756  0A4A  0021               	movlb	1	; select bank1
  8757  0A4B  1D2B               	btfss	(_myMain^(0+128)+11),2
  8758  0A4C  2A44               	goto	l9469
  8759  0A4D                     l9475:	
  8760                           
  8761                           ;CC2500_B1.c: 53: };
  8762                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8763  0A4D  319A  22FE  318A   	fcall	_set_TimeoutCleared
  8764                           
  8765                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8766  0A50  2A54               	goto	l9479
  8767  0A51                     l9477:	
  8768                           
  8769                           ;CC2500_B1.c: 57: Timeout_Counter();
  8770  0A51  319D  259E  318A   	fcall	_Timeout_Counter
  8771  0A54                     l9479:	
  8772  0A54  0020               	movlb	0	; select bank0
  8773  0A55  1C0D               	btfss	13,0	;volatile
  8774  0A56  2A5A               	goto	l9483
  8775  0A57  0021               	movlb	1	; select bank1
  8776  0A58  1D2B               	btfss	(_myMain^(0+128)+11),2
  8777  0A59  2A51               	goto	l9477
  8778  0A5A                     l9483:	
  8779                           
  8780                           ;CC2500_B1.c: 58: };
  8781                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8782  0A5A  319A  22FE  318A   	fcall	_set_TimeoutCleared
  8783                           
  8784                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8785  0A5D  3036               	movlw	54
  8786  0A5E  319E  2627  318A   	fcall	_CC2500_WriteCommand
  8787                           
  8788                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8789  0A61  303B               	movlw	59
  8790  0A62  319E  2627         	fcall	_CC2500_WriteCommand
  8791                           
  8792                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8793  0A64  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8794  0A65  0008               	return
  8795  0A66                     __end_of_CC2500_TxData:	
  8796                           
  8797                           	psect	text39
  8798  0B97                     __ptext39:	
  8799 ;; *************** function _CC2500_RxData *****************
  8800 ;; Defined at:
  8801 ;;		line 70 in file "../src/CC2500_B1.c"
  8802 ;; Parameters:    Size  Location     Type
  8803 ;;		None
  8804 ;; Auto vars:     Size  Location     Type
  8805 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8806 ;; Return value:  Size  Location     Type
  8807 ;;		None               void
  8808 ;; Registers used:
  8809 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8810 ;; Tracked objects:
  8811 ;;		On entry : 0/0
  8812 ;;		On exit  : 0/0
  8813 ;;		Unchanged: 0/0
  8814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;Total ram usage:        2 bytes
  8820 ;; Hardware stack levels used:    1
  8821 ;; Hardware stack levels required when called:    7
  8822 ;; This function calls:
  8823 ;;		_CC2500_ReadByte
  8824 ;;		_CC2500_ReadStatus
  8825 ;;		_CC2500_WriteByte
  8826 ;;		_Timeout_Counter
  8827 ;;		_set_TimeoutCleared
  8828 ;; This function is called by:
  8829 ;;		_setRF_Main
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           
  8834                           ;psect for function _CC2500_RxData
  8835  0B97                     _CC2500_RxData:	
  8836                           
  8837                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8838                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8839                           
  8840                           ;incstack = 0
  8841                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8842  0B97  0020               	movlb	0	; select bank0
  8843  0B98  180D               	btfsc	13,0	;volatile
  8844  0B99  2B9E               	goto	l9497
  8845  0B9A  2BA7               	goto	l9503
  8846  0B9B                     l9495:	
  8847                           ;CC2500_B1.c: 76: {
  8848                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8849                           
  8850                           
  8851                           ;CC2500_B1.c: 78: Timeout_Counter();
  8852  0B9B  319D  259E  318B   	fcall	_Timeout_Counter
  8853  0B9E                     l9497:	
  8854  0B9E  0020               	movlb	0	; select bank0
  8855  0B9F  1C0D               	btfss	13,0	;volatile
  8856  0BA0  2BA4               	goto	l9501
  8857  0BA1  0021               	movlb	1	; select bank1
  8858  0BA2  1D2B               	btfss	(_myMain^(0+128)+11),2
  8859  0BA3  2B9B               	goto	l9495
  8860  0BA4                     l9501:	
  8861                           
  8862                           ;CC2500_B1.c: 79: };
  8863                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8864  0BA4  319A  22FE  318B   	fcall	_set_TimeoutCleared
  8865  0BA7                     l9503:	
  8866                           
  8867                           ;CC2500_B1.c: 81: }
  8868                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8869  0BA7  303B               	movlw	59
  8870  0BA8  319F  27B5  318B   	fcall	_CC2500_ReadStatus
  8871                           
  8872                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8873  0BAB  0021               	movlb	1	; select bank1
  8874  0BAC  0855               	movf	_s_data^(0+128),w
  8875  0BAD  1903               	btfsc	3,2
  8876  0BAE  0008               	return
  8877                           
  8878                           ;CC2500_B1.c: 86: RC4 = 0;
  8879  0BAF  0020               	movlb	0	; select bank0
  8880  0BB0  120E               	bcf	14,4	;volatile
  8881                           
  8882                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8883  0BB1  30FF               	movlw	255
  8884  0BB2  00A4               	movwf	??_CC2500_RxData
  8885  0BB3  0824               	movf	??_CC2500_RxData,w
  8886  0BB4  0021               	movlb	1	; select bank1
  8887  0BB5  00D0               	movwf	_SPI0Buffer^(0+128)
  8888                           
  8889                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8890  0BB6  2BBA               	goto	l9513
  8891  0BB7                     l9511:	
  8892                           
  8893                           ;CC2500_B1.c: 89: Timeout_Counter();
  8894  0BB7  319D  259E  318B   	fcall	_Timeout_Counter
  8895  0BBA                     l9513:	
  8896  0BBA  0020               	movlb	0	; select bank0
  8897  0BBB  1D0E               	btfss	14,2	;volatile
  8898  0BBC  2BC0               	goto	l9517
  8899  0BBD  0021               	movlb	1	; select bank1
  8900  0BBE  1D2B               	btfss	(_myMain^(0+128)+11),2
  8901  0BBF  2BB7               	goto	l9511
  8902  0BC0                     l9517:	
  8903                           
  8904                           ;CC2500_B1.c: 90: };
  8905                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8906  0BC0  319A  22FE  318B   	fcall	_set_TimeoutCleared
  8907                           
  8908                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8909  0BC3  319D  25F5  318B   	fcall	_CC2500_WriteByte
  8910                           
  8911                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8912  0BC6  319E  2677  318B   	fcall	_CC2500_ReadByte
  8913                           
  8914                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8915  0BC9  0021               	movlb	1	; select bank1
  8916  0BCA  0850               	movf	_SPI0Buffer^(0+128),w
  8917  0BCB  0020               	movlb	0	; select bank0
  8918  0BCC  00A4               	movwf	??_CC2500_RxData
  8919  0BCD  0824               	movf	??_CC2500_RxData,w
  8920  0BCE  0021               	movlb	1	; select bank1
  8921  0BCF  00CF               	movwf	_Rx_Length^(0+128)
  8922                           
  8923                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8924  0BD0  0020               	movlb	0	; select bank0
  8925  0BD1  01A5               	clrf	CC2500_RxData@loop_f
  8926  0BD2                     l9533:	
  8927  0BD2  0021               	movlb	1	; select bank1
  8928  0BD3  084F               	movf	_Rx_Length^(0+128),w
  8929  0BD4  0020               	movlb	0	; select bank0
  8930  0BD5  0225               	subwf	CC2500_RxData@loop_f,w
  8931  0BD6  1803               	btfsc	3,0
  8932  0BD7  2BEB               	goto	l9535
  8933                           
  8934                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8935  0BD8  319E  2677  318B   	fcall	_CC2500_ReadByte
  8936                           
  8937                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8938  0BDB  0021               	movlb	1	; select bank1
  8939  0BDC  0850               	movf	_SPI0Buffer^(0+128),w
  8940  0BDD  0020               	movlb	0	; select bank0
  8941  0BDE  00A4               	movwf	??_CC2500_RxData
  8942  0BDF  0825               	movf	CC2500_RxData@loop_f,w
  8943  0BE0  3EA0               	addlw	_RF_Data& (0+255)
  8944  0BE1  0086               	movwf	6
  8945  0BE2  3001               	movlw	1	; select bank3/4
  8946  0BE3  0087               	movwf	7
  8947  0BE4  0824               	movf	??_CC2500_RxData,w
  8948  0BE5  0081               	movwf	1
  8949  0BE6  3001               	movlw	1
  8950  0BE7  00A4               	movwf	??_CC2500_RxData
  8951  0BE8  0824               	movf	??_CC2500_RxData,w
  8952  0BE9  07A5               	addwf	CC2500_RxData@loop_f,f
  8953  0BEA  2BD2               	goto	l9533
  8954  0BEB                     l9535:	
  8955                           
  8956                           ;CC2500_B1.c: 99: }
  8957                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8958  0BEB  319E  2677  318B   	fcall	_CC2500_ReadByte
  8959                           
  8960                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8961  0BEE  0021               	movlb	1	; select bank1
  8962  0BEF  0850               	movf	_SPI0Buffer^(0+128),w
  8963  0BF0  0020               	movlb	0	; select bank0
  8964  0BF1  00A4               	movwf	??_CC2500_RxData
  8965  0BF2  0824               	movf	??_CC2500_RxData,w
  8966  0BF3  0021               	movlb	1	; select bank1
  8967  0BF4  00CE               	movwf	_RSSI^(0+128)
  8968                           
  8969                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8970  0BF5  319E  2677         	fcall	_CC2500_ReadByte
  8971                           
  8972                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8973  0BF7  0021               	movlb	1	; select bank1
  8974  0BF8  0850               	movf	_SPI0Buffer^(0+128),w
  8975  0BF9  0020               	movlb	0	; select bank0
  8976  0BFA  00A4               	movwf	??_CC2500_RxData
  8977  0BFB  0824               	movf	??_CC2500_RxData,w
  8978  0BFC  0021               	movlb	1	; select bank1
  8979  0BFD  00C9               	movwf	_CRC^(0+128)
  8980                           
  8981                           ;CC2500_B1.c: 104: RC4 = 1;
  8982  0BFE  0020               	movlb	0	; select bank0
  8983  0BFF  160E               	bsf	14,4	;volatile
  8984                           
  8985                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8986  0C00  0021               	movlb	1	; select bank1
  8987  0C01  1BC9               	btfsc	_CRC^(0+128),7
  8988                           
  8989                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8990  0C02  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8991                           
  8992                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8993  0C03  11BA               	bcf	_RF1^(0+128),3
  8994                           
  8995                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8996  0C04  14BA               	bsf	_RF1^(0+128),1
  8997  0C05  0008               	return
  8998  0C06                     __end_of_CC2500_RxData:	
  8999                           
  9000                           	psect	text40
  9001  1FB5                     __ptext40:	
  9002 ;; *************** function _CC2500_ReadStatus *****************
  9003 ;; Defined at:
  9004 ;;		line 301 in file "../src/CC2500_B1.c"
  9005 ;; Parameters:    Size  Location     Type
  9006 ;;  status_addr     1    wreg     unsigned char 
  9007 ;; Auto vars:     Size  Location     Type
  9008 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9009 ;; Return value:  Size  Location     Type
  9010 ;;		None               void
  9011 ;; Registers used:
  9012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9019 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9020 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9021 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;Total ram usage:        2 bytes
  9023 ;; Hardware stack levels used:    1
  9024 ;; Hardware stack levels required when called:    6
  9025 ;; This function calls:
  9026 ;;		_CC2500_ReadByte
  9027 ;;		_CC2500_WriteByte
  9028 ;;		_Timeout_Counter
  9029 ;;		_set_TimeoutCleared
  9030 ;; This function is called by:
  9031 ;;		_CC2500_RxData
  9032 ;; This function uses a non-reentrant model
  9033 ;;
  9034                           
  9035                           
  9036                           ;psect for function _CC2500_ReadStatus
  9037  1FB5                     _CC2500_ReadStatus:	
  9038                           
  9039                           ;incstack = 0
  9040                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9041                           ;CC2500_ReadStatus@status_addr stored from wreg
  9042  1FB5  0020               	movlb	0	; select bank0
  9043  1FB6  00A3               	movwf	CC2500_ReadStatus@status_addr
  9044                           
  9045                           ;CC2500_B1.c: 302: RC4 = 0;
  9046  1FB7  120E               	bcf	14,4	;volatile
  9047                           
  9048                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9049  1FB8  0823               	movf	CC2500_ReadStatus@status_addr,w
  9050  1FB9  3EC0               	addlw	192
  9051  1FBA  00A2               	movwf	??_CC2500_ReadStatus
  9052  1FBB  0822               	movf	??_CC2500_ReadStatus,w
  9053  1FBC  0021               	movlb	1	; select bank1
  9054  1FBD  00D0               	movwf	_SPI0Buffer^(0+128)
  9055                           
  9056                           ;CC2500_B1.c: 305: while (RC2 == 1 && myMain.Timeout == 0) {
  9057  1FBE  2FC2               	goto	l9255
  9058  1FBF                     l9253:	
  9059                           
  9060                           ;CC2500_B1.c: 306: Timeout_Counter();
  9061  1FBF  319D  259E  319F   	fcall	_Timeout_Counter
  9062  1FC2                     l9255:	
  9063  1FC2  0020               	movlb	0	; select bank0
  9064  1FC3  1D0E               	btfss	14,2	;volatile
  9065  1FC4  2FC8               	goto	l9259
  9066  1FC5  0021               	movlb	1	; select bank1
  9067  1FC6  1D2B               	btfss	(_myMain^(0+128)+11),2
  9068  1FC7  2FBF               	goto	l9253
  9069  1FC8                     l9259:	
  9070                           
  9071                           ;CC2500_B1.c: 307: };
  9072                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9073  1FC8  319A  22FE  319F   	fcall	_set_TimeoutCleared
  9074                           
  9075                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9076  1FCB  319D  25F5  319F   	fcall	_CC2500_WriteByte
  9077                           
  9078                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9079  1FCE  319E  2677         	fcall	_CC2500_ReadByte
  9080                           
  9081                           ;CC2500_B1.c: 312: RC4 = 1;
  9082  1FD0  0020               	movlb	0	; select bank0
  9083  1FD1  160E               	bsf	14,4	;volatile
  9084                           
  9085                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9086  1FD2  0021               	movlb	1	; select bank1
  9087  1FD3  0850               	movf	_SPI0Buffer^(0+128),w
  9088  1FD4  0020               	movlb	0	; select bank0
  9089  1FD5  00A2               	movwf	??_CC2500_ReadStatus
  9090  1FD6  0822               	movf	??_CC2500_ReadStatus,w
  9091  1FD7  0021               	movlb	1	; select bank1
  9092  1FD8  00D5               	movwf	_s_data^(0+128)
  9093  1FD9  0008               	return
  9094  1FDA                     __end_of_CC2500_ReadStatus:	
  9095                           
  9096                           	psect	text41
  9097  1E77                     __ptext41:	
  9098 ;; *************** function _CC2500_ReadByte *****************
  9099 ;; Defined at:
  9100 ;;		line 235 in file "../src/CC2500_B1.c"
  9101 ;; Parameters:    Size  Location     Type
  9102 ;;		None
  9103 ;; Auto vars:     Size  Location     Type
  9104 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9105 ;; Return value:  Size  Location     Type
  9106 ;;		None               void
  9107 ;; Registers used:
  9108 ;;		wreg, status,2, status,0
  9109 ;; Tracked objects:
  9110 ;;		On entry : 0/0
  9111 ;;		On exit  : 0/0
  9112 ;;		Unchanged: 0/0
  9113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9116 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9117 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9118 ;;Total ram usage:        2 bytes
  9119 ;; Hardware stack levels used:    1
  9120 ;; Hardware stack levels required when called:    5
  9121 ;; This function calls:
  9122 ;;		Nothing
  9123 ;; This function is called by:
  9124 ;;		_CC2500_RxData
  9125 ;;		_CC2500_ReadStatus
  9126 ;;		_CC2500_ReadREG
  9127 ;; This function uses a non-reentrant model
  9128 ;;
  9129                           
  9130                           
  9131                           ;psect for function _CC2500_ReadByte
  9132  1E77                     _CC2500_ReadByte:	
  9133                           
  9134                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9135                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9136                           
  9137                           ;incstack = 0
  9138                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9139  1E77  0020               	movlb	0	; select bank0
  9140  1E78  01A1               	clrf	CC2500_ReadByte@loop_b
  9141  1E79                     L4:	
  9142  1E79  3008               	movlw	8
  9143  1E7A  0221               	subwf	CC2500_ReadByte@loop_b,w
  9144  1E7B  1803               	btfsc	3,0
  9145  1E7C  0008               	return
  9146                           
  9147                           ;CC2500_B1.c: 238: RC1 = 1;
  9148  1E7D  148E               	bsf	14,1	;volatile
  9149                           
  9150                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9151  1E7E  1003               	clrc
  9152  1E7F  0021               	movlb	1	; select bank1
  9153  1E80  0DD0               	rlf	_SPI0Buffer^(0+128),f
  9154                           
  9155                           ;CC2500_B1.c: 240: if (RC2 == 1)
  9156  1E81  0020               	movlb	0	; select bank0
  9157  1E82  1D0E               	btfss	14,2	;volatile
  9158  1E83  2E87               	goto	l9151
  9159                           
  9160                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9161  1E84  0021               	movlb	1	; select bank1
  9162  1E85  1450               	bsf	_SPI0Buffer^(0+128),0
  9163  1E86  2E8D               	goto	l9153
  9164  1E87                     l9151:	
  9165                           
  9166                           ;CC2500_B1.c: 242: else
  9167                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9168  1E87  30FE               	movlw	254
  9169  1E88  0020               	movlb	0	; select bank0
  9170  1E89  00A0               	movwf	??_CC2500_ReadByte
  9171  1E8A  0820               	movf	??_CC2500_ReadByte,w
  9172  1E8B  0021               	movlb	1	; select bank1
  9173  1E8C  05D0               	andwf	_SPI0Buffer^(0+128),f
  9174  1E8D                     l9153:	
  9175                           
  9176                           ;CC2500_B1.c: 244: RC1 = 0;
  9177  1E8D  0020               	movlb	0	; select bank0
  9178  1E8E  108E               	bcf	14,1	;volatile
  9179  1E8F  3001               	movlw	1
  9180  1E90  00A0               	movwf	??_CC2500_ReadByte
  9181  1E91  0820               	movf	??_CC2500_ReadByte,w
  9182  1E92  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9183  1E93  2E79               	goto	L4
  9184  1E94                     __end_of_CC2500_ReadByte:	
  9185                           
  9186                           	psect	text42
  9187  1AE2                     __ptext42:	
  9188 ;; *************** function _RF_Initialization *****************
  9189 ;; Defined at:
  9190 ;;		line 9 in file "../src/RF_Control_B1.c"
  9191 ;; Parameters:    Size  Location     Type
  9192 ;;		None
  9193 ;; Auto vars:     Size  Location     Type
  9194 ;;		None
  9195 ;; Return value:  Size  Location     Type
  9196 ;;		None               void
  9197 ;; Registers used:
  9198 ;;		wreg, status,2, status,0, pclath, cstack
  9199 ;; Tracked objects:
  9200 ;;		On entry : 0/0
  9201 ;;		On exit  : 0/0
  9202 ;;		Unchanged: 0/0
  9203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;Total ram usage:        0 bytes
  9209 ;; Hardware stack levels used:    1
  9210 ;; Hardware stack levels required when called:    6
  9211 ;; This function calls:
  9212 ;;		_setRF_Initialization
  9213 ;; This function is called by:
  9214 ;;		_main
  9215 ;; This function uses a non-reentrant model
  9216 ;;
  9217                           
  9218                           
  9219                           ;psect for function _RF_Initialization
  9220  1AE2                     _RF_Initialization:	
  9221                           
  9222                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9223                           
  9224                           ;incstack = 0
  9225                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9226  1AE2  319B  2366         	fcall	_setRF_Initialization
  9227  1AE4  0008               	return
  9228  1AE5                     __end_of_RF_Initialization:	
  9229                           
  9230                           	psect	text43
  9231  1B66                     __ptext43:	
  9232 ;; *************** function _setRF_Initialization *****************
  9233 ;; Defined at:
  9234 ;;		line 43 in file "../src/RF_Control_B1.c"
  9235 ;; Parameters:    Size  Location     Type
  9236 ;;		None
  9237 ;; Auto vars:     Size  Location     Type
  9238 ;;		None
  9239 ;; Return value:  Size  Location     Type
  9240 ;;		None               void
  9241 ;; Registers used:
  9242 ;;		wreg
  9243 ;; Tracked objects:
  9244 ;;		On entry : 0/0
  9245 ;;		On exit  : 0/0
  9246 ;;		Unchanged: 0/0
  9247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9251 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9252 ;;Total ram usage:        1 bytes
  9253 ;; Hardware stack levels used:    1
  9254 ;; Hardware stack levels required when called:    5
  9255 ;; This function calls:
  9256 ;;		Nothing
  9257 ;; This function is called by:
  9258 ;;		_RF_Initialization
  9259 ;; This function uses a non-reentrant model
  9260 ;;
  9261                           
  9262                           
  9263                           ;psect for function _setRF_Initialization
  9264  1B66                     _setRF_Initialization:	
  9265                           
  9266                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9267                           
  9268                           ;incstack = 0
  9269                           ; Regs used in _setRF_Initialization: [wreg]
  9270  1B66  3015               	movlw	21
  9271  1B67  0020               	movlb	0	; select bank0
  9272  1B68  00A0               	movwf	??_setRF_Initialization
  9273  1B69  0820               	movf	??_setRF_Initialization,w
  9274  1B6A  0021               	movlb	1	; select bank1
  9275  1B6B  00D2               	movwf	_Tx_Length^(0+128)
  9276                           
  9277                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9278  1B6C  3005               	movlw	5
  9279  1B6D  00C1               	movwf	(_RF1^(0+128)+7)
  9280  1B6E  3000               	movlw	0
  9281  1B6F  00C2               	movwf	(_RF1^(0+128)+8)
  9282  1B70  0008               	return
  9283  1B71                     __end_of_setRF_Initialization:	
  9284                           
  9285                           	psect	text44
  9286  1C8E                     __ptext44:	
  9287 ;; *************** function _Mcu_Initialization *****************
  9288 ;; Defined at:
  9289 ;;		line 30 in file "../src/MCU_B1.c"
  9290 ;; Parameters:    Size  Location     Type
  9291 ;;		None
  9292 ;; Auto vars:     Size  Location     Type
  9293 ;;		None
  9294 ;; Return value:  Size  Location     Type
  9295 ;;		None               void
  9296 ;; Registers used:
  9297 ;;		wreg, status,2, status,0, pclath, cstack
  9298 ;; Tracked objects:
  9299 ;;		On entry : 0/0
  9300 ;;		On exit  : 0/0
  9301 ;;		Unchanged: 0/0
  9302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;Total ram usage:        0 bytes
  9308 ;; Hardware stack levels used:    1
  9309 ;; Hardware stack levels required when called:    6
  9310 ;; This function calls:
  9311 ;;		_ADC_Set
  9312 ;;		_Fosc_Set
  9313 ;;		_IOC_Set
  9314 ;;		_IO_Set
  9315 ;;		_TMR1_Set
  9316 ;;		_WDT_Set
  9317 ;; This function is called by:
  9318 ;;		_main
  9319 ;; This function uses a non-reentrant model
  9320 ;;
  9321                           
  9322                           
  9323                           ;psect for function _Mcu_Initialization
  9324  1C8E                     _Mcu_Initialization:	
  9325                           
  9326                           ;MCU_B1.c: 32: Fosc_Set();
  9327                           
  9328                           ;incstack = 0
  9329                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9330  1C8E  319A  22FA  319C   	fcall	_Fosc_Set
  9331                           
  9332                           ;MCU_B1.c: 34: IO_Set();
  9333  1C91  319E  260E  319C   	fcall	_IO_Set
  9334                           
  9335                           ;MCU_B1.c: 36: ;;
  9336                           ;MCU_B1.c: 38: TMR1_Set();
  9337  1C94  319B  23C4  319C   	fcall	_TMR1_Set
  9338                           
  9339                           ;MCU_B1.c: 40: ADC_Set();
  9340  1C97  319B  2315  319C   	fcall	_ADC_Set
  9341                           
  9342                           ;MCU_B1.c: 42: ;;
  9343                           ;MCU_B1.c: 44: ;;
  9344                           ;MCU_B1.c: 46: IOC_Set();
  9345  1C9A  319B  23B8  319C   	fcall	_IOC_Set
  9346                           
  9347                           ;MCU_B1.c: 48: ;;
  9348                           ;MCU_B1.c: 50: ;;
  9349                           ;MCU_B1.c: 52: WDT_Set();
  9350  1C9D  319B  23D0         	fcall	_WDT_Set
  9351  1C9F  0008               	return
  9352  1CA0                     __end_of_Mcu_Initialization:	
  9353                           
  9354                           	psect	text45
  9355  1BD0                     __ptext45:	
  9356 ;; *************** function _WDT_Set *****************
  9357 ;; Defined at:
  9358 ;;		line 1083 in file "../src/MCU_B1.c"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;		None
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;		None
  9363 ;; Return value:  Size  Location     Type
  9364 ;;		None               void
  9365 ;; Registers used:
  9366 ;;		wreg
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9376 ;;Total ram usage:        1 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:    5
  9379 ;; This function calls:
  9380 ;;		Nothing
  9381 ;; This function is called by:
  9382 ;;		_Mcu_Initialization
  9383 ;; This function uses a non-reentrant model
  9384 ;;
  9385                           
  9386                           
  9387                           ;psect for function _WDT_Set
  9388  1BD0                     _WDT_Set:	
  9389                           
  9390                           ;MCU_B1.c: 1090: WDTCON = 0b00010111;;
  9391                           
  9392                           ;incstack = 0
  9393                           ; Regs used in _WDT_Set: [wreg]
  9394  1BD0  3017               	movlw	23
  9395  1BD1  0021               	movlb	1	; select bank1
  9396  1BD2  0097               	movwf	23	;volatile
  9397                           
  9398                           ;MCU_B1.c: 1092: WDT.Enable = 1;
  9399  1BD3  0022               	movlb	2	; select bank2
  9400  1BD4  1425               	bsf	_WDT^(0+256),0
  9401                           
  9402                           ;MCU_B1.c: 1093: WDT.Timer = 10;
  9403  1BD5  300A               	movlw	10
  9404  1BD6  0020               	movlb	0	; select bank0
  9405  1BD7  00A0               	movwf	??_WDT_Set
  9406  1BD8  0820               	movf	??_WDT_Set,w
  9407  1BD9  0022               	movlb	2	; select bank2
  9408  1BDA  00A6               	movwf	(_WDT^(0+256)+1)
  9409  1BDB  0008               	return
  9410  1BDC                     __end_of_WDT_Set:	
  9411                           
  9412                           	psect	text46
  9413  1BC4                     __ptext46:	
  9414 ;; *************** function _TMR1_Set *****************
  9415 ;; Defined at:
  9416 ;;		line 199 in file "../src/MCU_B1.c"
  9417 ;; Parameters:    Size  Location     Type
  9418 ;;		None
  9419 ;; Auto vars:     Size  Location     Type
  9420 ;;		None
  9421 ;; Return value:  Size  Location     Type
  9422 ;;		None               void
  9423 ;; Registers used:
  9424 ;;		wreg
  9425 ;; Tracked objects:
  9426 ;;		On entry : 0/0
  9427 ;;		On exit  : 0/0
  9428 ;;		Unchanged: 0/0
  9429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;Total ram usage:        0 bytes
  9435 ;; Hardware stack levels used:    1
  9436 ;; Hardware stack levels required when called:    5
  9437 ;; This function calls:
  9438 ;;		Nothing
  9439 ;; This function is called by:
  9440 ;;		_Mcu_Initialization
  9441 ;; This function uses a non-reentrant model
  9442 ;;
  9443                           
  9444                           
  9445                           ;psect for function _TMR1_Set
  9446  1BC4                     _TMR1_Set:	
  9447                           
  9448                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9449                           
  9450                           ;incstack = 0
  9451                           ; Regs used in _TMR1_Set: [wreg]
  9452  1BC4  3041               	movlw	65
  9453  1BC5  0020               	movlb	0	; select bank0
  9454  1BC6  0098               	movwf	24	;volatile
  9455                           
  9456                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9457  1BC7  30FA               	movlw	250
  9458  1BC8  0097               	movwf	23	;volatile
  9459                           
  9460                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9461  1BC9  3038               	movlw	56
  9462  1BCA  0096               	movwf	22	;volatile
  9463                           
  9464                           ;MCU_B1.c: 203: TMR1IE = 1;
  9465  1BCB  0021               	movlb	1	; select bank1
  9466  1BCC  1411               	bsf	17,0	;volatile
  9467                           
  9468                           ;MCU_B1.c: 204: PEIE = 1;
  9469  1BCD  170B               	bsf	11,6	;volatile
  9470                           
  9471                           ;MCU_B1.c: 205: GIE = 1;
  9472  1BCE  178B               	bsf	11,7	;volatile
  9473  1BCF  0008               	return
  9474  1BD0                     __end_of_TMR1_Set:	
  9475                           
  9476                           	psect	text47
  9477  1E0E                     __ptext47:	
  9478 ;; *************** function _IO_Set *****************
  9479 ;; Defined at:
  9480 ;;		line 60 in file "../src/MCU_B1.c"
  9481 ;; Parameters:    Size  Location     Type
  9482 ;;		None
  9483 ;; Auto vars:     Size  Location     Type
  9484 ;;		None
  9485 ;; Return value:  Size  Location     Type
  9486 ;;		None               void
  9487 ;; Registers used:
  9488 ;;		wreg, status,2
  9489 ;; Tracked objects:
  9490 ;;		On entry : 0/0
  9491 ;;		On exit  : 0/0
  9492 ;;		Unchanged: 0/0
  9493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;Total ram usage:        0 bytes
  9499 ;; Hardware stack levels used:    1
  9500 ;; Hardware stack levels required when called:    5
  9501 ;; This function calls:
  9502 ;;		Nothing
  9503 ;; This function is called by:
  9504 ;;		_Mcu_Initialization
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           
  9509                           ;psect for function _IO_Set
  9510  1E0E                     _IO_Set:	
  9511                           
  9512                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9513                           
  9514                           ;incstack = 0
  9515                           ; Regs used in _IO_Set: [wreg+status,2]
  9516  1E0E  3077               	movlw	119
  9517  1E0F  0021               	movlb	1	; select bank1
  9518  1E10  008C               	movwf	12	;volatile
  9519                           
  9520                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9521  1E11  3007               	movlw	7
  9522  1E12  008D               	movwf	13	;volatile
  9523                           
  9524                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9525  1E13  300C               	movlw	12
  9526  1E14  008E               	movwf	14	;volatile
  9527                           
  9528                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9529  1E15  0022               	movlb	2	; select bank2
  9530  1E16  018C               	clrf	12	;volatile
  9531                           
  9532                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9533  1E17  3002               	movlw	2
  9534  1E18  008D               	movwf	13	;volatile
  9535                           
  9536                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9537  1E19  018E               	clrf	14	;volatile
  9538                           
  9539                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9540  1E1A  3022               	movlw	34
  9541  1E1B  0023               	movlb	3	; select bank3
  9542  1E1C  008C               	movwf	12	;volatile
  9543                           
  9544                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9545  1E1D  018D               	clrf	13	;volatile
  9546                           
  9547                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9548  1E1E  018E               	clrf	14	;volatile
  9549                           
  9550                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9551  1E1F  3077               	movlw	119
  9552  1E20  0020               	movlb	0	; select bank0
  9553  1E21  008C               	movwf	12	;volatile
  9554                           
  9555                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9556  1E22  3007               	movlw	7
  9557  1E23  008D               	movwf	13	;volatile
  9558                           
  9559                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9560  1E24  300C               	movlw	12
  9561  1E25  008E               	movwf	14	;volatile
  9562  1E26  0008               	return
  9563  1E27                     __end_of_IO_Set:	
  9564                           
  9565                           	psect	text48
  9566  1BB8                     __ptext48:	
  9567 ;; *************** function _IOC_Set *****************
  9568 ;; Defined at:
  9569 ;;		line 365 in file "../src/MCU_B1.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;		None
  9572 ;; Auto vars:     Size  Location     Type
  9573 ;;		None
  9574 ;; Return value:  Size  Location     Type
  9575 ;;		None               void
  9576 ;; Registers used:
  9577 ;;		wreg, status,2
  9578 ;; Tracked objects:
  9579 ;;		On entry : 0/0
  9580 ;;		On exit  : 0/0
  9581 ;;		Unchanged: 0/0
  9582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;Total ram usage:        0 bytes
  9588 ;; Hardware stack levels used:    1
  9589 ;; Hardware stack levels required when called:    5
  9590 ;; This function calls:
  9591 ;;		Nothing
  9592 ;; This function is called by:
  9593 ;;		_Mcu_Initialization
  9594 ;; This function uses a non-reentrant model
  9595 ;;
  9596                           
  9597                           
  9598                           ;psect for function _IOC_Set
  9599  1BB8                     _IOC_Set:	
  9600                           
  9601                           ;MCU_B1.c: 366: WPUB2 = 0;
  9602                           
  9603                           ;incstack = 0
  9604                           ; Regs used in _IOC_Set: [wreg+status,2]
  9605  1BB8  0024               	movlb	4	; select bank4
  9606  1BB9  110D               	bcf	13,2	;volatile
  9607                           
  9608                           ;MCU_B1.c: 386: IOCBP = 0b00000100;
  9609  1BBA  3004               	movlw	4
  9610  1BBB  0027               	movlb	7	; select bank7
  9611  1BBC  0094               	movwf	20	;volatile
  9612                           
  9613                           ;MCU_B1.c: 387: IOCBN = 0b00000000;
  9614  1BBD  0195               	clrf	21	;volatile
  9615                           
  9616                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9617  1BBE  0196               	clrf	22	;volatile
  9618                           
  9619                           ;MCU_B1.c: 393: IOCIE = 1;
  9620  1BBF  158B               	bsf	11,3	;volatile
  9621                           
  9622                           ;MCU_B1.c: 394: IOCIF = 0;
  9623  1BC0  100B               	bcf	11,0	;volatile
  9624                           
  9625                           ;MCU_B1.c: 395: PEIE = 1;
  9626  1BC1  170B               	bsf	11,6	;volatile
  9627                           
  9628                           ;MCU_B1.c: 396: GIE = 1;
  9629  1BC2  178B               	bsf	11,7	;volatile
  9630  1BC3  0008               	return
  9631  1BC4                     __end_of_IOC_Set:	
  9632                           
  9633                           	psect	text49
  9634  1AFA                     __ptext49:	
  9635 ;; *************** function _Fosc_Set *****************
  9636 ;; Defined at:
  9637 ;;		line 56 in file "../src/MCU_B1.c"
  9638 ;; Parameters:    Size  Location     Type
  9639 ;;		None
  9640 ;; Auto vars:     Size  Location     Type
  9641 ;;		None
  9642 ;; Return value:  Size  Location     Type
  9643 ;;		None               void
  9644 ;; Registers used:
  9645 ;;		wreg
  9646 ;; Tracked objects:
  9647 ;;		On entry : 0/0
  9648 ;;		On exit  : 0/0
  9649 ;;		Unchanged: 0/0
  9650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;Total ram usage:        0 bytes
  9656 ;; Hardware stack levels used:    1
  9657 ;; Hardware stack levels required when called:    5
  9658 ;; This function calls:
  9659 ;;		Nothing
  9660 ;; This function is called by:
  9661 ;;		_Mcu_Initialization
  9662 ;; This function uses a non-reentrant model
  9663 ;;
  9664                           
  9665                           
  9666                           ;psect for function _Fosc_Set
  9667  1AFA                     _Fosc_Set:	
  9668                           
  9669                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9670                           
  9671                           ;incstack = 0
  9672                           ; Regs used in _Fosc_Set: [wreg]
  9673  1AFA  3078               	movlw	120
  9674  1AFB  0021               	movlb	1	; select bank1
  9675  1AFC  0099               	movwf	25	;volatile
  9676  1AFD  0008               	return
  9677  1AFE                     __end_of_Fosc_Set:	
  9678                           
  9679                           	psect	text50
  9680  1B15                     __ptext50:	
  9681 ;; *************** function _ADC_Set *****************
  9682 ;; Defined at:
  9683 ;;		line 419 in file "../src/MCU_B1.c"
  9684 ;; Parameters:    Size  Location     Type
  9685 ;;		None
  9686 ;; Auto vars:     Size  Location     Type
  9687 ;;		None
  9688 ;; Return value:  Size  Location     Type
  9689 ;;		None               void
  9690 ;; Registers used:
  9691 ;;		wreg
  9692 ;; Tracked objects:
  9693 ;;		On entry : 0/0
  9694 ;;		On exit  : 0/0
  9695 ;;		Unchanged: 0/0
  9696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;Total ram usage:        0 bytes
  9702 ;; Hardware stack levels used:    1
  9703 ;; Hardware stack levels required when called:    5
  9704 ;; This function calls:
  9705 ;;		Nothing
  9706 ;; This function is called by:
  9707 ;;		_Mcu_Initialization
  9708 ;; This function uses a non-reentrant model
  9709 ;;
  9710                           
  9711                           
  9712                           ;psect for function _ADC_Set
  9713  1B15                     _ADC_Set:	
  9714                           
  9715                           ;MCU_B1.c: 420: ADCON1 = 0xf3;
  9716                           
  9717                           ;incstack = 0
  9718                           ; Regs used in _ADC_Set: [wreg]
  9719  1B15  30F3               	movlw	243
  9720  1B16  0021               	movlb	1	; select bank1
  9721  1B17  009E               	movwf	30	;volatile
  9722                           
  9723                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  9724  1B18  30C1               	movlw	193
  9725  1B19  0022               	movlb	2	; select bank2
  9726  1B1A  0097               	movwf	23	;volatile
  9727  1B1B  0008               	return
  9728  1B1C                     __end_of_ADC_Set:	
  9729                           
  9730                           	psect	text51
  9731  0049                     __ptext51:	
  9732 ;; *************** function _Load_Main *****************
  9733 ;; Defined at:
  9734 ;;		line 39 in file "../src/OverLoad_B1.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;		None
  9737 ;; Auto vars:     Size  Location     Type
  9738 ;;  i               2   12[BANK0 ] int 
  9739 ;;  Load_Status     1   11[BANK0 ] unsigned char 
  9740 ;;  error           1   10[BANK0 ] unsigned char 
  9741 ;; Return value:  Size  Location     Type
  9742 ;;		None               void
  9743 ;; Registers used:
  9744 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9745 ;; Tracked objects:
  9746 ;;		On entry : 0/0
  9747 ;;		On exit  : 0/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;Total ram usage:        6 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; Hardware stack levels required when called:    7
  9757 ;; This function calls:
  9758 ;;		___lwdiv
  9759 ;;		___wmul
  9760 ;;		_getAll_DimmerLights_AdjSw
  9761 ;;		_getDimmer_LoadGO
  9762 ;;		_getDimmer_Load_Status
  9763 ;;		_getMain_All_Error_Status
  9764 ;;		_getMain_LightsStatus
  9765 ;;		_getMain_Lights_Count
  9766 ;;		_setLoad_AH_AL_Restore
  9767 ;; This function is called by:
  9768 ;;		_main
  9769 ;; This function uses a non-reentrant model
  9770 ;;
  9771                           
  9772                           
  9773                           ;psect for function _Load_Main
  9774  0049                     _Load_Main:	
  9775                           
  9776                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  9777                           
  9778                           ;incstack = 0
  9779                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9780  0049  3000               	movlw	0
  9781  004A  3191  2168  3180   	fcall	_getMain_All_Error_Status
  9782  004D  0020               	movlb	0	; select bank0
  9783  004E  00A8               	movwf	??_Load_Main
  9784  004F  0828               	movf	??_Load_Main,w
  9785  0050  00AA               	movwf	Load_Main@error
  9786                           
  9787                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  9788  0051  01AB               	clrf	Load_Main@Load_Status
  9789                           
  9790                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  9791  0052  0022               	movlb	2	; select bank2
  9792  0053  1C27               	btfss	_Load^(0+256),0
  9793  0054  29EF               	goto	l1728
  9794                           
  9795                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
  9796  0055  319C  24C5  3180   	fcall	_getMain_LightsStatus
  9797  0058  3800               	iorlw	0
  9798  0059  1D03               	skipz
  9799  005A  285D               	goto	l10677
  9800                           
  9801                           ;OverLoad_B1.c: 65: Load.GO = 0;
  9802  005B  0022               	movlb	2	; select bank2
  9803  005C  287E               	goto	l10695
  9804  005D                     l10677:	
  9805                           ;OverLoad_B1.c: 66: } else {
  9806                           
  9807                           
  9808                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
  9809  005D  0020               	movlb	0	; select bank0
  9810  005E  08AA               	movf	Load_Main@error,f
  9811  005F  1D03               	skipz
  9812  0060  287B               	goto	l1731
  9813  0061  3190  20DD  3180   	fcall	_getAll_DimmerLights_AdjSw
  9814  0064  3800               	iorlw	0
  9815  0065  1D03               	skipz
  9816  0066  287B               	goto	l1731
  9817                           
  9818                           ;OverLoad_B1.c: 70: Load.GO = 1;
  9819  0067  0022               	movlb	2	; select bank2
  9820  0068  14A7               	bsf	_Load^(0+256),1
  9821                           
  9822                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
  9823  0069  319B  233C  3180   	fcall	_getDimmer_LoadGO
  9824  006C  3A01               	xorlw	1
  9825  006D  1D03               	skipz
  9826  006E  2876               	goto	l1732
  9827                           
  9828                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  9829  006F  0022               	movlb	2	; select bank2
  9830  0070  1DA7               	btfss	_Load^(0+256),3
  9831  0071  1BA7               	btfsc	_Load^(0+256),7
  9832  0072  287F               	goto	l1730
  9833                           
  9834                           ;OverLoad_B1.c: 74: Load.Run = 1;
  9835  0073  15A7               	bsf	_Load^(0+256),3
  9836                           
  9837                           ;OverLoad_B1.c: 75: Load.Count = 0;
  9838  0074  01D0               	clrf	(_Load^(0+256)+41)
  9839                           
  9840                           ;OverLoad_B1.c: 76: }
  9841                           ;OverLoad_B1.c: 77: } else {
  9842  0075  287F               	goto	l1730
  9843  0076                     l1732:	
  9844                           
  9845                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  9846  0076  0022               	movlb	2	; select bank2
  9847  0077  1FA7               	btfss	_Load^(0+256),7
  9848  0078  287F               	goto	l1730
  9849                           
  9850                           ;OverLoad_B1.c: 79: Load.OK = 0;
  9851  0079  13A7               	bcf	_Load^(0+256),7
  9852                           
  9853                           ;OverLoad_B1.c: 80: }
  9854                           ;OverLoad_B1.c: 81: }
  9855                           ;OverLoad_B1.c: 82: } else {
  9856  007A  287F               	goto	l1730
  9857  007B                     l1731:	
  9858                           
  9859                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  9860  007B  0022               	movlb	2	; select bank2
  9861  007C  1CA7               	btfss	_Load^(0+256),1
  9862  007D  287F               	goto	l1730
  9863  007E                     l10695:	
  9864                           
  9865                           ;OverLoad_B1.c: 84: Load.GO = 0;
  9866  007E  10A7               	bcf	_Load^(0+256),1
  9867  007F                     l1730:	
  9868                           
  9869                           ;OverLoad_B1.c: 85: }
  9870                           ;OverLoad_B1.c: 86: }
  9871                           ;OverLoad_B1.c: 88: }
  9872                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  9873  007F  1CA7               	btfss	_Load^(0+256),1
  9874  0080  29CB               	goto	l1738
  9875                           
  9876                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  9877  0081  1527               	bsf	_Load^(0+256),2
  9878                           
  9879                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  9880  0082  1E27               	btfss	_Load^(0+256),4
  9881  0083  29C9               	goto	l1739
  9882                           
  9883                           ;OverLoad_B1.c: 95: Load.Time++;
  9884  0084  3001               	movlw	1
  9885  0085  07A8               	addwf	(_Load^(0+256)+1),f
  9886  0086  3000               	movlw	0
  9887  0087  3DA9               	addwfc	((_Load+1)^(0+256)+1),f
  9888                           
  9889                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
  9890  0088  3000               	movlw	0
  9891  0089  0229               	subwf	((_Load+1)^(0+256)+1),w
  9892  008A  3005               	movlw	5
  9893  008B  1903               	skipnz
  9894  008C  0228               	subwf	(_Load^(0+256)+1),w
  9895  008D  1C03               	skipc
  9896  008E  0008               	return
  9897                           
  9898                           ;OverLoad_B1.c: 97: Load.Time = 0;
  9899  008F  01A8               	clrf	(_Load^(0+256)+1)
  9900  0090  01A9               	clrf	((_Load+1)^(0+256)+1)
  9901                           
  9902                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  9903  0091  1227               	bcf	_Load^(0+256),4
  9904                           
  9905                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  9906  0092  3001               	movlw	1
  9907  0093  0020               	movlb	0	; select bank0
  9908  0094  00AC               	movwf	Load_Main@i
  9909  0095  3000               	movlw	0
  9910  0096  00AD               	movwf	Load_Main@i+1
  9911  0097  082D               	movf	Load_Main@i+1,w
  9912  0098  3A80               	xorlw	128
  9913  0099  00A8               	movwf	??_Load_Main
  9914  009A  3080               	movlw	128
  9915  009B  0228               	subwf	??_Load_Main,w
  9916  009C  1D03               	skipz
  9917  009D  28A0               	goto	u12545
  9918  009E  3004               	movlw	4
  9919  009F  022C               	subwf	Load_Main@i,w
  9920  00A0                     u12545:	
  9921  00A0  1803               	btfsc	3,0
  9922  00A1  28D4               	goto	l10717
  9923  00A2                     l10711:	
  9924                           
  9925                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  9926  00A2  0020               	movlb	0	; select bank0
  9927  00A3  352C               	lslf	Load_Main@i,w
  9928  00A4  3E32               	addlw	(_Load+11)& (0+255)
  9929  00A5  0086               	movwf	6
  9930  00A6  3001               	movlw	1	; select bank2/3
  9931  00A7  0087               	movwf	7
  9932  00A8  3F40               	moviw [0]fsr1
  9933  00A9  00A8               	movwf	??_Load_Main
  9934  00AA  3F41               	moviw [1]fsr1
  9935  00AB  00A9               	movwf	??_Load_Main+1
  9936  00AC  0828               	movf	??_Load_Main,w
  9937  00AD  0022               	movlb	2	; select bank2
  9938  00AE  07AC               	addwf	(_Load^(0+256)+5),f
  9939  00AF  0020               	movlb	0	; select bank0
  9940  00B0  0829               	movf	??_Load_Main+1,w
  9941  00B1  0022               	movlb	2	; select bank2
  9942  00B2  3DAD               	addwfc	((_Load+1)^(0+256)+5),f
  9943                           
  9944                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  9945  00B3  0020               	movlb	0	; select bank0
  9946  00B4  352C               	lslf	Load_Main@i,w
  9947  00B5  3E3C               	addlw	(_Load+21)& (0+255)
  9948  00B6  0086               	movwf	6
  9949  00B7  3001               	movlw	1	; select bank2/3
  9950  00B8  0087               	movwf	7
  9951  00B9  3F40               	moviw [0]fsr1
  9952  00BA  00A8               	movwf	??_Load_Main
  9953  00BB  3F41               	moviw [1]fsr1
  9954  00BC  00A9               	movwf	??_Load_Main+1
  9955  00BD  0828               	movf	??_Load_Main,w
  9956  00BE  0022               	movlb	2	; select bank2
  9957  00BF  07AE               	addwf	(_Load^(0+256)+7),f
  9958  00C0  0020               	movlb	0	; select bank0
  9959  00C1  0829               	movf	??_Load_Main+1,w
  9960  00C2  0022               	movlb	2	; select bank2
  9961  00C3  3DAF               	addwfc	((_Load+1)^(0+256)+7),f
  9962  00C4  3001               	movlw	1
  9963  00C5  0020               	movlb	0	; select bank0
  9964  00C6  07AC               	addwf	Load_Main@i,f
  9965  00C7  3000               	movlw	0
  9966  00C8  3DAD               	addwfc	Load_Main@i+1,f
  9967  00C9  082D               	movf	Load_Main@i+1,w
  9968  00CA  3A80               	xorlw	128
  9969  00CB  00A8               	movwf	??_Load_Main
  9970  00CC  3080               	movlw	128
  9971  00CD  0228               	subwf	??_Load_Main,w
  9972  00CE  1D03               	skipz
  9973  00CF  28D2               	goto	u12555
  9974  00D0  3004               	movlw	4
  9975  00D1  022C               	subwf	Load_Main@i,w
  9976  00D2                     u12555:	
  9977  00D2  1C03               	skipc
  9978  00D3  28A2               	goto	l10711
  9979  00D4                     l10717:	
  9980                           
  9981                           ;OverLoad_B1.c: 103: }
  9982                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  9983  00D4  3003               	movlw	3
  9984  00D5  0020               	movlb	0	; select bank0
  9985  00D6  00A0               	movwf	___lwdiv@divisor
  9986  00D7  3000               	movlw	0
  9987  00D8  00A1               	movwf	___lwdiv@divisor+1
  9988  00D9  0022               	movlb	2	; select bank2
  9989  00DA  082D               	movf	((_Load+1)^(0+256)+5),w
  9990  00DB  0020               	movlb	0	; select bank0
  9991  00DC  01A3               	clrf	___lwdiv@dividend+1
  9992  00DD  07A3               	addwf	___lwdiv@dividend+1,f
  9993  00DE  0022               	movlb	2	; select bank2
  9994  00DF  082C               	movf	(_Load^(0+256)+5),w
  9995  00E0  0020               	movlb	0	; select bank0
  9996  00E1  01A2               	clrf	___lwdiv@dividend
  9997  00E2  07A2               	addwf	___lwdiv@dividend,f
  9998  00E3  3192  223B  3180   	fcall	___lwdiv
  9999  00E6  0020               	movlb	0	; select bank0
 10000  00E7  0821               	movf	?___lwdiv+1,w
 10001  00E8  0022               	movlb	2	; select bank2
 10002  00E9  01AD               	clrf	((_Load+1)^(0+256)+5)
 10003  00EA  07AD               	addwf	((_Load+1)^(0+256)+5),f
 10004  00EB  0020               	movlb	0	; select bank0
 10005  00EC  0820               	movf	?___lwdiv,w
 10006  00ED  0022               	movlb	2	; select bank2
 10007  00EE  01AC               	clrf	(_Load^(0+256)+5)
 10008  00EF  07AC               	addwf	(_Load^(0+256)+5),f
 10009                           
 10010                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10011  00F0  3003               	movlw	3
 10012  00F1  0020               	movlb	0	; select bank0
 10013  00F2  00A0               	movwf	___lwdiv@divisor
 10014  00F3  3000               	movlw	0
 10015  00F4  00A1               	movwf	___lwdiv@divisor+1
 10016  00F5  0022               	movlb	2	; select bank2
 10017  00F6  082F               	movf	((_Load+1)^(0+256)+7),w
 10018  00F7  0020               	movlb	0	; select bank0
 10019  00F8  01A3               	clrf	___lwdiv@dividend+1
 10020  00F9  07A3               	addwf	___lwdiv@dividend+1,f
 10021  00FA  0022               	movlb	2	; select bank2
 10022  00FB  082E               	movf	(_Load^(0+256)+7),w
 10023  00FC  0020               	movlb	0	; select bank0
 10024  00FD  01A2               	clrf	___lwdiv@dividend
 10025  00FE  07A2               	addwf	___lwdiv@dividend,f
 10026  00FF  3192  223B  3180   	fcall	___lwdiv
 10027  0102  0020               	movlb	0	; select bank0
 10028  0103  0821               	movf	?___lwdiv+1,w
 10029  0104  0022               	movlb	2	; select bank2
 10030  0105  01AF               	clrf	((_Load+1)^(0+256)+7)
 10031  0106  07AF               	addwf	((_Load+1)^(0+256)+7),f
 10032  0107  0020               	movlb	0	; select bank0
 10033  0108  0820               	movf	?___lwdiv,w
 10034  0109  0022               	movlb	2	; select bank2
 10035  010A  01AE               	clrf	(_Load^(0+256)+7)
 10036  010B  07AE               	addwf	(_Load^(0+256)+7),f
 10037                           
 10038                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10039  010C  319E  265B  3180   	fcall	_setLoad_AH_AL_Restore
 10040                           
 10041                           ;OverLoad_B1.c: 108: if (Load.ADH > Load.ADL) {
 10042  010F  0022               	movlb	2	; select bank2
 10043  0110  082D               	movf	((_Load+1)^(0+256)+5),w
 10044  0111  022F               	subwf	((_Load+1)^(0+256)+7),w
 10045  0112  1D03               	skipz
 10046  0113  2916               	goto	u12565
 10047  0114  082C               	movf	(_Load^(0+256)+5),w
 10048  0115  022E               	subwf	(_Load^(0+256)+7),w
 10049  0116                     u12565:	
 10050  0116  1803               	skipnc
 10051  0117  0008               	return
 10052                           
 10053                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10054  0118  3005               	movlw	5
 10055  0119  3E27               	addlw	_Load& (0+255)
 10056  011A  0086               	movwf	6
 10057  011B  3001               	movlw	1	; select bank2/3
 10058  011C  0087               	movwf	7
 10059  011D  092E               	comf	(_Load^(0+256)+7),w
 10060  011E  0020               	movlb	0	; select bank0
 10061  011F  00A8               	movwf	??_Load_Main
 10062  0120  0022               	movlb	2	; select bank2
 10063  0121  092F               	comf	((_Load+1)^(0+256)+7),w
 10064  0122  0020               	movlb	0	; select bank0
 10065  0123  00A9               	movwf	??_Load_Main+1
 10066  0124  0AA8               	incf	??_Load_Main,f
 10067  0125  1903               	skipnz
 10068  0126  0AA9               	incf	??_Load_Main+1,f
 10069  0127  3F40               	moviw [0]fsr1
 10070  0128  0728               	addwf	??_Load_Main,w
 10071  0129  0022               	movlb	2	; select bank2
 10072  012A  00C6               	movwf	(_Load^(0+256)+31)
 10073  012B  3F41               	moviw [1]fsr1
 10074  012C  0020               	movlb	0	; select bank0
 10075  012D  3D29               	addwfc	??_Load_Main+1,w
 10076  012E  0022               	movlb	2	; select bank2
 10077  012F  00C7               	movwf	(_Load^(0+256)+32)
 10078                           
 10079                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10080  0130  01AC               	clrf	(_Load^(0+256)+5)
 10081  0131  01AD               	clrf	((_Load+1)^(0+256)+5)
 10082                           
 10083                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10084  0132  01AE               	clrf	(_Load^(0+256)+7)
 10085  0133  01AF               	clrf	((_Load+1)^(0+256)+7)
 10086                           
 10087                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10088  0134  1DA7               	btfss	_Load^(0+256),3
 10089  0135  2995               	goto	l10757
 10090                           
 10091                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10092  0136  3002               	movlw	2
 10093  0137  0250               	subwf	(_Load^(0+256)+41),w
 10094  0138  1803               	skipnc
 10095  0139  2995               	goto	l10757
 10096                           
 10097                           ;OverLoad_B1.c: 115: Load.Count++;
 10098  013A  3001               	movlw	1
 10099  013B  0020               	movlb	0	; select bank0
 10100  013C  00A8               	movwf	??_Load_Main
 10101  013D  0828               	movf	??_Load_Main,w
 10102  013E  0022               	movlb	2	; select bank2
 10103  013F  07D0               	addwf	(_Load^(0+256)+41),f
 10104                           
 10105                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
 10106  0140  319B  2344  3180   	fcall	_getDimmer_Load_Status
 10107  0143  0020               	movlb	0	; select bank0
 10108  0144  00A8               	movwf	??_Load_Main
 10109  0145  0828               	movf	??_Load_Main,w
 10110  0146  00AB               	movwf	Load_Main@Load_Status
 10111                           
 10112                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
 10113  0147  319D  254D  3180   	fcall	_getMain_Lights_Count
 10114  014A  0020               	movlb	0	; select bank0
 10115  014B  00A8               	movwf	??_Load_Main
 10116  014C  0828               	movf	??_Load_Main,w
 10117  014D  0022               	movlb	2	; select bank2
 10118  014E  00D3               	movwf	(_Load^(0+256)+44)
 10119                           
 10120                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
 10121  014F  0850               	movf	(_Load^(0+256)+41),w
 10122  0150  3A01               	xorlw	1
 10123  0151  1D03               	skipz
 10124  0152  295D               	goto	l10743
 10125                           
 10126                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
 10127  0153  3002               	movlw	2
 10128  0154  0020               	movlb	0	; select bank0
 10129  0155  00A8               	movwf	??_Load_Main
 10130  0156  0828               	movf	??_Load_Main,w
 10131  0157  0022               	movlb	2	; select bank2
 10132  0158  00D2               	movwf	(_Load^(0+256)+43)
 10133                           
 10134                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*50);
 10135  0159  30E8               	movlw	232
 10136  015A  00CC               	movwf	(_Load^(0+256)+37)
 10137  015B  3003               	movlw	3
 10138  015C  2968               	goto	L5
 10139  015D                     l10743:	
 10140                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
 10141                           
 10142  015D  0850               	movf	(_Load^(0+256)+41),w
 10143  015E  3A02               	xorlw	2
 10144  015F  1D03               	skipz
 10145  0160  2995               	goto	l10757
 10146                           
 10147                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
 10148  0161  0853               	movf	(_Load^(0+256)+44),w
 10149  0162  3A01               	xorlw	1
 10150  0163  1D03               	skipz
 10151  0164  296A               	goto	l10749
 10152                           
 10153                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.1*50);
 10154  0165  3037               	movlw	55
 10155  0166  00CC               	movwf	(_Load^(0+256)+37)
 10156  0167  3000               	movlw	0
 10157  0168                     L5:	
 10158  0168  00CD               	movwf	(_Load^(0+256)+38)
 10159                           
 10160                           ;OverLoad_B1.c: 124: } else {
 10161  0169  2995               	goto	l10757
 10162  016A                     l10749:	
 10163                           
 10164                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 10165  016A  0020               	movlb	0	; select bank0
 10166  016B  08AB               	movf	Load_Main@Load_Status,f
 10167  016C  1D03               	skipz
 10168  016D  2989               	goto	l10753
 10169                           
 10170                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 10171  016E  0022               	movlb	2	; select bank2
 10172  016F  0853               	movf	(_Load^(0+256)+44),w
 10173  0170  0020               	movlb	0	; select bank0
 10174  0171  00A8               	movwf	??_Load_Main
 10175  0172  01A9               	clrf	??_Load_Main+1
 10176  0173  0828               	movf	??_Load_Main,w
 10177  0174  00A0               	movwf	___wmul@multiplier
 10178  0175  0829               	movf	??_Load_Main+1,w
 10179  0176  00A1               	movwf	___wmul@multiplier+1
 10180  0177  3037               	movlw	55
 10181  0178  00A2               	movwf	___wmul@multiplicand
 10182  0179  3000               	movlw	0
 10183  017A  00A3               	movwf	___wmul@multiplicand+1
 10184  017B  319E  2694  3180   	fcall	___wmul
 10185  017E  0020               	movlb	0	; select bank0
 10186  017F  0821               	movf	?___wmul+1,w
 10187  0180  0022               	movlb	2	; select bank2
 10188  0181  01CD               	clrf	((_Load+1)^(0+256)+37)
 10189  0182  07CD               	addwf	((_Load+1)^(0+256)+37),f
 10190  0183  0020               	movlb	0	; select bank0
 10191  0184  0820               	movf	?___wmul,w
 10192  0185  0022               	movlb	2	; select bank2
 10193  0186  01CC               	clrf	(_Load^(0+256)+37)
 10194  0187  07CC               	addwf	(_Load^(0+256)+37),f
 10195                           
 10196                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 10197  0188  2995               	goto	l10757
 10198  0189                     l10753:	
 10199  0189  0020               	movlb	0	; select bank0
 10200  018A  082B               	movf	Load_Main@Load_Status,w
 10201  018B  3A01               	xorlw	1
 10202  018C  1D03               	skipz
 10203  018D  2995               	goto	l10757
 10204                           
 10205                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10206  018E  0022               	movlb	2	; select bank2
 10207  018F  0830               	movf	(_Load^(0+256)+9),w
 10208  0190  3E37               	addlw	55
 10209  0191  00CC               	movwf	(_Load^(0+256)+37)
 10210  0192  3000               	movlw	0
 10211  0193  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 10212  0194  00CD               	movwf	((_Load+1)^(0+256)+37)
 10213  0195                     l10757:	
 10214                           
 10215                           ;OverLoad_B1.c: 129: }
 10216                           ;OverLoad_B1.c: 130: }
 10217                           ;OverLoad_B1.c: 131: }
 10218                           ;OverLoad_B1.c: 132: }
 10219                           ;OverLoad_B1.c: 133: }
 10220                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 10221  0195  0022               	movlb	2	; select bank2
 10222  0196  084D               	movf	((_Load+1)^(0+256)+37),w
 10223  0197  0247               	subwf	((_Load+1)^(0+256)+31),w
 10224  0198  1D03               	skipz
 10225  0199  299C               	goto	u12645
 10226  019A  084C               	movf	(_Load^(0+256)+37),w
 10227  019B  0246               	subwf	(_Load^(0+256)+31),w
 10228  019C                     u12645:	
 10229  019C  1C03               	skipc
 10230  019D  29AB               	goto	l10767
 10231                           
 10232                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 10233  019E  3001               	movlw	1
 10234  019F  0020               	movlb	0	; select bank0
 10235  01A0  00A8               	movwf	??_Load_Main
 10236  01A1  0828               	movf	??_Load_Main,w
 10237  01A2  0022               	movlb	2	; select bank2
 10238  01A3  07D1               	addwf	(_Load^(0+256)+42),f
 10239                           
 10240                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 10241  01A4  0851               	movf	(_Load^(0+256)+42),w
 10242  01A5  0252               	subwf	(_Load^(0+256)+43),w
 10243  01A6  1803               	skipnc
 10244  01A7  0008               	return
 10245                           
 10246                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 10247  01A8  01D1               	clrf	(_Load^(0+256)+42)
 10248                           
 10249                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 10250  01A9  16A7               	bsf	_Load^(0+256),5
 10251                           
 10252                           ;OverLoad_B1.c: 161: }
 10253                           ;OverLoad_B1.c: 162: } else {
 10254  01AA  0008               	return
 10255  01AB                     l10767:	
 10256                           
 10257                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 10258  01AB  01D1               	clrf	(_Load^(0+256)+42)
 10259                           
 10260                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 10261  01AC  1DA7               	btfss	_Load^(0+256),3
 10262  01AD  0008               	return
 10263                           
 10264                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 10265  01AE  3001               	movlw	1
 10266  01AF  0020               	movlb	0	; select bank0
 10267  01B0  00A8               	movwf	??_Load_Main
 10268  01B1  0828               	movf	??_Load_Main,w
 10269  01B2  0022               	movlb	2	; select bank2
 10270  01B3  07D4               	addwf	(_Load^(0+256)+45),f
 10271                           
 10272                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 10273  01B4  3003               	movlw	3
 10274  01B5  0254               	subwf	(_Load^(0+256)+45),w
 10275  01B6  1C03               	skipc
 10276  01B7  0008               	return
 10277                           
 10278                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 10279  01B8  01D4               	clrf	(_Load^(0+256)+45)
 10280                           
 10281                           ;OverLoad_B1.c: 168: Load.OK = 1;
 10282  01B9  17A7               	bsf	_Load^(0+256),7
 10283                           
 10284                           ;OverLoad_B1.c: 169: Load.Run = 0;
 10285  01BA  11A7               	bcf	_Load^(0+256),3
 10286                           
 10287                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10288  01BB  01D0               	clrf	(_Load^(0+256)+41)
 10289                           
 10290                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 10291  01BC  0847               	movf	((_Load+1)^(0+256)+31),w
 10292  01BD  01B1               	clrf	((_Load+1)^(0+256)+9)
 10293  01BE  07B1               	addwf	((_Load+1)^(0+256)+9),f
 10294  01BF  0846               	movf	(_Load^(0+256)+31),w
 10295  01C0  01B0               	clrf	(_Load^(0+256)+9)
 10296  01C1  07B0               	addwf	(_Load^(0+256)+9),f
 10297                           
 10298                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 10299  01C2  3003               	movlw	3
 10300  01C3  0020               	movlb	0	; select bank0
 10301  01C4  00A8               	movwf	??_Load_Main
 10302  01C5  0828               	movf	??_Load_Main,w
 10303  01C6  0022               	movlb	2	; select bank2
 10304  01C7  00D2               	movwf	(_Load^(0+256)+43)
 10305                           
 10306                           ;OverLoad_B1.c: 176: }
 10307                           ;OverLoad_B1.c: 177: }
 10308                           ;OverLoad_B1.c: 200: }
 10309                           ;OverLoad_B1.c: 201: }
 10310                           ;OverLoad_B1.c: 202: }
 10311                           ;OverLoad_B1.c: 203: } else {
 10312  01C8  0008               	return
 10313  01C9                     l1739:	
 10314                           
 10315                           ;OverLoad_B1.c: 204: Load.ADtoGO = 1;
 10316  01C9  1627               	bsf	_Load^(0+256),4
 10317                           
 10318                           ;OverLoad_B1.c: 205: }
 10319                           ;OverLoad_B1.c: 206: } else {
 10320  01CA  0008               	return
 10321  01CB                     l1738:	
 10322                           
 10323                           ;OverLoad_B1.c: 207: if (Load.LightsON == 1) {
 10324  01CB  1D27               	btfss	_Load^(0+256),2
 10325  01CC  29DE               	goto	l10805
 10326                           
 10327                           ;OverLoad_B1.c: 208: Load.LightsON = 0;
 10328  01CD  1127               	bcf	_Load^(0+256),2
 10329                           
 10330                           ;OverLoad_B1.c: 210: Load.ADtoGO = 0;
 10331  01CE  1227               	bcf	_Load^(0+256),4
 10332                           
 10333                           ;OverLoad_B1.c: 211: Load.Time = 0;
 10334  01CF  01A8               	clrf	(_Load^(0+256)+1)
 10335  01D0  01A9               	clrf	((_Load+1)^(0+256)+1)
 10336                           
 10337                           ;OverLoad_B1.c: 212: setLoad_AH_AL_Restore();
 10338  01D1  319E  265B  3180   	fcall	_setLoad_AH_AL_Restore
 10339                           
 10340                           ;OverLoad_B1.c: 214: Load.ErrorCount = 0;
 10341  01D4  0022               	movlb	2	; select bank2
 10342  01D5  01D1               	clrf	(_Load^(0+256)+42)
 10343                           
 10344                           ;OverLoad_B1.c: 215: Load.SafeCount = 0;
 10345  01D6  01D4               	clrf	(_Load^(0+256)+45)
 10346                           
 10347                           ;OverLoad_B1.c: 217: Load.ADH = 0;
 10348  01D7  01AC               	clrf	(_Load^(0+256)+5)
 10349  01D8  01AD               	clrf	((_Load+1)^(0+256)+5)
 10350                           
 10351                           ;OverLoad_B1.c: 218: Load.ADL = 0;
 10352  01D9  01AE               	clrf	(_Load^(0+256)+7)
 10353  01DA  01AF               	clrf	((_Load+1)^(0+256)+7)
 10354                           
 10355                           ;OverLoad_B1.c: 224: Load.Run = 0;
 10356  01DB  11A7               	bcf	_Load^(0+256),3
 10357                           
 10358                           ;OverLoad_B1.c: 225: Load.Count = 0;
 10359  01DC  01D0               	clrf	(_Load^(0+256)+41)
 10360                           
 10361                           ;OverLoad_B1.c: 226: Load.OK = 0;
 10362  01DD  13A7               	bcf	_Load^(0+256),7
 10363  01DE                     l10805:	
 10364                           
 10365                           ;OverLoad_B1.c: 248: }
 10366                           ;OverLoad_B1.c: 249: if (Load.ERROR == 1) {
 10367  01DE  1EA7               	btfss	_Load^(0+256),5
 10368  01DF  0008               	return
 10369                           
 10370                           ;OverLoad_B1.c: 250: Load.ErrorTime++;
 10371  01E0  3001               	movlw	1
 10372  01E1  07AA               	addwf	(_Load^(0+256)+3),f
 10373  01E2  3000               	movlw	0
 10374  01E3  3DAB               	addwfc	((_Load+1)^(0+256)+3),f
 10375                           
 10376                           ;OverLoad_B1.c: 251: if (Load.ErrorTime >= 1000) {
 10377  01E4  3003               	movlw	3
 10378  01E5  022B               	subwf	((_Load+1)^(0+256)+3),w
 10379  01E6  30E8               	movlw	232
 10380  01E7  1903               	skipnz
 10381  01E8  022A               	subwf	(_Load^(0+256)+3),w
 10382  01E9  1C03               	skipc
 10383  01EA  0008               	return
 10384                           
 10385                           ;OverLoad_B1.c: 252: Load.ErrorTime = 0;
 10386  01EB  01AA               	clrf	(_Load^(0+256)+3)
 10387  01EC  01AB               	clrf	((_Load+1)^(0+256)+3)
 10388                           
 10389                           ;OverLoad_B1.c: 253: Load.ERROR = 0;
 10390  01ED  12A7               	bcf	_Load^(0+256),5
 10391                           
 10392                           ;OverLoad_B1.c: 254: }
 10393                           ;OverLoad_B1.c: 255: }
 10394                           ;OverLoad_B1.c: 256: }
 10395                           ;OverLoad_B1.c: 257: } else {
 10396  01EE  0008               	return
 10397  01EF                     l1728:	
 10398                           
 10399                           ;OverLoad_B1.c: 258: if (myMain.PowerON == 1) {
 10400  01EF  0021               	movlb	1	; select bank1
 10401  01F0  1C20               	btfss	_myMain^(0+128),0
 10402  01F1  0008               	return
 10403                           
 10404                           ;OverLoad_B1.c: 259: Load.Enable = 1;
 10405  01F2  0022               	movlb	2	; select bank2
 10406  01F3  1427               	bsf	_Load^(0+256),0
 10407  01F4  0008               	return
 10408  01F5                     __end_of_Load_Main:	
 10409                           
 10410                           	psect	text52
 10411  1D4D                     __ptext52:	
 10412 ;; *************** function _getMain_Lights_Count *****************
 10413 ;; Defined at:
 10414 ;;		line 467 in file "../src/Main_B1.c"
 10415 ;; Parameters:    Size  Location     Type
 10416 ;;		None
 10417 ;; Auto vars:     Size  Location     Type
 10418 ;;  status2         1    2[BANK0 ] unsigned char 
 10419 ;;  status1         1    1[BANK0 ] unsigned char 
 10420 ;;  count           1    0[BANK0 ] unsigned char 
 10421 ;; Return value:  Size  Location     Type
 10422 ;;                  1    wreg      unsigned char 
 10423 ;; Registers used:
 10424 ;;		wreg, status,2, status,0
 10425 ;; Tracked objects:
 10426 ;;		On entry : 0/0
 10427 ;;		On exit  : 0/0
 10428 ;;		Unchanged: 0/0
 10429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10431 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;Total ram usage:        3 bytes
 10435 ;; Hardware stack levels used:    1
 10436 ;; Hardware stack levels required when called:    5
 10437 ;; This function calls:
 10438 ;;		Nothing
 10439 ;; This function is called by:
 10440 ;;		_Load_Main
 10441 ;; This function uses a non-reentrant model
 10442 ;;
 10443                           
 10444                           
 10445                           ;psect for function _getMain_Lights_Count
 10446  1D4D                     _getMain_Lights_Count:	
 10447                           
 10448                           ;Main_B1.c: 468: char count = 0;
 10449                           
 10450                           ;incstack = 0
 10451                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10452  1D4D  0020               	movlb	0	; select bank0
 10453  1D4E  01A0               	clrf	getMain_Lights_Count@count
 10454                           
 10455                           ;Main_B1.c: 472: char status1 = 0;
 10456  1D4F  01A1               	clrf	getMain_Lights_Count@status1
 10457                           
 10458                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 10459  1D50  3000               	movlw	0
 10460  1D51  0022               	movlb	2	; select bank2
 10461  1D52  1956               	btfsc	(_DimmerLights1^(0+256)+1),2	;volatile
 10462  1D53  3001               	movlw	1
 10463  1D54  0020               	movlb	0	; select bank0
 10464  1D55  00A1               	movwf	getMain_Lights_Count@status1
 10465                           
 10466                           ;Main_B1.c: 476: char status2 = 0;
 10467  1D56  01A2               	clrf	getMain_Lights_Count@status2
 10468                           
 10469                           ;Main_B1.c: 477: status2 = DimmerLights2.StatusFlag == 1 ? 1 : 0;
 10470  1D57  3000               	movlw	0
 10471  1D58  0023               	movlb	3	; select bank3
 10472  1D59  193F               	btfsc	(_DimmerLights2^(0+384)+1),2	;volatile
 10473  1D5A  3001               	movlw	1
 10474  1D5B  0020               	movlb	0	; select bank0
 10475  1D5C  00A2               	movwf	getMain_Lights_Count@status2
 10476                           
 10477                           ;Main_B1.c: 501: return count = (status1 + status2);
 10478  1D5D  0821               	movf	getMain_Lights_Count@status1,w
 10479  1D5E  0722               	addwf	getMain_Lights_Count@status2,w
 10480  1D5F  00A0               	movwf	getMain_Lights_Count@count
 10481  1D60  0008               	return
 10482  1D61                     __end_of_getMain_Lights_Count:	
 10483                           
 10484                           	psect	text53
 10485  1B44                     __ptext53:	
 10486 ;; *************** function _getDimmer_Load_Status *****************
 10487 ;; Defined at:
 10488 ;;		line 888 in file "../src/Dimmer_B1.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;		None
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;  status          1    0[BANK0 ] unsigned char 
 10493 ;; Return value:  Size  Location     Type
 10494 ;;                  1    wreg      unsigned char 
 10495 ;; Registers used:
 10496 ;;		wreg, status,2
 10497 ;; Tracked objects:
 10498 ;;		On entry : 0/0
 10499 ;;		On exit  : 0/0
 10500 ;;		Unchanged: 0/0
 10501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10505 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10506 ;;Total ram usage:        1 bytes
 10507 ;; Hardware stack levels used:    1
 10508 ;; Hardware stack levels required when called:    5
 10509 ;; This function calls:
 10510 ;;		Nothing
 10511 ;; This function is called by:
 10512 ;;		_Load_Main
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           
 10517                           ;psect for function _getDimmer_Load_Status
 10518  1B44                     _getDimmer_Load_Status:	
 10519                           
 10520                           ;Dimmer_B1.c: 889: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10521                           
 10522                           ;incstack = 0
 10523                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10524  1B44  3000               	movlw	0
 10525  1B45  0021               	movlb	1	; select bank1
 10526  1B46  19C6               	btfsc	_Dimmer^(0+128),3	;volatile
 10527  1B47  3001               	movlw	1
 10528  1B48  0020               	movlb	0	; select bank0
 10529  1B49  00A0               	movwf	getDimmer_Load_Status@status
 10530                           
 10531                           ;Dimmer_B1.c: 890: return status;
 10532  1B4A  0820               	movf	getDimmer_Load_Status@status,w
 10533  1B4B  0008               	return
 10534  1B4C                     __end_of_getDimmer_Load_Status:	
 10535                           
 10536                           	psect	text54
 10537  1B3C                     __ptext54:	
 10538 ;; *************** function _getDimmer_LoadGO *****************
 10539 ;; Defined at:
 10540 ;;		line 623 in file "../src/Dimmer_B1.c"
 10541 ;; Parameters:    Size  Location     Type
 10542 ;;		None
 10543 ;; Auto vars:     Size  Location     Type
 10544 ;;  loadgo          1    0[BANK0 ] unsigned char 
 10545 ;; Return value:  Size  Location     Type
 10546 ;;                  1    wreg      unsigned char 
 10547 ;; Registers used:
 10548 ;;		wreg, status,2
 10549 ;; Tracked objects:
 10550 ;;		On entry : 0/0
 10551 ;;		On exit  : 0/0
 10552 ;;		Unchanged: 0/0
 10553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;Total ram usage:        1 bytes
 10559 ;; Hardware stack levels used:    1
 10560 ;; Hardware stack levels required when called:    5
 10561 ;; This function calls:
 10562 ;;		Nothing
 10563 ;; This function is called by:
 10564 ;;		_Load_Main
 10565 ;; This function uses a non-reentrant model
 10566 ;;
 10567                           
 10568                           
 10569                           ;psect for function _getDimmer_LoadGO
 10570  1B3C                     _getDimmer_LoadGO:	
 10571                           
 10572                           ;Dimmer_B1.c: 624: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 10573                           
 10574                           ;incstack = 0
 10575                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 10576  1B3C  3000               	movlw	0
 10577  1B3D  0021               	movlb	1	; select bank1
 10578  1B3E  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 10579  1B3F  3001               	movlw	1
 10580  1B40  0020               	movlb	0	; select bank0
 10581  1B41  00A0               	movwf	getDimmer_LoadGO@loadgo
 10582                           
 10583                           ;Dimmer_B1.c: 625: return loadgo;
 10584  1B42  0820               	movf	getDimmer_LoadGO@loadgo,w
 10585  1B43  0008               	return
 10586  1B44                     __end_of_getDimmer_LoadGO:	
 10587                           
 10588                           	psect	text55
 10589  10DD                     __ptext55:	
 10590 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 10591 ;; Defined at:
 10592 ;;		line 832 in file "../src/Dimmer_B1.c"
 10593 ;; Parameters:    Size  Location     Type
 10594 ;;		None
 10595 ;; Auto vars:     Size  Location     Type
 10596 ;;  i               2    4[BANK0 ] int 
 10597 ;;  adjsw           1    6[BANK0 ] unsigned char 
 10598 ;;  count           1    3[BANK0 ] unsigned char 
 10599 ;; Return value:  Size  Location     Type
 10600 ;;                  1    wreg      unsigned char 
 10601 ;; Registers used:
 10602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10603 ;; Tracked objects:
 10604 ;;		On entry : 0/0
 10605 ;;		On exit  : 0/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;Total ram usage:        5 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; Hardware stack levels required when called:    6
 10615 ;; This function calls:
 10616 ;;		_DimmerLightsPointSelect
 10617 ;; This function is called by:
 10618 ;;		_Load_Main
 10619 ;; This function uses a non-reentrant model
 10620 ;;
 10621                           
 10622                           
 10623                           ;psect for function _getAll_DimmerLights_AdjSw
 10624  10DD                     _getAll_DimmerLights_AdjSw:	
 10625                           
 10626                           ;Dimmer_B1.c: 833: char count = 2;
 10627                           
 10628                           ;incstack = 0
 10629                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10630  10DD  3002               	movlw	2
 10631  10DE  0020               	movlb	0	; select bank0
 10632  10DF  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10633  10E0  0822               	movf	??_getAll_DimmerLights_AdjSw,w
 10634  10E1  00A3               	movwf	getAll_DimmerLights_AdjSw@count
 10635                           
 10636                           ;Dimmer_B1.c: 834: char adjsw = 0;
 10637  10E2  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 10638                           
 10639                           ;Dimmer_B1.c: 836: for (int i = 0; i < count; i++) {
 10640  10E3  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 10641  10E4  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 10642  10E5                     l9991:	
 10643  10E5  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 10644  10E6  3A80               	xorlw	128
 10645  10E7  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10646  10E8  3080               	movlw	128
 10647  10E9  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 10648  10EA  1D03               	skipz
 10649  10EB  28EE               	goto	u11285
 10650  10EC  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 10651  10ED  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 10652  10EE                     u11285:	
 10653  10EE  1803               	btfsc	3,0
 10654  10EF  2907               	goto	l9993
 10655                           
 10656                           ;Dimmer_B1.c: 837: DimmerLightsPointSelect(i + 1);
 10657  10F0  0020               	movlb	0	; select bank0
 10658  10F1  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 10659  10F2  3E01               	addlw	1
 10660  10F3  319C  24B2  3190   	fcall	_DimmerLightsPointSelect
 10661                           
 10662                           ;Dimmer_B1.c: 838: if (adjsw == 0) {
 10663  10F6  0020               	movlb	0	; select bank0
 10664  10F7  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 10665  10F8  1D03               	skipz
 10666  10F9  2902               	goto	l9989
 10667                           
 10668                           ;Dimmer_B1.c: 839: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 10669  10FA  0A6F               	incf	_DimmerLights,w
 10670  10FB  0086               	movwf	6
 10671  10FC  3001               	movlw	1	; select bank2/3
 10672  10FD  0087               	movwf	7
 10673  10FE  3000               	movlw	0
 10674  10FF  1B01               	btfsc	1,6
 10675  1100  3001               	movlw	1
 10676  1101  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 10677  1102                     l9989:	
 10678  1102  3001               	movlw	1
 10679  1103  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 10680  1104  3000               	movlw	0
 10681  1105  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 10682  1106  28E5               	goto	l9991
 10683  1107                     l9993:	
 10684                           
 10685                           ;Dimmer_B1.c: 840: }
 10686                           ;Dimmer_B1.c: 841: }
 10687                           ;Dimmer_B1.c: 842: return adjsw;
 10688  1107  0020               	movlb	0	; select bank0
 10689  1108  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 10690  1109  0008               	return
 10691  110A                     __end_of_getAll_DimmerLights_AdjSw:	
 10692                           
 10693                           	psect	text56
 10694  1E94                     __ptext56:	
 10695 ;; *************** function ___wmul *****************
 10696 ;; Defined at:
 10697 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10700 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;  product         2    4[BANK0 ] unsigned int 
 10703 ;; Return value:  Size  Location     Type
 10704 ;;                  2    0[BANK0 ] unsigned int 
 10705 ;; Registers used:
 10706 ;;		wreg, status,2, status,0
 10707 ;; Tracked objects:
 10708 ;;		On entry : 0/0
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10712 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10716 ;;Total ram usage:        6 bytes
 10717 ;; Hardware stack levels used:    1
 10718 ;; Hardware stack levels required when called:    5
 10719 ;; This function calls:
 10720 ;;		Nothing
 10721 ;; This function is called by:
 10722 ;;		_Load_Main
 10723 ;; This function uses a non-reentrant model
 10724 ;;
 10725                           
 10726                           
 10727                           ;psect for function ___wmul
 10728  1E94                     ___wmul:	
 10729                           
 10730                           ;incstack = 0
 10731                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10732  1E94  0020               	movlb	0	; select bank0
 10733  1E95  01A4               	clrf	___wmul@product
 10734  1E96  01A5               	clrf	___wmul@product+1
 10735  1E97                     l10379:	
 10736  1E97  1C20               	btfss	___wmul@multiplier,0
 10737  1E98  2E9D               	goto	l2870
 10738  1E99  0822               	movf	___wmul@multiplicand,w
 10739  1E9A  07A4               	addwf	___wmul@product,f
 10740  1E9B  0823               	movf	___wmul@multiplicand+1,w
 10741  1E9C  3DA5               	addwfc	___wmul@product+1,f
 10742  1E9D                     l2870:	
 10743  1E9D  3001               	movlw	1
 10744  1E9E                     u11925:	
 10745  1E9E  35A2               	lslf	___wmul@multiplicand,f
 10746  1E9F  0DA3               	rlf	___wmul@multiplicand+1,f
 10747  1EA0  0B89               	decfsz	9,f
 10748  1EA1  2E9E               	goto	u11925
 10749  1EA2  3001               	movlw	1
 10750  1EA3                     u11935:	
 10751  1EA3  36A1               	lsrf	___wmul@multiplier+1,f
 10752  1EA4  0CA0               	rrf	___wmul@multiplier,f
 10753  1EA5  0B89               	decfsz	9,f
 10754  1EA6  2EA3               	goto	u11935
 10755  1EA7  0821               	movf	___wmul@multiplier+1,w
 10756  1EA8  0420               	iorwf	___wmul@multiplier,w
 10757  1EA9  1D03               	skipz
 10758  1EAA  2E97               	goto	l10379
 10759  1EAB  0825               	movf	___wmul@product+1,w
 10760  1EAC  01A1               	clrf	?___wmul+1
 10761  1EAD  07A1               	addwf	?___wmul+1,f
 10762  1EAE  0824               	movf	___wmul@product,w
 10763  1EAF  01A0               	clrf	?___wmul
 10764  1EB0  07A0               	addwf	?___wmul,f
 10765  1EB1  0008               	return
 10766  1EB2                     __end_of___wmul:	
 10767                           
 10768                           	psect	text57
 10769  123B                     __ptext57:	
 10770 ;; *************** function ___lwdiv *****************
 10771 ;; Defined at:
 10772 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10773 ;; Parameters:    Size  Location     Type
 10774 ;;  divisor         2    0[BANK0 ] unsigned int 
 10775 ;;  dividend        2    2[BANK0 ] unsigned int 
 10776 ;; Auto vars:     Size  Location     Type
 10777 ;;  quotient        2    6[BANK0 ] unsigned int 
 10778 ;;  counter         1    5[BANK0 ] unsigned char 
 10779 ;; Return value:  Size  Location     Type
 10780 ;;                  2    0[BANK0 ] unsigned int 
 10781 ;; Registers used:
 10782 ;;		wreg, status,2, status,0
 10783 ;; Tracked objects:
 10784 ;;		On entry : 0/0
 10785 ;;		On exit  : 0/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10788 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10789 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;Total ram usage:        8 bytes
 10793 ;; Hardware stack levels used:    1
 10794 ;; Hardware stack levels required when called:    5
 10795 ;; This function calls:
 10796 ;;		Nothing
 10797 ;; This function is called by:
 10798 ;;		_Load_Main
 10799 ;; This function uses a non-reentrant model
 10800 ;;
 10801                           
 10802                           
 10803                           ;psect for function ___lwdiv
 10804  123B                     ___lwdiv:	
 10805                           
 10806                           ;incstack = 0
 10807                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10808  123B  0020               	movlb	0	; select bank0
 10809  123C  01A6               	clrf	___lwdiv@quotient
 10810  123D  01A7               	clrf	___lwdiv@quotient+1
 10811  123E  0821               	movf	___lwdiv@divisor+1,w
 10812  123F  0420               	iorwf	___lwdiv@divisor,w
 10813  1240  1903               	skipnz
 10814  1241  2A6B               	goto	l10411
 10815  1242  01A5               	clrf	___lwdiv@counter
 10816  1243  0AA5               	incf	___lwdiv@counter,f
 10817  1244                     l10399:	
 10818  1244  1BA1               	btfsc	___lwdiv@divisor+1,7
 10819  1245  2A50               	goto	l10401
 10820  1246  3001               	movlw	1
 10821  1247                     u11965:	
 10822  1247  35A0               	lslf	___lwdiv@divisor,f
 10823  1248  0DA1               	rlf	___lwdiv@divisor+1,f
 10824  1249  0B89               	decfsz	9,f
 10825  124A  2A47               	goto	u11965
 10826  124B  3001               	movlw	1
 10827  124C  00A4               	movwf	??___lwdiv
 10828  124D  0824               	movf	??___lwdiv,w
 10829  124E  07A5               	addwf	___lwdiv@counter,f
 10830  124F  2A44               	goto	l10399
 10831  1250                     l10401:	
 10832  1250  3001               	movlw	1
 10833  1251                     u11985:	
 10834  1251  35A6               	lslf	___lwdiv@quotient,f
 10835  1252  0DA7               	rlf	___lwdiv@quotient+1,f
 10836  1253  0B89               	decfsz	9,f
 10837  1254  2A51               	goto	u11985
 10838  1255  0821               	movf	___lwdiv@divisor+1,w
 10839  1256  0223               	subwf	___lwdiv@dividend+1,w
 10840  1257  1D03               	skipz
 10841  1258  2A5B               	goto	u11995
 10842  1259  0820               	movf	___lwdiv@divisor,w
 10843  125A  0222               	subwf	___lwdiv@dividend,w
 10844  125B                     u11995:	
 10845  125B  1C03               	skipc
 10846  125C  2A62               	goto	l10407
 10847  125D  0820               	movf	___lwdiv@divisor,w
 10848  125E  02A2               	subwf	___lwdiv@dividend,f
 10849  125F  0821               	movf	___lwdiv@divisor+1,w
 10850  1260  3BA3               	subwfb	___lwdiv@dividend+1,f
 10851  1261  1426               	bsf	___lwdiv@quotient,0
 10852  1262                     l10407:	
 10853  1262  3001               	movlw	1
 10854  1263                     u12005:	
 10855  1263  36A1               	lsrf	___lwdiv@divisor+1,f
 10856  1264  0CA0               	rrf	___lwdiv@divisor,f
 10857  1265  0B89               	decfsz	9,f
 10858  1266  2A63               	goto	u12005
 10859  1267  3001               	movlw	1
 10860  1268  02A5               	subwf	___lwdiv@counter,f
 10861  1269  1D03               	btfss	3,2
 10862  126A  2A50               	goto	l10401
 10863  126B                     l10411:	
 10864  126B  0827               	movf	___lwdiv@quotient+1,w
 10865  126C  01A1               	clrf	?___lwdiv+1
 10866  126D  07A1               	addwf	?___lwdiv+1,f
 10867  126E  0826               	movf	___lwdiv@quotient,w
 10868  126F  01A0               	clrf	?___lwdiv
 10869  1270  07A0               	addwf	?___lwdiv,f
 10870  1271  0008               	return
 10871  1272                     __end_of___lwdiv:	
 10872                           
 10873                           	psect	text58
 10874  1ADF                     __ptext58:	
 10875 ;; *************** function _Load_Initialization *****************
 10876 ;; Defined at:
 10877 ;;		line 9 in file "../src/OverLoad_B1.c"
 10878 ;; Parameters:    Size  Location     Type
 10879 ;;		None
 10880 ;; Auto vars:     Size  Location     Type
 10881 ;;		None
 10882 ;; Return value:  Size  Location     Type
 10883 ;;		None               void
 10884 ;; Registers used:
 10885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10886 ;; Tracked objects:
 10887 ;;		On entry : 0/0
 10888 ;;		On exit  : 0/0
 10889 ;;		Unchanged: 0/0
 10890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10895 ;;Total ram usage:        0 bytes
 10896 ;; Hardware stack levels used:    1
 10897 ;; Hardware stack levels required when called:    6
 10898 ;; This function calls:
 10899 ;;		_setLoad_AH_AL_Restore
 10900 ;; This function is called by:
 10901 ;;		_main
 10902 ;; This function uses a non-reentrant model
 10903 ;;
 10904                           
 10905                           
 10906                           ;psect for function _Load_Initialization
 10907  1ADF                     _Load_Initialization:	
 10908                           
 10909                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10910                           
 10911                           ;incstack = 0
 10912                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10913  1ADF  319E  265B         	fcall	_setLoad_AH_AL_Restore
 10914  1AE1  0008               	return
 10915  1AE2                     __end_of_Load_Initialization:	
 10916                           
 10917                           	psect	text59
 10918  1E5B                     __ptext59:	
 10919 ;; *************** function _setLoad_AH_AL_Restore *****************
 10920 ;; Defined at:
 10921 ;;		line 285 in file "../src/OverLoad_B1.c"
 10922 ;; Parameters:    Size  Location     Type
 10923 ;;		None
 10924 ;; Auto vars:     Size  Location     Type
 10925 ;;  i               1    1[BANK0 ] unsigned char 
 10926 ;; Return value:  Size  Location     Type
 10927 ;;		None               void
 10928 ;; Registers used:
 10929 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10930 ;; Tracked objects:
 10931 ;;		On entry : 0/0
 10932 ;;		On exit  : 0/0
 10933 ;;		Unchanged: 0/0
 10934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10936 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10937 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10938 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10939 ;;Total ram usage:        2 bytes
 10940 ;; Hardware stack levels used:    1
 10941 ;; Hardware stack levels required when called:    5
 10942 ;; This function calls:
 10943 ;;		Nothing
 10944 ;; This function is called by:
 10945 ;;		_Load_Initialization
 10946 ;;		_Load_Main
 10947 ;; This function uses a non-reentrant model
 10948 ;;
 10949                           
 10950                           
 10951                           ;psect for function _setLoad_AH_AL_Restore
 10952  1E5B                     _setLoad_AH_AL_Restore:	
 10953                           
 10954                           ;OverLoad_B1.c: 286: char i;
 10955                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 10956                           
 10957                           ;incstack = 0
 10958                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 10959  1E5B  0020               	movlb	0	; select bank0
 10960  1E5C  01A1               	clrf	setLoad_AH_AL_Restore@i
 10961  1E5D                     L6:	
 10962  1E5D  3005               	movlw	5
 10963  1E5E  0221               	subwf	setLoad_AH_AL_Restore@i,w
 10964  1E5F  1803               	btfsc	3,0
 10965  1E60  0008               	return
 10966                           
 10967                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 10968  1E61  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10969  1E62  3E32               	addlw	(_Load+11)& (0+255)
 10970  1E63  0086               	movwf	6
 10971  1E64  3001               	movlw	1	; select bank2/3
 10972  1E65  0087               	movwf	7
 10973  1E66  3000               	movlw	0
 10974  1E67  3FC0               	movwi [0]fsr1
 10975  1E68  3FC1               	movwi [1]fsr1
 10976                           
 10977                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 10978  1E69  3521               	lslf	setLoad_AH_AL_Restore@i,w
 10979  1E6A  3E3C               	addlw	(_Load+21)& (0+255)
 10980  1E6B  0086               	movwf	6
 10981  1E6C  3001               	movlw	1	; select bank2/3
 10982  1E6D  0087               	movwf	7
 10983  1E6E  30FF               	movlw	255
 10984  1E6F  3FC0               	movwi [0]fsr1
 10985  1E70  30FF               	movlw	255
 10986  1E71  3FC1               	movwi [1]fsr1
 10987  1E72  3001               	movlw	1
 10988  1E73  00A0               	movwf	??_setLoad_AH_AL_Restore
 10989  1E74  0820               	movf	??_setLoad_AH_AL_Restore,w
 10990  1E75  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 10991  1E76  2E5D               	goto	L6
 10992  1E77                     __end_of_setLoad_AH_AL_Restore:	
 10993                           
 10994                           	psect	text60
 10995  1BAC                     __ptext60:	
 10996 ;; *************** function _LED_Main *****************
 10997 ;; Defined at:
 10998 ;;		line 47 in file "../src/LED_B1.c"
 10999 ;; Parameters:    Size  Location     Type
 11000 ;;		None
 11001 ;; Auto vars:     Size  Location     Type
 11002 ;;		None
 11003 ;; Return value:  Size  Location     Type
 11004 ;;		None               void
 11005 ;; Registers used:
 11006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11007 ;; Tracked objects:
 11008 ;;		On entry : 0/0
 11009 ;;		On exit  : 0/0
 11010 ;;		Unchanged: 0/0
 11011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11016 ;;Total ram usage:        0 bytes
 11017 ;; Hardware stack levels used:    1
 11018 ;; Hardware stack levels required when called:    7
 11019 ;; This function calls:
 11020 ;;		_setLED_Main
 11021 ;; This function is called by:
 11022 ;;		_main
 11023 ;; This function uses a non-reentrant model
 11024 ;;
 11025                           
 11026                           
 11027                           ;psect for function _LED_Main
 11028  1BAC                     _LED_Main:	
 11029                           
 11030                           ;LED_B1.c: 53: setLED_Main(1);
 11031                           
 11032                           ;incstack = 0
 11033                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11034  1BAC  3001               	movlw	1
 11035  1BAD  3193  239F  319B   	fcall	_setLED_Main
 11036                           
 11037                           ;LED_B1.c: 56: setLED_Main(2);
 11038  1BB0  3002               	movlw	2
 11039  1BB1  3193  239F  319B   	fcall	_setLED_Main
 11040                           
 11041                           ;LED_B1.c: 62: setLED_Main(99);
 11042  1BB4  3063               	movlw	99
 11043  1BB5  3193  239F         	fcall	_setLED_Main
 11044  1BB7  0008               	return
 11045  1BB8                     __end_of_LED_Main:	
 11046                           
 11047                           	psect	text61
 11048  139F                     __ptext61:	
 11049 ;; *************** function _setLED_Main *****************
 11050 ;; Defined at:
 11051 ;;		line 221 in file "../src/LED_B1.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;  led             1    wreg     unsigned char 
 11054 ;; Auto vars:     Size  Location     Type
 11055 ;;  led             1    4[BANK0 ] unsigned char 
 11056 ;; Return value:  Size  Location     Type
 11057 ;;		None               void
 11058 ;; Registers used:
 11059 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11060 ;; Tracked objects:
 11061 ;;		On entry : 0/0
 11062 ;;		On exit  : 0/0
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;Total ram usage:        3 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; Hardware stack levels required when called:    6
 11072 ;; This function calls:
 11073 ;;		_LedPointSelect
 11074 ;; This function is called by:
 11075 ;;		_LED_Main
 11076 ;; This function uses a non-reentrant model
 11077 ;;
 11078                           
 11079                           
 11080                           ;psect for function _setLED_Main
 11081  139F                     _setLED_Main:	
 11082                           
 11083                           ;incstack = 0
 11084                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11085                           ;setLED_Main@led stored from wreg
 11086  139F  0020               	movlb	0	; select bank0
 11087  13A0  00A4               	movwf	setLED_Main@led
 11088                           
 11089                           ;LED_B1.c: 222: LedPointSelect(led);
 11090  13A1  0824               	movf	setLED_Main@led,w
 11091  13A2  319E  26F0  3193   	fcall	_LedPointSelect
 11092                           
 11093                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11094  13A5  0021               	movlb	1	; select bank1
 11095  13A6  084D               	movf	_LED^(0+128),w
 11096  13A7  0086               	movwf	6
 11097  13A8  3001               	movlw	1	; select bank2/3
 11098  13A9  0087               	movwf	7
 11099  13AA  1C81               	btfss	1,1
 11100  13AB  0008               	return
 11101                           
 11102                           ;LED_B1.c: 224: LED->Time++;
 11103  13AC  0A4D               	incf	_LED^(0+128),w
 11104  13AD  0086               	movwf	6
 11105  13AE  3001               	movlw	1	; select bank2/3
 11106  13AF  0087               	movwf	7
 11107  13B0  3001               	movlw	1
 11108  13B1  0781               	addwf	1,f
 11109  13B2  3141               	addfsr 1,1
 11110  13B3  1803               	skipnc
 11111  13B4  0A81               	incf	1,f
 11112                           
 11113                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11114  13B5  0A4D               	incf	_LED^(0+128),w
 11115  13B6  0086               	movwf	6
 11116  13B7  3001               	movlw	1	; select bank2/3
 11117  13B8  0087               	movwf	7
 11118  13B9  3F40               	moviw [0]fsr1
 11119  13BA  0020               	movlb	0	; select bank0
 11120  13BB  00A2               	movwf	??_setLED_Main
 11121  13BC  3F41               	moviw [1]fsr1
 11122  13BD  00A3               	movwf	??_setLED_Main+1
 11123  13BE  3000               	movlw	0
 11124  13BF  0223               	subwf	??_setLED_Main+1,w
 11125  13C0  3032               	movlw	50
 11126  13C1  1903               	skipnz
 11127  13C2  0222               	subwf	??_setLED_Main,w
 11128  13C3  1C03               	skipc
 11129  13C4  0008               	return
 11130                           
 11131                           ;LED_B1.c: 226: LED->Time = 0;
 11132  13C5  0021               	movlb	1	; select bank1
 11133  13C6  0A4D               	incf	_LED^(0+128),w
 11134  13C7  0086               	movwf	6
 11135  13C8  3001               	movlw	1	; select bank2/3
 11136  13C9  0087               	movwf	7
 11137  13CA  3000               	movlw	0
 11138  13CB  3FC0               	movwi [0]fsr1
 11139  13CC  3FC1               	movwi [1]fsr1
 11140                           
 11141                           ;LED_B1.c: 228: if (led == 1) {
 11142  13CD  0020               	movlb	0	; select bank0
 11143  13CE  0824               	movf	setLED_Main@led,w
 11144  13CF  3A01               	xorlw	1
 11145                           
 11146                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11147  13D0  3008               	movlw	8
 11148  13D1  1903               	btfsc	3,2
 11149  13D2  068C               	xorwf	12,f
 11150                           
 11151                           ;LED_B1.c: 230: }
 11152                           ;LED_B1.c: 233: if (led == 2) {
 11153  13D3  0824               	movf	setLED_Main@led,w
 11154  13D4  3A02               	xorlw	2
 11155  13D5  1D03               	skipz
 11156  13D6  2BD9               	goto	l1066
 11157                           
 11158                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11159  13D7  3080               	movlw	128
 11160  13D8  068E               	xorwf	14,f
 11161  13D9                     l1066:	
 11162                           
 11163                           ;LED_B1.c: 235: }
 11164                           ;LED_B1.c: 243: if (led == 99) {
 11165  13D9  0824               	movf	setLED_Main@led,w
 11166  13DA  3A63               	xorlw	99
 11167  13DB  1D03               	skipz
 11168  13DC  0008               	return
 11169                           
 11170                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11171  13DD  3020               	movlw	32
 11172  13DE  068D               	xorwf	13,f
 11173  13DF  0008               	return
 11174  13E0                     __end_of_setLED_Main:	
 11175                           
 11176                           	psect	text62
 11177  1BA0                     __ptext62:	
 11178 ;; *************** function _LED_Initialization *****************
 11179 ;; Defined at:
 11180 ;;		line 31 in file "../src/LED_B1.c"
 11181 ;; Parameters:    Size  Location     Type
 11182 ;;		None
 11183 ;; Auto vars:     Size  Location     Type
 11184 ;;		None
 11185 ;; Return value:  Size  Location     Type
 11186 ;;		None               void
 11187 ;; Registers used:
 11188 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11189 ;; Tracked objects:
 11190 ;;		On entry : 0/0
 11191 ;;		On exit  : 0/0
 11192 ;;		Unchanged: 0/0
 11193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11198 ;;Total ram usage:        0 bytes
 11199 ;; Hardware stack levels used:    1
 11200 ;; Hardware stack levels required when called:    8
 11201 ;; This function calls:
 11202 ;;		_setLED_Initialization
 11203 ;; This function is called by:
 11204 ;;		_main
 11205 ;; This function uses a non-reentrant model
 11206 ;;
 11207                           
 11208                           
 11209                           ;psect for function _LED_Initialization
 11210  1BA0                     _LED_Initialization:	
 11211                           
 11212                           ;LED_B1.c: 33: setLED_Initialization(1);
 11213                           
 11214                           ;incstack = 0
 11215                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11216  1BA0  3001               	movlw	1
 11217  1BA1  319C  247C  319B   	fcall	_setLED_Initialization
 11218                           
 11219                           ;LED_B1.c: 36: setLED_Initialization(2);
 11220  1BA4  3002               	movlw	2
 11221  1BA5  319C  247C  319B   	fcall	_setLED_Initialization
 11222                           
 11223                           ;LED_B1.c: 42: setLED_Initialization(99);
 11224  1BA8  3063               	movlw	99
 11225  1BA9  319C  247C         	fcall	_setLED_Initialization
 11226  1BAB  0008               	return
 11227  1BAC                     __end_of_LED_Initialization:	
 11228                           
 11229                           	psect	text63
 11230  1C7C                     __ptext63:	
 11231 ;; *************** function _setLED_Initialization *****************
 11232 ;; Defined at:
 11233 ;;		line 69 in file "../src/LED_B1.c"
 11234 ;; Parameters:    Size  Location     Type
 11235 ;;  led             1    wreg     unsigned char 
 11236 ;; Auto vars:     Size  Location     Type
 11237 ;;  led             1    4[BANK0 ] unsigned char 
 11238 ;; Return value:  Size  Location     Type
 11239 ;;		None               void
 11240 ;; Registers used:
 11241 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11242 ;; Tracked objects:
 11243 ;;		On entry : 0/0
 11244 ;;		On exit  : 0/0
 11245 ;;		Unchanged: 0/0
 11246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;Total ram usage:        1 bytes
 11252 ;; Hardware stack levels used:    1
 11253 ;; Hardware stack levels required when called:    7
 11254 ;; This function calls:
 11255 ;;		_LedPointSelect
 11256 ;;		_setLED
 11257 ;; This function is called by:
 11258 ;;		_LED_Initialization
 11259 ;; This function uses a non-reentrant model
 11260 ;;
 11261                           
 11262                           
 11263                           ;psect for function _setLED_Initialization
 11264  1C7C                     _setLED_Initialization:	
 11265                           
 11266                           ;incstack = 0
 11267                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11268                           ;setLED_Initialization@led stored from wreg
 11269  1C7C  0020               	movlb	0	; select bank0
 11270  1C7D  00A4               	movwf	setLED_Initialization@led
 11271                           
 11272                           ;LED_B1.c: 70: LedPointSelect(led);
 11273  1C7E  0824               	movf	setLED_Initialization@led,w
 11274  1C7F  319E  26F0  319C   	fcall	_LedPointSelect
 11275                           
 11276                           ;LED_B1.c: 71: LED->Enable = 1;
 11277  1C82  0021               	movlb	1	; select bank1
 11278  1C83  084D               	movf	_LED^(0+128),w
 11279  1C84  0086               	movwf	6
 11280  1C85  3001               	movlw	1	; select bank2/3
 11281  1C86  0087               	movwf	7
 11282  1C87  1401               	bsf	1,0
 11283                           
 11284                           ;LED_B1.c: 72: setLED(led, 0);
 11285  1C88  0020               	movlb	0	; select bank0
 11286  1C89  01A2               	clrf	setLED@command
 11287  1C8A  0824               	movf	setLED_Initialization@led,w
 11288  1C8B  3196  264F         	fcall	_setLED
 11289  1C8D  0008               	return
 11290  1C8E                     __end_of_setLED_Initialization:	
 11291                           
 11292                           	psect	text64
 11293  11CF                     __ptext64:	
 11294 ;; *************** function _Flash_Memory_Main *****************
 11295 ;; Defined at:
 11296 ;;		line 965 in file "../src/MCU_B1.c"
 11297 ;; Parameters:    Size  Location     Type
 11298 ;;		None
 11299 ;; Auto vars:     Size  Location     Type
 11300 ;;		None
 11301 ;; Return value:  Size  Location     Type
 11302 ;;		None               void
 11303 ;; Registers used:
 11304 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11305 ;; Tracked objects:
 11306 ;;		On entry : 0/0
 11307 ;;		On exit  : 0/0
 11308 ;;		Unchanged: 0/0
 11309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;Total ram usage:        1 bytes
 11315 ;; Hardware stack levels used:    1
 11316 ;; Hardware stack levels required when called:    8
 11317 ;; This function calls:
 11318 ;;		_Flash_Memory_Modify
 11319 ;;		_getMain_LightsStatus
 11320 ;; This function is called by:
 11321 ;;		_main
 11322 ;; This function uses a non-reentrant model
 11323 ;;
 11324                           
 11325                           
 11326                           ;psect for function _Flash_Memory_Main
 11327  11CF                     _Flash_Memory_Main:	
 11328                           
 11329                           ;MCU_B1.c: 966: if (Memory.Modify == 1) {
 11330                           
 11331                           ;incstack = 0
 11332                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11333  11CF  0024               	movlb	4	; select bank4
 11334  11D0  1C44               	btfss	(_Memory^(0+512)+36),0
 11335  11D1  0008               	return
 11336                           
 11337                           ;MCU_B1.c: 967: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11338  11D2  319C  24C5  3191   	fcall	_getMain_LightsStatus
 11339  11D5  3A00               	xorlw	0
 11340  11D6  3000               	movlw	0
 11341  11D7  1903               	skipnz
 11342  11D8  3001               	movlw	1
 11343  11D9  0020               	movlb	0	; select bank0
 11344  11DA  00A6               	movwf	??_Flash_Memory_Main
 11345  11DB  0DA6               	rlf	??_Flash_Memory_Main,f
 11346  11DC  0024               	movlb	4	; select bank4
 11347  11DD  0844               	movf	(_Memory^(0+512)+36),w
 11348  11DE  0020               	movlb	0	; select bank0
 11349  11DF  0626               	xorwf	??_Flash_Memory_Main,w
 11350  11E0  39FD               	andlw	-3
 11351  11E1  0626               	xorwf	??_Flash_Memory_Main,w
 11352  11E2  0024               	movlb	4	; select bank4
 11353  11E3  00C4               	movwf	(_Memory^(0+512)+36)
 11354                           
 11355                           ;MCU_B1.c: 968: if (Memory.GO == 1) {
 11356  11E4  1CC4               	btfss	(_Memory^(0+512)+36),1
 11357  11E5  29FF               	goto	l1334
 11358                           
 11359                           ;MCU_B1.c: 969: Memory.Runtime = 1;
 11360  11E6  15C4               	bsf	(_Memory^(0+512)+36),3
 11361                           
 11362                           ;MCU_B1.c: 970: Memory.Time++;
 11363  11E7  3001               	movlw	1
 11364  11E8  07C2               	addwf	(_Memory^(0+512)+34),f
 11365  11E9  3000               	movlw	0
 11366  11EA  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11367                           
 11368                           ;MCU_B1.c: 971: if (Memory.Time == 25) {
 11369  11EB  3022               	movlw	34
 11370  11EC  3E20               	addlw	_Memory& (0+255)
 11371  11ED  0086               	movwf	6
 11372  11EE  3002               	movlw	2	; select bank4/5
 11373  11EF  0087               	movwf	7
 11374  11F0  3F40               	moviw [0]fsr1
 11375  11F1  3A19               	xorlw	25
 11376  11F2  1D03               	skipz
 11377  11F3  29F6               	goto	u12195
 11378  11F4  3F41               	moviw [1]fsr1
 11379  11F5  3A00               	xorlw	0
 11380  11F6                     u12195:	
 11381  11F6  1D03               	skipz
 11382  11F7  0008               	return
 11383                           
 11384                           ;MCU_B1.c: 972: Memory.Time = 0;
 11385  11F8  01C2               	clrf	(_Memory^(0+512)+34)
 11386  11F9  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11387                           
 11388                           ;MCU_B1.c: 973: Memory.Modify = 0;
 11389  11FA  1044               	bcf	(_Memory^(0+512)+36),0
 11390                           
 11391                           ;MCU_B1.c: 974: Memory.GO = 0;
 11392  11FB  10C4               	bcf	(_Memory^(0+512)+36),1
 11393                           
 11394                           ;MCU_B1.c: 975: Flash_Memory_Modify();
 11395  11FC  3194  246E         	fcall	_Flash_Memory_Modify
 11396                           
 11397                           ;MCU_B1.c: 976: }
 11398                           ;MCU_B1.c: 977: } else {
 11399  11FE  0008               	return
 11400  11FF                     l1334:	
 11401                           
 11402                           ;MCU_B1.c: 978: if (Memory.Runtime == 1) {
 11403  11FF  1DC4               	btfss	(_Memory^(0+512)+36),3
 11404  1200  0008               	return
 11405                           
 11406                           ;MCU_B1.c: 979: Memory.Runtime = 0;
 11407  1201  11C4               	bcf	(_Memory^(0+512)+36),3
 11408                           
 11409                           ;MCU_B1.c: 980: Memory.Time = 0;
 11410  1202  01C2               	clrf	(_Memory^(0+512)+34)
 11411  1203  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11412  1204  0008               	return
 11413  1205                     __end_of_Flash_Memory_Main:	
 11414                           
 11415                           	psect	text65
 11416  146E                     __ptext65:	
 11417 ;; *************** function _Flash_Memory_Modify *****************
 11418 ;; Defined at:
 11419 ;;		line 1038 in file "../src/MCU_B1.c"
 11420 ;; Parameters:    Size  Location     Type
 11421 ;;		None
 11422 ;; Auto vars:     Size  Location     Type
 11423 ;;  i               1    5[BANK0 ] unsigned char 
 11424 ;; Return value:  Size  Location     Type
 11425 ;;		None               void
 11426 ;; Registers used:
 11427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11428 ;; Tracked objects:
 11429 ;;		On entry : 0/0
 11430 ;;		On exit  : 0/0
 11431 ;;		Unchanged: 0/0
 11432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11434 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11435 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11436 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11437 ;;Total ram usage:        2 bytes
 11438 ;; Hardware stack levels used:    1
 11439 ;; Hardware stack levels required when called:    7
 11440 ;; This function calls:
 11441 ;;		_Flash_Memory_Erasing
 11442 ;;		_Flash_Memory_Read
 11443 ;;		_Flash_Memory_Write
 11444 ;;		_setMemory_Data
 11445 ;; This function is called by:
 11446 ;;		_Flash_Memory_Main
 11447 ;; This function uses a non-reentrant model
 11448 ;;
 11449                           
 11450                           
 11451                           ;psect for function _Flash_Memory_Modify
 11452  146E                     _Flash_Memory_Modify:	
 11453                           
 11454                           ;MCU_B1.c: 1039: char i = 0;
 11455                           
 11456                           ;incstack = 0
 11457                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11458  146E  0020               	movlb	0	; select bank0
 11459  146F  01A5               	clrf	Flash_Memory_Modify@i
 11460                           
 11461                           ;MCU_B1.c: 1040: for (i = 0; i < 32; i++) {
 11462  1470  01A5               	clrf	Flash_Memory_Modify@i
 11463  1471  3020               	movlw	32
 11464  1472  0225               	subwf	Flash_Memory_Modify@i,w
 11465  1473  1803               	btfsc	3,0
 11466  1474  2C8A               	goto	l10105
 11467  1475                     l10099:	
 11468                           
 11469                           ;MCU_B1.c: 1041: Memory.Data[i] = Flash_Memory_Read(i);
 11470  1475  0825               	movf	Flash_Memory_Modify@i,w
 11471  1476  319E  2641  3194   	fcall	_Flash_Memory_Read
 11472  1479  0020               	movlb	0	; select bank0
 11473  147A  00A4               	movwf	??_Flash_Memory_Modify
 11474  147B  0825               	movf	Flash_Memory_Modify@i,w
 11475  147C  3E20               	addlw	_Memory& (0+255)
 11476  147D  0086               	movwf	6
 11477  147E  3002               	movlw	2	; select bank4/5
 11478  147F  0087               	movwf	7
 11479  1480  0824               	movf	??_Flash_Memory_Modify,w
 11480  1481  0081               	movwf	1
 11481  1482  3001               	movlw	1
 11482  1483  00A4               	movwf	??_Flash_Memory_Modify
 11483  1484  0824               	movf	??_Flash_Memory_Modify,w
 11484  1485  07A5               	addwf	Flash_Memory_Modify@i,f
 11485  1486  3020               	movlw	32
 11486  1487  0225               	subwf	Flash_Memory_Modify@i,w
 11487  1488  1C03               	skipc
 11488  1489  2C75               	goto	l10099
 11489  148A                     l10105:	
 11490                           
 11491                           ;MCU_B1.c: 1042: }
 11492                           ;MCU_B1.c: 1043: setMemory_Data(0, product->Data[12]);
 11493  148A  0879               	movf	_product,w
 11494  148B  0086               	movwf	6
 11495  148C  3002               	movlw	2	; select bank4/5
 11496  148D  0087               	movwf	7
 11497  148E  3002               	movlw	2	; select bank4/5
 11498  148F  3F4C               	moviw [12]fsr1
 11499  1490  00A0               	movwf	setMemory_Data@data
 11500  1491  3000               	movlw	0
 11501  1492  319B  2388  3194   	fcall	_setMemory_Data
 11502                           
 11503                           ;MCU_B1.c: 1044: setMemory_Data(1, product->Data[13]);
 11504  1495  0879               	movf	_product,w
 11505  1496  0086               	movwf	6
 11506  1497  3002               	movlw	2	; select bank4/5
 11507  1498  0087               	movwf	7
 11508  1499  3002               	movlw	2	; select bank4/5
 11509  149A  3F4D               	moviw [13]fsr1
 11510  149B  0020               	movlb	0	; select bank0
 11511  149C  00A0               	movwf	setMemory_Data@data
 11512  149D  3001               	movlw	1
 11513  149E  319B  2388  3194   	fcall	_setMemory_Data
 11514                           
 11515                           ;MCU_B1.c: 1045: setMemory_Data(2, product->Data[14]);
 11516  14A1  0879               	movf	_product,w
 11517  14A2  0086               	movwf	6
 11518  14A3  3002               	movlw	2	; select bank4/5
 11519  14A4  0087               	movwf	7
 11520  14A5  3002               	movlw	2	; select bank4/5
 11521  14A6  3F4E               	moviw [14]fsr1
 11522  14A7  0020               	movlb	0	; select bank0
 11523  14A8  00A0               	movwf	setMemory_Data@data
 11524  14A9  3002               	movlw	2
 11525  14AA  319B  2388  3194   	fcall	_setMemory_Data
 11526                           
 11527                           ;MCU_B1.c: 1051: if (Memory.LoopSave == 1) {
 11528  14AD  0024               	movlb	4	; select bank4
 11529  14AE  1D44               	btfss	(_Memory^(0+512)+36),2
 11530  14AF  2CB4               	goto	l1357
 11531                           
 11532                           ;MCU_B1.c: 1052: Memory.LoopSave = 0;
 11533  14B0  1144               	bcf	(_Memory^(0+512)+36),2
 11534                           
 11535                           ;MCU_B1.c: 1053: myMain.FirstOpen = 0;
 11536  14B1  0021               	movlb	1	; select bank1
 11537  14B2  11A0               	bcf	_myMain^(0+128),3
 11538                           
 11539                           ;MCU_B1.c: 1054: myMain.First = 0;
 11540  14B3  12A0               	bcf	_myMain^(0+128),5
 11541  14B4                     l1357:	
 11542                           
 11543                           ;MCU_B1.c: 1056: }
 11544                           ;MCU_B1.c: 1057: GIE = 0;
 11545  14B4  138B               	bcf	11,7	;volatile
 11546                           
 11547                           ;MCU_B1.c: 1058: Flash_Memory_Erasing();
 11548  14B5  319B  2394  3194   	fcall	_Flash_Memory_Erasing
 11549                           
 11550                           ;MCU_B1.c: 1059: Flash_Memory_Write();
 11551  14B8  3191  210A         	fcall	_Flash_Memory_Write
 11552                           
 11553                           ;MCU_B1.c: 1060: GIE = 1;
 11554  14BA  178B               	bsf	11,7	;volatile
 11555  14BB  0008               	return
 11556  14BC                     __end_of_Flash_Memory_Modify:	
 11557                           
 11558                           	psect	text66
 11559  1B94                     __ptext66:	
 11560 ;; *************** function _Flash_Memory_Erasing *****************
 11561 ;; Defined at:
 11562 ;;		line 1027 in file "../src/MCU_B1.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;		None
 11565 ;; Auto vars:     Size  Location     Type
 11566 ;;		None
 11567 ;; Return value:  Size  Location     Type
 11568 ;;		None               void
 11569 ;; Registers used:
 11570 ;;		wreg, status,2, status,0, pclath, cstack
 11571 ;; Tracked objects:
 11572 ;;		On entry : 0/0
 11573 ;;		On exit  : 0/0
 11574 ;;		Unchanged: 0/0
 11575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;Total ram usage:        0 bytes
 11581 ;; Hardware stack levels used:    1
 11582 ;; Hardware stack levels required when called:    6
 11583 ;; This function calls:
 11584 ;;		_Flash_Memory_Unlock
 11585 ;; This function is called by:
 11586 ;;		_Flash_Memory_Modify
 11587 ;; This function uses a non-reentrant model
 11588 ;;
 11589                           
 11590                           
 11591                           ;psect for function _Flash_Memory_Erasing
 11592  1B94                     _Flash_Memory_Erasing:	
 11593                           
 11594                           ;MCU_B1.c: 1028: CFGS = 0;
 11595                           
 11596                           ;incstack = 0
 11597                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11598  1B94  0023               	movlb	3	; select bank3
 11599  1B95  1315               	bcf	21,6	;volatile
 11600                           
 11601                           ;MCU_B1.c: 1029: PMADRH = 0x30;
 11602  1B96  3030               	movlw	48
 11603  1B97  0092               	movwf	18	;volatile
 11604                           
 11605                           ;MCU_B1.c: 1030: PMADRL = 0x00;
 11606  1B98  0191               	clrf	17	;volatile
 11607                           
 11608                           ;MCU_B1.c: 1031: FREE = 1;
 11609  1B99  1615               	bsf	21,4	;volatile
 11610                           
 11611                           ;MCU_B1.c: 1032: WREN = 1;
 11612  1B9A  1515               	bsf	21,2	;volatile
 11613                           
 11614                           ;MCU_B1.c: 1033: Flash_Memory_Unlock();
 11615  1B9B  319B  235D         	fcall	_Flash_Memory_Unlock
 11616                           
 11617                           ;MCU_B1.c: 1034: WREN = 0;
 11618  1B9D  0023               	movlb	3	; select bank3
 11619  1B9E  1115               	bcf	21,2	;volatile
 11620  1B9F  0008               	return
 11621  1BA0                     __end_of_Flash_Memory_Erasing:	
 11622                           
 11623                           	psect	text67
 11624  063F                     __ptext67:	
 11625 ;; *************** function _Flash_Memory_Initialization *****************
 11626 ;; Defined at:
 11627 ;;		line 924 in file "../src/MCU_B1.c"
 11628 ;; Parameters:    Size  Location     Type
 11629 ;;		None
 11630 ;; Auto vars:     Size  Location     Type
 11631 ;;  i               1   67[BANK0 ] unsigned char 
 11632 ;; Return value:  Size  Location     Type
 11633 ;;		None               void
 11634 ;; Registers used:
 11635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11636 ;; Tracked objects:
 11637 ;;		On entry : 0/0
 11638 ;;		On exit  : 0/0
 11639 ;;		Unchanged: 0/0
 11640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;Total ram usage:        2 bytes
 11646 ;; Hardware stack levels used:    1
 11647 ;; Hardware stack levels required when called:    8
 11648 ;; This function calls:
 11649 ;;		_Flash_Memory_Read
 11650 ;;		_Flash_Memory_Write
 11651 ;;		_setMemory_Data
 11652 ;;		_setPercentValue
 11653 ;; This function is called by:
 11654 ;;		_main
 11655 ;; This function uses a non-reentrant model
 11656 ;;
 11657                           
 11658                           
 11659                           ;psect for function _Flash_Memory_Initialization
 11660  063F                     _Flash_Memory_Initialization:	
 11661                           
 11662                           ;MCU_B1.c: 925: char i = 0;
 11663                           
 11664                           ;incstack = 0
 11665                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11666  063F  0020               	movlb	0	; select bank0
 11667  0640  01E3               	clrf	Flash_Memory_Initialization@i
 11668                           
 11669                           ;MCU_B1.c: 926: if (Flash_Memory_Read(31) == 0xaa) {
 11670  0641  301F               	movlw	31
 11671  0642  319E  2641  3186   	fcall	_Flash_Memory_Read
 11672  0645  3AAA               	xorlw	170
 11673  0646  1D03               	skipz
 11674  0647  2EB1               	goto	l10499
 11675                           
 11676                           ;MCU_B1.c: 927: product->Data[12] = Flash_Memory_Read(0);
 11677  0648  3000               	movlw	0
 11678  0649  319E  2641  3186   	fcall	_Flash_Memory_Read
 11679  064C  0020               	movlb	0	; select bank0
 11680  064D  00E2               	movwf	??_Flash_Memory_Initialization
 11681  064E  0879               	movf	_product,w
 11682  064F  3E0C               	addlw	12
 11683  0650  0086               	movwf	6
 11684  0651  3002               	movlw	2	; select bank4/5
 11685  0652  0087               	movwf	7
 11686  0653  0862               	movf	??_Flash_Memory_Initialization,w
 11687  0654  0081               	movwf	1
 11688                           
 11689                           ;MCU_B1.c: 928: product->Data[13] = Flash_Memory_Read(1);
 11690  0655  3001               	movlw	1
 11691  0656  319E  2641  3186   	fcall	_Flash_Memory_Read
 11692  0659  0020               	movlb	0	; select bank0
 11693  065A  00E2               	movwf	??_Flash_Memory_Initialization
 11694  065B  0879               	movf	_product,w
 11695  065C  3E0D               	addlw	13
 11696  065D  0086               	movwf	6
 11697  065E  3002               	movlw	2	; select bank4/5
 11698  065F  0087               	movwf	7
 11699  0660  0862               	movf	??_Flash_Memory_Initialization,w
 11700  0661  0081               	movwf	1
 11701                           
 11702                           ;MCU_B1.c: 929: product->Data[14] = Flash_Memory_Read(2);
 11703  0662  3002               	movlw	2
 11704  0663  319E  2641  3186   	fcall	_Flash_Memory_Read
 11705  0666  0020               	movlb	0	; select bank0
 11706  0667  00E2               	movwf	??_Flash_Memory_Initialization
 11707  0668  0879               	movf	_product,w
 11708  0669  3E0E               	addlw	14
 11709  066A  0086               	movwf	6
 11710  066B  3002               	movlw	2	; select bank4/5
 11711  066C  0087               	movwf	7
 11712  066D  0862               	movf	??_Flash_Memory_Initialization,w
 11713  066E  0081               	movwf	1
 11714                           
 11715                           ;MCU_B1.c: 935: i = setPercentValue(((char)(70*0.8)));
 11716  066F  3038               	movlw	56
 11717  0670  318A  2266  3186   	fcall	_setPercentValue
 11718  0673  0020               	movlb	0	; select bank0
 11719  0674  00E2               	movwf	??_Flash_Memory_Initialization
 11720  0675  0862               	movf	??_Flash_Memory_Initialization,w
 11721  0676  00E3               	movwf	Flash_Memory_Initialization@i
 11722                           
 11723                           ;MCU_B1.c: 936: product->Data[21] = i;
 11724  0677  0863               	movf	Flash_Memory_Initialization@i,w
 11725  0678  00E2               	movwf	??_Flash_Memory_Initialization
 11726  0679  0879               	movf	_product,w
 11727  067A  3E15               	addlw	21
 11728  067B  0086               	movwf	6
 11729  067C  3002               	movlw	2	; select bank4/5
 11730  067D  0087               	movwf	7
 11731  067E  0862               	movf	??_Flash_Memory_Initialization,w
 11732  067F  0081               	movwf	1
 11733                           
 11734                           ;MCU_B1.c: 937: product->Data[22] = i;
 11735  0680  0863               	movf	Flash_Memory_Initialization@i,w
 11736  0681  00E2               	movwf	??_Flash_Memory_Initialization
 11737  0682  0879               	movf	_product,w
 11738  0683  3E16               	addlw	22
 11739  0684  0086               	movwf	6
 11740  0685  3002               	movlw	2	; select bank4/5
 11741  0686  0087               	movwf	7
 11742  0687  0862               	movf	??_Flash_Memory_Initialization,w
 11743  0688  0081               	movwf	1
 11744                           
 11745                           ;MCU_B1.c: 938: product->Data[23] = i;
 11746  0689  0863               	movf	Flash_Memory_Initialization@i,w
 11747  068A  00E2               	movwf	??_Flash_Memory_Initialization
 11748  068B  0879               	movf	_product,w
 11749  068C  3E17               	addlw	23
 11750  068D  0086               	movwf	6
 11751  068E  3002               	movlw	2	; select bank4/5
 11752  068F  0087               	movwf	7
 11753  0690  0862               	movf	??_Flash_Memory_Initialization,w
 11754  0691  0081               	movwf	1
 11755                           
 11756                           ;MCU_B1.c: 940: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11757  0692  0879               	movf	_product,w
 11758  0693  3E0C               	addlw	12
 11759  0694  0086               	movwf	6
 11760  0695  3002               	movlw	2	; select bank4/5
 11761  0696  0087               	movwf	7
 11762  0697  0801               	movf	1,w
 11763  0698  3AFF               	xorlw	255
 11764  0699  1D03               	skipz
 11765  069A  0008               	return
 11766  069B  0879               	movf	_product,w
 11767  069C  3E0D               	addlw	13
 11768  069D  0086               	movwf	6
 11769  069E  3002               	movlw	2	; select bank4/5
 11770  069F  0087               	movwf	7
 11771  06A0  0801               	movf	1,w
 11772  06A1  3AFF               	xorlw	255
 11773  06A2  1D03               	skipz
 11774  06A3  0008               	return
 11775  06A4  0879               	movf	_product,w
 11776  06A5  3E0E               	addlw	14
 11777  06A6  0086               	movwf	6
 11778  06A7  3002               	movlw	2	; select bank4/5
 11779  06A8  0087               	movwf	7
 11780  06A9  0801               	movf	1,w
 11781  06AA  3AFF               	xorlw	255
 11782  06AB  1D03               	skipz
 11783  06AC  0008               	return
 11784                           
 11785                           ;MCU_B1.c: 941: myMain.FirstOpen = 1;
 11786  06AD  0021               	movlb	1	; select bank1
 11787  06AE  15A0               	bsf	_myMain^(0+128),3
 11788                           
 11789                           ;MCU_B1.c: 942: myMain.First = 1;
 11790  06AF  16A0               	bsf	_myMain^(0+128),5
 11791                           
 11792                           ;MCU_B1.c: 943: }
 11793                           ;MCU_B1.c: 944: } else {
 11794  06B0  0008               	return
 11795  06B1                     l10499:	
 11796                           
 11797                           ;MCU_B1.c: 945: i = setPercentValue(((char)(70*0.8)));
 11798  06B1  3038               	movlw	56
 11799  06B2  318A  2266  3186   	fcall	_setPercentValue
 11800  06B5  0020               	movlb	0	; select bank0
 11801  06B6  00E2               	movwf	??_Flash_Memory_Initialization
 11802  06B7  0862               	movf	??_Flash_Memory_Initialization,w
 11803  06B8  00E3               	movwf	Flash_Memory_Initialization@i
 11804                           
 11805                           ;MCU_B1.c: 946: setMemory_Data(0, 0xff);
 11806  06B9  30FF               	movlw	255
 11807  06BA  00E2               	movwf	??_Flash_Memory_Initialization
 11808  06BB  0862               	movf	??_Flash_Memory_Initialization,w
 11809  06BC  00A0               	movwf	setMemory_Data@data
 11810  06BD  3000               	movlw	0
 11811  06BE  319B  2388  3186   	fcall	_setMemory_Data
 11812                           
 11813                           ;MCU_B1.c: 947: setMemory_Data(1, 0xff);
 11814  06C1  30FF               	movlw	255
 11815  06C2  0020               	movlb	0	; select bank0
 11816  06C3  00E2               	movwf	??_Flash_Memory_Initialization
 11817  06C4  0862               	movf	??_Flash_Memory_Initialization,w
 11818  06C5  00A0               	movwf	setMemory_Data@data
 11819  06C6  3001               	movlw	1
 11820  06C7  319B  2388  3186   	fcall	_setMemory_Data
 11821                           
 11822                           ;MCU_B1.c: 948: setMemory_Data(2, 0xff);
 11823  06CA  30FF               	movlw	255
 11824  06CB  0020               	movlb	0	; select bank0
 11825  06CC  00E2               	movwf	??_Flash_Memory_Initialization
 11826  06CD  0862               	movf	??_Flash_Memory_Initialization,w
 11827  06CE  00A0               	movwf	setMemory_Data@data
 11828  06CF  3002               	movlw	2
 11829  06D0  319B  2388  3186   	fcall	_setMemory_Data
 11830                           
 11831                           ;MCU_B1.c: 949: setMemory_Data(3, 0xff);
 11832  06D3  30FF               	movlw	255
 11833  06D4  0020               	movlb	0	; select bank0
 11834  06D5  00E2               	movwf	??_Flash_Memory_Initialization
 11835  06D6  0862               	movf	??_Flash_Memory_Initialization,w
 11836  06D7  00A0               	movwf	setMemory_Data@data
 11837  06D8  3003               	movlw	3
 11838  06D9  319B  2388  3186   	fcall	_setMemory_Data
 11839                           
 11840                           ;MCU_B1.c: 950: setMemory_Data(4, 0xff);
 11841  06DC  30FF               	movlw	255
 11842  06DD  0020               	movlb	0	; select bank0
 11843  06DE  00E2               	movwf	??_Flash_Memory_Initialization
 11844  06DF  0862               	movf	??_Flash_Memory_Initialization,w
 11845  06E0  00A0               	movwf	setMemory_Data@data
 11846  06E1  3004               	movlw	4
 11847  06E2  319B  2388  3186   	fcall	_setMemory_Data
 11848                           
 11849                           ;MCU_B1.c: 951: setMemory_Data(5, 0xff);
 11850  06E5  30FF               	movlw	255
 11851  06E6  0020               	movlb	0	; select bank0
 11852  06E7  00E2               	movwf	??_Flash_Memory_Initialization
 11853  06E8  0862               	movf	??_Flash_Memory_Initialization,w
 11854  06E9  00A0               	movwf	setMemory_Data@data
 11855  06EA  3005               	movlw	5
 11856  06EB  319B  2388  3186   	fcall	_setMemory_Data
 11857                           
 11858                           ;MCU_B1.c: 952: setMemory_Data(31, 0xaa);
 11859  06EE  30AA               	movlw	170
 11860  06EF  0020               	movlb	0	; select bank0
 11861  06F0  00E2               	movwf	??_Flash_Memory_Initialization
 11862  06F1  0862               	movf	??_Flash_Memory_Initialization,w
 11863  06F2  00A0               	movwf	setMemory_Data@data
 11864  06F3  301F               	movlw	31
 11865  06F4  319B  2388  3186   	fcall	_setMemory_Data
 11866                           
 11867                           ;MCU_B1.c: 953: product->Data[21] = i;
 11868  06F7  0020               	movlb	0	; select bank0
 11869  06F8  0863               	movf	Flash_Memory_Initialization@i,w
 11870  06F9  00E2               	movwf	??_Flash_Memory_Initialization
 11871  06FA  0879               	movf	_product,w
 11872  06FB  3E15               	addlw	21
 11873  06FC  0086               	movwf	6
 11874  06FD  3002               	movlw	2	; select bank4/5
 11875  06FE  0087               	movwf	7
 11876  06FF  0862               	movf	??_Flash_Memory_Initialization,w
 11877  0700  0081               	movwf	1
 11878                           
 11879                           ;MCU_B1.c: 954: product->Data[22] = i;
 11880  0701  0863               	movf	Flash_Memory_Initialization@i,w
 11881  0702  00E2               	movwf	??_Flash_Memory_Initialization
 11882  0703  0879               	movf	_product,w
 11883  0704  3E16               	addlw	22
 11884  0705  0086               	movwf	6
 11885  0706  3002               	movlw	2	; select bank4/5
 11886  0707  0087               	movwf	7
 11887  0708  0862               	movf	??_Flash_Memory_Initialization,w
 11888  0709  0081               	movwf	1
 11889                           
 11890                           ;MCU_B1.c: 955: product->Data[23] = i;
 11891  070A  0863               	movf	Flash_Memory_Initialization@i,w
 11892  070B  00E2               	movwf	??_Flash_Memory_Initialization
 11893  070C  0879               	movf	_product,w
 11894  070D  3E17               	addlw	23
 11895  070E  0086               	movwf	6
 11896  070F  3002               	movlw	2	; select bank4/5
 11897  0710  0087               	movwf	7
 11898  0711  0862               	movf	??_Flash_Memory_Initialization,w
 11899  0712  0081               	movwf	1
 11900                           
 11901                           ;MCU_B1.c: 956: GIE = 0;
 11902  0713  138B               	bcf	11,7	;volatile
 11903                           
 11904                           ;MCU_B1.c: 957: Flash_Memory_Write();
 11905  0714  3191  210A         	fcall	_Flash_Memory_Write
 11906                           
 11907                           ;MCU_B1.c: 958: GIE = 1;
 11908  0716  178B               	bsf	11,7	;volatile
 11909                           
 11910                           ;MCU_B1.c: 959: myMain.FirstOpen = 1;
 11911  0717  0021               	movlb	1	; select bank1
 11912  0718  15A0               	bsf	_myMain^(0+128),3
 11913                           
 11914                           ;MCU_B1.c: 960: myMain.First = 1;
 11915  0719  16A0               	bsf	_myMain^(0+128),5
 11916  071A  0008               	return
 11917  071B                     __end_of_Flash_Memory_Initialization:	
 11918                           
 11919                           	psect	text68
 11920  1B88                     __ptext68:	
 11921 ;; *************** function _setMemory_Data *****************
 11922 ;; Defined at:
 11923 ;;		line 1075 in file "../src/MCU_B1.c"
 11924 ;; Parameters:    Size  Location     Type
 11925 ;;  address         1    wreg     unsigned char 
 11926 ;;  data            1    0[BANK0 ] unsigned char 
 11927 ;; Auto vars:     Size  Location     Type
 11928 ;;  address         1    2[BANK0 ] unsigned char 
 11929 ;; Return value:  Size  Location     Type
 11930 ;;		None               void
 11931 ;; Registers used:
 11932 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11933 ;; Tracked objects:
 11934 ;;		On entry : 0/0
 11935 ;;		On exit  : 0/0
 11936 ;;		Unchanged: 0/0
 11937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11938 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11940 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11941 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11942 ;;Total ram usage:        3 bytes
 11943 ;; Hardware stack levels used:    1
 11944 ;; Hardware stack levels required when called:    5
 11945 ;; This function calls:
 11946 ;;		Nothing
 11947 ;; This function is called by:
 11948 ;;		_Flash_Memory_Initialization
 11949 ;;		_Flash_Memory_Modify
 11950 ;; This function uses a non-reentrant model
 11951 ;;
 11952                           
 11953                           
 11954                           ;psect for function _setMemory_Data
 11955  1B88                     _setMemory_Data:	
 11956                           
 11957                           ;incstack = 0
 11958                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 11959                           ;setMemory_Data@address stored from wreg
 11960  1B88  0020               	movlb	0	; select bank0
 11961  1B89  00A2               	movwf	setMemory_Data@address
 11962                           
 11963                           ;MCU_B1.c: 1076: Memory.Data[address] = data;
 11964  1B8A  0820               	movf	setMemory_Data@data,w
 11965  1B8B  00A1               	movwf	??_setMemory_Data
 11966  1B8C  0822               	movf	setMemory_Data@address,w
 11967  1B8D  3E20               	addlw	_Memory& (0+255)
 11968  1B8E  0086               	movwf	6
 11969  1B8F  3002               	movlw	2	; select bank4/5
 11970  1B90  0087               	movwf	7
 11971  1B91  0821               	movf	??_setMemory_Data,w
 11972  1B92  0081               	movwf	1
 11973  1B93  0008               	return
 11974  1B94                     __end_of_setMemory_Data:	
 11975                           
 11976                           	psect	text69
 11977  110A                     __ptext69:	
 11978 ;; *************** function _Flash_Memory_Write *****************
 11979 ;; Defined at:
 11980 ;;		line 1008 in file "../src/MCU_B1.c"
 11981 ;; Parameters:    Size  Location     Type
 11982 ;;		None
 11983 ;; Auto vars:     Size  Location     Type
 11984 ;;  i               1    1[BANK0 ] unsigned char 
 11985 ;; Return value:  Size  Location     Type
 11986 ;;		None               void
 11987 ;; Registers used:
 11988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11989 ;; Tracked objects:
 11990 ;;		On entry : 0/0
 11991 ;;		On exit  : 0/0
 11992 ;;		Unchanged: 0/0
 11993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;Total ram usage:        2 bytes
 11999 ;; Hardware stack levels used:    1
 12000 ;; Hardware stack levels required when called:    6
 12001 ;; This function calls:
 12002 ;;		_Flash_Memory_Unlock
 12003 ;; This function is called by:
 12004 ;;		_Flash_Memory_Initialization
 12005 ;;		_Flash_Memory_Modify
 12006 ;; This function uses a non-reentrant model
 12007 ;;
 12008                           
 12009                           
 12010                           ;psect for function _Flash_Memory_Write
 12011  110A                     _Flash_Memory_Write:	
 12012                           
 12013                           ;MCU_B1.c: 1009: char i = 0;
 12014                           
 12015                           ;incstack = 0
 12016                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12017  110A  0020               	movlb	0	; select bank0
 12018  110B  01A1               	clrf	Flash_Memory_Write@i
 12019                           
 12020                           ;MCU_B1.c: 1010: CFGS = 0;
 12021  110C  0023               	movlb	3	; select bank3
 12022  110D  1315               	bcf	21,6	;volatile
 12023                           
 12024                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 12025  110E  3030               	movlw	48
 12026  110F  0092               	movwf	18	;volatile
 12027                           
 12028                           ;MCU_B1.c: 1012: PMDATH = 0;
 12029  1110  0194               	clrf	20	;volatile
 12030                           
 12031                           ;MCU_B1.c: 1013: FREE = 0;
 12032  1111  1215               	bcf	21,4	;volatile
 12033                           
 12034                           ;MCU_B1.c: 1014: LWLO = 1;
 12035  1112  1695               	bsf	21,5	;volatile
 12036                           
 12037                           ;MCU_B1.c: 1015: WREN = 1;
 12038  1113  1515               	bsf	21,2	;volatile
 12039                           
 12040                           ;MCU_B1.c: 1016: for (i = 0; i < 32; i++) {
 12041  1114  0020               	movlb	0	; select bank0
 12042  1115  01A1               	clrf	Flash_Memory_Write@i
 12043  1116  3020               	movlw	32
 12044  1117  0221               	subwf	Flash_Memory_Write@i,w
 12045  1118  1803               	btfsc	3,0
 12046  1119  2932               	goto	l1348
 12047  111A                     l9679:	
 12048                           
 12049                           ;MCU_B1.c: 1017: PMADRL = i;
 12050  111A  0821               	movf	Flash_Memory_Write@i,w
 12051  111B  0023               	movlb	3	; select bank3
 12052  111C  0091               	movwf	17	;volatile
 12053                           
 12054                           ;MCU_B1.c: 1018: PMDATL = Memory.Data[i];
 12055  111D  0020               	movlb	0	; select bank0
 12056  111E  0821               	movf	Flash_Memory_Write@i,w
 12057  111F  3E20               	addlw	_Memory& (0+255)
 12058  1120  0086               	movwf	6
 12059  1121  3002               	movlw	2	; select bank4/5
 12060  1122  0087               	movwf	7
 12061  1123  0801               	movf	1,w
 12062  1124  0023               	movlb	3	; select bank3
 12063  1125  0093               	movwf	19	;volatile
 12064                           
 12065                           ;MCU_B1.c: 1019: Flash_Memory_Unlock();
 12066  1126  319B  235D  3191   	fcall	_Flash_Memory_Unlock
 12067  1129  3001               	movlw	1
 12068  112A  0020               	movlb	0	; select bank0
 12069  112B  00A0               	movwf	??_Flash_Memory_Write
 12070  112C  0820               	movf	??_Flash_Memory_Write,w
 12071  112D  07A1               	addwf	Flash_Memory_Write@i,f
 12072  112E  3020               	movlw	32
 12073  112F  0221               	subwf	Flash_Memory_Write@i,w
 12074  1130  1C03               	skipc
 12075  1131  291A               	goto	l9679
 12076  1132                     l1348:	
 12077                           
 12078                           ;MCU_B1.c: 1020: }
 12079                           ;MCU_B1.c: 1021: LWLO = 0;
 12080  1132  0023               	movlb	3	; select bank3
 12081  1133  1295               	bcf	21,5	;volatile
 12082                           
 12083                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 12084  1134  319B  235D         	fcall	_Flash_Memory_Unlock
 12085                           
 12086                           ;MCU_B1.c: 1023: WREN = 0;
 12087  1136  0023               	movlb	3	; select bank3
 12088  1137  1115               	bcf	21,2	;volatile
 12089  1138  0008               	return
 12090  1139                     __end_of_Flash_Memory_Write:	
 12091                           
 12092                           	psect	text70
 12093  1B5D                     __ptext70:	
 12094 ;; *************** function _Flash_Memory_Unlock *****************
 12095 ;; Defined at:
 12096 ;;		line 987 in file "../src/MCU_B1.c"
 12097 ;; Parameters:    Size  Location     Type
 12098 ;;		None
 12099 ;; Auto vars:     Size  Location     Type
 12100 ;;		None
 12101 ;; Return value:  Size  Location     Type
 12102 ;;		None               void
 12103 ;; Registers used:
 12104 ;;		wreg
 12105 ;; Tracked objects:
 12106 ;;		On entry : 0/0
 12107 ;;		On exit  : 0/0
 12108 ;;		Unchanged: 0/0
 12109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12114 ;;Total ram usage:        0 bytes
 12115 ;; Hardware stack levels used:    1
 12116 ;; Hardware stack levels required when called:    5
 12117 ;; This function calls:
 12118 ;;		Nothing
 12119 ;; This function is called by:
 12120 ;;		_Flash_Memory_Write
 12121 ;;		_Flash_Memory_Erasing
 12122 ;; This function uses a non-reentrant model
 12123 ;;
 12124                           
 12125                           
 12126                           ;psect for function _Flash_Memory_Unlock
 12127  1B5D                     _Flash_Memory_Unlock:	
 12128                           
 12129                           ;MCU_B1.c: 988: PMCON2 = 0x55;
 12130                           
 12131                           ;incstack = 0
 12132                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12133  1B5D  3055               	movlw	85
 12134  1B5E  0023               	movlb	3	; select bank3
 12135  1B5F  0096               	movwf	22	;volatile
 12136                           
 12137                           ;MCU_B1.c: 989: PMCON2 = 0xaa;
 12138  1B60  30AA               	movlw	170
 12139  1B61  0096               	movwf	22	;volatile
 12140                           
 12141                           ;MCU_B1.c: 990: WR = 1;
 12142  1B62  1495               	bsf	21,1	;volatile
 12143                           
 12144                           ;MCU_B1.c: 991: __nop();
 12145  1B63  0000               	nop
 12146                           
 12147                           ;MCU_B1.c: 992: __nop();
 12148  1B64  0000               	nop
 12149  1B65  0008               	return
 12150  1B66                     __end_of_Flash_Memory_Unlock:	
 12151                           
 12152                           	psect	text71
 12153  1E41                     __ptext71:	
 12154 ;; *************** function _Flash_Memory_Read *****************
 12155 ;; Defined at:
 12156 ;;		line 996 in file "../src/MCU_B1.c"
 12157 ;; Parameters:    Size  Location     Type
 12158 ;;  address         1    wreg     unsigned char 
 12159 ;; Auto vars:     Size  Location     Type
 12160 ;;  address         1    2[BANK0 ] unsigned char 
 12161 ;;  ret             1    3[BANK0 ] unsigned char 
 12162 ;;  i               1    1[BANK0 ] unsigned char 
 12163 ;; Return value:  Size  Location     Type
 12164 ;;                  1    wreg      unsigned char 
 12165 ;; Registers used:
 12166 ;;		wreg, status,2
 12167 ;; Tracked objects:
 12168 ;;		On entry : 0/0
 12169 ;;		On exit  : 0/0
 12170 ;;		Unchanged: 0/0
 12171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12173 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;Total ram usage:        4 bytes
 12177 ;; Hardware stack levels used:    1
 12178 ;; Hardware stack levels required when called:    5
 12179 ;; This function calls:
 12180 ;;		Nothing
 12181 ;; This function is called by:
 12182 ;;		_Flash_Memory_Initialization
 12183 ;;		_Flash_Memory_Modify
 12184 ;; This function uses a non-reentrant model
 12185 ;;
 12186                           
 12187                           
 12188                           ;psect for function _Flash_Memory_Read
 12189  1E41                     _Flash_Memory_Read:	
 12190                           
 12191                           ;incstack = 0
 12192                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12193                           ;Flash_Memory_Read@address stored from wreg
 12194  1E41  0020               	movlb	0	; select bank0
 12195  1E42  00A2               	movwf	Flash_Memory_Read@address
 12196                           
 12197                           ;MCU_B1.c: 997: char i = 0, ret = 0;
 12198  1E43  01A1               	clrf	Flash_Memory_Read@i
 12199  1E44  01A3               	clrf	Flash_Memory_Read@ret
 12200                           
 12201                           ;MCU_B1.c: 998: PMADRH = 0x30;
 12202  1E45  3030               	movlw	48
 12203  1E46  0023               	movlb	3	; select bank3
 12204  1E47  0092               	movwf	18	;volatile
 12205                           
 12206                           ;MCU_B1.c: 999: PMADRL = address;
 12207  1E48  0020               	movlb	0	; select bank0
 12208  1E49  0822               	movf	Flash_Memory_Read@address,w
 12209  1E4A  0023               	movlb	3	; select bank3
 12210  1E4B  0091               	movwf	17	;volatile
 12211                           
 12212                           ;MCU_B1.c: 1000: CFGS = 0;
 12213  1E4C  1315               	bcf	21,6	;volatile
 12214                           
 12215                           ;MCU_B1.c: 1001: RD = 1;
 12216  1E4D  1415               	bsf	21,0	;volatile
 12217                           
 12218                           ;MCU_B1.c: 1002: i = PMDATH;
 12219  1E4E  0814               	movf	20,w	;volatile
 12220  1E4F  0020               	movlb	0	; select bank0
 12221  1E50  00A0               	movwf	??_Flash_Memory_Read
 12222  1E51  0820               	movf	??_Flash_Memory_Read,w
 12223  1E52  00A1               	movwf	Flash_Memory_Read@i
 12224                           
 12225                           ;MCU_B1.c: 1003: ret = PMDATL;
 12226  1E53  0023               	movlb	3	; select bank3
 12227  1E54  0813               	movf	19,w	;volatile
 12228  1E55  0020               	movlb	0	; select bank0
 12229  1E56  00A0               	movwf	??_Flash_Memory_Read
 12230  1E57  0820               	movf	??_Flash_Memory_Read,w
 12231  1E58  00A3               	movwf	Flash_Memory_Read@ret
 12232                           
 12233                           ;MCU_B1.c: 1004: return ret;
 12234  1E59  0823               	movf	Flash_Memory_Read@ret,w
 12235  1E5A  0008               	return
 12236  1E5B                     __end_of_Flash_Memory_Read:	
 12237                           
 12238                           	psect	text72
 12239  055F                     __ptext72:	
 12240 ;; *************** function _Exception_Main *****************
 12241 ;; Defined at:
 12242 ;;		line 523 in file "../src/Main_B1.c"
 12243 ;; Parameters:    Size  Location     Type
 12244 ;;		None
 12245 ;; Auto vars:     Size  Location     Type
 12246 ;;  i               2    4[BANK1 ] int 
 12247 ;;  i               2    2[BANK1 ] int 
 12248 ;;  lights          1    6[BANK1 ] unsigned char 
 12249 ;;  error           1    1[BANK1 ] unsigned char 
 12250 ;;  count           1    0[BANK1 ] unsigned char 
 12251 ;; Return value:  Size  Location     Type
 12252 ;;		None               void
 12253 ;; Registers used:
 12254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12255 ;; Tracked objects:
 12256 ;;		On entry : 0/0
 12257 ;;		On exit  : 0/0
 12258 ;;		Unchanged: 0/0
 12259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12261 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;Total ram usage:        8 bytes
 12265 ;; Hardware stack levels used:    1
 12266 ;; Hardware stack levels required when called:    9
 12267 ;; This function calls:
 12268 ;;		_getDimmerLights_Line
 12269 ;;		_getDimmerLights_Status
 12270 ;;		_getMain_All_Error_Status
 12271 ;;		_getMain_LightsStatus
 12272 ;;		_setBuz
 12273 ;;		_setDimmerLights_SwOff
 12274 ;;		_setLED
 12275 ;; This function is called by:
 12276 ;;		_main
 12277 ;; This function uses a non-reentrant model
 12278 ;;
 12279                           
 12280                           
 12281                           ;psect for function _Exception_Main
 12282  055F                     _Exception_Main:	
 12283                           
 12284                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 12285                           
 12286                           ;incstack = 0
 12287                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12288  055F  3000               	movlw	0
 12289  0560  3191  2168  3185   	fcall	_getMain_All_Error_Status
 12290  0563  0020               	movlb	0	; select bank0
 12291  0564  00EB               	movwf	??_Exception_Main
 12292  0565  086B               	movf	??_Exception_Main,w
 12293  0566  0021               	movlb	1	; select bank1
 12294  0567  00E9               	movwf	Exception_Main@error^(0+128)
 12295                           
 12296                           ;Main_B1.c: 525: char lights = 0, count = 2;
 12297  0568  01EE               	clrf	Exception_Main@lights^(0+128)
 12298  0569  3002               	movlw	2
 12299  056A  0020               	movlb	0	; select bank0
 12300  056B  00EB               	movwf	??_Exception_Main
 12301  056C  086B               	movf	??_Exception_Main,w
 12302  056D  0021               	movlb	1	; select bank1
 12303  056E  00E8               	movwf	Exception_Main@count^(0+128)
 12304                           
 12305                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 12306  056F  1DAB               	btfss	(_myMain^(0+128)+11),3
 12307  0570  2D7E               	goto	l10833
 12308                           
 12309                           ;Main_B1.c: 527: if (error == 0) {
 12310  0571  08E9               	movf	Exception_Main@error^(0+128),f
 12311  0572  1D03               	skipz
 12312  0573  0008               	return
 12313                           
 12314                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 12315  0574  11AB               	bcf	(_myMain^(0+128)+11),3
 12316                           
 12317                           ;Main_B1.c: 533: setLED(99, 10);
 12318  0575  300A               	movlw	10
 12319  0576  0020               	movlb	0	; select bank0
 12320  0577  00EB               	movwf	??_Exception_Main
 12321  0578  086B               	movf	??_Exception_Main,w
 12322  0579  00A2               	movwf	setLED@command
 12323  057A  3063               	movlw	99
 12324  057B  3196  264F         	fcall	_setLED
 12325                           
 12326                           ;Main_B1.c: 535: }
 12327                           ;Main_B1.c: 536: } else {
 12328  057D  0008               	return
 12329  057E                     l10833:	
 12330                           
 12331                           ;Main_B1.c: 537: if (error != 0) {
 12332  057E  0021               	movlb	1	; select bank1
 12333  057F  0869               	movf	Exception_Main@error^(0+128),w
 12334  0580  1903               	btfsc	3,2
 12335  0581  0008               	return
 12336                           
 12337                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 12338  0582  15AB               	bsf	(_myMain^(0+128)+11),3
 12339                           
 12340                           ;Main_B1.c: 541: setLED(99, 11);
 12341  0583  300B               	movlw	11
 12342  0584  0020               	movlb	0	; select bank0
 12343  0585  00EB               	movwf	??_Exception_Main
 12344  0586  086B               	movf	??_Exception_Main,w
 12345  0587  00A2               	movwf	setLED@command
 12346  0588  3063               	movlw	99
 12347  0589  3196  264F  3185   	fcall	_setLED
 12348                           
 12349                           ;Main_B1.c: 543: switch (error) {
 12350  058C  2E34               	goto	l10881
 12351  058D                     l10839:	
 12352                           ;Main_B1.c: 544: case 2:
 12353                           
 12354                           
 12355                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 12356  058D  319C  24C5  3185   	fcall	_getMain_LightsStatus
 12357  0590  3A01               	xorlw	1
 12358  0591  1D03               	skipz
 12359  0592  2D9C               	goto	l10843
 12360                           
 12361                           ;Main_B1.c: 546: setBuz(10, 300);
 12362  0593  302C               	movlw	44
 12363  0594  0020               	movlb	0	; select bank0
 12364  0595  00A9               	movwf	setBuz@time
 12365  0596  3001               	movlw	1
 12366  0597  00AA               	movwf	setBuz@time+1
 12367  0598  300A               	movlw	10
 12368  0599  3197  274E  3185   	fcall	_setBuz
 12369  059C                     l10843:	
 12370                           
 12371                           ;Main_B1.c: 547: }
 12372                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 12373  059C  0021               	movlb	1	; select bank1
 12374  059D  01EA               	clrf	Exception_Main@i^(0+128)
 12375  059E  01EB               	clrf	(Exception_Main@i+1)^(0+128)
 12376  059F                     l10853:	
 12377  059F  086B               	movf	(Exception_Main@i+1)^(0+128),w
 12378  05A0  3A80               	xorlw	128
 12379  05A1  0020               	movlb	0	; select bank0
 12380  05A2  00EB               	movwf	??_Exception_Main
 12381  05A3  3080               	movlw	128
 12382  05A4  026B               	subwf	??_Exception_Main,w
 12383  05A5  1D03               	skipz
 12384  05A6  2DAA               	goto	u12775
 12385  05A7  0021               	movlb	1	; select bank1
 12386  05A8  0868               	movf	Exception_Main@count^(0+128),w
 12387  05A9  026A               	subwf	Exception_Main@i^(0+128),w
 12388  05AA                     u12775:	
 12389  05AA  1803               	btfsc	3,0
 12390  05AB  2DCE               	goto	u12770
 12391                           
 12392                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 12393  05AC  0021               	movlb	1	; select bank1
 12394  05AD  086A               	movf	Exception_Main@i^(0+128),w
 12395  05AE  3E01               	addlw	1
 12396  05AF  319C  2425  3185   	fcall	_getDimmerLights_Status
 12397  05B2  3A01               	xorlw	1
 12398  05B3  1D03               	skipz
 12399  05B4  2DC8               	goto	l10851
 12400                           
 12401                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 12402  05B5  0020               	movlb	0	; select bank0
 12403  05B6  086F               	movf	_DimmerLights,w
 12404  05B7  3E0B               	addlw	11
 12405  05B8  0086               	movwf	6
 12406  05B9  3001               	movlw	1	; select bank2/3
 12407  05BA  0087               	movwf	7
 12408  05BB  1481               	bsf	1,1
 12409                           
 12410                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 12411  05BC  086F               	movf	_DimmerLights,w
 12412  05BD  3E02               	addlw	2
 12413  05BE  0086               	movwf	6
 12414  05BF  3001               	movlw	1	; select bank2/3
 12415  05C0  0087               	movwf	7
 12416  05C1  1081               	bcf	1,1
 12417                           
 12418                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 12419  05C2  0021               	movlb	1	; select bank1
 12420  05C3  086A               	movf	Exception_Main@i^(0+128),w
 12421  05C4  3E01               	addlw	1
 12422  05C5  3194  24BC  3185   	fcall	_setDimmerLights_SwOff
 12423  05C8                     l10851:	
 12424  05C8  3001               	movlw	1
 12425  05C9  0021               	movlb	1	; select bank1
 12426  05CA  07EA               	addwf	Exception_Main@i^(0+128),f
 12427  05CB  3000               	movlw	0
 12428  05CC  3DEB               	addwfc	(Exception_Main@i+1)^(0+128),f
 12429  05CD  2D9F               	goto	l10853
 12430  05CE                     u12770:	
 12431  05CE  0021               	movlb	1	; select bank1
 12432  05CF  0008               	return
 12433  05D0                     l10855:	
 12434                           ;Main_B1.c: 558: case 3:
 12435                           
 12436                           ;Main_B1.c: 555: }
 12437                           ;Main_B1.c: 556: }
 12438                           ;Main_B1.c: 557: break;
 12439                           
 12440                           
 12441                           ;Main_B1.c: 560: setBuz(5, 300);
 12442  05D0  302C               	movlw	44
 12443  05D1  0020               	movlb	0	; select bank0
 12444  05D2  00A9               	movwf	setBuz@time
 12445  05D3  3001               	movlw	1
 12446  05D4  00AA               	movwf	setBuz@time+1
 12447  05D5  3005               	movlw	5
 12448  05D6  3197  274E  3185   	fcall	_setBuz
 12449                           
 12450                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 12451  05D9  319D  2539  3185   	fcall	_getDimmerLights_Line
 12452  05DC  0020               	movlb	0	; select bank0
 12453  05DD  00EB               	movwf	??_Exception_Main
 12454  05DE  086B               	movf	??_Exception_Main,w
 12455  05DF  0021               	movlb	1	; select bank1
 12456  05E0  00EE               	movwf	Exception_Main@lights^(0+128)
 12457                           
 12458                           ;Main_B1.c: 562: if (lights == 0) {
 12459  05E1  08EE               	movf	Exception_Main@lights^(0+128),f
 12460  05E2  1D03               	skipz
 12461  05E3  2E17               	goto	l10873
 12462                           
 12463                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 12464  05E4  01EC               	clrf	Exception_Main@i_3620^(0+128)
 12465  05E5  01ED               	clrf	(Exception_Main@i_3620+1)^(0+128)
 12466  05E6                     l10871:	
 12467  05E6  086D               	movf	(Exception_Main@i_3620+1)^(0+128),w
 12468  05E7  3A80               	xorlw	128
 12469  05E8  0020               	movlb	0	; select bank0
 12470  05E9  00EB               	movwf	??_Exception_Main
 12471  05EA  3080               	movlw	128
 12472  05EB  026B               	subwf	??_Exception_Main,w
 12473  05EC  1D03               	skipz
 12474  05ED  2DF1               	goto	u12805
 12475  05EE  0021               	movlb	1	; select bank1
 12476  05EF  0868               	movf	Exception_Main@count^(0+128),w
 12477  05F0  026C               	subwf	Exception_Main@i_3620^(0+128),w
 12478  05F1                     u12805:	
 12479  05F1  1803               	btfsc	3,0
 12480  05F2  2E15               	goto	u12800
 12481                           
 12482                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 12483  05F3  0021               	movlb	1	; select bank1
 12484  05F4  086C               	movf	Exception_Main@i_3620^(0+128),w
 12485  05F5  3E01               	addlw	1
 12486  05F6  319C  2425  3185   	fcall	_getDimmerLights_Status
 12487  05F9  3A01               	xorlw	1
 12488  05FA  1D03               	skipz
 12489  05FB  2E0F               	goto	l10869
 12490                           
 12491                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 12492  05FC  0020               	movlb	0	; select bank0
 12493  05FD  086F               	movf	_DimmerLights,w
 12494  05FE  3E0B               	addlw	11
 12495  05FF  0086               	movwf	6
 12496  0600  3001               	movlw	1	; select bank2/3
 12497  0601  0087               	movwf	7
 12498  0602  1481               	bsf	1,1
 12499                           
 12500                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 12501  0603  086F               	movf	_DimmerLights,w
 12502  0604  3E02               	addlw	2
 12503  0605  0086               	movwf	6
 12504  0606  3001               	movlw	1	; select bank2/3
 12505  0607  0087               	movwf	7
 12506  0608  1081               	bcf	1,1
 12507                           
 12508                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 12509  0609  0021               	movlb	1	; select bank1
 12510  060A  086C               	movf	Exception_Main@i_3620^(0+128),w
 12511  060B  3E01               	addlw	1
 12512  060C  3194  24BC  3185   	fcall	_setDimmerLights_SwOff
 12513  060F                     l10869:	
 12514  060F  3001               	movlw	1
 12515  0610  0021               	movlb	1	; select bank1
 12516  0611  07EC               	addwf	Exception_Main@i_3620^(0+128),f
 12517  0612  3000               	movlw	0
 12518  0613  3DED               	addwfc	(Exception_Main@i_3620+1)^(0+128),f
 12519  0614  2DE6               	goto	l10871
 12520  0615                     u12800:	
 12521  0615  0021               	movlb	1	; select bank1
 12522  0616  0008               	return
 12523  0617                     l10873:	
 12524                           ;Main_B1.c: 570: }
 12525                           ;Main_B1.c: 571: }
 12526                           ;Main_B1.c: 572: } else {
 12527                           
 12528                           
 12529                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 12530  0617  0021               	movlb	1	; select bank1
 12531  0618  086E               	movf	Exception_Main@lights^(0+128),w
 12532  0619  319C  2425  3185   	fcall	_getDimmerLights_Status
 12533  061C  3A01               	xorlw	1
 12534  061D  1903               	btfsc	3,2
 12535  061E  2E21               	goto	l10875
 12536  061F  0021               	movlb	1	; select bank1
 12537  0620  0008               	return
 12538  0621                     l10875:	
 12539                           
 12540                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 12541  0621  0020               	movlb	0	; select bank0
 12542  0622  086F               	movf	_DimmerLights,w
 12543  0623  3E0B               	addlw	11
 12544  0624  0086               	movwf	6
 12545  0625  3001               	movlw	1	; select bank2/3
 12546  0626  0087               	movwf	7
 12547  0627  1481               	bsf	1,1
 12548                           
 12549                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 12550  0628  086F               	movf	_DimmerLights,w
 12551  0629  3E02               	addlw	2
 12552  062A  0086               	movwf	6
 12553  062B  3001               	movlw	1	; select bank2/3
 12554  062C  0087               	movwf	7
 12555  062D  1081               	bcf	1,1
 12556                           
 12557                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 12558  062E  0021               	movlb	1	; select bank1
 12559  062F  086E               	movf	Exception_Main@lights^(0+128),w
 12560  0630  3194  24BC         	fcall	_setDimmerLights_SwOff
 12561  0632  0021               	movlb	1	; select bank1
 12562  0633  0008               	return
 12563  0634                     l10881:	
 12564                           ;Main_B1.c: 582: }
 12565                           
 12566                           ;Main_B1.c: 579: }
 12567                           ;Main_B1.c: 580: }
 12568                           ;Main_B1.c: 581: break;
 12569                           
 12570  0634  0021               	movlb	1	; select bank1
 12571  0635  0869               	movf	Exception_Main@error^(0+128),w
 12572                           
 12573                           ; Switch size 1, requested type "space"
 12574                           ; Number of cases is 2, Range of values is 2 to 3
 12575                           ; switch strategies available:
 12576                           ; Name         Instructions Cycles
 12577                           ; simple_byte            7     4 (average)
 12578                           ; direct_byte           13     9 (fixed)
 12579                           ; jumptable            263     9 (fixed)
 12580                           ;	Chosen strategy is simple_byte
 12581  0636  3A02               	xorlw	2	; case 2
 12582  0637  1903               	skipnz
 12583  0638  2D8D               	goto	l10839
 12584  0639  3A01               	xorlw	1	; case 3
 12585  063A  1903               	skipnz
 12586  063B  2DD0               	goto	l10855
 12587  063C  2E3E               	goto	l1608
 12588  063D  0008               	return
 12589  063E                     l1608:	
 12590  063E  0008               	return
 12591  063F                     __end_of_Exception_Main:	
 12592                           
 12593                           	psect	text73
 12594  1D39                     __ptext73:	
 12595 ;; *************** function _getDimmerLights_Line *****************
 12596 ;; Defined at:
 12597 ;;		line 736 in file "../src/Dimmer_B1.c"
 12598 ;; Parameters:    Size  Location     Type
 12599 ;;		None
 12600 ;; Auto vars:     Size  Location     Type
 12601 ;;  line            1    1[BANK0 ] unsigned char 
 12602 ;; Return value:  Size  Location     Type
 12603 ;;                  1    wreg      unsigned char 
 12604 ;; Registers used:
 12605 ;;		wreg, status,2
 12606 ;; Tracked objects:
 12607 ;;		On entry : 0/0
 12608 ;;		On exit  : 0/0
 12609 ;;		Unchanged: 0/0
 12610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12614 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12615 ;;Total ram usage:        2 bytes
 12616 ;; Hardware stack levels used:    1
 12617 ;; Hardware stack levels required when called:    5
 12618 ;; This function calls:
 12619 ;;		Nothing
 12620 ;; This function is called by:
 12621 ;;		_Exception_Main
 12622 ;; This function uses a non-reentrant model
 12623 ;;
 12624                           
 12625                           
 12626                           ;psect for function _getDimmerLights_Line
 12627  1D39                     _getDimmerLights_Line:	
 12628                           
 12629                           ;Dimmer_B1.c: 737: char line = 0;
 12630                           
 12631                           ;incstack = 0
 12632                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12633  1D39  0020               	movlb	0	; select bank0
 12634  1D3A  01A1               	clrf	getDimmerLights_Line@line
 12635                           
 12636                           ;Dimmer_B1.c: 739: if (DimmerLights1.Line == 1) {
 12637  1D3B  0022               	movlb	2	; select bank2
 12638  1D3C  1F5F               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 12639  1D3D  2D42               	goto	l859
 12640                           
 12641                           ;Dimmer_B1.c: 740: line = 1;
 12642  1D3E  0020               	movlb	0	; select bank0
 12643  1D3F  01A1               	clrf	getDimmerLights_Line@line
 12644  1D40  0AA1               	incf	getDimmerLights_Line@line,f
 12645                           
 12646                           ;Dimmer_B1.c: 741: }
 12647  1D41  2D4A               	goto	l860
 12648  1D42                     l859:	
 12649                           
 12650                           ;Dimmer_B1.c: 744: else if (DimmerLights2.Line == 1) {
 12651  1D42  0023               	movlb	3	; select bank3
 12652  1D43  1F48               	btfss	(_DimmerLights2^(0+384)+10),6	;volatile
 12653  1D44  2D4A               	goto	l860
 12654                           
 12655                           ;Dimmer_B1.c: 745: line = 2;
 12656  1D45  3002               	movlw	2
 12657  1D46  0020               	movlb	0	; select bank0
 12658  1D47  00A0               	movwf	??_getDimmerLights_Line
 12659  1D48  0820               	movf	??_getDimmerLights_Line,w
 12660  1D49  00A1               	movwf	getDimmerLights_Line@line
 12661  1D4A                     l860:	
 12662                           
 12663                           ;Dimmer_B1.c: 746: }
 12664                           ;Dimmer_B1.c: 753: return line;
 12665  1D4A  0020               	movlb	0	; select bank0
 12666  1D4B  0821               	movf	getDimmerLights_Line@line,w
 12667  1D4C  0008               	return
 12668  1D4D                     __end_of_getDimmerLights_Line:	
 12669                           
 12670                           	psect	text74
 12671  1F10                     __ptext74:	
 12672 ;; *************** function _DimmerLights_Main *****************
 12673 ;; Defined at:
 12674 ;;		line 502 in file "../src/Dimmer_B1.c"
 12675 ;; Parameters:    Size  Location     Type
 12676 ;;		None
 12677 ;; Auto vars:     Size  Location     Type
 12678 ;;		None
 12679 ;; Return value:  Size  Location     Type
 12680 ;;		None               void
 12681 ;; Registers used:
 12682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12683 ;; Tracked objects:
 12684 ;;		On entry : 0/0
 12685 ;;		On exit  : 0/0
 12686 ;;		Unchanged: 0/0
 12687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12692 ;;Total ram usage:        0 bytes
 12693 ;; Hardware stack levels used:    1
 12694 ;; Hardware stack levels required when called:   10
 12695 ;; This function calls:
 12696 ;;		_getLoad_OK
 12697 ;;		_getMain_All_Error_Status
 12698 ;;		_getMain_LightsStatus
 12699 ;;		_setDimmerLights_Main
 12700 ;; This function is called by:
 12701 ;;		_main
 12702 ;; This function uses a non-reentrant model
 12703 ;;
 12704                           
 12705                           
 12706                           ;psect for function _DimmerLights_Main
 12707  1F10                     _DimmerLights_Main:	
 12708                           
 12709                           ;Dimmer_B1.c: 514: if (Dimmer.LoadGO == 1) {
 12710                           
 12711                           ;incstack = 0
 12712                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12713  1F10  0021               	movlb	1	; select bank1
 12714  1F11  1D46               	btfss	_Dimmer^(0+128),2	;volatile
 12715  1F12  2F28               	goto	l10469
 12716                           
 12717                           ;Dimmer_B1.c: 515: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 12718  1F13  319B  2334  319F   	fcall	_getLoad_OK
 12719  1F16  3A01               	xorlw	1
 12720  1F17  1903               	skipnz
 12721  1F18  2F26               	goto	l810
 12722  1F19  3000               	movlw	0
 12723  1F1A  3191  2168  319F   	fcall	_getMain_All_Error_Status
 12724  1F1D  3800               	iorlw	0
 12725  1F1E  1D03               	skipz
 12726  1F1F  2F26               	goto	l810
 12727  1F20  319C  24C5  319F   	fcall	_getMain_LightsStatus
 12728  1F23  3800               	iorlw	0
 12729  1F24  1D03               	skipz
 12730  1F25  2F28               	goto	l10469
 12731  1F26                     l810:	
 12732                           
 12733                           ;Dimmer_B1.c: 516: Dimmer.LoadGO = 0;
 12734  1F26  0021               	movlb	1	; select bank1
 12735  1F27  1146               	bcf	_Dimmer^(0+128),2	;volatile
 12736  1F28                     l10469:	
 12737                           
 12738                           ;Dimmer_B1.c: 517: }
 12739                           ;Dimmer_B1.c: 518: }
 12740                           ;Dimmer_B1.c: 522: setDimmerLights_Main(1);
 12741  1F28  3001               	movlw	1
 12742  1F29  3195  255A  319F   	fcall	_setDimmerLights_Main
 12743                           
 12744                           ;Dimmer_B1.c: 526: setDimmerLights_Main(2);
 12745  1F2C  3002               	movlw	2
 12746  1F2D  3195  255A         	fcall	_setDimmerLights_Main
 12747  1F2F  0008               	return
 12748  1F30                     __end_of_DimmerLights_Main:	
 12749                           
 12750                           	psect	text75
 12751  155A                     __ptext75:	
 12752 ;; *************** function _setDimmerLights_Main *****************
 12753 ;; Defined at:
 12754 ;;		line 536 in file "../src/Dimmer_B1.c"
 12755 ;; Parameters:    Size  Location     Type
 12756 ;;  lights          1    wreg     unsigned char 
 12757 ;; Auto vars:     Size  Location     Type
 12758 ;;  lights          1   78[BANK0 ] unsigned char 
 12759 ;; Return value:  Size  Location     Type
 12760 ;;		None               void
 12761 ;; Registers used:
 12762 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12763 ;; Tracked objects:
 12764 ;;		On entry : 0/0
 12765 ;;		On exit  : 0/0
 12766 ;;		Unchanged: 0/0
 12767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12769 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12772 ;;Total ram usage:        1 bytes
 12773 ;; Hardware stack levels used:    1
 12774 ;; Hardware stack levels required when called:    9
 12775 ;; This function calls:
 12776 ;;		_DimmerLightsPointSelect
 12777 ;;		_getDimmerLights_Allow_Condition
 12778 ;;		_setDimmerLights
 12779 ;;		_setDimmerLights_Adj
 12780 ;; This function is called by:
 12781 ;;		_DimmerLights_Main
 12782 ;; This function uses a non-reentrant model
 12783 ;;
 12784                           
 12785                           
 12786                           ;psect for function _setDimmerLights_Main
 12787  155A                     _setDimmerLights_Main:	
 12788                           
 12789                           ;incstack = 0
 12790                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12791                           ;setDimmerLights_Main@lights stored from wreg
 12792  155A  0020               	movlb	0	; select bank0
 12793  155B  00EE               	movwf	setDimmerLights_Main@lights
 12794                           
 12795                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(lights);
 12796  155C  086E               	movf	setDimmerLights_Main@lights,w
 12797  155D  319C  24B2  3195   	fcall	_DimmerLightsPointSelect
 12798                           
 12799                           ;Dimmer_B1.c: 539: if (DimmerLights->Trigger == 1) {
 12800  1560  0020               	movlb	0	; select bank0
 12801  1561  086F               	movf	_DimmerLights,w
 12802  1562  3E0A               	addlw	10
 12803  1563  0086               	movwf	6
 12804  1564  3001               	movlw	1	; select bank2/3
 12805  1565  0087               	movwf	7
 12806  1566  1C81               	btfss	1,1
 12807  1567  2D89               	goto	l9953
 12808                           
 12809                           ;Dimmer_B1.c: 540: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12810  1568  086E               	movf	setDimmerLights_Main@lights,w
 12811  1569  3192  2272  3195   	fcall	_getDimmerLights_Allow_Condition
 12812  156C  3800               	iorlw	0
 12813  156D  1D03               	skipz
 12814  156E  0008               	return
 12815                           
 12816                           ;Dimmer_B1.c: 541: DimmerLights->Trigger = 0;
 12817  156F  0020               	movlb	0	; select bank0
 12818  1570  086F               	movf	_DimmerLights,w
 12819  1571  3E0A               	addlw	10
 12820  1572  0086               	movwf	6
 12821  1573  3001               	movlw	1	; select bank2/3
 12822  1574  0087               	movwf	7
 12823  1575  1081               	bcf	1,1
 12824                           
 12825                           ;Dimmer_B1.c: 542: if (DimmerLights->Switch == 1) {
 12826  1576  086F               	movf	_DimmerLights,w
 12827  1577  3E0A               	addlw	10
 12828  1578  0086               	movwf	6
 12829  1579  3001               	movlw	1	; select bank2/3
 12830  157A  0087               	movwf	7
 12831  157B  1C01               	btfss	1,0
 12832  157C  2D83               	goto	l9951
 12833                           
 12834                           ;Dimmer_B1.c: 543: setDimmerLights(lights, 1);
 12835  157D  01EB               	clrf	setDimmerLights@status
 12836  157E  0AEB               	incf	setDimmerLights@status,f
 12837  157F  086E               	movf	setDimmerLights_Main@lights,w
 12838  1580  3195  25AA         	fcall	_setDimmerLights
 12839                           
 12840                           ;Dimmer_B1.c: 544: } else {
 12841  1582  0008               	return
 12842  1583                     l9951:	
 12843                           
 12844                           ;Dimmer_B1.c: 545: setDimmerLights(lights, 0);
 12845  1583  0020               	movlb	0	; select bank0
 12846  1584  01EB               	clrf	setDimmerLights@status
 12847  1585  086E               	movf	setDimmerLights_Main@lights,w
 12848  1586  3195  25AA         	fcall	_setDimmerLights
 12849                           
 12850                           ;Dimmer_B1.c: 546: }
 12851                           ;Dimmer_B1.c: 547: }
 12852                           ;Dimmer_B1.c: 548: } else {
 12853  1588  0008               	return
 12854  1589                     l9953:	
 12855                           
 12856                           ;Dimmer_B1.c: 549: if (DimmerLights->TriggerAdj == 1) {
 12857  1589  0020               	movlb	0	; select bank0
 12858  158A  086F               	movf	_DimmerLights,w
 12859  158B  3E0A               	addlw	10
 12860  158C  0086               	movwf	6
 12861  158D  3001               	movlw	1	; select bank2/3
 12862  158E  0087               	movwf	7
 12863  158F  1D81               	btfss	1,3
 12864  1590  0008               	return
 12865                           
 12866                           ;Dimmer_B1.c: 550: DimmerLights->TriggerAdj = 0;
 12867  1591  086F               	movf	_DimmerLights,w
 12868  1592  3E0A               	addlw	10
 12869  1593  0086               	movwf	6
 12870  1594  3001               	movlw	1	; select bank2/3
 12871  1595  0087               	movwf	7
 12872  1596  1181               	bcf	1,3
 12873                           
 12874                           ;Dimmer_B1.c: 551: if (DimmerLights->SwitchAdj == 1) {
 12875  1597  086F               	movf	_DimmerLights,w
 12876  1598  3E0A               	addlw	10
 12877  1599  0086               	movwf	6
 12878  159A  3001               	movlw	1	; select bank2/3
 12879  159B  0087               	movwf	7
 12880  159C  1D01               	btfss	1,2
 12881  159D  2DA4               	goto	l9959
 12882                           
 12883                           ;Dimmer_B1.c: 552: setDimmerLights_Adj(lights, 1);
 12884  159E  01EB               	clrf	setDimmerLights_Adj@status
 12885  159F  0AEB               	incf	setDimmerLights_Adj@status,f
 12886  15A0  086E               	movf	setDimmerLights_Main@lights,w
 12887  15A1  3196  26F6         	fcall	_setDimmerLights_Adj
 12888                           
 12889                           ;Dimmer_B1.c: 553: } else {
 12890  15A3  0008               	return
 12891  15A4                     l9959:	
 12892                           
 12893                           ;Dimmer_B1.c: 554: setDimmerLights_Adj(lights, 0);
 12894  15A4  0020               	movlb	0	; select bank0
 12895  15A5  01EB               	clrf	setDimmerLights_Adj@status
 12896  15A6  086E               	movf	setDimmerLights_Main@lights,w
 12897  15A7  3196  26F6         	fcall	_setDimmerLights_Adj
 12898  15A9  0008               	return
 12899  15AA                     __end_of_setDimmerLights_Main:	
 12900                           
 12901                           	psect	text76
 12902  16F6                     __ptext76:	
 12903 ;; *************** function _setDimmerLights_Adj *****************
 12904 ;; Defined at:
 12905 ;;		line 672 in file "../src/Dimmer_B1.c"
 12906 ;; Parameters:    Size  Location     Type
 12907 ;;  lights          1    wreg     unsigned char 
 12908 ;;  status          1   75[BANK0 ] unsigned char 
 12909 ;; Auto vars:     Size  Location     Type
 12910 ;;  lights          1   77[BANK0 ] unsigned char 
 12911 ;; Return value:  Size  Location     Type
 12912 ;;		None               void
 12913 ;; Registers used:
 12914 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12915 ;; Tracked objects:
 12916 ;;		On entry : 0/0
 12917 ;;		On exit  : 0/0
 12918 ;;		Unchanged: 0/0
 12919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12920 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12923 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12924 ;;Total ram usage:        3 bytes
 12925 ;; Hardware stack levels used:    1
 12926 ;; Hardware stack levels required when called:    8
 12927 ;; This function calls:
 12928 ;;		_setBuz
 12929 ;;		_setDimmerLights_Line
 12930 ;;		_setPercentValue
 12931 ;;		_setProductData
 12932 ;;		_setRF_DimmerLights
 12933 ;;		_setTxData
 12934 ;; This function is called by:
 12935 ;;		_setDimmerLights_Main
 12936 ;; This function uses a non-reentrant model
 12937 ;;
 12938                           
 12939                           
 12940                           ;psect for function _setDimmerLights_Adj
 12941  16F6                     _setDimmerLights_Adj:	
 12942                           
 12943                           ;incstack = 0
 12944                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12945                           ;setDimmerLights_Adj@lights stored from wreg
 12946  16F6  0020               	movlb	0	; select bank0
 12947  16F7  00ED               	movwf	setDimmerLights_Adj@lights
 12948                           
 12949                           ;Dimmer_B1.c: 674: if (status == 1) {
 12950  16F8  086B               	movf	setDimmerLights_Adj@status,w
 12951  16F9  3A01               	xorlw	1
 12952  16FA  1D03               	skipz
 12953  16FB  2F0E               	goto	l9621
 12954                           
 12955                           ;Dimmer_B1.c: 675: DimmerLights->AdjSw = 1;
 12956  16FC  0A6F               	incf	_DimmerLights,w
 12957  16FD  0086               	movwf	6
 12958  16FE  3001               	movlw	1	; select bank2/3
 12959  16FF  0087               	movwf	7
 12960  1700  1701               	bsf	1,6
 12961                           
 12962                           ;Dimmer_B1.c: 676: DimmerLights->Signal = 1;
 12963  1701  0A6F               	incf	_DimmerLights,w
 12964  1702  0086               	movwf	6
 12965  1703  3001               	movlw	1	; select bank2/3
 12966  1704  0087               	movwf	7
 12967  1705  1681               	bsf	1,5
 12968                           
 12969                           ;Dimmer_B1.c: 677: setBuz(1, 100);
 12970  1706  3064               	movlw	100
 12971  1707  00A9               	movwf	setBuz@time
 12972  1708  3000               	movlw	0
 12973  1709  00AA               	movwf	setBuz@time+1
 12974  170A  3001               	movlw	1
 12975  170B  3197  274E         	fcall	_setBuz
 12976                           
 12977                           ;Dimmer_B1.c: 678: } else if (status == 0) {
 12978  170D  0008               	return
 12979  170E                     l9621:	
 12980  170E  0020               	movlb	0	; select bank0
 12981  170F  08EB               	movf	setDimmerLights_Adj@status,f
 12982  1710  1D03               	skipz
 12983  1711  0008               	return
 12984                           
 12985                           ;Dimmer_B1.c: 679: Dimmer.Load_Status = 0;
 12986  1712  0021               	movlb	1	; select bank1
 12987  1713  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 12988                           
 12989                           ;Dimmer_B1.c: 680: setDimmerLights_Line(lights);
 12990  1714  0020               	movlb	0	; select bank0
 12991  1715  086D               	movf	setDimmerLights_Adj@lights,w
 12992  1716  319D  25DD  3196   	fcall	_setDimmerLights_Line
 12993                           
 12994                           ;Dimmer_B1.c: 681: DimmerLights->AdjSw = 0;
 12995  1719  0020               	movlb	0	; select bank0
 12996  171A  0A6F               	incf	_DimmerLights,w
 12997  171B  0086               	movwf	6
 12998  171C  3001               	movlw	1	; select bank2/3
 12999  171D  0087               	movwf	7
 13000  171E  1301               	bcf	1,6
 13001                           
 13002                           ;Dimmer_B1.c: 682: DimmerLights->Signal = 0;
 13003  171F  0A6F               	incf	_DimmerLights,w
 13004  1720  0086               	movwf	6
 13005  1721  3001               	movlw	1	; select bank2/3
 13006  1722  0087               	movwf	7
 13007  1723  1281               	bcf	1,5
 13008                           
 13009                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13010  1724  086F               	movf	_DimmerLights,w
 13011  1725  3E04               	addlw	4
 13012  1726  0086               	movwf	6
 13013  1727  3001               	movlw	1	; select bank2/3
 13014  1728  0087               	movwf	7
 13015  1729  0801               	movf	1,w
 13016  172A  00EC               	movwf	??_setDimmerLights_Adj
 13017  172B  086F               	movf	_DimmerLights,w
 13018  172C  3E06               	addlw	6
 13019  172D  0086               	movwf	6
 13020  172E  3001               	movlw	1	; select bank2/3
 13021  172F  0087               	movwf	7
 13022  1730  086C               	movf	??_setDimmerLights_Adj,w
 13023  1731  0081               	movwf	1
 13024                           
 13025                           ;Dimmer_B1.c: 685: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 13026  1732  086F               	movf	_DimmerLights,w
 13027  1733  3E04               	addlw	4
 13028  1734  0086               	movwf	6
 13029  1735  3001               	movlw	1	; select bank2/3
 13030  1736  0087               	movwf	7
 13031  1737  0801               	movf	1,w
 13032  1738  318A  2266  3196   	fcall	_setPercentValue
 13033  173B  0020               	movlb	0	; select bank0
 13034  173C  00EC               	movwf	??_setDimmerLights_Adj
 13035  173D  086C               	movf	??_setDimmerLights_Adj,w
 13036  173E  00E2               	movwf	setProductData@value
 13037  173F  086D               	movf	setDimmerLights_Adj@lights,w
 13038  1740  3E14               	addlw	20
 13039  1741  319B  23E9  3196   	fcall	_setProductData
 13040                           
 13041                           ;Dimmer_B1.c: 700: setRF_DimmerLights(lights, 1);
 13042  1744  0020               	movlb	0	; select bank0
 13043  1745  01E6               	clrf	setRF_DimmerLights@on
 13044  1746  0AE6               	incf	setRF_DimmerLights@on,f
 13045  1747  086D               	movf	setDimmerLights_Adj@lights,w
 13046  1748  3197  27A7  3196   	fcall	_setRF_DimmerLights
 13047                           
 13048                           ;Dimmer_B1.c: 701: setTxData();
 13049  174B  318E  260C         	fcall	_setTxData
 13050  174D  0008               	return
 13051  174E                     __end_of_setDimmerLights_Adj:	
 13052                           
 13053                           	psect	text77
 13054  15AA                     __ptext77:	
 13055 ;; *************** function _setDimmerLights *****************
 13056 ;; Defined at:
 13057 ;;		line 630 in file "../src/Dimmer_B1.c"
 13058 ;; Parameters:    Size  Location     Type
 13059 ;;  lights          1    wreg     unsigned char 
 13060 ;;  status          1   75[BANK0 ] unsigned char 
 13061 ;; Auto vars:     Size  Location     Type
 13062 ;;  lights          1   77[BANK0 ] unsigned char 
 13063 ;; Return value:  Size  Location     Type
 13064 ;;		None               void
 13065 ;; Registers used:
 13066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13067 ;; Tracked objects:
 13068 ;;		On entry : 0/0
 13069 ;;		On exit  : 0/0
 13070 ;;		Unchanged: 0/0
 13071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13072 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13074 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13075 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13076 ;;Total ram usage:        3 bytes
 13077 ;; Hardware stack levels used:    1
 13078 ;; Hardware stack levels required when called:    8
 13079 ;; This function calls:
 13080 ;;		_setDimmerLights_Line
 13081 ;;		_setLED
 13082 ;;		_setPercentValue
 13083 ;;		_setProductData
 13084 ;;		_setRF_DimmerLights
 13085 ;;		_setTxData
 13086 ;; This function is called by:
 13087 ;;		_setDimmerLights_Main
 13088 ;; This function uses a non-reentrant model
 13089 ;;
 13090                           
 13091                           
 13092                           ;psect for function _setDimmerLights
 13093  15AA                     _setDimmerLights:	
 13094                           
 13095                           ;incstack = 0
 13096                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13097                           ;setDimmerLights@lights stored from wreg
 13098  15AA  0020               	movlb	0	; select bank0
 13099  15AB  00ED               	movwf	setDimmerLights@lights
 13100                           
 13101                           ;Dimmer_B1.c: 638: if (status == 1) {
 13102  15AC  086B               	movf	setDimmerLights@status,w
 13103  15AD  3A01               	xorlw	1
 13104  15AE  1D03               	skipz
 13105  15AF  2DDA               	goto	l9601
 13106                           
 13107                           ;Dimmer_B1.c: 639: DimmerLights->StatusFlag = 1;
 13108  15B0  0A6F               	incf	_DimmerLights,w
 13109  15B1  0086               	movwf	6
 13110  15B2  3001               	movlw	1	; select bank2/3
 13111  15B3  0087               	movwf	7
 13112  15B4  1501               	bsf	1,2
 13113                           
 13114                           ;Dimmer_B1.c: 642: Dimmer.Load_Status = 1;
 13115  15B5  0021               	movlb	1	; select bank1
 13116  15B6  15C6               	bsf	_Dimmer^(0+128),3	;volatile
 13117                           
 13118                           ;Dimmer_B1.c: 643: setDimmerLights_Line(lights);
 13119  15B7  0020               	movlb	0	; select bank0
 13120  15B8  086D               	movf	setDimmerLights@lights,w
 13121  15B9  319D  25DD  3195   	fcall	_setDimmerLights_Line
 13122                           
 13123                           ;Dimmer_B1.c: 645: setLED(lights, 0);
 13124  15BC  0020               	movlb	0	; select bank0
 13125  15BD  01A2               	clrf	setLED@command
 13126  15BE  086D               	movf	setDimmerLights@lights,w
 13127  15BF  3196  264F  3195   	fcall	_setLED
 13128                           
 13129                           ;Dimmer_B1.c: 650: DimmerLights->DimmingValue = ((char)(70*0.8));
 13130  15C2  3038               	movlw	56
 13131  15C3  0020               	movlb	0	; select bank0
 13132  15C4  00EC               	movwf	??_setDimmerLights
 13133  15C5  086F               	movf	_DimmerLights,w
 13134  15C6  3E04               	addlw	4
 13135  15C7  0086               	movwf	6
 13136  15C8  3001               	movlw	1	; select bank2/3
 13137  15C9  0087               	movwf	7
 13138  15CA  086C               	movf	??_setDimmerLights,w
 13139  15CB  0081               	movwf	1
 13140                           
 13141                           ;Dimmer_B1.c: 652: setProductData((20 + lights), setPercentValue(((char)(70*0.8))));
 13142  15CC  3038               	movlw	56
 13143  15CD  318A  2266  3195   	fcall	_setPercentValue
 13144  15D0  0020               	movlb	0	; select bank0
 13145  15D1  00EC               	movwf	??_setDimmerLights
 13146  15D2  086C               	movf	??_setDimmerLights,w
 13147  15D3  00E2               	movwf	setProductData@value
 13148  15D4  086D               	movf	setDimmerLights@lights,w
 13149  15D5  3E14               	addlw	20
 13150  15D6  319B  23E9  3195   	fcall	_setProductData
 13151                           
 13152                           ;Dimmer_B1.c: 654: } else if (status == 0) {
 13153  15D9  2DF0               	goto	l9611
 13154  15DA                     l9601:	
 13155  15DA  0020               	movlb	0	; select bank0
 13156  15DB  08EB               	movf	setDimmerLights@status,f
 13157  15DC  1D03               	skipz
 13158  15DD  2DF0               	goto	l9611
 13159                           
 13160                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 13161  15DE  0A6F               	incf	_DimmerLights,w
 13162  15DF  0086               	movwf	6
 13163  15E0  3001               	movlw	1	; select bank2/3
 13164  15E1  0087               	movwf	7
 13165  15E2  1101               	bcf	1,2
 13166                           
 13167                           ;Dimmer_B1.c: 658: Dimmer.Load_Status = 0;
 13168  15E3  0021               	movlb	1	; select bank1
 13169  15E4  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 13170                           
 13171                           ;Dimmer_B1.c: 659: setDimmerLights_Line(0);
 13172  15E5  3000               	movlw	0
 13173  15E6  319D  25DD  3195   	fcall	_setDimmerLights_Line
 13174                           
 13175                           ;Dimmer_B1.c: 661: setLED(lights, 1);
 13176  15E9  0020               	movlb	0	; select bank0
 13177  15EA  01A2               	clrf	setLED@command
 13178  15EB  0AA2               	incf	setLED@command,f
 13179  15EC  086D               	movf	setDimmerLights@lights,w
 13180  15ED  3196  264F  3195   	fcall	_setLED
 13181  15F0                     l9611:	
 13182                           
 13183                           ;Dimmer_B1.c: 663: }
 13184                           ;Dimmer_B1.c: 666: setRF_DimmerLights(lights, status);
 13185  15F0  0020               	movlb	0	; select bank0
 13186  15F1  086B               	movf	setDimmerLights@status,w
 13187  15F2  00EC               	movwf	??_setDimmerLights
 13188  15F3  086C               	movf	??_setDimmerLights,w
 13189  15F4  00E6               	movwf	setRF_DimmerLights@on
 13190  15F5  086D               	movf	setDimmerLights@lights,w
 13191  15F6  3197  27A7  3195   	fcall	_setRF_DimmerLights
 13192                           
 13193                           ;Dimmer_B1.c: 667: setTxData();
 13194  15F9  318E  260C         	fcall	_setTxData
 13195  15FB  0008               	return
 13196  15FC                     __end_of_setDimmerLights:	
 13197                           
 13198                           	psect	text78
 13199  0E0C                     __ptext78:	
 13200 ;; *************** function _setTxData *****************
 13201 ;; Defined at:
 13202 ;;		line 171 in file "../src/RF_Control_B1.c"
 13203 ;; Parameters:    Size  Location     Type
 13204 ;;		None
 13205 ;; Auto vars:     Size  Location     Type
 13206 ;;  i               1    0        unsigned char 
 13207 ;; Return value:  Size  Location     Type
 13208 ;;		None               void
 13209 ;; Registers used:
 13210 ;;		wreg, fsr1l, fsr1h
 13211 ;; Tracked objects:
 13212 ;;		On entry : 0/0
 13213 ;;		On exit  : 0/0
 13214 ;;		Unchanged: 0/0
 13215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13219 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13220 ;;Total ram usage:        1 bytes
 13221 ;; Hardware stack levels used:    1
 13222 ;; Hardware stack levels required when called:    5
 13223 ;; This function calls:
 13224 ;;		Nothing
 13225 ;; This function is called by:
 13226 ;;		_setDimmerLights
 13227 ;;		_setDimmerLights_Adj
 13228 ;;		_getRxData
 13229 ;;		_setControl_Lights_Table
 13230 ;;		_setRFSW_Control
 13231 ;;		_setRFSW_AdjControl
 13232 ;; This function uses a non-reentrant model
 13233 ;;
 13234                           
 13235                           
 13236                           ;psect for function _setTxData
 13237  0E0C                     _setTxData:	
 13238                           
 13239                           ;RF_Control_B1.c: 172: char i;
 13240                           ;RF_Control_B1.c: 173: if (RF1.Enable == 1) {
 13241                           
 13242                           ;incstack = 0
 13243                           ; Regs used in _setTxData: [wregfsr1]
 13244  0E0C  0021               	movlb	1	; select bank1
 13245  0E0D  1C3A               	btfss	_RF1^(0+128),0
 13246  0E0E  0008               	return
 13247                           
 13248                           ;RF_Control_B1.c: 175: if (RF1.TransceiveGO == 0) {
 13249  0E0F  193A               	btfsc	_RF1^(0+128),2
 13250  0E10  0008               	return
 13251                           
 13252                           ;RF_Control_B1.c: 176: RF1.TransceiveGO = 1;
 13253  0E11  153A               	bsf	_RF1^(0+128),2
 13254                           
 13255                           ;RF_Control_B1.c: 177: RF1.RunTime = 20;
 13256  0E12  3014               	movlw	20
 13257  0E13  00C1               	movwf	(_RF1^(0+128)+7)
 13258  0E14  3000               	movlw	0
 13259  0E15  00C2               	movwf	(_RF1^(0+128)+8)
 13260                           
 13261                           ;RF_Control_B1.c: 189: RF_Data[0] = 0x63;
 13262  0E16  3063               	movlw	99
 13263  0E17  0020               	movlb	0	; select bank0
 13264  0E18  00A0               	movwf	??_setTxData
 13265  0E19  0820               	movf	??_setTxData,w
 13266  0E1A  0023               	movlb	3	; select bank3
 13267  0E1B  00A0               	movwf	_RF_Data^(0+384)
 13268                           
 13269                           ;RF_Control_B1.c: 190: RF_Data[1] = 0x02;
 13270  0E1C  3002               	movlw	2
 13271  0E1D  0020               	movlb	0	; select bank0
 13272  0E1E  00A0               	movwf	??_setTxData
 13273  0E1F  0820               	movf	??_setTxData,w
 13274  0E20  0023               	movlb	3	; select bank3
 13275  0E21  00A1               	movwf	(_RF_Data^(0+384)+1)
 13276                           
 13277                           ;RF_Control_B1.c: 192: RF_Data[2] = product->Data[2];
 13278  0E22  0879               	movf	_product,w
 13279  0E23  0086               	movwf	6
 13280  0E24  3002               	movlw	2	; select bank4/5
 13281  0E25  0087               	movwf	7
 13282  0E26  3002               	movlw	2	; select bank4/5
 13283  0E27  3F42               	moviw [2]fsr1
 13284  0E28  00A2               	movwf	(_RF_Data^(0+384)+2)
 13285                           
 13286                           ;RF_Control_B1.c: 193: RF_Data[3] = product->Data[3];
 13287  0E29  0879               	movf	_product,w
 13288  0E2A  0086               	movwf	6
 13289  0E2B  3002               	movlw	2	; select bank4/5
 13290  0E2C  0087               	movwf	7
 13291  0E2D  3002               	movlw	2	; select bank4/5
 13292  0E2E  3F43               	moviw [3]fsr1
 13293  0E2F  00A3               	movwf	(_RF_Data^(0+384)+3)
 13294                           
 13295                           ;RF_Control_B1.c: 194: RF_Data[4] = product->Data[4];
 13296  0E30  0879               	movf	_product,w
 13297  0E31  0086               	movwf	6
 13298  0E32  3002               	movlw	2	; select bank4/5
 13299  0E33  0087               	movwf	7
 13300  0E34  3002               	movlw	2	; select bank4/5
 13301  0E35  3F44               	moviw [4]fsr1
 13302  0E36  00A4               	movwf	(_RF_Data^(0+384)+4)
 13303                           
 13304                           ;RF_Control_B1.c: 195: RF_Data[5] = product->Data[5];
 13305  0E37  0879               	movf	_product,w
 13306  0E38  0086               	movwf	6
 13307  0E39  3002               	movlw	2	; select bank4/5
 13308  0E3A  0087               	movwf	7
 13309  0E3B  3002               	movlw	2	; select bank4/5
 13310  0E3C  3F45               	moviw [5]fsr1
 13311  0E3D  00A5               	movwf	(_RF_Data^(0+384)+5)
 13312                           
 13313                           ;RF_Control_B1.c: 196: RF_Data[6] = product->Data[6];
 13314  0E3E  0879               	movf	_product,w
 13315  0E3F  0086               	movwf	6
 13316  0E40  3002               	movlw	2	; select bank4/5
 13317  0E41  0087               	movwf	7
 13318  0E42  3002               	movlw	2	; select bank4/5
 13319  0E43  3F46               	moviw [6]fsr1
 13320  0E44  00A6               	movwf	(_RF_Data^(0+384)+6)
 13321                           
 13322                           ;RF_Control_B1.c: 197: RF_Data[7] = product->Data[7];
 13323  0E45  0879               	movf	_product,w
 13324  0E46  0086               	movwf	6
 13325  0E47  3002               	movlw	2	; select bank4/5
 13326  0E48  0087               	movwf	7
 13327  0E49  3002               	movlw	2	; select bank4/5
 13328  0E4A  3F47               	moviw [7]fsr1
 13329  0E4B  00A7               	movwf	(_RF_Data^(0+384)+7)
 13330                           
 13331                           ;RF_Control_B1.c: 198: RF_Data[8] = product->Data[8];
 13332  0E4C  0879               	movf	_product,w
 13333  0E4D  0086               	movwf	6
 13334  0E4E  3002               	movlw	2	; select bank4/5
 13335  0E4F  0087               	movwf	7
 13336  0E50  3002               	movlw	2	; select bank4/5
 13337  0E51  3F48               	moviw [8]fsr1
 13338  0E52  00A8               	movwf	(_RF_Data^(0+384)+8)
 13339                           
 13340                           ;RF_Control_B1.c: 199: RF_Data[9] = product->Data[9];
 13341  0E53  0879               	movf	_product,w
 13342  0E54  0086               	movwf	6
 13343  0E55  3002               	movlw	2	; select bank4/5
 13344  0E56  0087               	movwf	7
 13345  0E57  3002               	movlw	2	; select bank4/5
 13346  0E58  3F49               	moviw [9]fsr1
 13347  0E59  00A9               	movwf	(_RF_Data^(0+384)+9)
 13348                           
 13349                           ;RF_Control_B1.c: 200: RF_Data[10] = product->Data[10];
 13350  0E5A  0879               	movf	_product,w
 13351  0E5B  0086               	movwf	6
 13352  0E5C  3002               	movlw	2	; select bank4/5
 13353  0E5D  0087               	movwf	7
 13354  0E5E  3002               	movlw	2	; select bank4/5
 13355  0E5F  3F4A               	moviw [10]fsr1
 13356  0E60  00AA               	movwf	(_RF_Data^(0+384)+10)
 13357                           
 13358                           ;RF_Control_B1.c: 201: RF_Data[11] = product->Data[11];
 13359  0E61  0879               	movf	_product,w
 13360  0E62  0086               	movwf	6
 13361  0E63  3002               	movlw	2	; select bank4/5
 13362  0E64  0087               	movwf	7
 13363  0E65  3002               	movlw	2	; select bank4/5
 13364  0E66  3F4B               	moviw [11]fsr1
 13365  0E67  00AB               	movwf	(_RF_Data^(0+384)+11)
 13366                           
 13367                           ;RF_Control_B1.c: 202: RF_Data[12] = product->Data[12];
 13368  0E68  0879               	movf	_product,w
 13369  0E69  0086               	movwf	6
 13370  0E6A  3002               	movlw	2	; select bank4/5
 13371  0E6B  0087               	movwf	7
 13372  0E6C  3002               	movlw	2	; select bank4/5
 13373  0E6D  3F4C               	moviw [12]fsr1
 13374  0E6E  00AC               	movwf	(_RF_Data^(0+384)+12)
 13375                           
 13376                           ;RF_Control_B1.c: 203: RF_Data[13] = product->Data[13];
 13377  0E6F  0879               	movf	_product,w
 13378  0E70  0086               	movwf	6
 13379  0E71  3002               	movlw	2	; select bank4/5
 13380  0E72  0087               	movwf	7
 13381  0E73  3002               	movlw	2	; select bank4/5
 13382  0E74  3F4D               	moviw [13]fsr1
 13383  0E75  00AD               	movwf	(_RF_Data^(0+384)+13)
 13384                           
 13385                           ;RF_Control_B1.c: 204: RF_Data[14] = product->Data[14];
 13386  0E76  0879               	movf	_product,w
 13387  0E77  0086               	movwf	6
 13388  0E78  3002               	movlw	2	; select bank4/5
 13389  0E79  0087               	movwf	7
 13390  0E7A  3002               	movlw	2	; select bank4/5
 13391  0E7B  3F4E               	moviw [14]fsr1
 13392  0E7C  00AE               	movwf	(_RF_Data^(0+384)+14)
 13393                           
 13394                           ;RF_Control_B1.c: 205: RF_Data[15] = product->Data[15];
 13395  0E7D  0879               	movf	_product,w
 13396  0E7E  0086               	movwf	6
 13397  0E7F  3002               	movlw	2	; select bank4/5
 13398  0E80  0087               	movwf	7
 13399  0E81  3002               	movlw	2	; select bank4/5
 13400  0E82  3F4F               	moviw [15]fsr1
 13401  0E83  00AF               	movwf	(_RF_Data^(0+384)+15)
 13402                           
 13403                           ;RF_Control_B1.c: 206: RF_Data[16] = product->Data[16];
 13404  0E84  0879               	movf	_product,w
 13405  0E85  0086               	movwf	6
 13406  0E86  3002               	movlw	2	; select bank4/5
 13407  0E87  0087               	movwf	7
 13408  0E88  3002               	movlw	2	; select bank4/5
 13409  0E89  3F50               	moviw [16]fsr1
 13410  0E8A  00B0               	movwf	(_RF_Data^(0+384)+16)
 13411                           
 13412                           ;RF_Control_B1.c: 207: RF_Data[17] = product->Data[17];
 13413  0E8B  0879               	movf	_product,w
 13414  0E8C  0086               	movwf	6
 13415  0E8D  3002               	movlw	2	; select bank4/5
 13416  0E8E  0087               	movwf	7
 13417  0E8F  3002               	movlw	2	; select bank4/5
 13418  0E90  3F51               	moviw [17]fsr1
 13419  0E91  00B1               	movwf	(_RF_Data^(0+384)+17)
 13420                           
 13421                           ;RF_Control_B1.c: 208: RF_Data[18] = product->Data[18];
 13422  0E92  0879               	movf	_product,w
 13423  0E93  0086               	movwf	6
 13424  0E94  3002               	movlw	2	; select bank4/5
 13425  0E95  0087               	movwf	7
 13426  0E96  3002               	movlw	2	; select bank4/5
 13427  0E97  3F52               	moviw [18]fsr1
 13428  0E98  00B2               	movwf	(_RF_Data^(0+384)+18)
 13429                           
 13430                           ;RF_Control_B1.c: 209: RF_Data[19] = product->Data[19];
 13431  0E99  0879               	movf	_product,w
 13432  0E9A  0086               	movwf	6
 13433  0E9B  3002               	movlw	2	; select bank4/5
 13434  0E9C  0087               	movwf	7
 13435  0E9D  3002               	movlw	2	; select bank4/5
 13436  0E9E  3F53               	moviw [19]fsr1
 13437  0E9F  00B3               	movwf	(_RF_Data^(0+384)+19)
 13438                           
 13439                           ;RF_Control_B1.c: 210: RF_Data[20] = 210;
 13440  0EA0  30D2               	movlw	210
 13441  0EA1  0020               	movlb	0	; select bank0
 13442  0EA2  00A0               	movwf	??_setTxData
 13443  0EA3  0820               	movf	??_setTxData,w
 13444  0EA4  0023               	movlb	3	; select bank3
 13445  0EA5  00B4               	movwf	(_RF_Data^(0+384)+20)
 13446  0EA6  0008               	return
 13447  0EA7                     __end_of_setTxData:	
 13448                           
 13449                           	psect	text79
 13450  17A7                     __ptext79:	
 13451 ;; *************** function _setRF_DimmerLights *****************
 13452 ;; Defined at:
 13453 ;;		line 442 in file "../src/RF_Control_B1.c"
 13454 ;; Parameters:    Size  Location     Type
 13455 ;;  lights          1    wreg     unsigned char 
 13456 ;;  on              1   70[BANK0 ] unsigned char 
 13457 ;; Auto vars:     Size  Location     Type
 13458 ;;  lights          1   74[BANK0 ] unsigned char 
 13459 ;;  status          1   73[BANK0 ] unsigned char 
 13460 ;; Return value:  Size  Location     Type
 13461 ;;		None               void
 13462 ;; Registers used:
 13463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13464 ;; Tracked objects:
 13465 ;;		On entry : 0/0
 13466 ;;		On exit  : 0/0
 13467 ;;		Unchanged: 0/0
 13468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13469 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13470 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13471 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13472 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13473 ;;Total ram usage:        5 bytes
 13474 ;; Hardware stack levels used:    1
 13475 ;; Hardware stack levels required when called:    6
 13476 ;; This function calls:
 13477 ;;		_setProductData
 13478 ;; This function is called by:
 13479 ;;		_setDimmerLights
 13480 ;;		_setDimmerLights_Adj
 13481 ;;		_setRFSW_Control
 13482 ;; This function uses a non-reentrant model
 13483 ;;
 13484                           
 13485                           
 13486                           ;psect for function _setRF_DimmerLights
 13487  17A7                     _setRF_DimmerLights:	
 13488                           
 13489                           ;incstack = 0
 13490                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13491                           ;setRF_DimmerLights@lights stored from wreg
 13492  17A7  0020               	movlb	0	; select bank0
 13493  17A8  00EA               	movwf	setRF_DimmerLights@lights
 13494                           
 13495                           ;RF_Control_B1.c: 443: char status = 1;
 13496  17A9  01E9               	clrf	setRF_DimmerLights@status
 13497  17AA  0AE9               	incf	setRF_DimmerLights@status,f
 13498                           
 13499                           ;RF_Control_B1.c: 444: status <<= (lights - 1);
 13500  17AB  086A               	movf	setRF_DimmerLights@lights,w
 13501  17AC  3EFF               	addlw	-1
 13502  17AD  0A89               	incf	9,f
 13503  17AE  2FB1               	goto	u9880
 13504  17AF                     u9885:	
 13505  17AF  1003               	clrc
 13506  17B0  0DE9               	rlf	setRF_DimmerLights@status,f
 13507  17B1                     u9880:	
 13508  17B1  3EFF               	addlw	-1
 13509  17B2  1D03               	skipz
 13510  17B3  2FAF               	goto	u9885
 13511                           
 13512                           ;RF_Control_B1.c: 445: setProductData(11, lights);
 13513  17B4  086A               	movf	setRF_DimmerLights@lights,w
 13514  17B5  00E7               	movwf	??_setRF_DimmerLights
 13515  17B6  0867               	movf	??_setRF_DimmerLights,w
 13516  17B7  00E2               	movwf	setProductData@value
 13517  17B8  300B               	movlw	11
 13518  17B9  319B  23E9  3197   	fcall	_setProductData
 13519                           
 13520                           ;RF_Control_B1.c: 453: setProductData(9, product->Data[20 + lights]);
 13521  17BC  0020               	movlb	0	; select bank0
 13522  17BD  086A               	movf	setRF_DimmerLights@lights,w
 13523  17BE  3E14               	addlw	20
 13524  17BF  0779               	addwf	_product,w
 13525  17C0  00E7               	movwf	??_setRF_DimmerLights
 13526  17C1  0867               	movf	??_setRF_DimmerLights,w
 13527  17C2  0086               	movwf	6
 13528  17C3  3002               	movlw	2	; select bank4/5
 13529  17C4  0087               	movwf	7
 13530  17C5  0801               	movf	1,w
 13531  17C6  00E8               	movwf	??_setRF_DimmerLights+1
 13532  17C7  0868               	movf	??_setRF_DimmerLights+1,w
 13533  17C8  00E2               	movwf	setProductData@value
 13534  17C9  3009               	movlw	9
 13535  17CA  319B  23E9  3197   	fcall	_setProductData
 13536                           
 13537                           ;RF_Control_B1.c: 454: setProductData(17, product->Data[26 + lights]);
 13538  17CD  0020               	movlb	0	; select bank0
 13539  17CE  086A               	movf	setRF_DimmerLights@lights,w
 13540  17CF  3E1A               	addlw	26
 13541  17D0  0779               	addwf	_product,w
 13542  17D1  00E7               	movwf	??_setRF_DimmerLights
 13543  17D2  0867               	movf	??_setRF_DimmerLights,w
 13544  17D3  0086               	movwf	6
 13545  17D4  3002               	movlw	2	; select bank4/5
 13546  17D5  0087               	movwf	7
 13547  17D6  0801               	movf	1,w
 13548  17D7  00E8               	movwf	??_setRF_DimmerLights+1
 13549  17D8  0868               	movf	??_setRF_DimmerLights+1,w
 13550  17D9  00E2               	movwf	setProductData@value
 13551  17DA  3011               	movlw	17
 13552  17DB  319B  23E9  3197   	fcall	_setProductData
 13553                           
 13554                           ;RF_Control_B1.c: 455: if (on == 1) {
 13555  17DE  0020               	movlb	0	; select bank0
 13556  17DF  0866               	movf	setRF_DimmerLights@on,w
 13557  17E0  3A01               	xorlw	1
 13558  17E1  1D03               	skipz
 13559  17E2  2FF1               	goto	l9041
 13560                           
 13561                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15] | status));
 13562  17E3  0879               	movf	_product,w
 13563  17E4  3E0F               	addlw	15
 13564  17E5  0086               	movwf	6
 13565  17E6  3002               	movlw	2	; select bank4/5
 13566  17E7  0087               	movwf	7
 13567  17E8  0801               	movf	1,w
 13568  17E9  0469               	iorwf	setRF_DimmerLights@status,w
 13569  17EA  00E7               	movwf	??_setRF_DimmerLights
 13570  17EB  0867               	movf	??_setRF_DimmerLights,w
 13571  17EC  00E2               	movwf	setProductData@value
 13572  17ED  300F               	movlw	15
 13573  17EE  319B  23E9         	fcall	_setProductData
 13574                           
 13575                           ;RF_Control_B1.c: 457: } else {
 13576  17F0  0008               	return
 13577  17F1                     l9041:	
 13578                           
 13579                           ;RF_Control_B1.c: 458: setProductData(15, (product->Data[15]&(~status)));
 13580  17F1  0879               	movf	_product,w
 13581  17F2  3E0F               	addlw	15
 13582  17F3  0086               	movwf	6
 13583  17F4  3002               	movlw	2	; select bank4/5
 13584  17F5  0087               	movwf	7
 13585  17F6  0020               	movlb	0	; select bank0
 13586  17F7  0969               	comf	setRF_DimmerLights@status,w
 13587  17F8  0501               	andwf	1,w
 13588  17F9  00E7               	movwf	??_setRF_DimmerLights
 13589  17FA  0867               	movf	??_setRF_DimmerLights,w
 13590  17FB  00E2               	movwf	setProductData@value
 13591  17FC  300F               	movlw	15
 13592  17FD  319B  23E9         	fcall	_setProductData
 13593  17FF  0008               	return
 13594  1800                     __end_of_setRF_DimmerLights:	
 13595                           
 13596                           	psect	text80
 13597  0A66                     __ptext80:	
 13598 ;; *************** function _setPercentValue *****************
 13599 ;; Defined at:
 13600 ;;		line 1034 in file "../src/Dimmer_B1.c"
 13601 ;; Parameters:    Size  Location     Type
 13602 ;;  value           1    wreg     unsigned char 
 13603 ;; Auto vars:     Size  Location     Type
 13604 ;;  value           1   62[BANK0 ] unsigned char 
 13605 ;;  i               3   63[BANK0 ] float 
 13606 ;; Return value:  Size  Location     Type
 13607 ;;                  1    wreg      unsigned char 
 13608 ;; Registers used:
 13609 ;;		wreg, status,2, status,0, pclath, cstack
 13610 ;; Tracked objects:
 13611 ;;		On entry : 0/0
 13612 ;;		On exit  : 0/0
 13613 ;;		Unchanged: 0/0
 13614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13616 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13617 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13618 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13619 ;;Total ram usage:        6 bytes
 13620 ;; Hardware stack levels used:    1
 13621 ;; Hardware stack levels required when called:    7
 13622 ;; This function calls:
 13623 ;;		___awtoft
 13624 ;;		___ftadd
 13625 ;;		___ftdiv
 13626 ;;		___ftneg
 13627 ;;		___fttol
 13628 ;; This function is called by:
 13629 ;;		_setDimmerLights
 13630 ;;		_setDimmerLights_Adj
 13631 ;;		_Flash_Memory_Initialization
 13632 ;; This function uses a non-reentrant model
 13633 ;;
 13634                           
 13635                           
 13636                           ;psect for function _setPercentValue
 13637  0A66                     _setPercentValue:	
 13638                           
 13639                           ;incstack = 0
 13640                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13641                           ;setPercentValue@value stored from wreg
 13642  0A66  0020               	movlb	0	; select bank0
 13643  0A67  00DE               	movwf	setPercentValue@value
 13644                           
 13645                           ;Dimmer_B1.c: 1042: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 13646  0A68  3000               	movlw	0
 13647  0A69  00DF               	movwf	setPercentValue@i
 13648  0A6A  3030               	movlw	48
 13649  0A6B  00E0               	movwf	setPercentValue@i+1
 13650  0A6C  3042               	movlw	66
 13651  0A6D  00E1               	movwf	setPercentValue@i+2
 13652                           
 13653                           ;Dimmer_B1.c: 1043: i /= 100;
 13654  0A6E  3000               	movlw	0
 13655  0A6F  00AE               	movwf	___ftdiv@f2
 13656  0A70  30C8               	movlw	200
 13657  0A71  00AF               	movwf	___ftdiv@f2+1
 13658  0A72  3042               	movlw	66
 13659  0A73  00B0               	movwf	___ftdiv@f2+2
 13660  0A74  085F               	movf	setPercentValue@i,w
 13661  0A75  00B1               	movwf	___ftdiv@f1
 13662  0A76  0860               	movf	setPercentValue@i+1,w
 13663  0A77  00B2               	movwf	___ftdiv@f1+1
 13664  0A78  0861               	movf	setPercentValue@i+2,w
 13665  0A79  00B3               	movwf	___ftdiv@f1+2
 13666  0A7A  318E  26A7  318A   	fcall	___ftdiv
 13667  0A7D  0020               	movlb	0	; select bank0
 13668  0A7E  082E               	movf	?___ftdiv,w
 13669  0A7F  00DF               	movwf	setPercentValue@i
 13670  0A80  082F               	movf	?___ftdiv+1,w
 13671  0A81  00E0               	movwf	setPercentValue@i+1
 13672  0A82  0830               	movf	?___ftdiv+2,w
 13673  0A83  00E1               	movwf	setPercentValue@i+2
 13674                           
 13675                           ;Dimmer_B1.c: 1045: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 13676  0A84  085E               	movf	setPercentValue@value,w
 13677  0A85  00DC               	movwf	??_setPercentValue
 13678  0A86  01DD               	clrf	??_setPercentValue+1
 13679  0A87  09DC               	comf	??_setPercentValue,f
 13680  0A88  09DD               	comf	??_setPercentValue+1,f
 13681  0A89  0ADC               	incf	??_setPercentValue,f
 13682  0A8A  1903               	skipnz
 13683  0A8B  0ADD               	incf	??_setPercentValue+1,f
 13684  0A8C  085C               	movf	??_setPercentValue,w
 13685  0A8D  3E38               	addlw	56
 13686  0A8E  00A8               	movwf	___awtoft@c
 13687  0A8F  3000               	movlw	0
 13688  0A90  3D5D               	addwfc	??_setPercentValue+1,w
 13689  0A91  00A9               	movwf	___awtoft@c+1
 13690  0A92  319F  2770  318A   	fcall	___awtoft
 13691  0A95  0020               	movlb	0	; select bank0
 13692  0A96  0828               	movf	?___awtoft,w
 13693  0A97  00B1               	movwf	___ftdiv@f1
 13694  0A98  0829               	movf	?___awtoft+1,w
 13695  0A99  00B2               	movwf	___ftdiv@f1+1
 13696  0A9A  082A               	movf	?___awtoft+2,w
 13697  0A9B  00B3               	movwf	___ftdiv@f1+2
 13698  0A9C  085F               	movf	setPercentValue@i,w
 13699  0A9D  00AE               	movwf	___ftdiv@f2
 13700  0A9E  0860               	movf	setPercentValue@i+1,w
 13701  0A9F  00AF               	movwf	___ftdiv@f2+1
 13702  0AA0  0861               	movf	setPercentValue@i+2,w
 13703  0AA1  00B0               	movwf	___ftdiv@f2+2
 13704  0AA2  318E  26A7  318A   	fcall	___ftdiv
 13705  0AA5  0020               	movlb	0	; select bank0
 13706  0AA6  082E               	movf	?___ftdiv,w
 13707  0AA7  00BE               	movwf	___ftneg@f1
 13708  0AA8  082F               	movf	?___ftdiv+1,w
 13709  0AA9  00BF               	movwf	___ftneg@f1+1
 13710  0AAA  0830               	movf	?___ftdiv+2,w
 13711  0AAB  00C0               	movwf	___ftneg@f1+2
 13712  0AAC  319B  2354  318A   	fcall	___ftneg
 13713  0AAF  0020               	movlb	0	; select bank0
 13714  0AB0  083E               	movf	?___ftneg,w
 13715  0AB1  00C4               	movwf	___ftadd@f2
 13716  0AB2  083F               	movf	?___ftneg+1,w
 13717  0AB3  00C5               	movwf	___ftadd@f2+1
 13718  0AB4  0840               	movf	?___ftneg+2,w
 13719  0AB5  00C6               	movwf	___ftadd@f2+2
 13720  0AB6  3000               	movlw	0
 13721  0AB7  00C1               	movwf	___ftadd@f1
 13722  0AB8  30C8               	movlw	200
 13723  0AB9  00C2               	movwf	___ftadd@f1+1
 13724  0ABA  3042               	movlw	66
 13725  0ABB  00C3               	movwf	___ftadd@f1+2
 13726  0ABC  3184  2469  318A   	fcall	___ftadd
 13727  0ABF  0020               	movlb	0	; select bank0
 13728  0AC0  0841               	movf	?___ftadd,w
 13729  0AC1  00CE               	movwf	___fttol@f1
 13730  0AC2  0842               	movf	?___ftadd+1,w
 13731  0AC3  00CF               	movwf	___fttol@f1+1
 13732  0AC4  0843               	movf	?___ftadd+2,w
 13733  0AC5  00D0               	movwf	___fttol@f1+2
 13734  0AC6  318D  2585         	fcall	___fttol
 13735  0AC8  0020               	movlb	0	; select bank0
 13736  0AC9  084E               	movf	?___fttol,w
 13737  0ACA  0008               	return
 13738  0ACB                     __end_of_setPercentValue:	
 13739                           
 13740                           	psect	text81
 13741  0D85                     __ptext81:	
 13742 ;; *************** function ___fttol *****************
 13743 ;; Defined at:
 13744 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13745 ;; Parameters:    Size  Location     Type
 13746 ;;  f1              3   46[BANK0 ] float 
 13747 ;; Auto vars:     Size  Location     Type
 13748 ;;  lval            4   55[BANK0 ] unsigned long 
 13749 ;;  exp1            1   59[BANK0 ] unsigned char 
 13750 ;;  sign1           1   54[BANK0 ] unsigned char 
 13751 ;; Return value:  Size  Location     Type
 13752 ;;                  4   46[BANK0 ] long 
 13753 ;; Registers used:
 13754 ;;		wreg, status,2, status,0
 13755 ;; Tracked objects:
 13756 ;;		On entry : 0/0
 13757 ;;		On exit  : 0/0
 13758 ;;		Unchanged: 0/0
 13759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13760 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13761 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13762 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13763 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13764 ;;Total ram usage:       14 bytes
 13765 ;; Hardware stack levels used:    1
 13766 ;; Hardware stack levels required when called:    5
 13767 ;; This function calls:
 13768 ;;		Nothing
 13769 ;; This function is called by:
 13770 ;;		_getPercentValue
 13771 ;;		_setPercentValue
 13772 ;; This function uses a non-reentrant model
 13773 ;;
 13774                           
 13775                           
 13776                           ;psect for function ___fttol
 13777  0D85                     ___fttol:	
 13778                           
 13779                           ;incstack = 0
 13780                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13781  0D85  0020               	movlb	0	; select bank0
 13782  0D86  084E               	movf	___fttol@f1,w
 13783  0D87  00D2               	movwf	??___fttol
 13784  0D88  084F               	movf	___fttol@f1+1,w
 13785  0D89  00D3               	movwf	??___fttol+1
 13786  0D8A  0850               	movf	___fttol@f1+2,w
 13787  0D8B  00D4               	movwf	??___fttol+2
 13788  0D8C  1003               	clrc
 13789  0D8D  0D53               	rlf	??___fttol+1,w
 13790  0D8E  0D54               	rlf	??___fttol+2,w
 13791  0D8F  00D5               	movwf	??___fttol+3
 13792  0D90  0855               	movf	??___fttol+3,w
 13793  0D91  00DB               	movwf	___fttol@exp1
 13794  0D92  08DB               	movf	___fttol@exp1,f
 13795  0D93  1D03               	skipz
 13796  0D94  2D9E               	goto	l8785
 13797  0D95  3000               	movlw	0
 13798  0D96  00D1               	movwf	?___fttol+3
 13799  0D97  3000               	movlw	0
 13800  0D98  00D0               	movwf	?___fttol+2
 13801  0D99  3000               	movlw	0
 13802  0D9A  00CF               	movwf	?___fttol+1
 13803  0D9B  3000               	movlw	0
 13804  0D9C  00CE               	movwf	?___fttol
 13805  0D9D  0008               	return
 13806  0D9E                     l8785:	
 13807  0D9E  084E               	movf	___fttol@f1,w
 13808  0D9F  00D2               	movwf	??___fttol
 13809  0DA0  084F               	movf	___fttol@f1+1,w
 13810  0DA1  00D3               	movwf	??___fttol+1
 13811  0DA2  0850               	movf	___fttol@f1+2,w
 13812  0DA3  00D4               	movwf	??___fttol+2
 13813  0DA4  3017               	movlw	23
 13814  0DA5                     u9425:	
 13815  0DA5  36D4               	lsrf	??___fttol+2,f
 13816  0DA6  0CD3               	rrf	??___fttol+1,f
 13817  0DA7  0CD2               	rrf	??___fttol,f
 13818  0DA8  0B89               	decfsz	9,f
 13819  0DA9  2DA5               	goto	u9425
 13820  0DAA  0852               	movf	??___fttol,w
 13821  0DAB  00D5               	movwf	??___fttol+3
 13822  0DAC  0855               	movf	??___fttol+3,w
 13823  0DAD  00D6               	movwf	___fttol@sign1
 13824  0DAE  17CF               	bsf	___fttol@f1+1,7
 13825  0DAF  30FF               	movlw	255
 13826  0DB0  05CE               	andwf	___fttol@f1,f
 13827  0DB1  30FF               	movlw	255
 13828  0DB2  05CF               	andwf	___fttol@f1+1,f
 13829  0DB3  3000               	movlw	0
 13830  0DB4  05D0               	andwf	___fttol@f1+2,f
 13831  0DB5  084E               	movf	___fttol@f1,w
 13832  0DB6  00D7               	movwf	___fttol@lval
 13833  0DB7  084F               	movf	___fttol@f1+1,w
 13834  0DB8  00D8               	movwf	___fttol@lval+1
 13835  0DB9  0850               	movf	___fttol@f1+2,w
 13836  0DBA  00D9               	movwf	___fttol@lval+2
 13837  0DBB  01DA               	clrf	___fttol@lval+3
 13838  0DBC  308E               	movlw	142
 13839  0DBD  02DB               	subwf	___fttol@exp1,f
 13840  0DBE  1FDB               	btfss	___fttol@exp1,7
 13841  0DBF  2DDC               	goto	l8805
 13842  0DC0  085B               	movf	___fttol@exp1,w
 13843  0DC1  3A80               	xorlw	128
 13844  0DC2  3E8F               	addlw	143
 13845  0DC3  1803               	skipnc
 13846  0DC4  2DCE               	goto	l8803
 13847  0DC5  3000               	movlw	0
 13848  0DC6  00D1               	movwf	?___fttol+3
 13849  0DC7  3000               	movlw	0
 13850  0DC8  00D0               	movwf	?___fttol+2
 13851  0DC9  3000               	movlw	0
 13852  0DCA  00CF               	movwf	?___fttol+1
 13853  0DCB  3000               	movlw	0
 13854  0DCC  00CE               	movwf	?___fttol
 13855  0DCD  0008               	return
 13856  0DCE                     l8803:	
 13857  0DCE  3001               	movlw	1
 13858  0DCF                     u9455:	
 13859  0DCF  36DA               	lsrf	___fttol@lval+3,f
 13860  0DD0  0CD9               	rrf	___fttol@lval+2,f
 13861  0DD1  0CD8               	rrf	___fttol@lval+1,f
 13862  0DD2  0CD7               	rrf	___fttol@lval,f
 13863  0DD3  0B89               	decfsz	9,f
 13864  0DD4  2DCF               	goto	u9455
 13865  0DD5  3001               	movlw	1
 13866  0DD6  00D2               	movwf	??___fttol
 13867  0DD7  0852               	movf	??___fttol,w
 13868  0DD8  07DB               	addwf	___fttol@exp1,f
 13869  0DD9  1903               	btfsc	3,2
 13870  0DDA  2DF5               	goto	l8815
 13871  0DDB  2DCE               	goto	l8803
 13872  0DDC                     l8805:	
 13873  0DDC  3018               	movlw	24
 13874  0DDD  025B               	subwf	___fttol@exp1,w
 13875  0DDE  1C03               	skipc
 13876  0DDF  2DF2               	goto	l8813
 13877  0DE0  3000               	movlw	0
 13878  0DE1  00D1               	movwf	?___fttol+3
 13879  0DE2  3000               	movlw	0
 13880  0DE3  00D0               	movwf	?___fttol+2
 13881  0DE4  3000               	movlw	0
 13882  0DE5  00CF               	movwf	?___fttol+1
 13883  0DE6  3000               	movlw	0
 13884  0DE7  00CE               	movwf	?___fttol
 13885  0DE8  0008               	return
 13886  0DE9                     l8811:	
 13887  0DE9  3001               	movlw	1
 13888  0DEA                     u9485:	
 13889  0DEA  35D7               	lslf	___fttol@lval,f
 13890  0DEB  0DD8               	rlf	___fttol@lval+1,f
 13891  0DEC  0DD9               	rlf	___fttol@lval+2,f
 13892  0DED  0DDA               	rlf	___fttol@lval+3,f
 13893  0DEE  0B89               	decfsz	9,f
 13894  0DEF  2DEA               	goto	u9485
 13895  0DF0  3001               	movlw	1
 13896  0DF1  02DB               	subwf	___fttol@exp1,f
 13897  0DF2                     l8813:	
 13898  0DF2  08DB               	movf	___fttol@exp1,f
 13899  0DF3  1D03               	skipz
 13900  0DF4  2DE9               	goto	l8811
 13901  0DF5                     l8815:	
 13902  0DF5  0856               	movf	___fttol@sign1,w
 13903  0DF6  1903               	btfsc	3,2
 13904  0DF7  2E03               	goto	l8819
 13905  0DF8  09D7               	comf	___fttol@lval,f
 13906  0DF9  09D8               	comf	___fttol@lval+1,f
 13907  0DFA  09D9               	comf	___fttol@lval+2,f
 13908  0DFB  09DA               	comf	___fttol@lval+3,f
 13909  0DFC  0AD7               	incf	___fttol@lval,f
 13910  0DFD  1903               	skipnz
 13911  0DFE  0AD8               	incf	___fttol@lval+1,f
 13912  0DFF  1903               	skipnz
 13913  0E00  0AD9               	incf	___fttol@lval+2,f
 13914  0E01  1903               	skipnz
 13915  0E02  0ADA               	incf	___fttol@lval+3,f
 13916  0E03                     l8819:	
 13917  0E03  085A               	movf	___fttol@lval+3,w
 13918  0E04  00D1               	movwf	?___fttol+3
 13919  0E05  0859               	movf	___fttol@lval+2,w
 13920  0E06  00D0               	movwf	?___fttol+2
 13921  0E07  0858               	movf	___fttol@lval+1,w
 13922  0E08  00CF               	movwf	?___fttol+1
 13923  0E09  0857               	movf	___fttol@lval,w
 13924  0E0A  00CE               	movwf	?___fttol
 13925  0E0B  0008               	return
 13926  0E0C                     __end_of___fttol:	
 13927                           
 13928                           	psect	text82
 13929  1B54                     __ptext82:	
 13930 ;; *************** function ___ftneg *****************
 13931 ;; Defined at:
 13932 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13933 ;; Parameters:    Size  Location     Type
 13934 ;;  f1              3   30[BANK0 ] float 
 13935 ;; Auto vars:     Size  Location     Type
 13936 ;;		None
 13937 ;; Return value:  Size  Location     Type
 13938 ;;                  3   30[BANK0 ] float 
 13939 ;; Registers used:
 13940 ;;		wreg
 13941 ;; Tracked objects:
 13942 ;;		On entry : 0/0
 13943 ;;		On exit  : 0/0
 13944 ;;		Unchanged: 0/0
 13945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13946 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13949 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13950 ;;Total ram usage:        3 bytes
 13951 ;; Hardware stack levels used:    1
 13952 ;; Hardware stack levels required when called:    5
 13953 ;; This function calls:
 13954 ;;		Nothing
 13955 ;; This function is called by:
 13956 ;;		_getPercentValue
 13957 ;;		_setPercentValue
 13958 ;; This function uses a non-reentrant model
 13959 ;;
 13960                           
 13961                           
 13962                           ;psect for function ___ftneg
 13963  1B54                     ___ftneg:	
 13964                           
 13965                           ;incstack = 0
 13966                           ; Regs used in ___ftneg: [wreg]
 13967  1B54  0020               	movlb	0	; select bank0
 13968  1B55  0840               	movf	___ftneg@f1+2,w
 13969  1B56  043F               	iorwf	___ftneg@f1+1,w
 13970  1B57  043E               	iorwf	___ftneg@f1,w
 13971  1B58  1903               	skipnz
 13972  1B59  0008               	return
 13973  1B5A  3080               	movlw	128
 13974  1B5B  06C0               	xorwf	___ftneg@f1+2,f
 13975  1B5C  0008               	return
 13976  1B5D                     __end_of___ftneg:	
 13977                           
 13978                           	psect	text83
 13979  0EA7                     __ptext83:	
 13980 ;; *************** function ___ftdiv *****************
 13981 ;; Defined at:
 13982 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13983 ;; Parameters:    Size  Location     Type
 13984 ;;  f2              3   14[BANK0 ] float 
 13985 ;;  f1              3   17[BANK0 ] float 
 13986 ;; Auto vars:     Size  Location     Type
 13987 ;;  f3              3   25[BANK0 ] float 
 13988 ;;  sign            1   29[BANK0 ] unsigned char 
 13989 ;;  exp             1   28[BANK0 ] unsigned char 
 13990 ;;  cntr            1   24[BANK0 ] unsigned char 
 13991 ;; Return value:  Size  Location     Type
 13992 ;;                  3   14[BANK0 ] float 
 13993 ;; Registers used:
 13994 ;;		wreg, status,2, status,0, pclath, cstack
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14000 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14004 ;;Total ram usage:       16 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:    6
 14007 ;; This function calls:
 14008 ;;		___ftpack
 14009 ;; This function is called by:
 14010 ;;		_getPercentValue
 14011 ;;		_setPercentValue
 14012 ;; This function uses a non-reentrant model
 14013 ;;
 14014                           
 14015                           
 14016                           ;psect for function ___ftdiv
 14017  0EA7                     ___ftdiv:	
 14018                           
 14019                           ;incstack = 0
 14020                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14021  0EA7  0020               	movlb	0	; select bank0
 14022  0EA8  0831               	movf	___ftdiv@f1,w
 14023  0EA9  00B4               	movwf	??___ftdiv
 14024  0EAA  0832               	movf	___ftdiv@f1+1,w
 14025  0EAB  00B5               	movwf	??___ftdiv+1
 14026  0EAC  0833               	movf	___ftdiv@f1+2,w
 14027  0EAD  00B6               	movwf	??___ftdiv+2
 14028  0EAE  1003               	clrc
 14029  0EAF  0D35               	rlf	??___ftdiv+1,w
 14030  0EB0  0D36               	rlf	??___ftdiv+2,w
 14031  0EB1  00B7               	movwf	??___ftdiv+3
 14032  0EB2  0837               	movf	??___ftdiv+3,w
 14033  0EB3  00BC               	movwf	___ftdiv@exp
 14034  0EB4  08BC               	movf	___ftdiv@exp,f
 14035  0EB5  1D03               	skipz
 14036  0EB6  2EBE               	goto	l8685
 14037  0EB7  3000               	movlw	0
 14038  0EB8  00AE               	movwf	?___ftdiv
 14039  0EB9  3000               	movlw	0
 14040  0EBA  00AF               	movwf	?___ftdiv+1
 14041  0EBB  3000               	movlw	0
 14042  0EBC  00B0               	movwf	?___ftdiv+2
 14043  0EBD  0008               	return
 14044  0EBE                     l8685:	
 14045  0EBE  082E               	movf	___ftdiv@f2,w
 14046  0EBF  00B4               	movwf	??___ftdiv
 14047  0EC0  082F               	movf	___ftdiv@f2+1,w
 14048  0EC1  00B5               	movwf	??___ftdiv+1
 14049  0EC2  0830               	movf	___ftdiv@f2+2,w
 14050  0EC3  00B6               	movwf	??___ftdiv+2
 14051  0EC4  1003               	clrc
 14052  0EC5  0D35               	rlf	??___ftdiv+1,w
 14053  0EC6  0D36               	rlf	??___ftdiv+2,w
 14054  0EC7  00B7               	movwf	??___ftdiv+3
 14055  0EC8  0837               	movf	??___ftdiv+3,w
 14056  0EC9  00BD               	movwf	___ftdiv@sign
 14057  0ECA  08BD               	movf	___ftdiv@sign,f
 14058  0ECB  1D03               	skipz
 14059  0ECC  2ED4               	goto	l8691
 14060  0ECD  3000               	movlw	0
 14061  0ECE  00AE               	movwf	?___ftdiv
 14062  0ECF  3000               	movlw	0
 14063  0ED0  00AF               	movwf	?___ftdiv+1
 14064  0ED1  3000               	movlw	0
 14065  0ED2  00B0               	movwf	?___ftdiv+2
 14066  0ED3  0008               	return
 14067  0ED4                     l8691:	
 14068  0ED4  3000               	movlw	0
 14069  0ED5  00B9               	movwf	___ftdiv@f3
 14070  0ED6  3000               	movlw	0
 14071  0ED7  00BA               	movwf	___ftdiv@f3+1
 14072  0ED8  3000               	movlw	0
 14073  0ED9  00BB               	movwf	___ftdiv@f3+2
 14074  0EDA  3089               	movlw	137
 14075  0EDB  073D               	addwf	___ftdiv@sign,w
 14076  0EDC  00B4               	movwf	??___ftdiv
 14077  0EDD  0834               	movf	??___ftdiv,w
 14078  0EDE  02BC               	subwf	___ftdiv@exp,f
 14079  0EDF  0831               	movf	___ftdiv@f1,w
 14080  0EE0  00B4               	movwf	??___ftdiv
 14081  0EE1  0832               	movf	___ftdiv@f1+1,w
 14082  0EE2  00B5               	movwf	??___ftdiv+1
 14083  0EE3  0833               	movf	___ftdiv@f1+2,w
 14084  0EE4  00B6               	movwf	??___ftdiv+2
 14085  0EE5  3010               	movlw	16
 14086  0EE6                     u9225:	
 14087  0EE6  36B6               	lsrf	??___ftdiv+2,f
 14088  0EE7  0CB5               	rrf	??___ftdiv+1,f
 14089  0EE8  0CB4               	rrf	??___ftdiv,f
 14090  0EE9  0B89               	decfsz	9,f
 14091  0EEA  2EE6               	goto	u9225
 14092  0EEB  0834               	movf	??___ftdiv,w
 14093  0EEC  00B7               	movwf	??___ftdiv+3
 14094  0EED  0837               	movf	??___ftdiv+3,w
 14095  0EEE  00BD               	movwf	___ftdiv@sign
 14096  0EEF  082E               	movf	___ftdiv@f2,w
 14097  0EF0  00B4               	movwf	??___ftdiv
 14098  0EF1  082F               	movf	___ftdiv@f2+1,w
 14099  0EF2  00B5               	movwf	??___ftdiv+1
 14100  0EF3  0830               	movf	___ftdiv@f2+2,w
 14101  0EF4  00B6               	movwf	??___ftdiv+2
 14102  0EF5  3010               	movlw	16
 14103  0EF6                     u9235:	
 14104  0EF6  36B6               	lsrf	??___ftdiv+2,f
 14105  0EF7  0CB5               	rrf	??___ftdiv+1,f
 14106  0EF8  0CB4               	rrf	??___ftdiv,f
 14107  0EF9  0B89               	decfsz	9,f
 14108  0EFA  2EF6               	goto	u9235
 14109  0EFB  0834               	movf	??___ftdiv,w
 14110  0EFC  00B7               	movwf	??___ftdiv+3
 14111  0EFD  0837               	movf	??___ftdiv+3,w
 14112  0EFE  06BD               	xorwf	___ftdiv@sign,f
 14113  0EFF  3080               	movlw	128
 14114  0F00  00B4               	movwf	??___ftdiv
 14115  0F01  0834               	movf	??___ftdiv,w
 14116  0F02  05BD               	andwf	___ftdiv@sign,f
 14117  0F03  17B2               	bsf	___ftdiv@f1+1,7
 14118  0F04  30FF               	movlw	255
 14119  0F05  05B1               	andwf	___ftdiv@f1,f
 14120  0F06  30FF               	movlw	255
 14121  0F07  05B2               	andwf	___ftdiv@f1+1,f
 14122  0F08  3000               	movlw	0
 14123  0F09  05B3               	andwf	___ftdiv@f1+2,f
 14124  0F0A  17AF               	bsf	___ftdiv@f2+1,7
 14125  0F0B  30FF               	movlw	255
 14126  0F0C  05AE               	andwf	___ftdiv@f2,f
 14127  0F0D  30FF               	movlw	255
 14128  0F0E  05AF               	andwf	___ftdiv@f2+1,f
 14129  0F0F  3000               	movlw	0
 14130  0F10  05B0               	andwf	___ftdiv@f2+2,f
 14131  0F11  3018               	movlw	24
 14132  0F12  00B4               	movwf	??___ftdiv
 14133  0F13  0834               	movf	??___ftdiv,w
 14134  0F14  00B8               	movwf	___ftdiv@cntr
 14135  0F15                     l8705:	
 14136  0F15  3001               	movlw	1
 14137  0F16                     u9245:	
 14138  0F16  35B9               	lslf	___ftdiv@f3,f
 14139  0F17  0DBA               	rlf	___ftdiv@f3+1,f
 14140  0F18  0DBB               	rlf	___ftdiv@f3+2,f
 14141  0F19  0B89               	decfsz	9,f
 14142  0F1A  2F16               	goto	u9245
 14143  0F1B  0830               	movf	___ftdiv@f2+2,w
 14144  0F1C  0233               	subwf	___ftdiv@f1+2,w
 14145  0F1D  1D03               	skipz
 14146  0F1E  2F25               	goto	u9255
 14147  0F1F  082F               	movf	___ftdiv@f2+1,w
 14148  0F20  0232               	subwf	___ftdiv@f1+1,w
 14149  0F21  1D03               	skipz
 14150  0F22  2F25               	goto	u9255
 14151  0F23  082E               	movf	___ftdiv@f2,w
 14152  0F24  0231               	subwf	___ftdiv@f1,w
 14153  0F25                     u9255:	
 14154  0F25  1C03               	skipc
 14155  0F26  2F2E               	goto	l8713
 14156  0F27  082E               	movf	___ftdiv@f2,w
 14157  0F28  02B1               	subwf	___ftdiv@f1,f
 14158  0F29  082F               	movf	___ftdiv@f2+1,w
 14159  0F2A  3BB2               	subwfb	___ftdiv@f1+1,f
 14160  0F2B  0830               	movf	___ftdiv@f2+2,w
 14161  0F2C  3BB3               	subwfb	___ftdiv@f1+2,f
 14162  0F2D  1439               	bsf	___ftdiv@f3,0
 14163  0F2E                     l8713:	
 14164  0F2E  3001               	movlw	1
 14165  0F2F                     u9265:	
 14166  0F2F  35B1               	lslf	___ftdiv@f1,f
 14167  0F30  0DB2               	rlf	___ftdiv@f1+1,f
 14168  0F31  0DB3               	rlf	___ftdiv@f1+2,f
 14169  0F32  0B89               	decfsz	9,f
 14170  0F33  2F2F               	goto	u9265
 14171  0F34  3001               	movlw	1
 14172  0F35  02B8               	subwf	___ftdiv@cntr,f
 14173  0F36  1D03               	btfss	3,2
 14174  0F37  2F15               	goto	l8705
 14175  0F38  0839               	movf	___ftdiv@f3,w
 14176  0F39  00A0               	movwf	___ftpack@arg
 14177  0F3A  083A               	movf	___ftdiv@f3+1,w
 14178  0F3B  00A1               	movwf	___ftpack@arg+1
 14179  0F3C  083B               	movf	___ftdiv@f3+2,w
 14180  0F3D  00A2               	movwf	___ftpack@arg+2
 14181  0F3E  083C               	movf	___ftdiv@exp,w
 14182  0F3F  00B4               	movwf	??___ftdiv
 14183  0F40  0834               	movf	??___ftdiv,w
 14184  0F41  00A3               	movwf	___ftpack@exp
 14185  0F42  083D               	movf	___ftdiv@sign,w
 14186  0F43  00B5               	movwf	??___ftdiv+1
 14187  0F44  0835               	movf	??___ftdiv+1,w
 14188  0F45  00A4               	movwf	___ftpack@sign
 14189  0F46  3189  213F         	fcall	___ftpack
 14190  0F48  0020               	movlb	0	; select bank0
 14191  0F49  0820               	movf	?___ftpack,w
 14192  0F4A  00AE               	movwf	?___ftdiv
 14193  0F4B  0821               	movf	?___ftpack+1,w
 14194  0F4C  00AF               	movwf	?___ftdiv+1
 14195  0F4D  0822               	movf	?___ftpack+2,w
 14196  0F4E  00B0               	movwf	?___ftdiv+2
 14197  0F4F  0008               	return
 14198  0F50                     __end_of___ftdiv:	
 14199                           
 14200                           	psect	text84
 14201  0469                     __ptext84:	
 14202 ;; *************** function ___ftadd *****************
 14203 ;; Defined at:
 14204 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14205 ;; Parameters:    Size  Location     Type
 14206 ;;  f1              3   33[BANK0 ] float 
 14207 ;;  f2              3   36[BANK0 ] float 
 14208 ;; Auto vars:     Size  Location     Type
 14209 ;;  exp1            1   45[BANK0 ] unsigned char 
 14210 ;;  exp2            1   44[BANK0 ] unsigned char 
 14211 ;;  sign            1   43[BANK0 ] unsigned char 
 14212 ;; Return value:  Size  Location     Type
 14213 ;;                  3   33[BANK0 ] float 
 14214 ;; Registers used:
 14215 ;;		wreg, status,2, status,0, pclath, cstack
 14216 ;; Tracked objects:
 14217 ;;		On entry : 0/0
 14218 ;;		On exit  : 0/0
 14219 ;;		Unchanged: 0/0
 14220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14221 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14222 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14223 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14224 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14225 ;;Total ram usage:       13 bytes
 14226 ;; Hardware stack levels used:    1
 14227 ;; Hardware stack levels required when called:    6
 14228 ;; This function calls:
 14229 ;;		___ftpack
 14230 ;; This function is called by:
 14231 ;;		_getPercentValue
 14232 ;;		_setPercentValue
 14233 ;; This function uses a non-reentrant model
 14234 ;;
 14235                           
 14236                           
 14237                           ;psect for function ___ftadd
 14238  0469                     ___ftadd:	
 14239                           
 14240                           ;incstack = 0
 14241                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14242  0469  0020               	movlb	0	; select bank0
 14243  046A  0841               	movf	___ftadd@f1,w
 14244  046B  00C7               	movwf	??___ftadd
 14245  046C  0842               	movf	___ftadd@f1+1,w
 14246  046D  00C8               	movwf	??___ftadd+1
 14247  046E  0843               	movf	___ftadd@f1+2,w
 14248  046F  00C9               	movwf	??___ftadd+2
 14249  0470  1003               	clrc
 14250  0471  0D48               	rlf	??___ftadd+1,w
 14251  0472  0D49               	rlf	??___ftadd+2,w
 14252  0473  00CA               	movwf	??___ftadd+3
 14253  0474  084A               	movf	??___ftadd+3,w
 14254  0475  00CD               	movwf	___ftadd@exp1
 14255  0476  0844               	movf	___ftadd@f2,w
 14256  0477  00C7               	movwf	??___ftadd
 14257  0478  0845               	movf	___ftadd@f2+1,w
 14258  0479  00C8               	movwf	??___ftadd+1
 14259  047A  0846               	movf	___ftadd@f2+2,w
 14260  047B  00C9               	movwf	??___ftadd+2
 14261  047C  1003               	clrc
 14262  047D  0D48               	rlf	??___ftadd+1,w
 14263  047E  0D49               	rlf	??___ftadd+2,w
 14264  047F  00CA               	movwf	??___ftadd+3
 14265  0480  084A               	movf	??___ftadd+3,w
 14266  0481  00CC               	movwf	___ftadd@exp2
 14267  0482  084D               	movf	___ftadd@exp1,w
 14268  0483  1903               	btfsc	3,2
 14269  0484  2C91               	goto	l8615
 14270  0485  084C               	movf	___ftadd@exp2,w
 14271  0486  024D               	subwf	___ftadd@exp1,w
 14272  0487  1803               	skipnc
 14273  0488  2C98               	goto	l8619
 14274  0489  034D               	decf	___ftadd@exp1,w
 14275  048A  3AFF               	xorlw	255
 14276  048B  074C               	addwf	___ftadd@exp2,w
 14277  048C  00C7               	movwf	??___ftadd
 14278  048D  3019               	movlw	25
 14279  048E  0247               	subwf	??___ftadd,w
 14280  048F  1C03               	skipc
 14281  0490  2C98               	goto	l8619
 14282  0491                     l8615:	
 14283  0491  0844               	movf	___ftadd@f2,w
 14284  0492  00C1               	movwf	?___ftadd
 14285  0493  0845               	movf	___ftadd@f2+1,w
 14286  0494  00C2               	movwf	?___ftadd+1
 14287  0495  0846               	movf	___ftadd@f2+2,w
 14288  0496  00C3               	movwf	?___ftadd+2
 14289  0497  0008               	return
 14290  0498                     l8619:	
 14291  0498  084C               	movf	___ftadd@exp2,w
 14292  0499  1903               	btfsc	3,2
 14293  049A  0008               	return
 14294  049B  084D               	movf	___ftadd@exp1,w
 14295  049C  024C               	subwf	___ftadd@exp2,w
 14296  049D  1803               	skipnc
 14297  049E  2CA7               	goto	l8625
 14298  049F  034C               	decf	___ftadd@exp2,w
 14299  04A0  3AFF               	xorlw	255
 14300  04A1  074D               	addwf	___ftadd@exp1,w
 14301  04A2  00C7               	movwf	??___ftadd
 14302  04A3  3019               	movlw	25
 14303  04A4  0247               	subwf	??___ftadd,w
 14304  04A5  1803               	btfsc	3,0
 14305  04A6  0008               	return
 14306  04A7                     l8625:	
 14307  04A7  3006               	movlw	6
 14308  04A8  00C7               	movwf	??___ftadd
 14309  04A9  0847               	movf	??___ftadd,w
 14310  04AA  00CB               	movwf	___ftadd@sign
 14311  04AB  1BC3               	btfsc	___ftadd@f1+2,7
 14312  04AC  17CB               	bsf	___ftadd@sign,7
 14313  04AD  1BC6               	btfsc	___ftadd@f2+2,7
 14314  04AE  174B               	bsf	___ftadd@sign,6
 14315  04AF  17C2               	bsf	___ftadd@f1+1,7
 14316  04B0  30FF               	movlw	255
 14317  04B1  05C1               	andwf	___ftadd@f1,f
 14318  04B2  30FF               	movlw	255
 14319  04B3  05C2               	andwf	___ftadd@f1+1,f
 14320  04B4  3000               	movlw	0
 14321  04B5  05C3               	andwf	___ftadd@f1+2,f
 14322  04B6  17C5               	bsf	___ftadd@f2+1,7
 14323  04B7  30FF               	movlw	255
 14324  04B8  05C4               	andwf	___ftadd@f2,f
 14325  04B9  30FF               	movlw	255
 14326  04BA  05C5               	andwf	___ftadd@f2+1,f
 14327  04BB  3000               	movlw	0
 14328  04BC  05C6               	andwf	___ftadd@f2+2,f
 14329  04BD  084C               	movf	___ftadd@exp2,w
 14330  04BE  024D               	subwf	___ftadd@exp1,w
 14331  04BF  1803               	skipnc
 14332  04C0  2CE3               	goto	l8647
 14333  04C1                     l8637:	
 14334  04C1  3001               	movlw	1
 14335  04C2                     u9065:	
 14336  04C2  35C4               	lslf	___ftadd@f2,f
 14337  04C3  0DC5               	rlf	___ftadd@f2+1,f
 14338  04C4  0DC6               	rlf	___ftadd@f2+2,f
 14339  04C5  0B89               	decfsz	9,f
 14340  04C6  2CC2               	goto	u9065
 14341  04C7  3001               	movlw	1
 14342  04C8  02CC               	subwf	___ftadd@exp2,f
 14343  04C9  084C               	movf	___ftadd@exp2,w
 14344  04CA  064D               	xorwf	___ftadd@exp1,w
 14345  04CB  1903               	skipnz
 14346  04CC  2CDE               	goto	l8645
 14347  04CD  3001               	movlw	1
 14348  04CE  02CB               	subwf	___ftadd@sign,f
 14349  04CF  084B               	movf	___ftadd@sign,w
 14350  04D0  3907               	andlw	7
 14351  04D1  1903               	btfsc	3,2
 14352  04D2  2CDE               	goto	l8645
 14353  04D3  2CC1               	goto	l8637
 14354  04D4                     l8643:	
 14355  04D4  3001               	movlw	1
 14356  04D5                     u9095:	
 14357  04D5  36C3               	lsrf	___ftadd@f1+2,f
 14358  04D6  0CC2               	rrf	___ftadd@f1+1,f
 14359  04D7  0CC1               	rrf	___ftadd@f1,f
 14360  04D8  0B89               	decfsz	9,f
 14361  04D9  2CD5               	goto	u9095
 14362  04DA  3001               	movlw	1
 14363  04DB  00C7               	movwf	??___ftadd
 14364  04DC  0847               	movf	??___ftadd,w
 14365  04DD  07CD               	addwf	___ftadd@exp1,f
 14366  04DE                     l8645:	
 14367  04DE  084D               	movf	___ftadd@exp1,w
 14368  04DF  064C               	xorwf	___ftadd@exp2,w
 14369  04E0  1903               	btfsc	3,2
 14370  04E1  2D08               	goto	l3060
 14371  04E2  2CD4               	goto	l8643
 14372  04E3                     l8647:	
 14373  04E3  084D               	movf	___ftadd@exp1,w
 14374  04E4  024C               	subwf	___ftadd@exp2,w
 14375  04E5  1803               	skipnc
 14376  04E6  2D08               	goto	l3060
 14377  04E7                     l8649:	
 14378  04E7  3001               	movlw	1
 14379  04E8                     u9125:	
 14380  04E8  35C1               	lslf	___ftadd@f1,f
 14381  04E9  0DC2               	rlf	___ftadd@f1+1,f
 14382  04EA  0DC3               	rlf	___ftadd@f1+2,f
 14383  04EB  0B89               	decfsz	9,f
 14384  04EC  2CE8               	goto	u9125
 14385  04ED  3001               	movlw	1
 14386  04EE  02CD               	subwf	___ftadd@exp1,f
 14387  04EF  084C               	movf	___ftadd@exp2,w
 14388  04F0  064D               	xorwf	___ftadd@exp1,w
 14389  04F1  1903               	skipnz
 14390  04F2  2D04               	goto	l8657
 14391  04F3  3001               	movlw	1
 14392  04F4  02CB               	subwf	___ftadd@sign,f
 14393  04F5  084B               	movf	___ftadd@sign,w
 14394  04F6  3907               	andlw	7
 14395  04F7  1903               	btfsc	3,2
 14396  04F8  2D04               	goto	l8657
 14397  04F9  2CE7               	goto	l8649
 14398  04FA                     l8655:	
 14399  04FA  3001               	movlw	1
 14400  04FB                     u9155:	
 14401  04FB  36C6               	lsrf	___ftadd@f2+2,f
 14402  04FC  0CC5               	rrf	___ftadd@f2+1,f
 14403  04FD  0CC4               	rrf	___ftadd@f2,f
 14404  04FE  0B89               	decfsz	9,f
 14405  04FF  2CFB               	goto	u9155
 14406  0500  3001               	movlw	1
 14407  0501  00C7               	movwf	??___ftadd
 14408  0502  0847               	movf	??___ftadd,w
 14409  0503  07CC               	addwf	___ftadd@exp2,f
 14410  0504                     l8657:	
 14411  0504  084D               	movf	___ftadd@exp1,w
 14412  0505  064C               	xorwf	___ftadd@exp2,w
 14413  0506  1D03               	skipz
 14414  0507  2CFA               	goto	l8655
 14415  0508                     l3060:	
 14416  0508  1FCB               	btfss	___ftadd@sign,7
 14417  0509  2D1A               	goto	l8661
 14418  050A  30FF               	movlw	255
 14419  050B  06C1               	xorwf	___ftadd@f1,f
 14420  050C  30FF               	movlw	255
 14421  050D  06C2               	xorwf	___ftadd@f1+1,f
 14422  050E  30FF               	movlw	255
 14423  050F  06C3               	xorwf	___ftadd@f1+2,f
 14424  0510  3001               	movlw	1
 14425  0511  07C1               	addwf	___ftadd@f1,f
 14426  0512  3000               	movlw	0
 14427  0513  1803               	skipnc
 14428  0514  3001               	movlw	1
 14429  0515  07C2               	addwf	___ftadd@f1+1,f
 14430  0516  3000               	movlw	0
 14431  0517  1803               	skipnc
 14432  0518  3001               	movlw	1
 14433  0519  07C3               	addwf	___ftadd@f1+2,f
 14434  051A                     l8661:	
 14435  051A  1F4B               	btfss	___ftadd@sign,6
 14436  051B  2D2C               	goto	l8665
 14437  051C  30FF               	movlw	255
 14438  051D  06C4               	xorwf	___ftadd@f2,f
 14439  051E  30FF               	movlw	255
 14440  051F  06C5               	xorwf	___ftadd@f2+1,f
 14441  0520  30FF               	movlw	255
 14442  0521  06C6               	xorwf	___ftadd@f2+2,f
 14443  0522  3001               	movlw	1
 14444  0523  07C4               	addwf	___ftadd@f2,f
 14445  0524  3000               	movlw	0
 14446  0525  1803               	skipnc
 14447  0526  3001               	movlw	1
 14448  0527  07C5               	addwf	___ftadd@f2+1,f
 14449  0528  3000               	movlw	0
 14450  0529  1803               	skipnc
 14451  052A  3001               	movlw	1
 14452  052B  07C6               	addwf	___ftadd@f2+2,f
 14453  052C                     l8665:	
 14454  052C  01CB               	clrf	___ftadd@sign
 14455  052D  0841               	movf	___ftadd@f1,w
 14456  052E  07C4               	addwf	___ftadd@f2,f
 14457  052F  0842               	movf	___ftadd@f1+1,w
 14458  0530  3DC5               	addwfc	___ftadd@f2+1,f
 14459  0531  0843               	movf	___ftadd@f1+2,w
 14460  0532  3DC6               	addwfc	___ftadd@f2+2,f
 14461  0533  1FC6               	btfss	___ftadd@f2+2,7
 14462  0534  2D47               	goto	l8675
 14463  0535  30FF               	movlw	255
 14464  0536  06C4               	xorwf	___ftadd@f2,f
 14465  0537  30FF               	movlw	255
 14466  0538  06C5               	xorwf	___ftadd@f2+1,f
 14467  0539  30FF               	movlw	255
 14468  053A  06C6               	xorwf	___ftadd@f2+2,f
 14469  053B  3001               	movlw	1
 14470  053C  07C4               	addwf	___ftadd@f2,f
 14471  053D  3000               	movlw	0
 14472  053E  1803               	skipnc
 14473  053F  3001               	movlw	1
 14474  0540  07C5               	addwf	___ftadd@f2+1,f
 14475  0541  3000               	movlw	0
 14476  0542  1803               	skipnc
 14477  0543  3001               	movlw	1
 14478  0544  07C6               	addwf	___ftadd@f2+2,f
 14479  0545  01CB               	clrf	___ftadd@sign
 14480  0546  0ACB               	incf	___ftadd@sign,f
 14481  0547                     l8675:	
 14482  0547  0844               	movf	___ftadd@f2,w
 14483  0548  00A0               	movwf	___ftpack@arg
 14484  0549  0845               	movf	___ftadd@f2+1,w
 14485  054A  00A1               	movwf	___ftpack@arg+1
 14486  054B  0846               	movf	___ftadd@f2+2,w
 14487  054C  00A2               	movwf	___ftpack@arg+2
 14488  054D  084D               	movf	___ftadd@exp1,w
 14489  054E  00C7               	movwf	??___ftadd
 14490  054F  0847               	movf	??___ftadd,w
 14491  0550  00A3               	movwf	___ftpack@exp
 14492  0551  084B               	movf	___ftadd@sign,w
 14493  0552  00C8               	movwf	??___ftadd+1
 14494  0553  0848               	movf	??___ftadd+1,w
 14495  0554  00A4               	movwf	___ftpack@sign
 14496  0555  3189  213F         	fcall	___ftpack
 14497  0557  0020               	movlb	0	; select bank0
 14498  0558  0820               	movf	?___ftpack,w
 14499  0559  00C1               	movwf	?___ftadd
 14500  055A  0821               	movf	?___ftpack+1,w
 14501  055B  00C2               	movwf	?___ftadd+1
 14502  055C  0822               	movf	?___ftpack+2,w
 14503  055D  00C3               	movwf	?___ftadd+2
 14504  055E  0008               	return
 14505  055F                     __end_of___ftadd:	
 14506                           
 14507                           	psect	text85
 14508  1F70                     __ptext85:	
 14509 ;; *************** function ___awtoft *****************
 14510 ;; Defined at:
 14511 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14512 ;; Parameters:    Size  Location     Type
 14513 ;;  c               2    8[BANK0 ] int 
 14514 ;; Auto vars:     Size  Location     Type
 14515 ;;  sign            1   13[BANK0 ] unsigned char 
 14516 ;; Return value:  Size  Location     Type
 14517 ;;                  3    8[BANK0 ] float 
 14518 ;; Registers used:
 14519 ;;		wreg, status,2, status,0, pclath, cstack
 14520 ;; Tracked objects:
 14521 ;;		On entry : 0/0
 14522 ;;		On exit  : 0/0
 14523 ;;		Unchanged: 0/0
 14524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14525 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14527 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14528 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14529 ;;Total ram usage:        6 bytes
 14530 ;; Hardware stack levels used:    1
 14531 ;; Hardware stack levels required when called:    6
 14532 ;; This function calls:
 14533 ;;		___ftpack
 14534 ;; This function is called by:
 14535 ;;		_getPercentValue
 14536 ;;		_setPercentValue
 14537 ;; This function uses a non-reentrant model
 14538 ;;
 14539                           
 14540                           
 14541                           ;psect for function ___awtoft
 14542  1F70                     ___awtoft:	
 14543                           
 14544                           ;incstack = 0
 14545                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14546  1F70  0020               	movlb	0	; select bank0
 14547  1F71  01AD               	clrf	___awtoft@sign
 14548  1F72  1FA9               	btfss	___awtoft@c+1,7
 14549  1F73  2F7B               	goto	l8603
 14550  1F74  09A8               	comf	___awtoft@c,f
 14551  1F75  09A9               	comf	___awtoft@c+1,f
 14552  1F76  0AA8               	incf	___awtoft@c,f
 14553  1F77  1903               	skipnz
 14554  1F78  0AA9               	incf	___awtoft@c+1,f
 14555  1F79  01AD               	clrf	___awtoft@sign
 14556  1F7A  0AAD               	incf	___awtoft@sign,f
 14557  1F7B                     l8603:	
 14558  1F7B  0828               	movf	___awtoft@c,w
 14559  1F7C  00A0               	movwf	___ftpack@arg
 14560  1F7D  0829               	movf	___awtoft@c+1,w
 14561  1F7E  00A1               	movwf	___ftpack@arg+1
 14562  1F7F  01A2               	clrf	___ftpack@arg+2
 14563  1F80  308E               	movlw	142
 14564  1F81  00AB               	movwf	??___awtoft
 14565  1F82  082B               	movf	??___awtoft,w
 14566  1F83  00A3               	movwf	___ftpack@exp
 14567  1F84  082D               	movf	___awtoft@sign,w
 14568  1F85  00AC               	movwf	??___awtoft+1
 14569  1F86  082C               	movf	??___awtoft+1,w
 14570  1F87  00A4               	movwf	___ftpack@sign
 14571  1F88  3189  213F         	fcall	___ftpack
 14572  1F8A  0020               	movlb	0	; select bank0
 14573  1F8B  0820               	movf	?___ftpack,w
 14574  1F8C  00A8               	movwf	?___awtoft
 14575  1F8D  0821               	movf	?___ftpack+1,w
 14576  1F8E  00A9               	movwf	?___awtoft+1
 14577  1F8F  0822               	movf	?___ftpack+2,w
 14578  1F90  00AA               	movwf	?___awtoft+2
 14579  1F91  0008               	return
 14580  1F92                     __end_of___awtoft:	
 14581                           
 14582                           	psect	text86
 14583  093F                     __ptext86:	
 14584 ;; *************** function ___ftpack *****************
 14585 ;; Defined at:
 14586 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14587 ;; Parameters:    Size  Location     Type
 14588 ;;  arg             3    0[BANK0 ] unsigned um
 14589 ;;  exp             1    3[BANK0 ] unsigned char 
 14590 ;;  sign            1    4[BANK0 ] unsigned char 
 14591 ;; Auto vars:     Size  Location     Type
 14592 ;;		None
 14593 ;; Return value:  Size  Location     Type
 14594 ;;                  3    0[BANK0 ] float 
 14595 ;; Registers used:
 14596 ;;		wreg, status,2, status,0
 14597 ;; Tracked objects:
 14598 ;;		On entry : 0/0
 14599 ;;		On exit  : 0/0
 14600 ;;		Unchanged: 0/0
 14601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14602 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14605 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;Total ram usage:        8 bytes
 14607 ;; Hardware stack levels used:    1
 14608 ;; Hardware stack levels required when called:    5
 14609 ;; This function calls:
 14610 ;;		Nothing
 14611 ;; This function is called by:
 14612 ;;		___awtoft
 14613 ;;		___ftadd
 14614 ;;		___ftdiv
 14615 ;;		___ftmul
 14616 ;; This function uses a non-reentrant model
 14617 ;;
 14618                           
 14619                           
 14620                           ;psect for function ___ftpack
 14621  093F                     ___ftpack:	
 14622                           
 14623                           ;incstack = 0
 14624                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14625  093F  0020               	movlb	0	; select bank0
 14626  0940  0823               	movf	___ftpack@exp,w
 14627  0941  1903               	btfsc	3,2
 14628  0942  2948               	goto	l8553
 14629  0943  0822               	movf	___ftpack@arg+2,w
 14630  0944  0421               	iorwf	___ftpack@arg+1,w
 14631  0945  0420               	iorwf	___ftpack@arg,w
 14632  0946  1D03               	skipz
 14633  0947  2959               	goto	l8559
 14634  0948                     l8553:	
 14635  0948  3000               	movlw	0
 14636  0949  00A0               	movwf	?___ftpack
 14637  094A  3000               	movlw	0
 14638  094B  00A1               	movwf	?___ftpack+1
 14639  094C  3000               	movlw	0
 14640  094D  00A2               	movwf	?___ftpack+2
 14641  094E  0008               	return
 14642  094F                     l8557:	
 14643  094F  3001               	movlw	1
 14644  0950  00A5               	movwf	??___ftpack
 14645  0951  0825               	movf	??___ftpack,w
 14646  0952  07A3               	addwf	___ftpack@exp,f
 14647  0953  3001               	movlw	1
 14648  0954                     u8855:	
 14649  0954  36A2               	lsrf	___ftpack@arg+2,f
 14650  0955  0CA1               	rrf	___ftpack@arg+1,f
 14651  0956  0CA0               	rrf	___ftpack@arg,f
 14652  0957  0B89               	decfsz	9,f
 14653  0958  2954               	goto	u8855
 14654  0959                     l8559:	
 14655  0959  30FE               	movlw	254
 14656  095A  0522               	andwf	___ftpack@arg+2,w
 14657  095B  1903               	btfsc	3,2
 14658  095C  2972               	goto	l3031
 14659  095D  294F               	goto	l8557
 14660  095E                     l8561:	
 14661  095E  3001               	movlw	1
 14662  095F  00A5               	movwf	??___ftpack
 14663  0960  0825               	movf	??___ftpack,w
 14664  0961  07A3               	addwf	___ftpack@exp,f
 14665  0962  3001               	movlw	1
 14666  0963  07A0               	addwf	___ftpack@arg,f
 14667  0964  3000               	movlw	0
 14668  0965  1803               	skipnc
 14669  0966  3001               	movlw	1
 14670  0967  07A1               	addwf	___ftpack@arg+1,f
 14671  0968  3000               	movlw	0
 14672  0969  1803               	skipnc
 14673  096A  3001               	movlw	1
 14674  096B  07A2               	addwf	___ftpack@arg+2,f
 14675  096C  3001               	movlw	1
 14676  096D                     u8875:	
 14677  096D  36A2               	lsrf	___ftpack@arg+2,f
 14678  096E  0CA1               	rrf	___ftpack@arg+1,f
 14679  096F  0CA0               	rrf	___ftpack@arg,f
 14680  0970  0B89               	decfsz	9,f
 14681  0971  296D               	goto	u8875
 14682  0972                     l3031:	
 14683  0972  30FF               	movlw	255
 14684  0973  0522               	andwf	___ftpack@arg+2,w
 14685  0974  1903               	btfsc	3,2
 14686  0975  297F               	goto	l8569
 14687  0976  295E               	goto	l8561
 14688  0977                     l8567:	
 14689  0977  3001               	movlw	1
 14690  0978  02A3               	subwf	___ftpack@exp,f
 14691  0979  3001               	movlw	1
 14692  097A                     u8895:	
 14693  097A  35A0               	lslf	___ftpack@arg,f
 14694  097B  0DA1               	rlf	___ftpack@arg+1,f
 14695  097C  0DA2               	rlf	___ftpack@arg+2,f
 14696  097D  0B89               	decfsz	9,f
 14697  097E  297A               	goto	u8895
 14698  097F                     l8569:	
 14699  097F  1FA1               	btfss	___ftpack@arg+1,7
 14700  0980  2977               	goto	l8567
 14701  0981  1823               	btfsc	___ftpack@exp,0
 14702  0982  2989               	goto	l3037
 14703  0983  30FF               	movlw	255
 14704  0984  05A0               	andwf	___ftpack@arg,f
 14705  0985  307F               	movlw	127
 14706  0986  05A1               	andwf	___ftpack@arg+1,f
 14707  0987  30FF               	movlw	255
 14708  0988  05A2               	andwf	___ftpack@arg+2,f
 14709  0989                     l3037:	
 14710  0989  1003               	clrc
 14711  098A  0CA3               	rrf	___ftpack@exp,f
 14712  098B  0823               	movf	___ftpack@exp,w
 14713  098C  00A5               	movwf	??___ftpack
 14714  098D  01A6               	clrf	??___ftpack+1
 14715  098E  01A7               	clrf	??___ftpack+2
 14716  098F  3010               	movlw	16
 14717  0990                     u8925:	
 14718  0990  35A5               	lslf	??___ftpack,f
 14719  0991  0DA6               	rlf	??___ftpack+1,f
 14720  0992  0DA7               	rlf	??___ftpack+2,f
 14721  0993  0B89               	decfsz	9,f
 14722  0994  2990               	goto	u8925
 14723  0995  0825               	movf	??___ftpack,w
 14724  0996  04A0               	iorwf	___ftpack@arg,f
 14725  0997  0826               	movf	??___ftpack+1,w
 14726  0998  04A1               	iorwf	___ftpack@arg+1,f
 14727  0999  0827               	movf	??___ftpack+2,w
 14728  099A  04A2               	iorwf	___ftpack@arg+2,f
 14729  099B  0824               	movf	___ftpack@sign,w
 14730  099C  1903               	btfsc	3,2
 14731  099D  0008               	return
 14732  099E  17A2               	bsf	___ftpack@arg+2,7
 14733  099F  0008               	return
 14734  09A0                     __end_of___ftpack:	
 14735                           
 14736                           	psect	text87
 14737  164F                     __ptext87:	
 14738 ;; *************** function _setLED *****************
 14739 ;; Defined at:
 14740 ;;		line 76 in file "../src/LED_B1.c"
 14741 ;; Parameters:    Size  Location     Type
 14742 ;;  led             1    wreg     unsigned char 
 14743 ;;  command         1    2[BANK0 ] unsigned char 
 14744 ;; Auto vars:     Size  Location     Type
 14745 ;;  led             1    3[BANK0 ] unsigned char 
 14746 ;; Return value:  Size  Location     Type
 14747 ;;		None               void
 14748 ;; Registers used:
 14749 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14750 ;; Tracked objects:
 14751 ;;		On entry : 0/0
 14752 ;;		On exit  : 0/0
 14753 ;;		Unchanged: 0/0
 14754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14755 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14756 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;Total ram usage:        2 bytes
 14760 ;; Hardware stack levels used:    1
 14761 ;; Hardware stack levels required when called:    6
 14762 ;; This function calls:
 14763 ;;		_LedPointSelect
 14764 ;; This function is called by:
 14765 ;;		_setDimmerLights
 14766 ;;		_setLED_Initialization
 14767 ;;		_Exception_Main
 14768 ;;		_setSw_Initialization
 14769 ;; This function uses a non-reentrant model
 14770 ;;
 14771                           
 14772                           
 14773                           ;psect for function _setLED
 14774  164F                     _setLED:	
 14775                           
 14776                           ;incstack = 0
 14777                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14778                           ;setLED@led stored from wreg
 14779  164F  0020               	movlb	0	; select bank0
 14780  1650  00A3               	movwf	setLED@led
 14781                           
 14782                           ;LED_B1.c: 77: LedPointSelect(led);
 14783  1651  0823               	movf	setLED@led,w
 14784  1652  319E  26F0  3196   	fcall	_LedPointSelect
 14785                           
 14786                           ;LED_B1.c: 78: if (command == 0) {
 14787  1655  0020               	movlb	0	; select bank0
 14788  1656  08A2               	movf	setLED@command,f
 14789  1657  1D03               	skipz
 14790  1658  2E66               	goto	l9357
 14791                           
 14792                           ;LED_B1.c: 80: if (led == 1) {
 14793  1659  0823               	movf	setLED@led,w
 14794  165A  3A01               	xorlw	1
 14795  165B  1D03               	skipz
 14796  165C  2E5E               	goto	l9349
 14797                           
 14798                           ;LED_B1.c: 84: RA3 = 1;
 14799  165D  158C               	bsf	12,3	;volatile
 14800  165E                     l9349:	
 14801                           
 14802                           ;LED_B1.c: 86: }
 14803                           ;LED_B1.c: 89: if (led == 2) {
 14804  165E  0823               	movf	setLED@led,w
 14805  165F  3A02               	xorlw	2
 14806  1660  1903               	btfsc	3,2
 14807                           
 14808                           ;LED_B1.c: 93: RC7 = 1;
 14809  1661  178E               	bsf	14,7	;volatile
 14810                           
 14811                           ;LED_B1.c: 95: }
 14812                           ;LED_B1.c: 107: if (led == 99) {
 14813  1662  0823               	movf	setLED@led,w
 14814  1663  3A63               	xorlw	99
 14815  1664  1903               	btfsc	3,2
 14816                           
 14817                           ;LED_B1.c: 111: RB5 = 1;
 14818  1665  168D               	bsf	13,5	;volatile
 14819  1666                     l9357:	
 14820                           
 14821                           ;LED_B1.c: 113: }
 14822                           ;LED_B1.c: 115: }
 14823                           ;LED_B1.c: 116: if (command == 1) {
 14824  1666  0822               	movf	setLED@command,w
 14825  1667  3A01               	xorlw	1
 14826  1668  1D03               	skipz
 14827  1669  2E77               	goto	l9371
 14828                           
 14829                           ;LED_B1.c: 118: if (led == 1) {
 14830  166A  0823               	movf	setLED@led,w
 14831  166B  3A01               	xorlw	1
 14832  166C  1D03               	skipz
 14833  166D  2E6F               	goto	l9363
 14834                           
 14835                           ;LED_B1.c: 122: RA3 = 0;
 14836  166E  118C               	bcf	12,3	;volatile
 14837  166F                     l9363:	
 14838                           
 14839                           ;LED_B1.c: 124: }
 14840                           ;LED_B1.c: 127: if (led == 2) {
 14841  166F  0823               	movf	setLED@led,w
 14842  1670  3A02               	xorlw	2
 14843  1671  1903               	btfsc	3,2
 14844                           
 14845                           ;LED_B1.c: 131: RC7 = 0;
 14846  1672  138E               	bcf	14,7	;volatile
 14847                           
 14848                           ;LED_B1.c: 133: }
 14849                           ;LED_B1.c: 145: if (led == 99) {
 14850  1673  0823               	movf	setLED@led,w
 14851  1674  3A63               	xorlw	99
 14852  1675  1903               	btfsc	3,2
 14853                           
 14854                           ;LED_B1.c: 149: RB5 = 0;
 14855  1676  128D               	bcf	13,5	;volatile
 14856  1677                     l9371:	
 14857                           
 14858                           ;LED_B1.c: 151: }
 14859                           ;LED_B1.c: 153: }
 14860                           ;LED_B1.c: 154: if (command == 10) {
 14861  1677  0822               	movf	setLED@command,w
 14862  1678  3A0A               	xorlw	10
 14863  1679  1D03               	skipz
 14864  167A  2E97               	goto	l9387
 14865                           
 14866                           ;LED_B1.c: 155: LED->GO = 0;
 14867  167B  0021               	movlb	1	; select bank1
 14868  167C  084D               	movf	_LED^(0+128),w
 14869  167D  0086               	movwf	6
 14870  167E  3001               	movlw	1	; select bank2/3
 14871  167F  0087               	movwf	7
 14872  1680  1081               	bcf	1,1
 14873                           
 14874                           ;LED_B1.c: 156: LED->Time = 0;
 14875  1681  0A4D               	incf	_LED^(0+128),w
 14876  1682  0086               	movwf	6
 14877  1683  3001               	movlw	1	; select bank2/3
 14878  1684  0087               	movwf	7
 14879  1685  3000               	movlw	0
 14880  1686  3FC0               	movwi [0]fsr1
 14881  1687  3FC1               	movwi [1]fsr1
 14882                           
 14883                           ;LED_B1.c: 158: if (led == 1) {
 14884  1688  0020               	movlb	0	; select bank0
 14885  1689  0823               	movf	setLED@led,w
 14886  168A  3A01               	xorlw	1
 14887  168B  1D03               	skipz
 14888  168C  2E8F               	goto	l9379
 14889                           
 14890                           ;LED_B1.c: 162: RA3 = 1;
 14891  168D  158C               	bsf	12,3	;volatile
 14892                           
 14893                           ;LED_B1.c: 164: }
 14894  168E  2E93               	goto	l9383
 14895  168F                     l9379:	
 14896                           
 14897                           ;LED_B1.c: 167: else if (led == 2) {
 14898  168F  0823               	movf	setLED@led,w
 14899  1690  3A02               	xorlw	2
 14900  1691  1903               	btfsc	3,2
 14901                           
 14902                           ;LED_B1.c: 171: RC7 = 1;
 14903  1692  178E               	bsf	14,7	;volatile
 14904  1693                     l9383:	
 14905                           
 14906                           ;LED_B1.c: 173: }
 14907                           ;LED_B1.c: 185: if (led == 99) {
 14908  1693  0823               	movf	setLED@led,w
 14909  1694  3A63               	xorlw	99
 14910  1695  1903               	btfsc	3,2
 14911                           
 14912                           ;LED_B1.c: 189: RB5 = 1;
 14913  1696  168D               	bsf	13,5	;volatile
 14914  1697                     l9387:	
 14915                           
 14916                           ;LED_B1.c: 191: }
 14917                           ;LED_B1.c: 193: }
 14918                           ;LED_B1.c: 194: if (command == 11) {
 14919  1697  0822               	movf	setLED@command,w
 14920  1698  3A0B               	xorlw	11
 14921  1699  1D03               	skipz
 14922  169A  0008               	return
 14923                           
 14924                           ;LED_B1.c: 195: LED->GO = 1;
 14925  169B  0021               	movlb	1	; select bank1
 14926  169C  084D               	movf	_LED^(0+128),w
 14927  169D  0086               	movwf	6
 14928  169E  3001               	movlw	1	; select bank2/3
 14929  169F  0087               	movwf	7
 14930  16A0  1481               	bsf	1,1
 14931  16A1  0008               	return
 14932  16A2                     __end_of_setLED:	
 14933                           
 14934                           	psect	text88
 14935  1EF0                     __ptext88:	
 14936 ;; *************** function _LedPointSelect *****************
 14937 ;; Defined at:
 14938 ;;		line 7 in file "../src/LED_B1.c"
 14939 ;; Parameters:    Size  Location     Type
 14940 ;;  led             1    wreg     unsigned char 
 14941 ;; Auto vars:     Size  Location     Type
 14942 ;;  led             1    1[BANK0 ] unsigned char 
 14943 ;; Return value:  Size  Location     Type
 14944 ;;		None               void
 14945 ;; Registers used:
 14946 ;;		wreg
 14947 ;; Tracked objects:
 14948 ;;		On entry : 0/0
 14949 ;;		On exit  : 0/0
 14950 ;;		Unchanged: 0/0
 14951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14955 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14956 ;;Total ram usage:        2 bytes
 14957 ;; Hardware stack levels used:    1
 14958 ;; Hardware stack levels required when called:    5
 14959 ;; This function calls:
 14960 ;;		Nothing
 14961 ;; This function is called by:
 14962 ;;		_setLED_Initialization
 14963 ;;		_setLED
 14964 ;;		_setLED_Main
 14965 ;; This function uses a non-reentrant model
 14966 ;;
 14967                           
 14968                           
 14969                           ;psect for function _LedPointSelect
 14970  1EF0                     _LedPointSelect:	
 14971                           
 14972                           ;incstack = 0
 14973                           ; Regs used in _LedPointSelect: [wreg]
 14974                           ;LedPointSelect@led stored from wreg
 14975  1EF0  0020               	movlb	0	; select bank0
 14976  1EF1  00A1               	movwf	LedPointSelect@led
 14977                           
 14978                           ;LED_B1.c: 9: if (led == 1) {
 14979  1EF2  0821               	movf	LedPointSelect@led,w
 14980  1EF3  3A01               	xorlw	1
 14981  1EF4  1D03               	skipz
 14982  1EF5  2EFB               	goto	l1031
 14983                           
 14984                           ;LED_B1.c: 10: LED = &VarLED1;
 14985  1EF6  306A               	movlw	_VarLED1& (0+255)
 14986  1EF7  00A0               	movwf	??_LedPointSelect
 14987  1EF8  0820               	movf	??_LedPointSelect,w
 14988  1EF9  0021               	movlb	1	; select bank1
 14989  1EFA  00CD               	movwf	_LED^(0+128)
 14990  1EFB                     l1031:	
 14991                           
 14992                           ;LED_B1.c: 11: }
 14993                           ;LED_B1.c: 14: if (led == 2) {
 14994  1EFB  0020               	movlb	0	; select bank0
 14995  1EFC  0821               	movf	LedPointSelect@led,w
 14996  1EFD  3A02               	xorlw	2
 14997  1EFE  1D03               	skipz
 14998  1EFF  2F05               	goto	l1032
 14999                           
 15000                           ;LED_B1.c: 15: LED = &VarLED2;
 15001  1F00  30EB               	movlw	_VarLED2& (0+255)
 15002  1F01  00A0               	movwf	??_LedPointSelect
 15003  1F02  0820               	movf	??_LedPointSelect,w
 15004  1F03  0021               	movlb	1	; select bank1
 15005  1F04  00CD               	movwf	_LED^(0+128)
 15006  1F05                     l1032:	
 15007                           
 15008                           ;LED_B1.c: 16: }
 15009                           ;LED_B1.c: 24: if (led == 99) {
 15010  1F05  0020               	movlb	0	; select bank0
 15011  1F06  0821               	movf	LedPointSelect@led,w
 15012  1F07  3A63               	xorlw	99
 15013  1F08  1D03               	skipz
 15014  1F09  0008               	return
 15015                           
 15016                           ;LED_B1.c: 25: LED = &VarErrLED;
 15017  1F0A  3066               	movlw	_VarErrLED& (0+255)
 15018  1F0B  00A0               	movwf	??_LedPointSelect
 15019  1F0C  0820               	movf	??_LedPointSelect,w
 15020  1F0D  0021               	movlb	1	; select bank1
 15021  1F0E  00CD               	movwf	_LED^(0+128)
 15022  1F0F  0008               	return
 15023  1F10                     __end_of_LedPointSelect:	
 15024                           
 15025                           	psect	text89
 15026  1DDD                     __ptext89:	
 15027 ;; *************** function _setDimmerLights_Line *****************
 15028 ;; Defined at:
 15029 ;;		line 706 in file "../src/Dimmer_B1.c"
 15030 ;; Parameters:    Size  Location     Type
 15031 ;;  lights          1    wreg     unsigned char 
 15032 ;; Auto vars:     Size  Location     Type
 15033 ;;  lights          1    0[BANK0 ] unsigned char 
 15034 ;; Return value:  Size  Location     Type
 15035 ;;		None               void
 15036 ;; Registers used:
 15037 ;;		wreg
 15038 ;; Tracked objects:
 15039 ;;		On entry : 0/0
 15040 ;;		On exit  : 0/0
 15041 ;;		Unchanged: 0/0
 15042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15047 ;;Total ram usage:        1 bytes
 15048 ;; Hardware stack levels used:    1
 15049 ;; Hardware stack levels required when called:    5
 15050 ;; This function calls:
 15051 ;;		Nothing
 15052 ;; This function is called by:
 15053 ;;		_setDimmerLights
 15054 ;;		_setDimmerLights_Adj
 15055 ;; This function uses a non-reentrant model
 15056 ;;
 15057                           
 15058                           
 15059                           ;psect for function _setDimmerLights_Line
 15060  1DDD                     _setDimmerLights_Line:	
 15061                           
 15062                           ;incstack = 0
 15063                           ; Regs used in _setDimmerLights_Line: [wreg]
 15064                           ;setDimmerLights_Line@lights stored from wreg
 15065  1DDD  0020               	movlb	0	; select bank0
 15066  1DDE  00A0               	movwf	setDimmerLights_Line@lights
 15067                           
 15068                           ;Dimmer_B1.c: 707: Dimmer.LoadGO = 1;
 15069  1DDF  0021               	movlb	1	; select bank1
 15070  1DE0  1546               	bsf	_Dimmer^(0+128),2	;volatile
 15071                           
 15072                           ;Dimmer_B1.c: 709: DimmerLights1.Line = 0;
 15073  1DE1  0022               	movlb	2	; select bank2
 15074  1DE2  135F               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 15075                           
 15076                           ;Dimmer_B1.c: 712: DimmerLights2.Line = 0;
 15077  1DE3  0023               	movlb	3	; select bank3
 15078  1DE4  1348               	bcf	(_DimmerLights2^(0+384)+10),6	;volatile
 15079                           
 15080                           ;Dimmer_B1.c: 718: if (lights == 1) {
 15081  1DE5  0020               	movlb	0	; select bank0
 15082  1DE6  0820               	movf	setDimmerLights_Line@lights,w
 15083  1DE7  3A01               	xorlw	1
 15084  1DE8  1D03               	skipz
 15085  1DE9  2DED               	goto	l9337
 15086                           
 15087                           ;Dimmer_B1.c: 719: DimmerLights1.Line = 1;
 15088  1DEA  0022               	movlb	2	; select bank2
 15089  1DEB  175F               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 15090                           
 15091                           ;Dimmer_B1.c: 720: }
 15092  1DEC  0008               	return
 15093  1DED                     l9337:	
 15094                           
 15095                           ;Dimmer_B1.c: 723: else if (lights == 2) {
 15096  1DED  0020               	movlb	0	; select bank0
 15097  1DEE  0820               	movf	setDimmerLights_Line@lights,w
 15098  1DEF  3A02               	xorlw	2
 15099  1DF0  1D03               	skipz
 15100  1DF1  0008               	return
 15101                           
 15102                           ;Dimmer_B1.c: 724: DimmerLights2.Line = 1;
 15103  1DF2  0023               	movlb	3	; select bank3
 15104  1DF3  1748               	bsf	(_DimmerLights2^(0+384)+10),6	;volatile
 15105  1DF4  0008               	return
 15106  1DF5                     __end_of_setDimmerLights_Line:	
 15107                           
 15108                           	psect	text90
 15109  1272                     __ptext90:	
 15110 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15111 ;; Defined at:
 15112 ;;		line 586 in file "../src/Dimmer_B1.c"
 15113 ;; Parameters:    Size  Location     Type
 15114 ;;  lights          1    wreg     unsigned char 
 15115 ;; Auto vars:     Size  Location     Type
 15116 ;;  lights          1    5[BANK0 ] unsigned char 
 15117 ;;  allow           1    6[BANK0 ] unsigned char 
 15118 ;; Return value:  Size  Location     Type
 15119 ;;                  1    wreg      unsigned char 
 15120 ;; Registers used:
 15121 ;;		wreg, status,2, status,0, pclath, cstack
 15122 ;; Tracked objects:
 15123 ;;		On entry : 0/0
 15124 ;;		On exit  : 0/0
 15125 ;;		Unchanged: 0/0
 15126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15128 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15129 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15130 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15131 ;;Total ram usage:        6 bytes
 15132 ;; Hardware stack levels used:    1
 15133 ;; Hardware stack levels required when called:    6
 15134 ;; This function calls:
 15135 ;;		_getLoad_OK
 15136 ;; This function is called by:
 15137 ;;		_setDimmerLights_AdjOn
 15138 ;;		_setDimmerLights_Main
 15139 ;; This function uses a non-reentrant model
 15140 ;;
 15141                           
 15142                           
 15143                           ;psect for function _getDimmerLights_Allow_Condition
 15144  1272                     _getDimmerLights_Allow_Condition:	
 15145                           
 15146                           ;incstack = 0
 15147                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 15148                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 15149  1272  0020               	movlb	0	; select bank0
 15150  1273  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 15151                           
 15152                           ;Dimmer_B1.c: 587: char allow = 0;
 15153  1274  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 15154                           
 15155                           ;Dimmer_B1.c: 594: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 15156  1275  01A2               	clrf	_getDimmerLights_Allow_Condition$2329
 15157  1276  0AA2               	incf	_getDimmerLights_Allow_Condition$2329,f
 15158  1277  319B  2334  3192   	fcall	_getLoad_OK
 15159  127A  3800               	iorlw	0
 15160  127B  1D03               	skipz
 15161  127C  2A82               	goto	l9279
 15162  127D  0021               	movlb	1	; select bank1
 15163  127E  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 15164  127F  2A82               	goto	l9279
 15165  1280  0020               	movlb	0	; select bank0
 15166  1281  01A2               	clrf	_getDimmerLights_Allow_Condition$2329
 15167  1282                     l9279:	
 15168  1282  0020               	movlb	0	; select bank0
 15169  1283  0822               	movf	_getDimmerLights_Allow_Condition$2329,w
 15170  1284  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15171  1285  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15172  1286  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 15173                           
 15174                           ;Dimmer_B1.c: 599: if (allow == 0) {
 15175  1287  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 15176  1288  1D03               	skipz
 15177  1289  2AAA               	goto	l9303
 15178                           
 15179                           ;Dimmer_B1.c: 600: if (lights == 1) {
 15180  128A  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 15181  128B  3A01               	xorlw	1
 15182  128C  1D03               	skipz
 15183  128D  2A99               	goto	l9293
 15184                           
 15185                           ;Dimmer_B1.c: 601: allow = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1
      +                           : 0;
 15186  128E  01A3               	clrf	_getDimmerLights_Allow_Condition$2330
 15187  128F  0AA3               	incf	_getDimmerLights_Allow_Condition$2330,f
 15188  1290  0023               	movlb	3	; select bank3
 15189  1291  1DC8               	btfss	(_DimmerLights2^(0+384)+10),3	;volatile
 15190  1292  1B3F               	btfsc	(_DimmerLights2^(0+384)+1),6	;volatile
 15191  1293  2A96               	goto	l9291
 15192  1294  0020               	movlb	0	; select bank0
 15193  1295  01A3               	clrf	_getDimmerLights_Allow_Condition$2330
 15194  1296                     l9291:	
 15195  1296  0020               	movlb	0	; select bank0
 15196  1297  0823               	movf	_getDimmerLights_Allow_Condition$2330,w
 15197  1298  2AA7               	goto	L7
 15198  1299                     l9293:	
 15199                           ;Dimmer_B1.c: 602: } else if (lights == 2) {
 15200                           
 15201  1299  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 15202  129A  3A02               	xorlw	2
 15203  129B  1D03               	skipz
 15204  129C  2AAA               	goto	l9303
 15205                           
 15206                           ;Dimmer_B1.c: 603: allow = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1
      +                           : 0;
 15207  129D  01A4               	clrf	_getDimmerLights_Allow_Condition$2331
 15208  129E  0AA4               	incf	_getDimmerLights_Allow_Condition$2331,f
 15209  129F  0022               	movlb	2	; select bank2
 15210  12A0  1DDF               	btfss	(_DimmerLights1^(0+256)+10),3	;volatile
 15211  12A1  1B56               	btfsc	(_DimmerLights1^(0+256)+1),6	;volatile
 15212  12A2  2AA5               	goto	l9301
 15213  12A3  0020               	movlb	0	; select bank0
 15214  12A4  01A4               	clrf	_getDimmerLights_Allow_Condition$2331
 15215  12A5                     l9301:	
 15216  12A5  0020               	movlb	0	; select bank0
 15217  12A6  0824               	movf	_getDimmerLights_Allow_Condition$2331,w
 15218  12A7                     L7:	
 15219  12A7  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15220  12A8  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15221  12A9  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 15222  12AA                     l9303:	
 15223                           
 15224                           ;Dimmer_B1.c: 604: }
 15225                           ;Dimmer_B1.c: 605: }
 15226                           ;Dimmer_B1.c: 619: return allow;
 15227  12AA  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 15228  12AB  0008               	return
 15229  12AC                     __end_of_getDimmerLights_Allow_Condition:	
 15230                           
 15231                           	psect	text91
 15232  1B34                     __ptext91:	
 15233 ;; *************** function _getLoad_OK *****************
 15234 ;; Defined at:
 15235 ;;		line 265 in file "../src/OverLoad_B1.c"
 15236 ;; Parameters:    Size  Location     Type
 15237 ;;		None
 15238 ;; Auto vars:     Size  Location     Type
 15239 ;;  ok              1    0[BANK0 ] unsigned char 
 15240 ;; Return value:  Size  Location     Type
 15241 ;;                  1    wreg      unsigned char 
 15242 ;; Registers used:
 15243 ;;		wreg, status,2
 15244 ;; Tracked objects:
 15245 ;;		On entry : 0/0
 15246 ;;		On exit  : 0/0
 15247 ;;		Unchanged: 0/0
 15248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15250 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15252 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15253 ;;Total ram usage:        1 bytes
 15254 ;; Hardware stack levels used:    1
 15255 ;; Hardware stack levels required when called:    5
 15256 ;; This function calls:
 15257 ;;		Nothing
 15258 ;; This function is called by:
 15259 ;;		_DimmerLights_Main
 15260 ;;		_getDimmerLights_Allow_Condition
 15261 ;; This function uses a non-reentrant model
 15262 ;;
 15263                           
 15264                           
 15265                           ;psect for function _getLoad_OK
 15266  1B34                     _getLoad_OK:	
 15267                           
 15268                           ;OverLoad_B1.c: 266: char ok = Load.OK == 1 ? 1 : 0;
 15269                           
 15270                           ;incstack = 0
 15271                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15272  1B34  3000               	movlw	0
 15273  1B35  0022               	movlb	2	; select bank2
 15274  1B36  1BA7               	btfsc	_Load^(0+256),7
 15275  1B37  3001               	movlw	1
 15276  1B38  0020               	movlb	0	; select bank0
 15277  1B39  00A0               	movwf	getLoad_OK@ok
 15278                           
 15279                           ;OverLoad_B1.c: 267: return ok;
 15280  1B3A  0820               	movf	getLoad_OK@ok,w
 15281  1B3B  0008               	return
 15282  1B3C                     __end_of_getLoad_OK:	
 15283                           
 15284                           	psect	text92
 15285  1CC5                     __ptext92:	
 15286 ;; *************** function _getMain_LightsStatus *****************
 15287 ;; Defined at:
 15288 ;;		line 375 in file "../src/Main_B1.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;		None
 15291 ;; Auto vars:     Size  Location     Type
 15292 ;;  status          1    0[BANK0 ] unsigned char 
 15293 ;; Return value:  Size  Location     Type
 15294 ;;                  1    wreg      unsigned char 
 15295 ;; Registers used:
 15296 ;;		wreg, status,2, status,0
 15297 ;; Tracked objects:
 15298 ;;		On entry : 0/0
 15299 ;;		On exit  : 0/0
 15300 ;;		Unchanged: 0/0
 15301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;Total ram usage:        1 bytes
 15307 ;; Hardware stack levels used:    1
 15308 ;; Hardware stack levels required when called:    5
 15309 ;; This function calls:
 15310 ;;		Nothing
 15311 ;; This function is called by:
 15312 ;;		_DimmerLights_Main
 15313 ;;		_Flash_Memory_Main
 15314 ;;		_Exception_Main
 15315 ;;		_Load_Main
 15316 ;; This function uses a non-reentrant model
 15317 ;;
 15318                           
 15319                           
 15320                           ;psect for function _getMain_LightsStatus
 15321  1CC5                     _getMain_LightsStatus:	
 15322                           
 15323                           ;Main_B1.c: 376: char status = 0;
 15324                           
 15325                           ;incstack = 0
 15326                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 15327  1CC5  0020               	movlb	0	; select bank0
 15328  1CC6  01A0               	clrf	getMain_LightsStatus@status
 15329                           
 15330                           ;Main_B1.c: 395: status = DimmerLights1.Status == 1 ? 1 : 0;
 15331  1CC7  3000               	movlw	0
 15332  1CC8  0022               	movlb	2	; select bank2
 15333  1CC9  18D7               	btfsc	(_DimmerLights1^(0+256)+2),1	;volatile
 15334  1CCA  3001               	movlw	1
 15335  1CCB  0020               	movlb	0	; select bank0
 15336  1CCC  00A0               	movwf	getMain_LightsStatus@status
 15337                           
 15338                           ;Main_B1.c: 396: if (status == 0) {
 15339  1CCD  08A0               	movf	getMain_LightsStatus@status,f
 15340  1CCE  1D03               	skipz
 15341  1CCF  2CD6               	goto	l9937
 15342                           
 15343                           ;Main_B1.c: 397: status = DimmerLights2.Status == 1 ? 1 : 0;
 15344  1CD0  3000               	movlw	0
 15345  1CD1  0023               	movlb	3	; select bank3
 15346  1CD2  18C0               	btfsc	(_DimmerLights2^(0+384)+2),1	;volatile
 15347  1CD3  3001               	movlw	1
 15348  1CD4  0020               	movlb	0	; select bank0
 15349  1CD5  00A0               	movwf	getMain_LightsStatus@status
 15350  1CD6                     l9937:	
 15351                           
 15352                           ;Main_B1.c: 398: }
 15353                           ;Main_B1.c: 422: return status;
 15354  1CD6  0820               	movf	getMain_LightsStatus@status,w
 15355  1CD7  0008               	return
 15356  1CD8                     __end_of_getMain_LightsStatus:	
 15357                           
 15358                           	psect	text93
 15359  1168                     __ptext93:	
 15360 ;; *************** function _getMain_All_Error_Status *****************
 15361 ;; Defined at:
 15362 ;;		line 426 in file "../src/Main_B1.c"
 15363 ;; Parameters:    Size  Location     Type
 15364 ;;  command         1    wreg     unsigned char 
 15365 ;; Auto vars:     Size  Location     Type
 15366 ;;  command         1    5[BANK0 ] unsigned char 
 15367 ;;  status          1    6[BANK0 ] unsigned char 
 15368 ;; Return value:  Size  Location     Type
 15369 ;;                  1    wreg      unsigned char 
 15370 ;; Registers used:
 15371 ;;		wreg, status,2, status,0
 15372 ;; Tracked objects:
 15373 ;;		On entry : 0/0
 15374 ;;		On exit  : 0/0
 15375 ;;		Unchanged: 0/0
 15376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15378 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15380 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15381 ;;Total ram usage:        7 bytes
 15382 ;; Hardware stack levels used:    1
 15383 ;; Hardware stack levels required when called:    5
 15384 ;; This function calls:
 15385 ;;		Nothing
 15386 ;; This function is called by:
 15387 ;;		_DimmerLights_Main
 15388 ;;		_Exception_Main
 15389 ;;		_Load_Main
 15390 ;;		_setTemp_Main
 15391 ;;		_setRF_Main
 15392 ;;		_getRxData
 15393 ;;		_setSw_Main
 15394 ;; This function uses a non-reentrant model
 15395 ;;
 15396                           
 15397                           
 15398                           ;psect for function _getMain_All_Error_Status
 15399  1168                     _getMain_All_Error_Status:	
 15400                           
 15401                           ;incstack = 0
 15402                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15403                           ;getMain_All_Error_Status@command stored from wreg
 15404  1168  0020               	movlb	0	; select bank0
 15405  1169  00A5               	movwf	getMain_All_Error_Status@command
 15406                           
 15407                           ;Main_B1.c: 427: char status = 0;
 15408  116A  01A6               	clrf	getMain_All_Error_Status@status
 15409                           
 15410                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 15411  116B  08A6               	movf	getMain_All_Error_Status@status,f
 15412  116C  1D03               	skipz
 15413  116D  2982               	goto	l9319
 15414  116E  0825               	movf	getMain_All_Error_Status@command,w
 15415  116F  3A02               	xorlw	2
 15416  1170  1903               	skipnz
 15417  1171  2982               	goto	l9319
 15418                           
 15419                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 15420  1172  0021               	movlb	1	; select bank1
 15421  1173  18D6               	btfsc	_Temp^(0+128),1
 15422  1174  2979               	goto	l9317
 15423  1175  0020               	movlb	0	; select bank0
 15424  1176  01A1               	clrf	_getMain_All_Error_Status$3605
 15425  1177  01A2               	clrf	_getMain_All_Error_Status$3605+1
 15426  1178  297E               	goto	l1573
 15427  1179                     l9317:	
 15428  1179  3002               	movlw	2
 15429  117A  0020               	movlb	0	; select bank0
 15430  117B  00A1               	movwf	_getMain_All_Error_Status$3605
 15431  117C  3000               	movlw	0
 15432  117D  00A2               	movwf	_getMain_All_Error_Status$3605+1
 15433  117E                     l1573:	
 15434  117E  0821               	movf	_getMain_All_Error_Status$3605,w
 15435  117F  00A0               	movwf	??_getMain_All_Error_Status
 15436  1180  0820               	movf	??_getMain_All_Error_Status,w
 15437  1181  00A6               	movwf	getMain_All_Error_Status@status
 15438  1182                     l9319:	
 15439                           
 15440                           ;Main_B1.c: 440: }
 15441                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 15442  1182  08A6               	movf	getMain_All_Error_Status@status,f
 15443  1183  1D03               	skipz
 15444  1184  2999               	goto	l1574
 15445  1185  0825               	movf	getMain_All_Error_Status@command,w
 15446  1186  3A03               	xorlw	3
 15447  1187  1903               	skipnz
 15448  1188  2999               	goto	l1574
 15449                           
 15450                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 15451  1189  0022               	movlb	2	; select bank2
 15452  118A  1AA7               	btfsc	_Load^(0+256),5
 15453  118B  2990               	goto	l9327
 15454  118C  0020               	movlb	0	; select bank0
 15455  118D  01A3               	clrf	_getMain_All_Error_Status$3606
 15456  118E  01A4               	clrf	_getMain_All_Error_Status$3606+1
 15457  118F  2995               	goto	l1578
 15458  1190                     l9327:	
 15459  1190  3003               	movlw	3
 15460  1191  0020               	movlb	0	; select bank0
 15461  1192  00A3               	movwf	_getMain_All_Error_Status$3606
 15462  1193  3000               	movlw	0
 15463  1194  00A4               	movwf	_getMain_All_Error_Status$3606+1
 15464  1195                     l1578:	
 15465  1195  0823               	movf	_getMain_All_Error_Status$3606,w
 15466  1196  00A0               	movwf	??_getMain_All_Error_Status
 15467  1197  0820               	movf	??_getMain_All_Error_Status,w
 15468  1198  00A6               	movwf	getMain_All_Error_Status@status
 15469  1199                     l1574:	
 15470                           
 15471                           ;Main_B1.c: 447: }
 15472                           ;Main_B1.c: 463: return status;
 15473  1199  0826               	movf	getMain_All_Error_Status@status,w
 15474  119A  0008               	return
 15475  119B                     __end_of_getMain_All_Error_Status:	
 15476                           
 15477                           	psect	text94
 15478  1D25                     __ptext94:	
 15479 ;; *************** function _DimmerLights_Initialization *****************
 15480 ;; Defined at:
 15481 ;;		line 341 in file "../src/Dimmer_B1.c"
 15482 ;; Parameters:    Size  Location     Type
 15483 ;;		None
 15484 ;; Auto vars:     Size  Location     Type
 15485 ;;		None
 15486 ;; Return value:  Size  Location     Type
 15487 ;;		None               void
 15488 ;; Registers used:
 15489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15490 ;; Tracked objects:
 15491 ;;		On entry : 0/0
 15492 ;;		On exit  : 0/0
 15493 ;;		Unchanged: 0/0
 15494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15498 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15499 ;;Total ram usage:        1 bytes
 15500 ;; Hardware stack levels used:    1
 15501 ;; Hardware stack levels required when called:    7
 15502 ;; This function calls:
 15503 ;;		_setDimmerLights_Initialization
 15504 ;; This function is called by:
 15505 ;;		_main
 15506 ;; This function uses a non-reentrant model
 15507 ;;
 15508                           
 15509                           
 15510                           ;psect for function _DimmerLights_Initialization
 15511  1D25                     _DimmerLights_Initialization:	
 15512                           
 15513                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 15514                           
 15515                           ;incstack = 0
 15516                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15517  1D25  3055               	movlw	_DimmerLights1& (0+255)
 15518  1D26  0020               	movlb	0	; select bank0
 15519  1D27  00A4               	movwf	??_DimmerLights_Initialization
 15520  1D28  0824               	movf	??_DimmerLights_Initialization,w
 15521  1D29  0021               	movlb	1	; select bank1
 15522  1D2A  00CA               	movwf	_DimmerLights11^(0+128)
 15523                           
 15524                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 15525  1D2B  3001               	movlw	1
 15526  1D2C  3187  27CF  319D   	fcall	_setDimmerLights_Initialization
 15527                           
 15528                           ;Dimmer_B1.c: 349: DimmerLights22 = &DimmerLights2;
 15529  1D2F  30BE               	movlw	_DimmerLights2& (0+255)
 15530  1D30  0020               	movlb	0	; select bank0
 15531  1D31  00A4               	movwf	??_DimmerLights_Initialization
 15532  1D32  0824               	movf	??_DimmerLights_Initialization,w
 15533  1D33  0021               	movlb	1	; select bank1
 15534  1D34  00CB               	movwf	_DimmerLights22^(0+128)
 15535                           
 15536                           ;Dimmer_B1.c: 350: setDimmerLights_Initialization(2);
 15537  1D35  3002               	movlw	2
 15538  1D36  3187  27CF         	fcall	_setDimmerLights_Initialization
 15539  1D38  0008               	return
 15540  1D39                     __end_of_DimmerLights_Initialization:	
 15541                           
 15542                           	psect	text95
 15543  07CF                     __ptext95:	
 15544 ;; *************** function _setDimmerLights_Initialization *****************
 15545 ;; Defined at:
 15546 ;;		line 365 in file "../src/Dimmer_B1.c"
 15547 ;; Parameters:    Size  Location     Type
 15548 ;;  lights          1    wreg     unsigned char 
 15549 ;; Auto vars:     Size  Location     Type
 15550 ;;  lights          1    3[BANK0 ] unsigned char 
 15551 ;; Return value:  Size  Location     Type
 15552 ;;		None               void
 15553 ;; Registers used:
 15554 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15555 ;; Tracked objects:
 15556 ;;		On entry : 0/0
 15557 ;;		On exit  : 0/0
 15558 ;;		Unchanged: 0/0
 15559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15561 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15562 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15563 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15564 ;;Total ram usage:        2 bytes
 15565 ;; Hardware stack levels used:    1
 15566 ;; Hardware stack levels required when called:    6
 15567 ;; This function calls:
 15568 ;;		_DimmerLightsPointSelect
 15569 ;; This function is called by:
 15570 ;;		_DimmerLights_Initialization
 15571 ;; This function uses a non-reentrant model
 15572 ;;
 15573                           
 15574                           
 15575                           ;psect for function _setDimmerLights_Initialization
 15576  07CF                     _setDimmerLights_Initialization:	
 15577                           
 15578                           ;incstack = 0
 15579                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15580                           ;setDimmerLights_Initialization@lights stored from wreg
 15581  07CF  0020               	movlb	0	; select bank0
 15582  07D0  00A3               	movwf	setDimmerLights_Initialization@lights
 15583                           
 15584                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 15585  07D1  0823               	movf	setDimmerLights_Initialization@lights,w
 15586  07D2  319C  24B2  3187   	fcall	_DimmerLightsPointSelect
 15587                           
 15588                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 15589  07D5  3007               	movlw	7
 15590  07D6  0020               	movlb	0	; select bank0
 15591  07D7  00A2               	movwf	??_setDimmerLights_Initialization
 15592  07D8  086F               	movf	_DimmerLights,w
 15593  07D9  3E08               	addlw	8
 15594  07DA  0086               	movwf	6
 15595  07DB  3001               	movlw	1	; select bank2/3
 15596  07DC  0087               	movwf	7
 15597  07DD  0822               	movf	??_setDimmerLights_Initialization,w
 15598  07DE  0081               	movwf	1
 15599                           
 15600                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(70*0.8));
 15601  07DF  3038               	movlw	56
 15602  07E0  00A2               	movwf	??_setDimmerLights_Initialization
 15603  07E1  086F               	movf	_DimmerLights,w
 15604  07E2  3E06               	addlw	6
 15605  07E3  0086               	movwf	6
 15606  07E4  3001               	movlw	1	; select bank2/3
 15607  07E5  0087               	movwf	7
 15608  07E6  0822               	movf	??_setDimmerLights_Initialization,w
 15609  07E7  0081               	movwf	1
 15610                           
 15611                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 15612  07E8  300C               	movlw	12
 15613  07E9  00A2               	movwf	??_setDimmerLights_Initialization
 15614  07EA  086F               	movf	_DimmerLights,w
 15615  07EB  3E09               	addlw	9
 15616  07EC  0086               	movwf	6
 15617  07ED  3001               	movlw	1	; select bank2/3
 15618  07EE  0087               	movwf	7
 15619  07EF  0822               	movf	??_setDimmerLights_Initialization,w
 15620  07F0  0081               	movwf	1
 15621                           
 15622                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15623  07F1  086F               	movf	_DimmerLights,w
 15624  07F2  3E06               	addlw	6
 15625  07F3  0086               	movwf	6
 15626  07F4  3001               	movlw	1	; select bank2/3
 15627  07F5  0087               	movwf	7
 15628  07F6  0801               	movf	1,w
 15629  07F7  00A2               	movwf	??_setDimmerLights_Initialization
 15630  07F8  086F               	movf	_DimmerLights,w
 15631  07F9  3E04               	addlw	4
 15632  07FA  0086               	movwf	6
 15633  07FB  3001               	movlw	1	; select bank2/3
 15634  07FC  0087               	movwf	7
 15635  07FD  0822               	movf	??_setDimmerLights_Initialization,w
 15636  07FE  0081               	movwf	1
 15637  07FF  0008               	return
 15638  0800                     __end_of_setDimmerLights_Initialization:	
 15639                           
 15640                           	psect	text96
 15641  1B2C                     __ptext96:	
 15642 ;; *************** function _DelayOff_Main *****************
 15643 ;; Defined at:
 15644 ;;		line 41 in file "../src/DelayOff_B1.c"
 15645 ;; Parameters:    Size  Location     Type
 15646 ;;		None
 15647 ;; Auto vars:     Size  Location     Type
 15648 ;;		None
 15649 ;; Return value:  Size  Location     Type
 15650 ;;		None               void
 15651 ;; Registers used:
 15652 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15653 ;; Tracked objects:
 15654 ;;		On entry : 0/0
 15655 ;;		On exit  : 0/0
 15656 ;;		Unchanged: 0/0
 15657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15662 ;;Total ram usage:        0 bytes
 15663 ;; Hardware stack levels used:    1
 15664 ;; Hardware stack levels required when called:   11
 15665 ;; This function calls:
 15666 ;;		_DlyOff_Main
 15667 ;; This function is called by:
 15668 ;;		_main
 15669 ;; This function uses a non-reentrant model
 15670 ;;
 15671                           
 15672                           
 15673                           ;psect for function _DelayOff_Main
 15674  1B2C                     _DelayOff_Main:	
 15675                           
 15676                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15677                           
 15678                           ;incstack = 0
 15679                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15680  1B2C  3001               	movlw	1
 15681  1B2D  3188  20E2  319B   	fcall	_DlyOff_Main
 15682                           
 15683                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15684  1B30  3002               	movlw	2
 15685  1B31  3188  20E2         	fcall	_DlyOff_Main
 15686  1B33  0008               	return
 15687  1B34                     __end_of_DelayOff_Main:	
 15688                           
 15689                           	psect	text97
 15690  08E2                     __ptext97:	
 15691 ;; *************** function _DlyOff_Main *****************
 15692 ;; Defined at:
 15693 ;;		line 61 in file "../src/DelayOff_B1.c"
 15694 ;; Parameters:    Size  Location     Type
 15695 ;;  sw              1    wreg     unsigned char 
 15696 ;; Auto vars:     Size  Location     Type
 15697 ;;  sw              1   78[BANK0 ] unsigned char 
 15698 ;; Return value:  Size  Location     Type
 15699 ;;		None               void
 15700 ;; Registers used:
 15701 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15702 ;; Tracked objects:
 15703 ;;		On entry : 0/0
 15704 ;;		On exit  : 0/0
 15705 ;;		Unchanged: 0/0
 15706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15709 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15710 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15711 ;;Total ram usage:        3 bytes
 15712 ;; Hardware stack levels used:    1
 15713 ;; Hardware stack levels required when called:   10
 15714 ;; This function calls:
 15715 ;;		_DelayOffPointSelect
 15716 ;;		_setBuz
 15717 ;;		_setDimmerLights_ErrorClose
 15718 ;; This function is called by:
 15719 ;;		_DelayOff_Main
 15720 ;; This function uses a non-reentrant model
 15721 ;;
 15722                           
 15723                           
 15724                           ;psect for function _DlyOff_Main
 15725  08E2                     _DlyOff_Main:	
 15726                           
 15727                           ;incstack = 0
 15728                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15729                           ;DlyOff_Main@sw stored from wreg
 15730  08E2  0020               	movlb	0	; select bank0
 15731  08E3  00EE               	movwf	DlyOff_Main@sw
 15732                           
 15733                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15734  08E4  086E               	movf	DlyOff_Main@sw,w
 15735  08E5  319D  2511  3188   	fcall	_DelayOffPointSelect
 15736                           
 15737                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15738  08E8  0875               	movf	_DelayOff,w
 15739  08E9  0086               	movwf	6
 15740  08EA  3001               	movlw	1	; select bank2/3
 15741  08EB  0087               	movwf	7
 15742  08EC  1C81               	btfss	1,1
 15743  08ED  0008               	return
 15744                           
 15745                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15746  08EE  0875               	movf	_DelayOff,w
 15747  08EF  3E02               	addlw	2
 15748  08F0  0086               	movwf	6
 15749  08F1  3001               	movlw	1	; select bank2/3
 15750  08F2  0087               	movwf	7
 15751  08F3  3001               	movlw	1
 15752  08F4  0781               	addwf	1,f
 15753  08F5  3141               	addfsr 1,1
 15754  08F6  1803               	skipnc
 15755  08F7  0A81               	incf	1,f
 15756                           
 15757                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15758  08F8  0875               	movf	_DelayOff,w
 15759  08F9  3E02               	addlw	2
 15760  08FA  0086               	movwf	6
 15761  08FB  3001               	movlw	1	; select bank2/3
 15762  08FC  0087               	movwf	7
 15763  08FD  3F40               	moviw [0]fsr1
 15764  08FE  0020               	movlb	0	; select bank0
 15765  08FF  00EC               	movwf	??_DlyOff_Main
 15766  0900  3F41               	moviw [1]fsr1
 15767  0901  00ED               	movwf	??_DlyOff_Main+1
 15768  0902  3017               	movlw	23
 15769  0903  026D               	subwf	??_DlyOff_Main+1,w
 15770  0904  3070               	movlw	112
 15771  0905  1903               	skipnz
 15772  0906  026C               	subwf	??_DlyOff_Main,w
 15773  0907  1C03               	skipc
 15774  0908  0008               	return
 15775                           
 15776                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15777  0909  0875               	movf	_DelayOff,w
 15778  090A  3E02               	addlw	2
 15779  090B  0086               	movwf	6
 15780  090C  3001               	movlw	1	; select bank2/3
 15781  090D  0087               	movwf	7
 15782  090E  3000               	movlw	0
 15783  090F  3FC0               	movwi [0]fsr1
 15784  0910  3FC1               	movwi [1]fsr1
 15785                           
 15786                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15787  0911  3001               	movlw	1
 15788  0912  00EC               	movwf	??_DlyOff_Main
 15789  0913  0875               	movf	_DelayOff,w
 15790  0914  3E04               	addlw	4
 15791  0915  0086               	movwf	6
 15792  0916  3001               	movlw	1	; select bank2/3
 15793  0917  0087               	movwf	7
 15794  0918  086C               	movf	??_DlyOff_Main,w
 15795  0919  0781               	addwf	1,f
 15796                           
 15797                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15798  091A  0875               	movf	_DelayOff,w
 15799  091B  3E04               	addlw	4
 15800  091C  0086               	movwf	6
 15801  091D  3001               	movlw	1	; select bank2/3
 15802  091E  0087               	movwf	7
 15803  091F  0A75               	incf	_DelayOff,w
 15804  0920  0084               	movwf	4
 15805  0921  3001               	movlw	1	; select bank2/3
 15806  0922  0085               	movwf	5
 15807  0923  0800               	movf	0,w
 15808  0924  0201               	subwf	1,w
 15809  0925  1C03               	skipc
 15810  0926  0008               	return
 15811                           
 15812                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15813  0927  0875               	movf	_DelayOff,w
 15814  0928  3E04               	addlw	4
 15815  0929  0086               	movwf	6
 15816  092A  3001               	movlw	1	; select bank2/3
 15817  092B  0087               	movwf	7
 15818  092C  0181               	clrf	1
 15819                           
 15820                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15821  092D  0875               	movf	_DelayOff,w
 15822  092E  0086               	movwf	6
 15823  092F  3001               	movlw	1	; select bank2/3
 15824  0930  0087               	movwf	7
 15825  0931  1081               	bcf	1,1
 15826                           
 15827                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15828  0932  3064               	movlw	100
 15829  0933  00A9               	movwf	setBuz@time
 15830  0934  3000               	movlw	0
 15831  0935  00AA               	movwf	setBuz@time+1
 15832  0936  3001               	movlw	1
 15833  0937  3197  274E  3188   	fcall	_setBuz
 15834                           
 15835                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15836  093A  0020               	movlb	0	; select bank0
 15837  093B  086E               	movf	DlyOff_Main@sw,w
 15838  093C  3189  21A0         	fcall	_setDimmerLights_ErrorClose
 15839  093E  0008               	return
 15840  093F                     __end_of_DlyOff_Main:	
 15841                           
 15842                           	psect	text98
 15843  09A0                     __ptext98:	
 15844 ;; *************** function _setDimmerLights_ErrorClose *****************
 15845 ;; Defined at:
 15846 ;;		line 846 in file "../src/Dimmer_B1.c"
 15847 ;; Parameters:    Size  Location     Type
 15848 ;;  lights          1    wreg     unsigned char 
 15849 ;; Auto vars:     Size  Location     Type
 15850 ;;  lights          1    1[BANK1 ] unsigned char 
 15851 ;;  i               2    2[BANK1 ] int 
 15852 ;;  count           1    0[BANK1 ] unsigned char 
 15853 ;; Return value:  Size  Location     Type
 15854 ;;		None               void
 15855 ;; Registers used:
 15856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15857 ;; Tracked objects:
 15858 ;;		On entry : 0/0
 15859 ;;		On exit  : 0/0
 15860 ;;		Unchanged: 0/0
 15861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15863 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15864 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15865 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15866 ;;Total ram usage:        5 bytes
 15867 ;; Hardware stack levels used:    1
 15868 ;; Hardware stack levels required when called:    9
 15869 ;; This function calls:
 15870 ;;		_DimmerLightsPointSelect
 15871 ;;		_getDimmerLights_Status
 15872 ;;		_setDimmerLights_SwOff
 15873 ;; This function is called by:
 15874 ;;		_DlyOff_Main
 15875 ;;		_setControl_Lights_Table
 15876 ;; This function uses a non-reentrant model
 15877 ;;
 15878                           
 15879                           
 15880                           ;psect for function _setDimmerLights_ErrorClose
 15881  09A0                     _setDimmerLights_ErrorClose:	
 15882                           
 15883                           ;incstack = 0
 15884                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15885                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15886  09A0  0021               	movlb	1	; select bank1
 15887  09A1  00E9               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 15888                           
 15889                           ;Dimmer_B1.c: 847: if (lights == 255) {
 15890  09A2  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15891  09A3  3AFF               	xorlw	255
 15892  09A4  1D03               	skipz
 15893  09A5  29E3               	goto	l9175
 15894                           
 15895                           ;Dimmer_B1.c: 852: char count = 2;
 15896  09A6  3002               	movlw	2
 15897  09A7  0020               	movlb	0	; select bank0
 15898  09A8  00EB               	movwf	??_setDimmerLights_ErrorClose
 15899  09A9  086B               	movf	??_setDimmerLights_ErrorClose,w
 15900  09AA  0021               	movlb	1	; select bank1
 15901  09AB  00E8               	movwf	setDimmerLights_ErrorClose@count^(0+128)
 15902                           
 15903                           ;Dimmer_B1.c: 857: for (int i = 0; i < count; i++) {
 15904  09AC  01EA               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 15905  09AD  01EB               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 15906  09AE                     l9173:	
 15907  09AE  086B               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 15908  09AF  3A80               	xorlw	128
 15909  09B0  0020               	movlb	0	; select bank0
 15910  09B1  00EB               	movwf	??_setDimmerLights_ErrorClose
 15911  09B2  3080               	movlw	128
 15912  09B3  026B               	subwf	??_setDimmerLights_ErrorClose,w
 15913  09B4  1D03               	skipz
 15914  09B5  29B9               	goto	u10025
 15915  09B6  0021               	movlb	1	; select bank1
 15916  09B7  0868               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 15917  09B8  026A               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 15918  09B9                     u10025:	
 15919  09B9  1803               	btfsc	3,0
 15920  09BA  0008               	return
 15921                           
 15922                           ;Dimmer_B1.c: 858: DimmerLightsPointSelect(i + 1);
 15923  09BB  0021               	movlb	1	; select bank1
 15924  09BC  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15925  09BD  3E01               	addlw	1
 15926  09BE  319C  24B2  3189   	fcall	_DimmerLightsPointSelect
 15927                           
 15928                           ;Dimmer_B1.c: 859: if (getDimmerLights_Status(i + 1) == 1) {
 15929  09C1  0021               	movlb	1	; select bank1
 15930  09C2  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15931  09C3  3E01               	addlw	1
 15932  09C4  319C  2425  3189   	fcall	_getDimmerLights_Status
 15933  09C7  3A01               	xorlw	1
 15934  09C8  1D03               	skipz
 15935  09C9  29DD               	goto	l9171
 15936                           
 15937                           ;Dimmer_B1.c: 860: DimmerLights->SwFlag = 1;
 15938  09CA  0020               	movlb	0	; select bank0
 15939  09CB  086F               	movf	_DimmerLights,w
 15940  09CC  3E0B               	addlw	11
 15941  09CD  0086               	movwf	6
 15942  09CE  3001               	movlw	1	; select bank2/3
 15943  09CF  0087               	movwf	7
 15944  09D0  1481               	bsf	1,1
 15945                           
 15946                           ;Dimmer_B1.c: 861: DimmerLights->Status = 0;
 15947  09D1  086F               	movf	_DimmerLights,w
 15948  09D2  3E02               	addlw	2
 15949  09D3  0086               	movwf	6
 15950  09D4  3001               	movlw	1	; select bank2/3
 15951  09D5  0087               	movwf	7
 15952  09D6  1081               	bcf	1,1
 15953                           
 15954                           ;Dimmer_B1.c: 862: setDimmerLights_SwOff(i + 1);
 15955  09D7  0021               	movlb	1	; select bank1
 15956  09D8  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15957  09D9  3E01               	addlw	1
 15958  09DA  3194  24BC  3189   	fcall	_setDimmerLights_SwOff
 15959  09DD                     l9171:	
 15960  09DD  3001               	movlw	1
 15961  09DE  0021               	movlb	1	; select bank1
 15962  09DF  07EA               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 15963  09E0  3000               	movlw	0
 15964  09E1  3DEB               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 15965  09E2  29AE               	goto	l9173
 15966  09E3                     l9175:	
 15967                           ;Dimmer_B1.c: 863: }
 15968                           ;Dimmer_B1.c: 864: }
 15969                           ;Dimmer_B1.c: 865: } else {
 15970                           
 15971                           
 15972                           ;Dimmer_B1.c: 866: DimmerLightsPointSelect(lights);
 15973  09E3  0021               	movlb	1	; select bank1
 15974  09E4  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15975  09E5  319C  24B2  3189   	fcall	_DimmerLightsPointSelect
 15976                           
 15977                           ;Dimmer_B1.c: 867: if (getDimmerLights_Status(lights) == 1) {
 15978  09E8  0021               	movlb	1	; select bank1
 15979  09E9  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15980  09EA  319C  2425  3189   	fcall	_getDimmerLights_Status
 15981  09ED  3A01               	xorlw	1
 15982  09EE  1D03               	skipz
 15983  09EF  0008               	return
 15984                           
 15985                           ;Dimmer_B1.c: 868: DimmerLights->SwFlag = 1;
 15986  09F0  0020               	movlb	0	; select bank0
 15987  09F1  086F               	movf	_DimmerLights,w
 15988  09F2  3E0B               	addlw	11
 15989  09F3  0086               	movwf	6
 15990  09F4  3001               	movlw	1	; select bank2/3
 15991  09F5  0087               	movwf	7
 15992  09F6  1481               	bsf	1,1
 15993                           
 15994                           ;Dimmer_B1.c: 869: DimmerLights->Status = 0;
 15995  09F7  086F               	movf	_DimmerLights,w
 15996  09F8  3E02               	addlw	2
 15997  09F9  0086               	movwf	6
 15998  09FA  3001               	movlw	1	; select bank2/3
 15999  09FB  0087               	movwf	7
 16000  09FC  1081               	bcf	1,1
 16001                           
 16002                           ;Dimmer_B1.c: 870: setDimmerLights_SwOff(lights);
 16003  09FD  0021               	movlb	1	; select bank1
 16004  09FE  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16005  09FF  3194  24BC         	fcall	_setDimmerLights_SwOff
 16006  0A01  0008               	return
 16007  0A02                     __end_of_setDimmerLights_ErrorClose:	
 16008                           
 16009                           	psect	text99
 16010  14BC                     __ptext99:	
 16011 ;; *************** function _setDimmerLights_SwOff *****************
 16012 ;; Defined at:
 16013 ;;		line 450 in file "../src/Dimmer_B1.c"
 16014 ;; Parameters:    Size  Location     Type
 16015 ;;  sw              1    wreg     unsigned char 
 16016 ;; Auto vars:     Size  Location     Type
 16017 ;;  sw              1   74[BANK0 ] unsigned char 
 16018 ;; Return value:  Size  Location     Type
 16019 ;;		None               void
 16020 ;; Registers used:
 16021 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16022 ;; Tracked objects:
 16023 ;;		On entry : 0/0
 16024 ;;		On exit  : 0/0
 16025 ;;		Unchanged: 0/0
 16026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16030 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16031 ;;Total ram usage:        1 bytes
 16032 ;; Hardware stack levels used:    1
 16033 ;; Hardware stack levels required when called:    8
 16034 ;; This function calls:
 16035 ;;		_DimmerLightsPointSelect
 16036 ;;		_getDelayOff_GO
 16037 ;;		_setDelayOff_GO
 16038 ;; This function is called by:
 16039 ;;		_setDimmerLights_ErrorClose
 16040 ;;		_Exception_Main
 16041 ;;		_setRFSW_Control
 16042 ;;		_setSw_Main
 16043 ;; This function uses a non-reentrant model
 16044 ;;
 16045                           
 16046                           
 16047                           ;psect for function _setDimmerLights_SwOff
 16048  14BC                     _setDimmerLights_SwOff:	
 16049                           
 16050                           ;incstack = 0
 16051                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16052                           ;setDimmerLights_SwOff@sw stored from wreg
 16053  14BC  0020               	movlb	0	; select bank0
 16054  14BD  00EA               	movwf	setDimmerLights_SwOff@sw
 16055                           
 16056                           ;Dimmer_B1.c: 451: DimmerLightsPointSelect(sw);
 16057  14BE  086A               	movf	setDimmerLights_SwOff@sw,w
 16058  14BF  319C  24B2  3194   	fcall	_DimmerLightsPointSelect
 16059                           
 16060                           ;Dimmer_B1.c: 453: if (DimmerLights->SwFlag == 1) {
 16061  14C2  0020               	movlb	0	; select bank0
 16062  14C3  086F               	movf	_DimmerLights,w
 16063  14C4  3E0B               	addlw	11
 16064  14C5  0086               	movwf	6
 16065  14C6  3001               	movlw	1	; select bank2/3
 16066  14C7  0087               	movwf	7
 16067  14C8  1C81               	btfss	1,1
 16068  14C9  0008               	return
 16069                           
 16070                           ;Dimmer_B1.c: 454: DimmerLights->SwFlag = 0;
 16071  14CA  086F               	movf	_DimmerLights,w
 16072  14CB  3E0B               	addlw	11
 16073  14CC  0086               	movwf	6
 16074  14CD  3001               	movlw	1	; select bank2/3
 16075  14CE  0087               	movwf	7
 16076  14CF  1081               	bcf	1,1
 16077                           
 16078                           ;Dimmer_B1.c: 455: if (DimmerLights->Status == 1) {
 16079  14D0  086F               	movf	_DimmerLights,w
 16080  14D1  3E02               	addlw	2
 16081  14D2  0086               	movwf	6
 16082  14D3  3001               	movlw	1	; select bank2/3
 16083  14D4  0087               	movwf	7
 16084  14D5  1C81               	btfss	1,1
 16085  14D6  2CF1               	goto	l9021
 16086                           
 16087                           ;Dimmer_B1.c: 457: if (DimmerLights->SwAdj == 1) {
 16088  14D7  086F               	movf	_DimmerLights,w
 16089  14D8  3E0B               	addlw	11
 16090  14D9  0086               	movwf	6
 16091  14DA  3001               	movlw	1	; select bank2/3
 16092  14DB  0087               	movwf	7
 16093  14DC  1D01               	btfss	1,2
 16094  14DD  0008               	return
 16095                           
 16096                           ;Dimmer_B1.c: 458: DimmerLights->SwAdj = 0;
 16097  14DE  086F               	movf	_DimmerLights,w
 16098  14DF  3E0B               	addlw	11
 16099  14E0  0086               	movwf	6
 16100  14E1  3001               	movlw	1	; select bank2/3
 16101  14E2  0087               	movwf	7
 16102  14E3  1101               	bcf	1,2
 16103                           
 16104                           ;Dimmer_B1.c: 460: DimmerLights->TriggerAdj = 1;
 16105  14E4  086F               	movf	_DimmerLights,w
 16106  14E5  3E0A               	addlw	10
 16107  14E6  0086               	movwf	6
 16108  14E7  3001               	movlw	1	; select bank2/3
 16109  14E8  0087               	movwf	7
 16110  14E9  1581               	bsf	1,3
 16111                           
 16112                           ;Dimmer_B1.c: 461: DimmerLights->SwitchAdj = 0;
 16113  14EA  086F               	movf	_DimmerLights,w
 16114  14EB  3E0A               	addlw	10
 16115  14EC  0086               	movwf	6
 16116  14ED  3001               	movlw	1	; select bank2/3
 16117  14EE  0087               	movwf	7
 16118  14EF  1101               	bcf	1,2
 16119                           
 16120                           ;Dimmer_B1.c: 462: }
 16121                           ;Dimmer_B1.c: 463: } else {
 16122  14F0  0008               	return
 16123  14F1                     l9021:	
 16124                           
 16125                           ;Dimmer_B1.c: 464: DimmerLights->Trigger = 1;
 16126  14F1  086F               	movf	_DimmerLights,w
 16127  14F2  3E0A               	addlw	10
 16128  14F3  0086               	movwf	6
 16129  14F4  3001               	movlw	1	; select bank2/3
 16130  14F5  0087               	movwf	7
 16131  14F6  1481               	bsf	1,1
 16132                           
 16133                           ;Dimmer_B1.c: 465: DimmerLights->Switch = 0;
 16134  14F7  086F               	movf	_DimmerLights,w
 16135  14F8  3E0A               	addlw	10
 16136  14F9  0086               	movwf	6
 16137  14FA  3001               	movlw	1	; select bank2/3
 16138  14FB  0087               	movwf	7
 16139  14FC  1001               	bcf	1,0
 16140                           
 16141                           ;Dimmer_B1.c: 468: if (getDelayOff_GO(sw) == 1) {
 16142  14FD  086A               	movf	setDimmerLights_SwOff@sw,w
 16143  14FE  319C  2415  3194   	fcall	_getDelayOff_GO
 16144  1501  3A01               	xorlw	1
 16145  1502  1D03               	skipz
 16146  1503  0008               	return
 16147                           
 16148                           ;Dimmer_B1.c: 469: setDelayOff_GO(sw, 0, 0);
 16149  1504  0020               	movlb	0	; select bank0
 16150  1505  01E6               	clrf	setDelayOff_GO@command
 16151  1506  01E7               	clrf	setDelayOff_GO@value
 16152  1507  086A               	movf	setDimmerLights_SwOff@sw,w
 16153  1508  3195  25FC         	fcall	_setDelayOff_GO
 16154  150A  0008               	return
 16155  150B                     __end_of_setDimmerLights_SwOff:	
 16156                           
 16157                           	psect	text100
 16158  15FC                     __ptext100:	
 16159 ;; *************** function _setDelayOff_GO *****************
 16160 ;; Defined at:
 16161 ;;		line 83 in file "../src/DelayOff_B1.c"
 16162 ;; Parameters:    Size  Location     Type
 16163 ;;  sw              1    wreg     unsigned char 
 16164 ;;  command         1   70[BANK0 ] unsigned char 
 16165 ;;  value           1   71[BANK0 ] unsigned char 
 16166 ;; Auto vars:     Size  Location     Type
 16167 ;;  sw              1   73[BANK0 ] unsigned char 
 16168 ;; Return value:  Size  Location     Type
 16169 ;;		None               void
 16170 ;; Registers used:
 16171 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16172 ;; Tracked objects:
 16173 ;;		On entry : 0/0
 16174 ;;		On exit  : 0/0
 16175 ;;		Unchanged: 0/0
 16176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16177 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16178 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16180 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;Total ram usage:        4 bytes
 16182 ;; Hardware stack levels used:    1
 16183 ;; Hardware stack levels required when called:    7
 16184 ;; This function calls:
 16185 ;;		_DelayOffPointSelect
 16186 ;;		_DelayTimejudge
 16187 ;;		_setProductData
 16188 ;; This function is called by:
 16189 ;;		_setDimmerLights_SwOff
 16190 ;;		_setRFSW_Control
 16191 ;; This function uses a non-reentrant model
 16192 ;;
 16193                           
 16194                           
 16195                           ;psect for function _setDelayOff_GO
 16196  15FC                     _setDelayOff_GO:	
 16197                           
 16198                           ;incstack = 0
 16199                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16200                           ;setDelayOff_GO@sw stored from wreg
 16201  15FC  0020               	movlb	0	; select bank0
 16202  15FD  00E9               	movwf	setDelayOff_GO@sw
 16203                           
 16204                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 16205  15FE  0869               	movf	setDelayOff_GO@sw,w
 16206  15FF  319D  2511  3195   	fcall	_DelayOffPointSelect
 16207                           
 16208                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 16209  1602  0020               	movlb	0	; select bank0
 16210  1603  0866               	movf	setDelayOff_GO@command,w
 16211  1604  3A01               	xorlw	1
 16212  1605  3000               	movlw	0
 16213  1606  1903               	skipnz
 16214  1607  3001               	movlw	1
 16215  1608  00E8               	movwf	??_setDelayOff_GO
 16216  1609  0875               	movf	_DelayOff,w
 16217  160A  0086               	movwf	6
 16218  160B  3001               	movlw	1	; select bank2/3
 16219  160C  0087               	movwf	7
 16220  160D  0DE8               	rlf	??_setDelayOff_GO,f
 16221  160E  0801               	movf	1,w
 16222  160F  0668               	xorwf	??_setDelayOff_GO,w
 16223  1610  39FD               	andlw	-3
 16224  1611  0668               	xorwf	??_setDelayOff_GO,w
 16225  1612  0081               	movwf	1
 16226                           
 16227                           ;DelayOff_B1.c: 89: if (command == 1) {
 16228  1613  0866               	movf	setDelayOff_GO@command,w
 16229  1614  3A01               	xorlw	1
 16230  1615  1D03               	skipz
 16231  1616  2E3A               	goto	l8953
 16232                           
 16233                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 16234  1617  0867               	movf	setDelayOff_GO@value,w
 16235  1618  3188  2001  3195   	fcall	_DelayTimejudge
 16236  161B  0020               	movlb	0	; select bank0
 16237  161C  00E8               	movwf	??_setDelayOff_GO
 16238  161D  0A75               	incf	_DelayOff,w
 16239  161E  0086               	movwf	6
 16240  161F  3001               	movlw	1	; select bank2/3
 16241  1620  0087               	movwf	7
 16242  1621  0868               	movf	??_setDelayOff_GO,w
 16243  1622  0081               	movwf	1
 16244                           
 16245                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16246  1623  300F               	movlw	15
 16247  1624  0567               	andwf	setDelayOff_GO@value,w
 16248  1625  00E8               	movwf	??_setDelayOff_GO
 16249  1626  0868               	movf	??_setDelayOff_GO,w
 16250  1627  3A05               	xorlw	5
 16251  1628  1903               	skipnz
 16252  1629  2E2E               	goto	l8947
 16253  162A  0867               	movf	setDelayOff_GO@value,w
 16254  162B  390F               	andlw	15
 16255  162C  1D03               	btfss	3,2
 16256  162D  2E34               	goto	l8951
 16257  162E                     l8947:	
 16258  162E  3026               	movlw	38
 16259  162F  0267               	subwf	setDelayOff_GO@value,w
 16260  1630  1803               	skipnc
 16261  1631  2E34               	goto	l8951
 16262                           
 16263                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 16264  1632  0867               	movf	setDelayOff_GO@value,w
 16265  1633  2E36               	goto	L9
 16266  1634                     l8951:	
 16267                           ;DelayOff_B1.c: 93: } else {
 16268                           
 16269                           
 16270                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 16271  1634  3005               	movlw	5
 16272  1635  0020               	movlb	0	; select bank0
 16273  1636                     L9:	
 16274  1636  00E8               	movwf	??_setDelayOff_GO
 16275  1637  0868               	movf	??_setDelayOff_GO,w
 16276  1638  00E2               	movwf	setProductData@value
 16277  1639  2E3C               	goto	L8
 16278  163A                     l8953:	
 16279                           ;DelayOff_B1.c: 95: }
 16280                           ;DelayOff_B1.c: 96: } else {
 16281                           
 16282                           
 16283                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 16284  163A  0020               	movlb	0	; select bank0
 16285  163B  01E2               	clrf	setProductData@value
 16286  163C                     L8:	
 16287  163C  0869               	movf	setDelayOff_GO@sw,w
 16288  163D  3E1A               	addlw	26
 16289  163E  319B  23E9         	fcall	_setProductData
 16290                           
 16291                           ;DelayOff_B1.c: 98: }
 16292                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16293  1640  0875               	movf	_DelayOff,w
 16294  1641  3E02               	addlw	2
 16295  1642  0086               	movwf	6
 16296  1643  3001               	movlw	1	; select bank2/3
 16297  1644  0087               	movwf	7
 16298  1645  3000               	movlw	0
 16299  1646  3FC0               	movwi [0]fsr1
 16300  1647  3FC1               	movwi [1]fsr1
 16301                           
 16302                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16303  1648  0875               	movf	_DelayOff,w
 16304  1649  3E04               	addlw	4
 16305  164A  0086               	movwf	6
 16306  164B  3001               	movlw	1	; select bank2/3
 16307  164C  0087               	movwf	7
 16308  164D  0181               	clrf	1
 16309  164E  0008               	return
 16310  164F                     __end_of_setDelayOff_GO:	
 16311                           
 16312                           	psect	text101
 16313  1BE9                     __ptext101:	
 16314 ;; *************** function _setProductData *****************
 16315 ;; Defined at:
 16316 ;;		line 605 in file "../src/Main_B1.c"
 16317 ;; Parameters:    Size  Location     Type
 16318 ;;  address         1    wreg     unsigned char 
 16319 ;;  value           1   66[BANK0 ] unsigned char 
 16320 ;; Auto vars:     Size  Location     Type
 16321 ;;  address         1   69[BANK0 ] unsigned char 
 16322 ;; Return value:  Size  Location     Type
 16323 ;;		None               void
 16324 ;; Registers used:
 16325 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16326 ;; Tracked objects:
 16327 ;;		On entry : 0/0
 16328 ;;		On exit  : 0/0
 16329 ;;		Unchanged: 0/0
 16330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16331 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16333 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16334 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16335 ;;Total ram usage:        4 bytes
 16336 ;; Hardware stack levels used:    1
 16337 ;; Hardware stack levels required when called:    5
 16338 ;; This function calls:
 16339 ;;		Nothing
 16340 ;; This function is called by:
 16341 ;;		_setDelayOff_GO
 16342 ;;		_setDimmerLights
 16343 ;;		_setDimmerLights_Adj
 16344 ;;		_setTemp_Main
 16345 ;;		_setLog_Code
 16346 ;;		_setControl_Lights_Table
 16347 ;;		_setRFSW_AdjControl
 16348 ;;		_setRF_DimmerValue
 16349 ;;		_setRF_DimmerLights
 16350 ;; This function uses a non-reentrant model
 16351 ;;
 16352                           
 16353                           
 16354                           ;psect for function _setProductData
 16355  1BE9                     _setProductData:	
 16356                           
 16357                           ;incstack = 0
 16358                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 16359                           ;setProductData@address stored from wreg
 16360  1BE9  0020               	movlb	0	; select bank0
 16361  1BEA  00E5               	movwf	setProductData@address
 16362                           
 16363                           ;Main_B1.c: 606: product->Data[address] = value;
 16364  1BEB  0862               	movf	setProductData@value,w
 16365  1BEC  00E3               	movwf	??_setProductData
 16366  1BED  0865               	movf	setProductData@address,w
 16367  1BEE  0779               	addwf	_product,w
 16368  1BEF  00E4               	movwf	??_setProductData+1
 16369  1BF0  0864               	movf	??_setProductData+1,w
 16370  1BF1  0086               	movwf	6
 16371  1BF2  3002               	movlw	2	; select bank4/5
 16372  1BF3  0087               	movwf	7
 16373  1BF4  0863               	movf	??_setProductData,w
 16374  1BF5  0081               	movwf	1
 16375  1BF6  0008               	return
 16376  1BF7                     __end_of_setProductData:	
 16377                           
 16378                           	psect	text102
 16379  0801                     __ptext102:	
 16380 ;; *************** function _DelayTimejudge *****************
 16381 ;; Defined at:
 16382 ;;		line 112 in file "../src/DelayOff_B1.c"
 16383 ;; Parameters:    Size  Location     Type
 16384 ;;  value           1    wreg     unsigned char 
 16385 ;; Auto vars:     Size  Location     Type
 16386 ;;  value           1    9[BANK0 ] unsigned char 
 16387 ;;  k               1    8[BANK0 ] unsigned char 
 16388 ;;  j               1    7[BANK0 ] unsigned char 
 16389 ;;  i               1    6[BANK0 ] unsigned char 
 16390 ;; Return value:  Size  Location     Type
 16391 ;;                  1    wreg      unsigned char 
 16392 ;; Registers used:
 16393 ;;		wreg, status,2, status,0, pclath, cstack
 16394 ;; Tracked objects:
 16395 ;;		On entry : 0/0
 16396 ;;		On exit  : 0/0
 16397 ;;		Unchanged: 0/0
 16398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16400 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16401 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16402 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16403 ;;Total ram usage:        6 bytes
 16404 ;; Hardware stack levels used:    1
 16405 ;; Hardware stack levels required when called:    6
 16406 ;; This function calls:
 16407 ;;		___bmul
 16408 ;; This function is called by:
 16409 ;;		_setDelayOff_GO
 16410 ;; This function uses a non-reentrant model
 16411 ;;
 16412                           
 16413                           
 16414                           ;psect for function _DelayTimejudge
 16415  0801                     _DelayTimejudge:	
 16416                           
 16417                           ;incstack = 0
 16418                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16419                           ;DelayTimejudge@value stored from wreg
 16420  0801  0020               	movlb	0	; select bank0
 16421  0802  00A9               	movwf	DelayTimejudge@value
 16422                           
 16423                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16424  0803  3005               	movlw	5
 16425  0804  00A4               	movwf	??_DelayTimejudge
 16426  0805  0824               	movf	??_DelayTimejudge,w
 16427  0806  00A6               	movwf	DelayTimejudge@i
 16428  0807  01A7               	clrf	DelayTimejudge@j
 16429  0808  01A8               	clrf	DelayTimejudge@k
 16430                           
 16431                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16432  0809  3031               	movlw	49
 16433  080A  0229               	subwf	DelayTimejudge@value,w
 16434  080B  1803               	skipnc
 16435  080C  2829               	goto	l8843
 16436                           
 16437                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16438  080D  0829               	movf	DelayTimejudge@value,w
 16439  080E  390F               	andlw	15
 16440  080F  00A4               	movwf	??_DelayTimejudge
 16441  0810  0824               	movf	??_DelayTimejudge,w
 16442  0811  00A7               	movwf	DelayTimejudge@j
 16443                           
 16444                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16445  0812  0829               	movf	DelayTimejudge@value,w
 16446  0813  00A4               	movwf	??_DelayTimejudge
 16447  0814  3004               	movlw	4
 16448  0815                     u9545:	
 16449  0815  36A4               	lsrf	??_DelayTimejudge,f
 16450  0816  0B89               	decfsz	9,f
 16451  0817  2815               	goto	u9545
 16452  0818  0824               	movf	??_DelayTimejudge,w
 16453  0819  390F               	andlw	15
 16454  081A  00A5               	movwf	??_DelayTimejudge+1
 16455  081B  0825               	movf	??_DelayTimejudge+1,w
 16456  081C  00A8               	movwf	DelayTimejudge@k
 16457                           
 16458                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16459  081D  300A               	movlw	10
 16460  081E  00A4               	movwf	??_DelayTimejudge
 16461  081F  0824               	movf	??_DelayTimejudge,w
 16462  0820  00A0               	movwf	___bmul@multiplicand
 16463  0821  0828               	movf	DelayTimejudge@k,w
 16464  0822  319C  246A         	fcall	___bmul
 16465  0824  0020               	movlb	0	; select bank0
 16466  0825  0727               	addwf	DelayTimejudge@j,w
 16467  0826  00A5               	movwf	??_DelayTimejudge+1
 16468  0827  0825               	movf	??_DelayTimejudge+1,w
 16469  0828  00A6               	movwf	DelayTimejudge@i
 16470  0829                     l8843:	
 16471                           
 16472                           ;DelayOff_B1.c: 118: }
 16473                           ;DelayOff_B1.c: 139: return i;
 16474  0829  0826               	movf	DelayTimejudge@i,w
 16475  082A  0008               	return
 16476  082B                     __end_of_DelayTimejudge:	
 16477                           
 16478                           	psect	text103
 16479  1C6A                     __ptext103:	
 16480 ;; *************** function ___bmul *****************
 16481 ;; Defined at:
 16482 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16483 ;; Parameters:    Size  Location     Type
 16484 ;;  multiplier      1    wreg     unsigned char 
 16485 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16486 ;; Auto vars:     Size  Location     Type
 16487 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16488 ;;  product         1    2[BANK0 ] unsigned char 
 16489 ;; Return value:  Size  Location     Type
 16490 ;;                  1    wreg      unsigned char 
 16491 ;; Registers used:
 16492 ;;		wreg, status,2, status,0
 16493 ;; Tracked objects:
 16494 ;;		On entry : 0/0
 16495 ;;		On exit  : 0/0
 16496 ;;		Unchanged: 0/0
 16497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16498 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16499 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16501 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16502 ;;Total ram usage:        4 bytes
 16503 ;; Hardware stack levels used:    1
 16504 ;; Hardware stack levels required when called:    5
 16505 ;; This function calls:
 16506 ;;		Nothing
 16507 ;; This function is called by:
 16508 ;;		_DelayTimejudge
 16509 ;; This function uses a non-reentrant model
 16510 ;;
 16511                           
 16512                           
 16513                           ;psect for function ___bmul
 16514  1C6A                     ___bmul:	
 16515                           
 16516                           ;incstack = 0
 16517                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16518                           ;___bmul@multiplier stored from wreg
 16519  1C6A  0020               	movlb	0	; select bank0
 16520  1C6B  00A3               	movwf	___bmul@multiplier
 16521  1C6C  01A2               	clrf	___bmul@product
 16522  1C6D                     l8581:	
 16523  1C6D  1C23               	btfss	___bmul@multiplier,0
 16524  1C6E  2C73               	goto	l8585
 16525  1C6F  0820               	movf	___bmul@multiplicand,w
 16526  1C70  00A1               	movwf	??___bmul
 16527  1C71  0821               	movf	??___bmul,w
 16528  1C72  07A2               	addwf	___bmul@product,f
 16529  1C73                     l8585:	
 16530  1C73  1003               	clrc
 16531  1C74  0DA0               	rlf	___bmul@multiplicand,f
 16532  1C75  1003               	clrc
 16533  1C76  0CA3               	rrf	___bmul@multiplier,f
 16534  1C77  08A3               	movf	___bmul@multiplier,f
 16535  1C78  1D03               	skipz
 16536  1C79  2C6D               	goto	l8581
 16537  1C7A  0822               	movf	___bmul@product,w
 16538  1C7B  0008               	return
 16539  1C7C                     __end_of___bmul:	
 16540                           
 16541                           	psect	text104
 16542  1C15                     __ptext104:	
 16543 ;; *************** function _getDelayOff_GO *****************
 16544 ;; Defined at:
 16545 ;;		line 105 in file "../src/DelayOff_B1.c"
 16546 ;; Parameters:    Size  Location     Type
 16547 ;;  sw              1    wreg     unsigned char 
 16548 ;; Auto vars:     Size  Location     Type
 16549 ;;  sw              1    2[BANK0 ] unsigned char 
 16550 ;;  go              1    3[BANK0 ] unsigned char 
 16551 ;; Return value:  Size  Location     Type
 16552 ;;                  1    wreg      unsigned char 
 16553 ;; Registers used:
 16554 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16555 ;; Tracked objects:
 16556 ;;		On entry : 0/0
 16557 ;;		On exit  : 0/0
 16558 ;;		Unchanged: 0/0
 16559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16561 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16563 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16564 ;;Total ram usage:        2 bytes
 16565 ;; Hardware stack levels used:    1
 16566 ;; Hardware stack levels required when called:    6
 16567 ;; This function calls:
 16568 ;;		_DelayOffPointSelect
 16569 ;; This function is called by:
 16570 ;;		_setDimmerLights_SwOff
 16571 ;;		_setRFSW_Control
 16572 ;; This function uses a non-reentrant model
 16573 ;;
 16574                           
 16575                           
 16576                           ;psect for function _getDelayOff_GO
 16577  1C15                     _getDelayOff_GO:	
 16578                           
 16579                           ;incstack = 0
 16580                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16581                           ;getDelayOff_GO@sw stored from wreg
 16582  1C15  0020               	movlb	0	; select bank0
 16583  1C16  00A2               	movwf	getDelayOff_GO@sw
 16584                           
 16585                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16586  1C17  0822               	movf	getDelayOff_GO@sw,w
 16587  1C18  319D  2511         	fcall	_DelayOffPointSelect
 16588                           
 16589                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16590  1C1A  0875               	movf	_DelayOff,w
 16591  1C1B  0086               	movwf	6
 16592  1C1C  3001               	movlw	1	; select bank2/3
 16593  1C1D  0087               	movwf	7
 16594  1C1E  3000               	movlw	0
 16595  1C1F  1881               	btfsc	1,1
 16596  1C20  3001               	movlw	1
 16597  1C21  0020               	movlb	0	; select bank0
 16598  1C22  00A3               	movwf	getDelayOff_GO@go
 16599                           
 16600                           ;DelayOff_B1.c: 108: return go;
 16601  1C23  0823               	movf	getDelayOff_GO@go,w
 16602  1C24  0008               	return
 16603  1C25                     __end_of_getDelayOff_GO:	
 16604                           
 16605                           	psect	text105
 16606  1C25                     __ptext105:	
 16607 ;; *************** function _getDimmerLights_Status *****************
 16608 ;; Defined at:
 16609 ;;		line 757 in file "../src/Dimmer_B1.c"
 16610 ;; Parameters:    Size  Location     Type
 16611 ;;  lights          1    wreg     unsigned char 
 16612 ;; Auto vars:     Size  Location     Type
 16613 ;;  lights          1    2[BANK0 ] unsigned char 
 16614 ;;  status          1    3[BANK0 ] unsigned char 
 16615 ;; Return value:  Size  Location     Type
 16616 ;;                  1    wreg      unsigned char 
 16617 ;; Registers used:
 16618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16619 ;; Tracked objects:
 16620 ;;		On entry : 0/0
 16621 ;;		On exit  : 0/0
 16622 ;;		Unchanged: 0/0
 16623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16625 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16627 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16628 ;;Total ram usage:        2 bytes
 16629 ;; Hardware stack levels used:    1
 16630 ;; Hardware stack levels required when called:    6
 16631 ;; This function calls:
 16632 ;;		_DimmerLightsPointSelect
 16633 ;; This function is called by:
 16634 ;;		_setDimmerLights_ErrorClose
 16635 ;;		_Exception_Main
 16636 ;;		_setRFSW_Control
 16637 ;;		_setRFSW_AdjControl
 16638 ;; This function uses a non-reentrant model
 16639 ;;
 16640                           
 16641                           
 16642                           ;psect for function _getDimmerLights_Status
 16643  1C25                     _getDimmerLights_Status:	
 16644                           
 16645                           ;incstack = 0
 16646                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16647                           ;getDimmerLights_Status@lights stored from wreg
 16648  1C25  0020               	movlb	0	; select bank0
 16649  1C26  00A2               	movwf	getDimmerLights_Status@lights
 16650                           
 16651                           ;Dimmer_B1.c: 758: DimmerLightsPointSelect(lights);
 16652  1C27  0822               	movf	getDimmerLights_Status@lights,w
 16653  1C28  319C  24B2         	fcall	_DimmerLightsPointSelect
 16654                           
 16655                           ;Dimmer_B1.c: 759: char status = DimmerLights->Status == 1 ? 1 : 0;
 16656  1C2A  0020               	movlb	0	; select bank0
 16657  1C2B  086F               	movf	_DimmerLights,w
 16658  1C2C  3E02               	addlw	2
 16659  1C2D  0086               	movwf	6
 16660  1C2E  3001               	movlw	1	; select bank2/3
 16661  1C2F  0087               	movwf	7
 16662  1C30  3000               	movlw	0
 16663  1C31  1881               	btfsc	1,1
 16664  1C32  3001               	movlw	1
 16665  1C33  00A3               	movwf	getDimmerLights_Status@status
 16666                           
 16667                           ;Dimmer_B1.c: 760: return status;
 16668  1C34  0823               	movf	getDimmerLights_Status@status,w
 16669  1C35  0008               	return
 16670  1C36                     __end_of_getDimmerLights_Status:	
 16671                           
 16672                           	psect	text106
 16673  1CB2                     __ptext106:	
 16674 ;; *************** function _DimmerLightsPointSelect *****************
 16675 ;; Defined at:
 16676 ;;		line 321 in file "../src/Dimmer_B1.c"
 16677 ;; Parameters:    Size  Location     Type
 16678 ;;  lights          1    wreg     unsigned char 
 16679 ;; Auto vars:     Size  Location     Type
 16680 ;;  lights          1    1[BANK0 ] unsigned char 
 16681 ;; Return value:  Size  Location     Type
 16682 ;;		None               void
 16683 ;; Registers used:
 16684 ;;		wreg
 16685 ;; Tracked objects:
 16686 ;;		On entry : 0/0
 16687 ;;		On exit  : 0/0
 16688 ;;		Unchanged: 0/0
 16689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16691 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16692 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16693 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16694 ;;Total ram usage:        2 bytes
 16695 ;; Hardware stack levels used:    1
 16696 ;; Hardware stack levels required when called:    5
 16697 ;; This function calls:
 16698 ;;		Nothing
 16699 ;; This function is called by:
 16700 ;;		_setDimmerLights_Initialization
 16701 ;;		_setDimmerLights_SwOn
 16702 ;;		_setDimmerLights_SwOff
 16703 ;;		_setDimmerLights_AdjOn
 16704 ;;		_setDimmerLights_Main
 16705 ;;		_getDimmerLights_Status
 16706 ;;		_getAll_DimmerLights_AdjSw
 16707 ;;		_setDimmerLights_ErrorClose
 16708 ;;		_setDimmerLights_AdjRF
 16709 ;;		_setDimmerLights_Status
 16710 ;;		_setDimmerLights_GO
 16711 ;;		_setDimmerLights_MaxmumValue
 16712 ;;		_setDimmerLights_Trigger
 16713 ;;		_setDimmerLights_TriggerAdj
 16714 ;; This function uses a non-reentrant model
 16715 ;;
 16716                           
 16717                           
 16718                           ;psect for function _DimmerLightsPointSelect
 16719  1CB2                     _DimmerLightsPointSelect:	
 16720                           
 16721                           ;incstack = 0
 16722                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16723                           ;DimmerLightsPointSelect@lights stored from wreg
 16724  1CB2  0020               	movlb	0	; select bank0
 16725  1CB3  00A1               	movwf	DimmerLightsPointSelect@lights
 16726                           
 16727                           ;Dimmer_B1.c: 323: if (lights == 1) {
 16728  1CB4  0821               	movf	DimmerLightsPointSelect@lights,w
 16729  1CB5  3A01               	xorlw	1
 16730  1CB6  1D03               	skipz
 16731  1CB7  2CBC               	goto	l769
 16732                           
 16733                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 16734  1CB8  3055               	movlw	_DimmerLights1& (0+255)
 16735  1CB9  00A0               	movwf	??_DimmerLightsPointSelect
 16736  1CBA  0820               	movf	??_DimmerLightsPointSelect,w
 16737  1CBB  00EF               	movwf	_DimmerLights
 16738  1CBC                     l769:	
 16739                           
 16740                           ;Dimmer_B1.c: 325: }
 16741                           ;Dimmer_B1.c: 328: if (lights == 2) {
 16742  1CBC  0821               	movf	DimmerLightsPointSelect@lights,w
 16743  1CBD  3A02               	xorlw	2
 16744  1CBE  1D03               	skipz
 16745  1CBF  0008               	return
 16746                           
 16747                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights2;
 16748  1CC0  30BE               	movlw	_DimmerLights2& (0+255)
 16749  1CC1  00A0               	movwf	??_DimmerLightsPointSelect
 16750  1CC2  0820               	movf	??_DimmerLightsPointSelect,w
 16751  1CC3  00EF               	movwf	_DimmerLights
 16752  1CC4  0008               	return
 16753  1CC5                     __end_of_DimmerLightsPointSelect:	
 16754                           
 16755                           	psect	text107
 16756  174E                     __ptext107:	
 16757 ;; *************** function _setBuz *****************
 16758 ;; Defined at:
 16759 ;;		line 22 in file "../src/Buzzer_B1.c"
 16760 ;; Parameters:    Size  Location     Type
 16761 ;;  count           1    wreg     unsigned char 
 16762 ;;  time            2    9[BANK0 ] int 
 16763 ;; Auto vars:     Size  Location     Type
 16764 ;;  count           1   12[BANK0 ] unsigned char 
 16765 ;; Return value:  Size  Location     Type
 16766 ;;		None               void
 16767 ;; Registers used:
 16768 ;;		wreg, status,2, status,0, pclath, cstack
 16769 ;; Tracked objects:
 16770 ;;		On entry : 0/0
 16771 ;;		On exit  : 0/0
 16772 ;;		Unchanged: 0/0
 16773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16774 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16775 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16776 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16777 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16778 ;;Total ram usage:        4 bytes
 16779 ;; Hardware stack levels used:    1
 16780 ;; Hardware stack levels required when called:    6
 16781 ;; This function calls:
 16782 ;;		___awdiv
 16783 ;; This function is called by:
 16784 ;;		_DlyOff_Main
 16785 ;;		_setDimmerLights_SwOn
 16786 ;;		_setDimmerLights_Adj
 16787 ;;		_my_MainTimer
 16788 ;;		_Exception_Main
 16789 ;;		_setTemp_Main
 16790 ;;		_setLog_Code
 16791 ;;		_setControl_Lights_Table
 16792 ;;		_setRFSW_Control
 16793 ;;		_setSw_Main
 16794 ;; This function uses a non-reentrant model
 16795 ;;
 16796                           
 16797                           
 16798                           ;psect for function _setBuz
 16799  174E                     _setBuz:	
 16800                           
 16801                           ;incstack = 0
 16802                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16803                           ;setBuz@count stored from wreg
 16804  174E  0020               	movlb	0	; select bank0
 16805  174F  00AC               	movwf	setBuz@count
 16806                           
 16807                           ;Buzzer_B1.c: 23: time /= 10;
 16808  1750  300A               	movlw	10
 16809  1751  00A0               	movwf	___awdiv@divisor
 16810  1752  3000               	movlw	0
 16811  1753  00A1               	movwf	___awdiv@divisor+1
 16812  1754  082A               	movf	setBuz@time+1,w
 16813  1755  01A3               	clrf	___awdiv@dividend+1
 16814  1756  07A3               	addwf	___awdiv@dividend+1,f
 16815  1757  0829               	movf	setBuz@time,w
 16816  1758  01A2               	clrf	___awdiv@dividend
 16817  1759  07A2               	addwf	___awdiv@dividend,f
 16818  175A  3196  26A2  3197   	fcall	___awdiv
 16819  175D  0020               	movlb	0	; select bank0
 16820  175E  0821               	movf	?___awdiv+1,w
 16821  175F  01AA               	clrf	setBuz@time+1
 16822  1760  07AA               	addwf	setBuz@time+1,f
 16823  1761  0820               	movf	?___awdiv,w
 16824  1762  01A9               	clrf	setBuz@time
 16825  1763  07A9               	addwf	setBuz@time,f
 16826                           
 16827                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16828  1764  0021               	movlb	1	; select bank1
 16829  1765  1C2E               	btfss	_Buz1^(0+128),0
 16830  1766  0008               	return
 16831                           
 16832                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16833  1767  18AE               	btfsc	_Buz1^(0+128),1
 16834  1768  2F7F               	goto	l96
 16835                           
 16836                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16837  1769  14AE               	bsf	_Buz1^(0+128),1
 16838                           
 16839                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16840  176A  01AF               	clrf	(_Buz1^(0+128)+1)
 16841  176B  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16842                           
 16843                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16844  176C  0020               	movlb	0	; select bank0
 16845  176D  082C               	movf	setBuz@count,w
 16846  176E  00AB               	movwf	??_setBuz
 16847  176F  082B               	movf	??_setBuz,w
 16848  1770  0021               	movlb	1	; select bank1
 16849  1771  00B1               	movwf	(_Buz1^(0+128)+3)
 16850                           
 16851                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16852  1772  0020               	movlb	0	; select bank0
 16853  1773  082A               	movf	setBuz@time+1,w
 16854  1774  0021               	movlb	1	; select bank1
 16855  1775  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16856  1776  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16857  1777  0020               	movlb	0	; select bank0
 16858  1778  0829               	movf	setBuz@time,w
 16859  1779  0021               	movlb	1	; select bank1
 16860  177A  01B4               	clrf	(_Buz1^(0+128)+6)
 16861  177B  07B4               	addwf	(_Buz1^(0+128)+6),f
 16862                           
 16863                           ;Buzzer_B1.c: 30: RB3 = 1;
 16864  177C  0020               	movlb	0	; select bank0
 16865  177D  158D               	bsf	13,3	;volatile
 16866                           
 16867                           ;Buzzer_B1.c: 31: } else {
 16868  177E  0008               	return
 16869  177F                     l96:	
 16870                           
 16871                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16872  177F  19AE               	btfsc	_Buz1^(0+128),3
 16873  1780  2F93               	goto	l98
 16874                           
 16875                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16876  1781  15AE               	bsf	_Buz1^(0+128),3
 16877                           
 16878                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16879  1782  0020               	movlb	0	; select bank0
 16880  1783  082C               	movf	setBuz@count,w
 16881  1784  00AB               	movwf	??_setBuz
 16882  1785  082B               	movf	??_setBuz,w
 16883  1786  0021               	movlb	1	; select bank1
 16884  1787  00B2               	movwf	(_Buz1^(0+128)+4)
 16885                           
 16886                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16887  1788  0020               	movlb	0	; select bank0
 16888  1789  082A               	movf	setBuz@time+1,w
 16889  178A  0021               	movlb	1	; select bank1
 16890  178B  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16891  178C  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16892  178D  0020               	movlb	0	; select bank0
 16893  178E  0829               	movf	setBuz@time,w
 16894  178F  0021               	movlb	1	; select bank1
 16895  1790  01B6               	clrf	(_Buz1^(0+128)+8)
 16896  1791  07B6               	addwf	(_Buz1^(0+128)+8),f
 16897                           
 16898                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16899  1792  0008               	return
 16900  1793                     l98:	
 16901  1793  1A2E               	btfsc	_Buz1^(0+128),4
 16902  1794  0008               	return
 16903                           
 16904                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16905  1795  162E               	bsf	_Buz1^(0+128),4
 16906                           
 16907                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16908  1796  0020               	movlb	0	; select bank0
 16909  1797  082C               	movf	setBuz@count,w
 16910  1798  00AB               	movwf	??_setBuz
 16911  1799  082B               	movf	??_setBuz,w
 16912  179A  0021               	movlb	1	; select bank1
 16913  179B  00B3               	movwf	(_Buz1^(0+128)+5)
 16914                           
 16915                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16916  179C  0020               	movlb	0	; select bank0
 16917  179D  082A               	movf	setBuz@time+1,w
 16918  179E  0021               	movlb	1	; select bank1
 16919  179F  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16920  17A0  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16921  17A1  0020               	movlb	0	; select bank0
 16922  17A2  0829               	movf	setBuz@time,w
 16923  17A3  0021               	movlb	1	; select bank1
 16924  17A4  01B8               	clrf	(_Buz1^(0+128)+10)
 16925  17A5  07B8               	addwf	(_Buz1^(0+128)+10),f
 16926  17A6  0008               	return
 16927  17A7                     __end_of_setBuz:	
 16928                           
 16929                           	psect	text108
 16930  16A2                     __ptext108:	
 16931 ;; *************** function ___awdiv *****************
 16932 ;; Defined at:
 16933 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16934 ;; Parameters:    Size  Location     Type
 16935 ;;  divisor         2    0[BANK0 ] int 
 16936 ;;  dividend        2    2[BANK0 ] int 
 16937 ;; Auto vars:     Size  Location     Type
 16938 ;;  quotient        2    7[BANK0 ] int 
 16939 ;;  sign            1    6[BANK0 ] unsigned char 
 16940 ;;  counter         1    5[BANK0 ] unsigned char 
 16941 ;; Return value:  Size  Location     Type
 16942 ;;                  2    0[BANK0 ] int 
 16943 ;; Registers used:
 16944 ;;		wreg, status,2, status,0
 16945 ;; Tracked objects:
 16946 ;;		On entry : 0/0
 16947 ;;		On exit  : 0/0
 16948 ;;		Unchanged: 0/0
 16949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16950 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16951 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16953 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16954 ;;Total ram usage:        9 bytes
 16955 ;; Hardware stack levels used:    1
 16956 ;; Hardware stack levels required when called:    5
 16957 ;; This function calls:
 16958 ;;		Nothing
 16959 ;; This function is called by:
 16960 ;;		_setBuz
 16961 ;; This function uses a non-reentrant model
 16962 ;;
 16963                           
 16964                           
 16965                           ;psect for function ___awdiv
 16966  16A2                     ___awdiv:	
 16967                           
 16968                           ;incstack = 0
 16969                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16970  16A2  0020               	movlb	0	; select bank0
 16971  16A3  01A6               	clrf	___awdiv@sign
 16972  16A4  1FA1               	btfss	___awdiv@divisor+1,7
 16973  16A5  2EAD               	goto	l8871
 16974  16A6  09A0               	comf	___awdiv@divisor,f
 16975  16A7  09A1               	comf	___awdiv@divisor+1,f
 16976  16A8  0AA0               	incf	___awdiv@divisor,f
 16977  16A9  1903               	skipnz
 16978  16AA  0AA1               	incf	___awdiv@divisor+1,f
 16979  16AB  01A6               	clrf	___awdiv@sign
 16980  16AC  0AA6               	incf	___awdiv@sign,f
 16981  16AD                     l8871:	
 16982  16AD  1FA3               	btfss	___awdiv@dividend+1,7
 16983  16AE  2EB8               	goto	l8877
 16984  16AF  09A2               	comf	___awdiv@dividend,f
 16985  16B0  09A3               	comf	___awdiv@dividend+1,f
 16986  16B1  0AA2               	incf	___awdiv@dividend,f
 16987  16B2  1903               	skipnz
 16988  16B3  0AA3               	incf	___awdiv@dividend+1,f
 16989  16B4  3001               	movlw	1
 16990  16B5  00A4               	movwf	??___awdiv
 16991  16B6  0824               	movf	??___awdiv,w
 16992  16B7  06A6               	xorwf	___awdiv@sign,f
 16993  16B8                     l8877:	
 16994  16B8  01A7               	clrf	___awdiv@quotient
 16995  16B9  01A8               	clrf	___awdiv@quotient+1
 16996  16BA  0821               	movf	___awdiv@divisor+1,w
 16997  16BB  0420               	iorwf	___awdiv@divisor,w
 16998  16BC  1903               	skipnz
 16999  16BD  2EE7               	goto	l8899
 17000  16BE  01A5               	clrf	___awdiv@counter
 17001  16BF  0AA5               	incf	___awdiv@counter,f
 17002  16C0                     l8887:	
 17003  16C0  1BA1               	btfsc	___awdiv@divisor+1,7
 17004  16C1  2ECC               	goto	l8889
 17005  16C2  3001               	movlw	1
 17006  16C3                     u9605:	
 17007  16C3  35A0               	lslf	___awdiv@divisor,f
 17008  16C4  0DA1               	rlf	___awdiv@divisor+1,f
 17009  16C5  0B89               	decfsz	9,f
 17010  16C6  2EC3               	goto	u9605
 17011  16C7  3001               	movlw	1
 17012  16C8  00A4               	movwf	??___awdiv
 17013  16C9  0824               	movf	??___awdiv,w
 17014  16CA  07A5               	addwf	___awdiv@counter,f
 17015  16CB  2EC0               	goto	l8887
 17016  16CC                     l8889:	
 17017  16CC  3001               	movlw	1
 17018  16CD                     u9625:	
 17019  16CD  35A7               	lslf	___awdiv@quotient,f
 17020  16CE  0DA8               	rlf	___awdiv@quotient+1,f
 17021  16CF  0B89               	decfsz	9,f
 17022  16D0  2ECD               	goto	u9625
 17023  16D1  0821               	movf	___awdiv@divisor+1,w
 17024  16D2  0223               	subwf	___awdiv@dividend+1,w
 17025  16D3  1D03               	skipz
 17026  16D4  2ED7               	goto	u9635
 17027  16D5  0820               	movf	___awdiv@divisor,w
 17028  16D6  0222               	subwf	___awdiv@dividend,w
 17029  16D7                     u9635:	
 17030  16D7  1C03               	skipc
 17031  16D8  2EDE               	goto	l8895
 17032  16D9  0820               	movf	___awdiv@divisor,w
 17033  16DA  02A2               	subwf	___awdiv@dividend,f
 17034  16DB  0821               	movf	___awdiv@divisor+1,w
 17035  16DC  3BA3               	subwfb	___awdiv@dividend+1,f
 17036  16DD  1427               	bsf	___awdiv@quotient,0
 17037  16DE                     l8895:	
 17038  16DE  3001               	movlw	1
 17039  16DF                     u9645:	
 17040  16DF  36A1               	lsrf	___awdiv@divisor+1,f
 17041  16E0  0CA0               	rrf	___awdiv@divisor,f
 17042  16E1  0B89               	decfsz	9,f
 17043  16E2  2EDF               	goto	u9645
 17044  16E3  3001               	movlw	1
 17045  16E4  02A5               	subwf	___awdiv@counter,f
 17046  16E5  1D03               	btfss	3,2
 17047  16E6  2ECC               	goto	l8889
 17048  16E7                     l8899:	
 17049  16E7  0826               	movf	___awdiv@sign,w
 17050  16E8  1903               	btfsc	3,2
 17051  16E9  2EEF               	goto	l8903
 17052  16EA  09A7               	comf	___awdiv@quotient,f
 17053  16EB  09A8               	comf	___awdiv@quotient+1,f
 17054  16EC  0AA7               	incf	___awdiv@quotient,f
 17055  16ED  1903               	skipnz
 17056  16EE  0AA8               	incf	___awdiv@quotient+1,f
 17057  16EF                     l8903:	
 17058  16EF  0828               	movf	___awdiv@quotient+1,w
 17059  16F0  01A1               	clrf	?___awdiv+1
 17060  16F1  07A1               	addwf	?___awdiv+1,f
 17061  16F2  0827               	movf	___awdiv@quotient,w
 17062  16F3  01A0               	clrf	?___awdiv
 17063  16F4  07A0               	addwf	?___awdiv,f
 17064  16F5  0008               	return
 17065  16F6                     __end_of___awdiv:	
 17066                           
 17067                           	psect	text109
 17068  1B24                     __ptext109:	
 17069 ;; *************** function _DelayOff_Initialization *****************
 17070 ;; Defined at:
 17071 ;;		line 26 in file "../src/DelayOff_B1.c"
 17072 ;; Parameters:    Size  Location     Type
 17073 ;;		None
 17074 ;; Auto vars:     Size  Location     Type
 17075 ;;		None
 17076 ;; Return value:  Size  Location     Type
 17077 ;;		None               void
 17078 ;; Registers used:
 17079 ;;		wreg, status,2, status,0, pclath, cstack
 17080 ;; Tracked objects:
 17081 ;;		On entry : 0/0
 17082 ;;		On exit  : 0/0
 17083 ;;		Unchanged: 0/0
 17084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;Total ram usage:        0 bytes
 17090 ;; Hardware stack levels used:    1
 17091 ;; Hardware stack levels required when called:    7
 17092 ;; This function calls:
 17093 ;;		_DlyOff_Initialization
 17094 ;; This function is called by:
 17095 ;;		_main
 17096 ;; This function uses a non-reentrant model
 17097 ;;
 17098                           
 17099                           
 17100                           ;psect for function _DelayOff_Initialization
 17101  1B24                     _DelayOff_Initialization:	
 17102                           
 17103                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17104                           
 17105                           ;incstack = 0
 17106                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17107  1B24  3001               	movlw	1
 17108  1B25  319B  2303  319B   	fcall	_DlyOff_Initialization
 17109                           
 17110                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17111  1B28  3002               	movlw	2
 17112  1B29  319B  2303         	fcall	_DlyOff_Initialization
 17113  1B2B  0008               	return
 17114  1B2C                     __end_of_DelayOff_Initialization:	
 17115                           
 17116                           	psect	text110
 17117  1B03                     __ptext110:	
 17118 ;; *************** function _DlyOff_Initialization *****************
 17119 ;; Defined at:
 17120 ;;		line 56 in file "../src/DelayOff_B1.c"
 17121 ;; Parameters:    Size  Location     Type
 17122 ;;  sw              1    wreg     unsigned char 
 17123 ;; Auto vars:     Size  Location     Type
 17124 ;;  sw              1    2[BANK0 ] unsigned char 
 17125 ;; Return value:  Size  Location     Type
 17126 ;;		None               void
 17127 ;; Registers used:
 17128 ;;		wreg, status,2, status,0, pclath, cstack
 17129 ;; Tracked objects:
 17130 ;;		On entry : 0/0
 17131 ;;		On exit  : 0/0
 17132 ;;		Unchanged: 0/0
 17133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17135 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17137 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17138 ;;Total ram usage:        1 bytes
 17139 ;; Hardware stack levels used:    1
 17140 ;; Hardware stack levels required when called:    6
 17141 ;; This function calls:
 17142 ;;		_DelayOffPointSelect
 17143 ;; This function is called by:
 17144 ;;		_DelayOff_Initialization
 17145 ;; This function uses a non-reentrant model
 17146 ;;
 17147                           
 17148                           
 17149                           ;psect for function _DlyOff_Initialization
 17150  1B03                     _DlyOff_Initialization:	
 17151                           
 17152                           ;incstack = 0
 17153                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17154                           ;DlyOff_Initialization@sw stored from wreg
 17155  1B03  0020               	movlb	0	; select bank0
 17156  1B04  00A2               	movwf	DlyOff_Initialization@sw
 17157                           
 17158                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17159  1B05  0822               	movf	DlyOff_Initialization@sw,w
 17160  1B06  319D  2511         	fcall	_DelayOffPointSelect
 17161  1B08  0008               	return
 17162  1B09                     __end_of_DlyOff_Initialization:	
 17163                           
 17164                           	psect	text111
 17165  1D11                     __ptext111:	
 17166 ;; *************** function _DelayOffPointSelect *****************
 17167 ;; Defined at:
 17168 ;;		line 7 in file "../src/DelayOff_B1.c"
 17169 ;; Parameters:    Size  Location     Type
 17170 ;;  sw              1    wreg     unsigned char 
 17171 ;; Auto vars:     Size  Location     Type
 17172 ;;  sw              1    1[BANK0 ] unsigned char 
 17173 ;; Return value:  Size  Location     Type
 17174 ;;		None               void
 17175 ;; Registers used:
 17176 ;;		wreg
 17177 ;; Tracked objects:
 17178 ;;		On entry : 0/0
 17179 ;;		On exit  : 0/0
 17180 ;;		Unchanged: 0/0
 17181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17183 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17184 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17185 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17186 ;;Total ram usage:        2 bytes
 17187 ;; Hardware stack levels used:    1
 17188 ;; Hardware stack levels required when called:    5
 17189 ;; This function calls:
 17190 ;;		Nothing
 17191 ;; This function is called by:
 17192 ;;		_DlyOff_Initialization
 17193 ;;		_DlyOff_Main
 17194 ;;		_setDelayOff_GO
 17195 ;;		_getDelayOff_GO
 17196 ;; This function uses a non-reentrant model
 17197 ;;
 17198                           
 17199                           
 17200                           ;psect for function _DelayOffPointSelect
 17201  1D11                     _DelayOffPointSelect:	
 17202                           
 17203                           ;incstack = 0
 17204                           ; Regs used in _DelayOffPointSelect: [wreg]
 17205                           ;DelayOffPointSelect@sw stored from wreg
 17206  1D11  0020               	movlb	0	; select bank0
 17207  1D12  00A1               	movwf	DelayOffPointSelect@sw
 17208                           
 17209                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17210  1D13  0821               	movf	DelayOffPointSelect@sw,w
 17211  1D14  3A01               	xorlw	1
 17212  1D15  1D03               	skipz
 17213  1D16  2D1C               	goto	l8827
 17214                           
 17215                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17216  1D17  30E1               	movlw	_DlySw1& (0+255)
 17217  1D18  00A0               	movwf	??_DelayOffPointSelect
 17218  1D19  0820               	movf	??_DelayOffPointSelect,w
 17219  1D1A  00F5               	movwf	_DelayOff
 17220                           
 17221                           ;DelayOff_B1.c: 11: }
 17222  1D1B  0008               	return
 17223  1D1C                     l8827:	
 17224                           
 17225                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17226  1D1C  0821               	movf	DelayOffPointSelect@sw,w
 17227  1D1D  3A02               	xorlw	2
 17228  1D1E  1D03               	skipz
 17229  1D1F  0008               	return
 17230                           
 17231                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17232  1D20  30E6               	movlw	_DlySw2& (0+255)
 17233  1D21  00A0               	movwf	??_DelayOffPointSelect
 17234  1D22  0820               	movf	??_DelayOffPointSelect,w
 17235  1D23  00F5               	movwf	_DelayOff
 17236  1D24  0008               	return
 17237  1D25                     __end_of_DelayOffPointSelect:	
 17238                           
 17239                           	psect	text112
 17240  1DB3                     __ptext112:	
 17241 ;; *************** function _CC2500_PowerOnInitial *****************
 17242 ;; Defined at:
 17243 ;;		line 119 in file "../src/CC2500_B1.c"
 17244 ;; Parameters:    Size  Location     Type
 17245 ;;		None
 17246 ;; Auto vars:     Size  Location     Type
 17247 ;;		None
 17248 ;; Return value:  Size  Location     Type
 17249 ;;		None               void
 17250 ;; Registers used:
 17251 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17252 ;; Tracked objects:
 17253 ;;		On entry : 0/0
 17254 ;;		On exit  : 0/0
 17255 ;;		Unchanged: 0/0
 17256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17261 ;;Total ram usage:        0 bytes
 17262 ;; Hardware stack levels used:    1
 17263 ;; Hardware stack levels required when called:    8
 17264 ;; This function calls:
 17265 ;;		_CC2500_ClearRXFIFO
 17266 ;;		_CC2500_ClearTXFIFO
 17267 ;;		_CC2500_FrequencyCabr
 17268 ;;		_CC2500_InitPATable
 17269 ;;		_CC2500_InitSetREG
 17270 ;;		_CC2500_PowerRST
 17271 ;;		_CC2500_SIDLEMode
 17272 ;; This function is called by:
 17273 ;;		_main
 17274 ;; This function uses a non-reentrant model
 17275 ;;
 17276                           
 17277                           
 17278                           ;psect for function _CC2500_PowerOnInitial
 17279  1DB3                     _CC2500_PowerOnInitial:	
 17280                           
 17281                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 17282                           
 17283                           ;incstack = 0
 17284                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17285  1DB3  3193  23E0  319D   	fcall	_CC2500_PowerRST
 17286                           
 17287                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 17288  1DB6  3190  20B3  319D   	fcall	_CC2500_InitSetREG
 17289                           
 17290                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 17291  1DB9  319E  26B2  319D   	fcall	_CC2500_InitPATable
 17292                           
 17293                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 17294  1DBC  319A  22F2  319D   	fcall	_CC2500_ClearTXFIFO
 17295                           
 17296                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 17297  1DBF  319A  22EE  319D   	fcall	_CC2500_ClearRXFIFO
 17298                           
 17299                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 17300  1DC2  319B  237C  319D   	fcall	_CC2500_FrequencyCabr
 17301                           
 17302                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 17303  1DC5  319A  22F6         	fcall	_CC2500_SIDLEMode
 17304  1DC7  0008               	return
 17305  1DC8                     __end_of_CC2500_PowerOnInitial:	
 17306                           
 17307                           	psect	text113
 17308  1AF6                     __ptext113:	
 17309 ;; *************** function _CC2500_SIDLEMode *****************
 17310 ;; Defined at:
 17311 ;;		line 209 in file "../src/CC2500_B1.c"
 17312 ;; Parameters:    Size  Location     Type
 17313 ;;		None
 17314 ;; Auto vars:     Size  Location     Type
 17315 ;;		None
 17316 ;; Return value:  Size  Location     Type
 17317 ;;		None               void
 17318 ;; Registers used:
 17319 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17320 ;; Tracked objects:
 17321 ;;		On entry : 0/0
 17322 ;;		On exit  : 0/0
 17323 ;;		Unchanged: 0/0
 17324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17329 ;;Total ram usage:        0 bytes
 17330 ;; Hardware stack levels used:    1
 17331 ;; Hardware stack levels required when called:    7
 17332 ;; This function calls:
 17333 ;;		_CC2500_WriteCommand
 17334 ;; This function is called by:
 17335 ;;		_CC2500_PowerOnInitial
 17336 ;; This function uses a non-reentrant model
 17337 ;;
 17338                           
 17339                           
 17340                           ;psect for function _CC2500_SIDLEMode
 17341  1AF6                     _CC2500_SIDLEMode:	
 17342                           
 17343                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17344                           
 17345                           ;incstack = 0
 17346                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17347  1AF6  3036               	movlw	54
 17348  1AF7  319E  2627         	fcall	_CC2500_WriteCommand
 17349  1AF9  0008               	return
 17350  1AFA                     __end_of_CC2500_SIDLEMode:	
 17351                           
 17352                           	psect	text114
 17353  13E0                     __ptext114:	
 17354 ;; *************** function _CC2500_PowerRST *****************
 17355 ;; Defined at:
 17356 ;;		line 132 in file "../src/CC2500_B1.c"
 17357 ;; Parameters:    Size  Location     Type
 17358 ;;		None
 17359 ;; Auto vars:     Size  Location     Type
 17360 ;;		None
 17361 ;; Return value:  Size  Location     Type
 17362 ;;		None               void
 17363 ;; Registers used:
 17364 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17365 ;; Tracked objects:
 17366 ;;		On entry : 0/0
 17367 ;;		On exit  : 0/0
 17368 ;;		Unchanged: 0/0
 17369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17373 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17374 ;;Total ram usage:        1 bytes
 17375 ;; Hardware stack levels used:    1
 17376 ;; Hardware stack levels required when called:    6
 17377 ;; This function calls:
 17378 ;;		_CC2500_WriteByte
 17379 ;;		_DelayTime_1us
 17380 ;;		_Timeout_Counter
 17381 ;;		_set_TimeoutCleared
 17382 ;; This function is called by:
 17383 ;;		_CC2500_PowerOnInitial
 17384 ;; This function uses a non-reentrant model
 17385 ;;
 17386                           
 17387                           
 17388                           ;psect for function _CC2500_PowerRST
 17389  13E0                     _CC2500_PowerRST:	
 17390                           
 17391                           ;CC2500_B1.c: 133: RC1 = 0;
 17392                           
 17393                           ;incstack = 0
 17394                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17395  13E0  0020               	movlb	0	; select bank0
 17396  13E1  108E               	bcf	14,1	;volatile
 17397                           
 17398                           ;CC2500_B1.c: 134: RC0 = 0;
 17399  13E2  100E               	bcf	14,0	;volatile
 17400                           
 17401                           ;CC2500_B1.c: 135: RC4 = 1;
 17402  13E3  160E               	bsf	14,4	;volatile
 17403                           
 17404                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17405  13E4  300A               	movlw	10
 17406  13E5  00A0               	movwf	DelayTime_1us@count
 17407  13E6  3000               	movlw	0
 17408  13E7  00A1               	movwf	DelayTime_1us@count+1
 17409  13E8  319F  27DA  3193   	fcall	_DelayTime_1us
 17410                           
 17411                           ;CC2500_B1.c: 137: RC4 = 0;
 17412  13EB  0020               	movlb	0	; select bank0
 17413  13EC  120E               	bcf	14,4	;volatile
 17414                           
 17415                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17416  13ED  300A               	movlw	10
 17417  13EE  00A0               	movwf	DelayTime_1us@count
 17418  13EF  3000               	movlw	0
 17419  13F0  00A1               	movwf	DelayTime_1us@count+1
 17420  13F1  319F  27DA  3193   	fcall	_DelayTime_1us
 17421                           
 17422                           ;CC2500_B1.c: 139: RC4 = 1;
 17423  13F4  0020               	movlb	0	; select bank0
 17424  13F5  160E               	bsf	14,4	;volatile
 17425                           
 17426                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17427  13F6  3028               	movlw	40
 17428  13F7  00A0               	movwf	DelayTime_1us@count
 17429  13F8  3000               	movlw	0
 17430  13F9  00A1               	movwf	DelayTime_1us@count+1
 17431  13FA  319F  27DA  3193   	fcall	_DelayTime_1us
 17432                           
 17433                           ;CC2500_B1.c: 141: RC4 = 0;
 17434  13FD  0020               	movlb	0	; select bank0
 17435  13FE  120E               	bcf	14,4	;volatile
 17436                           
 17437                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17438  13FF  3030               	movlw	48
 17439  1400  00A6               	movwf	??_CC2500_PowerRST
 17440  1401  0826               	movf	??_CC2500_PowerRST,w
 17441  1402  0021               	movlb	1	; select bank1
 17442  1403  00D0               	movwf	_SPI0Buffer^(0+128)
 17443                           
 17444                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 17445  1404  2C08               	goto	l9837
 17446  1405                     l9835:	
 17447                           
 17448                           ;CC2500_B1.c: 144: Timeout_Counter();
 17449  1405  319D  259E  3193   	fcall	_Timeout_Counter
 17450  1408                     l9837:	
 17451  1408  0020               	movlb	0	; select bank0
 17452  1409  1D0E               	btfss	14,2	;volatile
 17453  140A  2C0E               	goto	l9841
 17454  140B  0021               	movlb	1	; select bank1
 17455  140C  1D2B               	btfss	(_myMain^(0+128)+11),2
 17456  140D  2C05               	goto	l9835
 17457  140E                     l9841:	
 17458                           
 17459                           ;CC2500_B1.c: 145: };
 17460                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17461  140E  319A  22FE  3193   	fcall	_set_TimeoutCleared
 17462                           
 17463                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17464  1411  319D  25F5  3193   	fcall	_CC2500_WriteByte
 17465                           
 17466                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 17467  1414  2C18               	goto	l9847
 17468  1415                     l9845:	
 17469                           
 17470                           ;CC2500_B1.c: 149: Timeout_Counter();
 17471  1415  319D  259E  3193   	fcall	_Timeout_Counter
 17472  1418                     l9847:	
 17473  1418  0020               	movlb	0	; select bank0
 17474  1419  1D0E               	btfss	14,2	;volatile
 17475  141A  2C1E               	goto	l9851
 17476  141B  0021               	movlb	1	; select bank1
 17477  141C  1D2B               	btfss	(_myMain^(0+128)+11),2
 17478  141D  2C15               	goto	l9845
 17479  141E                     l9851:	
 17480                           
 17481                           ;CC2500_B1.c: 150: };
 17482                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17483  141E  319A  22FE         	fcall	_set_TimeoutCleared
 17484                           
 17485                           ;CC2500_B1.c: 152: RC0 = 0;
 17486  1420  0020               	movlb	0	; select bank0
 17487  1421  100E               	bcf	14,0	;volatile
 17488                           
 17489                           ;CC2500_B1.c: 153: RC4 = 1;
 17490  1422  160E               	bsf	14,4	;volatile
 17491  1423  0008               	return
 17492  1424                     __end_of_CC2500_PowerRST:	
 17493                           
 17494                           	psect	text115
 17495  10B3                     __ptext115:	
 17496 ;; *************** function _CC2500_InitSetREG *****************
 17497 ;; Defined at:
 17498 ;;		line 159 in file "../src/CC2500_B1.c"
 17499 ;; Parameters:    Size  Location     Type
 17500 ;;		None
 17501 ;; Auto vars:     Size  Location     Type
 17502 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17503 ;;  temp2           1    7[BANK0 ] unsigned char 
 17504 ;;  temp1           1    6[BANK0 ] unsigned char 
 17505 ;; Return value:  Size  Location     Type
 17506 ;;		None               void
 17507 ;; Registers used:
 17508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17509 ;; Tracked objects:
 17510 ;;		On entry : 0/0
 17511 ;;		On exit  : 0/0
 17512 ;;		Unchanged: 0/0
 17513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17515 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17516 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17517 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17518 ;;Total ram usage:        4 bytes
 17519 ;; Hardware stack levels used:    1
 17520 ;; Hardware stack levels required when called:    7
 17521 ;; This function calls:
 17522 ;;		_CC2500_WriteREG
 17523 ;; This function is called by:
 17524 ;;		_CC2500_PowerOnInitial
 17525 ;; This function uses a non-reentrant model
 17526 ;;
 17527                           
 17528                           
 17529                           ;psect for function _CC2500_InitSetREG
 17530  10B3                     _CC2500_InitSetREG:	
 17531                           
 17532                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17533                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17534                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17535                           
 17536                           ;incstack = 0
 17537                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17538  10B3  0020               	movlb	0	; select bank0
 17539  10B4  01A8               	clrf	CC2500_InitSetREG@loop_c
 17540  10B5                     L10:	
 17541  10B5  302F               	movlw	47
 17542  10B6  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17543  10B7  1803               	btfsc	3,0
 17544  10B8  0008               	return
 17545                           
 17546                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17547  10B9  0828               	movf	CC2500_InitSetREG@loop_c,w
 17548  10BA  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17549  10BB  0084               	movwf	4
 17550  10BC  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17551  10BD  1803               	skipnc
 17552  10BE  3E01               	addlw	1
 17553  10BF  0085               	movwf	5
 17554  10C0  0800               	movf	0,w	;code access
 17555  10C1  00A5               	movwf	??_CC2500_InitSetREG
 17556  10C2  0825               	movf	??_CC2500_InitSetREG,w
 17557  10C3  00A6               	movwf	CC2500_InitSetREG@temp1
 17558                           
 17559                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17560  10C4  0828               	movf	CC2500_InitSetREG@loop_c,w
 17561  10C5  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17562  10C6  0084               	movwf	4
 17563  10C7  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17564  10C8  1803               	skipnc
 17565  10C9  3E01               	addlw	1
 17566  10CA  0085               	movwf	5
 17567  10CB  0800               	movf	0,w	;code access
 17568  10CC  00A5               	movwf	??_CC2500_InitSetREG
 17569  10CD  0825               	movf	??_CC2500_InitSetREG,w
 17570  10CE  00A7               	movwf	CC2500_InitSetREG@temp2
 17571                           
 17572                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17573  10CF  0827               	movf	CC2500_InitSetREG@temp2,w
 17574  10D0  00A5               	movwf	??_CC2500_InitSetREG
 17575  10D1  0825               	movf	??_CC2500_InitSetREG,w
 17576  10D2  00A2               	movwf	CC2500_WriteREG@value
 17577  10D3  0826               	movf	CC2500_InitSetREG@temp1,w
 17578  10D4  319F  2792  3190   	fcall	_CC2500_WriteREG
 17579  10D7  3001               	movlw	1
 17580  10D8  0020               	movlb	0	; select bank0
 17581  10D9  00A5               	movwf	??_CC2500_InitSetREG
 17582  10DA  0825               	movf	??_CC2500_InitSetREG,w
 17583  10DB  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17584  10DC  28B5               	goto	L10
 17585  10DD                     __end_of_CC2500_InitSetREG:	
 17586                           
 17587                           	psect	text116
 17588  1EB2                     __ptext116:	
 17589 ;; *************** function _CC2500_InitPATable *****************
 17590 ;; Defined at:
 17591 ;;		line 174 in file "../src/CC2500_B1.c"
 17592 ;; Parameters:    Size  Location     Type
 17593 ;;		None
 17594 ;; Auto vars:     Size  Location     Type
 17595 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17596 ;;  temp            1    6[BANK0 ] unsigned char 
 17597 ;; Return value:  Size  Location     Type
 17598 ;;		None               void
 17599 ;; Registers used:
 17600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17601 ;; Tracked objects:
 17602 ;;		On entry : 0/0
 17603 ;;		On exit  : 0/0
 17604 ;;		Unchanged: 0/0
 17605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17607 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17608 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17609 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17610 ;;Total ram usage:        3 bytes
 17611 ;; Hardware stack levels used:    1
 17612 ;; Hardware stack levels required when called:    7
 17613 ;; This function calls:
 17614 ;;		_CC2500_WriteREG
 17615 ;; This function is called by:
 17616 ;;		_CC2500_PowerOnInitial
 17617 ;; This function uses a non-reentrant model
 17618 ;;
 17619                           
 17620                           
 17621                           ;psect for function _CC2500_InitPATable
 17622  1EB2                     _CC2500_InitPATable:	
 17623                           
 17624                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17625                           ;CC2500_B1.c: 176: unsigned char temp;
 17626                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17627                           
 17628                           ;incstack = 0
 17629                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17630  1EB2  0020               	movlb	0	; select bank0
 17631  1EB3  01A7               	clrf	CC2500_InitPATable@loop_d
 17632  1EB4                     L11:	
 17633  1EB4  3008               	movlw	8
 17634  1EB5  0227               	subwf	CC2500_InitPATable@loop_d,w
 17635  1EB6  1803               	btfsc	3,0
 17636  1EB7  0008               	return
 17637                           
 17638                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17639  1EB8  0827               	movf	CC2500_InitPATable@loop_d,w
 17640  1EB9  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17641  1EBA  0084               	movwf	4
 17642  1EBB  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17643  1EBC  1803               	skipnc
 17644  1EBD  3E01               	addlw	1
 17645  1EBE  0085               	movwf	5
 17646  1EBF  0800               	movf	0,w	;code access
 17647  1EC0  00A5               	movwf	??_CC2500_InitPATable
 17648  1EC1  0825               	movf	??_CC2500_InitPATable,w
 17649  1EC2  00A6               	movwf	CC2500_InitPATable@temp
 17650                           
 17651                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17652  1EC3  0826               	movf	CC2500_InitPATable@temp,w
 17653  1EC4  00A5               	movwf	??_CC2500_InitPATable
 17654  1EC5  0825               	movf	??_CC2500_InitPATable,w
 17655  1EC6  00A2               	movwf	CC2500_WriteREG@value
 17656  1EC7  303E               	movlw	62
 17657  1EC8  319F  2792  319E   	fcall	_CC2500_WriteREG
 17658  1ECB  3001               	movlw	1
 17659  1ECC  0020               	movlb	0	; select bank0
 17660  1ECD  00A5               	movwf	??_CC2500_InitPATable
 17661  1ECE  0825               	movf	??_CC2500_InitPATable,w
 17662  1ECF  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17663  1ED0  2EB4               	goto	L11
 17664  1ED1                     __end_of_CC2500_InitPATable:	
 17665                           
 17666                           	psect	text117
 17667  1F92                     __ptext117:	
 17668 ;; *************** function _CC2500_WriteREG *****************
 17669 ;; Defined at:
 17670 ;;		line 251 in file "../src/CC2500_B1.c"
 17671 ;; Parameters:    Size  Location     Type
 17672 ;;  w_addr          1    wreg     unsigned char 
 17673 ;;  value           1    2[BANK0 ] unsigned char 
 17674 ;; Auto vars:     Size  Location     Type
 17675 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17676 ;; Return value:  Size  Location     Type
 17677 ;;		None               void
 17678 ;; Registers used:
 17679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17680 ;; Tracked objects:
 17681 ;;		On entry : 0/0
 17682 ;;		On exit  : 0/0
 17683 ;;		Unchanged: 0/0
 17684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17685 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17687 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17688 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17689 ;;Total ram usage:        3 bytes
 17690 ;; Hardware stack levels used:    1
 17691 ;; Hardware stack levels required when called:    6
 17692 ;; This function calls:
 17693 ;;		_CC2500_WriteByte
 17694 ;;		_Timeout_Counter
 17695 ;;		_set_TimeoutCleared
 17696 ;; This function is called by:
 17697 ;;		_CC2500_InitSetREG
 17698 ;;		_CC2500_InitPATable
 17699 ;; This function uses a non-reentrant model
 17700 ;;
 17701                           
 17702                           
 17703                           ;psect for function _CC2500_WriteREG
 17704  1F92                     _CC2500_WriteREG:	
 17705                           
 17706                           ;incstack = 0
 17707                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17708                           ;CC2500_WriteREG@w_addr stored from wreg
 17709  1F92  0020               	movlb	0	; select bank0
 17710  1F93  00A4               	movwf	CC2500_WriteREG@w_addr
 17711                           
 17712                           ;CC2500_B1.c: 252: RC4 = 0;
 17713  1F94  120E               	bcf	14,4	;volatile
 17714                           
 17715                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17716  1F95  0824               	movf	CC2500_WriteREG@w_addr,w
 17717  1F96  00A3               	movwf	??_CC2500_WriteREG
 17718  1F97  0823               	movf	??_CC2500_WriteREG,w
 17719  1F98  0021               	movlb	1	; select bank1
 17720  1F99  00D0               	movwf	_SPI0Buffer^(0+128)
 17721                           
 17722                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 17723  1F9A  2F9E               	goto	l9565
 17724  1F9B                     l9563:	
 17725                           
 17726                           ;CC2500_B1.c: 255: Timeout_Counter();
 17727  1F9B  319D  259E  319F   	fcall	_Timeout_Counter
 17728  1F9E                     l9565:	
 17729  1F9E  0020               	movlb	0	; select bank0
 17730  1F9F  1D0E               	btfss	14,2	;volatile
 17731  1FA0  2FA4               	goto	l9569
 17732  1FA1  0021               	movlb	1	; select bank1
 17733  1FA2  1D2B               	btfss	(_myMain^(0+128)+11),2
 17734  1FA3  2F9B               	goto	l9563
 17735  1FA4                     l9569:	
 17736                           
 17737                           ;CC2500_B1.c: 256: };
 17738                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17739  1FA4  319A  22FE  319F   	fcall	_set_TimeoutCleared
 17740                           
 17741                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17742  1FA7  319D  25F5  319F   	fcall	_CC2500_WriteByte
 17743                           
 17744                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17745  1FAA  0020               	movlb	0	; select bank0
 17746  1FAB  0822               	movf	CC2500_WriteREG@value,w
 17747  1FAC  00A3               	movwf	??_CC2500_WriteREG
 17748  1FAD  0823               	movf	??_CC2500_WriteREG,w
 17749  1FAE  0021               	movlb	1	; select bank1
 17750  1FAF  00D0               	movwf	_SPI0Buffer^(0+128)
 17751                           
 17752                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17753  1FB0  319D  25F5         	fcall	_CC2500_WriteByte
 17754                           
 17755                           ;CC2500_B1.c: 262: RC4 = 1;
 17756  1FB2  0020               	movlb	0	; select bank0
 17757  1FB3  160E               	bsf	14,4	;volatile
 17758  1FB4  0008               	return
 17759  1FB5                     __end_of_CC2500_WriteREG:	
 17760                           
 17761                           	psect	text118
 17762  1B7C                     __ptext118:	
 17763 ;; *************** function _CC2500_FrequencyCabr *****************
 17764 ;; Defined at:
 17765 ;;		line 201 in file "../src/CC2500_B1.c"
 17766 ;; Parameters:    Size  Location     Type
 17767 ;;		None
 17768 ;; Auto vars:     Size  Location     Type
 17769 ;;		None
 17770 ;; Return value:  Size  Location     Type
 17771 ;;		None               void
 17772 ;; Registers used:
 17773 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17774 ;; Tracked objects:
 17775 ;;		On entry : 0/0
 17776 ;;		On exit  : 0/0
 17777 ;;		Unchanged: 0/0
 17778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17783 ;;Total ram usage:        0 bytes
 17784 ;; Hardware stack levels used:    1
 17785 ;; Hardware stack levels required when called:    7
 17786 ;; This function calls:
 17787 ;;		_CC2500_WriteCommand
 17788 ;;		_DelayTime_1us
 17789 ;; This function is called by:
 17790 ;;		_CC2500_PowerOnInitial
 17791 ;; This function uses a non-reentrant model
 17792 ;;
 17793                           
 17794                           
 17795                           ;psect for function _CC2500_FrequencyCabr
 17796  1B7C                     _CC2500_FrequencyCabr:	
 17797                           
 17798                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17799                           
 17800                           ;incstack = 0
 17801                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17802  1B7C  3033               	movlw	51
 17803  1B7D  319E  2627  319B   	fcall	_CC2500_WriteCommand
 17804                           
 17805                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17806  1B80  30E8               	movlw	232
 17807  1B81  0020               	movlb	0	; select bank0
 17808  1B82  00A0               	movwf	DelayTime_1us@count
 17809  1B83  3003               	movlw	3
 17810  1B84  00A1               	movwf	DelayTime_1us@count+1
 17811  1B85  319F  27DA         	fcall	_DelayTime_1us
 17812  1B87  0008               	return
 17813  1B88                     __end_of_CC2500_FrequencyCabr:	
 17814                           
 17815                           	psect	text119
 17816  1FDA                     __ptext119:	
 17817 ;; *************** function _DelayTime_1us *****************
 17818 ;; Defined at:
 17819 ;;		line 320 in file "../src/CC2500_B1.c"
 17820 ;; Parameters:    Size  Location     Type
 17821 ;;  count           2    0[BANK0 ] int 
 17822 ;; Auto vars:     Size  Location     Type
 17823 ;;  j               2    4[BANK0 ] unsigned int 
 17824 ;;  i               2    2[BANK0 ] unsigned int 
 17825 ;; Return value:  Size  Location     Type
 17826 ;;		None               void
 17827 ;; Registers used:
 17828 ;;		wreg, status,2
 17829 ;; Tracked objects:
 17830 ;;		On entry : 0/0
 17831 ;;		On exit  : 0/0
 17832 ;;		Unchanged: 0/0
 17833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17834 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17835 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17837 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17838 ;;Total ram usage:        6 bytes
 17839 ;; Hardware stack levels used:    1
 17840 ;; Hardware stack levels required when called:    5
 17841 ;; This function calls:
 17842 ;;		Nothing
 17843 ;; This function is called by:
 17844 ;;		_CC2500_PowerRST
 17845 ;;		_CC2500_FrequencyCabr
 17846 ;; This function uses a non-reentrant model
 17847 ;;
 17848                           
 17849                           
 17850                           ;psect for function _DelayTime_1us
 17851  1FDA                     _DelayTime_1us:	
 17852                           
 17853                           ;CC2500_B1.c: 321: unsigned int i, j;
 17854                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17855                           
 17856                           ;incstack = 0
 17857                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17858  1FDA  3001               	movlw	1
 17859  1FDB  0020               	movlb	0	; select bank0
 17860  1FDC  00A2               	movwf	DelayTime_1us@i
 17861  1FDD  3000               	movlw	0
 17862  1FDE  00A3               	movwf	DelayTime_1us@i+1
 17863  1FDF                     l372:	
 17864  1FDF  0821               	movf	DelayTime_1us@count+1,w
 17865  1FE0  0223               	subwf	DelayTime_1us@i+1,w
 17866  1FE1  1D03               	skipz
 17867  1FE2  2FE5               	goto	u10645
 17868  1FE3  0820               	movf	DelayTime_1us@count,w
 17869  1FE4  0222               	subwf	DelayTime_1us@i,w
 17870  1FE5                     u10645:	
 17871  1FE5  1803               	btfsc	3,0
 17872  1FE6  0008               	return
 17873                           
 17874                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17875  1FE7  01A4               	clrf	DelayTime_1us@j
 17876  1FE8  01A5               	clrf	DelayTime_1us@j+1
 17877  1FE9  3000               	movlw	0
 17878  1FEA  0225               	subwf	DelayTime_1us@j+1,w
 17879  1FEB  3002               	movlw	2
 17880  1FEC  1903               	skipnz
 17881  1FED  0224               	subwf	DelayTime_1us@j,w
 17882  1FEE  1803               	btfsc	3,0
 17883  1FEF  2FFB               	goto	l9557
 17884  1FF0                     l9555:	
 17885  1FF0  3001               	movlw	1
 17886  1FF1  07A4               	addwf	DelayTime_1us@j,f
 17887  1FF2  3000               	movlw	0
 17888  1FF3  3DA5               	addwfc	DelayTime_1us@j+1,f
 17889  1FF4  3000               	movlw	0
 17890  1FF5  0225               	subwf	DelayTime_1us@j+1,w
 17891  1FF6  3002               	movlw	2
 17892  1FF7  1903               	skipnz
 17893  1FF8  0224               	subwf	DelayTime_1us@j,w
 17894  1FF9  1C03               	skipc
 17895  1FFA  2FF0               	goto	l9555
 17896  1FFB                     l9557:	
 17897  1FFB  3001               	movlw	1
 17898  1FFC  07A2               	addwf	DelayTime_1us@i,f
 17899  1FFD  3000               	movlw	0
 17900  1FFE  3DA3               	addwfc	DelayTime_1us@i+1,f
 17901  1FFF  2FDF               	goto	l372
 17902  2000                     __end_of_DelayTime_1us:	
 17903                           
 17904                           	psect	text120
 17905  1AF2                     __ptext120:	
 17906 ;; *************** function _CC2500_ClearTXFIFO *****************
 17907 ;; Defined at:
 17908 ;;		line 187 in file "../src/CC2500_B1.c"
 17909 ;; Parameters:    Size  Location     Type
 17910 ;;		None
 17911 ;; Auto vars:     Size  Location     Type
 17912 ;;		None
 17913 ;; Return value:  Size  Location     Type
 17914 ;;		None               void
 17915 ;; Registers used:
 17916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17917 ;; Tracked objects:
 17918 ;;		On entry : 0/0
 17919 ;;		On exit  : 0/0
 17920 ;;		Unchanged: 0/0
 17921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17926 ;;Total ram usage:        0 bytes
 17927 ;; Hardware stack levels used:    1
 17928 ;; Hardware stack levels required when called:    7
 17929 ;; This function calls:
 17930 ;;		_CC2500_WriteCommand
 17931 ;; This function is called by:
 17932 ;;		_CC2500_PowerOnInitial
 17933 ;; This function uses a non-reentrant model
 17934 ;;
 17935                           
 17936                           
 17937                           ;psect for function _CC2500_ClearTXFIFO
 17938  1AF2                     _CC2500_ClearTXFIFO:	
 17939                           
 17940                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17941                           
 17942                           ;incstack = 0
 17943                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17944  1AF2  303B               	movlw	59
 17945  1AF3  319E  2627         	fcall	_CC2500_WriteCommand
 17946  1AF5  0008               	return
 17947  1AF6                     __end_of_CC2500_ClearTXFIFO:	
 17948                           
 17949                           	psect	text121
 17950  1AEE                     __ptext121:	
 17951 ;; *************** function _CC2500_ClearRXFIFO *****************
 17952 ;; Defined at:
 17953 ;;		line 194 in file "../src/CC2500_B1.c"
 17954 ;; Parameters:    Size  Location     Type
 17955 ;;		None
 17956 ;; Auto vars:     Size  Location     Type
 17957 ;;		None
 17958 ;; Return value:  Size  Location     Type
 17959 ;;		None               void
 17960 ;; Registers used:
 17961 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17962 ;; Tracked objects:
 17963 ;;		On entry : 0/0
 17964 ;;		On exit  : 0/0
 17965 ;;		Unchanged: 0/0
 17966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17971 ;;Total ram usage:        0 bytes
 17972 ;; Hardware stack levels used:    1
 17973 ;; Hardware stack levels required when called:    7
 17974 ;; This function calls:
 17975 ;;		_CC2500_WriteCommand
 17976 ;; This function is called by:
 17977 ;;		_CC2500_PowerOnInitial
 17978 ;; This function uses a non-reentrant model
 17979 ;;
 17980                           
 17981                           
 17982                           ;psect for function _CC2500_ClearRXFIFO
 17983  1AEE                     _CC2500_ClearRXFIFO:	
 17984                           
 17985                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17986                           
 17987                           ;incstack = 0
 17988                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17989  1AEE  303A               	movlw	58
 17990  1AEF  319E  2627         	fcall	_CC2500_WriteCommand
 17991  1AF1  0008               	return
 17992  1AF2                     __end_of_CC2500_ClearRXFIFO:	
 17993                           
 17994                           	psect	text122
 17995  1E27                     __ptext122:	
 17996 ;; *************** function _CC2500_WriteCommand *****************
 17997 ;; Defined at:
 17998 ;;		line 285 in file "../src/CC2500_B1.c"
 17999 ;; Parameters:    Size  Location     Type
 18000 ;;  command         1    wreg     unsigned char 
 18001 ;; Auto vars:     Size  Location     Type
 18002 ;;  command         1    3[BANK0 ] unsigned char 
 18003 ;; Return value:  Size  Location     Type
 18004 ;;		None               void
 18005 ;; Registers used:
 18006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18007 ;; Tracked objects:
 18008 ;;		On entry : 0/0
 18009 ;;		On exit  : 0/0
 18010 ;;		Unchanged: 0/0
 18011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18015 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18016 ;;Total ram usage:        2 bytes
 18017 ;; Hardware stack levels used:    1
 18018 ;; Hardware stack levels required when called:    6
 18019 ;; This function calls:
 18020 ;;		_CC2500_WriteByte
 18021 ;;		_Timeout_Counter
 18022 ;;		_set_TimeoutCleared
 18023 ;; This function is called by:
 18024 ;;		_CC2500_TxData
 18025 ;;		_CC2500_ClearTXFIFO
 18026 ;;		_CC2500_ClearRXFIFO
 18027 ;;		_CC2500_FrequencyCabr
 18028 ;;		_CC2500_SIDLEMode
 18029 ;;		_setRF_Main
 18030 ;;		_RF_RxDisable
 18031 ;; This function uses a non-reentrant model
 18032 ;;
 18033                           
 18034                           
 18035                           ;psect for function _CC2500_WriteCommand
 18036  1E27                     _CC2500_WriteCommand:	
 18037                           
 18038                           ;incstack = 0
 18039                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18040                           ;CC2500_WriteCommand@command stored from wreg
 18041  1E27  0020               	movlb	0	; select bank0
 18042  1E28  00A3               	movwf	CC2500_WriteCommand@command
 18043                           
 18044                           ;CC2500_B1.c: 286: RC4 = 0;
 18045  1E29  120E               	bcf	14,4	;volatile
 18046                           
 18047                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 18048  1E2A  0823               	movf	CC2500_WriteCommand@command,w
 18049  1E2B  00A2               	movwf	??_CC2500_WriteCommand
 18050  1E2C  0822               	movf	??_CC2500_WriteCommand,w
 18051  1E2D  0021               	movlb	1	; select bank1
 18052  1E2E  00D0               	movwf	_SPI0Buffer^(0+128)
 18053                           
 18054                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 18055  1E2F  2E33               	goto	l9239
 18056  1E30                     l9237:	
 18057                           
 18058                           ;CC2500_B1.c: 290: Timeout_Counter();
 18059  1E30  319D  259E  319E   	fcall	_Timeout_Counter
 18060  1E33                     l9239:	
 18061  1E33  0020               	movlb	0	; select bank0
 18062  1E34  1D0E               	btfss	14,2	;volatile
 18063  1E35  2E39               	goto	l9243
 18064  1E36  0021               	movlb	1	; select bank1
 18065  1E37  1D2B               	btfss	(_myMain^(0+128)+11),2
 18066  1E38  2E30               	goto	l9237
 18067  1E39                     l9243:	
 18068                           
 18069                           ;CC2500_B1.c: 291: };
 18070                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 18071  1E39  319A  22FE  319E   	fcall	_set_TimeoutCleared
 18072                           
 18073                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 18074  1E3C  319D  25F5         	fcall	_CC2500_WriteByte
 18075                           
 18076                           ;CC2500_B1.c: 295: RC4 = 1;
 18077  1E3E  0020               	movlb	0	; select bank0
 18078  1E3F  160E               	bsf	14,4	;volatile
 18079  1E40  0008               	return
 18080  1E41                     __end_of_CC2500_WriteCommand:	
 18081                           
 18082                           	psect	text123
 18083  1AFE                     __ptext123:	
 18084 ;; *************** function _set_TimeoutCleared *****************
 18085 ;; Defined at:
 18086 ;;		line 283 in file "../src/Main_B1.c"
 18087 ;; Parameters:    Size  Location     Type
 18088 ;;		None
 18089 ;; Auto vars:     Size  Location     Type
 18090 ;;		None
 18091 ;; Return value:  Size  Location     Type
 18092 ;;		None               void
 18093 ;; Registers used:
 18094 ;;		status,2
 18095 ;; Tracked objects:
 18096 ;;		On entry : 0/0
 18097 ;;		On exit  : 0/0
 18098 ;;		Unchanged: 0/0
 18099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18104 ;;Total ram usage:        0 bytes
 18105 ;; Hardware stack levels used:    1
 18106 ;; Hardware stack levels required when called:    5
 18107 ;; This function calls:
 18108 ;;		Nothing
 18109 ;; This function is called by:
 18110 ;;		_CC2500_TxData
 18111 ;;		_CC2500_RxData
 18112 ;;		_CC2500_PowerRST
 18113 ;;		_CC2500_WriteREG
 18114 ;;		_CC2500_WriteCommand
 18115 ;;		_CC2500_ReadStatus
 18116 ;;		_getAD
 18117 ;;		_TouchPower
 18118 ;;		_CC2500_ReadREG
 18119 ;; This function uses a non-reentrant model
 18120 ;;
 18121                           
 18122                           
 18123                           ;psect for function _set_TimeoutCleared
 18124  1AFE                     _set_TimeoutCleared:	
 18125                           
 18126                           ;Main_B1.c: 284: myMain.Timeout = 0;
 18127                           
 18128                           ;incstack = 0
 18129                           ; Regs used in _set_TimeoutCleared: [status,2]
 18130  1AFE  0021               	movlb	1	; select bank1
 18131  1AFF  112B               	bcf	(_myMain^(0+128)+11),2
 18132                           
 18133                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 18134  1B00  01AC               	clrf	(_myMain^(0+128)+12)
 18135  1B01  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18136  1B02  0008               	return
 18137  1B03                     __end_of_set_TimeoutCleared:	
 18138                           
 18139                           	psect	text124
 18140  1D9E                     __ptext124:	
 18141 ;; *************** function _Timeout_Counter *****************
 18142 ;; Defined at:
 18143 ;;		line 274 in file "../src/Main_B1.c"
 18144 ;; Parameters:    Size  Location     Type
 18145 ;;		None
 18146 ;; Auto vars:     Size  Location     Type
 18147 ;;		None
 18148 ;; Return value:  Size  Location     Type
 18149 ;;		None               void
 18150 ;; Registers used:
 18151 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18152 ;; Tracked objects:
 18153 ;;		On entry : 0/0
 18154 ;;		On exit  : 0/0
 18155 ;;		Unchanged: 0/0
 18156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18161 ;;Total ram usage:        0 bytes
 18162 ;; Hardware stack levels used:    1
 18163 ;; Hardware stack levels required when called:    5
 18164 ;; This function calls:
 18165 ;;		Nothing
 18166 ;; This function is called by:
 18167 ;;		_CC2500_TxData
 18168 ;;		_CC2500_RxData
 18169 ;;		_CC2500_PowerRST
 18170 ;;		_CC2500_WriteREG
 18171 ;;		_CC2500_WriteCommand
 18172 ;;		_CC2500_ReadStatus
 18173 ;;		_getAD
 18174 ;;		_TouchPower
 18175 ;;		_CC2500_ReadREG
 18176 ;; This function uses a non-reentrant model
 18177 ;;
 18178                           
 18179                           
 18180                           ;psect for function _Timeout_Counter
 18181  1D9E                     _Timeout_Counter:	
 18182                           
 18183                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 18184                           
 18185                           ;incstack = 0
 18186                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18187  1D9E  3001               	movlw	1
 18188  1D9F  0021               	movlb	1	; select bank1
 18189  1DA0  07AC               	addwf	(_myMain^(0+128)+12),f
 18190  1DA1  3000               	movlw	0
 18191  1DA2  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 18192                           
 18193                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 18194  1DA3  300C               	movlw	12
 18195  1DA4  3EA0               	addlw	_myMain& (0+255)
 18196  1DA5  0086               	movwf	6
 18197  1DA6  0187               	clrf	7
 18198  1DA7  3F40               	moviw [0]fsr1
 18199  1DA8  3A10               	xorlw	16
 18200  1DA9  1D03               	skipz
 18201  1DAA  2DAD               	goto	u9935
 18202  1DAB  3F41               	moviw [1]fsr1
 18203  1DAC  3A27               	xorlw	39
 18204  1DAD                     u9935:	
 18205  1DAD  1D03               	skipz
 18206  1DAE  0008               	return
 18207                           
 18208                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 18209  1DAF  01AC               	clrf	(_myMain^(0+128)+12)
 18210  1DB0  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18211                           
 18212                           ;Main_B1.c: 278: myMain.Timeout = 1;
 18213  1DB1  152B               	bsf	(_myMain^(0+128)+11),2
 18214  1DB2  0008               	return
 18215  1DB3                     __end_of_Timeout_Counter:	
 18216                           
 18217                           	psect	text125
 18218  1DF5                     __ptext125:	
 18219 ;; *************** function _CC2500_WriteByte *****************
 18220 ;; Defined at:
 18221 ;;		line 219 in file "../src/CC2500_B1.c"
 18222 ;; Parameters:    Size  Location     Type
 18223 ;;		None
 18224 ;; Auto vars:     Size  Location     Type
 18225 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18226 ;; Return value:  Size  Location     Type
 18227 ;;		None               void
 18228 ;; Registers used:
 18229 ;;		wreg, status,2, status,0
 18230 ;; Tracked objects:
 18231 ;;		On entry : 0/0
 18232 ;;		On exit  : 0/0
 18233 ;;		Unchanged: 0/0
 18234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18238 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18239 ;;Total ram usage:        2 bytes
 18240 ;; Hardware stack levels used:    1
 18241 ;; Hardware stack levels required when called:    5
 18242 ;; This function calls:
 18243 ;;		Nothing
 18244 ;; This function is called by:
 18245 ;;		_CC2500_TxData
 18246 ;;		_CC2500_RxData
 18247 ;;		_CC2500_PowerRST
 18248 ;;		_CC2500_WriteREG
 18249 ;;		_CC2500_WriteCommand
 18250 ;;		_CC2500_ReadStatus
 18251 ;;		_CC2500_ReadREG
 18252 ;; This function uses a non-reentrant model
 18253 ;;
 18254                           
 18255                           
 18256                           ;psect for function _CC2500_WriteByte
 18257  1DF5                     _CC2500_WriteByte:	
 18258                           
 18259                           ;CC2500_B1.c: 220: unsigned char loop_a;
 18260                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 18261                           
 18262                           ;incstack = 0
 18263                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18264  1DF5  0020               	movlb	0	; select bank0
 18265  1DF6  01A1               	clrf	CC2500_WriteByte@loop_a
 18266  1DF7                     L12:	
 18267  1DF7  3008               	movlw	8
 18268  1DF8  0221               	subwf	CC2500_WriteByte@loop_a,w
 18269  1DF9  1803               	btfsc	3,0
 18270  1DFA  0008               	return
 18271                           
 18272                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 18273  1DFB  0021               	movlb	1	; select bank1
 18274  1DFC  1FD0               	btfss	_SPI0Buffer^(0+128),7
 18275  1DFD  2E01               	goto	l328
 18276                           
 18277                           ;CC2500_B1.c: 223: RC0 = 1;
 18278  1DFE  0020               	movlb	0	; select bank0
 18279  1DFF  140E               	bsf	14,0	;volatile
 18280  1E00  2E03               	goto	l329
 18281  1E01                     l328:	
 18282                           
 18283                           ;CC2500_B1.c: 224: else
 18284                           ;CC2500_B1.c: 225: RC0 = 0;
 18285  1E01  0020               	movlb	0	; select bank0
 18286  1E02  100E               	bcf	14,0	;volatile
 18287  1E03                     l329:	
 18288                           
 18289                           ;CC2500_B1.c: 226: RC1 = 1;
 18290  1E03  148E               	bsf	14,1	;volatile
 18291                           
 18292                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 18293  1E04  1003               	clrc
 18294  1E05  0021               	movlb	1	; select bank1
 18295  1E06  0DD0               	rlf	_SPI0Buffer^(0+128),f
 18296                           
 18297                           ;CC2500_B1.c: 228: RC1 = 0;
 18298  1E07  0020               	movlb	0	; select bank0
 18299  1E08  108E               	bcf	14,1	;volatile
 18300  1E09  3001               	movlw	1
 18301  1E0A  00A0               	movwf	??_CC2500_WriteByte
 18302  1E0B  0820               	movf	??_CC2500_WriteByte,w
 18303  1E0C  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18304  1E0D  2DF7               	goto	L12
 18305  1E0E                     __end_of_CC2500_WriteByte:	
 18306                           
 18307                           	psect	text126
 18308  1424                     __ptext126:	
 18309 ;; *************** function _Buzzer_Main *****************
 18310 ;; Defined at:
 18311 ;;		line 46 in file "../src/Buzzer_B1.c"
 18312 ;; Parameters:    Size  Location     Type
 18313 ;;		None
 18314 ;; Auto vars:     Size  Location     Type
 18315 ;;		None
 18316 ;; Return value:  Size  Location     Type
 18317 ;;		None               void
 18318 ;; Registers used:
 18319 ;;		wreg, status,2, status,0
 18320 ;; Tracked objects:
 18321 ;;		On entry : 0/0
 18322 ;;		On exit  : 0/0
 18323 ;;		Unchanged: 0/0
 18324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18327 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18328 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18329 ;;Total ram usage:        1 bytes
 18330 ;; Hardware stack levels used:    1
 18331 ;; Hardware stack levels required when called:    5
 18332 ;; This function calls:
 18333 ;;		Nothing
 18334 ;; This function is called by:
 18335 ;;		_main
 18336 ;; This function uses a non-reentrant model
 18337 ;;
 18338                           
 18339                           
 18340                           ;psect for function _Buzzer_Main
 18341  1424                     _Buzzer_Main:	
 18342                           
 18343                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18344                           
 18345                           ;incstack = 0
 18346                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18347  1424  0021               	movlb	1	; select bank1
 18348  1425  1CAE               	btfss	_Buz1^(0+128),1
 18349  1426  0008               	return
 18350                           
 18351                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18352  1427  3001               	movlw	1
 18353  1428  07AF               	addwf	(_Buz1^(0+128)+1),f
 18354  1429  3000               	movlw	0
 18355  142A  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18356                           
 18357                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18358  142B  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18359  142C  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18360  142D  1D03               	skipz
 18361  142E  2C31               	goto	u12035
 18362  142F  0834               	movf	(_Buz1^(0+128)+6),w
 18363  1430  022F               	subwf	(_Buz1^(0+128)+1),w
 18364  1431                     u12035:	
 18365  1431  1C03               	skipc
 18366  1432  0008               	return
 18367                           
 18368                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18369  1433  01AF               	clrf	(_Buz1^(0+128)+1)
 18370  1434  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18371                           
 18372                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18373  1435  12AE               	bcf	_Buz1^(0+128),5
 18374  1436  0020               	movlb	0	; select bank0
 18375  1437  1D8D               	btfss	13,3	;volatile
 18376  1438  2C3B               	goto	l10425
 18377  1439  0021               	movlb	1	; select bank1
 18378  143A  16AE               	bsf	_Buz1^(0+128),5
 18379  143B                     l10425:	
 18380                           
 18381                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18382  143B  0021               	movlb	1	; select bank1
 18383  143C  1AAE               	btfsc	_Buz1^(0+128),5
 18384  143D  2C67               	goto	l106
 18385                           
 18386                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18387  143E  08B1               	movf	(_Buz1^(0+128)+3),f
 18388  143F  1D03               	skipz
 18389  1440  2C63               	goto	l107
 18390                           
 18391                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18392  1441  1DAE               	btfss	_Buz1^(0+128),3
 18393  1442  2C51               	goto	l108
 18394                           
 18395                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18396  1443  11AE               	bcf	_Buz1^(0+128),3
 18397                           
 18398                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18399  1444  0832               	movf	(_Buz1^(0+128)+4),w
 18400  1445  0020               	movlb	0	; select bank0
 18401  1446  00A0               	movwf	??_Buzzer_Main
 18402  1447  0820               	movf	??_Buzzer_Main,w
 18403  1448  0021               	movlb	1	; select bank1
 18404  1449  00B1               	movwf	(_Buz1^(0+128)+3)
 18405                           
 18406                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18407  144A  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18408  144B  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18409  144C  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18410  144D  0836               	movf	(_Buz1^(0+128)+8),w
 18411  144E  01B4               	clrf	(_Buz1^(0+128)+6)
 18412  144F  07B4               	addwf	(_Buz1^(0+128)+6),f
 18413                           
 18414                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18415  1450  0008               	return
 18416  1451                     l108:	
 18417  1451  1E2E               	btfss	_Buz1^(0+128),4
 18418  1452  2C61               	goto	l110
 18419                           
 18420                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18421  1453  122E               	bcf	_Buz1^(0+128),4
 18422                           
 18423                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18424  1454  0833               	movf	(_Buz1^(0+128)+5),w
 18425  1455  0020               	movlb	0	; select bank0
 18426  1456  00A0               	movwf	??_Buzzer_Main
 18427  1457  0820               	movf	??_Buzzer_Main,w
 18428  1458  0021               	movlb	1	; select bank1
 18429  1459  00B1               	movwf	(_Buz1^(0+128)+3)
 18430                           
 18431                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18432  145A  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18433  145B  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18434  145C  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18435  145D  0838               	movf	(_Buz1^(0+128)+10),w
 18436  145E  01B4               	clrf	(_Buz1^(0+128)+6)
 18437  145F  07B4               	addwf	(_Buz1^(0+128)+6),f
 18438                           
 18439                           ;Buzzer_B1.c: 62: } else {
 18440  1460  0008               	return
 18441  1461                     l110:	
 18442                           
 18443                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18444  1461  10AE               	bcf	_Buz1^(0+128),1
 18445                           
 18446                           ;Buzzer_B1.c: 64: }
 18447                           ;Buzzer_B1.c: 65: } else {
 18448  1462  0008               	return
 18449  1463                     l107:	
 18450                           
 18451                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18452  1463  16AE               	bsf	_Buz1^(0+128),5
 18453                           
 18454                           ;Buzzer_B1.c: 68: RB3 = 1;
 18455  1464  0020               	movlb	0	; select bank0
 18456  1465  158D               	bsf	13,3	;volatile
 18457                           
 18458                           ;Buzzer_B1.c: 69: }
 18459                           ;Buzzer_B1.c: 70: } else {
 18460  1466  0008               	return
 18461  1467                     l106:	
 18462                           
 18463                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18464  1467  12AE               	bcf	_Buz1^(0+128),5
 18465                           
 18466                           ;Buzzer_B1.c: 73: RB3 = 0;
 18467  1468  0020               	movlb	0	; select bank0
 18468  1469  118D               	bcf	13,3	;volatile
 18469                           
 18470                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18471  146A  3001               	movlw	1
 18472  146B  0021               	movlb	1	; select bank1
 18473  146C  02B1               	subwf	(_Buz1^(0+128)+3),f
 18474  146D  0008               	return
 18475  146E                     __end_of_Buzzer_Main:	
 18476                           
 18477                           	psect	text127
 18478  1ADC                     __ptext127:	
 18479 ;; *************** function _Buzzer_Initialization *****************
 18480 ;; Defined at:
 18481 ;;		line 11 in file "../src/Buzzer_B1.c"
 18482 ;; Parameters:    Size  Location     Type
 18483 ;;		None
 18484 ;; Auto vars:     Size  Location     Type
 18485 ;;		None
 18486 ;; Return value:  Size  Location     Type
 18487 ;;		None               void
 18488 ;; Registers used:
 18489 ;;		None
 18490 ;; Tracked objects:
 18491 ;;		On entry : 0/0
 18492 ;;		On exit  : 0/0
 18493 ;;		Unchanged: 0/0
 18494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18499 ;;Total ram usage:        0 bytes
 18500 ;; Hardware stack levels used:    1
 18501 ;; Hardware stack levels required when called:    5
 18502 ;; This function calls:
 18503 ;;		Nothing
 18504 ;; This function is called by:
 18505 ;;		_main
 18506 ;; This function uses a non-reentrant model
 18507 ;;
 18508                           
 18509                           
 18510                           ;psect for function _Buzzer_Initialization
 18511  1ADC                     _Buzzer_Initialization:	
 18512                           
 18513                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18514                           
 18515                           ;incstack = 0
 18516                           ; Regs used in _Buzzer_Initialization: []
 18517  1ADC  0021               	movlb	1	; select bank1
 18518  1ADD  142E               	bsf	_Buz1^(0+128),0
 18519  1ADE  0008               	return
 18520  1ADF                     __end_of_Buzzer_Initialization:	
 18521                           
 18522                           	psect	intentry
 18523  0004                     __pintentry:	
 18524 ;; *************** function _ISR *****************
 18525 ;; Defined at:
 18526 ;;		line 107 in file "../src/MCU_B1.c"
 18527 ;; Parameters:    Size  Location     Type
 18528 ;;		None
 18529 ;; Auto vars:     Size  Location     Type
 18530 ;;		None
 18531 ;; Return value:  Size  Location     Type
 18532 ;;		None               void
 18533 ;; Registers used:
 18534 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18535 ;; Tracked objects:
 18536 ;;		On entry : 0/0
 18537 ;;		On exit  : 0/0
 18538 ;;		Unchanged: 0/0
 18539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18542 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18543 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18544 ;;Total ram usage:        1 bytes
 18545 ;; Hardware stack levels used:    1
 18546 ;; Hardware stack levels required when called:    4
 18547 ;; This function calls:
 18548 ;;		_IOC_ISR
 18549 ;;		_TMR1_ISR
 18550 ;; This function is called by:
 18551 ;;		Interrupt level 1
 18552 ;; This function uses a non-reentrant model
 18553 ;;
 18554                           
 18555  0004                     _ISR:	
 18556                           
 18557                           ;incstack = 0
 18558                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18559  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18560  0005  3180               	pagesel	$
 18561  0006  0020               	movlb	0	; select bank0
 18562  0007  087F               	movf	127,w
 18563  0008  00F4               	movwf	??_ISR
 18564                           
 18565                           ;MCU_B1.c: 109: IOC_ISR();
 18566  0009  319B  23F7  3180   	fcall	_IOC_ISR
 18567                           
 18568                           ;MCU_B1.c: 111: ;;
 18569                           ;MCU_B1.c: 113: TMR1_ISR();
 18570  000C  3190  208A         	fcall	_TMR1_ISR
 18571  000E  0874               	movf	??_ISR,w
 18572  000F  0020               	movlb	0	; select bank0
 18573  0010  00FF               	movwf	127
 18574  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18575  0012  0009               	retfie
 18576  0013                     __end_of_ISR:	
 18577                           
 18578                           	psect	text129
 18579  108A                     __ptext129:	
 18580 ;; *************** function _TMR1_ISR *****************
 18581 ;; Defined at:
 18582 ;;		line 209 in file "../src/MCU_B1.c"
 18583 ;; Parameters:    Size  Location     Type
 18584 ;;		None
 18585 ;; Auto vars:     Size  Location     Type
 18586 ;;		None
 18587 ;; Return value:  Size  Location     Type
 18588 ;;		None               void
 18589 ;; Registers used:
 18590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18591 ;; Tracked objects:
 18592 ;;		On entry : 0/0
 18593 ;;		On exit  : 0/0
 18594 ;;		Unchanged: 0/0
 18595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18600 ;;Total ram usage:        0 bytes
 18601 ;; Hardware stack levels used:    1
 18602 ;; Hardware stack levels required when called:    2
 18603 ;; This function calls:
 18604 ;;		_setDimmerLights_IntrControl
 18605 ;; This function is called by:
 18606 ;;		_ISR
 18607 ;; This function uses a non-reentrant model
 18608 ;;
 18609                           
 18610                           
 18611                           ;psect for function _TMR1_ISR
 18612  108A                     _TMR1_ISR:	
 18613                           
 18614                           ;MCU_B1.c: 211: if (TMR1IE == 1 && TMR1IF == 1) {
 18615                           
 18616                           ;incstack = 0
 18617                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18618  108A  0021               	movlb	1	; select bank1
 18619  108B  1C11               	btfss	17,0	;volatile
 18620  108C  0008               	return
 18621  108D  0020               	movlb	0	; select bank0
 18622  108E  1C11               	btfss	17,0	;volatile
 18623  108F  0008               	return
 18624                           
 18625                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 18626  1090  30FA               	movlw	250
 18627  1091  0097               	movwf	23	;volatile
 18628                           
 18629                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 18630  1092  3038               	movlw	56
 18631  1093  0096               	movwf	22	;volatile
 18632                           
 18633                           ;MCU_B1.c: 214: TMR1IF = 0;
 18634  1094  1011               	bcf	17,0	;volatile
 18635                           
 18636                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18637  1095  3001               	movlw	1
 18638  1096  3183  2368  3190   	fcall	_setDimmerLights_IntrControl
 18639                           
 18640                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18641  1099  3002               	movlw	2
 18642  109A  3183  2368  3190   	fcall	_setDimmerLights_IntrControl
 18643                           
 18644                           ;MCU_B1.c: 235: Timer1.Count++;
 18645  109D  3001               	movlw	1
 18646  109E  0022               	movlb	2	; select bank2
 18647  109F  07A1               	addwf	(_Timer1^(0+256)+1),f
 18648  10A0  3000               	movlw	0
 18649  10A1  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18650                           
 18651                           ;MCU_B1.c: 236: if (Timer1.Count == 100) {
 18652  10A2  3001               	movlw	1
 18653  10A3  3E20               	addlw	_Timer1& (0+255)
 18654  10A4  0086               	movwf	6
 18655  10A5  3001               	movlw	1	; select bank2/3
 18656  10A6  0087               	movwf	7
 18657  10A7  3F40               	moviw [0]fsr1
 18658  10A8  3A64               	xorlw	100
 18659  10A9  1D03               	skipz
 18660  10AA  28AD               	goto	u803_25
 18661  10AB  3F41               	moviw [1]fsr1
 18662  10AC  3A00               	xorlw	0
 18663  10AD                     u803_25:	
 18664  10AD  1D03               	skipz
 18665  10AE  0008               	return
 18666                           
 18667                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18668  10AF  01A1               	clrf	(_Timer1^(0+256)+1)
 18669  10B0  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18670                           
 18671                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18672  10B1  1420               	bsf	_Timer1^(0+256),0
 18673  10B2  0008               	return
 18674  10B3                     __end_of_TMR1_ISR:	
 18675                           
 18676                           	psect	text130
 18677  0368                     __ptext130:	
 18678 ;; *************** function _setDimmerLights_IntrControl *****************
 18679 ;; Defined at:
 18680 ;;		line 96 in file "../src/Dimmer_B1.c"
 18681 ;; Parameters:    Size  Location     Type
 18682 ;;  lights          1    wreg     unsigned char 
 18683 ;; Auto vars:     Size  Location     Type
 18684 ;;  lights          1    3[COMMON] unsigned char 
 18685 ;; Return value:  Size  Location     Type
 18686 ;;		None               void
 18687 ;; Registers used:
 18688 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18689 ;; Tracked objects:
 18690 ;;		On entry : 0/0
 18691 ;;		On exit  : 0/0
 18692 ;;		Unchanged: 0/0
 18693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18695 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18696 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18697 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18698 ;;Total ram usage:        2 bytes
 18699 ;; Hardware stack levels used:    1
 18700 ;; Hardware stack levels required when called:    1
 18701 ;; This function calls:
 18702 ;;		_DimmerIntrPointSelect
 18703 ;; This function is called by:
 18704 ;;		_TMR1_ISR
 18705 ;; This function uses a non-reentrant model
 18706 ;;
 18707                           
 18708                           
 18709                           ;psect for function _setDimmerLights_IntrControl
 18710  0368                     _setDimmerLights_IntrControl:	
 18711                           
 18712                           ;incstack = 0
 18713                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18714                           ;setDimmerLights_IntrControl@lights stored from wreg
 18715  0368  00F3               	movwf	setDimmerLights_IntrControl@lights
 18716                           
 18717                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18718  0369  0873               	movf	setDimmerLights_IntrControl@lights,w
 18719  036A  319C  2458  3183   	fcall	_DimmerIntrPointSelect
 18720                           
 18721                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18722  036D  0876               	movf	_DimmerLightsIntr,w
 18723  036E  3E02               	addlw	2
 18724  036F  0086               	movwf	6
 18725  0370  3001               	movlw	1	; select bank2/3
 18726  0371  0087               	movwf	7
 18727  0372  1D01               	btfss	1,2
 18728  0373  2B92               	goto	i1l7319
 18729                           
 18730                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18731  0374  3001               	movlw	1
 18732  0375  00F2               	movwf	??_setDimmerLights_IntrControl
 18733  0376  0876               	movf	_DimmerLightsIntr,w
 18734  0377  3E03               	addlw	3
 18735  0378  0086               	movwf	6
 18736  0379  3001               	movlw	1	; select bank2/3
 18737  037A  0087               	movwf	7
 18738  037B  0872               	movf	??_setDimmerLights_IntrControl,w
 18739  037C  0781               	addwf	1,f
 18740                           
 18741                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(70*0.8)) + 1) {
 18742  037D  0876               	movf	_DimmerLightsIntr,w
 18743  037E  3E03               	addlw	3
 18744  037F  0086               	movwf	6
 18745  0380  3001               	movlw	1	; select bank2/3
 18746  0381  0087               	movwf	7
 18747  0382  3039               	movlw	57
 18748  0383  0201               	subwf	1,w
 18749  0384  1C03               	skipc
 18750  0385  2B92               	goto	i1l7319
 18751                           
 18752                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 18753  0386  0876               	movf	_DimmerLightsIntr,w
 18754  0387  3E03               	addlw	3
 18755  0388  0086               	movwf	6
 18756  0389  3001               	movlw	1	; select bank2/3
 18757  038A  0087               	movwf	7
 18758  038B  0181               	clrf	1
 18759                           
 18760                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 18761  038C  0876               	movf	_DimmerLightsIntr,w
 18762  038D  3E02               	addlw	2
 18763  038E  0086               	movwf	6
 18764  038F  3001               	movlw	1	; select bank2/3
 18765  0390  0087               	movwf	7
 18766  0391  1101               	bcf	1,2
 18767  0392                     i1l7319:	
 18768                           
 18769                           ;Dimmer_B1.c: 241: }
 18770                           ;Dimmer_B1.c: 242: }
 18771                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 18772  0392  0A76               	incf	_DimmerLightsIntr,w
 18773  0393  0086               	movwf	6
 18774  0394  3001               	movlw	1	; select bank2/3
 18775  0395  0087               	movwf	7
 18776  0396  1C01               	btfss	1,0
 18777  0397  2BC9               	goto	i1l7335
 18778                           
 18779                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18780  0398  0876               	movf	_DimmerLightsIntr,w
 18781  0399  3E03               	addlw	3
 18782  039A  0086               	movwf	6
 18783  039B  3001               	movlw	1	; select bank2/3
 18784  039C  0087               	movwf	7
 18785  039D  0876               	movf	_DimmerLightsIntr,w
 18786  039E  3E04               	addlw	4
 18787  039F  0084               	movwf	4
 18788  03A0  3001               	movlw	1	; select bank2/3
 18789  03A1  0085               	movwf	5
 18790  03A2  0800               	movf	0,w
 18791  03A3  0201               	subwf	1,w
 18792  03A4  1C03               	skipc
 18793  03A5  0008               	return
 18794                           
 18795                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 18796  03A6  0A76               	incf	_DimmerLightsIntr,w
 18797  03A7  0086               	movwf	6
 18798  03A8  3001               	movlw	1	; select bank2/3
 18799  03A9  0087               	movwf	7
 18800  03AA  1001               	bcf	1,0
 18801                           
 18802                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 18803  03AB  0A76               	incf	_DimmerLightsIntr,w
 18804  03AC  0086               	movwf	6
 18805  03AD  3001               	movlw	1	; select bank2/3
 18806  03AE  0087               	movwf	7
 18807  03AF  1581               	bsf	1,3
 18808                           
 18809                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 18810  03B0  0876               	movf	_DimmerLightsIntr,w
 18811  03B1  0086               	movwf	6
 18812  03B2  3001               	movlw	1	; select bank2/3
 18813  03B3  0087               	movwf	7
 18814  03B4  1C01               	btfss	1,0
 18815  03B5  0008               	return
 18816                           
 18817                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 18818  03B6  0876               	movf	_DimmerLightsIntr,w
 18819  03B7  0086               	movwf	6
 18820  03B8  3001               	movlw	1	; select bank2/3
 18821  03B9  0087               	movwf	7
 18822  03BA  1001               	bcf	1,0
 18823                           
 18824                           ;Dimmer_B1.c: 252: if (lights == 1) {
 18825  03BB  0873               	movf	setDimmerLights_IntrControl@lights,w
 18826  03BC  3A01               	xorlw	1
 18827  03BD  1D03               	skipz
 18828  03BE  2BC2               	goto	i1l7331
 18829                           
 18830                           ;Dimmer_B1.c: 253: RA7 = 0;
 18831  03BF  0020               	movlb	0	; select bank0
 18832  03C0  138C               	bcf	12,7	;volatile
 18833                           
 18834                           ;Dimmer_B1.c: 255: }
 18835  03C1  0008               	return
 18836  03C2                     i1l7331:	
 18837                           
 18838                           ;Dimmer_B1.c: 258: else if (lights == 2) {
 18839  03C2  0873               	movf	setDimmerLights_IntrControl@lights,w
 18840  03C3  3A02               	xorlw	2
 18841  03C4  1D03               	skipz
 18842  03C5  0008               	return
 18843                           
 18844                           ;Dimmer_B1.c: 259: RB4 = 0;
 18845  03C6  0020               	movlb	0	; select bank0
 18846  03C7  120D               	bcf	13,4	;volatile
 18847                           
 18848                           ;Dimmer_B1.c: 260: }
 18849                           ;Dimmer_B1.c: 262: }
 18850                           ;Dimmer_B1.c: 263: }
 18851                           ;Dimmer_B1.c: 264: } else {
 18852  03C8  0008               	return
 18853  03C9                     i1l7335:	
 18854                           
 18855                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 18856  03C9  0A76               	incf	_DimmerLightsIntr,w
 18857  03CA  0086               	movwf	6
 18858  03CB  3001               	movlw	1	; select bank2/3
 18859  03CC  0087               	movwf	7
 18860  03CD  1D81               	btfss	1,3
 18861  03CE  0008               	return
 18862                           
 18863                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 18864  03CF  0A76               	incf	_DimmerLightsIntr,w
 18865  03D0  0086               	movwf	6
 18866  03D1  3001               	movlw	1	; select bank2/3
 18867  03D2  0087               	movwf	7
 18868  03D3  1181               	bcf	1,3
 18869                           
 18870                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 18871  03D4  3001               	movlw	1
 18872  03D5  00F2               	movwf	??_setDimmerLights_IntrControl
 18873  03D6  0876               	movf	_DimmerLightsIntr,w
 18874  03D7  3E05               	addlw	5
 18875  03D8  0086               	movwf	6
 18876  03D9  3001               	movlw	1	; select bank2/3
 18877  03DA  0087               	movwf	7
 18878  03DB  0872               	movf	??_setDimmerLights_IntrControl,w
 18879  03DC  0781               	addwf	1,f
 18880                           
 18881                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18882  03DD  0876               	movf	_DimmerLightsIntr,w
 18883  03DE  3E05               	addlw	5
 18884  03DF  0086               	movwf	6
 18885  03E0  3001               	movlw	1	; select bank2/3
 18886  03E1  0087               	movwf	7
 18887  03E2  0876               	movf	_DimmerLightsIntr,w
 18888  03E3  3E08               	addlw	8
 18889  03E4  0084               	movwf	4
 18890  03E5  3001               	movlw	1	; select bank2/3
 18891  03E6  0085               	movwf	5
 18892  03E7  0800               	movf	0,w
 18893  03E8  0201               	subwf	1,w
 18894  03E9  1C03               	skipc
 18895  03EA  2C2D               	goto	i1l7361
 18896                           
 18897                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 18898  03EB  0876               	movf	_DimmerLightsIntr,w
 18899  03EC  3E05               	addlw	5
 18900  03ED  0086               	movwf	6
 18901  03EE  3001               	movlw	1	; select bank2/3
 18902  03EF  0087               	movwf	7
 18903  03F0  0181               	clrf	1
 18904                           
 18905                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 18906  03F1  0A76               	incf	_DimmerLightsIntr,w
 18907  03F2  0086               	movwf	6
 18908  03F3  3001               	movlw	1	; select bank2/3
 18909  03F4  0087               	movwf	7
 18910  03F5  1F01               	btfss	1,6
 18911  03F6  0008               	return
 18912                           
 18913                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 18914  03F7  0A76               	incf	_DimmerLightsIntr,w
 18915  03F8  0086               	movwf	6
 18916  03F9  3001               	movlw	1	; select bank2/3
 18917  03FA  0087               	movwf	7
 18918  03FB  1B81               	btfsc	1,7
 18919  03FC  2C16               	goto	i1l7355
 18920                           
 18921                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(70*0.8))) {
 18922  03FD  0876               	movf	_DimmerLightsIntr,w
 18923  03FE  3E04               	addlw	4
 18924  03FF  0086               	movwf	6
 18925  0400  3001               	movlw	1	; select bank2/3
 18926  0401  0087               	movwf	7
 18927  0402  3038               	movlw	56
 18928  0403  0201               	subwf	1,w
 18929  0404  1803               	skipnc
 18930  0405  2C10               	goto	i1l7353
 18931                           
 18932                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 18933  0406  3001               	movlw	1
 18934  0407  00F2               	movwf	??_setDimmerLights_IntrControl
 18935  0408  0876               	movf	_DimmerLightsIntr,w
 18936  0409  3E04               	addlw	4
 18937  040A  0086               	movwf	6
 18938  040B  3001               	movlw	1	; select bank2/3
 18939  040C  0087               	movwf	7
 18940  040D  0872               	movf	??_setDimmerLights_IntrControl,w
 18941  040E  0781               	addwf	1,f
 18942                           
 18943                           ;Dimmer_B1.c: 274: } else {
 18944  040F  0008               	return
 18945  0410                     i1l7353:	
 18946                           
 18947                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 18948  0410  0A76               	incf	_DimmerLightsIntr,w
 18949  0411  0086               	movwf	6
 18950  0412  3001               	movlw	1	; select bank2/3
 18951  0413  0087               	movwf	7
 18952  0414  1781               	bsf	1,7
 18953                           
 18954                           ;Dimmer_B1.c: 276: }
 18955                           ;Dimmer_B1.c: 277: } else {
 18956  0415  0008               	return
 18957  0416                     i1l7355:	
 18958                           
 18959                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18960  0416  0876               	movf	_DimmerLightsIntr,w
 18961  0417  3E04               	addlw	4
 18962  0418  0086               	movwf	6
 18963  0419  3001               	movlw	1	; select bank2/3
 18964  041A  0087               	movwf	7
 18965  041B  300D               	movlw	13
 18966  041C  0201               	subwf	1,w
 18967  041D  1C03               	skipc
 18968  041E  2C27               	goto	i1l7359
 18969                           
 18970                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 18971  041F  0876               	movf	_DimmerLightsIntr,w
 18972  0420  3E04               	addlw	4
 18973  0421  0086               	movwf	6
 18974  0422  3001               	movlw	1	; select bank2/3
 18975  0423  0087               	movwf	7
 18976  0424  3001               	movlw	1
 18977  0425  0281               	subwf	1,f
 18978                           
 18979                           ;Dimmer_B1.c: 280: } else
 18980  0426  0008               	return
 18981  0427                     i1l7359:	
 18982                           
 18983                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 18984  0427  0A76               	incf	_DimmerLightsIntr,w
 18985  0428  0086               	movwf	6
 18986  0429  3001               	movlw	1	; select bank2/3
 18987  042A  0087               	movwf	7
 18988  042B  1381               	bcf	1,7
 18989                           
 18990                           ;Dimmer_B1.c: 282: }
 18991                           ;Dimmer_B1.c: 283: }
 18992                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 18993  042C  0008               	return
 18994  042D                     i1l7361:	
 18995  042D  0876               	movf	_DimmerLightsIntr,w
 18996  042E  3E02               	addlw	2
 18997  042F  0086               	movwf	6
 18998  0430  3001               	movlw	1	; select bank2/3
 18999  0431  0087               	movwf	7
 19000  0432  1C01               	btfss	1,0
 19001  0433  0008               	return
 19002                           
 19003                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 19004  0434  0876               	movf	_DimmerLightsIntr,w
 19005  0435  3E04               	addlw	4
 19006  0436  0086               	movwf	6
 19007  0437  3001               	movlw	1	; select bank2/3
 19008  0438  0087               	movwf	7
 19009  0439  0876               	movf	_DimmerLightsIntr,w
 19010  043A  3E06               	addlw	6
 19011  043B  0084               	movwf	4
 19012  043C  3001               	movlw	1	; select bank2/3
 19013  043D  0085               	movwf	5
 19014  043E  0800               	movf	0,w
 19015  043F  0201               	subwf	1,w
 19016  0440  1803               	skipnc
 19017  0441  2C4C               	goto	i1l7367
 19018                           
 19019                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 19020  0442  3001               	movlw	1
 19021  0443  00F2               	movwf	??_setDimmerLights_IntrControl
 19022  0444  0876               	movf	_DimmerLightsIntr,w
 19023  0445  3E04               	addlw	4
 19024  0446  0086               	movwf	6
 19025  0447  3001               	movlw	1	; select bank2/3
 19026  0448  0087               	movwf	7
 19027  0449  0872               	movf	??_setDimmerLights_IntrControl,w
 19028  044A  0781               	addwf	1,f
 19029                           
 19030                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 19031  044B  0008               	return
 19032  044C                     i1l7367:	
 19033  044C  0876               	movf	_DimmerLightsIntr,w
 19034  044D  3E06               	addlw	6
 19035  044E  0086               	movwf	6
 19036  044F  3001               	movlw	1	; select bank2/3
 19037  0450  0087               	movwf	7
 19038  0451  0876               	movf	_DimmerLightsIntr,w
 19039  0452  3E04               	addlw	4
 19040  0453  0084               	movwf	4
 19041  0454  3001               	movlw	1	; select bank2/3
 19042  0455  0085               	movwf	5
 19043  0456  0800               	movf	0,w
 19044  0457  0201               	subwf	1,w
 19045  0458  1803               	skipnc
 19046  0459  2C62               	goto	i1l7371
 19047                           
 19048                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 19049  045A  0876               	movf	_DimmerLightsIntr,w
 19050  045B  3E04               	addlw	4
 19051  045C  0086               	movwf	6
 19052  045D  3001               	movlw	1	; select bank2/3
 19053  045E  0087               	movwf	7
 19054  045F  3001               	movlw	1
 19055  0460  0281               	subwf	1,f
 19056                           
 19057                           ;Dimmer_B1.c: 289: } else {
 19058  0461  0008               	return
 19059  0462                     i1l7371:	
 19060                           
 19061                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 19062  0462  0876               	movf	_DimmerLightsIntr,w
 19063  0463  3E02               	addlw	2
 19064  0464  0086               	movwf	6
 19065  0465  3001               	movlw	1	; select bank2/3
 19066  0466  0087               	movwf	7
 19067  0467  1001               	bcf	1,0
 19068  0468  0008               	return
 19069  0469                     __end_of_setDimmerLights_IntrControl:	
 19070                           
 19071                           	psect	text131
 19072  1C58                     __ptext131:	
 19073 ;; *************** function _DimmerIntrPointSelect *****************
 19074 ;; Defined at:
 19075 ;;		line 74 in file "../src/Dimmer_B1.c"
 19076 ;; Parameters:    Size  Location     Type
 19077 ;;  lights          1    wreg     unsigned char 
 19078 ;; Auto vars:     Size  Location     Type
 19079 ;;  lights          1    1[COMMON] unsigned char 
 19080 ;; Return value:  Size  Location     Type
 19081 ;;		None               void
 19082 ;; Registers used:
 19083 ;;		wreg
 19084 ;; Tracked objects:
 19085 ;;		On entry : 0/0
 19086 ;;		On exit  : 0/0
 19087 ;;		Unchanged: 0/0
 19088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19091 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19092 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19093 ;;Total ram usage:        2 bytes
 19094 ;; Hardware stack levels used:    1
 19095 ;; This function calls:
 19096 ;;		Nothing
 19097 ;; This function is called by:
 19098 ;;		_setDimmerLights_IntrControl
 19099 ;; This function uses a non-reentrant model
 19100 ;;
 19101                           
 19102                           
 19103                           ;psect for function _DimmerIntrPointSelect
 19104  1C58                     _DimmerIntrPointSelect:	
 19105                           
 19106                           ;incstack = 0
 19107                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19108                           ;DimmerIntrPointSelect@lights stored from wreg
 19109  1C58  00F1               	movwf	DimmerIntrPointSelect@lights
 19110                           
 19111                           ;Dimmer_B1.c: 76: if (lights == 1) {
 19112  1C59  0871               	movf	DimmerIntrPointSelect@lights,w
 19113  1C5A  3A01               	xorlw	1
 19114  1C5B  1D03               	skipz
 19115  1C5C  2C61               	goto	i1l737
 19116                           
 19117                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 19118  1C5D  3055               	movlw	_DimmerLights1& (0+255)
 19119  1C5E  00F0               	movwf	??_DimmerIntrPointSelect
 19120  1C5F  0870               	movf	??_DimmerIntrPointSelect,w
 19121  1C60  00F6               	movwf	_DimmerLightsIntr
 19122  1C61                     i1l737:	
 19123                           
 19124                           ;Dimmer_B1.c: 78: }
 19125                           ;Dimmer_B1.c: 81: if (lights == 2) {
 19126  1C61  0871               	movf	DimmerIntrPointSelect@lights,w
 19127  1C62  3A02               	xorlw	2
 19128  1C63  1D03               	skipz
 19129  1C64  0008               	return
 19130                           
 19131                           ;Dimmer_B1.c: 82: DimmerLightsIntr = &DimmerLights2;
 19132  1C65  30BE               	movlw	_DimmerLights2& (0+255)
 19133  1C66  00F0               	movwf	??_DimmerIntrPointSelect
 19134  1C67  0870               	movf	??_DimmerIntrPointSelect,w
 19135  1C68  00F6               	movwf	_DimmerLightsIntr
 19136  1C69  0008               	return
 19137  1C6A                     __end_of_DimmerIntrPointSelect:	
 19138                           
 19139                           	psect	text132
 19140  1BF7                     __ptext132:	
 19141 ;; *************** function _IOC_ISR *****************
 19142 ;; Defined at:
 19143 ;;		line 400 in file "../src/MCU_B1.c"
 19144 ;; Parameters:    Size  Location     Type
 19145 ;;		None
 19146 ;; Auto vars:     Size  Location     Type
 19147 ;;		None
 19148 ;; Return value:  Size  Location     Type
 19149 ;;		None               void
 19150 ;; Registers used:
 19151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19152 ;; Tracked objects:
 19153 ;;		On entry : 0/0
 19154 ;;		On exit  : 0/0
 19155 ;;		Unchanged: 0/0
 19156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19161 ;;Total ram usage:        0 bytes
 19162 ;; Hardware stack levels used:    1
 19163 ;; Hardware stack levels required when called:    3
 19164 ;; This function calls:
 19165 ;;		_setDimmerReClock
 19166 ;; This function is called by:
 19167 ;;		_ISR
 19168 ;; This function uses a non-reentrant model
 19169 ;;
 19170                           
 19171                           
 19172                           ;psect for function _IOC_ISR
 19173  1BF7                     _IOC_ISR:	
 19174                           
 19175                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19176                           
 19177                           ;incstack = 0
 19178                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19179  1BF7  1D8B               	btfss	11,3	;volatile
 19180  1BF8  0008               	return
 19181  1BF9  1C0B               	btfss	11,0	;volatile
 19182  1BFA  0008               	return
 19183  1BFB  0027               	movlb	7	; select bank7
 19184  1BFC  1D16               	btfss	22,2	;volatile
 19185  1BFD  0008               	return
 19186                           
 19187                           ;MCU_B1.c: 402: IOCBF2 = 0;
 19188  1BFE  1116               	bcf	22,2	;volatile
 19189                           
 19190                           ;MCU_B1.c: 403: IOCIF = 0;
 19191  1BFF  100B               	bcf	11,0	;volatile
 19192                           
 19193                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 19194  1C00  0021               	movlb	1	; select bank1
 19195  1C01  1C20               	btfss	_myMain^(0+128),0
 19196  1C02  0008               	return
 19197                           
 19198                           ;MCU_B1.c: 407: setDimmerReClock();
 19199  1C03  319B  231C         	fcall	_setDimmerReClock
 19200  1C05  0008               	return
 19201  1C06                     __end_of_IOC_ISR:	
 19202                           
 19203                           	psect	text133
 19204  1B1C                     __ptext133:	
 19205 ;; *************** function _setDimmerReClock *****************
 19206 ;; Defined at:
 19207 ;;		line 243 in file "../src/MCU_B1.c"
 19208 ;; Parameters:    Size  Location     Type
 19209 ;;		None
 19210 ;; Auto vars:     Size  Location     Type
 19211 ;;		None
 19212 ;; Return value:  Size  Location     Type
 19213 ;;		None               void
 19214 ;; Registers used:
 19215 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19216 ;; Tracked objects:
 19217 ;;		On entry : 0/0
 19218 ;;		On exit  : 0/0
 19219 ;;		Unchanged: 0/0
 19220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19225 ;;Total ram usage:        0 bytes
 19226 ;; Hardware stack levels used:    1
 19227 ;; Hardware stack levels required when called:    2
 19228 ;; This function calls:
 19229 ;;		_setDimmerLights_IntrIOC_GO
 19230 ;; This function is called by:
 19231 ;;		_IOC_ISR
 19232 ;; This function uses a non-reentrant model
 19233 ;;
 19234                           
 19235                           
 19236                           ;psect for function _setDimmerReClock
 19237  1B1C                     _setDimmerReClock:	
 19238                           
 19239                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 19240                           
 19241                           ;incstack = 0
 19242                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19243  1B1C  3001               	movlw	1
 19244  1B1D  3192  22AC  319B   	fcall	_setDimmerLights_IntrIOC_GO
 19245                           
 19246                           ;MCU_B1.c: 252: setDimmerLights_IntrIOC_GO(2);
 19247  1B20  3002               	movlw	2
 19248  1B21  3192  22AC         	fcall	_setDimmerLights_IntrIOC_GO
 19249  1B23  0008               	return
 19250  1B24                     __end_of_setDimmerReClock:	
 19251                           
 19252                           	psect	text134
 19253  12AC                     __ptext134:	
 19254 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19255 ;; Defined at:
 19256 ;;		line 28 in file "../src/Dimmer_B1.c"
 19257 ;; Parameters:    Size  Location     Type
 19258 ;;  lights          1    wreg     unsigned char 
 19259 ;; Auto vars:     Size  Location     Type
 19260 ;;  lights          1    2[COMMON] unsigned char 
 19261 ;; Return value:  Size  Location     Type
 19262 ;;		None               void
 19263 ;; Registers used:
 19264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19265 ;; Tracked objects:
 19266 ;;		On entry : 0/0
 19267 ;;		On exit  : 0/0
 19268 ;;		Unchanged: 0/0
 19269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19271 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19273 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19274 ;;Total ram usage:        1 bytes
 19275 ;; Hardware stack levels used:    1
 19276 ;; Hardware stack levels required when called:    1
 19277 ;; This function calls:
 19278 ;;		_DimmerIntrIOCPointSelect
 19279 ;; This function is called by:
 19280 ;;		_setDimmerReClock
 19281 ;; This function uses a non-reentrant model
 19282 ;;
 19283                           
 19284                           
 19285                           ;psect for function _setDimmerLights_IntrIOC_GO
 19286  12AC                     _setDimmerLights_IntrIOC_GO:	
 19287                           
 19288                           ;incstack = 0
 19289                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19290                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19291  12AC  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19292                           
 19293                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19294  12AD  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19295  12AE  319D  2589  3192   	fcall	_DimmerIntrIOCPointSelect
 19296                           
 19297                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 1) {
 19298  12B1  0021               	movlb	1	; select bank1
 19299  12B2  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19300  12B3  3E02               	addlw	2
 19301  12B4  0086               	movwf	6
 19302  12B5  3001               	movlw	1	; select bank2/3
 19303  12B6  0087               	movwf	7
 19304  12B7  1901               	btfsc	1,2
 19305  12B8  0008               	return
 19306  12B9  0020               	movlb	0	; select bank0
 19307  12BA  1D0D               	btfss	13,2	;volatile
 19308  12BB  0008               	return
 19309                           
 19310                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 19311  12BC  0021               	movlb	1	; select bank1
 19312  12BD  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19313  12BE  3E02               	addlw	2
 19314  12BF  0086               	movwf	6
 19315  12C0  3001               	movlw	1	; select bank2/3
 19316  12C1  0087               	movwf	7
 19317  12C2  1501               	bsf	1,2
 19318                           
 19319                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 19320  12C3  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19321  12C4  0086               	movwf	6
 19322  12C5  3001               	movlw	1	; select bank2/3
 19323  12C6  0087               	movwf	7
 19324  12C7  1401               	bsf	1,0
 19325                           
 19326                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 19327  12C8  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19328  12C9  0086               	movwf	6
 19329  12CA  3001               	movlw	1	; select bank2/3
 19330  12CB  0087               	movwf	7
 19331  12CC  1481               	bsf	1,1
 19332                           
 19333                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 19334  12CD  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 19335                           
 19336                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19337  12CE  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19338  12CF  0086               	movwf	6
 19339  12D0  3001               	movlw	1	; select bank2/3
 19340  12D1  0087               	movwf	7
 19341  12D2  1D01               	btfss	1,2
 19342  12D3  0008               	return
 19343                           
 19344                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 19345  12D4  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19346  12D5  0086               	movwf	6
 19347  12D6  3001               	movlw	1	; select bank2/3
 19348  12D7  0087               	movwf	7
 19349  12D8  1401               	bsf	1,0
 19350                           
 19351                           ;Dimmer_B1.c: 55: if (lights == 1) {
 19352  12D9  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19353  12DA  3A01               	xorlw	1
 19354  12DB  1D03               	skipz
 19355  12DC  2AE0               	goto	i1l6955
 19356                           
 19357                           ;Dimmer_B1.c: 56: RA7 = 1;
 19358  12DD  0020               	movlb	0	; select bank0
 19359  12DE  178C               	bsf	12,7	;volatile
 19360                           
 19361                           ;Dimmer_B1.c: 58: }
 19362  12DF  0008               	return
 19363  12E0                     i1l6955:	
 19364                           
 19365                           ;Dimmer_B1.c: 61: else if (lights == 2) {
 19366  12E0  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19367  12E1  3A02               	xorlw	2
 19368  12E2  1D03               	skipz
 19369  12E3  0008               	return
 19370                           
 19371                           ;Dimmer_B1.c: 62: RB4 = 1;
 19372  12E4  0020               	movlb	0	; select bank0
 19373  12E5  160D               	bsf	13,4	;volatile
 19374  12E6  0008               	return
 19375  12E7                     __end_of_setDimmerLights_IntrIOC_GO:	
 19376                           
 19377                           	psect	text135
 19378  1D89                     __ptext135:	
 19379 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19380 ;; Defined at:
 19381 ;;		line 8 in file "../src/Dimmer_B1.c"
 19382 ;; Parameters:    Size  Location     Type
 19383 ;;  lights          1    wreg     unsigned char 
 19384 ;; Auto vars:     Size  Location     Type
 19385 ;;  lights          1    1[COMMON] unsigned char 
 19386 ;; Return value:  Size  Location     Type
 19387 ;;		None               void
 19388 ;; Registers used:
 19389 ;;		wreg
 19390 ;; Tracked objects:
 19391 ;;		On entry : 0/0
 19392 ;;		On exit  : 0/0
 19393 ;;		Unchanged: 0/0
 19394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19396 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19397 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19398 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19399 ;;Total ram usage:        2 bytes
 19400 ;; Hardware stack levels used:    1
 19401 ;; This function calls:
 19402 ;;		Nothing
 19403 ;; This function is called by:
 19404 ;;		_setDimmerLights_IntrIOC_GO
 19405 ;; This function uses a non-reentrant model
 19406 ;;
 19407                           
 19408                           
 19409                           ;psect for function _DimmerIntrIOCPointSelect
 19410  1D89                     _DimmerIntrIOCPointSelect:	
 19411                           
 19412                           ;incstack = 0
 19413                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19414                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19415  1D89  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19416                           
 19417                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19418  1D8A  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19419  1D8B  3A01               	xorlw	1
 19420  1D8C  1D03               	skipz
 19421  1D8D  2D94               	goto	i1l6625
 19422                           
 19423                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19424  1D8E  3055               	movlw	_DimmerLights1& (0+255)
 19425  1D8F  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19426  1D90  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19427  1D91  0021               	movlb	1	; select bank1
 19428  1D92  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 19429                           
 19430                           ;Dimmer_B1.c: 12: }
 19431  1D93  0008               	return
 19432  1D94                     i1l6625:	
 19433                           
 19434                           ;Dimmer_B1.c: 15: else if (lights == 2) {
 19435  1D94  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19436  1D95  3A02               	xorlw	2
 19437  1D96  1D03               	skipz
 19438  1D97  0008               	return
 19439                           
 19440                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19441  1D98  30BE               	movlw	_DimmerLights2& (0+255)
 19442  1D99  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19443  1D9A  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19444  1D9B  0021               	movlb	1	; select bank1
 19445  1D9C  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 19446  1D9D  0008               	return
 19447  1D9E                     __end_of_DimmerIntrIOCPointSelect:	
 19448  007E                     btemp	set	126	;btemp
 19449  007E                     pic14e$flags	set	126
 19450  007E                     wtemp	set	126
 19451  007E                     wtemp0	set	126
 19452  0080                     wtemp1	set	128
 19453  0082                     wtemp2	set	130
 19454  0084                     wtemp3	set	132
 19455  0086                     wtemp4	set	134
 19456  0088                     wtemp5	set	136
 19457  007F                     wtemp6	set	127
 19458  007E                     ttemp	set	126
 19459  007E                     ttemp0	set	126
 19460  0081                     ttemp1	set	129
 19461  0084                     ttemp2	set	132
 19462  0087                     ttemp3	set	135
 19463  007F                     ttemp4	set	127
 19464  007E                     ltemp	set	126
 19465  007E                     ltemp0	set	126
 19466  0082                     ltemp1	set	130
 19467  0086                     ltemp2	set	134
 19468  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         270
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     79      80
    BANK1            80      8      80
    BANK2            80      0      78
    BANK3            80      0      79
    BANK4            80      4      73
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights22	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_getDimmerLights_Allow_Condition
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  130241
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    8404
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    8404
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0     405
                                              7 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45972
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   45972
                                              5 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44813
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40672
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13863
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1966
                                             13 BANK0      5     5      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18820
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16360
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14126
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1890
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      80
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     232
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1243
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    7294
                                             75 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35750
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   35407
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17731
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   17147
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     989
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Allow_Condition                      6     6      0     281
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (5) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      71
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5972
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5972
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4182
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3705
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3423
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0     110
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
           _getLoad_OK
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      49      13       91.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     190      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     190      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Dec 19 15:43:35 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l96 177F  
                                      l98 1793                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1FB5                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0077  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1D39  
                  __end_of_setDelayOff_GO 164F                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 155A  
                    _setDimmerLights_Line 1DDD                              ___ftadd@sign 004B  
                                     l110 1461                                       l106 1467  
                                     l107 1463                                       l108 1451  
                    _setDimmerLights_SwOn 0886                                       l255 0A3E  
                                     l328 1E01                                       l329 1E03  
                                     l372 1FDF                                       l810 1F26  
                                     l860 1D4A                                       l769 1CBC  
                                     l859 1D42                                       _GIE 005F  
                                     _CRC 00C9                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0014  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CD  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00BA                                       _ISR 0004  
                                     _WDT 0125              getDimmerLights_Status@lights 0022  
                                     _Sw1 01CF                                       _Sw2 01D8  
               setDimmerLights_Adj@status 006B                  __end_of_CC2500_WriteByte 1E0E  
                   _Buzzer_Initialization 1ADC                           __end_of_ADC_Set 1B1C  
                         ?_DelayTimejudge 0070                                       wreg 0009  
    setDimmerLights_Initialization@lights 0023              getDimmerLights_Status@status 0023  
                         _setDimmerLights 15AA                         ??_getSw_KeyStatus 0020  
                   _setDimmerLights_AdjRF 1066                     _setDimmerLights_AdjOn 1205  
                                    ?_ISR 0070           setDimmerLights_ErrorClose@count 00E8  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1C06  
                              Load_Main@i 002C                              ___ftdiv@sign 003D  
                                    l1031 1EFB                                      l1032 1F05  
                                    l1066 13D9                                      l1334 11FF  
                                    l3031 0972                                      l2313 11CB  
                ?_DimmerLightsPointSelect 0070                                      l3060 0508  
                                    l1348 1132                                      l2252 0D00  
                                    l3037 0989                                      l1357 14B4  
                                    l2262 0CDC                                      l2327 0B96  
                                    l1608 063E                                      l2264 0CF1  
                                    l2256 0CC3                                      l1730 007F  
                                    l1546 1321                                      l1731 007B  
                                    l2291 1CDD                                      l2339 134D  
                                    l1732 0076                                      l1573 117E  
                         __end_of_IOC_Set 1BC4                                      l1901 0FF6  
                                    l1574 1199                                      l1728 01EF  
                                    l1578 1195                                      l1738 01CB  
                                    l1739 01C9                                      l2643 1DCF  
                                    l2665 035F                                      l2667 0238  
                                    l2870 1E9D                                      l1896 0FFC  
                                    l9001 08B1                     _setDimmerLights_SwOff 14BC  
                                    l9021 14F1                                      l9103 1146  
                                    l9007 08D4                                      l9041 17F1  
                                    l9009 08DA                                      l9301 12A5  
                                    l9213 153E                                      l9303 12AA  
                                    l9151 1E87                                      l9231 133C  
                                    l9153 1E8D                                      l9217 154D  
                                    l9243 1E39                                      l9171 09DD  
                                    l8603 1F7B                                      l9237 1E30  
                                    l9173 09AE                                      l9317 1179  
                                    l9253 1FBF                                      l9501 0BA4  
                                    l9239 1E33                                      l9175 09E3  
                                    l9327 1190                                      l9319 1182  
                                    l8615 0491                                      l9255 1FC2  
                                    l9511 0BB7                                      l9503 0BA7  
                                    l9431 0B77                                      l9423 0B56  
                                    l9337 1DED                                      l8561 095E  
                                    l8553 0948                                      l8625 04A7  
                                    l8713 0F2E                                      l8705 0F15  
                                    l9601 15DA                                      l9513 0BBA  
                                    l9425 0B6B                                      l9291 1296  
                                    l9363 166F                                      l9371 1677  
                                    l8643 04D4                                      l8619 0498  
                                    l8811 0DE9                                      l8803 0DCE  
                                    l9611 15F0                                      l9259 1FC8  
                                    l9451 0A13                                      l9427 0B6F  
                                    l9419 0B31                                      l9435 0B7B  
                                    l8581 1C6D                                      l9293 1299  
                                    l9349 165E                                      l9357 1666  
                                    l8557 094F                                      l8661 051A  
                                    l8645 04DE                                      l8637 04C1  
                                    l8813 0DF2                                      l8805 0DDC  
                                    l9621 170E                                      l9533 0BD2  
                                    l9517 0BC0                                      l9445 0A0A  
                                    l8733 0748                                      l9429 0B73  
                   _myMain_Initialization 1C06                                      l8903 16EF  
                                    l9279 1282                                      l9383 1693  
                                    l8567 0977                                      l8559 0959  
                                    l8655 04FA                                      l8647 04E3  
                                    l8815 0DF5                                      l9535 0BEB  
                                    l9471 0A47                                      l9447 0A0D  
                                    l8727 0732                                      l8585 1C73  
                                    l8569 097F                                      l8665 052C  
                                    l8657 0504                                      l8649 04E7  
                                    l9465 0A25                                      l8761 07A7  
                                    l8745 0783                                      l9555 1FF0  
                                    l9563 1F9B                                      l8827 1D1C  
                                    l8843 0829                                      l9379 168F  
                                    l9387 1697                                      l8675 0547  
                                    l8691 0ED4                                      l8819 0E03  
                                    l9483 0A5A                                      l9475 0A4D  
                                    l9723 1C52                                      l9557 1FFB  
                                    l9565 1F9E                                      l8685 0EBE  
                                    l9477 0A51                                      l9469 0A44  
                                    l8757 079F                                      l8749 078B  
                                    l8871 16AD                                      l8951 1634  
                                    l9495 0B9B                                      l9479 0A54  
                                    l9807 1EDE                                      l9569 1FA4  
                                    l9841 140E                                      l8953 163A  
                                    l8785 0D9E                                      l9497 0B9E  
                                    l9817 1EEA                                      l9809 1EE0  
                                    _CFGS 0CAE                                      l9851 141E  
                                    l9835 1405                                      l8947 162E  
                                    l9747 0C2A                                      l9819 1EEE  
                                    l9845 1415                                      l9837 1408  
                                    l8877 16B8                                      l9757 0C3B  
                                    l9847 1418                                      l8895 16DE  
                                    l8887 16C0                                      l9951 1583  
                                    l9679 111A                                      l8991 08A0  
                                    l9783 0C7B                              __CFG_WDTE$ON 0000  
                                    l8889 16CC                                      l9937 1CD6  
                                    l9953 1589                                      l9769 0C51  
                                    l9777 0C70                                      l9793 1D6C  
                                    l8899 16E7                                      l8989 089D  
                                    l9959 15A4                                      l9991 10E5  
                                    l8999 08AC                                      l9993 1107  
                                    l9989 1102                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PEIE 005E  
                                    u9125 04E8                                      u9065 04C2  
                                    u9225 0EE6                                      u9305 0754  
                                    u9155 04FB                                      u9235 0EF6  
                                    u9315 0764                                      u9245 0F16  
                                    u9095 04D5                                      u9255 0F25  
                                    u9335 078C                                      u9265 0F2F  
                                    u9425 0DA5                                      u9345 0792  
                                    u9605 16C3                                      u9455 0DCF  
                                    u9375 07A8                                      u9625 16CD  
                                    u9545 0815                                      u9385 07AE  
                                    u9635 16D7                                      u9645 16DF  
                                    u8925 0990                                      u9485 0DEA  
                                    u8855 0954                                      u8875 096D  
                                    _LWLO 0CAD                                      u9935 1DAD  
                                    u8895 097A                                      u9880 17B1  
                                    u9885 17AF                                      _RSSI 00CE  
                                    _WREN 0CAA                                      _Buz1 00AE  
                                    _Load 0127                                      _Temp 00D6  
                                    _main 082B                              ___ftpack@arg 0020  
                     __end_of_DlyOff_Main 093F                           __end_of_RF_Main 1AE8  
                            ___ftpack@exp 0023                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1BDC                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                          _setDimmerReClock 1B1C  
                                    start 0013                                      ttemp 007E  
                                    wtemp 007E                       DelayTimejudge@value 0029  
              __end_of_setRFSW_AdjControl 1361                         ___bmul@multiplier 0023  
                            ___ftmul@cntr 003C                              ___ftmul@sign 003D  
          getAll_DimmerLights_AdjSw@adjsw 0026              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2330 0023      _getDimmerLights_Allow_Condition$2331 0024  
    _getDimmerLights_Allow_Condition$2329 0022                         ?_getDimmer_LoadGO 0070  
          getAll_DimmerLights_AdjSw@count 0023                                     ??_ISR 0074  
                            ___fttol@exp1 005B                              ___fttol@lval 0057  
 __end_of_getDimmerLights_Allow_Condition 12AC  __size_of_getDimmerLights_Allow_Condition 003A  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1272                    _getDimmerLights_Status 1C25  
                      ??_getDimmer_LoadGO 0020            __size_of_DimmerIntrPointSelect 0012  
                        __end_of_LED_Main 1BB8          setDimmerLights_ErrorClose@lights 00E9  
           __end_of_DimmerIntrPointSelect 1C6A                     ?_getDimmerLights_Line 0070  
                                   l10105 148A                                     l10223 0CAA  
                                   l10401 1250                                     l10313 0266  
                                   l10153 0F6C                                     l10081 1F3B  
                                   l10411 126B                                     l10323 0298  
                                   l10083 1F3E                                     l10407 1262  
                                   l10255 0CE2                                     l10239 0CC9  
                                   l10183 0FCB                                     l10087 1F43  
                                   l10425 143B                                     l10337 02D6  
                                   l10185 0FCD                                     l10601 0D52  
                                   l10099 1475                                     l10283 1DDA  
                                   l10347 0308                                     l10195 0FE2  
                                   l10373 035B                                     l10197 0FE3  
                                   l10711 00A2                                     l10279 1DD4  
                                   l10631 1390                                     l10297 0223  
                                   l10617 0D7F                                     l10379 1E97  
                                   l10469 1F28                                     l10805 01DE  
                                   l10717 00D4                                     l10399 1244  
                                   l10743 015D                     ?_setDimmerLights_Main 0070  
                                   l10833 057E                                     l10753 0189  
                                   l10649 1301                                     l10851 05C8  
                                   l10843 059C                                     l10499 06B1  
                                   l10853 059F                                     l10749 016A  
                                   l10757 0195                                     l10677 005D  
                                   l10597 0D4A                                     l10589 0D25  
                                   l10871 05E6                                     l10855 05D0  
                                   l10839 058D                                     l10767 01AB  
                                   l10695 007E                                     l10951 085A  
                                   l10873 0617                                     l10881 0634  
                                   l10875 0621                                     l10947 084F  
                                   l10869 060F                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0066                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 0265                           __end_of___awdiv 16F6  
                         __end_of___ftadd 055F                           __end_of___ftdiv 0F50  
                         __end_of___ftneg 1B5D                                     u10025 09B9  
                                   u12005 1263                           __end_of___ftmul 07CF  
                                   u12035 1431                           ___awdiv@divisor 0020  
                                   _T1CON 0018                                     u11505 0FD3  
                                   u12305 0D6C                                     u10645 1FE5  
                         __end_of___fttol 0E0C                                     u11285 10EE  
                                   u11605 0CBD                                     u12405 1319  
                                   u12255 0D38                                     u12195 11F6  
                                   u12355 1387                                     u11485 0FB3  
                                   u12365 1396                                     u12800 0615  
                                   u12545 00A0                                     u12555 00D2  
                                   u12805 05F1                                     u11925 1E9E  
                                   u12645 019C                                     u12565 0116  
                                   u11935 1EA3                                     u12770 05CE  
                                   u11965 1247                                     _IOCBF 0396  
                                   u12775 05AA                                     u11985 1251  
                                   u11995 125B                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 1272  
                                   i1l737 1C61                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _WPUB1 1069  
                                   _WPUB2 106A                   __end_of_Timeout_Counter 1DB3  
                           __CFG_WRT$HALF 0000        __end_of_setDimmerLights_IntrIOC_GO 12E7  
              _setDimmerLights_IntrIOC_GO 12AC                          __end_of_TMR1_ISR 10B3  
                 __size_of_setProductData 000E              __size_of_CC2500_WriteCommand 001A  
      __end_of_setDimmerLights_ErrorClose 0A02                _setDimmerLights_ErrorClose 09A0  
                        __end_of_TMR1_Set 1BD0                                     _getAD 1F30  
                           ___awtoft@sign 002D               DimmerIntrPointSelect@lights 0071  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1CB2  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03C0                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1D61                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
            __end_of_getMain_LightsStatus 1CD8             __end_of_setLED_Initialization 1C8E  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 17A7               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0068                    ??_Flash_Memory_Erasing 0020  
                         _getPercentValue 0ACB                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0015                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                   __size_of_getDelayOff_GO 0010  
                       ??_setPercentValue 005C                              __end_of_main 0886  
                     ?_setRF_DimmerLights 0066                          __end_of_Fosc_Set 1AFE  
                      ??_setMemory_Modify 0020                            _Exception_Main 055F  
                        ?_CC2500_WriteREG 0022                                 ??_ADC_Set 0020  
                 __end_of_setDimmerLights 15FC                      _setSw_Initialization 1B4C  
                                  ??_main 006F                             ___fttol@sign1 0056  
                            ?_setLog_Code 0070                   _setControl_Lights_Table 0B30  
                          _setMemory_Data 1B88                    ?_Buzzer_Initialization 0070  
       __size_of_DimmerIntrIOCPointSelect 0015                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 03C0                 ?_DimmerIntrIOCPointSelect 0070  
                               ??_IOC_ISR 0073                                 ??_IOC_Set 0020  
         __end_of_DimmerLightsPointSelect 1CC5                    ?_setDimmerLights_AdjRF 0070  
                  ?_setDimmerLights_AdjOn 0070                  __size_of_setRFSW_Control 004F  
                 ??_Switch_Initialization 0025                      ??_setRF_DimmerLights 0067  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 08E2  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 006F  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1B44  
                               ??_WDT_Set 0020                          __end_of___awtoft 1F92  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 09A0  
                _getMain_All_Error_Status 1168                                    _IOCBF2 1CB2  
                                  i1l7331 03C2                                    i1l7335 03C9  
                                  i1l7319 0392                                    i1l6625 1D94  
                                  i1l7353 0410                                    i1l7361 042D  
                                  i1l7371 0462                                    i1l7355 0416  
                                  i1l7367 044C                                    i1l7359 0427  
                                  i1l6955 12E0                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0026                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
                                  _OSCCON 0099                                    u803_25 10AD  
                      __size_of_Load_Main 01AC                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1E0E  
                                  _WDTCON 0097                      Exception_Main@i_3620 00EC  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 1DC8                                    _Dimmer 00C6  
                                  _DlySw1 01E1                                    _DlySw2 01E6  
              __end_of_Mcu_Initialization 1CA0                       __end_of_Buzzer_Main 146E  
                                  _Memory 0220                                    _Timer1 0120  
                                  ___bmul 1C6A                    __end_of_Exception_Main 063F  
                    Load_Main@Load_Status 002B                      Exception_Main@lights 00EE  
                                  ___wmul 1E94                                 ??___awdiv 0024  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 0014  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                   setDimmerLights@lights 006D                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
             setDimmerLights_AdjRF@lights 0063                    ??_setDimmerLights_Main 006E  
                  ??_setDimmerLights_Line 0020                                    _r_data 00D4  
                                  _s_data 00D5                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 164F                                    _myMain 00A0  
                  __end_of_setMemory_Data 1B94                          _DimmerLightsIntr 0076  
                   ?_setSw_Initialization 0070                     setDimmerLights@status 006B  
                        ___awdiv@quotient 0027                                    _setBuz 174E  
                      __size_of_Temp_Main 0003               __end_of_Load_Initialization 1AE2  
        ??_setDimmerLights_Initialization 0022           ?_setDimmerLights_Initialization 0070  
                   ___ftmul@f3_as_product 0039       __end_of_setDimmerLights_IntrControl 0469  
             _setDimmerLights_IntrControl 0368                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1D11  
             getMain_Lights_Count@status1 0021               getMain_Lights_Count@status2 0022  
                   __end_of_SwPointSelect 1D75              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 0020  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0020                                _TouchPower 1DC8  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
              ?_getAll_DimmerLights_AdjSw 0070                   __end_of_getPercentValue 0B30  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0045  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5261 0022  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2310 002E  
               _setDimmerLights_SwOn$2311 002F                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
          DimmerIntrIOCPointSelect@lights 0071                           ?_Exception_Main 0070  
                            __pidataBANK4 1F50                             __end_of_getAD 1F50  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0058                        _LED_Initialization 1BA0  
                         _getSw_KeyStatus 1ED1                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 0062  
                        ?_setDimmerLights 006B                      _getMain_Lights_Count 1D4D  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01F5  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1CC5  
              __end_of_set_TimeoutCleared 1B03                  __end_of_setDimmerReClock 1B24  
                      __size_of_getRxData 007F                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1BE9  
                          _DimmerLights11 00CA                            _DimmerLights22 00CB  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0023                       _Temp_Initialization 1AE8  
                      ??_CC2500_WriteByte 0020                                __pbssBANK0 006F  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 1424  
                       ??_setRFSW_Control 006B                         __end_of_Temp_Main 1AEE  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1B24                                __pnvCOMMON 0079  
                           ??_Switch_Main 006E                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 006F                         LedPointSelect@led 0021  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 082B                            _getDelayOff_GO 1C15  
                     _CC2500_WriteCommand 1E27                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020          __size_of_DimmerLightsPointSelect 0013  
                        ??_setDelayOff_GO 0068             ??_DimmerLights_Initialization 0024  
                                 ?___wmul 0020                                ??_TMR1_ISR 0074  
                           ?_setTemp_Main 0070                                _getLoad_AD 0D04  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1B34  
                      __size_of_setTxData 009B                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1B15                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 1361                                ??_WDT_Main 0020  
                   ?_getMain_LightsStatus 0070              __end_of_setRF_Initialization 1B71  
                      _setRFSW_AdjControl 1323                    __end_of_setProductData 1BF7  
                                 _IOC_ISR 1BF7                                   _IOC_Set 1BB8  
                    __size_of_setLog_Code 0034     getDimmerLights_Allow_Condition@lights 0025  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 11CF  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1E41  
              getAll_DimmerLights_AdjSw@i 0024               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 006F                    __size_of_CC2500_TxData 0064  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1AE5  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1BD0           __end_of_setControl_Lights_Table 0B97  
                         setRF_Main@error 00EF                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070                           _setPercentValue 0A66  
                 ??_setLoad_AH_AL_Restore 0020                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1B88                           __size_of_IO_Set 0019  
                       __end_of_getBuz_GO 1C47                       ??_Flash_Memory_Main 0026  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1C25  
                                 _VarLED1 016A                                   _VarLED2 01EB  
          __end_of_getDimmerLights_Status 1C36                         __end_of_getRxData 0C85  
                 __end_of_getSw_KeyStatus 1EF0                  _CC2500_registers_address 1000  
        __end_of_DimmerIntrIOCPointSelect 1D9E                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0068                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 16A2                                   ___ftadd 0469  
                                 ___ftdiv 0EA7                                   ___ftneg 1B54  
                         __size_of___wmul 001E                                   ___ftmul 071B  
                                 ___fttol 0D85                       __end_of_Switch_Main 1B7C  
                                 ___lwdiv 123B                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1C47                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0053  
                    setRFSW_AdjControl@sw 006B                           __size_of_setBuz 0059  
                                 __ptext1 12E7                                   __ptext2 1C06  
                                 __ptext3 1361                                   __ptext4 0D04  
                                 __ptext5 1F30                                   __ptext6 1CA0  
                                 __ptext7 0002                                   __ptext8 1AEB  
                                 __ptext9 0F50                   ??_setDimmerLights_AdjRF 0062  
                 ??_setDimmerLights_AdjOn 0027                 __size_of_CC2500_SIDLEMode 0004  
                   _DimmerIntrPointSelect 1C58                              __size_of_ISR 000F  
              ??_getMain_All_Error_Status 0020                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 1205                 __end_of_Flash_Memory_Read 1E5B  
                 ??_setDimmerLights_SwOff 006A                                _setRF_Main 0C85  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1B2C  
                       _DimmerLights_Main 1F10            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1B09                __end_of_CC2500_ClearRXFIFO 1AF2  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1AF6  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 0079  
                          _LedPointSelect 1EF0                       _DelayOffPointSelect 1D11  
                                 clrloop0 1B10            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1BE9                      end_of_initialization 0045  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 10B3  
                           _DelayTime_1us 1FDA                         __end_of_setTxData 0EA7  
              __end_of_Flash_Memory_Write 1139                                   init_ram 1B09  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006F  
                    Flash_Memory_Read@ret 0023                                   initloop 1B0A  
                              _setSw_Main 01F5                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 0031                         _CC2500_ReadStatus 1FB5  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1C7C  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0B97                             _CC2500_TxData 0A02  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 146E  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                     _Flash_Memory_Unlock 1B5D                       ??_CC2500_ReadStatus 0022  
                  ??_getMain_LightsStatus 0020                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1F30                        _Mcu_Initialization 1C8E  
                __size_of_CC2500_PowerRST 0044                      __end_of_my_MainTimer 1323  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1F10                   __end_of_setPercentValue 0ACB  
                __size_of_CC2500_WriteREG 0023                 __end_of_CC2500_InitSetREG 10DD  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0020  
                     _setDimmerLights_Adj 16F6                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 1FDA                             ?_RF_RxDisable 0070  
         getMain_All_Error_Status@command 0025               ??_getAll_DimmerLights_AdjSw 0022  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006B  
                          __end_of_IO_Set 1E27                      _setRF_Initialization 1B66  
                      _setMemory_LoopSave 1CFE                               _Switch_Main 1B71  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1CB2                   __end_of_getRF_KeyStatus 1C58  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1DB3                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 006B  
                          __end_of___bmul 1C7C                      setRF_DimmerLights@on 0066  
                _DimmerIntrIOCPointSelect 1D89                            __end_of___wmul 1EB2  
                       getSw_KeyStatus@sw 0024                         __size_of_TMR1_ISR 0029  
           __size_of_getDimmerLights_Line 0014                    ?_DimmerIntrPointSelect 0070  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0050  
                          __end_of_setLED 16A2             __size_of_setDimmerLights_Line 0018  
           __size_of_setDimmerLights_SwOn 005C                            __end_of_setBuz 17A7  
                    _CC2500_FrequencyCabr 1B7C                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 150B  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0070  
                     start_initialization 0015                         _setRF_DimmerValue 1139  
                         ?_LedPointSelect 0070                                 _Load_Main 0049  
                             __end_of_ISR 0013                          _getDimmer_LoadGO 1B3C  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                      ??_setDimmerReClock 0073                        ?_setRF_DimmerValue 0070  
              __end_of_CC2500_InitPATable 1ED1           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 1000                            ??_RF_RxDisable 0024  
                     __size_of_getLoad_AD 0081                              ?_Buzzer_Main 0070  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1AFE  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0166                               ?_setSw_Main 0070  
                     ??_setRF_DimmerValue 0066                       __size_of_getTemp_AD 003E  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1AEB                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00CF  
                   setProductData@address 0065                       Exception_Main@count 00E8  
                 setRF_DimmerValue@lights 0067                       Exception_Main@error 00E9  
                                ??___bmul 0021                     ??_setDimmerLights_Adj 006C  
                                ??___wmul 0024                    __size_of_SwPointSelect 0014  
                               _Tx_Length 00D2                               __pdataBANK4 0245  
                                ??_setLED 0023                 _getAll_DimmerLights_AdjSw 10DD  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 006F                         ??_CC2500_ReadByte 0020  
        __end_of_getMain_All_Error_Status 119B                          _CC2500_SIDLEMode 1AF6  
              __size_of_DimmerLights_Main 0020                 __end_of_setRF_DimmerValue 1168  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                             __pbssCOMMON 0075                                  ?_IOC_Set 0070  
                               ___latbits 0003                          _setMemory_Modify 1CEB  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E8                             __pcstackBANK4 0265  
                    ??_set_TimeoutCleared 0020                          ?_setPercentValue 0070  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                __size_of_setDimmerLights 0052                             DlyOff_Main@sw 006E  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 005D                __size_of_CC2500_ReadStatus 0025  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 0155                             _DimmerLights2 01BE  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0066  
               ??_DimmerLightsPointSelect 0020            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1E77  
                setRFSW_AdjControl@status 006A                           ??_CC2500_TxData 0024  
                          getRxData@error 00EC               __size_of_LED_Initialization 000C  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 00EA  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 007F  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                              setBuz@time 0029                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002A                    _setTemp_Initialization 0800  
                               _getBuz_GO 1C36       __end_of_Flash_Memory_Initialization 071B  
             _Flash_Memory_Initialization 063F                                  ?___awdiv 0020  
                               __ptext100 15FC                                 __ptext101 1BE9  
                               __ptext110 1B03                                 __ptext102 0801  
                               __ptext111 1D11                                 __ptext103 1C6A  
                               __ptext120 1AF2                                 __ptext112 1DB3  
                               __ptext104 1C15                                 __ptext121 1AEE  
                               __ptext113 1AF6                                 __ptext105 1C25  
                               __ptext130 0368                                 __ptext122 1E27  
                               __ptext114 13E0                                 __ptext106 1CB2  
                               __ptext131 1C58                                 __ptext123 1AFE  
                               __ptext115 10B3                                 __ptext107 174E  
                               __ptext132 1BF7                                 __ptext124 1D9E  
                               __ptext116 1EB2                                 __ptext108 16A2  
                               __ptext133 1B1C                                 __ptext125 1DF5  
                               __ptext117 1F92                                 __ptext109 1B24  
                                ?___ftadd 0041                                 __ptext134 12AC  
                               __ptext126 1424                                 __ptext118 1B7C  
                               __ptext135 1D89                                 __ptext127 1ADC  
                               __ptext119 1FDA                                 __ptext129 108A  
                               _getRxData 0C06                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 155A  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0008  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1ADF  
                        getPercentValue@i 005F                          setPercentValue@i 005F  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0021  
                      __end_of_TouchPower 1DDD                           DelayTimejudge@i 0026  
                         DelayTimejudge@j 0027                           DelayTimejudge@k 0028  
                     __size_of_setSw_Main 0173              CC2500_ReadStatus@status_addr 0023  
          __size_of_setDimmerLights_AdjRF 0024            __size_of_setDimmerLights_AdjOn 0036  
           __end_of_setDimmerLights_AdjRF 108A             __end_of_setDimmerLights_AdjOn 123B  
                  CC2500_WriteByte@loop_a 0021                                 _r_address 00D3  
          __size_of_setDimmerLights_SwOff 004F            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 150B              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1C15                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0026                   __size_of_DelayTimejudge 002A  
                           _SwPointSelect 1D61                       __end_of_setLED_Main 13E0  
                        ??_getDelayOff_GO 0022                       _DimmerLightsIntrIOC 00CC  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1AEB  
                       _CC2500_rfSettings 102F                            ___wmul@product 0024  
                                _LED_Main 1BAC                           SwPointSelect@sw 0021  
                               clear_ram0 1B0F                  CC2500_InitPATable@loop_d 0027  
                            _my_MainTimer 12E7                                 _setTxData 0E0C  
     __end_of_DimmerLights_Initialization 1D39               _DimmerLights_Initialization 1D25  
                      _CC2500_ClearRXFIFO 1AEE                        _CC2500_ClearTXFIFO 1AF2  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1D89                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0069               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 110A                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 108A  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1BC4  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                                _RF_Count 0123                      __end_of_RF_RxDisable 1CEB  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1E41  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1CA0  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0023  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 00ED                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0053                                  _DelayOff 0075  
                            setSw_Main@sw 006D          setDimmerLights_IntrIOC_GO@lights 0072  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 000F  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1BA0  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 11CF  
                   _DlyOff_Initialization 1B03                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 1AFA  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006C  
                      __end_of_getLoad_AD 0D85                        __end_of_getLoad_OK 1B3C  
                   _Switch_Initialization 1BDC         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 006C  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 139F                                ?_setTxData 0070  
                            ?_Switch_Main 0070                ??_DimmerIntrIOCPointSelect 0070  
                        _CC2500_WriteByte 1DF5                         getLoad_AD@channel 0026  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00D1  
                             ??_Temp_Main 0069                         setRFSW_Control@sw 006D  
           _getMain_All_Error_Status$3605 0021             _getMain_All_Error_Status$3606 0023  
                __end_of_getDimmer_LoadGO 1B44                       _Load_Initialization 1ADF  
                               setLED@led 0023                   ??_DimmerIntrPointSelect 0070  
                            _setTemp_Main 0F50                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0030  
                                ___awtoft 1F70                          ??_LedPointSelect 0020  
                                ___ftpack 093F             __size_of_getMain_Lights_Count 0014  
                  getDimmer_LoadGO@loadgo 0020             __size_of_getMain_LightsStatus 0013  
                       getTemp_AD@channel 0025                              ??_setRF_Main 006F  
                    CC2500_WriteREG@value 0022                               _setLED_Main 139F  
              __end_of_setRF_DimmerLights 1800            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1B4C  
                        setDelayOff_GO@sw 0069                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070        __size_of_getAll_DimmerLights_AdjSw 002D  
                         ___lwdiv@counter 0025                                  __ptext10 1AE8  
                                __ptext11 0800                                  __ptext20 1DC8  
                                __ptext12 1B71                                  __ptext21 1AE5  
                                __ptext13 01F5                                  __ptext30 1139  
                                __ptext22 0C85                                  __ptext14 1D75  
                                __ptext31 1066                                  __ptext23 0C06  
                                __ptext15 1205                                  __ptext40 1FB5  
                                __ptext32 0ACB                                  __ptext24 119B  
                                __ptext16 1ED1                                  __ptext41 1E77  
                                __ptext33 071B                                  __ptext25 1CFE  
                                __ptext17 1D61                                  __ptext50 1B15  
                                __ptext42 1AE2                                  __ptext34 1CEB  
                                __ptext26 0B30                                  __ptext18 1BDC  
                                __ptext51 0049                                  __ptext43 1B66  
                                __ptext35 1C47                                  __ptext27 150B  
                                __ptext19 1B4C                                  __ptext60 1BAC  
                                __ptext52 1D4D                                  __ptext44 1C8E  
                                __ptext36 1C36                                  __ptext28 0886  
                                __ptext61 139F                                  __ptext53 1B44  
                                __ptext45 1BD0                                  __ptext37 1CD8  
                                __ptext29 1323                                  __ptext70 1B5D  
                                __ptext62 1BA0                                  __ptext54 1B3C  
                                __ptext46 1BC4                                  __ptext38 0A02  
                                __ptext71 1E41                                  __ptext63 1C7C  
                                __ptext55 10DD                                  __ptext47 1E0E  
                                __ptext39 0B97                                  __ptext80 0A66  
                                __ptext72 055F                                  __ptext64 11CF  
                                __ptext56 1E94                                  __ptext48 1BB8  
                                __ptext81 0D85                                  __ptext73 1D39  
                                __ptext65 146E                                  __ptext57 123B  
                                __ptext49 1AFA                                  __ptext90 1272  
                                __ptext82 1B54                                  __ptext74 1F10  
                                __ptext66 1B94                                  __ptext58 1ADF  
                                __ptext91 1B34                                  __ptext83 0EA7  
                                __ptext75 155A                                  __ptext67 063F  
                                __ptext59 1E5B                                  __ptext92 1CC5  
                                __ptext84 0469                                  __ptext76 16F6  
                                __ptext68 1B88                                  __ptext93 1168  
                                __ptext85 1F70                                  __ptext77 15AA  
                                __ptext69 110A                                  __ptext94 1D25  
                                __ptext86 093F                                  __ptext78 0E0C  
                                __ptext95 07CF                                  __ptext87 164F  
                                __ptext79 17A7                                  __ptext96 1B2C  
                                __ptext88 1EF0                                  __ptext97 08E2  
                                __ptext89 1DDD                                  __ptext98 09A0  
                                __ptext99 14BC                                  __product 0245  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1D4D  
            __end_of_setDimmerLights_Main 15AA              __end_of_setDimmerLights_Line 1DF5  
            __end_of_setDimmerLights_SwOn 08E2                              ??_setSw_Main 006B  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1D75                  __end_of_CC2500_SIDLEMode 1AFA  
              setDimmerLights_Main@lights 006E               __end_of_DelayOffPointSelect 1D25  
              CC2500_WriteCommand@command 0023                      setRF_Main@Receive_OK 00EE  
               __size_of_setDimmerReClock 0008                   setDimmerLights_AdjOn@sw 0027  
                         _CC2500_ReadByte 1E77                        _CC2500_InitPATable 1EB2  
                __end_of_setMemory_Modify 1CFE                        __end_of_setRF_Main 0D04  
                             ??_getBuz_GO 0022               __size_of_Mcu_Initialization 0012  
             setDimmerLights_ErrorClose@i 00EA                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006E                              getLoad_OK@ok 0020  
                                main@argc 0265                                  main@argv 0267  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6247 0021  
                    _getSw_KeyStatus$6248 0022                           _CC2500_PowerRST 13E0  
                __size_of_getSw_KeyStatus 001F               __end_of_Flash_Memory_Modify 14BC  
                       ??_getPercentValue 005C                               _setLog_Code 119B  
             __end_of_Flash_Memory_Unlock 1B66                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1F92                        __end_of_setSw_Main 0368  
                   ??_Load_Initialization 0022                             _Transceive_OK 03C1  
                  ?_DlyOff_Initialization 0070                            _DelayTimejudge 0801  
                             pic14e$flags 007E              ??_setDimmerLights_IntrIOC_GO 0072  
              setDimmerLights_Line@lights 0020              ??_setDimmerLights_ErrorClose 006B  
                 setDimmerLights_SwOff@sw 006A               __size_of_setMemory_LoopSave 0013  
       __end_of_getAll_DimmerLights_AdjSw 110A                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0025                    ?_Switch_Initialization 0070  
                 ??_CC2500_PowerOnInitial 0029    __end_of_setDimmerLights_Initialization 0800  
 __size_of_setDimmerLights_Initialization 0031            _setDimmerLights_Initialization 07CF  
             __end_of_setDimmerLights_Adj 174E                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0020                    CC2500_InitPATable@temp 0026  
                   __size_of_RF_RxDisable 0013                         _RF_Initialization 1AE2  
    __size_of_setDimmerLights_IntrControl 0101                               getLoad_AD@i 0029  
                             getLoad_AD@j 0028                               getLoad_AD@k 0027  
                    _Flash_Memory_Erasing 1B94                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D0                   __size_of_Exception_Main 00E0  
         __end_of_DelayOff_Initialization 1B2C       __size_of_setDimmerLights_IntrIOC_GO 003B  
     __size_of_setDimmerLights_ErrorClose 0062                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B34                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 15FC  
        __size_of_setControl_Lights_Table 0067                    __end_of_DelayTimejudge 082B  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00DC  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 006C  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 2000  
                 __end_of_CC2500_ReadByte 1E94              __end_of_setSw_Initialization 1B54  
                         _Timeout_Counter 1D9E           __size_of_getDimmerLights_Status 0011  
                    getPercentValue@value 005E                              _RF_RxDisable 1CD8  
              __end_of_LED_Initialization 1BAC            __end_of_setTemp_Initialization 0801  
                __size_of_setPercentValue 0065                   setMemory_Modify@command 0021  
                    setPercentValue@value 005E                 __end_of_RF_Initialization 1AE5  
                   __end_of_CC2500_RxData 0C06                     __end_of_CC2500_TxData 0A66  
                   _setLoad_AH_AL_Restore 1E5B                   __end_of_CC2500_PowerRST 1424  
