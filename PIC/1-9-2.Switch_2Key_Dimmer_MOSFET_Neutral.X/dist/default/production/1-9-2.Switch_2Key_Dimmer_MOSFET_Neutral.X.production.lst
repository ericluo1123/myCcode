

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Dec 18 13:22:07 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	intentry,global,class=CODE,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   158                           	dabs	1,0x7E,2
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0197                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019C                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020D                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0FE4                     	;# 
   260  0FE5                     	;# 
   261  0FE6                     	;# 
   262  0FE7                     	;# 
   263  0FE8                     	;# 
   264  0FE9                     	;# 
   265  0FEA                     	;# 
   266  0FEB                     	;# 
   267  0FED                     	;# 
   268  0FEE                     	;# 
   269  0FEF                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0097                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020D                     	;# 
   343  0210                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0298                     	;# 
   364  0298                     	;# 
   365  0299                     	;# 
   366  029A                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0197                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020D                     	;# 
   454  0210                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  011D                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0191                     	;# 
   545  0191                     	;# 
   546  0192                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020D                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0216                     	;# 
   579  0217                     	;# 
   580  0217                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0298                     	;# 
   586  0298                     	;# 
   587  0299                     	;# 
   588  029A                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0099                     	;# 
   640  009A                     	;# 
   641  009B                     	;# 
   642  009B                     	;# 
   643  009C                     	;# 
   644  009D                     	;# 
   645  009E                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  011D                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  018E                     	;# 
   655  0191                     	;# 
   656  0191                     	;# 
   657  0192                     	;# 
   658  0193                     	;# 
   659  0193                     	;# 
   660  0194                     	;# 
   661  0195                     	;# 
   662  0196                     	;# 
   663  0197                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019E                     	;# 
   674  019F                     	;# 
   675  020D                     	;# 
   676  0210                     	;# 
   677  0211                     	;# 
   678  0211                     	;# 
   679  0212                     	;# 
   680  0212                     	;# 
   681  0213                     	;# 
   682  0213                     	;# 
   683  0214                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0298                     	;# 
   697  0298                     	;# 
   698  0299                     	;# 
   699  029A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0099                     	;# 
   751  009A                     	;# 
   752  009B                     	;# 
   753  009B                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009E                     	;# 
   757  010C                     	;# 
   758  010D                     	;# 
   759  010E                     	;# 
   760  0116                     	;# 
   761  0117                     	;# 
   762  011D                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  0191                     	;# 
   767  0191                     	;# 
   768  0192                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0197                     	;# 
   775  0199                     	;# 
   776  019A                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019C                     	;# 
   782  019C                     	;# 
   783  019D                     	;# 
   784  019E                     	;# 
   785  019F                     	;# 
   786  020D                     	;# 
   787  0210                     	;# 
   788  0211                     	;# 
   789  0211                     	;# 
   790  0212                     	;# 
   791  0212                     	;# 
   792  0213                     	;# 
   793  0213                     	;# 
   794  0214                     	;# 
   795  0214                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0216                     	;# 
   800  0216                     	;# 
   801  0217                     	;# 
   802  0217                     	;# 
   803  0291                     	;# 
   804  0291                     	;# 
   805  0292                     	;# 
   806  0293                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  001A                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0090                     	;# 
   856  0091                     	;# 
   857  0092                     	;# 
   858  0095                     	;# 
   859  0096                     	;# 
   860  0097                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0116                     	;# 
   872  0117                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019C                     	;# 
   893  019C                     	;# 
   894  019D                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  020D                     	;# 
   898  0210                     	;# 
   899  0211                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0212                     	;# 
   903  0213                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0214                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0216                     	;# 
   911  0216                     	;# 
   912  0217                     	;# 
   913  0217                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0090                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0197                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020D                     	;# 
  1009  0210                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0298                     	;# 
  1030  0298                     	;# 
  1031  0299                     	;# 
  1032  029A                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0FE4                     	;# 
  1037  0FE5                     	;# 
  1038  0FE6                     	;# 
  1039  0FE7                     	;# 
  1040  0FE8                     	;# 
  1041  0FE9                     	;# 
  1042  0FEA                     	;# 
  1043  0FEB                     	;# 
  1044  0FED                     	;# 
  1045  0FEE                     	;# 
  1046  0FEF                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0008                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0015                     	;# 
  1066  0016                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  010E                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0197                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020D                     	;# 
  1120  0210                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  0394                     	;# 
  1145  0395                     	;# 
  1146  0396                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0015                     	;# 
  1177  0016                     	;# 
  1178  0016                     	;# 
  1179  0017                     	;# 
  1180  0018                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  008C                     	;# 
  1186  008D                     	;# 
  1187  008E                     	;# 
  1188  0090                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0099                     	;# 
  1195  009A                     	;# 
  1196  009B                     	;# 
  1197  009B                     	;# 
  1198  009C                     	;# 
  1199  009D                     	;# 
  1200  009E                     	;# 
  1201  010C                     	;# 
  1202  010D                     	;# 
  1203  010E                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  011D                     	;# 
  1207  018C                     	;# 
  1208  018D                     	;# 
  1209  018E                     	;# 
  1210  0191                     	;# 
  1211  0191                     	;# 
  1212  0192                     	;# 
  1213  0193                     	;# 
  1214  0193                     	;# 
  1215  0194                     	;# 
  1216  0195                     	;# 
  1217  0196                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  019A                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019C                     	;# 
  1227  019D                     	;# 
  1228  019E                     	;# 
  1229  019F                     	;# 
  1230  020D                     	;# 
  1231  0210                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0298                     	;# 
  1252  0298                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000D                     	;# 
  1283  000E                     	;# 
  1284  0010                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0099                     	;# 
  1306  009A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010E                     	;# 
  1315  0116                     	;# 
  1316  0117                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018D                     	;# 
  1320  018E                     	;# 
  1321  0191                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0197                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019C                     	;# 
  1337  019C                     	;# 
  1338  019D                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  020D                     	;# 
  1342  0210                     	;# 
  1343  0211                     	;# 
  1344  0211                     	;# 
  1345  0212                     	;# 
  1346  0212                     	;# 
  1347  0213                     	;# 
  1348  0213                     	;# 
  1349  0214                     	;# 
  1350  0214                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0216                     	;# 
  1355  0216                     	;# 
  1356  0217                     	;# 
  1357  0217                     	;# 
  1358  0291                     	;# 
  1359  0291                     	;# 
  1360  0292                     	;# 
  1361  0293                     	;# 
  1362  0298                     	;# 
  1363  0298                     	;# 
  1364  0299                     	;# 
  1365  029A                     	;# 
  1366  0394                     	;# 
  1367  0395                     	;# 
  1368  0396                     	;# 
  1369  0FE4                     	;# 
  1370  0FE5                     	;# 
  1371  0FE6                     	;# 
  1372  0FE7                     	;# 
  1373  0FE8                     	;# 
  1374  0FE9                     	;# 
  1375  0FEA                     	;# 
  1376  0FEB                     	;# 
  1377  0FED                     	;# 
  1378  0FEE                     	;# 
  1379  0FEF                     	;# 
  1380  0000                     	;# 
  1381  0001                     	;# 
  1382  0002                     	;# 
  1383  0003                     	;# 
  1384  0004                     	;# 
  1385  0005                     	;# 
  1386  0006                     	;# 
  1387  0007                     	;# 
  1388  0008                     	;# 
  1389  0009                     	;# 
  1390  000A                     	;# 
  1391  000B                     	;# 
  1392  000C                     	;# 
  1393  000D                     	;# 
  1394  000E                     	;# 
  1395  0010                     	;# 
  1396  0011                     	;# 
  1397  0012                     	;# 
  1398  0015                     	;# 
  1399  0016                     	;# 
  1400  0016                     	;# 
  1401  0017                     	;# 
  1402  0018                     	;# 
  1403  0019                     	;# 
  1404  001A                     	;# 
  1405  001B                     	;# 
  1406  001C                     	;# 
  1407  008C                     	;# 
  1408  008D                     	;# 
  1409  008E                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0095                     	;# 
  1414  0096                     	;# 
  1415  0097                     	;# 
  1416  0099                     	;# 
  1417  009A                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  010C                     	;# 
  1424  010D                     	;# 
  1425  010E                     	;# 
  1426  0116                     	;# 
  1427  0117                     	;# 
  1428  011D                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  018E                     	;# 
  1432  0191                     	;# 
  1433  0191                     	;# 
  1434  0192                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0197                     	;# 
  1441  0199                     	;# 
  1442  019A                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019E                     	;# 
  1451  019F                     	;# 
  1452  020D                     	;# 
  1453  0210                     	;# 
  1454  0211                     	;# 
  1455  0211                     	;# 
  1456  0212                     	;# 
  1457  0212                     	;# 
  1458  0213                     	;# 
  1459  0213                     	;# 
  1460  0214                     	;# 
  1461  0214                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  0394                     	;# 
  1478  0395                     	;# 
  1479  0396                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0010                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0090                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020D                     	;# 
  1564  0210                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  010C                     	;# 
  1646  010D                     	;# 
  1647  010E                     	;# 
  1648  0116                     	;# 
  1649  0117                     	;# 
  1650  011D                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0191                     	;# 
  1655  0191                     	;# 
  1656  0192                     	;# 
  1657  0193                     	;# 
  1658  0193                     	;# 
  1659  0194                     	;# 
  1660  0195                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0199                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019F                     	;# 
  1674  020D                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0298                     	;# 
  1696  0298                     	;# 
  1697  0299                     	;# 
  1698  029A                     	;# 
  1699  0394                     	;# 
  1700  0395                     	;# 
  1701  0396                     	;# 
  1702  0FE4                     	;# 
  1703  0FE5                     	;# 
  1704  0FE6                     	;# 
  1705  0FE7                     	;# 
  1706  0FE8                     	;# 
  1707  0FE9                     	;# 
  1708  0FEA                     	;# 
  1709  0FEB                     	;# 
  1710  0FED                     	;# 
  1711  0FEE                     	;# 
  1712  0FEF                     	;# 
  1713  0000                     	;# 
  1714  0001                     	;# 
  1715  0002                     	;# 
  1716  0003                     	;# 
  1717  0004                     	;# 
  1718  0005                     	;# 
  1719  0006                     	;# 
  1720  0007                     	;# 
  1721  0008                     	;# 
  1722  0009                     	;# 
  1723  000A                     	;# 
  1724  000B                     	;# 
  1725  000C                     	;# 
  1726  000D                     	;# 
  1727  000E                     	;# 
  1728  0010                     	;# 
  1729  0011                     	;# 
  1730  0012                     	;# 
  1731  0015                     	;# 
  1732  0016                     	;# 
  1733  0016                     	;# 
  1734  0017                     	;# 
  1735  0018                     	;# 
  1736  0019                     	;# 
  1737  001A                     	;# 
  1738  001B                     	;# 
  1739  001C                     	;# 
  1740  008C                     	;# 
  1741  008D                     	;# 
  1742  008E                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0095                     	;# 
  1747  0096                     	;# 
  1748  0097                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009B                     	;# 
  1753  009C                     	;# 
  1754  009D                     	;# 
  1755  009E                     	;# 
  1756  010C                     	;# 
  1757  010D                     	;# 
  1758  010E                     	;# 
  1759  0116                     	;# 
  1760  0117                     	;# 
  1761  011D                     	;# 
  1762  018C                     	;# 
  1763  018D                     	;# 
  1764  018E                     	;# 
  1765  0191                     	;# 
  1766  0191                     	;# 
  1767  0192                     	;# 
  1768  0193                     	;# 
  1769  0193                     	;# 
  1770  0194                     	;# 
  1771  0195                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0199                     	;# 
  1775  019A                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019C                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020D                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0298                     	;# 
  1807  0298                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0010                     	;# 
  1840  0011                     	;# 
  1841  0012                     	;# 
  1842  0015                     	;# 
  1843  0016                     	;# 
  1844  0016                     	;# 
  1845  0017                     	;# 
  1846  0018                     	;# 
  1847  0019                     	;# 
  1848  001A                     	;# 
  1849  001B                     	;# 
  1850  001C                     	;# 
  1851  008C                     	;# 
  1852  008D                     	;# 
  1853  008E                     	;# 
  1854  0090                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0095                     	;# 
  1858  0096                     	;# 
  1859  0097                     	;# 
  1860  0099                     	;# 
  1861  009A                     	;# 
  1862  009B                     	;# 
  1863  009B                     	;# 
  1864  009C                     	;# 
  1865  009D                     	;# 
  1866  009E                     	;# 
  1867  010C                     	;# 
  1868  010D                     	;# 
  1869  010E                     	;# 
  1870  0116                     	;# 
  1871  0117                     	;# 
  1872  011D                     	;# 
  1873  018C                     	;# 
  1874  018D                     	;# 
  1875  018E                     	;# 
  1876  0191                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0193                     	;# 
  1880  0193                     	;# 
  1881  0194                     	;# 
  1882  0195                     	;# 
  1883  0196                     	;# 
  1884  0197                     	;# 
  1885  0199                     	;# 
  1886  019A                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019D                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  020D                     	;# 
  1897  0210                     	;# 
  1898  0211                     	;# 
  1899  0211                     	;# 
  1900  0212                     	;# 
  1901  0212                     	;# 
  1902  0213                     	;# 
  1903  0213                     	;# 
  1904  0214                     	;# 
  1905  0214                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0216                     	;# 
  1910  0216                     	;# 
  1911  0217                     	;# 
  1912  0217                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0298                     	;# 
  1918  0298                     	;# 
  1919  0299                     	;# 
  1920  029A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0015                     	;# 
  1954  0016                     	;# 
  1955  0016                     	;# 
  1956  0017                     	;# 
  1957  0018                     	;# 
  1958  0019                     	;# 
  1959  001A                     	;# 
  1960  001B                     	;# 
  1961  001C                     	;# 
  1962  008C                     	;# 
  1963  008D                     	;# 
  1964  008E                     	;# 
  1965  0090                     	;# 
  1966  0091                     	;# 
  1967  0092                     	;# 
  1968  0095                     	;# 
  1969  0096                     	;# 
  1970  0097                     	;# 
  1971  0099                     	;# 
  1972  009A                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0116                     	;# 
  1982  0117                     	;# 
  1983  011D                     	;# 
  1984  018C                     	;# 
  1985  018D                     	;# 
  1986  018E                     	;# 
  1987  0191                     	;# 
  1988  0191                     	;# 
  1989  0192                     	;# 
  1990  0193                     	;# 
  1991  0193                     	;# 
  1992  0194                     	;# 
  1993  0195                     	;# 
  1994  0196                     	;# 
  1995  0197                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  020D                     	;# 
  2008  0210                     	;# 
  2009  0211                     	;# 
  2010  0211                     	;# 
  2011  0212                     	;# 
  2012  0212                     	;# 
  2013  0213                     	;# 
  2014  0213                     	;# 
  2015  0214                     	;# 
  2016  0214                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0216                     	;# 
  2021  0216                     	;# 
  2022  0217                     	;# 
  2023  0217                     	;# 
  2024  0291                     	;# 
  2025  0291                     	;# 
  2026  0292                     	;# 
  2027  0293                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000D                     	;# 
  2060  000E                     	;# 
  2061  0010                     	;# 
  2062  0011                     	;# 
  2063  0012                     	;# 
  2064  0015                     	;# 
  2065  0016                     	;# 
  2066  0016                     	;# 
  2067  0017                     	;# 
  2068  0018                     	;# 
  2069  0019                     	;# 
  2070  001A                     	;# 
  2071  001B                     	;# 
  2072  001C                     	;# 
  2073  008C                     	;# 
  2074  008D                     	;# 
  2075  008E                     	;# 
  2076  0090                     	;# 
  2077  0091                     	;# 
  2078  0092                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0099                     	;# 
  2083  009A                     	;# 
  2084  009B                     	;# 
  2085  009B                     	;# 
  2086  009C                     	;# 
  2087  009D                     	;# 
  2088  009E                     	;# 
  2089  010C                     	;# 
  2090  010D                     	;# 
  2091  010E                     	;# 
  2092  0116                     	;# 
  2093  0117                     	;# 
  2094  011D                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  0191                     	;# 
  2099  0191                     	;# 
  2100  0192                     	;# 
  2101  0193                     	;# 
  2102  0193                     	;# 
  2103  0194                     	;# 
  2104  0195                     	;# 
  2105  0196                     	;# 
  2106  0197                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020D                     	;# 
  2119  0210                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0291                     	;# 
  2136  0291                     	;# 
  2137  0292                     	;# 
  2138  0293                     	;# 
  2139  0298                     	;# 
  2140  0298                     	;# 
  2141  0299                     	;# 
  2142  029A                     	;# 
  2143  0394                     	;# 
  2144  0395                     	;# 
  2145  0396                     	;# 
  2146  0FE4                     	;# 
  2147  0FE5                     	;# 
  2148  0FE6                     	;# 
  2149  0FE7                     	;# 
  2150  0FE8                     	;# 
  2151  0FE9                     	;# 
  2152  0FEA                     	;# 
  2153  0FEB                     	;# 
  2154  0FED                     	;# 
  2155  0FEE                     	;# 
  2156  0FEF                     	;# 
  2157                           
  2158                           	psect	idataBANK4
  2159  1F26                     __pidataBANK4:	
  2160                           
  2161                           ;initializer for __product
  2162  1F26  3463               	retlw	99
  2163  1F27  3402               	retlw	2
  2164  1F28  3400               	retlw	0
  2165  1F29  3400               	retlw	0
  2166  1F2A  3400               	retlw	0
  2167  1F2B  3400               	retlw	0
  2168  1F2C  3400               	retlw	0
  2169  1F2D  3400               	retlw	0
  2170  1F2E  3400               	retlw	0
  2171  1F2F  3400               	retlw	0
  2172  1F30  3400               	retlw	0
  2173  1F31  3400               	retlw	0
  2174  1F32  34FF               	retlw	255
  2175  1F33  34FF               	retlw	255
  2176  1F34  34FF               	retlw	255
  2177  1F35  3400               	retlw	0
  2178  1F36  3400               	retlw	0
  2179  1F37  3400               	retlw	0
  2180  1F38  3400               	retlw	0
  2181  1F39  3400               	retlw	0
  2182  1F3A  3400               	retlw	0
  2183  1F3B  3400               	retlw	0
  2184  1F3C  3400               	retlw	0
  2185  1F3D  3400               	retlw	0
  2186  1F3E  3400               	retlw	0
  2187  1F3F  3400               	retlw	0
  2188  1F40  3400               	retlw	0
  2189  1F41  3400               	retlw	0
  2190  1F42  3400               	retlw	0
  2191  1F43  3400               	retlw	0
  2192  1F44  3400               	retlw	0
  2193  1F45  3400               	retlw	0
  2194                           
  2195                           	psect	stringtext
  2196  1000                     __pstringtext:	
  2197  1000                     _CC2500_registers_address:	
  2198  1000  3403               	retlw	3
  2199  1001  3416               	retlw	22
  2200  1002  3417               	retlw	23
  2201  1003  341E               	retlw	30
  2202  1004  341F               	retlw	31
  2203  1005  3420               	retlw	32
  2204  1006  342A               	retlw	42
  2205  1007  342B               	retlw	43
  2206  1008  340B               	retlw	11
  2207  1009  340C               	retlw	12
  2208  100A  340D               	retlw	13
  2209  100B  340E               	retlw	14
  2210  100C  340F               	retlw	15
  2211  100D  3410               	retlw	16
  2212  100E  3411               	retlw	17
  2213  100F  3412               	retlw	18
  2214  1010  3413               	retlw	19
  2215  1011  3414               	retlw	20
  2216  1012  340A               	retlw	10
  2217  1013  3415               	retlw	21
  2218  1014  3421               	retlw	33
  2219  1015  3422               	retlw	34
  2220  1016  3418               	retlw	24
  2221  1017  3419               	retlw	25
  2222  1018  341A               	retlw	26
  2223  1019  341B               	retlw	27
  2224  101A  341C               	retlw	28
  2225  101B  341D               	retlw	29
  2226  101C  3423               	retlw	35
  2227  101D  3424               	retlw	36
  2228  101E  3425               	retlw	37
  2229  101F  3426               	retlw	38
  2230  1020  3429               	retlw	41
  2231  1021  342C               	retlw	44
  2232  1022  342D               	retlw	45
  2233  1023  342E               	retlw	46
  2234  1024  3400               	retlw	0
  2235  1025  3401               	retlw	1
  2236  1026  3402               	retlw	2
  2237  1027  3407               	retlw	7
  2238  1028  3408               	retlw	8
  2239  1029  3409               	retlw	9
  2240  102A  3406               	retlw	6
  2241  102B  3404               	retlw	4
  2242  102C  3405               	retlw	5
  2243  102D  3427               	retlw	39
  2244  102E  3428               	retlw	40
  2245  102F                     __end_of_CC2500_registers_address:	
  2246  102F                     _CC2500_rfSettings:	
  2247  102F  3407               	retlw	7
  2248  1030  3407               	retlw	7
  2249  1031  3430               	retlw	48
  2250  1032  3487               	retlw	135
  2251  1033  346B               	retlw	107
  2252  1034  34F8               	retlw	248
  2253  1035  347F               	retlw	127
  2254  1036  343F               	retlw	63
  2255  1037  3409               	retlw	9
  2256  1038  3400               	retlw	0
  2257  1039  345C               	retlw	92
  2258  103A  34A7               	retlw	167
  2259  103B  3462               	retlw	98
  2260  103C  3486               	retlw	134
  2261  103D  3483               	retlw	131
  2262  103E  3403               	retlw	3
  2263  103F  3422               	retlw	34
  2264  1040  34F8               	retlw	248
  2265  1041  3400               	retlw	0
  2266  1042  3444               	retlw	68
  2267  1043  34B6               	retlw	182
  2268  1044  3410               	retlw	16
  2269  1045  3418               	retlw	24
  2270  1046  341D               	retlw	29
  2271  1047  341C               	retlw	28
  2272  1048  34C7               	retlw	199
  2273  1049  3400               	retlw	0
  2274  104A  34B2               	retlw	178
  2275  104B  34EA               	retlw	234
  2276  104C  340A               	retlw	10
  2277  104D  3400               	retlw	0
  2278  104E  3411               	retlw	17
  2279  104F  3459               	retlw	89
  2280  1050  3488               	retlw	136
  2281  1051  3431               	retlw	49
  2282  1052  340B               	retlw	11
  2283  1053  342F               	retlw	47
  2284  1054  342E               	retlw	46
  2285  1055  3406               	retlw	6
  2286  1056  3404               	retlw	4
  2287  1057  3405               	retlw	5
  2288  1058  3400               	retlw	0
  2289  1059  3430               	retlw	48
  2290  105A  34D3               	retlw	211
  2291  105B  3491               	retlw	145
  2292  105C  3441               	retlw	65
  2293  105D  3400               	retlw	0
  2294  105E                     __end_of_CC2500_rfSettings:	
  2295  105E                     _CC2500_patable_vaule:	
  2296  105E  34FE               	retlw	254
  2297  105F  34FE               	retlw	254
  2298  1060  34FE               	retlw	254
  2299  1061  34FE               	retlw	254
  2300  1062  34FE               	retlw	254
  2301  1063  34FE               	retlw	254
  2302  1064  34FE               	retlw	254
  2303  1065  34FE               	retlw	254
  2304  1066                     __end_of_CC2500_patable_vaule:	
  2305                           
  2306                           	psect	nvCOMMON
  2307  0079                     __pnvCOMMON:	
  2308  0079                     _product:	
  2309  0079                     	ds	1
  2310  000C                     _PORTA	set	12
  2311  000D                     _PORTB	set	13
  2312  000E                     _PORTC	set	14
  2313  0018                     _T1CON	set	24
  2314  0017                     _TMR1H	set	23
  2315  0016                     _TMR1L	set	22
  2316  005F                     _GIE	set	95
  2317  005B                     _IOCIE	set	91
  2318  0058                     _IOCIF	set	88
  2319  005E                     _PEIE	set	94
  2320  0060                     _RA0	set	96
  2321  0063                     _RA3	set	99
  2322  0064                     _RA4	set	100
  2323  0066                     _RA6	set	102
  2324  0067                     _RA7	set	103
  2325  0068                     _RB0	set	104
  2326  0069                     _RB1	set	105
  2327  006A                     _RB2	set	106
  2328  006B                     _RB3	set	107
  2329  006C                     _RB4	set	108
  2330  006D                     _RB5	set	109
  2331  0070                     _RC0	set	112
  2332  0071                     _RC1	set	113
  2333  0072                     _RC2	set	114
  2334  0074                     _RC4	set	116
  2335  0075                     _RC5	set	117
  2336  0077                     _RC7	set	119
  2337  0088                     _TMR1IF	set	136
  2338  009D                     _ADCON0	set	157
  2339  009E                     _ADCON1	set	158
  2340  009C                     _ADRESH	set	156
  2341  009B                     _ADRESL	set	155
  2342  0099                     _OSCCON	set	153
  2343  008C                     _TRISA	set	140
  2344  008D                     _TRISB	set	141
  2345  008E                     _TRISC	set	142
  2346  0097                     _WDTCON	set	151
  2347  04E9                     _GO_nDONE	set	1257
  2348  0488                     _TMR1IE	set	1160
  2349  0117                     _FVRCON	set	279
  2350  010C                     _LATA	set	268
  2351  010D                     _LATB	set	269
  2352  010E                     _LATC	set	270
  2353  018C                     _ANSELA	set	396
  2354  018D                     _ANSELB	set	397
  2355  018E                     _ANSELC	set	398
  2356  0192                     _PMADRH	set	402
  2357  0191                     _PMADRL	set	401
  2358  0196                     _PMCON2	set	406
  2359  0194                     _PMDATH	set	404
  2360  0193                     _PMDATL	set	403
  2361  0CAE                     _CFGS	set	3246
  2362  0CAC                     _FREE	set	3244
  2363  0CAD                     _LWLO	set	3245
  2364  0CA8                     _RD	set	3240
  2365  0CA9                     _WR	set	3241
  2366  0CAA                     _WREN	set	3242
  2367  1069                     _WPUB1	set	4201
  2368  106A                     _WPUB2	set	4202
  2369  0396                     _IOCBF	set	918
  2370  0395                     _IOCBN	set	917
  2371  0394                     _IOCBP	set	916
  2372  1CB2                     _IOCBF2	set	7346
  2373                           
  2374                           ; #config settings
  2375  0000                     
  2376                           	psect	cinit
  2377  0015                     start_initialization:	
  2378  0015                     __initialization:	
  2379                           
  2380                           ; Clear objects allocated to BITCOMMON
  2381  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2382                           
  2383                           ; Clear objects allocated to COMMON
  2384  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2385  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2386  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BANK0
  2389  0019  01EF               	clrf	__pbssBANK0& (0+127)
  2390                           
  2391                           ; Clear objects allocated to BANK1
  2392  001A  30A0               	movlw	low __pbssBANK1
  2393  001B  0084               	movwf	4
  2394  001C  3000               	movlw	high __pbssBANK1
  2395  001D  0085               	movwf	5
  2396  001E  3048               	movlw	72
  2397  001F  319A  22F5  3180   	fcall	clear_ram0
  2398                           
  2399                           ; Clear objects allocated to BANK2
  2400  0022  3020               	movlw	low __pbssBANK2
  2401  0023  0084               	movwf	4
  2402  0024  3001               	movlw	high __pbssBANK2
  2403  0025  0085               	movwf	5
  2404  0026  304E               	movlw	78
  2405  0027  319A  22F5  3180   	fcall	clear_ram0
  2406                           
  2407                           ; Clear objects allocated to BANK3
  2408  002A  30A0               	movlw	low __pbssBANK3
  2409  002B  0084               	movwf	4
  2410  002C  3001               	movlw	high __pbssBANK3
  2411  002D  0085               	movwf	5
  2412  002E  304F               	movlw	79
  2413  002F  319A  22F5  3180   	fcall	clear_ram0
  2414                           
  2415                           ; Clear objects allocated to BANK4
  2416  0032  3020               	movlw	low __pbssBANK4
  2417  0033  0084               	movwf	4
  2418  0034  3002               	movlw	high __pbssBANK4
  2419  0035  0085               	movwf	5
  2420  0036  3025               	movlw	37
  2421  0037  319A  22F5  3180   	fcall	clear_ram0
  2422                           
  2423                           ; Initialize objects allocated to BANK4
  2424  003A  3026               	movlw	low __pidataBANK4
  2425  003B  0084               	movwf	4
  2426  003C  309F               	movlw	(high __pidataBANK4)| (0+128)
  2427  003D  0085               	movwf	5
  2428  003E  3045               	movlw	low __pdataBANK4
  2429  003F  0086               	movwf	6
  2430  0040  3002               	movlw	high __pdataBANK4
  2431  0041  0087               	movwf	7
  2432  0042  3020               	movlw	32
  2433  0043  319A  22EF         	fcall	init_ram
  2434  0045                     end_of_initialization:	
  2435                           ;End of C runtime variable initialization code
  2436                           
  2437  0045                     __end_of__initialization:	
  2438  0045  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2439  0046  0020               	movlb	0
  2440  0047  3188  280F         	ljmp	_main	;jump to C main() function
  2441                           
  2442                           	psect	bitbssCOMMON
  2443  03C0                     __pbitbssCOMMON:	
  2444  03C0                     _Receive_OK:	
  2445  03C0                     	ds	1
  2446  03C1                     _Transceive_OK:	
  2447  03C1                     	ds	1
  2448                           
  2449                           	psect	bssCOMMON
  2450  0075                     __pbssCOMMON:	
  2451  0075                     _DelayOff:	
  2452  0075                     	ds	1
  2453  0076                     _DimmerLightsIntr:	
  2454  0076                     	ds	1
  2455  0077                     _Sw:	
  2456  0077                     	ds	1
  2457                           
  2458                           	psect	bssBANK0
  2459  006F                     __pbssBANK0:	
  2460  006F                     _DimmerLights:	
  2461  006F                     	ds	1
  2462                           
  2463                           	psect	bssBANK1
  2464  00A0                     __pbssBANK1:	
  2465  00A0                     _myMain:	
  2466  00A0                     	ds	14
  2467  00AE                     _Buz1:	
  2468  00AE                     	ds	12
  2469  00BA                     _RF1:	
  2470  00BA                     	ds	12
  2471  00C6                     _Dimmer:	
  2472  00C6                     	ds	3
  2473  00C9                     _CRC:	
  2474  00C9                     	ds	1
  2475  00CA                     _DimmerLights11:	
  2476  00CA                     	ds	1
  2477  00CB                     _DimmerLights22:	
  2478  00CB                     	ds	1
  2479  00CC                     _DimmerLightsIntrIOC:	
  2480  00CC                     	ds	1
  2481  00CD                     _LED:	
  2482  00CD                     	ds	1
  2483  00CE                     _RSSI:	
  2484  00CE                     	ds	1
  2485  00CF                     _Rx_Length:	
  2486  00CF                     	ds	1
  2487  00D0                     _SPI0Buffer:	
  2488  00D0                     	ds	1
  2489  00D1                     _SwDetect:	
  2490  00D1                     	ds	1
  2491  00D2                     _Tx_Length:	
  2492  00D2                     	ds	1
  2493  00D3                     _r_address:	
  2494  00D3                     	ds	1
  2495  00D4                     _r_data:	
  2496  00D4                     	ds	1
  2497  00D5                     _s_data:	
  2498  00D5                     	ds	1
  2499  00D6                     _Temp:	
  2500  00D6                     	ds	18
  2501                           
  2502                           	psect	bssBANK2
  2503  0120                     __pbssBANK2:	
  2504  0120                     _Timer1:	
  2505  0120                     	ds	3
  2506  0123                     _RF_Count:	
  2507  0123                     	ds	2
  2508  0125                     _WDT:	
  2509  0125                     	ds	2
  2510  0127                     _Load:	
  2511  0127                     	ds	46
  2512  0155                     _DimmerLights1:	
  2513  0155                     	ds	17
  2514  0166                     _VarErrLED:	
  2515  0166                     	ds	4
  2516  016A                     _VarLED1:	
  2517  016A                     	ds	4
  2518                           
  2519                           	psect	bssBANK3
  2520  01A0                     __pbssBANK3:	
  2521  01A0                     _RF_Data:	
  2522  01A0                     	ds	30
  2523  01BE                     _DimmerLights2:	
  2524  01BE                     	ds	17
  2525  01CF                     _Sw1:	
  2526  01CF                     	ds	9
  2527  01D8                     _Sw2:	
  2528  01D8                     	ds	9
  2529  01E1                     _DlySw1:	
  2530  01E1                     	ds	5
  2531  01E6                     _DlySw2:	
  2532  01E6                     	ds	5
  2533  01EB                     _VarLED2:	
  2534  01EB                     	ds	4
  2535                           
  2536                           	psect	bssBANK4
  2537  0220                     __pbssBANK4:	
  2538  0220                     _Memory:	
  2539  0220                     	ds	37
  2540                           
  2541                           	psect	dataBANK4
  2542  0245                     __pdataBANK4:	
  2543  0245                     __product:	
  2544  0245                     	ds	32
  2545                           
  2546                           	psect	clrtext
  2547  1AF5                     clear_ram0:	
  2548                           ;	Called with FSR0 containing the base address, and
  2549                           ;	WREG with the size to clear
  2550                           
  2551  1AF5  0064               	clrwdt	;clear the watchdog before getting into this loop
  2552  1AF6                     clrloop0:	
  2553  1AF6  0180               	clrf	0	;clear RAM location pointed to by FSR
  2554  1AF7  3101               	addfsr 0,1
  2555  1AF8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2556  1AF9  2AF6               	goto	clrloop0	;have we reached the end yet?
  2557  1AFA  3400               	retlw	0	;all done for this memory range, return
  2558                           
  2559                           	psect	inittext
  2560  1AEF                     init_ram:	
  2561  1AEF  00FE               	movwf	126
  2562  1AF0                     initloop:	
  2563  1AF0  0012               	moviw fsr0++
  2564  1AF1  001E               	movwi fsr1++
  2565  1AF2  0BFE               	decfsz	126,f
  2566  1AF3  2AF0               	goto	initloop
  2567  1AF4  3400               	retlw	0
  2568                           
  2569                           	psect	cstackBANK4
  2570  0265                     __pcstackBANK4:	
  2571  0265                     setRF_Main@loop_f:	
  2572                           
  2573                           ; 1 bytes @ 0x0
  2574  0265                     	ds	1
  2575  0266                     setRF_Main@Receive_OK:	
  2576                           
  2577                           ; 1 bytes @ 0x1
  2578  0266                     	ds	1
  2579  0267                     setRF_Main@error:	
  2580                           
  2581                           ; 1 bytes @ 0x2
  2582  0267                     	ds	1
  2583  0268                     ?_main:	
  2584  0268                     main@argc:	
  2585                           ; 2 bytes @ 0x3
  2586                           
  2587                           
  2588                           ; 2 bytes @ 0x3
  2589  0268                     	ds	2
  2590  026A                     main@argv:	
  2591                           
  2592                           ; 2 bytes @ 0x5
  2593  026A                     	ds	2
  2594                           
  2595                           	psect	cstackBANK1
  2596  00E8                     __pcstackBANK1:	
  2597  00E8                     setDimmerLights_ErrorClose@count:	
  2598  00E8                     Exception_Main@count:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601                           
  2602                           ; 1 bytes @ 0x0
  2603  00E8                     	ds	1
  2604  00E9                     setDimmerLights_ErrorClose@lights:	
  2605  00E9                     Exception_Main@error:	
  2606                           ; 1 bytes @ 0x1
  2607                           
  2608                           
  2609                           ; 1 bytes @ 0x1
  2610  00E9                     	ds	1
  2611  00EA                     setDimmerLights_ErrorClose@i:	
  2612  00EA                     Exception_Main@i:	
  2613                           ; 2 bytes @ 0x2
  2614                           
  2615                           
  2616                           ; 2 bytes @ 0x2
  2617  00EA                     	ds	2
  2618  00EC                     getRxData@error:	
  2619  00EC                     Exception_Main@i_3620:	
  2620                           ; 1 bytes @ 0x4
  2621                           
  2622                           
  2623                           ; 2 bytes @ 0x4
  2624  00EC                     	ds	1
  2625  00ED                     ??_setRF_Main:	
  2626                           
  2627                           ; 0 bytes @ 0x5
  2628  00ED                     	ds	1
  2629  00EE                     Exception_Main@lights:	
  2630                           
  2631                           ; 1 bytes @ 0x6
  2632  00EE                     	ds	1
  2633                           
  2634                           	psect	cstackCOMMON
  2635  0070                     __pcstackCOMMON:	
  2636  0070                     ?_Timeout_Counter:	
  2637  0070                     ?_set_TimeoutCleared:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_CC2500_WriteByte:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_CC2500_WriteCommand:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_CC2500_ReadStatus:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_CC2500_ReadByte:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_CC2500_PowerRST:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_CC2500_InitSetREG:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_CC2500_InitPATable:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_CC2500_ClearTXFIFO:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_CC2500_ClearRXFIFO:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_CC2500_FrequencyCabr:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_CC2500_SIDLEMode:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_DlyOff_Initialization:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_DlyOff_Main:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_setDimmerLights_ErrorClose:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setDimmerLights_Initialization:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_setDimmerLights_Main:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_setDimmerLights_Line:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setTxData:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_setLED_Initialization:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_setLED_Main:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Fosc_Set:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_IO_Set:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_TMR1_Set:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_ADC_Set:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_IOC_Set:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_WDT_Set:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_IOC_ISR:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_TMR1_ISR:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_Flash_Memory_Write:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_Flash_Memory_Modify:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_WDT_Clearing:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_myMain_Initialization:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_Temp_Initialization:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Load_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Switch_Initialization:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_RF_Initialization:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_getLoad_AD:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_getTemp_AD:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_my_MainTimer:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_Temp_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_Load_Main:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_Switch_Main:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_RF_Main:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_Exception_Main:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setLoad_AH_AL_Restore:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setTemp_Initialization:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setTemp_Main:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setRF_Initialization:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_setRF_Main:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_RF_RxDisable:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_getRxData:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_setLog_Code:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_setControl_Lights_Table:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_setRFSW_Control:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_setRFSW_AdjControl:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_setRF_DimmerValue:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_setSw_Initialization:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_setSw_Main:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_Buzzer_Initialization:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_Buzzer_Main:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_CC2500_TxData:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_CC2500_RxData:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_CC2500_PowerOnInitial:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DelayOffPointSelect:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_DelayOff_Initialization:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_DelayOff_Main:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_DimmerIntrIOCPointSelect:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ??_DimmerIntrIOCPointSelect:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_DimmerIntrPointSelect:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ??_DimmerIntrPointSelect:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_setDimmerLights_IntrControl:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_DimmerLightsPointSelect:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_DimmerLights_Initialization:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_setDimmerLights_SwOn:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_setDimmerLights_SwOff:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_setDimmerLights_AdjOn:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_DimmerLights_Main:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_setDimmerLights_AdjRF:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_LedPointSelect:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_LED_Initialization:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_LED_Main:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_Mcu_Initialization:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_ISR:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_setDimmerReClock:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_Flash_Memory_Initialization:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0070                     ?_Flash_Memory_Main:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0070                     ?_Flash_Memory_Unlock:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0070                     ?_Flash_Memory_Erasing:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0070                     ?_setMemory_Modify:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0070                     ?_setMemory_LoopSave:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0070                     ?_WDT_Main:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0070                     ?_setRF_Learn:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0070                     ?_TouchPower:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0070                     ?_SwPointSelect:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0070                     ?_DelayTimejudge:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0070                     ?_getDimmerLights_Allow_Condition:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getLoad_OK:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getMain_All_Error_Status:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getMain_LightsStatus:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_setPercentValue:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_getPercentValue:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_Flash_Memory_Read:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_getRF_KeyStatus:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_getSw_KeyStatus:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_getDelayOff_GO:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_getDimmer_LoadGO:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_getDimmerLights_Line:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_getDimmerLights_Status:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_getAll_DimmerLights_AdjSw:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_getDimmer_Load_Status:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_getMain_Lights_Count:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976                           
  2977                           ; 1 bytes @ 0x0
  2978  0070                     	ds	1
  2979  0071                     DimmerIntrIOCPointSelect@lights:	
  2980  0071                     DimmerIntrPointSelect@lights:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983                           
  2984                           ; 1 bytes @ 0x1
  2985  0071                     	ds	1
  2986  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2987  0072                     ??_setDimmerLights_IntrControl:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2991                           ; 0 bytes @ 0x2
  2992                           
  2993                           
  2994                           ; 1 bytes @ 0x2
  2995  0072                     	ds	1
  2996  0073                     ??_IOC_ISR:	
  2997  0073                     ??_setDimmerReClock:	
  2998                           ; 0 bytes @ 0x3
  2999                           
  3000  0073                     setDimmerLights_IntrControl@lights:	
  3001                           ; 0 bytes @ 0x3
  3002                           
  3003                           
  3004                           ; 1 bytes @ 0x3
  3005  0073                     	ds	1
  3006  0074                     ??_TMR1_ISR:	
  3007  0074                     ??_ISR:	
  3008                           ; 0 bytes @ 0x4
  3009                           
  3010                           
  3011                           ; 0 bytes @ 0x4
  3012  0074                     	ds	1
  3013                           
  3014                           	psect	cstackBANK0
  3015  0020                     __pcstackBANK0:	
  3016  0020                     ??_Timeout_Counter:	
  3017  0020                     ??_set_TimeoutCleared:	
  3018                           ; 0 bytes @ 0x0
  3019                           
  3020  0020                     ??_CC2500_WriteByte:	
  3021                           ; 0 bytes @ 0x0
  3022                           
  3023  0020                     ??_CC2500_ReadByte:	
  3024                           ; 0 bytes @ 0x0
  3025                           
  3026  0020                     ?_DelayTime_1us:	
  3027                           ; 0 bytes @ 0x0
  3028                           
  3029  0020                     ??_getLoad_OK:	
  3030                           ; 0 bytes @ 0x0
  3031                           
  3032  0020                     ??_getMain_All_Error_Status:	
  3033                           ; 0 bytes @ 0x0
  3034                           
  3035  0020                     ??_getMain_LightsStatus:	
  3036                           ; 0 bytes @ 0x0
  3037                           
  3038  0020                     ??_setDimmerLights_Line:	
  3039                           ; 0 bytes @ 0x0
  3040                           
  3041  0020                     ??_setTxData:	
  3042                           ; 0 bytes @ 0x0
  3043                           
  3044  0020                     ??_Fosc_Set:	
  3045                           ; 0 bytes @ 0x0
  3046                           
  3047  0020                     ??_IO_Set:	
  3048                           ; 0 bytes @ 0x0
  3049                           
  3050  0020                     ??_TMR1_Set:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_ADC_Set:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_IOC_Set:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ??_WDT_Set:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_Flash_Memory_Read:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ?_setMemory_Data:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_Flash_Memory_Write:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_WDT_Clearing:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_myMain_Initialization:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_Temp_Initialization:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ??_setLoad_AH_AL_Restore:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_setTemp_Initialization:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ??_setRF_Initialization:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ??_getRF_KeyStatus:	
  3090                           ; 0 bytes @ 0x0
  3091                           
  3092  0020                     ??_getSw_KeyStatus:	
  3093                           ; 0 bytes @ 0x0
  3094                           
  3095  0020                     ??_Buzzer_Initialization:	
  3096                           ; 0 bytes @ 0x0
  3097                           
  3098  0020                     ??_Buzzer_Main:	
  3099                           ; 0 bytes @ 0x0
  3100                           
  3101  0020                     ??_DelayOffPointSelect:	
  3102                           ; 0 bytes @ 0x0
  3103                           
  3104  0020                     ??_DimmerLightsPointSelect:	
  3105                           ; 0 bytes @ 0x0
  3106                           
  3107  0020                     ??_getDimmer_LoadGO:	
  3108                           ; 0 bytes @ 0x0
  3109                           
  3110  0020                     ??_getDimmerLights_Line:	
  3111                           ; 0 bytes @ 0x0
  3112                           
  3113  0020                     ??_getDimmer_Load_Status:	
  3114                           ; 0 bytes @ 0x0
  3115                           
  3116  0020                     ??_LedPointSelect:	
  3117                           ; 0 bytes @ 0x0
  3118                           
  3119  0020                     ??_Flash_Memory_Unlock:	
  3120                           ; 0 bytes @ 0x0
  3121                           
  3122  0020                     ??_Flash_Memory_Erasing:	
  3123                           ; 0 bytes @ 0x0
  3124                           
  3125  0020                     ??_setMemory_Modify:	
  3126                           ; 0 bytes @ 0x0
  3127                           
  3128  0020                     ??_setMemory_LoopSave:	
  3129                           ; 0 bytes @ 0x0
  3130                           
  3131  0020                     ??_WDT_Main:	
  3132                           ; 0 bytes @ 0x0
  3133                           
  3134  0020                     ??_getMain_Lights_Count:	
  3135                           ; 0 bytes @ 0x0
  3136                           
  3137  0020                     ??_setRF_Learn:	
  3138                           ; 0 bytes @ 0x0
  3139                           
  3140  0020                     ??_TouchPower:	
  3141                           ; 0 bytes @ 0x0
  3142                           
  3143  0020                     ??_SwPointSelect:	
  3144                           ; 0 bytes @ 0x0
  3145                           
  3146  0020                     ?___bmul:	
  3147                           ; 0 bytes @ 0x0
  3148                           
  3149  0020                     ?_getBuz_GO:	
  3150                           ; 1 bytes @ 0x0
  3151                           
  3152  0020                     ?_getAD:	
  3153                           ; 2 bytes @ 0x0
  3154                           
  3155  0020                     ?___wmul:	
  3156                           ; 2 bytes @ 0x0
  3157                           
  3158  0020                     ?___awdiv:	
  3159                           ; 2 bytes @ 0x0
  3160                           
  3161  0020                     ?___lwdiv:	
  3162                           ; 2 bytes @ 0x0
  3163                           
  3164  0020                     ?___ftpack:	
  3165                           ; 2 bytes @ 0x0
  3166                           
  3167  0020                     getDimmer_LoadGO@loadgo:	
  3168                           ; 3 bytes @ 0x0
  3169                           
  3170  0020                     setDimmerLights_Line@lights:	
  3171                           ; 1 bytes @ 0x0
  3172                           
  3173  0020                     getDimmer_Load_Status@status:	
  3174                           ; 1 bytes @ 0x0
  3175                           
  3176  0020                     getAD@adcon1:	
  3177                           ; 1 bytes @ 0x0
  3178                           
  3179  0020                     setMemory_Data@data:	
  3180                           ; 1 bytes @ 0x0
  3181                           
  3182  0020                     getMain_LightsStatus@status:	
  3183                           ; 1 bytes @ 0x0
  3184                           
  3185  0020                     getMain_Lights_Count@count:	
  3186                           ; 1 bytes @ 0x0
  3187                           
  3188  0020                     getLoad_OK@ok:	
  3189                           ; 1 bytes @ 0x0
  3190                           
  3191  0020                     ___bmul@multiplicand:	
  3192                           ; 1 bytes @ 0x0
  3193                           
  3194  0020                     DelayTime_1us@count:	
  3195                           ; 1 bytes @ 0x0
  3196                           
  3197  0020                     ___wmul@multiplier:	
  3198                           ; 2 bytes @ 0x0
  3199                           
  3200  0020                     ___awdiv@divisor:	
  3201                           ; 2 bytes @ 0x0
  3202                           
  3203  0020                     ___lwdiv@divisor:	
  3204                           ; 2 bytes @ 0x0
  3205                           
  3206  0020                     ___ftpack@arg:	
  3207                           ; 2 bytes @ 0x0
  3208                           
  3209                           
  3210                           ; 3 bytes @ 0x0
  3211  0020                     	ds	1
  3212  0021                     ??_getDimmerLights_Allow_Condition:	
  3213  0021                     ??_setMemory_Data:	
  3214                           ; 0 bytes @ 0x1
  3215                           
  3216  0021                     ??_RF_Initialization:	
  3217                           ; 0 bytes @ 0x1
  3218                           
  3219  0021                     ??_Mcu_Initialization:	
  3220                           ; 0 bytes @ 0x1
  3221                           
  3222  0021                     ??___bmul:	
  3223                           ; 0 bytes @ 0x1
  3224                           
  3225  0021                     CC2500_WriteByte@loop_a:	
  3226                           ; 0 bytes @ 0x1
  3227                           
  3228  0021                     CC2500_ReadByte@loop_b:	
  3229                           ; 1 bytes @ 0x1
  3230                           
  3231  0021                     DelayOffPointSelect@sw:	
  3232                           ; 1 bytes @ 0x1
  3233                           
  3234  0021                     DimmerLightsPointSelect@lights:	
  3235                           ; 1 bytes @ 0x1
  3236                           
  3237  0021                     getDimmerLights_Line@line:	
  3238                           ; 1 bytes @ 0x1
  3239                           
  3240  0021                     LedPointSelect@led:	
  3241                           ; 1 bytes @ 0x1
  3242                           
  3243  0021                     Flash_Memory_Read@i:	
  3244                           ; 1 bytes @ 0x1
  3245                           
  3246  0021                     Flash_Memory_Write@i:	
  3247                           ; 1 bytes @ 0x1
  3248                           
  3249  0021                     setMemory_Modify@command:	
  3250                           ; 1 bytes @ 0x1
  3251                           
  3252  0021                     setMemory_LoopSave@command:	
  3253                           ; 1 bytes @ 0x1
  3254                           
  3255  0021                     getMain_Lights_Count@status1:	
  3256                           ; 1 bytes @ 0x1
  3257                           
  3258  0021                     setLoad_AH_AL_Restore@i:	
  3259                           ; 1 bytes @ 0x1
  3260                           
  3261  0021                     setRF_Learn@command:	
  3262                           ; 1 bytes @ 0x1
  3263                           
  3264  0021                     getRF_KeyStatus@key:	
  3265                           ; 1 bytes @ 0x1
  3266                           
  3267  0021                     SwPointSelect@sw:	
  3268                           ; 1 bytes @ 0x1
  3269                           
  3270  0021                     _getSw_KeyStatus$6246:	
  3271                           ; 1 bytes @ 0x1
  3272                           
  3273  0021                     _getMain_All_Error_Status$3605:	
  3274                           ; 1 bytes @ 0x1
  3275                           
  3276                           
  3277                           ; 2 bytes @ 0x1
  3278  0021                     	ds	1
  3279  0022                     ??_CC2500_WriteCommand:	
  3280  0022                     ??_CC2500_ReadStatus:	
  3281                           ; 0 bytes @ 0x2
  3282                           
  3283  0022                     ??_DelayTime_1us:	
  3284                           ; 0 bytes @ 0x2
  3285                           
  3286  0022                     ?_CC2500_WriteREG:	
  3287                           ; 0 bytes @ 0x2
  3288                           
  3289  0022                     ??_DlyOff_Initialization:	
  3290                           ; 0 bytes @ 0x2
  3291                           
  3292  0022                     ??_setDimmerLights_Initialization:	
  3293                           ; 0 bytes @ 0x2
  3294                           
  3295  0022                     ?_setLED:	
  3296                           ; 0 bytes @ 0x2
  3297                           
  3298  0022                     ??_setLED_Main:	
  3299                           ; 0 bytes @ 0x2
  3300                           
  3301  0022                     ??_Load_Initialization:	
  3302                           ; 0 bytes @ 0x2
  3303                           
  3304  0022                     ??_getBuz_GO:	
  3305                           ; 0 bytes @ 0x2
  3306                           
  3307  0022                     ??_getDelayOff_GO:	
  3308                           ; 0 bytes @ 0x2
  3309                           
  3310  0022                     ??_getDimmerLights_Status:	
  3311                           ; 0 bytes @ 0x2
  3312                           
  3313  0022                     ??_getAll_DimmerLights_AdjSw:	
  3314                           ; 0 bytes @ 0x2
  3315                           
  3316  0022                     CC2500_WriteREG@value:	
  3317                           ; 0 bytes @ 0x2
  3318                           
  3319  0022                     DlyOff_Initialization@sw:	
  3320                           ; 1 bytes @ 0x2
  3321                           
  3322  0022                     getDelayOff_GO@sw:	
  3323                           ; 1 bytes @ 0x2
  3324                           
  3325  0022                     _getDimmerLights_Allow_Condition$2329:	
  3326                           ; 1 bytes @ 0x2
  3327                           
  3328  0022                     getDimmerLights_Status@lights:	
  3329                           ; 1 bytes @ 0x2
  3330                           
  3331  0022                     setLED@command:	
  3332                           ; 1 bytes @ 0x2
  3333                           
  3334  0022                     Flash_Memory_Read@address:	
  3335                           ; 1 bytes @ 0x2
  3336                           
  3337  0022                     setMemory_Data@address:	
  3338                           ; 1 bytes @ 0x2
  3339                           
  3340  0022                     getMain_Lights_Count@status2:	
  3341                           ; 1 bytes @ 0x2
  3342                           
  3343  0022                     _getRF_KeyStatus$5260:	
  3344                           ; 1 bytes @ 0x2
  3345                           
  3346  0022                     _getSw_KeyStatus$6247:	
  3347                           ; 1 bytes @ 0x2
  3348                           
  3349  0022                     ___bmul@product:	
  3350                           ; 1 bytes @ 0x2
  3351                           
  3352  0022                     DelayTime_1us@i:	
  3353                           ; 1 bytes @ 0x2
  3354                           
  3355  0022                     ___wmul@multiplicand:	
  3356                           ; 2 bytes @ 0x2
  3357                           
  3358  0022                     ___awdiv@dividend:	
  3359                           ; 2 bytes @ 0x2
  3360                           
  3361  0022                     ___lwdiv@dividend:	
  3362                           ; 2 bytes @ 0x2
  3363                           
  3364                           
  3365                           ; 2 bytes @ 0x2
  3366  0022                     	ds	1
  3367  0023                     ??_CC2500_WriteREG:	
  3368  0023                     ??_setLED:	
  3369                           ; 0 bytes @ 0x3
  3370                           
  3371  0023                     ??_DelayOff_Initialization:	
  3372                           ; 0 bytes @ 0x3
  3373                           
  3374  0023                     ??_getAD:	
  3375                           ; 0 bytes @ 0x3
  3376                           
  3377  0023                     CC2500_WriteCommand@command:	
  3378                           ; 0 bytes @ 0x3
  3379                           
  3380  0023                     CC2500_ReadStatus@status_addr:	
  3381                           ; 1 bytes @ 0x3
  3382                           
  3383  0023                     getDelayOff_GO@go:	
  3384                           ; 1 bytes @ 0x3
  3385                           
  3386  0023                     setDimmerLights_Initialization@lights:	
  3387                           ; 1 bytes @ 0x3
  3388                           
  3389  0023                     _getDimmerLights_Allow_Condition$2330:	
  3390                           ; 1 bytes @ 0x3
  3391                           
  3392  0023                     getDimmerLights_Status@status:	
  3393                           ; 1 bytes @ 0x3
  3394                           
  3395  0023                     getAll_DimmerLights_AdjSw@count:	
  3396                           ; 1 bytes @ 0x3
  3397                           
  3398  0023                     setLED@led:	
  3399                           ; 1 bytes @ 0x3
  3400                           
  3401  0023                     getAD@adcon0:	
  3402                           ; 1 bytes @ 0x3
  3403                           
  3404  0023                     Flash_Memory_Read@ret:	
  3405                           ; 1 bytes @ 0x3
  3406                           
  3407  0023                     getSw_KeyStatus@status:	
  3408                           ; 1 bytes @ 0x3
  3409                           
  3410  0023                     ___bmul@multiplier:	
  3411                           ; 1 bytes @ 0x3
  3412                           
  3413  0023                     ___ftpack@exp:	
  3414                           ; 1 bytes @ 0x3
  3415                           
  3416  0023                     _getMain_All_Error_Status$3606:	
  3417                           ; 1 bytes @ 0x3
  3418                           
  3419                           
  3420                           ; 2 bytes @ 0x3
  3421  0023                     	ds	1
  3422  0024                     ??_CC2500_ClearTXFIFO:	
  3423  0024                     ??_CC2500_ClearRXFIFO:	
  3424                           ; 0 bytes @ 0x4
  3425                           
  3426  0024                     ??_CC2500_SIDLEMode:	
  3427                           ; 0 bytes @ 0x4
  3428                           
  3429  0024                     ??_DelayTimejudge:	
  3430                           ; 0 bytes @ 0x4
  3431                           
  3432  0024                     ??_setLED_Initialization:	
  3433                           ; 0 bytes @ 0x4
  3434                           
  3435  0024                     ??_Flash_Memory_Modify:	
  3436                           ; 0 bytes @ 0x4
  3437                           
  3438  0024                     ??_getLoad_AD:	
  3439                           ; 0 bytes @ 0x4
  3440                           
  3441  0024                     ??_getTemp_AD:	
  3442                           ; 0 bytes @ 0x4
  3443                           
  3444  0024                     ??_RF_RxDisable:	
  3445                           ; 0 bytes @ 0x4
  3446                           
  3447  0024                     ??_setSw_Initialization:	
  3448                           ; 0 bytes @ 0x4
  3449                           
  3450  0024                     ??_CC2500_TxData:	
  3451                           ; 0 bytes @ 0x4
  3452                           
  3453  0024                     ??_CC2500_RxData:	
  3454                           ; 0 bytes @ 0x4
  3455                           
  3456  0024                     ??_DimmerLights_Initialization:	
  3457                           ; 0 bytes @ 0x4
  3458                           
  3459  0024                     ??___wmul:	
  3460                           ; 0 bytes @ 0x4
  3461                           
  3462  0024                     ??___awdiv:	
  3463                           ; 0 bytes @ 0x4
  3464                           
  3465  0024                     ??___lwdiv:	
  3466                           ; 0 bytes @ 0x4
  3467                           
  3468  0024                     CC2500_WriteREG@w_addr:	
  3469                           ; 0 bytes @ 0x4
  3470                           
  3471  0024                     _getDimmerLights_Allow_Condition$2331:	
  3472                           ; 1 bytes @ 0x4
  3473                           
  3474  0024                     setLED_Initialization@led:	
  3475                           ; 1 bytes @ 0x4
  3476                           
  3477  0024                     setLED_Main@led:	
  3478                           ; 1 bytes @ 0x4
  3479                           
  3480  0024                     setSw_Initialization@sw:	
  3481                           ; 1 bytes @ 0x4
  3482                           
  3483  0024                     getSw_KeyStatus@sw:	
  3484                           ; 1 bytes @ 0x4
  3485                           
  3486  0024                     ___ftpack@sign:	
  3487                           ; 1 bytes @ 0x4
  3488                           
  3489  0024                     getBuz_GO@i:	
  3490                           ; 1 bytes @ 0x4
  3491                           
  3492  0024                     DelayTime_1us@j:	
  3493                           ; 2 bytes @ 0x4
  3494                           
  3495  0024                     getAll_DimmerLights_AdjSw@i:	
  3496                           ; 2 bytes @ 0x4
  3497                           
  3498  0024                     ___wmul@product:	
  3499                           ; 2 bytes @ 0x4
  3500                           
  3501                           
  3502                           ; 2 bytes @ 0x4
  3503  0024                     	ds	1
  3504  0025                     ??_CC2500_InitSetREG:	
  3505  0025                     ??_CC2500_InitPATable:	
  3506                           ; 0 bytes @ 0x5
  3507                           
  3508  0025                     ??_Switch_Initialization:	
  3509                           ; 0 bytes @ 0x5
  3510                           
  3511  0025                     ??___ftpack:	
  3512                           ; 0 bytes @ 0x5
  3513                           
  3514  0025                     ??_LED_Initialization:	
  3515                           ; 0 bytes @ 0x5
  3516                           
  3517  0025                     ??_LED_Main:	
  3518                           ; 0 bytes @ 0x5
  3519                           
  3520  0025                     CC2500_TxData@loop_e:	
  3521                           ; 0 bytes @ 0x5
  3522                           
  3523  0025                     CC2500_RxData@loop_f:	
  3524                           ; 1 bytes @ 0x5
  3525                           
  3526  0025                     getDimmerLights_Allow_Condition@lights:	
  3527                           ; 1 bytes @ 0x5
  3528                           
  3529  0025                     Flash_Memory_Modify@i:	
  3530                           ; 1 bytes @ 0x5
  3531                           
  3532  0025                     getMain_All_Error_Status@command:	
  3533                           ; 1 bytes @ 0x5
  3534                           
  3535  0025                     getTemp_AD@channel:	
  3536                           ; 1 bytes @ 0x5
  3537                           
  3538  0025                     ___awdiv@counter:	
  3539                           ; 1 bytes @ 0x5
  3540                           
  3541  0025                     ___lwdiv@counter:	
  3542                           ; 1 bytes @ 0x5
  3543                           
  3544                           
  3545                           ; 1 bytes @ 0x5
  3546  0025                     	ds	1
  3547  0026                     ??_CC2500_PowerRST:	
  3548  0026                     ??_CC2500_FrequencyCabr:	
  3549                           ; 0 bytes @ 0x6
  3550                           
  3551  0026                     ??_Flash_Memory_Main:	
  3552                           ; 0 bytes @ 0x6
  3553                           
  3554  0026                     CC2500_InitSetREG@temp1:	
  3555                           ; 0 bytes @ 0x6
  3556                           
  3557  0026                     CC2500_InitPATable@temp:	
  3558                           ; 1 bytes @ 0x6
  3559                           
  3560  0026                     DelayTimejudge@i:	
  3561                           ; 1 bytes @ 0x6
  3562                           
  3563  0026                     getDimmerLights_Allow_Condition@allow:	
  3564                           ; 1 bytes @ 0x6
  3565                           
  3566  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3567                           ; 1 bytes @ 0x6
  3568                           
  3569  0026                     getMain_All_Error_Status@status:	
  3570                           ; 1 bytes @ 0x6
  3571                           
  3572  0026                     getLoad_AD@channel:	
  3573                           ; 1 bytes @ 0x6
  3574                           
  3575  0026                     ___awdiv@sign:	
  3576                           ; 1 bytes @ 0x6
  3577                           
  3578  0026                     ___lwdiv@quotient:	
  3579                           ; 1 bytes @ 0x6
  3580                           
  3581                           
  3582                           ; 2 bytes @ 0x6
  3583  0026                     	ds	1
  3584  0027                     ??_setDimmerLights_AdjOn:	
  3585  0027                     CC2500_InitSetREG@temp2:	
  3586                           ; 0 bytes @ 0x7
  3587                           
  3588  0027                     CC2500_InitPATable@loop_d:	
  3589                           ; 1 bytes @ 0x7
  3590                           
  3591  0027                     DelayTimejudge@j:	
  3592                           ; 1 bytes @ 0x7
  3593                           
  3594  0027                     setDimmerLights_AdjOn@sw:	
  3595                           ; 1 bytes @ 0x7
  3596                           
  3597  0027                     getLoad_AD@k:	
  3598                           ; 1 bytes @ 0x7
  3599                           
  3600  0027                     ___awdiv@quotient:	
  3601                           ; 1 bytes @ 0x7
  3602                           
  3603                           
  3604                           ; 2 bytes @ 0x7
  3605  0027                     	ds	1
  3606  0028                     ??_Load_Main:	
  3607  0028                     ?___awtoft:	
  3608                           ; 0 bytes @ 0x8
  3609                           
  3610  0028                     CC2500_InitSetREG@loop_c:	
  3611                           ; 3 bytes @ 0x8
  3612                           
  3613  0028                     DelayTimejudge@k:	
  3614                           ; 1 bytes @ 0x8
  3615                           
  3616  0028                     getLoad_AD@j:	
  3617                           ; 1 bytes @ 0x8
  3618                           
  3619  0028                     ___awtoft@c:	
  3620                           ; 1 bytes @ 0x8
  3621                           
  3622                           
  3623                           ; 2 bytes @ 0x8
  3624  0028                     	ds	1
  3625  0029                     ?_setBuz:	
  3626  0029                     ??_CC2500_PowerOnInitial:	
  3627                           ; 0 bytes @ 0x9
  3628                           
  3629  0029                     DelayTimejudge@value:	
  3630                           ; 0 bytes @ 0x9
  3631                           
  3632  0029                     getLoad_AD@i:	
  3633                           ; 1 bytes @ 0x9
  3634                           
  3635  0029                     setBuz@time:	
  3636                           ; 1 bytes @ 0x9
  3637                           
  3638                           
  3639                           ; 2 bytes @ 0x9
  3640  0029                     	ds	1
  3641  002A                     Load_Main@error:	
  3642                           
  3643                           ; 1 bytes @ 0xA
  3644  002A                     	ds	1
  3645  002B                     ??_setBuz:	
  3646  002B                     ??___awtoft:	
  3647                           ; 0 bytes @ 0xB
  3648                           
  3649  002B                     Load_Main@Load_Status:	
  3650                           ; 0 bytes @ 0xB
  3651                           
  3652                           
  3653                           ; 1 bytes @ 0xB
  3654  002B                     	ds	1
  3655  002C                     setBuz@count:	
  3656  002C                     Load_Main@i:	
  3657                           ; 1 bytes @ 0xC
  3658                           
  3659                           
  3660                           ; 2 bytes @ 0xC
  3661  002C                     	ds	1
  3662  002D                     ??_my_MainTimer:	
  3663  002D                     ??_setDimmerLights_SwOn:	
  3664                           ; 0 bytes @ 0xD
  3665                           
  3666  002D                     ___awtoft@sign:	
  3667                           ; 0 bytes @ 0xD
  3668                           
  3669                           
  3670                           ; 1 bytes @ 0xD
  3671  002D                     	ds	1
  3672  002E                     ?___ftdiv:	
  3673  002E                     ?___ftmul:	
  3674                           ; 3 bytes @ 0xE
  3675                           
  3676  002E                     _setDimmerLights_SwOn$2310:	
  3677                           ; 3 bytes @ 0xE
  3678                           
  3679  002E                     ___ftdiv@f2:	
  3680                           ; 1 bytes @ 0xE
  3681                           
  3682  002E                     ___ftmul@f1:	
  3683                           ; 3 bytes @ 0xE
  3684                           
  3685                           
  3686                           ; 3 bytes @ 0xE
  3687  002E                     	ds	1
  3688  002F                     _setDimmerLights_SwOn$2311:	
  3689                           
  3690                           ; 1 bytes @ 0xF
  3691  002F                     	ds	1
  3692  0030                     setDimmerLights_SwOn@idle:	
  3693                           
  3694                           ; 1 bytes @ 0x10
  3695  0030                     	ds	1
  3696  0031                     setDimmerLights_SwOn@sw:	
  3697  0031                     ___ftdiv@f1:	
  3698                           ; 1 bytes @ 0x11
  3699                           
  3700  0031                     ___ftmul@f2:	
  3701                           ; 3 bytes @ 0x11
  3702                           
  3703                           
  3704                           ; 3 bytes @ 0x11
  3705  0031                     	ds	3
  3706  0034                     ??___ftdiv:	
  3707  0034                     ??___ftmul:	
  3708                           ; 0 bytes @ 0x14
  3709                           
  3710                           
  3711                           ; 0 bytes @ 0x14
  3712  0034                     	ds	4
  3713  0038                     ___ftdiv@cntr:	
  3714  0038                     ___ftmul@exp:	
  3715                           ; 1 bytes @ 0x18
  3716                           
  3717                           
  3718                           ; 1 bytes @ 0x18
  3719  0038                     	ds	1
  3720  0039                     ___ftdiv@f3:	
  3721  0039                     ___ftmul@f3_as_product:	
  3722                           ; 3 bytes @ 0x19
  3723                           
  3724                           
  3725                           ; 3 bytes @ 0x19
  3726  0039                     	ds	3
  3727  003C                     ___ftdiv@exp:	
  3728  003C                     ___ftmul@cntr:	
  3729                           ; 1 bytes @ 0x1C
  3730                           
  3731                           
  3732                           ; 1 bytes @ 0x1C
  3733  003C                     	ds	1
  3734  003D                     ___ftdiv@sign:	
  3735  003D                     ___ftmul@sign:	
  3736                           ; 1 bytes @ 0x1D
  3737                           
  3738                           
  3739                           ; 1 bytes @ 0x1D
  3740  003D                     	ds	1
  3741  003E                     ?___ftneg:	
  3742  003E                     ___ftneg@f1:	
  3743                           ; 3 bytes @ 0x1E
  3744                           
  3745                           
  3746                           ; 3 bytes @ 0x1E
  3747  003E                     	ds	3
  3748  0041                     ??___ftneg:	
  3749  0041                     ?___ftadd:	
  3750                           ; 0 bytes @ 0x21
  3751                           
  3752  0041                     ___ftadd@f1:	
  3753                           ; 3 bytes @ 0x21
  3754                           
  3755                           
  3756                           ; 3 bytes @ 0x21
  3757  0041                     	ds	3
  3758  0044                     ___ftadd@f2:	
  3759                           
  3760                           ; 3 bytes @ 0x24
  3761  0044                     	ds	3
  3762  0047                     ??___ftadd:	
  3763                           
  3764                           ; 0 bytes @ 0x27
  3765  0047                     	ds	4
  3766  004B                     ___ftadd@sign:	
  3767                           
  3768                           ; 1 bytes @ 0x2B
  3769  004B                     	ds	1
  3770  004C                     ___ftadd@exp2:	
  3771                           
  3772                           ; 1 bytes @ 0x2C
  3773  004C                     	ds	1
  3774  004D                     ___ftadd@exp1:	
  3775                           
  3776                           ; 1 bytes @ 0x2D
  3777  004D                     	ds	1
  3778  004E                     ?___fttol:	
  3779  004E                     ___fttol@f1:	
  3780                           ; 4 bytes @ 0x2E
  3781                           
  3782                           
  3783                           ; 3 bytes @ 0x2E
  3784  004E                     	ds	4
  3785  0052                     ??___fttol:	
  3786                           
  3787                           ; 0 bytes @ 0x32
  3788  0052                     	ds	4
  3789  0056                     ___fttol@sign1:	
  3790                           
  3791                           ; 1 bytes @ 0x36
  3792  0056                     	ds	1
  3793  0057                     ___fttol@lval:	
  3794                           
  3795                           ; 4 bytes @ 0x37
  3796  0057                     	ds	4
  3797  005B                     ___fttol@exp1:	
  3798                           
  3799                           ; 1 bytes @ 0x3B
  3800  005B                     	ds	1
  3801  005C                     ??_setPercentValue:	
  3802  005C                     ??_getPercentValue:	
  3803                           ; 0 bytes @ 0x3C
  3804                           
  3805                           
  3806                           ; 0 bytes @ 0x3C
  3807  005C                     	ds	2
  3808  005E                     getPercentValue@value:	
  3809  005E                     setPercentValue@value:	
  3810                           ; 1 bytes @ 0x3E
  3811                           
  3812                           
  3813                           ; 1 bytes @ 0x3E
  3814  005E                     	ds	1
  3815  005F                     getPercentValue@i:	
  3816  005F                     setPercentValue@i:	
  3817                           ; 3 bytes @ 0x3F
  3818                           
  3819                           
  3820                           ; 3 bytes @ 0x3F
  3821  005F                     	ds	3
  3822  0062                     ?_setProductData:	
  3823  0062                     ??_setDimmerLights_AdjRF:	
  3824                           ; 0 bytes @ 0x42
  3825                           
  3826  0062                     ??_Flash_Memory_Initialization:	
  3827                           ; 0 bytes @ 0x42
  3828                           
  3829  0062                     setProductData@value:	
  3830                           ; 0 bytes @ 0x42
  3831                           
  3832                           
  3833                           ; 1 bytes @ 0x42
  3834  0062                     	ds	1
  3835  0063                     ??_setProductData:	
  3836  0063                     setDimmerLights_AdjRF@lights:	
  3837                           ; 0 bytes @ 0x43
  3838                           
  3839  0063                     Flash_Memory_Initialization@i:	
  3840                           ; 1 bytes @ 0x43
  3841                           
  3842                           
  3843                           ; 1 bytes @ 0x43
  3844  0063                     	ds	2
  3845  0065                     setProductData@address:	
  3846                           
  3847                           ; 1 bytes @ 0x45
  3848  0065                     	ds	1
  3849  0066                     ?_setRF_DimmerLights:	
  3850  0066                     ??_setTemp_Main:	
  3851                           ; 0 bytes @ 0x46
  3852                           
  3853  0066                     ??_setLog_Code:	
  3854                           ; 0 bytes @ 0x46
  3855                           
  3856  0066                     ??_setRF_DimmerValue:	
  3857                           ; 0 bytes @ 0x46
  3858                           
  3859  0066                     ?_setDelayOff_GO:	
  3860                           ; 0 bytes @ 0x46
  3861                           
  3862  0066                     setDelayOff_GO@command:	
  3863                           ; 0 bytes @ 0x46
  3864                           
  3865  0066                     setRF_DimmerLights@on:	
  3866                           ; 1 bytes @ 0x46
  3867                           
  3868                           
  3869                           ; 1 bytes @ 0x46
  3870  0066                     	ds	1
  3871  0067                     ??_setRF_DimmerLights:	
  3872  0067                     setDelayOff_GO@value:	
  3873                           ; 0 bytes @ 0x47
  3874                           
  3875  0067                     setRF_DimmerValue@lights:	
  3876                           ; 1 bytes @ 0x47
  3877                           
  3878                           
  3879                           ; 1 bytes @ 0x47
  3880  0067                     	ds	1
  3881  0068                     ??_setRFSW_AdjControl:	
  3882  0068                     ??_setDelayOff_GO:	
  3883                           ; 0 bytes @ 0x48
  3884                           
  3885  0068                     setTemp_Main@error:	
  3886                           ; 0 bytes @ 0x48
  3887                           
  3888                           
  3889                           ; 1 bytes @ 0x48
  3890  0068                     	ds	1
  3891  0069                     ??_Temp_Main:	
  3892  0069                     setDelayOff_GO@sw:	
  3893                           ; 0 bytes @ 0x49
  3894                           
  3895  0069                     setRF_DimmerLights@status:	
  3896                           ; 1 bytes @ 0x49
  3897                           
  3898                           
  3899                           ; 1 bytes @ 0x49
  3900  0069                     	ds	1
  3901  006A                     ??_setDimmerLights_SwOff:	
  3902  006A                     setDimmerLights_SwOff@sw:	
  3903                           ; 0 bytes @ 0x4A
  3904                           
  3905  006A                     setRFSW_AdjControl@status:	
  3906                           ; 1 bytes @ 0x4A
  3907                           
  3908  006A                     setRF_DimmerLights@lights:	
  3909                           ; 1 bytes @ 0x4A
  3910                           
  3911                           
  3912                           ; 1 bytes @ 0x4A
  3913  006A                     	ds	1
  3914  006B                     ??_setDimmerLights_ErrorClose:	
  3915  006B                     ?_setDimmerLights:	
  3916                           ; 0 bytes @ 0x4B
  3917                           
  3918  006B                     ?_setDimmerLights_Adj:	
  3919                           ; 0 bytes @ 0x4B
  3920                           
  3921  006B                     ??_Exception_Main:	
  3922                           ; 0 bytes @ 0x4B
  3923                           
  3924  006B                     ??_setRFSW_Control:	
  3925                           ; 0 bytes @ 0x4B
  3926                           
  3927  006B                     ??_setSw_Main:	
  3928                           ; 0 bytes @ 0x4B
  3929                           
  3930  006B                     setDimmerLights@status:	
  3931                           ; 0 bytes @ 0x4B
  3932                           
  3933  006B                     setDimmerLights_Adj@status:	
  3934                           ; 1 bytes @ 0x4B
  3935                           
  3936  006B                     setRFSW_AdjControl@sw:	
  3937                           ; 1 bytes @ 0x4B
  3938                           
  3939                           
  3940                           ; 1 bytes @ 0x4B
  3941  006B                     	ds	1
  3942  006C                     ??_DlyOff_Main:	
  3943  006C                     ??_setDimmerLights:	
  3944                           ; 0 bytes @ 0x4C
  3945                           
  3946  006C                     ??_setDimmerLights_Adj:	
  3947                           ; 0 bytes @ 0x4C
  3948                           
  3949  006C                     setRFSW_Control@status:	
  3950                           ; 0 bytes @ 0x4C
  3951                           
  3952                           
  3953                           ; 1 bytes @ 0x4C
  3954  006C                     	ds	1
  3955  006D                     setDimmerLights@lights:	
  3956  006D                     setDimmerLights_Adj@lights:	
  3957                           ; 1 bytes @ 0x4D
  3958                           
  3959  006D                     setRFSW_Control@sw:	
  3960                           ; 1 bytes @ 0x4D
  3961                           
  3962  006D                     setSw_Main@sw:	
  3963                           ; 1 bytes @ 0x4D
  3964                           
  3965                           
  3966                           ; 1 bytes @ 0x4D
  3967  006D                     	ds	1
  3968  006E                     ??_setDimmerLights_Main:	
  3969  006E                     ??_Switch_Main:	
  3970                           ; 0 bytes @ 0x4E
  3971                           
  3972  006E                     ??_getRxData:	
  3973                           ; 0 bytes @ 0x4E
  3974                           
  3975  006E                     ??_setControl_Lights_Table:	
  3976                           ; 0 bytes @ 0x4E
  3977                           
  3978  006E                     DlyOff_Main@sw:	
  3979                           ; 0 bytes @ 0x4E
  3980                           
  3981  006E                     setDimmerLights_Main@lights:	
  3982                           ; 1 bytes @ 0x4E
  3983                           
  3984                           
  3985                           ; 1 bytes @ 0x4E
  3986  006E                     	ds	1
  3987  006F                     ??_RF_Main:	
  3988  006F                     ??_DelayOff_Main:	
  3989                           ; 0 bytes @ 0x4F
  3990                           
  3991  006F                     ??_DimmerLights_Main:	
  3992                           ; 0 bytes @ 0x4F
  3993                           
  3994  006F                     ??_main:	
  3995                           ; 0 bytes @ 0x4F
  3996                           
  3997                           
  3998                           	psect	maintext
  3999  080F                     __pmaintext:	
  4000                           ; 0 bytes @ 0x4F
  4001 ;;
  4002 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4003 ;;
  4004 ;; *************** function _main *****************
  4005 ;; Defined at:
  4006 ;;		line 7 in file "../src/Main_B1.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  argc            2    3[BANK4 ] int 
  4009 ;;  argv            2    5[BANK4 ] PTR PTR unsigned char 
  4010 ;; Auto vars:     Size  Location     Type
  4011 ;;		None
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  2    3[BANK4 ] int 
  4014 ;; Registers used:
  4015 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4016 ;; Tracked objects:
  4017 ;;		On entry : 17F/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4021 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4024 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4025 ;;Total ram usage:        4 bytes
  4026 ;; Hardware stack levels required when called:   15
  4027 ;; This function calls:
  4028 ;;		_Buzzer_Initialization
  4029 ;;		_Buzzer_Main
  4030 ;;		_CC2500_PowerOnInitial
  4031 ;;		_DelayOff_Initialization
  4032 ;;		_DelayOff_Main
  4033 ;;		_DimmerLights_Initialization
  4034 ;;		_DimmerLights_Main
  4035 ;;		_Exception_Main
  4036 ;;		_Flash_Memory_Initialization
  4037 ;;		_Flash_Memory_Main
  4038 ;;		_LED_Initialization
  4039 ;;		_LED_Main
  4040 ;;		_Load_Initialization
  4041 ;;		_Load_Main
  4042 ;;		_Mcu_Initialization
  4043 ;;		_RF_Initialization
  4044 ;;		_RF_Main
  4045 ;;		_Switch_Initialization
  4046 ;;		_Switch_Main
  4047 ;;		_Temp_Initialization
  4048 ;;		_Temp_Main
  4049 ;;		_WDT_Main
  4050 ;;		_getLoad_AD
  4051 ;;		_getTemp_AD
  4052 ;;		_myMain_Initialization
  4053 ;;		_my_MainTimer
  4054 ;; This function is called by:
  4055 ;;		Startup code after reset
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           
  4060                           ;psect for function _main
  4061  080F                     _main:	
  4062                           
  4063                           ;Main_B1.c: 8: myMain_Initialization();
  4064                           
  4065                           ;incstack = 0
  4066                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4067  080F  3188  2000  3188   	fcall	_myMain_Initialization
  4068                           
  4069                           ;Main_B1.c: 9: Mcu_Initialization();
  4070  0812  319C  2465  3188   	fcall	_Mcu_Initialization
  4071                           
  4072                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4073  0815  3186  263F  3188   	fcall	_Flash_Memory_Initialization
  4074                           
  4075                           ;Main_B1.c: 11: LED_Initialization();
  4076  0818  319B  2386  3188   	fcall	_LED_Initialization
  4077                           
  4078                           ;Main_B1.c: 12: Buzzer_Initialization();
  4079  081B  319A  22C2  3188   	fcall	_Buzzer_Initialization
  4080                           
  4081                           ;Main_B1.c: 14: ;;
  4082                           ;Main_B1.c: 15: Temp_Initialization();
  4083  081E  319A  22CE  3188   	fcall	_Temp_Initialization
  4084                           
  4085                           ;Main_B1.c: 16: Load_Initialization();
  4086  0821  319A  22C5  3188   	fcall	_Load_Initialization
  4087                           
  4088                           ;Main_B1.c: 17: ;;
  4089                           ;Main_B1.c: 18: DelayOff_Initialization();
  4090  0824  319B  230A  3188   	fcall	_DelayOff_Initialization
  4091                           
  4092                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4093  0827  319D  2510  3188   	fcall	_DimmerLights_Initialization
  4094                           
  4095                           ;Main_B1.c: 21: ;;
  4096                           ;Main_B1.c: 22: ;;
  4097                           ;Main_B1.c: 23: ;;
  4098                           ;Main_B1.c: 24: Switch_Initialization();
  4099  082A  319B  23C2  3188   	fcall	_Switch_Initialization
  4100                           
  4101                           ;Main_B1.c: 25: RF_Initialization();
  4102  082D  319A  22C8  3188   	fcall	_RF_Initialization
  4103                           
  4104                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4105  0830  319D  2589  3188   	fcall	_CC2500_PowerOnInitial
  4106  0833                     l10985:	
  4107                           ;Main_B1.c: 27: ;;
  4108                           ;Main_B1.c: 28: ;;
  4109                           ;Main_B1.c: 30: while (1) {
  4110                           
  4111                           
  4112                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4113  0833  0021               	movlb	1	; select bank1
  4114  0834  1C20               	btfss	_myMain^(0+128),0
  4115  0835  283E               	goto	l10989
  4116                           
  4117                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4118  0836  3005               	movlw	5
  4119  0837  318C  2469  3188   	fcall	_getLoad_AD
  4120                           
  4121                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4122  083A  3009               	movlw	9
  4123  083B  3193  2361  3188   	fcall	_getTemp_AD
  4124  083E                     l10989:	
  4125                           
  4126                           ;Main_B1.c: 57: }
  4127                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4128  083E  0022               	movlb	2	; select bank2
  4129  083F  1C20               	btfss	_Timer1^(0+256),0
  4130  0840  2833               	goto	l10985
  4131                           
  4132                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4133  0841  1020               	bcf	_Timer1^(0+256),0
  4134                           
  4135                           ;Main_B1.c: 96: my_MainTimer();
  4136  0842  3192  22E7  3188   	fcall	_my_MainTimer
  4137                           
  4138                           ;Main_B1.c: 97: WDT_Main();
  4139  0845  319C  2477  3188   	fcall	_WDT_Main
  4140                           
  4141                           ;Main_B1.c: 98: ;;
  4142                           ;Main_B1.c: 99: ;;
  4143                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4144  0848  0021               	movlb	1	; select bank1
  4145  0849  1C20               	btfss	_myMain^(0+128),0
  4146  084A  2833               	goto	l10985
  4147                           
  4148                           ;Main_B1.c: 101: Flash_Memory_Main();
  4149  084B  3191  21CF  3188   	fcall	_Flash_Memory_Main
  4150                           
  4151                           ;Main_B1.c: 103: LED_Main();
  4152  084E  319B  2392  3188   	fcall	_LED_Main
  4153                           
  4154                           ;Main_B1.c: 104: Buzzer_Main();
  4155  0851  3194  2424  3188   	fcall	_Buzzer_Main
  4156                           
  4157                           ;Main_B1.c: 106: ;;
  4158                           ;Main_B1.c: 107: Temp_Main();
  4159  0854  319A  22D1  3188   	fcall	_Temp_Main
  4160                           
  4161                           ;Main_B1.c: 108: Load_Main();
  4162  0857  3180  2049  3188   	fcall	_Load_Main
  4163                           
  4164                           ;Main_B1.c: 109: ;;
  4165                           ;Main_B1.c: 111: ;;
  4166                           ;Main_B1.c: 112: DimmerLights_Main();
  4167  085A  319E  26E6  3188   	fcall	_DimmerLights_Main
  4168                           
  4169                           ;Main_B1.c: 113: Switch_Main();
  4170  085D  319B  2357  3188   	fcall	_Switch_Main
  4171                           
  4172                           ;Main_B1.c: 114: ;;
  4173                           ;Main_B1.c: 115: ;;
  4174                           ;Main_B1.c: 117: RF_Main();
  4175  0860  319A  22CB  3188   	fcall	_RF_Main
  4176                           
  4177                           ;Main_B1.c: 118: DelayOff_Main();
  4178  0863  319B  2312  3188   	fcall	_DelayOff_Main
  4179                           
  4180                           ;Main_B1.c: 119: ;;
  4181                           ;Main_B1.c: 120: ;;
  4182                           ;Main_B1.c: 121: Exception_Main();
  4183  0866  3185  255F  3188   	fcall	_Exception_Main
  4184  0869  2833               	goto	l10985
  4185  086A                     __end_of_main:	
  4186                           ;Main_B1.c: 128: }
  4187                           ;Main_B1.c: 129: }
  4188                           ;Main_B1.c: 163: }
  4189                           ;Main_B1.c: 164: return (0);
  4190                           ;	Return value of _main is never used
  4191                           
  4192                           
  4193                           	psect	text1
  4194  12E7                     __ptext1:	
  4195 ;; *************** function _my_MainTimer *****************
  4196 ;; Defined at:
  4197 ;;		line 185 in file "../src/Main_B1.c"
  4198 ;; Parameters:    Size  Location     Type
  4199 ;;		None
  4200 ;; Auto vars:     Size  Location     Type
  4201 ;;		None
  4202 ;; Return value:  Size  Location     Type
  4203 ;;		None               void
  4204 ;; Registers used:
  4205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4206 ;; Tracked objects:
  4207 ;;		On entry : 0/0
  4208 ;;		On exit  : 0/0
  4209 ;;		Unchanged: 0/0
  4210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4214 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4215 ;;Total ram usage:        1 bytes
  4216 ;; Hardware stack levels used:    1
  4217 ;; Hardware stack levels required when called:    7
  4218 ;; This function calls:
  4219 ;;		_setBuz
  4220 ;; This function is called by:
  4221 ;;		_main
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           
  4226                           ;psect for function _my_MainTimer
  4227  12E7                     _my_MainTimer:	
  4228                           
  4229                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4230                           
  4231                           ;incstack = 0
  4232                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4233  12E7  0021               	movlb	1	; select bank1
  4234  12E8  1820               	btfsc	_myMain^(0+128),0
  4235  12E9  2B01               	goto	l10687
  4236                           
  4237                           ;Main_B1.c: 189: myMain.PowerCount++;
  4238  12EA  3001               	movlw	1
  4239  12EB  0020               	movlb	0	; select bank0
  4240  12EC  00AD               	movwf	??_my_MainTimer
  4241  12ED  082D               	movf	??_my_MainTimer,w
  4242  12EE  0021               	movlb	1	; select bank1
  4243  12EF  07A1               	addwf	(_myMain^(0+128)+1),f
  4244                           
  4245                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4246  12F0  0821               	movf	(_myMain^(0+128)+1),w
  4247  12F1  3A96               	xorlw	150
  4248  12F2  1D03               	skipz
  4249  12F3  0008               	return
  4250                           
  4251                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4252  12F4  01A1               	clrf	(_myMain^(0+128)+1)
  4253                           
  4254                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4255  12F5  1420               	bsf	_myMain^(0+128),0
  4256                           
  4257                           ;Main_B1.c: 197: setBuz(3, 50);
  4258  12F6  3032               	movlw	50
  4259  12F7  0020               	movlb	0	; select bank0
  4260  12F8  00A9               	movwf	setBuz@time
  4261  12F9  3000               	movlw	0
  4262  12FA  00AA               	movwf	setBuz@time+1
  4263  12FB  3003               	movlw	3
  4264  12FC  3197  274E         	fcall	_setBuz
  4265                           
  4266                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4267  12FE  0021               	movlb	1	; select bank1
  4268  12FF  1620               	bsf	_myMain^(0+128),4
  4269                           
  4270                           ;Main_B1.c: 207: }
  4271                           ;Main_B1.c: 208: } else {
  4272  1300  0008               	return
  4273  1301                     l10687:	
  4274                           
  4275                           ;Main_B1.c: 209: myMain.PowerCount++;
  4276  1301  3001               	movlw	1
  4277  1302  0020               	movlb	0	; select bank0
  4278  1303  00AD               	movwf	??_my_MainTimer
  4279  1304  082D               	movf	??_my_MainTimer,w
  4280  1305  0021               	movlb	1	; select bank1
  4281  1306  07A1               	addwf	(_myMain^(0+128)+1),f
  4282                           
  4283                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4284  1307  0821               	movf	(_myMain^(0+128)+1),w
  4285  1308  3A64               	xorlw	100
  4286  1309  1903               	btfsc	3,2
  4287                           
  4288                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4289  130A  01A1               	clrf	(_myMain^(0+128)+1)
  4290                           
  4291                           ;Main_B1.c: 226: }
  4292                           ;Main_B1.c: 228: myMain.Count1++;
  4293  130B  3001               	movlw	1
  4294  130C  07A4               	addwf	(_myMain^(0+128)+4),f
  4295  130D  3000               	movlw	0
  4296  130E  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4297                           
  4298                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4299  130F  3004               	movlw	4
  4300  1310  3EA0               	addlw	_myMain& (0+255)
  4301  1311  0086               	movwf	6
  4302  1312  0187               	clrf	7
  4303  1313  3F40               	moviw [0]fsr1
  4304  1314  3A64               	xorlw	100
  4305  1315  1D03               	skipz
  4306  1316  2B19               	goto	u12525
  4307  1317  3F41               	moviw [1]fsr1
  4308  1318  3A00               	xorlw	0
  4309  1319                     u12525:	
  4310  1319  1D03               	skipz
  4311  131A  0008               	return
  4312                           
  4313                           ;Main_B1.c: 230: {
  4314                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4315  131B  01A4               	clrf	(_myMain^(0+128)+4)
  4316  131C  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4317                           
  4318                           ;Main_B1.c: 243: if (myMain.Flag) {
  4319  131D  1CA0               	btfss	_myMain^(0+128),1
  4320  131E  2B21               	goto	l1545
  4321                           
  4322                           ;Main_B1.c: 244: myMain.Flag = 0;
  4323  131F  10A0               	bcf	_myMain^(0+128),1
  4324                           
  4325                           ;Main_B1.c: 253: } else {
  4326  1320  0008               	return
  4327  1321                     l1545:	
  4328                           
  4329                           ;Main_B1.c: 254: myMain.Flag = 1;
  4330  1321  14A0               	bsf	_myMain^(0+128),1
  4331  1322  0008               	return
  4332  1323                     __end_of_my_MainTimer:	
  4333                           
  4334                           	psect	text2
  4335  0800                     __ptext2:	
  4336 ;; *************** function _myMain_Initialization *****************
  4337 ;; Defined at:
  4338 ;;		line 170 in file "../src/Main_B1.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;		None               void
  4345 ;; Registers used:
  4346 ;;		wreg, fsr1l, fsr1h
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;Total ram usage:        1 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    5
  4359 ;; This function calls:
  4360 ;;		Nothing
  4361 ;; This function is called by:
  4362 ;;		_main
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           
  4367                           ;psect for function _myMain_Initialization
  4368  0800                     _myMain_Initialization:	
  4369                           
  4370                           ;Main_B1.c: 173: product = &_product;
  4371                           
  4372                           ;incstack = 0
  4373                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4374  0800  3045               	movlw	__product& (0+255)
  4375  0801  0020               	movlb	0	; select bank0
  4376  0802  00A0               	movwf	??_myMain_Initialization
  4377  0803  0820               	movf	??_myMain_Initialization,w
  4378  0804  00F9               	movwf	_product
  4379                           
  4380                           ;Main_B1.c: 174: product->Data[20] = 210;
  4381  0805  30D2               	movlw	210
  4382  0806  00A0               	movwf	??_myMain_Initialization
  4383  0807  0879               	movf	_product,w
  4384  0808  3E14               	addlw	20
  4385  0809  0086               	movwf	6
  4386  080A  3002               	movlw	2	; select bank4/5
  4387  080B  0087               	movwf	7
  4388  080C  0820               	movf	??_myMain_Initialization,w
  4389  080D  0081               	movwf	1
  4390  080E  0008               	return
  4391  080F                     __end_of_myMain_Initialization:	
  4392                           
  4393                           	psect	text3
  4394  1361                     __ptext3:	
  4395 ;; *************** function _getTemp_AD *****************
  4396 ;; Defined at:
  4397 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  channel         1    wreg     unsigned char 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  channel         1    5[BANK0 ] unsigned char 
  4402 ;; Return value:  Size  Location     Type
  4403 ;;		None               void
  4404 ;; Registers used:
  4405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;Total ram usage:        2 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    7
  4418 ;; This function calls:
  4419 ;;		_getAD
  4420 ;; This function is called by:
  4421 ;;		_main
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           
  4426                           ;psect for function _getTemp_AD
  4427  1361                     _getTemp_AD:	
  4428                           
  4429                           ;incstack = 0
  4430                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4431                           ;getTemp_AD@channel stored from wreg
  4432  1361  0020               	movlb	0	; select bank0
  4433  1362  00A5               	movwf	getTemp_AD@channel
  4434                           
  4435                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4436  1363  0021               	movlb	1	; select bank1
  4437  1364  1D56               	btfss	_Temp^(0+128),2
  4438  1365  0008               	return
  4439                           
  4440                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4441  1366  30F0               	movlw	240
  4442  1367  0020               	movlb	0	; select bank0
  4443  1368  00A4               	movwf	??_getTemp_AD
  4444  1369  0824               	movf	??_getTemp_AD,w
  4445  136A  00A0               	movwf	getAD@adcon1
  4446  136B  0825               	movf	getTemp_AD@channel,w
  4447  136C  319F  2706  3193   	fcall	_getAD
  4448  136F  0020               	movlb	0	; select bank0
  4449  1370  0821               	movf	?_getAD+1,w
  4450  1371  0021               	movlb	1	; select bank1
  4451  1372  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4452  1373  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4453  1374  0020               	movlb	0	; select bank0
  4454  1375  0820               	movf	?_getAD,w
  4455  1376  0021               	movlb	1	; select bank1
  4456  1377  01E2               	clrf	(_Temp^(0+128)+12)
  4457  1378  07E2               	addwf	(_Temp^(0+128)+12),f
  4458                           
  4459                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4460  1379  300C               	movlw	12
  4461  137A  3ED6               	addlw	_Temp& (0+255)
  4462  137B  0086               	movwf	6
  4463  137C  0187               	clrf	7
  4464  137D  0016               	moviw fsr1++
  4465  137E  0401               	iorwf	1,w
  4466  137F  1903               	skipnz
  4467  1380  0008               	return
  4468                           
  4469                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4470  1381  0863               	movf	((_Temp+1)^(0+128)+12),w
  4471  1382  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4472  1383  1D03               	skipz
  4473  1384  2B87               	goto	u12475
  4474  1385  0862               	movf	(_Temp^(0+128)+12),w
  4475  1386  025E               	subwf	(_Temp^(0+128)+8),w
  4476  1387                     u12475:	
  4477  1387  1803               	skipnc
  4478  1388  2B90               	goto	l10669
  4479                           
  4480                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4481  1389  0863               	movf	((_Temp+1)^(0+128)+12),w
  4482  138A  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4483  138B  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4484  138C  0862               	movf	(_Temp^(0+128)+12),w
  4485  138D  01DE               	clrf	(_Temp^(0+128)+8)
  4486  138E  07DE               	addwf	(_Temp^(0+128)+8),f
  4487                           
  4488                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4489  138F  0008               	return
  4490  1390                     l10669:	
  4491  1390  0863               	movf	((_Temp+1)^(0+128)+12),w
  4492  1391  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4493  1392  1D03               	skipz
  4494  1393  2B96               	goto	u12485
  4495  1394  0862               	movf	(_Temp^(0+128)+12),w
  4496  1395  0260               	subwf	(_Temp^(0+128)+10),w
  4497  1396                     u12485:	
  4498  1396  1803               	skipnc
  4499  1397  0008               	return
  4500                           
  4501                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4502  1398  0863               	movf	((_Temp+1)^(0+128)+12),w
  4503  1399  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4504  139A  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4505  139B  0862               	movf	(_Temp^(0+128)+12),w
  4506  139C  01E0               	clrf	(_Temp^(0+128)+10)
  4507  139D  07E0               	addwf	(_Temp^(0+128)+10),f
  4508  139E  0008               	return
  4509  139F                     __end_of_getTemp_AD:	
  4510                           
  4511                           	psect	text4
  4512  0C69                     __ptext4:	
  4513 ;; *************** function _getLoad_AD *****************
  4514 ;; Defined at:
  4515 ;;		line 15 in file "../src/OverLoad_B1.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  channel         1    wreg     unsigned char 
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  channel         1    6[BANK0 ] unsigned char 
  4520 ;;  i               1    9[BANK0 ] unsigned char 
  4521 ;;  j               1    8[BANK0 ] unsigned char 
  4522 ;;  k               1    7[BANK0 ] unsigned char 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;		None               void
  4525 ;; Registers used:
  4526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;Total ram usage:        6 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    7
  4539 ;; This function calls:
  4540 ;;		_getAD
  4541 ;; This function is called by:
  4542 ;;		_main
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _getLoad_AD
  4548  0C69                     _getLoad_AD:	
  4549                           
  4550                           ;incstack = 0
  4551                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4552                           ;getLoad_AD@channel stored from wreg
  4553  0C69  0020               	movlb	0	; select bank0
  4554  0C6A  00A6               	movwf	getLoad_AD@channel
  4555                           
  4556                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4557  0C6B  01A9               	clrf	getLoad_AD@i
  4558  0C6C  01A8               	clrf	getLoad_AD@j
  4559  0C6D  01A7               	clrf	getLoad_AD@k
  4560                           
  4561                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4562  0C6E  0022               	movlb	2	; select bank2
  4563  0C6F  1E27               	btfss	_Load^(0+256),4
  4564  0C70  0008               	return
  4565                           
  4566                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4567  0C71  30F3               	movlw	243
  4568  0C72  0020               	movlb	0	; select bank0
  4569  0C73  00A4               	movwf	??_getLoad_AD
  4570  0C74  0824               	movf	??_getLoad_AD,w
  4571  0C75  00A0               	movwf	getAD@adcon1
  4572  0C76  0826               	movf	getLoad_AD@channel,w
  4573  0C77  319F  2706  318C   	fcall	_getAD
  4574  0C7A  0020               	movlb	0	; select bank0
  4575  0C7B  0821               	movf	?_getAD+1,w
  4576  0C7C  0022               	movlb	2	; select bank2
  4577  0C7D  01C9               	clrf	((_Load+1)^(0+256)+33)
  4578  0C7E  07C9               	addwf	((_Load+1)^(0+256)+33),f
  4579  0C7F  0020               	movlb	0	; select bank0
  4580  0C80  0820               	movf	?_getAD,w
  4581  0C81  0022               	movlb	2	; select bank2
  4582  0C82  01C8               	clrf	(_Load^(0+256)+33)
  4583  0C83  07C8               	addwf	(_Load^(0+256)+33),f
  4584                           
  4585                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4586  0C84  0020               	movlb	0	; select bank0
  4587  0C85  01A9               	clrf	getLoad_AD@i
  4588  0C86  3004               	movlw	4
  4589  0C87  0229               	subwf	getLoad_AD@i,w
  4590  0C88  1803               	btfsc	3,0
  4591  0C89  2CB7               	goto	l10639
  4592  0C8A                     l10627:	
  4593                           
  4594                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4595  0C8A  3529               	lslf	getLoad_AD@i,w
  4596  0C8B  3E32               	addlw	(_Load+11)& (0+255)
  4597  0C8C  0086               	movwf	6
  4598  0C8D  3001               	movlw	1	; select bank2/3
  4599  0C8E  0087               	movwf	7
  4600  0C8F  3F40               	moviw [0]fsr1
  4601  0C90  00A4               	movwf	??_getLoad_AD
  4602  0C91  3F41               	moviw [1]fsr1
  4603  0C92  00A5               	movwf	??_getLoad_AD+1
  4604  0C93  0022               	movlb	2	; select bank2
  4605  0C94  0849               	movf	((_Load+1)^(0+256)+33),w
  4606  0C95  0020               	movlb	0	; select bank0
  4607  0C96  0225               	subwf	??_getLoad_AD+1,w
  4608  0C97  1D03               	skipz
  4609  0C98  2C9D               	goto	u12375
  4610  0C99  0022               	movlb	2	; select bank2
  4611  0C9A  0848               	movf	(_Load^(0+256)+33),w
  4612  0C9B  0020               	movlb	0	; select bank0
  4613  0C9C  0224               	subwf	??_getLoad_AD,w
  4614  0C9D                     u12375:	
  4615  0C9D  1803               	skipnc
  4616  0C9E  2CAF               	goto	l10635
  4617  0C9F  08A8               	movf	getLoad_AD@j,f
  4618  0CA0  1D03               	skipz
  4619  0CA1  2CAF               	goto	l10635
  4620                           
  4621                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4622  0CA2  3529               	lslf	getLoad_AD@i,w
  4623  0CA3  3E32               	addlw	(_Load+11)& (0+255)
  4624  0CA4  0086               	movwf	6
  4625  0CA5  3001               	movlw	1	; select bank2/3
  4626  0CA6  0087               	movwf	7
  4627  0CA7  0022               	movlb	2	; select bank2
  4628  0CA8  0848               	movf	(_Load^(0+256)+33),w
  4629  0CA9  3FC0               	movwi [0]fsr1
  4630  0CAA  0849               	movf	((_Load+1)^(0+256)+33),w
  4631  0CAB  3FC1               	movwi [1]fsr1
  4632                           
  4633                           ;OverLoad_B1.c: 24: j = 1;
  4634  0CAC  0020               	movlb	0	; select bank0
  4635  0CAD  01A8               	clrf	getLoad_AD@j
  4636  0CAE  0AA8               	incf	getLoad_AD@j,f
  4637  0CAF                     l10635:	
  4638  0CAF  3001               	movlw	1
  4639  0CB0  00A4               	movwf	??_getLoad_AD
  4640  0CB1  0824               	movf	??_getLoad_AD,w
  4641  0CB2  07A9               	addwf	getLoad_AD@i,f
  4642  0CB3  3004               	movlw	4
  4643  0CB4  0229               	subwf	getLoad_AD@i,w
  4644  0CB5  1C03               	skipc
  4645  0CB6  2C8A               	goto	l10627
  4646  0CB7                     l10639:	
  4647                           
  4648                           ;OverLoad_B1.c: 25: }
  4649                           ;OverLoad_B1.c: 26: }
  4650                           ;OverLoad_B1.c: 27: if (j == 0) {
  4651  0CB7  08A8               	movf	getLoad_AD@j,f
  4652  0CB8  1D03               	skipz
  4653  0CB9  0008               	return
  4654                           
  4655                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4656  0CBA  01A9               	clrf	getLoad_AD@i
  4657  0CBB                     L1:	
  4658  0CBB  3004               	movlw	4
  4659  0CBC  0229               	subwf	getLoad_AD@i,w
  4660  0CBD  1803               	btfsc	3,0
  4661  0CBE  0008               	return
  4662                           
  4663                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4664  0CBF  3529               	lslf	getLoad_AD@i,w
  4665  0CC0  3E3C               	addlw	(_Load+21)& (0+255)
  4666  0CC1  0086               	movwf	6
  4667  0CC2  3001               	movlw	1	; select bank2/3
  4668  0CC3  0087               	movwf	7
  4669  0CC4  3F40               	moviw [0]fsr1
  4670  0CC5  00A4               	movwf	??_getLoad_AD
  4671  0CC6  3F41               	moviw [1]fsr1
  4672  0CC7  00A5               	movwf	??_getLoad_AD+1
  4673  0CC8  0825               	movf	??_getLoad_AD+1,w
  4674  0CC9  0022               	movlb	2	; select bank2
  4675  0CCA  0249               	subwf	((_Load+1)^(0+256)+33),w
  4676  0CCB  1D03               	skipz
  4677  0CCC  2CD1               	goto	u12425
  4678  0CCD  0020               	movlb	0	; select bank0
  4679  0CCE  0824               	movf	??_getLoad_AD,w
  4680  0CCF  0022               	movlb	2	; select bank2
  4681  0CD0  0248               	subwf	(_Load^(0+256)+33),w
  4682  0CD1                     u12425:	
  4683  0CD1  1803               	skipnc
  4684  0CD2  2CE4               	goto	l10655
  4685  0CD3  0020               	movlb	0	; select bank0
  4686  0CD4  08A7               	movf	getLoad_AD@k,f
  4687  0CD5  1D03               	skipz
  4688  0CD6  2CE4               	goto	l10655
  4689                           
  4690                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4691  0CD7  3529               	lslf	getLoad_AD@i,w
  4692  0CD8  3E3C               	addlw	(_Load+21)& (0+255)
  4693  0CD9  0086               	movwf	6
  4694  0CDA  3001               	movlw	1	; select bank2/3
  4695  0CDB  0087               	movwf	7
  4696  0CDC  0022               	movlb	2	; select bank2
  4697  0CDD  0848               	movf	(_Load^(0+256)+33),w
  4698  0CDE  3FC0               	movwi [0]fsr1
  4699  0CDF  0849               	movf	((_Load+1)^(0+256)+33),w
  4700  0CE0  3FC1               	movwi [1]fsr1
  4701                           
  4702                           ;OverLoad_B1.c: 31: k = 1;
  4703  0CE1  0020               	movlb	0	; select bank0
  4704  0CE2  01A7               	clrf	getLoad_AD@k
  4705  0CE3  0AA7               	incf	getLoad_AD@k,f
  4706  0CE4                     l10655:	
  4707  0CE4  3001               	movlw	1
  4708  0CE5  0020               	movlb	0	; select bank0
  4709  0CE6  00A4               	movwf	??_getLoad_AD
  4710  0CE7  0824               	movf	??_getLoad_AD,w
  4711  0CE8  07A9               	addwf	getLoad_AD@i,f
  4712  0CE9  2CBB               	goto	L1
  4713  0CEA                     __end_of_getLoad_AD:	
  4714                           
  4715                           	psect	text5
  4716  1F06                     __ptext5:	
  4717 ;; *************** function _getAD *****************
  4718 ;; Defined at:
  4719 ;;		line 453 in file "../src/MCU_B1.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  adcon0          1    wreg     unsigned char 
  4722 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  2    0[BANK0 ] int 
  4727 ;; Registers used:
  4728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4734 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;Total ram usage:        4 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    6
  4741 ;; This function calls:
  4742 ;;		_Timeout_Counter
  4743 ;;		_set_TimeoutCleared
  4744 ;; This function is called by:
  4745 ;;		_getLoad_AD
  4746 ;;		_getTemp_AD
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           
  4751                           ;psect for function _getAD
  4752  1F06                     _getAD:	
  4753                           
  4754                           ;incstack = 0
  4755                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4756                           ;getAD@adcon0 stored from wreg
  4757  1F06  0020               	movlb	0	; select bank0
  4758  1F07  00A3               	movwf	getAD@adcon0
  4759                           
  4760                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4761  1F08  0823               	movf	getAD@adcon0,w
  4762  1F09  0021               	movlb	1	; select bank1
  4763  1F0A  009D               	movwf	29	;volatile
  4764                           
  4765                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4766  1F0B  0020               	movlb	0	; select bank0
  4767  1F0C  0820               	movf	getAD@adcon1,w
  4768  1F0D  0021               	movlb	1	; select bank1
  4769  1F0E  009E               	movwf	30	;volatile
  4770                           
  4771                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4772  1F0F  149D               	bsf	29,1	;volatile
  4773                           
  4774                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4775  1F10  2F14               	goto	l10107
  4776  1F11                     l10105:	
  4777                           
  4778                           ;MCU_B1.c: 458: Timeout_Counter();
  4779  1F11  319D  2574  319F   	fcall	_Timeout_Counter
  4780  1F14                     l10107:	
  4781  1F14  0021               	movlb	1	; select bank1
  4782  1F15  1C9D               	btfss	29,1	;volatile
  4783  1F16  2F19               	goto	l10111
  4784  1F17  1D2B               	btfss	(_myMain^(0+128)+11),2
  4785  1F18  2F11               	goto	l10105
  4786  1F19                     l10111:	
  4787                           
  4788                           ;MCU_B1.c: 459: };
  4789                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4790  1F19  319A  22E4         	fcall	_set_TimeoutCleared
  4791                           
  4792                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4793  1F1B  0021               	movlb	1	; select bank1
  4794  1F1C  081C               	movf	28,w	;volatile
  4795  1F1D  0020               	movlb	0	; select bank0
  4796  1F1E  01A1               	clrf	?_getAD+1
  4797  1F1F  07A1               	addwf	?_getAD+1,f
  4798  1F20  0021               	movlb	1	; select bank1
  4799  1F21  081B               	movf	27,w	;volatile
  4800  1F22  0020               	movlb	0	; select bank0
  4801  1F23  01A0               	clrf	?_getAD
  4802  1F24  07A0               	addwf	?_getAD,f
  4803  1F25  0008               	return
  4804  1F26                     __end_of_getAD:	
  4805                           
  4806                           	psect	text6
  4807  1C77                     __ptext6:	
  4808 ;; *************** function _WDT_Main *****************
  4809 ;; Defined at:
  4810 ;;		line 1097 in file "../src/MCU_B1.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;		None
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;		None
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, status,2, status,0, pclath, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;Total ram usage:        1 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    6
  4831 ;; This function calls:
  4832 ;;		_WDT_Clearing
  4833 ;; This function is called by:
  4834 ;;		_main
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           
  4839                           ;psect for function _WDT_Main
  4840  1C77                     _WDT_Main:	
  4841                           
  4842                           ;MCU_B1.c: 1098: if (WDT.Enable == 1) {
  4843                           
  4844                           ;incstack = 0
  4845                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4846  1C77  0022               	movlb	2	; select bank2
  4847  1C78  1C25               	btfss	_WDT^(0+256),0
  4848  1C79  0008               	return
  4849                           
  4850                           ;MCU_B1.c: 1099: if (WDT.Timer-- > 0) {
  4851  1C7A  3001               	movlw	1
  4852  1C7B  02A6               	subwf	(_WDT^(0+256)+1),f
  4853  1C7C  0826               	movf	(_WDT^(0+256)+1),w
  4854  1C7D  3AFF               	xorlw	255
  4855  1C7E  1903               	skipnz
  4856  1C7F  0008               	return
  4857                           
  4858                           ;MCU_B1.c: 1100: WDT.Timer = 100;
  4859  1C80  3064               	movlw	100
  4860  1C81  0020               	movlb	0	; select bank0
  4861  1C82  00A0               	movwf	??_WDT_Main
  4862  1C83  0820               	movf	??_WDT_Main,w
  4863  1C84  0022               	movlb	2	; select bank2
  4864  1C85  00A6               	movwf	(_WDT^(0+256)+1)
  4865                           
  4866                           ;MCU_B1.c: 1101: WDT_Clearing();
  4867  1C86  3180  2002         	fcall	_WDT_Clearing
  4868  1C88  0008               	return
  4869  1C89                     __end_of_WDT_Main:	
  4870                           
  4871                           	psect	text7
  4872  0002                     __ptext7:	
  4873 ;; *************** function _WDT_Clearing *****************
  4874 ;; Defined at:
  4875 ;;		line 1107 in file "../src/MCU_B1.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;		None
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;		None               void
  4882 ;; Registers used:
  4883 ;;		None
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4893 ;;Total ram usage:        0 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    5
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_WDT_Main
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function _WDT_Clearing
  4905  0002                     _WDT_Clearing:	
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _WDT_Clearing: []
  4909  0002  0064               	clrwdt	;# 
  4910  0003  0008               	return
  4911  0004                     __end_of_WDT_Clearing:	
  4912                           
  4913                           	psect	text8
  4914  1AD1                     __ptext8:	
  4915 ;; *************** function _Temp_Main *****************
  4916 ;; Defined at:
  4917 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;		None
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;		None
  4922 ;; Return value:  Size  Location     Type
  4923 ;;		None               void
  4924 ;; Registers used:
  4925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;Total ram usage:        0 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    8
  4938 ;; This function calls:
  4939 ;;		_setTemp_Main
  4940 ;; This function is called by:
  4941 ;;		_main
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           
  4946                           ;psect for function _Temp_Main
  4947  1AD1                     _Temp_Main:	
  4948                           
  4949                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4950                           
  4951                           ;incstack = 0
  4952                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4953  1AD1  318F  2750         	fcall	_setTemp_Main
  4954  1AD3  0008               	return
  4955  1AD4                     __end_of_Temp_Main:	
  4956                           
  4957                           	psect	text9
  4958  0F50                     __ptext9:	
  4959 ;; *************** function _setTemp_Main *****************
  4960 ;; Defined at:
  4961 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;		None
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  error           1   72[BANK0 ] unsigned char 
  4966 ;; Return value:  Size  Location     Type
  4967 ;;		None               void
  4968 ;; Registers used:
  4969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;Total ram usage:        3 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; Hardware stack levels required when called:    7
  4982 ;; This function calls:
  4983 ;;		_getMain_All_Error_Status
  4984 ;;		_setBuz
  4985 ;;		_setProductData
  4986 ;; This function is called by:
  4987 ;;		_Temp_Main
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           
  4992                           ;psect for function _setTemp_Main
  4993  0F50                     _setTemp_Main:	
  4994                           
  4995                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4999  0F50  3000               	movlw	0
  5000  0F51  3191  2168  318F   	fcall	_getMain_All_Error_Status
  5001  0F54  0020               	movlb	0	; select bank0
  5002  0F55  00E6               	movwf	??_setTemp_Main
  5003  0F56  0866               	movf	??_setTemp_Main,w
  5004  0F57  00E8               	movwf	setTemp_Main@error
  5005                           
  5006                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5007  0F58  0021               	movlb	1	; select bank1
  5008  0F59  1C56               	btfss	_Temp^(0+128),0
  5009  0F5A  2FFC               	goto	l1895
  5010                           
  5011                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5012  0F5B  1956               	btfsc	_Temp^(0+128),2
  5013  0F5C  2F6C               	goto	l10177
  5014                           
  5015                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5016  0F5D  3001               	movlw	1
  5017  0F5E  07D7               	addwf	(_Temp^(0+128)+1),f
  5018  0F5F  3000               	movlw	0
  5019  0F60  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5020                           
  5021                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  5022  0F61  3001               	movlw	1
  5023  0F62  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5024  0F63  30F4               	movlw	244
  5025  0F64  1903               	skipnz
  5026  0F65  0257               	subwf	(_Temp^(0+128)+1),w
  5027  0F66  1C03               	skipc
  5028  0F67  0008               	return
  5029                           
  5030                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5031  0F68  01D7               	clrf	(_Temp^(0+128)+1)
  5032  0F69  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5033                           
  5034                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5035  0F6A  1556               	bsf	_Temp^(0+128),2
  5036                           
  5037                           ;OverTemperature_B1.c: 70: }
  5038                           ;OverTemperature_B1.c: 71: } else {
  5039  0F6B  0008               	return
  5040  0F6C                     l10177:	
  5041                           
  5042                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5043  0F6C  3001               	movlw	1
  5044  0F6D  07D7               	addwf	(_Temp^(0+128)+1),f
  5045  0F6E  3000               	movlw	0
  5046  0F6F  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5047                           
  5048                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5049  0F70  3000               	movlw	0
  5050  0F71  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5051  0F72  3005               	movlw	5
  5052  0F73  1903               	skipnz
  5053  0F74  0257               	subwf	(_Temp^(0+128)+1),w
  5054  0F75  1C03               	skipc
  5055  0F76  0008               	return
  5056                           
  5057                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5058  0F77  01D7               	clrf	(_Temp^(0+128)+1)
  5059  0F78  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5060                           
  5061                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5062  0F79  3008               	movlw	8
  5063  0F7A  3ED6               	addlw	_Temp& (0+255)
  5064  0F7B  0086               	movwf	6
  5065  0F7C  0187               	clrf	7
  5066  0F7D  0016               	moviw fsr1++
  5067  0F7E  0401               	iorwf	1,w
  5068  0F7F  1903               	skipnz
  5069  0F80  2FF6               	goto	l1900
  5070  0F81  300A               	movlw	10
  5071  0F82  3ED6               	addlw	_Temp& (0+255)
  5072  0F83  0086               	movwf	6
  5073  0F84  0187               	clrf	7
  5074  0F85  0016               	moviw fsr1++
  5075  0F86  0401               	iorwf	1,w
  5076  0F87  1903               	skipnz
  5077  0F88  2FF6               	goto	l1900
  5078                           
  5079                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5080  0F89  1156               	bcf	_Temp^(0+128),2
  5081                           
  5082                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5083  0F8A  300A               	movlw	10
  5084  0F8B  3ED6               	addlw	_Temp& (0+255)
  5085  0F8C  0086               	movwf	6
  5086  0F8D  0187               	clrf	7
  5087  0F8E  3008               	movlw	8
  5088  0F8F  3ED6               	addlw	_Temp& (0+255)
  5089  0F90  0084               	movwf	4
  5090  0F91  0185               	clrf	5
  5091  0F92  3F40               	moviw [0]fsr1
  5092  0F93  0700               	addwf	0,w
  5093  0F94  0020               	movlb	0	; select bank0
  5094  0F95  00E6               	movwf	??_setTemp_Main
  5095  0F96  3101               	addfsr 0,1
  5096  0F97  3F41               	moviw [1]fsr1
  5097  0F98  3D00               	addwfc	0,w
  5098  0F99  00E7               	movwf	??_setTemp_Main+1
  5099  0F9A  36E7               	lsrf	??_setTemp_Main+1,f
  5100  0F9B  0CE6               	rrf	??_setTemp_Main,f
  5101  0F9C  0866               	movf	??_setTemp_Main,w
  5102  0F9D  0021               	movlb	1	; select bank1
  5103  0F9E  00DC               	movwf	(_Temp^(0+128)+6)
  5104  0F9F  0020               	movlb	0	; select bank0
  5105  0FA0  0867               	movf	??_setTemp_Main+1,w
  5106  0FA1  0021               	movlb	1	; select bank1
  5107  0FA2  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5108                           
  5109                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5110  0FA3  30C7               	movlw	199
  5111  0FA4  00E4               	movwf	(_Temp^(0+128)+14)
  5112  0FA5  3001               	movlw	1
  5113  0FA6  00E5               	movwf	(_Temp^(0+128)+15)
  5114                           
  5115                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5116  0FA7  309F               	movlw	159
  5117  0FA8  00E6               	movwf	(_Temp^(0+128)+16)
  5118  0FA9  3001               	movlw	1
  5119  0FAA  00E7               	movwf	(_Temp^(0+128)+17)
  5120                           
  5121                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5122  0FAB  1CD6               	btfss	_Temp^(0+128),1
  5123  0FAC  2FCD               	goto	l10209
  5124                           
  5125                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5126  0FAD  0865               	movf	((_Temp+1)^(0+128)+14),w
  5127  0FAE  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5128  0FAF  1D03               	skipz
  5129  0FB0  2FB3               	goto	u11565
  5130  0FB1  0864               	movf	(_Temp^(0+128)+14),w
  5131  0FB2  025C               	subwf	(_Temp^(0+128)+6),w
  5132  0FB3                     u11565:	
  5133  0FB3  1C03               	skipc
  5134  0FB4  2FCB               	goto	l10207
  5135                           
  5136                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5137  0FB5  3001               	movlw	1
  5138  0FB6  0020               	movlb	0	; select bank0
  5139  0FB7  00E6               	movwf	??_setTemp_Main
  5140  0FB8  0866               	movf	??_setTemp_Main,w
  5141  0FB9  0021               	movlb	1	; select bank1
  5142  0FBA  07D9               	addwf	(_Temp^(0+128)+3),f
  5143                           
  5144                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5145  0FBB  3003               	movlw	3
  5146  0FBC  0259               	subwf	(_Temp^(0+128)+3),w
  5147  0FBD  1C03               	skipc
  5148  0FBE  2FE3               	goto	l10221
  5149                           
  5150                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5151  0FBF  01D9               	clrf	(_Temp^(0+128)+3)
  5152                           
  5153                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5154  0FC0  10D6               	bcf	_Temp^(0+128),1
  5155                           
  5156                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5157  0FC1  3064               	movlw	100
  5158  0FC2  0020               	movlb	0	; select bank0
  5159  0FC3  00A9               	movwf	setBuz@time
  5160  0FC4  3000               	movlw	0
  5161  0FC5  00AA               	movwf	setBuz@time+1
  5162  0FC6  3002               	movlw	2
  5163  0FC7  3197  274E  318F   	fcall	_setBuz
  5164                           
  5165                           ;OverTemperature_B1.c: 103: }
  5166                           ;OverTemperature_B1.c: 104: } else {
  5167  0FCA  2FE3               	goto	l10221
  5168  0FCB                     l10207:	
  5169                           
  5170                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5171  0FCB  0021               	movlb	1	; select bank1
  5172  0FCC  2FE2               	goto	l10219
  5173  0FCD                     l10209:	
  5174                           ;OverTemperature_B1.c: 106: }
  5175                           ;OverTemperature_B1.c: 107: } else {
  5176                           
  5177                           
  5178                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5179  0FCD  085D               	movf	((_Temp+1)^(0+128)+6),w
  5180  0FCE  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5181  0FCF  1D03               	skipz
  5182  0FD0  2FD3               	goto	u11585
  5183  0FD1  085C               	movf	(_Temp^(0+128)+6),w
  5184  0FD2  0266               	subwf	(_Temp^(0+128)+16),w
  5185  0FD3                     u11585:	
  5186  0FD3  1C03               	skipc
  5187  0FD4  2FE2               	goto	l10219
  5188                           
  5189                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5190  0FD5  3001               	movlw	1
  5191  0FD6  0020               	movlb	0	; select bank0
  5192  0FD7  00E6               	movwf	??_setTemp_Main
  5193  0FD8  0866               	movf	??_setTemp_Main,w
  5194  0FD9  0021               	movlb	1	; select bank1
  5195  0FDA  07D9               	addwf	(_Temp^(0+128)+3),f
  5196                           
  5197                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5198  0FDB  3003               	movlw	3
  5199  0FDC  0259               	subwf	(_Temp^(0+128)+3),w
  5200  0FDD  1C03               	skipc
  5201  0FDE  2FE3               	goto	l10221
  5202                           
  5203                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5204  0FDF  01D9               	clrf	(_Temp^(0+128)+3)
  5205                           
  5206                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5207  0FE0  14D6               	bsf	_Temp^(0+128),1
  5208                           
  5209                           ;OverTemperature_B1.c: 113: }
  5210                           ;OverTemperature_B1.c: 114: } else {
  5211  0FE1  2FE3               	goto	l10221
  5212  0FE2                     l10219:	
  5213                           
  5214                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5215  0FE2  01D9               	clrf	(_Temp^(0+128)+3)
  5216  0FE3                     l10221:	
  5217                           
  5218                           ;OverTemperature_B1.c: 116: }
  5219                           ;OverTemperature_B1.c: 117: }
  5220                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5221  0FE3  0021               	movlb	1	; select bank1
  5222  0FE4  085D               	movf	((_Temp+1)^(0+128)+6),w
  5223  0FE5  0020               	movlb	0	; select bank0
  5224  0FE6  00E6               	movwf	??_setTemp_Main
  5225  0FE7  0866               	movf	??_setTemp_Main,w
  5226  0FE8  00E2               	movwf	setProductData@value
  5227  0FE9  3018               	movlw	24
  5228  0FEA  319B  23CF  318F   	fcall	_setProductData
  5229                           
  5230                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5231  0FED  0021               	movlb	1	; select bank1
  5232  0FEE  085C               	movf	(_Temp^(0+128)+6),w
  5233  0FEF  0020               	movlb	0	; select bank0
  5234  0FF0  00E6               	movwf	??_setTemp_Main
  5235  0FF1  0866               	movf	??_setTemp_Main,w
  5236  0FF2  00E2               	movwf	setProductData@value
  5237  0FF3  3019               	movlw	25
  5238  0FF4  319B  23CF         	fcall	_setProductData
  5239  0FF6                     l1900:	
  5240                           
  5241                           ;OverTemperature_B1.c: 135: }
  5242                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5243  0FF6  0021               	movlb	1	; select bank1
  5244  0FF7  01DE               	clrf	(_Temp^(0+128)+8)
  5245  0FF8  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5246                           
  5247                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5248  0FF9  01E0               	clrf	(_Temp^(0+128)+10)
  5249  0FFA  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5250                           
  5251                           ;OverTemperature_B1.c: 138: }
  5252                           ;OverTemperature_B1.c: 139: }
  5253                           ;OverTemperature_B1.c: 141: } else {
  5254  0FFB  0008               	return
  5255  0FFC                     l1895:	
  5256                           
  5257                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5258  0FFC  1C20               	btfss	_myMain^(0+128),0
  5259  0FFD  0008               	return
  5260                           
  5261                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5262  0FFE  1456               	bsf	_Temp^(0+128),0
  5263  0FFF  0008               	return
  5264  1000                     __end_of_setTemp_Main:	
  5265                           
  5266                           	psect	text10
  5267  1ACE                     __ptext10:	
  5268 ;; *************** function _Temp_Initialization *****************
  5269 ;; Defined at:
  5270 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;		None
  5275 ;; Return value:  Size  Location     Type
  5276 ;;		None               void
  5277 ;; Registers used:
  5278 ;;		status,2, status,0, pclath, cstack
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;Total ram usage:        0 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    6
  5291 ;; This function calls:
  5292 ;;		_setTemp_Initialization
  5293 ;; This function is called by:
  5294 ;;		_main
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           
  5299                           ;psect for function _Temp_Initialization
  5300  1ACE                     _Temp_Initialization:	
  5301                           
  5302                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5303                           
  5304                           ;incstack = 0
  5305                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5306  1ACE  319A  22C1         	fcall	_setTemp_Initialization
  5307  1AD0  0008               	return
  5308  1AD1                     __end_of_Temp_Initialization:	
  5309                           
  5310                           	psect	text11
  5311  1AC1                     __ptext11:	
  5312 ;; *************** function _setTemp_Initialization *****************
  5313 ;; Defined at:
  5314 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;		None
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;		None
  5319 ;; Return value:  Size  Location     Type
  5320 ;;		None               void
  5321 ;; Registers used:
  5322 ;;		None
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;Total ram usage:        0 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    5
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_Temp_Initialization
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           
  5343                           ;psect for function _setTemp_Initialization
  5344  1AC1                     _setTemp_Initialization:	
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _setTemp_Initialization: []
  5348  1AC1  0008               	return
  5349  1AC2                     __end_of_setTemp_Initialization:	
  5350                           
  5351                           	psect	text12
  5352  1B57                     __ptext12:	
  5353 ;; *************** function _Switch_Main *****************
  5354 ;; Defined at:
  5355 ;;		line 72 in file "../src/Switch_B1.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;		None               void
  5362 ;; Registers used:
  5363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:   10
  5376 ;; This function calls:
  5377 ;;		_TouchPower
  5378 ;;		_setSw_Main
  5379 ;; This function is called by:
  5380 ;;		_main
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function _Switch_Main
  5386  1B57                     _Switch_Main:	
  5387                           
  5388                           ;Switch_B1.c: 75: setSw_Main(1);
  5389                           
  5390                           ;incstack = 0
  5391                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5392  1B57  3001               	movlw	1
  5393  1B58  3181  21F5  319B   	fcall	_setSw_Main
  5394                           
  5395                           ;Switch_B1.c: 79: setSw_Main(2);
  5396  1B5B  3002               	movlw	2
  5397  1B5C  3181  21F5  319B   	fcall	_setSw_Main
  5398                           
  5399                           ;Switch_B1.c: 87: TouchPower();
  5400  1B5F  319D  259E         	fcall	_TouchPower
  5401  1B61  0008               	return
  5402  1B62                     __end_of_Switch_Main:	
  5403                           
  5404                           	psect	text13
  5405  01F5                     __ptext13:	
  5406 ;; *************** function _setSw_Main *****************
  5407 ;; Defined at:
  5408 ;;		line 121 in file "../src/Switch_B1.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;  sw              1    wreg     unsigned char 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  sw              1   77[BANK0 ] unsigned char 
  5413 ;; Return value:  Size  Location     Type
  5414 ;;		None               void
  5415 ;; Registers used:
  5416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;Total ram usage:        3 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    9
  5429 ;; This function calls:
  5430 ;;		_SwPointSelect
  5431 ;;		_getMain_All_Error_Status
  5432 ;;		_getSw_KeyStatus
  5433 ;;		_setBuz
  5434 ;;		_setDimmerLights_AdjOn
  5435 ;;		_setDimmerLights_SwOff
  5436 ;;		_setDimmerLights_SwOn
  5437 ;;		_setRF_Learn
  5438 ;; This function is called by:
  5439 ;;		_Switch_Main
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           
  5444                           ;psect for function _setSw_Main
  5445  01F5                     _setSw_Main:	
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5449                           ;setSw_Main@sw stored from wreg
  5450  01F5  0020               	movlb	0	; select bank0
  5451  01F6  00ED               	movwf	setSw_Main@sw
  5452                           
  5453                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5454  01F7  086D               	movf	setSw_Main@sw,w
  5455  01F8  319D  254C  3181   	fcall	_SwPointSelect
  5456                           
  5457                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5458  01FB  0877               	movf	_Sw,w
  5459  01FC  0086               	movwf	6
  5460  01FD  3001               	movlw	1	; select bank2/3
  5461  01FE  0087               	movwf	7
  5462  01FF  1C01               	btfss	1,0
  5463  0200  2B5F               	goto	l2665
  5464                           
  5465                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5466  0201  3000               	movlw	0
  5467  0202  3191  2168  3181   	fcall	_getMain_All_Error_Status
  5468  0205  3800               	iorlw	0
  5469  0206  1D03               	skipz
  5470  0207  2A23               	goto	l10335
  5471                           
  5472                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5473  0208  0A77               	incf	_Sw,w
  5474  0209  0086               	movwf	6
  5475  020A  3001               	movlw	1	; select bank2/3
  5476  020B  0087               	movwf	7
  5477  020C  1081               	bcf	1,1
  5478                           
  5479                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5480  020D  0020               	movlb	0	; select bank0
  5481  020E  086D               	movf	setSw_Main@sw,w
  5482  020F  319E  26A7  3181   	fcall	_getSw_KeyStatus
  5483  0212  3A01               	xorlw	1
  5484  0213  3000               	movlw	0
  5485  0214  1903               	skipnz
  5486  0215  3001               	movlw	1
  5487  0216  0020               	movlb	0	; select bank0
  5488  0217  00EB               	movwf	??_setSw_Main
  5489  0218  0877               	movf	_Sw,w
  5490  0219  0086               	movwf	6
  5491  021A  3001               	movlw	1	; select bank2/3
  5492  021B  0087               	movwf	7
  5493  021C  0DEB               	rlf	??_setSw_Main,f
  5494  021D  0801               	movf	1,w
  5495  021E  066B               	xorwf	??_setSw_Main,w
  5496  021F  39FD               	andlw	-3
  5497  0220  066B               	xorwf	??_setSw_Main,w
  5498  0221  0081               	movwf	1
  5499                           
  5500                           ;Switch_B1.c: 128: } else {
  5501  0222  2A38               	goto	l2667
  5502  0223                     l10335:	
  5503                           
  5504                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5505  0223  0A77               	incf	_Sw,w
  5506  0224  0086               	movwf	6
  5507  0225  3001               	movlw	1	; select bank2/3
  5508  0226  0087               	movwf	7
  5509  0227  1881               	btfsc	1,1
  5510  0228  2A38               	goto	l2667
  5511                           
  5512                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5513  0229  0A77               	incf	_Sw,w
  5514  022A  0086               	movwf	6
  5515  022B  3001               	movlw	1	; select bank2/3
  5516  022C  0087               	movwf	7
  5517  022D  1481               	bsf	1,1
  5518                           
  5519                           ;Switch_B1.c: 131: Sw->Touch = 0;
  5520  022E  0877               	movf	_Sw,w
  5521  022F  0086               	movwf	6
  5522  0230  3001               	movlw	1	; select bank2/3
  5523  0231  0087               	movwf	7
  5524  0232  1081               	bcf	1,1
  5525                           
  5526                           ;Switch_B1.c: 132: Sw->Debounce = 1;
  5527  0233  0877               	movf	_Sw,w
  5528  0234  0086               	movwf	6
  5529  0235  3001               	movlw	1	; select bank2/3
  5530  0236  0087               	movwf	7
  5531  0237  1501               	bsf	1,2
  5532  0238                     l2667:	
  5533                           
  5534                           ;Switch_B1.c: 133: }
  5535                           ;Switch_B1.c: 134: }
  5536                           ;Switch_B1.c: 136: if (Sw->Touch == 1) {
  5537  0238  0877               	movf	_Sw,w
  5538  0239  0086               	movwf	6
  5539  023A  3001               	movlw	1	; select bank2/3
  5540  023B  0087               	movwf	7
  5541  023C  1C81               	btfss	1,1
  5542  023D  2B08               	goto	l10385
  5543                           
  5544                           ;Switch_B1.c: 137: if (Sw->Debounce == 0) {
  5545  023E  0877               	movf	_Sw,w
  5546  023F  0086               	movwf	6
  5547  0240  3001               	movlw	1	; select bank2/3
  5548  0241  0087               	movwf	7
  5549  0242  1901               	btfsc	1,2
  5550  0243  2A66               	goto	l10351
  5551                           
  5552                           ;Switch_B1.c: 138: Sw->DebounceTime++;
  5553  0244  3001               	movlw	1
  5554  0245  0020               	movlb	0	; select bank0
  5555  0246  00EB               	movwf	??_setSw_Main
  5556  0247  0877               	movf	_Sw,w
  5557  0248  3E02               	addlw	2
  5558  0249  0086               	movwf	6
  5559  024A  3001               	movlw	1	; select bank2/3
  5560  024B  0087               	movwf	7
  5561  024C  086B               	movf	??_setSw_Main,w
  5562  024D  0781               	addwf	1,f
  5563                           
  5564                           ;Switch_B1.c: 139: if (Sw->DebounceTime >= 5) {
  5565  024E  0877               	movf	_Sw,w
  5566  024F  3E02               	addlw	2
  5567  0250  0086               	movwf	6
  5568  0251  3001               	movlw	1	; select bank2/3
  5569  0252  0087               	movwf	7
  5570  0253  3005               	movlw	5
  5571  0254  0201               	subwf	1,w
  5572  0255  1C03               	skipc
  5573  0256  0008               	return
  5574                           
  5575                           ;Switch_B1.c: 140: Sw->DebounceTime = 0;
  5576  0257  0877               	movf	_Sw,w
  5577  0258  3E02               	addlw	2
  5578  0259  0086               	movwf	6
  5579  025A  3001               	movlw	1	; select bank2/3
  5580  025B  0087               	movwf	7
  5581  025C  0181               	clrf	1
  5582                           
  5583                           ;Switch_B1.c: 141: Sw->Debounce = 1;
  5584  025D  0877               	movf	_Sw,w
  5585  025E  0086               	movwf	6
  5586  025F  3001               	movlw	1	; select bank2/3
  5587  0260  0087               	movwf	7
  5588  0261  1501               	bsf	1,2
  5589                           
  5590                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5591  0262  086D               	movf	setSw_Main@sw,w
  5592  0263  3188  206A         	fcall	_setDimmerLights_SwOn
  5593                           
  5594                           ;Switch_B1.c: 147: }
  5595                           ;Switch_B1.c: 148: } else {
  5596  0265  0008               	return
  5597  0266                     l10351:	
  5598                           
  5599                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5600  0266  0877               	movf	_Sw,w
  5601  0267  0086               	movwf	6
  5602  0268  3001               	movlw	1	; select bank2/3
  5603  0269  0087               	movwf	7
  5604  026A  1981               	btfsc	1,3
  5605  026B  2A98               	goto	l10361
  5606                           
  5607                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5608  026C  0877               	movf	_Sw,w
  5609  026D  3E03               	addlw	3
  5610  026E  0086               	movwf	6
  5611  026F  3001               	movlw	1	; select bank2/3
  5612  0270  0087               	movwf	7
  5613  0271  3001               	movlw	1
  5614  0272  0781               	addwf	1,f
  5615  0273  3141               	addfsr 1,1
  5616  0274  1803               	skipnc
  5617  0275  0A81               	incf	1,f
  5618                           
  5619                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= 150) {
  5620  0276  0877               	movf	_Sw,w
  5621  0277  3E03               	addlw	3
  5622  0278  0086               	movwf	6
  5623  0279  3001               	movlw	1	; select bank2/3
  5624  027A  0087               	movwf	7
  5625  027B  3F40               	moviw [0]fsr1
  5626  027C  0020               	movlb	0	; select bank0
  5627  027D  00EB               	movwf	??_setSw_Main
  5628  027E  3F41               	moviw [1]fsr1
  5629  027F  00EC               	movwf	??_setSw_Main+1
  5630  0280  3000               	movlw	0
  5631  0281  026C               	subwf	??_setSw_Main+1,w
  5632  0282  3096               	movlw	150
  5633  0283  1903               	skipnz
  5634  0284  026B               	subwf	??_setSw_Main,w
  5635  0285  1C03               	skipc
  5636  0286  0008               	return
  5637                           
  5638                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  5639  0287  0877               	movf	_Sw,w
  5640  0288  3E03               	addlw	3
  5641  0289  0086               	movwf	6
  5642  028A  3001               	movlw	1	; select bank2/3
  5643  028B  0087               	movwf	7
  5644  028C  3000               	movlw	0
  5645  028D  3FC0               	movwi [0]fsr1
  5646  028E  3FC1               	movwi [1]fsr1
  5647                           
  5648                           ;Switch_B1.c: 155: Sw->Hold1 = 1;
  5649  028F  0877               	movf	_Sw,w
  5650  0290  0086               	movwf	6
  5651  0291  3001               	movlw	1	; select bank2/3
  5652  0292  0087               	movwf	7
  5653  0293  1581               	bsf	1,3
  5654                           
  5655                           ;Switch_B1.c: 156: setDimmerLights_AdjOn(sw);
  5656  0294  086D               	movf	setSw_Main@sw,w
  5657  0295  3192  2205         	fcall	_setDimmerLights_AdjOn
  5658                           
  5659                           ;Switch_B1.c: 159: }
  5660                           ;Switch_B1.c: 160: } else {
  5661  0297  0008               	return
  5662  0298                     l10361:	
  5663                           
  5664                           ;Switch_B1.c: 161: if (Sw->Hold2 == 0) {
  5665  0298  0877               	movf	_Sw,w
  5666  0299  0086               	movwf	6
  5667  029A  3001               	movlw	1	; select bank2/3
  5668  029B  0087               	movwf	7
  5669  029C  1A01               	btfsc	1,4
  5670  029D  2AD6               	goto	l10375
  5671                           
  5672                           ;Switch_B1.c: 162: Sw->Hold2Time++;
  5673  029E  0877               	movf	_Sw,w
  5674  029F  3E05               	addlw	5
  5675  02A0  0086               	movwf	6
  5676  02A1  3001               	movlw	1	; select bank2/3
  5677  02A2  0087               	movwf	7
  5678  02A3  3001               	movlw	1
  5679  02A4  0781               	addwf	1,f
  5680  02A5  3141               	addfsr 1,1
  5681  02A6  1803               	skipnc
  5682  02A7  0A81               	incf	1,f
  5683                           
  5684                           ;Switch_B1.c: 163: if (Sw->Hold2Time >= 150) {
  5685  02A8  0877               	movf	_Sw,w
  5686  02A9  3E05               	addlw	5
  5687  02AA  0086               	movwf	6
  5688  02AB  3001               	movlw	1	; select bank2/3
  5689  02AC  0087               	movwf	7
  5690  02AD  3F40               	moviw [0]fsr1
  5691  02AE  0020               	movlb	0	; select bank0
  5692  02AF  00EB               	movwf	??_setSw_Main
  5693  02B0  3F41               	moviw [1]fsr1
  5694  02B1  00EC               	movwf	??_setSw_Main+1
  5695  02B2  3000               	movlw	0
  5696  02B3  026C               	subwf	??_setSw_Main+1,w
  5697  02B4  3096               	movlw	150
  5698  02B5  1903               	skipnz
  5699  02B6  026B               	subwf	??_setSw_Main,w
  5700  02B7  1C03               	skipc
  5701  02B8  0008               	return
  5702                           
  5703                           ;Switch_B1.c: 164: Sw->Hold2Time = 0;
  5704  02B9  0877               	movf	_Sw,w
  5705  02BA  3E05               	addlw	5
  5706  02BB  0086               	movwf	6
  5707  02BC  3001               	movlw	1	; select bank2/3
  5708  02BD  0087               	movwf	7
  5709  02BE  3000               	movlw	0
  5710  02BF  3FC0               	movwi [0]fsr1
  5711  02C0  3FC1               	movwi [1]fsr1
  5712                           
  5713                           ;Switch_B1.c: 165: Sw->Hold2 = 1;
  5714  02C1  0877               	movf	_Sw,w
  5715  02C2  0086               	movwf	6
  5716  02C3  3001               	movlw	1	; select bank2/3
  5717  02C4  0087               	movwf	7
  5718  02C5  1601               	bsf	1,4
  5719                           
  5720                           ;Switch_B1.c: 168: setRF_Learn(1);
  5721  02C6  3001               	movlw	1
  5722  02C7  319D  2560  3181   	fcall	_setRF_Learn
  5723                           
  5724                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5725  02CA  0021               	movlb	1	; select bank1
  5726  02CB  1EA0               	btfss	_myMain^(0+128),5
  5727  02CC  0008               	return
  5728                           
  5729                           ;Switch_B1.c: 171: setBuz(2, 100);
  5730  02CD  3064               	movlw	100
  5731  02CE  0020               	movlb	0	; select bank0
  5732  02CF  00A9               	movwf	setBuz@time
  5733  02D0  3000               	movlw	0
  5734  02D1  00AA               	movwf	setBuz@time+1
  5735  02D2  3002               	movlw	2
  5736  02D3  3197  274E         	fcall	_setBuz
  5737                           
  5738                           ;Switch_B1.c: 172: }
  5739                           ;Switch_B1.c: 174: }
  5740                           ;Switch_B1.c: 175: } else {
  5741  02D5  0008               	return
  5742  02D6                     l10375:	
  5743                           
  5744                           ;Switch_B1.c: 176: if (Sw->Hold3 == 0) {
  5745  02D6  0877               	movf	_Sw,w
  5746  02D7  0086               	movwf	6
  5747  02D8  3001               	movlw	1	; select bank2/3
  5748  02D9  0087               	movwf	7
  5749  02DA  1A81               	btfsc	1,5
  5750  02DB  0008               	return
  5751                           
  5752                           ;Switch_B1.c: 177: Sw->Hold3Time++;
  5753  02DC  0877               	movf	_Sw,w
  5754  02DD  3E07               	addlw	7
  5755  02DE  0086               	movwf	6
  5756  02DF  3001               	movlw	1	; select bank2/3
  5757  02E0  0087               	movwf	7
  5758  02E1  3001               	movlw	1
  5759  02E2  0781               	addwf	1,f
  5760  02E3  3141               	addfsr 1,1
  5761  02E4  1803               	skipnc
  5762  02E5  0A81               	incf	1,f
  5763                           
  5764                           ;Switch_B1.c: 178: if (Sw->Hold3Time >= 300) {
  5765  02E6  0877               	movf	_Sw,w
  5766  02E7  3E07               	addlw	7
  5767  02E8  0086               	movwf	6
  5768  02E9  3001               	movlw	1	; select bank2/3
  5769  02EA  0087               	movwf	7
  5770  02EB  3F40               	moviw [0]fsr1
  5771  02EC  0020               	movlb	0	; select bank0
  5772  02ED  00EB               	movwf	??_setSw_Main
  5773  02EE  3F41               	moviw [1]fsr1
  5774  02EF  00EC               	movwf	??_setSw_Main+1
  5775  02F0  3001               	movlw	1
  5776  02F1  026C               	subwf	??_setSw_Main+1,w
  5777  02F2  302C               	movlw	44
  5778  02F3  1903               	skipnz
  5779  02F4  026B               	subwf	??_setSw_Main,w
  5780  02F5  1C03               	skipc
  5781  02F6  0008               	return
  5782                           
  5783                           ;Switch_B1.c: 179: Sw->Hold3Time = 0;
  5784  02F7  0877               	movf	_Sw,w
  5785  02F8  3E07               	addlw	7
  5786  02F9  0086               	movwf	6
  5787  02FA  3001               	movlw	1	; select bank2/3
  5788  02FB  0087               	movwf	7
  5789  02FC  3000               	movlw	0
  5790  02FD  3FC0               	movwi [0]fsr1
  5791  02FE  3FC1               	movwi [1]fsr1
  5792                           
  5793                           ;Switch_B1.c: 180: Sw->Hold3 = 1;
  5794  02FF  0877               	movf	_Sw,w
  5795  0300  0086               	movwf	6
  5796  0301  3001               	movlw	1	; select bank2/3
  5797  0302  0087               	movwf	7
  5798  0303  1681               	bsf	1,5
  5799                           
  5800                           ;Switch_B1.c: 183: setRF_Learn(0);
  5801  0304  3000               	movlw	0
  5802  0305  319D  2560         	fcall	_setRF_Learn
  5803                           
  5804                           ;Switch_B1.c: 186: }
  5805                           ;Switch_B1.c: 187: }
  5806                           ;Switch_B1.c: 188: }
  5807                           ;Switch_B1.c: 189: }
  5808                           ;Switch_B1.c: 190: }
  5809                           ;Switch_B1.c: 191: } else {
  5810  0307  0008               	return
  5811  0308                     l10385:	
  5812                           
  5813                           ;Switch_B1.c: 192: if (Sw->Debounce == 1) {
  5814  0308  0877               	movf	_Sw,w
  5815  0309  0086               	movwf	6
  5816  030A  3001               	movlw	1	; select bank2/3
  5817  030B  0087               	movwf	7
  5818  030C  1D01               	btfss	1,2
  5819  030D  0008               	return
  5820                           
  5821                           ;Switch_B1.c: 193: Sw->DebounceTime++;
  5822  030E  3001               	movlw	1
  5823  030F  0020               	movlb	0	; select bank0
  5824  0310  00EB               	movwf	??_setSw_Main
  5825  0311  0877               	movf	_Sw,w
  5826  0312  3E02               	addlw	2
  5827  0313  0086               	movwf	6
  5828  0314  3001               	movlw	1	; select bank2/3
  5829  0315  0087               	movwf	7
  5830  0316  086B               	movf	??_setSw_Main,w
  5831  0317  0781               	addwf	1,f
  5832                           
  5833                           ;Switch_B1.c: 194: if (Sw->DebounceTime >= 5) {
  5834  0318  0877               	movf	_Sw,w
  5835  0319  3E02               	addlw	2
  5836  031A  0086               	movwf	6
  5837  031B  3001               	movlw	1	; select bank2/3
  5838  031C  0087               	movwf	7
  5839  031D  3005               	movlw	5
  5840  031E  0201               	subwf	1,w
  5841  031F  1C03               	skipc
  5842  0320  0008               	return
  5843                           
  5844                           ;Switch_B1.c: 195: Sw->DebounceTime = 0;
  5845  0321  0877               	movf	_Sw,w
  5846  0322  3E02               	addlw	2
  5847  0323  0086               	movwf	6
  5848  0324  3001               	movlw	1	; select bank2/3
  5849  0325  0087               	movwf	7
  5850  0326  0181               	clrf	1
  5851                           
  5852                           ;Switch_B1.c: 196: Sw->Debounce = 0;
  5853  0327  0877               	movf	_Sw,w
  5854  0328  0086               	movwf	6
  5855  0329  3001               	movlw	1	; select bank2/3
  5856  032A  0087               	movwf	7
  5857  032B  1101               	bcf	1,2
  5858                           
  5859                           ;Switch_B1.c: 197: Sw->Hold1Time = 0;
  5860  032C  0877               	movf	_Sw,w
  5861  032D  3E03               	addlw	3
  5862  032E  0086               	movwf	6
  5863  032F  3001               	movlw	1	; select bank2/3
  5864  0330  0087               	movwf	7
  5865  0331  3000               	movlw	0
  5866  0332  3FC0               	movwi [0]fsr1
  5867  0333  3FC1               	movwi [1]fsr1
  5868                           
  5869                           ;Switch_B1.c: 198: Sw->Hold1 = 0;
  5870  0334  0877               	movf	_Sw,w
  5871  0335  0086               	movwf	6
  5872  0336  3001               	movlw	1	; select bank2/3
  5873  0337  0087               	movwf	7
  5874  0338  1181               	bcf	1,3
  5875                           
  5876                           ;Switch_B1.c: 199: Sw->Hold2Time = 0;
  5877  0339  0877               	movf	_Sw,w
  5878  033A  3E05               	addlw	5
  5879  033B  0086               	movwf	6
  5880  033C  3001               	movlw	1	; select bank2/3
  5881  033D  0087               	movwf	7
  5882  033E  3000               	movlw	0
  5883  033F  3FC0               	movwi [0]fsr1
  5884  0340  3FC1               	movwi [1]fsr1
  5885                           
  5886                           ;Switch_B1.c: 200: Sw->Hold2 = 0;
  5887  0341  0877               	movf	_Sw,w
  5888  0342  0086               	movwf	6
  5889  0343  3001               	movlw	1	; select bank2/3
  5890  0344  0087               	movwf	7
  5891  0345  1201               	bcf	1,4
  5892                           
  5893                           ;Switch_B1.c: 201: Sw->Hold3Time = 0;
  5894  0346  0877               	movf	_Sw,w
  5895  0347  3E07               	addlw	7
  5896  0348  0086               	movwf	6
  5897  0349  3001               	movlw	1	; select bank2/3
  5898  034A  0087               	movwf	7
  5899  034B  3000               	movlw	0
  5900  034C  3FC0               	movwi [0]fsr1
  5901  034D  3FC1               	movwi [1]fsr1
  5902                           
  5903                           ;Switch_B1.c: 202: Sw->Hold3 = 0;
  5904  034E  0877               	movf	_Sw,w
  5905  034F  0086               	movwf	6
  5906  0350  3001               	movlw	1	; select bank2/3
  5907  0351  0087               	movwf	7
  5908  0352  1281               	bcf	1,5
  5909                           
  5910                           ;Switch_B1.c: 204: if (SwDetect.Error == 0) {
  5911  0353  0021               	movlb	1	; select bank1
  5912  0354  1851               	btfsc	_SwDetect^(0+128),0
  5913  0355  2B5B               	goto	l10411
  5914                           
  5915                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5916  0356  0020               	movlb	0	; select bank0
  5917  0357  086D               	movf	setSw_Main@sw,w
  5918  0358  3194  24BC  3181   	fcall	_setDimmerLights_SwOff
  5919  035B                     l10411:	
  5920                           
  5921                           ;Switch_B1.c: 206: }
  5922                           ;Switch_B1.c: 209: setRF_Learn(0);
  5923  035B  3000               	movlw	0
  5924  035C  319D  2560         	fcall	_setRF_Learn
  5925                           
  5926                           ;Switch_B1.c: 211: }
  5927                           ;Switch_B1.c: 212: }
  5928                           ;Switch_B1.c: 213: }
  5929                           ;Switch_B1.c: 214: } else {
  5930  035E  0008               	return
  5931  035F                     l2665:	
  5932                           
  5933                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5934  035F  0021               	movlb	1	; select bank1
  5935  0360  1C20               	btfss	_myMain^(0+128),0
  5936  0361  0008               	return
  5937                           
  5938                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5939  0362  0877               	movf	_Sw,w
  5940  0363  0086               	movwf	6
  5941  0364  3001               	movlw	1	; select bank2/3
  5942  0365  0087               	movwf	7
  5943  0366  1401               	bsf	1,0
  5944  0367  0008               	return
  5945  0368                     __end_of_setSw_Main:	
  5946                           
  5947                           	psect	text14
  5948  1D60                     __ptext14:	
  5949 ;; *************** function _setRF_Learn *****************
  5950 ;; Defined at:
  5951 ;;		line 23 in file "../src/RF_Control_B1.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  command         1    wreg     unsigned char 
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  command         1    1[BANK0 ] unsigned char 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;		None               void
  5958 ;; Registers used:
  5959 ;;		wreg, status,2, status,0
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;Total ram usage:        2 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    5
  5972 ;; This function calls:
  5973 ;;		Nothing
  5974 ;; This function is called by:
  5975 ;;		_setSw_Main
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           
  5980                           ;psect for function _setRF_Learn
  5981  1D60                     _setRF_Learn:	
  5982                           
  5983                           ;incstack = 0
  5984                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5985                           ;setRF_Learn@command stored from wreg
  5986  1D60  0020               	movlb	0	; select bank0
  5987  1D61  00A1               	movwf	setRF_Learn@command
  5988                           
  5989                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5990  1D62  0821               	movf	setRF_Learn@command,w
  5991  1D63  3A01               	xorlw	1
  5992  1D64  3000               	movlw	0
  5993  1D65  1903               	skipnz
  5994  1D66  3001               	movlw	1
  5995  1D67  00A0               	movwf	??_setRF_Learn
  5996  1D68  0EA0               	swapf	??_setRF_Learn,f
  5997  1D69  0DA0               	rlf	??_setRF_Learn,f
  5998  1D6A  0DA0               	rlf	??_setRF_Learn,f
  5999  1D6B  0021               	movlb	1	; select bank1
  6000  1D6C  083A               	movf	_RF1^(0+128),w
  6001  1D6D  0020               	movlb	0	; select bank0
  6002  1D6E  0620               	xorwf	??_setRF_Learn,w
  6003  1D6F  39BF               	andlw	-65
  6004  1D70  0620               	xorwf	??_setRF_Learn,w
  6005  1D71  0021               	movlb	1	; select bank1
  6006  1D72  00BA               	movwf	_RF1^(0+128)
  6007  1D73  0008               	return
  6008  1D74                     __end_of_setRF_Learn:	
  6009                           
  6010                           	psect	text15
  6011  1205                     __ptext15:	
  6012 ;; *************** function _setDimmerLights_AdjOn *****************
  6013 ;; Defined at:
  6014 ;;		line 477 in file "../src/Dimmer_B1.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;  sw              1    wreg     unsigned char 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  sw              1    7[BANK0 ] unsigned char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;		None               void
  6021 ;; Registers used:
  6022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;Total ram usage:        1 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    7
  6035 ;; This function calls:
  6036 ;;		_DimmerLightsPointSelect
  6037 ;;		_getDimmerLights_Allow_Condition
  6038 ;; This function is called by:
  6039 ;;		_setSw_Main
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           
  6044                           ;psect for function _setDimmerLights_AdjOn
  6045  1205                     _setDimmerLights_AdjOn:	
  6046                           
  6047                           ;incstack = 0
  6048                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6049                           ;setDimmerLights_AdjOn@sw stored from wreg
  6050  1205  0020               	movlb	0	; select bank0
  6051  1206  00A7               	movwf	setDimmerLights_AdjOn@sw
  6052                           
  6053                           ;Dimmer_B1.c: 478: DimmerLightsPointSelect(sw);
  6054  1207  0827               	movf	setDimmerLights_AdjOn@sw,w
  6055  1208  319C  2489  3192   	fcall	_DimmerLightsPointSelect
  6056                           
  6057                           ;Dimmer_B1.c: 488: if (DimmerLights->Trigger == 0 && getDimmerLights_Allow_Condition(sw)
      +                           == 0) {
  6058  120B  0020               	movlb	0	; select bank0
  6059  120C  086F               	movf	_DimmerLights,w
  6060  120D  3E0A               	addlw	10
  6061  120E  0086               	movwf	6
  6062  120F  3001               	movlw	1	; select bank2/3
  6063  1210  0087               	movwf	7
  6064  1211  1881               	btfsc	1,1
  6065  1212  0008               	return
  6066  1213  0827               	movf	setDimmerLights_AdjOn@sw,w
  6067  1214  3192  2272  3192   	fcall	_getDimmerLights_Allow_Condition
  6068  1217  3800               	iorlw	0
  6069  1218  1D03               	skipz
  6070  1219  0008               	return
  6071                           
  6072                           ;Dimmer_B1.c: 489: if (DimmerLights->SwFlag == 1) {
  6073  121A  0020               	movlb	0	; select bank0
  6074  121B  086F               	movf	_DimmerLights,w
  6075  121C  3E0B               	addlw	11
  6076  121D  0086               	movwf	6
  6077  121E  3001               	movlw	1	; select bank2/3
  6078  121F  0087               	movwf	7
  6079  1220  1C81               	btfss	1,1
  6080  1221  0008               	return
  6081                           
  6082                           ;Dimmer_B1.c: 490: DimmerLights->SwAdj = 1;
  6083  1222  086F               	movf	_DimmerLights,w
  6084  1223  3E0B               	addlw	11
  6085  1224  0086               	movwf	6
  6086  1225  3001               	movlw	1	; select bank2/3
  6087  1226  0087               	movwf	7
  6088  1227  1501               	bsf	1,2
  6089                           
  6090                           ;Dimmer_B1.c: 491: DimmerLights->Status = 1;
  6091  1228  086F               	movf	_DimmerLights,w
  6092  1229  3E02               	addlw	2
  6093  122A  0086               	movwf	6
  6094  122B  3001               	movlw	1	; select bank2/3
  6095  122C  0087               	movwf	7
  6096  122D  1481               	bsf	1,1
  6097                           
  6098                           ;Dimmer_B1.c: 493: DimmerLights->TriggerAdj = 1;
  6099  122E  086F               	movf	_DimmerLights,w
  6100  122F  3E0A               	addlw	10
  6101  1230  0086               	movwf	6
  6102  1231  3001               	movlw	1	; select bank2/3
  6103  1232  0087               	movwf	7
  6104  1233  1581               	bsf	1,3
  6105                           
  6106                           ;Dimmer_B1.c: 494: DimmerLights->SwitchAdj = 1;
  6107  1234  086F               	movf	_DimmerLights,w
  6108  1235  3E0A               	addlw	10
  6109  1236  0086               	movwf	6
  6110  1237  3001               	movlw	1	; select bank2/3
  6111  1238  0087               	movwf	7
  6112  1239  1501               	bsf	1,2
  6113  123A  0008               	return
  6114  123B                     __end_of_setDimmerLights_AdjOn:	
  6115                           
  6116                           	psect	text16
  6117  1EA7                     __ptext16:	
  6118 ;; *************** function _getSw_KeyStatus *****************
  6119 ;; Defined at:
  6120 ;;		line 222 in file "../src/Switch_B1.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;  sw              1    wreg     unsigned char 
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;  sw              1    4[BANK0 ] unsigned char 
  6125 ;;  status          1    3[BANK0 ] unsigned char 
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  1    wreg      unsigned char 
  6128 ;; Registers used:
  6129 ;;		wreg, status,2
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;Total ram usage:        5 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    5
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_setSw_Main
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function _getSw_KeyStatus
  6151  1EA7                     _getSw_KeyStatus:	
  6152                           
  6153                           ;incstack = 0
  6154                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6155                           ;getSw_KeyStatus@sw stored from wreg
  6156  1EA7  0020               	movlb	0	; select bank0
  6157  1EA8  00A4               	movwf	getSw_KeyStatus@sw
  6158                           
  6159                           ;Switch_B1.c: 223: char status = 0;
  6160  1EA9  01A3               	clrf	getSw_KeyStatus@status
  6161                           
  6162                           ;Switch_B1.c: 235: if (sw == 1) {
  6163  1EAA  0824               	movf	getSw_KeyStatus@sw,w
  6164  1EAB  3A01               	xorlw	1
  6165  1EAC  1D03               	skipz
  6166  1EAD  2EB6               	goto	l9833
  6167                           
  6168                           ;Switch_B1.c: 236: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6169  1EAE  01A1               	clrf	_getSw_KeyStatus$6246
  6170  1EAF  0AA1               	incf	_getSw_KeyStatus$6246,f
  6171  1EB0  1F0C               	btfss	12,6	;volatile
  6172  1EB1  1A0C               	btfsc	12,4	;volatile
  6173  1EB2  2EB4               	goto	l9831
  6174  1EB3  01A1               	clrf	_getSw_KeyStatus$6246
  6175  1EB4                     l9831:	
  6176  1EB4  0821               	movf	_getSw_KeyStatus$6246,w
  6177  1EB5  2EC1               	goto	L2
  6178  1EB6                     l9833:	
  6179                           ;Switch_B1.c: 237: } else if (sw == 2) {
  6180                           
  6181  1EB6  0824               	movf	getSw_KeyStatus@sw,w
  6182  1EB7  3A02               	xorlw	2
  6183  1EB8  1D03               	skipz
  6184  1EB9  2EC4               	goto	l9843
  6185                           
  6186                           ;Switch_B1.c: 238: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6187  1EBA  01A2               	clrf	_getSw_KeyStatus$6247
  6188  1EBB  0AA2               	incf	_getSw_KeyStatus$6247,f
  6189  1EBC  1C0C               	btfss	12,0	;volatile
  6190  1EBD  188D               	btfsc	13,1	;volatile
  6191  1EBE  2EC0               	goto	l9841
  6192  1EBF  01A2               	clrf	_getSw_KeyStatus$6247
  6193  1EC0                     l9841:	
  6194  1EC0  0822               	movf	_getSw_KeyStatus$6247,w
  6195  1EC1                     L2:	
  6196  1EC1  00A0               	movwf	??_getSw_KeyStatus
  6197  1EC2  0820               	movf	??_getSw_KeyStatus,w
  6198  1EC3  00A3               	movwf	getSw_KeyStatus@status
  6199  1EC4                     l9843:	
  6200                           
  6201                           ;Switch_B1.c: 239: }
  6202                           ;Switch_B1.c: 246: return status;
  6203  1EC4  0823               	movf	getSw_KeyStatus@status,w
  6204  1EC5  0008               	return
  6205  1EC6                     __end_of_getSw_KeyStatus:	
  6206                           
  6207                           	psect	text17
  6208  1D4C                     __ptext17:	
  6209 ;; *************** function _SwPointSelect *****************
  6210 ;; Defined at:
  6211 ;;		line 25 in file "../src/Switch_B1.c"
  6212 ;; Parameters:    Size  Location     Type
  6213 ;;  sw              1    wreg     unsigned char 
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;  sw              1    1[BANK0 ] unsigned char 
  6216 ;; Return value:  Size  Location     Type
  6217 ;;		None               void
  6218 ;; Registers used:
  6219 ;;		wreg
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;Total ram usage:        2 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; Hardware stack levels required when called:    5
  6232 ;; This function calls:
  6233 ;;		Nothing
  6234 ;; This function is called by:
  6235 ;;		_setSw_Main
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           
  6240                           ;psect for function _SwPointSelect
  6241  1D4C                     _SwPointSelect:	
  6242                           
  6243                           ;incstack = 0
  6244                           ; Regs used in _SwPointSelect: [wreg]
  6245                           ;SwPointSelect@sw stored from wreg
  6246  1D4C  0020               	movlb	0	; select bank0
  6247  1D4D  00A1               	movwf	SwPointSelect@sw
  6248                           
  6249                           ;Switch_B1.c: 28: if (sw == 1) {
  6250  1D4E  0821               	movf	SwPointSelect@sw,w
  6251  1D4F  3A01               	xorlw	1
  6252  1D50  1D03               	skipz
  6253  1D51  2D57               	goto	l9817
  6254                           
  6255                           ;Switch_B1.c: 29: Sw = &Sw1;
  6256  1D52  30CF               	movlw	_Sw1& (0+255)
  6257  1D53  00A0               	movwf	??_SwPointSelect
  6258  1D54  0820               	movf	??_SwPointSelect,w
  6259  1D55  00F7               	movwf	_Sw
  6260                           
  6261                           ;Switch_B1.c: 30: }
  6262  1D56  0008               	return
  6263  1D57                     l9817:	
  6264                           
  6265                           ;Switch_B1.c: 33: else if (sw == 2) {
  6266  1D57  0821               	movf	SwPointSelect@sw,w
  6267  1D58  3A02               	xorlw	2
  6268  1D59  1D03               	skipz
  6269  1D5A  0008               	return
  6270                           
  6271                           ;Switch_B1.c: 34: Sw = &Sw2;
  6272  1D5B  30D8               	movlw	_Sw2& (0+255)
  6273  1D5C  00A0               	movwf	??_SwPointSelect
  6274  1D5D  0820               	movf	??_SwPointSelect,w
  6275  1D5E  00F7               	movwf	_Sw
  6276  1D5F  0008               	return
  6277  1D60                     __end_of_SwPointSelect:	
  6278                           
  6279                           	psect	text18
  6280  1BC2                     __ptext18:	
  6281 ;; *************** function _Switch_Initialization *****************
  6282 ;; Defined at:
  6283 ;;		line 46 in file "../src/Switch_B1.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;		None
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;		None
  6288 ;; Return value:  Size  Location     Type
  6289 ;;		None               void
  6290 ;; Registers used:
  6291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;Total ram usage:        0 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    8
  6304 ;; This function calls:
  6305 ;;		_TouchPower
  6306 ;;		_setSw_Initialization
  6307 ;; This function is called by:
  6308 ;;		_main
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           
  6313                           ;psect for function _Switch_Initialization
  6314  1BC2                     _Switch_Initialization:	
  6315                           
  6316                           ;Switch_B1.c: 47: TouchPower();
  6317                           
  6318                           ;incstack = 0
  6319                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6320  1BC2  319D  259E  319B   	fcall	_TouchPower
  6321                           
  6322                           ;Switch_B1.c: 49: WPUB1 = 0;
  6323  1BC5  0024               	movlb	4	; select bank4
  6324  1BC6  108D               	bcf	13,1	;volatile
  6325                           
  6326                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6327  1BC7  3001               	movlw	1
  6328  1BC8  319B  2332  319B   	fcall	_setSw_Initialization
  6329                           
  6330                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6331  1BCB  3002               	movlw	2
  6332  1BCC  319B  2332         	fcall	_setSw_Initialization
  6333  1BCE  0008               	return
  6334  1BCF                     __end_of_Switch_Initialization:	
  6335                           
  6336                           	psect	text19
  6337  1B32                     __ptext19:	
  6338 ;; *************** function _setSw_Initialization *****************
  6339 ;; Defined at:
  6340 ;;		line 93 in file "../src/Switch_B1.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;  sw              1    wreg     unsigned char 
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  sw              1    4[BANK0 ] unsigned char 
  6345 ;; Return value:  Size  Location     Type
  6346 ;;		None               void
  6347 ;; Registers used:
  6348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6357 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;Total ram usage:        1 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    7
  6361 ;; This function calls:
  6362 ;;		_setLED
  6363 ;; This function is called by:
  6364 ;;		_Switch_Initialization
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           
  6369                           ;psect for function _setSw_Initialization
  6370  1B32                     _setSw_Initialization:	
  6371                           
  6372                           ;incstack = 0
  6373                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6374                           ;setSw_Initialization@sw stored from wreg
  6375  1B32  0020               	movlb	0	; select bank0
  6376  1B33  00A4               	movwf	setSw_Initialization@sw
  6377                           
  6378                           ;Switch_B1.c: 94: setLED(sw, 1);
  6379  1B34  01A2               	clrf	setLED@command
  6380  1B35  0AA2               	incf	setLED@command,f
  6381  1B36  0824               	movf	setSw_Initialization@sw,w
  6382  1B37  3196  264F         	fcall	_setLED
  6383  1B39  0008               	return
  6384  1B3A                     __end_of_setSw_Initialization:	
  6385                           
  6386                           	psect	text20
  6387  1D9E                     __ptext20:	
  6388 ;; *************** function _TouchPower *****************
  6389 ;; Defined at:
  6390 ;;		line 10 in file "../src/Switch_B1.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;		None
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;		None
  6395 ;; Return value:  Size  Location     Type
  6396 ;;		None               void
  6397 ;; Registers used:
  6398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6399 ;; Tracked objects:
  6400 ;;		On entry : 0/0
  6401 ;;		On exit  : 0/0
  6402 ;;		Unchanged: 0/0
  6403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6408 ;;Total ram usage:        0 bytes
  6409 ;; Hardware stack levels used:    1
  6410 ;; Hardware stack levels required when called:    6
  6411 ;; This function calls:
  6412 ;;		_Timeout_Counter
  6413 ;;		_set_TimeoutCleared
  6414 ;; This function is called by:
  6415 ;;		_Switch_Initialization
  6416 ;;		_Switch_Main
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           
  6421                           ;psect for function _TouchPower
  6422  1D9E                     _TouchPower:	
  6423                           
  6424                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6425                           
  6426                           ;incstack = 0
  6427                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6428  1D9E  0020               	movlb	0	; select bank0
  6429  1D9F  1A8E               	btfsc	14,5	;volatile
  6430  1DA0  0008               	return
  6431                           
  6432                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6433  1DA1  0021               	movlb	1	; select bank1
  6434  1DA2  1C20               	btfss	_myMain^(0+128),0
  6435  1DA3  0008               	return
  6436  1DA4  2DAA               	goto	l10317
  6437  1DA5                     l2643:	
  6438                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6439                           
  6440                           
  6441                           ;Switch_B1.c: 14: RC5 = 1;
  6442  1DA5  0020               	movlb	0	; select bank0
  6443  1DA6  168E               	bsf	14,5	;volatile
  6444                           
  6445                           ;Switch_B1.c: 15: Timeout_Counter();
  6446  1DA7  319D  2574  319D   	fcall	_Timeout_Counter
  6447  1DAA                     l10317:	
  6448  1DAA  0020               	movlb	0	; select bank0
  6449  1DAB  1A8E               	btfsc	14,5	;volatile
  6450  1DAC  2DB0               	goto	l10321
  6451  1DAD  0021               	movlb	1	; select bank1
  6452  1DAE  1D2B               	btfss	(_myMain^(0+128)+11),2
  6453  1DAF  2DA5               	goto	l2643
  6454  1DB0                     l10321:	
  6455                           
  6456                           ;Switch_B1.c: 16: }
  6457                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6458  1DB0  319A  22E4         	fcall	_set_TimeoutCleared
  6459  1DB2  0008               	return
  6460  1DB3                     __end_of_TouchPower:	
  6461                           
  6462                           	psect	text21
  6463  1ACB                     __ptext21:	
  6464 ;; *************** function _RF_Main *****************
  6465 ;; Defined at:
  6466 ;;		line 16 in file "../src/RF_Control_B1.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;		None
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;		None
  6471 ;; Return value:  Size  Location     Type
  6472 ;;		None               void
  6473 ;; Registers used:
  6474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6475 ;; Tracked objects:
  6476 ;;		On entry : 0/0
  6477 ;;		On exit  : 0/0
  6478 ;;		Unchanged: 0/0
  6479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;Total ram usage:        0 bytes
  6485 ;; Hardware stack levels used:    1
  6486 ;; Hardware stack levels required when called:   14
  6487 ;; This function calls:
  6488 ;;		_setRF_Main
  6489 ;; This function is called by:
  6490 ;;		_main
  6491 ;; This function uses a non-reentrant model
  6492 ;;
  6493                           
  6494                           
  6495                           ;psect for function _RF_Main
  6496  1ACB                     _RF_Main:	
  6497                           
  6498                           ;RF_Control_B1.c: 18: setRF_Main();
  6499                           
  6500                           ;incstack = 0
  6501                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6502  1ACB  318E  260C         	fcall	_setRF_Main
  6503  1ACD  0008               	return
  6504  1ACE                     __end_of_RF_Main:	
  6505                           
  6506                           	psect	text22
  6507  0E0C                     __ptext22:	
  6508 ;; *************** function _setRF_Main *****************
  6509 ;; Defined at:
  6510 ;;		line 52 in file "../src/RF_Control_B1.c"
  6511 ;; Parameters:    Size  Location     Type
  6512 ;;		None
  6513 ;; Auto vars:     Size  Location     Type
  6514 ;;  error           1    2[BANK4 ] unsigned char 
  6515 ;;  Receive_OK      1    1[BANK4 ] unsigned char 
  6516 ;;  loop_f          1    0[BANK4 ] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;		None               void
  6519 ;; Registers used:
  6520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Locals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6528 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Totals:         0       0       1       0       0       3       0       0       0       0       0       0       
      +0       0
  6530 ;;Total ram usage:        4 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:   13
  6533 ;; This function calls:
  6534 ;;		_CC2500_RxData
  6535 ;;		_CC2500_TxData
  6536 ;;		_CC2500_WriteCommand
  6537 ;;		_RF_RxDisable
  6538 ;;		_getBuz_GO
  6539 ;;		_getMain_All_Error_Status
  6540 ;;		_getRF_KeyStatus
  6541 ;;		_getRxData
  6542 ;; This function is called by:
  6543 ;;		_RF_Main
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           
  6548                           ;psect for function _setRF_Main
  6549  0E0C                     _setRF_Main:	
  6550                           
  6551                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6552                           
  6553                           ;incstack = 0
  6554                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6555  0E0C  0024               	movlb	4	; select bank4
  6556  0E0D  01E5               	clrf	setRF_Main@loop_f^(0+512)
  6557  0E0E  01E6               	clrf	setRF_Main@Receive_OK^(0+512)
  6558  0E0F  01E7               	clrf	setRF_Main@error^(0+512)
  6559                           
  6560                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6561  0E10  0021               	movlb	1	; select bank1
  6562  0E11  1C3A               	btfss	_RF1^(0+128),0
  6563  0E12  2EA3               	goto	l2249
  6564                           
  6565                           ;RF_Control_B1.c: 56: if (RF1.RxStatus == 1) {
  6566  0E13  1DBA               	btfss	_RF1^(0+128),3
  6567  0E14  2E26               	goto	l10241
  6568                           
  6569                           ;RF_Control_B1.c: 57: RF1.CorrectionCounter++;
  6570  0E15  3001               	movlw	1
  6571  0E16  07C4               	addwf	(_RF1^(0+128)+10),f
  6572  0E17  3000               	movlw	0
  6573  0E18  3DC5               	addwfc	((_RF1+1)^(0+128)+10),f
  6574                           
  6575                           ;RF_Control_B1.c: 58: if (RF1.CorrectionCounter >= 6000) {
  6576  0E19  3017               	movlw	23
  6577  0E1A  0245               	subwf	((_RF1+1)^(0+128)+10),w
  6578  0E1B  3070               	movlw	112
  6579  0E1C  1903               	skipnz
  6580  0E1D  0244               	subwf	(_RF1^(0+128)+10),w
  6581  0E1E  1C03               	skipc
  6582  0E1F  2E29               	goto	l10243
  6583                           
  6584                           ;RF_Control_B1.c: 59: RF1.CorrectionCounter = 0;
  6585  0E20  01C4               	clrf	(_RF1^(0+128)+10)
  6586  0E21  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6587                           
  6588                           ;RF_Control_B1.c: 60: RF_RxDisable();
  6589  0E22  319C  24AF  318E   	fcall	_RF_RxDisable
  6590                           
  6591                           ;RF_Control_B1.c: 61: }
  6592                           ;RF_Control_B1.c: 62: } else {
  6593  0E25  2E29               	goto	l10243
  6594  0E26                     l10241:	
  6595                           
  6596                           ;RF_Control_B1.c: 63: RF1.CorrectionCounter = 0;
  6597  0E26  0021               	movlb	1	; select bank1
  6598  0E27  01C4               	clrf	(_RF1^(0+128)+10)
  6599  0E28  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6600  0E29                     l10243:	
  6601                           
  6602                           ;RF_Control_B1.c: 64: }
  6603                           ;RF_Control_B1.c: 66: if (RF1.Learn == 0) {
  6604  0E29  0021               	movlb	1	; select bank1
  6605  0E2A  1B3A               	btfsc	_RF1^(0+128),6
  6606  0E2B  2E3F               	goto	l2253
  6607                           
  6608                           ;RF_Control_B1.c: 67: if (RF1.Run == 1) {
  6609  0E2C  1CBB               	btfss	(_RF1^(0+128)+1),1
  6610  0E2D  2E44               	goto	l10259
  6611                           
  6612                           ;RF_Control_B1.c: 68: RF1.Count++;
  6613  0E2E  3001               	movlw	1
  6614  0E2F  07BC               	addwf	(_RF1^(0+128)+2),f
  6615  0E30  3000               	movlw	0
  6616  0E31  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6617                           
  6618                           ;RF_Control_B1.c: 69: if (RF1.Count == RF1.RunTime) {
  6619  0E32  3002               	movlw	2
  6620  0E33  3EBA               	addlw	_RF1& (0+255)
  6621  0E34  0086               	movwf	6
  6622  0E35  0187               	clrf	7
  6623  0E36  3F40               	moviw [0]fsr1
  6624  0E37  0641               	xorwf	(_RF1^(0+128)+7),w
  6625  0E38  1D03               	skipz
  6626  0E39  2E3C               	goto	u11665
  6627  0E3A  3F41               	moviw [1]fsr1
  6628  0E3B  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6629  0E3C                     u11665:	
  6630  0E3C  1D03               	skipz
  6631  0E3D  2E44               	goto	l10259
  6632  0E3E  2E41               	goto	l10255
  6633  0E3F                     l2253:	
  6634                           ;RF_Control_B1.c: 72: }
  6635                           ;RF_Control_B1.c: 73: }
  6636                           ;RF_Control_B1.c: 74: } else {
  6637                           
  6638                           ;RF_Control_B1.c: 71: RF1.Run = 0;
  6639                           
  6640                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  6641                           
  6642                           
  6643                           ;RF_Control_B1.c: 75: if (RF1.Run == 1) {
  6644  0E3F  1CBB               	btfss	(_RF1^(0+128)+1),1
  6645  0E40  2E44               	goto	l10259
  6646  0E41                     l10255:	
  6647                           
  6648                           ;RF_Control_B1.c: 76: RF1.Count = 0;
  6649  0E41  01BC               	clrf	(_RF1^(0+128)+2)
  6650  0E42  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6651                           
  6652                           ;RF_Control_B1.c: 77: RF1.Run = 0;
  6653  0E43  10BB               	bcf	(_RF1^(0+128)+1),1
  6654  0E44                     l10259:	
  6655                           
  6656                           ;RF_Control_B1.c: 78: }
  6657                           ;RF_Control_B1.c: 79: }
  6658                           ;RF_Control_B1.c: 81: if (getBuz_GO() == 0) {
  6659  0E44  319C  240D  318E   	fcall	_getBuz_GO
  6660  0E47  0020               	movlb	0	; select bank0
  6661  0E48  0821               	movf	?_getBuz_GO+1,w
  6662  0E49  0420               	iorwf	?_getBuz_GO,w
  6663  0E4A  1D03               	skipz
  6664  0E4B  0008               	return
  6665                           
  6666                           ;RF_Control_B1.c: 82: if (getMain_All_Error_Status(0) == 0) {
  6667  0E4C  3000               	movlw	0
  6668  0E4D  3191  2168  318E   	fcall	_getMain_All_Error_Status
  6669  0E50  3800               	iorlw	0
  6670  0E51  1D03               	skipz
  6671  0E52  2E68               	goto	l2259
  6672                           
  6673                           ;RF_Control_B1.c: 84: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6674  0E53  319C  241E  318E   	fcall	_getRF_KeyStatus
  6675  0E56  3A01               	xorlw	1
  6676  0E57  3000               	movlw	0
  6677  0E58  1903               	skipnz
  6678  0E59  3001               	movlw	1
  6679  0E5A  0021               	movlb	1	; select bank1
  6680  0E5B  00ED               	movwf	??_setRF_Main^(0+128)
  6681  0E5C  0CED               	rrf	??_setRF_Main^(0+128),f
  6682  0E5D  0CED               	rrf	??_setRF_Main^(0+128),f
  6683  0E5E  083A               	movf	_RF1^(0+128),w
  6684  0E5F  066D               	xorwf	??_setRF_Main^(0+128),w
  6685  0E60  397F               	andlw	-129
  6686  0E61  066D               	xorwf	??_setRF_Main^(0+128),w
  6687  0E62  00BA               	movwf	_RF1^(0+128)
  6688                           
  6689                           ;RF_Control_B1.c: 85: if (RF1.Key == 1 && RF1.Learn == 0) {
  6690  0E63  1BBA               	btfsc	_RF1^(0+128),7
  6691  0E64  1B3A               	btfsc	_RF1^(0+128),6
  6692  0E65  2E6A               	goto	l2261
  6693                           
  6694                           ;RF_Control_B1.c: 86: RF1.Run = 1;
  6695  0E66  14BB               	bsf	(_RF1^(0+128)+1),1
  6696                           
  6697                           ;RF_Control_B1.c: 87: }
  6698                           ;RF_Control_B1.c: 92: } else {
  6699  0E67  2E6A               	goto	l2261
  6700  0E68                     l2259:	
  6701                           
  6702                           ;RF_Control_B1.c: 93: RF1.Key = 0;
  6703  0E68  0021               	movlb	1	; select bank1
  6704  0E69  13BA               	bcf	_RF1^(0+128),7
  6705  0E6A                     l2261:	
  6706                           
  6707                           ;RF_Control_B1.c: 94: }
  6708                           ;RF_Control_B1.c: 96: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6709  0E6A  193A               	btfsc	_RF1^(0+128),2
  6710  0E6B  1B3A               	btfsc	_RF1^(0+128),6
  6711  0E6C  2E7B               	goto	l10283
  6712                           
  6713                           ;RF_Control_B1.c: 97: RF1.TransceiveGO = 0;
  6714  0E6D  113A               	bcf	_RF1^(0+128),2
  6715                           
  6716                           ;RF_Control_B1.c: 98: RF1.RxStatus = 0;
  6717  0E6E  11BA               	bcf	_RF1^(0+128),3
  6718                           
  6719                           ;RF_Control_B1.c: 99: RF1.ReceiveGO = 0;
  6720  0E6F  10BA               	bcf	_RF1^(0+128),1
  6721                           
  6722                           ;RF_Control_B1.c: 100: RF1.RunTime = 5;
  6723  0E70  3005               	movlw	5
  6724  0E71  00C1               	movwf	(_RF1^(0+128)+7)
  6725  0E72  3000               	movlw	0
  6726  0E73  00C2               	movwf	(_RF1^(0+128)+8)
  6727                           
  6728                           ;RF_Control_B1.c: 101: RF1.Run = 1;
  6729  0E74  14BB               	bsf	(_RF1^(0+128)+1),1
  6730                           
  6731                           ;RF_Control_B1.c: 102: RF_RxDisable();
  6732  0E75  319C  24AF  318E   	fcall	_RF_RxDisable
  6733                           
  6734                           ;RF_Control_B1.c: 103: CC2500_TxData();
  6735  0E78  3189  21E6  318E   	fcall	_CC2500_TxData
  6736  0E7B                     l10283:	
  6737                           
  6738                           ;RF_Control_B1.c: 104: }
  6739                           ;RF_Control_B1.c: 106: if (RF1.Run == 0 && RF1.TransceiveGO == 0) {
  6740  0E7B  0021               	movlb	1	; select bank1
  6741  0E7C  18BB               	btfsc	(_RF1^(0+128)+1),1
  6742  0E7D  0008               	return
  6743  0E7E  193A               	btfsc	_RF1^(0+128),2
  6744  0E7F  0008               	return
  6745                           
  6746                           ;RF_Control_B1.c: 107: if (RF1.RxStatus == 1) {
  6747  0E80  1DBA               	btfss	_RF1^(0+128),3
  6748  0E81  2E94               	goto	l2264
  6749                           
  6750                           ;RF_Control_B1.c: 108: if (RF1.Key == 0 || RF1.Learn == 1) {
  6751  0E82  1FBA               	btfss	_RF1^(0+128),7
  6752  0E83  2E86               	goto	l10293
  6753  0E84  1F3A               	btfss	_RF1^(0+128),6
  6754  0E85  0008               	return
  6755  0E86                     l10293:	
  6756                           
  6757                           ;RF_Control_B1.c: 110: CC2500_RxData();
  6758  0E86  318B  237B  318E   	fcall	_CC2500_RxData
  6759                           
  6760                           ;RF_Control_B1.c: 112: if (RF1.ReceiveGO == 1) {
  6761  0E89  0021               	movlb	1	; select bank1
  6762  0E8A  1CBA               	btfss	_RF1^(0+128),1
  6763  0E8B  0008               	return
  6764                           
  6765                           ;RF_Control_B1.c: 113: RF1.ReceiveGO = 0;
  6766  0E8C  10BA               	bcf	_RF1^(0+128),1
  6767                           
  6768                           ;RF_Control_B1.c: 114: RF1.Run = 1;
  6769  0E8D  14BB               	bsf	(_RF1^(0+128)+1),1
  6770                           
  6771                           ;RF_Control_B1.c: 115: RF1.Correction = 0;
  6772  0E8E  12BB               	bcf	(_RF1^(0+128)+1),5
  6773                           
  6774                           ;RF_Control_B1.c: 116: RF1.CorrectionCounter = 0;
  6775  0E8F  01C4               	clrf	(_RF1^(0+128)+10)
  6776  0E90  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6777                           
  6778                           ;RF_Control_B1.c: 124: getRxData();
  6779  0E91  318B  23EA         	fcall	_getRxData
  6780                           
  6781                           ;RF_Control_B1.c: 126: }
  6782                           ;RF_Control_B1.c: 127: }
  6783                           ;RF_Control_B1.c: 128: } else {
  6784  0E93  0008               	return
  6785  0E94                     l2264:	
  6786                           
  6787                           ;RF_Control_B1.c: 130: if (RF1.ReceiveGO == 0) {
  6788  0E94  18BA               	btfsc	_RF1^(0+128),1
  6789  0E95  0008               	return
  6790                           
  6791                           ;RF_Control_B1.c: 131: RF1.RxStatus = 1;
  6792  0E96  15BA               	bsf	_RF1^(0+128),3
  6793                           
  6794                           ;RF_Control_B1.c: 133: CC2500_WriteCommand(0x36);
  6795  0E97  3036               	movlw	54
  6796  0E98  319D  25FD  318E   	fcall	_CC2500_WriteCommand
  6797                           
  6798                           ;RF_Control_B1.c: 135: CC2500_WriteCommand(0x3A);
  6799  0E9B  303A               	movlw	58
  6800  0E9C  319D  25FD  318E   	fcall	_CC2500_WriteCommand
  6801                           
  6802                           ;RF_Control_B1.c: 136: CC2500_WriteCommand(0x34);
  6803  0E9F  3034               	movlw	52
  6804  0EA0  319D  25FD         	fcall	_CC2500_WriteCommand
  6805                           
  6806                           ;RF_Control_B1.c: 137: }
  6807                           ;RF_Control_B1.c: 139: }
  6808                           ;RF_Control_B1.c: 140: }
  6809                           ;RF_Control_B1.c: 141: }
  6810                           ;RF_Control_B1.c: 142: } else {
  6811  0EA2  0008               	return
  6812  0EA3                     l2249:	
  6813                           
  6814                           ;RF_Control_B1.c: 143: if (myMain.PowerON == 1) {
  6815  0EA3  1C20               	btfss	_myMain^(0+128),0
  6816  0EA4  0008               	return
  6817                           
  6818                           ;RF_Control_B1.c: 144: RF1.Enable = 1;
  6819  0EA5  143A               	bsf	_RF1^(0+128),0
  6820  0EA6  0008               	return
  6821  0EA7                     __end_of_setRF_Main:	
  6822                           
  6823                           	psect	text23
  6824  0BEA                     __ptext23:	
  6825 ;; *************** function _getRxData *****************
  6826 ;; Defined at:
  6827 ;;		line 238 in file "../src/RF_Control_B1.c"
  6828 ;; Parameters:    Size  Location     Type
  6829 ;;		None
  6830 ;; Auto vars:     Size  Location     Type
  6831 ;;  error           1    4[BANK1 ] unsigned char 
  6832 ;; Return value:  Size  Location     Type
  6833 ;;		None               void
  6834 ;; Registers used:
  6835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6836 ;; Tracked objects:
  6837 ;;		On entry : 0/0
  6838 ;;		On exit  : 0/0
  6839 ;;		Unchanged: 0/0
  6840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6842 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6844 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6845 ;;Total ram usage:        2 bytes
  6846 ;; Hardware stack levels used:    1
  6847 ;; Hardware stack levels required when called:   12
  6848 ;; This function calls:
  6849 ;;		_getMain_All_Error_Status
  6850 ;;		_setControl_Lights_Table
  6851 ;;		_setLog_Code
  6852 ;;		_setTxData
  6853 ;; This function is called by:
  6854 ;;		_setRF_Main
  6855 ;; This function uses a non-reentrant model
  6856 ;;
  6857                           
  6858                           
  6859                           ;psect for function _getRxData
  6860  0BEA                     _getRxData:	
  6861                           
  6862                           ;RF_Control_B1.c: 239: char error = getMain_All_Error_Status(0);
  6863                           
  6864                           ;incstack = 0
  6865                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6866  0BEA  3000               	movlw	0
  6867  0BEB  3191  2168  318B   	fcall	_getMain_All_Error_Status
  6868  0BEE  0020               	movlb	0	; select bank0
  6869  0BEF  00EE               	movwf	??_getRxData
  6870  0BF0  086E               	movf	??_getRxData,w
  6871  0BF1  0021               	movlb	1	; select bank1
  6872  0BF2  00EC               	movwf	getRxData@error^(0+128)
  6873                           
  6874                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6875  0BF3  0023               	movlb	3	; select bank3
  6876  0BF4  0820               	movf	_RF_Data^(0+384),w
  6877  0BF5  3AAA               	xorlw	170
  6878  0BF6  1D03               	skipz
  6879  0BF7  2C0E               	goto	l9771
  6880  0BF8  0821               	movf	(_RF_Data^(0+384)+1),w
  6881  0BF9  3A01               	xorlw	1
  6882  0BFA  1D03               	skipz
  6883  0BFB  2C0E               	goto	l9771
  6884                           
  6885                           ;RF_Control_B1.c: 242: product->Data[2] = 0x55;
  6886  0BFC  3055               	movlw	85
  6887  0BFD  0020               	movlb	0	; select bank0
  6888  0BFE  00EE               	movwf	??_getRxData
  6889  0BFF  0879               	movf	_product,w
  6890  0C00  3E02               	addlw	2
  6891  0C01  0086               	movwf	6
  6892  0C02  3002               	movlw	2	; select bank4/5
  6893  0C03  0087               	movwf	7
  6894  0C04  086E               	movf	??_getRxData,w
  6895  0C05  0081               	movwf	1
  6896                           
  6897                           ;RF_Control_B1.c: 243: setTxData();
  6898  0C06  318D  2571         	fcall	_setTxData
  6899                           
  6900                           ;RF_Control_B1.c: 244: RF1.RunTime = 10;
  6901  0C08  300A               	movlw	10
  6902  0C09  0021               	movlb	1	; select bank1
  6903  0C0A  00C1               	movwf	(_RF1^(0+128)+7)
  6904  0C0B  3000               	movlw	0
  6905  0C0C  00C2               	movwf	(_RF1^(0+128)+8)
  6906                           
  6907                           ;RF_Control_B1.c: 250: } else {
  6908  0C0D  0008               	return
  6909  0C0E                     l9771:	
  6910                           
  6911                           ;RF_Control_B1.c: 252: if (error == 0) {
  6912  0C0E  0021               	movlb	1	; select bank1
  6913  0C0F  08EC               	movf	getRxData@error^(0+128),f
  6914  0C10  1D03               	skipz
  6915  0C11  0008               	return
  6916                           
  6917                           ;RF_Control_B1.c: 253: if (RF1.Learn == 1) {
  6918  0C12  1F3A               	btfss	_RF1^(0+128),6
  6919  0C13  2C1F               	goto	l9781
  6920                           
  6921                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6922  0C14  0023               	movlb	3	; select bank3
  6923  0C15  08A0               	movf	_RF_Data^(0+384),f
  6924  0C16  1D03               	skipz
  6925  0C17  0008               	return
  6926  0C18  0821               	movf	(_RF_Data^(0+384)+1),w
  6927  0C19  3A64               	xorlw	100
  6928  0C1A  1D03               	skipz
  6929  0C1B  0008               	return
  6930                           
  6931                           ;RF_Control_B1.c: 255: setLog_Code();
  6932  0C1C  3191  219B         	fcall	_setLog_Code
  6933                           
  6934                           ;RF_Control_B1.c: 256: }
  6935                           ;RF_Control_B1.c: 257: } else {
  6936  0C1E  0008               	return
  6937  0C1F                     l9781:	
  6938                           
  6939                           ;RF_Control_B1.c: 258: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6940  0C1F  0023               	movlb	3	; select bank3
  6941  0C20  08A0               	movf	_RF_Data^(0+384),f
  6942  0C21  1D03               	skipz
  6943  0C22  2C54               	goto	l9801
  6944  0C23  0821               	movf	(_RF_Data^(0+384)+1),w
  6945  0C24  3A02               	xorlw	2
  6946  0C25  1D03               	skipz
  6947  0C26  2C54               	goto	l9801
  6948                           
  6949                           ;RF_Control_B1.c: 260: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6950  0C27  082C               	movf	(_RF_Data^(0+384)+12),w
  6951  0C28  3AFF               	xorlw	255
  6952  0C29  1D03               	skipz
  6953  0C2A  2C35               	goto	l9793
  6954  0C2B  082D               	movf	(_RF_Data^(0+384)+13),w
  6955  0C2C  3AFF               	xorlw	255
  6956  0C2D  1D03               	skipz
  6957  0C2E  2C35               	goto	l9793
  6958  0C2F  082E               	movf	(_RF_Data^(0+384)+14),w
  6959  0C30  3AFF               	xorlw	255
  6960  0C31  1D03               	skipz
  6961  0C32  2C35               	goto	l9793
  6962                           
  6963                           ;RF_Control_B1.c: 261: __nop();
  6964  0C33  0000               	nop
  6965                           
  6966                           ;RF_Control_B1.c: 262: } else {
  6967  0C34  0008               	return
  6968  0C35                     l9793:	
  6969                           
  6970                           ;RF_Control_B1.c: 263: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6971  0C35  0879               	movf	_product,w
  6972  0C36  3E0C               	addlw	12
  6973  0C37  0086               	movwf	6
  6974  0C38  3002               	movlw	2	; select bank4/5
  6975  0C39  0087               	movwf	7
  6976  0C3A  0023               	movlb	3	; select bank3
  6977  0C3B  082C               	movf	(_RF_Data^(0+384)+12),w
  6978  0C3C  0601               	xorwf	1,w
  6979  0C3D  1D03               	skipz
  6980  0C3E  0008               	return
  6981  0C3F  0879               	movf	_product,w
  6982  0C40  3E0D               	addlw	13
  6983  0C41  0086               	movwf	6
  6984  0C42  3002               	movlw	2	; select bank4/5
  6985  0C43  0087               	movwf	7
  6986  0C44  082D               	movf	(_RF_Data^(0+384)+13),w
  6987  0C45  0601               	xorwf	1,w
  6988  0C46  1D03               	skipz
  6989  0C47  0008               	return
  6990  0C48  0879               	movf	_product,w
  6991  0C49  3E0E               	addlw	14
  6992  0C4A  0086               	movwf	6
  6993  0C4B  3002               	movlw	2	; select bank4/5
  6994  0C4C  0087               	movwf	7
  6995  0C4D  082E               	movf	(_RF_Data^(0+384)+14),w
  6996  0C4E  0601               	xorwf	1,w
  6997  0C4F  1D03               	skipz
  6998  0C50  0008               	return
  6999                           
  7000                           ;RF_Control_B1.c: 264: setControl_Lights_Table();
  7001  0C51  318B  2314         	fcall	_setControl_Lights_Table
  7002                           
  7003                           ;RF_Control_B1.c: 265: }
  7004                           ;RF_Control_B1.c: 266: }
  7005                           ;RF_Control_B1.c: 267: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7006  0C53  0008               	return
  7007  0C54                     l9801:	
  7008  0C54  0023               	movlb	3	; select bank3
  7009  0C55  0820               	movf	_RF_Data^(0+384),w
  7010  0C56  3AFF               	xorlw	255
  7011  0C57  1D03               	skipz
  7012  0C58  2C5F               	goto	l9807
  7013  0C59  0821               	movf	(_RF_Data^(0+384)+1),w
  7014  0C5A  3A02               	xorlw	2
  7015  0C5B  1D03               	skipz
  7016  0C5C  2C5F               	goto	l9807
  7017                           
  7018                           ;RF_Control_B1.c: 268: __nop();
  7019  0C5D  0000               	nop
  7020                           
  7021                           ;RF_Control_B1.c: 269: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7022  0C5E  0008               	return
  7023  0C5F                     l9807:	
  7024  0C5F  0023               	movlb	3	; select bank3
  7025  0C60  08A0               	movf	_RF_Data^(0+384),f
  7026  0C61  1D03               	skipz
  7027  0C62  0008               	return
  7028  0C63  0821               	movf	(_RF_Data^(0+384)+1),w
  7029  0C64  3A65               	xorlw	101
  7030  0C65  1D03               	skipz
  7031  0C66  0008               	return
  7032                           
  7033                           ;RF_Control_B1.c: 270: __nop();
  7034  0C67  0000               	nop
  7035                           
  7036                           ;RF_Control_B1.c: 278: ;
  7037                           
  7038                           ;RF_Control_B1.c: 271: }
  7039                           ;RF_Control_B1.c: 276: }
  7040                           ;RF_Control_B1.c: 277: } else {
  7041  0C68  0008               	return
  7042  0C69                     __end_of_getRxData:	
  7043                           
  7044                           	psect	text24
  7045  119B                     __ptext24:	
  7046 ;; *************** function _setLog_Code *****************
  7047 ;; Defined at:
  7048 ;;		line 284 in file "../src/RF_Control_B1.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;		None
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;		None
  7053 ;; Return value:  Size  Location     Type
  7054 ;;		None               void
  7055 ;; Registers used:
  7056 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7065 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7066 ;;Total ram usage:        1 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:    7
  7069 ;; This function calls:
  7070 ;;		_setBuz
  7071 ;;		_setMemory_LoopSave
  7072 ;;		_setMemory_Modify
  7073 ;;		_setProductData
  7074 ;; This function is called by:
  7075 ;;		_getRxData
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           
  7080                           ;psect for function _setLog_Code
  7081  119B                     _setLog_Code:	
  7082                           
  7083                           ;RF_Control_B1.c: 285: RF1.Learn = 0;
  7084                           
  7085                           ;incstack = 0
  7086                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7087  119B  0021               	movlb	1	; select bank1
  7088  119C  133A               	bcf	_RF1^(0+128),6
  7089                           
  7090                           ;RF_Control_B1.c: 286: setProductData(12, RF_Data[12]);
  7091  119D  0023               	movlb	3	; select bank3
  7092  119E  082C               	movf	(_RF_Data^(0+384)+12),w
  7093  119F  0020               	movlb	0	; select bank0
  7094  11A0  00E6               	movwf	??_setLog_Code
  7095  11A1  0866               	movf	??_setLog_Code,w
  7096  11A2  00E2               	movwf	setProductData@value
  7097  11A3  300C               	movlw	12
  7098  11A4  319B  23CF  3191   	fcall	_setProductData
  7099                           
  7100                           ;RF_Control_B1.c: 287: setProductData(13, RF_Data[13]);
  7101  11A7  0023               	movlb	3	; select bank3
  7102  11A8  082D               	movf	(_RF_Data^(0+384)+13),w
  7103  11A9  0020               	movlb	0	; select bank0
  7104  11AA  00E6               	movwf	??_setLog_Code
  7105  11AB  0866               	movf	??_setLog_Code,w
  7106  11AC  00E2               	movwf	setProductData@value
  7107  11AD  300D               	movlw	13
  7108  11AE  319B  23CF  3191   	fcall	_setProductData
  7109                           
  7110                           ;RF_Control_B1.c: 288: setProductData(14, RF_Data[14]);
  7111  11B1  0023               	movlb	3	; select bank3
  7112  11B2  082E               	movf	(_RF_Data^(0+384)+14),w
  7113  11B3  0020               	movlb	0	; select bank0
  7114  11B4  00E6               	movwf	??_setLog_Code
  7115  11B5  0866               	movf	??_setLog_Code,w
  7116  11B6  00E2               	movwf	setProductData@value
  7117  11B7  300E               	movlw	14
  7118  11B8  319B  23CF  3191   	fcall	_setProductData
  7119                           
  7120                           ;RF_Control_B1.c: 289: setBuz(1, 100);
  7121  11BB  3064               	movlw	100
  7122  11BC  0020               	movlb	0	; select bank0
  7123  11BD  00A9               	movwf	setBuz@time
  7124  11BE  3000               	movlw	0
  7125  11BF  00AA               	movwf	setBuz@time+1
  7126  11C0  3001               	movlw	1
  7127  11C1  3197  274E  3191   	fcall	_setBuz
  7128                           
  7129                           ;RF_Control_B1.c: 290: if (myMain.First == 1) {
  7130  11C4  0021               	movlb	1	; select bank1
  7131  11C5  1EA0               	btfss	_myMain^(0+128),5
  7132  11C6  29CB               	goto	l2313
  7133                           
  7134                           ;RF_Control_B1.c: 291: setMemory_LoopSave(1);
  7135  11C7  3001               	movlw	1
  7136  11C8  319C  24D5  3191   	fcall	_setMemory_LoopSave
  7137  11CB                     l2313:	
  7138                           
  7139                           ;RF_Control_B1.c: 292: }
  7140                           ;RF_Control_B1.c: 293: setMemory_Modify(1);
  7141  11CB  3001               	movlw	1
  7142  11CC  319C  24C2         	fcall	_setMemory_Modify
  7143  11CE  0008               	return
  7144  11CF                     __end_of_setLog_Code:	
  7145                           
  7146                           	psect	text25
  7147  1CD5                     __ptext25:	
  7148 ;; *************** function _setMemory_LoopSave *****************
  7149 ;; Defined at:
  7150 ;;		line 1070 in file "../src/MCU_B1.c"
  7151 ;; Parameters:    Size  Location     Type
  7152 ;;  command         1    wreg     unsigned char 
  7153 ;; Auto vars:     Size  Location     Type
  7154 ;;  command         1    1[BANK0 ] unsigned char 
  7155 ;; Return value:  Size  Location     Type
  7156 ;;		None               void
  7157 ;; Registers used:
  7158 ;;		wreg, status,2, status,0
  7159 ;; Tracked objects:
  7160 ;;		On entry : 0/0
  7161 ;;		On exit  : 0/0
  7162 ;;		Unchanged: 0/0
  7163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7166 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7167 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;Total ram usage:        2 bytes
  7169 ;; Hardware stack levels used:    1
  7170 ;; Hardware stack levels required when called:    5
  7171 ;; This function calls:
  7172 ;;		Nothing
  7173 ;; This function is called by:
  7174 ;;		_setLog_Code
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           
  7179                           ;psect for function _setMemory_LoopSave
  7180  1CD5                     _setMemory_LoopSave:	
  7181                           
  7182                           ;incstack = 0
  7183                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7184                           ;setMemory_LoopSave@command stored from wreg
  7185  1CD5  0020               	movlb	0	; select bank0
  7186  1CD6  00A1               	movwf	setMemory_LoopSave@command
  7187                           
  7188                           ;MCU_B1.c: 1071: Memory.LoopSave = command == 1 ? 1 : 0;
  7189  1CD7  0821               	movf	setMemory_LoopSave@command,w
  7190  1CD8  3A01               	xorlw	1
  7191  1CD9  3000               	movlw	0
  7192  1CDA  1903               	skipnz
  7193  1CDB  3001               	movlw	1
  7194  1CDC  00A0               	movwf	??_setMemory_LoopSave
  7195  1CDD  0DA0               	rlf	??_setMemory_LoopSave,f
  7196  1CDE  0DA0               	rlf	??_setMemory_LoopSave,f
  7197  1CDF  0024               	movlb	4	; select bank4
  7198  1CE0  0844               	movf	(_Memory^(0+512)+36),w
  7199  1CE1  0020               	movlb	0	; select bank0
  7200  1CE2  0620               	xorwf	??_setMemory_LoopSave,w
  7201  1CE3  39FB               	andlw	-5
  7202  1CE4  0620               	xorwf	??_setMemory_LoopSave,w
  7203  1CE5  0024               	movlb	4	; select bank4
  7204  1CE6  00C4               	movwf	(_Memory^(0+512)+36)
  7205  1CE7  0008               	return
  7206  1CE8                     __end_of_setMemory_LoopSave:	
  7207                           
  7208                           	psect	text26
  7209  0B14                     __ptext26:	
  7210 ;; *************** function _setControl_Lights_Table *****************
  7211 ;; Defined at:
  7212 ;;		line 297 in file "../src/RF_Control_B1.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;		None
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;		None
  7217 ;; Return value:  Size  Location     Type
  7218 ;;		None               void
  7219 ;; Registers used:
  7220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7221 ;; Tracked objects:
  7222 ;;		On entry : 0/0
  7223 ;;		On exit  : 0/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;Total ram usage:        0 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:   11
  7233 ;; This function calls:
  7234 ;;		_setBuz
  7235 ;;		_setDimmerLights_ErrorClose
  7236 ;;		_setProductData
  7237 ;;		_setRFSW_AdjControl
  7238 ;;		_setRFSW_Control
  7239 ;;		_setTxData
  7240 ;; This function is called by:
  7241 ;;		_getRxData
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           
  7246                           ;psect for function _setControl_Lights_Table
  7247  0B14                     _setControl_Lights_Table:	
  7248                           
  7249                           ;RF_Control_B1.c: 298: switch (RF_Data[15]) {
  7250                           
  7251                           ;incstack = 0
  7252                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7253  0B14  2B5F               	goto	l9459
  7254  0B15                     l9443:	
  7255                           ;RF_Control_B1.c: 299: case 0x00:
  7256                           
  7257                           
  7258                           ;RF_Control_B1.c: 301: setDimmerLights_ErrorClose(255);
  7259  0B15  30FF               	movlw	255
  7260  0B16  3189  2184  318B   	fcall	_setDimmerLights_ErrorClose
  7261                           
  7262                           ;RF_Control_B1.c: 303: setProductData(9, 0);
  7263  0B19  0020               	movlb	0	; select bank0
  7264  0B1A  01E2               	clrf	setProductData@value
  7265  0B1B  3009               	movlw	9
  7266  0B1C  319B  23CF  318B   	fcall	_setProductData
  7267                           
  7268                           ;RF_Control_B1.c: 304: setProductData(11, 0);
  7269  0B1F  0020               	movlb	0	; select bank0
  7270  0B20  01E2               	clrf	setProductData@value
  7271  0B21  300B               	movlw	11
  7272  0B22  319B  23CF  318B   	fcall	_setProductData
  7273                           
  7274                           ;RF_Control_B1.c: 305: setProductData(15, 0);
  7275  0B25  0020               	movlb	0	; select bank0
  7276  0B26  01E2               	clrf	setProductData@value
  7277  0B27  300F               	movlw	15
  7278  0B28  319B  23CF  318B   	fcall	_setProductData
  7279                           
  7280                           ;RF_Control_B1.c: 306: setProductData(17, 0);
  7281  0B2B  0020               	movlb	0	; select bank0
  7282  0B2C  01E2               	clrf	setProductData@value
  7283  0B2D  3011               	movlw	17
  7284  0B2E  319B  23CF  318B   	fcall	_setProductData
  7285                           
  7286                           ;RF_Control_B1.c: 307: setBuz(1, 100);
  7287  0B31  3064               	movlw	100
  7288  0B32  0020               	movlb	0	; select bank0
  7289  0B33  00A9               	movwf	setBuz@time
  7290  0B34  3000               	movlw	0
  7291  0B35  00AA               	movwf	setBuz@time+1
  7292  0B36  3001               	movlw	1
  7293  0B37  3197  274E         	fcall	_setBuz
  7294                           
  7295                           ;RF_Control_B1.c: 309: break;
  7296  0B39  0008               	return
  7297  0B3A                     l9447:	
  7298                           ;RF_Control_B1.c: 310: case 0x20:
  7299                           
  7300                           
  7301                           ;RF_Control_B1.c: 311: setProductData(9, 0);
  7302  0B3A  0020               	movlb	0	; select bank0
  7303  0B3B  01E2               	clrf	setProductData@value
  7304  0B3C  3009               	movlw	9
  7305  0B3D  319B  23CF  318B   	fcall	_setProductData
  7306                           
  7307                           ;RF_Control_B1.c: 312: setProductData(11, 0);
  7308  0B40  0020               	movlb	0	; select bank0
  7309  0B41  01E2               	clrf	setProductData@value
  7310  0B42  300B               	movlw	11
  7311  0B43  319B  23CF  318B   	fcall	_setProductData
  7312                           
  7313                           ;RF_Control_B1.c: 313: setProductData(17, 0);
  7314  0B46  0020               	movlb	0	; select bank0
  7315  0B47  01E2               	clrf	setProductData@value
  7316  0B48  3011               	movlw	17
  7317  0B49  319B  23CF  318B   	fcall	_setProductData
  7318                           
  7319                           ;RF_Control_B1.c: 314: setTxData();
  7320  0B4C  318D  2571         	fcall	_setTxData
  7321                           
  7322                           ;RF_Control_B1.c: 315: break;
  7323  0B4E  0008               	return
  7324  0B4F                     l9449:	
  7325                           ;RF_Control_B1.c: 316: case 0x01:
  7326                           
  7327                           
  7328                           ;RF_Control_B1.c: 318: setRFSW_Control(1);
  7329  0B4F  3001               	movlw	1
  7330  0B50  3195  250B         	fcall	_setRFSW_Control
  7331                           
  7332                           ;RF_Control_B1.c: 320: break;
  7333  0B52  0008               	return
  7334  0B53                     l9451:	
  7335                           ;RF_Control_B1.c: 321: case 0x02:
  7336                           
  7337                           
  7338                           ;RF_Control_B1.c: 323: setRFSW_Control(2);
  7339  0B53  3002               	movlw	2
  7340  0B54  3195  250B         	fcall	_setRFSW_Control
  7341                           
  7342                           ;RF_Control_B1.c: 330: break;
  7343                           
  7344                           ;RF_Control_B1.c: 326: case 0x03:
  7345                           
  7346                           ;RF_Control_B1.c: 325: break;
  7347  0B56  0008               	return
  7348  0B57                     l9453:	
  7349                           ;RF_Control_B1.c: 331: case 0x11:
  7350                           
  7351                           
  7352                           ;RF_Control_B1.c: 334: setRFSW_AdjControl(1);
  7353  0B57  3001               	movlw	1
  7354  0B58  3193  2323         	fcall	_setRFSW_AdjControl
  7355                           
  7356                           ;RF_Control_B1.c: 337: break;
  7357  0B5A  0008               	return
  7358  0B5B                     l9455:	
  7359                           ;RF_Control_B1.c: 338: case 0x21:
  7360                           
  7361                           
  7362                           ;RF_Control_B1.c: 341: setRFSW_AdjControl(2);
  7363  0B5B  3002               	movlw	2
  7364  0B5C  3193  2323         	fcall	_setRFSW_AdjControl
  7365                           
  7366                           ;RF_Control_B1.c: 352: }
  7367                           
  7368                           ;RF_Control_B1.c: 351: break;
  7369                           
  7370                           ;RF_Control_B1.c: 345: case 0x31:
  7371                           
  7372                           ;RF_Control_B1.c: 344: break;
  7373  0B5E  0008               	return
  7374  0B5F                     l9459:	
  7375  0B5F  0023               	movlb	3	; select bank3
  7376  0B60  082F               	movf	(_RF_Data^(0+384)+15),w
  7377                           
  7378                           ; Switch size 1, requested type "space"
  7379                           ; Number of cases is 8, Range of values is 0 to 49
  7380                           ; switch strategies available:
  7381                           ; Name         Instructions Cycles
  7382                           ; simple_byte           25    13 (average)
  7383                           ; direct_byte          106     6 (fixed)
  7384                           ; jumptable            260     6 (fixed)
  7385                           ;	Chosen strategy is simple_byte
  7386  0B61  3A00               	xorlw	0	; case 0
  7387  0B62  1903               	skipnz
  7388  0B63  2B15               	goto	l9443
  7389  0B64  3A01               	xorlw	1	; case 1
  7390  0B65  1903               	skipnz
  7391  0B66  2B4F               	goto	l9449
  7392  0B67  3A03               	xorlw	3	; case 2
  7393  0B68  1903               	skipnz
  7394  0B69  2B53               	goto	l9451
  7395  0B6A  3A01               	xorlw	1	; case 3
  7396  0B6B  1903               	skipnz
  7397  0B6C  2B7A               	goto	l2327
  7398  0B6D  3A12               	xorlw	18	; case 17
  7399  0B6E  1903               	skipnz
  7400  0B6F  2B57               	goto	l9453
  7401  0B70  3A31               	xorlw	49	; case 32
  7402  0B71  1903               	skipnz
  7403  0B72  2B3A               	goto	l9447
  7404  0B73  3A01               	xorlw	1	; case 33
  7405  0B74  1903               	skipnz
  7406  0B75  2B5B               	goto	l9455
  7407  0B76  3A10               	xorlw	16	; case 49
  7408  0B77  1903               	skipnz
  7409  0B78  2B7A               	goto	l2327
  7410  0B79  2B7A               	goto	l2327
  7411  0B7A                     l2327:	
  7412  0B7A  0008               	return
  7413  0B7B                     __end_of_setControl_Lights_Table:	
  7414                           
  7415                           	psect	text27
  7416  150B                     __ptext27:	
  7417 ;; *************** function _setRFSW_Control *****************
  7418 ;; Defined at:
  7419 ;;		line 379 in file "../src/RF_Control_B1.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;  sw              1    wreg     unsigned char 
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;  sw              1   77[BANK0 ] unsigned char 
  7424 ;;  status          1   76[BANK0 ] unsigned char 
  7425 ;; Return value:  Size  Location     Type
  7426 ;;		None               void
  7427 ;; Registers used:
  7428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7435 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7436 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;Total ram usage:        3 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; Hardware stack levels required when called:    9
  7441 ;; This function calls:
  7442 ;;		_getDelayOff_GO
  7443 ;;		_getDimmerLights_Status
  7444 ;;		_setBuz
  7445 ;;		_setDelayOff_GO
  7446 ;;		_setDimmerLights_SwOff
  7447 ;;		_setDimmerLights_SwOn
  7448 ;;		_setRF_DimmerLights
  7449 ;;		_setTxData
  7450 ;; This function is called by:
  7451 ;;		_setControl_Lights_Table
  7452 ;; This function uses a non-reentrant model
  7453 ;;
  7454                           
  7455                           
  7456                           ;psect for function _setRFSW_Control
  7457  150B                     _setRFSW_Control:	
  7458                           
  7459                           ;incstack = 0
  7460                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7461                           ;setRFSW_Control@sw stored from wreg
  7462  150B  0020               	movlb	0	; select bank0
  7463  150C  00ED               	movwf	setRFSW_Control@sw
  7464                           
  7465                           ;RF_Control_B1.c: 380: char status = 0;
  7466  150D  01EC               	clrf	setRFSW_Control@status
  7467                           
  7468                           ;RF_Control_B1.c: 383: if (RF_Data[16] == 0x80) {
  7469  150E  0023               	movlb	3	; select bank3
  7470  150F  0830               	movf	(_RF_Data^(0+384)+16),w
  7471  1510  3A80               	xorlw	128
  7472  1511  1D03               	skipz
  7473  1512  2D3E               	goto	l9237
  7474                           
  7475                           ;RF_Control_B1.c: 384: setDelayOff_GO(sw, 1, RF_Data[17]);
  7476  1513  0020               	movlb	0	; select bank0
  7477  1514  01E6               	clrf	setDelayOff_GO@command
  7478  1515  0AE6               	incf	setDelayOff_GO@command,f
  7479  1516  0023               	movlb	3	; select bank3
  7480  1517  0831               	movf	(_RF_Data^(0+384)+17),w
  7481  1518  0020               	movlb	0	; select bank0
  7482  1519  00EB               	movwf	??_setRFSW_Control
  7483  151A  086B               	movf	??_setRFSW_Control,w
  7484  151B  00E7               	movwf	setDelayOff_GO@value
  7485  151C  086D               	movf	setRFSW_Control@sw,w
  7486  151D  3195  25FC  3195   	fcall	_setDelayOff_GO
  7487                           
  7488                           ;RF_Control_B1.c: 385: if (getDimmerLights_Status(sw) == 1) {
  7489  1520  0020               	movlb	0	; select bank0
  7490  1521  086D               	movf	setRFSW_Control@sw,w
  7491  1522  319B  23FC  3195   	fcall	_getDimmerLights_Status
  7492  1525  3A01               	xorlw	1
  7493  1526  1D03               	skipz
  7494  1527  2D4D               	goto	l9241
  7495                           
  7496                           ;RF_Control_B1.c: 386: setBuz(1, 100);
  7497  1528  3064               	movlw	100
  7498  1529  0020               	movlb	0	; select bank0
  7499  152A  00A9               	movwf	setBuz@time
  7500  152B  3000               	movlw	0
  7501  152C  00AA               	movwf	setBuz@time+1
  7502  152D  3001               	movlw	1
  7503  152E  3197  274E  3195   	fcall	_setBuz
  7504                           
  7505                           ;RF_Control_B1.c: 387: status = 1;
  7506  1531  0020               	movlb	0	; select bank0
  7507  1532  01EC               	clrf	setRFSW_Control@status
  7508  1533  0AEC               	incf	setRFSW_Control@status,f
  7509                           
  7510                           ;RF_Control_B1.c: 388: setRF_DimmerLights(sw, 1);
  7511  1534  01E6               	clrf	setRF_DimmerLights@on
  7512  1535  0AE6               	incf	setRF_DimmerLights@on,f
  7513  1536  086D               	movf	setRFSW_Control@sw,w
  7514  1537  3197  27A7  3195   	fcall	_setRF_DimmerLights
  7515                           
  7516                           ;RF_Control_B1.c: 389: setTxData();
  7517  153A  318D  2571  3195   	fcall	_setTxData
  7518                           
  7519                           ;RF_Control_B1.c: 391: }
  7520                           ;RF_Control_B1.c: 392: } else {
  7521  153D  2D4D               	goto	l9241
  7522  153E                     l9237:	
  7523                           
  7524                           ;RF_Control_B1.c: 394: if (getDelayOff_GO(sw) == 1) {
  7525  153E  0020               	movlb	0	; select bank0
  7526  153F  086D               	movf	setRFSW_Control@sw,w
  7527  1540  319B  23EC  3195   	fcall	_getDelayOff_GO
  7528  1543  3A01               	xorlw	1
  7529  1544  1D03               	skipz
  7530  1545  2D4D               	goto	l9241
  7531                           
  7532                           ;RF_Control_B1.c: 395: setDelayOff_GO(sw, 0, 0);
  7533  1546  0020               	movlb	0	; select bank0
  7534  1547  01E6               	clrf	setDelayOff_GO@command
  7535  1548  01E7               	clrf	setDelayOff_GO@value
  7536  1549  086D               	movf	setRFSW_Control@sw,w
  7537  154A  3195  25FC  3195   	fcall	_setDelayOff_GO
  7538  154D                     l9241:	
  7539                           
  7540                           ;RF_Control_B1.c: 396: }
  7541                           ;RF_Control_B1.c: 398: }
  7542                           ;RF_Control_B1.c: 399: if (status == 0) {
  7543  154D  0020               	movlb	0	; select bank0
  7544  154E  08EC               	movf	setRFSW_Control@status,f
  7545  154F  1D03               	skipz
  7546  1550  0008               	return
  7547                           
  7548                           ;RF_Control_B1.c: 401: setDimmerLights_SwOn(sw);
  7549  1551  086D               	movf	setRFSW_Control@sw,w
  7550  1552  3188  206A  3195   	fcall	_setDimmerLights_SwOn
  7551                           
  7552                           ;RF_Control_B1.c: 402: setDimmerLights_SwOff(sw);
  7553  1555  0020               	movlb	0	; select bank0
  7554  1556  086D               	movf	setRFSW_Control@sw,w
  7555  1557  3194  24BC         	fcall	_setDimmerLights_SwOff
  7556  1559  0008               	return
  7557  155A                     __end_of_setRFSW_Control:	
  7558                           
  7559                           	psect	text28
  7560  086A                     __ptext28:	
  7561 ;; *************** function _setDimmerLights_SwOn *****************
  7562 ;; Defined at:
  7563 ;;		line 405 in file "../src/Dimmer_B1.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;  sw              1    wreg     unsigned char 
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;  sw              1   17[BANK0 ] unsigned char 
  7568 ;;  idle            1   16[BANK0 ] unsigned char 
  7569 ;; Return value:  Size  Location     Type
  7570 ;;		None               void
  7571 ;; Registers used:
  7572 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7573 ;; Tracked objects:
  7574 ;;		On entry : 0/0
  7575 ;;		On exit  : 0/0
  7576 ;;		Unchanged: 0/0
  7577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7579 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7580 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7581 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7582 ;;Total ram usage:        5 bytes
  7583 ;; Hardware stack levels used:    1
  7584 ;; Hardware stack levels required when called:    7
  7585 ;; This function calls:
  7586 ;;		_DimmerLightsPointSelect
  7587 ;;		_setBuz
  7588 ;; This function is called by:
  7589 ;;		_setRFSW_Control
  7590 ;;		_setSw_Main
  7591 ;; This function uses a non-reentrant model
  7592 ;;
  7593                           
  7594                           
  7595                           ;psect for function _setDimmerLights_SwOn
  7596  086A                     _setDimmerLights_SwOn:	
  7597                           
  7598                           ;incstack = 0
  7599                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7600                           ;setDimmerLights_SwOn@sw stored from wreg
  7601  086A  0020               	movlb	0	; select bank0
  7602  086B  00B1               	movwf	setDimmerLights_SwOn@sw
  7603                           
  7604                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7605  086C  0831               	movf	setDimmerLights_SwOn@sw,w
  7606  086D  319C  2489  3188   	fcall	_DimmerLightsPointSelect
  7607                           
  7608                           ;Dimmer_B1.c: 407: char idle = 0;
  7609  0870  0020               	movlb	0	; select bank0
  7610  0871  01B0               	clrf	setDimmerLights_SwOn@idle
  7611                           
  7612                           ;Dimmer_B1.c: 410: if (idle == 0) {
  7613  0872  08B0               	movf	setDimmerLights_SwOn@idle,f
  7614  0873  1D03               	skipz
  7615  0874  2895               	goto	l9025
  7616                           
  7617                           ;Dimmer_B1.c: 411: if (sw == 1) {
  7618  0875  0831               	movf	setDimmerLights_SwOn@sw,w
  7619  0876  3A01               	xorlw	1
  7620  0877  1D03               	skipz
  7621  0878  2884               	goto	l9015
  7622                           
  7623                           ;Dimmer_B1.c: 412: idle = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1 
      +                          : 0;
  7624  0879  01AE               	clrf	_setDimmerLights_SwOn$2310
  7625  087A  0AAE               	incf	_setDimmerLights_SwOn$2310,f
  7626  087B  0023               	movlb	3	; select bank3
  7627  087C  1DC8               	btfss	(_DimmerLights2^(0+384)+10),3	;volatile
  7628  087D  1B3F               	btfsc	(_DimmerLights2^(0+384)+1),6	;volatile
  7629  087E  2881               	goto	l9013
  7630  087F  0020               	movlb	0	; select bank0
  7631  0880  01AE               	clrf	_setDimmerLights_SwOn$2310
  7632  0881                     l9013:	
  7633  0881  0020               	movlb	0	; select bank0
  7634  0882  082E               	movf	_setDimmerLights_SwOn$2310,w
  7635  0883  2892               	goto	L3
  7636  0884                     l9015:	
  7637                           ;Dimmer_B1.c: 413: } else if (sw == 2) {
  7638                           
  7639  0884  0831               	movf	setDimmerLights_SwOn@sw,w
  7640  0885  3A02               	xorlw	2
  7641  0886  1D03               	skipz
  7642  0887  2895               	goto	l9025
  7643                           
  7644                           ;Dimmer_B1.c: 414: idle = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1 
      +                          : 0;
  7645  0888  01AF               	clrf	_setDimmerLights_SwOn$2311
  7646  0889  0AAF               	incf	_setDimmerLights_SwOn$2311,f
  7647  088A  0022               	movlb	2	; select bank2
  7648  088B  1DDF               	btfss	(_DimmerLights1^(0+256)+10),3	;volatile
  7649  088C  1B56               	btfsc	(_DimmerLights1^(0+256)+1),6	;volatile
  7650  088D  2890               	goto	l9023
  7651  088E  0020               	movlb	0	; select bank0
  7652  088F  01AF               	clrf	_setDimmerLights_SwOn$2311
  7653  0890                     l9023:	
  7654  0890  0020               	movlb	0	; select bank0
  7655  0891  082F               	movf	_setDimmerLights_SwOn$2311,w
  7656  0892                     L3:	
  7657  0892  00AD               	movwf	??_setDimmerLights_SwOn
  7658  0893  082D               	movf	??_setDimmerLights_SwOn,w
  7659  0894  00B0               	movwf	setDimmerLights_SwOn@idle
  7660  0895                     l9025:	
  7661                           
  7662                           ;Dimmer_B1.c: 415: }
  7663                           ;Dimmer_B1.c: 416: }
  7664                           ;Dimmer_B1.c: 436: if (idle == 0) {
  7665  0895  08B0               	movf	setDimmerLights_SwOn@idle,f
  7666  0896  1D03               	skipz
  7667  0897  0008               	return
  7668                           
  7669                           ;Dimmer_B1.c: 437: DimmerLights->SwFlag = 1;
  7670  0898  086F               	movf	_DimmerLights,w
  7671  0899  3E0B               	addlw	11
  7672  089A  0086               	movwf	6
  7673  089B  3001               	movlw	1	; select bank2/3
  7674  089C  0087               	movwf	7
  7675  089D  1481               	bsf	1,1
  7676                           
  7677                           ;Dimmer_B1.c: 438: if (DimmerLights->Status == 0) {
  7678  089E  086F               	movf	_DimmerLights,w
  7679  089F  3E02               	addlw	2
  7680  08A0  0086               	movwf	6
  7681  08A1  3001               	movlw	1	; select bank2/3
  7682  08A2  0087               	movwf	7
  7683  08A3  1881               	btfsc	1,1
  7684  08A4  28B8               	goto	l9031
  7685                           
  7686                           ;Dimmer_B1.c: 439: DimmerLights->Status = 1;
  7687  08A5  086F               	movf	_DimmerLights,w
  7688  08A6  3E02               	addlw	2
  7689  08A7  0086               	movwf	6
  7690  08A8  3001               	movlw	1	; select bank2/3
  7691  08A9  0087               	movwf	7
  7692  08AA  1481               	bsf	1,1
  7693                           
  7694                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
  7695  08AB  086F               	movf	_DimmerLights,w
  7696  08AC  3E0A               	addlw	10
  7697  08AD  0086               	movwf	6
  7698  08AE  3001               	movlw	1	; select bank2/3
  7699  08AF  0087               	movwf	7
  7700  08B0  1481               	bsf	1,1
  7701                           
  7702                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 1;
  7703  08B1  086F               	movf	_DimmerLights,w
  7704  08B2  3E0A               	addlw	10
  7705  08B3  0086               	movwf	6
  7706  08B4  3001               	movlw	1	; select bank2/3
  7707  08B5  0087               	movwf	7
  7708  08B6  1401               	bsf	1,0
  7709                           
  7710                           ;Dimmer_B1.c: 442: } else {
  7711  08B7  28BE               	goto	l9033
  7712  08B8                     l9031:	
  7713                           
  7714                           ;Dimmer_B1.c: 443: DimmerLights->Status = 0;
  7715  08B8  086F               	movf	_DimmerLights,w
  7716  08B9  3E02               	addlw	2
  7717  08BA  0086               	movwf	6
  7718  08BB  3001               	movlw	1	; select bank2/3
  7719  08BC  0087               	movwf	7
  7720  08BD  1081               	bcf	1,1
  7721  08BE                     l9033:	
  7722                           
  7723                           ;Dimmer_B1.c: 444: }
  7724                           ;Dimmer_B1.c: 445: setBuz(1, 100);
  7725  08BE  3064               	movlw	100
  7726  08BF  00A9               	movwf	setBuz@time
  7727  08C0  3000               	movlw	0
  7728  08C1  00AA               	movwf	setBuz@time+1
  7729  08C2  3001               	movlw	1
  7730  08C3  3197  274E         	fcall	_setBuz
  7731  08C5  0008               	return
  7732  08C6                     __end_of_setDimmerLights_SwOn:	
  7733                           
  7734                           	psect	text29
  7735  1323                     __ptext29:	
  7736 ;; *************** function _setRFSW_AdjControl *****************
  7737 ;; Defined at:
  7738 ;;		line 408 in file "../src/RF_Control_B1.c"
  7739 ;; Parameters:    Size  Location     Type
  7740 ;;  sw              1    wreg     unsigned char 
  7741 ;; Auto vars:     Size  Location     Type
  7742 ;;  sw              1   75[BANK0 ] unsigned char 
  7743 ;;  status          1   74[BANK0 ] unsigned char 
  7744 ;; Return value:  Size  Location     Type
  7745 ;;		None               void
  7746 ;; Registers used:
  7747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7754 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7755 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7756 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7757 ;;Total ram usage:        4 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; Hardware stack levels required when called:   10
  7760 ;; This function calls:
  7761 ;;		_getDimmerLights_Status
  7762 ;;		_setMemory_Modify
  7763 ;;		_setProductData
  7764 ;;		_setRF_DimmerValue
  7765 ;;		_setTxData
  7766 ;; This function is called by:
  7767 ;;		_setControl_Lights_Table
  7768 ;; This function uses a non-reentrant model
  7769 ;;
  7770                           
  7771                           
  7772                           ;psect for function _setRFSW_AdjControl
  7773  1323                     _setRFSW_AdjControl:	
  7774                           
  7775                           ;incstack = 0
  7776                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7777                           ;setRFSW_AdjControl@sw stored from wreg
  7778  1323  0020               	movlb	0	; select bank0
  7779  1324  00EB               	movwf	setRFSW_AdjControl@sw
  7780                           
  7781                           ;RF_Control_B1.c: 409: char status = 0;
  7782  1325  01EA               	clrf	setRFSW_AdjControl@status
  7783                           
  7784                           ;RF_Control_B1.c: 411: status = getDimmerLights_Status(sw);
  7785  1326  086B               	movf	setRFSW_AdjControl@sw,w
  7786  1327  319B  23FC  3193   	fcall	_getDimmerLights_Status
  7787  132A  0020               	movlb	0	; select bank0
  7788  132B  00E8               	movwf	??_setRFSW_AdjControl
  7789  132C  0868               	movf	??_setRFSW_AdjControl,w
  7790  132D  00EA               	movwf	setRFSW_AdjControl@status
  7791                           
  7792                           ;RF_Control_B1.c: 414: if (status == 1) {
  7793  132E  086A               	movf	setRFSW_AdjControl@status,w
  7794  132F  3A01               	xorlw	1
  7795  1330  1D03               	skipz
  7796  1331  2B3C               	goto	l9255
  7797                           
  7798                           ;RF_Control_B1.c: 415: setMemory_Modify(1);
  7799  1332  3001               	movlw	1
  7800  1333  319C  24C2  3193   	fcall	_setMemory_Modify
  7801                           
  7802                           ;RF_Control_B1.c: 416: setRF_DimmerValue(sw);
  7803  1336  0020               	movlb	0	; select bank0
  7804  1337  086B               	movf	setRFSW_AdjControl@sw,w
  7805  1338  3191  2139  3193   	fcall	_setRF_DimmerValue
  7806                           
  7807                           ;RF_Control_B1.c: 417: } else {
  7808  133B  2B4D               	goto	l2339
  7809  133C                     l9255:	
  7810                           
  7811                           ;RF_Control_B1.c: 418: setProductData(9, product->Data[20 + sw]);
  7812  133C  0020               	movlb	0	; select bank0
  7813  133D  086B               	movf	setRFSW_AdjControl@sw,w
  7814  133E  3E14               	addlw	20
  7815  133F  0779               	addwf	_product,w
  7816  1340  00E8               	movwf	??_setRFSW_AdjControl
  7817  1341  0868               	movf	??_setRFSW_AdjControl,w
  7818  1342  0086               	movwf	6
  7819  1343  3002               	movlw	2	; select bank4/5
  7820  1344  0087               	movwf	7
  7821  1345  0801               	movf	1,w
  7822  1346  00E9               	movwf	??_setRFSW_AdjControl+1
  7823  1347  0869               	movf	??_setRFSW_AdjControl+1,w
  7824  1348  00E2               	movwf	setProductData@value
  7825  1349  3009               	movlw	9
  7826  134A  319B  23CF  3193   	fcall	_setProductData
  7827  134D                     l2339:	
  7828                           
  7829                           ;RF_Control_B1.c: 419: }
  7830                           ;RF_Control_B1.c: 420: setProductData(17, product->Data[26 + sw]);
  7831  134D  0020               	movlb	0	; select bank0
  7832  134E  086B               	movf	setRFSW_AdjControl@sw,w
  7833  134F  3E1A               	addlw	26
  7834  1350  0779               	addwf	_product,w
  7835  1351  00E8               	movwf	??_setRFSW_AdjControl
  7836  1352  0868               	movf	??_setRFSW_AdjControl,w
  7837  1353  0086               	movwf	6
  7838  1354  3002               	movlw	2	; select bank4/5
  7839  1355  0087               	movwf	7
  7840  1356  0801               	movf	1,w
  7841  1357  00E9               	movwf	??_setRFSW_AdjControl+1
  7842  1358  0869               	movf	??_setRFSW_AdjControl+1,w
  7843  1359  00E2               	movwf	setProductData@value
  7844  135A  3011               	movlw	17
  7845  135B  319B  23CF  3193   	fcall	_setProductData
  7846                           
  7847                           ;RF_Control_B1.c: 421: setTxData();
  7848  135E  318D  2571         	fcall	_setTxData
  7849  1360  0008               	return
  7850  1361                     __end_of_setRFSW_AdjControl:	
  7851                           
  7852                           	psect	text30
  7853  1139                     __ptext30:	
  7854 ;; *************** function _setRF_DimmerValue *****************
  7855 ;; Defined at:
  7856 ;;		line 426 in file "../src/RF_Control_B1.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;  lights          1    wreg     unsigned char 
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;  lights          1   71[BANK0 ] unsigned char 
  7861 ;; Return value:  Size  Location     Type
  7862 ;;		None               void
  7863 ;; Registers used:
  7864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7871 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7872 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7873 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7874 ;;Total ram usage:        2 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; Hardware stack levels required when called:    9
  7877 ;; This function calls:
  7878 ;;		_setDimmerLights_AdjRF
  7879 ;;		_setProductData
  7880 ;; This function is called by:
  7881 ;;		_setRFSW_AdjControl
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           
  7886                           ;psect for function _setRF_DimmerValue
  7887  1139                     _setRF_DimmerValue:	
  7888                           
  7889                           ;incstack = 0
  7890                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7891                           ;setRF_DimmerValue@lights stored from wreg
  7892  1139  0020               	movlb	0	; select bank0
  7893  113A  00E7               	movwf	setRF_DimmerValue@lights
  7894                           
  7895                           ;RF_Control_B1.c: 427: if (RF_Data[9] > 0x64) {
  7896  113B  3065               	movlw	101
  7897  113C  0023               	movlb	3	; select bank3
  7898  113D  0229               	subwf	(_RF_Data^(0+384)+9),w
  7899  113E  1C03               	skipc
  7900  113F  2946               	goto	l9127
  7901                           
  7902                           ;RF_Control_B1.c: 428: RF_Data[9] = 0x64;
  7903  1140  3064               	movlw	100
  7904  1141  0020               	movlb	0	; select bank0
  7905  1142  00E6               	movwf	??_setRF_DimmerValue
  7906  1143  0866               	movf	??_setRF_DimmerValue,w
  7907  1144  0023               	movlb	3	; select bank3
  7908  1145  00A9               	movwf	(_RF_Data^(0+384)+9)
  7909  1146                     l9127:	
  7910                           
  7911                           ;RF_Control_B1.c: 429: }
  7912                           ;RF_Control_B1.c: 430: setProductData(9, RF_Data[9]);
  7913  1146  0829               	movf	(_RF_Data^(0+384)+9),w
  7914  1147  0020               	movlb	0	; select bank0
  7915  1148  00E6               	movwf	??_setRF_DimmerValue
  7916  1149  0866               	movf	??_setRF_DimmerValue,w
  7917  114A  00E2               	movwf	setProductData@value
  7918  114B  3009               	movlw	9
  7919  114C  319B  23CF  3191   	fcall	_setProductData
  7920                           
  7921                           ;RF_Control_B1.c: 431: setProductData(11, lights);
  7922  114F  0020               	movlb	0	; select bank0
  7923  1150  0867               	movf	setRF_DimmerValue@lights,w
  7924  1151  00E6               	movwf	??_setRF_DimmerValue
  7925  1152  0866               	movf	??_setRF_DimmerValue,w
  7926  1153  00E2               	movwf	setProductData@value
  7927  1154  300B               	movlw	11
  7928  1155  319B  23CF  3191   	fcall	_setProductData
  7929                           
  7930                           ;RF_Control_B1.c: 432: setProductData((20 + lights), RF_Data[9]);
  7931  1158  0023               	movlb	3	; select bank3
  7932  1159  0829               	movf	(_RF_Data^(0+384)+9),w
  7933  115A  0020               	movlb	0	; select bank0
  7934  115B  00E6               	movwf	??_setRF_DimmerValue
  7935  115C  0866               	movf	??_setRF_DimmerValue,w
  7936  115D  00E2               	movwf	setProductData@value
  7937  115E  0867               	movf	setRF_DimmerValue@lights,w
  7938  115F  3E14               	addlw	20
  7939  1160  319B  23CF  3191   	fcall	_setProductData
  7940                           
  7941                           ;RF_Control_B1.c: 433: setDimmerLights_AdjRF(lights);
  7942  1163  0020               	movlb	0	; select bank0
  7943  1164  0867               	movf	setRF_DimmerValue@lights,w
  7944  1165  319F  2768         	fcall	_setDimmerLights_AdjRF
  7945  1167  0008               	return
  7946  1168                     __end_of_setRF_DimmerValue:	
  7947                           
  7948                           	psect	text31
  7949  1F68                     __ptext31:	
  7950 ;; *************** function _setDimmerLights_AdjRF *****************
  7951 ;; Defined at:
  7952 ;;		line 903 in file "../src/Dimmer_B1.c"
  7953 ;; Parameters:    Size  Location     Type
  7954 ;;  lights          1    wreg     unsigned char 
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;  lights          1   67[BANK0 ] unsigned char 
  7957 ;; Return value:  Size  Location     Type
  7958 ;;		None               void
  7959 ;; Registers used:
  7960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7961 ;; Tracked objects:
  7962 ;;		On entry : 0/0
  7963 ;;		On exit  : 0/0
  7964 ;;		Unchanged: 0/0
  7965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7969 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;Total ram usage:        2 bytes
  7971 ;; Hardware stack levels used:    1
  7972 ;; Hardware stack levels required when called:    8
  7973 ;; This function calls:
  7974 ;;		_DimmerLightsPointSelect
  7975 ;;		_getPercentValue
  7976 ;; This function is called by:
  7977 ;;		_setRF_DimmerValue
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           
  7982                           ;psect for function _setDimmerLights_AdjRF
  7983  1F68                     _setDimmerLights_AdjRF:	
  7984                           
  7985                           ;incstack = 0
  7986                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7987                           ;setDimmerLights_AdjRF@lights stored from wreg
  7988  1F68  0020               	movlb	0	; select bank0
  7989  1F69  00E3               	movwf	setDimmerLights_AdjRF@lights
  7990                           
  7991                           ;Dimmer_B1.c: 905: DimmerLightsPointSelect(lights);
  7992  1F6A  0863               	movf	setDimmerLights_AdjRF@lights,w
  7993  1F6B  319C  2489  319F   	fcall	_DimmerLightsPointSelect
  7994                           
  7995                           ;Dimmer_B1.c: 906: DimmerLights->AdjRF = 1;
  7996  1F6E  0020               	movlb	0	; select bank0
  7997  1F6F  086F               	movf	_DimmerLights,w
  7998  1F70  3E02               	addlw	2
  7999  1F71  0086               	movwf	6
  8000  1F72  3001               	movlw	1	; select bank2/3
  8001  1F73  0087               	movwf	7
  8002  1F74  1401               	bsf	1,0
  8003                           
  8004                           ;Dimmer_B1.c: 907: DimmerLights->Signal = 1;
  8005  1F75  0A6F               	incf	_DimmerLights,w
  8006  1F76  0086               	movwf	6
  8007  1F77  3001               	movlw	1	; select bank2/3
  8008  1F78  0087               	movwf	7
  8009  1F79  1681               	bsf	1,5
  8010                           
  8011                           ;Dimmer_B1.c: 908: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8012  1F7A  0879               	movf	_product,w
  8013  1F7B  3E09               	addlw	9
  8014  1F7C  0086               	movwf	6
  8015  1F7D  3002               	movlw	2	; select bank4/5
  8016  1F7E  0087               	movwf	7
  8017  1F7F  0801               	movf	1,w
  8018  1F80  318A  22AF         	fcall	_getPercentValue
  8019  1F82  0020               	movlb	0	; select bank0
  8020  1F83  00E2               	movwf	??_setDimmerLights_AdjRF
  8021  1F84  086F               	movf	_DimmerLights,w
  8022  1F85  3E06               	addlw	6
  8023  1F86  0086               	movwf	6
  8024  1F87  3001               	movlw	1	; select bank2/3
  8025  1F88  0087               	movwf	7
  8026  1F89  0862               	movf	??_setDimmerLights_AdjRF,w
  8027  1F8A  0081               	movwf	1
  8028  1F8B  0008               	return
  8029  1F8C                     __end_of_setDimmerLights_AdjRF:	
  8030                           
  8031                           	psect	text32
  8032  0AAF                     __ptext32:	
  8033 ;; *************** function _getPercentValue *****************
  8034 ;; Defined at:
  8035 ;;		line 1018 in file "../src/Dimmer_B1.c"
  8036 ;; Parameters:    Size  Location     Type
  8037 ;;  value           1    wreg     unsigned char 
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;  value           1   62[BANK0 ] unsigned char 
  8040 ;;  i               3   63[BANK0 ] float 
  8041 ;; Return value:  Size  Location     Type
  8042 ;;                  1    wreg      unsigned char 
  8043 ;; Registers used:
  8044 ;;		wreg, status,2, status,0, pclath, cstack
  8045 ;; Tracked objects:
  8046 ;;		On entry : 0/0
  8047 ;;		On exit  : 0/0
  8048 ;;		Unchanged: 0/0
  8049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8052 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8053 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8054 ;;Total ram usage:        6 bytes
  8055 ;; Hardware stack levels used:    1
  8056 ;; Hardware stack levels required when called:    7
  8057 ;; This function calls:
  8058 ;;		___awtoft
  8059 ;;		___ftadd
  8060 ;;		___ftdiv
  8061 ;;		___ftmul
  8062 ;;		___ftneg
  8063 ;;		___fttol
  8064 ;; This function is called by:
  8065 ;;		_setDimmerLights_AdjRF
  8066 ;; This function uses a non-reentrant model
  8067 ;;
  8068                           
  8069                           
  8070                           ;psect for function _getPercentValue
  8071  0AAF                     _getPercentValue:	
  8072                           
  8073                           ;incstack = 0
  8074                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8075                           ;getPercentValue@value stored from wreg
  8076  0AAF  0020               	movlb	0	; select bank0
  8077  0AB0  00DE               	movwf	getPercentValue@value
  8078                           
  8079                           ;Dimmer_B1.c: 1026: float i = ((char)(75*0.8)) - ((char)(15*0.8));
  8080  0AB1  3000               	movlw	0
  8081  0AB2  00DF               	movwf	getPercentValue@i
  8082  0AB3  3040               	movlw	64
  8083  0AB4  00E0               	movwf	getPercentValue@i+1
  8084  0AB5  3042               	movlw	66
  8085  0AB6  00E1               	movwf	getPercentValue@i+2
  8086                           
  8087                           ;Dimmer_B1.c: 1027: i /= 100;
  8088  0AB7  3000               	movlw	0
  8089  0AB8  00AE               	movwf	___ftdiv@f2
  8090  0AB9  30C8               	movlw	200
  8091  0ABA  00AF               	movwf	___ftdiv@f2+1
  8092  0ABB  3042               	movlw	66
  8093  0ABC  00B0               	movwf	___ftdiv@f2+2
  8094  0ABD  085F               	movf	getPercentValue@i,w
  8095  0ABE  00B1               	movwf	___ftdiv@f1
  8096  0ABF  0860               	movf	getPercentValue@i+1,w
  8097  0AC0  00B2               	movwf	___ftdiv@f1+1
  8098  0AC1  0861               	movf	getPercentValue@i+2,w
  8099  0AC2  00B3               	movwf	___ftdiv@f1+2
  8100  0AC3  318E  26A7  318A   	fcall	___ftdiv
  8101  0AC6  0020               	movlb	0	; select bank0
  8102  0AC7  082E               	movf	?___ftdiv,w
  8103  0AC8  00DF               	movwf	getPercentValue@i
  8104  0AC9  082F               	movf	?___ftdiv+1,w
  8105  0ACA  00E0               	movwf	getPercentValue@i+1
  8106  0ACB  0830               	movf	?___ftdiv+2,w
  8107  0ACC  00E1               	movwf	getPercentValue@i+2
  8108                           
  8109                           ;Dimmer_B1.c: 1029: return (char) (((char)(75*0.8)) - ((100 - value) * i));
  8110  0ACD  085E               	movf	getPercentValue@value,w
  8111  0ACE  00DC               	movwf	??_getPercentValue
  8112  0ACF  01DD               	clrf	??_getPercentValue+1
  8113  0AD0  09DC               	comf	??_getPercentValue,f
  8114  0AD1  09DD               	comf	??_getPercentValue+1,f
  8115  0AD2  0ADC               	incf	??_getPercentValue,f
  8116  0AD3  1903               	skipnz
  8117  0AD4  0ADD               	incf	??_getPercentValue+1,f
  8118  0AD5  085C               	movf	??_getPercentValue,w
  8119  0AD6  3E64               	addlw	100
  8120  0AD7  00A8               	movwf	___awtoft@c
  8121  0AD8  3000               	movlw	0
  8122  0AD9  3D5D               	addwfc	??_getPercentValue+1,w
  8123  0ADA  00A9               	movwf	___awtoft@c+1
  8124  0ADB  319F  2746  318A   	fcall	___awtoft
  8125  0ADE  0020               	movlb	0	; select bank0
  8126  0ADF  0828               	movf	?___awtoft,w
  8127  0AE0  00B1               	movwf	___ftmul@f2
  8128  0AE1  0829               	movf	?___awtoft+1,w
  8129  0AE2  00B2               	movwf	___ftmul@f2+1
  8130  0AE3  082A               	movf	?___awtoft+2,w
  8131  0AE4  00B3               	movwf	___ftmul@f2+2
  8132  0AE5  085F               	movf	getPercentValue@i,w
  8133  0AE6  00AE               	movwf	___ftmul@f1
  8134  0AE7  0860               	movf	getPercentValue@i+1,w
  8135  0AE8  00AF               	movwf	___ftmul@f1+1
  8136  0AE9  0861               	movf	getPercentValue@i+2,w
  8137  0AEA  00B0               	movwf	___ftmul@f1+2
  8138  0AEB  3187  271B  318A   	fcall	___ftmul
  8139  0AEE  0020               	movlb	0	; select bank0
  8140  0AEF  082E               	movf	?___ftmul,w
  8141  0AF0  00BE               	movwf	___ftneg@f1
  8142  0AF1  082F               	movf	?___ftmul+1,w
  8143  0AF2  00BF               	movwf	___ftneg@f1+1
  8144  0AF3  0830               	movf	?___ftmul+2,w
  8145  0AF4  00C0               	movwf	___ftneg@f1+2
  8146  0AF5  319B  233A  318A   	fcall	___ftneg
  8147  0AF8  0020               	movlb	0	; select bank0
  8148  0AF9  083E               	movf	?___ftneg,w
  8149  0AFA  00C4               	movwf	___ftadd@f2
  8150  0AFB  083F               	movf	?___ftneg+1,w
  8151  0AFC  00C5               	movwf	___ftadd@f2+1
  8152  0AFD  0840               	movf	?___ftneg+2,w
  8153  0AFE  00C6               	movwf	___ftadd@f2+2
  8154  0AFF  3000               	movlw	0
  8155  0B00  00C1               	movwf	___ftadd@f1
  8156  0B01  3070               	movlw	112
  8157  0B02  00C2               	movwf	___ftadd@f1+1
  8158  0B03  3042               	movlw	66
  8159  0B04  00C3               	movwf	___ftadd@f1+2
  8160  0B05  3184  2469  318A   	fcall	___ftadd
  8161  0B08  0020               	movlb	0	; select bank0
  8162  0B09  0841               	movf	?___ftadd,w
  8163  0B0A  00CE               	movwf	___fttol@f1
  8164  0B0B  0842               	movf	?___ftadd+1,w
  8165  0B0C  00CF               	movwf	___fttol@f1+1
  8166  0B0D  0843               	movf	?___ftadd+2,w
  8167  0B0E  00D0               	movwf	___fttol@f1+2
  8168  0B0F  318C  24EA         	fcall	___fttol
  8169  0B11  0020               	movlb	0	; select bank0
  8170  0B12  084E               	movf	?___fttol,w
  8171  0B13  0008               	return
  8172  0B14                     __end_of_getPercentValue:	
  8173                           
  8174                           	psect	text33
  8175  071B                     __ptext33:	
  8176 ;; *************** function ___ftmul *****************
  8177 ;; Defined at:
  8178 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8179 ;; Parameters:    Size  Location     Type
  8180 ;;  f1              3   14[BANK0 ] float 
  8181 ;;  f2              3   17[BANK0 ] float 
  8182 ;; Auto vars:     Size  Location     Type
  8183 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8184 ;;  sign            1   29[BANK0 ] unsigned char 
  8185 ;;  cntr            1   28[BANK0 ] unsigned char 
  8186 ;;  exp             1   24[BANK0 ] unsigned char 
  8187 ;; Return value:  Size  Location     Type
  8188 ;;                  3   14[BANK0 ] float 
  8189 ;; Registers used:
  8190 ;;		wreg, status,2, status,0, pclath, cstack
  8191 ;; Tracked objects:
  8192 ;;		On entry : 0/0
  8193 ;;		On exit  : 0/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8196 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;Total ram usage:       16 bytes
  8201 ;; Hardware stack levels used:    1
  8202 ;; Hardware stack levels required when called:    6
  8203 ;; This function calls:
  8204 ;;		___ftpack
  8205 ;; This function is called by:
  8206 ;;		_getPercentValue
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210                           
  8211                           ;psect for function ___ftmul
  8212  071B                     ___ftmul:	
  8213                           
  8214                           ;incstack = 0
  8215                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8216  071B  0020               	movlb	0	; select bank0
  8217  071C  082E               	movf	___ftmul@f1,w
  8218  071D  00B4               	movwf	??___ftmul
  8219  071E  082F               	movf	___ftmul@f1+1,w
  8220  071F  00B5               	movwf	??___ftmul+1
  8221  0720  0830               	movf	___ftmul@f1+2,w
  8222  0721  00B6               	movwf	??___ftmul+2
  8223  0722  1003               	clrc
  8224  0723  0D35               	rlf	??___ftmul+1,w
  8225  0724  0D36               	rlf	??___ftmul+2,w
  8226  0725  00B7               	movwf	??___ftmul+3
  8227  0726  0837               	movf	??___ftmul+3,w
  8228  0727  00B8               	movwf	___ftmul@exp
  8229  0728  08B8               	movf	___ftmul@exp,f
  8230  0729  1D03               	skipz
  8231  072A  2F32               	goto	l8751
  8232  072B  3000               	movlw	0
  8233  072C  00AE               	movwf	?___ftmul
  8234  072D  3000               	movlw	0
  8235  072E  00AF               	movwf	?___ftmul+1
  8236  072F  3000               	movlw	0
  8237  0730  00B0               	movwf	?___ftmul+2
  8238  0731  0008               	return
  8239  0732                     l8751:	
  8240  0732  0831               	movf	___ftmul@f2,w
  8241  0733  00B4               	movwf	??___ftmul
  8242  0734  0832               	movf	___ftmul@f2+1,w
  8243  0735  00B5               	movwf	??___ftmul+1
  8244  0736  0833               	movf	___ftmul@f2+2,w
  8245  0737  00B6               	movwf	??___ftmul+2
  8246  0738  1003               	clrc
  8247  0739  0D35               	rlf	??___ftmul+1,w
  8248  073A  0D36               	rlf	??___ftmul+2,w
  8249  073B  00B7               	movwf	??___ftmul+3
  8250  073C  0837               	movf	??___ftmul+3,w
  8251  073D  00BD               	movwf	___ftmul@sign
  8252  073E  08BD               	movf	___ftmul@sign,f
  8253  073F  1D03               	skipz
  8254  0740  2F48               	goto	l8757
  8255  0741  3000               	movlw	0
  8256  0742  00AE               	movwf	?___ftmul
  8257  0743  3000               	movlw	0
  8258  0744  00AF               	movwf	?___ftmul+1
  8259  0745  3000               	movlw	0
  8260  0746  00B0               	movwf	?___ftmul+2
  8261  0747  0008               	return
  8262  0748                     l8757:	
  8263  0748  083D               	movf	___ftmul@sign,w
  8264  0749  3E7B               	addlw	123
  8265  074A  00B4               	movwf	??___ftmul
  8266  074B  0834               	movf	??___ftmul,w
  8267  074C  07B8               	addwf	___ftmul@exp,f
  8268  074D  082E               	movf	___ftmul@f1,w
  8269  074E  00B4               	movwf	??___ftmul
  8270  074F  082F               	movf	___ftmul@f1+1,w
  8271  0750  00B5               	movwf	??___ftmul+1
  8272  0751  0830               	movf	___ftmul@f1+2,w
  8273  0752  00B6               	movwf	??___ftmul+2
  8274  0753  3010               	movlw	16
  8275  0754                     u9385:	
  8276  0754  36B6               	lsrf	??___ftmul+2,f
  8277  0755  0CB5               	rrf	??___ftmul+1,f
  8278  0756  0CB4               	rrf	??___ftmul,f
  8279  0757  0B89               	decfsz	9,f
  8280  0758  2F54               	goto	u9385
  8281  0759  0834               	movf	??___ftmul,w
  8282  075A  00B7               	movwf	??___ftmul+3
  8283  075B  0837               	movf	??___ftmul+3,w
  8284  075C  00BD               	movwf	___ftmul@sign
  8285  075D  0831               	movf	___ftmul@f2,w
  8286  075E  00B4               	movwf	??___ftmul
  8287  075F  0832               	movf	___ftmul@f2+1,w
  8288  0760  00B5               	movwf	??___ftmul+1
  8289  0761  0833               	movf	___ftmul@f2+2,w
  8290  0762  00B6               	movwf	??___ftmul+2
  8291  0763  3010               	movlw	16
  8292  0764                     u9395:	
  8293  0764  36B6               	lsrf	??___ftmul+2,f
  8294  0765  0CB5               	rrf	??___ftmul+1,f
  8295  0766  0CB4               	rrf	??___ftmul,f
  8296  0767  0B89               	decfsz	9,f
  8297  0768  2F64               	goto	u9395
  8298  0769  0834               	movf	??___ftmul,w
  8299  076A  00B7               	movwf	??___ftmul+3
  8300  076B  0837               	movf	??___ftmul+3,w
  8301  076C  06BD               	xorwf	___ftmul@sign,f
  8302  076D  3080               	movlw	128
  8303  076E  00B4               	movwf	??___ftmul
  8304  076F  0834               	movf	??___ftmul,w
  8305  0770  05BD               	andwf	___ftmul@sign,f
  8306  0771  17AF               	bsf	___ftmul@f1+1,7
  8307  0772  17B2               	bsf	___ftmul@f2+1,7
  8308  0773  30FF               	movlw	255
  8309  0774  05B1               	andwf	___ftmul@f2,f
  8310  0775  30FF               	movlw	255
  8311  0776  05B2               	andwf	___ftmul@f2+1,f
  8312  0777  3000               	movlw	0
  8313  0778  05B3               	andwf	___ftmul@f2+2,f
  8314  0779  3000               	movlw	0
  8315  077A  00B9               	movwf	___ftmul@f3_as_product
  8316  077B  3000               	movlw	0
  8317  077C  00BA               	movwf	___ftmul@f3_as_product+1
  8318  077D  3000               	movlw	0
  8319  077E  00BB               	movwf	___ftmul@f3_as_product+2
  8320  077F  3007               	movlw	7
  8321  0780  00B4               	movwf	??___ftmul
  8322  0781  0834               	movf	??___ftmul,w
  8323  0782  00BC               	movwf	___ftmul@cntr
  8324  0783                     l8769:	
  8325  0783  1C2E               	btfss	___ftmul@f1,0
  8326  0784  2F8B               	goto	l8773
  8327  0785  0831               	movf	___ftmul@f2,w
  8328  0786  07B9               	addwf	___ftmul@f3_as_product,f
  8329  0787  0832               	movf	___ftmul@f2+1,w
  8330  0788  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8331  0789  0833               	movf	___ftmul@f2+2,w
  8332  078A  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8333  078B                     l8773:	
  8334  078B  3001               	movlw	1
  8335  078C                     u9415:	
  8336  078C  36B0               	lsrf	___ftmul@f1+2,f
  8337  078D  0CAF               	rrf	___ftmul@f1+1,f
  8338  078E  0CAE               	rrf	___ftmul@f1,f
  8339  078F  0B89               	decfsz	9,f
  8340  0790  2F8C               	goto	u9415
  8341  0791  3001               	movlw	1
  8342  0792                     u9425:	
  8343  0792  35B1               	lslf	___ftmul@f2,f
  8344  0793  0DB2               	rlf	___ftmul@f2+1,f
  8345  0794  0DB3               	rlf	___ftmul@f2+2,f
  8346  0795  0B89               	decfsz	9,f
  8347  0796  2F92               	goto	u9425
  8348  0797  3001               	movlw	1
  8349  0798  02BC               	subwf	___ftmul@cntr,f
  8350  0799  1D03               	btfss	3,2
  8351  079A  2F83               	goto	l8769
  8352  079B  3009               	movlw	9
  8353  079C  00B4               	movwf	??___ftmul
  8354  079D  0834               	movf	??___ftmul,w
  8355  079E  00BC               	movwf	___ftmul@cntr
  8356  079F                     l8781:	
  8357  079F  1C2E               	btfss	___ftmul@f1,0
  8358  07A0  2FA7               	goto	l8785
  8359  07A1  0831               	movf	___ftmul@f2,w
  8360  07A2  07B9               	addwf	___ftmul@f3_as_product,f
  8361  07A3  0832               	movf	___ftmul@f2+1,w
  8362  07A4  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8363  07A5  0833               	movf	___ftmul@f2+2,w
  8364  07A6  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8365  07A7                     l8785:	
  8366  07A7  3001               	movlw	1
  8367  07A8                     u9455:	
  8368  07A8  36B0               	lsrf	___ftmul@f1+2,f
  8369  07A9  0CAF               	rrf	___ftmul@f1+1,f
  8370  07AA  0CAE               	rrf	___ftmul@f1,f
  8371  07AB  0B89               	decfsz	9,f
  8372  07AC  2FA8               	goto	u9455
  8373  07AD  3001               	movlw	1
  8374  07AE                     u9465:	
  8375  07AE  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8376  07AF  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8377  07B0  0CB9               	rrf	___ftmul@f3_as_product,f
  8378  07B1  0B89               	decfsz	9,f
  8379  07B2  2FAE               	goto	u9465
  8380  07B3  3001               	movlw	1
  8381  07B4  02BC               	subwf	___ftmul@cntr,f
  8382  07B5  1D03               	btfss	3,2
  8383  07B6  2F9F               	goto	l8781
  8384  07B7  0839               	movf	___ftmul@f3_as_product,w
  8385  07B8  00A0               	movwf	___ftpack@arg
  8386  07B9  083A               	movf	___ftmul@f3_as_product+1,w
  8387  07BA  00A1               	movwf	___ftpack@arg+1
  8388  07BB  083B               	movf	___ftmul@f3_as_product+2,w
  8389  07BC  00A2               	movwf	___ftpack@arg+2
  8390  07BD  0838               	movf	___ftmul@exp,w
  8391  07BE  00B4               	movwf	??___ftmul
  8392  07BF  0834               	movf	??___ftmul,w
  8393  07C0  00A3               	movwf	___ftpack@exp
  8394  07C1  083D               	movf	___ftmul@sign,w
  8395  07C2  00B5               	movwf	??___ftmul+1
  8396  07C3  0835               	movf	??___ftmul+1,w
  8397  07C4  00A4               	movwf	___ftpack@sign
  8398  07C5  3189  2123         	fcall	___ftpack
  8399  07C7  0020               	movlb	0	; select bank0
  8400  07C8  0820               	movf	?___ftpack,w
  8401  07C9  00AE               	movwf	?___ftmul
  8402  07CA  0821               	movf	?___ftpack+1,w
  8403  07CB  00AF               	movwf	?___ftmul+1
  8404  07CC  0822               	movf	?___ftpack+2,w
  8405  07CD  00B0               	movwf	?___ftmul+2
  8406  07CE  0008               	return
  8407  07CF                     __end_of___ftmul:	
  8408                           
  8409                           	psect	text34
  8410  1CC2                     __ptext34:	
  8411 ;; *************** function _setMemory_Modify *****************
  8412 ;; Defined at:
  8413 ;;		line 1064 in file "../src/MCU_B1.c"
  8414 ;; Parameters:    Size  Location     Type
  8415 ;;  command         1    wreg     unsigned char 
  8416 ;; Auto vars:     Size  Location     Type
  8417 ;;  command         1    1[BANK0 ] unsigned char 
  8418 ;; Return value:  Size  Location     Type
  8419 ;;		None               void
  8420 ;; Registers used:
  8421 ;;		wreg, status,2, status,0
  8422 ;; Tracked objects:
  8423 ;;		On entry : 0/0
  8424 ;;		On exit  : 0/0
  8425 ;;		Unchanged: 0/0
  8426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8428 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8430 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8431 ;;Total ram usage:        2 bytes
  8432 ;; Hardware stack levels used:    1
  8433 ;; Hardware stack levels required when called:    5
  8434 ;; This function calls:
  8435 ;;		Nothing
  8436 ;; This function is called by:
  8437 ;;		_setLog_Code
  8438 ;;		_setRFSW_AdjControl
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           
  8443                           ;psect for function _setMemory_Modify
  8444  1CC2                     _setMemory_Modify:	
  8445                           
  8446                           ;incstack = 0
  8447                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8448                           ;setMemory_Modify@command stored from wreg
  8449  1CC2  0020               	movlb	0	; select bank0
  8450  1CC3  00A1               	movwf	setMemory_Modify@command
  8451                           
  8452                           ;MCU_B1.c: 1065: Memory.Modify = command == 1 ? 1 : 0;
  8453  1CC4  0821               	movf	setMemory_Modify@command,w
  8454  1CC5  3A01               	xorlw	1
  8455  1CC6  3000               	movlw	0
  8456  1CC7  1903               	skipnz
  8457  1CC8  3001               	movlw	1
  8458  1CC9  00A0               	movwf	??_setMemory_Modify
  8459  1CCA  0024               	movlb	4	; select bank4
  8460  1CCB  0844               	movf	(_Memory^(0+512)+36),w
  8461  1CCC  0020               	movlb	0	; select bank0
  8462  1CCD  0620               	xorwf	??_setMemory_Modify,w
  8463  1CCE  39FE               	andlw	-2
  8464  1CCF  0620               	xorwf	??_setMemory_Modify,w
  8465  1CD0  0024               	movlb	4	; select bank4
  8466  1CD1  00C4               	movwf	(_Memory^(0+512)+36)
  8467                           
  8468                           ;MCU_B1.c: 1066: Memory.Time = 0;
  8469  1CD2  01C2               	clrf	(_Memory^(0+512)+34)
  8470  1CD3  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8471  1CD4  0008               	return
  8472  1CD5                     __end_of_setMemory_Modify:	
  8473                           
  8474                           	psect	text35
  8475  1C1E                     __ptext35:	
  8476 ;; *************** function _getRF_KeyStatus *****************
  8477 ;; Defined at:
  8478 ;;		line 150 in file "../src/RF_Control_B1.c"
  8479 ;; Parameters:    Size  Location     Type
  8480 ;;		None
  8481 ;; Auto vars:     Size  Location     Type
  8482 ;;  key             1    1[BANK0 ] unsigned char 
  8483 ;; Return value:  Size  Location     Type
  8484 ;;                  1    wreg      unsigned char 
  8485 ;; Registers used:
  8486 ;;		wreg, status,2
  8487 ;; Tracked objects:
  8488 ;;		On entry : 0/0
  8489 ;;		On exit  : 0/0
  8490 ;;		Unchanged: 0/0
  8491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8493 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8494 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8495 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8496 ;;Total ram usage:        3 bytes
  8497 ;; Hardware stack levels used:    1
  8498 ;; Hardware stack levels required when called:    5
  8499 ;; This function calls:
  8500 ;;		Nothing
  8501 ;; This function is called by:
  8502 ;;		_setRF_Main
  8503 ;; This function uses a non-reentrant model
  8504 ;;
  8505                           
  8506                           
  8507                           ;psect for function _getRF_KeyStatus
  8508  1C1E                     _getRF_KeyStatus:	
  8509                           
  8510                           ;RF_Control_B1.c: 151: char key = 0;
  8511                           
  8512                           ;incstack = 0
  8513                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8514  1C1E  0020               	movlb	0	; select bank0
  8515  1C1F  01A1               	clrf	getRF_KeyStatus@key
  8516                           
  8517                           ;RF_Control_B1.c: 157: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8518  1C20  01A2               	clrf	_getRF_KeyStatus$5260
  8519  1C21  0AA2               	incf	_getRF_KeyStatus$5260,f
  8520  1C22  1F0C               	btfss	12,6	;volatile
  8521  1C23  1A0C               	btfsc	12,4	;volatile
  8522  1C24  2C29               	goto	l9753
  8523  1C25  1C0C               	btfss	12,0	;volatile
  8524  1C26  188D               	btfsc	13,1	;volatile
  8525  1C27  2C29               	goto	l9753
  8526  1C28  01A2               	clrf	_getRF_KeyStatus$5260
  8527  1C29                     l9753:	
  8528  1C29  0822               	movf	_getRF_KeyStatus$5260,w
  8529  1C2A  00A0               	movwf	??_getRF_KeyStatus
  8530  1C2B  0820               	movf	??_getRF_KeyStatus,w
  8531  1C2C  00A1               	movwf	getRF_KeyStatus@key
  8532                           
  8533                           ;RF_Control_B1.c: 163: return key;
  8534  1C2D  0821               	movf	getRF_KeyStatus@key,w
  8535  1C2E  0008               	return
  8536  1C2F                     __end_of_getRF_KeyStatus:	
  8537                           
  8538                           	psect	text36
  8539  1C0D                     __ptext36:	
  8540 ;; *************** function _getBuz_GO *****************
  8541 ;; Defined at:
  8542 ;;		line 82 in file "../src/Buzzer_B1.c"
  8543 ;; Parameters:    Size  Location     Type
  8544 ;;		None
  8545 ;; Auto vars:     Size  Location     Type
  8546 ;;  i               2    4[BANK0 ] int 
  8547 ;; Return value:  Size  Location     Type
  8548 ;;                  2    0[BANK0 ] int 
  8549 ;; Registers used:
  8550 ;;		wreg, status,2, status,0
  8551 ;; Tracked objects:
  8552 ;;		On entry : 0/0
  8553 ;;		On exit  : 0/0
  8554 ;;		Unchanged: 0/0
  8555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8556 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8559 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8560 ;;Total ram usage:        6 bytes
  8561 ;; Hardware stack levels used:    1
  8562 ;; Hardware stack levels required when called:    5
  8563 ;; This function calls:
  8564 ;;		Nothing
  8565 ;; This function is called by:
  8566 ;;		_setRF_Main
  8567 ;; This function uses a non-reentrant model
  8568 ;;
  8569                           
  8570                           
  8571                           ;psect for function _getBuz_GO
  8572  1C0D                     _getBuz_GO:	
  8573                           
  8574                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8575                           
  8576                           ;incstack = 0
  8577                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8578  1C0D  0021               	movlb	1	; select bank1
  8579  1C0E  0C2E               	rrf	_Buz1^(0+128),w
  8580  1C0F  3901               	andlw	1
  8581  1C10  0020               	movlb	0	; select bank0
  8582  1C11  00A2               	movwf	??_getBuz_GO
  8583  1C12  01A3               	clrf	??_getBuz_GO+1
  8584  1C13  0822               	movf	??_getBuz_GO,w
  8585  1C14  00A4               	movwf	getBuz_GO@i
  8586  1C15  0823               	movf	??_getBuz_GO+1,w
  8587  1C16  00A5               	movwf	getBuz_GO@i+1
  8588                           
  8589                           ;Buzzer_B1.c: 84: return i;
  8590  1C17  0825               	movf	getBuz_GO@i+1,w
  8591  1C18  01A1               	clrf	?_getBuz_GO+1
  8592  1C19  07A1               	addwf	?_getBuz_GO+1,f
  8593  1C1A  0824               	movf	getBuz_GO@i,w
  8594  1C1B  01A0               	clrf	?_getBuz_GO
  8595  1C1C  07A0               	addwf	?_getBuz_GO,f
  8596  1C1D  0008               	return
  8597  1C1E                     __end_of_getBuz_GO:	
  8598                           
  8599                           	psect	text37
  8600  1CAF                     __ptext37:	
  8601 ;; *************** function _RF_RxDisable *****************
  8602 ;; Defined at:
  8603 ;;		line 225 in file "../src/RF_Control_B1.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;		None
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;		None
  8608 ;; Return value:  Size  Location     Type
  8609 ;;		None               void
  8610 ;; Registers used:
  8611 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8612 ;; Tracked objects:
  8613 ;;		On entry : 0/0
  8614 ;;		On exit  : 0/0
  8615 ;;		Unchanged: 0/0
  8616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;Total ram usage:        0 bytes
  8622 ;; Hardware stack levels used:    1
  8623 ;; Hardware stack levels required when called:    7
  8624 ;; This function calls:
  8625 ;;		_CC2500_WriteCommand
  8626 ;; This function is called by:
  8627 ;;		_setRF_Main
  8628 ;; This function uses a non-reentrant model
  8629 ;;
  8630                           
  8631                           
  8632                           ;psect for function _RF_RxDisable
  8633  1CAF                     _RF_RxDisable:	
  8634                           
  8635                           ;RF_Control_B1.c: 226: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8636                           
  8637                           ;incstack = 0
  8638                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8639  1CAF  0021               	movlb	1	; select bank1
  8640  1CB0  18BA               	btfsc	_RF1^(0+128),1
  8641  1CB1  2CB4               	goto	l2291
  8642  1CB2  1DBA               	btfss	_RF1^(0+128),3
  8643  1CB3  0008               	return
  8644  1CB4                     l2291:	
  8645                           
  8646                           ;RF_Control_B1.c: 227: RF1.RxStatus = 0;
  8647  1CB4  11BA               	bcf	_RF1^(0+128),3
  8648                           
  8649                           ;RF_Control_B1.c: 228: RF1.ReceiveGO = 0;
  8650  1CB5  10BA               	bcf	_RF1^(0+128),1
  8651                           
  8652                           ;RF_Control_B1.c: 229: CC2500_WriteCommand(0x36);
  8653  1CB6  3036               	movlw	54
  8654  1CB7  319D  25FD  319C   	fcall	_CC2500_WriteCommand
  8655                           
  8656                           ;RF_Control_B1.c: 231: CC2500_WriteCommand(0x3A);
  8657  1CBA  303A               	movlw	58
  8658  1CBB  319D  25FD  319C   	fcall	_CC2500_WriteCommand
  8659                           
  8660                           ;RF_Control_B1.c: 232: CC2500_WriteCommand(0x3B);
  8661  1CBE  303B               	movlw	59
  8662  1CBF  319D  25FD         	fcall	_CC2500_WriteCommand
  8663  1CC1  0008               	return
  8664  1CC2                     __end_of_RF_RxDisable:	
  8665                           
  8666                           	psect	text38
  8667  09E6                     __ptext38:	
  8668 ;; *************** function _CC2500_TxData *****************
  8669 ;; Defined at:
  8670 ;;		line 32 in file "../src/CC2500_B1.c"
  8671 ;; Parameters:    Size  Location     Type
  8672 ;;		None
  8673 ;; Auto vars:     Size  Location     Type
  8674 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8675 ;; Return value:  Size  Location     Type
  8676 ;;		None               void
  8677 ;; Registers used:
  8678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8679 ;; Tracked objects:
  8680 ;;		On entry : 0/0
  8681 ;;		On exit  : 0/0
  8682 ;;		Unchanged: 0/0
  8683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8687 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;Total ram usage:        2 bytes
  8689 ;; Hardware stack levels used:    1
  8690 ;; Hardware stack levels required when called:    7
  8691 ;; This function calls:
  8692 ;;		_CC2500_WriteByte
  8693 ;;		_CC2500_WriteCommand
  8694 ;;		_Timeout_Counter
  8695 ;;		_set_TimeoutCleared
  8696 ;; This function is called by:
  8697 ;;		_setRF_Main
  8698 ;; This function uses a non-reentrant model
  8699 ;;
  8700                           
  8701                           
  8702                           ;psect for function _CC2500_TxData
  8703  09E6                     _CC2500_TxData:	
  8704                           
  8705                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8706                           ;CC2500_B1.c: 35: RC4 = 0;
  8707                           
  8708                           ;incstack = 0
  8709                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8710  09E6  0020               	movlb	0	; select bank0
  8711  09E7  120E               	bcf	14,4	;volatile
  8712                           
  8713                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8714  09E8  307F               	movlw	127
  8715  09E9  00A4               	movwf	??_CC2500_TxData
  8716  09EA  0824               	movf	??_CC2500_TxData,w
  8717  09EB  0021               	movlb	1	; select bank1
  8718  09EC  00D0               	movwf	_SPI0Buffer^(0+128)
  8719                           
  8720                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8721  09ED  29F1               	goto	l9471
  8722  09EE                     l9469:	
  8723                           
  8724                           ;CC2500_B1.c: 38: Timeout_Counter();
  8725  09EE  319D  2574  3189   	fcall	_Timeout_Counter
  8726  09F1                     l9471:	
  8727  09F1  0020               	movlb	0	; select bank0
  8728  09F2  1D0E               	btfss	14,2	;volatile
  8729  09F3  29F7               	goto	l9475
  8730  09F4  0021               	movlb	1	; select bank1
  8731  09F5  1D2B               	btfss	(_myMain^(0+128)+11),2
  8732  09F6  29EE               	goto	l9469
  8733  09F7                     l9475:	
  8734                           
  8735                           ;CC2500_B1.c: 39: };
  8736                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8737  09F7  319A  22E4  3189   	fcall	_set_TimeoutCleared
  8738                           
  8739                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8740  09FA  319D  25CB  3189   	fcall	_CC2500_WriteByte
  8741                           
  8742                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8743  09FD  0021               	movlb	1	; select bank1
  8744  09FE  0852               	movf	_Tx_Length^(0+128),w
  8745  09FF  0020               	movlb	0	; select bank0
  8746  0A00  00A4               	movwf	??_CC2500_TxData
  8747  0A01  0824               	movf	??_CC2500_TxData,w
  8748  0A02  0021               	movlb	1	; select bank1
  8749  0A03  00D0               	movwf	_SPI0Buffer^(0+128)
  8750                           
  8751                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8752  0A04  319D  25CB  3189   	fcall	_CC2500_WriteByte
  8753                           
  8754                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8755  0A07  0020               	movlb	0	; select bank0
  8756  0A08  01A5               	clrf	CC2500_TxData@loop_e
  8757  0A09                     l9489:	
  8758  0A09  0021               	movlb	1	; select bank1
  8759  0A0A  0852               	movf	_Tx_Length^(0+128),w
  8760  0A0B  0020               	movlb	0	; select bank0
  8761  0A0C  0225               	subwf	CC2500_TxData@loop_e,w
  8762  0A0D  1803               	btfsc	3,0
  8763  0A0E  2A22               	goto	l255
  8764                           
  8765                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8766  0A0F  0825               	movf	CC2500_TxData@loop_e,w
  8767  0A10  3EA0               	addlw	_RF_Data& (0+255)
  8768  0A11  0086               	movwf	6
  8769  0A12  3001               	movlw	1	; select bank3/4
  8770  0A13  0087               	movwf	7
  8771  0A14  0801               	movf	1,w
  8772  0A15  00A4               	movwf	??_CC2500_TxData
  8773  0A16  0824               	movf	??_CC2500_TxData,w
  8774  0A17  0021               	movlb	1	; select bank1
  8775  0A18  00D0               	movwf	_SPI0Buffer^(0+128)
  8776                           
  8777                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8778  0A19  319D  25CB  3189   	fcall	_CC2500_WriteByte
  8779  0A1C  3001               	movlw	1
  8780  0A1D  0020               	movlb	0	; select bank0
  8781  0A1E  00A4               	movwf	??_CC2500_TxData
  8782  0A1F  0824               	movf	??_CC2500_TxData,w
  8783  0A20  07A5               	addwf	CC2500_TxData@loop_e,f
  8784  0A21  2A09               	goto	l9489
  8785  0A22                     l255:	
  8786                           
  8787                           ;CC2500_B1.c: 48: }
  8788                           ;CC2500_B1.c: 49: RC4 = 1;
  8789  0A22  160E               	bsf	14,4	;volatile
  8790                           
  8791                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8792  0A23  3035               	movlw	53
  8793  0A24  319D  25FD  3189   	fcall	_CC2500_WriteCommand
  8794                           
  8795                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8796  0A27  2A2B               	goto	l9495
  8797  0A28                     l9493:	
  8798                           
  8799                           ;CC2500_B1.c: 52: Timeout_Counter();
  8800  0A28  319D  2574  3189   	fcall	_Timeout_Counter
  8801  0A2B                     l9495:	
  8802  0A2B  0020               	movlb	0	; select bank0
  8803  0A2C  180D               	btfsc	13,0	;volatile
  8804  0A2D  2A31               	goto	l9499
  8805  0A2E  0021               	movlb	1	; select bank1
  8806  0A2F  1D2B               	btfss	(_myMain^(0+128)+11),2
  8807  0A30  2A28               	goto	l9493
  8808  0A31                     l9499:	
  8809                           
  8810                           ;CC2500_B1.c: 53: };
  8811                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8812  0A31  319A  22E4  3189   	fcall	_set_TimeoutCleared
  8813                           
  8814                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8815  0A34  2A38               	goto	l9503
  8816  0A35                     l9501:	
  8817                           
  8818                           ;CC2500_B1.c: 57: Timeout_Counter();
  8819  0A35  319D  2574  3189   	fcall	_Timeout_Counter
  8820  0A38                     l9503:	
  8821  0A38  0020               	movlb	0	; select bank0
  8822  0A39  1C0D               	btfss	13,0	;volatile
  8823  0A3A  2A3E               	goto	l9507
  8824  0A3B  0021               	movlb	1	; select bank1
  8825  0A3C  1D2B               	btfss	(_myMain^(0+128)+11),2
  8826  0A3D  2A35               	goto	l9501
  8827  0A3E                     l9507:	
  8828                           
  8829                           ;CC2500_B1.c: 58: };
  8830                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8831  0A3E  319A  22E4  3189   	fcall	_set_TimeoutCleared
  8832                           
  8833                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8834  0A41  3036               	movlw	54
  8835  0A42  319D  25FD  3189   	fcall	_CC2500_WriteCommand
  8836                           
  8837                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8838  0A45  303B               	movlw	59
  8839  0A46  319D  25FD         	fcall	_CC2500_WriteCommand
  8840                           
  8841                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8842  0A48  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8843  0A49  0008               	return
  8844  0A4A                     __end_of_CC2500_TxData:	
  8845                           
  8846                           	psect	text39
  8847  0B7B                     __ptext39:	
  8848 ;; *************** function _CC2500_RxData *****************
  8849 ;; Defined at:
  8850 ;;		line 70 in file "../src/CC2500_B1.c"
  8851 ;; Parameters:    Size  Location     Type
  8852 ;;		None
  8853 ;; Auto vars:     Size  Location     Type
  8854 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8855 ;; Return value:  Size  Location     Type
  8856 ;;		None               void
  8857 ;; Registers used:
  8858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8859 ;; Tracked objects:
  8860 ;;		On entry : 0/0
  8861 ;;		On exit  : 0/0
  8862 ;;		Unchanged: 0/0
  8863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;Total ram usage:        2 bytes
  8869 ;; Hardware stack levels used:    1
  8870 ;; Hardware stack levels required when called:    7
  8871 ;; This function calls:
  8872 ;;		_CC2500_ReadByte
  8873 ;;		_CC2500_ReadStatus
  8874 ;;		_CC2500_WriteByte
  8875 ;;		_Timeout_Counter
  8876 ;;		_set_TimeoutCleared
  8877 ;; This function is called by:
  8878 ;;		_setRF_Main
  8879 ;; This function uses a non-reentrant model
  8880 ;;
  8881                           
  8882                           
  8883                           ;psect for function _CC2500_RxData
  8884  0B7B                     _CC2500_RxData:	
  8885                           
  8886                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8887                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8888                           
  8889                           ;incstack = 0
  8890                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8891  0B7B  0020               	movlb	0	; select bank0
  8892  0B7C  180D               	btfsc	13,0	;volatile
  8893  0B7D  2B82               	goto	l9521
  8894  0B7E  2B8B               	goto	l9527
  8895  0B7F                     l9519:	
  8896                           ;CC2500_B1.c: 76: {
  8897                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8898                           
  8899                           
  8900                           ;CC2500_B1.c: 78: Timeout_Counter();
  8901  0B7F  319D  2574  318B   	fcall	_Timeout_Counter
  8902  0B82                     l9521:	
  8903  0B82  0020               	movlb	0	; select bank0
  8904  0B83  1C0D               	btfss	13,0	;volatile
  8905  0B84  2B88               	goto	l9525
  8906  0B85  0021               	movlb	1	; select bank1
  8907  0B86  1D2B               	btfss	(_myMain^(0+128)+11),2
  8908  0B87  2B7F               	goto	l9519
  8909  0B88                     l9525:	
  8910                           
  8911                           ;CC2500_B1.c: 79: };
  8912                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8913  0B88  319A  22E4  318B   	fcall	_set_TimeoutCleared
  8914  0B8B                     l9527:	
  8915                           
  8916                           ;CC2500_B1.c: 81: }
  8917                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8918  0B8B  303B               	movlw	59
  8919  0B8C  319F  278C  318B   	fcall	_CC2500_ReadStatus
  8920                           
  8921                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8922  0B8F  0021               	movlb	1	; select bank1
  8923  0B90  0855               	movf	_s_data^(0+128),w
  8924  0B91  1903               	btfsc	3,2
  8925  0B92  0008               	return
  8926                           
  8927                           ;CC2500_B1.c: 86: RC4 = 0;
  8928  0B93  0020               	movlb	0	; select bank0
  8929  0B94  120E               	bcf	14,4	;volatile
  8930                           
  8931                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8932  0B95  30FF               	movlw	255
  8933  0B96  00A4               	movwf	??_CC2500_RxData
  8934  0B97  0824               	movf	??_CC2500_RxData,w
  8935  0B98  0021               	movlb	1	; select bank1
  8936  0B99  00D0               	movwf	_SPI0Buffer^(0+128)
  8937                           
  8938                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8939  0B9A  2B9E               	goto	l9537
  8940  0B9B                     l9535:	
  8941                           
  8942                           ;CC2500_B1.c: 89: Timeout_Counter();
  8943  0B9B  319D  2574  318B   	fcall	_Timeout_Counter
  8944  0B9E                     l9537:	
  8945  0B9E  0020               	movlb	0	; select bank0
  8946  0B9F  1D0E               	btfss	14,2	;volatile
  8947  0BA0  2BA4               	goto	l9541
  8948  0BA1  0021               	movlb	1	; select bank1
  8949  0BA2  1D2B               	btfss	(_myMain^(0+128)+11),2
  8950  0BA3  2B9B               	goto	l9535
  8951  0BA4                     l9541:	
  8952                           
  8953                           ;CC2500_B1.c: 90: };
  8954                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8955  0BA4  319A  22E4  318B   	fcall	_set_TimeoutCleared
  8956                           
  8957                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8958  0BA7  319D  25CB  318B   	fcall	_CC2500_WriteByte
  8959                           
  8960                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8961  0BAA  319E  264D  318B   	fcall	_CC2500_ReadByte
  8962                           
  8963                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8964  0BAD  0021               	movlb	1	; select bank1
  8965  0BAE  0850               	movf	_SPI0Buffer^(0+128),w
  8966  0BAF  0020               	movlb	0	; select bank0
  8967  0BB0  00A4               	movwf	??_CC2500_RxData
  8968  0BB1  0824               	movf	??_CC2500_RxData,w
  8969  0BB2  0021               	movlb	1	; select bank1
  8970  0BB3  00CF               	movwf	_Rx_Length^(0+128)
  8971                           
  8972                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8973  0BB4  0020               	movlb	0	; select bank0
  8974  0BB5  01A5               	clrf	CC2500_RxData@loop_f
  8975  0BB6                     l9557:	
  8976  0BB6  0021               	movlb	1	; select bank1
  8977  0BB7  084F               	movf	_Rx_Length^(0+128),w
  8978  0BB8  0020               	movlb	0	; select bank0
  8979  0BB9  0225               	subwf	CC2500_RxData@loop_f,w
  8980  0BBA  1803               	btfsc	3,0
  8981  0BBB  2BCF               	goto	l9559
  8982                           
  8983                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8984  0BBC  319E  264D  318B   	fcall	_CC2500_ReadByte
  8985                           
  8986                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8987  0BBF  0021               	movlb	1	; select bank1
  8988  0BC0  0850               	movf	_SPI0Buffer^(0+128),w
  8989  0BC1  0020               	movlb	0	; select bank0
  8990  0BC2  00A4               	movwf	??_CC2500_RxData
  8991  0BC3  0825               	movf	CC2500_RxData@loop_f,w
  8992  0BC4  3EA0               	addlw	_RF_Data& (0+255)
  8993  0BC5  0086               	movwf	6
  8994  0BC6  3001               	movlw	1	; select bank3/4
  8995  0BC7  0087               	movwf	7
  8996  0BC8  0824               	movf	??_CC2500_RxData,w
  8997  0BC9  0081               	movwf	1
  8998  0BCA  3001               	movlw	1
  8999  0BCB  00A4               	movwf	??_CC2500_RxData
  9000  0BCC  0824               	movf	??_CC2500_RxData,w
  9001  0BCD  07A5               	addwf	CC2500_RxData@loop_f,f
  9002  0BCE  2BB6               	goto	l9557
  9003  0BCF                     l9559:	
  9004                           
  9005                           ;CC2500_B1.c: 99: }
  9006                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9007  0BCF  319E  264D  318B   	fcall	_CC2500_ReadByte
  9008                           
  9009                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9010  0BD2  0021               	movlb	1	; select bank1
  9011  0BD3  0850               	movf	_SPI0Buffer^(0+128),w
  9012  0BD4  0020               	movlb	0	; select bank0
  9013  0BD5  00A4               	movwf	??_CC2500_RxData
  9014  0BD6  0824               	movf	??_CC2500_RxData,w
  9015  0BD7  0021               	movlb	1	; select bank1
  9016  0BD8  00CE               	movwf	_RSSI^(0+128)
  9017                           
  9018                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9019  0BD9  319E  264D         	fcall	_CC2500_ReadByte
  9020                           
  9021                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9022  0BDB  0021               	movlb	1	; select bank1
  9023  0BDC  0850               	movf	_SPI0Buffer^(0+128),w
  9024  0BDD  0020               	movlb	0	; select bank0
  9025  0BDE  00A4               	movwf	??_CC2500_RxData
  9026  0BDF  0824               	movf	??_CC2500_RxData,w
  9027  0BE0  0021               	movlb	1	; select bank1
  9028  0BE1  00C9               	movwf	_CRC^(0+128)
  9029                           
  9030                           ;CC2500_B1.c: 104: RC4 = 1;
  9031  0BE2  0020               	movlb	0	; select bank0
  9032  0BE3  160E               	bsf	14,4	;volatile
  9033                           
  9034                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9035  0BE4  0021               	movlb	1	; select bank1
  9036  0BE5  1BC9               	btfsc	_CRC^(0+128),7
  9037                           
  9038                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9039  0BE6  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9040                           
  9041                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9042  0BE7  11BA               	bcf	_RF1^(0+128),3
  9043                           
  9044                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9045  0BE8  14BA               	bsf	_RF1^(0+128),1
  9046  0BE9  0008               	return
  9047  0BEA                     __end_of_CC2500_RxData:	
  9048                           
  9049                           	psect	text40
  9050  1F8C                     __ptext40:	
  9051 ;; *************** function _CC2500_ReadStatus *****************
  9052 ;; Defined at:
  9053 ;;		line 301 in file "../src/CC2500_B1.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;  status_addr     1    wreg     unsigned char 
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9058 ;; Return value:  Size  Location     Type
  9059 ;;		None               void
  9060 ;; Registers used:
  9061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9062 ;; Tracked objects:
  9063 ;;		On entry : 0/0
  9064 ;;		On exit  : 0/0
  9065 ;;		Unchanged: 0/0
  9066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;Total ram usage:        2 bytes
  9072 ;; Hardware stack levels used:    1
  9073 ;; Hardware stack levels required when called:    6
  9074 ;; This function calls:
  9075 ;;		_CC2500_ReadByte
  9076 ;;		_CC2500_WriteByte
  9077 ;;		_Timeout_Counter
  9078 ;;		_set_TimeoutCleared
  9079 ;; This function is called by:
  9080 ;;		_CC2500_RxData
  9081 ;; This function uses a non-reentrant model
  9082 ;;
  9083                           
  9084                           
  9085                           ;psect for function _CC2500_ReadStatus
  9086  1F8C                     _CC2500_ReadStatus:	
  9087                           
  9088                           ;incstack = 0
  9089                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9090                           ;CC2500_ReadStatus@status_addr stored from wreg
  9091  1F8C  0020               	movlb	0	; select bank0
  9092  1F8D  00A3               	movwf	CC2500_ReadStatus@status_addr
  9093                           
  9094                           ;CC2500_B1.c: 302: RC4 = 0;
  9095  1F8E  120E               	bcf	14,4	;volatile
  9096                           
  9097                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9098  1F8F  0823               	movf	CC2500_ReadStatus@status_addr,w
  9099  1F90  3EC0               	addlw	192
  9100  1F91  00A2               	movwf	??_CC2500_ReadStatus
  9101  1F92  0822               	movf	??_CC2500_ReadStatus,w
  9102  1F93  0021               	movlb	1	; select bank1
  9103  1F94  00D0               	movwf	_SPI0Buffer^(0+128)
  9104                           
  9105                           ;CC2500_B1.c: 305: while (RC2 == 1 && myMain.Timeout == 0) {
  9106  1F95  2F99               	goto	l9279
  9107  1F96                     l9277:	
  9108                           
  9109                           ;CC2500_B1.c: 306: Timeout_Counter();
  9110  1F96  319D  2574  319F   	fcall	_Timeout_Counter
  9111  1F99                     l9279:	
  9112  1F99  0020               	movlb	0	; select bank0
  9113  1F9A  1D0E               	btfss	14,2	;volatile
  9114  1F9B  2F9F               	goto	l9283
  9115  1F9C  0021               	movlb	1	; select bank1
  9116  1F9D  1D2B               	btfss	(_myMain^(0+128)+11),2
  9117  1F9E  2F96               	goto	l9277
  9118  1F9F                     l9283:	
  9119                           
  9120                           ;CC2500_B1.c: 307: };
  9121                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9122  1F9F  319A  22E4  319F   	fcall	_set_TimeoutCleared
  9123                           
  9124                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9125  1FA2  319D  25CB  319F   	fcall	_CC2500_WriteByte
  9126                           
  9127                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9128  1FA5  319E  264D         	fcall	_CC2500_ReadByte
  9129                           
  9130                           ;CC2500_B1.c: 312: RC4 = 1;
  9131  1FA7  0020               	movlb	0	; select bank0
  9132  1FA8  160E               	bsf	14,4	;volatile
  9133                           
  9134                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9135  1FA9  0021               	movlb	1	; select bank1
  9136  1FAA  0850               	movf	_SPI0Buffer^(0+128),w
  9137  1FAB  0020               	movlb	0	; select bank0
  9138  1FAC  00A2               	movwf	??_CC2500_ReadStatus
  9139  1FAD  0822               	movf	??_CC2500_ReadStatus,w
  9140  1FAE  0021               	movlb	1	; select bank1
  9141  1FAF  00D5               	movwf	_s_data^(0+128)
  9142  1FB0  0008               	return
  9143  1FB1                     __end_of_CC2500_ReadStatus:	
  9144                           
  9145                           	psect	text41
  9146  1E4D                     __ptext41:	
  9147 ;; *************** function _CC2500_ReadByte *****************
  9148 ;; Defined at:
  9149 ;;		line 235 in file "../src/CC2500_B1.c"
  9150 ;; Parameters:    Size  Location     Type
  9151 ;;		None
  9152 ;; Auto vars:     Size  Location     Type
  9153 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9154 ;; Return value:  Size  Location     Type
  9155 ;;		None               void
  9156 ;; Registers used:
  9157 ;;		wreg, status,2, status,0
  9158 ;; Tracked objects:
  9159 ;;		On entry : 0/0
  9160 ;;		On exit  : 0/0
  9161 ;;		Unchanged: 0/0
  9162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;Total ram usage:        2 bytes
  9168 ;; Hardware stack levels used:    1
  9169 ;; Hardware stack levels required when called:    5
  9170 ;; This function calls:
  9171 ;;		Nothing
  9172 ;; This function is called by:
  9173 ;;		_CC2500_RxData
  9174 ;;		_CC2500_ReadStatus
  9175 ;;		_CC2500_ReadREG
  9176 ;; This function uses a non-reentrant model
  9177 ;;
  9178                           
  9179                           
  9180                           ;psect for function _CC2500_ReadByte
  9181  1E4D                     _CC2500_ReadByte:	
  9182                           
  9183                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9184                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9185                           
  9186                           ;incstack = 0
  9187                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9188  1E4D  0020               	movlb	0	; select bank0
  9189  1E4E  01A1               	clrf	CC2500_ReadByte@loop_b
  9190  1E4F                     L4:	
  9191  1E4F  3008               	movlw	8
  9192  1E50  0221               	subwf	CC2500_ReadByte@loop_b,w
  9193  1E51  1803               	btfsc	3,0
  9194  1E52  0008               	return
  9195                           
  9196                           ;CC2500_B1.c: 238: RC1 = 1;
  9197  1E53  148E               	bsf	14,1	;volatile
  9198                           
  9199                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9200  1E54  1003               	clrc
  9201  1E55  0021               	movlb	1	; select bank1
  9202  1E56  0DD0               	rlf	_SPI0Buffer^(0+128),f
  9203                           
  9204                           ;CC2500_B1.c: 240: if (RC2 == 1)
  9205  1E57  0020               	movlb	0	; select bank0
  9206  1E58  1D0E               	btfss	14,2	;volatile
  9207  1E59  2E5D               	goto	l9175
  9208                           
  9209                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9210  1E5A  0021               	movlb	1	; select bank1
  9211  1E5B  1450               	bsf	_SPI0Buffer^(0+128),0
  9212  1E5C  2E63               	goto	l9177
  9213  1E5D                     l9175:	
  9214                           
  9215                           ;CC2500_B1.c: 242: else
  9216                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9217  1E5D  30FE               	movlw	254
  9218  1E5E  0020               	movlb	0	; select bank0
  9219  1E5F  00A0               	movwf	??_CC2500_ReadByte
  9220  1E60  0820               	movf	??_CC2500_ReadByte,w
  9221  1E61  0021               	movlb	1	; select bank1
  9222  1E62  05D0               	andwf	_SPI0Buffer^(0+128),f
  9223  1E63                     l9177:	
  9224                           
  9225                           ;CC2500_B1.c: 244: RC1 = 0;
  9226  1E63  0020               	movlb	0	; select bank0
  9227  1E64  108E               	bcf	14,1	;volatile
  9228  1E65  3001               	movlw	1
  9229  1E66  00A0               	movwf	??_CC2500_ReadByte
  9230  1E67  0820               	movf	??_CC2500_ReadByte,w
  9231  1E68  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9232  1E69  2E4F               	goto	L4
  9233  1E6A                     __end_of_CC2500_ReadByte:	
  9234                           
  9235                           	psect	text42
  9236  1AC8                     __ptext42:	
  9237 ;; *************** function _RF_Initialization *****************
  9238 ;; Defined at:
  9239 ;;		line 9 in file "../src/RF_Control_B1.c"
  9240 ;; Parameters:    Size  Location     Type
  9241 ;;		None
  9242 ;; Auto vars:     Size  Location     Type
  9243 ;;		None
  9244 ;; Return value:  Size  Location     Type
  9245 ;;		None               void
  9246 ;; Registers used:
  9247 ;;		wreg, status,2, status,0, pclath, cstack
  9248 ;; Tracked objects:
  9249 ;;		On entry : 0/0
  9250 ;;		On exit  : 0/0
  9251 ;;		Unchanged: 0/0
  9252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9257 ;;Total ram usage:        0 bytes
  9258 ;; Hardware stack levels used:    1
  9259 ;; Hardware stack levels required when called:    6
  9260 ;; This function calls:
  9261 ;;		_setRF_Initialization
  9262 ;; This function is called by:
  9263 ;;		_main
  9264 ;; This function uses a non-reentrant model
  9265 ;;
  9266                           
  9267                           
  9268                           ;psect for function _RF_Initialization
  9269  1AC8                     _RF_Initialization:	
  9270                           
  9271                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9272                           
  9273                           ;incstack = 0
  9274                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9275  1AC8  319B  234C         	fcall	_setRF_Initialization
  9276  1ACA  0008               	return
  9277  1ACB                     __end_of_RF_Initialization:	
  9278                           
  9279                           	psect	text43
  9280  1B4C                     __ptext43:	
  9281 ;; *************** function _setRF_Initialization *****************
  9282 ;; Defined at:
  9283 ;;		line 43 in file "../src/RF_Control_B1.c"
  9284 ;; Parameters:    Size  Location     Type
  9285 ;;		None
  9286 ;; Auto vars:     Size  Location     Type
  9287 ;;		None
  9288 ;; Return value:  Size  Location     Type
  9289 ;;		None               void
  9290 ;; Registers used:
  9291 ;;		wreg
  9292 ;; Tracked objects:
  9293 ;;		On entry : 0/0
  9294 ;;		On exit  : 0/0
  9295 ;;		Unchanged: 0/0
  9296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9299 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;Total ram usage:        1 bytes
  9302 ;; Hardware stack levels used:    1
  9303 ;; Hardware stack levels required when called:    5
  9304 ;; This function calls:
  9305 ;;		Nothing
  9306 ;; This function is called by:
  9307 ;;		_RF_Initialization
  9308 ;; This function uses a non-reentrant model
  9309 ;;
  9310                           
  9311                           
  9312                           ;psect for function _setRF_Initialization
  9313  1B4C                     _setRF_Initialization:	
  9314                           
  9315                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9316                           
  9317                           ;incstack = 0
  9318                           ; Regs used in _setRF_Initialization: [wreg]
  9319  1B4C  3015               	movlw	21
  9320  1B4D  0020               	movlb	0	; select bank0
  9321  1B4E  00A0               	movwf	??_setRF_Initialization
  9322  1B4F  0820               	movf	??_setRF_Initialization,w
  9323  1B50  0021               	movlb	1	; select bank1
  9324  1B51  00D2               	movwf	_Tx_Length^(0+128)
  9325                           
  9326                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9327  1B52  3005               	movlw	5
  9328  1B53  00C1               	movwf	(_RF1^(0+128)+7)
  9329  1B54  3000               	movlw	0
  9330  1B55  00C2               	movwf	(_RF1^(0+128)+8)
  9331  1B56  0008               	return
  9332  1B57                     __end_of_setRF_Initialization:	
  9333                           
  9334                           	psect	text44
  9335  1C65                     __ptext44:	
  9336 ;; *************** function _Mcu_Initialization *****************
  9337 ;; Defined at:
  9338 ;;		line 30 in file "../src/MCU_B1.c"
  9339 ;; Parameters:    Size  Location     Type
  9340 ;;		None
  9341 ;; Auto vars:     Size  Location     Type
  9342 ;;		None
  9343 ;; Return value:  Size  Location     Type
  9344 ;;		None               void
  9345 ;; Registers used:
  9346 ;;		wreg, status,2, status,0, pclath, cstack
  9347 ;; Tracked objects:
  9348 ;;		On entry : 0/0
  9349 ;;		On exit  : 0/0
  9350 ;;		Unchanged: 0/0
  9351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;Total ram usage:        0 bytes
  9357 ;; Hardware stack levels used:    1
  9358 ;; Hardware stack levels required when called:    6
  9359 ;; This function calls:
  9360 ;;		_ADC_Set
  9361 ;;		_Fosc_Set
  9362 ;;		_IOC_Set
  9363 ;;		_IO_Set
  9364 ;;		_TMR1_Set
  9365 ;;		_WDT_Set
  9366 ;; This function is called by:
  9367 ;;		_main
  9368 ;; This function uses a non-reentrant model
  9369 ;;
  9370                           
  9371                           
  9372                           ;psect for function _Mcu_Initialization
  9373  1C65                     _Mcu_Initialization:	
  9374                           
  9375                           ;MCU_B1.c: 32: Fosc_Set();
  9376                           
  9377                           ;incstack = 0
  9378                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9379  1C65  319A  22E0  319C   	fcall	_Fosc_Set
  9380                           
  9381                           ;MCU_B1.c: 34: IO_Set();
  9382  1C68  319D  25E4  319C   	fcall	_IO_Set
  9383                           
  9384                           ;MCU_B1.c: 36: ;;
  9385                           ;MCU_B1.c: 38: TMR1_Set();
  9386  1C6B  319B  23AA  319C   	fcall	_TMR1_Set
  9387                           
  9388                           ;MCU_B1.c: 40: ADC_Set();
  9389  1C6E  319A  22FB  319C   	fcall	_ADC_Set
  9390                           
  9391                           ;MCU_B1.c: 42: ;;
  9392                           ;MCU_B1.c: 44: ;;
  9393                           ;MCU_B1.c: 46: IOC_Set();
  9394  1C71  319B  239E  319C   	fcall	_IOC_Set
  9395                           
  9396                           ;MCU_B1.c: 48: ;;
  9397                           ;MCU_B1.c: 50: ;;
  9398                           ;MCU_B1.c: 52: WDT_Set();
  9399  1C74  319B  23B6         	fcall	_WDT_Set
  9400  1C76  0008               	return
  9401  1C77                     __end_of_Mcu_Initialization:	
  9402                           
  9403                           	psect	text45
  9404  1BB6                     __ptext45:	
  9405 ;; *************** function _WDT_Set *****************
  9406 ;; Defined at:
  9407 ;;		line 1083 in file "../src/MCU_B1.c"
  9408 ;; Parameters:    Size  Location     Type
  9409 ;;		None
  9410 ;; Auto vars:     Size  Location     Type
  9411 ;;		None
  9412 ;; Return value:  Size  Location     Type
  9413 ;;		None               void
  9414 ;; Registers used:
  9415 ;;		wreg
  9416 ;; Tracked objects:
  9417 ;;		On entry : 0/0
  9418 ;;		On exit  : 0/0
  9419 ;;		Unchanged: 0/0
  9420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9424 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9425 ;;Total ram usage:        1 bytes
  9426 ;; Hardware stack levels used:    1
  9427 ;; Hardware stack levels required when called:    5
  9428 ;; This function calls:
  9429 ;;		Nothing
  9430 ;; This function is called by:
  9431 ;;		_Mcu_Initialization
  9432 ;; This function uses a non-reentrant model
  9433 ;;
  9434                           
  9435                           
  9436                           ;psect for function _WDT_Set
  9437  1BB6                     _WDT_Set:	
  9438                           
  9439                           ;MCU_B1.c: 1090: WDTCON = 0b00010111;;
  9440                           
  9441                           ;incstack = 0
  9442                           ; Regs used in _WDT_Set: [wreg]
  9443  1BB6  3017               	movlw	23
  9444  1BB7  0021               	movlb	1	; select bank1
  9445  1BB8  0097               	movwf	23	;volatile
  9446                           
  9447                           ;MCU_B1.c: 1092: WDT.Enable = 1;
  9448  1BB9  0022               	movlb	2	; select bank2
  9449  1BBA  1425               	bsf	_WDT^(0+256),0
  9450                           
  9451                           ;MCU_B1.c: 1093: WDT.Timer = 10;
  9452  1BBB  300A               	movlw	10
  9453  1BBC  0020               	movlb	0	; select bank0
  9454  1BBD  00A0               	movwf	??_WDT_Set
  9455  1BBE  0820               	movf	??_WDT_Set,w
  9456  1BBF  0022               	movlb	2	; select bank2
  9457  1BC0  00A6               	movwf	(_WDT^(0+256)+1)
  9458  1BC1  0008               	return
  9459  1BC2                     __end_of_WDT_Set:	
  9460                           
  9461                           	psect	text46
  9462  1BAA                     __ptext46:	
  9463 ;; *************** function _TMR1_Set *****************
  9464 ;; Defined at:
  9465 ;;		line 199 in file "../src/MCU_B1.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;		None
  9468 ;; Auto vars:     Size  Location     Type
  9469 ;;		None
  9470 ;; Return value:  Size  Location     Type
  9471 ;;		None               void
  9472 ;; Registers used:
  9473 ;;		wreg
  9474 ;; Tracked objects:
  9475 ;;		On entry : 0/0
  9476 ;;		On exit  : 0/0
  9477 ;;		Unchanged: 0/0
  9478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9483 ;;Total ram usage:        0 bytes
  9484 ;; Hardware stack levels used:    1
  9485 ;; Hardware stack levels required when called:    5
  9486 ;; This function calls:
  9487 ;;		Nothing
  9488 ;; This function is called by:
  9489 ;;		_Mcu_Initialization
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493                           
  9494                           ;psect for function _TMR1_Set
  9495  1BAA                     _TMR1_Set:	
  9496                           
  9497                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9498                           
  9499                           ;incstack = 0
  9500                           ; Regs used in _TMR1_Set: [wreg]
  9501  1BAA  3041               	movlw	65
  9502  1BAB  0020               	movlb	0	; select bank0
  9503  1BAC  0098               	movwf	24	;volatile
  9504                           
  9505                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9506  1BAD  30FA               	movlw	250
  9507  1BAE  0097               	movwf	23	;volatile
  9508                           
  9509                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9510  1BAF  3038               	movlw	56
  9511  1BB0  0096               	movwf	22	;volatile
  9512                           
  9513                           ;MCU_B1.c: 203: TMR1IE = 1;
  9514  1BB1  0021               	movlb	1	; select bank1
  9515  1BB2  1411               	bsf	17,0	;volatile
  9516                           
  9517                           ;MCU_B1.c: 204: PEIE = 1;
  9518  1BB3  170B               	bsf	11,6	;volatile
  9519                           
  9520                           ;MCU_B1.c: 205: GIE = 1;
  9521  1BB4  178B               	bsf	11,7	;volatile
  9522  1BB5  0008               	return
  9523  1BB6                     __end_of_TMR1_Set:	
  9524                           
  9525                           	psect	text47
  9526  1DE4                     __ptext47:	
  9527 ;; *************** function _IO_Set *****************
  9528 ;; Defined at:
  9529 ;;		line 60 in file "../src/MCU_B1.c"
  9530 ;; Parameters:    Size  Location     Type
  9531 ;;		None
  9532 ;; Auto vars:     Size  Location     Type
  9533 ;;		None
  9534 ;; Return value:  Size  Location     Type
  9535 ;;		None               void
  9536 ;; Registers used:
  9537 ;;		wreg, status,2
  9538 ;; Tracked objects:
  9539 ;;		On entry : 0/0
  9540 ;;		On exit  : 0/0
  9541 ;;		Unchanged: 0/0
  9542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;Total ram usage:        0 bytes
  9548 ;; Hardware stack levels used:    1
  9549 ;; Hardware stack levels required when called:    5
  9550 ;; This function calls:
  9551 ;;		Nothing
  9552 ;; This function is called by:
  9553 ;;		_Mcu_Initialization
  9554 ;; This function uses a non-reentrant model
  9555 ;;
  9556                           
  9557                           
  9558                           ;psect for function _IO_Set
  9559  1DE4                     _IO_Set:	
  9560                           
  9561                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9562                           
  9563                           ;incstack = 0
  9564                           ; Regs used in _IO_Set: [wreg+status,2]
  9565  1DE4  3077               	movlw	119
  9566  1DE5  0021               	movlb	1	; select bank1
  9567  1DE6  008C               	movwf	12	;volatile
  9568                           
  9569                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9570  1DE7  3007               	movlw	7
  9571  1DE8  008D               	movwf	13	;volatile
  9572                           
  9573                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9574  1DE9  300C               	movlw	12
  9575  1DEA  008E               	movwf	14	;volatile
  9576                           
  9577                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9578  1DEB  0022               	movlb	2	; select bank2
  9579  1DEC  018C               	clrf	12	;volatile
  9580                           
  9581                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9582  1DED  3002               	movlw	2
  9583  1DEE  008D               	movwf	13	;volatile
  9584                           
  9585                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9586  1DEF  018E               	clrf	14	;volatile
  9587                           
  9588                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9589  1DF0  3022               	movlw	34
  9590  1DF1  0023               	movlb	3	; select bank3
  9591  1DF2  008C               	movwf	12	;volatile
  9592                           
  9593                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9594  1DF3  018D               	clrf	13	;volatile
  9595                           
  9596                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9597  1DF4  018E               	clrf	14	;volatile
  9598                           
  9599                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9600  1DF5  3077               	movlw	119
  9601  1DF6  0020               	movlb	0	; select bank0
  9602  1DF7  008C               	movwf	12	;volatile
  9603                           
  9604                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9605  1DF8  3007               	movlw	7
  9606  1DF9  008D               	movwf	13	;volatile
  9607                           
  9608                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9609  1DFA  300C               	movlw	12
  9610  1DFB  008E               	movwf	14	;volatile
  9611  1DFC  0008               	return
  9612  1DFD                     __end_of_IO_Set:	
  9613                           
  9614                           	psect	text48
  9615  1B9E                     __ptext48:	
  9616 ;; *************** function _IOC_Set *****************
  9617 ;; Defined at:
  9618 ;;		line 365 in file "../src/MCU_B1.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;		None
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;		None
  9623 ;; Return value:  Size  Location     Type
  9624 ;;		None               void
  9625 ;; Registers used:
  9626 ;;		wreg, status,2
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;Total ram usage:        0 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:    5
  9639 ;; This function calls:
  9640 ;;		Nothing
  9641 ;; This function is called by:
  9642 ;;		_Mcu_Initialization
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           
  9647                           ;psect for function _IOC_Set
  9648  1B9E                     _IOC_Set:	
  9649                           
  9650                           ;MCU_B1.c: 366: WPUB2 = 0;
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in _IOC_Set: [wreg+status,2]
  9654  1B9E  0024               	movlb	4	; select bank4
  9655  1B9F  110D               	bcf	13,2	;volatile
  9656                           
  9657                           ;MCU_B1.c: 386: IOCBP = 0b00000100;
  9658  1BA0  3004               	movlw	4
  9659  1BA1  0027               	movlb	7	; select bank7
  9660  1BA2  0094               	movwf	20	;volatile
  9661                           
  9662                           ;MCU_B1.c: 387: IOCBN = 0b00000000;
  9663  1BA3  0195               	clrf	21	;volatile
  9664                           
  9665                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9666  1BA4  0196               	clrf	22	;volatile
  9667                           
  9668                           ;MCU_B1.c: 393: IOCIE = 1;
  9669  1BA5  158B               	bsf	11,3	;volatile
  9670                           
  9671                           ;MCU_B1.c: 394: IOCIF = 0;
  9672  1BA6  100B               	bcf	11,0	;volatile
  9673                           
  9674                           ;MCU_B1.c: 395: PEIE = 1;
  9675  1BA7  170B               	bsf	11,6	;volatile
  9676                           
  9677                           ;MCU_B1.c: 396: GIE = 1;
  9678  1BA8  178B               	bsf	11,7	;volatile
  9679  1BA9  0008               	return
  9680  1BAA                     __end_of_IOC_Set:	
  9681                           
  9682                           	psect	text49
  9683  1AE0                     __ptext49:	
  9684 ;; *************** function _Fosc_Set *****************
  9685 ;; Defined at:
  9686 ;;		line 56 in file "../src/MCU_B1.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;		None
  9689 ;; Auto vars:     Size  Location     Type
  9690 ;;		None
  9691 ;; Return value:  Size  Location     Type
  9692 ;;		None               void
  9693 ;; Registers used:
  9694 ;;		wreg
  9695 ;; Tracked objects:
  9696 ;;		On entry : 0/0
  9697 ;;		On exit  : 0/0
  9698 ;;		Unchanged: 0/0
  9699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9704 ;;Total ram usage:        0 bytes
  9705 ;; Hardware stack levels used:    1
  9706 ;; Hardware stack levels required when called:    5
  9707 ;; This function calls:
  9708 ;;		Nothing
  9709 ;; This function is called by:
  9710 ;;		_Mcu_Initialization
  9711 ;; This function uses a non-reentrant model
  9712 ;;
  9713                           
  9714                           
  9715                           ;psect for function _Fosc_Set
  9716  1AE0                     _Fosc_Set:	
  9717                           
  9718                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9719                           
  9720                           ;incstack = 0
  9721                           ; Regs used in _Fosc_Set: [wreg]
  9722  1AE0  3078               	movlw	120
  9723  1AE1  0021               	movlb	1	; select bank1
  9724  1AE2  0099               	movwf	25	;volatile
  9725  1AE3  0008               	return
  9726  1AE4                     __end_of_Fosc_Set:	
  9727                           
  9728                           	psect	text50
  9729  1AFB                     __ptext50:	
  9730 ;; *************** function _ADC_Set *****************
  9731 ;; Defined at:
  9732 ;;		line 419 in file "../src/MCU_B1.c"
  9733 ;; Parameters:    Size  Location     Type
  9734 ;;		None
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;		None
  9737 ;; Return value:  Size  Location     Type
  9738 ;;		None               void
  9739 ;; Registers used:
  9740 ;;		wreg
  9741 ;; Tracked objects:
  9742 ;;		On entry : 0/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;Total ram usage:        0 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    5
  9753 ;; This function calls:
  9754 ;;		Nothing
  9755 ;; This function is called by:
  9756 ;;		_Mcu_Initialization
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760                           
  9761                           ;psect for function _ADC_Set
  9762  1AFB                     _ADC_Set:	
  9763                           
  9764                           ;MCU_B1.c: 420: ADCON1 = 0xf3;
  9765                           
  9766                           ;incstack = 0
  9767                           ; Regs used in _ADC_Set: [wreg]
  9768  1AFB  30F3               	movlw	243
  9769  1AFC  0021               	movlb	1	; select bank1
  9770  1AFD  009E               	movwf	30	;volatile
  9771                           
  9772                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  9773  1AFE  30C1               	movlw	193
  9774  1AFF  0022               	movlb	2	; select bank2
  9775  1B00  0097               	movwf	23	;volatile
  9776  1B01  0008               	return
  9777  1B02                     __end_of_ADC_Set:	
  9778                           
  9779                           	psect	text51
  9780  0049                     __ptext51:	
  9781 ;; *************** function _Load_Main *****************
  9782 ;; Defined at:
  9783 ;;		line 39 in file "../src/OverLoad_B1.c"
  9784 ;; Parameters:    Size  Location     Type
  9785 ;;		None
  9786 ;; Auto vars:     Size  Location     Type
  9787 ;;  i               2   12[BANK0 ] int 
  9788 ;;  Load_Status     1   11[BANK0 ] unsigned char 
  9789 ;;  error           1   10[BANK0 ] unsigned char 
  9790 ;; Return value:  Size  Location     Type
  9791 ;;		None               void
  9792 ;; Registers used:
  9793 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9794 ;; Tracked objects:
  9795 ;;		On entry : 0/0
  9796 ;;		On exit  : 0/0
  9797 ;;		Unchanged: 0/0
  9798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9800 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9801 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9802 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9803 ;;Total ram usage:        6 bytes
  9804 ;; Hardware stack levels used:    1
  9805 ;; Hardware stack levels required when called:    7
  9806 ;; This function calls:
  9807 ;;		___lwdiv
  9808 ;;		___wmul
  9809 ;;		_getAll_DimmerLights_AdjSw
  9810 ;;		_getDimmer_LoadGO
  9811 ;;		_getDimmer_Load_Status
  9812 ;;		_getMain_All_Error_Status
  9813 ;;		_getMain_LightsStatus
  9814 ;;		_getMain_Lights_Count
  9815 ;;		_setLoad_AH_AL_Restore
  9816 ;; This function is called by:
  9817 ;;		_main
  9818 ;; This function uses a non-reentrant model
  9819 ;;
  9820                           
  9821                           
  9822                           ;psect for function _Load_Main
  9823  0049                     _Load_Main:	
  9824                           
  9825                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  9826                           
  9827                           ;incstack = 0
  9828                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9829  0049  3000               	movlw	0
  9830  004A  3191  2168  3180   	fcall	_getMain_All_Error_Status
  9831  004D  0020               	movlb	0	; select bank0
  9832  004E  00A8               	movwf	??_Load_Main
  9833  004F  0828               	movf	??_Load_Main,w
  9834  0050  00AA               	movwf	Load_Main@error
  9835                           
  9836                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  9837  0051  01AB               	clrf	Load_Main@Load_Status
  9838                           
  9839                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  9840  0052  0022               	movlb	2	; select bank2
  9841  0053  1C27               	btfss	_Load^(0+256),0
  9842  0054  29EF               	goto	l1727
  9843                           
  9844                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
  9845  0055  319C  249C  3180   	fcall	_getMain_LightsStatus
  9846  0058  3800               	iorlw	0
  9847  0059  1D03               	skipz
  9848  005A  285D               	goto	l10715
  9849                           
  9850                           ;OverLoad_B1.c: 65: Load.GO = 0;
  9851  005B  0022               	movlb	2	; select bank2
  9852  005C  287E               	goto	l10733
  9853  005D                     l10715:	
  9854                           ;OverLoad_B1.c: 66: } else {
  9855                           
  9856                           
  9857                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
  9858  005D  0020               	movlb	0	; select bank0
  9859  005E  08AA               	movf	Load_Main@error,f
  9860  005F  1D03               	skipz
  9861  0060  287B               	goto	l1730
  9862  0061  3190  20DD  3180   	fcall	_getAll_DimmerLights_AdjSw
  9863  0064  3800               	iorlw	0
  9864  0065  1D03               	skipz
  9865  0066  287B               	goto	l1730
  9866                           
  9867                           ;OverLoad_B1.c: 70: Load.GO = 1;
  9868  0067  0022               	movlb	2	; select bank2
  9869  0068  14A7               	bsf	_Load^(0+256),1
  9870                           
  9871                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
  9872  0069  319B  2322  3180   	fcall	_getDimmer_LoadGO
  9873  006C  3A01               	xorlw	1
  9874  006D  1D03               	skipz
  9875  006E  2876               	goto	l1731
  9876                           
  9877                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  9878  006F  0022               	movlb	2	; select bank2
  9879  0070  1DA7               	btfss	_Load^(0+256),3
  9880  0071  1BA7               	btfsc	_Load^(0+256),7
  9881  0072  287F               	goto	l1729
  9882                           
  9883                           ;OverLoad_B1.c: 74: Load.Run = 1;
  9884  0073  15A7               	bsf	_Load^(0+256),3
  9885                           
  9886                           ;OverLoad_B1.c: 75: Load.Count = 0;
  9887  0074  01D0               	clrf	(_Load^(0+256)+41)
  9888                           
  9889                           ;OverLoad_B1.c: 76: }
  9890                           ;OverLoad_B1.c: 77: } else {
  9891  0075  287F               	goto	l1729
  9892  0076                     l1731:	
  9893                           
  9894                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  9895  0076  0022               	movlb	2	; select bank2
  9896  0077  1FA7               	btfss	_Load^(0+256),7
  9897  0078  287F               	goto	l1729
  9898                           
  9899                           ;OverLoad_B1.c: 79: Load.OK = 0;
  9900  0079  13A7               	bcf	_Load^(0+256),7
  9901                           
  9902                           ;OverLoad_B1.c: 80: }
  9903                           ;OverLoad_B1.c: 81: }
  9904                           ;OverLoad_B1.c: 82: } else {
  9905  007A  287F               	goto	l1729
  9906  007B                     l1730:	
  9907                           
  9908                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  9909  007B  0022               	movlb	2	; select bank2
  9910  007C  1CA7               	btfss	_Load^(0+256),1
  9911  007D  287F               	goto	l1729
  9912  007E                     l10733:	
  9913                           
  9914                           ;OverLoad_B1.c: 84: Load.GO = 0;
  9915  007E  10A7               	bcf	_Load^(0+256),1
  9916  007F                     l1729:	
  9917                           
  9918                           ;OverLoad_B1.c: 85: }
  9919                           ;OverLoad_B1.c: 86: }
  9920                           ;OverLoad_B1.c: 88: }
  9921                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  9922  007F  1CA7               	btfss	_Load^(0+256),1
  9923  0080  29CB               	goto	l1737
  9924                           
  9925                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  9926  0081  1527               	bsf	_Load^(0+256),2
  9927                           
  9928                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  9929  0082  1E27               	btfss	_Load^(0+256),4
  9930  0083  29C9               	goto	l1738
  9931                           
  9932                           ;OverLoad_B1.c: 95: Load.Time++;
  9933  0084  3001               	movlw	1
  9934  0085  07A8               	addwf	(_Load^(0+256)+1),f
  9935  0086  3000               	movlw	0
  9936  0087  3DA9               	addwfc	((_Load+1)^(0+256)+1),f
  9937                           
  9938                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
  9939  0088  3000               	movlw	0
  9940  0089  0229               	subwf	((_Load+1)^(0+256)+1),w
  9941  008A  3005               	movlw	5
  9942  008B  1903               	skipnz
  9943  008C  0228               	subwf	(_Load^(0+256)+1),w
  9944  008D  1C03               	skipc
  9945  008E  0008               	return
  9946                           
  9947                           ;OverLoad_B1.c: 97: Load.Time = 0;
  9948  008F  01A8               	clrf	(_Load^(0+256)+1)
  9949  0090  01A9               	clrf	((_Load+1)^(0+256)+1)
  9950                           
  9951                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  9952  0091  1227               	bcf	_Load^(0+256),4
  9953                           
  9954                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  9955  0092  3001               	movlw	1
  9956  0093  0020               	movlb	0	; select bank0
  9957  0094  00AC               	movwf	Load_Main@i
  9958  0095  3000               	movlw	0
  9959  0096  00AD               	movwf	Load_Main@i+1
  9960  0097  082D               	movf	Load_Main@i+1,w
  9961  0098  3A80               	xorlw	128
  9962  0099  00A8               	movwf	??_Load_Main
  9963  009A  3080               	movlw	128
  9964  009B  0228               	subwf	??_Load_Main,w
  9965  009C  1D03               	skipz
  9966  009D  28A0               	goto	u12665
  9967  009E  3004               	movlw	4
  9968  009F  022C               	subwf	Load_Main@i,w
  9969  00A0                     u12665:	
  9970  00A0  1803               	btfsc	3,0
  9971  00A1  28D4               	goto	l10755
  9972  00A2                     l10749:	
  9973                           
  9974                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  9975  00A2  0020               	movlb	0	; select bank0
  9976  00A3  352C               	lslf	Load_Main@i,w
  9977  00A4  3E32               	addlw	(_Load+11)& (0+255)
  9978  00A5  0086               	movwf	6
  9979  00A6  3001               	movlw	1	; select bank2/3
  9980  00A7  0087               	movwf	7
  9981  00A8  3F40               	moviw [0]fsr1
  9982  00A9  00A8               	movwf	??_Load_Main
  9983  00AA  3F41               	moviw [1]fsr1
  9984  00AB  00A9               	movwf	??_Load_Main+1
  9985  00AC  0828               	movf	??_Load_Main,w
  9986  00AD  0022               	movlb	2	; select bank2
  9987  00AE  07AC               	addwf	(_Load^(0+256)+5),f
  9988  00AF  0020               	movlb	0	; select bank0
  9989  00B0  0829               	movf	??_Load_Main+1,w
  9990  00B1  0022               	movlb	2	; select bank2
  9991  00B2  3DAD               	addwfc	((_Load+1)^(0+256)+5),f
  9992                           
  9993                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  9994  00B3  0020               	movlb	0	; select bank0
  9995  00B4  352C               	lslf	Load_Main@i,w
  9996  00B5  3E3C               	addlw	(_Load+21)& (0+255)
  9997  00B6  0086               	movwf	6
  9998  00B7  3001               	movlw	1	; select bank2/3
  9999  00B8  0087               	movwf	7
 10000  00B9  3F40               	moviw [0]fsr1
 10001  00BA  00A8               	movwf	??_Load_Main
 10002  00BB  3F41               	moviw [1]fsr1
 10003  00BC  00A9               	movwf	??_Load_Main+1
 10004  00BD  0828               	movf	??_Load_Main,w
 10005  00BE  0022               	movlb	2	; select bank2
 10006  00BF  07AE               	addwf	(_Load^(0+256)+7),f
 10007  00C0  0020               	movlb	0	; select bank0
 10008  00C1  0829               	movf	??_Load_Main+1,w
 10009  00C2  0022               	movlb	2	; select bank2
 10010  00C3  3DAF               	addwfc	((_Load+1)^(0+256)+7),f
 10011  00C4  3001               	movlw	1
 10012  00C5  0020               	movlb	0	; select bank0
 10013  00C6  07AC               	addwf	Load_Main@i,f
 10014  00C7  3000               	movlw	0
 10015  00C8  3DAD               	addwfc	Load_Main@i+1,f
 10016  00C9  082D               	movf	Load_Main@i+1,w
 10017  00CA  3A80               	xorlw	128
 10018  00CB  00A8               	movwf	??_Load_Main
 10019  00CC  3080               	movlw	128
 10020  00CD  0228               	subwf	??_Load_Main,w
 10021  00CE  1D03               	skipz
 10022  00CF  28D2               	goto	u12675
 10023  00D0  3004               	movlw	4
 10024  00D1  022C               	subwf	Load_Main@i,w
 10025  00D2                     u12675:	
 10026  00D2  1C03               	skipc
 10027  00D3  28A2               	goto	l10749
 10028  00D4                     l10755:	
 10029                           
 10030                           ;OverLoad_B1.c: 103: }
 10031                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10032  00D4  3003               	movlw	3
 10033  00D5  0020               	movlb	0	; select bank0
 10034  00D6  00A0               	movwf	___lwdiv@divisor
 10035  00D7  3000               	movlw	0
 10036  00D8  00A1               	movwf	___lwdiv@divisor+1
 10037  00D9  0022               	movlb	2	; select bank2
 10038  00DA  082D               	movf	((_Load+1)^(0+256)+5),w
 10039  00DB  0020               	movlb	0	; select bank0
 10040  00DC  01A3               	clrf	___lwdiv@dividend+1
 10041  00DD  07A3               	addwf	___lwdiv@dividend+1,f
 10042  00DE  0022               	movlb	2	; select bank2
 10043  00DF  082C               	movf	(_Load^(0+256)+5),w
 10044  00E0  0020               	movlb	0	; select bank0
 10045  00E1  01A2               	clrf	___lwdiv@dividend
 10046  00E2  07A2               	addwf	___lwdiv@dividend,f
 10047  00E3  3192  223B  3180   	fcall	___lwdiv
 10048  00E6  0020               	movlb	0	; select bank0
 10049  00E7  0821               	movf	?___lwdiv+1,w
 10050  00E8  0022               	movlb	2	; select bank2
 10051  00E9  01AD               	clrf	((_Load+1)^(0+256)+5)
 10052  00EA  07AD               	addwf	((_Load+1)^(0+256)+5),f
 10053  00EB  0020               	movlb	0	; select bank0
 10054  00EC  0820               	movf	?___lwdiv,w
 10055  00ED  0022               	movlb	2	; select bank2
 10056  00EE  01AC               	clrf	(_Load^(0+256)+5)
 10057  00EF  07AC               	addwf	(_Load^(0+256)+5),f
 10058                           
 10059                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10060  00F0  3003               	movlw	3
 10061  00F1  0020               	movlb	0	; select bank0
 10062  00F2  00A0               	movwf	___lwdiv@divisor
 10063  00F3  3000               	movlw	0
 10064  00F4  00A1               	movwf	___lwdiv@divisor+1
 10065  00F5  0022               	movlb	2	; select bank2
 10066  00F6  082F               	movf	((_Load+1)^(0+256)+7),w
 10067  00F7  0020               	movlb	0	; select bank0
 10068  00F8  01A3               	clrf	___lwdiv@dividend+1
 10069  00F9  07A3               	addwf	___lwdiv@dividend+1,f
 10070  00FA  0022               	movlb	2	; select bank2
 10071  00FB  082E               	movf	(_Load^(0+256)+7),w
 10072  00FC  0020               	movlb	0	; select bank0
 10073  00FD  01A2               	clrf	___lwdiv@dividend
 10074  00FE  07A2               	addwf	___lwdiv@dividend,f
 10075  00FF  3192  223B  3180   	fcall	___lwdiv
 10076  0102  0020               	movlb	0	; select bank0
 10077  0103  0821               	movf	?___lwdiv+1,w
 10078  0104  0022               	movlb	2	; select bank2
 10079  0105  01AF               	clrf	((_Load+1)^(0+256)+7)
 10080  0106  07AF               	addwf	((_Load+1)^(0+256)+7),f
 10081  0107  0020               	movlb	0	; select bank0
 10082  0108  0820               	movf	?___lwdiv,w
 10083  0109  0022               	movlb	2	; select bank2
 10084  010A  01AE               	clrf	(_Load^(0+256)+7)
 10085  010B  07AE               	addwf	(_Load^(0+256)+7),f
 10086                           
 10087                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10088  010C  319E  2631  3180   	fcall	_setLoad_AH_AL_Restore
 10089                           
 10090                           ;OverLoad_B1.c: 108: if (Load.ADH > Load.ADL) {
 10091  010F  0022               	movlb	2	; select bank2
 10092  0110  082D               	movf	((_Load+1)^(0+256)+5),w
 10093  0111  022F               	subwf	((_Load+1)^(0+256)+7),w
 10094  0112  1D03               	skipz
 10095  0113  2916               	goto	u12685
 10096  0114  082C               	movf	(_Load^(0+256)+5),w
 10097  0115  022E               	subwf	(_Load^(0+256)+7),w
 10098  0116                     u12685:	
 10099  0116  1803               	skipnc
 10100  0117  0008               	return
 10101                           
 10102                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10103  0118  3005               	movlw	5
 10104  0119  3E27               	addlw	_Load& (0+255)
 10105  011A  0086               	movwf	6
 10106  011B  3001               	movlw	1	; select bank2/3
 10107  011C  0087               	movwf	7
 10108  011D  092E               	comf	(_Load^(0+256)+7),w
 10109  011E  0020               	movlb	0	; select bank0
 10110  011F  00A8               	movwf	??_Load_Main
 10111  0120  0022               	movlb	2	; select bank2
 10112  0121  092F               	comf	((_Load+1)^(0+256)+7),w
 10113  0122  0020               	movlb	0	; select bank0
 10114  0123  00A9               	movwf	??_Load_Main+1
 10115  0124  0AA8               	incf	??_Load_Main,f
 10116  0125  1903               	skipnz
 10117  0126  0AA9               	incf	??_Load_Main+1,f
 10118  0127  3F40               	moviw [0]fsr1
 10119  0128  0728               	addwf	??_Load_Main,w
 10120  0129  0022               	movlb	2	; select bank2
 10121  012A  00C6               	movwf	(_Load^(0+256)+31)
 10122  012B  3F41               	moviw [1]fsr1
 10123  012C  0020               	movlb	0	; select bank0
 10124  012D  3D29               	addwfc	??_Load_Main+1,w
 10125  012E  0022               	movlb	2	; select bank2
 10126  012F  00C7               	movwf	(_Load^(0+256)+32)
 10127                           
 10128                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10129  0130  01AC               	clrf	(_Load^(0+256)+5)
 10130  0131  01AD               	clrf	((_Load+1)^(0+256)+5)
 10131                           
 10132                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10133  0132  01AE               	clrf	(_Load^(0+256)+7)
 10134  0133  01AF               	clrf	((_Load+1)^(0+256)+7)
 10135                           
 10136                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10137  0134  1DA7               	btfss	_Load^(0+256),3
 10138  0135  2995               	goto	l10795
 10139                           
 10140                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10141  0136  3002               	movlw	2
 10142  0137  0250               	subwf	(_Load^(0+256)+41),w
 10143  0138  1803               	skipnc
 10144  0139  2995               	goto	l10795
 10145                           
 10146                           ;OverLoad_B1.c: 115: Load.Count++;
 10147  013A  3001               	movlw	1
 10148  013B  0020               	movlb	0	; select bank0
 10149  013C  00A8               	movwf	??_Load_Main
 10150  013D  0828               	movf	??_Load_Main,w
 10151  013E  0022               	movlb	2	; select bank2
 10152  013F  07D0               	addwf	(_Load^(0+256)+41),f
 10153                           
 10154                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
 10155  0140  319B  232A  3180   	fcall	_getDimmer_Load_Status
 10156  0143  0020               	movlb	0	; select bank0
 10157  0144  00A8               	movwf	??_Load_Main
 10158  0145  0828               	movf	??_Load_Main,w
 10159  0146  00AB               	movwf	Load_Main@Load_Status
 10160                           
 10161                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
 10162  0147  319D  2538  3180   	fcall	_getMain_Lights_Count
 10163  014A  0020               	movlb	0	; select bank0
 10164  014B  00A8               	movwf	??_Load_Main
 10165  014C  0828               	movf	??_Load_Main,w
 10166  014D  0022               	movlb	2	; select bank2
 10167  014E  00D3               	movwf	(_Load^(0+256)+44)
 10168                           
 10169                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
 10170  014F  0850               	movf	(_Load^(0+256)+41),w
 10171  0150  3A01               	xorlw	1
 10172  0151  1D03               	skipz
 10173  0152  295D               	goto	l10781
 10174                           
 10175                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
 10176  0153  3002               	movlw	2
 10177  0154  0020               	movlb	0	; select bank0
 10178  0155  00A8               	movwf	??_Load_Main
 10179  0156  0828               	movf	??_Load_Main,w
 10180  0157  0022               	movlb	2	; select bank2
 10181  0158  00D2               	movwf	(_Load^(0+256)+43)
 10182                           
 10183                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*50);
 10184  0159  30E8               	movlw	232
 10185  015A  00CC               	movwf	(_Load^(0+256)+37)
 10186  015B  3003               	movlw	3
 10187  015C  2968               	goto	L5
 10188  015D                     l10781:	
 10189                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
 10190                           
 10191  015D  0850               	movf	(_Load^(0+256)+41),w
 10192  015E  3A02               	xorlw	2
 10193  015F  1D03               	skipz
 10194  0160  2995               	goto	l10795
 10195                           
 10196                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
 10197  0161  0853               	movf	(_Load^(0+256)+44),w
 10198  0162  3A01               	xorlw	1
 10199  0163  1D03               	skipz
 10200  0164  296A               	goto	l10787
 10201                           
 10202                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.1*50);
 10203  0165  3037               	movlw	55
 10204  0166  00CC               	movwf	(_Load^(0+256)+37)
 10205  0167  3000               	movlw	0
 10206  0168                     L5:	
 10207  0168  00CD               	movwf	(_Load^(0+256)+38)
 10208                           
 10209                           ;OverLoad_B1.c: 124: } else {
 10210  0169  2995               	goto	l10795
 10211  016A                     l10787:	
 10212                           
 10213                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 10214  016A  0020               	movlb	0	; select bank0
 10215  016B  08AB               	movf	Load_Main@Load_Status,f
 10216  016C  1D03               	skipz
 10217  016D  2989               	goto	l10791
 10218                           
 10219                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 10220  016E  0022               	movlb	2	; select bank2
 10221  016F  0853               	movf	(_Load^(0+256)+44),w
 10222  0170  0020               	movlb	0	; select bank0
 10223  0171  00A8               	movwf	??_Load_Main
 10224  0172  01A9               	clrf	??_Load_Main+1
 10225  0173  0828               	movf	??_Load_Main,w
 10226  0174  00A0               	movwf	___wmul@multiplier
 10227  0175  0829               	movf	??_Load_Main+1,w
 10228  0176  00A1               	movwf	___wmul@multiplier+1
 10229  0177  3037               	movlw	55
 10230  0178  00A2               	movwf	___wmul@multiplicand
 10231  0179  3000               	movlw	0
 10232  017A  00A3               	movwf	___wmul@multiplicand+1
 10233  017B  319E  266A  3180   	fcall	___wmul
 10234  017E  0020               	movlb	0	; select bank0
 10235  017F  0821               	movf	?___wmul+1,w
 10236  0180  0022               	movlb	2	; select bank2
 10237  0181  01CD               	clrf	((_Load+1)^(0+256)+37)
 10238  0182  07CD               	addwf	((_Load+1)^(0+256)+37),f
 10239  0183  0020               	movlb	0	; select bank0
 10240  0184  0820               	movf	?___wmul,w
 10241  0185  0022               	movlb	2	; select bank2
 10242  0186  01CC               	clrf	(_Load^(0+256)+37)
 10243  0187  07CC               	addwf	(_Load^(0+256)+37),f
 10244                           
 10245                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 10246  0188  2995               	goto	l10795
 10247  0189                     l10791:	
 10248  0189  0020               	movlb	0	; select bank0
 10249  018A  082B               	movf	Load_Main@Load_Status,w
 10250  018B  3A01               	xorlw	1
 10251  018C  1D03               	skipz
 10252  018D  2995               	goto	l10795
 10253                           
 10254                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10255  018E  0022               	movlb	2	; select bank2
 10256  018F  0830               	movf	(_Load^(0+256)+9),w
 10257  0190  3E37               	addlw	55
 10258  0191  00CC               	movwf	(_Load^(0+256)+37)
 10259  0192  3000               	movlw	0
 10260  0193  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 10261  0194  00CD               	movwf	((_Load+1)^(0+256)+37)
 10262  0195                     l10795:	
 10263                           
 10264                           ;OverLoad_B1.c: 129: }
 10265                           ;OverLoad_B1.c: 130: }
 10266                           ;OverLoad_B1.c: 131: }
 10267                           ;OverLoad_B1.c: 132: }
 10268                           ;OverLoad_B1.c: 133: }
 10269                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 10270  0195  0022               	movlb	2	; select bank2
 10271  0196  084D               	movf	((_Load+1)^(0+256)+37),w
 10272  0197  0247               	subwf	((_Load+1)^(0+256)+31),w
 10273  0198  1D03               	skipz
 10274  0199  299C               	goto	u12765
 10275  019A  084C               	movf	(_Load^(0+256)+37),w
 10276  019B  0246               	subwf	(_Load^(0+256)+31),w
 10277  019C                     u12765:	
 10278  019C  1C03               	skipc
 10279  019D  29AB               	goto	l10805
 10280                           
 10281                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 10282  019E  3001               	movlw	1
 10283  019F  0020               	movlb	0	; select bank0
 10284  01A0  00A8               	movwf	??_Load_Main
 10285  01A1  0828               	movf	??_Load_Main,w
 10286  01A2  0022               	movlb	2	; select bank2
 10287  01A3  07D1               	addwf	(_Load^(0+256)+42),f
 10288                           
 10289                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 10290  01A4  0851               	movf	(_Load^(0+256)+42),w
 10291  01A5  0252               	subwf	(_Load^(0+256)+43),w
 10292  01A6  1803               	skipnc
 10293  01A7  0008               	return
 10294                           
 10295                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 10296  01A8  01D1               	clrf	(_Load^(0+256)+42)
 10297                           
 10298                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 10299  01A9  16A7               	bsf	_Load^(0+256),5
 10300                           
 10301                           ;OverLoad_B1.c: 161: }
 10302                           ;OverLoad_B1.c: 162: } else {
 10303  01AA  0008               	return
 10304  01AB                     l10805:	
 10305                           
 10306                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 10307  01AB  01D1               	clrf	(_Load^(0+256)+42)
 10308                           
 10309                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 10310  01AC  1DA7               	btfss	_Load^(0+256),3
 10311  01AD  0008               	return
 10312                           
 10313                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 10314  01AE  3001               	movlw	1
 10315  01AF  0020               	movlb	0	; select bank0
 10316  01B0  00A8               	movwf	??_Load_Main
 10317  01B1  0828               	movf	??_Load_Main,w
 10318  01B2  0022               	movlb	2	; select bank2
 10319  01B3  07D4               	addwf	(_Load^(0+256)+45),f
 10320                           
 10321                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 10322  01B4  3003               	movlw	3
 10323  01B5  0254               	subwf	(_Load^(0+256)+45),w
 10324  01B6  1C03               	skipc
 10325  01B7  0008               	return
 10326                           
 10327                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 10328  01B8  01D4               	clrf	(_Load^(0+256)+45)
 10329                           
 10330                           ;OverLoad_B1.c: 168: Load.OK = 1;
 10331  01B9  17A7               	bsf	_Load^(0+256),7
 10332                           
 10333                           ;OverLoad_B1.c: 169: Load.Run = 0;
 10334  01BA  11A7               	bcf	_Load^(0+256),3
 10335                           
 10336                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10337  01BB  01D0               	clrf	(_Load^(0+256)+41)
 10338                           
 10339                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 10340  01BC  0847               	movf	((_Load+1)^(0+256)+31),w
 10341  01BD  01B1               	clrf	((_Load+1)^(0+256)+9)
 10342  01BE  07B1               	addwf	((_Load+1)^(0+256)+9),f
 10343  01BF  0846               	movf	(_Load^(0+256)+31),w
 10344  01C0  01B0               	clrf	(_Load^(0+256)+9)
 10345  01C1  07B0               	addwf	(_Load^(0+256)+9),f
 10346                           
 10347                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 10348  01C2  3003               	movlw	3
 10349  01C3  0020               	movlb	0	; select bank0
 10350  01C4  00A8               	movwf	??_Load_Main
 10351  01C5  0828               	movf	??_Load_Main,w
 10352  01C6  0022               	movlb	2	; select bank2
 10353  01C7  00D2               	movwf	(_Load^(0+256)+43)
 10354                           
 10355                           ;OverLoad_B1.c: 176: }
 10356                           ;OverLoad_B1.c: 177: }
 10357                           ;OverLoad_B1.c: 200: }
 10358                           ;OverLoad_B1.c: 201: }
 10359                           ;OverLoad_B1.c: 202: }
 10360                           ;OverLoad_B1.c: 203: } else {
 10361  01C8  0008               	return
 10362  01C9                     l1738:	
 10363                           
 10364                           ;OverLoad_B1.c: 204: Load.ADtoGO = 1;
 10365  01C9  1627               	bsf	_Load^(0+256),4
 10366                           
 10367                           ;OverLoad_B1.c: 205: }
 10368                           ;OverLoad_B1.c: 206: } else {
 10369  01CA  0008               	return
 10370  01CB                     l1737:	
 10371                           
 10372                           ;OverLoad_B1.c: 207: if (Load.LightsON == 1) {
 10373  01CB  1D27               	btfss	_Load^(0+256),2
 10374  01CC  29DE               	goto	l10843
 10375                           
 10376                           ;OverLoad_B1.c: 208: Load.LightsON = 0;
 10377  01CD  1127               	bcf	_Load^(0+256),2
 10378                           
 10379                           ;OverLoad_B1.c: 210: Load.ADtoGO = 0;
 10380  01CE  1227               	bcf	_Load^(0+256),4
 10381                           
 10382                           ;OverLoad_B1.c: 211: Load.Time = 0;
 10383  01CF  01A8               	clrf	(_Load^(0+256)+1)
 10384  01D0  01A9               	clrf	((_Load+1)^(0+256)+1)
 10385                           
 10386                           ;OverLoad_B1.c: 212: setLoad_AH_AL_Restore();
 10387  01D1  319E  2631  3180   	fcall	_setLoad_AH_AL_Restore
 10388                           
 10389                           ;OverLoad_B1.c: 214: Load.ErrorCount = 0;
 10390  01D4  0022               	movlb	2	; select bank2
 10391  01D5  01D1               	clrf	(_Load^(0+256)+42)
 10392                           
 10393                           ;OverLoad_B1.c: 215: Load.SafeCount = 0;
 10394  01D6  01D4               	clrf	(_Load^(0+256)+45)
 10395                           
 10396                           ;OverLoad_B1.c: 217: Load.ADH = 0;
 10397  01D7  01AC               	clrf	(_Load^(0+256)+5)
 10398  01D8  01AD               	clrf	((_Load+1)^(0+256)+5)
 10399                           
 10400                           ;OverLoad_B1.c: 218: Load.ADL = 0;
 10401  01D9  01AE               	clrf	(_Load^(0+256)+7)
 10402  01DA  01AF               	clrf	((_Load+1)^(0+256)+7)
 10403                           
 10404                           ;OverLoad_B1.c: 224: Load.Run = 0;
 10405  01DB  11A7               	bcf	_Load^(0+256),3
 10406                           
 10407                           ;OverLoad_B1.c: 225: Load.Count = 0;
 10408  01DC  01D0               	clrf	(_Load^(0+256)+41)
 10409                           
 10410                           ;OverLoad_B1.c: 226: Load.OK = 0;
 10411  01DD  13A7               	bcf	_Load^(0+256),7
 10412  01DE                     l10843:	
 10413                           
 10414                           ;OverLoad_B1.c: 248: }
 10415                           ;OverLoad_B1.c: 249: if (Load.ERROR == 1) {
 10416  01DE  1EA7               	btfss	_Load^(0+256),5
 10417  01DF  0008               	return
 10418                           
 10419                           ;OverLoad_B1.c: 250: Load.ErrorTime++;
 10420  01E0  3001               	movlw	1
 10421  01E1  07AA               	addwf	(_Load^(0+256)+3),f
 10422  01E2  3000               	movlw	0
 10423  01E3  3DAB               	addwfc	((_Load+1)^(0+256)+3),f
 10424                           
 10425                           ;OverLoad_B1.c: 251: if (Load.ErrorTime >= 1000) {
 10426  01E4  3003               	movlw	3
 10427  01E5  022B               	subwf	((_Load+1)^(0+256)+3),w
 10428  01E6  30E8               	movlw	232
 10429  01E7  1903               	skipnz
 10430  01E8  022A               	subwf	(_Load^(0+256)+3),w
 10431  01E9  1C03               	skipc
 10432  01EA  0008               	return
 10433                           
 10434                           ;OverLoad_B1.c: 252: Load.ErrorTime = 0;
 10435  01EB  01AA               	clrf	(_Load^(0+256)+3)
 10436  01EC  01AB               	clrf	((_Load+1)^(0+256)+3)
 10437                           
 10438                           ;OverLoad_B1.c: 253: Load.ERROR = 0;
 10439  01ED  12A7               	bcf	_Load^(0+256),5
 10440                           
 10441                           ;OverLoad_B1.c: 254: }
 10442                           ;OverLoad_B1.c: 255: }
 10443                           ;OverLoad_B1.c: 256: }
 10444                           ;OverLoad_B1.c: 257: } else {
 10445  01EE  0008               	return
 10446  01EF                     l1727:	
 10447                           
 10448                           ;OverLoad_B1.c: 258: if (myMain.PowerON == 1) {
 10449  01EF  0021               	movlb	1	; select bank1
 10450  01F0  1C20               	btfss	_myMain^(0+128),0
 10451  01F1  0008               	return
 10452                           
 10453                           ;OverLoad_B1.c: 259: Load.Enable = 1;
 10454  01F2  0022               	movlb	2	; select bank2
 10455  01F3  1427               	bsf	_Load^(0+256),0
 10456  01F4  0008               	return
 10457  01F5                     __end_of_Load_Main:	
 10458                           
 10459                           	psect	text52
 10460  1D38                     __ptext52:	
 10461 ;; *************** function _getMain_Lights_Count *****************
 10462 ;; Defined at:
 10463 ;;		line 467 in file "../src/Main_B1.c"
 10464 ;; Parameters:    Size  Location     Type
 10465 ;;		None
 10466 ;; Auto vars:     Size  Location     Type
 10467 ;;  status2         1    2[BANK0 ] unsigned char 
 10468 ;;  status1         1    1[BANK0 ] unsigned char 
 10469 ;;  count           1    0[BANK0 ] unsigned char 
 10470 ;; Return value:  Size  Location     Type
 10471 ;;                  1    wreg      unsigned char 
 10472 ;; Registers used:
 10473 ;;		wreg, status,2, status,0
 10474 ;; Tracked objects:
 10475 ;;		On entry : 0/0
 10476 ;;		On exit  : 0/0
 10477 ;;		Unchanged: 0/0
 10478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10480 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;Total ram usage:        3 bytes
 10484 ;; Hardware stack levels used:    1
 10485 ;; Hardware stack levels required when called:    5
 10486 ;; This function calls:
 10487 ;;		Nothing
 10488 ;; This function is called by:
 10489 ;;		_Load_Main
 10490 ;; This function uses a non-reentrant model
 10491 ;;
 10492                           
 10493                           
 10494                           ;psect for function _getMain_Lights_Count
 10495  1D38                     _getMain_Lights_Count:	
 10496                           
 10497                           ;Main_B1.c: 468: char count = 0;
 10498                           
 10499                           ;incstack = 0
 10500                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10501  1D38  0020               	movlb	0	; select bank0
 10502  1D39  01A0               	clrf	getMain_Lights_Count@count
 10503                           
 10504                           ;Main_B1.c: 472: char status1 = 0;
 10505  1D3A  01A1               	clrf	getMain_Lights_Count@status1
 10506                           
 10507                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 10508  1D3B  3000               	movlw	0
 10509  1D3C  0022               	movlb	2	; select bank2
 10510  1D3D  1956               	btfsc	(_DimmerLights1^(0+256)+1),2	;volatile
 10511  1D3E  3001               	movlw	1
 10512  1D3F  0020               	movlb	0	; select bank0
 10513  1D40  00A1               	movwf	getMain_Lights_Count@status1
 10514                           
 10515                           ;Main_B1.c: 476: char status2 = 0;
 10516  1D41  01A2               	clrf	getMain_Lights_Count@status2
 10517                           
 10518                           ;Main_B1.c: 477: status2 = DimmerLights2.StatusFlag == 1 ? 1 : 0;
 10519  1D42  3000               	movlw	0
 10520  1D43  0023               	movlb	3	; select bank3
 10521  1D44  193F               	btfsc	(_DimmerLights2^(0+384)+1),2	;volatile
 10522  1D45  3001               	movlw	1
 10523  1D46  0020               	movlb	0	; select bank0
 10524  1D47  00A2               	movwf	getMain_Lights_Count@status2
 10525                           
 10526                           ;Main_B1.c: 501: return count = (status1 + status2);
 10527  1D48  0821               	movf	getMain_Lights_Count@status1,w
 10528  1D49  0722               	addwf	getMain_Lights_Count@status2,w
 10529  1D4A  00A0               	movwf	getMain_Lights_Count@count
 10530  1D4B  0008               	return
 10531  1D4C                     __end_of_getMain_Lights_Count:	
 10532                           
 10533                           	psect	text53
 10534  1B2A                     __ptext53:	
 10535 ;; *************** function _getDimmer_Load_Status *****************
 10536 ;; Defined at:
 10537 ;;		line 888 in file "../src/Dimmer_B1.c"
 10538 ;; Parameters:    Size  Location     Type
 10539 ;;		None
 10540 ;; Auto vars:     Size  Location     Type
 10541 ;;  status          1    0[BANK0 ] unsigned char 
 10542 ;; Return value:  Size  Location     Type
 10543 ;;                  1    wreg      unsigned char 
 10544 ;; Registers used:
 10545 ;;		wreg, status,2
 10546 ;; Tracked objects:
 10547 ;;		On entry : 0/0
 10548 ;;		On exit  : 0/0
 10549 ;;		Unchanged: 0/0
 10550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10554 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10555 ;;Total ram usage:        1 bytes
 10556 ;; Hardware stack levels used:    1
 10557 ;; Hardware stack levels required when called:    5
 10558 ;; This function calls:
 10559 ;;		Nothing
 10560 ;; This function is called by:
 10561 ;;		_Load_Main
 10562 ;; This function uses a non-reentrant model
 10563 ;;
 10564                           
 10565                           
 10566                           ;psect for function _getDimmer_Load_Status
 10567  1B2A                     _getDimmer_Load_Status:	
 10568                           
 10569                           ;Dimmer_B1.c: 889: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10570                           
 10571                           ;incstack = 0
 10572                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10573  1B2A  3000               	movlw	0
 10574  1B2B  0021               	movlb	1	; select bank1
 10575  1B2C  19C6               	btfsc	_Dimmer^(0+128),3	;volatile
 10576  1B2D  3001               	movlw	1
 10577  1B2E  0020               	movlb	0	; select bank0
 10578  1B2F  00A0               	movwf	getDimmer_Load_Status@status
 10579                           
 10580                           ;Dimmer_B1.c: 890: return status;
 10581  1B30  0820               	movf	getDimmer_Load_Status@status,w
 10582  1B31  0008               	return
 10583  1B32                     __end_of_getDimmer_Load_Status:	
 10584                           
 10585                           	psect	text54
 10586  1B22                     __ptext54:	
 10587 ;; *************** function _getDimmer_LoadGO *****************
 10588 ;; Defined at:
 10589 ;;		line 623 in file "../src/Dimmer_B1.c"
 10590 ;; Parameters:    Size  Location     Type
 10591 ;;		None
 10592 ;; Auto vars:     Size  Location     Type
 10593 ;;  loadgo          1    0[BANK0 ] unsigned char 
 10594 ;; Return value:  Size  Location     Type
 10595 ;;                  1    wreg      unsigned char 
 10596 ;; Registers used:
 10597 ;;		wreg, status,2
 10598 ;; Tracked objects:
 10599 ;;		On entry : 0/0
 10600 ;;		On exit  : 0/0
 10601 ;;		Unchanged: 0/0
 10602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;Total ram usage:        1 bytes
 10608 ;; Hardware stack levels used:    1
 10609 ;; Hardware stack levels required when called:    5
 10610 ;; This function calls:
 10611 ;;		Nothing
 10612 ;; This function is called by:
 10613 ;;		_Load_Main
 10614 ;; This function uses a non-reentrant model
 10615 ;;
 10616                           
 10617                           
 10618                           ;psect for function _getDimmer_LoadGO
 10619  1B22                     _getDimmer_LoadGO:	
 10620                           
 10621                           ;Dimmer_B1.c: 624: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 10622                           
 10623                           ;incstack = 0
 10624                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 10625  1B22  3000               	movlw	0
 10626  1B23  0021               	movlb	1	; select bank1
 10627  1B24  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 10628  1B25  3001               	movlw	1
 10629  1B26  0020               	movlb	0	; select bank0
 10630  1B27  00A0               	movwf	getDimmer_LoadGO@loadgo
 10631                           
 10632                           ;Dimmer_B1.c: 625: return loadgo;
 10633  1B28  0820               	movf	getDimmer_LoadGO@loadgo,w
 10634  1B29  0008               	return
 10635  1B2A                     __end_of_getDimmer_LoadGO:	
 10636                           
 10637                           	psect	text55
 10638  10DD                     __ptext55:	
 10639 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 10640 ;; Defined at:
 10641 ;;		line 832 in file "../src/Dimmer_B1.c"
 10642 ;; Parameters:    Size  Location     Type
 10643 ;;		None
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;  i               2    4[BANK0 ] int 
 10646 ;;  adjsw           1    6[BANK0 ] unsigned char 
 10647 ;;  count           1    3[BANK0 ] unsigned char 
 10648 ;; Return value:  Size  Location     Type
 10649 ;;                  1    wreg      unsigned char 
 10650 ;; Registers used:
 10651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10652 ;; Tracked objects:
 10653 ;;		On entry : 0/0
 10654 ;;		On exit  : 0/0
 10655 ;;		Unchanged: 0/0
 10656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10658 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;Total ram usage:        5 bytes
 10662 ;; Hardware stack levels used:    1
 10663 ;; Hardware stack levels required when called:    6
 10664 ;; This function calls:
 10665 ;;		_DimmerLightsPointSelect
 10666 ;; This function is called by:
 10667 ;;		_Load_Main
 10668 ;; This function uses a non-reentrant model
 10669 ;;
 10670                           
 10671                           
 10672                           ;psect for function _getAll_DimmerLights_AdjSw
 10673  10DD                     _getAll_DimmerLights_AdjSw:	
 10674                           
 10675                           ;Dimmer_B1.c: 833: char count = 2;
 10676                           
 10677                           ;incstack = 0
 10678                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10679  10DD  3002               	movlw	2
 10680  10DE  0020               	movlb	0	; select bank0
 10681  10DF  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10682  10E0  0822               	movf	??_getAll_DimmerLights_AdjSw,w
 10683  10E1  00A3               	movwf	getAll_DimmerLights_AdjSw@count
 10684                           
 10685                           ;Dimmer_B1.c: 834: char adjsw = 0;
 10686  10E2  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 10687                           
 10688                           ;Dimmer_B1.c: 836: for (int i = 0; i < count; i++) {
 10689  10E3  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 10690  10E4  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 10691  10E5                     l10015:	
 10692  10E5  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 10693  10E6  3A80               	xorlw	128
 10694  10E7  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10695  10E8  3080               	movlw	128
 10696  10E9  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 10697  10EA  1D03               	skipz
 10698  10EB  28EE               	goto	u11365
 10699  10EC  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 10700  10ED  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 10701  10EE                     u11365:	
 10702  10EE  1803               	btfsc	3,0
 10703  10EF  2907               	goto	l10017
 10704                           
 10705                           ;Dimmer_B1.c: 837: DimmerLightsPointSelect(i + 1);
 10706  10F0  0020               	movlb	0	; select bank0
 10707  10F1  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 10708  10F2  3E01               	addlw	1
 10709  10F3  319C  2489  3190   	fcall	_DimmerLightsPointSelect
 10710                           
 10711                           ;Dimmer_B1.c: 838: if (adjsw == 0) {
 10712  10F6  0020               	movlb	0	; select bank0
 10713  10F7  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 10714  10F8  1D03               	skipz
 10715  10F9  2902               	goto	l10013
 10716                           
 10717                           ;Dimmer_B1.c: 839: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 10718  10FA  0A6F               	incf	_DimmerLights,w
 10719  10FB  0086               	movwf	6
 10720  10FC  3001               	movlw	1	; select bank2/3
 10721  10FD  0087               	movwf	7
 10722  10FE  3000               	movlw	0
 10723  10FF  1B01               	btfsc	1,6
 10724  1100  3001               	movlw	1
 10725  1101  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 10726  1102                     l10013:	
 10727  1102  3001               	movlw	1
 10728  1103  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 10729  1104  3000               	movlw	0
 10730  1105  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 10731  1106  28E5               	goto	l10015
 10732  1107                     l10017:	
 10733                           
 10734                           ;Dimmer_B1.c: 840: }
 10735                           ;Dimmer_B1.c: 841: }
 10736                           ;Dimmer_B1.c: 842: return adjsw;
 10737  1107  0020               	movlb	0	; select bank0
 10738  1108  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 10739  1109  0008               	return
 10740  110A                     __end_of_getAll_DimmerLights_AdjSw:	
 10741                           
 10742                           	psect	text56
 10743  1E6A                     __ptext56:	
 10744 ;; *************** function ___wmul *****************
 10745 ;; Defined at:
 10746 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 10747 ;; Parameters:    Size  Location     Type
 10748 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10749 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10750 ;; Auto vars:     Size  Location     Type
 10751 ;;  product         2    4[BANK0 ] unsigned int 
 10752 ;; Return value:  Size  Location     Type
 10753 ;;                  2    0[BANK0 ] unsigned int 
 10754 ;; Registers used:
 10755 ;;		wreg, status,2, status,0
 10756 ;; Tracked objects:
 10757 ;;		On entry : 0/0
 10758 ;;		On exit  : 0/0
 10759 ;;		Unchanged: 0/0
 10760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10761 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;Total ram usage:        6 bytes
 10766 ;; Hardware stack levels used:    1
 10767 ;; Hardware stack levels required when called:    5
 10768 ;; This function calls:
 10769 ;;		Nothing
 10770 ;; This function is called by:
 10771 ;;		_Load_Main
 10772 ;; This function uses a non-reentrant model
 10773 ;;
 10774                           
 10775                           
 10776                           ;psect for function ___wmul
 10777  1E6A                     ___wmul:	
 10778                           
 10779                           ;incstack = 0
 10780                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10781  1E6A  0020               	movlb	0	; select bank0
 10782  1E6B  01A4               	clrf	___wmul@product
 10783  1E6C  01A5               	clrf	___wmul@product+1
 10784  1E6D                     l10417:	
 10785  1E6D  1C20               	btfss	___wmul@multiplier,0
 10786  1E6E  2E73               	goto	l2870
 10787  1E6F  0822               	movf	___wmul@multiplicand,w
 10788  1E70  07A4               	addwf	___wmul@product,f
 10789  1E71  0823               	movf	___wmul@multiplicand+1,w
 10790  1E72  3DA5               	addwfc	___wmul@product+1,f
 10791  1E73                     l2870:	
 10792  1E73  3001               	movlw	1
 10793  1E74                     u12045:	
 10794  1E74  35A2               	lslf	___wmul@multiplicand,f
 10795  1E75  0DA3               	rlf	___wmul@multiplicand+1,f
 10796  1E76  0B89               	decfsz	9,f
 10797  1E77  2E74               	goto	u12045
 10798  1E78  3001               	movlw	1
 10799  1E79                     u12055:	
 10800  1E79  36A1               	lsrf	___wmul@multiplier+1,f
 10801  1E7A  0CA0               	rrf	___wmul@multiplier,f
 10802  1E7B  0B89               	decfsz	9,f
 10803  1E7C  2E79               	goto	u12055
 10804  1E7D  0821               	movf	___wmul@multiplier+1,w
 10805  1E7E  0420               	iorwf	___wmul@multiplier,w
 10806  1E7F  1D03               	skipz
 10807  1E80  2E6D               	goto	l10417
 10808  1E81  0825               	movf	___wmul@product+1,w
 10809  1E82  01A1               	clrf	?___wmul+1
 10810  1E83  07A1               	addwf	?___wmul+1,f
 10811  1E84  0824               	movf	___wmul@product,w
 10812  1E85  01A0               	clrf	?___wmul
 10813  1E86  07A0               	addwf	?___wmul,f
 10814  1E87  0008               	return
 10815  1E88                     __end_of___wmul:	
 10816                           
 10817                           	psect	text57
 10818  123B                     __ptext57:	
 10819 ;; *************** function ___lwdiv *****************
 10820 ;; Defined at:
 10821 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10822 ;; Parameters:    Size  Location     Type
 10823 ;;  divisor         2    0[BANK0 ] unsigned int 
 10824 ;;  dividend        2    2[BANK0 ] unsigned int 
 10825 ;; Auto vars:     Size  Location     Type
 10826 ;;  quotient        2    6[BANK0 ] unsigned int 
 10827 ;;  counter         1    5[BANK0 ] unsigned char 
 10828 ;; Return value:  Size  Location     Type
 10829 ;;                  2    0[BANK0 ] unsigned int 
 10830 ;; Registers used:
 10831 ;;		wreg, status,2, status,0
 10832 ;; Tracked objects:
 10833 ;;		On entry : 0/0
 10834 ;;		On exit  : 0/0
 10835 ;;		Unchanged: 0/0
 10836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10837 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10838 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;Total ram usage:        8 bytes
 10842 ;; Hardware stack levels used:    1
 10843 ;; Hardware stack levels required when called:    5
 10844 ;; This function calls:
 10845 ;;		Nothing
 10846 ;; This function is called by:
 10847 ;;		_Load_Main
 10848 ;; This function uses a non-reentrant model
 10849 ;;
 10850                           
 10851                           
 10852                           ;psect for function ___lwdiv
 10853  123B                     ___lwdiv:	
 10854                           
 10855                           ;incstack = 0
 10856                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10857  123B  0020               	movlb	0	; select bank0
 10858  123C  01A6               	clrf	___lwdiv@quotient
 10859  123D  01A7               	clrf	___lwdiv@quotient+1
 10860  123E  0821               	movf	___lwdiv@divisor+1,w
 10861  123F  0420               	iorwf	___lwdiv@divisor,w
 10862  1240  1903               	skipnz
 10863  1241  2A6B               	goto	l10449
 10864  1242  01A5               	clrf	___lwdiv@counter
 10865  1243  0AA5               	incf	___lwdiv@counter,f
 10866  1244                     l10437:	
 10867  1244  1BA1               	btfsc	___lwdiv@divisor+1,7
 10868  1245  2A50               	goto	l10439
 10869  1246  3001               	movlw	1
 10870  1247                     u12085:	
 10871  1247  35A0               	lslf	___lwdiv@divisor,f
 10872  1248  0DA1               	rlf	___lwdiv@divisor+1,f
 10873  1249  0B89               	decfsz	9,f
 10874  124A  2A47               	goto	u12085
 10875  124B  3001               	movlw	1
 10876  124C  00A4               	movwf	??___lwdiv
 10877  124D  0824               	movf	??___lwdiv,w
 10878  124E  07A5               	addwf	___lwdiv@counter,f
 10879  124F  2A44               	goto	l10437
 10880  1250                     l10439:	
 10881  1250  3001               	movlw	1
 10882  1251                     u12105:	
 10883  1251  35A6               	lslf	___lwdiv@quotient,f
 10884  1252  0DA7               	rlf	___lwdiv@quotient+1,f
 10885  1253  0B89               	decfsz	9,f
 10886  1254  2A51               	goto	u12105
 10887  1255  0821               	movf	___lwdiv@divisor+1,w
 10888  1256  0223               	subwf	___lwdiv@dividend+1,w
 10889  1257  1D03               	skipz
 10890  1258  2A5B               	goto	u12115
 10891  1259  0820               	movf	___lwdiv@divisor,w
 10892  125A  0222               	subwf	___lwdiv@dividend,w
 10893  125B                     u12115:	
 10894  125B  1C03               	skipc
 10895  125C  2A62               	goto	l10445
 10896  125D  0820               	movf	___lwdiv@divisor,w
 10897  125E  02A2               	subwf	___lwdiv@dividend,f
 10898  125F  0821               	movf	___lwdiv@divisor+1,w
 10899  1260  3BA3               	subwfb	___lwdiv@dividend+1,f
 10900  1261  1426               	bsf	___lwdiv@quotient,0
 10901  1262                     l10445:	
 10902  1262  3001               	movlw	1
 10903  1263                     u12125:	
 10904  1263  36A1               	lsrf	___lwdiv@divisor+1,f
 10905  1264  0CA0               	rrf	___lwdiv@divisor,f
 10906  1265  0B89               	decfsz	9,f
 10907  1266  2A63               	goto	u12125
 10908  1267  3001               	movlw	1
 10909  1268  02A5               	subwf	___lwdiv@counter,f
 10910  1269  1D03               	btfss	3,2
 10911  126A  2A50               	goto	l10439
 10912  126B                     l10449:	
 10913  126B  0827               	movf	___lwdiv@quotient+1,w
 10914  126C  01A1               	clrf	?___lwdiv+1
 10915  126D  07A1               	addwf	?___lwdiv+1,f
 10916  126E  0826               	movf	___lwdiv@quotient,w
 10917  126F  01A0               	clrf	?___lwdiv
 10918  1270  07A0               	addwf	?___lwdiv,f
 10919  1271  0008               	return
 10920  1272                     __end_of___lwdiv:	
 10921                           
 10922                           	psect	text58
 10923  1AC5                     __ptext58:	
 10924 ;; *************** function _Load_Initialization *****************
 10925 ;; Defined at:
 10926 ;;		line 9 in file "../src/OverLoad_B1.c"
 10927 ;; Parameters:    Size  Location     Type
 10928 ;;		None
 10929 ;; Auto vars:     Size  Location     Type
 10930 ;;		None
 10931 ;; Return value:  Size  Location     Type
 10932 ;;		None               void
 10933 ;; Registers used:
 10934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10935 ;; Tracked objects:
 10936 ;;		On entry : 0/0
 10937 ;;		On exit  : 0/0
 10938 ;;		Unchanged: 0/0
 10939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10944 ;;Total ram usage:        0 bytes
 10945 ;; Hardware stack levels used:    1
 10946 ;; Hardware stack levels required when called:    6
 10947 ;; This function calls:
 10948 ;;		_setLoad_AH_AL_Restore
 10949 ;; This function is called by:
 10950 ;;		_main
 10951 ;; This function uses a non-reentrant model
 10952 ;;
 10953                           
 10954                           
 10955                           ;psect for function _Load_Initialization
 10956  1AC5                     _Load_Initialization:	
 10957                           
 10958                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 10959                           
 10960                           ;incstack = 0
 10961                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10962  1AC5  319E  2631         	fcall	_setLoad_AH_AL_Restore
 10963  1AC7  0008               	return
 10964  1AC8                     __end_of_Load_Initialization:	
 10965                           
 10966                           	psect	text59
 10967  1E31                     __ptext59:	
 10968 ;; *************** function _setLoad_AH_AL_Restore *****************
 10969 ;; Defined at:
 10970 ;;		line 285 in file "../src/OverLoad_B1.c"
 10971 ;; Parameters:    Size  Location     Type
 10972 ;;		None
 10973 ;; Auto vars:     Size  Location     Type
 10974 ;;  i               1    1[BANK0 ] unsigned char 
 10975 ;; Return value:  Size  Location     Type
 10976 ;;		None               void
 10977 ;; Registers used:
 10978 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10979 ;; Tracked objects:
 10980 ;;		On entry : 0/0
 10981 ;;		On exit  : 0/0
 10982 ;;		Unchanged: 0/0
 10983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10985 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10986 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10988 ;;Total ram usage:        2 bytes
 10989 ;; Hardware stack levels used:    1
 10990 ;; Hardware stack levels required when called:    5
 10991 ;; This function calls:
 10992 ;;		Nothing
 10993 ;; This function is called by:
 10994 ;;		_Load_Initialization
 10995 ;;		_Load_Main
 10996 ;; This function uses a non-reentrant model
 10997 ;;
 10998                           
 10999                           
 11000                           ;psect for function _setLoad_AH_AL_Restore
 11001  1E31                     _setLoad_AH_AL_Restore:	
 11002                           
 11003                           ;OverLoad_B1.c: 286: char i;
 11004                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 11005                           
 11006                           ;incstack = 0
 11007                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11008  1E31  0020               	movlb	0	; select bank0
 11009  1E32  01A1               	clrf	setLoad_AH_AL_Restore@i
 11010  1E33                     L6:	
 11011  1E33  3005               	movlw	5
 11012  1E34  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11013  1E35  1803               	btfsc	3,0
 11014  1E36  0008               	return
 11015                           
 11016                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 11017  1E37  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11018  1E38  3E32               	addlw	(_Load+11)& (0+255)
 11019  1E39  0086               	movwf	6
 11020  1E3A  3001               	movlw	1	; select bank2/3
 11021  1E3B  0087               	movwf	7
 11022  1E3C  3000               	movlw	0
 11023  1E3D  3FC0               	movwi [0]fsr1
 11024  1E3E  3FC1               	movwi [1]fsr1
 11025                           
 11026                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 11027  1E3F  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11028  1E40  3E3C               	addlw	(_Load+21)& (0+255)
 11029  1E41  0086               	movwf	6
 11030  1E42  3001               	movlw	1	; select bank2/3
 11031  1E43  0087               	movwf	7
 11032  1E44  30FF               	movlw	255
 11033  1E45  3FC0               	movwi [0]fsr1
 11034  1E46  30FF               	movlw	255
 11035  1E47  3FC1               	movwi [1]fsr1
 11036  1E48  3001               	movlw	1
 11037  1E49  00A0               	movwf	??_setLoad_AH_AL_Restore
 11038  1E4A  0820               	movf	??_setLoad_AH_AL_Restore,w
 11039  1E4B  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11040  1E4C  2E33               	goto	L6
 11041  1E4D                     __end_of_setLoad_AH_AL_Restore:	
 11042                           
 11043                           	psect	text60
 11044  1B92                     __ptext60:	
 11045 ;; *************** function _LED_Main *****************
 11046 ;; Defined at:
 11047 ;;		line 47 in file "../src/LED_B1.c"
 11048 ;; Parameters:    Size  Location     Type
 11049 ;;		None
 11050 ;; Auto vars:     Size  Location     Type
 11051 ;;		None
 11052 ;; Return value:  Size  Location     Type
 11053 ;;		None               void
 11054 ;; Registers used:
 11055 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11056 ;; Tracked objects:
 11057 ;;		On entry : 0/0
 11058 ;;		On exit  : 0/0
 11059 ;;		Unchanged: 0/0
 11060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;Total ram usage:        0 bytes
 11066 ;; Hardware stack levels used:    1
 11067 ;; Hardware stack levels required when called:    7
 11068 ;; This function calls:
 11069 ;;		_setLED_Main
 11070 ;; This function is called by:
 11071 ;;		_main
 11072 ;; This function uses a non-reentrant model
 11073 ;;
 11074                           
 11075                           
 11076                           ;psect for function _LED_Main
 11077  1B92                     _LED_Main:	
 11078                           
 11079                           ;LED_B1.c: 53: setLED_Main(1);
 11080                           
 11081                           ;incstack = 0
 11082                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11083  1B92  3001               	movlw	1
 11084  1B93  3193  239F  319B   	fcall	_setLED_Main
 11085                           
 11086                           ;LED_B1.c: 56: setLED_Main(2);
 11087  1B96  3002               	movlw	2
 11088  1B97  3193  239F  319B   	fcall	_setLED_Main
 11089                           
 11090                           ;LED_B1.c: 62: setLED_Main(99);
 11091  1B9A  3063               	movlw	99
 11092  1B9B  3193  239F         	fcall	_setLED_Main
 11093  1B9D  0008               	return
 11094  1B9E                     __end_of_LED_Main:	
 11095                           
 11096                           	psect	text61
 11097  139F                     __ptext61:	
 11098 ;; *************** function _setLED_Main *****************
 11099 ;; Defined at:
 11100 ;;		line 221 in file "../src/LED_B1.c"
 11101 ;; Parameters:    Size  Location     Type
 11102 ;;  led             1    wreg     unsigned char 
 11103 ;; Auto vars:     Size  Location     Type
 11104 ;;  led             1    4[BANK0 ] unsigned char 
 11105 ;; Return value:  Size  Location     Type
 11106 ;;		None               void
 11107 ;; Registers used:
 11108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11109 ;; Tracked objects:
 11110 ;;		On entry : 0/0
 11111 ;;		On exit  : 0/0
 11112 ;;		Unchanged: 0/0
 11113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11115 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11116 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11117 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11118 ;;Total ram usage:        3 bytes
 11119 ;; Hardware stack levels used:    1
 11120 ;; Hardware stack levels required when called:    6
 11121 ;; This function calls:
 11122 ;;		_LedPointSelect
 11123 ;; This function is called by:
 11124 ;;		_LED_Main
 11125 ;; This function uses a non-reentrant model
 11126 ;;
 11127                           
 11128                           
 11129                           ;psect for function _setLED_Main
 11130  139F                     _setLED_Main:	
 11131                           
 11132                           ;incstack = 0
 11133                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11134                           ;setLED_Main@led stored from wreg
 11135  139F  0020               	movlb	0	; select bank0
 11136  13A0  00A4               	movwf	setLED_Main@led
 11137                           
 11138                           ;LED_B1.c: 222: LedPointSelect(led);
 11139  13A1  0824               	movf	setLED_Main@led,w
 11140  13A2  319E  26C6  3193   	fcall	_LedPointSelect
 11141                           
 11142                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11143  13A5  0021               	movlb	1	; select bank1
 11144  13A6  084D               	movf	_LED^(0+128),w
 11145  13A7  0086               	movwf	6
 11146  13A8  3001               	movlw	1	; select bank2/3
 11147  13A9  0087               	movwf	7
 11148  13AA  1C81               	btfss	1,1
 11149  13AB  0008               	return
 11150                           
 11151                           ;LED_B1.c: 224: LED->Time++;
 11152  13AC  0A4D               	incf	_LED^(0+128),w
 11153  13AD  0086               	movwf	6
 11154  13AE  3001               	movlw	1	; select bank2/3
 11155  13AF  0087               	movwf	7
 11156  13B0  3001               	movlw	1
 11157  13B1  0781               	addwf	1,f
 11158  13B2  3141               	addfsr 1,1
 11159  13B3  1803               	skipnc
 11160  13B4  0A81               	incf	1,f
 11161                           
 11162                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11163  13B5  0A4D               	incf	_LED^(0+128),w
 11164  13B6  0086               	movwf	6
 11165  13B7  3001               	movlw	1	; select bank2/3
 11166  13B8  0087               	movwf	7
 11167  13B9  3F40               	moviw [0]fsr1
 11168  13BA  0020               	movlb	0	; select bank0
 11169  13BB  00A2               	movwf	??_setLED_Main
 11170  13BC  3F41               	moviw [1]fsr1
 11171  13BD  00A3               	movwf	??_setLED_Main+1
 11172  13BE  3000               	movlw	0
 11173  13BF  0223               	subwf	??_setLED_Main+1,w
 11174  13C0  3032               	movlw	50
 11175  13C1  1903               	skipnz
 11176  13C2  0222               	subwf	??_setLED_Main,w
 11177  13C3  1C03               	skipc
 11178  13C4  0008               	return
 11179                           
 11180                           ;LED_B1.c: 226: LED->Time = 0;
 11181  13C5  0021               	movlb	1	; select bank1
 11182  13C6  0A4D               	incf	_LED^(0+128),w
 11183  13C7  0086               	movwf	6
 11184  13C8  3001               	movlw	1	; select bank2/3
 11185  13C9  0087               	movwf	7
 11186  13CA  3000               	movlw	0
 11187  13CB  3FC0               	movwi [0]fsr1
 11188  13CC  3FC1               	movwi [1]fsr1
 11189                           
 11190                           ;LED_B1.c: 228: if (led == 1) {
 11191  13CD  0020               	movlb	0	; select bank0
 11192  13CE  0824               	movf	setLED_Main@led,w
 11193  13CF  3A01               	xorlw	1
 11194                           
 11195                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11196  13D0  3008               	movlw	8
 11197  13D1  1903               	btfsc	3,2
 11198  13D2  068C               	xorwf	12,f
 11199                           
 11200                           ;LED_B1.c: 230: }
 11201                           ;LED_B1.c: 233: if (led == 2) {
 11202  13D3  0824               	movf	setLED_Main@led,w
 11203  13D4  3A02               	xorlw	2
 11204  13D5  1D03               	skipz
 11205  13D6  2BD9               	goto	l1065
 11206                           
 11207                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11208  13D7  3080               	movlw	128
 11209  13D8  068E               	xorwf	14,f
 11210  13D9                     l1065:	
 11211                           
 11212                           ;LED_B1.c: 235: }
 11213                           ;LED_B1.c: 243: if (led == 99) {
 11214  13D9  0824               	movf	setLED_Main@led,w
 11215  13DA  3A63               	xorlw	99
 11216  13DB  1D03               	skipz
 11217  13DC  0008               	return
 11218                           
 11219                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11220  13DD  3020               	movlw	32
 11221  13DE  068D               	xorwf	13,f
 11222  13DF  0008               	return
 11223  13E0                     __end_of_setLED_Main:	
 11224                           
 11225                           	psect	text62
 11226  1B86                     __ptext62:	
 11227 ;; *************** function _LED_Initialization *****************
 11228 ;; Defined at:
 11229 ;;		line 31 in file "../src/LED_B1.c"
 11230 ;; Parameters:    Size  Location     Type
 11231 ;;		None
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;		None
 11234 ;; Return value:  Size  Location     Type
 11235 ;;		None               void
 11236 ;; Registers used:
 11237 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11238 ;; Tracked objects:
 11239 ;;		On entry : 0/0
 11240 ;;		On exit  : 0/0
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11247 ;;Total ram usage:        0 bytes
 11248 ;; Hardware stack levels used:    1
 11249 ;; Hardware stack levels required when called:    8
 11250 ;; This function calls:
 11251 ;;		_setLED_Initialization
 11252 ;; This function is called by:
 11253 ;;		_main
 11254 ;; This function uses a non-reentrant model
 11255 ;;
 11256                           
 11257                           
 11258                           ;psect for function _LED_Initialization
 11259  1B86                     _LED_Initialization:	
 11260                           
 11261                           ;LED_B1.c: 33: setLED_Initialization(1);
 11262                           
 11263                           ;incstack = 0
 11264                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11265  1B86  3001               	movlw	1
 11266  1B87  319C  2453  319B   	fcall	_setLED_Initialization
 11267                           
 11268                           ;LED_B1.c: 36: setLED_Initialization(2);
 11269  1B8A  3002               	movlw	2
 11270  1B8B  319C  2453  319B   	fcall	_setLED_Initialization
 11271                           
 11272                           ;LED_B1.c: 42: setLED_Initialization(99);
 11273  1B8E  3063               	movlw	99
 11274  1B8F  319C  2453         	fcall	_setLED_Initialization
 11275  1B91  0008               	return
 11276  1B92                     __end_of_LED_Initialization:	
 11277                           
 11278                           	psect	text63
 11279  1C53                     __ptext63:	
 11280 ;; *************** function _setLED_Initialization *****************
 11281 ;; Defined at:
 11282 ;;		line 69 in file "../src/LED_B1.c"
 11283 ;; Parameters:    Size  Location     Type
 11284 ;;  led             1    wreg     unsigned char 
 11285 ;; Auto vars:     Size  Location     Type
 11286 ;;  led             1    4[BANK0 ] unsigned char 
 11287 ;; Return value:  Size  Location     Type
 11288 ;;		None               void
 11289 ;; Registers used:
 11290 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11291 ;; Tracked objects:
 11292 ;;		On entry : 0/0
 11293 ;;		On exit  : 0/0
 11294 ;;		Unchanged: 0/0
 11295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11299 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11300 ;;Total ram usage:        1 bytes
 11301 ;; Hardware stack levels used:    1
 11302 ;; Hardware stack levels required when called:    7
 11303 ;; This function calls:
 11304 ;;		_LedPointSelect
 11305 ;;		_setLED
 11306 ;; This function is called by:
 11307 ;;		_LED_Initialization
 11308 ;; This function uses a non-reentrant model
 11309 ;;
 11310                           
 11311                           
 11312                           ;psect for function _setLED_Initialization
 11313  1C53                     _setLED_Initialization:	
 11314                           
 11315                           ;incstack = 0
 11316                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11317                           ;setLED_Initialization@led stored from wreg
 11318  1C53  0020               	movlb	0	; select bank0
 11319  1C54  00A4               	movwf	setLED_Initialization@led
 11320                           
 11321                           ;LED_B1.c: 70: LedPointSelect(led);
 11322  1C55  0824               	movf	setLED_Initialization@led,w
 11323  1C56  319E  26C6  319C   	fcall	_LedPointSelect
 11324                           
 11325                           ;LED_B1.c: 71: LED->Enable = 1;
 11326  1C59  0021               	movlb	1	; select bank1
 11327  1C5A  084D               	movf	_LED^(0+128),w
 11328  1C5B  0086               	movwf	6
 11329  1C5C  3001               	movlw	1	; select bank2/3
 11330  1C5D  0087               	movwf	7
 11331  1C5E  1401               	bsf	1,0
 11332                           
 11333                           ;LED_B1.c: 72: setLED(led, 0);
 11334  1C5F  0020               	movlb	0	; select bank0
 11335  1C60  01A2               	clrf	setLED@command
 11336  1C61  0824               	movf	setLED_Initialization@led,w
 11337  1C62  3196  264F         	fcall	_setLED
 11338  1C64  0008               	return
 11339  1C65                     __end_of_setLED_Initialization:	
 11340                           
 11341                           	psect	text64
 11342  11CF                     __ptext64:	
 11343 ;; *************** function _Flash_Memory_Main *****************
 11344 ;; Defined at:
 11345 ;;		line 965 in file "../src/MCU_B1.c"
 11346 ;; Parameters:    Size  Location     Type
 11347 ;;		None
 11348 ;; Auto vars:     Size  Location     Type
 11349 ;;		None
 11350 ;; Return value:  Size  Location     Type
 11351 ;;		None               void
 11352 ;; Registers used:
 11353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11354 ;; Tracked objects:
 11355 ;;		On entry : 0/0
 11356 ;;		On exit  : 0/0
 11357 ;;		Unchanged: 0/0
 11358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11361 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11362 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;Total ram usage:        1 bytes
 11364 ;; Hardware stack levels used:    1
 11365 ;; Hardware stack levels required when called:    8
 11366 ;; This function calls:
 11367 ;;		_Flash_Memory_Modify
 11368 ;;		_getMain_LightsStatus
 11369 ;; This function is called by:
 11370 ;;		_main
 11371 ;; This function uses a non-reentrant model
 11372 ;;
 11373                           
 11374                           
 11375                           ;psect for function _Flash_Memory_Main
 11376  11CF                     _Flash_Memory_Main:	
 11377                           
 11378                           ;MCU_B1.c: 966: if (Memory.Modify == 1) {
 11379                           
 11380                           ;incstack = 0
 11381                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11382  11CF  0024               	movlb	4	; select bank4
 11383  11D0  1C44               	btfss	(_Memory^(0+512)+36),0
 11384  11D1  0008               	return
 11385                           
 11386                           ;MCU_B1.c: 967: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11387  11D2  319C  249C  3191   	fcall	_getMain_LightsStatus
 11388  11D5  3A00               	xorlw	0
 11389  11D6  3000               	movlw	0
 11390  11D7  1903               	skipnz
 11391  11D8  3001               	movlw	1
 11392  11D9  0020               	movlb	0	; select bank0
 11393  11DA  00A6               	movwf	??_Flash_Memory_Main
 11394  11DB  0DA6               	rlf	??_Flash_Memory_Main,f
 11395  11DC  0024               	movlb	4	; select bank4
 11396  11DD  0844               	movf	(_Memory^(0+512)+36),w
 11397  11DE  0020               	movlb	0	; select bank0
 11398  11DF  0626               	xorwf	??_Flash_Memory_Main,w
 11399  11E0  39FD               	andlw	-3
 11400  11E1  0626               	xorwf	??_Flash_Memory_Main,w
 11401  11E2  0024               	movlb	4	; select bank4
 11402  11E3  00C4               	movwf	(_Memory^(0+512)+36)
 11403                           
 11404                           ;MCU_B1.c: 968: if (Memory.GO == 1) {
 11405  11E4  1CC4               	btfss	(_Memory^(0+512)+36),1
 11406  11E5  29FF               	goto	l1333
 11407                           
 11408                           ;MCU_B1.c: 969: Memory.Runtime = 1;
 11409  11E6  15C4               	bsf	(_Memory^(0+512)+36),3
 11410                           
 11411                           ;MCU_B1.c: 970: Memory.Time++;
 11412  11E7  3001               	movlw	1
 11413  11E8  07C2               	addwf	(_Memory^(0+512)+34),f
 11414  11E9  3000               	movlw	0
 11415  11EA  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11416                           
 11417                           ;MCU_B1.c: 971: if (Memory.Time == 25) {
 11418  11EB  3022               	movlw	34
 11419  11EC  3E20               	addlw	_Memory& (0+255)
 11420  11ED  0086               	movwf	6
 11421  11EE  3002               	movlw	2	; select bank4/5
 11422  11EF  0087               	movwf	7
 11423  11F0  3F40               	moviw [0]fsr1
 11424  11F1  3A19               	xorlw	25
 11425  11F2  1D03               	skipz
 11426  11F3  29F6               	goto	u12315
 11427  11F4  3F41               	moviw [1]fsr1
 11428  11F5  3A00               	xorlw	0
 11429  11F6                     u12315:	
 11430  11F6  1D03               	skipz
 11431  11F7  0008               	return
 11432                           
 11433                           ;MCU_B1.c: 972: Memory.Time = 0;
 11434  11F8  01C2               	clrf	(_Memory^(0+512)+34)
 11435  11F9  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11436                           
 11437                           ;MCU_B1.c: 973: Memory.Modify = 0;
 11438  11FA  1044               	bcf	(_Memory^(0+512)+36),0
 11439                           
 11440                           ;MCU_B1.c: 974: Memory.GO = 0;
 11441  11FB  10C4               	bcf	(_Memory^(0+512)+36),1
 11442                           
 11443                           ;MCU_B1.c: 975: Flash_Memory_Modify();
 11444  11FC  3194  246E         	fcall	_Flash_Memory_Modify
 11445                           
 11446                           ;MCU_B1.c: 976: }
 11447                           ;MCU_B1.c: 977: } else {
 11448  11FE  0008               	return
 11449  11FF                     l1333:	
 11450                           
 11451                           ;MCU_B1.c: 978: if (Memory.Runtime == 1) {
 11452  11FF  1DC4               	btfss	(_Memory^(0+512)+36),3
 11453  1200  0008               	return
 11454                           
 11455                           ;MCU_B1.c: 979: Memory.Runtime = 0;
 11456  1201  11C4               	bcf	(_Memory^(0+512)+36),3
 11457                           
 11458                           ;MCU_B1.c: 980: Memory.Time = 0;
 11459  1202  01C2               	clrf	(_Memory^(0+512)+34)
 11460  1203  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11461  1204  0008               	return
 11462  1205                     __end_of_Flash_Memory_Main:	
 11463                           
 11464                           	psect	text65
 11465  146E                     __ptext65:	
 11466 ;; *************** function _Flash_Memory_Modify *****************
 11467 ;; Defined at:
 11468 ;;		line 1038 in file "../src/MCU_B1.c"
 11469 ;; Parameters:    Size  Location     Type
 11470 ;;		None
 11471 ;; Auto vars:     Size  Location     Type
 11472 ;;  i               1    5[BANK0 ] unsigned char 
 11473 ;; Return value:  Size  Location     Type
 11474 ;;		None               void
 11475 ;; Registers used:
 11476 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11477 ;; Tracked objects:
 11478 ;;		On entry : 0/0
 11479 ;;		On exit  : 0/0
 11480 ;;		Unchanged: 0/0
 11481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11483 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11486 ;;Total ram usage:        2 bytes
 11487 ;; Hardware stack levels used:    1
 11488 ;; Hardware stack levels required when called:    7
 11489 ;; This function calls:
 11490 ;;		_Flash_Memory_Erasing
 11491 ;;		_Flash_Memory_Read
 11492 ;;		_Flash_Memory_Write
 11493 ;;		_setMemory_Data
 11494 ;; This function is called by:
 11495 ;;		_Flash_Memory_Main
 11496 ;; This function uses a non-reentrant model
 11497 ;;
 11498                           
 11499                           
 11500                           ;psect for function _Flash_Memory_Modify
 11501  146E                     _Flash_Memory_Modify:	
 11502                           
 11503                           ;MCU_B1.c: 1039: char i = 0;
 11504                           
 11505                           ;incstack = 0
 11506                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11507  146E  0020               	movlb	0	; select bank0
 11508  146F  01A5               	clrf	Flash_Memory_Modify@i
 11509                           
 11510                           ;MCU_B1.c: 1040: for (i = 0; i < 32; i++) {
 11511  1470  01A5               	clrf	Flash_Memory_Modify@i
 11512  1471  3020               	movlw	32
 11513  1472  0225               	subwf	Flash_Memory_Modify@i,w
 11514  1473  1803               	btfsc	3,0
 11515  1474  2C8A               	goto	l10129
 11516  1475                     l10123:	
 11517                           
 11518                           ;MCU_B1.c: 1041: Memory.Data[i] = Flash_Memory_Read(i);
 11519  1475  0825               	movf	Flash_Memory_Modify@i,w
 11520  1476  319E  2617  3194   	fcall	_Flash_Memory_Read
 11521  1479  0020               	movlb	0	; select bank0
 11522  147A  00A4               	movwf	??_Flash_Memory_Modify
 11523  147B  0825               	movf	Flash_Memory_Modify@i,w
 11524  147C  3E20               	addlw	_Memory& (0+255)
 11525  147D  0086               	movwf	6
 11526  147E  3002               	movlw	2	; select bank4/5
 11527  147F  0087               	movwf	7
 11528  1480  0824               	movf	??_Flash_Memory_Modify,w
 11529  1481  0081               	movwf	1
 11530  1482  3001               	movlw	1
 11531  1483  00A4               	movwf	??_Flash_Memory_Modify
 11532  1484  0824               	movf	??_Flash_Memory_Modify,w
 11533  1485  07A5               	addwf	Flash_Memory_Modify@i,f
 11534  1486  3020               	movlw	32
 11535  1487  0225               	subwf	Flash_Memory_Modify@i,w
 11536  1488  1C03               	skipc
 11537  1489  2C75               	goto	l10123
 11538  148A                     l10129:	
 11539                           
 11540                           ;MCU_B1.c: 1042: }
 11541                           ;MCU_B1.c: 1043: setMemory_Data(0, product->Data[12]);
 11542  148A  0879               	movf	_product,w
 11543  148B  0086               	movwf	6
 11544  148C  3002               	movlw	2	; select bank4/5
 11545  148D  0087               	movwf	7
 11546  148E  3002               	movlw	2	; select bank4/5
 11547  148F  3F4C               	moviw [12]fsr1
 11548  1490  00A0               	movwf	setMemory_Data@data
 11549  1491  3000               	movlw	0
 11550  1492  319B  236E  3194   	fcall	_setMemory_Data
 11551                           
 11552                           ;MCU_B1.c: 1044: setMemory_Data(1, product->Data[13]);
 11553  1495  0879               	movf	_product,w
 11554  1496  0086               	movwf	6
 11555  1497  3002               	movlw	2	; select bank4/5
 11556  1498  0087               	movwf	7
 11557  1499  3002               	movlw	2	; select bank4/5
 11558  149A  3F4D               	moviw [13]fsr1
 11559  149B  0020               	movlb	0	; select bank0
 11560  149C  00A0               	movwf	setMemory_Data@data
 11561  149D  3001               	movlw	1
 11562  149E  319B  236E  3194   	fcall	_setMemory_Data
 11563                           
 11564                           ;MCU_B1.c: 1045: setMemory_Data(2, product->Data[14]);
 11565  14A1  0879               	movf	_product,w
 11566  14A2  0086               	movwf	6
 11567  14A3  3002               	movlw	2	; select bank4/5
 11568  14A4  0087               	movwf	7
 11569  14A5  3002               	movlw	2	; select bank4/5
 11570  14A6  3F4E               	moviw [14]fsr1
 11571  14A7  0020               	movlb	0	; select bank0
 11572  14A8  00A0               	movwf	setMemory_Data@data
 11573  14A9  3002               	movlw	2
 11574  14AA  319B  236E  3194   	fcall	_setMemory_Data
 11575                           
 11576                           ;MCU_B1.c: 1051: if (Memory.LoopSave == 1) {
 11577  14AD  0024               	movlb	4	; select bank4
 11578  14AE  1D44               	btfss	(_Memory^(0+512)+36),2
 11579  14AF  2CB4               	goto	l1356
 11580                           
 11581                           ;MCU_B1.c: 1052: Memory.LoopSave = 0;
 11582  14B0  1144               	bcf	(_Memory^(0+512)+36),2
 11583                           
 11584                           ;MCU_B1.c: 1053: myMain.FirstOpen = 0;
 11585  14B1  0021               	movlb	1	; select bank1
 11586  14B2  11A0               	bcf	_myMain^(0+128),3
 11587                           
 11588                           ;MCU_B1.c: 1054: myMain.First = 0;
 11589  14B3  12A0               	bcf	_myMain^(0+128),5
 11590  14B4                     l1356:	
 11591                           
 11592                           ;MCU_B1.c: 1056: }
 11593                           ;MCU_B1.c: 1057: GIE = 0;
 11594  14B4  138B               	bcf	11,7	;volatile
 11595                           
 11596                           ;MCU_B1.c: 1058: Flash_Memory_Erasing();
 11597  14B5  319B  237A  3194   	fcall	_Flash_Memory_Erasing
 11598                           
 11599                           ;MCU_B1.c: 1059: Flash_Memory_Write();
 11600  14B8  3191  210A         	fcall	_Flash_Memory_Write
 11601                           
 11602                           ;MCU_B1.c: 1060: GIE = 1;
 11603  14BA  178B               	bsf	11,7	;volatile
 11604  14BB  0008               	return
 11605  14BC                     __end_of_Flash_Memory_Modify:	
 11606                           
 11607                           	psect	text66
 11608  1B7A                     __ptext66:	
 11609 ;; *************** function _Flash_Memory_Erasing *****************
 11610 ;; Defined at:
 11611 ;;		line 1027 in file "../src/MCU_B1.c"
 11612 ;; Parameters:    Size  Location     Type
 11613 ;;		None
 11614 ;; Auto vars:     Size  Location     Type
 11615 ;;		None
 11616 ;; Return value:  Size  Location     Type
 11617 ;;		None               void
 11618 ;; Registers used:
 11619 ;;		wreg, status,2, status,0, pclath, cstack
 11620 ;; Tracked objects:
 11621 ;;		On entry : 0/0
 11622 ;;		On exit  : 0/0
 11623 ;;		Unchanged: 0/0
 11624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11629 ;;Total ram usage:        0 bytes
 11630 ;; Hardware stack levels used:    1
 11631 ;; Hardware stack levels required when called:    6
 11632 ;; This function calls:
 11633 ;;		_Flash_Memory_Unlock
 11634 ;; This function is called by:
 11635 ;;		_Flash_Memory_Modify
 11636 ;; This function uses a non-reentrant model
 11637 ;;
 11638                           
 11639                           
 11640                           ;psect for function _Flash_Memory_Erasing
 11641  1B7A                     _Flash_Memory_Erasing:	
 11642                           
 11643                           ;MCU_B1.c: 1028: CFGS = 0;
 11644                           
 11645                           ;incstack = 0
 11646                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11647  1B7A  0023               	movlb	3	; select bank3
 11648  1B7B  1315               	bcf	21,6	;volatile
 11649                           
 11650                           ;MCU_B1.c: 1029: PMADRH = 0x30;
 11651  1B7C  3030               	movlw	48
 11652  1B7D  0092               	movwf	18	;volatile
 11653                           
 11654                           ;MCU_B1.c: 1030: PMADRL = 0x00;
 11655  1B7E  0191               	clrf	17	;volatile
 11656                           
 11657                           ;MCU_B1.c: 1031: FREE = 1;
 11658  1B7F  1615               	bsf	21,4	;volatile
 11659                           
 11660                           ;MCU_B1.c: 1032: WREN = 1;
 11661  1B80  1515               	bsf	21,2	;volatile
 11662                           
 11663                           ;MCU_B1.c: 1033: Flash_Memory_Unlock();
 11664  1B81  319B  2343         	fcall	_Flash_Memory_Unlock
 11665                           
 11666                           ;MCU_B1.c: 1034: WREN = 0;
 11667  1B83  0023               	movlb	3	; select bank3
 11668  1B84  1115               	bcf	21,2	;volatile
 11669  1B85  0008               	return
 11670  1B86                     __end_of_Flash_Memory_Erasing:	
 11671                           
 11672                           	psect	text67
 11673  063F                     __ptext67:	
 11674 ;; *************** function _Flash_Memory_Initialization *****************
 11675 ;; Defined at:
 11676 ;;		line 924 in file "../src/MCU_B1.c"
 11677 ;; Parameters:    Size  Location     Type
 11678 ;;		None
 11679 ;; Auto vars:     Size  Location     Type
 11680 ;;  i               1   67[BANK0 ] unsigned char 
 11681 ;; Return value:  Size  Location     Type
 11682 ;;		None               void
 11683 ;; Registers used:
 11684 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11685 ;; Tracked objects:
 11686 ;;		On entry : 0/0
 11687 ;;		On exit  : 0/0
 11688 ;;		Unchanged: 0/0
 11689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11691 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11692 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11693 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11694 ;;Total ram usage:        2 bytes
 11695 ;; Hardware stack levels used:    1
 11696 ;; Hardware stack levels required when called:    8
 11697 ;; This function calls:
 11698 ;;		_Flash_Memory_Read
 11699 ;;		_Flash_Memory_Write
 11700 ;;		_setMemory_Data
 11701 ;;		_setPercentValue
 11702 ;; This function is called by:
 11703 ;;		_main
 11704 ;; This function uses a non-reentrant model
 11705 ;;
 11706                           
 11707                           
 11708                           ;psect for function _Flash_Memory_Initialization
 11709  063F                     _Flash_Memory_Initialization:	
 11710                           
 11711                           ;MCU_B1.c: 925: char i = 0;
 11712                           
 11713                           ;incstack = 0
 11714                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11715  063F  0020               	movlb	0	; select bank0
 11716  0640  01E3               	clrf	Flash_Memory_Initialization@i
 11717                           
 11718                           ;MCU_B1.c: 926: if (Flash_Memory_Read(31) == 0xaa) {
 11719  0641  301F               	movlw	31
 11720  0642  319E  2617  3186   	fcall	_Flash_Memory_Read
 11721  0645  3AAA               	xorlw	170
 11722  0646  1D03               	skipz
 11723  0647  2EB1               	goto	l10537
 11724                           
 11725                           ;MCU_B1.c: 927: product->Data[12] = Flash_Memory_Read(0);
 11726  0648  3000               	movlw	0
 11727  0649  319E  2617  3186   	fcall	_Flash_Memory_Read
 11728  064C  0020               	movlb	0	; select bank0
 11729  064D  00E2               	movwf	??_Flash_Memory_Initialization
 11730  064E  0879               	movf	_product,w
 11731  064F  3E0C               	addlw	12
 11732  0650  0086               	movwf	6
 11733  0651  3002               	movlw	2	; select bank4/5
 11734  0652  0087               	movwf	7
 11735  0653  0862               	movf	??_Flash_Memory_Initialization,w
 11736  0654  0081               	movwf	1
 11737                           
 11738                           ;MCU_B1.c: 928: product->Data[13] = Flash_Memory_Read(1);
 11739  0655  3001               	movlw	1
 11740  0656  319E  2617  3186   	fcall	_Flash_Memory_Read
 11741  0659  0020               	movlb	0	; select bank0
 11742  065A  00E2               	movwf	??_Flash_Memory_Initialization
 11743  065B  0879               	movf	_product,w
 11744  065C  3E0D               	addlw	13
 11745  065D  0086               	movwf	6
 11746  065E  3002               	movlw	2	; select bank4/5
 11747  065F  0087               	movwf	7
 11748  0660  0862               	movf	??_Flash_Memory_Initialization,w
 11749  0661  0081               	movwf	1
 11750                           
 11751                           ;MCU_B1.c: 929: product->Data[14] = Flash_Memory_Read(2);
 11752  0662  3002               	movlw	2
 11753  0663  319E  2617  3186   	fcall	_Flash_Memory_Read
 11754  0666  0020               	movlb	0	; select bank0
 11755  0667  00E2               	movwf	??_Flash_Memory_Initialization
 11756  0668  0879               	movf	_product,w
 11757  0669  3E0E               	addlw	14
 11758  066A  0086               	movwf	6
 11759  066B  3002               	movlw	2	; select bank4/5
 11760  066C  0087               	movwf	7
 11761  066D  0862               	movf	??_Flash_Memory_Initialization,w
 11762  066E  0081               	movwf	1
 11763                           
 11764                           ;MCU_B1.c: 935: i = setPercentValue(((char)(75*0.8)));
 11765  066F  303C               	movlw	60
 11766  0670  318A  224A  3186   	fcall	_setPercentValue
 11767  0673  0020               	movlb	0	; select bank0
 11768  0674  00E2               	movwf	??_Flash_Memory_Initialization
 11769  0675  0862               	movf	??_Flash_Memory_Initialization,w
 11770  0676  00E3               	movwf	Flash_Memory_Initialization@i
 11771                           
 11772                           ;MCU_B1.c: 936: product->Data[21] = i;
 11773  0677  0863               	movf	Flash_Memory_Initialization@i,w
 11774  0678  00E2               	movwf	??_Flash_Memory_Initialization
 11775  0679  0879               	movf	_product,w
 11776  067A  3E15               	addlw	21
 11777  067B  0086               	movwf	6
 11778  067C  3002               	movlw	2	; select bank4/5
 11779  067D  0087               	movwf	7
 11780  067E  0862               	movf	??_Flash_Memory_Initialization,w
 11781  067F  0081               	movwf	1
 11782                           
 11783                           ;MCU_B1.c: 937: product->Data[22] = i;
 11784  0680  0863               	movf	Flash_Memory_Initialization@i,w
 11785  0681  00E2               	movwf	??_Flash_Memory_Initialization
 11786  0682  0879               	movf	_product,w
 11787  0683  3E16               	addlw	22
 11788  0684  0086               	movwf	6
 11789  0685  3002               	movlw	2	; select bank4/5
 11790  0686  0087               	movwf	7
 11791  0687  0862               	movf	??_Flash_Memory_Initialization,w
 11792  0688  0081               	movwf	1
 11793                           
 11794                           ;MCU_B1.c: 938: product->Data[23] = i;
 11795  0689  0863               	movf	Flash_Memory_Initialization@i,w
 11796  068A  00E2               	movwf	??_Flash_Memory_Initialization
 11797  068B  0879               	movf	_product,w
 11798  068C  3E17               	addlw	23
 11799  068D  0086               	movwf	6
 11800  068E  3002               	movlw	2	; select bank4/5
 11801  068F  0087               	movwf	7
 11802  0690  0862               	movf	??_Flash_Memory_Initialization,w
 11803  0691  0081               	movwf	1
 11804                           
 11805                           ;MCU_B1.c: 940: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11806  0692  0879               	movf	_product,w
 11807  0693  3E0C               	addlw	12
 11808  0694  0086               	movwf	6
 11809  0695  3002               	movlw	2	; select bank4/5
 11810  0696  0087               	movwf	7
 11811  0697  0801               	movf	1,w
 11812  0698  3AFF               	xorlw	255
 11813  0699  1D03               	skipz
 11814  069A  0008               	return
 11815  069B  0879               	movf	_product,w
 11816  069C  3E0D               	addlw	13
 11817  069D  0086               	movwf	6
 11818  069E  3002               	movlw	2	; select bank4/5
 11819  069F  0087               	movwf	7
 11820  06A0  0801               	movf	1,w
 11821  06A1  3AFF               	xorlw	255
 11822  06A2  1D03               	skipz
 11823  06A3  0008               	return
 11824  06A4  0879               	movf	_product,w
 11825  06A5  3E0E               	addlw	14
 11826  06A6  0086               	movwf	6
 11827  06A7  3002               	movlw	2	; select bank4/5
 11828  06A8  0087               	movwf	7
 11829  06A9  0801               	movf	1,w
 11830  06AA  3AFF               	xorlw	255
 11831  06AB  1D03               	skipz
 11832  06AC  0008               	return
 11833                           
 11834                           ;MCU_B1.c: 941: myMain.FirstOpen = 1;
 11835  06AD  0021               	movlb	1	; select bank1
 11836  06AE  15A0               	bsf	_myMain^(0+128),3
 11837                           
 11838                           ;MCU_B1.c: 942: myMain.First = 1;
 11839  06AF  16A0               	bsf	_myMain^(0+128),5
 11840                           
 11841                           ;MCU_B1.c: 943: }
 11842                           ;MCU_B1.c: 944: } else {
 11843  06B0  0008               	return
 11844  06B1                     l10537:	
 11845                           
 11846                           ;MCU_B1.c: 945: i = setPercentValue(((char)(75*0.8)));
 11847  06B1  303C               	movlw	60
 11848  06B2  318A  224A  3186   	fcall	_setPercentValue
 11849  06B5  0020               	movlb	0	; select bank0
 11850  06B6  00E2               	movwf	??_Flash_Memory_Initialization
 11851  06B7  0862               	movf	??_Flash_Memory_Initialization,w
 11852  06B8  00E3               	movwf	Flash_Memory_Initialization@i
 11853                           
 11854                           ;MCU_B1.c: 946: setMemory_Data(0, 0xff);
 11855  06B9  30FF               	movlw	255
 11856  06BA  00E2               	movwf	??_Flash_Memory_Initialization
 11857  06BB  0862               	movf	??_Flash_Memory_Initialization,w
 11858  06BC  00A0               	movwf	setMemory_Data@data
 11859  06BD  3000               	movlw	0
 11860  06BE  319B  236E  3186   	fcall	_setMemory_Data
 11861                           
 11862                           ;MCU_B1.c: 947: setMemory_Data(1, 0xff);
 11863  06C1  30FF               	movlw	255
 11864  06C2  0020               	movlb	0	; select bank0
 11865  06C3  00E2               	movwf	??_Flash_Memory_Initialization
 11866  06C4  0862               	movf	??_Flash_Memory_Initialization,w
 11867  06C5  00A0               	movwf	setMemory_Data@data
 11868  06C6  3001               	movlw	1
 11869  06C7  319B  236E  3186   	fcall	_setMemory_Data
 11870                           
 11871                           ;MCU_B1.c: 948: setMemory_Data(2, 0xff);
 11872  06CA  30FF               	movlw	255
 11873  06CB  0020               	movlb	0	; select bank0
 11874  06CC  00E2               	movwf	??_Flash_Memory_Initialization
 11875  06CD  0862               	movf	??_Flash_Memory_Initialization,w
 11876  06CE  00A0               	movwf	setMemory_Data@data
 11877  06CF  3002               	movlw	2
 11878  06D0  319B  236E  3186   	fcall	_setMemory_Data
 11879                           
 11880                           ;MCU_B1.c: 949: setMemory_Data(3, 0xff);
 11881  06D3  30FF               	movlw	255
 11882  06D4  0020               	movlb	0	; select bank0
 11883  06D5  00E2               	movwf	??_Flash_Memory_Initialization
 11884  06D6  0862               	movf	??_Flash_Memory_Initialization,w
 11885  06D7  00A0               	movwf	setMemory_Data@data
 11886  06D8  3003               	movlw	3
 11887  06D9  319B  236E  3186   	fcall	_setMemory_Data
 11888                           
 11889                           ;MCU_B1.c: 950: setMemory_Data(4, 0xff);
 11890  06DC  30FF               	movlw	255
 11891  06DD  0020               	movlb	0	; select bank0
 11892  06DE  00E2               	movwf	??_Flash_Memory_Initialization
 11893  06DF  0862               	movf	??_Flash_Memory_Initialization,w
 11894  06E0  00A0               	movwf	setMemory_Data@data
 11895  06E1  3004               	movlw	4
 11896  06E2  319B  236E  3186   	fcall	_setMemory_Data
 11897                           
 11898                           ;MCU_B1.c: 951: setMemory_Data(5, 0xff);
 11899  06E5  30FF               	movlw	255
 11900  06E6  0020               	movlb	0	; select bank0
 11901  06E7  00E2               	movwf	??_Flash_Memory_Initialization
 11902  06E8  0862               	movf	??_Flash_Memory_Initialization,w
 11903  06E9  00A0               	movwf	setMemory_Data@data
 11904  06EA  3005               	movlw	5
 11905  06EB  319B  236E  3186   	fcall	_setMemory_Data
 11906                           
 11907                           ;MCU_B1.c: 952: setMemory_Data(31, 0xaa);
 11908  06EE  30AA               	movlw	170
 11909  06EF  0020               	movlb	0	; select bank0
 11910  06F0  00E2               	movwf	??_Flash_Memory_Initialization
 11911  06F1  0862               	movf	??_Flash_Memory_Initialization,w
 11912  06F2  00A0               	movwf	setMemory_Data@data
 11913  06F3  301F               	movlw	31
 11914  06F4  319B  236E  3186   	fcall	_setMemory_Data
 11915                           
 11916                           ;MCU_B1.c: 953: product->Data[21] = i;
 11917  06F7  0020               	movlb	0	; select bank0
 11918  06F8  0863               	movf	Flash_Memory_Initialization@i,w
 11919  06F9  00E2               	movwf	??_Flash_Memory_Initialization
 11920  06FA  0879               	movf	_product,w
 11921  06FB  3E15               	addlw	21
 11922  06FC  0086               	movwf	6
 11923  06FD  3002               	movlw	2	; select bank4/5
 11924  06FE  0087               	movwf	7
 11925  06FF  0862               	movf	??_Flash_Memory_Initialization,w
 11926  0700  0081               	movwf	1
 11927                           
 11928                           ;MCU_B1.c: 954: product->Data[22] = i;
 11929  0701  0863               	movf	Flash_Memory_Initialization@i,w
 11930  0702  00E2               	movwf	??_Flash_Memory_Initialization
 11931  0703  0879               	movf	_product,w
 11932  0704  3E16               	addlw	22
 11933  0705  0086               	movwf	6
 11934  0706  3002               	movlw	2	; select bank4/5
 11935  0707  0087               	movwf	7
 11936  0708  0862               	movf	??_Flash_Memory_Initialization,w
 11937  0709  0081               	movwf	1
 11938                           
 11939                           ;MCU_B1.c: 955: product->Data[23] = i;
 11940  070A  0863               	movf	Flash_Memory_Initialization@i,w
 11941  070B  00E2               	movwf	??_Flash_Memory_Initialization
 11942  070C  0879               	movf	_product,w
 11943  070D  3E17               	addlw	23
 11944  070E  0086               	movwf	6
 11945  070F  3002               	movlw	2	; select bank4/5
 11946  0710  0087               	movwf	7
 11947  0711  0862               	movf	??_Flash_Memory_Initialization,w
 11948  0712  0081               	movwf	1
 11949                           
 11950                           ;MCU_B1.c: 956: GIE = 0;
 11951  0713  138B               	bcf	11,7	;volatile
 11952                           
 11953                           ;MCU_B1.c: 957: Flash_Memory_Write();
 11954  0714  3191  210A         	fcall	_Flash_Memory_Write
 11955                           
 11956                           ;MCU_B1.c: 958: GIE = 1;
 11957  0716  178B               	bsf	11,7	;volatile
 11958                           
 11959                           ;MCU_B1.c: 959: myMain.FirstOpen = 1;
 11960  0717  0021               	movlb	1	; select bank1
 11961  0718  15A0               	bsf	_myMain^(0+128),3
 11962                           
 11963                           ;MCU_B1.c: 960: myMain.First = 1;
 11964  0719  16A0               	bsf	_myMain^(0+128),5
 11965  071A  0008               	return
 11966  071B                     __end_of_Flash_Memory_Initialization:	
 11967                           
 11968                           	psect	text68
 11969  1B6E                     __ptext68:	
 11970 ;; *************** function _setMemory_Data *****************
 11971 ;; Defined at:
 11972 ;;		line 1075 in file "../src/MCU_B1.c"
 11973 ;; Parameters:    Size  Location     Type
 11974 ;;  address         1    wreg     unsigned char 
 11975 ;;  data            1    0[BANK0 ] unsigned char 
 11976 ;; Auto vars:     Size  Location     Type
 11977 ;;  address         1    2[BANK0 ] unsigned char 
 11978 ;; Return value:  Size  Location     Type
 11979 ;;		None               void
 11980 ;; Registers used:
 11981 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11982 ;; Tracked objects:
 11983 ;;		On entry : 0/0
 11984 ;;		On exit  : 0/0
 11985 ;;		Unchanged: 0/0
 11986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11987 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11991 ;;Total ram usage:        3 bytes
 11992 ;; Hardware stack levels used:    1
 11993 ;; Hardware stack levels required when called:    5
 11994 ;; This function calls:
 11995 ;;		Nothing
 11996 ;; This function is called by:
 11997 ;;		_Flash_Memory_Initialization
 11998 ;;		_Flash_Memory_Modify
 11999 ;; This function uses a non-reentrant model
 12000 ;;
 12001                           
 12002                           
 12003                           ;psect for function _setMemory_Data
 12004  1B6E                     _setMemory_Data:	
 12005                           
 12006                           ;incstack = 0
 12007                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12008                           ;setMemory_Data@address stored from wreg
 12009  1B6E  0020               	movlb	0	; select bank0
 12010  1B6F  00A2               	movwf	setMemory_Data@address
 12011                           
 12012                           ;MCU_B1.c: 1076: Memory.Data[address] = data;
 12013  1B70  0820               	movf	setMemory_Data@data,w
 12014  1B71  00A1               	movwf	??_setMemory_Data
 12015  1B72  0822               	movf	setMemory_Data@address,w
 12016  1B73  3E20               	addlw	_Memory& (0+255)
 12017  1B74  0086               	movwf	6
 12018  1B75  3002               	movlw	2	; select bank4/5
 12019  1B76  0087               	movwf	7
 12020  1B77  0821               	movf	??_setMemory_Data,w
 12021  1B78  0081               	movwf	1
 12022  1B79  0008               	return
 12023  1B7A                     __end_of_setMemory_Data:	
 12024                           
 12025                           	psect	text69
 12026  110A                     __ptext69:	
 12027 ;; *************** function _Flash_Memory_Write *****************
 12028 ;; Defined at:
 12029 ;;		line 1008 in file "../src/MCU_B1.c"
 12030 ;; Parameters:    Size  Location     Type
 12031 ;;		None
 12032 ;; Auto vars:     Size  Location     Type
 12033 ;;  i               1    1[BANK0 ] unsigned char 
 12034 ;; Return value:  Size  Location     Type
 12035 ;;		None               void
 12036 ;; Registers used:
 12037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12038 ;; Tracked objects:
 12039 ;;		On entry : 0/0
 12040 ;;		On exit  : 0/0
 12041 ;;		Unchanged: 0/0
 12042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12047 ;;Total ram usage:        2 bytes
 12048 ;; Hardware stack levels used:    1
 12049 ;; Hardware stack levels required when called:    6
 12050 ;; This function calls:
 12051 ;;		_Flash_Memory_Unlock
 12052 ;; This function is called by:
 12053 ;;		_Flash_Memory_Initialization
 12054 ;;		_Flash_Memory_Modify
 12055 ;; This function uses a non-reentrant model
 12056 ;;
 12057                           
 12058                           
 12059                           ;psect for function _Flash_Memory_Write
 12060  110A                     _Flash_Memory_Write:	
 12061                           
 12062                           ;MCU_B1.c: 1009: char i = 0;
 12063                           
 12064                           ;incstack = 0
 12065                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12066  110A  0020               	movlb	0	; select bank0
 12067  110B  01A1               	clrf	Flash_Memory_Write@i
 12068                           
 12069                           ;MCU_B1.c: 1010: CFGS = 0;
 12070  110C  0023               	movlb	3	; select bank3
 12071  110D  1315               	bcf	21,6	;volatile
 12072                           
 12073                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 12074  110E  3030               	movlw	48
 12075  110F  0092               	movwf	18	;volatile
 12076                           
 12077                           ;MCU_B1.c: 1012: PMDATH = 0;
 12078  1110  0194               	clrf	20	;volatile
 12079                           
 12080                           ;MCU_B1.c: 1013: FREE = 0;
 12081  1111  1215               	bcf	21,4	;volatile
 12082                           
 12083                           ;MCU_B1.c: 1014: LWLO = 1;
 12084  1112  1695               	bsf	21,5	;volatile
 12085                           
 12086                           ;MCU_B1.c: 1015: WREN = 1;
 12087  1113  1515               	bsf	21,2	;volatile
 12088                           
 12089                           ;MCU_B1.c: 1016: for (i = 0; i < 32; i++) {
 12090  1114  0020               	movlb	0	; select bank0
 12091  1115  01A1               	clrf	Flash_Memory_Write@i
 12092  1116  3020               	movlw	32
 12093  1117  0221               	subwf	Flash_Memory_Write@i,w
 12094  1118  1803               	btfsc	3,0
 12095  1119  2932               	goto	l1347
 12096  111A                     l9703:	
 12097                           
 12098                           ;MCU_B1.c: 1017: PMADRL = i;
 12099  111A  0821               	movf	Flash_Memory_Write@i,w
 12100  111B  0023               	movlb	3	; select bank3
 12101  111C  0091               	movwf	17	;volatile
 12102                           
 12103                           ;MCU_B1.c: 1018: PMDATL = Memory.Data[i];
 12104  111D  0020               	movlb	0	; select bank0
 12105  111E  0821               	movf	Flash_Memory_Write@i,w
 12106  111F  3E20               	addlw	_Memory& (0+255)
 12107  1120  0086               	movwf	6
 12108  1121  3002               	movlw	2	; select bank4/5
 12109  1122  0087               	movwf	7
 12110  1123  0801               	movf	1,w
 12111  1124  0023               	movlb	3	; select bank3
 12112  1125  0093               	movwf	19	;volatile
 12113                           
 12114                           ;MCU_B1.c: 1019: Flash_Memory_Unlock();
 12115  1126  319B  2343  3191   	fcall	_Flash_Memory_Unlock
 12116  1129  3001               	movlw	1
 12117  112A  0020               	movlb	0	; select bank0
 12118  112B  00A0               	movwf	??_Flash_Memory_Write
 12119  112C  0820               	movf	??_Flash_Memory_Write,w
 12120  112D  07A1               	addwf	Flash_Memory_Write@i,f
 12121  112E  3020               	movlw	32
 12122  112F  0221               	subwf	Flash_Memory_Write@i,w
 12123  1130  1C03               	skipc
 12124  1131  291A               	goto	l9703
 12125  1132                     l1347:	
 12126                           
 12127                           ;MCU_B1.c: 1020: }
 12128                           ;MCU_B1.c: 1021: LWLO = 0;
 12129  1132  0023               	movlb	3	; select bank3
 12130  1133  1295               	bcf	21,5	;volatile
 12131                           
 12132                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 12133  1134  319B  2343         	fcall	_Flash_Memory_Unlock
 12134                           
 12135                           ;MCU_B1.c: 1023: WREN = 0;
 12136  1136  0023               	movlb	3	; select bank3
 12137  1137  1115               	bcf	21,2	;volatile
 12138  1138  0008               	return
 12139  1139                     __end_of_Flash_Memory_Write:	
 12140                           
 12141                           	psect	text70
 12142  1B43                     __ptext70:	
 12143 ;; *************** function _Flash_Memory_Unlock *****************
 12144 ;; Defined at:
 12145 ;;		line 987 in file "../src/MCU_B1.c"
 12146 ;; Parameters:    Size  Location     Type
 12147 ;;		None
 12148 ;; Auto vars:     Size  Location     Type
 12149 ;;		None
 12150 ;; Return value:  Size  Location     Type
 12151 ;;		None               void
 12152 ;; Registers used:
 12153 ;;		wreg
 12154 ;; Tracked objects:
 12155 ;;		On entry : 0/0
 12156 ;;		On exit  : 0/0
 12157 ;;		Unchanged: 0/0
 12158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12163 ;;Total ram usage:        0 bytes
 12164 ;; Hardware stack levels used:    1
 12165 ;; Hardware stack levels required when called:    5
 12166 ;; This function calls:
 12167 ;;		Nothing
 12168 ;; This function is called by:
 12169 ;;		_Flash_Memory_Write
 12170 ;;		_Flash_Memory_Erasing
 12171 ;; This function uses a non-reentrant model
 12172 ;;
 12173                           
 12174                           
 12175                           ;psect for function _Flash_Memory_Unlock
 12176  1B43                     _Flash_Memory_Unlock:	
 12177                           
 12178                           ;MCU_B1.c: 988: PMCON2 = 0x55;
 12179                           
 12180                           ;incstack = 0
 12181                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12182  1B43  3055               	movlw	85
 12183  1B44  0023               	movlb	3	; select bank3
 12184  1B45  0096               	movwf	22	;volatile
 12185                           
 12186                           ;MCU_B1.c: 989: PMCON2 = 0xaa;
 12187  1B46  30AA               	movlw	170
 12188  1B47  0096               	movwf	22	;volatile
 12189                           
 12190                           ;MCU_B1.c: 990: WR = 1;
 12191  1B48  1495               	bsf	21,1	;volatile
 12192                           
 12193                           ;MCU_B1.c: 991: __nop();
 12194  1B49  0000               	nop
 12195                           
 12196                           ;MCU_B1.c: 992: __nop();
 12197  1B4A  0000               	nop
 12198  1B4B  0008               	return
 12199  1B4C                     __end_of_Flash_Memory_Unlock:	
 12200                           
 12201                           	psect	text71
 12202  1E17                     __ptext71:	
 12203 ;; *************** function _Flash_Memory_Read *****************
 12204 ;; Defined at:
 12205 ;;		line 996 in file "../src/MCU_B1.c"
 12206 ;; Parameters:    Size  Location     Type
 12207 ;;  address         1    wreg     unsigned char 
 12208 ;; Auto vars:     Size  Location     Type
 12209 ;;  address         1    2[BANK0 ] unsigned char 
 12210 ;;  ret             1    3[BANK0 ] unsigned char 
 12211 ;;  i               1    1[BANK0 ] unsigned char 
 12212 ;; Return value:  Size  Location     Type
 12213 ;;                  1    wreg      unsigned char 
 12214 ;; Registers used:
 12215 ;;		wreg, status,2
 12216 ;; Tracked objects:
 12217 ;;		On entry : 0/0
 12218 ;;		On exit  : 0/0
 12219 ;;		Unchanged: 0/0
 12220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12222 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12223 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12224 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;Total ram usage:        4 bytes
 12226 ;; Hardware stack levels used:    1
 12227 ;; Hardware stack levels required when called:    5
 12228 ;; This function calls:
 12229 ;;		Nothing
 12230 ;; This function is called by:
 12231 ;;		_Flash_Memory_Initialization
 12232 ;;		_Flash_Memory_Modify
 12233 ;; This function uses a non-reentrant model
 12234 ;;
 12235                           
 12236                           
 12237                           ;psect for function _Flash_Memory_Read
 12238  1E17                     _Flash_Memory_Read:	
 12239                           
 12240                           ;incstack = 0
 12241                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12242                           ;Flash_Memory_Read@address stored from wreg
 12243  1E17  0020               	movlb	0	; select bank0
 12244  1E18  00A2               	movwf	Flash_Memory_Read@address
 12245                           
 12246                           ;MCU_B1.c: 997: char i = 0, ret = 0;
 12247  1E19  01A1               	clrf	Flash_Memory_Read@i
 12248  1E1A  01A3               	clrf	Flash_Memory_Read@ret
 12249                           
 12250                           ;MCU_B1.c: 998: PMADRH = 0x30;
 12251  1E1B  3030               	movlw	48
 12252  1E1C  0023               	movlb	3	; select bank3
 12253  1E1D  0092               	movwf	18	;volatile
 12254                           
 12255                           ;MCU_B1.c: 999: PMADRL = address;
 12256  1E1E  0020               	movlb	0	; select bank0
 12257  1E1F  0822               	movf	Flash_Memory_Read@address,w
 12258  1E20  0023               	movlb	3	; select bank3
 12259  1E21  0091               	movwf	17	;volatile
 12260                           
 12261                           ;MCU_B1.c: 1000: CFGS = 0;
 12262  1E22  1315               	bcf	21,6	;volatile
 12263                           
 12264                           ;MCU_B1.c: 1001: RD = 1;
 12265  1E23  1415               	bsf	21,0	;volatile
 12266                           
 12267                           ;MCU_B1.c: 1002: i = PMDATH;
 12268  1E24  0814               	movf	20,w	;volatile
 12269  1E25  0020               	movlb	0	; select bank0
 12270  1E26  00A0               	movwf	??_Flash_Memory_Read
 12271  1E27  0820               	movf	??_Flash_Memory_Read,w
 12272  1E28  00A1               	movwf	Flash_Memory_Read@i
 12273                           
 12274                           ;MCU_B1.c: 1003: ret = PMDATL;
 12275  1E29  0023               	movlb	3	; select bank3
 12276  1E2A  0813               	movf	19,w	;volatile
 12277  1E2B  0020               	movlb	0	; select bank0
 12278  1E2C  00A0               	movwf	??_Flash_Memory_Read
 12279  1E2D  0820               	movf	??_Flash_Memory_Read,w
 12280  1E2E  00A3               	movwf	Flash_Memory_Read@ret
 12281                           
 12282                           ;MCU_B1.c: 1004: return ret;
 12283  1E2F  0823               	movf	Flash_Memory_Read@ret,w
 12284  1E30  0008               	return
 12285  1E31                     __end_of_Flash_Memory_Read:	
 12286                           
 12287                           	psect	text72
 12288  055F                     __ptext72:	
 12289 ;; *************** function _Exception_Main *****************
 12290 ;; Defined at:
 12291 ;;		line 523 in file "../src/Main_B1.c"
 12292 ;; Parameters:    Size  Location     Type
 12293 ;;		None
 12294 ;; Auto vars:     Size  Location     Type
 12295 ;;  i               2    4[BANK1 ] int 
 12296 ;;  i               2    2[BANK1 ] int 
 12297 ;;  lights          1    6[BANK1 ] unsigned char 
 12298 ;;  error           1    1[BANK1 ] unsigned char 
 12299 ;;  count           1    0[BANK1 ] unsigned char 
 12300 ;; Return value:  Size  Location     Type
 12301 ;;		None               void
 12302 ;; Registers used:
 12303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12304 ;; Tracked objects:
 12305 ;;		On entry : 0/0
 12306 ;;		On exit  : 0/0
 12307 ;;		Unchanged: 0/0
 12308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;Total ram usage:        8 bytes
 12314 ;; Hardware stack levels used:    1
 12315 ;; Hardware stack levels required when called:    9
 12316 ;; This function calls:
 12317 ;;		_getDimmerLights_Line
 12318 ;;		_getDimmerLights_Status
 12319 ;;		_getMain_All_Error_Status
 12320 ;;		_getMain_LightsStatus
 12321 ;;		_setBuz
 12322 ;;		_setDimmerLights_SwOff
 12323 ;;		_setLED
 12324 ;; This function is called by:
 12325 ;;		_main
 12326 ;; This function uses a non-reentrant model
 12327 ;;
 12328                           
 12329                           
 12330                           ;psect for function _Exception_Main
 12331  055F                     _Exception_Main:	
 12332                           
 12333                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 12334                           
 12335                           ;incstack = 0
 12336                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12337  055F  3000               	movlw	0
 12338  0560  3191  2168  3185   	fcall	_getMain_All_Error_Status
 12339  0563  0020               	movlb	0	; select bank0
 12340  0564  00EB               	movwf	??_Exception_Main
 12341  0565  086B               	movf	??_Exception_Main,w
 12342  0566  0021               	movlb	1	; select bank1
 12343  0567  00E9               	movwf	Exception_Main@error^(0+128)
 12344                           
 12345                           ;Main_B1.c: 525: char lights = 0, count = 2;
 12346  0568  01EE               	clrf	Exception_Main@lights^(0+128)
 12347  0569  3002               	movlw	2
 12348  056A  0020               	movlb	0	; select bank0
 12349  056B  00EB               	movwf	??_Exception_Main
 12350  056C  086B               	movf	??_Exception_Main,w
 12351  056D  0021               	movlb	1	; select bank1
 12352  056E  00E8               	movwf	Exception_Main@count^(0+128)
 12353                           
 12354                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 12355  056F  1DAB               	btfss	(_myMain^(0+128)+11),3
 12356  0570  2D7E               	goto	l10871
 12357                           
 12358                           ;Main_B1.c: 527: if (error == 0) {
 12359  0571  08E9               	movf	Exception_Main@error^(0+128),f
 12360  0572  1D03               	skipz
 12361  0573  0008               	return
 12362                           
 12363                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 12364  0574  11AB               	bcf	(_myMain^(0+128)+11),3
 12365                           
 12366                           ;Main_B1.c: 533: setLED(99, 10);
 12367  0575  300A               	movlw	10
 12368  0576  0020               	movlb	0	; select bank0
 12369  0577  00EB               	movwf	??_Exception_Main
 12370  0578  086B               	movf	??_Exception_Main,w
 12371  0579  00A2               	movwf	setLED@command
 12372  057A  3063               	movlw	99
 12373  057B  3196  264F         	fcall	_setLED
 12374                           
 12375                           ;Main_B1.c: 535: }
 12376                           ;Main_B1.c: 536: } else {
 12377  057D  0008               	return
 12378  057E                     l10871:	
 12379                           
 12380                           ;Main_B1.c: 537: if (error != 0) {
 12381  057E  0021               	movlb	1	; select bank1
 12382  057F  0869               	movf	Exception_Main@error^(0+128),w
 12383  0580  1903               	btfsc	3,2
 12384  0581  0008               	return
 12385                           
 12386                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 12387  0582  15AB               	bsf	(_myMain^(0+128)+11),3
 12388                           
 12389                           ;Main_B1.c: 541: setLED(99, 11);
 12390  0583  300B               	movlw	11
 12391  0584  0020               	movlb	0	; select bank0
 12392  0585  00EB               	movwf	??_Exception_Main
 12393  0586  086B               	movf	??_Exception_Main,w
 12394  0587  00A2               	movwf	setLED@command
 12395  0588  3063               	movlw	99
 12396  0589  3196  264F  3185   	fcall	_setLED
 12397                           
 12398                           ;Main_B1.c: 543: switch (error) {
 12399  058C  2E34               	goto	l10919
 12400  058D                     l10877:	
 12401                           ;Main_B1.c: 544: case 2:
 12402                           
 12403                           
 12404                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 12405  058D  319C  249C  3185   	fcall	_getMain_LightsStatus
 12406  0590  3A01               	xorlw	1
 12407  0591  1D03               	skipz
 12408  0592  2D9C               	goto	l10881
 12409                           
 12410                           ;Main_B1.c: 546: setBuz(10, 300);
 12411  0593  302C               	movlw	44
 12412  0594  0020               	movlb	0	; select bank0
 12413  0595  00A9               	movwf	setBuz@time
 12414  0596  3001               	movlw	1
 12415  0597  00AA               	movwf	setBuz@time+1
 12416  0598  300A               	movlw	10
 12417  0599  3197  274E  3185   	fcall	_setBuz
 12418  059C                     l10881:	
 12419                           
 12420                           ;Main_B1.c: 547: }
 12421                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 12422  059C  0021               	movlb	1	; select bank1
 12423  059D  01EA               	clrf	Exception_Main@i^(0+128)
 12424  059E  01EB               	clrf	(Exception_Main@i+1)^(0+128)
 12425  059F                     l10891:	
 12426  059F  086B               	movf	(Exception_Main@i+1)^(0+128),w
 12427  05A0  3A80               	xorlw	128
 12428  05A1  0020               	movlb	0	; select bank0
 12429  05A2  00EB               	movwf	??_Exception_Main
 12430  05A3  3080               	movlw	128
 12431  05A4  026B               	subwf	??_Exception_Main,w
 12432  05A5  1D03               	skipz
 12433  05A6  2DAA               	goto	u12895
 12434  05A7  0021               	movlb	1	; select bank1
 12435  05A8  0868               	movf	Exception_Main@count^(0+128),w
 12436  05A9  026A               	subwf	Exception_Main@i^(0+128),w
 12437  05AA                     u12895:	
 12438  05AA  1803               	btfsc	3,0
 12439  05AB  2DCE               	goto	u12890
 12440                           
 12441                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 12442  05AC  0021               	movlb	1	; select bank1
 12443  05AD  086A               	movf	Exception_Main@i^(0+128),w
 12444  05AE  3E01               	addlw	1
 12445  05AF  319B  23FC  3185   	fcall	_getDimmerLights_Status
 12446  05B2  3A01               	xorlw	1
 12447  05B3  1D03               	skipz
 12448  05B4  2DC8               	goto	l10889
 12449                           
 12450                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 12451  05B5  0020               	movlb	0	; select bank0
 12452  05B6  086F               	movf	_DimmerLights,w
 12453  05B7  3E0B               	addlw	11
 12454  05B8  0086               	movwf	6
 12455  05B9  3001               	movlw	1	; select bank2/3
 12456  05BA  0087               	movwf	7
 12457  05BB  1481               	bsf	1,1
 12458                           
 12459                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 12460  05BC  086F               	movf	_DimmerLights,w
 12461  05BD  3E02               	addlw	2
 12462  05BE  0086               	movwf	6
 12463  05BF  3001               	movlw	1	; select bank2/3
 12464  05C0  0087               	movwf	7
 12465  05C1  1081               	bcf	1,1
 12466                           
 12467                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 12468  05C2  0021               	movlb	1	; select bank1
 12469  05C3  086A               	movf	Exception_Main@i^(0+128),w
 12470  05C4  3E01               	addlw	1
 12471  05C5  3194  24BC  3185   	fcall	_setDimmerLights_SwOff
 12472  05C8                     l10889:	
 12473  05C8  3001               	movlw	1
 12474  05C9  0021               	movlb	1	; select bank1
 12475  05CA  07EA               	addwf	Exception_Main@i^(0+128),f
 12476  05CB  3000               	movlw	0
 12477  05CC  3DEB               	addwfc	(Exception_Main@i+1)^(0+128),f
 12478  05CD  2D9F               	goto	l10891
 12479  05CE                     u12890:	
 12480  05CE  0021               	movlb	1	; select bank1
 12481  05CF  0008               	return
 12482  05D0                     l10893:	
 12483                           ;Main_B1.c: 558: case 3:
 12484                           
 12485                           ;Main_B1.c: 555: }
 12486                           ;Main_B1.c: 556: }
 12487                           ;Main_B1.c: 557: break;
 12488                           
 12489                           
 12490                           ;Main_B1.c: 560: setBuz(5, 300);
 12491  05D0  302C               	movlw	44
 12492  05D1  0020               	movlb	0	; select bank0
 12493  05D2  00A9               	movwf	setBuz@time
 12494  05D3  3001               	movlw	1
 12495  05D4  00AA               	movwf	setBuz@time+1
 12496  05D5  3005               	movlw	5
 12497  05D6  3197  274E  3185   	fcall	_setBuz
 12498                           
 12499                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 12500  05D9  319D  2524  3185   	fcall	_getDimmerLights_Line
 12501  05DC  0020               	movlb	0	; select bank0
 12502  05DD  00EB               	movwf	??_Exception_Main
 12503  05DE  086B               	movf	??_Exception_Main,w
 12504  05DF  0021               	movlb	1	; select bank1
 12505  05E0  00EE               	movwf	Exception_Main@lights^(0+128)
 12506                           
 12507                           ;Main_B1.c: 562: if (lights == 0) {
 12508  05E1  08EE               	movf	Exception_Main@lights^(0+128),f
 12509  05E2  1D03               	skipz
 12510  05E3  2E17               	goto	l10911
 12511                           
 12512                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 12513  05E4  01EC               	clrf	Exception_Main@i_3620^(0+128)
 12514  05E5  01ED               	clrf	(Exception_Main@i_3620+1)^(0+128)
 12515  05E6                     l10909:	
 12516  05E6  086D               	movf	(Exception_Main@i_3620+1)^(0+128),w
 12517  05E7  3A80               	xorlw	128
 12518  05E8  0020               	movlb	0	; select bank0
 12519  05E9  00EB               	movwf	??_Exception_Main
 12520  05EA  3080               	movlw	128
 12521  05EB  026B               	subwf	??_Exception_Main,w
 12522  05EC  1D03               	skipz
 12523  05ED  2DF1               	goto	u12925
 12524  05EE  0021               	movlb	1	; select bank1
 12525  05EF  0868               	movf	Exception_Main@count^(0+128),w
 12526  05F0  026C               	subwf	Exception_Main@i_3620^(0+128),w
 12527  05F1                     u12925:	
 12528  05F1  1803               	btfsc	3,0
 12529  05F2  2E15               	goto	u12920
 12530                           
 12531                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 12532  05F3  0021               	movlb	1	; select bank1
 12533  05F4  086C               	movf	Exception_Main@i_3620^(0+128),w
 12534  05F5  3E01               	addlw	1
 12535  05F6  319B  23FC  3185   	fcall	_getDimmerLights_Status
 12536  05F9  3A01               	xorlw	1
 12537  05FA  1D03               	skipz
 12538  05FB  2E0F               	goto	l10907
 12539                           
 12540                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 12541  05FC  0020               	movlb	0	; select bank0
 12542  05FD  086F               	movf	_DimmerLights,w
 12543  05FE  3E0B               	addlw	11
 12544  05FF  0086               	movwf	6
 12545  0600  3001               	movlw	1	; select bank2/3
 12546  0601  0087               	movwf	7
 12547  0602  1481               	bsf	1,1
 12548                           
 12549                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 12550  0603  086F               	movf	_DimmerLights,w
 12551  0604  3E02               	addlw	2
 12552  0605  0086               	movwf	6
 12553  0606  3001               	movlw	1	; select bank2/3
 12554  0607  0087               	movwf	7
 12555  0608  1081               	bcf	1,1
 12556                           
 12557                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 12558  0609  0021               	movlb	1	; select bank1
 12559  060A  086C               	movf	Exception_Main@i_3620^(0+128),w
 12560  060B  3E01               	addlw	1
 12561  060C  3194  24BC  3185   	fcall	_setDimmerLights_SwOff
 12562  060F                     l10907:	
 12563  060F  3001               	movlw	1
 12564  0610  0021               	movlb	1	; select bank1
 12565  0611  07EC               	addwf	Exception_Main@i_3620^(0+128),f
 12566  0612  3000               	movlw	0
 12567  0613  3DED               	addwfc	(Exception_Main@i_3620+1)^(0+128),f
 12568  0614  2DE6               	goto	l10909
 12569  0615                     u12920:	
 12570  0615  0021               	movlb	1	; select bank1
 12571  0616  0008               	return
 12572  0617                     l10911:	
 12573                           ;Main_B1.c: 570: }
 12574                           ;Main_B1.c: 571: }
 12575                           ;Main_B1.c: 572: } else {
 12576                           
 12577                           
 12578                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 12579  0617  0021               	movlb	1	; select bank1
 12580  0618  086E               	movf	Exception_Main@lights^(0+128),w
 12581  0619  319B  23FC  3185   	fcall	_getDimmerLights_Status
 12582  061C  3A01               	xorlw	1
 12583  061D  1903               	btfsc	3,2
 12584  061E  2E21               	goto	l10913
 12585  061F  0021               	movlb	1	; select bank1
 12586  0620  0008               	return
 12587  0621                     l10913:	
 12588                           
 12589                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 12590  0621  0020               	movlb	0	; select bank0
 12591  0622  086F               	movf	_DimmerLights,w
 12592  0623  3E0B               	addlw	11
 12593  0624  0086               	movwf	6
 12594  0625  3001               	movlw	1	; select bank2/3
 12595  0626  0087               	movwf	7
 12596  0627  1481               	bsf	1,1
 12597                           
 12598                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 12599  0628  086F               	movf	_DimmerLights,w
 12600  0629  3E02               	addlw	2
 12601  062A  0086               	movwf	6
 12602  062B  3001               	movlw	1	; select bank2/3
 12603  062C  0087               	movwf	7
 12604  062D  1081               	bcf	1,1
 12605                           
 12606                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 12607  062E  0021               	movlb	1	; select bank1
 12608  062F  086E               	movf	Exception_Main@lights^(0+128),w
 12609  0630  3194  24BC         	fcall	_setDimmerLights_SwOff
 12610  0632  0021               	movlb	1	; select bank1
 12611  0633  0008               	return
 12612  0634                     l10919:	
 12613                           ;Main_B1.c: 582: }
 12614                           
 12615                           ;Main_B1.c: 579: }
 12616                           ;Main_B1.c: 580: }
 12617                           ;Main_B1.c: 581: break;
 12618                           
 12619  0634  0021               	movlb	1	; select bank1
 12620  0635  0869               	movf	Exception_Main@error^(0+128),w
 12621                           
 12622                           ; Switch size 1, requested type "space"
 12623                           ; Number of cases is 2, Range of values is 2 to 3
 12624                           ; switch strategies available:
 12625                           ; Name         Instructions Cycles
 12626                           ; simple_byte            7     4 (average)
 12627                           ; direct_byte           13     9 (fixed)
 12628                           ; jumptable            263     9 (fixed)
 12629                           ;	Chosen strategy is simple_byte
 12630  0636  3A02               	xorlw	2	; case 2
 12631  0637  1903               	skipnz
 12632  0638  2D8D               	goto	l10877
 12633  0639  3A01               	xorlw	1	; case 3
 12634  063A  1903               	skipnz
 12635  063B  2DD0               	goto	l10893
 12636  063C  2E3E               	goto	l1607
 12637  063D  0008               	return
 12638  063E                     l1607:	
 12639  063E  0008               	return
 12640  063F                     __end_of_Exception_Main:	
 12641                           
 12642                           	psect	text73
 12643  1D24                     __ptext73:	
 12644 ;; *************** function _getDimmerLights_Line *****************
 12645 ;; Defined at:
 12646 ;;		line 736 in file "../src/Dimmer_B1.c"
 12647 ;; Parameters:    Size  Location     Type
 12648 ;;		None
 12649 ;; Auto vars:     Size  Location     Type
 12650 ;;  line            1    1[BANK0 ] unsigned char 
 12651 ;; Return value:  Size  Location     Type
 12652 ;;                  1    wreg      unsigned char 
 12653 ;; Registers used:
 12654 ;;		wreg, status,2
 12655 ;; Tracked objects:
 12656 ;;		On entry : 0/0
 12657 ;;		On exit  : 0/0
 12658 ;;		Unchanged: 0/0
 12659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12662 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12663 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12664 ;;Total ram usage:        2 bytes
 12665 ;; Hardware stack levels used:    1
 12666 ;; Hardware stack levels required when called:    5
 12667 ;; This function calls:
 12668 ;;		Nothing
 12669 ;; This function is called by:
 12670 ;;		_Exception_Main
 12671 ;; This function uses a non-reentrant model
 12672 ;;
 12673                           
 12674                           
 12675                           ;psect for function _getDimmerLights_Line
 12676  1D24                     _getDimmerLights_Line:	
 12677                           
 12678                           ;Dimmer_B1.c: 737: char line = 0;
 12679                           
 12680                           ;incstack = 0
 12681                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12682  1D24  0020               	movlb	0	; select bank0
 12683  1D25  01A1               	clrf	getDimmerLights_Line@line
 12684                           
 12685                           ;Dimmer_B1.c: 739: if (DimmerLights1.Line == 1) {
 12686  1D26  0022               	movlb	2	; select bank2
 12687  1D27  1F5F               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 12688  1D28  2D2D               	goto	l858
 12689                           
 12690                           ;Dimmer_B1.c: 740: line = 1;
 12691  1D29  0020               	movlb	0	; select bank0
 12692  1D2A  01A1               	clrf	getDimmerLights_Line@line
 12693  1D2B  0AA1               	incf	getDimmerLights_Line@line,f
 12694                           
 12695                           ;Dimmer_B1.c: 741: }
 12696  1D2C  2D35               	goto	l859
 12697  1D2D                     l858:	
 12698                           
 12699                           ;Dimmer_B1.c: 744: else if (DimmerLights2.Line == 1) {
 12700  1D2D  0023               	movlb	3	; select bank3
 12701  1D2E  1F48               	btfss	(_DimmerLights2^(0+384)+10),6	;volatile
 12702  1D2F  2D35               	goto	l859
 12703                           
 12704                           ;Dimmer_B1.c: 745: line = 2;
 12705  1D30  3002               	movlw	2
 12706  1D31  0020               	movlb	0	; select bank0
 12707  1D32  00A0               	movwf	??_getDimmerLights_Line
 12708  1D33  0820               	movf	??_getDimmerLights_Line,w
 12709  1D34  00A1               	movwf	getDimmerLights_Line@line
 12710  1D35                     l859:	
 12711                           
 12712                           ;Dimmer_B1.c: 746: }
 12713                           ;Dimmer_B1.c: 753: return line;
 12714  1D35  0020               	movlb	0	; select bank0
 12715  1D36  0821               	movf	getDimmerLights_Line@line,w
 12716  1D37  0008               	return
 12717  1D38                     __end_of_getDimmerLights_Line:	
 12718                           
 12719                           	psect	text74
 12720  1EE6                     __ptext74:	
 12721 ;; *************** function _DimmerLights_Main *****************
 12722 ;; Defined at:
 12723 ;;		line 502 in file "../src/Dimmer_B1.c"
 12724 ;; Parameters:    Size  Location     Type
 12725 ;;		None
 12726 ;; Auto vars:     Size  Location     Type
 12727 ;;		None
 12728 ;; Return value:  Size  Location     Type
 12729 ;;		None               void
 12730 ;; Registers used:
 12731 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12732 ;; Tracked objects:
 12733 ;;		On entry : 0/0
 12734 ;;		On exit  : 0/0
 12735 ;;		Unchanged: 0/0
 12736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12741 ;;Total ram usage:        0 bytes
 12742 ;; Hardware stack levels used:    1
 12743 ;; Hardware stack levels required when called:   10
 12744 ;; This function calls:
 12745 ;;		_getLoad_OK
 12746 ;;		_getMain_All_Error_Status
 12747 ;;		_getMain_LightsStatus
 12748 ;;		_setDimmerLights_Main
 12749 ;; This function is called by:
 12750 ;;		_main
 12751 ;; This function uses a non-reentrant model
 12752 ;;
 12753                           
 12754                           
 12755                           ;psect for function _DimmerLights_Main
 12756  1EE6                     _DimmerLights_Main:	
 12757                           
 12758                           ;Dimmer_B1.c: 514: if (Dimmer.LoadGO == 1) {
 12759                           
 12760                           ;incstack = 0
 12761                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12762  1EE6  0021               	movlb	1	; select bank1
 12763  1EE7  1D46               	btfss	_Dimmer^(0+128),2	;volatile
 12764  1EE8  2EFE               	goto	l10507
 12765                           
 12766                           ;Dimmer_B1.c: 515: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 12767  1EE9  319B  231A  319E   	fcall	_getLoad_OK
 12768  1EEC  3A01               	xorlw	1
 12769  1EED  1903               	skipnz
 12770  1EEE  2EFC               	goto	l809
 12771  1EEF  3000               	movlw	0
 12772  1EF0  3191  2168  319E   	fcall	_getMain_All_Error_Status
 12773  1EF3  3800               	iorlw	0
 12774  1EF4  1D03               	skipz
 12775  1EF5  2EFC               	goto	l809
 12776  1EF6  319C  249C  319E   	fcall	_getMain_LightsStatus
 12777  1EF9  3800               	iorlw	0
 12778  1EFA  1D03               	skipz
 12779  1EFB  2EFE               	goto	l10507
 12780  1EFC                     l809:	
 12781                           
 12782                           ;Dimmer_B1.c: 516: Dimmer.LoadGO = 0;
 12783  1EFC  0021               	movlb	1	; select bank1
 12784  1EFD  1146               	bcf	_Dimmer^(0+128),2	;volatile
 12785  1EFE                     l10507:	
 12786                           
 12787                           ;Dimmer_B1.c: 517: }
 12788                           ;Dimmer_B1.c: 518: }
 12789                           ;Dimmer_B1.c: 522: setDimmerLights_Main(1);
 12790  1EFE  3001               	movlw	1
 12791  1EFF  3195  255A  319E   	fcall	_setDimmerLights_Main
 12792                           
 12793                           ;Dimmer_B1.c: 526: setDimmerLights_Main(2);
 12794  1F02  3002               	movlw	2
 12795  1F03  3195  255A         	fcall	_setDimmerLights_Main
 12796  1F05  0008               	return
 12797  1F06                     __end_of_DimmerLights_Main:	
 12798                           
 12799                           	psect	text75
 12800  155A                     __ptext75:	
 12801 ;; *************** function _setDimmerLights_Main *****************
 12802 ;; Defined at:
 12803 ;;		line 536 in file "../src/Dimmer_B1.c"
 12804 ;; Parameters:    Size  Location     Type
 12805 ;;  lights          1    wreg     unsigned char 
 12806 ;; Auto vars:     Size  Location     Type
 12807 ;;  lights          1   78[BANK0 ] unsigned char 
 12808 ;; Return value:  Size  Location     Type
 12809 ;;		None               void
 12810 ;; Registers used:
 12811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12812 ;; Tracked objects:
 12813 ;;		On entry : 0/0
 12814 ;;		On exit  : 0/0
 12815 ;;		Unchanged: 0/0
 12816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;Total ram usage:        1 bytes
 12822 ;; Hardware stack levels used:    1
 12823 ;; Hardware stack levels required when called:    9
 12824 ;; This function calls:
 12825 ;;		_DimmerLightsPointSelect
 12826 ;;		_getDimmerLights_Allow_Condition
 12827 ;;		_setDimmerLights
 12828 ;;		_setDimmerLights_Adj
 12829 ;; This function is called by:
 12830 ;;		_DimmerLights_Main
 12831 ;; This function uses a non-reentrant model
 12832 ;;
 12833                           
 12834                           
 12835                           ;psect for function _setDimmerLights_Main
 12836  155A                     _setDimmerLights_Main:	
 12837                           
 12838                           ;incstack = 0
 12839                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12840                           ;setDimmerLights_Main@lights stored from wreg
 12841  155A  0020               	movlb	0	; select bank0
 12842  155B  00EE               	movwf	setDimmerLights_Main@lights
 12843                           
 12844                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(lights);
 12845  155C  086E               	movf	setDimmerLights_Main@lights,w
 12846  155D  319C  2489  3195   	fcall	_DimmerLightsPointSelect
 12847                           
 12848                           ;Dimmer_B1.c: 539: if (DimmerLights->Trigger == 1) {
 12849  1560  0020               	movlb	0	; select bank0
 12850  1561  086F               	movf	_DimmerLights,w
 12851  1562  3E0A               	addlw	10
 12852  1563  0086               	movwf	6
 12853  1564  3001               	movlw	1	; select bank2/3
 12854  1565  0087               	movwf	7
 12855  1566  1C81               	btfss	1,1
 12856  1567  2D89               	goto	l9977
 12857                           
 12858                           ;Dimmer_B1.c: 540: if (getDimmerLights_Allow_Condition(lights) == 0) {
 12859  1568  086E               	movf	setDimmerLights_Main@lights,w
 12860  1569  3192  2272  3195   	fcall	_getDimmerLights_Allow_Condition
 12861  156C  3800               	iorlw	0
 12862  156D  1D03               	skipz
 12863  156E  0008               	return
 12864                           
 12865                           ;Dimmer_B1.c: 541: DimmerLights->Trigger = 0;
 12866  156F  0020               	movlb	0	; select bank0
 12867  1570  086F               	movf	_DimmerLights,w
 12868  1571  3E0A               	addlw	10
 12869  1572  0086               	movwf	6
 12870  1573  3001               	movlw	1	; select bank2/3
 12871  1574  0087               	movwf	7
 12872  1575  1081               	bcf	1,1
 12873                           
 12874                           ;Dimmer_B1.c: 542: if (DimmerLights->Switch == 1) {
 12875  1576  086F               	movf	_DimmerLights,w
 12876  1577  3E0A               	addlw	10
 12877  1578  0086               	movwf	6
 12878  1579  3001               	movlw	1	; select bank2/3
 12879  157A  0087               	movwf	7
 12880  157B  1C01               	btfss	1,0
 12881  157C  2D83               	goto	l9975
 12882                           
 12883                           ;Dimmer_B1.c: 543: setDimmerLights(lights, 1);
 12884  157D  01EB               	clrf	setDimmerLights@status
 12885  157E  0AEB               	incf	setDimmerLights@status,f
 12886  157F  086E               	movf	setDimmerLights_Main@lights,w
 12887  1580  3195  25AA         	fcall	_setDimmerLights
 12888                           
 12889                           ;Dimmer_B1.c: 544: } else {
 12890  1582  0008               	return
 12891  1583                     l9975:	
 12892                           
 12893                           ;Dimmer_B1.c: 545: setDimmerLights(lights, 0);
 12894  1583  0020               	movlb	0	; select bank0
 12895  1584  01EB               	clrf	setDimmerLights@status
 12896  1585  086E               	movf	setDimmerLights_Main@lights,w
 12897  1586  3195  25AA         	fcall	_setDimmerLights
 12898                           
 12899                           ;Dimmer_B1.c: 546: }
 12900                           ;Dimmer_B1.c: 547: }
 12901                           ;Dimmer_B1.c: 548: } else {
 12902  1588  0008               	return
 12903  1589                     l9977:	
 12904                           
 12905                           ;Dimmer_B1.c: 549: if (DimmerLights->TriggerAdj == 1) {
 12906  1589  0020               	movlb	0	; select bank0
 12907  158A  086F               	movf	_DimmerLights,w
 12908  158B  3E0A               	addlw	10
 12909  158C  0086               	movwf	6
 12910  158D  3001               	movlw	1	; select bank2/3
 12911  158E  0087               	movwf	7
 12912  158F  1D81               	btfss	1,3
 12913  1590  0008               	return
 12914                           
 12915                           ;Dimmer_B1.c: 550: DimmerLights->TriggerAdj = 0;
 12916  1591  086F               	movf	_DimmerLights,w
 12917  1592  3E0A               	addlw	10
 12918  1593  0086               	movwf	6
 12919  1594  3001               	movlw	1	; select bank2/3
 12920  1595  0087               	movwf	7
 12921  1596  1181               	bcf	1,3
 12922                           
 12923                           ;Dimmer_B1.c: 551: if (DimmerLights->SwitchAdj == 1) {
 12924  1597  086F               	movf	_DimmerLights,w
 12925  1598  3E0A               	addlw	10
 12926  1599  0086               	movwf	6
 12927  159A  3001               	movlw	1	; select bank2/3
 12928  159B  0087               	movwf	7
 12929  159C  1D01               	btfss	1,2
 12930  159D  2DA4               	goto	l9983
 12931                           
 12932                           ;Dimmer_B1.c: 552: setDimmerLights_Adj(lights, 1);
 12933  159E  01EB               	clrf	setDimmerLights_Adj@status
 12934  159F  0AEB               	incf	setDimmerLights_Adj@status,f
 12935  15A0  086E               	movf	setDimmerLights_Main@lights,w
 12936  15A1  3196  26F6         	fcall	_setDimmerLights_Adj
 12937                           
 12938                           ;Dimmer_B1.c: 553: } else {
 12939  15A3  0008               	return
 12940  15A4                     l9983:	
 12941                           
 12942                           ;Dimmer_B1.c: 554: setDimmerLights_Adj(lights, 0);
 12943  15A4  0020               	movlb	0	; select bank0
 12944  15A5  01EB               	clrf	setDimmerLights_Adj@status
 12945  15A6  086E               	movf	setDimmerLights_Main@lights,w
 12946  15A7  3196  26F6         	fcall	_setDimmerLights_Adj
 12947  15A9  0008               	return
 12948  15AA                     __end_of_setDimmerLights_Main:	
 12949                           
 12950                           	psect	text76
 12951  16F6                     __ptext76:	
 12952 ;; *************** function _setDimmerLights_Adj *****************
 12953 ;; Defined at:
 12954 ;;		line 672 in file "../src/Dimmer_B1.c"
 12955 ;; Parameters:    Size  Location     Type
 12956 ;;  lights          1    wreg     unsigned char 
 12957 ;;  status          1   75[BANK0 ] unsigned char 
 12958 ;; Auto vars:     Size  Location     Type
 12959 ;;  lights          1   77[BANK0 ] unsigned char 
 12960 ;; Return value:  Size  Location     Type
 12961 ;;		None               void
 12962 ;; Registers used:
 12963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12964 ;; Tracked objects:
 12965 ;;		On entry : 0/0
 12966 ;;		On exit  : 0/0
 12967 ;;		Unchanged: 0/0
 12968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12969 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;Total ram usage:        3 bytes
 12974 ;; Hardware stack levels used:    1
 12975 ;; Hardware stack levels required when called:    8
 12976 ;; This function calls:
 12977 ;;		_setBuz
 12978 ;;		_setDimmerLights_Line
 12979 ;;		_setPercentValue
 12980 ;;		_setProductData
 12981 ;;		_setRF_DimmerLights
 12982 ;;		_setTxData
 12983 ;; This function is called by:
 12984 ;;		_setDimmerLights_Main
 12985 ;; This function uses a non-reentrant model
 12986 ;;
 12987                           
 12988                           
 12989                           ;psect for function _setDimmerLights_Adj
 12990  16F6                     _setDimmerLights_Adj:	
 12991                           
 12992                           ;incstack = 0
 12993                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12994                           ;setDimmerLights_Adj@lights stored from wreg
 12995  16F6  0020               	movlb	0	; select bank0
 12996  16F7  00ED               	movwf	setDimmerLights_Adj@lights
 12997                           
 12998                           ;Dimmer_B1.c: 674: if (status == 1) {
 12999  16F8  086B               	movf	setDimmerLights_Adj@status,w
 13000  16F9  3A01               	xorlw	1
 13001  16FA  1D03               	skipz
 13002  16FB  2F0E               	goto	l9645
 13003                           
 13004                           ;Dimmer_B1.c: 675: DimmerLights->AdjSw = 1;
 13005  16FC  0A6F               	incf	_DimmerLights,w
 13006  16FD  0086               	movwf	6
 13007  16FE  3001               	movlw	1	; select bank2/3
 13008  16FF  0087               	movwf	7
 13009  1700  1701               	bsf	1,6
 13010                           
 13011                           ;Dimmer_B1.c: 676: DimmerLights->Signal = 1;
 13012  1701  0A6F               	incf	_DimmerLights,w
 13013  1702  0086               	movwf	6
 13014  1703  3001               	movlw	1	; select bank2/3
 13015  1704  0087               	movwf	7
 13016  1705  1681               	bsf	1,5
 13017                           
 13018                           ;Dimmer_B1.c: 677: setBuz(1, 100);
 13019  1706  3064               	movlw	100
 13020  1707  00A9               	movwf	setBuz@time
 13021  1708  3000               	movlw	0
 13022  1709  00AA               	movwf	setBuz@time+1
 13023  170A  3001               	movlw	1
 13024  170B  3197  274E         	fcall	_setBuz
 13025                           
 13026                           ;Dimmer_B1.c: 678: } else if (status == 0) {
 13027  170D  0008               	return
 13028  170E                     l9645:	
 13029  170E  0020               	movlb	0	; select bank0
 13030  170F  08EB               	movf	setDimmerLights_Adj@status,f
 13031  1710  1D03               	skipz
 13032  1711  0008               	return
 13033                           
 13034                           ;Dimmer_B1.c: 679: Dimmer.Load_Status = 0;
 13035  1712  0021               	movlb	1	; select bank1
 13036  1713  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 13037                           
 13038                           ;Dimmer_B1.c: 680: setDimmerLights_Line(lights);
 13039  1714  0020               	movlb	0	; select bank0
 13040  1715  086D               	movf	setDimmerLights_Adj@lights,w
 13041  1716  319D  25B3  3196   	fcall	_setDimmerLights_Line
 13042                           
 13043                           ;Dimmer_B1.c: 681: DimmerLights->AdjSw = 0;
 13044  1719  0020               	movlb	0	; select bank0
 13045  171A  0A6F               	incf	_DimmerLights,w
 13046  171B  0086               	movwf	6
 13047  171C  3001               	movlw	1	; select bank2/3
 13048  171D  0087               	movwf	7
 13049  171E  1301               	bcf	1,6
 13050                           
 13051                           ;Dimmer_B1.c: 682: DimmerLights->Signal = 0;
 13052  171F  0A6F               	incf	_DimmerLights,w
 13053  1720  0086               	movwf	6
 13054  1721  3001               	movlw	1	; select bank2/3
 13055  1722  0087               	movwf	7
 13056  1723  1281               	bcf	1,5
 13057                           
 13058                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13059  1724  086F               	movf	_DimmerLights,w
 13060  1725  3E04               	addlw	4
 13061  1726  0086               	movwf	6
 13062  1727  3001               	movlw	1	; select bank2/3
 13063  1728  0087               	movwf	7
 13064  1729  0801               	movf	1,w
 13065  172A  00EC               	movwf	??_setDimmerLights_Adj
 13066  172B  086F               	movf	_DimmerLights,w
 13067  172C  3E06               	addlw	6
 13068  172D  0086               	movwf	6
 13069  172E  3001               	movlw	1	; select bank2/3
 13070  172F  0087               	movwf	7
 13071  1730  086C               	movf	??_setDimmerLights_Adj,w
 13072  1731  0081               	movwf	1
 13073                           
 13074                           ;Dimmer_B1.c: 685: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 13075  1732  086F               	movf	_DimmerLights,w
 13076  1733  3E04               	addlw	4
 13077  1734  0086               	movwf	6
 13078  1735  3001               	movlw	1	; select bank2/3
 13079  1736  0087               	movwf	7
 13080  1737  0801               	movf	1,w
 13081  1738  318A  224A  3196   	fcall	_setPercentValue
 13082  173B  0020               	movlb	0	; select bank0
 13083  173C  00EC               	movwf	??_setDimmerLights_Adj
 13084  173D  086C               	movf	??_setDimmerLights_Adj,w
 13085  173E  00E2               	movwf	setProductData@value
 13086  173F  086D               	movf	setDimmerLights_Adj@lights,w
 13087  1740  3E14               	addlw	20
 13088  1741  319B  23CF  3196   	fcall	_setProductData
 13089                           
 13090                           ;Dimmer_B1.c: 700: setRF_DimmerLights(lights, 1);
 13091  1744  0020               	movlb	0	; select bank0
 13092  1745  01E6               	clrf	setRF_DimmerLights@on
 13093  1746  0AE6               	incf	setRF_DimmerLights@on,f
 13094  1747  086D               	movf	setDimmerLights_Adj@lights,w
 13095  1748  3197  27A7  3196   	fcall	_setRF_DimmerLights
 13096                           
 13097                           ;Dimmer_B1.c: 701: setTxData();
 13098  174B  318D  2571         	fcall	_setTxData
 13099  174D  0008               	return
 13100  174E                     __end_of_setDimmerLights_Adj:	
 13101                           
 13102                           	psect	text77
 13103  15AA                     __ptext77:	
 13104 ;; *************** function _setDimmerLights *****************
 13105 ;; Defined at:
 13106 ;;		line 630 in file "../src/Dimmer_B1.c"
 13107 ;; Parameters:    Size  Location     Type
 13108 ;;  lights          1    wreg     unsigned char 
 13109 ;;  status          1   75[BANK0 ] unsigned char 
 13110 ;; Auto vars:     Size  Location     Type
 13111 ;;  lights          1   77[BANK0 ] unsigned char 
 13112 ;; Return value:  Size  Location     Type
 13113 ;;		None               void
 13114 ;; Registers used:
 13115 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13116 ;; Tracked objects:
 13117 ;;		On entry : 0/0
 13118 ;;		On exit  : 0/0
 13119 ;;		Unchanged: 0/0
 13120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13121 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13122 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13123 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13124 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13125 ;;Total ram usage:        3 bytes
 13126 ;; Hardware stack levels used:    1
 13127 ;; Hardware stack levels required when called:    8
 13128 ;; This function calls:
 13129 ;;		_setDimmerLights_Line
 13130 ;;		_setLED
 13131 ;;		_setPercentValue
 13132 ;;		_setProductData
 13133 ;;		_setRF_DimmerLights
 13134 ;;		_setTxData
 13135 ;; This function is called by:
 13136 ;;		_setDimmerLights_Main
 13137 ;; This function uses a non-reentrant model
 13138 ;;
 13139                           
 13140                           
 13141                           ;psect for function _setDimmerLights
 13142  15AA                     _setDimmerLights:	
 13143                           
 13144                           ;incstack = 0
 13145                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13146                           ;setDimmerLights@lights stored from wreg
 13147  15AA  0020               	movlb	0	; select bank0
 13148  15AB  00ED               	movwf	setDimmerLights@lights
 13149                           
 13150                           ;Dimmer_B1.c: 638: if (status == 1) {
 13151  15AC  086B               	movf	setDimmerLights@status,w
 13152  15AD  3A01               	xorlw	1
 13153  15AE  1D03               	skipz
 13154  15AF  2DDA               	goto	l9625
 13155                           
 13156                           ;Dimmer_B1.c: 639: DimmerLights->StatusFlag = 1;
 13157  15B0  0A6F               	incf	_DimmerLights,w
 13158  15B1  0086               	movwf	6
 13159  15B2  3001               	movlw	1	; select bank2/3
 13160  15B3  0087               	movwf	7
 13161  15B4  1501               	bsf	1,2
 13162                           
 13163                           ;Dimmer_B1.c: 642: Dimmer.Load_Status = 1;
 13164  15B5  0021               	movlb	1	; select bank1
 13165  15B6  15C6               	bsf	_Dimmer^(0+128),3	;volatile
 13166                           
 13167                           ;Dimmer_B1.c: 643: setDimmerLights_Line(lights);
 13168  15B7  0020               	movlb	0	; select bank0
 13169  15B8  086D               	movf	setDimmerLights@lights,w
 13170  15B9  319D  25B3  3195   	fcall	_setDimmerLights_Line
 13171                           
 13172                           ;Dimmer_B1.c: 645: setLED(lights, 0);
 13173  15BC  0020               	movlb	0	; select bank0
 13174  15BD  01A2               	clrf	setLED@command
 13175  15BE  086D               	movf	setDimmerLights@lights,w
 13176  15BF  3196  264F  3195   	fcall	_setLED
 13177                           
 13178                           ;Dimmer_B1.c: 650: DimmerLights->DimmingValue = ((char)(75*0.8));
 13179  15C2  303C               	movlw	60
 13180  15C3  0020               	movlb	0	; select bank0
 13181  15C4  00EC               	movwf	??_setDimmerLights
 13182  15C5  086F               	movf	_DimmerLights,w
 13183  15C6  3E04               	addlw	4
 13184  15C7  0086               	movwf	6
 13185  15C8  3001               	movlw	1	; select bank2/3
 13186  15C9  0087               	movwf	7
 13187  15CA  086C               	movf	??_setDimmerLights,w
 13188  15CB  0081               	movwf	1
 13189                           
 13190                           ;Dimmer_B1.c: 652: setProductData((20 + lights), setPercentValue(((char)(75*0.8))));
 13191  15CC  303C               	movlw	60
 13192  15CD  318A  224A  3195   	fcall	_setPercentValue
 13193  15D0  0020               	movlb	0	; select bank0
 13194  15D1  00EC               	movwf	??_setDimmerLights
 13195  15D2  086C               	movf	??_setDimmerLights,w
 13196  15D3  00E2               	movwf	setProductData@value
 13197  15D4  086D               	movf	setDimmerLights@lights,w
 13198  15D5  3E14               	addlw	20
 13199  15D6  319B  23CF  3195   	fcall	_setProductData
 13200                           
 13201                           ;Dimmer_B1.c: 654: } else if (status == 0) {
 13202  15D9  2DF0               	goto	l9635
 13203  15DA                     l9625:	
 13204  15DA  0020               	movlb	0	; select bank0
 13205  15DB  08EB               	movf	setDimmerLights@status,f
 13206  15DC  1D03               	skipz
 13207  15DD  2DF0               	goto	l9635
 13208                           
 13209                           ;Dimmer_B1.c: 655: DimmerLights->StatusFlag = 0;
 13210  15DE  0A6F               	incf	_DimmerLights,w
 13211  15DF  0086               	movwf	6
 13212  15E0  3001               	movlw	1	; select bank2/3
 13213  15E1  0087               	movwf	7
 13214  15E2  1101               	bcf	1,2
 13215                           
 13216                           ;Dimmer_B1.c: 658: Dimmer.Load_Status = 0;
 13217  15E3  0021               	movlb	1	; select bank1
 13218  15E4  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 13219                           
 13220                           ;Dimmer_B1.c: 659: setDimmerLights_Line(0);
 13221  15E5  3000               	movlw	0
 13222  15E6  319D  25B3  3195   	fcall	_setDimmerLights_Line
 13223                           
 13224                           ;Dimmer_B1.c: 661: setLED(lights, 1);
 13225  15E9  0020               	movlb	0	; select bank0
 13226  15EA  01A2               	clrf	setLED@command
 13227  15EB  0AA2               	incf	setLED@command,f
 13228  15EC  086D               	movf	setDimmerLights@lights,w
 13229  15ED  3196  264F  3195   	fcall	_setLED
 13230  15F0                     l9635:	
 13231                           
 13232                           ;Dimmer_B1.c: 663: }
 13233                           ;Dimmer_B1.c: 666: setRF_DimmerLights(lights, status);
 13234  15F0  0020               	movlb	0	; select bank0
 13235  15F1  086B               	movf	setDimmerLights@status,w
 13236  15F2  00EC               	movwf	??_setDimmerLights
 13237  15F3  086C               	movf	??_setDimmerLights,w
 13238  15F4  00E6               	movwf	setRF_DimmerLights@on
 13239  15F5  086D               	movf	setDimmerLights@lights,w
 13240  15F6  3197  27A7  3195   	fcall	_setRF_DimmerLights
 13241                           
 13242                           ;Dimmer_B1.c: 667: setTxData();
 13243  15F9  318D  2571         	fcall	_setTxData
 13244  15FB  0008               	return
 13245  15FC                     __end_of_setDimmerLights:	
 13246                           
 13247                           	psect	text78
 13248  0D71                     __ptext78:	
 13249 ;; *************** function _setTxData *****************
 13250 ;; Defined at:
 13251 ;;		line 167 in file "../src/RF_Control_B1.c"
 13252 ;; Parameters:    Size  Location     Type
 13253 ;;		None
 13254 ;; Auto vars:     Size  Location     Type
 13255 ;;  i               1    0        unsigned char 
 13256 ;; Return value:  Size  Location     Type
 13257 ;;		None               void
 13258 ;; Registers used:
 13259 ;;		wreg, fsr1l, fsr1h
 13260 ;; Tracked objects:
 13261 ;;		On entry : 0/0
 13262 ;;		On exit  : 0/0
 13263 ;;		Unchanged: 0/0
 13264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13267 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;Total ram usage:        1 bytes
 13270 ;; Hardware stack levels used:    1
 13271 ;; Hardware stack levels required when called:    5
 13272 ;; This function calls:
 13273 ;;		Nothing
 13274 ;; This function is called by:
 13275 ;;		_setDimmerLights
 13276 ;;		_setDimmerLights_Adj
 13277 ;;		_getRxData
 13278 ;;		_setControl_Lights_Table
 13279 ;;		_setRFSW_Control
 13280 ;;		_setRFSW_AdjControl
 13281 ;; This function uses a non-reentrant model
 13282 ;;
 13283                           
 13284                           
 13285                           ;psect for function _setTxData
 13286  0D71                     _setTxData:	
 13287                           
 13288                           ;RF_Control_B1.c: 168: char i;
 13289                           ;RF_Control_B1.c: 169: if (RF1.Enable == 1) {
 13290                           
 13291                           ;incstack = 0
 13292                           ; Regs used in _setTxData: [wregfsr1]
 13293  0D71  0021               	movlb	1	; select bank1
 13294  0D72  1C3A               	btfss	_RF1^(0+128),0
 13295  0D73  0008               	return
 13296                           
 13297                           ;RF_Control_B1.c: 171: if (RF1.TransceiveGO == 0) {
 13298  0D74  193A               	btfsc	_RF1^(0+128),2
 13299  0D75  0008               	return
 13300                           
 13301                           ;RF_Control_B1.c: 172: RF1.TransceiveGO = 1;
 13302  0D76  153A               	bsf	_RF1^(0+128),2
 13303                           
 13304                           ;RF_Control_B1.c: 173: RF1.RunTime = 20;
 13305  0D77  3014               	movlw	20
 13306  0D78  00C1               	movwf	(_RF1^(0+128)+7)
 13307  0D79  3000               	movlw	0
 13308  0D7A  00C2               	movwf	(_RF1^(0+128)+8)
 13309                           
 13310                           ;RF_Control_B1.c: 185: RF_Data[0] = 0x63;
 13311  0D7B  3063               	movlw	99
 13312  0D7C  0020               	movlb	0	; select bank0
 13313  0D7D  00A0               	movwf	??_setTxData
 13314  0D7E  0820               	movf	??_setTxData,w
 13315  0D7F  0023               	movlb	3	; select bank3
 13316  0D80  00A0               	movwf	_RF_Data^(0+384)
 13317                           
 13318                           ;RF_Control_B1.c: 186: RF_Data[1] = 0x02;
 13319  0D81  3002               	movlw	2
 13320  0D82  0020               	movlb	0	; select bank0
 13321  0D83  00A0               	movwf	??_setTxData
 13322  0D84  0820               	movf	??_setTxData,w
 13323  0D85  0023               	movlb	3	; select bank3
 13324  0D86  00A1               	movwf	(_RF_Data^(0+384)+1)
 13325                           
 13326                           ;RF_Control_B1.c: 188: RF_Data[2] = product->Data[2];
 13327  0D87  0879               	movf	_product,w
 13328  0D88  0086               	movwf	6
 13329  0D89  3002               	movlw	2	; select bank4/5
 13330  0D8A  0087               	movwf	7
 13331  0D8B  3002               	movlw	2	; select bank4/5
 13332  0D8C  3F42               	moviw [2]fsr1
 13333  0D8D  00A2               	movwf	(_RF_Data^(0+384)+2)
 13334                           
 13335                           ;RF_Control_B1.c: 189: RF_Data[3] = product->Data[3];
 13336  0D8E  0879               	movf	_product,w
 13337  0D8F  0086               	movwf	6
 13338  0D90  3002               	movlw	2	; select bank4/5
 13339  0D91  0087               	movwf	7
 13340  0D92  3002               	movlw	2	; select bank4/5
 13341  0D93  3F43               	moviw [3]fsr1
 13342  0D94  00A3               	movwf	(_RF_Data^(0+384)+3)
 13343                           
 13344                           ;RF_Control_B1.c: 190: RF_Data[4] = product->Data[4];
 13345  0D95  0879               	movf	_product,w
 13346  0D96  0086               	movwf	6
 13347  0D97  3002               	movlw	2	; select bank4/5
 13348  0D98  0087               	movwf	7
 13349  0D99  3002               	movlw	2	; select bank4/5
 13350  0D9A  3F44               	moviw [4]fsr1
 13351  0D9B  00A4               	movwf	(_RF_Data^(0+384)+4)
 13352                           
 13353                           ;RF_Control_B1.c: 191: RF_Data[5] = product->Data[5];
 13354  0D9C  0879               	movf	_product,w
 13355  0D9D  0086               	movwf	6
 13356  0D9E  3002               	movlw	2	; select bank4/5
 13357  0D9F  0087               	movwf	7
 13358  0DA0  3002               	movlw	2	; select bank4/5
 13359  0DA1  3F45               	moviw [5]fsr1
 13360  0DA2  00A5               	movwf	(_RF_Data^(0+384)+5)
 13361                           
 13362                           ;RF_Control_B1.c: 192: RF_Data[6] = product->Data[6];
 13363  0DA3  0879               	movf	_product,w
 13364  0DA4  0086               	movwf	6
 13365  0DA5  3002               	movlw	2	; select bank4/5
 13366  0DA6  0087               	movwf	7
 13367  0DA7  3002               	movlw	2	; select bank4/5
 13368  0DA8  3F46               	moviw [6]fsr1
 13369  0DA9  00A6               	movwf	(_RF_Data^(0+384)+6)
 13370                           
 13371                           ;RF_Control_B1.c: 193: RF_Data[7] = product->Data[7];
 13372  0DAA  0879               	movf	_product,w
 13373  0DAB  0086               	movwf	6
 13374  0DAC  3002               	movlw	2	; select bank4/5
 13375  0DAD  0087               	movwf	7
 13376  0DAE  3002               	movlw	2	; select bank4/5
 13377  0DAF  3F47               	moviw [7]fsr1
 13378  0DB0  00A7               	movwf	(_RF_Data^(0+384)+7)
 13379                           
 13380                           ;RF_Control_B1.c: 194: RF_Data[8] = product->Data[8];
 13381  0DB1  0879               	movf	_product,w
 13382  0DB2  0086               	movwf	6
 13383  0DB3  3002               	movlw	2	; select bank4/5
 13384  0DB4  0087               	movwf	7
 13385  0DB5  3002               	movlw	2	; select bank4/5
 13386  0DB6  3F48               	moviw [8]fsr1
 13387  0DB7  00A8               	movwf	(_RF_Data^(0+384)+8)
 13388                           
 13389                           ;RF_Control_B1.c: 195: RF_Data[9] = product->Data[9];
 13390  0DB8  0879               	movf	_product,w
 13391  0DB9  0086               	movwf	6
 13392  0DBA  3002               	movlw	2	; select bank4/5
 13393  0DBB  0087               	movwf	7
 13394  0DBC  3002               	movlw	2	; select bank4/5
 13395  0DBD  3F49               	moviw [9]fsr1
 13396  0DBE  00A9               	movwf	(_RF_Data^(0+384)+9)
 13397                           
 13398                           ;RF_Control_B1.c: 196: RF_Data[10] = product->Data[10];
 13399  0DBF  0879               	movf	_product,w
 13400  0DC0  0086               	movwf	6
 13401  0DC1  3002               	movlw	2	; select bank4/5
 13402  0DC2  0087               	movwf	7
 13403  0DC3  3002               	movlw	2	; select bank4/5
 13404  0DC4  3F4A               	moviw [10]fsr1
 13405  0DC5  00AA               	movwf	(_RF_Data^(0+384)+10)
 13406                           
 13407                           ;RF_Control_B1.c: 197: RF_Data[11] = product->Data[11];
 13408  0DC6  0879               	movf	_product,w
 13409  0DC7  0086               	movwf	6
 13410  0DC8  3002               	movlw	2	; select bank4/5
 13411  0DC9  0087               	movwf	7
 13412  0DCA  3002               	movlw	2	; select bank4/5
 13413  0DCB  3F4B               	moviw [11]fsr1
 13414  0DCC  00AB               	movwf	(_RF_Data^(0+384)+11)
 13415                           
 13416                           ;RF_Control_B1.c: 198: RF_Data[12] = product->Data[12];
 13417  0DCD  0879               	movf	_product,w
 13418  0DCE  0086               	movwf	6
 13419  0DCF  3002               	movlw	2	; select bank4/5
 13420  0DD0  0087               	movwf	7
 13421  0DD1  3002               	movlw	2	; select bank4/5
 13422  0DD2  3F4C               	moviw [12]fsr1
 13423  0DD3  00AC               	movwf	(_RF_Data^(0+384)+12)
 13424                           
 13425                           ;RF_Control_B1.c: 199: RF_Data[13] = product->Data[13];
 13426  0DD4  0879               	movf	_product,w
 13427  0DD5  0086               	movwf	6
 13428  0DD6  3002               	movlw	2	; select bank4/5
 13429  0DD7  0087               	movwf	7
 13430  0DD8  3002               	movlw	2	; select bank4/5
 13431  0DD9  3F4D               	moviw [13]fsr1
 13432  0DDA  00AD               	movwf	(_RF_Data^(0+384)+13)
 13433                           
 13434                           ;RF_Control_B1.c: 200: RF_Data[14] = product->Data[14];
 13435  0DDB  0879               	movf	_product,w
 13436  0DDC  0086               	movwf	6
 13437  0DDD  3002               	movlw	2	; select bank4/5
 13438  0DDE  0087               	movwf	7
 13439  0DDF  3002               	movlw	2	; select bank4/5
 13440  0DE0  3F4E               	moviw [14]fsr1
 13441  0DE1  00AE               	movwf	(_RF_Data^(0+384)+14)
 13442                           
 13443                           ;RF_Control_B1.c: 201: RF_Data[15] = product->Data[15];
 13444  0DE2  0879               	movf	_product,w
 13445  0DE3  0086               	movwf	6
 13446  0DE4  3002               	movlw	2	; select bank4/5
 13447  0DE5  0087               	movwf	7
 13448  0DE6  3002               	movlw	2	; select bank4/5
 13449  0DE7  3F4F               	moviw [15]fsr1
 13450  0DE8  00AF               	movwf	(_RF_Data^(0+384)+15)
 13451                           
 13452                           ;RF_Control_B1.c: 202: RF_Data[16] = product->Data[16];
 13453  0DE9  0879               	movf	_product,w
 13454  0DEA  0086               	movwf	6
 13455  0DEB  3002               	movlw	2	; select bank4/5
 13456  0DEC  0087               	movwf	7
 13457  0DED  3002               	movlw	2	; select bank4/5
 13458  0DEE  3F50               	moviw [16]fsr1
 13459  0DEF  00B0               	movwf	(_RF_Data^(0+384)+16)
 13460                           
 13461                           ;RF_Control_B1.c: 203: RF_Data[17] = product->Data[17];
 13462  0DF0  0879               	movf	_product,w
 13463  0DF1  0086               	movwf	6
 13464  0DF2  3002               	movlw	2	; select bank4/5
 13465  0DF3  0087               	movwf	7
 13466  0DF4  3002               	movlw	2	; select bank4/5
 13467  0DF5  3F51               	moviw [17]fsr1
 13468  0DF6  00B1               	movwf	(_RF_Data^(0+384)+17)
 13469                           
 13470                           ;RF_Control_B1.c: 204: RF_Data[18] = product->Data[18];
 13471  0DF7  0879               	movf	_product,w
 13472  0DF8  0086               	movwf	6
 13473  0DF9  3002               	movlw	2	; select bank4/5
 13474  0DFA  0087               	movwf	7
 13475  0DFB  3002               	movlw	2	; select bank4/5
 13476  0DFC  3F52               	moviw [18]fsr1
 13477  0DFD  00B2               	movwf	(_RF_Data^(0+384)+18)
 13478                           
 13479                           ;RF_Control_B1.c: 205: RF_Data[19] = product->Data[19];
 13480  0DFE  0879               	movf	_product,w
 13481  0DFF  0086               	movwf	6
 13482  0E00  3002               	movlw	2	; select bank4/5
 13483  0E01  0087               	movwf	7
 13484  0E02  3002               	movlw	2	; select bank4/5
 13485  0E03  3F53               	moviw [19]fsr1
 13486  0E04  00B3               	movwf	(_RF_Data^(0+384)+19)
 13487                           
 13488                           ;RF_Control_B1.c: 206: RF_Data[20] = 210;
 13489  0E05  30D2               	movlw	210
 13490  0E06  0020               	movlb	0	; select bank0
 13491  0E07  00A0               	movwf	??_setTxData
 13492  0E08  0820               	movf	??_setTxData,w
 13493  0E09  0023               	movlb	3	; select bank3
 13494  0E0A  00B4               	movwf	(_RF_Data^(0+384)+20)
 13495  0E0B  0008               	return
 13496  0E0C                     __end_of_setTxData:	
 13497                           
 13498                           	psect	text79
 13499  17A7                     __ptext79:	
 13500 ;; *************** function _setRF_DimmerLights *****************
 13501 ;; Defined at:
 13502 ;;		line 437 in file "../src/RF_Control_B1.c"
 13503 ;; Parameters:    Size  Location     Type
 13504 ;;  lights          1    wreg     unsigned char 
 13505 ;;  on              1   70[BANK0 ] unsigned char 
 13506 ;; Auto vars:     Size  Location     Type
 13507 ;;  lights          1   74[BANK0 ] unsigned char 
 13508 ;;  status          1   73[BANK0 ] unsigned char 
 13509 ;; Return value:  Size  Location     Type
 13510 ;;		None               void
 13511 ;; Registers used:
 13512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13513 ;; Tracked objects:
 13514 ;;		On entry : 0/0
 13515 ;;		On exit  : 0/0
 13516 ;;		Unchanged: 0/0
 13517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13518 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13520 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;Total ram usage:        5 bytes
 13523 ;; Hardware stack levels used:    1
 13524 ;; Hardware stack levels required when called:    6
 13525 ;; This function calls:
 13526 ;;		_setProductData
 13527 ;; This function is called by:
 13528 ;;		_setDimmerLights
 13529 ;;		_setDimmerLights_Adj
 13530 ;;		_setRFSW_Control
 13531 ;; This function uses a non-reentrant model
 13532 ;;
 13533                           
 13534                           
 13535                           ;psect for function _setRF_DimmerLights
 13536  17A7                     _setRF_DimmerLights:	
 13537                           
 13538                           ;incstack = 0
 13539                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13540                           ;setRF_DimmerLights@lights stored from wreg
 13541  17A7  0020               	movlb	0	; select bank0
 13542  17A8  00EA               	movwf	setRF_DimmerLights@lights
 13543                           
 13544                           ;RF_Control_B1.c: 438: char status = 1;
 13545  17A9  01E9               	clrf	setRF_DimmerLights@status
 13546  17AA  0AE9               	incf	setRF_DimmerLights@status,f
 13547                           
 13548                           ;RF_Control_B1.c: 439: status <<= (lights - 1);
 13549  17AB  086A               	movf	setRF_DimmerLights@lights,w
 13550  17AC  3EFF               	addlw	-1
 13551  17AD  0A89               	incf	9,f
 13552  17AE  2FB1               	goto	u9960
 13553  17AF                     u9965:	
 13554  17AF  1003               	clrc
 13555  17B0  0DE9               	rlf	setRF_DimmerLights@status,f
 13556  17B1                     u9960:	
 13557  17B1  3EFF               	addlw	-1
 13558  17B2  1D03               	skipz
 13559  17B3  2FAF               	goto	u9965
 13560                           
 13561                           ;RF_Control_B1.c: 440: setProductData(11, lights);
 13562  17B4  086A               	movf	setRF_DimmerLights@lights,w
 13563  17B5  00E7               	movwf	??_setRF_DimmerLights
 13564  17B6  0867               	movf	??_setRF_DimmerLights,w
 13565  17B7  00E2               	movwf	setProductData@value
 13566  17B8  300B               	movlw	11
 13567  17B9  319B  23CF  3197   	fcall	_setProductData
 13568                           
 13569                           ;RF_Control_B1.c: 448: setProductData(9, product->Data[20 + lights]);
 13570  17BC  0020               	movlb	0	; select bank0
 13571  17BD  086A               	movf	setRF_DimmerLights@lights,w
 13572  17BE  3E14               	addlw	20
 13573  17BF  0779               	addwf	_product,w
 13574  17C0  00E7               	movwf	??_setRF_DimmerLights
 13575  17C1  0867               	movf	??_setRF_DimmerLights,w
 13576  17C2  0086               	movwf	6
 13577  17C3  3002               	movlw	2	; select bank4/5
 13578  17C4  0087               	movwf	7
 13579  17C5  0801               	movf	1,w
 13580  17C6  00E8               	movwf	??_setRF_DimmerLights+1
 13581  17C7  0868               	movf	??_setRF_DimmerLights+1,w
 13582  17C8  00E2               	movwf	setProductData@value
 13583  17C9  3009               	movlw	9
 13584  17CA  319B  23CF  3197   	fcall	_setProductData
 13585                           
 13586                           ;RF_Control_B1.c: 449: setProductData(17, product->Data[26 + lights]);
 13587  17CD  0020               	movlb	0	; select bank0
 13588  17CE  086A               	movf	setRF_DimmerLights@lights,w
 13589  17CF  3E1A               	addlw	26
 13590  17D0  0779               	addwf	_product,w
 13591  17D1  00E7               	movwf	??_setRF_DimmerLights
 13592  17D2  0867               	movf	??_setRF_DimmerLights,w
 13593  17D3  0086               	movwf	6
 13594  17D4  3002               	movlw	2	; select bank4/5
 13595  17D5  0087               	movwf	7
 13596  17D6  0801               	movf	1,w
 13597  17D7  00E8               	movwf	??_setRF_DimmerLights+1
 13598  17D8  0868               	movf	??_setRF_DimmerLights+1,w
 13599  17D9  00E2               	movwf	setProductData@value
 13600  17DA  3011               	movlw	17
 13601  17DB  319B  23CF  3197   	fcall	_setProductData
 13602                           
 13603                           ;RF_Control_B1.c: 450: if (on == 1) {
 13604  17DE  0020               	movlb	0	; select bank0
 13605  17DF  0866               	movf	setRF_DimmerLights@on,w
 13606  17E0  3A01               	xorlw	1
 13607  17E1  1D03               	skipz
 13608  17E2  2FF1               	goto	l9065
 13609                           
 13610                           ;RF_Control_B1.c: 451: setProductData(15, (product->Data[15] | status));
 13611  17E3  0879               	movf	_product,w
 13612  17E4  3E0F               	addlw	15
 13613  17E5  0086               	movwf	6
 13614  17E6  3002               	movlw	2	; select bank4/5
 13615  17E7  0087               	movwf	7
 13616  17E8  0801               	movf	1,w
 13617  17E9  0469               	iorwf	setRF_DimmerLights@status,w
 13618  17EA  00E7               	movwf	??_setRF_DimmerLights
 13619  17EB  0867               	movf	??_setRF_DimmerLights,w
 13620  17EC  00E2               	movwf	setProductData@value
 13621  17ED  300F               	movlw	15
 13622  17EE  319B  23CF         	fcall	_setProductData
 13623                           
 13624                           ;RF_Control_B1.c: 452: } else {
 13625  17F0  0008               	return
 13626  17F1                     l9065:	
 13627                           
 13628                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15]&(~status)));
 13629  17F1  0879               	movf	_product,w
 13630  17F2  3E0F               	addlw	15
 13631  17F3  0086               	movwf	6
 13632  17F4  3002               	movlw	2	; select bank4/5
 13633  17F5  0087               	movwf	7
 13634  17F6  0020               	movlb	0	; select bank0
 13635  17F7  0969               	comf	setRF_DimmerLights@status,w
 13636  17F8  0501               	andwf	1,w
 13637  17F9  00E7               	movwf	??_setRF_DimmerLights
 13638  17FA  0867               	movf	??_setRF_DimmerLights,w
 13639  17FB  00E2               	movwf	setProductData@value
 13640  17FC  300F               	movlw	15
 13641  17FD  319B  23CF         	fcall	_setProductData
 13642  17FF  0008               	return
 13643  1800                     __end_of_setRF_DimmerLights:	
 13644                           
 13645                           	psect	text80
 13646  0A4A                     __ptext80:	
 13647 ;; *************** function _setPercentValue *****************
 13648 ;; Defined at:
 13649 ;;		line 1034 in file "../src/Dimmer_B1.c"
 13650 ;; Parameters:    Size  Location     Type
 13651 ;;  value           1    wreg     unsigned char 
 13652 ;; Auto vars:     Size  Location     Type
 13653 ;;  value           1   62[BANK0 ] unsigned char 
 13654 ;;  i               3   63[BANK0 ] float 
 13655 ;; Return value:  Size  Location     Type
 13656 ;;                  1    wreg      unsigned char 
 13657 ;; Registers used:
 13658 ;;		wreg, status,2, status,0, pclath, cstack
 13659 ;; Tracked objects:
 13660 ;;		On entry : 0/0
 13661 ;;		On exit  : 0/0
 13662 ;;		Unchanged: 0/0
 13663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13665 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13668 ;;Total ram usage:        6 bytes
 13669 ;; Hardware stack levels used:    1
 13670 ;; Hardware stack levels required when called:    7
 13671 ;; This function calls:
 13672 ;;		___awtoft
 13673 ;;		___ftadd
 13674 ;;		___ftdiv
 13675 ;;		___ftneg
 13676 ;;		___fttol
 13677 ;; This function is called by:
 13678 ;;		_setDimmerLights
 13679 ;;		_setDimmerLights_Adj
 13680 ;;		_Flash_Memory_Initialization
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           
 13685                           ;psect for function _setPercentValue
 13686  0A4A                     _setPercentValue:	
 13687                           
 13688                           ;incstack = 0
 13689                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13690                           ;setPercentValue@value stored from wreg
 13691  0A4A  0020               	movlb	0	; select bank0
 13692  0A4B  00DE               	movwf	setPercentValue@value
 13693                           
 13694                           ;Dimmer_B1.c: 1042: float i = ((char)(75*0.8)) - ((char)(15*0.8));
 13695  0A4C  3000               	movlw	0
 13696  0A4D  00DF               	movwf	setPercentValue@i
 13697  0A4E  3040               	movlw	64
 13698  0A4F  00E0               	movwf	setPercentValue@i+1
 13699  0A50  3042               	movlw	66
 13700  0A51  00E1               	movwf	setPercentValue@i+2
 13701                           
 13702                           ;Dimmer_B1.c: 1043: i /= 100;
 13703  0A52  3000               	movlw	0
 13704  0A53  00AE               	movwf	___ftdiv@f2
 13705  0A54  30C8               	movlw	200
 13706  0A55  00AF               	movwf	___ftdiv@f2+1
 13707  0A56  3042               	movlw	66
 13708  0A57  00B0               	movwf	___ftdiv@f2+2
 13709  0A58  085F               	movf	setPercentValue@i,w
 13710  0A59  00B1               	movwf	___ftdiv@f1
 13711  0A5A  0860               	movf	setPercentValue@i+1,w
 13712  0A5B  00B2               	movwf	___ftdiv@f1+1
 13713  0A5C  0861               	movf	setPercentValue@i+2,w
 13714  0A5D  00B3               	movwf	___ftdiv@f1+2
 13715  0A5E  318E  26A7  318A   	fcall	___ftdiv
 13716  0A61  0020               	movlb	0	; select bank0
 13717  0A62  082E               	movf	?___ftdiv,w
 13718  0A63  00DF               	movwf	setPercentValue@i
 13719  0A64  082F               	movf	?___ftdiv+1,w
 13720  0A65  00E0               	movwf	setPercentValue@i+1
 13721  0A66  0830               	movf	?___ftdiv+2,w
 13722  0A67  00E1               	movwf	setPercentValue@i+2
 13723                           
 13724                           ;Dimmer_B1.c: 1045: return (char) (100 - ((((char)(75*0.8)) - value) / i));
 13725  0A68  085E               	movf	setPercentValue@value,w
 13726  0A69  00DC               	movwf	??_setPercentValue
 13727  0A6A  01DD               	clrf	??_setPercentValue+1
 13728  0A6B  09DC               	comf	??_setPercentValue,f
 13729  0A6C  09DD               	comf	??_setPercentValue+1,f
 13730  0A6D  0ADC               	incf	??_setPercentValue,f
 13731  0A6E  1903               	skipnz
 13732  0A6F  0ADD               	incf	??_setPercentValue+1,f
 13733  0A70  085C               	movf	??_setPercentValue,w
 13734  0A71  3E3C               	addlw	60
 13735  0A72  00A8               	movwf	___awtoft@c
 13736  0A73  3000               	movlw	0
 13737  0A74  3D5D               	addwfc	??_setPercentValue+1,w
 13738  0A75  00A9               	movwf	___awtoft@c+1
 13739  0A76  319F  2746  318A   	fcall	___awtoft
 13740  0A79  0020               	movlb	0	; select bank0
 13741  0A7A  0828               	movf	?___awtoft,w
 13742  0A7B  00B1               	movwf	___ftdiv@f1
 13743  0A7C  0829               	movf	?___awtoft+1,w
 13744  0A7D  00B2               	movwf	___ftdiv@f1+1
 13745  0A7E  082A               	movf	?___awtoft+2,w
 13746  0A7F  00B3               	movwf	___ftdiv@f1+2
 13747  0A80  085F               	movf	setPercentValue@i,w
 13748  0A81  00AE               	movwf	___ftdiv@f2
 13749  0A82  0860               	movf	setPercentValue@i+1,w
 13750  0A83  00AF               	movwf	___ftdiv@f2+1
 13751  0A84  0861               	movf	setPercentValue@i+2,w
 13752  0A85  00B0               	movwf	___ftdiv@f2+2
 13753  0A86  318E  26A7  318A   	fcall	___ftdiv
 13754  0A89  0020               	movlb	0	; select bank0
 13755  0A8A  082E               	movf	?___ftdiv,w
 13756  0A8B  00BE               	movwf	___ftneg@f1
 13757  0A8C  082F               	movf	?___ftdiv+1,w
 13758  0A8D  00BF               	movwf	___ftneg@f1+1
 13759  0A8E  0830               	movf	?___ftdiv+2,w
 13760  0A8F  00C0               	movwf	___ftneg@f1+2
 13761  0A90  319B  233A  318A   	fcall	___ftneg
 13762  0A93  0020               	movlb	0	; select bank0
 13763  0A94  083E               	movf	?___ftneg,w
 13764  0A95  00C4               	movwf	___ftadd@f2
 13765  0A96  083F               	movf	?___ftneg+1,w
 13766  0A97  00C5               	movwf	___ftadd@f2+1
 13767  0A98  0840               	movf	?___ftneg+2,w
 13768  0A99  00C6               	movwf	___ftadd@f2+2
 13769  0A9A  3000               	movlw	0
 13770  0A9B  00C1               	movwf	___ftadd@f1
 13771  0A9C  30C8               	movlw	200
 13772  0A9D  00C2               	movwf	___ftadd@f1+1
 13773  0A9E  3042               	movlw	66
 13774  0A9F  00C3               	movwf	___ftadd@f1+2
 13775  0AA0  3184  2469  318A   	fcall	___ftadd
 13776  0AA3  0020               	movlb	0	; select bank0
 13777  0AA4  0841               	movf	?___ftadd,w
 13778  0AA5  00CE               	movwf	___fttol@f1
 13779  0AA6  0842               	movf	?___ftadd+1,w
 13780  0AA7  00CF               	movwf	___fttol@f1+1
 13781  0AA8  0843               	movf	?___ftadd+2,w
 13782  0AA9  00D0               	movwf	___fttol@f1+2
 13783  0AAA  318C  24EA         	fcall	___fttol
 13784  0AAC  0020               	movlb	0	; select bank0
 13785  0AAD  084E               	movf	?___fttol,w
 13786  0AAE  0008               	return
 13787  0AAF                     __end_of_setPercentValue:	
 13788                           
 13789                           	psect	text81
 13790  0CEA                     __ptext81:	
 13791 ;; *************** function ___fttol *****************
 13792 ;; Defined at:
 13793 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13794 ;; Parameters:    Size  Location     Type
 13795 ;;  f1              3   46[BANK0 ] float 
 13796 ;; Auto vars:     Size  Location     Type
 13797 ;;  lval            4   55[BANK0 ] unsigned long 
 13798 ;;  exp1            1   59[BANK0 ] unsigned char 
 13799 ;;  sign1           1   54[BANK0 ] unsigned char 
 13800 ;; Return value:  Size  Location     Type
 13801 ;;                  4   46[BANK0 ] long 
 13802 ;; Registers used:
 13803 ;;		wreg, status,2, status,0
 13804 ;; Tracked objects:
 13805 ;;		On entry : 0/0
 13806 ;;		On exit  : 0/0
 13807 ;;		Unchanged: 0/0
 13808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13809 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13810 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13811 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13812 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13813 ;;Total ram usage:       14 bytes
 13814 ;; Hardware stack levels used:    1
 13815 ;; Hardware stack levels required when called:    5
 13816 ;; This function calls:
 13817 ;;		Nothing
 13818 ;; This function is called by:
 13819 ;;		_getPercentValue
 13820 ;;		_setPercentValue
 13821 ;; This function uses a non-reentrant model
 13822 ;;
 13823                           
 13824                           
 13825                           ;psect for function ___fttol
 13826  0CEA                     ___fttol:	
 13827                           
 13828                           ;incstack = 0
 13829                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13830  0CEA  0020               	movlb	0	; select bank0
 13831  0CEB  084E               	movf	___fttol@f1,w
 13832  0CEC  00D2               	movwf	??___fttol
 13833  0CED  084F               	movf	___fttol@f1+1,w
 13834  0CEE  00D3               	movwf	??___fttol+1
 13835  0CEF  0850               	movf	___fttol@f1+2,w
 13836  0CF0  00D4               	movwf	??___fttol+2
 13837  0CF1  1003               	clrc
 13838  0CF2  0D53               	rlf	??___fttol+1,w
 13839  0CF3  0D54               	rlf	??___fttol+2,w
 13840  0CF4  00D5               	movwf	??___fttol+3
 13841  0CF5  0855               	movf	??___fttol+3,w
 13842  0CF6  00DB               	movwf	___fttol@exp1
 13843  0CF7  08DB               	movf	___fttol@exp1,f
 13844  0CF8  1D03               	skipz
 13845  0CF9  2D03               	goto	l8809
 13846  0CFA  3000               	movlw	0
 13847  0CFB  00D1               	movwf	?___fttol+3
 13848  0CFC  3000               	movlw	0
 13849  0CFD  00D0               	movwf	?___fttol+2
 13850  0CFE  3000               	movlw	0
 13851  0CFF  00CF               	movwf	?___fttol+1
 13852  0D00  3000               	movlw	0
 13853  0D01  00CE               	movwf	?___fttol
 13854  0D02  0008               	return
 13855  0D03                     l8809:	
 13856  0D03  084E               	movf	___fttol@f1,w
 13857  0D04  00D2               	movwf	??___fttol
 13858  0D05  084F               	movf	___fttol@f1+1,w
 13859  0D06  00D3               	movwf	??___fttol+1
 13860  0D07  0850               	movf	___fttol@f1+2,w
 13861  0D08  00D4               	movwf	??___fttol+2
 13862  0D09  3017               	movlw	23
 13863  0D0A                     u9505:	
 13864  0D0A  36D4               	lsrf	??___fttol+2,f
 13865  0D0B  0CD3               	rrf	??___fttol+1,f
 13866  0D0C  0CD2               	rrf	??___fttol,f
 13867  0D0D  0B89               	decfsz	9,f
 13868  0D0E  2D0A               	goto	u9505
 13869  0D0F  0852               	movf	??___fttol,w
 13870  0D10  00D5               	movwf	??___fttol+3
 13871  0D11  0855               	movf	??___fttol+3,w
 13872  0D12  00D6               	movwf	___fttol@sign1
 13873  0D13  17CF               	bsf	___fttol@f1+1,7
 13874  0D14  30FF               	movlw	255
 13875  0D15  05CE               	andwf	___fttol@f1,f
 13876  0D16  30FF               	movlw	255
 13877  0D17  05CF               	andwf	___fttol@f1+1,f
 13878  0D18  3000               	movlw	0
 13879  0D19  05D0               	andwf	___fttol@f1+2,f
 13880  0D1A  084E               	movf	___fttol@f1,w
 13881  0D1B  00D7               	movwf	___fttol@lval
 13882  0D1C  084F               	movf	___fttol@f1+1,w
 13883  0D1D  00D8               	movwf	___fttol@lval+1
 13884  0D1E  0850               	movf	___fttol@f1+2,w
 13885  0D1F  00D9               	movwf	___fttol@lval+2
 13886  0D20  01DA               	clrf	___fttol@lval+3
 13887  0D21  308E               	movlw	142
 13888  0D22  02DB               	subwf	___fttol@exp1,f
 13889  0D23  1FDB               	btfss	___fttol@exp1,7
 13890  0D24  2D41               	goto	l8829
 13891  0D25  085B               	movf	___fttol@exp1,w
 13892  0D26  3A80               	xorlw	128
 13893  0D27  3E8F               	addlw	143
 13894  0D28  1803               	skipnc
 13895  0D29  2D33               	goto	l8827
 13896  0D2A  3000               	movlw	0
 13897  0D2B  00D1               	movwf	?___fttol+3
 13898  0D2C  3000               	movlw	0
 13899  0D2D  00D0               	movwf	?___fttol+2
 13900  0D2E  3000               	movlw	0
 13901  0D2F  00CF               	movwf	?___fttol+1
 13902  0D30  3000               	movlw	0
 13903  0D31  00CE               	movwf	?___fttol
 13904  0D32  0008               	return
 13905  0D33                     l8827:	
 13906  0D33  3001               	movlw	1
 13907  0D34                     u9535:	
 13908  0D34  36DA               	lsrf	___fttol@lval+3,f
 13909  0D35  0CD9               	rrf	___fttol@lval+2,f
 13910  0D36  0CD8               	rrf	___fttol@lval+1,f
 13911  0D37  0CD7               	rrf	___fttol@lval,f
 13912  0D38  0B89               	decfsz	9,f
 13913  0D39  2D34               	goto	u9535
 13914  0D3A  3001               	movlw	1
 13915  0D3B  00D2               	movwf	??___fttol
 13916  0D3C  0852               	movf	??___fttol,w
 13917  0D3D  07DB               	addwf	___fttol@exp1,f
 13918  0D3E  1903               	btfsc	3,2
 13919  0D3F  2D5A               	goto	l8839
 13920  0D40  2D33               	goto	l8827
 13921  0D41                     l8829:	
 13922  0D41  3018               	movlw	24
 13923  0D42  025B               	subwf	___fttol@exp1,w
 13924  0D43  1C03               	skipc
 13925  0D44  2D57               	goto	l8837
 13926  0D45  3000               	movlw	0
 13927  0D46  00D1               	movwf	?___fttol+3
 13928  0D47  3000               	movlw	0
 13929  0D48  00D0               	movwf	?___fttol+2
 13930  0D49  3000               	movlw	0
 13931  0D4A  00CF               	movwf	?___fttol+1
 13932  0D4B  3000               	movlw	0
 13933  0D4C  00CE               	movwf	?___fttol
 13934  0D4D  0008               	return
 13935  0D4E                     l8835:	
 13936  0D4E  3001               	movlw	1
 13937  0D4F                     u9565:	
 13938  0D4F  35D7               	lslf	___fttol@lval,f
 13939  0D50  0DD8               	rlf	___fttol@lval+1,f
 13940  0D51  0DD9               	rlf	___fttol@lval+2,f
 13941  0D52  0DDA               	rlf	___fttol@lval+3,f
 13942  0D53  0B89               	decfsz	9,f
 13943  0D54  2D4F               	goto	u9565
 13944  0D55  3001               	movlw	1
 13945  0D56  02DB               	subwf	___fttol@exp1,f
 13946  0D57                     l8837:	
 13947  0D57  08DB               	movf	___fttol@exp1,f
 13948  0D58  1D03               	skipz
 13949  0D59  2D4E               	goto	l8835
 13950  0D5A                     l8839:	
 13951  0D5A  0856               	movf	___fttol@sign1,w
 13952  0D5B  1903               	btfsc	3,2
 13953  0D5C  2D68               	goto	l8843
 13954  0D5D  09D7               	comf	___fttol@lval,f
 13955  0D5E  09D8               	comf	___fttol@lval+1,f
 13956  0D5F  09D9               	comf	___fttol@lval+2,f
 13957  0D60  09DA               	comf	___fttol@lval+3,f
 13958  0D61  0AD7               	incf	___fttol@lval,f
 13959  0D62  1903               	skipnz
 13960  0D63  0AD8               	incf	___fttol@lval+1,f
 13961  0D64  1903               	skipnz
 13962  0D65  0AD9               	incf	___fttol@lval+2,f
 13963  0D66  1903               	skipnz
 13964  0D67  0ADA               	incf	___fttol@lval+3,f
 13965  0D68                     l8843:	
 13966  0D68  085A               	movf	___fttol@lval+3,w
 13967  0D69  00D1               	movwf	?___fttol+3
 13968  0D6A  0859               	movf	___fttol@lval+2,w
 13969  0D6B  00D0               	movwf	?___fttol+2
 13970  0D6C  0858               	movf	___fttol@lval+1,w
 13971  0D6D  00CF               	movwf	?___fttol+1
 13972  0D6E  0857               	movf	___fttol@lval,w
 13973  0D6F  00CE               	movwf	?___fttol
 13974  0D70  0008               	return
 13975  0D71                     __end_of___fttol:	
 13976                           
 13977                           	psect	text82
 13978  1B3A                     __ptext82:	
 13979 ;; *************** function ___ftneg *****************
 13980 ;; Defined at:
 13981 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13982 ;; Parameters:    Size  Location     Type
 13983 ;;  f1              3   30[BANK0 ] float 
 13984 ;; Auto vars:     Size  Location     Type
 13985 ;;		None
 13986 ;; Return value:  Size  Location     Type
 13987 ;;                  3   30[BANK0 ] float 
 13988 ;; Registers used:
 13989 ;;		wreg
 13990 ;; Tracked objects:
 13991 ;;		On entry : 0/0
 13992 ;;		On exit  : 0/0
 13993 ;;		Unchanged: 0/0
 13994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13995 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13998 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13999 ;;Total ram usage:        3 bytes
 14000 ;; Hardware stack levels used:    1
 14001 ;; Hardware stack levels required when called:    5
 14002 ;; This function calls:
 14003 ;;		Nothing
 14004 ;; This function is called by:
 14005 ;;		_getPercentValue
 14006 ;;		_setPercentValue
 14007 ;; This function uses a non-reentrant model
 14008 ;;
 14009                           
 14010                           
 14011                           ;psect for function ___ftneg
 14012  1B3A                     ___ftneg:	
 14013                           
 14014                           ;incstack = 0
 14015                           ; Regs used in ___ftneg: [wreg]
 14016  1B3A  0020               	movlb	0	; select bank0
 14017  1B3B  0840               	movf	___ftneg@f1+2,w
 14018  1B3C  043F               	iorwf	___ftneg@f1+1,w
 14019  1B3D  043E               	iorwf	___ftneg@f1,w
 14020  1B3E  1903               	skipnz
 14021  1B3F  0008               	return
 14022  1B40  3080               	movlw	128
 14023  1B41  06C0               	xorwf	___ftneg@f1+2,f
 14024  1B42  0008               	return
 14025  1B43                     __end_of___ftneg:	
 14026                           
 14027                           	psect	text83
 14028  0EA7                     __ptext83:	
 14029 ;; *************** function ___ftdiv *****************
 14030 ;; Defined at:
 14031 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14032 ;; Parameters:    Size  Location     Type
 14033 ;;  f2              3   14[BANK0 ] float 
 14034 ;;  f1              3   17[BANK0 ] float 
 14035 ;; Auto vars:     Size  Location     Type
 14036 ;;  f3              3   25[BANK0 ] float 
 14037 ;;  sign            1   29[BANK0 ] unsigned char 
 14038 ;;  exp             1   28[BANK0 ] unsigned char 
 14039 ;;  cntr            1   24[BANK0 ] unsigned char 
 14040 ;; Return value:  Size  Location     Type
 14041 ;;                  3   14[BANK0 ] float 
 14042 ;; Registers used:
 14043 ;;		wreg, status,2, status,0, pclath, cstack
 14044 ;; Tracked objects:
 14045 ;;		On entry : 0/0
 14046 ;;		On exit  : 0/0
 14047 ;;		Unchanged: 0/0
 14048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14049 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14050 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14051 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14052 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14053 ;;Total ram usage:       16 bytes
 14054 ;; Hardware stack levels used:    1
 14055 ;; Hardware stack levels required when called:    6
 14056 ;; This function calls:
 14057 ;;		___ftpack
 14058 ;; This function is called by:
 14059 ;;		_getPercentValue
 14060 ;;		_setPercentValue
 14061 ;; This function uses a non-reentrant model
 14062 ;;
 14063                           
 14064                           
 14065                           ;psect for function ___ftdiv
 14066  0EA7                     ___ftdiv:	
 14067                           
 14068                           ;incstack = 0
 14069                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14070  0EA7  0020               	movlb	0	; select bank0
 14071  0EA8  0831               	movf	___ftdiv@f1,w
 14072  0EA9  00B4               	movwf	??___ftdiv
 14073  0EAA  0832               	movf	___ftdiv@f1+1,w
 14074  0EAB  00B5               	movwf	??___ftdiv+1
 14075  0EAC  0833               	movf	___ftdiv@f1+2,w
 14076  0EAD  00B6               	movwf	??___ftdiv+2
 14077  0EAE  1003               	clrc
 14078  0EAF  0D35               	rlf	??___ftdiv+1,w
 14079  0EB0  0D36               	rlf	??___ftdiv+2,w
 14080  0EB1  00B7               	movwf	??___ftdiv+3
 14081  0EB2  0837               	movf	??___ftdiv+3,w
 14082  0EB3  00BC               	movwf	___ftdiv@exp
 14083  0EB4  08BC               	movf	___ftdiv@exp,f
 14084  0EB5  1D03               	skipz
 14085  0EB6  2EBE               	goto	l8709
 14086  0EB7  3000               	movlw	0
 14087  0EB8  00AE               	movwf	?___ftdiv
 14088  0EB9  3000               	movlw	0
 14089  0EBA  00AF               	movwf	?___ftdiv+1
 14090  0EBB  3000               	movlw	0
 14091  0EBC  00B0               	movwf	?___ftdiv+2
 14092  0EBD  0008               	return
 14093  0EBE                     l8709:	
 14094  0EBE  082E               	movf	___ftdiv@f2,w
 14095  0EBF  00B4               	movwf	??___ftdiv
 14096  0EC0  082F               	movf	___ftdiv@f2+1,w
 14097  0EC1  00B5               	movwf	??___ftdiv+1
 14098  0EC2  0830               	movf	___ftdiv@f2+2,w
 14099  0EC3  00B6               	movwf	??___ftdiv+2
 14100  0EC4  1003               	clrc
 14101  0EC5  0D35               	rlf	??___ftdiv+1,w
 14102  0EC6  0D36               	rlf	??___ftdiv+2,w
 14103  0EC7  00B7               	movwf	??___ftdiv+3
 14104  0EC8  0837               	movf	??___ftdiv+3,w
 14105  0EC9  00BD               	movwf	___ftdiv@sign
 14106  0ECA  08BD               	movf	___ftdiv@sign,f
 14107  0ECB  1D03               	skipz
 14108  0ECC  2ED4               	goto	l8715
 14109  0ECD  3000               	movlw	0
 14110  0ECE  00AE               	movwf	?___ftdiv
 14111  0ECF  3000               	movlw	0
 14112  0ED0  00AF               	movwf	?___ftdiv+1
 14113  0ED1  3000               	movlw	0
 14114  0ED2  00B0               	movwf	?___ftdiv+2
 14115  0ED3  0008               	return
 14116  0ED4                     l8715:	
 14117  0ED4  3000               	movlw	0
 14118  0ED5  00B9               	movwf	___ftdiv@f3
 14119  0ED6  3000               	movlw	0
 14120  0ED7  00BA               	movwf	___ftdiv@f3+1
 14121  0ED8  3000               	movlw	0
 14122  0ED9  00BB               	movwf	___ftdiv@f3+2
 14123  0EDA  3089               	movlw	137
 14124  0EDB  073D               	addwf	___ftdiv@sign,w
 14125  0EDC  00B4               	movwf	??___ftdiv
 14126  0EDD  0834               	movf	??___ftdiv,w
 14127  0EDE  02BC               	subwf	___ftdiv@exp,f
 14128  0EDF  0831               	movf	___ftdiv@f1,w
 14129  0EE0  00B4               	movwf	??___ftdiv
 14130  0EE1  0832               	movf	___ftdiv@f1+1,w
 14131  0EE2  00B5               	movwf	??___ftdiv+1
 14132  0EE3  0833               	movf	___ftdiv@f1+2,w
 14133  0EE4  00B6               	movwf	??___ftdiv+2
 14134  0EE5  3010               	movlw	16
 14135  0EE6                     u9305:	
 14136  0EE6  36B6               	lsrf	??___ftdiv+2,f
 14137  0EE7  0CB5               	rrf	??___ftdiv+1,f
 14138  0EE8  0CB4               	rrf	??___ftdiv,f
 14139  0EE9  0B89               	decfsz	9,f
 14140  0EEA  2EE6               	goto	u9305
 14141  0EEB  0834               	movf	??___ftdiv,w
 14142  0EEC  00B7               	movwf	??___ftdiv+3
 14143  0EED  0837               	movf	??___ftdiv+3,w
 14144  0EEE  00BD               	movwf	___ftdiv@sign
 14145  0EEF  082E               	movf	___ftdiv@f2,w
 14146  0EF0  00B4               	movwf	??___ftdiv
 14147  0EF1  082F               	movf	___ftdiv@f2+1,w
 14148  0EF2  00B5               	movwf	??___ftdiv+1
 14149  0EF3  0830               	movf	___ftdiv@f2+2,w
 14150  0EF4  00B6               	movwf	??___ftdiv+2
 14151  0EF5  3010               	movlw	16
 14152  0EF6                     u9315:	
 14153  0EF6  36B6               	lsrf	??___ftdiv+2,f
 14154  0EF7  0CB5               	rrf	??___ftdiv+1,f
 14155  0EF8  0CB4               	rrf	??___ftdiv,f
 14156  0EF9  0B89               	decfsz	9,f
 14157  0EFA  2EF6               	goto	u9315
 14158  0EFB  0834               	movf	??___ftdiv,w
 14159  0EFC  00B7               	movwf	??___ftdiv+3
 14160  0EFD  0837               	movf	??___ftdiv+3,w
 14161  0EFE  06BD               	xorwf	___ftdiv@sign,f
 14162  0EFF  3080               	movlw	128
 14163  0F00  00B4               	movwf	??___ftdiv
 14164  0F01  0834               	movf	??___ftdiv,w
 14165  0F02  05BD               	andwf	___ftdiv@sign,f
 14166  0F03  17B2               	bsf	___ftdiv@f1+1,7
 14167  0F04  30FF               	movlw	255
 14168  0F05  05B1               	andwf	___ftdiv@f1,f
 14169  0F06  30FF               	movlw	255
 14170  0F07  05B2               	andwf	___ftdiv@f1+1,f
 14171  0F08  3000               	movlw	0
 14172  0F09  05B3               	andwf	___ftdiv@f1+2,f
 14173  0F0A  17AF               	bsf	___ftdiv@f2+1,7
 14174  0F0B  30FF               	movlw	255
 14175  0F0C  05AE               	andwf	___ftdiv@f2,f
 14176  0F0D  30FF               	movlw	255
 14177  0F0E  05AF               	andwf	___ftdiv@f2+1,f
 14178  0F0F  3000               	movlw	0
 14179  0F10  05B0               	andwf	___ftdiv@f2+2,f
 14180  0F11  3018               	movlw	24
 14181  0F12  00B4               	movwf	??___ftdiv
 14182  0F13  0834               	movf	??___ftdiv,w
 14183  0F14  00B8               	movwf	___ftdiv@cntr
 14184  0F15                     l8729:	
 14185  0F15  3001               	movlw	1
 14186  0F16                     u9325:	
 14187  0F16  35B9               	lslf	___ftdiv@f3,f
 14188  0F17  0DBA               	rlf	___ftdiv@f3+1,f
 14189  0F18  0DBB               	rlf	___ftdiv@f3+2,f
 14190  0F19  0B89               	decfsz	9,f
 14191  0F1A  2F16               	goto	u9325
 14192  0F1B  0830               	movf	___ftdiv@f2+2,w
 14193  0F1C  0233               	subwf	___ftdiv@f1+2,w
 14194  0F1D  1D03               	skipz
 14195  0F1E  2F25               	goto	u9335
 14196  0F1F  082F               	movf	___ftdiv@f2+1,w
 14197  0F20  0232               	subwf	___ftdiv@f1+1,w
 14198  0F21  1D03               	skipz
 14199  0F22  2F25               	goto	u9335
 14200  0F23  082E               	movf	___ftdiv@f2,w
 14201  0F24  0231               	subwf	___ftdiv@f1,w
 14202  0F25                     u9335:	
 14203  0F25  1C03               	skipc
 14204  0F26  2F2E               	goto	l8737
 14205  0F27  082E               	movf	___ftdiv@f2,w
 14206  0F28  02B1               	subwf	___ftdiv@f1,f
 14207  0F29  082F               	movf	___ftdiv@f2+1,w
 14208  0F2A  3BB2               	subwfb	___ftdiv@f1+1,f
 14209  0F2B  0830               	movf	___ftdiv@f2+2,w
 14210  0F2C  3BB3               	subwfb	___ftdiv@f1+2,f
 14211  0F2D  1439               	bsf	___ftdiv@f3,0
 14212  0F2E                     l8737:	
 14213  0F2E  3001               	movlw	1
 14214  0F2F                     u9345:	
 14215  0F2F  35B1               	lslf	___ftdiv@f1,f
 14216  0F30  0DB2               	rlf	___ftdiv@f1+1,f
 14217  0F31  0DB3               	rlf	___ftdiv@f1+2,f
 14218  0F32  0B89               	decfsz	9,f
 14219  0F33  2F2F               	goto	u9345
 14220  0F34  3001               	movlw	1
 14221  0F35  02B8               	subwf	___ftdiv@cntr,f
 14222  0F36  1D03               	btfss	3,2
 14223  0F37  2F15               	goto	l8729
 14224  0F38  0839               	movf	___ftdiv@f3,w
 14225  0F39  00A0               	movwf	___ftpack@arg
 14226  0F3A  083A               	movf	___ftdiv@f3+1,w
 14227  0F3B  00A1               	movwf	___ftpack@arg+1
 14228  0F3C  083B               	movf	___ftdiv@f3+2,w
 14229  0F3D  00A2               	movwf	___ftpack@arg+2
 14230  0F3E  083C               	movf	___ftdiv@exp,w
 14231  0F3F  00B4               	movwf	??___ftdiv
 14232  0F40  0834               	movf	??___ftdiv,w
 14233  0F41  00A3               	movwf	___ftpack@exp
 14234  0F42  083D               	movf	___ftdiv@sign,w
 14235  0F43  00B5               	movwf	??___ftdiv+1
 14236  0F44  0835               	movf	??___ftdiv+1,w
 14237  0F45  00A4               	movwf	___ftpack@sign
 14238  0F46  3189  2123         	fcall	___ftpack
 14239  0F48  0020               	movlb	0	; select bank0
 14240  0F49  0820               	movf	?___ftpack,w
 14241  0F4A  00AE               	movwf	?___ftdiv
 14242  0F4B  0821               	movf	?___ftpack+1,w
 14243  0F4C  00AF               	movwf	?___ftdiv+1
 14244  0F4D  0822               	movf	?___ftpack+2,w
 14245  0F4E  00B0               	movwf	?___ftdiv+2
 14246  0F4F  0008               	return
 14247  0F50                     __end_of___ftdiv:	
 14248                           
 14249                           	psect	text84
 14250  0469                     __ptext84:	
 14251 ;; *************** function ___ftadd *****************
 14252 ;; Defined at:
 14253 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14254 ;; Parameters:    Size  Location     Type
 14255 ;;  f1              3   33[BANK0 ] float 
 14256 ;;  f2              3   36[BANK0 ] float 
 14257 ;; Auto vars:     Size  Location     Type
 14258 ;;  exp1            1   45[BANK0 ] unsigned char 
 14259 ;;  exp2            1   44[BANK0 ] unsigned char 
 14260 ;;  sign            1   43[BANK0 ] unsigned char 
 14261 ;; Return value:  Size  Location     Type
 14262 ;;                  3   33[BANK0 ] float 
 14263 ;; Registers used:
 14264 ;;		wreg, status,2, status,0, pclath, cstack
 14265 ;; Tracked objects:
 14266 ;;		On entry : 0/0
 14267 ;;		On exit  : 0/0
 14268 ;;		Unchanged: 0/0
 14269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14270 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14273 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14274 ;;Total ram usage:       13 bytes
 14275 ;; Hardware stack levels used:    1
 14276 ;; Hardware stack levels required when called:    6
 14277 ;; This function calls:
 14278 ;;		___ftpack
 14279 ;; This function is called by:
 14280 ;;		_getPercentValue
 14281 ;;		_setPercentValue
 14282 ;; This function uses a non-reentrant model
 14283 ;;
 14284                           
 14285                           
 14286                           ;psect for function ___ftadd
 14287  0469                     ___ftadd:	
 14288                           
 14289                           ;incstack = 0
 14290                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14291  0469  0020               	movlb	0	; select bank0
 14292  046A  0841               	movf	___ftadd@f1,w
 14293  046B  00C7               	movwf	??___ftadd
 14294  046C  0842               	movf	___ftadd@f1+1,w
 14295  046D  00C8               	movwf	??___ftadd+1
 14296  046E  0843               	movf	___ftadd@f1+2,w
 14297  046F  00C9               	movwf	??___ftadd+2
 14298  0470  1003               	clrc
 14299  0471  0D48               	rlf	??___ftadd+1,w
 14300  0472  0D49               	rlf	??___ftadd+2,w
 14301  0473  00CA               	movwf	??___ftadd+3
 14302  0474  084A               	movf	??___ftadd+3,w
 14303  0475  00CD               	movwf	___ftadd@exp1
 14304  0476  0844               	movf	___ftadd@f2,w
 14305  0477  00C7               	movwf	??___ftadd
 14306  0478  0845               	movf	___ftadd@f2+1,w
 14307  0479  00C8               	movwf	??___ftadd+1
 14308  047A  0846               	movf	___ftadd@f2+2,w
 14309  047B  00C9               	movwf	??___ftadd+2
 14310  047C  1003               	clrc
 14311  047D  0D48               	rlf	??___ftadd+1,w
 14312  047E  0D49               	rlf	??___ftadd+2,w
 14313  047F  00CA               	movwf	??___ftadd+3
 14314  0480  084A               	movf	??___ftadd+3,w
 14315  0481  00CC               	movwf	___ftadd@exp2
 14316  0482  084D               	movf	___ftadd@exp1,w
 14317  0483  1903               	btfsc	3,2
 14318  0484  2C91               	goto	l8639
 14319  0485  084C               	movf	___ftadd@exp2,w
 14320  0486  024D               	subwf	___ftadd@exp1,w
 14321  0487  1803               	skipnc
 14322  0488  2C98               	goto	l8643
 14323  0489  034D               	decf	___ftadd@exp1,w
 14324  048A  3AFF               	xorlw	255
 14325  048B  074C               	addwf	___ftadd@exp2,w
 14326  048C  00C7               	movwf	??___ftadd
 14327  048D  3019               	movlw	25
 14328  048E  0247               	subwf	??___ftadd,w
 14329  048F  1C03               	skipc
 14330  0490  2C98               	goto	l8643
 14331  0491                     l8639:	
 14332  0491  0844               	movf	___ftadd@f2,w
 14333  0492  00C1               	movwf	?___ftadd
 14334  0493  0845               	movf	___ftadd@f2+1,w
 14335  0494  00C2               	movwf	?___ftadd+1
 14336  0495  0846               	movf	___ftadd@f2+2,w
 14337  0496  00C3               	movwf	?___ftadd+2
 14338  0497  0008               	return
 14339  0498                     l8643:	
 14340  0498  084C               	movf	___ftadd@exp2,w
 14341  0499  1903               	btfsc	3,2
 14342  049A  0008               	return
 14343  049B  084D               	movf	___ftadd@exp1,w
 14344  049C  024C               	subwf	___ftadd@exp2,w
 14345  049D  1803               	skipnc
 14346  049E  2CA7               	goto	l8649
 14347  049F  034C               	decf	___ftadd@exp2,w
 14348  04A0  3AFF               	xorlw	255
 14349  04A1  074D               	addwf	___ftadd@exp1,w
 14350  04A2  00C7               	movwf	??___ftadd
 14351  04A3  3019               	movlw	25
 14352  04A4  0247               	subwf	??___ftadd,w
 14353  04A5  1803               	btfsc	3,0
 14354  04A6  0008               	return
 14355  04A7                     l8649:	
 14356  04A7  3006               	movlw	6
 14357  04A8  00C7               	movwf	??___ftadd
 14358  04A9  0847               	movf	??___ftadd,w
 14359  04AA  00CB               	movwf	___ftadd@sign
 14360  04AB  1BC3               	btfsc	___ftadd@f1+2,7
 14361  04AC  17CB               	bsf	___ftadd@sign,7
 14362  04AD  1BC6               	btfsc	___ftadd@f2+2,7
 14363  04AE  174B               	bsf	___ftadd@sign,6
 14364  04AF  17C2               	bsf	___ftadd@f1+1,7
 14365  04B0  30FF               	movlw	255
 14366  04B1  05C1               	andwf	___ftadd@f1,f
 14367  04B2  30FF               	movlw	255
 14368  04B3  05C2               	andwf	___ftadd@f1+1,f
 14369  04B4  3000               	movlw	0
 14370  04B5  05C3               	andwf	___ftadd@f1+2,f
 14371  04B6  17C5               	bsf	___ftadd@f2+1,7
 14372  04B7  30FF               	movlw	255
 14373  04B8  05C4               	andwf	___ftadd@f2,f
 14374  04B9  30FF               	movlw	255
 14375  04BA  05C5               	andwf	___ftadd@f2+1,f
 14376  04BB  3000               	movlw	0
 14377  04BC  05C6               	andwf	___ftadd@f2+2,f
 14378  04BD  084C               	movf	___ftadd@exp2,w
 14379  04BE  024D               	subwf	___ftadd@exp1,w
 14380  04BF  1803               	skipnc
 14381  04C0  2CE3               	goto	l8671
 14382  04C1                     l8661:	
 14383  04C1  3001               	movlw	1
 14384  04C2                     u9145:	
 14385  04C2  35C4               	lslf	___ftadd@f2,f
 14386  04C3  0DC5               	rlf	___ftadd@f2+1,f
 14387  04C4  0DC6               	rlf	___ftadd@f2+2,f
 14388  04C5  0B89               	decfsz	9,f
 14389  04C6  2CC2               	goto	u9145
 14390  04C7  3001               	movlw	1
 14391  04C8  02CC               	subwf	___ftadd@exp2,f
 14392  04C9  084C               	movf	___ftadd@exp2,w
 14393  04CA  064D               	xorwf	___ftadd@exp1,w
 14394  04CB  1903               	skipnz
 14395  04CC  2CDE               	goto	l8669
 14396  04CD  3001               	movlw	1
 14397  04CE  02CB               	subwf	___ftadd@sign,f
 14398  04CF  084B               	movf	___ftadd@sign,w
 14399  04D0  3907               	andlw	7
 14400  04D1  1903               	btfsc	3,2
 14401  04D2  2CDE               	goto	l8669
 14402  04D3  2CC1               	goto	l8661
 14403  04D4                     l8667:	
 14404  04D4  3001               	movlw	1
 14405  04D5                     u9175:	
 14406  04D5  36C3               	lsrf	___ftadd@f1+2,f
 14407  04D6  0CC2               	rrf	___ftadd@f1+1,f
 14408  04D7  0CC1               	rrf	___ftadd@f1,f
 14409  04D8  0B89               	decfsz	9,f
 14410  04D9  2CD5               	goto	u9175
 14411  04DA  3001               	movlw	1
 14412  04DB  00C7               	movwf	??___ftadd
 14413  04DC  0847               	movf	??___ftadd,w
 14414  04DD  07CD               	addwf	___ftadd@exp1,f
 14415  04DE                     l8669:	
 14416  04DE  084D               	movf	___ftadd@exp1,w
 14417  04DF  064C               	xorwf	___ftadd@exp2,w
 14418  04E0  1903               	btfsc	3,2
 14419  04E1  2D08               	goto	l3060
 14420  04E2  2CD4               	goto	l8667
 14421  04E3                     l8671:	
 14422  04E3  084D               	movf	___ftadd@exp1,w
 14423  04E4  024C               	subwf	___ftadd@exp2,w
 14424  04E5  1803               	skipnc
 14425  04E6  2D08               	goto	l3060
 14426  04E7                     l8673:	
 14427  04E7  3001               	movlw	1
 14428  04E8                     u9205:	
 14429  04E8  35C1               	lslf	___ftadd@f1,f
 14430  04E9  0DC2               	rlf	___ftadd@f1+1,f
 14431  04EA  0DC3               	rlf	___ftadd@f1+2,f
 14432  04EB  0B89               	decfsz	9,f
 14433  04EC  2CE8               	goto	u9205
 14434  04ED  3001               	movlw	1
 14435  04EE  02CD               	subwf	___ftadd@exp1,f
 14436  04EF  084C               	movf	___ftadd@exp2,w
 14437  04F0  064D               	xorwf	___ftadd@exp1,w
 14438  04F1  1903               	skipnz
 14439  04F2  2D04               	goto	l8681
 14440  04F3  3001               	movlw	1
 14441  04F4  02CB               	subwf	___ftadd@sign,f
 14442  04F5  084B               	movf	___ftadd@sign,w
 14443  04F6  3907               	andlw	7
 14444  04F7  1903               	btfsc	3,2
 14445  04F8  2D04               	goto	l8681
 14446  04F9  2CE7               	goto	l8673
 14447  04FA                     l8679:	
 14448  04FA  3001               	movlw	1
 14449  04FB                     u9235:	
 14450  04FB  36C6               	lsrf	___ftadd@f2+2,f
 14451  04FC  0CC5               	rrf	___ftadd@f2+1,f
 14452  04FD  0CC4               	rrf	___ftadd@f2,f
 14453  04FE  0B89               	decfsz	9,f
 14454  04FF  2CFB               	goto	u9235
 14455  0500  3001               	movlw	1
 14456  0501  00C7               	movwf	??___ftadd
 14457  0502  0847               	movf	??___ftadd,w
 14458  0503  07CC               	addwf	___ftadd@exp2,f
 14459  0504                     l8681:	
 14460  0504  084D               	movf	___ftadd@exp1,w
 14461  0505  064C               	xorwf	___ftadd@exp2,w
 14462  0506  1D03               	skipz
 14463  0507  2CFA               	goto	l8679
 14464  0508                     l3060:	
 14465  0508  1FCB               	btfss	___ftadd@sign,7
 14466  0509  2D1A               	goto	l8685
 14467  050A  30FF               	movlw	255
 14468  050B  06C1               	xorwf	___ftadd@f1,f
 14469  050C  30FF               	movlw	255
 14470  050D  06C2               	xorwf	___ftadd@f1+1,f
 14471  050E  30FF               	movlw	255
 14472  050F  06C3               	xorwf	___ftadd@f1+2,f
 14473  0510  3001               	movlw	1
 14474  0511  07C1               	addwf	___ftadd@f1,f
 14475  0512  3000               	movlw	0
 14476  0513  1803               	skipnc
 14477  0514  3001               	movlw	1
 14478  0515  07C2               	addwf	___ftadd@f1+1,f
 14479  0516  3000               	movlw	0
 14480  0517  1803               	skipnc
 14481  0518  3001               	movlw	1
 14482  0519  07C3               	addwf	___ftadd@f1+2,f
 14483  051A                     l8685:	
 14484  051A  1F4B               	btfss	___ftadd@sign,6
 14485  051B  2D2C               	goto	l8689
 14486  051C  30FF               	movlw	255
 14487  051D  06C4               	xorwf	___ftadd@f2,f
 14488  051E  30FF               	movlw	255
 14489  051F  06C5               	xorwf	___ftadd@f2+1,f
 14490  0520  30FF               	movlw	255
 14491  0521  06C6               	xorwf	___ftadd@f2+2,f
 14492  0522  3001               	movlw	1
 14493  0523  07C4               	addwf	___ftadd@f2,f
 14494  0524  3000               	movlw	0
 14495  0525  1803               	skipnc
 14496  0526  3001               	movlw	1
 14497  0527  07C5               	addwf	___ftadd@f2+1,f
 14498  0528  3000               	movlw	0
 14499  0529  1803               	skipnc
 14500  052A  3001               	movlw	1
 14501  052B  07C6               	addwf	___ftadd@f2+2,f
 14502  052C                     l8689:	
 14503  052C  01CB               	clrf	___ftadd@sign
 14504  052D  0841               	movf	___ftadd@f1,w
 14505  052E  07C4               	addwf	___ftadd@f2,f
 14506  052F  0842               	movf	___ftadd@f1+1,w
 14507  0530  3DC5               	addwfc	___ftadd@f2+1,f
 14508  0531  0843               	movf	___ftadd@f1+2,w
 14509  0532  3DC6               	addwfc	___ftadd@f2+2,f
 14510  0533  1FC6               	btfss	___ftadd@f2+2,7
 14511  0534  2D47               	goto	l8699
 14512  0535  30FF               	movlw	255
 14513  0536  06C4               	xorwf	___ftadd@f2,f
 14514  0537  30FF               	movlw	255
 14515  0538  06C5               	xorwf	___ftadd@f2+1,f
 14516  0539  30FF               	movlw	255
 14517  053A  06C6               	xorwf	___ftadd@f2+2,f
 14518  053B  3001               	movlw	1
 14519  053C  07C4               	addwf	___ftadd@f2,f
 14520  053D  3000               	movlw	0
 14521  053E  1803               	skipnc
 14522  053F  3001               	movlw	1
 14523  0540  07C5               	addwf	___ftadd@f2+1,f
 14524  0541  3000               	movlw	0
 14525  0542  1803               	skipnc
 14526  0543  3001               	movlw	1
 14527  0544  07C6               	addwf	___ftadd@f2+2,f
 14528  0545  01CB               	clrf	___ftadd@sign
 14529  0546  0ACB               	incf	___ftadd@sign,f
 14530  0547                     l8699:	
 14531  0547  0844               	movf	___ftadd@f2,w
 14532  0548  00A0               	movwf	___ftpack@arg
 14533  0549  0845               	movf	___ftadd@f2+1,w
 14534  054A  00A1               	movwf	___ftpack@arg+1
 14535  054B  0846               	movf	___ftadd@f2+2,w
 14536  054C  00A2               	movwf	___ftpack@arg+2
 14537  054D  084D               	movf	___ftadd@exp1,w
 14538  054E  00C7               	movwf	??___ftadd
 14539  054F  0847               	movf	??___ftadd,w
 14540  0550  00A3               	movwf	___ftpack@exp
 14541  0551  084B               	movf	___ftadd@sign,w
 14542  0552  00C8               	movwf	??___ftadd+1
 14543  0553  0848               	movf	??___ftadd+1,w
 14544  0554  00A4               	movwf	___ftpack@sign
 14545  0555  3189  2123         	fcall	___ftpack
 14546  0557  0020               	movlb	0	; select bank0
 14547  0558  0820               	movf	?___ftpack,w
 14548  0559  00C1               	movwf	?___ftadd
 14549  055A  0821               	movf	?___ftpack+1,w
 14550  055B  00C2               	movwf	?___ftadd+1
 14551  055C  0822               	movf	?___ftpack+2,w
 14552  055D  00C3               	movwf	?___ftadd+2
 14553  055E  0008               	return
 14554  055F                     __end_of___ftadd:	
 14555                           
 14556                           	psect	text85
 14557  1F46                     __ptext85:	
 14558 ;; *************** function ___awtoft *****************
 14559 ;; Defined at:
 14560 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14561 ;; Parameters:    Size  Location     Type
 14562 ;;  c               2    8[BANK0 ] int 
 14563 ;; Auto vars:     Size  Location     Type
 14564 ;;  sign            1   13[BANK0 ] unsigned char 
 14565 ;; Return value:  Size  Location     Type
 14566 ;;                  3    8[BANK0 ] float 
 14567 ;; Registers used:
 14568 ;;		wreg, status,2, status,0, pclath, cstack
 14569 ;; Tracked objects:
 14570 ;;		On entry : 0/0
 14571 ;;		On exit  : 0/0
 14572 ;;		Unchanged: 0/0
 14573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14574 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;Total ram usage:        6 bytes
 14579 ;; Hardware stack levels used:    1
 14580 ;; Hardware stack levels required when called:    6
 14581 ;; This function calls:
 14582 ;;		___ftpack
 14583 ;; This function is called by:
 14584 ;;		_getPercentValue
 14585 ;;		_setPercentValue
 14586 ;; This function uses a non-reentrant model
 14587 ;;
 14588                           
 14589                           
 14590                           ;psect for function ___awtoft
 14591  1F46                     ___awtoft:	
 14592                           
 14593                           ;incstack = 0
 14594                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14595  1F46  0020               	movlb	0	; select bank0
 14596  1F47  01AD               	clrf	___awtoft@sign
 14597  1F48  1FA9               	btfss	___awtoft@c+1,7
 14598  1F49  2F51               	goto	l8627
 14599  1F4A  09A8               	comf	___awtoft@c,f
 14600  1F4B  09A9               	comf	___awtoft@c+1,f
 14601  1F4C  0AA8               	incf	___awtoft@c,f
 14602  1F4D  1903               	skipnz
 14603  1F4E  0AA9               	incf	___awtoft@c+1,f
 14604  1F4F  01AD               	clrf	___awtoft@sign
 14605  1F50  0AAD               	incf	___awtoft@sign,f
 14606  1F51                     l8627:	
 14607  1F51  0828               	movf	___awtoft@c,w
 14608  1F52  00A0               	movwf	___ftpack@arg
 14609  1F53  0829               	movf	___awtoft@c+1,w
 14610  1F54  00A1               	movwf	___ftpack@arg+1
 14611  1F55  01A2               	clrf	___ftpack@arg+2
 14612  1F56  308E               	movlw	142
 14613  1F57  00AB               	movwf	??___awtoft
 14614  1F58  082B               	movf	??___awtoft,w
 14615  1F59  00A3               	movwf	___ftpack@exp
 14616  1F5A  082D               	movf	___awtoft@sign,w
 14617  1F5B  00AC               	movwf	??___awtoft+1
 14618  1F5C  082C               	movf	??___awtoft+1,w
 14619  1F5D  00A4               	movwf	___ftpack@sign
 14620  1F5E  3189  2123         	fcall	___ftpack
 14621  1F60  0020               	movlb	0	; select bank0
 14622  1F61  0820               	movf	?___ftpack,w
 14623  1F62  00A8               	movwf	?___awtoft
 14624  1F63  0821               	movf	?___ftpack+1,w
 14625  1F64  00A9               	movwf	?___awtoft+1
 14626  1F65  0822               	movf	?___ftpack+2,w
 14627  1F66  00AA               	movwf	?___awtoft+2
 14628  1F67  0008               	return
 14629  1F68                     __end_of___awtoft:	
 14630                           
 14631                           	psect	text86
 14632  0923                     __ptext86:	
 14633 ;; *************** function ___ftpack *****************
 14634 ;; Defined at:
 14635 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14636 ;; Parameters:    Size  Location     Type
 14637 ;;  arg             3    0[BANK0 ] unsigned um
 14638 ;;  exp             1    3[BANK0 ] unsigned char 
 14639 ;;  sign            1    4[BANK0 ] unsigned char 
 14640 ;; Auto vars:     Size  Location     Type
 14641 ;;		None
 14642 ;; Return value:  Size  Location     Type
 14643 ;;                  3    0[BANK0 ] float 
 14644 ;; Registers used:
 14645 ;;		wreg, status,2, status,0
 14646 ;; Tracked objects:
 14647 ;;		On entry : 0/0
 14648 ;;		On exit  : 0/0
 14649 ;;		Unchanged: 0/0
 14650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14651 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14653 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14654 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14655 ;;Total ram usage:        8 bytes
 14656 ;; Hardware stack levels used:    1
 14657 ;; Hardware stack levels required when called:    5
 14658 ;; This function calls:
 14659 ;;		Nothing
 14660 ;; This function is called by:
 14661 ;;		___awtoft
 14662 ;;		___ftadd
 14663 ;;		___ftdiv
 14664 ;;		___ftmul
 14665 ;; This function uses a non-reentrant model
 14666 ;;
 14667                           
 14668                           
 14669                           ;psect for function ___ftpack
 14670  0923                     ___ftpack:	
 14671                           
 14672                           ;incstack = 0
 14673                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14674  0923  0020               	movlb	0	; select bank0
 14675  0924  0823               	movf	___ftpack@exp,w
 14676  0925  1903               	btfsc	3,2
 14677  0926  292C               	goto	l8577
 14678  0927  0822               	movf	___ftpack@arg+2,w
 14679  0928  0421               	iorwf	___ftpack@arg+1,w
 14680  0929  0420               	iorwf	___ftpack@arg,w
 14681  092A  1D03               	skipz
 14682  092B  293D               	goto	l8583
 14683  092C                     l8577:	
 14684  092C  3000               	movlw	0
 14685  092D  00A0               	movwf	?___ftpack
 14686  092E  3000               	movlw	0
 14687  092F  00A1               	movwf	?___ftpack+1
 14688  0930  3000               	movlw	0
 14689  0931  00A2               	movwf	?___ftpack+2
 14690  0932  0008               	return
 14691  0933                     l8581:	
 14692  0933  3001               	movlw	1
 14693  0934  00A5               	movwf	??___ftpack
 14694  0935  0825               	movf	??___ftpack,w
 14695  0936  07A3               	addwf	___ftpack@exp,f
 14696  0937  3001               	movlw	1
 14697  0938                     u8935:	
 14698  0938  36A2               	lsrf	___ftpack@arg+2,f
 14699  0939  0CA1               	rrf	___ftpack@arg+1,f
 14700  093A  0CA0               	rrf	___ftpack@arg,f
 14701  093B  0B89               	decfsz	9,f
 14702  093C  2938               	goto	u8935
 14703  093D                     l8583:	
 14704  093D  30FE               	movlw	254
 14705  093E  0522               	andwf	___ftpack@arg+2,w
 14706  093F  1903               	btfsc	3,2
 14707  0940  2956               	goto	l3031
 14708  0941  2933               	goto	l8581
 14709  0942                     l8585:	
 14710  0942  3001               	movlw	1
 14711  0943  00A5               	movwf	??___ftpack
 14712  0944  0825               	movf	??___ftpack,w
 14713  0945  07A3               	addwf	___ftpack@exp,f
 14714  0946  3001               	movlw	1
 14715  0947  07A0               	addwf	___ftpack@arg,f
 14716  0948  3000               	movlw	0
 14717  0949  1803               	skipnc
 14718  094A  3001               	movlw	1
 14719  094B  07A1               	addwf	___ftpack@arg+1,f
 14720  094C  3000               	movlw	0
 14721  094D  1803               	skipnc
 14722  094E  3001               	movlw	1
 14723  094F  07A2               	addwf	___ftpack@arg+2,f
 14724  0950  3001               	movlw	1
 14725  0951                     u8955:	
 14726  0951  36A2               	lsrf	___ftpack@arg+2,f
 14727  0952  0CA1               	rrf	___ftpack@arg+1,f
 14728  0953  0CA0               	rrf	___ftpack@arg,f
 14729  0954  0B89               	decfsz	9,f
 14730  0955  2951               	goto	u8955
 14731  0956                     l3031:	
 14732  0956  30FF               	movlw	255
 14733  0957  0522               	andwf	___ftpack@arg+2,w
 14734  0958  1903               	btfsc	3,2
 14735  0959  2963               	goto	l8593
 14736  095A  2942               	goto	l8585
 14737  095B                     l8591:	
 14738  095B  3001               	movlw	1
 14739  095C  02A3               	subwf	___ftpack@exp,f
 14740  095D  3001               	movlw	1
 14741  095E                     u8975:	
 14742  095E  35A0               	lslf	___ftpack@arg,f
 14743  095F  0DA1               	rlf	___ftpack@arg+1,f
 14744  0960  0DA2               	rlf	___ftpack@arg+2,f
 14745  0961  0B89               	decfsz	9,f
 14746  0962  295E               	goto	u8975
 14747  0963                     l8593:	
 14748  0963  1FA1               	btfss	___ftpack@arg+1,7
 14749  0964  295B               	goto	l8591
 14750  0965  1823               	btfsc	___ftpack@exp,0
 14751  0966  296D               	goto	l3037
 14752  0967  30FF               	movlw	255
 14753  0968  05A0               	andwf	___ftpack@arg,f
 14754  0969  307F               	movlw	127
 14755  096A  05A1               	andwf	___ftpack@arg+1,f
 14756  096B  30FF               	movlw	255
 14757  096C  05A2               	andwf	___ftpack@arg+2,f
 14758  096D                     l3037:	
 14759  096D  1003               	clrc
 14760  096E  0CA3               	rrf	___ftpack@exp,f
 14761  096F  0823               	movf	___ftpack@exp,w
 14762  0970  00A5               	movwf	??___ftpack
 14763  0971  01A6               	clrf	??___ftpack+1
 14764  0972  01A7               	clrf	??___ftpack+2
 14765  0973  3010               	movlw	16
 14766  0974                     u9005:	
 14767  0974  35A5               	lslf	??___ftpack,f
 14768  0975  0DA6               	rlf	??___ftpack+1,f
 14769  0976  0DA7               	rlf	??___ftpack+2,f
 14770  0977  0B89               	decfsz	9,f
 14771  0978  2974               	goto	u9005
 14772  0979  0825               	movf	??___ftpack,w
 14773  097A  04A0               	iorwf	___ftpack@arg,f
 14774  097B  0826               	movf	??___ftpack+1,w
 14775  097C  04A1               	iorwf	___ftpack@arg+1,f
 14776  097D  0827               	movf	??___ftpack+2,w
 14777  097E  04A2               	iorwf	___ftpack@arg+2,f
 14778  097F  0824               	movf	___ftpack@sign,w
 14779  0980  1903               	btfsc	3,2
 14780  0981  0008               	return
 14781  0982  17A2               	bsf	___ftpack@arg+2,7
 14782  0983  0008               	return
 14783  0984                     __end_of___ftpack:	
 14784                           
 14785                           	psect	text87
 14786  164F                     __ptext87:	
 14787 ;; *************** function _setLED *****************
 14788 ;; Defined at:
 14789 ;;		line 76 in file "../src/LED_B1.c"
 14790 ;; Parameters:    Size  Location     Type
 14791 ;;  led             1    wreg     unsigned char 
 14792 ;;  command         1    2[BANK0 ] unsigned char 
 14793 ;; Auto vars:     Size  Location     Type
 14794 ;;  led             1    3[BANK0 ] unsigned char 
 14795 ;; Return value:  Size  Location     Type
 14796 ;;		None               void
 14797 ;; Registers used:
 14798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14799 ;; Tracked objects:
 14800 ;;		On entry : 0/0
 14801 ;;		On exit  : 0/0
 14802 ;;		Unchanged: 0/0
 14803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14804 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14808 ;;Total ram usage:        2 bytes
 14809 ;; Hardware stack levels used:    1
 14810 ;; Hardware stack levels required when called:    6
 14811 ;; This function calls:
 14812 ;;		_LedPointSelect
 14813 ;; This function is called by:
 14814 ;;		_setDimmerLights
 14815 ;;		_setLED_Initialization
 14816 ;;		_Exception_Main
 14817 ;;		_setSw_Initialization
 14818 ;; This function uses a non-reentrant model
 14819 ;;
 14820                           
 14821                           
 14822                           ;psect for function _setLED
 14823  164F                     _setLED:	
 14824                           
 14825                           ;incstack = 0
 14826                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14827                           ;setLED@led stored from wreg
 14828  164F  0020               	movlb	0	; select bank0
 14829  1650  00A3               	movwf	setLED@led
 14830                           
 14831                           ;LED_B1.c: 77: LedPointSelect(led);
 14832  1651  0823               	movf	setLED@led,w
 14833  1652  319E  26C6  3196   	fcall	_LedPointSelect
 14834                           
 14835                           ;LED_B1.c: 78: if (command == 0) {
 14836  1655  0020               	movlb	0	; select bank0
 14837  1656  08A2               	movf	setLED@command,f
 14838  1657  1D03               	skipz
 14839  1658  2E66               	goto	l9381
 14840                           
 14841                           ;LED_B1.c: 80: if (led == 1) {
 14842  1659  0823               	movf	setLED@led,w
 14843  165A  3A01               	xorlw	1
 14844  165B  1D03               	skipz
 14845  165C  2E5E               	goto	l9373
 14846                           
 14847                           ;LED_B1.c: 84: RA3 = 1;
 14848  165D  158C               	bsf	12,3	;volatile
 14849  165E                     l9373:	
 14850                           
 14851                           ;LED_B1.c: 86: }
 14852                           ;LED_B1.c: 89: if (led == 2) {
 14853  165E  0823               	movf	setLED@led,w
 14854  165F  3A02               	xorlw	2
 14855  1660  1903               	btfsc	3,2
 14856                           
 14857                           ;LED_B1.c: 93: RC7 = 1;
 14858  1661  178E               	bsf	14,7	;volatile
 14859                           
 14860                           ;LED_B1.c: 95: }
 14861                           ;LED_B1.c: 107: if (led == 99) {
 14862  1662  0823               	movf	setLED@led,w
 14863  1663  3A63               	xorlw	99
 14864  1664  1903               	btfsc	3,2
 14865                           
 14866                           ;LED_B1.c: 111: RB5 = 1;
 14867  1665  168D               	bsf	13,5	;volatile
 14868  1666                     l9381:	
 14869                           
 14870                           ;LED_B1.c: 113: }
 14871                           ;LED_B1.c: 115: }
 14872                           ;LED_B1.c: 116: if (command == 1) {
 14873  1666  0822               	movf	setLED@command,w
 14874  1667  3A01               	xorlw	1
 14875  1668  1D03               	skipz
 14876  1669  2E77               	goto	l9395
 14877                           
 14878                           ;LED_B1.c: 118: if (led == 1) {
 14879  166A  0823               	movf	setLED@led,w
 14880  166B  3A01               	xorlw	1
 14881  166C  1D03               	skipz
 14882  166D  2E6F               	goto	l9387
 14883                           
 14884                           ;LED_B1.c: 122: RA3 = 0;
 14885  166E  118C               	bcf	12,3	;volatile
 14886  166F                     l9387:	
 14887                           
 14888                           ;LED_B1.c: 124: }
 14889                           ;LED_B1.c: 127: if (led == 2) {
 14890  166F  0823               	movf	setLED@led,w
 14891  1670  3A02               	xorlw	2
 14892  1671  1903               	btfsc	3,2
 14893                           
 14894                           ;LED_B1.c: 131: RC7 = 0;
 14895  1672  138E               	bcf	14,7	;volatile
 14896                           
 14897                           ;LED_B1.c: 133: }
 14898                           ;LED_B1.c: 145: if (led == 99) {
 14899  1673  0823               	movf	setLED@led,w
 14900  1674  3A63               	xorlw	99
 14901  1675  1903               	btfsc	3,2
 14902                           
 14903                           ;LED_B1.c: 149: RB5 = 0;
 14904  1676  128D               	bcf	13,5	;volatile
 14905  1677                     l9395:	
 14906                           
 14907                           ;LED_B1.c: 151: }
 14908                           ;LED_B1.c: 153: }
 14909                           ;LED_B1.c: 154: if (command == 10) {
 14910  1677  0822               	movf	setLED@command,w
 14911  1678  3A0A               	xorlw	10
 14912  1679  1D03               	skipz
 14913  167A  2E97               	goto	l9411
 14914                           
 14915                           ;LED_B1.c: 155: LED->GO = 0;
 14916  167B  0021               	movlb	1	; select bank1
 14917  167C  084D               	movf	_LED^(0+128),w
 14918  167D  0086               	movwf	6
 14919  167E  3001               	movlw	1	; select bank2/3
 14920  167F  0087               	movwf	7
 14921  1680  1081               	bcf	1,1
 14922                           
 14923                           ;LED_B1.c: 156: LED->Time = 0;
 14924  1681  0A4D               	incf	_LED^(0+128),w
 14925  1682  0086               	movwf	6
 14926  1683  3001               	movlw	1	; select bank2/3
 14927  1684  0087               	movwf	7
 14928  1685  3000               	movlw	0
 14929  1686  3FC0               	movwi [0]fsr1
 14930  1687  3FC1               	movwi [1]fsr1
 14931                           
 14932                           ;LED_B1.c: 158: if (led == 1) {
 14933  1688  0020               	movlb	0	; select bank0
 14934  1689  0823               	movf	setLED@led,w
 14935  168A  3A01               	xorlw	1
 14936  168B  1D03               	skipz
 14937  168C  2E8F               	goto	l9403
 14938                           
 14939                           ;LED_B1.c: 162: RA3 = 1;
 14940  168D  158C               	bsf	12,3	;volatile
 14941                           
 14942                           ;LED_B1.c: 164: }
 14943  168E  2E93               	goto	l9407
 14944  168F                     l9403:	
 14945                           
 14946                           ;LED_B1.c: 167: else if (led == 2) {
 14947  168F  0823               	movf	setLED@led,w
 14948  1690  3A02               	xorlw	2
 14949  1691  1903               	btfsc	3,2
 14950                           
 14951                           ;LED_B1.c: 171: RC7 = 1;
 14952  1692  178E               	bsf	14,7	;volatile
 14953  1693                     l9407:	
 14954                           
 14955                           ;LED_B1.c: 173: }
 14956                           ;LED_B1.c: 185: if (led == 99) {
 14957  1693  0823               	movf	setLED@led,w
 14958  1694  3A63               	xorlw	99
 14959  1695  1903               	btfsc	3,2
 14960                           
 14961                           ;LED_B1.c: 189: RB5 = 1;
 14962  1696  168D               	bsf	13,5	;volatile
 14963  1697                     l9411:	
 14964                           
 14965                           ;LED_B1.c: 191: }
 14966                           ;LED_B1.c: 193: }
 14967                           ;LED_B1.c: 194: if (command == 11) {
 14968  1697  0822               	movf	setLED@command,w
 14969  1698  3A0B               	xorlw	11
 14970  1699  1D03               	skipz
 14971  169A  0008               	return
 14972                           
 14973                           ;LED_B1.c: 195: LED->GO = 1;
 14974  169B  0021               	movlb	1	; select bank1
 14975  169C  084D               	movf	_LED^(0+128),w
 14976  169D  0086               	movwf	6
 14977  169E  3001               	movlw	1	; select bank2/3
 14978  169F  0087               	movwf	7
 14979  16A0  1481               	bsf	1,1
 14980  16A1  0008               	return
 14981  16A2                     __end_of_setLED:	
 14982                           
 14983                           	psect	text88
 14984  1EC6                     __ptext88:	
 14985 ;; *************** function _LedPointSelect *****************
 14986 ;; Defined at:
 14987 ;;		line 7 in file "../src/LED_B1.c"
 14988 ;; Parameters:    Size  Location     Type
 14989 ;;  led             1    wreg     unsigned char 
 14990 ;; Auto vars:     Size  Location     Type
 14991 ;;  led             1    1[BANK0 ] unsigned char 
 14992 ;; Return value:  Size  Location     Type
 14993 ;;		None               void
 14994 ;; Registers used:
 14995 ;;		wreg
 14996 ;; Tracked objects:
 14997 ;;		On entry : 0/0
 14998 ;;		On exit  : 0/0
 14999 ;;		Unchanged: 0/0
 15000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15002 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15003 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15004 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15005 ;;Total ram usage:        2 bytes
 15006 ;; Hardware stack levels used:    1
 15007 ;; Hardware stack levels required when called:    5
 15008 ;; This function calls:
 15009 ;;		Nothing
 15010 ;; This function is called by:
 15011 ;;		_setLED_Initialization
 15012 ;;		_setLED
 15013 ;;		_setLED_Main
 15014 ;; This function uses a non-reentrant model
 15015 ;;
 15016                           
 15017                           
 15018                           ;psect for function _LedPointSelect
 15019  1EC6                     _LedPointSelect:	
 15020                           
 15021                           ;incstack = 0
 15022                           ; Regs used in _LedPointSelect: [wreg]
 15023                           ;LedPointSelect@led stored from wreg
 15024  1EC6  0020               	movlb	0	; select bank0
 15025  1EC7  00A1               	movwf	LedPointSelect@led
 15026                           
 15027                           ;LED_B1.c: 9: if (led == 1) {
 15028  1EC8  0821               	movf	LedPointSelect@led,w
 15029  1EC9  3A01               	xorlw	1
 15030  1ECA  1D03               	skipz
 15031  1ECB  2ED1               	goto	l1030
 15032                           
 15033                           ;LED_B1.c: 10: LED = &VarLED1;
 15034  1ECC  306A               	movlw	_VarLED1& (0+255)
 15035  1ECD  00A0               	movwf	??_LedPointSelect
 15036  1ECE  0820               	movf	??_LedPointSelect,w
 15037  1ECF  0021               	movlb	1	; select bank1
 15038  1ED0  00CD               	movwf	_LED^(0+128)
 15039  1ED1                     l1030:	
 15040                           
 15041                           ;LED_B1.c: 11: }
 15042                           ;LED_B1.c: 14: if (led == 2) {
 15043  1ED1  0020               	movlb	0	; select bank0
 15044  1ED2  0821               	movf	LedPointSelect@led,w
 15045  1ED3  3A02               	xorlw	2
 15046  1ED4  1D03               	skipz
 15047  1ED5  2EDB               	goto	l1031
 15048                           
 15049                           ;LED_B1.c: 15: LED = &VarLED2;
 15050  1ED6  30EB               	movlw	_VarLED2& (0+255)
 15051  1ED7  00A0               	movwf	??_LedPointSelect
 15052  1ED8  0820               	movf	??_LedPointSelect,w
 15053  1ED9  0021               	movlb	1	; select bank1
 15054  1EDA  00CD               	movwf	_LED^(0+128)
 15055  1EDB                     l1031:	
 15056                           
 15057                           ;LED_B1.c: 16: }
 15058                           ;LED_B1.c: 24: if (led == 99) {
 15059  1EDB  0020               	movlb	0	; select bank0
 15060  1EDC  0821               	movf	LedPointSelect@led,w
 15061  1EDD  3A63               	xorlw	99
 15062  1EDE  1D03               	skipz
 15063  1EDF  0008               	return
 15064                           
 15065                           ;LED_B1.c: 25: LED = &VarErrLED;
 15066  1EE0  3066               	movlw	_VarErrLED& (0+255)
 15067  1EE1  00A0               	movwf	??_LedPointSelect
 15068  1EE2  0820               	movf	??_LedPointSelect,w
 15069  1EE3  0021               	movlb	1	; select bank1
 15070  1EE4  00CD               	movwf	_LED^(0+128)
 15071  1EE5  0008               	return
 15072  1EE6                     __end_of_LedPointSelect:	
 15073                           
 15074                           	psect	text89
 15075  1DB3                     __ptext89:	
 15076 ;; *************** function _setDimmerLights_Line *****************
 15077 ;; Defined at:
 15078 ;;		line 706 in file "../src/Dimmer_B1.c"
 15079 ;; Parameters:    Size  Location     Type
 15080 ;;  lights          1    wreg     unsigned char 
 15081 ;; Auto vars:     Size  Location     Type
 15082 ;;  lights          1    0[BANK0 ] unsigned char 
 15083 ;; Return value:  Size  Location     Type
 15084 ;;		None               void
 15085 ;; Registers used:
 15086 ;;		wreg
 15087 ;; Tracked objects:
 15088 ;;		On entry : 0/0
 15089 ;;		On exit  : 0/0
 15090 ;;		Unchanged: 0/0
 15091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15095 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15096 ;;Total ram usage:        1 bytes
 15097 ;; Hardware stack levels used:    1
 15098 ;; Hardware stack levels required when called:    5
 15099 ;; This function calls:
 15100 ;;		Nothing
 15101 ;; This function is called by:
 15102 ;;		_setDimmerLights
 15103 ;;		_setDimmerLights_Adj
 15104 ;; This function uses a non-reentrant model
 15105 ;;
 15106                           
 15107                           
 15108                           ;psect for function _setDimmerLights_Line
 15109  1DB3                     _setDimmerLights_Line:	
 15110                           
 15111                           ;incstack = 0
 15112                           ; Regs used in _setDimmerLights_Line: [wreg]
 15113                           ;setDimmerLights_Line@lights stored from wreg
 15114  1DB3  0020               	movlb	0	; select bank0
 15115  1DB4  00A0               	movwf	setDimmerLights_Line@lights
 15116                           
 15117                           ;Dimmer_B1.c: 707: Dimmer.LoadGO = 1;
 15118  1DB5  0021               	movlb	1	; select bank1
 15119  1DB6  1546               	bsf	_Dimmer^(0+128),2	;volatile
 15120                           
 15121                           ;Dimmer_B1.c: 709: DimmerLights1.Line = 0;
 15122  1DB7  0022               	movlb	2	; select bank2
 15123  1DB8  135F               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 15124                           
 15125                           ;Dimmer_B1.c: 712: DimmerLights2.Line = 0;
 15126  1DB9  0023               	movlb	3	; select bank3
 15127  1DBA  1348               	bcf	(_DimmerLights2^(0+384)+10),6	;volatile
 15128                           
 15129                           ;Dimmer_B1.c: 718: if (lights == 1) {
 15130  1DBB  0020               	movlb	0	; select bank0
 15131  1DBC  0820               	movf	setDimmerLights_Line@lights,w
 15132  1DBD  3A01               	xorlw	1
 15133  1DBE  1D03               	skipz
 15134  1DBF  2DC3               	goto	l9361
 15135                           
 15136                           ;Dimmer_B1.c: 719: DimmerLights1.Line = 1;
 15137  1DC0  0022               	movlb	2	; select bank2
 15138  1DC1  175F               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 15139                           
 15140                           ;Dimmer_B1.c: 720: }
 15141  1DC2  0008               	return
 15142  1DC3                     l9361:	
 15143                           
 15144                           ;Dimmer_B1.c: 723: else if (lights == 2) {
 15145  1DC3  0020               	movlb	0	; select bank0
 15146  1DC4  0820               	movf	setDimmerLights_Line@lights,w
 15147  1DC5  3A02               	xorlw	2
 15148  1DC6  1D03               	skipz
 15149  1DC7  0008               	return
 15150                           
 15151                           ;Dimmer_B1.c: 724: DimmerLights2.Line = 1;
 15152  1DC8  0023               	movlb	3	; select bank3
 15153  1DC9  1748               	bsf	(_DimmerLights2^(0+384)+10),6	;volatile
 15154  1DCA  0008               	return
 15155  1DCB                     __end_of_setDimmerLights_Line:	
 15156                           
 15157                           	psect	text90
 15158  1272                     __ptext90:	
 15159 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15160 ;; Defined at:
 15161 ;;		line 586 in file "../src/Dimmer_B1.c"
 15162 ;; Parameters:    Size  Location     Type
 15163 ;;  lights          1    wreg     unsigned char 
 15164 ;; Auto vars:     Size  Location     Type
 15165 ;;  lights          1    5[BANK0 ] unsigned char 
 15166 ;;  allow           1    6[BANK0 ] unsigned char 
 15167 ;; Return value:  Size  Location     Type
 15168 ;;                  1    wreg      unsigned char 
 15169 ;; Registers used:
 15170 ;;		wreg, status,2, status,0, pclath, cstack
 15171 ;; Tracked objects:
 15172 ;;		On entry : 0/0
 15173 ;;		On exit  : 0/0
 15174 ;;		Unchanged: 0/0
 15175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15177 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15179 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;Total ram usage:        6 bytes
 15181 ;; Hardware stack levels used:    1
 15182 ;; Hardware stack levels required when called:    6
 15183 ;; This function calls:
 15184 ;;		_getLoad_OK
 15185 ;; This function is called by:
 15186 ;;		_setDimmerLights_AdjOn
 15187 ;;		_setDimmerLights_Main
 15188 ;; This function uses a non-reentrant model
 15189 ;;
 15190                           
 15191                           
 15192                           ;psect for function _getDimmerLights_Allow_Condition
 15193  1272                     _getDimmerLights_Allow_Condition:	
 15194                           
 15195                           ;incstack = 0
 15196                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 15197                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 15198  1272  0020               	movlb	0	; select bank0
 15199  1273  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 15200                           
 15201                           ;Dimmer_B1.c: 587: char allow = 0;
 15202  1274  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 15203                           
 15204                           ;Dimmer_B1.c: 594: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 15205  1275  01A2               	clrf	_getDimmerLights_Allow_Condition$2329
 15206  1276  0AA2               	incf	_getDimmerLights_Allow_Condition$2329,f
 15207  1277  319B  231A  3192   	fcall	_getLoad_OK
 15208  127A  3800               	iorlw	0
 15209  127B  1D03               	skipz
 15210  127C  2A82               	goto	l9303
 15211  127D  0021               	movlb	1	; select bank1
 15212  127E  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 15213  127F  2A82               	goto	l9303
 15214  1280  0020               	movlb	0	; select bank0
 15215  1281  01A2               	clrf	_getDimmerLights_Allow_Condition$2329
 15216  1282                     l9303:	
 15217  1282  0020               	movlb	0	; select bank0
 15218  1283  0822               	movf	_getDimmerLights_Allow_Condition$2329,w
 15219  1284  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15220  1285  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15221  1286  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 15222                           
 15223                           ;Dimmer_B1.c: 599: if (allow == 0) {
 15224  1287  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 15225  1288  1D03               	skipz
 15226  1289  2AAA               	goto	l9327
 15227                           
 15228                           ;Dimmer_B1.c: 600: if (lights == 1) {
 15229  128A  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 15230  128B  3A01               	xorlw	1
 15231  128C  1D03               	skipz
 15232  128D  2A99               	goto	l9317
 15233                           
 15234                           ;Dimmer_B1.c: 601: allow = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1
      +                           : 0;
 15235  128E  01A3               	clrf	_getDimmerLights_Allow_Condition$2330
 15236  128F  0AA3               	incf	_getDimmerLights_Allow_Condition$2330,f
 15237  1290  0023               	movlb	3	; select bank3
 15238  1291  1DC8               	btfss	(_DimmerLights2^(0+384)+10),3	;volatile
 15239  1292  1B3F               	btfsc	(_DimmerLights2^(0+384)+1),6	;volatile
 15240  1293  2A96               	goto	l9315
 15241  1294  0020               	movlb	0	; select bank0
 15242  1295  01A3               	clrf	_getDimmerLights_Allow_Condition$2330
 15243  1296                     l9315:	
 15244  1296  0020               	movlb	0	; select bank0
 15245  1297  0823               	movf	_getDimmerLights_Allow_Condition$2330,w
 15246  1298  2AA7               	goto	L7
 15247  1299                     l9317:	
 15248                           ;Dimmer_B1.c: 602: } else if (lights == 2) {
 15249                           
 15250  1299  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 15251  129A  3A02               	xorlw	2
 15252  129B  1D03               	skipz
 15253  129C  2AAA               	goto	l9327
 15254                           
 15255                           ;Dimmer_B1.c: 603: allow = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1
      +                           : 0;
 15256  129D  01A4               	clrf	_getDimmerLights_Allow_Condition$2331
 15257  129E  0AA4               	incf	_getDimmerLights_Allow_Condition$2331,f
 15258  129F  0022               	movlb	2	; select bank2
 15259  12A0  1DDF               	btfss	(_DimmerLights1^(0+256)+10),3	;volatile
 15260  12A1  1B56               	btfsc	(_DimmerLights1^(0+256)+1),6	;volatile
 15261  12A2  2AA5               	goto	l9325
 15262  12A3  0020               	movlb	0	; select bank0
 15263  12A4  01A4               	clrf	_getDimmerLights_Allow_Condition$2331
 15264  12A5                     l9325:	
 15265  12A5  0020               	movlb	0	; select bank0
 15266  12A6  0824               	movf	_getDimmerLights_Allow_Condition$2331,w
 15267  12A7                     L7:	
 15268  12A7  00A1               	movwf	??_getDimmerLights_Allow_Condition
 15269  12A8  0821               	movf	??_getDimmerLights_Allow_Condition,w
 15270  12A9  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 15271  12AA                     l9327:	
 15272                           
 15273                           ;Dimmer_B1.c: 604: }
 15274                           ;Dimmer_B1.c: 605: }
 15275                           ;Dimmer_B1.c: 619: return allow;
 15276  12AA  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 15277  12AB  0008               	return
 15278  12AC                     __end_of_getDimmerLights_Allow_Condition:	
 15279                           
 15280                           	psect	text91
 15281  1B1A                     __ptext91:	
 15282 ;; *************** function _getLoad_OK *****************
 15283 ;; Defined at:
 15284 ;;		line 265 in file "../src/OverLoad_B1.c"
 15285 ;; Parameters:    Size  Location     Type
 15286 ;;		None
 15287 ;; Auto vars:     Size  Location     Type
 15288 ;;  ok              1    0[BANK0 ] unsigned char 
 15289 ;; Return value:  Size  Location     Type
 15290 ;;                  1    wreg      unsigned char 
 15291 ;; Registers used:
 15292 ;;		wreg, status,2
 15293 ;; Tracked objects:
 15294 ;;		On entry : 0/0
 15295 ;;		On exit  : 0/0
 15296 ;;		Unchanged: 0/0
 15297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15299 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15301 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15302 ;;Total ram usage:        1 bytes
 15303 ;; Hardware stack levels used:    1
 15304 ;; Hardware stack levels required when called:    5
 15305 ;; This function calls:
 15306 ;;		Nothing
 15307 ;; This function is called by:
 15308 ;;		_DimmerLights_Main
 15309 ;;		_getDimmerLights_Allow_Condition
 15310 ;; This function uses a non-reentrant model
 15311 ;;
 15312                           
 15313                           
 15314                           ;psect for function _getLoad_OK
 15315  1B1A                     _getLoad_OK:	
 15316                           
 15317                           ;OverLoad_B1.c: 266: char ok = Load.OK == 1 ? 1 : 0;
 15318                           
 15319                           ;incstack = 0
 15320                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15321  1B1A  3000               	movlw	0
 15322  1B1B  0022               	movlb	2	; select bank2
 15323  1B1C  1BA7               	btfsc	_Load^(0+256),7
 15324  1B1D  3001               	movlw	1
 15325  1B1E  0020               	movlb	0	; select bank0
 15326  1B1F  00A0               	movwf	getLoad_OK@ok
 15327                           
 15328                           ;OverLoad_B1.c: 267: return ok;
 15329  1B20  0820               	movf	getLoad_OK@ok,w
 15330  1B21  0008               	return
 15331  1B22                     __end_of_getLoad_OK:	
 15332                           
 15333                           	psect	text92
 15334  1C9C                     __ptext92:	
 15335 ;; *************** function _getMain_LightsStatus *****************
 15336 ;; Defined at:
 15337 ;;		line 375 in file "../src/Main_B1.c"
 15338 ;; Parameters:    Size  Location     Type
 15339 ;;		None
 15340 ;; Auto vars:     Size  Location     Type
 15341 ;;  status          1    0[BANK0 ] unsigned char 
 15342 ;; Return value:  Size  Location     Type
 15343 ;;                  1    wreg      unsigned char 
 15344 ;; Registers used:
 15345 ;;		wreg, status,2, status,0
 15346 ;; Tracked objects:
 15347 ;;		On entry : 0/0
 15348 ;;		On exit  : 0/0
 15349 ;;		Unchanged: 0/0
 15350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15352 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15354 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15355 ;;Total ram usage:        1 bytes
 15356 ;; Hardware stack levels used:    1
 15357 ;; Hardware stack levels required when called:    5
 15358 ;; This function calls:
 15359 ;;		Nothing
 15360 ;; This function is called by:
 15361 ;;		_DimmerLights_Main
 15362 ;;		_Flash_Memory_Main
 15363 ;;		_Exception_Main
 15364 ;;		_Load_Main
 15365 ;; This function uses a non-reentrant model
 15366 ;;
 15367                           
 15368                           
 15369                           ;psect for function _getMain_LightsStatus
 15370  1C9C                     _getMain_LightsStatus:	
 15371                           
 15372                           ;Main_B1.c: 376: char status = 0;
 15373                           
 15374                           ;incstack = 0
 15375                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 15376  1C9C  0020               	movlb	0	; select bank0
 15377  1C9D  01A0               	clrf	getMain_LightsStatus@status
 15378                           
 15379                           ;Main_B1.c: 395: status = DimmerLights1.Status == 1 ? 1 : 0;
 15380  1C9E  3000               	movlw	0
 15381  1C9F  0022               	movlb	2	; select bank2
 15382  1CA0  18D7               	btfsc	(_DimmerLights1^(0+256)+2),1	;volatile
 15383  1CA1  3001               	movlw	1
 15384  1CA2  0020               	movlb	0	; select bank0
 15385  1CA3  00A0               	movwf	getMain_LightsStatus@status
 15386                           
 15387                           ;Main_B1.c: 396: if (status == 0) {
 15388  1CA4  08A0               	movf	getMain_LightsStatus@status,f
 15389  1CA5  1D03               	skipz
 15390  1CA6  2CAD               	goto	l9961
 15391                           
 15392                           ;Main_B1.c: 397: status = DimmerLights2.Status == 1 ? 1 : 0;
 15393  1CA7  3000               	movlw	0
 15394  1CA8  0023               	movlb	3	; select bank3
 15395  1CA9  18C0               	btfsc	(_DimmerLights2^(0+384)+2),1	;volatile
 15396  1CAA  3001               	movlw	1
 15397  1CAB  0020               	movlb	0	; select bank0
 15398  1CAC  00A0               	movwf	getMain_LightsStatus@status
 15399  1CAD                     l9961:	
 15400                           
 15401                           ;Main_B1.c: 398: }
 15402                           ;Main_B1.c: 422: return status;
 15403  1CAD  0820               	movf	getMain_LightsStatus@status,w
 15404  1CAE  0008               	return
 15405  1CAF                     __end_of_getMain_LightsStatus:	
 15406                           
 15407                           	psect	text93
 15408  1168                     __ptext93:	
 15409 ;; *************** function _getMain_All_Error_Status *****************
 15410 ;; Defined at:
 15411 ;;		line 426 in file "../src/Main_B1.c"
 15412 ;; Parameters:    Size  Location     Type
 15413 ;;  command         1    wreg     unsigned char 
 15414 ;; Auto vars:     Size  Location     Type
 15415 ;;  command         1    5[BANK0 ] unsigned char 
 15416 ;;  status          1    6[BANK0 ] unsigned char 
 15417 ;; Return value:  Size  Location     Type
 15418 ;;                  1    wreg      unsigned char 
 15419 ;; Registers used:
 15420 ;;		wreg, status,2, status,0
 15421 ;; Tracked objects:
 15422 ;;		On entry : 0/0
 15423 ;;		On exit  : 0/0
 15424 ;;		Unchanged: 0/0
 15425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15427 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15429 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15430 ;;Total ram usage:        7 bytes
 15431 ;; Hardware stack levels used:    1
 15432 ;; Hardware stack levels required when called:    5
 15433 ;; This function calls:
 15434 ;;		Nothing
 15435 ;; This function is called by:
 15436 ;;		_DimmerLights_Main
 15437 ;;		_Exception_Main
 15438 ;;		_Load_Main
 15439 ;;		_setTemp_Main
 15440 ;;		_setRF_Main
 15441 ;;		_getRxData
 15442 ;;		_setSw_Main
 15443 ;; This function uses a non-reentrant model
 15444 ;;
 15445                           
 15446                           
 15447                           ;psect for function _getMain_All_Error_Status
 15448  1168                     _getMain_All_Error_Status:	
 15449                           
 15450                           ;incstack = 0
 15451                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15452                           ;getMain_All_Error_Status@command stored from wreg
 15453  1168  0020               	movlb	0	; select bank0
 15454  1169  00A5               	movwf	getMain_All_Error_Status@command
 15455                           
 15456                           ;Main_B1.c: 427: char status = 0;
 15457  116A  01A6               	clrf	getMain_All_Error_Status@status
 15458                           
 15459                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 15460  116B  08A6               	movf	getMain_All_Error_Status@status,f
 15461  116C  1D03               	skipz
 15462  116D  2982               	goto	l9343
 15463  116E  0825               	movf	getMain_All_Error_Status@command,w
 15464  116F  3A02               	xorlw	2
 15465  1170  1903               	skipnz
 15466  1171  2982               	goto	l9343
 15467                           
 15468                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 15469  1172  0021               	movlb	1	; select bank1
 15470  1173  18D6               	btfsc	_Temp^(0+128),1
 15471  1174  2979               	goto	l9341
 15472  1175  0020               	movlb	0	; select bank0
 15473  1176  01A1               	clrf	_getMain_All_Error_Status$3605
 15474  1177  01A2               	clrf	_getMain_All_Error_Status$3605+1
 15475  1178  297E               	goto	l1572
 15476  1179                     l9341:	
 15477  1179  3002               	movlw	2
 15478  117A  0020               	movlb	0	; select bank0
 15479  117B  00A1               	movwf	_getMain_All_Error_Status$3605
 15480  117C  3000               	movlw	0
 15481  117D  00A2               	movwf	_getMain_All_Error_Status$3605+1
 15482  117E                     l1572:	
 15483  117E  0821               	movf	_getMain_All_Error_Status$3605,w
 15484  117F  00A0               	movwf	??_getMain_All_Error_Status
 15485  1180  0820               	movf	??_getMain_All_Error_Status,w
 15486  1181  00A6               	movwf	getMain_All_Error_Status@status
 15487  1182                     l9343:	
 15488                           
 15489                           ;Main_B1.c: 440: }
 15490                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 15491  1182  08A6               	movf	getMain_All_Error_Status@status,f
 15492  1183  1D03               	skipz
 15493  1184  2999               	goto	l1573
 15494  1185  0825               	movf	getMain_All_Error_Status@command,w
 15495  1186  3A03               	xorlw	3
 15496  1187  1903               	skipnz
 15497  1188  2999               	goto	l1573
 15498                           
 15499                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 15500  1189  0022               	movlb	2	; select bank2
 15501  118A  1AA7               	btfsc	_Load^(0+256),5
 15502  118B  2990               	goto	l9351
 15503  118C  0020               	movlb	0	; select bank0
 15504  118D  01A3               	clrf	_getMain_All_Error_Status$3606
 15505  118E  01A4               	clrf	_getMain_All_Error_Status$3606+1
 15506  118F  2995               	goto	l1577
 15507  1190                     l9351:	
 15508  1190  3003               	movlw	3
 15509  1191  0020               	movlb	0	; select bank0
 15510  1192  00A3               	movwf	_getMain_All_Error_Status$3606
 15511  1193  3000               	movlw	0
 15512  1194  00A4               	movwf	_getMain_All_Error_Status$3606+1
 15513  1195                     l1577:	
 15514  1195  0823               	movf	_getMain_All_Error_Status$3606,w
 15515  1196  00A0               	movwf	??_getMain_All_Error_Status
 15516  1197  0820               	movf	??_getMain_All_Error_Status,w
 15517  1198  00A6               	movwf	getMain_All_Error_Status@status
 15518  1199                     l1573:	
 15519                           
 15520                           ;Main_B1.c: 447: }
 15521                           ;Main_B1.c: 463: return status;
 15522  1199  0826               	movf	getMain_All_Error_Status@status,w
 15523  119A  0008               	return
 15524  119B                     __end_of_getMain_All_Error_Status:	
 15525                           
 15526                           	psect	text94
 15527  1D10                     __ptext94:	
 15528 ;; *************** function _DimmerLights_Initialization *****************
 15529 ;; Defined at:
 15530 ;;		line 341 in file "../src/Dimmer_B1.c"
 15531 ;; Parameters:    Size  Location     Type
 15532 ;;		None
 15533 ;; Auto vars:     Size  Location     Type
 15534 ;;		None
 15535 ;; Return value:  Size  Location     Type
 15536 ;;		None               void
 15537 ;; Registers used:
 15538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15539 ;; Tracked objects:
 15540 ;;		On entry : 0/0
 15541 ;;		On exit  : 0/0
 15542 ;;		Unchanged: 0/0
 15543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15546 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15547 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15548 ;;Total ram usage:        1 bytes
 15549 ;; Hardware stack levels used:    1
 15550 ;; Hardware stack levels required when called:    7
 15551 ;; This function calls:
 15552 ;;		_setDimmerLights_Initialization
 15553 ;; This function is called by:
 15554 ;;		_main
 15555 ;; This function uses a non-reentrant model
 15556 ;;
 15557                           
 15558                           
 15559                           ;psect for function _DimmerLights_Initialization
 15560  1D10                     _DimmerLights_Initialization:	
 15561                           
 15562                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 15563                           
 15564                           ;incstack = 0
 15565                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15566  1D10  3055               	movlw	_DimmerLights1& (0+255)
 15567  1D11  0020               	movlb	0	; select bank0
 15568  1D12  00A4               	movwf	??_DimmerLights_Initialization
 15569  1D13  0824               	movf	??_DimmerLights_Initialization,w
 15570  1D14  0021               	movlb	1	; select bank1
 15571  1D15  00CA               	movwf	_DimmerLights11^(0+128)
 15572                           
 15573                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 15574  1D16  3001               	movlw	1
 15575  1D17  3187  27CF  319D   	fcall	_setDimmerLights_Initialization
 15576                           
 15577                           ;Dimmer_B1.c: 349: DimmerLights22 = &DimmerLights2;
 15578  1D1A  30BE               	movlw	_DimmerLights2& (0+255)
 15579  1D1B  0020               	movlb	0	; select bank0
 15580  1D1C  00A4               	movwf	??_DimmerLights_Initialization
 15581  1D1D  0824               	movf	??_DimmerLights_Initialization,w
 15582  1D1E  0021               	movlb	1	; select bank1
 15583  1D1F  00CB               	movwf	_DimmerLights22^(0+128)
 15584                           
 15585                           ;Dimmer_B1.c: 350: setDimmerLights_Initialization(2);
 15586  1D20  3002               	movlw	2
 15587  1D21  3187  27CF         	fcall	_setDimmerLights_Initialization
 15588  1D23  0008               	return
 15589  1D24                     __end_of_DimmerLights_Initialization:	
 15590                           
 15591                           	psect	text95
 15592  07CF                     __ptext95:	
 15593 ;; *************** function _setDimmerLights_Initialization *****************
 15594 ;; Defined at:
 15595 ;;		line 365 in file "../src/Dimmer_B1.c"
 15596 ;; Parameters:    Size  Location     Type
 15597 ;;  lights          1    wreg     unsigned char 
 15598 ;; Auto vars:     Size  Location     Type
 15599 ;;  lights          1    3[BANK0 ] unsigned char 
 15600 ;; Return value:  Size  Location     Type
 15601 ;;		None               void
 15602 ;; Registers used:
 15603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15604 ;; Tracked objects:
 15605 ;;		On entry : 0/0
 15606 ;;		On exit  : 0/0
 15607 ;;		Unchanged: 0/0
 15608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15610 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15612 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15613 ;;Total ram usage:        2 bytes
 15614 ;; Hardware stack levels used:    1
 15615 ;; Hardware stack levels required when called:    6
 15616 ;; This function calls:
 15617 ;;		_DimmerLightsPointSelect
 15618 ;; This function is called by:
 15619 ;;		_DimmerLights_Initialization
 15620 ;; This function uses a non-reentrant model
 15621 ;;
 15622                           
 15623                           
 15624                           ;psect for function _setDimmerLights_Initialization
 15625  07CF                     _setDimmerLights_Initialization:	
 15626                           
 15627                           ;incstack = 0
 15628                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15629                           ;setDimmerLights_Initialization@lights stored from wreg
 15630  07CF  0020               	movlb	0	; select bank0
 15631  07D0  00A3               	movwf	setDimmerLights_Initialization@lights
 15632                           
 15633                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 15634  07D1  0823               	movf	setDimmerLights_Initialization@lights,w
 15635  07D2  319C  2489  3187   	fcall	_DimmerLightsPointSelect
 15636                           
 15637                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 15638  07D5  3007               	movlw	7
 15639  07D6  0020               	movlb	0	; select bank0
 15640  07D7  00A2               	movwf	??_setDimmerLights_Initialization
 15641  07D8  086F               	movf	_DimmerLights,w
 15642  07D9  3E08               	addlw	8
 15643  07DA  0086               	movwf	6
 15644  07DB  3001               	movlw	1	; select bank2/3
 15645  07DC  0087               	movwf	7
 15646  07DD  0822               	movf	??_setDimmerLights_Initialization,w
 15647  07DE  0081               	movwf	1
 15648                           
 15649                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(75*0.8));
 15650  07DF  303C               	movlw	60
 15651  07E0  00A2               	movwf	??_setDimmerLights_Initialization
 15652  07E1  086F               	movf	_DimmerLights,w
 15653  07E2  3E06               	addlw	6
 15654  07E3  0086               	movwf	6
 15655  07E4  3001               	movlw	1	; select bank2/3
 15656  07E5  0087               	movwf	7
 15657  07E6  0822               	movf	??_setDimmerLights_Initialization,w
 15658  07E7  0081               	movwf	1
 15659                           
 15660                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 15661  07E8  300C               	movlw	12
 15662  07E9  00A2               	movwf	??_setDimmerLights_Initialization
 15663  07EA  086F               	movf	_DimmerLights,w
 15664  07EB  3E09               	addlw	9
 15665  07EC  0086               	movwf	6
 15666  07ED  3001               	movlw	1	; select bank2/3
 15667  07EE  0087               	movwf	7
 15668  07EF  0822               	movf	??_setDimmerLights_Initialization,w
 15669  07F0  0081               	movwf	1
 15670                           
 15671                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15672  07F1  086F               	movf	_DimmerLights,w
 15673  07F2  3E06               	addlw	6
 15674  07F3  0086               	movwf	6
 15675  07F4  3001               	movlw	1	; select bank2/3
 15676  07F5  0087               	movwf	7
 15677  07F6  0801               	movf	1,w
 15678  07F7  00A2               	movwf	??_setDimmerLights_Initialization
 15679  07F8  086F               	movf	_DimmerLights,w
 15680  07F9  3E04               	addlw	4
 15681  07FA  0086               	movwf	6
 15682  07FB  3001               	movlw	1	; select bank2/3
 15683  07FC  0087               	movwf	7
 15684  07FD  0822               	movf	??_setDimmerLights_Initialization,w
 15685  07FE  0081               	movwf	1
 15686  07FF  0008               	return
 15687  0800                     __end_of_setDimmerLights_Initialization:	
 15688                           
 15689                           	psect	text96
 15690  1B12                     __ptext96:	
 15691 ;; *************** function _DelayOff_Main *****************
 15692 ;; Defined at:
 15693 ;;		line 41 in file "../src/DelayOff_B1.c"
 15694 ;; Parameters:    Size  Location     Type
 15695 ;;		None
 15696 ;; Auto vars:     Size  Location     Type
 15697 ;;		None
 15698 ;; Return value:  Size  Location     Type
 15699 ;;		None               void
 15700 ;; Registers used:
 15701 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15702 ;; Tracked objects:
 15703 ;;		On entry : 0/0
 15704 ;;		On exit  : 0/0
 15705 ;;		Unchanged: 0/0
 15706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15711 ;;Total ram usage:        0 bytes
 15712 ;; Hardware stack levels used:    1
 15713 ;; Hardware stack levels required when called:   11
 15714 ;; This function calls:
 15715 ;;		_DlyOff_Main
 15716 ;; This function is called by:
 15717 ;;		_main
 15718 ;; This function uses a non-reentrant model
 15719 ;;
 15720                           
 15721                           
 15722                           ;psect for function _DelayOff_Main
 15723  1B12                     _DelayOff_Main:	
 15724                           
 15725                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15726                           
 15727                           ;incstack = 0
 15728                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15729  1B12  3001               	movlw	1
 15730  1B13  3188  20C6  319B   	fcall	_DlyOff_Main
 15731                           
 15732                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15733  1B16  3002               	movlw	2
 15734  1B17  3188  20C6         	fcall	_DlyOff_Main
 15735  1B19  0008               	return
 15736  1B1A                     __end_of_DelayOff_Main:	
 15737                           
 15738                           	psect	text97
 15739  08C6                     __ptext97:	
 15740 ;; *************** function _DlyOff_Main *****************
 15741 ;; Defined at:
 15742 ;;		line 61 in file "../src/DelayOff_B1.c"
 15743 ;; Parameters:    Size  Location     Type
 15744 ;;  sw              1    wreg     unsigned char 
 15745 ;; Auto vars:     Size  Location     Type
 15746 ;;  sw              1   78[BANK0 ] unsigned char 
 15747 ;; Return value:  Size  Location     Type
 15748 ;;		None               void
 15749 ;; Registers used:
 15750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15751 ;; Tracked objects:
 15752 ;;		On entry : 0/0
 15753 ;;		On exit  : 0/0
 15754 ;;		Unchanged: 0/0
 15755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15757 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15758 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15759 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15760 ;;Total ram usage:        3 bytes
 15761 ;; Hardware stack levels used:    1
 15762 ;; Hardware stack levels required when called:   10
 15763 ;; This function calls:
 15764 ;;		_DelayOffPointSelect
 15765 ;;		_setBuz
 15766 ;;		_setDimmerLights_ErrorClose
 15767 ;; This function is called by:
 15768 ;;		_DelayOff_Main
 15769 ;; This function uses a non-reentrant model
 15770 ;;
 15771                           
 15772                           
 15773                           ;psect for function _DlyOff_Main
 15774  08C6                     _DlyOff_Main:	
 15775                           
 15776                           ;incstack = 0
 15777                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15778                           ;DlyOff_Main@sw stored from wreg
 15779  08C6  0020               	movlb	0	; select bank0
 15780  08C7  00EE               	movwf	DlyOff_Main@sw
 15781                           
 15782                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15783  08C8  086E               	movf	DlyOff_Main@sw,w
 15784  08C9  319C  24FC  3188   	fcall	_DelayOffPointSelect
 15785                           
 15786                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15787  08CC  0875               	movf	_DelayOff,w
 15788  08CD  0086               	movwf	6
 15789  08CE  3001               	movlw	1	; select bank2/3
 15790  08CF  0087               	movwf	7
 15791  08D0  1C81               	btfss	1,1
 15792  08D1  0008               	return
 15793                           
 15794                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15795  08D2  0875               	movf	_DelayOff,w
 15796  08D3  3E02               	addlw	2
 15797  08D4  0086               	movwf	6
 15798  08D5  3001               	movlw	1	; select bank2/3
 15799  08D6  0087               	movwf	7
 15800  08D7  3001               	movlw	1
 15801  08D8  0781               	addwf	1,f
 15802  08D9  3141               	addfsr 1,1
 15803  08DA  1803               	skipnc
 15804  08DB  0A81               	incf	1,f
 15805                           
 15806                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15807  08DC  0875               	movf	_DelayOff,w
 15808  08DD  3E02               	addlw	2
 15809  08DE  0086               	movwf	6
 15810  08DF  3001               	movlw	1	; select bank2/3
 15811  08E0  0087               	movwf	7
 15812  08E1  3F40               	moviw [0]fsr1
 15813  08E2  0020               	movlb	0	; select bank0
 15814  08E3  00EC               	movwf	??_DlyOff_Main
 15815  08E4  3F41               	moviw [1]fsr1
 15816  08E5  00ED               	movwf	??_DlyOff_Main+1
 15817  08E6  3017               	movlw	23
 15818  08E7  026D               	subwf	??_DlyOff_Main+1,w
 15819  08E8  3070               	movlw	112
 15820  08E9  1903               	skipnz
 15821  08EA  026C               	subwf	??_DlyOff_Main,w
 15822  08EB  1C03               	skipc
 15823  08EC  0008               	return
 15824                           
 15825                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15826  08ED  0875               	movf	_DelayOff,w
 15827  08EE  3E02               	addlw	2
 15828  08EF  0086               	movwf	6
 15829  08F0  3001               	movlw	1	; select bank2/3
 15830  08F1  0087               	movwf	7
 15831  08F2  3000               	movlw	0
 15832  08F3  3FC0               	movwi [0]fsr1
 15833  08F4  3FC1               	movwi [1]fsr1
 15834                           
 15835                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15836  08F5  3001               	movlw	1
 15837  08F6  00EC               	movwf	??_DlyOff_Main
 15838  08F7  0875               	movf	_DelayOff,w
 15839  08F8  3E04               	addlw	4
 15840  08F9  0086               	movwf	6
 15841  08FA  3001               	movlw	1	; select bank2/3
 15842  08FB  0087               	movwf	7
 15843  08FC  086C               	movf	??_DlyOff_Main,w
 15844  08FD  0781               	addwf	1,f
 15845                           
 15846                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15847  08FE  0875               	movf	_DelayOff,w
 15848  08FF  3E04               	addlw	4
 15849  0900  0086               	movwf	6
 15850  0901  3001               	movlw	1	; select bank2/3
 15851  0902  0087               	movwf	7
 15852  0903  0A75               	incf	_DelayOff,w
 15853  0904  0084               	movwf	4
 15854  0905  3001               	movlw	1	; select bank2/3
 15855  0906  0085               	movwf	5
 15856  0907  0800               	movf	0,w
 15857  0908  0201               	subwf	1,w
 15858  0909  1C03               	skipc
 15859  090A  0008               	return
 15860                           
 15861                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15862  090B  0875               	movf	_DelayOff,w
 15863  090C  3E04               	addlw	4
 15864  090D  0086               	movwf	6
 15865  090E  3001               	movlw	1	; select bank2/3
 15866  090F  0087               	movwf	7
 15867  0910  0181               	clrf	1
 15868                           
 15869                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15870  0911  0875               	movf	_DelayOff,w
 15871  0912  0086               	movwf	6
 15872  0913  3001               	movlw	1	; select bank2/3
 15873  0914  0087               	movwf	7
 15874  0915  1081               	bcf	1,1
 15875                           
 15876                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15877  0916  3064               	movlw	100
 15878  0917  00A9               	movwf	setBuz@time
 15879  0918  3000               	movlw	0
 15880  0919  00AA               	movwf	setBuz@time+1
 15881  091A  3001               	movlw	1
 15882  091B  3197  274E  3188   	fcall	_setBuz
 15883                           
 15884                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15885  091E  0020               	movlb	0	; select bank0
 15886  091F  086E               	movf	DlyOff_Main@sw,w
 15887  0920  3189  2184         	fcall	_setDimmerLights_ErrorClose
 15888  0922  0008               	return
 15889  0923                     __end_of_DlyOff_Main:	
 15890                           
 15891                           	psect	text98
 15892  0984                     __ptext98:	
 15893 ;; *************** function _setDimmerLights_ErrorClose *****************
 15894 ;; Defined at:
 15895 ;;		line 846 in file "../src/Dimmer_B1.c"
 15896 ;; Parameters:    Size  Location     Type
 15897 ;;  lights          1    wreg     unsigned char 
 15898 ;; Auto vars:     Size  Location     Type
 15899 ;;  lights          1    1[BANK1 ] unsigned char 
 15900 ;;  i               2    2[BANK1 ] int 
 15901 ;;  count           1    0[BANK1 ] unsigned char 
 15902 ;; Return value:  Size  Location     Type
 15903 ;;		None               void
 15904 ;; Registers used:
 15905 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15906 ;; Tracked objects:
 15907 ;;		On entry : 0/0
 15908 ;;		On exit  : 0/0
 15909 ;;		Unchanged: 0/0
 15910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15914 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 15915 ;;Total ram usage:        5 bytes
 15916 ;; Hardware stack levels used:    1
 15917 ;; Hardware stack levels required when called:    9
 15918 ;; This function calls:
 15919 ;;		_DimmerLightsPointSelect
 15920 ;;		_getDimmerLights_Status
 15921 ;;		_setDimmerLights_SwOff
 15922 ;; This function is called by:
 15923 ;;		_DlyOff_Main
 15924 ;;		_setControl_Lights_Table
 15925 ;; This function uses a non-reentrant model
 15926 ;;
 15927                           
 15928                           
 15929                           ;psect for function _setDimmerLights_ErrorClose
 15930  0984                     _setDimmerLights_ErrorClose:	
 15931                           
 15932                           ;incstack = 0
 15933                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15934                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15935  0984  0021               	movlb	1	; select bank1
 15936  0985  00E9               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 15937                           
 15938                           ;Dimmer_B1.c: 847: if (lights == 255) {
 15939  0986  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 15940  0987  3AFF               	xorlw	255
 15941  0988  1D03               	skipz
 15942  0989  29C7               	goto	l9199
 15943                           
 15944                           ;Dimmer_B1.c: 852: char count = 2;
 15945  098A  3002               	movlw	2
 15946  098B  0020               	movlb	0	; select bank0
 15947  098C  00EB               	movwf	??_setDimmerLights_ErrorClose
 15948  098D  086B               	movf	??_setDimmerLights_ErrorClose,w
 15949  098E  0021               	movlb	1	; select bank1
 15950  098F  00E8               	movwf	setDimmerLights_ErrorClose@count^(0+128)
 15951                           
 15952                           ;Dimmer_B1.c: 857: for (int i = 0; i < count; i++) {
 15953  0990  01EA               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 15954  0991  01EB               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 15955  0992                     l9197:	
 15956  0992  086B               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 15957  0993  3A80               	xorlw	128
 15958  0994  0020               	movlb	0	; select bank0
 15959  0995  00EB               	movwf	??_setDimmerLights_ErrorClose
 15960  0996  3080               	movlw	128
 15961  0997  026B               	subwf	??_setDimmerLights_ErrorClose,w
 15962  0998  1D03               	skipz
 15963  0999  299D               	goto	u10105
 15964  099A  0021               	movlb	1	; select bank1
 15965  099B  0868               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 15966  099C  026A               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 15967  099D                     u10105:	
 15968  099D  1803               	btfsc	3,0
 15969  099E  0008               	return
 15970                           
 15971                           ;Dimmer_B1.c: 858: DimmerLightsPointSelect(i + 1);
 15972  099F  0021               	movlb	1	; select bank1
 15973  09A0  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15974  09A1  3E01               	addlw	1
 15975  09A2  319C  2489  3189   	fcall	_DimmerLightsPointSelect
 15976                           
 15977                           ;Dimmer_B1.c: 859: if (getDimmerLights_Status(i + 1) == 1) {
 15978  09A5  0021               	movlb	1	; select bank1
 15979  09A6  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 15980  09A7  3E01               	addlw	1
 15981  09A8  319B  23FC  3189   	fcall	_getDimmerLights_Status
 15982  09AB  3A01               	xorlw	1
 15983  09AC  1D03               	skipz
 15984  09AD  29C1               	goto	l9195
 15985                           
 15986                           ;Dimmer_B1.c: 860: DimmerLights->SwFlag = 1;
 15987  09AE  0020               	movlb	0	; select bank0
 15988  09AF  086F               	movf	_DimmerLights,w
 15989  09B0  3E0B               	addlw	11
 15990  09B1  0086               	movwf	6
 15991  09B2  3001               	movlw	1	; select bank2/3
 15992  09B3  0087               	movwf	7
 15993  09B4  1481               	bsf	1,1
 15994                           
 15995                           ;Dimmer_B1.c: 861: DimmerLights->Status = 0;
 15996  09B5  086F               	movf	_DimmerLights,w
 15997  09B6  3E02               	addlw	2
 15998  09B7  0086               	movwf	6
 15999  09B8  3001               	movlw	1	; select bank2/3
 16000  09B9  0087               	movwf	7
 16001  09BA  1081               	bcf	1,1
 16002                           
 16003                           ;Dimmer_B1.c: 862: setDimmerLights_SwOff(i + 1);
 16004  09BB  0021               	movlb	1	; select bank1
 16005  09BC  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 16006  09BD  3E01               	addlw	1
 16007  09BE  3194  24BC  3189   	fcall	_setDimmerLights_SwOff
 16008  09C1                     l9195:	
 16009  09C1  3001               	movlw	1
 16010  09C2  0021               	movlb	1	; select bank1
 16011  09C3  07EA               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 16012  09C4  3000               	movlw	0
 16013  09C5  3DEB               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 16014  09C6  2992               	goto	l9197
 16015  09C7                     l9199:	
 16016                           ;Dimmer_B1.c: 863: }
 16017                           ;Dimmer_B1.c: 864: }
 16018                           ;Dimmer_B1.c: 865: } else {
 16019                           
 16020                           
 16021                           ;Dimmer_B1.c: 866: DimmerLightsPointSelect(lights);
 16022  09C7  0021               	movlb	1	; select bank1
 16023  09C8  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16024  09C9  319C  2489  3189   	fcall	_DimmerLightsPointSelect
 16025                           
 16026                           ;Dimmer_B1.c: 867: if (getDimmerLights_Status(lights) == 1) {
 16027  09CC  0021               	movlb	1	; select bank1
 16028  09CD  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16029  09CE  319B  23FC  3189   	fcall	_getDimmerLights_Status
 16030  09D1  3A01               	xorlw	1
 16031  09D2  1D03               	skipz
 16032  09D3  0008               	return
 16033                           
 16034                           ;Dimmer_B1.c: 868: DimmerLights->SwFlag = 1;
 16035  09D4  0020               	movlb	0	; select bank0
 16036  09D5  086F               	movf	_DimmerLights,w
 16037  09D6  3E0B               	addlw	11
 16038  09D7  0086               	movwf	6
 16039  09D8  3001               	movlw	1	; select bank2/3
 16040  09D9  0087               	movwf	7
 16041  09DA  1481               	bsf	1,1
 16042                           
 16043                           ;Dimmer_B1.c: 869: DimmerLights->Status = 0;
 16044  09DB  086F               	movf	_DimmerLights,w
 16045  09DC  3E02               	addlw	2
 16046  09DD  0086               	movwf	6
 16047  09DE  3001               	movlw	1	; select bank2/3
 16048  09DF  0087               	movwf	7
 16049  09E0  1081               	bcf	1,1
 16050                           
 16051                           ;Dimmer_B1.c: 870: setDimmerLights_SwOff(lights);
 16052  09E1  0021               	movlb	1	; select bank1
 16053  09E2  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16054  09E3  3194  24BC         	fcall	_setDimmerLights_SwOff
 16055  09E5  0008               	return
 16056  09E6                     __end_of_setDimmerLights_ErrorClose:	
 16057                           
 16058                           	psect	text99
 16059  14BC                     __ptext99:	
 16060 ;; *************** function _setDimmerLights_SwOff *****************
 16061 ;; Defined at:
 16062 ;;		line 450 in file "../src/Dimmer_B1.c"
 16063 ;; Parameters:    Size  Location     Type
 16064 ;;  sw              1    wreg     unsigned char 
 16065 ;; Auto vars:     Size  Location     Type
 16066 ;;  sw              1   74[BANK0 ] unsigned char 
 16067 ;; Return value:  Size  Location     Type
 16068 ;;		None               void
 16069 ;; Registers used:
 16070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16071 ;; Tracked objects:
 16072 ;;		On entry : 0/0
 16073 ;;		On exit  : 0/0
 16074 ;;		Unchanged: 0/0
 16075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16079 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16080 ;;Total ram usage:        1 bytes
 16081 ;; Hardware stack levels used:    1
 16082 ;; Hardware stack levels required when called:    8
 16083 ;; This function calls:
 16084 ;;		_DimmerLightsPointSelect
 16085 ;;		_getDelayOff_GO
 16086 ;;		_setDelayOff_GO
 16087 ;; This function is called by:
 16088 ;;		_setDimmerLights_ErrorClose
 16089 ;;		_Exception_Main
 16090 ;;		_setRFSW_Control
 16091 ;;		_setSw_Main
 16092 ;; This function uses a non-reentrant model
 16093 ;;
 16094                           
 16095                           
 16096                           ;psect for function _setDimmerLights_SwOff
 16097  14BC                     _setDimmerLights_SwOff:	
 16098                           
 16099                           ;incstack = 0
 16100                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16101                           ;setDimmerLights_SwOff@sw stored from wreg
 16102  14BC  0020               	movlb	0	; select bank0
 16103  14BD  00EA               	movwf	setDimmerLights_SwOff@sw
 16104                           
 16105                           ;Dimmer_B1.c: 451: DimmerLightsPointSelect(sw);
 16106  14BE  086A               	movf	setDimmerLights_SwOff@sw,w
 16107  14BF  319C  2489  3194   	fcall	_DimmerLightsPointSelect
 16108                           
 16109                           ;Dimmer_B1.c: 453: if (DimmerLights->SwFlag == 1) {
 16110  14C2  0020               	movlb	0	; select bank0
 16111  14C3  086F               	movf	_DimmerLights,w
 16112  14C4  3E0B               	addlw	11
 16113  14C5  0086               	movwf	6
 16114  14C6  3001               	movlw	1	; select bank2/3
 16115  14C7  0087               	movwf	7
 16116  14C8  1C81               	btfss	1,1
 16117  14C9  0008               	return
 16118                           
 16119                           ;Dimmer_B1.c: 454: DimmerLights->SwFlag = 0;
 16120  14CA  086F               	movf	_DimmerLights,w
 16121  14CB  3E0B               	addlw	11
 16122  14CC  0086               	movwf	6
 16123  14CD  3001               	movlw	1	; select bank2/3
 16124  14CE  0087               	movwf	7
 16125  14CF  1081               	bcf	1,1
 16126                           
 16127                           ;Dimmer_B1.c: 455: if (DimmerLights->Status == 1) {
 16128  14D0  086F               	movf	_DimmerLights,w
 16129  14D1  3E02               	addlw	2
 16130  14D2  0086               	movwf	6
 16131  14D3  3001               	movlw	1	; select bank2/3
 16132  14D4  0087               	movwf	7
 16133  14D5  1C81               	btfss	1,1
 16134  14D6  2CF1               	goto	l9045
 16135                           
 16136                           ;Dimmer_B1.c: 457: if (DimmerLights->SwAdj == 1) {
 16137  14D7  086F               	movf	_DimmerLights,w
 16138  14D8  3E0B               	addlw	11
 16139  14D9  0086               	movwf	6
 16140  14DA  3001               	movlw	1	; select bank2/3
 16141  14DB  0087               	movwf	7
 16142  14DC  1D01               	btfss	1,2
 16143  14DD  0008               	return
 16144                           
 16145                           ;Dimmer_B1.c: 458: DimmerLights->SwAdj = 0;
 16146  14DE  086F               	movf	_DimmerLights,w
 16147  14DF  3E0B               	addlw	11
 16148  14E0  0086               	movwf	6
 16149  14E1  3001               	movlw	1	; select bank2/3
 16150  14E2  0087               	movwf	7
 16151  14E3  1101               	bcf	1,2
 16152                           
 16153                           ;Dimmer_B1.c: 460: DimmerLights->TriggerAdj = 1;
 16154  14E4  086F               	movf	_DimmerLights,w
 16155  14E5  3E0A               	addlw	10
 16156  14E6  0086               	movwf	6
 16157  14E7  3001               	movlw	1	; select bank2/3
 16158  14E8  0087               	movwf	7
 16159  14E9  1581               	bsf	1,3
 16160                           
 16161                           ;Dimmer_B1.c: 461: DimmerLights->SwitchAdj = 0;
 16162  14EA  086F               	movf	_DimmerLights,w
 16163  14EB  3E0A               	addlw	10
 16164  14EC  0086               	movwf	6
 16165  14ED  3001               	movlw	1	; select bank2/3
 16166  14EE  0087               	movwf	7
 16167  14EF  1101               	bcf	1,2
 16168                           
 16169                           ;Dimmer_B1.c: 462: }
 16170                           ;Dimmer_B1.c: 463: } else {
 16171  14F0  0008               	return
 16172  14F1                     l9045:	
 16173                           
 16174                           ;Dimmer_B1.c: 464: DimmerLights->Trigger = 1;
 16175  14F1  086F               	movf	_DimmerLights,w
 16176  14F2  3E0A               	addlw	10
 16177  14F3  0086               	movwf	6
 16178  14F4  3001               	movlw	1	; select bank2/3
 16179  14F5  0087               	movwf	7
 16180  14F6  1481               	bsf	1,1
 16181                           
 16182                           ;Dimmer_B1.c: 465: DimmerLights->Switch = 0;
 16183  14F7  086F               	movf	_DimmerLights,w
 16184  14F8  3E0A               	addlw	10
 16185  14F9  0086               	movwf	6
 16186  14FA  3001               	movlw	1	; select bank2/3
 16187  14FB  0087               	movwf	7
 16188  14FC  1001               	bcf	1,0
 16189                           
 16190                           ;Dimmer_B1.c: 468: if (getDelayOff_GO(sw) == 1) {
 16191  14FD  086A               	movf	setDimmerLights_SwOff@sw,w
 16192  14FE  319B  23EC  3194   	fcall	_getDelayOff_GO
 16193  1501  3A01               	xorlw	1
 16194  1502  1D03               	skipz
 16195  1503  0008               	return
 16196                           
 16197                           ;Dimmer_B1.c: 469: setDelayOff_GO(sw, 0, 0);
 16198  1504  0020               	movlb	0	; select bank0
 16199  1505  01E6               	clrf	setDelayOff_GO@command
 16200  1506  01E7               	clrf	setDelayOff_GO@value
 16201  1507  086A               	movf	setDimmerLights_SwOff@sw,w
 16202  1508  3195  25FC         	fcall	_setDelayOff_GO
 16203  150A  0008               	return
 16204  150B                     __end_of_setDimmerLights_SwOff:	
 16205                           
 16206                           	psect	text100
 16207  15FC                     __ptext100:	
 16208 ;; *************** function _setDelayOff_GO *****************
 16209 ;; Defined at:
 16210 ;;		line 83 in file "../src/DelayOff_B1.c"
 16211 ;; Parameters:    Size  Location     Type
 16212 ;;  sw              1    wreg     unsigned char 
 16213 ;;  command         1   70[BANK0 ] unsigned char 
 16214 ;;  value           1   71[BANK0 ] unsigned char 
 16215 ;; Auto vars:     Size  Location     Type
 16216 ;;  sw              1   73[BANK0 ] unsigned char 
 16217 ;; Return value:  Size  Location     Type
 16218 ;;		None               void
 16219 ;; Registers used:
 16220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16221 ;; Tracked objects:
 16222 ;;		On entry : 0/0
 16223 ;;		On exit  : 0/0
 16224 ;;		Unchanged: 0/0
 16225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16226 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16227 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16228 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16229 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16230 ;;Total ram usage:        4 bytes
 16231 ;; Hardware stack levels used:    1
 16232 ;; Hardware stack levels required when called:    7
 16233 ;; This function calls:
 16234 ;;		_DelayOffPointSelect
 16235 ;;		_DelayTimejudge
 16236 ;;		_setProductData
 16237 ;; This function is called by:
 16238 ;;		_setDimmerLights_SwOff
 16239 ;;		_setRFSW_Control
 16240 ;; This function uses a non-reentrant model
 16241 ;;
 16242                           
 16243                           
 16244                           ;psect for function _setDelayOff_GO
 16245  15FC                     _setDelayOff_GO:	
 16246                           
 16247                           ;incstack = 0
 16248                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16249                           ;setDelayOff_GO@sw stored from wreg
 16250  15FC  0020               	movlb	0	; select bank0
 16251  15FD  00E9               	movwf	setDelayOff_GO@sw
 16252                           
 16253                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 16254  15FE  0869               	movf	setDelayOff_GO@sw,w
 16255  15FF  319C  24FC  3195   	fcall	_DelayOffPointSelect
 16256                           
 16257                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 16258  1602  0020               	movlb	0	; select bank0
 16259  1603  0866               	movf	setDelayOff_GO@command,w
 16260  1604  3A01               	xorlw	1
 16261  1605  3000               	movlw	0
 16262  1606  1903               	skipnz
 16263  1607  3001               	movlw	1
 16264  1608  00E8               	movwf	??_setDelayOff_GO
 16265  1609  0875               	movf	_DelayOff,w
 16266  160A  0086               	movwf	6
 16267  160B  3001               	movlw	1	; select bank2/3
 16268  160C  0087               	movwf	7
 16269  160D  0DE8               	rlf	??_setDelayOff_GO,f
 16270  160E  0801               	movf	1,w
 16271  160F  0668               	xorwf	??_setDelayOff_GO,w
 16272  1610  39FD               	andlw	-3
 16273  1611  0668               	xorwf	??_setDelayOff_GO,w
 16274  1612  0081               	movwf	1
 16275                           
 16276                           ;DelayOff_B1.c: 89: if (command == 1) {
 16277  1613  0866               	movf	setDelayOff_GO@command,w
 16278  1614  3A01               	xorlw	1
 16279  1615  1D03               	skipz
 16280  1616  2E3A               	goto	l8977
 16281                           
 16282                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 16283  1617  0867               	movf	setDelayOff_GO@value,w
 16284  1618  3190  20B3  3195   	fcall	_DelayTimejudge
 16285  161B  0020               	movlb	0	; select bank0
 16286  161C  00E8               	movwf	??_setDelayOff_GO
 16287  161D  0A75               	incf	_DelayOff,w
 16288  161E  0086               	movwf	6
 16289  161F  3001               	movlw	1	; select bank2/3
 16290  1620  0087               	movwf	7
 16291  1621  0868               	movf	??_setDelayOff_GO,w
 16292  1622  0081               	movwf	1
 16293                           
 16294                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16295  1623  300F               	movlw	15
 16296  1624  0567               	andwf	setDelayOff_GO@value,w
 16297  1625  00E8               	movwf	??_setDelayOff_GO
 16298  1626  0868               	movf	??_setDelayOff_GO,w
 16299  1627  3A05               	xorlw	5
 16300  1628  1903               	skipnz
 16301  1629  2E2E               	goto	l8971
 16302  162A  0867               	movf	setDelayOff_GO@value,w
 16303  162B  390F               	andlw	15
 16304  162C  1D03               	btfss	3,2
 16305  162D  2E34               	goto	l8975
 16306  162E                     l8971:	
 16307  162E  3026               	movlw	38
 16308  162F  0267               	subwf	setDelayOff_GO@value,w
 16309  1630  1803               	skipnc
 16310  1631  2E34               	goto	l8975
 16311                           
 16312                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 16313  1632  0867               	movf	setDelayOff_GO@value,w
 16314  1633  2E36               	goto	L9
 16315  1634                     l8975:	
 16316                           ;DelayOff_B1.c: 93: } else {
 16317                           
 16318                           
 16319                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 16320  1634  3005               	movlw	5
 16321  1635  0020               	movlb	0	; select bank0
 16322  1636                     L9:	
 16323  1636  00E8               	movwf	??_setDelayOff_GO
 16324  1637  0868               	movf	??_setDelayOff_GO,w
 16325  1638  00E2               	movwf	setProductData@value
 16326  1639  2E3C               	goto	L8
 16327  163A                     l8977:	
 16328                           ;DelayOff_B1.c: 95: }
 16329                           ;DelayOff_B1.c: 96: } else {
 16330                           
 16331                           
 16332                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 16333  163A  0020               	movlb	0	; select bank0
 16334  163B  01E2               	clrf	setProductData@value
 16335  163C                     L8:	
 16336  163C  0869               	movf	setDelayOff_GO@sw,w
 16337  163D  3E1A               	addlw	26
 16338  163E  319B  23CF         	fcall	_setProductData
 16339                           
 16340                           ;DelayOff_B1.c: 98: }
 16341                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16342  1640  0875               	movf	_DelayOff,w
 16343  1641  3E02               	addlw	2
 16344  1642  0086               	movwf	6
 16345  1643  3001               	movlw	1	; select bank2/3
 16346  1644  0087               	movwf	7
 16347  1645  3000               	movlw	0
 16348  1646  3FC0               	movwi [0]fsr1
 16349  1647  3FC1               	movwi [1]fsr1
 16350                           
 16351                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16352  1648  0875               	movf	_DelayOff,w
 16353  1649  3E04               	addlw	4
 16354  164A  0086               	movwf	6
 16355  164B  3001               	movlw	1	; select bank2/3
 16356  164C  0087               	movwf	7
 16357  164D  0181               	clrf	1
 16358  164E  0008               	return
 16359  164F                     __end_of_setDelayOff_GO:	
 16360                           
 16361                           	psect	text101
 16362  1BCF                     __ptext101:	
 16363 ;; *************** function _setProductData *****************
 16364 ;; Defined at:
 16365 ;;		line 605 in file "../src/Main_B1.c"
 16366 ;; Parameters:    Size  Location     Type
 16367 ;;  address         1    wreg     unsigned char 
 16368 ;;  value           1   66[BANK0 ] unsigned char 
 16369 ;; Auto vars:     Size  Location     Type
 16370 ;;  address         1   69[BANK0 ] unsigned char 
 16371 ;; Return value:  Size  Location     Type
 16372 ;;		None               void
 16373 ;; Registers used:
 16374 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16375 ;; Tracked objects:
 16376 ;;		On entry : 0/0
 16377 ;;		On exit  : 0/0
 16378 ;;		Unchanged: 0/0
 16379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16380 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16382 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16383 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16384 ;;Total ram usage:        4 bytes
 16385 ;; Hardware stack levels used:    1
 16386 ;; Hardware stack levels required when called:    5
 16387 ;; This function calls:
 16388 ;;		Nothing
 16389 ;; This function is called by:
 16390 ;;		_setDelayOff_GO
 16391 ;;		_setDimmerLights
 16392 ;;		_setDimmerLights_Adj
 16393 ;;		_setTemp_Main
 16394 ;;		_setLog_Code
 16395 ;;		_setControl_Lights_Table
 16396 ;;		_setRFSW_AdjControl
 16397 ;;		_setRF_DimmerValue
 16398 ;;		_setRF_DimmerLights
 16399 ;; This function uses a non-reentrant model
 16400 ;;
 16401                           
 16402                           
 16403                           ;psect for function _setProductData
 16404  1BCF                     _setProductData:	
 16405                           
 16406                           ;incstack = 0
 16407                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 16408                           ;setProductData@address stored from wreg
 16409  1BCF  0020               	movlb	0	; select bank0
 16410  1BD0  00E5               	movwf	setProductData@address
 16411                           
 16412                           ;Main_B1.c: 606: product->Data[address] = value;
 16413  1BD1  0862               	movf	setProductData@value,w
 16414  1BD2  00E3               	movwf	??_setProductData
 16415  1BD3  0865               	movf	setProductData@address,w
 16416  1BD4  0779               	addwf	_product,w
 16417  1BD5  00E4               	movwf	??_setProductData+1
 16418  1BD6  0864               	movf	??_setProductData+1,w
 16419  1BD7  0086               	movwf	6
 16420  1BD8  3002               	movlw	2	; select bank4/5
 16421  1BD9  0087               	movwf	7
 16422  1BDA  0863               	movf	??_setProductData,w
 16423  1BDB  0081               	movwf	1
 16424  1BDC  0008               	return
 16425  1BDD                     __end_of_setProductData:	
 16426                           
 16427                           	psect	text102
 16428  10B3                     __ptext102:	
 16429 ;; *************** function _DelayTimejudge *****************
 16430 ;; Defined at:
 16431 ;;		line 112 in file "../src/DelayOff_B1.c"
 16432 ;; Parameters:    Size  Location     Type
 16433 ;;  value           1    wreg     unsigned char 
 16434 ;; Auto vars:     Size  Location     Type
 16435 ;;  value           1    9[BANK0 ] unsigned char 
 16436 ;;  k               1    8[BANK0 ] unsigned char 
 16437 ;;  j               1    7[BANK0 ] unsigned char 
 16438 ;;  i               1    6[BANK0 ] unsigned char 
 16439 ;; Return value:  Size  Location     Type
 16440 ;;                  1    wreg      unsigned char 
 16441 ;; Registers used:
 16442 ;;		wreg, status,2, status,0, pclath, cstack
 16443 ;; Tracked objects:
 16444 ;;		On entry : 0/0
 16445 ;;		On exit  : 0/0
 16446 ;;		Unchanged: 0/0
 16447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16449 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16450 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16451 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16452 ;;Total ram usage:        6 bytes
 16453 ;; Hardware stack levels used:    1
 16454 ;; Hardware stack levels required when called:    6
 16455 ;; This function calls:
 16456 ;;		___bmul
 16457 ;; This function is called by:
 16458 ;;		_setDelayOff_GO
 16459 ;; This function uses a non-reentrant model
 16460 ;;
 16461                           
 16462                           
 16463                           ;psect for function _DelayTimejudge
 16464  10B3                     _DelayTimejudge:	
 16465                           
 16466                           ;incstack = 0
 16467                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16468                           ;DelayTimejudge@value stored from wreg
 16469  10B3  0020               	movlb	0	; select bank0
 16470  10B4  00A9               	movwf	DelayTimejudge@value
 16471                           
 16472                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16473  10B5  3005               	movlw	5
 16474  10B6  00A4               	movwf	??_DelayTimejudge
 16475  10B7  0824               	movf	??_DelayTimejudge,w
 16476  10B8  00A6               	movwf	DelayTimejudge@i
 16477  10B9  01A7               	clrf	DelayTimejudge@j
 16478  10BA  01A8               	clrf	DelayTimejudge@k
 16479                           
 16480                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16481  10BB  3031               	movlw	49
 16482  10BC  0229               	subwf	DelayTimejudge@value,w
 16483  10BD  1803               	skipnc
 16484  10BE  28DB               	goto	l8867
 16485                           
 16486                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16487  10BF  0829               	movf	DelayTimejudge@value,w
 16488  10C0  390F               	andlw	15
 16489  10C1  00A4               	movwf	??_DelayTimejudge
 16490  10C2  0824               	movf	??_DelayTimejudge,w
 16491  10C3  00A7               	movwf	DelayTimejudge@j
 16492                           
 16493                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16494  10C4  0829               	movf	DelayTimejudge@value,w
 16495  10C5  00A4               	movwf	??_DelayTimejudge
 16496  10C6  3004               	movlw	4
 16497  10C7                     u9625:	
 16498  10C7  36A4               	lsrf	??_DelayTimejudge,f
 16499  10C8  0B89               	decfsz	9,f
 16500  10C9  28C7               	goto	u9625
 16501  10CA  0824               	movf	??_DelayTimejudge,w
 16502  10CB  390F               	andlw	15
 16503  10CC  00A5               	movwf	??_DelayTimejudge+1
 16504  10CD  0825               	movf	??_DelayTimejudge+1,w
 16505  10CE  00A8               	movwf	DelayTimejudge@k
 16506                           
 16507                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16508  10CF  300A               	movlw	10
 16509  10D0  00A4               	movwf	??_DelayTimejudge
 16510  10D1  0824               	movf	??_DelayTimejudge,w
 16511  10D2  00A0               	movwf	___bmul@multiplicand
 16512  10D3  0828               	movf	DelayTimejudge@k,w
 16513  10D4  319C  2441         	fcall	___bmul
 16514  10D6  0020               	movlb	0	; select bank0
 16515  10D7  0727               	addwf	DelayTimejudge@j,w
 16516  10D8  00A5               	movwf	??_DelayTimejudge+1
 16517  10D9  0825               	movf	??_DelayTimejudge+1,w
 16518  10DA  00A6               	movwf	DelayTimejudge@i
 16519  10DB                     l8867:	
 16520                           
 16521                           ;DelayOff_B1.c: 118: }
 16522                           ;DelayOff_B1.c: 139: return i;
 16523  10DB  0826               	movf	DelayTimejudge@i,w
 16524  10DC  0008               	return
 16525  10DD                     __end_of_DelayTimejudge:	
 16526                           
 16527                           	psect	text103
 16528  1C41                     __ptext103:	
 16529 ;; *************** function ___bmul *****************
 16530 ;; Defined at:
 16531 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16532 ;; Parameters:    Size  Location     Type
 16533 ;;  multiplier      1    wreg     unsigned char 
 16534 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16535 ;; Auto vars:     Size  Location     Type
 16536 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16537 ;;  product         1    2[BANK0 ] unsigned char 
 16538 ;; Return value:  Size  Location     Type
 16539 ;;                  1    wreg      unsigned char 
 16540 ;; Registers used:
 16541 ;;		wreg, status,2, status,0
 16542 ;; Tracked objects:
 16543 ;;		On entry : 0/0
 16544 ;;		On exit  : 0/0
 16545 ;;		Unchanged: 0/0
 16546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16547 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16548 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16549 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16550 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16551 ;;Total ram usage:        4 bytes
 16552 ;; Hardware stack levels used:    1
 16553 ;; Hardware stack levels required when called:    5
 16554 ;; This function calls:
 16555 ;;		Nothing
 16556 ;; This function is called by:
 16557 ;;		_DelayTimejudge
 16558 ;; This function uses a non-reentrant model
 16559 ;;
 16560                           
 16561                           
 16562                           ;psect for function ___bmul
 16563  1C41                     ___bmul:	
 16564                           
 16565                           ;incstack = 0
 16566                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16567                           ;___bmul@multiplier stored from wreg
 16568  1C41  0020               	movlb	0	; select bank0
 16569  1C42  00A3               	movwf	___bmul@multiplier
 16570  1C43  01A2               	clrf	___bmul@product
 16571  1C44                     l8605:	
 16572  1C44  1C23               	btfss	___bmul@multiplier,0
 16573  1C45  2C4A               	goto	l8609
 16574  1C46  0820               	movf	___bmul@multiplicand,w
 16575  1C47  00A1               	movwf	??___bmul
 16576  1C48  0821               	movf	??___bmul,w
 16577  1C49  07A2               	addwf	___bmul@product,f
 16578  1C4A                     l8609:	
 16579  1C4A  1003               	clrc
 16580  1C4B  0DA0               	rlf	___bmul@multiplicand,f
 16581  1C4C  1003               	clrc
 16582  1C4D  0CA3               	rrf	___bmul@multiplier,f
 16583  1C4E  08A3               	movf	___bmul@multiplier,f
 16584  1C4F  1D03               	skipz
 16585  1C50  2C44               	goto	l8605
 16586  1C51  0822               	movf	___bmul@product,w
 16587  1C52  0008               	return
 16588  1C53                     __end_of___bmul:	
 16589                           
 16590                           	psect	text104
 16591  1BEC                     __ptext104:	
 16592 ;; *************** function _getDelayOff_GO *****************
 16593 ;; Defined at:
 16594 ;;		line 105 in file "../src/DelayOff_B1.c"
 16595 ;; Parameters:    Size  Location     Type
 16596 ;;  sw              1    wreg     unsigned char 
 16597 ;; Auto vars:     Size  Location     Type
 16598 ;;  sw              1    2[BANK0 ] unsigned char 
 16599 ;;  go              1    3[BANK0 ] unsigned char 
 16600 ;; Return value:  Size  Location     Type
 16601 ;;                  1    wreg      unsigned char 
 16602 ;; Registers used:
 16603 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16604 ;; Tracked objects:
 16605 ;;		On entry : 0/0
 16606 ;;		On exit  : 0/0
 16607 ;;		Unchanged: 0/0
 16608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16612 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16613 ;;Total ram usage:        2 bytes
 16614 ;; Hardware stack levels used:    1
 16615 ;; Hardware stack levels required when called:    6
 16616 ;; This function calls:
 16617 ;;		_DelayOffPointSelect
 16618 ;; This function is called by:
 16619 ;;		_setDimmerLights_SwOff
 16620 ;;		_setRFSW_Control
 16621 ;; This function uses a non-reentrant model
 16622 ;;
 16623                           
 16624                           
 16625                           ;psect for function _getDelayOff_GO
 16626  1BEC                     _getDelayOff_GO:	
 16627                           
 16628                           ;incstack = 0
 16629                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16630                           ;getDelayOff_GO@sw stored from wreg
 16631  1BEC  0020               	movlb	0	; select bank0
 16632  1BED  00A2               	movwf	getDelayOff_GO@sw
 16633                           
 16634                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16635  1BEE  0822               	movf	getDelayOff_GO@sw,w
 16636  1BEF  319C  24FC         	fcall	_DelayOffPointSelect
 16637                           
 16638                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16639  1BF1  0875               	movf	_DelayOff,w
 16640  1BF2  0086               	movwf	6
 16641  1BF3  3001               	movlw	1	; select bank2/3
 16642  1BF4  0087               	movwf	7
 16643  1BF5  3000               	movlw	0
 16644  1BF6  1881               	btfsc	1,1
 16645  1BF7  3001               	movlw	1
 16646  1BF8  0020               	movlb	0	; select bank0
 16647  1BF9  00A3               	movwf	getDelayOff_GO@go
 16648                           
 16649                           ;DelayOff_B1.c: 108: return go;
 16650  1BFA  0823               	movf	getDelayOff_GO@go,w
 16651  1BFB  0008               	return
 16652  1BFC                     __end_of_getDelayOff_GO:	
 16653                           
 16654                           	psect	text105
 16655  1BFC                     __ptext105:	
 16656 ;; *************** function _getDimmerLights_Status *****************
 16657 ;; Defined at:
 16658 ;;		line 757 in file "../src/Dimmer_B1.c"
 16659 ;; Parameters:    Size  Location     Type
 16660 ;;  lights          1    wreg     unsigned char 
 16661 ;; Auto vars:     Size  Location     Type
 16662 ;;  lights          1    2[BANK0 ] unsigned char 
 16663 ;;  status          1    3[BANK0 ] unsigned char 
 16664 ;; Return value:  Size  Location     Type
 16665 ;;                  1    wreg      unsigned char 
 16666 ;; Registers used:
 16667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16668 ;; Tracked objects:
 16669 ;;		On entry : 0/0
 16670 ;;		On exit  : 0/0
 16671 ;;		Unchanged: 0/0
 16672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16674 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16676 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16677 ;;Total ram usage:        2 bytes
 16678 ;; Hardware stack levels used:    1
 16679 ;; Hardware stack levels required when called:    6
 16680 ;; This function calls:
 16681 ;;		_DimmerLightsPointSelect
 16682 ;; This function is called by:
 16683 ;;		_setDimmerLights_ErrorClose
 16684 ;;		_Exception_Main
 16685 ;;		_setRFSW_Control
 16686 ;;		_setRFSW_AdjControl
 16687 ;; This function uses a non-reentrant model
 16688 ;;
 16689                           
 16690                           
 16691                           ;psect for function _getDimmerLights_Status
 16692  1BFC                     _getDimmerLights_Status:	
 16693                           
 16694                           ;incstack = 0
 16695                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16696                           ;getDimmerLights_Status@lights stored from wreg
 16697  1BFC  0020               	movlb	0	; select bank0
 16698  1BFD  00A2               	movwf	getDimmerLights_Status@lights
 16699                           
 16700                           ;Dimmer_B1.c: 758: DimmerLightsPointSelect(lights);
 16701  1BFE  0822               	movf	getDimmerLights_Status@lights,w
 16702  1BFF  319C  2489         	fcall	_DimmerLightsPointSelect
 16703                           
 16704                           ;Dimmer_B1.c: 759: char status = DimmerLights->Status == 1 ? 1 : 0;
 16705  1C01  0020               	movlb	0	; select bank0
 16706  1C02  086F               	movf	_DimmerLights,w
 16707  1C03  3E02               	addlw	2
 16708  1C04  0086               	movwf	6
 16709  1C05  3001               	movlw	1	; select bank2/3
 16710  1C06  0087               	movwf	7
 16711  1C07  3000               	movlw	0
 16712  1C08  1881               	btfsc	1,1
 16713  1C09  3001               	movlw	1
 16714  1C0A  00A3               	movwf	getDimmerLights_Status@status
 16715                           
 16716                           ;Dimmer_B1.c: 760: return status;
 16717  1C0B  0823               	movf	getDimmerLights_Status@status,w
 16718  1C0C  0008               	return
 16719  1C0D                     __end_of_getDimmerLights_Status:	
 16720                           
 16721                           	psect	text106
 16722  1C89                     __ptext106:	
 16723 ;; *************** function _DimmerLightsPointSelect *****************
 16724 ;; Defined at:
 16725 ;;		line 321 in file "../src/Dimmer_B1.c"
 16726 ;; Parameters:    Size  Location     Type
 16727 ;;  lights          1    wreg     unsigned char 
 16728 ;; Auto vars:     Size  Location     Type
 16729 ;;  lights          1    1[BANK0 ] unsigned char 
 16730 ;; Return value:  Size  Location     Type
 16731 ;;		None               void
 16732 ;; Registers used:
 16733 ;;		wreg
 16734 ;; Tracked objects:
 16735 ;;		On entry : 0/0
 16736 ;;		On exit  : 0/0
 16737 ;;		Unchanged: 0/0
 16738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16740 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;Total ram usage:        2 bytes
 16744 ;; Hardware stack levels used:    1
 16745 ;; Hardware stack levels required when called:    5
 16746 ;; This function calls:
 16747 ;;		Nothing
 16748 ;; This function is called by:
 16749 ;;		_setDimmerLights_Initialization
 16750 ;;		_setDimmerLights_SwOn
 16751 ;;		_setDimmerLights_SwOff
 16752 ;;		_setDimmerLights_AdjOn
 16753 ;;		_setDimmerLights_Main
 16754 ;;		_getDimmerLights_Status
 16755 ;;		_getAll_DimmerLights_AdjSw
 16756 ;;		_setDimmerLights_ErrorClose
 16757 ;;		_setDimmerLights_AdjRF
 16758 ;;		_setDimmerLights_Status
 16759 ;;		_setDimmerLights_GO
 16760 ;;		_setDimmerLights_MaxmumValue
 16761 ;;		_setDimmerLights_Trigger
 16762 ;;		_setDimmerLights_TriggerAdj
 16763 ;; This function uses a non-reentrant model
 16764 ;;
 16765                           
 16766                           
 16767                           ;psect for function _DimmerLightsPointSelect
 16768  1C89                     _DimmerLightsPointSelect:	
 16769                           
 16770                           ;incstack = 0
 16771                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16772                           ;DimmerLightsPointSelect@lights stored from wreg
 16773  1C89  0020               	movlb	0	; select bank0
 16774  1C8A  00A1               	movwf	DimmerLightsPointSelect@lights
 16775                           
 16776                           ;Dimmer_B1.c: 323: if (lights == 1) {
 16777  1C8B  0821               	movf	DimmerLightsPointSelect@lights,w
 16778  1C8C  3A01               	xorlw	1
 16779  1C8D  1D03               	skipz
 16780  1C8E  2C93               	goto	l768
 16781                           
 16782                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 16783  1C8F  3055               	movlw	_DimmerLights1& (0+255)
 16784  1C90  00A0               	movwf	??_DimmerLightsPointSelect
 16785  1C91  0820               	movf	??_DimmerLightsPointSelect,w
 16786  1C92  00EF               	movwf	_DimmerLights
 16787  1C93                     l768:	
 16788                           
 16789                           ;Dimmer_B1.c: 325: }
 16790                           ;Dimmer_B1.c: 328: if (lights == 2) {
 16791  1C93  0821               	movf	DimmerLightsPointSelect@lights,w
 16792  1C94  3A02               	xorlw	2
 16793  1C95  1D03               	skipz
 16794  1C96  0008               	return
 16795                           
 16796                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights2;
 16797  1C97  30BE               	movlw	_DimmerLights2& (0+255)
 16798  1C98  00A0               	movwf	??_DimmerLightsPointSelect
 16799  1C99  0820               	movf	??_DimmerLightsPointSelect,w
 16800  1C9A  00EF               	movwf	_DimmerLights
 16801  1C9B  0008               	return
 16802  1C9C                     __end_of_DimmerLightsPointSelect:	
 16803                           
 16804                           	psect	text107
 16805  174E                     __ptext107:	
 16806 ;; *************** function _setBuz *****************
 16807 ;; Defined at:
 16808 ;;		line 22 in file "../src/Buzzer_B1.c"
 16809 ;; Parameters:    Size  Location     Type
 16810 ;;  count           1    wreg     unsigned char 
 16811 ;;  time            2    9[BANK0 ] int 
 16812 ;; Auto vars:     Size  Location     Type
 16813 ;;  count           1   12[BANK0 ] unsigned char 
 16814 ;; Return value:  Size  Location     Type
 16815 ;;		None               void
 16816 ;; Registers used:
 16817 ;;		wreg, status,2, status,0, pclath, cstack
 16818 ;; Tracked objects:
 16819 ;;		On entry : 0/0
 16820 ;;		On exit  : 0/0
 16821 ;;		Unchanged: 0/0
 16822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16823 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16824 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16825 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16826 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16827 ;;Total ram usage:        4 bytes
 16828 ;; Hardware stack levels used:    1
 16829 ;; Hardware stack levels required when called:    6
 16830 ;; This function calls:
 16831 ;;		___awdiv
 16832 ;; This function is called by:
 16833 ;;		_DlyOff_Main
 16834 ;;		_setDimmerLights_SwOn
 16835 ;;		_setDimmerLights_Adj
 16836 ;;		_my_MainTimer
 16837 ;;		_Exception_Main
 16838 ;;		_setTemp_Main
 16839 ;;		_setLog_Code
 16840 ;;		_setControl_Lights_Table
 16841 ;;		_setRFSW_Control
 16842 ;;		_setSw_Main
 16843 ;; This function uses a non-reentrant model
 16844 ;;
 16845                           
 16846                           
 16847                           ;psect for function _setBuz
 16848  174E                     _setBuz:	
 16849                           
 16850                           ;incstack = 0
 16851                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16852                           ;setBuz@count stored from wreg
 16853  174E  0020               	movlb	0	; select bank0
 16854  174F  00AC               	movwf	setBuz@count
 16855                           
 16856                           ;Buzzer_B1.c: 23: time /= 10;
 16857  1750  300A               	movlw	10
 16858  1751  00A0               	movwf	___awdiv@divisor
 16859  1752  3000               	movlw	0
 16860  1753  00A1               	movwf	___awdiv@divisor+1
 16861  1754  082A               	movf	setBuz@time+1,w
 16862  1755  01A3               	clrf	___awdiv@dividend+1
 16863  1756  07A3               	addwf	___awdiv@dividend+1,f
 16864  1757  0829               	movf	setBuz@time,w
 16865  1758  01A2               	clrf	___awdiv@dividend
 16866  1759  07A2               	addwf	___awdiv@dividend,f
 16867  175A  3196  26A2  3197   	fcall	___awdiv
 16868  175D  0020               	movlb	0	; select bank0
 16869  175E  0821               	movf	?___awdiv+1,w
 16870  175F  01AA               	clrf	setBuz@time+1
 16871  1760  07AA               	addwf	setBuz@time+1,f
 16872  1761  0820               	movf	?___awdiv,w
 16873  1762  01A9               	clrf	setBuz@time
 16874  1763  07A9               	addwf	setBuz@time,f
 16875                           
 16876                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16877  1764  0021               	movlb	1	; select bank1
 16878  1765  1C2E               	btfss	_Buz1^(0+128),0
 16879  1766  0008               	return
 16880                           
 16881                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16882  1767  18AE               	btfsc	_Buz1^(0+128),1
 16883  1768  2F7F               	goto	l96
 16884                           
 16885                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16886  1769  14AE               	bsf	_Buz1^(0+128),1
 16887                           
 16888                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16889  176A  01AF               	clrf	(_Buz1^(0+128)+1)
 16890  176B  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16891                           
 16892                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16893  176C  0020               	movlb	0	; select bank0
 16894  176D  082C               	movf	setBuz@count,w
 16895  176E  00AB               	movwf	??_setBuz
 16896  176F  082B               	movf	??_setBuz,w
 16897  1770  0021               	movlb	1	; select bank1
 16898  1771  00B1               	movwf	(_Buz1^(0+128)+3)
 16899                           
 16900                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16901  1772  0020               	movlb	0	; select bank0
 16902  1773  082A               	movf	setBuz@time+1,w
 16903  1774  0021               	movlb	1	; select bank1
 16904  1775  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16905  1776  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16906  1777  0020               	movlb	0	; select bank0
 16907  1778  0829               	movf	setBuz@time,w
 16908  1779  0021               	movlb	1	; select bank1
 16909  177A  01B4               	clrf	(_Buz1^(0+128)+6)
 16910  177B  07B4               	addwf	(_Buz1^(0+128)+6),f
 16911                           
 16912                           ;Buzzer_B1.c: 30: RB3 = 1;
 16913  177C  0020               	movlb	0	; select bank0
 16914  177D  158D               	bsf	13,3	;volatile
 16915                           
 16916                           ;Buzzer_B1.c: 31: } else {
 16917  177E  0008               	return
 16918  177F                     l96:	
 16919                           
 16920                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16921  177F  19AE               	btfsc	_Buz1^(0+128),3
 16922  1780  2F93               	goto	l98
 16923                           
 16924                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16925  1781  15AE               	bsf	_Buz1^(0+128),3
 16926                           
 16927                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16928  1782  0020               	movlb	0	; select bank0
 16929  1783  082C               	movf	setBuz@count,w
 16930  1784  00AB               	movwf	??_setBuz
 16931  1785  082B               	movf	??_setBuz,w
 16932  1786  0021               	movlb	1	; select bank1
 16933  1787  00B2               	movwf	(_Buz1^(0+128)+4)
 16934                           
 16935                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16936  1788  0020               	movlb	0	; select bank0
 16937  1789  082A               	movf	setBuz@time+1,w
 16938  178A  0021               	movlb	1	; select bank1
 16939  178B  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16940  178C  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16941  178D  0020               	movlb	0	; select bank0
 16942  178E  0829               	movf	setBuz@time,w
 16943  178F  0021               	movlb	1	; select bank1
 16944  1790  01B6               	clrf	(_Buz1^(0+128)+8)
 16945  1791  07B6               	addwf	(_Buz1^(0+128)+8),f
 16946                           
 16947                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16948  1792  0008               	return
 16949  1793                     l98:	
 16950  1793  1A2E               	btfsc	_Buz1^(0+128),4
 16951  1794  0008               	return
 16952                           
 16953                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16954  1795  162E               	bsf	_Buz1^(0+128),4
 16955                           
 16956                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16957  1796  0020               	movlb	0	; select bank0
 16958  1797  082C               	movf	setBuz@count,w
 16959  1798  00AB               	movwf	??_setBuz
 16960  1799  082B               	movf	??_setBuz,w
 16961  179A  0021               	movlb	1	; select bank1
 16962  179B  00B3               	movwf	(_Buz1^(0+128)+5)
 16963                           
 16964                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16965  179C  0020               	movlb	0	; select bank0
 16966  179D  082A               	movf	setBuz@time+1,w
 16967  179E  0021               	movlb	1	; select bank1
 16968  179F  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16969  17A0  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16970  17A1  0020               	movlb	0	; select bank0
 16971  17A2  0829               	movf	setBuz@time,w
 16972  17A3  0021               	movlb	1	; select bank1
 16973  17A4  01B8               	clrf	(_Buz1^(0+128)+10)
 16974  17A5  07B8               	addwf	(_Buz1^(0+128)+10),f
 16975  17A6  0008               	return
 16976  17A7                     __end_of_setBuz:	
 16977                           
 16978                           	psect	text108
 16979  16A2                     __ptext108:	
 16980 ;; *************** function ___awdiv *****************
 16981 ;; Defined at:
 16982 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16983 ;; Parameters:    Size  Location     Type
 16984 ;;  divisor         2    0[BANK0 ] int 
 16985 ;;  dividend        2    2[BANK0 ] int 
 16986 ;; Auto vars:     Size  Location     Type
 16987 ;;  quotient        2    7[BANK0 ] int 
 16988 ;;  sign            1    6[BANK0 ] unsigned char 
 16989 ;;  counter         1    5[BANK0 ] unsigned char 
 16990 ;; Return value:  Size  Location     Type
 16991 ;;                  2    0[BANK0 ] int 
 16992 ;; Registers used:
 16993 ;;		wreg, status,2, status,0
 16994 ;; Tracked objects:
 16995 ;;		On entry : 0/0
 16996 ;;		On exit  : 0/0
 16997 ;;		Unchanged: 0/0
 16998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16999 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17000 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17001 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17002 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17003 ;;Total ram usage:        9 bytes
 17004 ;; Hardware stack levels used:    1
 17005 ;; Hardware stack levels required when called:    5
 17006 ;; This function calls:
 17007 ;;		Nothing
 17008 ;; This function is called by:
 17009 ;;		_setBuz
 17010 ;; This function uses a non-reentrant model
 17011 ;;
 17012                           
 17013                           
 17014                           ;psect for function ___awdiv
 17015  16A2                     ___awdiv:	
 17016                           
 17017                           ;incstack = 0
 17018                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17019  16A2  0020               	movlb	0	; select bank0
 17020  16A3  01A6               	clrf	___awdiv@sign
 17021  16A4  1FA1               	btfss	___awdiv@divisor+1,7
 17022  16A5  2EAD               	goto	l8895
 17023  16A6  09A0               	comf	___awdiv@divisor,f
 17024  16A7  09A1               	comf	___awdiv@divisor+1,f
 17025  16A8  0AA0               	incf	___awdiv@divisor,f
 17026  16A9  1903               	skipnz
 17027  16AA  0AA1               	incf	___awdiv@divisor+1,f
 17028  16AB  01A6               	clrf	___awdiv@sign
 17029  16AC  0AA6               	incf	___awdiv@sign,f
 17030  16AD                     l8895:	
 17031  16AD  1FA3               	btfss	___awdiv@dividend+1,7
 17032  16AE  2EB8               	goto	l8901
 17033  16AF  09A2               	comf	___awdiv@dividend,f
 17034  16B0  09A3               	comf	___awdiv@dividend+1,f
 17035  16B1  0AA2               	incf	___awdiv@dividend,f
 17036  16B2  1903               	skipnz
 17037  16B3  0AA3               	incf	___awdiv@dividend+1,f
 17038  16B4  3001               	movlw	1
 17039  16B5  00A4               	movwf	??___awdiv
 17040  16B6  0824               	movf	??___awdiv,w
 17041  16B7  06A6               	xorwf	___awdiv@sign,f
 17042  16B8                     l8901:	
 17043  16B8  01A7               	clrf	___awdiv@quotient
 17044  16B9  01A8               	clrf	___awdiv@quotient+1
 17045  16BA  0821               	movf	___awdiv@divisor+1,w
 17046  16BB  0420               	iorwf	___awdiv@divisor,w
 17047  16BC  1903               	skipnz
 17048  16BD  2EE7               	goto	l8923
 17049  16BE  01A5               	clrf	___awdiv@counter
 17050  16BF  0AA5               	incf	___awdiv@counter,f
 17051  16C0                     l8911:	
 17052  16C0  1BA1               	btfsc	___awdiv@divisor+1,7
 17053  16C1  2ECC               	goto	l8913
 17054  16C2  3001               	movlw	1
 17055  16C3                     u9685:	
 17056  16C3  35A0               	lslf	___awdiv@divisor,f
 17057  16C4  0DA1               	rlf	___awdiv@divisor+1,f
 17058  16C5  0B89               	decfsz	9,f
 17059  16C6  2EC3               	goto	u9685
 17060  16C7  3001               	movlw	1
 17061  16C8  00A4               	movwf	??___awdiv
 17062  16C9  0824               	movf	??___awdiv,w
 17063  16CA  07A5               	addwf	___awdiv@counter,f
 17064  16CB  2EC0               	goto	l8911
 17065  16CC                     l8913:	
 17066  16CC  3001               	movlw	1
 17067  16CD                     u9705:	
 17068  16CD  35A7               	lslf	___awdiv@quotient,f
 17069  16CE  0DA8               	rlf	___awdiv@quotient+1,f
 17070  16CF  0B89               	decfsz	9,f
 17071  16D0  2ECD               	goto	u9705
 17072  16D1  0821               	movf	___awdiv@divisor+1,w
 17073  16D2  0223               	subwf	___awdiv@dividend+1,w
 17074  16D3  1D03               	skipz
 17075  16D4  2ED7               	goto	u9715
 17076  16D5  0820               	movf	___awdiv@divisor,w
 17077  16D6  0222               	subwf	___awdiv@dividend,w
 17078  16D7                     u9715:	
 17079  16D7  1C03               	skipc
 17080  16D8  2EDE               	goto	l8919
 17081  16D9  0820               	movf	___awdiv@divisor,w
 17082  16DA  02A2               	subwf	___awdiv@dividend,f
 17083  16DB  0821               	movf	___awdiv@divisor+1,w
 17084  16DC  3BA3               	subwfb	___awdiv@dividend+1,f
 17085  16DD  1427               	bsf	___awdiv@quotient,0
 17086  16DE                     l8919:	
 17087  16DE  3001               	movlw	1
 17088  16DF                     u9725:	
 17089  16DF  36A1               	lsrf	___awdiv@divisor+1,f
 17090  16E0  0CA0               	rrf	___awdiv@divisor,f
 17091  16E1  0B89               	decfsz	9,f
 17092  16E2  2EDF               	goto	u9725
 17093  16E3  3001               	movlw	1
 17094  16E4  02A5               	subwf	___awdiv@counter,f
 17095  16E5  1D03               	btfss	3,2
 17096  16E6  2ECC               	goto	l8913
 17097  16E7                     l8923:	
 17098  16E7  0826               	movf	___awdiv@sign,w
 17099  16E8  1903               	btfsc	3,2
 17100  16E9  2EEF               	goto	l8927
 17101  16EA  09A7               	comf	___awdiv@quotient,f
 17102  16EB  09A8               	comf	___awdiv@quotient+1,f
 17103  16EC  0AA7               	incf	___awdiv@quotient,f
 17104  16ED  1903               	skipnz
 17105  16EE  0AA8               	incf	___awdiv@quotient+1,f
 17106  16EF                     l8927:	
 17107  16EF  0828               	movf	___awdiv@quotient+1,w
 17108  16F0  01A1               	clrf	?___awdiv+1
 17109  16F1  07A1               	addwf	?___awdiv+1,f
 17110  16F2  0827               	movf	___awdiv@quotient,w
 17111  16F3  01A0               	clrf	?___awdiv
 17112  16F4  07A0               	addwf	?___awdiv,f
 17113  16F5  0008               	return
 17114  16F6                     __end_of___awdiv:	
 17115                           
 17116                           	psect	text109
 17117  1B0A                     __ptext109:	
 17118 ;; *************** function _DelayOff_Initialization *****************
 17119 ;; Defined at:
 17120 ;;		line 26 in file "../src/DelayOff_B1.c"
 17121 ;; Parameters:    Size  Location     Type
 17122 ;;		None
 17123 ;; Auto vars:     Size  Location     Type
 17124 ;;		None
 17125 ;; Return value:  Size  Location     Type
 17126 ;;		None               void
 17127 ;; Registers used:
 17128 ;;		wreg, status,2, status,0, pclath, cstack
 17129 ;; Tracked objects:
 17130 ;;		On entry : 0/0
 17131 ;;		On exit  : 0/0
 17132 ;;		Unchanged: 0/0
 17133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17138 ;;Total ram usage:        0 bytes
 17139 ;; Hardware stack levels used:    1
 17140 ;; Hardware stack levels required when called:    7
 17141 ;; This function calls:
 17142 ;;		_DlyOff_Initialization
 17143 ;; This function is called by:
 17144 ;;		_main
 17145 ;; This function uses a non-reentrant model
 17146 ;;
 17147                           
 17148                           
 17149                           ;psect for function _DelayOff_Initialization
 17150  1B0A                     _DelayOff_Initialization:	
 17151                           
 17152                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17153                           
 17154                           ;incstack = 0
 17155                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17156  1B0A  3001               	movlw	1
 17157  1B0B  319A  22E9  319B   	fcall	_DlyOff_Initialization
 17158                           
 17159                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17160  1B0E  3002               	movlw	2
 17161  1B0F  319A  22E9         	fcall	_DlyOff_Initialization
 17162  1B11  0008               	return
 17163  1B12                     __end_of_DelayOff_Initialization:	
 17164                           
 17165                           	psect	text110
 17166  1AE9                     __ptext110:	
 17167 ;; *************** function _DlyOff_Initialization *****************
 17168 ;; Defined at:
 17169 ;;		line 56 in file "../src/DelayOff_B1.c"
 17170 ;; Parameters:    Size  Location     Type
 17171 ;;  sw              1    wreg     unsigned char 
 17172 ;; Auto vars:     Size  Location     Type
 17173 ;;  sw              1    2[BANK0 ] unsigned char 
 17174 ;; Return value:  Size  Location     Type
 17175 ;;		None               void
 17176 ;; Registers used:
 17177 ;;		wreg, status,2, status,0, pclath, cstack
 17178 ;; Tracked objects:
 17179 ;;		On entry : 0/0
 17180 ;;		On exit  : 0/0
 17181 ;;		Unchanged: 0/0
 17182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17186 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17187 ;;Total ram usage:        1 bytes
 17188 ;; Hardware stack levels used:    1
 17189 ;; Hardware stack levels required when called:    6
 17190 ;; This function calls:
 17191 ;;		_DelayOffPointSelect
 17192 ;; This function is called by:
 17193 ;;		_DelayOff_Initialization
 17194 ;; This function uses a non-reentrant model
 17195 ;;
 17196                           
 17197                           
 17198                           ;psect for function _DlyOff_Initialization
 17199  1AE9                     _DlyOff_Initialization:	
 17200                           
 17201                           ;incstack = 0
 17202                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17203                           ;DlyOff_Initialization@sw stored from wreg
 17204  1AE9  0020               	movlb	0	; select bank0
 17205  1AEA  00A2               	movwf	DlyOff_Initialization@sw
 17206                           
 17207                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17208  1AEB  0822               	movf	DlyOff_Initialization@sw,w
 17209  1AEC  319C  24FC         	fcall	_DelayOffPointSelect
 17210  1AEE  0008               	return
 17211  1AEF                     __end_of_DlyOff_Initialization:	
 17212                           
 17213                           	psect	text111
 17214  1CFC                     __ptext111:	
 17215 ;; *************** function _DelayOffPointSelect *****************
 17216 ;; Defined at:
 17217 ;;		line 7 in file "../src/DelayOff_B1.c"
 17218 ;; Parameters:    Size  Location     Type
 17219 ;;  sw              1    wreg     unsigned char 
 17220 ;; Auto vars:     Size  Location     Type
 17221 ;;  sw              1    1[BANK0 ] unsigned char 
 17222 ;; Return value:  Size  Location     Type
 17223 ;;		None               void
 17224 ;; Registers used:
 17225 ;;		wreg
 17226 ;; Tracked objects:
 17227 ;;		On entry : 0/0
 17228 ;;		On exit  : 0/0
 17229 ;;		Unchanged: 0/0
 17230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17233 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17234 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17235 ;;Total ram usage:        2 bytes
 17236 ;; Hardware stack levels used:    1
 17237 ;; Hardware stack levels required when called:    5
 17238 ;; This function calls:
 17239 ;;		Nothing
 17240 ;; This function is called by:
 17241 ;;		_DlyOff_Initialization
 17242 ;;		_DlyOff_Main
 17243 ;;		_setDelayOff_GO
 17244 ;;		_getDelayOff_GO
 17245 ;; This function uses a non-reentrant model
 17246 ;;
 17247                           
 17248                           
 17249                           ;psect for function _DelayOffPointSelect
 17250  1CFC                     _DelayOffPointSelect:	
 17251                           
 17252                           ;incstack = 0
 17253                           ; Regs used in _DelayOffPointSelect: [wreg]
 17254                           ;DelayOffPointSelect@sw stored from wreg
 17255  1CFC  0020               	movlb	0	; select bank0
 17256  1CFD  00A1               	movwf	DelayOffPointSelect@sw
 17257                           
 17258                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17259  1CFE  0821               	movf	DelayOffPointSelect@sw,w
 17260  1CFF  3A01               	xorlw	1
 17261  1D00  1D03               	skipz
 17262  1D01  2D07               	goto	l8851
 17263                           
 17264                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17265  1D02  30E1               	movlw	_DlySw1& (0+255)
 17266  1D03  00A0               	movwf	??_DelayOffPointSelect
 17267  1D04  0820               	movf	??_DelayOffPointSelect,w
 17268  1D05  00F5               	movwf	_DelayOff
 17269                           
 17270                           ;DelayOff_B1.c: 11: }
 17271  1D06  0008               	return
 17272  1D07                     l8851:	
 17273                           
 17274                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17275  1D07  0821               	movf	DelayOffPointSelect@sw,w
 17276  1D08  3A02               	xorlw	2
 17277  1D09  1D03               	skipz
 17278  1D0A  0008               	return
 17279                           
 17280                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17281  1D0B  30E6               	movlw	_DlySw2& (0+255)
 17282  1D0C  00A0               	movwf	??_DelayOffPointSelect
 17283  1D0D  0820               	movf	??_DelayOffPointSelect,w
 17284  1D0E  00F5               	movwf	_DelayOff
 17285  1D0F  0008               	return
 17286  1D10                     __end_of_DelayOffPointSelect:	
 17287                           
 17288                           	psect	text112
 17289  1D89                     __ptext112:	
 17290 ;; *************** function _CC2500_PowerOnInitial *****************
 17291 ;; Defined at:
 17292 ;;		line 119 in file "../src/CC2500_B1.c"
 17293 ;; Parameters:    Size  Location     Type
 17294 ;;		None
 17295 ;; Auto vars:     Size  Location     Type
 17296 ;;		None
 17297 ;; Return value:  Size  Location     Type
 17298 ;;		None               void
 17299 ;; Registers used:
 17300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17301 ;; Tracked objects:
 17302 ;;		On entry : 0/0
 17303 ;;		On exit  : 0/0
 17304 ;;		Unchanged: 0/0
 17305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17310 ;;Total ram usage:        0 bytes
 17311 ;; Hardware stack levels used:    1
 17312 ;; Hardware stack levels required when called:    8
 17313 ;; This function calls:
 17314 ;;		_CC2500_ClearRXFIFO
 17315 ;;		_CC2500_ClearTXFIFO
 17316 ;;		_CC2500_FrequencyCabr
 17317 ;;		_CC2500_InitPATable
 17318 ;;		_CC2500_InitSetREG
 17319 ;;		_CC2500_PowerRST
 17320 ;;		_CC2500_SIDLEMode
 17321 ;; This function is called by:
 17322 ;;		_main
 17323 ;; This function uses a non-reentrant model
 17324 ;;
 17325                           
 17326                           
 17327                           ;psect for function _CC2500_PowerOnInitial
 17328  1D89                     _CC2500_PowerOnInitial:	
 17329                           
 17330                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 17331                           
 17332                           ;incstack = 0
 17333                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17334  1D89  3193  23E0  319D   	fcall	_CC2500_PowerRST
 17335                           
 17336                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 17337  1D8C  3190  2089  319D   	fcall	_CC2500_InitSetREG
 17338                           
 17339                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 17340  1D8F  319E  2688  319D   	fcall	_CC2500_InitPATable
 17341                           
 17342                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 17343  1D92  319A  22D8  319D   	fcall	_CC2500_ClearTXFIFO
 17344                           
 17345                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 17346  1D95  319A  22D4  319D   	fcall	_CC2500_ClearRXFIFO
 17347                           
 17348                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 17349  1D98  319B  2362  319D   	fcall	_CC2500_FrequencyCabr
 17350                           
 17351                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 17352  1D9B  319A  22DC         	fcall	_CC2500_SIDLEMode
 17353  1D9D  0008               	return
 17354  1D9E                     __end_of_CC2500_PowerOnInitial:	
 17355                           
 17356                           	psect	text113
 17357  1ADC                     __ptext113:	
 17358 ;; *************** function _CC2500_SIDLEMode *****************
 17359 ;; Defined at:
 17360 ;;		line 209 in file "../src/CC2500_B1.c"
 17361 ;; Parameters:    Size  Location     Type
 17362 ;;		None
 17363 ;; Auto vars:     Size  Location     Type
 17364 ;;		None
 17365 ;; Return value:  Size  Location     Type
 17366 ;;		None               void
 17367 ;; Registers used:
 17368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17369 ;; Tracked objects:
 17370 ;;		On entry : 0/0
 17371 ;;		On exit  : 0/0
 17372 ;;		Unchanged: 0/0
 17373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17378 ;;Total ram usage:        0 bytes
 17379 ;; Hardware stack levels used:    1
 17380 ;; Hardware stack levels required when called:    7
 17381 ;; This function calls:
 17382 ;;		_CC2500_WriteCommand
 17383 ;; This function is called by:
 17384 ;;		_CC2500_PowerOnInitial
 17385 ;; This function uses a non-reentrant model
 17386 ;;
 17387                           
 17388                           
 17389                           ;psect for function _CC2500_SIDLEMode
 17390  1ADC                     _CC2500_SIDLEMode:	
 17391                           
 17392                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17393                           
 17394                           ;incstack = 0
 17395                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17396  1ADC  3036               	movlw	54
 17397  1ADD  319D  25FD         	fcall	_CC2500_WriteCommand
 17398  1ADF  0008               	return
 17399  1AE0                     __end_of_CC2500_SIDLEMode:	
 17400                           
 17401                           	psect	text114
 17402  13E0                     __ptext114:	
 17403 ;; *************** function _CC2500_PowerRST *****************
 17404 ;; Defined at:
 17405 ;;		line 132 in file "../src/CC2500_B1.c"
 17406 ;; Parameters:    Size  Location     Type
 17407 ;;		None
 17408 ;; Auto vars:     Size  Location     Type
 17409 ;;		None
 17410 ;; Return value:  Size  Location     Type
 17411 ;;		None               void
 17412 ;; Registers used:
 17413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17414 ;; Tracked objects:
 17415 ;;		On entry : 0/0
 17416 ;;		On exit  : 0/0
 17417 ;;		Unchanged: 0/0
 17418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17422 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17423 ;;Total ram usage:        1 bytes
 17424 ;; Hardware stack levels used:    1
 17425 ;; Hardware stack levels required when called:    6
 17426 ;; This function calls:
 17427 ;;		_CC2500_WriteByte
 17428 ;;		_DelayTime_1us
 17429 ;;		_Timeout_Counter
 17430 ;;		_set_TimeoutCleared
 17431 ;; This function is called by:
 17432 ;;		_CC2500_PowerOnInitial
 17433 ;; This function uses a non-reentrant model
 17434 ;;
 17435                           
 17436                           
 17437                           ;psect for function _CC2500_PowerRST
 17438  13E0                     _CC2500_PowerRST:	
 17439                           
 17440                           ;CC2500_B1.c: 133: RC1 = 0;
 17441                           
 17442                           ;incstack = 0
 17443                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17444  13E0  0020               	movlb	0	; select bank0
 17445  13E1  108E               	bcf	14,1	;volatile
 17446                           
 17447                           ;CC2500_B1.c: 134: RC0 = 0;
 17448  13E2  100E               	bcf	14,0	;volatile
 17449                           
 17450                           ;CC2500_B1.c: 135: RC4 = 1;
 17451  13E3  160E               	bsf	14,4	;volatile
 17452                           
 17453                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17454  13E4  300A               	movlw	10
 17455  13E5  00A0               	movwf	DelayTime_1us@count
 17456  13E6  3000               	movlw	0
 17457  13E7  00A1               	movwf	DelayTime_1us@count+1
 17458  13E8  319F  27B1  3193   	fcall	_DelayTime_1us
 17459                           
 17460                           ;CC2500_B1.c: 137: RC4 = 0;
 17461  13EB  0020               	movlb	0	; select bank0
 17462  13EC  120E               	bcf	14,4	;volatile
 17463                           
 17464                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17465  13ED  300A               	movlw	10
 17466  13EE  00A0               	movwf	DelayTime_1us@count
 17467  13EF  3000               	movlw	0
 17468  13F0  00A1               	movwf	DelayTime_1us@count+1
 17469  13F1  319F  27B1  3193   	fcall	_DelayTime_1us
 17470                           
 17471                           ;CC2500_B1.c: 139: RC4 = 1;
 17472  13F4  0020               	movlb	0	; select bank0
 17473  13F5  160E               	bsf	14,4	;volatile
 17474                           
 17475                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17476  13F6  3028               	movlw	40
 17477  13F7  00A0               	movwf	DelayTime_1us@count
 17478  13F8  3000               	movlw	0
 17479  13F9  00A1               	movwf	DelayTime_1us@count+1
 17480  13FA  319F  27B1  3193   	fcall	_DelayTime_1us
 17481                           
 17482                           ;CC2500_B1.c: 141: RC4 = 0;
 17483  13FD  0020               	movlb	0	; select bank0
 17484  13FE  120E               	bcf	14,4	;volatile
 17485                           
 17486                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17487  13FF  3030               	movlw	48
 17488  1400  00A6               	movwf	??_CC2500_PowerRST
 17489  1401  0826               	movf	??_CC2500_PowerRST,w
 17490  1402  0021               	movlb	1	; select bank1
 17491  1403  00D0               	movwf	_SPI0Buffer^(0+128)
 17492                           
 17493                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 17494  1404  2C08               	goto	l9861
 17495  1405                     l9859:	
 17496                           
 17497                           ;CC2500_B1.c: 144: Timeout_Counter();
 17498  1405  319D  2574  3193   	fcall	_Timeout_Counter
 17499  1408                     l9861:	
 17500  1408  0020               	movlb	0	; select bank0
 17501  1409  1D0E               	btfss	14,2	;volatile
 17502  140A  2C0E               	goto	l9865
 17503  140B  0021               	movlb	1	; select bank1
 17504  140C  1D2B               	btfss	(_myMain^(0+128)+11),2
 17505  140D  2C05               	goto	l9859
 17506  140E                     l9865:	
 17507                           
 17508                           ;CC2500_B1.c: 145: };
 17509                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17510  140E  319A  22E4  3193   	fcall	_set_TimeoutCleared
 17511                           
 17512                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17513  1411  319D  25CB  3193   	fcall	_CC2500_WriteByte
 17514                           
 17515                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 17516  1414  2C18               	goto	l9871
 17517  1415                     l9869:	
 17518                           
 17519                           ;CC2500_B1.c: 149: Timeout_Counter();
 17520  1415  319D  2574  3193   	fcall	_Timeout_Counter
 17521  1418                     l9871:	
 17522  1418  0020               	movlb	0	; select bank0
 17523  1419  1D0E               	btfss	14,2	;volatile
 17524  141A  2C1E               	goto	l9875
 17525  141B  0021               	movlb	1	; select bank1
 17526  141C  1D2B               	btfss	(_myMain^(0+128)+11),2
 17527  141D  2C15               	goto	l9869
 17528  141E                     l9875:	
 17529                           
 17530                           ;CC2500_B1.c: 150: };
 17531                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17532  141E  319A  22E4         	fcall	_set_TimeoutCleared
 17533                           
 17534                           ;CC2500_B1.c: 152: RC0 = 0;
 17535  1420  0020               	movlb	0	; select bank0
 17536  1421  100E               	bcf	14,0	;volatile
 17537                           
 17538                           ;CC2500_B1.c: 153: RC4 = 1;
 17539  1422  160E               	bsf	14,4	;volatile
 17540  1423  0008               	return
 17541  1424                     __end_of_CC2500_PowerRST:	
 17542                           
 17543                           	psect	text115
 17544  1089                     __ptext115:	
 17545 ;; *************** function _CC2500_InitSetREG *****************
 17546 ;; Defined at:
 17547 ;;		line 159 in file "../src/CC2500_B1.c"
 17548 ;; Parameters:    Size  Location     Type
 17549 ;;		None
 17550 ;; Auto vars:     Size  Location     Type
 17551 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17552 ;;  temp2           1    7[BANK0 ] unsigned char 
 17553 ;;  temp1           1    6[BANK0 ] unsigned char 
 17554 ;; Return value:  Size  Location     Type
 17555 ;;		None               void
 17556 ;; Registers used:
 17557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17558 ;; Tracked objects:
 17559 ;;		On entry : 0/0
 17560 ;;		On exit  : 0/0
 17561 ;;		Unchanged: 0/0
 17562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17564 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17565 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17566 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17567 ;;Total ram usage:        4 bytes
 17568 ;; Hardware stack levels used:    1
 17569 ;; Hardware stack levels required when called:    7
 17570 ;; This function calls:
 17571 ;;		_CC2500_WriteREG
 17572 ;; This function is called by:
 17573 ;;		_CC2500_PowerOnInitial
 17574 ;; This function uses a non-reentrant model
 17575 ;;
 17576                           
 17577                           
 17578                           ;psect for function _CC2500_InitSetREG
 17579  1089                     _CC2500_InitSetREG:	
 17580                           
 17581                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17582                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17583                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17584                           
 17585                           ;incstack = 0
 17586                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17587  1089  0020               	movlb	0	; select bank0
 17588  108A  01A8               	clrf	CC2500_InitSetREG@loop_c
 17589  108B                     L10:	
 17590  108B  302F               	movlw	47
 17591  108C  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17592  108D  1803               	btfsc	3,0
 17593  108E  0008               	return
 17594                           
 17595                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17596  108F  0828               	movf	CC2500_InitSetREG@loop_c,w
 17597  1090  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17598  1091  0084               	movwf	4
 17599  1092  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17600  1093  1803               	skipnc
 17601  1094  3E01               	addlw	1
 17602  1095  0085               	movwf	5
 17603  1096  0800               	movf	0,w	;code access
 17604  1097  00A5               	movwf	??_CC2500_InitSetREG
 17605  1098  0825               	movf	??_CC2500_InitSetREG,w
 17606  1099  00A6               	movwf	CC2500_InitSetREG@temp1
 17607                           
 17608                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17609  109A  0828               	movf	CC2500_InitSetREG@loop_c,w
 17610  109B  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17611  109C  0084               	movwf	4
 17612  109D  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17613  109E  1803               	skipnc
 17614  109F  3E01               	addlw	1
 17615  10A0  0085               	movwf	5
 17616  10A1  0800               	movf	0,w	;code access
 17617  10A2  00A5               	movwf	??_CC2500_InitSetREG
 17618  10A3  0825               	movf	??_CC2500_InitSetREG,w
 17619  10A4  00A7               	movwf	CC2500_InitSetREG@temp2
 17620                           
 17621                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17622  10A5  0827               	movf	CC2500_InitSetREG@temp2,w
 17623  10A6  00A5               	movwf	??_CC2500_InitSetREG
 17624  10A7  0825               	movf	??_CC2500_InitSetREG,w
 17625  10A8  00A2               	movwf	CC2500_WriteREG@value
 17626  10A9  0826               	movf	CC2500_InitSetREG@temp1,w
 17627  10AA  3190  2066  3190   	fcall	_CC2500_WriteREG
 17628  10AD  3001               	movlw	1
 17629  10AE  0020               	movlb	0	; select bank0
 17630  10AF  00A5               	movwf	??_CC2500_InitSetREG
 17631  10B0  0825               	movf	??_CC2500_InitSetREG,w
 17632  10B1  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17633  10B2  288B               	goto	L10
 17634  10B3                     __end_of_CC2500_InitSetREG:	
 17635                           
 17636                           	psect	text116
 17637  1E88                     __ptext116:	
 17638 ;; *************** function _CC2500_InitPATable *****************
 17639 ;; Defined at:
 17640 ;;		line 174 in file "../src/CC2500_B1.c"
 17641 ;; Parameters:    Size  Location     Type
 17642 ;;		None
 17643 ;; Auto vars:     Size  Location     Type
 17644 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17645 ;;  temp            1    6[BANK0 ] unsigned char 
 17646 ;; Return value:  Size  Location     Type
 17647 ;;		None               void
 17648 ;; Registers used:
 17649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17650 ;; Tracked objects:
 17651 ;;		On entry : 0/0
 17652 ;;		On exit  : 0/0
 17653 ;;		Unchanged: 0/0
 17654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17656 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17657 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17658 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17659 ;;Total ram usage:        3 bytes
 17660 ;; Hardware stack levels used:    1
 17661 ;; Hardware stack levels required when called:    7
 17662 ;; This function calls:
 17663 ;;		_CC2500_WriteREG
 17664 ;; This function is called by:
 17665 ;;		_CC2500_PowerOnInitial
 17666 ;; This function uses a non-reentrant model
 17667 ;;
 17668                           
 17669                           
 17670                           ;psect for function _CC2500_InitPATable
 17671  1E88                     _CC2500_InitPATable:	
 17672                           
 17673                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17674                           ;CC2500_B1.c: 176: unsigned char temp;
 17675                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17676                           
 17677                           ;incstack = 0
 17678                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17679  1E88  0020               	movlb	0	; select bank0
 17680  1E89  01A7               	clrf	CC2500_InitPATable@loop_d
 17681  1E8A                     L11:	
 17682  1E8A  3008               	movlw	8
 17683  1E8B  0227               	subwf	CC2500_InitPATable@loop_d,w
 17684  1E8C  1803               	btfsc	3,0
 17685  1E8D  0008               	return
 17686                           
 17687                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17688  1E8E  0827               	movf	CC2500_InitPATable@loop_d,w
 17689  1E8F  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17690  1E90  0084               	movwf	4
 17691  1E91  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17692  1E92  1803               	skipnc
 17693  1E93  3E01               	addlw	1
 17694  1E94  0085               	movwf	5
 17695  1E95  0800               	movf	0,w	;code access
 17696  1E96  00A5               	movwf	??_CC2500_InitPATable
 17697  1E97  0825               	movf	??_CC2500_InitPATable,w
 17698  1E98  00A6               	movwf	CC2500_InitPATable@temp
 17699                           
 17700                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17701  1E99  0826               	movf	CC2500_InitPATable@temp,w
 17702  1E9A  00A5               	movwf	??_CC2500_InitPATable
 17703  1E9B  0825               	movf	??_CC2500_InitPATable,w
 17704  1E9C  00A2               	movwf	CC2500_WriteREG@value
 17705  1E9D  303E               	movlw	62
 17706  1E9E  3190  2066  319E   	fcall	_CC2500_WriteREG
 17707  1EA1  3001               	movlw	1
 17708  1EA2  0020               	movlb	0	; select bank0
 17709  1EA3  00A5               	movwf	??_CC2500_InitPATable
 17710  1EA4  0825               	movf	??_CC2500_InitPATable,w
 17711  1EA5  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17712  1EA6  2E8A               	goto	L11
 17713  1EA7                     __end_of_CC2500_InitPATable:	
 17714                           
 17715                           	psect	text117
 17716  1066                     __ptext117:	
 17717 ;; *************** function _CC2500_WriteREG *****************
 17718 ;; Defined at:
 17719 ;;		line 251 in file "../src/CC2500_B1.c"
 17720 ;; Parameters:    Size  Location     Type
 17721 ;;  w_addr          1    wreg     unsigned char 
 17722 ;;  value           1    2[BANK0 ] unsigned char 
 17723 ;; Auto vars:     Size  Location     Type
 17724 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17725 ;; Return value:  Size  Location     Type
 17726 ;;		None               void
 17727 ;; Registers used:
 17728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17729 ;; Tracked objects:
 17730 ;;		On entry : 0/0
 17731 ;;		On exit  : 0/0
 17732 ;;		Unchanged: 0/0
 17733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17734 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17737 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17738 ;;Total ram usage:        3 bytes
 17739 ;; Hardware stack levels used:    1
 17740 ;; Hardware stack levels required when called:    6
 17741 ;; This function calls:
 17742 ;;		_CC2500_WriteByte
 17743 ;;		_Timeout_Counter
 17744 ;;		_set_TimeoutCleared
 17745 ;; This function is called by:
 17746 ;;		_CC2500_InitSetREG
 17747 ;;		_CC2500_InitPATable
 17748 ;; This function uses a non-reentrant model
 17749 ;;
 17750                           
 17751                           
 17752                           ;psect for function _CC2500_WriteREG
 17753  1066                     _CC2500_WriteREG:	
 17754                           
 17755                           ;incstack = 0
 17756                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17757                           ;CC2500_WriteREG@w_addr stored from wreg
 17758  1066  0020               	movlb	0	; select bank0
 17759  1067  00A4               	movwf	CC2500_WriteREG@w_addr
 17760                           
 17761                           ;CC2500_B1.c: 252: RC4 = 0;
 17762  1068  120E               	bcf	14,4	;volatile
 17763                           
 17764                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17765  1069  0824               	movf	CC2500_WriteREG@w_addr,w
 17766  106A  00A3               	movwf	??_CC2500_WriteREG
 17767  106B  0823               	movf	??_CC2500_WriteREG,w
 17768  106C  0021               	movlb	1	; select bank1
 17769  106D  00D0               	movwf	_SPI0Buffer^(0+128)
 17770                           
 17771                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 17772  106E  2872               	goto	l9589
 17773  106F                     l9587:	
 17774                           
 17775                           ;CC2500_B1.c: 255: Timeout_Counter();
 17776  106F  319D  2574  3190   	fcall	_Timeout_Counter
 17777  1072                     l9589:	
 17778  1072  0020               	movlb	0	; select bank0
 17779  1073  1D0E               	btfss	14,2	;volatile
 17780  1074  2878               	goto	l9593
 17781  1075  0021               	movlb	1	; select bank1
 17782  1076  1D2B               	btfss	(_myMain^(0+128)+11),2
 17783  1077  286F               	goto	l9587
 17784  1078                     l9593:	
 17785                           
 17786                           ;CC2500_B1.c: 256: };
 17787                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17788  1078  319A  22E4  3190   	fcall	_set_TimeoutCleared
 17789                           
 17790                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17791  107B  319D  25CB  3190   	fcall	_CC2500_WriteByte
 17792                           
 17793                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17794  107E  0020               	movlb	0	; select bank0
 17795  107F  0822               	movf	CC2500_WriteREG@value,w
 17796  1080  00A3               	movwf	??_CC2500_WriteREG
 17797  1081  0823               	movf	??_CC2500_WriteREG,w
 17798  1082  0021               	movlb	1	; select bank1
 17799  1083  00D0               	movwf	_SPI0Buffer^(0+128)
 17800                           
 17801                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17802  1084  319D  25CB         	fcall	_CC2500_WriteByte
 17803                           
 17804                           ;CC2500_B1.c: 262: RC4 = 1;
 17805  1086  0020               	movlb	0	; select bank0
 17806  1087  160E               	bsf	14,4	;volatile
 17807  1088  0008               	return
 17808  1089                     __end_of_CC2500_WriteREG:	
 17809                           
 17810                           	psect	text118
 17811  1B62                     __ptext118:	
 17812 ;; *************** function _CC2500_FrequencyCabr *****************
 17813 ;; Defined at:
 17814 ;;		line 201 in file "../src/CC2500_B1.c"
 17815 ;; Parameters:    Size  Location     Type
 17816 ;;		None
 17817 ;; Auto vars:     Size  Location     Type
 17818 ;;		None
 17819 ;; Return value:  Size  Location     Type
 17820 ;;		None               void
 17821 ;; Registers used:
 17822 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17823 ;; Tracked objects:
 17824 ;;		On entry : 0/0
 17825 ;;		On exit  : 0/0
 17826 ;;		Unchanged: 0/0
 17827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17832 ;;Total ram usage:        0 bytes
 17833 ;; Hardware stack levels used:    1
 17834 ;; Hardware stack levels required when called:    7
 17835 ;; This function calls:
 17836 ;;		_CC2500_WriteCommand
 17837 ;;		_DelayTime_1us
 17838 ;; This function is called by:
 17839 ;;		_CC2500_PowerOnInitial
 17840 ;; This function uses a non-reentrant model
 17841 ;;
 17842                           
 17843                           
 17844                           ;psect for function _CC2500_FrequencyCabr
 17845  1B62                     _CC2500_FrequencyCabr:	
 17846                           
 17847                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17848                           
 17849                           ;incstack = 0
 17850                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17851  1B62  3033               	movlw	51
 17852  1B63  319D  25FD  319B   	fcall	_CC2500_WriteCommand
 17853                           
 17854                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17855  1B66  30E8               	movlw	232
 17856  1B67  0020               	movlb	0	; select bank0
 17857  1B68  00A0               	movwf	DelayTime_1us@count
 17858  1B69  3003               	movlw	3
 17859  1B6A  00A1               	movwf	DelayTime_1us@count+1
 17860  1B6B  319F  27B1         	fcall	_DelayTime_1us
 17861  1B6D  0008               	return
 17862  1B6E                     __end_of_CC2500_FrequencyCabr:	
 17863                           
 17864                           	psect	text119
 17865  1FB1                     __ptext119:	
 17866 ;; *************** function _DelayTime_1us *****************
 17867 ;; Defined at:
 17868 ;;		line 320 in file "../src/CC2500_B1.c"
 17869 ;; Parameters:    Size  Location     Type
 17870 ;;  count           2    0[BANK0 ] int 
 17871 ;; Auto vars:     Size  Location     Type
 17872 ;;  j               2    4[BANK0 ] unsigned int 
 17873 ;;  i               2    2[BANK0 ] unsigned int 
 17874 ;; Return value:  Size  Location     Type
 17875 ;;		None               void
 17876 ;; Registers used:
 17877 ;;		wreg, status,2
 17878 ;; Tracked objects:
 17879 ;;		On entry : 0/0
 17880 ;;		On exit  : 0/0
 17881 ;;		Unchanged: 0/0
 17882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17883 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17884 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17886 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17887 ;;Total ram usage:        6 bytes
 17888 ;; Hardware stack levels used:    1
 17889 ;; Hardware stack levels required when called:    5
 17890 ;; This function calls:
 17891 ;;		Nothing
 17892 ;; This function is called by:
 17893 ;;		_CC2500_PowerRST
 17894 ;;		_CC2500_FrequencyCabr
 17895 ;; This function uses a non-reentrant model
 17896 ;;
 17897                           
 17898                           
 17899                           ;psect for function _DelayTime_1us
 17900  1FB1                     _DelayTime_1us:	
 17901                           
 17902                           ;CC2500_B1.c: 321: unsigned int i, j;
 17903                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17904                           
 17905                           ;incstack = 0
 17906                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17907  1FB1  3001               	movlw	1
 17908  1FB2  0020               	movlb	0	; select bank0
 17909  1FB3  00A2               	movwf	DelayTime_1us@i
 17910  1FB4  3000               	movlw	0
 17911  1FB5  00A3               	movwf	DelayTime_1us@i+1
 17912  1FB6                     l372:	
 17913  1FB6  0821               	movf	DelayTime_1us@count+1,w
 17914  1FB7  0223               	subwf	DelayTime_1us@i+1,w
 17915  1FB8  1D03               	skipz
 17916  1FB9  2FBC               	goto	u10725
 17917  1FBA  0820               	movf	DelayTime_1us@count,w
 17918  1FBB  0222               	subwf	DelayTime_1us@i,w
 17919  1FBC                     u10725:	
 17920  1FBC  1803               	btfsc	3,0
 17921  1FBD  0008               	return
 17922                           
 17923                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17924  1FBE  01A4               	clrf	DelayTime_1us@j
 17925  1FBF  01A5               	clrf	DelayTime_1us@j+1
 17926  1FC0  3000               	movlw	0
 17927  1FC1  0225               	subwf	DelayTime_1us@j+1,w
 17928  1FC2  3002               	movlw	2
 17929  1FC3  1903               	skipnz
 17930  1FC4  0224               	subwf	DelayTime_1us@j,w
 17931  1FC5  1803               	btfsc	3,0
 17932  1FC6  2FD2               	goto	l9581
 17933  1FC7                     l9579:	
 17934  1FC7  3001               	movlw	1
 17935  1FC8  07A4               	addwf	DelayTime_1us@j,f
 17936  1FC9  3000               	movlw	0
 17937  1FCA  3DA5               	addwfc	DelayTime_1us@j+1,f
 17938  1FCB  3000               	movlw	0
 17939  1FCC  0225               	subwf	DelayTime_1us@j+1,w
 17940  1FCD  3002               	movlw	2
 17941  1FCE  1903               	skipnz
 17942  1FCF  0224               	subwf	DelayTime_1us@j,w
 17943  1FD0  1C03               	skipc
 17944  1FD1  2FC7               	goto	l9579
 17945  1FD2                     l9581:	
 17946  1FD2  3001               	movlw	1
 17947  1FD3  07A2               	addwf	DelayTime_1us@i,f
 17948  1FD4  3000               	movlw	0
 17949  1FD5  3DA3               	addwfc	DelayTime_1us@i+1,f
 17950  1FD6  2FB6               	goto	l372
 17951  1FD7                     __end_of_DelayTime_1us:	
 17952                           
 17953                           	psect	text120
 17954  1AD8                     __ptext120:	
 17955 ;; *************** function _CC2500_ClearTXFIFO *****************
 17956 ;; Defined at:
 17957 ;;		line 187 in file "../src/CC2500_B1.c"
 17958 ;; Parameters:    Size  Location     Type
 17959 ;;		None
 17960 ;; Auto vars:     Size  Location     Type
 17961 ;;		None
 17962 ;; Return value:  Size  Location     Type
 17963 ;;		None               void
 17964 ;; Registers used:
 17965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17966 ;; Tracked objects:
 17967 ;;		On entry : 0/0
 17968 ;;		On exit  : 0/0
 17969 ;;		Unchanged: 0/0
 17970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17975 ;;Total ram usage:        0 bytes
 17976 ;; Hardware stack levels used:    1
 17977 ;; Hardware stack levels required when called:    7
 17978 ;; This function calls:
 17979 ;;		_CC2500_WriteCommand
 17980 ;; This function is called by:
 17981 ;;		_CC2500_PowerOnInitial
 17982 ;; This function uses a non-reentrant model
 17983 ;;
 17984                           
 17985                           
 17986                           ;psect for function _CC2500_ClearTXFIFO
 17987  1AD8                     _CC2500_ClearTXFIFO:	
 17988                           
 17989                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17990                           
 17991                           ;incstack = 0
 17992                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17993  1AD8  303B               	movlw	59
 17994  1AD9  319D  25FD         	fcall	_CC2500_WriteCommand
 17995  1ADB  0008               	return
 17996  1ADC                     __end_of_CC2500_ClearTXFIFO:	
 17997                           
 17998                           	psect	text121
 17999  1AD4                     __ptext121:	
 18000 ;; *************** function _CC2500_ClearRXFIFO *****************
 18001 ;; Defined at:
 18002 ;;		line 194 in file "../src/CC2500_B1.c"
 18003 ;; Parameters:    Size  Location     Type
 18004 ;;		None
 18005 ;; Auto vars:     Size  Location     Type
 18006 ;;		None
 18007 ;; Return value:  Size  Location     Type
 18008 ;;		None               void
 18009 ;; Registers used:
 18010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18011 ;; Tracked objects:
 18012 ;;		On entry : 0/0
 18013 ;;		On exit  : 0/0
 18014 ;;		Unchanged: 0/0
 18015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18020 ;;Total ram usage:        0 bytes
 18021 ;; Hardware stack levels used:    1
 18022 ;; Hardware stack levels required when called:    7
 18023 ;; This function calls:
 18024 ;;		_CC2500_WriteCommand
 18025 ;; This function is called by:
 18026 ;;		_CC2500_PowerOnInitial
 18027 ;; This function uses a non-reentrant model
 18028 ;;
 18029                           
 18030                           
 18031                           ;psect for function _CC2500_ClearRXFIFO
 18032  1AD4                     _CC2500_ClearRXFIFO:	
 18033                           
 18034                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 18035                           
 18036                           ;incstack = 0
 18037                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18038  1AD4  303A               	movlw	58
 18039  1AD5  319D  25FD         	fcall	_CC2500_WriteCommand
 18040  1AD7  0008               	return
 18041  1AD8                     __end_of_CC2500_ClearRXFIFO:	
 18042                           
 18043                           	psect	text122
 18044  1DFD                     __ptext122:	
 18045 ;; *************** function _CC2500_WriteCommand *****************
 18046 ;; Defined at:
 18047 ;;		line 285 in file "../src/CC2500_B1.c"
 18048 ;; Parameters:    Size  Location     Type
 18049 ;;  command         1    wreg     unsigned char 
 18050 ;; Auto vars:     Size  Location     Type
 18051 ;;  command         1    3[BANK0 ] unsigned char 
 18052 ;; Return value:  Size  Location     Type
 18053 ;;		None               void
 18054 ;; Registers used:
 18055 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18056 ;; Tracked objects:
 18057 ;;		On entry : 0/0
 18058 ;;		On exit  : 0/0
 18059 ;;		Unchanged: 0/0
 18060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18062 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18063 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18064 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18065 ;;Total ram usage:        2 bytes
 18066 ;; Hardware stack levels used:    1
 18067 ;; Hardware stack levels required when called:    6
 18068 ;; This function calls:
 18069 ;;		_CC2500_WriteByte
 18070 ;;		_Timeout_Counter
 18071 ;;		_set_TimeoutCleared
 18072 ;; This function is called by:
 18073 ;;		_CC2500_TxData
 18074 ;;		_CC2500_ClearTXFIFO
 18075 ;;		_CC2500_ClearRXFIFO
 18076 ;;		_CC2500_FrequencyCabr
 18077 ;;		_CC2500_SIDLEMode
 18078 ;;		_setRF_Main
 18079 ;;		_RF_RxDisable
 18080 ;; This function uses a non-reentrant model
 18081 ;;
 18082                           
 18083                           
 18084                           ;psect for function _CC2500_WriteCommand
 18085  1DFD                     _CC2500_WriteCommand:	
 18086                           
 18087                           ;incstack = 0
 18088                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18089                           ;CC2500_WriteCommand@command stored from wreg
 18090  1DFD  0020               	movlb	0	; select bank0
 18091  1DFE  00A3               	movwf	CC2500_WriteCommand@command
 18092                           
 18093                           ;CC2500_B1.c: 286: RC4 = 0;
 18094  1DFF  120E               	bcf	14,4	;volatile
 18095                           
 18096                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 18097  1E00  0823               	movf	CC2500_WriteCommand@command,w
 18098  1E01  00A2               	movwf	??_CC2500_WriteCommand
 18099  1E02  0822               	movf	??_CC2500_WriteCommand,w
 18100  1E03  0021               	movlb	1	; select bank1
 18101  1E04  00D0               	movwf	_SPI0Buffer^(0+128)
 18102                           
 18103                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 18104  1E05  2E09               	goto	l9263
 18105  1E06                     l9261:	
 18106                           
 18107                           ;CC2500_B1.c: 290: Timeout_Counter();
 18108  1E06  319D  2574  319D   	fcall	_Timeout_Counter
 18109  1E09                     l9263:	
 18110  1E09  0020               	movlb	0	; select bank0
 18111  1E0A  1D0E               	btfss	14,2	;volatile
 18112  1E0B  2E0F               	goto	l9267
 18113  1E0C  0021               	movlb	1	; select bank1
 18114  1E0D  1D2B               	btfss	(_myMain^(0+128)+11),2
 18115  1E0E  2E06               	goto	l9261
 18116  1E0F                     l9267:	
 18117                           
 18118                           ;CC2500_B1.c: 291: };
 18119                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 18120  1E0F  319A  22E4  319D   	fcall	_set_TimeoutCleared
 18121                           
 18122                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 18123  1E12  319D  25CB         	fcall	_CC2500_WriteByte
 18124                           
 18125                           ;CC2500_B1.c: 295: RC4 = 1;
 18126  1E14  0020               	movlb	0	; select bank0
 18127  1E15  160E               	bsf	14,4	;volatile
 18128  1E16  0008               	return
 18129  1E17                     __end_of_CC2500_WriteCommand:	
 18130                           
 18131                           	psect	text123
 18132  1AE4                     __ptext123:	
 18133 ;; *************** function _set_TimeoutCleared *****************
 18134 ;; Defined at:
 18135 ;;		line 283 in file "../src/Main_B1.c"
 18136 ;; Parameters:    Size  Location     Type
 18137 ;;		None
 18138 ;; Auto vars:     Size  Location     Type
 18139 ;;		None
 18140 ;; Return value:  Size  Location     Type
 18141 ;;		None               void
 18142 ;; Registers used:
 18143 ;;		status,2
 18144 ;; Tracked objects:
 18145 ;;		On entry : 0/0
 18146 ;;		On exit  : 0/0
 18147 ;;		Unchanged: 0/0
 18148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18153 ;;Total ram usage:        0 bytes
 18154 ;; Hardware stack levels used:    1
 18155 ;; Hardware stack levels required when called:    5
 18156 ;; This function calls:
 18157 ;;		Nothing
 18158 ;; This function is called by:
 18159 ;;		_CC2500_TxData
 18160 ;;		_CC2500_RxData
 18161 ;;		_CC2500_PowerRST
 18162 ;;		_CC2500_WriteREG
 18163 ;;		_CC2500_WriteCommand
 18164 ;;		_CC2500_ReadStatus
 18165 ;;		_getAD
 18166 ;;		_TouchPower
 18167 ;;		_CC2500_ReadREG
 18168 ;; This function uses a non-reentrant model
 18169 ;;
 18170                           
 18171                           
 18172                           ;psect for function _set_TimeoutCleared
 18173  1AE4                     _set_TimeoutCleared:	
 18174                           
 18175                           ;Main_B1.c: 284: myMain.Timeout = 0;
 18176                           
 18177                           ;incstack = 0
 18178                           ; Regs used in _set_TimeoutCleared: [status,2]
 18179  1AE4  0021               	movlb	1	; select bank1
 18180  1AE5  112B               	bcf	(_myMain^(0+128)+11),2
 18181                           
 18182                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 18183  1AE6  01AC               	clrf	(_myMain^(0+128)+12)
 18184  1AE7  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18185  1AE8  0008               	return
 18186  1AE9                     __end_of_set_TimeoutCleared:	
 18187                           
 18188                           	psect	text124
 18189  1D74                     __ptext124:	
 18190 ;; *************** function _Timeout_Counter *****************
 18191 ;; Defined at:
 18192 ;;		line 274 in file "../src/Main_B1.c"
 18193 ;; Parameters:    Size  Location     Type
 18194 ;;		None
 18195 ;; Auto vars:     Size  Location     Type
 18196 ;;		None
 18197 ;; Return value:  Size  Location     Type
 18198 ;;		None               void
 18199 ;; Registers used:
 18200 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18201 ;; Tracked objects:
 18202 ;;		On entry : 0/0
 18203 ;;		On exit  : 0/0
 18204 ;;		Unchanged: 0/0
 18205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18210 ;;Total ram usage:        0 bytes
 18211 ;; Hardware stack levels used:    1
 18212 ;; Hardware stack levels required when called:    5
 18213 ;; This function calls:
 18214 ;;		Nothing
 18215 ;; This function is called by:
 18216 ;;		_CC2500_TxData
 18217 ;;		_CC2500_RxData
 18218 ;;		_CC2500_PowerRST
 18219 ;;		_CC2500_WriteREG
 18220 ;;		_CC2500_WriteCommand
 18221 ;;		_CC2500_ReadStatus
 18222 ;;		_getAD
 18223 ;;		_TouchPower
 18224 ;;		_CC2500_ReadREG
 18225 ;; This function uses a non-reentrant model
 18226 ;;
 18227                           
 18228                           
 18229                           ;psect for function _Timeout_Counter
 18230  1D74                     _Timeout_Counter:	
 18231                           
 18232                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 18233                           
 18234                           ;incstack = 0
 18235                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18236  1D74  3001               	movlw	1
 18237  1D75  0021               	movlb	1	; select bank1
 18238  1D76  07AC               	addwf	(_myMain^(0+128)+12),f
 18239  1D77  3000               	movlw	0
 18240  1D78  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 18241                           
 18242                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 18243  1D79  300C               	movlw	12
 18244  1D7A  3EA0               	addlw	_myMain& (0+255)
 18245  1D7B  0086               	movwf	6
 18246  1D7C  0187               	clrf	7
 18247  1D7D  3F40               	moviw [0]fsr1
 18248  1D7E  3A10               	xorlw	16
 18249  1D7F  1D03               	skipz
 18250  1D80  2D83               	goto	u10015
 18251  1D81  3F41               	moviw [1]fsr1
 18252  1D82  3A27               	xorlw	39
 18253  1D83                     u10015:	
 18254  1D83  1D03               	skipz
 18255  1D84  0008               	return
 18256                           
 18257                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 18258  1D85  01AC               	clrf	(_myMain^(0+128)+12)
 18259  1D86  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18260                           
 18261                           ;Main_B1.c: 278: myMain.Timeout = 1;
 18262  1D87  152B               	bsf	(_myMain^(0+128)+11),2
 18263  1D88  0008               	return
 18264  1D89                     __end_of_Timeout_Counter:	
 18265                           
 18266                           	psect	text125
 18267  1DCB                     __ptext125:	
 18268 ;; *************** function _CC2500_WriteByte *****************
 18269 ;; Defined at:
 18270 ;;		line 219 in file "../src/CC2500_B1.c"
 18271 ;; Parameters:    Size  Location     Type
 18272 ;;		None
 18273 ;; Auto vars:     Size  Location     Type
 18274 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18275 ;; Return value:  Size  Location     Type
 18276 ;;		None               void
 18277 ;; Registers used:
 18278 ;;		wreg, status,2, status,0
 18279 ;; Tracked objects:
 18280 ;;		On entry : 0/0
 18281 ;;		On exit  : 0/0
 18282 ;;		Unchanged: 0/0
 18283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18287 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18288 ;;Total ram usage:        2 bytes
 18289 ;; Hardware stack levels used:    1
 18290 ;; Hardware stack levels required when called:    5
 18291 ;; This function calls:
 18292 ;;		Nothing
 18293 ;; This function is called by:
 18294 ;;		_CC2500_TxData
 18295 ;;		_CC2500_RxData
 18296 ;;		_CC2500_PowerRST
 18297 ;;		_CC2500_WriteREG
 18298 ;;		_CC2500_WriteCommand
 18299 ;;		_CC2500_ReadStatus
 18300 ;;		_CC2500_ReadREG
 18301 ;; This function uses a non-reentrant model
 18302 ;;
 18303                           
 18304                           
 18305                           ;psect for function _CC2500_WriteByte
 18306  1DCB                     _CC2500_WriteByte:	
 18307                           
 18308                           ;CC2500_B1.c: 220: unsigned char loop_a;
 18309                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 18310                           
 18311                           ;incstack = 0
 18312                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18313  1DCB  0020               	movlb	0	; select bank0
 18314  1DCC  01A1               	clrf	CC2500_WriteByte@loop_a
 18315  1DCD                     L12:	
 18316  1DCD  3008               	movlw	8
 18317  1DCE  0221               	subwf	CC2500_WriteByte@loop_a,w
 18318  1DCF  1803               	btfsc	3,0
 18319  1DD0  0008               	return
 18320                           
 18321                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 18322  1DD1  0021               	movlb	1	; select bank1
 18323  1DD2  1FD0               	btfss	_SPI0Buffer^(0+128),7
 18324  1DD3  2DD7               	goto	l328
 18325                           
 18326                           ;CC2500_B1.c: 223: RC0 = 1;
 18327  1DD4  0020               	movlb	0	; select bank0
 18328  1DD5  140E               	bsf	14,0	;volatile
 18329  1DD6  2DD9               	goto	l329
 18330  1DD7                     l328:	
 18331                           
 18332                           ;CC2500_B1.c: 224: else
 18333                           ;CC2500_B1.c: 225: RC0 = 0;
 18334  1DD7  0020               	movlb	0	; select bank0
 18335  1DD8  100E               	bcf	14,0	;volatile
 18336  1DD9                     l329:	
 18337                           
 18338                           ;CC2500_B1.c: 226: RC1 = 1;
 18339  1DD9  148E               	bsf	14,1	;volatile
 18340                           
 18341                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 18342  1DDA  1003               	clrc
 18343  1DDB  0021               	movlb	1	; select bank1
 18344  1DDC  0DD0               	rlf	_SPI0Buffer^(0+128),f
 18345                           
 18346                           ;CC2500_B1.c: 228: RC1 = 0;
 18347  1DDD  0020               	movlb	0	; select bank0
 18348  1DDE  108E               	bcf	14,1	;volatile
 18349  1DDF  3001               	movlw	1
 18350  1DE0  00A0               	movwf	??_CC2500_WriteByte
 18351  1DE1  0820               	movf	??_CC2500_WriteByte,w
 18352  1DE2  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18353  1DE3  2DCD               	goto	L12
 18354  1DE4                     __end_of_CC2500_WriteByte:	
 18355                           
 18356                           	psect	text126
 18357  1424                     __ptext126:	
 18358 ;; *************** function _Buzzer_Main *****************
 18359 ;; Defined at:
 18360 ;;		line 46 in file "../src/Buzzer_B1.c"
 18361 ;; Parameters:    Size  Location     Type
 18362 ;;		None
 18363 ;; Auto vars:     Size  Location     Type
 18364 ;;		None
 18365 ;; Return value:  Size  Location     Type
 18366 ;;		None               void
 18367 ;; Registers used:
 18368 ;;		wreg, status,2, status,0
 18369 ;; Tracked objects:
 18370 ;;		On entry : 0/0
 18371 ;;		On exit  : 0/0
 18372 ;;		Unchanged: 0/0
 18373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18376 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18377 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18378 ;;Total ram usage:        1 bytes
 18379 ;; Hardware stack levels used:    1
 18380 ;; Hardware stack levels required when called:    5
 18381 ;; This function calls:
 18382 ;;		Nothing
 18383 ;; This function is called by:
 18384 ;;		_main
 18385 ;; This function uses a non-reentrant model
 18386 ;;
 18387                           
 18388                           
 18389                           ;psect for function _Buzzer_Main
 18390  1424                     _Buzzer_Main:	
 18391                           
 18392                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18393                           
 18394                           ;incstack = 0
 18395                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18396  1424  0021               	movlb	1	; select bank1
 18397  1425  1CAE               	btfss	_Buz1^(0+128),1
 18398  1426  0008               	return
 18399                           
 18400                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18401  1427  3001               	movlw	1
 18402  1428  07AF               	addwf	(_Buz1^(0+128)+1),f
 18403  1429  3000               	movlw	0
 18404  142A  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18405                           
 18406                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18407  142B  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18408  142C  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18409  142D  1D03               	skipz
 18410  142E  2C31               	goto	u12155
 18411  142F  0834               	movf	(_Buz1^(0+128)+6),w
 18412  1430  022F               	subwf	(_Buz1^(0+128)+1),w
 18413  1431                     u12155:	
 18414  1431  1C03               	skipc
 18415  1432  0008               	return
 18416                           
 18417                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18418  1433  01AF               	clrf	(_Buz1^(0+128)+1)
 18419  1434  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18420                           
 18421                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18422  1435  12AE               	bcf	_Buz1^(0+128),5
 18423  1436  0020               	movlb	0	; select bank0
 18424  1437  1D8D               	btfss	13,3	;volatile
 18425  1438  2C3B               	goto	l10463
 18426  1439  0021               	movlb	1	; select bank1
 18427  143A  16AE               	bsf	_Buz1^(0+128),5
 18428  143B                     l10463:	
 18429                           
 18430                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18431  143B  0021               	movlb	1	; select bank1
 18432  143C  1AAE               	btfsc	_Buz1^(0+128),5
 18433  143D  2C67               	goto	l106
 18434                           
 18435                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18436  143E  08B1               	movf	(_Buz1^(0+128)+3),f
 18437  143F  1D03               	skipz
 18438  1440  2C63               	goto	l107
 18439                           
 18440                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18441  1441  1DAE               	btfss	_Buz1^(0+128),3
 18442  1442  2C51               	goto	l108
 18443                           
 18444                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18445  1443  11AE               	bcf	_Buz1^(0+128),3
 18446                           
 18447                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18448  1444  0832               	movf	(_Buz1^(0+128)+4),w
 18449  1445  0020               	movlb	0	; select bank0
 18450  1446  00A0               	movwf	??_Buzzer_Main
 18451  1447  0820               	movf	??_Buzzer_Main,w
 18452  1448  0021               	movlb	1	; select bank1
 18453  1449  00B1               	movwf	(_Buz1^(0+128)+3)
 18454                           
 18455                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18456  144A  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18457  144B  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18458  144C  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18459  144D  0836               	movf	(_Buz1^(0+128)+8),w
 18460  144E  01B4               	clrf	(_Buz1^(0+128)+6)
 18461  144F  07B4               	addwf	(_Buz1^(0+128)+6),f
 18462                           
 18463                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18464  1450  0008               	return
 18465  1451                     l108:	
 18466  1451  1E2E               	btfss	_Buz1^(0+128),4
 18467  1452  2C61               	goto	l110
 18468                           
 18469                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18470  1453  122E               	bcf	_Buz1^(0+128),4
 18471                           
 18472                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18473  1454  0833               	movf	(_Buz1^(0+128)+5),w
 18474  1455  0020               	movlb	0	; select bank0
 18475  1456  00A0               	movwf	??_Buzzer_Main
 18476  1457  0820               	movf	??_Buzzer_Main,w
 18477  1458  0021               	movlb	1	; select bank1
 18478  1459  00B1               	movwf	(_Buz1^(0+128)+3)
 18479                           
 18480                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18481  145A  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18482  145B  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18483  145C  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18484  145D  0838               	movf	(_Buz1^(0+128)+10),w
 18485  145E  01B4               	clrf	(_Buz1^(0+128)+6)
 18486  145F  07B4               	addwf	(_Buz1^(0+128)+6),f
 18487                           
 18488                           ;Buzzer_B1.c: 62: } else {
 18489  1460  0008               	return
 18490  1461                     l110:	
 18491                           
 18492                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18493  1461  10AE               	bcf	_Buz1^(0+128),1
 18494                           
 18495                           ;Buzzer_B1.c: 64: }
 18496                           ;Buzzer_B1.c: 65: } else {
 18497  1462  0008               	return
 18498  1463                     l107:	
 18499                           
 18500                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18501  1463  16AE               	bsf	_Buz1^(0+128),5
 18502                           
 18503                           ;Buzzer_B1.c: 68: RB3 = 1;
 18504  1464  0020               	movlb	0	; select bank0
 18505  1465  158D               	bsf	13,3	;volatile
 18506                           
 18507                           ;Buzzer_B1.c: 69: }
 18508                           ;Buzzer_B1.c: 70: } else {
 18509  1466  0008               	return
 18510  1467                     l106:	
 18511                           
 18512                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18513  1467  12AE               	bcf	_Buz1^(0+128),5
 18514                           
 18515                           ;Buzzer_B1.c: 73: RB3 = 0;
 18516  1468  0020               	movlb	0	; select bank0
 18517  1469  118D               	bcf	13,3	;volatile
 18518                           
 18519                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18520  146A  3001               	movlw	1
 18521  146B  0021               	movlb	1	; select bank1
 18522  146C  02B1               	subwf	(_Buz1^(0+128)+3),f
 18523  146D  0008               	return
 18524  146E                     __end_of_Buzzer_Main:	
 18525                           
 18526                           	psect	text127
 18527  1AC2                     __ptext127:	
 18528 ;; *************** function _Buzzer_Initialization *****************
 18529 ;; Defined at:
 18530 ;;		line 11 in file "../src/Buzzer_B1.c"
 18531 ;; Parameters:    Size  Location     Type
 18532 ;;		None
 18533 ;; Auto vars:     Size  Location     Type
 18534 ;;		None
 18535 ;; Return value:  Size  Location     Type
 18536 ;;		None               void
 18537 ;; Registers used:
 18538 ;;		None
 18539 ;; Tracked objects:
 18540 ;;		On entry : 0/0
 18541 ;;		On exit  : 0/0
 18542 ;;		Unchanged: 0/0
 18543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18548 ;;Total ram usage:        0 bytes
 18549 ;; Hardware stack levels used:    1
 18550 ;; Hardware stack levels required when called:    5
 18551 ;; This function calls:
 18552 ;;		Nothing
 18553 ;; This function is called by:
 18554 ;;		_main
 18555 ;; This function uses a non-reentrant model
 18556 ;;
 18557                           
 18558                           
 18559                           ;psect for function _Buzzer_Initialization
 18560  1AC2                     _Buzzer_Initialization:	
 18561                           
 18562                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18563                           
 18564                           ;incstack = 0
 18565                           ; Regs used in _Buzzer_Initialization: []
 18566  1AC2  0021               	movlb	1	; select bank1
 18567  1AC3  142E               	bsf	_Buz1^(0+128),0
 18568  1AC4  0008               	return
 18569  1AC5                     __end_of_Buzzer_Initialization:	
 18570                           
 18571                           	psect	intentry
 18572  0004                     __pintentry:	
 18573 ;; *************** function _ISR *****************
 18574 ;; Defined at:
 18575 ;;		line 107 in file "../src/MCU_B1.c"
 18576 ;; Parameters:    Size  Location     Type
 18577 ;;		None
 18578 ;; Auto vars:     Size  Location     Type
 18579 ;;		None
 18580 ;; Return value:  Size  Location     Type
 18581 ;;		None               void
 18582 ;; Registers used:
 18583 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18584 ;; Tracked objects:
 18585 ;;		On entry : 0/0
 18586 ;;		On exit  : 0/0
 18587 ;;		Unchanged: 0/0
 18588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18591 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18592 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18593 ;;Total ram usage:        1 bytes
 18594 ;; Hardware stack levels used:    1
 18595 ;; Hardware stack levels required when called:    4
 18596 ;; This function calls:
 18597 ;;		_IOC_ISR
 18598 ;;		_TMR1_ISR
 18599 ;; This function is called by:
 18600 ;;		Interrupt level 1
 18601 ;; This function uses a non-reentrant model
 18602 ;;
 18603                           
 18604  0004                     _ISR:	
 18605                           
 18606                           ;incstack = 0
 18607                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18608  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18609  0005  3180               	pagesel	$
 18610  0006  0020               	movlb	0	; select bank0
 18611  0007  087F               	movf	127,w
 18612  0008  00F4               	movwf	??_ISR
 18613                           
 18614                           ;MCU_B1.c: 109: IOC_ISR();
 18615  0009  319B  23DD  3180   	fcall	_IOC_ISR
 18616                           
 18617                           ;MCU_B1.c: 111: ;;
 18618                           ;MCU_B1.c: 113: TMR1_ISR();
 18619  000C  319F  27D7         	fcall	_TMR1_ISR
 18620  000E  0874               	movf	??_ISR,w
 18621  000F  0020               	movlb	0	; select bank0
 18622  0010  00FF               	movwf	127
 18623  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18624  0012  0009               	retfie
 18625  0013                     __end_of_ISR:	
 18626                           
 18627                           	psect	text129
 18628  1FD7                     __ptext129:	
 18629 ;; *************** function _TMR1_ISR *****************
 18630 ;; Defined at:
 18631 ;;		line 209 in file "../src/MCU_B1.c"
 18632 ;; Parameters:    Size  Location     Type
 18633 ;;		None
 18634 ;; Auto vars:     Size  Location     Type
 18635 ;;		None
 18636 ;; Return value:  Size  Location     Type
 18637 ;;		None               void
 18638 ;; Registers used:
 18639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18640 ;; Tracked objects:
 18641 ;;		On entry : 0/0
 18642 ;;		On exit  : 0/0
 18643 ;;		Unchanged: 0/0
 18644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18649 ;;Total ram usage:        0 bytes
 18650 ;; Hardware stack levels used:    1
 18651 ;; Hardware stack levels required when called:    2
 18652 ;; This function calls:
 18653 ;;		_setDimmerLights_IntrControl
 18654 ;; This function is called by:
 18655 ;;		_ISR
 18656 ;; This function uses a non-reentrant model
 18657 ;;
 18658                           
 18659                           
 18660                           ;psect for function _TMR1_ISR
 18661  1FD7                     _TMR1_ISR:	
 18662                           
 18663                           ;MCU_B1.c: 211: if (TMR1IE == 1 && TMR1IF == 1) {
 18664                           
 18665                           ;incstack = 0
 18666                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18667  1FD7  0021               	movlb	1	; select bank1
 18668  1FD8  1C11               	btfss	17,0	;volatile
 18669  1FD9  0008               	return
 18670  1FDA  0020               	movlb	0	; select bank0
 18671  1FDB  1C11               	btfss	17,0	;volatile
 18672  1FDC  0008               	return
 18673                           
 18674                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 18675  1FDD  30FA               	movlw	250
 18676  1FDE  0097               	movwf	23	;volatile
 18677                           
 18678                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 18679  1FDF  3038               	movlw	56
 18680  1FE0  0096               	movwf	22	;volatile
 18681                           
 18682                           ;MCU_B1.c: 214: TMR1IF = 0;
 18683  1FE1  1011               	bcf	17,0	;volatile
 18684                           
 18685                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18686  1FE2  3001               	movlw	1
 18687  1FE3  3183  2368  319F   	fcall	_setDimmerLights_IntrControl
 18688                           
 18689                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18690  1FE6  3002               	movlw	2
 18691  1FE7  3183  2368  319F   	fcall	_setDimmerLights_IntrControl
 18692                           
 18693                           ;MCU_B1.c: 235: Timer1.Count++;
 18694  1FEA  3001               	movlw	1
 18695  1FEB  0022               	movlb	2	; select bank2
 18696  1FEC  07A1               	addwf	(_Timer1^(0+256)+1),f
 18697  1FED  3000               	movlw	0
 18698  1FEE  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18699                           
 18700                           ;MCU_B1.c: 236: if (Timer1.Count == 100) {
 18701  1FEF  3001               	movlw	1
 18702  1FF0  3E20               	addlw	_Timer1& (0+255)
 18703  1FF1  0086               	movwf	6
 18704  1FF2  3001               	movlw	1	; select bank2/3
 18705  1FF3  0087               	movwf	7
 18706  1FF4  3F40               	moviw [0]fsr1
 18707  1FF5  3A64               	xorlw	100
 18708  1FF6  1D03               	skipz
 18709  1FF7  2FFA               	goto	u811_25
 18710  1FF8  3F41               	moviw [1]fsr1
 18711  1FF9  3A00               	xorlw	0
 18712  1FFA                     u811_25:	
 18713  1FFA  1D03               	skipz
 18714  1FFB  0008               	return
 18715                           
 18716                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18717  1FFC  01A1               	clrf	(_Timer1^(0+256)+1)
 18718  1FFD  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18719                           
 18720                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18721  1FFE  1420               	bsf	_Timer1^(0+256),0
 18722  1FFF  0008               	return
 18723  2000                     __end_of_TMR1_ISR:	
 18724                           
 18725                           	psect	text130
 18726  0368                     __ptext130:	
 18727 ;; *************** function _setDimmerLights_IntrControl *****************
 18728 ;; Defined at:
 18729 ;;		line 96 in file "../src/Dimmer_B1.c"
 18730 ;; Parameters:    Size  Location     Type
 18731 ;;  lights          1    wreg     unsigned char 
 18732 ;; Auto vars:     Size  Location     Type
 18733 ;;  lights          1    3[COMMON] unsigned char 
 18734 ;; Return value:  Size  Location     Type
 18735 ;;		None               void
 18736 ;; Registers used:
 18737 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18738 ;; Tracked objects:
 18739 ;;		On entry : 0/0
 18740 ;;		On exit  : 0/0
 18741 ;;		Unchanged: 0/0
 18742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18744 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18745 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18746 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18747 ;;Total ram usage:        2 bytes
 18748 ;; Hardware stack levels used:    1
 18749 ;; Hardware stack levels required when called:    1
 18750 ;; This function calls:
 18751 ;;		_DimmerIntrPointSelect
 18752 ;; This function is called by:
 18753 ;;		_TMR1_ISR
 18754 ;; This function uses a non-reentrant model
 18755 ;;
 18756                           
 18757                           
 18758                           ;psect for function _setDimmerLights_IntrControl
 18759  0368                     _setDimmerLights_IntrControl:	
 18760                           
 18761                           ;incstack = 0
 18762                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18763                           ;setDimmerLights_IntrControl@lights stored from wreg
 18764  0368  00F3               	movwf	setDimmerLights_IntrControl@lights
 18765                           
 18766                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18767  0369  0873               	movf	setDimmerLights_IntrControl@lights,w
 18768  036A  319C  242F  3183   	fcall	_DimmerIntrPointSelect
 18769                           
 18770                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18771  036D  0876               	movf	_DimmerLightsIntr,w
 18772  036E  3E02               	addlw	2
 18773  036F  0086               	movwf	6
 18774  0370  3001               	movlw	1	; select bank2/3
 18775  0371  0087               	movwf	7
 18776  0372  1D01               	btfss	1,2
 18777  0373  2B92               	goto	i1l7329
 18778                           
 18779                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18780  0374  3001               	movlw	1
 18781  0375  00F2               	movwf	??_setDimmerLights_IntrControl
 18782  0376  0876               	movf	_DimmerLightsIntr,w
 18783  0377  3E03               	addlw	3
 18784  0378  0086               	movwf	6
 18785  0379  3001               	movlw	1	; select bank2/3
 18786  037A  0087               	movwf	7
 18787  037B  0872               	movf	??_setDimmerLights_IntrControl,w
 18788  037C  0781               	addwf	1,f
 18789                           
 18790                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(75*0.8)) + 1) {
 18791  037D  0876               	movf	_DimmerLightsIntr,w
 18792  037E  3E03               	addlw	3
 18793  037F  0086               	movwf	6
 18794  0380  3001               	movlw	1	; select bank2/3
 18795  0381  0087               	movwf	7
 18796  0382  303D               	movlw	61
 18797  0383  0201               	subwf	1,w
 18798  0384  1C03               	skipc
 18799  0385  2B92               	goto	i1l7329
 18800                           
 18801                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 18802  0386  0876               	movf	_DimmerLightsIntr,w
 18803  0387  3E03               	addlw	3
 18804  0388  0086               	movwf	6
 18805  0389  3001               	movlw	1	; select bank2/3
 18806  038A  0087               	movwf	7
 18807  038B  0181               	clrf	1
 18808                           
 18809                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 18810  038C  0876               	movf	_DimmerLightsIntr,w
 18811  038D  3E02               	addlw	2
 18812  038E  0086               	movwf	6
 18813  038F  3001               	movlw	1	; select bank2/3
 18814  0390  0087               	movwf	7
 18815  0391  1101               	bcf	1,2
 18816  0392                     i1l7329:	
 18817                           
 18818                           ;Dimmer_B1.c: 241: }
 18819                           ;Dimmer_B1.c: 242: }
 18820                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 18821  0392  0A76               	incf	_DimmerLightsIntr,w
 18822  0393  0086               	movwf	6
 18823  0394  3001               	movlw	1	; select bank2/3
 18824  0395  0087               	movwf	7
 18825  0396  1C01               	btfss	1,0
 18826  0397  2BC9               	goto	i1l7345
 18827                           
 18828                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18829  0398  0876               	movf	_DimmerLightsIntr,w
 18830  0399  3E03               	addlw	3
 18831  039A  0086               	movwf	6
 18832  039B  3001               	movlw	1	; select bank2/3
 18833  039C  0087               	movwf	7
 18834  039D  0876               	movf	_DimmerLightsIntr,w
 18835  039E  3E04               	addlw	4
 18836  039F  0084               	movwf	4
 18837  03A0  3001               	movlw	1	; select bank2/3
 18838  03A1  0085               	movwf	5
 18839  03A2  0800               	movf	0,w
 18840  03A3  0201               	subwf	1,w
 18841  03A4  1C03               	skipc
 18842  03A5  0008               	return
 18843                           
 18844                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 18845  03A6  0A76               	incf	_DimmerLightsIntr,w
 18846  03A7  0086               	movwf	6
 18847  03A8  3001               	movlw	1	; select bank2/3
 18848  03A9  0087               	movwf	7
 18849  03AA  1001               	bcf	1,0
 18850                           
 18851                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 18852  03AB  0A76               	incf	_DimmerLightsIntr,w
 18853  03AC  0086               	movwf	6
 18854  03AD  3001               	movlw	1	; select bank2/3
 18855  03AE  0087               	movwf	7
 18856  03AF  1581               	bsf	1,3
 18857                           
 18858                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 18859  03B0  0876               	movf	_DimmerLightsIntr,w
 18860  03B1  0086               	movwf	6
 18861  03B2  3001               	movlw	1	; select bank2/3
 18862  03B3  0087               	movwf	7
 18863  03B4  1C01               	btfss	1,0
 18864  03B5  0008               	return
 18865                           
 18866                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 18867  03B6  0876               	movf	_DimmerLightsIntr,w
 18868  03B7  0086               	movwf	6
 18869  03B8  3001               	movlw	1	; select bank2/3
 18870  03B9  0087               	movwf	7
 18871  03BA  1001               	bcf	1,0
 18872                           
 18873                           ;Dimmer_B1.c: 252: if (lights == 1) {
 18874  03BB  0873               	movf	setDimmerLights_IntrControl@lights,w
 18875  03BC  3A01               	xorlw	1
 18876  03BD  1D03               	skipz
 18877  03BE  2BC2               	goto	i1l7341
 18878                           
 18879                           ;Dimmer_B1.c: 253: RA7 = 0;
 18880  03BF  0020               	movlb	0	; select bank0
 18881  03C0  138C               	bcf	12,7	;volatile
 18882                           
 18883                           ;Dimmer_B1.c: 255: }
 18884  03C1  0008               	return
 18885  03C2                     i1l7341:	
 18886                           
 18887                           ;Dimmer_B1.c: 258: else if (lights == 2) {
 18888  03C2  0873               	movf	setDimmerLights_IntrControl@lights,w
 18889  03C3  3A02               	xorlw	2
 18890  03C4  1D03               	skipz
 18891  03C5  0008               	return
 18892                           
 18893                           ;Dimmer_B1.c: 259: RB4 = 0;
 18894  03C6  0020               	movlb	0	; select bank0
 18895  03C7  120D               	bcf	13,4	;volatile
 18896                           
 18897                           ;Dimmer_B1.c: 260: }
 18898                           ;Dimmer_B1.c: 262: }
 18899                           ;Dimmer_B1.c: 263: }
 18900                           ;Dimmer_B1.c: 264: } else {
 18901  03C8  0008               	return
 18902  03C9                     i1l7345:	
 18903                           
 18904                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 18905  03C9  0A76               	incf	_DimmerLightsIntr,w
 18906  03CA  0086               	movwf	6
 18907  03CB  3001               	movlw	1	; select bank2/3
 18908  03CC  0087               	movwf	7
 18909  03CD  1D81               	btfss	1,3
 18910  03CE  0008               	return
 18911                           
 18912                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 18913  03CF  0A76               	incf	_DimmerLightsIntr,w
 18914  03D0  0086               	movwf	6
 18915  03D1  3001               	movlw	1	; select bank2/3
 18916  03D2  0087               	movwf	7
 18917  03D3  1181               	bcf	1,3
 18918                           
 18919                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 18920  03D4  3001               	movlw	1
 18921  03D5  00F2               	movwf	??_setDimmerLights_IntrControl
 18922  03D6  0876               	movf	_DimmerLightsIntr,w
 18923  03D7  3E05               	addlw	5
 18924  03D8  0086               	movwf	6
 18925  03D9  3001               	movlw	1	; select bank2/3
 18926  03DA  0087               	movwf	7
 18927  03DB  0872               	movf	??_setDimmerLights_IntrControl,w
 18928  03DC  0781               	addwf	1,f
 18929                           
 18930                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18931  03DD  0876               	movf	_DimmerLightsIntr,w
 18932  03DE  3E05               	addlw	5
 18933  03DF  0086               	movwf	6
 18934  03E0  3001               	movlw	1	; select bank2/3
 18935  03E1  0087               	movwf	7
 18936  03E2  0876               	movf	_DimmerLightsIntr,w
 18937  03E3  3E08               	addlw	8
 18938  03E4  0084               	movwf	4
 18939  03E5  3001               	movlw	1	; select bank2/3
 18940  03E6  0085               	movwf	5
 18941  03E7  0800               	movf	0,w
 18942  03E8  0201               	subwf	1,w
 18943  03E9  1C03               	skipc
 18944  03EA  2C2D               	goto	i1l7371
 18945                           
 18946                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 18947  03EB  0876               	movf	_DimmerLightsIntr,w
 18948  03EC  3E05               	addlw	5
 18949  03ED  0086               	movwf	6
 18950  03EE  3001               	movlw	1	; select bank2/3
 18951  03EF  0087               	movwf	7
 18952  03F0  0181               	clrf	1
 18953                           
 18954                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 18955  03F1  0A76               	incf	_DimmerLightsIntr,w
 18956  03F2  0086               	movwf	6
 18957  03F3  3001               	movlw	1	; select bank2/3
 18958  03F4  0087               	movwf	7
 18959  03F5  1F01               	btfss	1,6
 18960  03F6  0008               	return
 18961                           
 18962                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 18963  03F7  0A76               	incf	_DimmerLightsIntr,w
 18964  03F8  0086               	movwf	6
 18965  03F9  3001               	movlw	1	; select bank2/3
 18966  03FA  0087               	movwf	7
 18967  03FB  1B81               	btfsc	1,7
 18968  03FC  2C16               	goto	i1l7365
 18969                           
 18970                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(75*0.8))) {
 18971  03FD  0876               	movf	_DimmerLightsIntr,w
 18972  03FE  3E04               	addlw	4
 18973  03FF  0086               	movwf	6
 18974  0400  3001               	movlw	1	; select bank2/3
 18975  0401  0087               	movwf	7
 18976  0402  303C               	movlw	60
 18977  0403  0201               	subwf	1,w
 18978  0404  1803               	skipnc
 18979  0405  2C10               	goto	i1l7363
 18980                           
 18981                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 18982  0406  3001               	movlw	1
 18983  0407  00F2               	movwf	??_setDimmerLights_IntrControl
 18984  0408  0876               	movf	_DimmerLightsIntr,w
 18985  0409  3E04               	addlw	4
 18986  040A  0086               	movwf	6
 18987  040B  3001               	movlw	1	; select bank2/3
 18988  040C  0087               	movwf	7
 18989  040D  0872               	movf	??_setDimmerLights_IntrControl,w
 18990  040E  0781               	addwf	1,f
 18991                           
 18992                           ;Dimmer_B1.c: 274: } else {
 18993  040F  0008               	return
 18994  0410                     i1l7363:	
 18995                           
 18996                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 18997  0410  0A76               	incf	_DimmerLightsIntr,w
 18998  0411  0086               	movwf	6
 18999  0412  3001               	movlw	1	; select bank2/3
 19000  0413  0087               	movwf	7
 19001  0414  1781               	bsf	1,7
 19002                           
 19003                           ;Dimmer_B1.c: 276: }
 19004                           ;Dimmer_B1.c: 277: } else {
 19005  0415  0008               	return
 19006  0416                     i1l7365:	
 19007                           
 19008                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 19009  0416  0876               	movf	_DimmerLightsIntr,w
 19010  0417  3E04               	addlw	4
 19011  0418  0086               	movwf	6
 19012  0419  3001               	movlw	1	; select bank2/3
 19013  041A  0087               	movwf	7
 19014  041B  300D               	movlw	13
 19015  041C  0201               	subwf	1,w
 19016  041D  1C03               	skipc
 19017  041E  2C27               	goto	i1l7369
 19018                           
 19019                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 19020  041F  0876               	movf	_DimmerLightsIntr,w
 19021  0420  3E04               	addlw	4
 19022  0421  0086               	movwf	6
 19023  0422  3001               	movlw	1	; select bank2/3
 19024  0423  0087               	movwf	7
 19025  0424  3001               	movlw	1
 19026  0425  0281               	subwf	1,f
 19027                           
 19028                           ;Dimmer_B1.c: 280: } else
 19029  0426  0008               	return
 19030  0427                     i1l7369:	
 19031                           
 19032                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 19033  0427  0A76               	incf	_DimmerLightsIntr,w
 19034  0428  0086               	movwf	6
 19035  0429  3001               	movlw	1	; select bank2/3
 19036  042A  0087               	movwf	7
 19037  042B  1381               	bcf	1,7
 19038                           
 19039                           ;Dimmer_B1.c: 282: }
 19040                           ;Dimmer_B1.c: 283: }
 19041                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 19042  042C  0008               	return
 19043  042D                     i1l7371:	
 19044  042D  0876               	movf	_DimmerLightsIntr,w
 19045  042E  3E02               	addlw	2
 19046  042F  0086               	movwf	6
 19047  0430  3001               	movlw	1	; select bank2/3
 19048  0431  0087               	movwf	7
 19049  0432  1C01               	btfss	1,0
 19050  0433  0008               	return
 19051                           
 19052                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 19053  0434  0876               	movf	_DimmerLightsIntr,w
 19054  0435  3E04               	addlw	4
 19055  0436  0086               	movwf	6
 19056  0437  3001               	movlw	1	; select bank2/3
 19057  0438  0087               	movwf	7
 19058  0439  0876               	movf	_DimmerLightsIntr,w
 19059  043A  3E06               	addlw	6
 19060  043B  0084               	movwf	4
 19061  043C  3001               	movlw	1	; select bank2/3
 19062  043D  0085               	movwf	5
 19063  043E  0800               	movf	0,w
 19064  043F  0201               	subwf	1,w
 19065  0440  1803               	skipnc
 19066  0441  2C4C               	goto	i1l7377
 19067                           
 19068                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 19069  0442  3001               	movlw	1
 19070  0443  00F2               	movwf	??_setDimmerLights_IntrControl
 19071  0444  0876               	movf	_DimmerLightsIntr,w
 19072  0445  3E04               	addlw	4
 19073  0446  0086               	movwf	6
 19074  0447  3001               	movlw	1	; select bank2/3
 19075  0448  0087               	movwf	7
 19076  0449  0872               	movf	??_setDimmerLights_IntrControl,w
 19077  044A  0781               	addwf	1,f
 19078                           
 19079                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 19080  044B  0008               	return
 19081  044C                     i1l7377:	
 19082  044C  0876               	movf	_DimmerLightsIntr,w
 19083  044D  3E06               	addlw	6
 19084  044E  0086               	movwf	6
 19085  044F  3001               	movlw	1	; select bank2/3
 19086  0450  0087               	movwf	7
 19087  0451  0876               	movf	_DimmerLightsIntr,w
 19088  0452  3E04               	addlw	4
 19089  0453  0084               	movwf	4
 19090  0454  3001               	movlw	1	; select bank2/3
 19091  0455  0085               	movwf	5
 19092  0456  0800               	movf	0,w
 19093  0457  0201               	subwf	1,w
 19094  0458  1803               	skipnc
 19095  0459  2C62               	goto	i1l7381
 19096                           
 19097                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 19098  045A  0876               	movf	_DimmerLightsIntr,w
 19099  045B  3E04               	addlw	4
 19100  045C  0086               	movwf	6
 19101  045D  3001               	movlw	1	; select bank2/3
 19102  045E  0087               	movwf	7
 19103  045F  3001               	movlw	1
 19104  0460  0281               	subwf	1,f
 19105                           
 19106                           ;Dimmer_B1.c: 289: } else {
 19107  0461  0008               	return
 19108  0462                     i1l7381:	
 19109                           
 19110                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 19111  0462  0876               	movf	_DimmerLightsIntr,w
 19112  0463  3E02               	addlw	2
 19113  0464  0086               	movwf	6
 19114  0465  3001               	movlw	1	; select bank2/3
 19115  0466  0087               	movwf	7
 19116  0467  1001               	bcf	1,0
 19117  0468  0008               	return
 19118  0469                     __end_of_setDimmerLights_IntrControl:	
 19119                           
 19120                           	psect	text131
 19121  1C2F                     __ptext131:	
 19122 ;; *************** function _DimmerIntrPointSelect *****************
 19123 ;; Defined at:
 19124 ;;		line 74 in file "../src/Dimmer_B1.c"
 19125 ;; Parameters:    Size  Location     Type
 19126 ;;  lights          1    wreg     unsigned char 
 19127 ;; Auto vars:     Size  Location     Type
 19128 ;;  lights          1    1[COMMON] unsigned char 
 19129 ;; Return value:  Size  Location     Type
 19130 ;;		None               void
 19131 ;; Registers used:
 19132 ;;		wreg
 19133 ;; Tracked objects:
 19134 ;;		On entry : 0/0
 19135 ;;		On exit  : 0/0
 19136 ;;		Unchanged: 0/0
 19137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19139 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19141 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19142 ;;Total ram usage:        2 bytes
 19143 ;; Hardware stack levels used:    1
 19144 ;; This function calls:
 19145 ;;		Nothing
 19146 ;; This function is called by:
 19147 ;;		_setDimmerLights_IntrControl
 19148 ;; This function uses a non-reentrant model
 19149 ;;
 19150                           
 19151                           
 19152                           ;psect for function _DimmerIntrPointSelect
 19153  1C2F                     _DimmerIntrPointSelect:	
 19154                           
 19155                           ;incstack = 0
 19156                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19157                           ;DimmerIntrPointSelect@lights stored from wreg
 19158  1C2F  00F1               	movwf	DimmerIntrPointSelect@lights
 19159                           
 19160                           ;Dimmer_B1.c: 76: if (lights == 1) {
 19161  1C30  0871               	movf	DimmerIntrPointSelect@lights,w
 19162  1C31  3A01               	xorlw	1
 19163  1C32  1D03               	skipz
 19164  1C33  2C38               	goto	i1l736
 19165                           
 19166                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 19167  1C34  3055               	movlw	_DimmerLights1& (0+255)
 19168  1C35  00F0               	movwf	??_DimmerIntrPointSelect
 19169  1C36  0870               	movf	??_DimmerIntrPointSelect,w
 19170  1C37  00F6               	movwf	_DimmerLightsIntr
 19171  1C38                     i1l736:	
 19172                           
 19173                           ;Dimmer_B1.c: 78: }
 19174                           ;Dimmer_B1.c: 81: if (lights == 2) {
 19175  1C38  0871               	movf	DimmerIntrPointSelect@lights,w
 19176  1C39  3A02               	xorlw	2
 19177  1C3A  1D03               	skipz
 19178  1C3B  0008               	return
 19179                           
 19180                           ;Dimmer_B1.c: 82: DimmerLightsIntr = &DimmerLights2;
 19181  1C3C  30BE               	movlw	_DimmerLights2& (0+255)
 19182  1C3D  00F0               	movwf	??_DimmerIntrPointSelect
 19183  1C3E  0870               	movf	??_DimmerIntrPointSelect,w
 19184  1C3F  00F6               	movwf	_DimmerLightsIntr
 19185  1C40  0008               	return
 19186  1C41                     __end_of_DimmerIntrPointSelect:	
 19187                           
 19188                           	psect	text132
 19189  1BDD                     __ptext132:	
 19190 ;; *************** function _IOC_ISR *****************
 19191 ;; Defined at:
 19192 ;;		line 400 in file "../src/MCU_B1.c"
 19193 ;; Parameters:    Size  Location     Type
 19194 ;;		None
 19195 ;; Auto vars:     Size  Location     Type
 19196 ;;		None
 19197 ;; Return value:  Size  Location     Type
 19198 ;;		None               void
 19199 ;; Registers used:
 19200 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19201 ;; Tracked objects:
 19202 ;;		On entry : 0/0
 19203 ;;		On exit  : 0/0
 19204 ;;		Unchanged: 0/0
 19205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19210 ;;Total ram usage:        0 bytes
 19211 ;; Hardware stack levels used:    1
 19212 ;; Hardware stack levels required when called:    3
 19213 ;; This function calls:
 19214 ;;		_setDimmerReClock
 19215 ;; This function is called by:
 19216 ;;		_ISR
 19217 ;; This function uses a non-reentrant model
 19218 ;;
 19219                           
 19220                           
 19221                           ;psect for function _IOC_ISR
 19222  1BDD                     _IOC_ISR:	
 19223                           
 19224                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19225                           
 19226                           ;incstack = 0
 19227                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19228  1BDD  1D8B               	btfss	11,3	;volatile
 19229  1BDE  0008               	return
 19230  1BDF  1C0B               	btfss	11,0	;volatile
 19231  1BE0  0008               	return
 19232  1BE1  0027               	movlb	7	; select bank7
 19233  1BE2  1D16               	btfss	22,2	;volatile
 19234  1BE3  0008               	return
 19235                           
 19236                           ;MCU_B1.c: 402: IOCBF2 = 0;
 19237  1BE4  1116               	bcf	22,2	;volatile
 19238                           
 19239                           ;MCU_B1.c: 403: IOCIF = 0;
 19240  1BE5  100B               	bcf	11,0	;volatile
 19241                           
 19242                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 19243  1BE6  0021               	movlb	1	; select bank1
 19244  1BE7  1C20               	btfss	_myMain^(0+128),0
 19245  1BE8  0008               	return
 19246                           
 19247                           ;MCU_B1.c: 407: setDimmerReClock();
 19248  1BE9  319B  2302         	fcall	_setDimmerReClock
 19249  1BEB  0008               	return
 19250  1BEC                     __end_of_IOC_ISR:	
 19251                           
 19252                           	psect	text133
 19253  1B02                     __ptext133:	
 19254 ;; *************** function _setDimmerReClock *****************
 19255 ;; Defined at:
 19256 ;;		line 243 in file "../src/MCU_B1.c"
 19257 ;; Parameters:    Size  Location     Type
 19258 ;;		None
 19259 ;; Auto vars:     Size  Location     Type
 19260 ;;		None
 19261 ;; Return value:  Size  Location     Type
 19262 ;;		None               void
 19263 ;; Registers used:
 19264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19265 ;; Tracked objects:
 19266 ;;		On entry : 0/0
 19267 ;;		On exit  : 0/0
 19268 ;;		Unchanged: 0/0
 19269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19274 ;;Total ram usage:        0 bytes
 19275 ;; Hardware stack levels used:    1
 19276 ;; Hardware stack levels required when called:    2
 19277 ;; This function calls:
 19278 ;;		_setDimmerLights_IntrIOC_GO
 19279 ;; This function is called by:
 19280 ;;		_IOC_ISR
 19281 ;; This function uses a non-reentrant model
 19282 ;;
 19283                           
 19284                           
 19285                           ;psect for function _setDimmerReClock
 19286  1B02                     _setDimmerReClock:	
 19287                           
 19288                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 19289                           
 19290                           ;incstack = 0
 19291                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19292  1B02  3001               	movlw	1
 19293  1B03  3192  22AC  319B   	fcall	_setDimmerLights_IntrIOC_GO
 19294                           
 19295                           ;MCU_B1.c: 252: setDimmerLights_IntrIOC_GO(2);
 19296  1B06  3002               	movlw	2
 19297  1B07  3192  22AC         	fcall	_setDimmerLights_IntrIOC_GO
 19298  1B09  0008               	return
 19299  1B0A                     __end_of_setDimmerReClock:	
 19300                           
 19301                           	psect	text134
 19302  12AC                     __ptext134:	
 19303 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19304 ;; Defined at:
 19305 ;;		line 28 in file "../src/Dimmer_B1.c"
 19306 ;; Parameters:    Size  Location     Type
 19307 ;;  lights          1    wreg     unsigned char 
 19308 ;; Auto vars:     Size  Location     Type
 19309 ;;  lights          1    2[COMMON] unsigned char 
 19310 ;; Return value:  Size  Location     Type
 19311 ;;		None               void
 19312 ;; Registers used:
 19313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19314 ;; Tracked objects:
 19315 ;;		On entry : 0/0
 19316 ;;		On exit  : 0/0
 19317 ;;		Unchanged: 0/0
 19318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19322 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19323 ;;Total ram usage:        1 bytes
 19324 ;; Hardware stack levels used:    1
 19325 ;; Hardware stack levels required when called:    1
 19326 ;; This function calls:
 19327 ;;		_DimmerIntrIOCPointSelect
 19328 ;; This function is called by:
 19329 ;;		_setDimmerReClock
 19330 ;; This function uses a non-reentrant model
 19331 ;;
 19332                           
 19333                           
 19334                           ;psect for function _setDimmerLights_IntrIOC_GO
 19335  12AC                     _setDimmerLights_IntrIOC_GO:	
 19336                           
 19337                           ;incstack = 0
 19338                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19339                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19340  12AC  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19341                           
 19342                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19343  12AD  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19344  12AE  319C  24E8  3192   	fcall	_DimmerIntrIOCPointSelect
 19345                           
 19346                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 1) {
 19347  12B1  0021               	movlb	1	; select bank1
 19348  12B2  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19349  12B3  3E02               	addlw	2
 19350  12B4  0086               	movwf	6
 19351  12B5  3001               	movlw	1	; select bank2/3
 19352  12B6  0087               	movwf	7
 19353  12B7  1901               	btfsc	1,2
 19354  12B8  0008               	return
 19355  12B9  0020               	movlb	0	; select bank0
 19356  12BA  1D0D               	btfss	13,2	;volatile
 19357  12BB  0008               	return
 19358                           
 19359                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 19360  12BC  0021               	movlb	1	; select bank1
 19361  12BD  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19362  12BE  3E02               	addlw	2
 19363  12BF  0086               	movwf	6
 19364  12C0  3001               	movlw	1	; select bank2/3
 19365  12C1  0087               	movwf	7
 19366  12C2  1501               	bsf	1,2
 19367                           
 19368                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 19369  12C3  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19370  12C4  0086               	movwf	6
 19371  12C5  3001               	movlw	1	; select bank2/3
 19372  12C6  0087               	movwf	7
 19373  12C7  1401               	bsf	1,0
 19374                           
 19375                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 19376  12C8  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19377  12C9  0086               	movwf	6
 19378  12CA  3001               	movlw	1	; select bank2/3
 19379  12CB  0087               	movwf	7
 19380  12CC  1481               	bsf	1,1
 19381                           
 19382                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 19383  12CD  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 19384                           
 19385                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19386  12CE  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19387  12CF  0086               	movwf	6
 19388  12D0  3001               	movlw	1	; select bank2/3
 19389  12D1  0087               	movwf	7
 19390  12D2  1D01               	btfss	1,2
 19391  12D3  0008               	return
 19392                           
 19393                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 19394  12D4  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19395  12D5  0086               	movwf	6
 19396  12D6  3001               	movlw	1	; select bank2/3
 19397  12D7  0087               	movwf	7
 19398  12D8  1401               	bsf	1,0
 19399                           
 19400                           ;Dimmer_B1.c: 55: if (lights == 1) {
 19401  12D9  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19402  12DA  3A01               	xorlw	1
 19403  12DB  1D03               	skipz
 19404  12DC  2AE0               	goto	i1l6965
 19405                           
 19406                           ;Dimmer_B1.c: 56: RA7 = 1;
 19407  12DD  0020               	movlb	0	; select bank0
 19408  12DE  178C               	bsf	12,7	;volatile
 19409                           
 19410                           ;Dimmer_B1.c: 58: }
 19411  12DF  0008               	return
 19412  12E0                     i1l6965:	
 19413                           
 19414                           ;Dimmer_B1.c: 61: else if (lights == 2) {
 19415  12E0  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19416  12E1  3A02               	xorlw	2
 19417  12E2  1D03               	skipz
 19418  12E3  0008               	return
 19419                           
 19420                           ;Dimmer_B1.c: 62: RB4 = 1;
 19421  12E4  0020               	movlb	0	; select bank0
 19422  12E5  160D               	bsf	13,4	;volatile
 19423  12E6  0008               	return
 19424  12E7                     __end_of_setDimmerLights_IntrIOC_GO:	
 19425                           
 19426                           	psect	text135
 19427  1CE8                     __ptext135:	
 19428 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19429 ;; Defined at:
 19430 ;;		line 8 in file "../src/Dimmer_B1.c"
 19431 ;; Parameters:    Size  Location     Type
 19432 ;;  lights          1    wreg     unsigned char 
 19433 ;; Auto vars:     Size  Location     Type
 19434 ;;  lights          1    1[COMMON] unsigned char 
 19435 ;; Return value:  Size  Location     Type
 19436 ;;		None               void
 19437 ;; Registers used:
 19438 ;;		wreg
 19439 ;; Tracked objects:
 19440 ;;		On entry : 0/0
 19441 ;;		On exit  : 0/0
 19442 ;;		Unchanged: 0/0
 19443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19445 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19446 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19447 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19448 ;;Total ram usage:        2 bytes
 19449 ;; Hardware stack levels used:    1
 19450 ;; This function calls:
 19451 ;;		Nothing
 19452 ;; This function is called by:
 19453 ;;		_setDimmerLights_IntrIOC_GO
 19454 ;; This function uses a non-reentrant model
 19455 ;;
 19456                           
 19457                           
 19458                           ;psect for function _DimmerIntrIOCPointSelect
 19459  1CE8                     _DimmerIntrIOCPointSelect:	
 19460                           
 19461                           ;incstack = 0
 19462                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19463                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19464  1CE8  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19465                           
 19466                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19467  1CE9  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19468  1CEA  3A01               	xorlw	1
 19469  1CEB  1D03               	skipz
 19470  1CEC  2CF2               	goto	i1l723
 19471                           
 19472                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19473  1CED  3055               	movlw	_DimmerLights1& (0+255)
 19474  1CEE  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19475  1CEF  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19476  1CF0  0021               	movlb	1	; select bank1
 19477  1CF1  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 19478  1CF2                     i1l723:	
 19479                           
 19480                           ;Dimmer_B1.c: 12: }
 19481                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19482  1CF2  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19483  1CF3  3A02               	xorlw	2
 19484  1CF4  1D03               	skipz
 19485  1CF5  0008               	return
 19486                           
 19487                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19488  1CF6  30BE               	movlw	_DimmerLights2& (0+255)
 19489  1CF7  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19490  1CF8  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19491  1CF9  0021               	movlb	1	; select bank1
 19492  1CFA  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 19493  1CFB  0008               	return
 19494  1CFC                     __end_of_DimmerIntrIOCPointSelect:	
 19495  007E                     btemp	set	126	;btemp
 19496  007E                     pic14e$flags	set	126
 19497  007E                     wtemp	set	126
 19498  007E                     wtemp0	set	126
 19499  0080                     wtemp1	set	128
 19500  0082                     wtemp2	set	130
 19501  0084                     wtemp3	set	132
 19502  0086                     wtemp4	set	134
 19503  0088                     wtemp5	set	136
 19504  007F                     wtemp6	set	127
 19505  007E                     ttemp	set	126
 19506  007E                     ttemp0	set	126
 19507  0081                     ttemp1	set	129
 19508  0084                     ttemp2	set	132
 19509  0087                     ttemp3	set	135
 19510  007F                     ttemp4	set	127
 19511  007E                     ltemp	set	126
 19512  007E                     ltemp0	set	126
 19513  0082                     ltemp1	set	130
 19514  0086                     ltemp2	set	134
 19515  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         270
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     79      80
    BANK1            80      7      79
    BANK2            80      0      78
    BANK3            80      0      79
    BANK4            80      7      76
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights22	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_getDimmerLights_Allow_Condition
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Exception_Main
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  130241
                                              3 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    8404
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    8404
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0     405
                                              7 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45972
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   45972
                                              5 BANK1      1     1      0
                                              0 BANK4      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44813
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40672
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13863
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1966
                                             13 BANK0      5     5      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18820
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16360
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14126
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1890
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      80
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     232
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1243
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    7294
                                             75 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35750
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   35407
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17731
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   17147
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     989
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Allow_Condition                      6     6      0     281
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (5) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      71
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5972
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5972
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4182
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3705
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3423
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0     110
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
           _getLoad_OK
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      7      4C      13       95.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     192      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     192      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Dec 18 13:22:07 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l96 177F  
                                      l98 1793                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1089                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0077  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1D24  
                  __end_of_setDelayOff_GO 164F                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 155A  
                    _setDimmerLights_Line 1DB3                              ___ftadd@sign 004B  
                                     l110 1461                                       l106 1467  
                                     l107 1463                                       l108 1451  
                    _setDimmerLights_SwOn 086A                                       l255 0A22  
                                     l328 1DD7                                       l329 1DD9  
                                     l372 1FB6                                       l809 1EFC  
                                     l768 1C93                                       l858 1D2D  
                                     l859 1D35                                       _GIE 005F  
                                     _CRC 00C9                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0014  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CD  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00BA                                       _ISR 0004  
                                     _WDT 0125              getDimmerLights_Status@lights 0022  
                                     _Sw1 01CF                                       _Sw2 01D8  
               setDimmerLights_Adj@status 006B                  __end_of_CC2500_WriteByte 1DE4  
                   _Buzzer_Initialization 1AC2                           __end_of_ADC_Set 1B02  
                         ?_DelayTimejudge 0070                                       wreg 0009  
    setDimmerLights_Initialization@lights 0023              getDimmerLights_Status@status 0023  
                         _setDimmerLights 15AA                         ??_getSw_KeyStatus 0020  
                   _setDimmerLights_AdjRF 1F68                     _setDimmerLights_AdjOn 1205  
                                    ?_ISR 0070           setDimmerLights_ErrorClose@count 00E8  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1BEC  
                              Load_Main@i 002C                              ___ftdiv@sign 003D  
                                    l1030 1ED1                                      l1031 1EDB  
                                    l1065 13D9                                      l1333 11FF  
                                    l3031 0956                                      l2313 11CB  
                ?_DimmerLightsPointSelect 0070                                      l1347 1132  
                                    l3060 0508                                      l1356 14B4  
                                    l3037 096D                                      l2261 0E6A  
                                    l2253 0E3F                                      l1607 063E  
                                    l2327 0B7A                                      l2264 0E94  
                                    l2249 0EA3                                      l1545 1321  
                                    l1730 007B                                      l1731 0076  
                                    l2291 1CB4                                      l2339 134D  
                                    l2259 0E68                                      l1572 117E  
                                    l1900 0FF6                                      l1573 1199  
                         __end_of_IOC_Set 1BAA                                      l1727 01EF  
                                    l1577 1195                                      l1737 01CB  
                                    l1729 007F                                      l1738 01C9  
                                    l2643 1DA5                                      l2665 035F  
                                    l2667 0238                                      l2870 1E73  
                                    l1895 0FFC                     _setDimmerLights_SwOff 14BC  
                                    l9013 0881                                      l9031 08B8  
                                    l9023 0890                                      l9015 0884  
                                    l9033 08BE                                      l9025 0895  
                                    l9045 14F1                                      l9303 1282  
                                    l9127 1146                                      l9065 17F1  
                                    l9241 154D                                      l9315 1296  
                                    l9403 168F                                      l9411 1697  
                                    l9261 1E06                                      l8605 1C44  
                                    l9341 1179                                      l9325 12A5  
                                    l9317 1299                                      l9501 0A35  
                                    l9237 153E                                      l9263 1E09  
                                    l9351 1190                                      l9343 1182  
                                    l9327 12AA                                      l9407 1693  
                                    l9175 1E5D                                      l9503 0A38  
                                    l9255 133C                                      l8609 1C4A  
                                    l9361 1DC3                                      l9177 1E63  
                                    l9521 0B82                                      l9267 1E0F  
                                    l9195 09C1                                      l8627 1F51  
                                    l8643 0498                                      l8715 0ED4  
                                    l9283 1F9F                                      l9507 0A3E  
                                    l9451 0B53                                      l9443 0B15  
                                    l8901 16B8                                      l9197 0992  
                                    l9373 165E                                      l9381 1666  
                                    l8581 0933                                      l8661 04C1  
                                    l8709 0EBE                                      l9277 1F96  
                                    l9541 0BA4                                      l9525 0B88  
                                    l9453 0B57                     _myMain_Initialization 0800  
                                    l8911 16C0                                      l9199 09C7  
                                    l8591 095B                                      l8583 093D  
                                    l8671 04E3                                      l8639 0491  
                                    l9703 111A                                      l9279 1F99  
                                    l9535 0B9B                                      l9519 0B7F  
                                    l9527 0B8B                                      l9471 09F1  
                                    l8751 0732                                      l9455 0B5B  
                                    l9447 0B3A                                      l8913 16CC  
                                    l8593 0963                                      l8585 0942  
                                    l8577 092C                                      l8681 0504  
                                    l8673 04E7                                      l8649 04A7  
                                    l8737 0F2E                                      l8729 0F15  
                                    l8809 0D03                                      l9625 15DA  
                                    l9537 0B9E                                      l9449 0B4F  
                                    l9801 0C54                                      l8851 1D07  
                                    l8923 16E7                                      l9387 166F  
                                    l9395 1677                                      l8667 04D4  
                                    l8843 0D68                                      l8835 0D4E  
                                    l8827 0D33                                      l9635 15F0  
                                    l9475 09F7                                      l9459 0B5F  
                                    l9581 1FD2                                      l8685 051A  
                                    l8669 04DE                                      l8837 0D57  
                                    l8829 0D41                                      l9645 170E  
                                    l9557 0BB6                                      l9493 0A28  
                                    l9469 09EE                                      l8781 079F  
                                    l8773 078B                                      l8757 0748  
                                    l8927 16EF                                      l8919 16DE  
                                    l8679 04FA                                      l8839 0D5A  
                                    l9559 0BCF                                      l9495 0A2B  
                                    l9807 0C5F                                      l9831 1EB4  
                                    l9593 1078                                      l8689 052C  
                                    l9489 0A09                                      l9753 1C29  
                                    l8785 07A7                                      l8769 0783  
                                    l9817 1D57                                      l9841 1EC0  
                                    l9833 1EB6                                      _CFGS 0CAE  
                                    l9579 1FC7                                      l9587 106F  
                                    l8867 10DB                                      l8971 162E  
                                    l8699 0547                                      l9499 0A31  
                                    l9771 0C0E                                      l9843 1EC4  
                                    l9589 1072                                      l9861 1408  
                                    l9781 0C1F                                      l9871 1418  
                                    l8895 16AD                                      l8975 1634  
                            __CFG_WDTE$ON 0000                                      l9865 140E  
                                    l8977 163A                                      l9961 1CAD  
                                    l9793 0C35                                      l9875 141E  
                                    l9859 1405                                      l9869 1415  
                                    l9983 15A4                                      l9975 1583  
                                    l9977 1589                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PEIE 005E  
                                    u9005 0974                                      u9205 04E8  
                                    u9145 04C2                                      u9305 0EE6  
                                    u9235 04FB                                      u9315 0EF6  
                                    u9325 0F16                                      u9175 04D5  
                                    u9335 0F25                                      u9415 078C  
                                    u9345 0F2F                                      u9505 0D0A  
                                    u9425 0792                                      u9535 0D34  
                                    u9455 07A8                                      u9705 16CD  
                                    u9625 10C7                                      u9465 07AE  
                                    u9385 0754                                      u9715 16D7  
                                    u9395 0764                                      u9725 16DF  
                                    u9565 0D4F                                      u8935 0938  
                                    u8955 0951                                      _LWLO 0CAD  
                                    u9685 16C3                                      u8975 095E  
                                    u9960 17B1                                      u9965 17AF  
                                    _RSSI 00CE                                      _WREN 0CAA  
                                    _Buz1 00AE                                      _Load 0127  
                                    _Temp 00D6                                      _main 080F  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 0923  
                         __end_of_RF_Main 1ACE                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1BC2  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                        _setDimmerReClock 1B02                                      start 0013  
                                    ttemp 007E                                      wtemp 007E  
                     DelayTimejudge@value 0029                __end_of_setRFSW_AdjControl 1361  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D            getAll_DimmerLights_AdjSw@adjsw 0026  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2330 0023  
    _getDimmerLights_Allow_Condition$2331 0024      _getDimmerLights_Allow_Condition$2329 0022  
                       ?_getDimmer_LoadGO 0070            getAll_DimmerLights_AdjSw@count 0023  
                                   ??_ISR 0074                              ___fttol@exp1 005B  
                            ___fttol@lval 0057   __end_of_getDimmerLights_Allow_Condition 12AC  
__size_of_getDimmerLights_Allow_Condition 003A         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1272  
                  _getDimmerLights_Status 1BFC                        ??_getDimmer_LoadGO 0020  
          __size_of_DimmerIntrPointSelect 0012                          __end_of_LED_Main 1B9E  
        setDimmerLights_ErrorClose@lights 00E9             __end_of_DimmerIntrPointSelect 1C41  
                   ?_getDimmerLights_Line 0070                                     l10013 1102  
                                   l10015 10E5                                     l10111 1F19  
                                   l10017 1107                                     l10105 1F11  
                                   l10123 1475                                     l10107 1F14  
                                   l10221 0FE3                                     l10207 0FCB  
                                   l10129 148A                                     l10241 0E26  
                                   l10321 1DB0                                     l10209 0FCD  
                                   l10243 0E29                                     l10411 035B  
                                   l10219 0FE2                                     l10317 1DAA  
                                   l10255 0E41                                     l10351 0266  
                                   l10335 0223                                     l10417 1E6D  
                                   l10361 0298                                     l10177 0F6C  
                                   l10507 1EFE                                     l10283 0E7B  
                                   l10259 0E44                                     l10445 1262  
                                   l10437 1244                                     l10293 0E86  
                                   l10463 143B                                     l10439 1250  
                                   l10375 02D6                                     l10537 06B1  
                                   l10449 126B                                     l10385 0308  
                                   l10715 005D                                     l10635 0CAF  
                                   l10627 0C8A                                     l10805 01AB  
                                   l10733 007E                                     l10911 0617  
                                   l10655 0CE4                                     l10639 0CB7  
                   ?_setDimmerLights_Main 0070                                     l10913 0621  
                                   l10907 060F                                     l10843 01DE  
                                   l10755 00D4                                     l10909 05E6  
                                   l10781 015D                                     l10749 00A2  
                                   l10669 1390                                     l10919 0634  
                                   l10871 057E                                     l10791 0189  
                                   l10687 1301                                     l10881 059C  
                                   l10891 059F                                     l10787 016A  
                                   l10795 0195                                     l10893 05D0  
                                   l10877 058D                                     l10889 05C8  
                                   l10985 0833                                     l10989 083E  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0066  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 0268  
                         __end_of___awdiv 16F6                           __end_of___ftadd 055F  
                         __end_of___ftdiv 0F50                           __end_of___ftneg 1B43  
                                   u10015 1D83                                     u10105 099D  
                         __end_of___ftmul 07CF                                     u12105 1251  
                                   u12115 125B                           ___awdiv@divisor 0020  
                                   u12125 1263                                     u12045 1E74  
                                   u12055 1E79                                     _T1CON 0018  
                                   u12155 1431                                     u12315 11F6  
                                   u10725 1FBC                           __end_of___fttol 0D71  
                                   u12085 1247                                     u11365 10EE  
                                   u12425 0CD1                                     u11565 0FB3  
                                   u12525 1319                                     u12375 0C9D  
                                   u11665 0E3C                                     u11585 0FD3  
                                   u12475 1387                                     u12485 1396  
                                   u12920 0615                                     u12665 00A0  
                                   u12675 00D2                                     u12925 05F1  
                                   u12765 019C                                     u12685 0116  
                                   _IOCBF 0396                                     u12890 05CE  
                                   _IOCBN 0395                                     u12895 05AA  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 1272  
                                   i1l723 1CF2                                     i1l736 1C38  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                                     _WPUB2 106A  
                 __end_of_Timeout_Counter 1D89                             __CFG_WRT$HALF 0000  
      __end_of_setDimmerLights_IntrIOC_GO 12E7                _setDimmerLights_IntrIOC_GO 12AC  
                        __end_of_TMR1_ISR 2000                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A        __end_of_setDimmerLights_ErrorClose 09E6  
              _setDimmerLights_ErrorClose 0984                          __end_of_TMR1_Set 1BB6  
                                   _getAD 1F06                             ___awtoft@sign 002D  
             DimmerIntrPointSelect@lights 0071                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1C89               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03C0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1D4C  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012              __end_of_getMain_LightsStatus 1CAF  
           __end_of_setLED_Initialization 1C65                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 17A7  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0068  
                  ??_Flash_Memory_Erasing 0020                           _getPercentValue 0AAF  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0015  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 0010                         ??_setPercentValue 005C  
                            __end_of_main 086A                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 1AE4                        ??_setMemory_Modify 0020  
                          _Exception_Main 055F                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                   __end_of_setDimmerLights 15FC  
                    _setSw_Initialization 1B32                                    ??_main 006F  
                           ___fttol@sign1 0056                              ?_setLog_Code 0070  
                 _setControl_Lights_Table 0B14                            _setMemory_Data 1B6E  
                  ?_Buzzer_Initialization 0070         __size_of_DimmerIntrIOCPointSelect 0014  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 03C0  
               ?_DimmerIntrIOCPointSelect 0070                                 ??_IOC_ISR 0073  
                               ??_IOC_Set 0020           __end_of_DimmerLightsPointSelect 1C9C  
                  ?_setDimmerLights_AdjRF 0070                    ?_setDimmerLights_AdjOn 0070  
                __size_of_setRFSW_Control 004F                   ??_Switch_Initialization 0025  
                    ??_setRF_DimmerLights 0067                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 08C6                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 006F                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1B2A                                 ??_WDT_Set 0020  
                        __end_of___awtoft 1F68                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 0984                  _getMain_All_Error_Status 1168  
                                  _IOCBF2 1CB2                                    i1l7341 03C2  
                                  i1l7345 03C9                                    i1l7329 0392  
                                  i1l7363 0410                                    i1l7371 042D  
                                  i1l7381 0462                                    i1l7365 0416  
                                  i1l7377 044C                                    i1l7369 0427  
                                  i1l6965 12E0                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0026                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
                                  _OSCCON 0099                                    u811_25 1FFA  
                      __size_of_Load_Main 01AC                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1DE4  
                                  _WDTCON 0097                      Exception_Main@i_3620 00EC  
                      DelayTime_1us@count 0020            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 1D9E                                    _Dimmer 00C6  
                                  _DlySw1 01E1                                    _DlySw2 01E6  
              __end_of_Mcu_Initialization 1C77                       __end_of_Buzzer_Main 146E  
                                  _Memory 0220                                    _Timer1 0120  
                                  ___bmul 1C41                    __end_of_Exception_Main 063F  
                    Load_Main@Load_Status 002B                      Exception_Main@lights 00EE  
                                  ___wmul 1E6A                                 ??___awdiv 0024  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 0014  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                   setDimmerLights@lights 006D                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
             setDimmerLights_AdjRF@lights 0063                    ??_setDimmerLights_Main 006E  
                  ??_setDimmerLights_Line 0020                                    _r_data 00D4  
                                  _s_data 00D5                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 164F                                    _myMain 00A0  
                  __end_of_setMemory_Data 1B7A                          _DimmerLightsIntr 0076  
                   ?_setSw_Initialization 0070                     setDimmerLights@status 006B  
                        ___awdiv@quotient 0027                                    _setBuz 174E  
                      __size_of_Temp_Main 0003               __end_of_Load_Initialization 1AC8  
        ??_setDimmerLights_Initialization 0022           ?_setDimmerLights_Initialization 0070  
                   ___ftmul@f3_as_product 0039       __end_of_setDimmerLights_IntrControl 0469  
             _setDimmerLights_IntrControl 0368                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1CE8  
             getMain_Lights_Count@status1 0021               getMain_Lights_Count@status2 0022  
                   __end_of_SwPointSelect 1D60              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 0020  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0020                                _TouchPower 1D9E  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
              ?_getAll_DimmerLights_AdjSw 0070                   __end_of_getPercentValue 0B14  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0045  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5260 0022  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2310 002E  
               _setDimmerLights_SwOn$2311 002F                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
          DimmerIntrIOCPointSelect@lights 0071                           ?_Exception_Main 0070  
                            __pidataBANK4 1F26                             __end_of_getAD 1F26  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0058                        _LED_Initialization 1B86  
                         _getSw_KeyStatus 1EA7                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 0062  
                        ?_setDimmerLights 006B                      _getMain_Lights_Count 1D38  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01F5  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1C9C  
              __end_of_set_TimeoutCleared 1AE9                  __end_of_setDimmerReClock 1B0A  
                      __size_of_getRxData 007F                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1BCF  
                          _DimmerLights11 00CA                            _DimmerLights22 00CB  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0023                       _Temp_Initialization 1ACE  
                      ??_CC2500_WriteByte 0020                                __pbssBANK0 006F  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 1424  
                       ??_setRFSW_Control 006B                         __end_of_Temp_Main 1AD4  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1B0A                                __pnvCOMMON 0079  
                           ??_Switch_Main 006E                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 006F                         LedPointSelect@led 0021  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 080F                            _getDelayOff_GO 1BEC  
                     _CC2500_WriteCommand 1DFD                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020          __size_of_DimmerLightsPointSelect 0013  
                        ??_setDelayOff_GO 0068             ??_DimmerLights_Initialization 0024  
                                 ?___wmul 0020                                ??_TMR1_ISR 0074  
                           ?_setTemp_Main 0070                                _getLoad_AD 0C69  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1B1A  
                      __size_of_setTxData 009B                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1AFB                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 1361                                ??_WDT_Main 0020  
                   ?_getMain_LightsStatus 0070              __end_of_setRF_Initialization 1B57  
                      _setRFSW_AdjControl 1323                    __end_of_setProductData 1BDD  
                                 _IOC_ISR 1BDD                                   _IOC_Set 1B9E  
                    __size_of_setLog_Code 0034     getDimmerLights_Allow_Condition@lights 0025  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 11CF  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1E17  
              getAll_DimmerLights_AdjSw@i 0024               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 006F                    __size_of_CC2500_TxData 0064  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1ACB  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1BB6           __end_of_setControl_Lights_Table 0B7B  
                         setRF_Main@error 0267                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070                           _setPercentValue 0A4A  
                 ??_setLoad_AH_AL_Restore 0020                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1B6E                           __size_of_IO_Set 0019  
                       __end_of_getBuz_GO 1C1E                       ??_Flash_Memory_Main 0026  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1BFC  
                                 _VarLED1 016A                                   _VarLED2 01EB  
          __end_of_getDimmerLights_Status 1C0D                         __end_of_getRxData 0C69  
                 __end_of_getSw_KeyStatus 1EC6                  _CC2500_registers_address 1000  
        __end_of_DimmerIntrIOCPointSelect 1CFC                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0068                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 16A2                                   ___ftadd 0469  
                                 ___ftdiv 0EA7                                   ___ftneg 1B3A  
                         __size_of___wmul 001E                                   ___ftmul 071B  
                                 ___fttol 0CEA                       __end_of_Switch_Main 1B62  
                                 ___lwdiv 123B                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1C1E                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0053  
                    setRFSW_AdjControl@sw 006B                           __size_of_setBuz 0059  
                                 __ptext1 12E7                                   __ptext2 0800  
                                 __ptext3 1361                                   __ptext4 0C69  
                                 __ptext5 1F06                                   __ptext6 1C77  
                                 __ptext7 0002                                   __ptext8 1AD1  
                                 __ptext9 0F50                   ??_setDimmerLights_AdjRF 0062  
                 ??_setDimmerLights_AdjOn 0027                 __size_of_CC2500_SIDLEMode 0004  
                   _DimmerIntrPointSelect 1C2F                              __size_of_ISR 000F  
              ??_getMain_All_Error_Status 0020                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 1205                 __end_of_Flash_Memory_Read 1E31  
                 ??_setDimmerLights_SwOff 006A                                _setRF_Main 0E0C  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1B12  
                       _DimmerLights_Main 1EE6            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1AEF                __end_of_CC2500_ClearRXFIFO 1AD8  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1ADC  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 0079  
                          _LedPointSelect 1EC6                       _DelayOffPointSelect 1CFC  
                                 clrloop0 1AF6            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1BCF                      end_of_initialization 0045  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1089  
                           _DelayTime_1us 1FB1                         __end_of_setTxData 0E0C  
              __end_of_Flash_Memory_Write 1139                                   init_ram 1AEF  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006F  
                    Flash_Memory_Read@ret 0023                                   initloop 1AF0  
                              _setSw_Main 01F5                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 0031                         _CC2500_ReadStatus 1F8C  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1C53  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0B7B                             _CC2500_TxData 09E6  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 146E  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                     _Flash_Memory_Unlock 1B43                       ??_CC2500_ReadStatus 0022  
                  ??_getMain_LightsStatus 0020                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1F06                        _Mcu_Initialization 1C65  
                __size_of_CC2500_PowerRST 0044                      __end_of_my_MainTimer 1323  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1EE6                   __end_of_setPercentValue 0AAF  
                __size_of_CC2500_WriteREG 0023                 __end_of_CC2500_InitSetREG 10B3  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0020  
                     _setDimmerLights_Adj 16F6                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 1FB1                             ?_RF_RxDisable 0070  
         getMain_All_Error_Status@command 0025               ??_getAll_DimmerLights_AdjSw 0022  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006B  
                          __end_of_IO_Set 1DFD                      _setRF_Initialization 1B4C  
                      _setMemory_LoopSave 1CD5                               _Switch_Main 1B57  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1C89                   __end_of_getRF_KeyStatus 1C2F  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1D89                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 006B  
                          __end_of___bmul 1C53                      setRF_DimmerLights@on 0066  
                _DimmerIntrIOCPointSelect 1CE8                            __end_of___wmul 1E88  
                       getSw_KeyStatus@sw 0024                         __size_of_TMR1_ISR 0029  
           __size_of_getDimmerLights_Line 0014                    ?_DimmerIntrPointSelect 0070  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0050  
                          __end_of_setLED 16A2             __size_of_setDimmerLights_Line 0018  
           __size_of_setDimmerLights_SwOn 005C                            __end_of_setBuz 17A7  
                    _CC2500_FrequencyCabr 1B62                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 150B  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0070  
                     start_initialization 0015                         _setRF_DimmerValue 1139  
                         ?_LedPointSelect 0070                                 _Load_Main 0049  
                             __end_of_ISR 0013                          _getDimmer_LoadGO 1B22  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                      ??_setDimmerReClock 0073                        ?_setRF_DimmerValue 0070  
              __end_of_CC2500_InitPATable 1EA7           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 1000                            ??_RF_RxDisable 0024  
                     __size_of_getLoad_AD 0081                              ?_Buzzer_Main 0070  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1AE4  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0166                               ?_setSw_Main 0070  
                     ??_setRF_DimmerValue 0066                       __size_of_getTemp_AD 003E  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1AD1                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00CF  
                   setProductData@address 0065                       Exception_Main@count 00E8  
                 setRF_DimmerValue@lights 0067                       Exception_Main@error 00E9  
                                ??___bmul 0021                     ??_setDimmerLights_Adj 006C  
                                ??___wmul 0024                    __size_of_SwPointSelect 0014  
                               _Tx_Length 00D2                               __pdataBANK4 0245  
                                ??_setLED 0023                 _getAll_DimmerLights_AdjSw 10DD  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 006F                         ??_CC2500_ReadByte 0020  
        __end_of_getMain_All_Error_Status 119B                          _CC2500_SIDLEMode 1ADC  
              __size_of_DimmerLights_Main 0020                 __end_of_setRF_DimmerValue 1168  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                             __pbssCOMMON 0075                                  ?_IOC_Set 0070  
                               ___latbits 0003                          _setMemory_Modify 1CC2  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E8                             __pcstackBANK4 0265  
                    ??_set_TimeoutCleared 0020                          ?_setPercentValue 0070  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                __size_of_setDimmerLights 0052                             DlyOff_Main@sw 006E  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 005D                __size_of_CC2500_ReadStatus 0025  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 0155                             _DimmerLights2 01BE  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0066  
               ??_DimmerLightsPointSelect 0020            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1E4D  
                setRFSW_AdjControl@status 006A                           ??_CC2500_TxData 0024  
                          getRxData@error 00EC               __size_of_LED_Initialization 000C  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 00EA  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 009B  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                              setBuz@time 0029                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002A                    _setTemp_Initialization 1AC1  
                               _getBuz_GO 1C0D       __end_of_Flash_Memory_Initialization 071B  
             _Flash_Memory_Initialization 063F                                  ?___awdiv 0020  
                               __ptext100 15FC                                 __ptext101 1BCF  
                               __ptext110 1AE9                                 __ptext102 10B3  
                               __ptext111 1CFC                                 __ptext103 1C41  
                               __ptext120 1AD8                                 __ptext112 1D89  
                               __ptext104 1BEC                                 __ptext121 1AD4  
                               __ptext113 1ADC                                 __ptext105 1BFC  
                               __ptext130 0368                                 __ptext122 1DFD  
                               __ptext114 13E0                                 __ptext106 1C89  
                               __ptext131 1C2F                                 __ptext123 1AE4  
                               __ptext115 1089                                 __ptext107 174E  
                               __ptext132 1BDD                                 __ptext124 1D74  
                               __ptext116 1E88                                 __ptext108 16A2  
                               __ptext133 1B02                                 __ptext125 1DCB  
                               __ptext117 1066                                 __ptext109 1B0A  
                                ?___ftadd 0041                                 __ptext134 12AC  
                               __ptext126 1424                                 __ptext118 1B62  
                               __ptext135 1CE8                                 __ptext127 1AC2  
                               __ptext119 1FB1                                 __ptext129 1FD7  
                               _getRxData 0BEA                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 155A  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0008  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1AC5  
                        getPercentValue@i 005F                          setPercentValue@i 005F  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0021  
                      __end_of_TouchPower 1DB3                           DelayTimejudge@i 0026  
                         DelayTimejudge@j 0027                           DelayTimejudge@k 0028  
                     __size_of_setSw_Main 0173              CC2500_ReadStatus@status_addr 0023  
          __size_of_setDimmerLights_AdjRF 0024            __size_of_setDimmerLights_AdjOn 0036  
           __end_of_setDimmerLights_AdjRF 1F8C             __end_of_setDimmerLights_AdjOn 123B  
                  CC2500_WriteByte@loop_a 0021                                 _r_address 00D3  
          __size_of_setDimmerLights_SwOff 004F            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 150B              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 080F                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0026                   __size_of_DelayTimejudge 002A  
                           _SwPointSelect 1D4C                       __end_of_setLED_Main 13E0  
                        ??_getDelayOff_GO 0022                       _DimmerLightsIntrIOC 00CC  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1AD1  
                       _CC2500_rfSettings 102F                            ___wmul@product 0024  
                                _LED_Main 1B92                           SwPointSelect@sw 0021  
                               clear_ram0 1AF5                  CC2500_InitPATable@loop_d 0027  
                            _my_MainTimer 12E7                                 _setTxData 0D71  
     __end_of_DimmerLights_Initialization 1D24               _DimmerLights_Initialization 1D10  
                      _CC2500_ClearRXFIFO 1AD4                        _CC2500_ClearTXFIFO 1AD8  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1D74                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0069               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 110A                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1FD7  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1BAA  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                                _RF_Count 0123                      __end_of_RF_RxDisable 1CC2  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1E17  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1C77  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0023  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 0265                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0053                                  _DelayOff 0075  
                            setSw_Main@sw 006D          setDimmerLights_IntrIOC_GO@lights 0072  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 000F  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1B86  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 11CF  
                   _DlyOff_Initialization 1AE9                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 1AE0  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006C  
                      __end_of_getLoad_AD 0CEA                        __end_of_getLoad_OK 1B22  
                   _Switch_Initialization 1BC2         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 006C  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 139F                                ?_setTxData 0070  
                            ?_Switch_Main 0070                ??_DimmerIntrIOCPointSelect 0070  
                        _CC2500_WriteByte 1DCB                         getLoad_AD@channel 0026  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00D1  
                             ??_Temp_Main 0069                         setRFSW_Control@sw 006D  
           _getMain_All_Error_Status$3605 0021             _getMain_All_Error_Status$3606 0023  
                __end_of_getDimmer_LoadGO 1B2A                       _Load_Initialization 1AC5  
                               setLED@led 0023                   ??_DimmerIntrPointSelect 0070  
                            _setTemp_Main 0F50                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0030  
                                ___awtoft 1F46                          ??_LedPointSelect 0020  
                                ___ftpack 0923             __size_of_getMain_Lights_Count 0014  
                  getDimmer_LoadGO@loadgo 0020             __size_of_getMain_LightsStatus 0013  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00ED  
                    CC2500_WriteREG@value 0022                               _setLED_Main 139F  
              __end_of_setRF_DimmerLights 1800            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1B32  
                        setDelayOff_GO@sw 0069                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070        __size_of_getAll_DimmerLights_AdjSw 002D  
                         ___lwdiv@counter 0025                                  __ptext10 1ACE  
                                __ptext11 1AC1                                  __ptext20 1D9E  
                                __ptext12 1B57                                  __ptext21 1ACB  
                                __ptext13 01F5                                  __ptext30 1139  
                                __ptext22 0E0C                                  __ptext14 1D60  
                                __ptext31 1F68                                  __ptext23 0BEA  
                                __ptext15 1205                                  __ptext40 1F8C  
                                __ptext32 0AAF                                  __ptext24 119B  
                                __ptext16 1EA7                                  __ptext41 1E4D  
                                __ptext33 071B                                  __ptext25 1CD5  
                                __ptext17 1D4C                                  __ptext50 1AFB  
                                __ptext42 1AC8                                  __ptext34 1CC2  
                                __ptext26 0B14                                  __ptext18 1BC2  
                                __ptext51 0049                                  __ptext43 1B4C  
                                __ptext35 1C1E                                  __ptext27 150B  
                                __ptext19 1B32                                  __ptext60 1B92  
                                __ptext52 1D38                                  __ptext44 1C65  
                                __ptext36 1C0D                                  __ptext28 086A  
                                __ptext61 139F                                  __ptext53 1B2A  
                                __ptext45 1BB6                                  __ptext37 1CAF  
                                __ptext29 1323                                  __ptext70 1B43  
                                __ptext62 1B86                                  __ptext54 1B22  
                                __ptext46 1BAA                                  __ptext38 09E6  
                                __ptext71 1E17                                  __ptext63 1C53  
                                __ptext55 10DD                                  __ptext47 1DE4  
                                __ptext39 0B7B                                  __ptext80 0A4A  
                                __ptext72 055F                                  __ptext64 11CF  
                                __ptext56 1E6A                                  __ptext48 1B9E  
                                __ptext81 0CEA                                  __ptext73 1D24  
                                __ptext65 146E                                  __ptext57 123B  
                                __ptext49 1AE0                                  __ptext90 1272  
                                __ptext82 1B3A                                  __ptext74 1EE6  
                                __ptext66 1B7A                                  __ptext58 1AC5  
                                __ptext91 1B1A                                  __ptext83 0EA7  
                                __ptext75 155A                                  __ptext67 063F  
                                __ptext59 1E31                                  __ptext92 1C9C  
                                __ptext84 0469                                  __ptext76 16F6  
                                __ptext68 1B6E                                  __ptext93 1168  
                                __ptext85 1F46                                  __ptext77 15AA  
                                __ptext69 110A                                  __ptext94 1D10  
                                __ptext86 0923                                  __ptext78 0D71  
                                __ptext95 07CF                                  __ptext87 164F  
                                __ptext79 17A7                                  __ptext96 1B12  
                                __ptext88 1EC6                                  __ptext97 08C6  
                                __ptext89 1DB3                                  __ptext98 0984  
                                __ptext99 14BC                                  __product 0245  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1D38  
            __end_of_setDimmerLights_Main 15AA              __end_of_setDimmerLights_Line 1DCB  
            __end_of_setDimmerLights_SwOn 08C6                              ??_setSw_Main 006B  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1D60                  __end_of_CC2500_SIDLEMode 1AE0  
              setDimmerLights_Main@lights 006E               __end_of_DelayOffPointSelect 1D10  
              CC2500_WriteCommand@command 0023                      setRF_Main@Receive_OK 0266  
               __size_of_setDimmerReClock 0008                   setDimmerLights_AdjOn@sw 0027  
                         _CC2500_ReadByte 1E4D                        _CC2500_InitPATable 1E88  
                __end_of_setMemory_Modify 1CD5                        __end_of_setRF_Main 0EA7  
                             ??_getBuz_GO 0022               __size_of_Mcu_Initialization 0012  
             setDimmerLights_ErrorClose@i 00EA                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006E                              getLoad_OK@ok 0020  
                                main@argc 0268                                  main@argv 026A  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6246 0021  
                    _getSw_KeyStatus$6247 0022                           _CC2500_PowerRST 13E0  
                __size_of_getSw_KeyStatus 001F               __end_of_Flash_Memory_Modify 14BC  
                       ??_getPercentValue 005C                               _setLog_Code 119B  
             __end_of_Flash_Memory_Unlock 1B4C                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1066                        __end_of_setSw_Main 0368  
                   ??_Load_Initialization 0022                             _Transceive_OK 03C1  
                  ?_DlyOff_Initialization 0070                            _DelayTimejudge 10B3  
                             pic14e$flags 007E              ??_setDimmerLights_IntrIOC_GO 0072  
              setDimmerLights_Line@lights 0020              ??_setDimmerLights_ErrorClose 006B  
                 setDimmerLights_SwOff@sw 006A               __size_of_setMemory_LoopSave 0013  
       __end_of_getAll_DimmerLights_AdjSw 110A                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0025                    ?_Switch_Initialization 0070  
                 ??_CC2500_PowerOnInitial 0029    __end_of_setDimmerLights_Initialization 0800  
 __size_of_setDimmerLights_Initialization 0031            _setDimmerLights_Initialization 07CF  
             __end_of_setDimmerLights_Adj 174E                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0020                    CC2500_InitPATable@temp 0026  
                   __size_of_RF_RxDisable 0013                         _RF_Initialization 1AC8  
    __size_of_setDimmerLights_IntrControl 0101                               getLoad_AD@i 0029  
                             getLoad_AD@j 0028                               getLoad_AD@k 0027  
                    _Flash_Memory_Erasing 1B7A                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D0                   __size_of_Exception_Main 00E0  
         __end_of_DelayOff_Initialization 1B12       __size_of_setDimmerLights_IntrIOC_GO 003B  
     __size_of_setDimmerLights_ErrorClose 0062                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B1A                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 15FC  
        __size_of_setControl_Lights_Table 0067                    __end_of_DelayTimejudge 10DD  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00DC  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 006C  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 1FD7  
                 __end_of_CC2500_ReadByte 1E6A              __end_of_setSw_Initialization 1B3A  
                         _Timeout_Counter 1D74           __size_of_getDimmerLights_Status 0011  
                    getPercentValue@value 005E                              _RF_RxDisable 1CAF  
              __end_of_LED_Initialization 1B92            __end_of_setTemp_Initialization 1AC2  
                __size_of_setPercentValue 0065                   setMemory_Modify@command 0021  
                    setPercentValue@value 005E                 __end_of_RF_Initialization 1ACB  
                   __end_of_CC2500_RxData 0BEA                     __end_of_CC2500_TxData 0A4A  
                   _setLoad_AH_AL_Restore 1E31                   __end_of_CC2500_PowerRST 1424  
