

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Dec 22 16:45:24 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	intentry,global,class=CODE,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   118                           	dabs	1,0x7E,2
   119  0000                     	;# 
   120  0001                     	;# 
   121  0002                     	;# 
   122  0003                     	;# 
   123  0004                     	;# 
   124  0005                     	;# 
   125  0006                     	;# 
   126  0007                     	;# 
   127  0008                     	;# 
   128  0009                     	;# 
   129  000A                     	;# 
   130  000B                     	;# 
   131  000C                     	;# 
   132  000D                     	;# 
   133  000E                     	;# 
   134  0010                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  008C                     	;# 
   147  008D                     	;# 
   148  008E                     	;# 
   149  0090                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0095                     	;# 
   153  0096                     	;# 
   154  0097                     	;# 
   155  0099                     	;# 
   156  009A                     	;# 
   157  009B                     	;# 
   158  009B                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  0116                     	;# 
   166  0117                     	;# 
   167  011D                     	;# 
   168  018C                     	;# 
   169  018D                     	;# 
   170  018E                     	;# 
   171  0191                     	;# 
   172  0191                     	;# 
   173  0192                     	;# 
   174  0193                     	;# 
   175  0193                     	;# 
   176  0194                     	;# 
   177  0195                     	;# 
   178  0196                     	;# 
   179  0197                     	;# 
   180  0199                     	;# 
   181  019A                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019B                     	;# 
   186  019C                     	;# 
   187  019C                     	;# 
   188  019D                     	;# 
   189  019E                     	;# 
   190  019F                     	;# 
   191  020D                     	;# 
   192  0210                     	;# 
   193  0211                     	;# 
   194  0211                     	;# 
   195  0212                     	;# 
   196  0212                     	;# 
   197  0213                     	;# 
   198  0213                     	;# 
   199  0214                     	;# 
   200  0214                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0215                     	;# 
   204  0216                     	;# 
   205  0216                     	;# 
   206  0217                     	;# 
   207  0217                     	;# 
   208  0291                     	;# 
   209  0291                     	;# 
   210  0292                     	;# 
   211  0293                     	;# 
   212  0298                     	;# 
   213  0298                     	;# 
   214  0299                     	;# 
   215  029A                     	;# 
   216  0394                     	;# 
   217  0395                     	;# 
   218  0396                     	;# 
   219  0FE4                     	;# 
   220  0FE5                     	;# 
   221  0FE6                     	;# 
   222  0FE7                     	;# 
   223  0FE8                     	;# 
   224  0FE9                     	;# 
   225  0FEA                     	;# 
   226  0FEB                     	;# 
   227  0FED                     	;# 
   228  0FEE                     	;# 
   229  0FEF                     	;# 
   230  0000                     	;# 
   231  0001                     	;# 
   232  0002                     	;# 
   233  0003                     	;# 
   234  0004                     	;# 
   235  0005                     	;# 
   236  0006                     	;# 
   237  0007                     	;# 
   238  0008                     	;# 
   239  0009                     	;# 
   240  000A                     	;# 
   241  000B                     	;# 
   242  000C                     	;# 
   243  000D                     	;# 
   244  000E                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0015                     	;# 
   249  0016                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001C                     	;# 
   257  008C                     	;# 
   258  008D                     	;# 
   259  008E                     	;# 
   260  0090                     	;# 
   261  0091                     	;# 
   262  0092                     	;# 
   263  0095                     	;# 
   264  0096                     	;# 
   265  0097                     	;# 
   266  0099                     	;# 
   267  009A                     	;# 
   268  009B                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  010C                     	;# 
   274  010D                     	;# 
   275  010E                     	;# 
   276  0116                     	;# 
   277  0117                     	;# 
   278  011D                     	;# 
   279  018C                     	;# 
   280  018D                     	;# 
   281  018E                     	;# 
   282  0191                     	;# 
   283  0191                     	;# 
   284  0192                     	;# 
   285  0193                     	;# 
   286  0193                     	;# 
   287  0194                     	;# 
   288  0195                     	;# 
   289  0196                     	;# 
   290  0197                     	;# 
   291  0199                     	;# 
   292  019A                     	;# 
   293  019B                     	;# 
   294  019B                     	;# 
   295  019B                     	;# 
   296  019B                     	;# 
   297  019C                     	;# 
   298  019C                     	;# 
   299  019D                     	;# 
   300  019E                     	;# 
   301  019F                     	;# 
   302  020D                     	;# 
   303  0210                     	;# 
   304  0211                     	;# 
   305  0211                     	;# 
   306  0212                     	;# 
   307  0212                     	;# 
   308  0213                     	;# 
   309  0213                     	;# 
   310  0214                     	;# 
   311  0214                     	;# 
   312  0215                     	;# 
   313  0215                     	;# 
   314  0215                     	;# 
   315  0216                     	;# 
   316  0216                     	;# 
   317  0217                     	;# 
   318  0217                     	;# 
   319  0291                     	;# 
   320  0291                     	;# 
   321  0292                     	;# 
   322  0293                     	;# 
   323  0298                     	;# 
   324  0298                     	;# 
   325  0299                     	;# 
   326  029A                     	;# 
   327  0394                     	;# 
   328  0395                     	;# 
   329  0396                     	;# 
   330  0FE4                     	;# 
   331  0FE5                     	;# 
   332  0FE6                     	;# 
   333  0FE7                     	;# 
   334  0FE8                     	;# 
   335  0FE9                     	;# 
   336  0FEA                     	;# 
   337  0FEB                     	;# 
   338  0FED                     	;# 
   339  0FEE                     	;# 
   340  0FEF                     	;# 
   341  0000                     	;# 
   342  0001                     	;# 
   343  0002                     	;# 
   344  0003                     	;# 
   345  0004                     	;# 
   346  0005                     	;# 
   347  0006                     	;# 
   348  0007                     	;# 
   349  0008                     	;# 
   350  0009                     	;# 
   351  000A                     	;# 
   352  000B                     	;# 
   353  000C                     	;# 
   354  000D                     	;# 
   355  000E                     	;# 
   356  0010                     	;# 
   357  0011                     	;# 
   358  0012                     	;# 
   359  0015                     	;# 
   360  0016                     	;# 
   361  0016                     	;# 
   362  0017                     	;# 
   363  0018                     	;# 
   364  0019                     	;# 
   365  001A                     	;# 
   366  001B                     	;# 
   367  001C                     	;# 
   368  008C                     	;# 
   369  008D                     	;# 
   370  008E                     	;# 
   371  0090                     	;# 
   372  0091                     	;# 
   373  0092                     	;# 
   374  0095                     	;# 
   375  0096                     	;# 
   376  0097                     	;# 
   377  0099                     	;# 
   378  009A                     	;# 
   379  009B                     	;# 
   380  009B                     	;# 
   381  009C                     	;# 
   382  009D                     	;# 
   383  009E                     	;# 
   384  010C                     	;# 
   385  010D                     	;# 
   386  010E                     	;# 
   387  0116                     	;# 
   388  0117                     	;# 
   389  011D                     	;# 
   390  018C                     	;# 
   391  018D                     	;# 
   392  018E                     	;# 
   393  0191                     	;# 
   394  0191                     	;# 
   395  0192                     	;# 
   396  0193                     	;# 
   397  0193                     	;# 
   398  0194                     	;# 
   399  0195                     	;# 
   400  0196                     	;# 
   401  0197                     	;# 
   402  0199                     	;# 
   403  019A                     	;# 
   404  019B                     	;# 
   405  019B                     	;# 
   406  019B                     	;# 
   407  019B                     	;# 
   408  019C                     	;# 
   409  019C                     	;# 
   410  019D                     	;# 
   411  019E                     	;# 
   412  019F                     	;# 
   413  020D                     	;# 
   414  0210                     	;# 
   415  0211                     	;# 
   416  0211                     	;# 
   417  0212                     	;# 
   418  0212                     	;# 
   419  0213                     	;# 
   420  0213                     	;# 
   421  0214                     	;# 
   422  0214                     	;# 
   423  0215                     	;# 
   424  0215                     	;# 
   425  0215                     	;# 
   426  0216                     	;# 
   427  0216                     	;# 
   428  0217                     	;# 
   429  0217                     	;# 
   430  0291                     	;# 
   431  0291                     	;# 
   432  0292                     	;# 
   433  0293                     	;# 
   434  0298                     	;# 
   435  0298                     	;# 
   436  0299                     	;# 
   437  029A                     	;# 
   438  0394                     	;# 
   439  0395                     	;# 
   440  0396                     	;# 
   441  0FE4                     	;# 
   442  0FE5                     	;# 
   443  0FE6                     	;# 
   444  0FE7                     	;# 
   445  0FE8                     	;# 
   446  0FE9                     	;# 
   447  0FEA                     	;# 
   448  0FEB                     	;# 
   449  0FED                     	;# 
   450  0FEE                     	;# 
   451  0FEF                     	;# 
   452  0000                     	;# 
   453  0001                     	;# 
   454  0002                     	;# 
   455  0003                     	;# 
   456  0004                     	;# 
   457  0005                     	;# 
   458  0006                     	;# 
   459  0007                     	;# 
   460  0008                     	;# 
   461  0009                     	;# 
   462  000A                     	;# 
   463  000B                     	;# 
   464  000C                     	;# 
   465  000D                     	;# 
   466  000E                     	;# 
   467  0010                     	;# 
   468  0011                     	;# 
   469  0012                     	;# 
   470  0015                     	;# 
   471  0016                     	;# 
   472  0016                     	;# 
   473  0017                     	;# 
   474  0018                     	;# 
   475  0019                     	;# 
   476  001A                     	;# 
   477  001B                     	;# 
   478  001C                     	;# 
   479  008C                     	;# 
   480  008D                     	;# 
   481  008E                     	;# 
   482  0090                     	;# 
   483  0091                     	;# 
   484  0092                     	;# 
   485  0095                     	;# 
   486  0096                     	;# 
   487  0097                     	;# 
   488  0099                     	;# 
   489  009A                     	;# 
   490  009B                     	;# 
   491  009B                     	;# 
   492  009C                     	;# 
   493  009D                     	;# 
   494  009E                     	;# 
   495  010C                     	;# 
   496  010D                     	;# 
   497  010E                     	;# 
   498  0116                     	;# 
   499  0117                     	;# 
   500  011D                     	;# 
   501  018C                     	;# 
   502  018D                     	;# 
   503  018E                     	;# 
   504  0191                     	;# 
   505  0191                     	;# 
   506  0192                     	;# 
   507  0193                     	;# 
   508  0193                     	;# 
   509  0194                     	;# 
   510  0195                     	;# 
   511  0196                     	;# 
   512  0197                     	;# 
   513  0199                     	;# 
   514  019A                     	;# 
   515  019B                     	;# 
   516  019B                     	;# 
   517  019B                     	;# 
   518  019B                     	;# 
   519  019C                     	;# 
   520  019C                     	;# 
   521  019D                     	;# 
   522  019E                     	;# 
   523  019F                     	;# 
   524  020D                     	;# 
   525  0210                     	;# 
   526  0211                     	;# 
   527  0211                     	;# 
   528  0212                     	;# 
   529  0212                     	;# 
   530  0213                     	;# 
   531  0213                     	;# 
   532  0214                     	;# 
   533  0214                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0215                     	;# 
   537  0216                     	;# 
   538  0216                     	;# 
   539  0217                     	;# 
   540  0217                     	;# 
   541  0291                     	;# 
   542  0291                     	;# 
   543  0292                     	;# 
   544  0293                     	;# 
   545  0298                     	;# 
   546  0298                     	;# 
   547  0299                     	;# 
   548  029A                     	;# 
   549  0394                     	;# 
   550  0395                     	;# 
   551  0396                     	;# 
   552  0FE4                     	;# 
   553  0FE5                     	;# 
   554  0FE6                     	;# 
   555  0FE7                     	;# 
   556  0FE8                     	;# 
   557  0FE9                     	;# 
   558  0FEA                     	;# 
   559  0FEB                     	;# 
   560  0FED                     	;# 
   561  0FEE                     	;# 
   562  0FEF                     	;# 
   563  0000                     	;# 
   564  0001                     	;# 
   565  0002                     	;# 
   566  0003                     	;# 
   567  0004                     	;# 
   568  0005                     	;# 
   569  0006                     	;# 
   570  0007                     	;# 
   571  0008                     	;# 
   572  0009                     	;# 
   573  000A                     	;# 
   574  000B                     	;# 
   575  000C                     	;# 
   576  000D                     	;# 
   577  000E                     	;# 
   578  0010                     	;# 
   579  0011                     	;# 
   580  0012                     	;# 
   581  0015                     	;# 
   582  0016                     	;# 
   583  0016                     	;# 
   584  0017                     	;# 
   585  0018                     	;# 
   586  0019                     	;# 
   587  001A                     	;# 
   588  001B                     	;# 
   589  001C                     	;# 
   590  008C                     	;# 
   591  008D                     	;# 
   592  008E                     	;# 
   593  0090                     	;# 
   594  0091                     	;# 
   595  0092                     	;# 
   596  0095                     	;# 
   597  0096                     	;# 
   598  0097                     	;# 
   599  0099                     	;# 
   600  009A                     	;# 
   601  009B                     	;# 
   602  009B                     	;# 
   603  009C                     	;# 
   604  009D                     	;# 
   605  009E                     	;# 
   606  010C                     	;# 
   607  010D                     	;# 
   608  010E                     	;# 
   609  0116                     	;# 
   610  0117                     	;# 
   611  011D                     	;# 
   612  018C                     	;# 
   613  018D                     	;# 
   614  018E                     	;# 
   615  0191                     	;# 
   616  0191                     	;# 
   617  0192                     	;# 
   618  0193                     	;# 
   619  0193                     	;# 
   620  0194                     	;# 
   621  0195                     	;# 
   622  0196                     	;# 
   623  0197                     	;# 
   624  0199                     	;# 
   625  019A                     	;# 
   626  019B                     	;# 
   627  019B                     	;# 
   628  019B                     	;# 
   629  019B                     	;# 
   630  019C                     	;# 
   631  019C                     	;# 
   632  019D                     	;# 
   633  019E                     	;# 
   634  019F                     	;# 
   635  020D                     	;# 
   636  0210                     	;# 
   637  0211                     	;# 
   638  0211                     	;# 
   639  0212                     	;# 
   640  0212                     	;# 
   641  0213                     	;# 
   642  0213                     	;# 
   643  0214                     	;# 
   644  0214                     	;# 
   645  0215                     	;# 
   646  0215                     	;# 
   647  0215                     	;# 
   648  0216                     	;# 
   649  0216                     	;# 
   650  0217                     	;# 
   651  0217                     	;# 
   652  0291                     	;# 
   653  0291                     	;# 
   654  0292                     	;# 
   655  0293                     	;# 
   656  0298                     	;# 
   657  0298                     	;# 
   658  0299                     	;# 
   659  029A                     	;# 
   660  0394                     	;# 
   661  0395                     	;# 
   662  0396                     	;# 
   663  0FE4                     	;# 
   664  0FE5                     	;# 
   665  0FE6                     	;# 
   666  0FE7                     	;# 
   667  0FE8                     	;# 
   668  0FE9                     	;# 
   669  0FEA                     	;# 
   670  0FEB                     	;# 
   671  0FED                     	;# 
   672  0FEE                     	;# 
   673  0FEF                     	;# 
   674  0000                     	;# 
   675  0001                     	;# 
   676  0002                     	;# 
   677  0003                     	;# 
   678  0004                     	;# 
   679  0005                     	;# 
   680  0006                     	;# 
   681  0007                     	;# 
   682  0008                     	;# 
   683  0009                     	;# 
   684  000A                     	;# 
   685  000B                     	;# 
   686  000C                     	;# 
   687  000D                     	;# 
   688  000E                     	;# 
   689  0010                     	;# 
   690  0011                     	;# 
   691  0012                     	;# 
   692  0015                     	;# 
   693  0016                     	;# 
   694  0016                     	;# 
   695  0017                     	;# 
   696  0018                     	;# 
   697  0019                     	;# 
   698  001A                     	;# 
   699  001B                     	;# 
   700  001C                     	;# 
   701  008C                     	;# 
   702  008D                     	;# 
   703  008E                     	;# 
   704  0090                     	;# 
   705  0091                     	;# 
   706  0092                     	;# 
   707  0095                     	;# 
   708  0096                     	;# 
   709  0097                     	;# 
   710  0099                     	;# 
   711  009A                     	;# 
   712  009B                     	;# 
   713  009B                     	;# 
   714  009C                     	;# 
   715  009D                     	;# 
   716  009E                     	;# 
   717  010C                     	;# 
   718  010D                     	;# 
   719  010E                     	;# 
   720  0116                     	;# 
   721  0117                     	;# 
   722  011D                     	;# 
   723  018C                     	;# 
   724  018D                     	;# 
   725  018E                     	;# 
   726  0191                     	;# 
   727  0191                     	;# 
   728  0192                     	;# 
   729  0193                     	;# 
   730  0193                     	;# 
   731  0194                     	;# 
   732  0195                     	;# 
   733  0196                     	;# 
   734  0197                     	;# 
   735  0199                     	;# 
   736  019A                     	;# 
   737  019B                     	;# 
   738  019B                     	;# 
   739  019B                     	;# 
   740  019B                     	;# 
   741  019C                     	;# 
   742  019C                     	;# 
   743  019D                     	;# 
   744  019E                     	;# 
   745  019F                     	;# 
   746  020D                     	;# 
   747  0210                     	;# 
   748  0211                     	;# 
   749  0211                     	;# 
   750  0212                     	;# 
   751  0212                     	;# 
   752  0213                     	;# 
   753  0213                     	;# 
   754  0214                     	;# 
   755  0214                     	;# 
   756  0215                     	;# 
   757  0215                     	;# 
   758  0215                     	;# 
   759  0216                     	;# 
   760  0216                     	;# 
   761  0217                     	;# 
   762  0217                     	;# 
   763  0291                     	;# 
   764  0291                     	;# 
   765  0292                     	;# 
   766  0293                     	;# 
   767  0298                     	;# 
   768  0298                     	;# 
   769  0299                     	;# 
   770  029A                     	;# 
   771  0394                     	;# 
   772  0395                     	;# 
   773  0396                     	;# 
   774  0FE4                     	;# 
   775  0FE5                     	;# 
   776  0FE6                     	;# 
   777  0FE7                     	;# 
   778  0FE8                     	;# 
   779  0FE9                     	;# 
   780  0FEA                     	;# 
   781  0FEB                     	;# 
   782  0FED                     	;# 
   783  0FEE                     	;# 
   784  0FEF                     	;# 
   785  0000                     	;# 
   786  0001                     	;# 
   787  0002                     	;# 
   788  0003                     	;# 
   789  0004                     	;# 
   790  0005                     	;# 
   791  0006                     	;# 
   792  0007                     	;# 
   793  0008                     	;# 
   794  0009                     	;# 
   795  000A                     	;# 
   796  000B                     	;# 
   797  000C                     	;# 
   798  000D                     	;# 
   799  000E                     	;# 
   800  0010                     	;# 
   801  0011                     	;# 
   802  0012                     	;# 
   803  0015                     	;# 
   804  0016                     	;# 
   805  0016                     	;# 
   806  0017                     	;# 
   807  0018                     	;# 
   808  0019                     	;# 
   809  001A                     	;# 
   810  001B                     	;# 
   811  001C                     	;# 
   812  008C                     	;# 
   813  008D                     	;# 
   814  008E                     	;# 
   815  0090                     	;# 
   816  0091                     	;# 
   817  0092                     	;# 
   818  0095                     	;# 
   819  0096                     	;# 
   820  0097                     	;# 
   821  0099                     	;# 
   822  009A                     	;# 
   823  009B                     	;# 
   824  009B                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009E                     	;# 
   828  010C                     	;# 
   829  010D                     	;# 
   830  010E                     	;# 
   831  0116                     	;# 
   832  0117                     	;# 
   833  011D                     	;# 
   834  018C                     	;# 
   835  018D                     	;# 
   836  018E                     	;# 
   837  0191                     	;# 
   838  0191                     	;# 
   839  0192                     	;# 
   840  0193                     	;# 
   841  0193                     	;# 
   842  0194                     	;# 
   843  0195                     	;# 
   844  0196                     	;# 
   845  0197                     	;# 
   846  0199                     	;# 
   847  019A                     	;# 
   848  019B                     	;# 
   849  019B                     	;# 
   850  019B                     	;# 
   851  019B                     	;# 
   852  019C                     	;# 
   853  019C                     	;# 
   854  019D                     	;# 
   855  019E                     	;# 
   856  019F                     	;# 
   857  020D                     	;# 
   858  0210                     	;# 
   859  0211                     	;# 
   860  0211                     	;# 
   861  0212                     	;# 
   862  0212                     	;# 
   863  0213                     	;# 
   864  0213                     	;# 
   865  0214                     	;# 
   866  0214                     	;# 
   867  0215                     	;# 
   868  0215                     	;# 
   869  0215                     	;# 
   870  0216                     	;# 
   871  0216                     	;# 
   872  0217                     	;# 
   873  0217                     	;# 
   874  0291                     	;# 
   875  0291                     	;# 
   876  0292                     	;# 
   877  0293                     	;# 
   878  0298                     	;# 
   879  0298                     	;# 
   880  0299                     	;# 
   881  029A                     	;# 
   882  0394                     	;# 
   883  0395                     	;# 
   884  0396                     	;# 
   885  0FE4                     	;# 
   886  0FE5                     	;# 
   887  0FE6                     	;# 
   888  0FE7                     	;# 
   889  0FE8                     	;# 
   890  0FE9                     	;# 
   891  0FEA                     	;# 
   892  0FEB                     	;# 
   893  0FED                     	;# 
   894  0FEE                     	;# 
   895  0FEF                     	;# 
   896  0000                     	;# 
   897  0001                     	;# 
   898  0002                     	;# 
   899  0003                     	;# 
   900  0004                     	;# 
   901  0005                     	;# 
   902  0006                     	;# 
   903  0007                     	;# 
   904  0008                     	;# 
   905  0009                     	;# 
   906  000A                     	;# 
   907  000B                     	;# 
   908  000C                     	;# 
   909  000D                     	;# 
   910  000E                     	;# 
   911  0010                     	;# 
   912  0011                     	;# 
   913  0012                     	;# 
   914  0015                     	;# 
   915  0016                     	;# 
   916  0016                     	;# 
   917  0017                     	;# 
   918  0018                     	;# 
   919  0019                     	;# 
   920  001A                     	;# 
   921  001B                     	;# 
   922  001C                     	;# 
   923  008C                     	;# 
   924  008D                     	;# 
   925  008E                     	;# 
   926  0090                     	;# 
   927  0091                     	;# 
   928  0092                     	;# 
   929  0095                     	;# 
   930  0096                     	;# 
   931  0097                     	;# 
   932  0099                     	;# 
   933  009A                     	;# 
   934  009B                     	;# 
   935  009B                     	;# 
   936  009C                     	;# 
   937  009D                     	;# 
   938  009E                     	;# 
   939  010C                     	;# 
   940  010D                     	;# 
   941  010E                     	;# 
   942  0116                     	;# 
   943  0117                     	;# 
   944  011D                     	;# 
   945  018C                     	;# 
   946  018D                     	;# 
   947  018E                     	;# 
   948  0191                     	;# 
   949  0191                     	;# 
   950  0192                     	;# 
   951  0193                     	;# 
   952  0193                     	;# 
   953  0194                     	;# 
   954  0195                     	;# 
   955  0196                     	;# 
   956  0197                     	;# 
   957  0199                     	;# 
   958  019A                     	;# 
   959  019B                     	;# 
   960  019B                     	;# 
   961  019B                     	;# 
   962  019B                     	;# 
   963  019C                     	;# 
   964  019C                     	;# 
   965  019D                     	;# 
   966  019E                     	;# 
   967  019F                     	;# 
   968  020D                     	;# 
   969  0210                     	;# 
   970  0211                     	;# 
   971  0211                     	;# 
   972  0212                     	;# 
   973  0212                     	;# 
   974  0213                     	;# 
   975  0213                     	;# 
   976  0214                     	;# 
   977  0214                     	;# 
   978  0215                     	;# 
   979  0215                     	;# 
   980  0215                     	;# 
   981  0216                     	;# 
   982  0216                     	;# 
   983  0217                     	;# 
   984  0217                     	;# 
   985  0291                     	;# 
   986  0291                     	;# 
   987  0292                     	;# 
   988  0293                     	;# 
   989  0298                     	;# 
   990  0298                     	;# 
   991  0299                     	;# 
   992  029A                     	;# 
   993  0394                     	;# 
   994  0395                     	;# 
   995  0396                     	;# 
   996  0FE4                     	;# 
   997  0FE5                     	;# 
   998  0FE6                     	;# 
   999  0FE7                     	;# 
  1000  0FE8                     	;# 
  1001  0FE9                     	;# 
  1002  0FEA                     	;# 
  1003  0FEB                     	;# 
  1004  0FED                     	;# 
  1005  0FEE                     	;# 
  1006  0FEF                     	;# 
  1007  0000                     	;# 
  1008  0001                     	;# 
  1009  0002                     	;# 
  1010  0003                     	;# 
  1011  0004                     	;# 
  1012  0005                     	;# 
  1013  0006                     	;# 
  1014  0007                     	;# 
  1015  0008                     	;# 
  1016  0009                     	;# 
  1017  000A                     	;# 
  1018  000B                     	;# 
  1019  000C                     	;# 
  1020  000D                     	;# 
  1021  000E                     	;# 
  1022  0010                     	;# 
  1023  0011                     	;# 
  1024  0012                     	;# 
  1025  0015                     	;# 
  1026  0016                     	;# 
  1027  0016                     	;# 
  1028  0017                     	;# 
  1029  0018                     	;# 
  1030  0019                     	;# 
  1031  001A                     	;# 
  1032  001B                     	;# 
  1033  001C                     	;# 
  1034  008C                     	;# 
  1035  008D                     	;# 
  1036  008E                     	;# 
  1037  0090                     	;# 
  1038  0091                     	;# 
  1039  0092                     	;# 
  1040  0095                     	;# 
  1041  0096                     	;# 
  1042  0097                     	;# 
  1043  0099                     	;# 
  1044  009A                     	;# 
  1045  009B                     	;# 
  1046  009B                     	;# 
  1047  009C                     	;# 
  1048  009D                     	;# 
  1049  009E                     	;# 
  1050  010C                     	;# 
  1051  010D                     	;# 
  1052  010E                     	;# 
  1053  0116                     	;# 
  1054  0117                     	;# 
  1055  011D                     	;# 
  1056  018C                     	;# 
  1057  018D                     	;# 
  1058  018E                     	;# 
  1059  0191                     	;# 
  1060  0191                     	;# 
  1061  0192                     	;# 
  1062  0193                     	;# 
  1063  0193                     	;# 
  1064  0194                     	;# 
  1065  0195                     	;# 
  1066  0196                     	;# 
  1067  0197                     	;# 
  1068  0199                     	;# 
  1069  019A                     	;# 
  1070  019B                     	;# 
  1071  019B                     	;# 
  1072  019B                     	;# 
  1073  019B                     	;# 
  1074  019C                     	;# 
  1075  019C                     	;# 
  1076  019D                     	;# 
  1077  019E                     	;# 
  1078  019F                     	;# 
  1079  020D                     	;# 
  1080  0210                     	;# 
  1081  0211                     	;# 
  1082  0211                     	;# 
  1083  0212                     	;# 
  1084  0212                     	;# 
  1085  0213                     	;# 
  1086  0213                     	;# 
  1087  0214                     	;# 
  1088  0214                     	;# 
  1089  0215                     	;# 
  1090  0215                     	;# 
  1091  0215                     	;# 
  1092  0216                     	;# 
  1093  0216                     	;# 
  1094  0217                     	;# 
  1095  0217                     	;# 
  1096  0291                     	;# 
  1097  0291                     	;# 
  1098  0292                     	;# 
  1099  0293                     	;# 
  1100  0298                     	;# 
  1101  0298                     	;# 
  1102  0299                     	;# 
  1103  029A                     	;# 
  1104  0394                     	;# 
  1105  0395                     	;# 
  1106  0396                     	;# 
  1107  0FE4                     	;# 
  1108  0FE5                     	;# 
  1109  0FE6                     	;# 
  1110  0FE7                     	;# 
  1111  0FE8                     	;# 
  1112  0FE9                     	;# 
  1113  0FEA                     	;# 
  1114  0FEB                     	;# 
  1115  0FED                     	;# 
  1116  0FEE                     	;# 
  1117  0FEF                     	;# 
  1118  0000                     	;# 
  1119  0001                     	;# 
  1120  0002                     	;# 
  1121  0003                     	;# 
  1122  0004                     	;# 
  1123  0005                     	;# 
  1124  0006                     	;# 
  1125  0007                     	;# 
  1126  0008                     	;# 
  1127  0009                     	;# 
  1128  000A                     	;# 
  1129  000B                     	;# 
  1130  000C                     	;# 
  1131  000D                     	;# 
  1132  000E                     	;# 
  1133  0010                     	;# 
  1134  0011                     	;# 
  1135  0012                     	;# 
  1136  0015                     	;# 
  1137  0016                     	;# 
  1138  0016                     	;# 
  1139  0017                     	;# 
  1140  0018                     	;# 
  1141  0019                     	;# 
  1142  001A                     	;# 
  1143  001B                     	;# 
  1144  001C                     	;# 
  1145  008C                     	;# 
  1146  008D                     	;# 
  1147  008E                     	;# 
  1148  0090                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0095                     	;# 
  1152  0096                     	;# 
  1153  0097                     	;# 
  1154  0099                     	;# 
  1155  009A                     	;# 
  1156  009B                     	;# 
  1157  009B                     	;# 
  1158  009C                     	;# 
  1159  009D                     	;# 
  1160  009E                     	;# 
  1161  010C                     	;# 
  1162  010D                     	;# 
  1163  010E                     	;# 
  1164  0116                     	;# 
  1165  0117                     	;# 
  1166  011D                     	;# 
  1167  018C                     	;# 
  1168  018D                     	;# 
  1169  018E                     	;# 
  1170  0191                     	;# 
  1171  0191                     	;# 
  1172  0192                     	;# 
  1173  0193                     	;# 
  1174  0193                     	;# 
  1175  0194                     	;# 
  1176  0195                     	;# 
  1177  0196                     	;# 
  1178  0197                     	;# 
  1179  0199                     	;# 
  1180  019A                     	;# 
  1181  019B                     	;# 
  1182  019B                     	;# 
  1183  019B                     	;# 
  1184  019B                     	;# 
  1185  019C                     	;# 
  1186  019C                     	;# 
  1187  019D                     	;# 
  1188  019E                     	;# 
  1189  019F                     	;# 
  1190  020D                     	;# 
  1191  0210                     	;# 
  1192  0211                     	;# 
  1193  0211                     	;# 
  1194  0212                     	;# 
  1195  0212                     	;# 
  1196  0213                     	;# 
  1197  0213                     	;# 
  1198  0214                     	;# 
  1199  0214                     	;# 
  1200  0215                     	;# 
  1201  0215                     	;# 
  1202  0215                     	;# 
  1203  0216                     	;# 
  1204  0216                     	;# 
  1205  0217                     	;# 
  1206  0217                     	;# 
  1207  0291                     	;# 
  1208  0291                     	;# 
  1209  0292                     	;# 
  1210  0293                     	;# 
  1211  0298                     	;# 
  1212  0298                     	;# 
  1213  0299                     	;# 
  1214  029A                     	;# 
  1215  0394                     	;# 
  1216  0395                     	;# 
  1217  0396                     	;# 
  1218  0FE4                     	;# 
  1219  0FE5                     	;# 
  1220  0FE6                     	;# 
  1221  0FE7                     	;# 
  1222  0FE8                     	;# 
  1223  0FE9                     	;# 
  1224  0FEA                     	;# 
  1225  0FEB                     	;# 
  1226  0FED                     	;# 
  1227  0FEE                     	;# 
  1228  0FEF                     	;# 
  1229  0000                     	;# 
  1230  0001                     	;# 
  1231  0002                     	;# 
  1232  0003                     	;# 
  1233  0004                     	;# 
  1234  0005                     	;# 
  1235  0006                     	;# 
  1236  0007                     	;# 
  1237  0008                     	;# 
  1238  0009                     	;# 
  1239  000A                     	;# 
  1240  000B                     	;# 
  1241  000C                     	;# 
  1242  000D                     	;# 
  1243  000E                     	;# 
  1244  0010                     	;# 
  1245  0011                     	;# 
  1246  0012                     	;# 
  1247  0015                     	;# 
  1248  0016                     	;# 
  1249  0016                     	;# 
  1250  0017                     	;# 
  1251  0018                     	;# 
  1252  0019                     	;# 
  1253  001A                     	;# 
  1254  001B                     	;# 
  1255  001C                     	;# 
  1256  008C                     	;# 
  1257  008D                     	;# 
  1258  008E                     	;# 
  1259  0090                     	;# 
  1260  0091                     	;# 
  1261  0092                     	;# 
  1262  0095                     	;# 
  1263  0096                     	;# 
  1264  0097                     	;# 
  1265  0099                     	;# 
  1266  009A                     	;# 
  1267  009B                     	;# 
  1268  009B                     	;# 
  1269  009C                     	;# 
  1270  009D                     	;# 
  1271  009E                     	;# 
  1272  010C                     	;# 
  1273  010D                     	;# 
  1274  010E                     	;# 
  1275  0116                     	;# 
  1276  0117                     	;# 
  1277  011D                     	;# 
  1278  018C                     	;# 
  1279  018D                     	;# 
  1280  018E                     	;# 
  1281  0191                     	;# 
  1282  0191                     	;# 
  1283  0192                     	;# 
  1284  0193                     	;# 
  1285  0193                     	;# 
  1286  0194                     	;# 
  1287  0195                     	;# 
  1288  0196                     	;# 
  1289  0197                     	;# 
  1290  0199                     	;# 
  1291  019A                     	;# 
  1292  019B                     	;# 
  1293  019B                     	;# 
  1294  019B                     	;# 
  1295  019B                     	;# 
  1296  019C                     	;# 
  1297  019C                     	;# 
  1298  019D                     	;# 
  1299  019E                     	;# 
  1300  019F                     	;# 
  1301  020D                     	;# 
  1302  0210                     	;# 
  1303  0211                     	;# 
  1304  0211                     	;# 
  1305  0212                     	;# 
  1306  0212                     	;# 
  1307  0213                     	;# 
  1308  0213                     	;# 
  1309  0214                     	;# 
  1310  0214                     	;# 
  1311  0215                     	;# 
  1312  0215                     	;# 
  1313  0215                     	;# 
  1314  0216                     	;# 
  1315  0216                     	;# 
  1316  0217                     	;# 
  1317  0217                     	;# 
  1318  0291                     	;# 
  1319  0291                     	;# 
  1320  0292                     	;# 
  1321  0293                     	;# 
  1322  0298                     	;# 
  1323  0298                     	;# 
  1324  0299                     	;# 
  1325  029A                     	;# 
  1326  0394                     	;# 
  1327  0395                     	;# 
  1328  0396                     	;# 
  1329  0FE4                     	;# 
  1330  0FE5                     	;# 
  1331  0FE6                     	;# 
  1332  0FE7                     	;# 
  1333  0FE8                     	;# 
  1334  0FE9                     	;# 
  1335  0FEA                     	;# 
  1336  0FEB                     	;# 
  1337  0FED                     	;# 
  1338  0FEE                     	;# 
  1339  0FEF                     	;# 
  1340  0000                     	;# 
  1341  0001                     	;# 
  1342  0002                     	;# 
  1343  0003                     	;# 
  1344  0004                     	;# 
  1345  0005                     	;# 
  1346  0006                     	;# 
  1347  0007                     	;# 
  1348  0008                     	;# 
  1349  0009                     	;# 
  1350  000A                     	;# 
  1351  000B                     	;# 
  1352  000C                     	;# 
  1353  000D                     	;# 
  1354  000E                     	;# 
  1355  0010                     	;# 
  1356  0011                     	;# 
  1357  0012                     	;# 
  1358  0015                     	;# 
  1359  0016                     	;# 
  1360  0016                     	;# 
  1361  0017                     	;# 
  1362  0018                     	;# 
  1363  0019                     	;# 
  1364  001A                     	;# 
  1365  001B                     	;# 
  1366  001C                     	;# 
  1367  008C                     	;# 
  1368  008D                     	;# 
  1369  008E                     	;# 
  1370  0090                     	;# 
  1371  0091                     	;# 
  1372  0092                     	;# 
  1373  0095                     	;# 
  1374  0096                     	;# 
  1375  0097                     	;# 
  1376  0099                     	;# 
  1377  009A                     	;# 
  1378  009B                     	;# 
  1379  009B                     	;# 
  1380  009C                     	;# 
  1381  009D                     	;# 
  1382  009E                     	;# 
  1383  010C                     	;# 
  1384  010D                     	;# 
  1385  010E                     	;# 
  1386  0116                     	;# 
  1387  0117                     	;# 
  1388  011D                     	;# 
  1389  018C                     	;# 
  1390  018D                     	;# 
  1391  018E                     	;# 
  1392  0191                     	;# 
  1393  0191                     	;# 
  1394  0192                     	;# 
  1395  0193                     	;# 
  1396  0193                     	;# 
  1397  0194                     	;# 
  1398  0195                     	;# 
  1399  0196                     	;# 
  1400  0197                     	;# 
  1401  0199                     	;# 
  1402  019A                     	;# 
  1403  019B                     	;# 
  1404  019B                     	;# 
  1405  019B                     	;# 
  1406  019B                     	;# 
  1407  019C                     	;# 
  1408  019C                     	;# 
  1409  019D                     	;# 
  1410  019E                     	;# 
  1411  019F                     	;# 
  1412  020D                     	;# 
  1413  0210                     	;# 
  1414  0211                     	;# 
  1415  0211                     	;# 
  1416  0212                     	;# 
  1417  0212                     	;# 
  1418  0213                     	;# 
  1419  0213                     	;# 
  1420  0214                     	;# 
  1421  0214                     	;# 
  1422  0215                     	;# 
  1423  0215                     	;# 
  1424  0215                     	;# 
  1425  0216                     	;# 
  1426  0216                     	;# 
  1427  0217                     	;# 
  1428  0217                     	;# 
  1429  0291                     	;# 
  1430  0291                     	;# 
  1431  0292                     	;# 
  1432  0293                     	;# 
  1433  0298                     	;# 
  1434  0298                     	;# 
  1435  0299                     	;# 
  1436  029A                     	;# 
  1437  0394                     	;# 
  1438  0395                     	;# 
  1439  0396                     	;# 
  1440  0FE4                     	;# 
  1441  0FE5                     	;# 
  1442  0FE6                     	;# 
  1443  0FE7                     	;# 
  1444  0FE8                     	;# 
  1445  0FE9                     	;# 
  1446  0FEA                     	;# 
  1447  0FEB                     	;# 
  1448  0FED                     	;# 
  1449  0FEE                     	;# 
  1450  0FEF                     	;# 
  1451  0000                     	;# 
  1452  0001                     	;# 
  1453  0002                     	;# 
  1454  0003                     	;# 
  1455  0004                     	;# 
  1456  0005                     	;# 
  1457  0006                     	;# 
  1458  0007                     	;# 
  1459  0008                     	;# 
  1460  0009                     	;# 
  1461  000A                     	;# 
  1462  000B                     	;# 
  1463  000C                     	;# 
  1464  000D                     	;# 
  1465  000E                     	;# 
  1466  0010                     	;# 
  1467  0011                     	;# 
  1468  0012                     	;# 
  1469  0015                     	;# 
  1470  0016                     	;# 
  1471  0016                     	;# 
  1472  0017                     	;# 
  1473  0018                     	;# 
  1474  0019                     	;# 
  1475  001A                     	;# 
  1476  001B                     	;# 
  1477  001C                     	;# 
  1478  008C                     	;# 
  1479  008D                     	;# 
  1480  008E                     	;# 
  1481  0090                     	;# 
  1482  0091                     	;# 
  1483  0092                     	;# 
  1484  0095                     	;# 
  1485  0096                     	;# 
  1486  0097                     	;# 
  1487  0099                     	;# 
  1488  009A                     	;# 
  1489  009B                     	;# 
  1490  009B                     	;# 
  1491  009C                     	;# 
  1492  009D                     	;# 
  1493  009E                     	;# 
  1494  010C                     	;# 
  1495  010D                     	;# 
  1496  010E                     	;# 
  1497  0116                     	;# 
  1498  0117                     	;# 
  1499  011D                     	;# 
  1500  018C                     	;# 
  1501  018D                     	;# 
  1502  018E                     	;# 
  1503  0191                     	;# 
  1504  0191                     	;# 
  1505  0192                     	;# 
  1506  0193                     	;# 
  1507  0193                     	;# 
  1508  0194                     	;# 
  1509  0195                     	;# 
  1510  0196                     	;# 
  1511  0197                     	;# 
  1512  0199                     	;# 
  1513  019A                     	;# 
  1514  019B                     	;# 
  1515  019B                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019C                     	;# 
  1519  019C                     	;# 
  1520  019D                     	;# 
  1521  019E                     	;# 
  1522  019F                     	;# 
  1523  020D                     	;# 
  1524  0210                     	;# 
  1525  0211                     	;# 
  1526  0211                     	;# 
  1527  0212                     	;# 
  1528  0212                     	;# 
  1529  0213                     	;# 
  1530  0213                     	;# 
  1531  0214                     	;# 
  1532  0214                     	;# 
  1533  0215                     	;# 
  1534  0215                     	;# 
  1535  0215                     	;# 
  1536  0216                     	;# 
  1537  0216                     	;# 
  1538  0217                     	;# 
  1539  0217                     	;# 
  1540  0291                     	;# 
  1541  0291                     	;# 
  1542  0292                     	;# 
  1543  0293                     	;# 
  1544  0298                     	;# 
  1545  0298                     	;# 
  1546  0299                     	;# 
  1547  029A                     	;# 
  1548  0394                     	;# 
  1549  0395                     	;# 
  1550  0396                     	;# 
  1551  0FE4                     	;# 
  1552  0FE5                     	;# 
  1553  0FE6                     	;# 
  1554  0FE7                     	;# 
  1555  0FE8                     	;# 
  1556  0FE9                     	;# 
  1557  0FEA                     	;# 
  1558  0FEB                     	;# 
  1559  0FED                     	;# 
  1560  0FEE                     	;# 
  1561  0FEF                     	;# 
  1562  0000                     	;# 
  1563  0001                     	;# 
  1564  0002                     	;# 
  1565  0003                     	;# 
  1566  0004                     	;# 
  1567  0005                     	;# 
  1568  0006                     	;# 
  1569  0007                     	;# 
  1570  0008                     	;# 
  1571  0009                     	;# 
  1572  000A                     	;# 
  1573  000B                     	;# 
  1574  000C                     	;# 
  1575  000D                     	;# 
  1576  000E                     	;# 
  1577  0010                     	;# 
  1578  0011                     	;# 
  1579  0012                     	;# 
  1580  0015                     	;# 
  1581  0016                     	;# 
  1582  0016                     	;# 
  1583  0017                     	;# 
  1584  0018                     	;# 
  1585  0019                     	;# 
  1586  001A                     	;# 
  1587  001B                     	;# 
  1588  001C                     	;# 
  1589  008C                     	;# 
  1590  008D                     	;# 
  1591  008E                     	;# 
  1592  0090                     	;# 
  1593  0091                     	;# 
  1594  0092                     	;# 
  1595  0095                     	;# 
  1596  0096                     	;# 
  1597  0097                     	;# 
  1598  0099                     	;# 
  1599  009A                     	;# 
  1600  009B                     	;# 
  1601  009B                     	;# 
  1602  009C                     	;# 
  1603  009D                     	;# 
  1604  009E                     	;# 
  1605  010C                     	;# 
  1606  010D                     	;# 
  1607  010E                     	;# 
  1608  0116                     	;# 
  1609  0117                     	;# 
  1610  011D                     	;# 
  1611  018C                     	;# 
  1612  018D                     	;# 
  1613  018E                     	;# 
  1614  0191                     	;# 
  1615  0191                     	;# 
  1616  0192                     	;# 
  1617  0193                     	;# 
  1618  0193                     	;# 
  1619  0194                     	;# 
  1620  0195                     	;# 
  1621  0196                     	;# 
  1622  0197                     	;# 
  1623  0199                     	;# 
  1624  019A                     	;# 
  1625  019B                     	;# 
  1626  019B                     	;# 
  1627  019B                     	;# 
  1628  019B                     	;# 
  1629  019C                     	;# 
  1630  019C                     	;# 
  1631  019D                     	;# 
  1632  019E                     	;# 
  1633  019F                     	;# 
  1634  020D                     	;# 
  1635  0210                     	;# 
  1636  0211                     	;# 
  1637  0211                     	;# 
  1638  0212                     	;# 
  1639  0212                     	;# 
  1640  0213                     	;# 
  1641  0213                     	;# 
  1642  0214                     	;# 
  1643  0214                     	;# 
  1644  0215                     	;# 
  1645  0215                     	;# 
  1646  0215                     	;# 
  1647  0216                     	;# 
  1648  0216                     	;# 
  1649  0217                     	;# 
  1650  0217                     	;# 
  1651  0291                     	;# 
  1652  0291                     	;# 
  1653  0292                     	;# 
  1654  0293                     	;# 
  1655  0298                     	;# 
  1656  0298                     	;# 
  1657  0299                     	;# 
  1658  029A                     	;# 
  1659  0394                     	;# 
  1660  0395                     	;# 
  1661  0396                     	;# 
  1662  0FE4                     	;# 
  1663  0FE5                     	;# 
  1664  0FE6                     	;# 
  1665  0FE7                     	;# 
  1666  0FE8                     	;# 
  1667  0FE9                     	;# 
  1668  0FEA                     	;# 
  1669  0FEB                     	;# 
  1670  0FED                     	;# 
  1671  0FEE                     	;# 
  1672  0FEF                     	;# 
  1673  0000                     	;# 
  1674  0001                     	;# 
  1675  0002                     	;# 
  1676  0003                     	;# 
  1677  0004                     	;# 
  1678  0005                     	;# 
  1679  0006                     	;# 
  1680  0007                     	;# 
  1681  0008                     	;# 
  1682  0009                     	;# 
  1683  000A                     	;# 
  1684  000B                     	;# 
  1685  000C                     	;# 
  1686  000D                     	;# 
  1687  000E                     	;# 
  1688  0010                     	;# 
  1689  0011                     	;# 
  1690  0012                     	;# 
  1691  0015                     	;# 
  1692  0016                     	;# 
  1693  0016                     	;# 
  1694  0017                     	;# 
  1695  0018                     	;# 
  1696  0019                     	;# 
  1697  001A                     	;# 
  1698  001B                     	;# 
  1699  001C                     	;# 
  1700  008C                     	;# 
  1701  008D                     	;# 
  1702  008E                     	;# 
  1703  0090                     	;# 
  1704  0091                     	;# 
  1705  0092                     	;# 
  1706  0095                     	;# 
  1707  0096                     	;# 
  1708  0097                     	;# 
  1709  0099                     	;# 
  1710  009A                     	;# 
  1711  009B                     	;# 
  1712  009B                     	;# 
  1713  009C                     	;# 
  1714  009D                     	;# 
  1715  009E                     	;# 
  1716  010C                     	;# 
  1717  010D                     	;# 
  1718  010E                     	;# 
  1719  0116                     	;# 
  1720  0117                     	;# 
  1721  011D                     	;# 
  1722  018C                     	;# 
  1723  018D                     	;# 
  1724  018E                     	;# 
  1725  0191                     	;# 
  1726  0191                     	;# 
  1727  0192                     	;# 
  1728  0193                     	;# 
  1729  0193                     	;# 
  1730  0194                     	;# 
  1731  0195                     	;# 
  1732  0196                     	;# 
  1733  0197                     	;# 
  1734  0199                     	;# 
  1735  019A                     	;# 
  1736  019B                     	;# 
  1737  019B                     	;# 
  1738  019B                     	;# 
  1739  019B                     	;# 
  1740  019C                     	;# 
  1741  019C                     	;# 
  1742  019D                     	;# 
  1743  019E                     	;# 
  1744  019F                     	;# 
  1745  020D                     	;# 
  1746  0210                     	;# 
  1747  0211                     	;# 
  1748  0211                     	;# 
  1749  0212                     	;# 
  1750  0212                     	;# 
  1751  0213                     	;# 
  1752  0213                     	;# 
  1753  0214                     	;# 
  1754  0214                     	;# 
  1755  0215                     	;# 
  1756  0215                     	;# 
  1757  0215                     	;# 
  1758  0216                     	;# 
  1759  0216                     	;# 
  1760  0217                     	;# 
  1761  0217                     	;# 
  1762  0291                     	;# 
  1763  0291                     	;# 
  1764  0292                     	;# 
  1765  0293                     	;# 
  1766  0298                     	;# 
  1767  0298                     	;# 
  1768  0299                     	;# 
  1769  029A                     	;# 
  1770  0394                     	;# 
  1771  0395                     	;# 
  1772  0396                     	;# 
  1773  0FE4                     	;# 
  1774  0FE5                     	;# 
  1775  0FE6                     	;# 
  1776  0FE7                     	;# 
  1777  0FE8                     	;# 
  1778  0FE9                     	;# 
  1779  0FEA                     	;# 
  1780  0FEB                     	;# 
  1781  0FED                     	;# 
  1782  0FEE                     	;# 
  1783  0FEF                     	;# 
  1784  0000                     	;# 
  1785  0001                     	;# 
  1786  0002                     	;# 
  1787  0003                     	;# 
  1788  0004                     	;# 
  1789  0005                     	;# 
  1790  0006                     	;# 
  1791  0007                     	;# 
  1792  0008                     	;# 
  1793  0009                     	;# 
  1794  000A                     	;# 
  1795  000B                     	;# 
  1796  000C                     	;# 
  1797  000D                     	;# 
  1798  000E                     	;# 
  1799  0010                     	;# 
  1800  0011                     	;# 
  1801  0012                     	;# 
  1802  0015                     	;# 
  1803  0016                     	;# 
  1804  0016                     	;# 
  1805  0017                     	;# 
  1806  0018                     	;# 
  1807  0019                     	;# 
  1808  001A                     	;# 
  1809  001B                     	;# 
  1810  001C                     	;# 
  1811  008C                     	;# 
  1812  008D                     	;# 
  1813  008E                     	;# 
  1814  0090                     	;# 
  1815  0091                     	;# 
  1816  0092                     	;# 
  1817  0095                     	;# 
  1818  0096                     	;# 
  1819  0097                     	;# 
  1820  0099                     	;# 
  1821  009A                     	;# 
  1822  009B                     	;# 
  1823  009B                     	;# 
  1824  009C                     	;# 
  1825  009D                     	;# 
  1826  009E                     	;# 
  1827  010C                     	;# 
  1828  010D                     	;# 
  1829  010E                     	;# 
  1830  0116                     	;# 
  1831  0117                     	;# 
  1832  011D                     	;# 
  1833  018C                     	;# 
  1834  018D                     	;# 
  1835  018E                     	;# 
  1836  0191                     	;# 
  1837  0191                     	;# 
  1838  0192                     	;# 
  1839  0193                     	;# 
  1840  0193                     	;# 
  1841  0194                     	;# 
  1842  0195                     	;# 
  1843  0196                     	;# 
  1844  0197                     	;# 
  1845  0199                     	;# 
  1846  019A                     	;# 
  1847  019B                     	;# 
  1848  019B                     	;# 
  1849  019B                     	;# 
  1850  019B                     	;# 
  1851  019C                     	;# 
  1852  019C                     	;# 
  1853  019D                     	;# 
  1854  019E                     	;# 
  1855  019F                     	;# 
  1856  020D                     	;# 
  1857  0210                     	;# 
  1858  0211                     	;# 
  1859  0211                     	;# 
  1860  0212                     	;# 
  1861  0212                     	;# 
  1862  0213                     	;# 
  1863  0213                     	;# 
  1864  0214                     	;# 
  1865  0214                     	;# 
  1866  0215                     	;# 
  1867  0215                     	;# 
  1868  0215                     	;# 
  1869  0216                     	;# 
  1870  0216                     	;# 
  1871  0217                     	;# 
  1872  0217                     	;# 
  1873  0291                     	;# 
  1874  0291                     	;# 
  1875  0292                     	;# 
  1876  0293                     	;# 
  1877  0298                     	;# 
  1878  0298                     	;# 
  1879  0299                     	;# 
  1880  029A                     	;# 
  1881  0394                     	;# 
  1882  0395                     	;# 
  1883  0396                     	;# 
  1884  0FE4                     	;# 
  1885  0FE5                     	;# 
  1886  0FE6                     	;# 
  1887  0FE7                     	;# 
  1888  0FE8                     	;# 
  1889  0FE9                     	;# 
  1890  0FEA                     	;# 
  1891  0FEB                     	;# 
  1892  0FED                     	;# 
  1893  0FEE                     	;# 
  1894  0FEF                     	;# 
  1895  0000                     	;# 
  1896  0001                     	;# 
  1897  0002                     	;# 
  1898  0003                     	;# 
  1899  0004                     	;# 
  1900  0005                     	;# 
  1901  0006                     	;# 
  1902  0007                     	;# 
  1903  0008                     	;# 
  1904  0009                     	;# 
  1905  000A                     	;# 
  1906  000B                     	;# 
  1907  000C                     	;# 
  1908  000D                     	;# 
  1909  000E                     	;# 
  1910  0010                     	;# 
  1911  0011                     	;# 
  1912  0012                     	;# 
  1913  0015                     	;# 
  1914  0016                     	;# 
  1915  0016                     	;# 
  1916  0017                     	;# 
  1917  0018                     	;# 
  1918  0019                     	;# 
  1919  001A                     	;# 
  1920  001B                     	;# 
  1921  001C                     	;# 
  1922  008C                     	;# 
  1923  008D                     	;# 
  1924  008E                     	;# 
  1925  0090                     	;# 
  1926  0091                     	;# 
  1927  0092                     	;# 
  1928  0095                     	;# 
  1929  0096                     	;# 
  1930  0097                     	;# 
  1931  0099                     	;# 
  1932  009A                     	;# 
  1933  009B                     	;# 
  1934  009B                     	;# 
  1935  009C                     	;# 
  1936  009D                     	;# 
  1937  009E                     	;# 
  1938  010C                     	;# 
  1939  010D                     	;# 
  1940  010E                     	;# 
  1941  0116                     	;# 
  1942  0117                     	;# 
  1943  011D                     	;# 
  1944  018C                     	;# 
  1945  018D                     	;# 
  1946  018E                     	;# 
  1947  0191                     	;# 
  1948  0191                     	;# 
  1949  0192                     	;# 
  1950  0193                     	;# 
  1951  0193                     	;# 
  1952  0194                     	;# 
  1953  0195                     	;# 
  1954  0196                     	;# 
  1955  0197                     	;# 
  1956  0199                     	;# 
  1957  019A                     	;# 
  1958  019B                     	;# 
  1959  019B                     	;# 
  1960  019B                     	;# 
  1961  019B                     	;# 
  1962  019C                     	;# 
  1963  019C                     	;# 
  1964  019D                     	;# 
  1965  019E                     	;# 
  1966  019F                     	;# 
  1967  020D                     	;# 
  1968  0210                     	;# 
  1969  0211                     	;# 
  1970  0211                     	;# 
  1971  0212                     	;# 
  1972  0212                     	;# 
  1973  0213                     	;# 
  1974  0213                     	;# 
  1975  0214                     	;# 
  1976  0214                     	;# 
  1977  0215                     	;# 
  1978  0215                     	;# 
  1979  0215                     	;# 
  1980  0216                     	;# 
  1981  0216                     	;# 
  1982  0217                     	;# 
  1983  0217                     	;# 
  1984  0291                     	;# 
  1985  0291                     	;# 
  1986  0292                     	;# 
  1987  0293                     	;# 
  1988  0298                     	;# 
  1989  0298                     	;# 
  1990  0299                     	;# 
  1991  029A                     	;# 
  1992  0394                     	;# 
  1993  0395                     	;# 
  1994  0396                     	;# 
  1995  0FE4                     	;# 
  1996  0FE5                     	;# 
  1997  0FE6                     	;# 
  1998  0FE7                     	;# 
  1999  0FE8                     	;# 
  2000  0FE9                     	;# 
  2001  0FEA                     	;# 
  2002  0FEB                     	;# 
  2003  0FED                     	;# 
  2004  0FEE                     	;# 
  2005  0FEF                     	;# 
  2006  0000                     	;# 
  2007  0001                     	;# 
  2008  0002                     	;# 
  2009  0003                     	;# 
  2010  0004                     	;# 
  2011  0005                     	;# 
  2012  0006                     	;# 
  2013  0007                     	;# 
  2014  0008                     	;# 
  2015  0009                     	;# 
  2016  000A                     	;# 
  2017  000B                     	;# 
  2018  000C                     	;# 
  2019  000D                     	;# 
  2020  000E                     	;# 
  2021  0010                     	;# 
  2022  0011                     	;# 
  2023  0012                     	;# 
  2024  0015                     	;# 
  2025  0016                     	;# 
  2026  0016                     	;# 
  2027  0017                     	;# 
  2028  0018                     	;# 
  2029  0019                     	;# 
  2030  001A                     	;# 
  2031  001B                     	;# 
  2032  001C                     	;# 
  2033  008C                     	;# 
  2034  008D                     	;# 
  2035  008E                     	;# 
  2036  0090                     	;# 
  2037  0091                     	;# 
  2038  0092                     	;# 
  2039  0095                     	;# 
  2040  0096                     	;# 
  2041  0097                     	;# 
  2042  0099                     	;# 
  2043  009A                     	;# 
  2044  009B                     	;# 
  2045  009B                     	;# 
  2046  009C                     	;# 
  2047  009D                     	;# 
  2048  009E                     	;# 
  2049  010C                     	;# 
  2050  010D                     	;# 
  2051  010E                     	;# 
  2052  0116                     	;# 
  2053  0117                     	;# 
  2054  011D                     	;# 
  2055  018C                     	;# 
  2056  018D                     	;# 
  2057  018E                     	;# 
  2058  0191                     	;# 
  2059  0191                     	;# 
  2060  0192                     	;# 
  2061  0193                     	;# 
  2062  0193                     	;# 
  2063  0194                     	;# 
  2064  0195                     	;# 
  2065  0196                     	;# 
  2066  0197                     	;# 
  2067  0199                     	;# 
  2068  019A                     	;# 
  2069  019B                     	;# 
  2070  019B                     	;# 
  2071  019B                     	;# 
  2072  019B                     	;# 
  2073  019C                     	;# 
  2074  019C                     	;# 
  2075  019D                     	;# 
  2076  019E                     	;# 
  2077  019F                     	;# 
  2078  020D                     	;# 
  2079  0210                     	;# 
  2080  0211                     	;# 
  2081  0211                     	;# 
  2082  0212                     	;# 
  2083  0212                     	;# 
  2084  0213                     	;# 
  2085  0213                     	;# 
  2086  0214                     	;# 
  2087  0214                     	;# 
  2088  0215                     	;# 
  2089  0215                     	;# 
  2090  0215                     	;# 
  2091  0216                     	;# 
  2092  0216                     	;# 
  2093  0217                     	;# 
  2094  0217                     	;# 
  2095  0291                     	;# 
  2096  0291                     	;# 
  2097  0292                     	;# 
  2098  0293                     	;# 
  2099  0298                     	;# 
  2100  0298                     	;# 
  2101  0299                     	;# 
  2102  029A                     	;# 
  2103  0394                     	;# 
  2104  0395                     	;# 
  2105  0396                     	;# 
  2106  0FE4                     	;# 
  2107  0FE5                     	;# 
  2108  0FE6                     	;# 
  2109  0FE7                     	;# 
  2110  0FE8                     	;# 
  2111  0FE9                     	;# 
  2112  0FEA                     	;# 
  2113  0FEB                     	;# 
  2114  0FED                     	;# 
  2115  0FEE                     	;# 
  2116  0FEF                     	;# 
  2117                           
  2118                           	psect	idataBANK4
  2119  160D                     __pidataBANK4:	
  2120                           
  2121                           ;initializer for __product
  2122  160D  3463               	retlw	99
  2123  160E  3402               	retlw	2
  2124  160F  3400               	retlw	0
  2125  1610  3400               	retlw	0
  2126  1611  3400               	retlw	0
  2127  1612  3400               	retlw	0
  2128  1613  3400               	retlw	0
  2129  1614  3400               	retlw	0
  2130  1615  3400               	retlw	0
  2131  1616  3400               	retlw	0
  2132  1617  3400               	retlw	0
  2133  1618  3400               	retlw	0
  2134  1619  34FF               	retlw	255
  2135  161A  34FF               	retlw	255
  2136  161B  34FF               	retlw	255
  2137  161C  3400               	retlw	0
  2138  161D  3400               	retlw	0
  2139  161E  3400               	retlw	0
  2140  161F  3400               	retlw	0
  2141  1620  3400               	retlw	0
  2142  1621  3400               	retlw	0
  2143  1622  3400               	retlw	0
  2144  1623  3400               	retlw	0
  2145  1624  3400               	retlw	0
  2146  1625  3400               	retlw	0
  2147  1626  3400               	retlw	0
  2148  1627  3400               	retlw	0
  2149  1628  3400               	retlw	0
  2150  1629  3400               	retlw	0
  2151  162A  3400               	retlw	0
  2152  162B  3400               	retlw	0
  2153  162C  3400               	retlw	0
  2154                           
  2155                           	psect	nvCOMMON
  2156  007A                     __pnvCOMMON:	
  2157  007A                     _product:	
  2158  007A                     	ds	1
  2159  000C                     _PORTA	set	12
  2160  000D                     _PORTB	set	13
  2161  000E                     _PORTC	set	14
  2162  0018                     _T1CON	set	24
  2163  0017                     _TMR1H	set	23
  2164  0016                     _TMR1L	set	22
  2165  005F                     _GIE	set	95
  2166  005B                     _IOCIE	set	91
  2167  0058                     _IOCIF	set	88
  2168  005E                     _PEIE	set	94
  2169  0060                     _RA0	set	96
  2170  0063                     _RA3	set	99
  2171  0064                     _RA4	set	100
  2172  0066                     _RA6	set	102
  2173  0067                     _RA7	set	103
  2174  0069                     _RB1	set	105
  2175  006A                     _RB2	set	106
  2176  006B                     _RB3	set	107
  2177  006C                     _RB4	set	108
  2178  006D                     _RB5	set	109
  2179  0075                     _RC5	set	117
  2180  0077                     _RC7	set	119
  2181  0088                     _TMR1IF	set	136
  2182  009D                     _ADCON0	set	157
  2183  009E                     _ADCON1	set	158
  2184  009C                     _ADRESH	set	156
  2185  009B                     _ADRESL	set	155
  2186  0099                     _OSCCON	set	153
  2187  008C                     _TRISA	set	140
  2188  008D                     _TRISB	set	141
  2189  008E                     _TRISC	set	142
  2190  0097                     _WDTCON	set	151
  2191  04E9                     _GO_nDONE	set	1257
  2192  0488                     _TMR1IE	set	1160
  2193  0117                     _FVRCON	set	279
  2194  010C                     _LATA	set	268
  2195  010D                     _LATB	set	269
  2196  010E                     _LATC	set	270
  2197  018C                     _ANSELA	set	396
  2198  018D                     _ANSELB	set	397
  2199  018E                     _ANSELC	set	398
  2200  0192                     _PMADRH	set	402
  2201  0191                     _PMADRL	set	401
  2202  0196                     _PMCON2	set	406
  2203  0194                     _PMDATH	set	404
  2204  0193                     _PMDATL	set	403
  2205  0CAE                     _CFGS	set	3246
  2206  0CAC                     _FREE	set	3244
  2207  0CAD                     _LWLO	set	3245
  2208  0CA8                     _RD	set	3240
  2209  0CA9                     _WR	set	3241
  2210  0CAA                     _WREN	set	3242
  2211  020D                     _WPUB	set	525
  2212  1069                     _WPUB1	set	4201
  2213  106A                     _WPUB2	set	4202
  2214  0396                     _IOCBF	set	918
  2215  0395                     _IOCBN	set	917
  2216  0394                     _IOCBP	set	916
  2217  1CB2                     _IOCBF2	set	7346
  2218                           
  2219                           ; #config settings
  2220  0000                     
  2221                           	psect	cinit
  2222  0015                     start_initialization:	
  2223  0015                     __initialization:	
  2224                           
  2225                           ; Clear objects allocated to COMMON
  2226  0015  01F0               	clrf	__pbssCOMMON& (0+127)
  2227  0016  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2228  0017  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2229  0018  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2230  0019  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2231                           
  2232                           ; Clear objects allocated to BANK0
  2233  001A  01EF               	clrf	__pbssBANK0& (0+127)
  2234                           
  2235                           ; Clear objects allocated to BANK1
  2236  001B  30A0               	movlw	low __pbssBANK1
  2237  001C  0084               	movwf	4
  2238  001D  3000               	movlw	high __pbssBANK1
  2239  001E  0085               	movwf	5
  2240  001F  3049               	movlw	73
  2241  0020  3192  22DD  3180   	fcall	clear_ram0
  2242                           
  2243                           ; Clear objects allocated to BANK2
  2244  0023  3020               	movlw	low __pbssBANK2
  2245  0024  0084               	movwf	4
  2246  0025  3001               	movlw	high __pbssBANK2
  2247  0026  0085               	movwf	5
  2248  0027  3050               	movlw	80
  2249  0028  3192  22DD  3180   	fcall	clear_ram0
  2250                           
  2251                           ; Clear objects allocated to BANK3
  2252  002B  30A0               	movlw	low __pbssBANK3
  2253  002C  0084               	movwf	4
  2254  002D  3001               	movlw	high __pbssBANK3
  2255  002E  0085               	movwf	5
  2256  002F  303C               	movlw	60
  2257  0030  3192  22DD  3180   	fcall	clear_ram0
  2258                           
  2259                           ; Initialize objects allocated to BANK4
  2260  0033  300D               	movlw	low __pidataBANK4
  2261  0034  0084               	movwf	4
  2262  0035  3096               	movlw	(high __pidataBANK4)| (0+128)
  2263  0036  0085               	movwf	5
  2264  0037  3020               	movlw	low __pdataBANK4
  2265  0038  0086               	movwf	6
  2266  0039  3002               	movlw	high __pdataBANK4
  2267  003A  0087               	movwf	7
  2268  003B  3020               	movlw	32
  2269  003C  3192  22D7         	fcall	init_ram
  2270  003E                     end_of_initialization:	
  2271                           ;End of C runtime variable initialization code
  2272                           
  2273  003E                     __end_of__initialization:	
  2274  003E  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2275  003F  0020               	movlb	0
  2276  0040  318A  2AA7         	ljmp	_main	;jump to C main() function
  2277                           
  2278                           	psect	bssCOMMON
  2279  0070                     __pbssCOMMON:	
  2280  0070                     _DelayOff:	
  2281  0070                     	ds	2
  2282  0072                     _DimmerLightsIntr:	
  2283  0072                     	ds	1
  2284  0073                     _LED:	
  2285  0073                     	ds	1
  2286  0074                     _Sw:	
  2287  0074                     	ds	1
  2288                           
  2289                           	psect	bssBANK0
  2290  006F                     __pbssBANK0:	
  2291  006F                     _DimmerLights:	
  2292  006F                     	ds	1
  2293                           
  2294                           	psect	bssBANK1
  2295  00A0                     __pbssBANK1:	
  2296  00A0                     _myMain:	
  2297  00A0                     	ds	14
  2298  00AE                     _Buz1:	
  2299  00AE                     	ds	12
  2300  00BA                     _Dimmer:	
  2301  00BA                     	ds	3
  2302  00BD                     _Timer1:	
  2303  00BD                     	ds	3
  2304  00C0                     _WDT:	
  2305  00C0                     	ds	2
  2306  00C2                     _DimmerLights11:	
  2307  00C2                     	ds	1
  2308  00C3                     _DimmerLights22:	
  2309  00C3                     	ds	1
  2310  00C4                     _DimmerLightsIntrIOC:	
  2311  00C4                     	ds	1
  2312  00C5                     _SwDetect:	
  2313  00C5                     	ds	1
  2314  00C6                     _Temp:	
  2315  00C6                     	ds	18
  2316  00D8                     _DlySw1:	
  2317  00D8                     	ds	5
  2318  00DD                     _VarErrLED:	
  2319  00DD                     	ds	4
  2320  00E1                     _VarLED1:	
  2321  00E1                     	ds	4
  2322  00E5                     _VarLED2:	
  2323  00E5                     	ds	4
  2324                           
  2325                           	psect	bssBANK2
  2326  0120                     __pbssBANK2:	
  2327  0120                     _Load:	
  2328  0120                     	ds	46
  2329  014E                     _DimmerLights1:	
  2330  014E                     	ds	17
  2331  015F                     _DimmerLights2:	
  2332  015F                     	ds	17
  2333                           
  2334                           	psect	bssBANK3
  2335  01A0                     __pbssBANK3:	
  2336  01A0                     _Memory:	
  2337  01A0                     	ds	37
  2338  01C5                     _Sw1:	
  2339  01C5                     	ds	9
  2340  01CE                     _Sw2:	
  2341  01CE                     	ds	9
  2342  01D7                     _DlySw2:	
  2343  01D7                     	ds	5
  2344                           
  2345                           	psect	dataBANK4
  2346  0220                     __pdataBANK4:	
  2347  0220                     __product:	
  2348  0220                     	ds	32
  2349                           
  2350                           	psect	clrtext
  2351  12DD                     clear_ram0:	
  2352                           ;	Called with FSR0 containing the base address, and
  2353                           ;	WREG with the size to clear
  2354                           
  2355  12DD  0064               	clrwdt	;clear the watchdog before getting into this loop
  2356  12DE                     clrloop0:	
  2357  12DE  0180               	clrf	0	;clear RAM location pointed to by FSR
  2358  12DF  3101               	addfsr 0,1
  2359  12E0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2360  12E1  2ADE               	goto	clrloop0	;have we reached the end yet?
  2361  12E2  3400               	retlw	0	;all done for this memory range, return
  2362                           
  2363                           	psect	inittext
  2364  12D7                     init_ram:	
  2365  12D7  00FE               	movwf	126
  2366  12D8                     initloop:	
  2367  12D8  0012               	moviw fsr0++
  2368  12D9  001E               	movwi fsr1++
  2369  12DA  0BFE               	decfsz	126,f
  2370  12DB  2AD8               	goto	initloop
  2371  12DC  3400               	retlw	0
  2372                           
  2373                           	psect	cstackBANK3
  2374  01DC                     __pcstackBANK3:	
  2375  01DC                     ?_main:	
  2376  01DC                     main@argc:	
  2377                           ; 2 bytes @ 0x0
  2378                           
  2379                           
  2380                           ; 2 bytes @ 0x0
  2381  01DC                     	ds	2
  2382  01DE                     main@argv:	
  2383                           
  2384                           ; 2 bytes @ 0x2
  2385  01DE                     	ds	2
  2386                           
  2387                           	psect	cstackBANK1
  2388  00E9                     __pcstackBANK1:	
  2389  00E9                     setDimmerLights_ErrorClose@count:	
  2390  00E9                     Exception_Main@count:	
  2391                           ; 1 bytes @ 0x0
  2392                           
  2393  00E9                     setSw_Main@sw:	
  2394                           ; 1 bytes @ 0x0
  2395                           
  2396                           
  2397                           ; 1 bytes @ 0x0
  2398  00E9                     	ds	1
  2399  00EA                     setDimmerLights_ErrorClose@lights:	
  2400  00EA                     Exception_Main@error:	
  2401                           ; 1 bytes @ 0x1
  2402                           
  2403                           
  2404                           ; 1 bytes @ 0x1
  2405  00EA                     	ds	1
  2406  00EB                     setDimmerLights_ErrorClose@i:	
  2407  00EB                     Exception_Main@i:	
  2408                           ; 2 bytes @ 0x2
  2409                           
  2410                           
  2411                           ; 2 bytes @ 0x2
  2412  00EB                     	ds	2
  2413  00ED                     ??_DlyOff_Main:	
  2414  00ED                     Exception_Main@i_3142:	
  2415                           ; 0 bytes @ 0x4
  2416                           
  2417                           
  2418                           ; 2 bytes @ 0x4
  2419  00ED                     	ds	2
  2420  00EF                     Exception_Main@lights:	
  2421                           
  2422                           ; 1 bytes @ 0x6
  2423  00EF                     	ds	1
  2424                           
  2425                           	psect	cstackCOMMON
  2426  0075                     __pcstackCOMMON:	
  2427  0075                     ?_DlyOff_Initialization:	
  2428  0075                     ?_DlyOff_Main:	
  2429                           ; 0 bytes @ 0x0
  2430                           
  2431  0075                     ?_setDimmerLights_ErrorClose:	
  2432                           ; 0 bytes @ 0x0
  2433                           
  2434  0075                     ?_setDimmerLights_Initialization:	
  2435                           ; 0 bytes @ 0x0
  2436                           
  2437  0075                     ?_setDimmerLights_Main:	
  2438                           ; 0 bytes @ 0x0
  2439                           
  2440  0075                     ?_setDimmerLights_Line:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0075                     ?_setLED_Initialization:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0075                     ?_setLED_Main:	
  2447                           ; 0 bytes @ 0x0
  2448                           
  2449  0075                     ?_Fosc_Set:	
  2450                           ; 0 bytes @ 0x0
  2451                           
  2452  0075                     ?_IO_Set:	
  2453                           ; 0 bytes @ 0x0
  2454                           
  2455  0075                     ?_TMR1_Set:	
  2456                           ; 0 bytes @ 0x0
  2457                           
  2458  0075                     ?_ADC_Set:	
  2459                           ; 0 bytes @ 0x0
  2460                           
  2461  0075                     ?_IOC_Set:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0075                     ?_WDT_Set:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0075                     ?_IOC_ISR:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0075                     ?_TMR1_ISR:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0075                     ?_Timeout_Counter:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0075                     ?_set_TimeoutCleared:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0075                     ?_Flash_Memory_Write:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0075                     ?_Flash_Memory_Modify:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0075                     ?_WDT_Clearing:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0075                     ?_myMain_Initialization:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0075                     ?_Temp_Initialization:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0075                     ?_Load_Initialization:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0075                     ?_Switch_Initialization:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0075                     ?_getLoad_AD:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0075                     ?_getTemp_AD:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0075                     ?_my_MainTimer:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0075                     ?_Temp_Main:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0075                     ?_Load_Main:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0075                     ?_Switch_Main:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0075                     ?_Exception_Main:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0075                     ?_setLoad_AH_AL_Restore:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0075                     ?_setTemp_Initialization:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0075                     ?_setTemp_Main:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0075                     ?_setSw_Initialization:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0075                     ?_setSw_Main:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0075                     ?_Buzzer_Initialization:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0075                     ?_Buzzer_Main:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0075                     ?_DelayOffPointSelect:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0075                     ?_DelayOff_Initialization:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0075                     ?_DelayOff_Main:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0075                     ?_DimmerIntrIOCPointSelect:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0075                     ??_DimmerIntrIOCPointSelect:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0075                     ?_setDimmerLights_IntrIOC_GO:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0075                     ?_DimmerIntrPointSelect:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0075                     ??_DimmerIntrPointSelect:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0075                     ?_setDimmerLights_IntrControl:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0075                     ?_DimmerLightsPointSelect:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0075                     ?_DimmerLights_Initialization:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0075                     ?_setDimmerLights_SwOn:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0075                     ?_setDimmerLights_SwOff:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0075                     ?_setDimmerLights_AdjOn:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0075                     ?_DimmerLights_Main:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0075                     ?_LedPointSelect:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0075                     ?_LED_Initialization:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0075                     ?_LED_Main:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0075                     ?_Mcu_Initialization:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0075                     ?_ISR:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0075                     ?_setDimmerReClock:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0075                     ?_Flash_Memory_Initialization:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0075                     ?_Flash_Memory_Main:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0075                     ?_Flash_Memory_Unlock:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0075                     ?_Flash_Memory_Erasing:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0075                     ?_WDT_Main:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0075                     ?_TouchPower:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0075                     ?_SwPointSelect:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0075                     ?_DelayTimejudge:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0075                     ?_getLoad_OK:	
  2630                           ; 1 bytes @ 0x0
  2631                           
  2632  0075                     ?_getMain_All_Error_Status:	
  2633                           ; 1 bytes @ 0x0
  2634                           
  2635  0075                     ?_getMain_LightsStatus:	
  2636                           ; 1 bytes @ 0x0
  2637                           
  2638  0075                     ?_getDimmerLights_Allow_Condition:	
  2639                           ; 1 bytes @ 0x0
  2640                           
  2641  0075                     ?_setPercentValue:	
  2642                           ; 1 bytes @ 0x0
  2643                           
  2644  0075                     ?_Flash_Memory_Read:	
  2645                           ; 1 bytes @ 0x0
  2646                           
  2647  0075                     ?_getSw_KeyStatus:	
  2648                           ; 1 bytes @ 0x0
  2649                           
  2650  0075                     ?_getDelayOff_GO:	
  2651                           ; 1 bytes @ 0x0
  2652                           
  2653  0075                     ?_getDimmer_LoadGO:	
  2654                           ; 1 bytes @ 0x0
  2655                           
  2656  0075                     ?_getDimmerLights_Line:	
  2657                           ; 1 bytes @ 0x0
  2658                           
  2659  0075                     ?_getDimmerLights_Status:	
  2660                           ; 1 bytes @ 0x0
  2661                           
  2662  0075                     ?_getAll_DimmerLights_AdjSw:	
  2663                           ; 1 bytes @ 0x0
  2664                           
  2665  0075                     ?_getDimmer_Load_Status:	
  2666                           ; 1 bytes @ 0x0
  2667                           
  2668  0075                     ?_getMain_Lights_Count:	
  2669                           ; 1 bytes @ 0x0
  2670                           
  2671                           
  2672                           ; 1 bytes @ 0x0
  2673  0075                     	ds	1
  2674  0076                     DimmerIntrIOCPointSelect@lights:	
  2675  0076                     DimmerIntrPointSelect@lights:	
  2676                           ; 1 bytes @ 0x1
  2677                           
  2678                           
  2679                           ; 1 bytes @ 0x1
  2680  0076                     	ds	1
  2681  0077                     ??_setDimmerLights_IntrIOC_GO:	
  2682  0077                     ??_setDimmerLights_IntrControl:	
  2683                           ; 0 bytes @ 0x2
  2684                           
  2685  0077                     setDimmerLights_IntrIOC_GO@lights:	
  2686                           ; 0 bytes @ 0x2
  2687                           
  2688                           
  2689                           ; 1 bytes @ 0x2
  2690  0077                     	ds	1
  2691  0078                     ??_IOC_ISR:	
  2692  0078                     ??_setDimmerReClock:	
  2693                           ; 0 bytes @ 0x3
  2694                           
  2695  0078                     setDimmerLights_IntrControl@lights:	
  2696                           ; 0 bytes @ 0x3
  2697                           
  2698                           
  2699                           ; 1 bytes @ 0x3
  2700  0078                     	ds	1
  2701  0079                     ??_TMR1_ISR:	
  2702  0079                     ??_ISR:	
  2703                           ; 0 bytes @ 0x4
  2704                           
  2705                           
  2706                           ; 0 bytes @ 0x4
  2707  0079                     	ds	1
  2708                           
  2709                           	psect	cstackBANK0
  2710  0020                     __pcstackBANK0:	
  2711  0020                     ??_getLoad_OK:	
  2712  0020                     ??_getMain_All_Error_Status:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0020                     ??_getMain_LightsStatus:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0020                     ??_setDimmerLights_Line:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0020                     ??_Fosc_Set:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0020                     ??_IO_Set:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0020                     ??_TMR1_Set:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0020                     ??_ADC_Set:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0020                     ??_IOC_Set:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0020                     ??_WDT_Set:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0020                     ??_Timeout_Counter:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0020                     ??_set_TimeoutCleared:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0020                     ??_Flash_Memory_Read:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0020                     ?_setMemory_Data:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0020                     ??_Flash_Memory_Write:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0020                     ??_WDT_Clearing:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0020                     ??_myMain_Initialization:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0020                     ??_Temp_Initialization:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0020                     ??_setLoad_AH_AL_Restore:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0020                     ??_setTemp_Initialization:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0020                     ??_getSw_KeyStatus:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0020                     ??_Buzzer_Initialization:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0020                     ??_Buzzer_Main:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0020                     ??_DelayOffPointSelect:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0020                     ??_DimmerLightsPointSelect:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0020                     ??_getDimmer_LoadGO:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0020                     ??_getDimmerLights_Line:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0020                     ??_getDimmer_Load_Status:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0020                     ??_LedPointSelect:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0020                     ??_Flash_Memory_Unlock:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0020                     ??_Flash_Memory_Erasing:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0020                     ??_WDT_Main:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0020                     ??_getMain_Lights_Count:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0020                     ??_TouchPower:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0020                     ??_SwPointSelect:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ?___bmul:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ?_getAD:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0020                     ?___wmul:	
  2821                           ; 2 bytes @ 0x0
  2822                           
  2823  0020                     ?___awdiv:	
  2824                           ; 2 bytes @ 0x0
  2825                           
  2826  0020                     ?___lwdiv:	
  2827                           ; 2 bytes @ 0x0
  2828                           
  2829  0020                     ?___ftpack:	
  2830                           ; 2 bytes @ 0x0
  2831                           
  2832  0020                     DelayOffPointSelect@sw:	
  2833                           ; 3 bytes @ 0x0
  2834                           
  2835  0020                     getDimmer_LoadGO@loadgo:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0020                     setDimmerLights_Line@lights:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841  0020                     getDimmer_Load_Status@status:	
  2842                           ; 1 bytes @ 0x0
  2843                           
  2844  0020                     getAD@adcon1:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847  0020                     setMemory_Data@data:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0020                     getMain_LightsStatus@status:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0020                     getMain_Lights_Count@count:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0020                     getLoad_OK@ok:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0020                     ___bmul@multiplicand:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0020                     ___wmul@multiplier:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0020                     ___awdiv@divisor:	
  2866                           ; 2 bytes @ 0x0
  2867                           
  2868  0020                     ___lwdiv@divisor:	
  2869                           ; 2 bytes @ 0x0
  2870                           
  2871  0020                     ___ftpack@arg:	
  2872                           ; 2 bytes @ 0x0
  2873                           
  2874                           
  2875                           ; 3 bytes @ 0x0
  2876  0020                     	ds	1
  2877  0021                     ??_DlyOff_Initialization:	
  2878  0021                     ??_getDimmerLights_Allow_Condition:	
  2879                           ; 0 bytes @ 0x1
  2880                           
  2881  0021                     ??_setMemory_Data:	
  2882                           ; 0 bytes @ 0x1
  2883                           
  2884  0021                     ??_getDelayOff_GO:	
  2885                           ; 0 bytes @ 0x1
  2886                           
  2887  0021                     ??_Mcu_Initialization:	
  2888                           ; 0 bytes @ 0x1
  2889                           
  2890  0021                     ??___bmul:	
  2891                           ; 0 bytes @ 0x1
  2892                           
  2893  0021                     DlyOff_Initialization@sw:	
  2894                           ; 0 bytes @ 0x1
  2895                           
  2896  0021                     getDelayOff_GO@sw:	
  2897                           ; 1 bytes @ 0x1
  2898                           
  2899  0021                     DimmerLightsPointSelect@lights:	
  2900                           ; 1 bytes @ 0x1
  2901                           
  2902  0021                     getDimmerLights_Line@line:	
  2903                           ; 1 bytes @ 0x1
  2904                           
  2905  0021                     LedPointSelect@led:	
  2906                           ; 1 bytes @ 0x1
  2907                           
  2908  0021                     Flash_Memory_Read@i:	
  2909                           ; 1 bytes @ 0x1
  2910                           
  2911  0021                     Flash_Memory_Write@i:	
  2912                           ; 1 bytes @ 0x1
  2913                           
  2914  0021                     getMain_Lights_Count@status1:	
  2915                           ; 1 bytes @ 0x1
  2916                           
  2917  0021                     setLoad_AH_AL_Restore@i:	
  2918                           ; 1 bytes @ 0x1
  2919                           
  2920  0021                     SwPointSelect@sw:	
  2921                           ; 1 bytes @ 0x1
  2922                           
  2923  0021                     _getSw_KeyStatus$5330:	
  2924                           ; 1 bytes @ 0x1
  2925                           
  2926  0021                     _getMain_All_Error_Status$3127:	
  2927                           ; 1 bytes @ 0x1
  2928                           
  2929                           
  2930                           ; 2 bytes @ 0x1
  2931  0021                     	ds	1
  2932  0022                     ??_setDimmerLights_Initialization:	
  2933  0022                     ?_setLED:	
  2934                           ; 0 bytes @ 0x2
  2935                           
  2936  0022                     ??_setLED_Main:	
  2937                           ; 0 bytes @ 0x2
  2938                           
  2939  0022                     ??_Load_Initialization:	
  2940                           ; 0 bytes @ 0x2
  2941                           
  2942  0022                     ??_DelayOff_Initialization:	
  2943                           ; 0 bytes @ 0x2
  2944                           
  2945  0022                     ??_setDimmerLights_AdjOn:	
  2946                           ; 0 bytes @ 0x2
  2947                           
  2948  0022                     ??_getDimmerLights_Status:	
  2949                           ; 0 bytes @ 0x2
  2950                           
  2951  0022                     ??_getAll_DimmerLights_AdjSw:	
  2952                           ; 0 bytes @ 0x2
  2953                           
  2954  0022                     getDelayOff_GO@go:	
  2955                           ; 0 bytes @ 0x2
  2956                           
  2957  0022                     setDimmerLights_AdjOn@sw:	
  2958                           ; 1 bytes @ 0x2
  2959                           
  2960  0022                     _getDimmerLights_Allow_Condition$1979:	
  2961                           ; 1 bytes @ 0x2
  2962                           
  2963  0022                     getDimmerLights_Status@lights:	
  2964                           ; 1 bytes @ 0x2
  2965                           
  2966  0022                     setLED@command:	
  2967                           ; 1 bytes @ 0x2
  2968                           
  2969  0022                     Flash_Memory_Read@address:	
  2970                           ; 1 bytes @ 0x2
  2971                           
  2972  0022                     setMemory_Data@address:	
  2973                           ; 1 bytes @ 0x2
  2974                           
  2975  0022                     getMain_Lights_Count@status2:	
  2976                           ; 1 bytes @ 0x2
  2977                           
  2978  0022                     _getSw_KeyStatus$5331:	
  2979                           ; 1 bytes @ 0x2
  2980                           
  2981  0022                     ___bmul@product:	
  2982                           ; 1 bytes @ 0x2
  2983                           
  2984  0022                     ___wmul@multiplicand:	
  2985                           ; 1 bytes @ 0x2
  2986                           
  2987  0022                     ___awdiv@dividend:	
  2988                           ; 2 bytes @ 0x2
  2989                           
  2990  0022                     ___lwdiv@dividend:	
  2991                           ; 2 bytes @ 0x2
  2992                           
  2993                           
  2994                           ; 2 bytes @ 0x2
  2995  0022                     	ds	1
  2996  0023                     ??_setLED:	
  2997  0023                     ??_getAD:	
  2998                           ; 0 bytes @ 0x3
  2999                           
  3000  0023                     setDimmerLights_Initialization@lights:	
  3001                           ; 0 bytes @ 0x3
  3002                           
  3003  0023                     _getDimmerLights_Allow_Condition$1980:	
  3004                           ; 1 bytes @ 0x3
  3005                           
  3006  0023                     getDimmerLights_Status@status:	
  3007                           ; 1 bytes @ 0x3
  3008                           
  3009  0023                     getAll_DimmerLights_AdjSw@count:	
  3010                           ; 1 bytes @ 0x3
  3011                           
  3012  0023                     setLED@led:	
  3013                           ; 1 bytes @ 0x3
  3014                           
  3015  0023                     getAD@adcon0:	
  3016                           ; 1 bytes @ 0x3
  3017                           
  3018  0023                     Flash_Memory_Read@ret:	
  3019                           ; 1 bytes @ 0x3
  3020                           
  3021  0023                     getSw_KeyStatus@status:	
  3022                           ; 1 bytes @ 0x3
  3023                           
  3024  0023                     ___bmul@multiplier:	
  3025                           ; 1 bytes @ 0x3
  3026                           
  3027  0023                     ___ftpack@exp:	
  3028                           ; 1 bytes @ 0x3
  3029                           
  3030  0023                     _getMain_All_Error_Status$3128:	
  3031                           ; 1 bytes @ 0x3
  3032                           
  3033                           
  3034                           ; 2 bytes @ 0x3
  3035  0023                     	ds	1
  3036  0024                     ??_DelayTimejudge:	
  3037  0024                     ??_setLED_Initialization:	
  3038                           ; 0 bytes @ 0x4
  3039                           
  3040  0024                     ??_Flash_Memory_Modify:	
  3041                           ; 0 bytes @ 0x4
  3042                           
  3043  0024                     ??_getLoad_AD:	
  3044                           ; 0 bytes @ 0x4
  3045                           
  3046  0024                     ??_getTemp_AD:	
  3047                           ; 0 bytes @ 0x4
  3048                           
  3049  0024                     ??_setSw_Initialization:	
  3050                           ; 0 bytes @ 0x4
  3051                           
  3052  0024                     ??_DimmerLights_Initialization:	
  3053                           ; 0 bytes @ 0x4
  3054                           
  3055  0024                     ??___wmul:	
  3056                           ; 0 bytes @ 0x4
  3057                           
  3058  0024                     ??___awdiv:	
  3059                           ; 0 bytes @ 0x4
  3060                           
  3061  0024                     ??___lwdiv:	
  3062                           ; 0 bytes @ 0x4
  3063                           
  3064  0024                     _getDimmerLights_Allow_Condition$1981:	
  3065                           ; 0 bytes @ 0x4
  3066                           
  3067  0024                     setLED_Initialization@led:	
  3068                           ; 1 bytes @ 0x4
  3069                           
  3070  0024                     setLED_Main@led:	
  3071                           ; 1 bytes @ 0x4
  3072                           
  3073  0024                     setSw_Initialization@sw:	
  3074                           ; 1 bytes @ 0x4
  3075                           
  3076  0024                     getSw_KeyStatus@sw:	
  3077                           ; 1 bytes @ 0x4
  3078                           
  3079  0024                     ___ftpack@sign:	
  3080                           ; 1 bytes @ 0x4
  3081                           
  3082  0024                     getAll_DimmerLights_AdjSw@i:	
  3083                           ; 1 bytes @ 0x4
  3084                           
  3085  0024                     ___wmul@product:	
  3086                           ; 2 bytes @ 0x4
  3087                           
  3088                           
  3089                           ; 2 bytes @ 0x4
  3090  0024                     	ds	1
  3091  0025                     ??_Switch_Initialization:	
  3092  0025                     ??___ftpack:	
  3093                           ; 0 bytes @ 0x5
  3094                           
  3095  0025                     ??_LED_Initialization:	
  3096                           ; 0 bytes @ 0x5
  3097                           
  3098  0025                     ??_LED_Main:	
  3099                           ; 0 bytes @ 0x5
  3100                           
  3101  0025                     getDimmerLights_Allow_Condition@lights:	
  3102                           ; 0 bytes @ 0x5
  3103                           
  3104  0025                     Flash_Memory_Modify@i:	
  3105                           ; 1 bytes @ 0x5
  3106                           
  3107  0025                     getMain_All_Error_Status@command:	
  3108                           ; 1 bytes @ 0x5
  3109                           
  3110  0025                     getTemp_AD@channel:	
  3111                           ; 1 bytes @ 0x5
  3112                           
  3113  0025                     ___awdiv@counter:	
  3114                           ; 1 bytes @ 0x5
  3115                           
  3116  0025                     ___lwdiv@counter:	
  3117                           ; 1 bytes @ 0x5
  3118                           
  3119                           
  3120                           ; 1 bytes @ 0x5
  3121  0025                     	ds	1
  3122  0026                     ??_Flash_Memory_Main:	
  3123  0026                     DelayTimejudge@i:	
  3124                           ; 0 bytes @ 0x6
  3125                           
  3126  0026                     getDimmerLights_Allow_Condition@allow:	
  3127                           ; 1 bytes @ 0x6
  3128                           
  3129  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3130                           ; 1 bytes @ 0x6
  3131                           
  3132  0026                     getMain_All_Error_Status@status:	
  3133                           ; 1 bytes @ 0x6
  3134                           
  3135  0026                     getLoad_AD@channel:	
  3136                           ; 1 bytes @ 0x6
  3137                           
  3138  0026                     ___awdiv@sign:	
  3139                           ; 1 bytes @ 0x6
  3140                           
  3141  0026                     ___lwdiv@quotient:	
  3142                           ; 1 bytes @ 0x6
  3143                           
  3144                           
  3145                           ; 2 bytes @ 0x6
  3146  0026                     	ds	1
  3147  0027                     DelayTimejudge@j:	
  3148  0027                     getLoad_AD@k:	
  3149                           ; 1 bytes @ 0x7
  3150                           
  3151  0027                     ___awdiv@quotient:	
  3152                           ; 1 bytes @ 0x7
  3153                           
  3154                           
  3155                           ; 2 bytes @ 0x7
  3156  0027                     	ds	1
  3157  0028                     ??_Load_Main:	
  3158  0028                     ?___awtoft:	
  3159                           ; 0 bytes @ 0x8
  3160                           
  3161  0028                     DelayTimejudge@k:	
  3162                           ; 3 bytes @ 0x8
  3163                           
  3164  0028                     getLoad_AD@j:	
  3165                           ; 1 bytes @ 0x8
  3166                           
  3167  0028                     ___awtoft@c:	
  3168                           ; 1 bytes @ 0x8
  3169                           
  3170                           
  3171                           ; 2 bytes @ 0x8
  3172  0028                     	ds	1
  3173  0029                     ?_setBuz:	
  3174  0029                     DelayTimejudge@value:	
  3175                           ; 0 bytes @ 0x9
  3176                           
  3177  0029                     getLoad_AD@i:	
  3178                           ; 1 bytes @ 0x9
  3179                           
  3180  0029                     setBuz@time:	
  3181                           ; 1 bytes @ 0x9
  3182                           
  3183                           
  3184                           ; 2 bytes @ 0x9
  3185  0029                     	ds	1
  3186  002A                     Load_Main@error:	
  3187                           
  3188                           ; 1 bytes @ 0xA
  3189  002A                     	ds	1
  3190  002B                     ??_setBuz:	
  3191  002B                     ??___awtoft:	
  3192                           ; 0 bytes @ 0xB
  3193                           
  3194  002B                     Load_Main@Load_Status:	
  3195                           ; 0 bytes @ 0xB
  3196                           
  3197                           
  3198                           ; 1 bytes @ 0xB
  3199  002B                     	ds	1
  3200  002C                     setBuz@count:	
  3201  002C                     Load_Main@i:	
  3202                           ; 1 bytes @ 0xC
  3203                           
  3204                           
  3205                           ; 2 bytes @ 0xC
  3206  002C                     	ds	1
  3207  002D                     ??_my_MainTimer:	
  3208  002D                     ??_setDimmerLights_SwOn:	
  3209                           ; 0 bytes @ 0xD
  3210                           
  3211  002D                     ___awtoft@sign:	
  3212                           ; 0 bytes @ 0xD
  3213                           
  3214                           
  3215                           ; 1 bytes @ 0xD
  3216  002D                     	ds	1
  3217  002E                     ?___ftdiv:	
  3218  002E                     _setDimmerLights_SwOn$1960:	
  3219                           ; 3 bytes @ 0xE
  3220                           
  3221  002E                     ___ftdiv@f2:	
  3222                           ; 1 bytes @ 0xE
  3223                           
  3224                           
  3225                           ; 3 bytes @ 0xE
  3226  002E                     	ds	1
  3227  002F                     _setDimmerLights_SwOn$1961:	
  3228                           
  3229                           ; 1 bytes @ 0xF
  3230  002F                     	ds	1
  3231  0030                     setDimmerLights_SwOn@idle:	
  3232                           
  3233                           ; 1 bytes @ 0x10
  3234  0030                     	ds	1
  3235  0031                     setDimmerLights_SwOn@sw:	
  3236  0031                     ___ftdiv@f1:	
  3237                           ; 1 bytes @ 0x11
  3238                           
  3239                           
  3240                           ; 3 bytes @ 0x11
  3241  0031                     	ds	3
  3242  0034                     ??___ftdiv:	
  3243                           
  3244                           ; 0 bytes @ 0x14
  3245  0034                     	ds	4
  3246  0038                     ___ftdiv@cntr:	
  3247                           
  3248                           ; 1 bytes @ 0x18
  3249  0038                     	ds	1
  3250  0039                     ___ftdiv@f3:	
  3251                           
  3252                           ; 3 bytes @ 0x19
  3253  0039                     	ds	3
  3254  003C                     ___ftdiv@exp:	
  3255                           
  3256                           ; 1 bytes @ 0x1C
  3257  003C                     	ds	1
  3258  003D                     ___ftdiv@sign:	
  3259                           
  3260                           ; 1 bytes @ 0x1D
  3261  003D                     	ds	1
  3262  003E                     ?___ftneg:	
  3263  003E                     ___ftneg@f1:	
  3264                           ; 3 bytes @ 0x1E
  3265                           
  3266                           
  3267                           ; 3 bytes @ 0x1E
  3268  003E                     	ds	3
  3269  0041                     ??___ftneg:	
  3270  0041                     ?___ftadd:	
  3271                           ; 0 bytes @ 0x21
  3272                           
  3273  0041                     ___ftadd@f1:	
  3274                           ; 3 bytes @ 0x21
  3275                           
  3276                           
  3277                           ; 3 bytes @ 0x21
  3278  0041                     	ds	3
  3279  0044                     ___ftadd@f2:	
  3280                           
  3281                           ; 3 bytes @ 0x24
  3282  0044                     	ds	3
  3283  0047                     ??___ftadd:	
  3284                           
  3285                           ; 0 bytes @ 0x27
  3286  0047                     	ds	4
  3287  004B                     ___ftadd@sign:	
  3288                           
  3289                           ; 1 bytes @ 0x2B
  3290  004B                     	ds	1
  3291  004C                     ___ftadd@exp2:	
  3292                           
  3293                           ; 1 bytes @ 0x2C
  3294  004C                     	ds	1
  3295  004D                     ___ftadd@exp1:	
  3296                           
  3297                           ; 1 bytes @ 0x2D
  3298  004D                     	ds	1
  3299  004E                     ?___fttol:	
  3300  004E                     ___fttol@f1:	
  3301                           ; 4 bytes @ 0x2E
  3302                           
  3303                           
  3304                           ; 3 bytes @ 0x2E
  3305  004E                     	ds	4
  3306  0052                     ??___fttol:	
  3307                           
  3308                           ; 0 bytes @ 0x32
  3309  0052                     	ds	4
  3310  0056                     ___fttol@sign1:	
  3311                           
  3312                           ; 1 bytes @ 0x36
  3313  0056                     	ds	1
  3314  0057                     ___fttol@lval:	
  3315                           
  3316                           ; 4 bytes @ 0x37
  3317  0057                     	ds	4
  3318  005B                     ___fttol@exp1:	
  3319                           
  3320                           ; 1 bytes @ 0x3B
  3321  005B                     	ds	1
  3322  005C                     ??_setPercentValue:	
  3323                           
  3324                           ; 0 bytes @ 0x3C
  3325  005C                     	ds	2
  3326  005E                     setPercentValue@value:	
  3327                           
  3328                           ; 1 bytes @ 0x3E
  3329  005E                     	ds	1
  3330  005F                     setPercentValue@i:	
  3331                           
  3332                           ; 3 bytes @ 0x3F
  3333  005F                     	ds	3
  3334  0062                     ?_setProductData:	
  3335  0062                     ??_Flash_Memory_Initialization:	
  3336                           ; 0 bytes @ 0x42
  3337                           
  3338  0062                     setProductData@value:	
  3339                           ; 0 bytes @ 0x42
  3340                           
  3341                           
  3342                           ; 1 bytes @ 0x42
  3343  0062                     	ds	1
  3344  0063                     ??_setProductData:	
  3345  0063                     Flash_Memory_Initialization@i:	
  3346                           ; 0 bytes @ 0x43
  3347                           
  3348                           
  3349                           ; 1 bytes @ 0x43
  3350  0063                     	ds	2
  3351  0065                     setProductData@address:	
  3352                           
  3353                           ; 1 bytes @ 0x45
  3354  0065                     	ds	1
  3355  0066                     ?_setDimmerLights:	
  3356  0066                     ?_setDimmerLights_Adj:	
  3357                           ; 0 bytes @ 0x46
  3358                           
  3359  0066                     ??_setTemp_Main:	
  3360                           ; 0 bytes @ 0x46
  3361                           
  3362  0066                     ?_setDelayOff_GO:	
  3363                           ; 0 bytes @ 0x46
  3364                           
  3365  0066                     setDelayOff_GO@command:	
  3366                           ; 0 bytes @ 0x46
  3367                           
  3368  0066                     setDimmerLights@status:	
  3369                           ; 1 bytes @ 0x46
  3370                           
  3371  0066                     setDimmerLights_Adj@status:	
  3372                           ; 1 bytes @ 0x46
  3373                           
  3374                           
  3375                           ; 1 bytes @ 0x46
  3376  0066                     	ds	1
  3377  0067                     ??_setDimmerLights:	
  3378  0067                     ??_setDimmerLights_Adj:	
  3379                           ; 0 bytes @ 0x47
  3380                           
  3381  0067                     setDelayOff_GO@value:	
  3382                           ; 0 bytes @ 0x47
  3383                           
  3384                           
  3385                           ; 1 bytes @ 0x47
  3386  0067                     	ds	1
  3387  0068                     ??_setDelayOff_GO:	
  3388  0068                     setDimmerLights@lights:	
  3389                           ; 0 bytes @ 0x48
  3390                           
  3391  0068                     setDimmerLights_Adj@lights:	
  3392                           ; 1 bytes @ 0x48
  3393                           
  3394  0068                     setTemp_Main@error:	
  3395                           ; 1 bytes @ 0x48
  3396                           
  3397                           
  3398                           ; 1 bytes @ 0x48
  3399  0068                     	ds	1
  3400  0069                     ??_setDimmerLights_Main:	
  3401  0069                     ??_Temp_Main:	
  3402                           ; 0 bytes @ 0x49
  3403                           
  3404  0069                     setDimmerLights_Main@lights:	
  3405                           ; 0 bytes @ 0x49
  3406                           
  3407                           
  3408                           ; 1 bytes @ 0x49
  3409  0069                     	ds	1
  3410  006A                     ??_DimmerLights_Main:	
  3411                           
  3412                           ; 0 bytes @ 0x4A
  3413  006A                     	ds	1
  3414  006B                     setDelayOff_GO@sw:	
  3415                           
  3416                           ; 1 bytes @ 0x4B
  3417  006B                     	ds	1
  3418  006C                     ??_setDimmerLights_SwOff:	
  3419  006C                     setDimmerLights_SwOff@sw:	
  3420                           ; 0 bytes @ 0x4C
  3421                           
  3422                           
  3423                           ; 1 bytes @ 0x4C
  3424  006C                     	ds	1
  3425  006D                     ??_setDimmerLights_ErrorClose:	
  3426  006D                     ??_Exception_Main:	
  3427                           ; 0 bytes @ 0x4D
  3428                           
  3429  006D                     ??_setSw_Main:	
  3430                           ; 0 bytes @ 0x4D
  3431                           
  3432                           
  3433                           ; 0 bytes @ 0x4D
  3434  006D                     	ds	1
  3435  006E                     DlyOff_Main@sw:	
  3436                           
  3437                           ; 1 bytes @ 0x4E
  3438  006E                     	ds	1
  3439  006F                     ??_Switch_Main:	
  3440  006F                     ??_DelayOff_Main:	
  3441                           ; 0 bytes @ 0x4F
  3442                           
  3443  006F                     ??_main:	
  3444                           ; 0 bytes @ 0x4F
  3445                           
  3446                           
  3447                           	psect	maintext
  3448  0AA7                     __pmaintext:	
  3449                           ; 0 bytes @ 0x4F
  3450 ;;
  3451 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3452 ;;
  3453 ;; *************** function _main *****************
  3454 ;; Defined at:
  3455 ;;		line 7 in file "../src/Main_B1.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  argc            2    0[BANK3 ] int 
  3458 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;		None
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  2    0[BANK3 ] int 
  3463 ;; Registers used:
  3464 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3465 ;; Tracked objects:
  3466 ;;		On entry : 17F/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3470 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3473 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3474 ;;Total ram usage:        4 bytes
  3475 ;; Hardware stack levels required when called:   12
  3476 ;; This function calls:
  3477 ;;		_Buzzer_Initialization
  3478 ;;		_Buzzer_Main
  3479 ;;		_DelayOff_Initialization
  3480 ;;		_DelayOff_Main
  3481 ;;		_DimmerLights_Initialization
  3482 ;;		_DimmerLights_Main
  3483 ;;		_Exception_Main
  3484 ;;		_Flash_Memory_Initialization
  3485 ;;		_Flash_Memory_Main
  3486 ;;		_LED_Initialization
  3487 ;;		_LED_Main
  3488 ;;		_Load_Initialization
  3489 ;;		_Load_Main
  3490 ;;		_Mcu_Initialization
  3491 ;;		_Switch_Initialization
  3492 ;;		_Switch_Main
  3493 ;;		_Temp_Initialization
  3494 ;;		_Temp_Main
  3495 ;;		_WDT_Main
  3496 ;;		_getLoad_AD
  3497 ;;		_getTemp_AD
  3498 ;;		_myMain_Initialization
  3499 ;;		_my_MainTimer
  3500 ;; This function is called by:
  3501 ;;		Startup code after reset
  3502 ;; This function uses a non-reentrant model
  3503 ;;
  3504                           
  3505                           
  3506                           ;psect for function _main
  3507  0AA7                     _main:	
  3508                           
  3509                           ;Main_B1.c: 8: myMain_Initialization();
  3510                           
  3511                           ;incstack = 0
  3512                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3513  0AA7  3193  23BC  318A   	fcall	_myMain_Initialization
  3514                           
  3515                           ;Main_B1.c: 9: Mcu_Initialization();
  3516  0AAA  3194  240E  318A   	fcall	_Mcu_Initialization
  3517                           
  3518                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3519  0AAD  3186  262C  318A   	fcall	_Flash_Memory_Initialization
  3520                           
  3521                           ;Main_B1.c: 11: LED_Initialization();
  3522  0AB0  3193  2362  318A   	fcall	_LED_Initialization
  3523                           
  3524                           ;Main_B1.c: 12: Buzzer_Initialization();
  3525  0AB3  3192  22BF  318A   	fcall	_Buzzer_Initialization
  3526                           
  3527                           ;Main_B1.c: 14: ;;
  3528                           ;Main_B1.c: 15: Temp_Initialization();
  3529  0AB6  3192  22C5  318A   	fcall	_Temp_Initialization
  3530                           
  3531                           ;Main_B1.c: 16: Load_Initialization();
  3532  0AB9  3192  22C2  318A   	fcall	_Load_Initialization
  3533                           
  3534                           ;Main_B1.c: 17: ;;
  3535                           ;Main_B1.c: 18: DelayOff_Initialization();
  3536  0ABC  3192  22F2  318A   	fcall	_DelayOff_Initialization
  3537                           
  3538                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3539  0ABF  3194  2492  318A   	fcall	_DimmerLights_Initialization
  3540                           
  3541                           ;Main_B1.c: 21: ;;
  3542                           ;Main_B1.c: 22: ;;
  3543                           ;Main_B1.c: 23: ;;
  3544                           ;Main_B1.c: 24: Switch_Initialization();
  3545  0AC2  3193  2392  318A   	fcall	_Switch_Initialization
  3546  0AC5                     l8039:	
  3547                           ;Main_B1.c: 25: ;;
  3548                           ;Main_B1.c: 26: ;;
  3549                           ;Main_B1.c: 27: ;;
  3550                           ;Main_B1.c: 28: ;;
  3551                           ;Main_B1.c: 30: while (1) {
  3552                           
  3553                           
  3554                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  3555  0AC5  0021               	movlb	1	; select bank1
  3556  0AC6  1C20               	btfss	_myMain^(0+128),0
  3557  0AC7  2AD0               	goto	l8043
  3558                           
  3559                           ;Main_B1.c: 38: getLoad_AD(0x05);
  3560  0AC8  3005               	movlw	5
  3561  0AC9  318E  264F  318A   	fcall	_getLoad_AD
  3562                           
  3563                           ;Main_B1.c: 42: getTemp_AD(0x09);
  3564  0ACC  3009               	movlw	9
  3565  0ACD  3188  20E7  318A   	fcall	_getTemp_AD
  3566  0AD0                     l8043:	
  3567                           
  3568                           ;Main_B1.c: 57: }
  3569                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  3570  0AD0  0021               	movlb	1	; select bank1
  3571  0AD1  1C3D               	btfss	_Timer1^(0+128),0
  3572  0AD2  2AC5               	goto	l8039
  3573                           
  3574                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  3575  0AD3  103D               	bcf	_Timer1^(0+128),0
  3576                           
  3577                           ;Main_B1.c: 96: my_MainTimer();
  3578  0AD4  3188  20AB  318A   	fcall	_my_MainTimer
  3579                           
  3580                           ;Main_B1.c: 97: WDT_Main();
  3581  0AD7  3194  2420  318A   	fcall	_WDT_Main
  3582                           
  3583                           ;Main_B1.c: 98: ;;
  3584                           ;Main_B1.c: 99: ;;
  3585                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  3586  0ADA  0021               	movlb	1	; select bank1
  3587  0ADB  1C20               	btfss	_myMain^(0+128),0
  3588  0ADC  2AC5               	goto	l8039
  3589                           
  3590                           ;Main_B1.c: 101: Flash_Memory_Main();
  3591  0ADD  3188  2000  318A   	fcall	_Flash_Memory_Main
  3592                           
  3593                           ;Main_B1.c: 103: LED_Main();
  3594  0AE0  3193  236E  318A   	fcall	_LED_Main
  3595                           
  3596                           ;Main_B1.c: 104: Buzzer_Main();
  3597  0AE3  3189  2125  318A   	fcall	_Buzzer_Main
  3598                           
  3599                           ;Main_B1.c: 106: ;;
  3600                           ;Main_B1.c: 107: Temp_Main();
  3601  0AE6  3187  27FD  318A   	fcall	_Temp_Main
  3602                           
  3603                           ;Main_B1.c: 108: Load_Main();
  3604  0AE9  3180  2042  318A   	fcall	_Load_Main
  3605                           
  3606                           ;Main_B1.c: 109: ;;
  3607                           ;Main_B1.c: 111: ;;
  3608                           ;Main_B1.c: 112: DimmerLights_Main();
  3609  0AEC  3195  25CD  318A   	fcall	_DimmerLights_Main
  3610                           
  3611                           ;Main_B1.c: 113: Switch_Main();
  3612  0AEF  3193  233F  318A   	fcall	_Switch_Main
  3613                           
  3614                           ;Main_B1.c: 114: ;;
  3615                           ;Main_B1.c: 115: ;;
  3616                           ;Main_B1.c: 117: ;;
  3617                           ;Main_B1.c: 118: DelayOff_Main();
  3618  0AF2  3192  22FA  318A   	fcall	_DelayOff_Main
  3619                           
  3620                           ;Main_B1.c: 119: ;;
  3621                           ;Main_B1.c: 120: ;;
  3622                           ;Main_B1.c: 121: Exception_Main();
  3623  0AF5  3185  254C  318A   	fcall	_Exception_Main
  3624  0AF8  2AC5               	goto	l8039
  3625  0AF9                     __end_of_main:	
  3626                           ;Main_B1.c: 128: }
  3627                           ;Main_B1.c: 129: }
  3628                           ;Main_B1.c: 163: }
  3629                           ;Main_B1.c: 164: return (0);
  3630                           ;	Return value of _main is never used
  3631                           
  3632                           
  3633                           	psect	text1
  3634  08AB                     __ptext1:	
  3635 ;; *************** function _my_MainTimer *****************
  3636 ;; Defined at:
  3637 ;;		line 185 in file "../src/Main_B1.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;		None
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;		None
  3642 ;; Return value:  Size  Location     Type
  3643 ;;		None               void
  3644 ;; Registers used:
  3645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3653 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3654 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3655 ;;Total ram usage:        1 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    7
  3658 ;; This function calls:
  3659 ;;		_setBuz
  3660 ;; This function is called by:
  3661 ;;		_main
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           
  3666                           ;psect for function _my_MainTimer
  3667  08AB                     _my_MainTimer:	
  3668                           
  3669                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  3670                           
  3671                           ;incstack = 0
  3672                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3673  08AB  0021               	movlb	1	; select bank1
  3674  08AC  1820               	btfsc	_myMain^(0+128),0
  3675  08AD  28C5               	goto	l7755
  3676                           
  3677                           ;Main_B1.c: 189: myMain.PowerCount++;
  3678  08AE  3001               	movlw	1
  3679  08AF  0020               	movlb	0	; select bank0
  3680  08B0  00AD               	movwf	??_my_MainTimer
  3681  08B1  082D               	movf	??_my_MainTimer,w
  3682  08B2  0021               	movlb	1	; select bank1
  3683  08B3  07A1               	addwf	(_myMain^(0+128)+1),f
  3684                           
  3685                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  3686  08B4  0821               	movf	(_myMain^(0+128)+1),w
  3687  08B5  3A96               	xorlw	150
  3688  08B6  1D03               	skipz
  3689  08B7  0008               	return
  3690                           
  3691                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  3692  08B8  01A1               	clrf	(_myMain^(0+128)+1)
  3693                           
  3694                           ;Main_B1.c: 192: myMain.PowerON = 1;
  3695  08B9  1420               	bsf	_myMain^(0+128),0
  3696                           
  3697                           ;Main_B1.c: 197: setBuz(3, 50);
  3698  08BA  3032               	movlw	50
  3699  08BB  0020               	movlb	0	; select bank0
  3700  08BC  00A9               	movwf	setBuz@time
  3701  08BD  3000               	movlw	0
  3702  08BE  00AA               	movwf	setBuz@time+1
  3703  08BF  3003               	movlw	3
  3704  08C0  318B  234D         	fcall	_setBuz
  3705                           
  3706                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  3707  08C2  0021               	movlb	1	; select bank1
  3708  08C3  1620               	bsf	_myMain^(0+128),4
  3709                           
  3710                           ;Main_B1.c: 207: }
  3711                           ;Main_B1.c: 208: } else {
  3712  08C4  0008               	return
  3713  08C5                     l7755:	
  3714                           
  3715                           ;Main_B1.c: 209: myMain.PowerCount++;
  3716  08C5  3001               	movlw	1
  3717  08C6  0020               	movlb	0	; select bank0
  3718  08C7  00AD               	movwf	??_my_MainTimer
  3719  08C8  082D               	movf	??_my_MainTimer,w
  3720  08C9  0021               	movlb	1	; select bank1
  3721  08CA  07A1               	addwf	(_myMain^(0+128)+1),f
  3722                           
  3723                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  3724  08CB  0821               	movf	(_myMain^(0+128)+1),w
  3725  08CC  3A64               	xorlw	100
  3726  08CD  1903               	btfsc	3,2
  3727                           
  3728                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  3729  08CE  01A1               	clrf	(_myMain^(0+128)+1)
  3730                           
  3731                           ;Main_B1.c: 226: }
  3732                           ;Main_B1.c: 228: myMain.Count1++;
  3733  08CF  3001               	movlw	1
  3734  08D0  07A4               	addwf	(_myMain^(0+128)+4),f
  3735  08D1  3000               	movlw	0
  3736  08D2  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  3737                           
  3738                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  3739  08D3  3004               	movlw	4
  3740  08D4  3EA0               	addlw	_myMain& (0+255)
  3741  08D5  0086               	movwf	6
  3742  08D6  0187               	clrf	7
  3743  08D7  3F40               	moviw [0]fsr1
  3744  08D8  3A64               	xorlw	100
  3745  08D9  1D03               	skipz
  3746  08DA  28DD               	goto	u9335
  3747  08DB  3F41               	moviw [1]fsr1
  3748  08DC  3A00               	xorlw	0
  3749  08DD                     u9335:	
  3750  08DD  1D03               	skipz
  3751  08DE  0008               	return
  3752                           
  3753                           ;Main_B1.c: 230: {
  3754                           ;Main_B1.c: 231: myMain.Count1 = 0;
  3755  08DF  01A4               	clrf	(_myMain^(0+128)+4)
  3756  08E0  01A5               	clrf	((_myMain+1)^(0+128)+4)
  3757                           
  3758                           ;Main_B1.c: 243: if (myMain.Flag) {
  3759  08E1  1CA0               	btfss	_myMain^(0+128),1
  3760  08E2  28E5               	goto	l1140
  3761                           
  3762                           ;Main_B1.c: 244: myMain.Flag = 0;
  3763  08E3  10A0               	bcf	_myMain^(0+128),1
  3764                           
  3765                           ;Main_B1.c: 253: } else {
  3766  08E4  0008               	return
  3767  08E5                     l1140:	
  3768                           
  3769                           ;Main_B1.c: 254: myMain.Flag = 1;
  3770  08E5  14A0               	bsf	_myMain^(0+128),1
  3771  08E6  0008               	return
  3772  08E7                     __end_of_my_MainTimer:	
  3773                           
  3774                           	psect	text2
  3775  13BC                     __ptext2:	
  3776 ;; *************** function _myMain_Initialization *****************
  3777 ;; Defined at:
  3778 ;;		line 170 in file "../src/Main_B1.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;		None
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;		None
  3783 ;; Return value:  Size  Location     Type
  3784 ;;		None               void
  3785 ;; Registers used:
  3786 ;;		wreg, fsr1l, fsr1h
  3787 ;; Tracked objects:
  3788 ;;		On entry : 0/0
  3789 ;;		On exit  : 0/0
  3790 ;;		Unchanged: 0/0
  3791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3794 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3795 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3796 ;;Total ram usage:        1 bytes
  3797 ;; Hardware stack levels used:    1
  3798 ;; Hardware stack levels required when called:    5
  3799 ;; This function calls:
  3800 ;;		Nothing
  3801 ;; This function is called by:
  3802 ;;		_main
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           
  3807                           ;psect for function _myMain_Initialization
  3808  13BC                     _myMain_Initialization:	
  3809                           
  3810                           ;Main_B1.c: 173: product = &_product;
  3811                           
  3812                           ;incstack = 0
  3813                           ; Regs used in _myMain_Initialization: [wregfsr1]
  3814  13BC  3020               	movlw	__product& (0+255)
  3815  13BD  0020               	movlb	0	; select bank0
  3816  13BE  00A0               	movwf	??_myMain_Initialization
  3817  13BF  0820               	movf	??_myMain_Initialization,w
  3818  13C0  00FA               	movwf	_product
  3819                           
  3820                           ;Main_B1.c: 174: product->Data[20] = 210;
  3821  13C1  30D2               	movlw	210
  3822  13C2  00A0               	movwf	??_myMain_Initialization
  3823  13C3  087A               	movf	_product,w
  3824  13C4  3E14               	addlw	20
  3825  13C5  0086               	movwf	6
  3826  13C6  3002               	movlw	2	; select bank4/5
  3827  13C7  0087               	movwf	7
  3828  13C8  0820               	movf	??_myMain_Initialization,w
  3829  13C9  0081               	movwf	1
  3830  13CA  0008               	return
  3831  13CB                     __end_of_myMain_Initialization:	
  3832                           
  3833                           	psect	text3
  3834  08E7                     __ptext3:	
  3835 ;; *************** function _getTemp_AD *****************
  3836 ;; Defined at:
  3837 ;;		line 15 in file "../src/OverTemperature_B1.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;  channel         1    wreg     unsigned char 
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  channel         1    5[BANK0 ] unsigned char 
  3842 ;; Return value:  Size  Location     Type
  3843 ;;		None               void
  3844 ;; Registers used:
  3845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3846 ;; Tracked objects:
  3847 ;;		On entry : 0/0
  3848 ;;		On exit  : 0/0
  3849 ;;		Unchanged: 0/0
  3850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3853 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3854 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3855 ;;Total ram usage:        2 bytes
  3856 ;; Hardware stack levels used:    1
  3857 ;; Hardware stack levels required when called:    7
  3858 ;; This function calls:
  3859 ;;		_getAD
  3860 ;; This function is called by:
  3861 ;;		_main
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           
  3866                           ;psect for function _getTemp_AD
  3867  08E7                     _getTemp_AD:	
  3868                           
  3869                           ;incstack = 0
  3870                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3871                           ;getTemp_AD@channel stored from wreg
  3872  08E7  0020               	movlb	0	; select bank0
  3873  08E8  00A5               	movwf	getTemp_AD@channel
  3874                           
  3875                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  3876  08E9  0021               	movlb	1	; select bank1
  3877  08EA  1D46               	btfss	_Temp^(0+128),2
  3878  08EB  0008               	return
  3879                           
  3880                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  3881  08EC  30F0               	movlw	240
  3882  08ED  0020               	movlb	0	; select bank0
  3883  08EE  00A4               	movwf	??_getTemp_AD
  3884  08EF  0824               	movf	??_getTemp_AD,w
  3885  08F0  00A0               	movwf	getAD@adcon1
  3886  08F1  0825               	movf	getTemp_AD@channel,w
  3887  08F2  3195  25ED  3188   	fcall	_getAD
  3888  08F5  0020               	movlb	0	; select bank0
  3889  08F6  0821               	movf	?_getAD+1,w
  3890  08F7  0021               	movlb	1	; select bank1
  3891  08F8  01D3               	clrf	((_Temp+1)^(0+128)+12)
  3892  08F9  07D3               	addwf	((_Temp+1)^(0+128)+12),f
  3893  08FA  0020               	movlb	0	; select bank0
  3894  08FB  0820               	movf	?_getAD,w
  3895  08FC  0021               	movlb	1	; select bank1
  3896  08FD  01D2               	clrf	(_Temp^(0+128)+12)
  3897  08FE  07D2               	addwf	(_Temp^(0+128)+12),f
  3898                           
  3899                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  3900  08FF  300C               	movlw	12
  3901  0900  3EC6               	addlw	_Temp& (0+255)
  3902  0901  0086               	movwf	6
  3903  0902  0187               	clrf	7
  3904  0903  0016               	moviw fsr1++
  3905  0904  0401               	iorwf	1,w
  3906  0905  1903               	skipnz
  3907  0906  0008               	return
  3908                           
  3909                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  3910  0907  0853               	movf	((_Temp+1)^(0+128)+12),w
  3911  0908  024F               	subwf	((_Temp+1)^(0+128)+8),w
  3912  0909  1D03               	skipz
  3913  090A  290D               	goto	u9285
  3914  090B  0852               	movf	(_Temp^(0+128)+12),w
  3915  090C  024E               	subwf	(_Temp^(0+128)+8),w
  3916  090D                     u9285:	
  3917  090D  1803               	skipnc
  3918  090E  2916               	goto	l7737
  3919                           
  3920                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  3921  090F  0853               	movf	((_Temp+1)^(0+128)+12),w
  3922  0910  01CF               	clrf	((_Temp+1)^(0+128)+8)
  3923  0911  07CF               	addwf	((_Temp+1)^(0+128)+8),f
  3924  0912  0852               	movf	(_Temp^(0+128)+12),w
  3925  0913  01CE               	clrf	(_Temp^(0+128)+8)
  3926  0914  07CE               	addwf	(_Temp^(0+128)+8),f
  3927                           
  3928                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  3929  0915  0008               	return
  3930  0916                     l7737:	
  3931  0916  0853               	movf	((_Temp+1)^(0+128)+12),w
  3932  0917  0251               	subwf	((_Temp+1)^(0+128)+10),w
  3933  0918  1D03               	skipz
  3934  0919  291C               	goto	u9295
  3935  091A  0852               	movf	(_Temp^(0+128)+12),w
  3936  091B  0250               	subwf	(_Temp^(0+128)+10),w
  3937  091C                     u9295:	
  3938  091C  1803               	skipnc
  3939  091D  0008               	return
  3940                           
  3941                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  3942  091E  0853               	movf	((_Temp+1)^(0+128)+12),w
  3943  091F  01D1               	clrf	((_Temp+1)^(0+128)+10)
  3944  0920  07D1               	addwf	((_Temp+1)^(0+128)+10),f
  3945  0921  0852               	movf	(_Temp^(0+128)+12),w
  3946  0922  01D0               	clrf	(_Temp^(0+128)+10)
  3947  0923  07D0               	addwf	(_Temp^(0+128)+10),f
  3948  0924  0008               	return
  3949  0925                     __end_of_getTemp_AD:	
  3950                           
  3951                           	psect	text4
  3952  0E4F                     __ptext4:	
  3953 ;; *************** function _getLoad_AD *****************
  3954 ;; Defined at:
  3955 ;;		line 15 in file "../src/OverLoad_B1.c"
  3956 ;; Parameters:    Size  Location     Type
  3957 ;;  channel         1    wreg     unsigned char 
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;  channel         1    6[BANK0 ] unsigned char 
  3960 ;;  i               1    9[BANK0 ] unsigned char 
  3961 ;;  j               1    8[BANK0 ] unsigned char 
  3962 ;;  k               1    7[BANK0 ] unsigned char 
  3963 ;; Return value:  Size  Location     Type
  3964 ;;		None               void
  3965 ;; Registers used:
  3966 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3973 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3974 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3975 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3976 ;;Total ram usage:        6 bytes
  3977 ;; Hardware stack levels used:    1
  3978 ;; Hardware stack levels required when called:    7
  3979 ;; This function calls:
  3980 ;;		_getAD
  3981 ;; This function is called by:
  3982 ;;		_main
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           
  3987                           ;psect for function _getLoad_AD
  3988  0E4F                     _getLoad_AD:	
  3989                           
  3990                           ;incstack = 0
  3991                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3992                           ;getLoad_AD@channel stored from wreg
  3993  0E4F  0020               	movlb	0	; select bank0
  3994  0E50  00A6               	movwf	getLoad_AD@channel
  3995                           
  3996                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  3997  0E51  01A9               	clrf	getLoad_AD@i
  3998  0E52  01A8               	clrf	getLoad_AD@j
  3999  0E53  01A7               	clrf	getLoad_AD@k
  4000                           
  4001                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4002  0E54  0022               	movlb	2	; select bank2
  4003  0E55  1E20               	btfss	_Load^(0+256),4
  4004  0E56  0008               	return
  4005                           
  4006                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4007  0E57  30F3               	movlw	243
  4008  0E58  0020               	movlb	0	; select bank0
  4009  0E59  00A4               	movwf	??_getLoad_AD
  4010  0E5A  0824               	movf	??_getLoad_AD,w
  4011  0E5B  00A0               	movwf	getAD@adcon1
  4012  0E5C  0826               	movf	getLoad_AD@channel,w
  4013  0E5D  3195  25ED  318E   	fcall	_getAD
  4014  0E60  0020               	movlb	0	; select bank0
  4015  0E61  0821               	movf	?_getAD+1,w
  4016  0E62  0022               	movlb	2	; select bank2
  4017  0E63  01C2               	clrf	((_Load+1)^(0+256)+33)
  4018  0E64  07C2               	addwf	((_Load+1)^(0+256)+33),f
  4019  0E65  0020               	movlb	0	; select bank0
  4020  0E66  0820               	movf	?_getAD,w
  4021  0E67  0022               	movlb	2	; select bank2
  4022  0E68  01C1               	clrf	(_Load^(0+256)+33)
  4023  0E69  07C1               	addwf	(_Load^(0+256)+33),f
  4024                           
  4025                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4026  0E6A  0020               	movlb	0	; select bank0
  4027  0E6B  01A9               	clrf	getLoad_AD@i
  4028  0E6C  3004               	movlw	4
  4029  0E6D  0229               	subwf	getLoad_AD@i,w
  4030  0E6E  1803               	btfsc	3,0
  4031  0E6F  2E9D               	goto	l7707
  4032  0E70                     l7695:	
  4033                           
  4034                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4035  0E70  3529               	lslf	getLoad_AD@i,w
  4036  0E71  3E2B               	addlw	(_Load+11)& (0+255)
  4037  0E72  0086               	movwf	6
  4038  0E73  3001               	movlw	1	; select bank2/3
  4039  0E74  0087               	movwf	7
  4040  0E75  3F40               	moviw [0]fsr1
  4041  0E76  00A4               	movwf	??_getLoad_AD
  4042  0E77  3F41               	moviw [1]fsr1
  4043  0E78  00A5               	movwf	??_getLoad_AD+1
  4044  0E79  0022               	movlb	2	; select bank2
  4045  0E7A  0842               	movf	((_Load+1)^(0+256)+33),w
  4046  0E7B  0020               	movlb	0	; select bank0
  4047  0E7C  0225               	subwf	??_getLoad_AD+1,w
  4048  0E7D  1D03               	skipz
  4049  0E7E  2E83               	goto	u9185
  4050  0E7F  0022               	movlb	2	; select bank2
  4051  0E80  0841               	movf	(_Load^(0+256)+33),w
  4052  0E81  0020               	movlb	0	; select bank0
  4053  0E82  0224               	subwf	??_getLoad_AD,w
  4054  0E83                     u9185:	
  4055  0E83  1803               	skipnc
  4056  0E84  2E95               	goto	l7703
  4057  0E85  08A8               	movf	getLoad_AD@j,f
  4058  0E86  1D03               	skipz
  4059  0E87  2E95               	goto	l7703
  4060                           
  4061                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4062  0E88  3529               	lslf	getLoad_AD@i,w
  4063  0E89  3E2B               	addlw	(_Load+11)& (0+255)
  4064  0E8A  0086               	movwf	6
  4065  0E8B  3001               	movlw	1	; select bank2/3
  4066  0E8C  0087               	movwf	7
  4067  0E8D  0022               	movlb	2	; select bank2
  4068  0E8E  0841               	movf	(_Load^(0+256)+33),w
  4069  0E8F  3FC0               	movwi [0]fsr1
  4070  0E90  0842               	movf	((_Load+1)^(0+256)+33),w
  4071  0E91  3FC1               	movwi [1]fsr1
  4072                           
  4073                           ;OverLoad_B1.c: 24: j = 1;
  4074  0E92  0020               	movlb	0	; select bank0
  4075  0E93  01A8               	clrf	getLoad_AD@j
  4076  0E94  0AA8               	incf	getLoad_AD@j,f
  4077  0E95                     l7703:	
  4078  0E95  3001               	movlw	1
  4079  0E96  00A4               	movwf	??_getLoad_AD
  4080  0E97  0824               	movf	??_getLoad_AD,w
  4081  0E98  07A9               	addwf	getLoad_AD@i,f
  4082  0E99  3004               	movlw	4
  4083  0E9A  0229               	subwf	getLoad_AD@i,w
  4084  0E9B  1C03               	skipc
  4085  0E9C  2E70               	goto	l7695
  4086  0E9D                     l7707:	
  4087                           
  4088                           ;OverLoad_B1.c: 25: }
  4089                           ;OverLoad_B1.c: 26: }
  4090                           ;OverLoad_B1.c: 27: if (j == 0) {
  4091  0E9D  08A8               	movf	getLoad_AD@j,f
  4092  0E9E  1D03               	skipz
  4093  0E9F  0008               	return
  4094                           
  4095                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4096  0EA0  01A9               	clrf	getLoad_AD@i
  4097  0EA1                     L1:	
  4098  0EA1  3004               	movlw	4
  4099  0EA2  0229               	subwf	getLoad_AD@i,w
  4100  0EA3  1803               	btfsc	3,0
  4101  0EA4  0008               	return
  4102                           
  4103                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4104  0EA5  3529               	lslf	getLoad_AD@i,w
  4105  0EA6  3E35               	addlw	(_Load+21)& (0+255)
  4106  0EA7  0086               	movwf	6
  4107  0EA8  3001               	movlw	1	; select bank2/3
  4108  0EA9  0087               	movwf	7
  4109  0EAA  3F40               	moviw [0]fsr1
  4110  0EAB  00A4               	movwf	??_getLoad_AD
  4111  0EAC  3F41               	moviw [1]fsr1
  4112  0EAD  00A5               	movwf	??_getLoad_AD+1
  4113  0EAE  0825               	movf	??_getLoad_AD+1,w
  4114  0EAF  0022               	movlb	2	; select bank2
  4115  0EB0  0242               	subwf	((_Load+1)^(0+256)+33),w
  4116  0EB1  1D03               	skipz
  4117  0EB2  2EB7               	goto	u9235
  4118  0EB3  0020               	movlb	0	; select bank0
  4119  0EB4  0824               	movf	??_getLoad_AD,w
  4120  0EB5  0022               	movlb	2	; select bank2
  4121  0EB6  0241               	subwf	(_Load^(0+256)+33),w
  4122  0EB7                     u9235:	
  4123  0EB7  1803               	skipnc
  4124  0EB8  2ECA               	goto	l7723
  4125  0EB9  0020               	movlb	0	; select bank0
  4126  0EBA  08A7               	movf	getLoad_AD@k,f
  4127  0EBB  1D03               	skipz
  4128  0EBC  2ECA               	goto	l7723
  4129                           
  4130                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4131  0EBD  3529               	lslf	getLoad_AD@i,w
  4132  0EBE  3E35               	addlw	(_Load+21)& (0+255)
  4133  0EBF  0086               	movwf	6
  4134  0EC0  3001               	movlw	1	; select bank2/3
  4135  0EC1  0087               	movwf	7
  4136  0EC2  0022               	movlb	2	; select bank2
  4137  0EC3  0841               	movf	(_Load^(0+256)+33),w
  4138  0EC4  3FC0               	movwi [0]fsr1
  4139  0EC5  0842               	movf	((_Load+1)^(0+256)+33),w
  4140  0EC6  3FC1               	movwi [1]fsr1
  4141                           
  4142                           ;OverLoad_B1.c: 31: k = 1;
  4143  0EC7  0020               	movlb	0	; select bank0
  4144  0EC8  01A7               	clrf	getLoad_AD@k
  4145  0EC9  0AA7               	incf	getLoad_AD@k,f
  4146  0ECA                     l7723:	
  4147  0ECA  3001               	movlw	1
  4148  0ECB  0020               	movlb	0	; select bank0
  4149  0ECC  00A4               	movwf	??_getLoad_AD
  4150  0ECD  0824               	movf	??_getLoad_AD,w
  4151  0ECE  07A9               	addwf	getLoad_AD@i,f
  4152  0ECF  2EA1               	goto	L1
  4153  0ED0                     __end_of_getLoad_AD:	
  4154                           
  4155                           	psect	text5
  4156  15ED                     __ptext5:	
  4157 ;; *************** function _getAD *****************
  4158 ;; Defined at:
  4159 ;;		line 454 in file "../src/MCU_B1.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;  adcon0          1    wreg     unsigned char 
  4162 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  2    0[BANK0 ] int 
  4167 ;; Registers used:
  4168 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4174 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4177 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4178 ;;Total ram usage:        4 bytes
  4179 ;; Hardware stack levels used:    1
  4180 ;; Hardware stack levels required when called:    6
  4181 ;; This function calls:
  4182 ;;		_Timeout_Counter
  4183 ;;		_set_TimeoutCleared
  4184 ;; This function is called by:
  4185 ;;		_getLoad_AD
  4186 ;;		_getTemp_AD
  4187 ;; This function uses a non-reentrant model
  4188 ;;
  4189                           
  4190                           
  4191                           ;psect for function _getAD
  4192  15ED                     _getAD:	
  4193                           
  4194                           ;incstack = 0
  4195                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4196                           ;getAD@adcon0 stored from wreg
  4197  15ED  0020               	movlb	0	; select bank0
  4198  15EE  00A3               	movwf	getAD@adcon0
  4199                           
  4200                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4201  15EF  0823               	movf	getAD@adcon0,w
  4202  15F0  0021               	movlb	1	; select bank1
  4203  15F1  009D               	movwf	29	;volatile
  4204                           
  4205                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4206  15F2  0020               	movlb	0	; select bank0
  4207  15F3  0820               	movf	getAD@adcon1,w
  4208  15F4  0021               	movlb	1	; select bank1
  4209  15F5  009E               	movwf	30	;volatile
  4210                           
  4211                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4212  15F6  149D               	bsf	29,1	;volatile
  4213                           
  4214                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4215  15F7  2DFB               	goto	l7273
  4216  15F8                     l7271:	
  4217                           
  4218                           ;MCU_B1.c: 459: Timeout_Counter();
  4219  15F8  3194  24E3  3195   	fcall	_Timeout_Counter
  4220  15FB                     l7273:	
  4221  15FB  0021               	movlb	1	; select bank1
  4222  15FC  1C9D               	btfss	29,1	;volatile
  4223  15FD  2E00               	goto	l7277
  4224  15FE  1D2B               	btfss	(_myMain^(0+128)+11),2
  4225  15FF  2DF8               	goto	l7271
  4226  1600                     l7277:	
  4227                           
  4228                           ;MCU_B1.c: 460: };
  4229                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4230  1600  3192  22CC         	fcall	_set_TimeoutCleared
  4231                           
  4232                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4233  1602  0021               	movlb	1	; select bank1
  4234  1603  081C               	movf	28,w	;volatile
  4235  1604  0020               	movlb	0	; select bank0
  4236  1605  01A1               	clrf	?_getAD+1
  4237  1606  07A1               	addwf	?_getAD+1,f
  4238  1607  0021               	movlb	1	; select bank1
  4239  1608  081B               	movf	27,w	;volatile
  4240  1609  0020               	movlb	0	; select bank0
  4241  160A  01A0               	clrf	?_getAD
  4242  160B  07A0               	addwf	?_getAD,f
  4243  160C  0008               	return
  4244  160D                     __end_of_getAD:	
  4245                           
  4246                           	psect	text6
  4247  1420                     __ptext6:	
  4248 ;; *************** function _WDT_Main *****************
  4249 ;; Defined at:
  4250 ;;		line 1098 in file "../src/MCU_B1.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;		None
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;		None
  4255 ;; Return value:  Size  Location     Type
  4256 ;;		None               void
  4257 ;; Registers used:
  4258 ;;		wreg, status,2, status,0, pclath, cstack
  4259 ;; Tracked objects:
  4260 ;;		On entry : 0/0
  4261 ;;		On exit  : 0/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4267 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4268 ;;Total ram usage:        1 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; Hardware stack levels required when called:    6
  4271 ;; This function calls:
  4272 ;;		_WDT_Clearing
  4273 ;; This function is called by:
  4274 ;;		_main
  4275 ;; This function uses a non-reentrant model
  4276 ;;
  4277                           
  4278                           
  4279                           ;psect for function _WDT_Main
  4280  1420                     _WDT_Main:	
  4281                           
  4282                           ;MCU_B1.c: 1099: if (WDT.Enable == 1) {
  4283                           
  4284                           ;incstack = 0
  4285                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4286  1420  0021               	movlb	1	; select bank1
  4287  1421  1C40               	btfss	_WDT^(0+128),0
  4288  1422  0008               	return
  4289                           
  4290                           ;MCU_B1.c: 1100: if (WDT.Timer-- > 0) {
  4291  1423  3001               	movlw	1
  4292  1424  02C1               	subwf	(_WDT^(0+128)+1),f
  4293  1425  0841               	movf	(_WDT^(0+128)+1),w
  4294  1426  3AFF               	xorlw	255
  4295  1427  1903               	skipnz
  4296  1428  0008               	return
  4297                           
  4298                           ;MCU_B1.c: 1101: WDT.Timer = 100;
  4299  1429  3064               	movlw	100
  4300  142A  0020               	movlb	0	; select bank0
  4301  142B  00A0               	movwf	??_WDT_Main
  4302  142C  0820               	movf	??_WDT_Main,w
  4303  142D  0021               	movlb	1	; select bank1
  4304  142E  00C1               	movwf	(_WDT^(0+128)+1)
  4305                           
  4306                           ;MCU_B1.c: 1102: WDT_Clearing();
  4307  142F  3180  2002         	fcall	_WDT_Clearing
  4308  1431  0008               	return
  4309  1432                     __end_of_WDT_Main:	
  4310                           
  4311                           	psect	text7
  4312  0002                     __ptext7:	
  4313 ;; *************** function _WDT_Clearing *****************
  4314 ;; Defined at:
  4315 ;;		line 1108 in file "../src/MCU_B1.c"
  4316 ;; Parameters:    Size  Location     Type
  4317 ;;		None
  4318 ;; Auto vars:     Size  Location     Type
  4319 ;;		None
  4320 ;; Return value:  Size  Location     Type
  4321 ;;		None               void
  4322 ;; Registers used:
  4323 ;;		None
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4332 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4333 ;;Total ram usage:        0 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    5
  4336 ;; This function calls:
  4337 ;;		Nothing
  4338 ;; This function is called by:
  4339 ;;		_WDT_Main
  4340 ;; This function uses a non-reentrant model
  4341 ;;
  4342                           
  4343                           
  4344                           ;psect for function _WDT_Clearing
  4345  0002                     _WDT_Clearing:	
  4346                           
  4347                           ;incstack = 0
  4348                           ; Regs used in _WDT_Clearing: []
  4349  0002  0064               	clrwdt	;# 
  4350  0003  0008               	return
  4351  0004                     __end_of_WDT_Clearing:	
  4352                           
  4353                           	psect	text8
  4354  07FD                     __ptext8:	
  4355 ;; *************** function _Temp_Main *****************
  4356 ;; Defined at:
  4357 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4358 ;; Parameters:    Size  Location     Type
  4359 ;;		None
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;		None
  4362 ;; Return value:  Size  Location     Type
  4363 ;;		None               void
  4364 ;; Registers used:
  4365 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4366 ;; Tracked objects:
  4367 ;;		On entry : 0/0
  4368 ;;		On exit  : 0/0
  4369 ;;		Unchanged: 0/0
  4370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;Total ram usage:        0 bytes
  4376 ;; Hardware stack levels used:    1
  4377 ;; Hardware stack levels required when called:    8
  4378 ;; This function calls:
  4379 ;;		_setTemp_Main
  4380 ;; This function is called by:
  4381 ;;		_main
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           
  4386                           ;psect for function _Temp_Main
  4387  07FD                     _Temp_Main:	
  4388                           
  4389                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4390                           
  4391                           ;incstack = 0
  4392                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4393  07FD  3187  2708         	fcall	_setTemp_Main
  4394  07FF  0008               	return
  4395  0800                     __end_of_Temp_Main:	
  4396                           
  4397                           	psect	text9
  4398  0708                     __ptext9:	
  4399 ;; *************** function _setTemp_Main *****************
  4400 ;; Defined at:
  4401 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;		None
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;  error           1   72[BANK0 ] unsigned char 
  4406 ;; Return value:  Size  Location     Type
  4407 ;;		None               void
  4408 ;; Registers used:
  4409 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;Total ram usage:        3 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    7
  4422 ;; This function calls:
  4423 ;;		_getMain_All_Error_Status
  4424 ;;		_setBuz
  4425 ;;		_setProductData
  4426 ;; This function is called by:
  4427 ;;		_Temp_Main
  4428 ;; This function uses a non-reentrant model
  4429 ;;
  4430                           
  4431                           
  4432                           ;psect for function _setTemp_Main
  4433  0708                     _setTemp_Main:	
  4434                           
  4435                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4436                           
  4437                           ;incstack = 0
  4438                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4439  0708  3000               	movlw	0
  4440  0709  3197  275C  3187   	fcall	_getMain_All_Error_Status
  4441  070C  0020               	movlb	0	; select bank0
  4442  070D  00E6               	movwf	??_setTemp_Main
  4443  070E  0866               	movf	??_setTemp_Main,w
  4444  070F  00E8               	movwf	setTemp_Main@error
  4445                           
  4446                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4447  0710  0021               	movlb	1	; select bank1
  4448  0711  1C46               	btfss	_Temp^(0+128),0
  4449  0712  2FB4               	goto	l1434
  4450                           
  4451                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4452  0713  1946               	btfsc	_Temp^(0+128),2
  4453  0714  2F24               	goto	l7343
  4454                           
  4455                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4456  0715  3001               	movlw	1
  4457  0716  07C7               	addwf	(_Temp^(0+128)+1),f
  4458  0717  3000               	movlw	0
  4459  0718  3DC8               	addwfc	((_Temp+1)^(0+128)+1),f
  4460                           
  4461                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  4462  0719  3001               	movlw	1
  4463  071A  0248               	subwf	((_Temp+1)^(0+128)+1),w
  4464  071B  30F4               	movlw	244
  4465  071C  1903               	skipnz
  4466  071D  0247               	subwf	(_Temp^(0+128)+1),w
  4467  071E  1C03               	skipc
  4468  071F  0008               	return
  4469                           
  4470                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  4471  0720  01C7               	clrf	(_Temp^(0+128)+1)
  4472  0721  01C8               	clrf	((_Temp+1)^(0+128)+1)
  4473                           
  4474                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  4475  0722  1546               	bsf	_Temp^(0+128),2
  4476                           
  4477                           ;OverTemperature_B1.c: 70: }
  4478                           ;OverTemperature_B1.c: 71: } else {
  4479  0723  0008               	return
  4480  0724                     l7343:	
  4481                           
  4482                           ;OverTemperature_B1.c: 72: Temp.Time++;
  4483  0724  3001               	movlw	1
  4484  0725  07C7               	addwf	(_Temp^(0+128)+1),f
  4485  0726  3000               	movlw	0
  4486  0727  3DC8               	addwfc	((_Temp+1)^(0+128)+1),f
  4487                           
  4488                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  4489  0728  3000               	movlw	0
  4490  0729  0248               	subwf	((_Temp+1)^(0+128)+1),w
  4491  072A  3005               	movlw	5
  4492  072B  1903               	skipnz
  4493  072C  0247               	subwf	(_Temp^(0+128)+1),w
  4494  072D  1C03               	skipc
  4495  072E  0008               	return
  4496                           
  4497                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  4498  072F  01C7               	clrf	(_Temp^(0+128)+1)
  4499  0730  01C8               	clrf	((_Temp+1)^(0+128)+1)
  4500                           
  4501                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  4502  0731  3008               	movlw	8
  4503  0732  3EC6               	addlw	_Temp& (0+255)
  4504  0733  0086               	movwf	6
  4505  0734  0187               	clrf	7
  4506  0735  0016               	moviw fsr1++
  4507  0736  0401               	iorwf	1,w
  4508  0737  1903               	skipnz
  4509  0738  2FAE               	goto	l1439
  4510  0739  300A               	movlw	10
  4511  073A  3EC6               	addlw	_Temp& (0+255)
  4512  073B  0086               	movwf	6
  4513  073C  0187               	clrf	7
  4514  073D  0016               	moviw fsr1++
  4515  073E  0401               	iorwf	1,w
  4516  073F  1903               	skipnz
  4517  0740  2FAE               	goto	l1439
  4518                           
  4519                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  4520  0741  1146               	bcf	_Temp^(0+128),2
  4521                           
  4522                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4523  0742  300A               	movlw	10
  4524  0743  3EC6               	addlw	_Temp& (0+255)
  4525  0744  0086               	movwf	6
  4526  0745  0187               	clrf	7
  4527  0746  3008               	movlw	8
  4528  0747  3EC6               	addlw	_Temp& (0+255)
  4529  0748  0084               	movwf	4
  4530  0749  0185               	clrf	5
  4531  074A  3F40               	moviw [0]fsr1
  4532  074B  0700               	addwf	0,w
  4533  074C  0020               	movlb	0	; select bank0
  4534  074D  00E6               	movwf	??_setTemp_Main
  4535  074E  3101               	addfsr 0,1
  4536  074F  3F41               	moviw [1]fsr1
  4537  0750  3D00               	addwfc	0,w
  4538  0751  00E7               	movwf	??_setTemp_Main+1
  4539  0752  36E7               	lsrf	??_setTemp_Main+1,f
  4540  0753  0CE6               	rrf	??_setTemp_Main,f
  4541  0754  0866               	movf	??_setTemp_Main,w
  4542  0755  0021               	movlb	1	; select bank1
  4543  0756  00CC               	movwf	(_Temp^(0+128)+6)
  4544  0757  0020               	movlb	0	; select bank0
  4545  0758  0867               	movf	??_setTemp_Main+1,w
  4546  0759  0021               	movlb	1	; select bank1
  4547  075A  00CD               	movwf	((_Temp+1)^(0+128)+6)
  4548                           
  4549                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  4550  075B  30C7               	movlw	199
  4551  075C  00D4               	movwf	(_Temp^(0+128)+14)
  4552  075D  3001               	movlw	1
  4553  075E  00D5               	movwf	(_Temp^(0+128)+15)
  4554                           
  4555                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  4556  075F  309F               	movlw	159
  4557  0760  00D6               	movwf	(_Temp^(0+128)+16)
  4558  0761  3001               	movlw	1
  4559  0762  00D7               	movwf	(_Temp^(0+128)+17)
  4560                           
  4561                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  4562  0763  1CC6               	btfss	_Temp^(0+128),1
  4563  0764  2F85               	goto	l7375
  4564                           
  4565                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  4566  0765  0855               	movf	((_Temp+1)^(0+128)+14),w
  4567  0766  024D               	subwf	((_Temp+1)^(0+128)+6),w
  4568  0767  1D03               	skipz
  4569  0768  2F6B               	goto	u8595
  4570  0769  0854               	movf	(_Temp^(0+128)+14),w
  4571  076A  024C               	subwf	(_Temp^(0+128)+6),w
  4572  076B                     u8595:	
  4573  076B  1C03               	skipc
  4574  076C  2F83               	goto	l7373
  4575                           
  4576                           ;OverTemperature_B1.c: 98: Temp.Count++;
  4577  076D  3001               	movlw	1
  4578  076E  0020               	movlb	0	; select bank0
  4579  076F  00E6               	movwf	??_setTemp_Main
  4580  0770  0866               	movf	??_setTemp_Main,w
  4581  0771  0021               	movlb	1	; select bank1
  4582  0772  07C9               	addwf	(_Temp^(0+128)+3),f
  4583                           
  4584                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  4585  0773  3003               	movlw	3
  4586  0774  0249               	subwf	(_Temp^(0+128)+3),w
  4587  0775  1C03               	skipc
  4588  0776  2F9B               	goto	l7387
  4589                           
  4590                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  4591  0777  01C9               	clrf	(_Temp^(0+128)+3)
  4592                           
  4593                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  4594  0778  10C6               	bcf	_Temp^(0+128),1
  4595                           
  4596                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  4597  0779  3064               	movlw	100
  4598  077A  0020               	movlb	0	; select bank0
  4599  077B  00A9               	movwf	setBuz@time
  4600  077C  3000               	movlw	0
  4601  077D  00AA               	movwf	setBuz@time+1
  4602  077E  3002               	movlw	2
  4603  077F  318B  234D  3187   	fcall	_setBuz
  4604                           
  4605                           ;OverTemperature_B1.c: 103: }
  4606                           ;OverTemperature_B1.c: 104: } else {
  4607  0782  2F9B               	goto	l7387
  4608  0783                     l7373:	
  4609                           
  4610                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  4611  0783  0021               	movlb	1	; select bank1
  4612  0784  2F9A               	goto	l7385
  4613  0785                     l7375:	
  4614                           ;OverTemperature_B1.c: 106: }
  4615                           ;OverTemperature_B1.c: 107: } else {
  4616                           
  4617                           
  4618                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  4619  0785  084D               	movf	((_Temp+1)^(0+128)+6),w
  4620  0786  0257               	subwf	((_Temp+1)^(0+128)+16),w
  4621  0787  1D03               	skipz
  4622  0788  2F8B               	goto	u8615
  4623  0789  084C               	movf	(_Temp^(0+128)+6),w
  4624  078A  0256               	subwf	(_Temp^(0+128)+16),w
  4625  078B                     u8615:	
  4626  078B  1C03               	skipc
  4627  078C  2F9A               	goto	l7385
  4628                           
  4629                           ;OverTemperature_B1.c: 109: Temp.Count++;
  4630  078D  3001               	movlw	1
  4631  078E  0020               	movlb	0	; select bank0
  4632  078F  00E6               	movwf	??_setTemp_Main
  4633  0790  0866               	movf	??_setTemp_Main,w
  4634  0791  0021               	movlb	1	; select bank1
  4635  0792  07C9               	addwf	(_Temp^(0+128)+3),f
  4636                           
  4637                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  4638  0793  3003               	movlw	3
  4639  0794  0249               	subwf	(_Temp^(0+128)+3),w
  4640  0795  1C03               	skipc
  4641  0796  2F9B               	goto	l7387
  4642                           
  4643                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  4644  0797  01C9               	clrf	(_Temp^(0+128)+3)
  4645                           
  4646                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  4647  0798  14C6               	bsf	_Temp^(0+128),1
  4648                           
  4649                           ;OverTemperature_B1.c: 113: }
  4650                           ;OverTemperature_B1.c: 114: } else {
  4651  0799  2F9B               	goto	l7387
  4652  079A                     l7385:	
  4653                           
  4654                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  4655  079A  01C9               	clrf	(_Temp^(0+128)+3)
  4656  079B                     l7387:	
  4657                           
  4658                           ;OverTemperature_B1.c: 116: }
  4659                           ;OverTemperature_B1.c: 117: }
  4660                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  4661  079B  0021               	movlb	1	; select bank1
  4662  079C  084D               	movf	((_Temp+1)^(0+128)+6),w
  4663  079D  0020               	movlb	0	; select bank0
  4664  079E  00E6               	movwf	??_setTemp_Main
  4665  079F  0866               	movf	??_setTemp_Main,w
  4666  07A0  00E2               	movwf	setProductData@value
  4667  07A1  3018               	movlw	24
  4668  07A2  3193  239F  3187   	fcall	_setProductData
  4669                           
  4670                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  4671  07A5  0021               	movlb	1	; select bank1
  4672  07A6  084C               	movf	(_Temp^(0+128)+6),w
  4673  07A7  0020               	movlb	0	; select bank0
  4674  07A8  00E6               	movwf	??_setTemp_Main
  4675  07A9  0866               	movf	??_setTemp_Main,w
  4676  07AA  00E2               	movwf	setProductData@value
  4677  07AB  3019               	movlw	25
  4678  07AC  3193  239F         	fcall	_setProductData
  4679  07AE                     l1439:	
  4680                           
  4681                           ;OverTemperature_B1.c: 135: }
  4682                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  4683  07AE  0021               	movlb	1	; select bank1
  4684  07AF  01CE               	clrf	(_Temp^(0+128)+8)
  4685  07B0  01CF               	clrf	((_Temp+1)^(0+128)+8)
  4686                           
  4687                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  4688  07B1  01D0               	clrf	(_Temp^(0+128)+10)
  4689  07B2  01D1               	clrf	((_Temp+1)^(0+128)+10)
  4690                           
  4691                           ;OverTemperature_B1.c: 138: }
  4692                           ;OverTemperature_B1.c: 139: }
  4693                           ;OverTemperature_B1.c: 141: } else {
  4694  07B3  0008               	return
  4695  07B4                     l1434:	
  4696                           
  4697                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  4698  07B4  1C20               	btfss	_myMain^(0+128),0
  4699  07B5  0008               	return
  4700                           
  4701                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  4702  07B6  1446               	bsf	_Temp^(0+128),0
  4703  07B7  0008               	return
  4704  07B8                     __end_of_setTemp_Main:	
  4705                           
  4706                           	psect	text10
  4707  12C5                     __ptext10:	
  4708 ;; *************** function _Temp_Initialization *****************
  4709 ;; Defined at:
  4710 ;;		line 8 in file "../src/OverTemperature_B1.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;		None
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;		None
  4715 ;; Return value:  Size  Location     Type
  4716 ;;		None               void
  4717 ;; Registers used:
  4718 ;;		status,2, status,0, pclath, cstack
  4719 ;; Tracked objects:
  4720 ;;		On entry : 0/0
  4721 ;;		On exit  : 0/0
  4722 ;;		Unchanged: 0/0
  4723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;Total ram usage:        0 bytes
  4729 ;; Hardware stack levels used:    1
  4730 ;; Hardware stack levels required when called:    6
  4731 ;; This function calls:
  4732 ;;		_setTemp_Initialization
  4733 ;; This function is called by:
  4734 ;;		_main
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738                           
  4739                           ;psect for function _Temp_Initialization
  4740  12C5                     _Temp_Initialization:	
  4741                           
  4742                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  4743                           
  4744                           ;incstack = 0
  4745                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4746  12C5  3192  22BE         	fcall	_setTemp_Initialization
  4747  12C7  0008               	return
  4748  12C8                     __end_of_Temp_Initialization:	
  4749                           
  4750                           	psect	text11
  4751  12BE                     __ptext11:	
  4752 ;; *************** function _setTemp_Initialization *****************
  4753 ;; Defined at:
  4754 ;;		line 44 in file "../src/OverTemperature_B1.c"
  4755 ;; Parameters:    Size  Location     Type
  4756 ;;		None
  4757 ;; Auto vars:     Size  Location     Type
  4758 ;;		None
  4759 ;; Return value:  Size  Location     Type
  4760 ;;		None               void
  4761 ;; Registers used:
  4762 ;;		None
  4763 ;; Tracked objects:
  4764 ;;		On entry : 0/0
  4765 ;;		On exit  : 0/0
  4766 ;;		Unchanged: 0/0
  4767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4772 ;;Total ram usage:        0 bytes
  4773 ;; Hardware stack levels used:    1
  4774 ;; Hardware stack levels required when called:    5
  4775 ;; This function calls:
  4776 ;;		Nothing
  4777 ;; This function is called by:
  4778 ;;		_Temp_Initialization
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           
  4783                           ;psect for function _setTemp_Initialization
  4784  12BE                     _setTemp_Initialization:	
  4785                           
  4786                           ;incstack = 0
  4787                           ; Regs used in _setTemp_Initialization: []
  4788  12BE  0008               	return
  4789  12BF                     __end_of_setTemp_Initialization:	
  4790                           
  4791                           	psect	text12
  4792  133F                     __ptext12:	
  4793 ;; *************** function _Switch_Main *****************
  4794 ;; Defined at:
  4795 ;;		line 72 in file "../src/Switch_B1.c"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;		None
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;		None
  4800 ;; Return value:  Size  Location     Type
  4801 ;;		None               void
  4802 ;; Registers used:
  4803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4813 ;;Total ram usage:        0 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:   10
  4816 ;; This function calls:
  4817 ;;		_TouchPower
  4818 ;;		_setSw_Main
  4819 ;; This function is called by:
  4820 ;;		_main
  4821 ;; This function uses a non-reentrant model
  4822 ;;
  4823                           
  4824                           
  4825                           ;psect for function _Switch_Main
  4826  133F                     _Switch_Main:	
  4827                           
  4828                           ;Switch_B1.c: 75: setSw_Main(1);
  4829                           
  4830                           ;incstack = 0
  4831                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4832  133F  3001               	movlw	1
  4833  1340  3181  21EE  3193   	fcall	_setSw_Main
  4834                           
  4835                           ;Switch_B1.c: 79: setSw_Main(2);
  4836  1343  3002               	movlw	2
  4837  1344  3181  21EE  3193   	fcall	_setSw_Main
  4838                           
  4839                           ;Switch_B1.c: 87: TouchPower();
  4840  1347  3194  24F8         	fcall	_TouchPower
  4841  1349  0008               	return
  4842  134A                     __end_of_Switch_Main:	
  4843                           
  4844                           	psect	text13
  4845  01EE                     __ptext13:	
  4846 ;; *************** function _setSw_Main *****************
  4847 ;; Defined at:
  4848 ;;		line 121 in file "../src/Switch_B1.c"
  4849 ;; Parameters:    Size  Location     Type
  4850 ;;  sw              1    wreg     unsigned char 
  4851 ;; Auto vars:     Size  Location     Type
  4852 ;;  sw              1    0[BANK1 ] unsigned char 
  4853 ;; Return value:  Size  Location     Type
  4854 ;;		None               void
  4855 ;; Registers used:
  4856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4857 ;; Tracked objects:
  4858 ;;		On entry : 0/0
  4859 ;;		On exit  : 0/0
  4860 ;;		Unchanged: 0/0
  4861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4863 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4864 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4865 ;;      Totals:         0       2       1       0       0       0       0       0       0       0       0       0       
      +0       0
  4866 ;;Total ram usage:        3 bytes
  4867 ;; Hardware stack levels used:    1
  4868 ;; Hardware stack levels required when called:    9
  4869 ;; This function calls:
  4870 ;;		_SwPointSelect
  4871 ;;		_getMain_All_Error_Status
  4872 ;;		_getSw_KeyStatus
  4873 ;;		_setBuz
  4874 ;;		_setDimmerLights_AdjOn
  4875 ;;		_setDimmerLights_SwOff
  4876 ;;		_setDimmerLights_SwOn
  4877 ;; This function is called by:
  4878 ;;		_Switch_Main
  4879 ;; This function uses a non-reentrant model
  4880 ;;
  4881                           
  4882                           
  4883                           ;psect for function _setSw_Main
  4884  01EE                     _setSw_Main:	
  4885                           
  4886                           ;incstack = 0
  4887                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4888                           ;setSw_Main@sw stored from wreg
  4889  01EE  0021               	movlb	1	; select bank1
  4890  01EF  00E9               	movwf	setSw_Main@sw^(0+128)
  4891                           
  4892                           ;Switch_B1.c: 122: SwPointSelect(sw);
  4893  01F0  0869               	movf	setSw_Main@sw^(0+128),w
  4894  01F1  3194  24BA  3181   	fcall	_SwPointSelect
  4895                           
  4896                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  4897  01F4  0874               	movf	_Sw,w
  4898  01F5  0086               	movwf	6
  4899  01F6  3001               	movlw	1	; select bank2/3
  4900  01F7  0087               	movwf	7
  4901  01F8  1C01               	btfss	1,0
  4902  01F9  2B4C               	goto	l1848
  4903                           
  4904                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  4905  01FA  3000               	movlw	0
  4906  01FB  3197  275C  3181   	fcall	_getMain_All_Error_Status
  4907  01FE  3800               	iorlw	0
  4908  01FF  1D03               	skipz
  4909  0200  2A1C               	goto	l7419
  4910                           
  4911                           ;Switch_B1.c: 126: Sw->Detect = 0;
  4912  0201  0A74               	incf	_Sw,w
  4913  0202  0086               	movwf	6
  4914  0203  3001               	movlw	1	; select bank2/3
  4915  0204  0087               	movwf	7
  4916  0205  1081               	bcf	1,1
  4917                           
  4918                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4919  0206  0021               	movlb	1	; select bank1
  4920  0207  0869               	movf	setSw_Main@sw^(0+128),w
  4921  0208  3195  25AE  3181   	fcall	_getSw_KeyStatus
  4922  020B  3A01               	xorlw	1
  4923  020C  3000               	movlw	0
  4924  020D  1903               	skipnz
  4925  020E  3001               	movlw	1
  4926  020F  0020               	movlb	0	; select bank0
  4927  0210  00ED               	movwf	??_setSw_Main
  4928  0211  0874               	movf	_Sw,w
  4929  0212  0086               	movwf	6
  4930  0213  3001               	movlw	1	; select bank2/3
  4931  0214  0087               	movwf	7
  4932  0215  0DED               	rlf	??_setSw_Main,f
  4933  0216  0801               	movf	1,w
  4934  0217  066D               	xorwf	??_setSw_Main,w
  4935  0218  39FD               	andlw	-3
  4936  0219  066D               	xorwf	??_setSw_Main,w
  4937  021A  0081               	movwf	1
  4938                           
  4939                           ;Switch_B1.c: 128: } else {
  4940  021B  2A31               	goto	l1850
  4941  021C                     l7419:	
  4942                           
  4943                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  4944  021C  0A74               	incf	_Sw,w
  4945  021D  0086               	movwf	6
  4946  021E  3001               	movlw	1	; select bank2/3
  4947  021F  0087               	movwf	7
  4948  0220  1881               	btfsc	1,1
  4949  0221  2A31               	goto	l1850
  4950                           
  4951                           ;Switch_B1.c: 130: Sw->Detect = 1;
  4952  0222  0A74               	incf	_Sw,w
  4953  0223  0086               	movwf	6
  4954  0224  3001               	movlw	1	; select bank2/3
  4955  0225  0087               	movwf	7
  4956  0226  1481               	bsf	1,1
  4957                           
  4958                           ;Switch_B1.c: 132: Sw->Touch = 0;
  4959  0227  0874               	movf	_Sw,w
  4960  0228  0086               	movwf	6
  4961  0229  3001               	movlw	1	; select bank2/3
  4962  022A  0087               	movwf	7
  4963  022B  1081               	bcf	1,1
  4964                           
  4965                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  4966  022C  0874               	movf	_Sw,w
  4967  022D  0086               	movwf	6
  4968  022E  3001               	movlw	1	; select bank2/3
  4969  022F  0087               	movwf	7
  4970  0230  1501               	bsf	1,2
  4971  0231                     l1850:	
  4972                           
  4973                           ;Switch_B1.c: 134: }
  4974                           ;Switch_B1.c: 135: }
  4975                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  4976  0231  0874               	movf	_Sw,w
  4977  0232  0086               	movwf	6
  4978  0233  3001               	movlw	1	; select bank2/3
  4979  0234  0087               	movwf	7
  4980  0235  1C81               	btfss	1,1
  4981  0236  2AFC               	goto	l7465
  4982                           
  4983                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  4984  0237  0874               	movf	_Sw,w
  4985  0238  0086               	movwf	6
  4986  0239  3001               	movlw	1	; select bank2/3
  4987  023A  0087               	movwf	7
  4988  023B  1901               	btfsc	1,2
  4989  023C  2A60               	goto	l7435
  4990                           
  4991                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  4992  023D  3001               	movlw	1
  4993  023E  0020               	movlb	0	; select bank0
  4994  023F  00ED               	movwf	??_setSw_Main
  4995  0240  0874               	movf	_Sw,w
  4996  0241  3E02               	addlw	2
  4997  0242  0086               	movwf	6
  4998  0243  3001               	movlw	1	; select bank2/3
  4999  0244  0087               	movwf	7
  5000  0245  086D               	movf	??_setSw_Main,w
  5001  0246  0781               	addwf	1,f
  5002                           
  5003                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  5004  0247  0874               	movf	_Sw,w
  5005  0248  3E02               	addlw	2
  5006  0249  0086               	movwf	6
  5007  024A  3001               	movlw	1	; select bank2/3
  5008  024B  0087               	movwf	7
  5009  024C  3005               	movlw	5
  5010  024D  0201               	subwf	1,w
  5011  024E  1C03               	skipc
  5012  024F  0008               	return
  5013                           
  5014                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5015  0250  0874               	movf	_Sw,w
  5016  0251  3E02               	addlw	2
  5017  0252  0086               	movwf	6
  5018  0253  3001               	movlw	1	; select bank2/3
  5019  0254  0087               	movwf	7
  5020  0255  0181               	clrf	1
  5021                           
  5022                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5023  0256  0874               	movf	_Sw,w
  5024  0257  0086               	movwf	6
  5025  0258  3001               	movlw	1	; select bank2/3
  5026  0259  0087               	movwf	7
  5027  025A  1501               	bsf	1,2
  5028                           
  5029                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5030  025B  0021               	movlb	1	; select bank1
  5031  025C  0869               	movf	setSw_Main@sw^(0+128),w
  5032  025D  318B  23FF         	fcall	_setDimmerLights_SwOn
  5033                           
  5034                           ;Switch_B1.c: 148: }
  5035                           ;Switch_B1.c: 149: } else {
  5036  025F  0008               	return
  5037  0260                     l7435:	
  5038                           
  5039                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5040  0260  0874               	movf	_Sw,w
  5041  0261  0086               	movwf	6
  5042  0262  3001               	movlw	1	; select bank2/3
  5043  0263  0087               	movwf	7
  5044  0264  1981               	btfsc	1,3
  5045  0265  2A93               	goto	l7445
  5046                           
  5047                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5048  0266  0874               	movf	_Sw,w
  5049  0267  3E03               	addlw	3
  5050  0268  0086               	movwf	6
  5051  0269  3001               	movlw	1	; select bank2/3
  5052  026A  0087               	movwf	7
  5053  026B  3001               	movlw	1
  5054  026C  0781               	addwf	1,f
  5055  026D  3141               	addfsr 1,1
  5056  026E  1803               	skipnc
  5057  026F  0A81               	incf	1,f
  5058                           
  5059                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  5060  0270  0874               	movf	_Sw,w
  5061  0271  3E03               	addlw	3
  5062  0272  0086               	movwf	6
  5063  0273  3001               	movlw	1	; select bank2/3
  5064  0274  0087               	movwf	7
  5065  0275  3F40               	moviw [0]fsr1
  5066  0276  0020               	movlb	0	; select bank0
  5067  0277  00ED               	movwf	??_setSw_Main
  5068  0278  3F41               	moviw [1]fsr1
  5069  0279  00EE               	movwf	??_setSw_Main+1
  5070  027A  3000               	movlw	0
  5071  027B  026E               	subwf	??_setSw_Main+1,w
  5072  027C  3096               	movlw	150
  5073  027D  1903               	skipnz
  5074  027E  026D               	subwf	??_setSw_Main,w
  5075  027F  1C03               	skipc
  5076  0280  0008               	return
  5077                           
  5078                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5079  0281  0874               	movf	_Sw,w
  5080  0282  3E03               	addlw	3
  5081  0283  0086               	movwf	6
  5082  0284  3001               	movlw	1	; select bank2/3
  5083  0285  0087               	movwf	7
  5084  0286  3000               	movlw	0
  5085  0287  3FC0               	movwi [0]fsr1
  5086  0288  3FC1               	movwi [1]fsr1
  5087                           
  5088                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5089  0289  0874               	movf	_Sw,w
  5090  028A  0086               	movwf	6
  5091  028B  3001               	movlw	1	; select bank2/3
  5092  028C  0087               	movwf	7
  5093  028D  1581               	bsf	1,3
  5094                           
  5095                           ;Switch_B1.c: 157: setDimmerLights_AdjOn(sw);
  5096  028E  0021               	movlb	1	; select bank1
  5097  028F  0869               	movf	setSw_Main@sw^(0+128),w
  5098  0290  3196  26CE         	fcall	_setDimmerLights_AdjOn
  5099                           
  5100                           ;Switch_B1.c: 160: }
  5101                           ;Switch_B1.c: 161: } else {
  5102  0292  0008               	return
  5103  0293                     l7445:	
  5104                           
  5105                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5106  0293  0874               	movf	_Sw,w
  5107  0294  0086               	movwf	6
  5108  0295  3001               	movlw	1	; select bank2/3
  5109  0296  0087               	movwf	7
  5110  0297  1A01               	btfsc	1,4
  5111  0298  2ACD               	goto	l7457
  5112                           
  5113                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5114  0299  0874               	movf	_Sw,w
  5115  029A  3E05               	addlw	5
  5116  029B  0086               	movwf	6
  5117  029C  3001               	movlw	1	; select bank2/3
  5118  029D  0087               	movwf	7
  5119  029E  3001               	movlw	1
  5120  029F  0781               	addwf	1,f
  5121  02A0  3141               	addfsr 1,1
  5122  02A1  1803               	skipnc
  5123  02A2  0A81               	incf	1,f
  5124                           
  5125                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5126  02A3  0874               	movf	_Sw,w
  5127  02A4  3E05               	addlw	5
  5128  02A5  0086               	movwf	6
  5129  02A6  3001               	movlw	1	; select bank2/3
  5130  02A7  0087               	movwf	7
  5131  02A8  3F40               	moviw [0]fsr1
  5132  02A9  0020               	movlb	0	; select bank0
  5133  02AA  00ED               	movwf	??_setSw_Main
  5134  02AB  3F41               	moviw [1]fsr1
  5135  02AC  00EE               	movwf	??_setSw_Main+1
  5136  02AD  3000               	movlw	0
  5137  02AE  026E               	subwf	??_setSw_Main+1,w
  5138  02AF  3096               	movlw	150
  5139  02B0  1903               	skipnz
  5140  02B1  026D               	subwf	??_setSw_Main,w
  5141  02B2  1C03               	skipc
  5142  02B3  0008               	return
  5143                           
  5144                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5145  02B4  0874               	movf	_Sw,w
  5146  02B5  3E05               	addlw	5
  5147  02B6  0086               	movwf	6
  5148  02B7  3001               	movlw	1	; select bank2/3
  5149  02B8  0087               	movwf	7
  5150  02B9  3000               	movlw	0
  5151  02BA  3FC0               	movwi [0]fsr1
  5152  02BB  3FC1               	movwi [1]fsr1
  5153                           
  5154                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5155  02BC  0874               	movf	_Sw,w
  5156  02BD  0086               	movwf	6
  5157  02BE  3001               	movlw	1	; select bank2/3
  5158  02BF  0087               	movwf	7
  5159  02C0  1601               	bsf	1,4
  5160                           
  5161                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  5162  02C1  0021               	movlb	1	; select bank1
  5163  02C2  1EA0               	btfss	_myMain^(0+128),5
  5164  02C3  0008               	return
  5165                           
  5166                           ;Switch_B1.c: 172: setBuz(2, 100);
  5167  02C4  3064               	movlw	100
  5168  02C5  0020               	movlb	0	; select bank0
  5169  02C6  00A9               	movwf	setBuz@time
  5170  02C7  3000               	movlw	0
  5171  02C8  00AA               	movwf	setBuz@time+1
  5172  02C9  3002               	movlw	2
  5173  02CA  318B  234D         	fcall	_setBuz
  5174                           
  5175                           ;Switch_B1.c: 173: }
  5176                           ;Switch_B1.c: 175: }
  5177                           ;Switch_B1.c: 176: } else {
  5178  02CC  0008               	return
  5179  02CD                     l7457:	
  5180                           
  5181                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  5182  02CD  0874               	movf	_Sw,w
  5183  02CE  0086               	movwf	6
  5184  02CF  3001               	movlw	1	; select bank2/3
  5185  02D0  0087               	movwf	7
  5186  02D1  1A81               	btfsc	1,5
  5187  02D2  0008               	return
  5188                           
  5189                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  5190  02D3  0874               	movf	_Sw,w
  5191  02D4  3E07               	addlw	7
  5192  02D5  0086               	movwf	6
  5193  02D6  3001               	movlw	1	; select bank2/3
  5194  02D7  0087               	movwf	7
  5195  02D8  3001               	movlw	1
  5196  02D9  0781               	addwf	1,f
  5197  02DA  3141               	addfsr 1,1
  5198  02DB  1803               	skipnc
  5199  02DC  0A81               	incf	1,f
  5200                           
  5201                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  5202  02DD  0874               	movf	_Sw,w
  5203  02DE  3E07               	addlw	7
  5204  02DF  0086               	movwf	6
  5205  02E0  3001               	movlw	1	; select bank2/3
  5206  02E1  0087               	movwf	7
  5207  02E2  3F40               	moviw [0]fsr1
  5208  02E3  0020               	movlb	0	; select bank0
  5209  02E4  00ED               	movwf	??_setSw_Main
  5210  02E5  3F41               	moviw [1]fsr1
  5211  02E6  00EE               	movwf	??_setSw_Main+1
  5212  02E7  3001               	movlw	1
  5213  02E8  026E               	subwf	??_setSw_Main+1,w
  5214  02E9  302C               	movlw	44
  5215  02EA  1903               	skipnz
  5216  02EB  026D               	subwf	??_setSw_Main,w
  5217  02EC  1C03               	skipc
  5218  02ED  0008               	return
  5219                           
  5220                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  5221  02EE  0874               	movf	_Sw,w
  5222  02EF  3E07               	addlw	7
  5223  02F0  0086               	movwf	6
  5224  02F1  3001               	movlw	1	; select bank2/3
  5225  02F2  0087               	movwf	7
  5226  02F3  3000               	movlw	0
  5227  02F4  3FC0               	movwi [0]fsr1
  5228  02F5  3FC1               	movwi [1]fsr1
  5229                           
  5230                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  5231  02F6  0874               	movf	_Sw,w
  5232  02F7  0086               	movwf	6
  5233  02F8  3001               	movlw	1	; select bank2/3
  5234  02F9  0087               	movwf	7
  5235  02FA  1681               	bsf	1,5
  5236                           
  5237                           ;Switch_B1.c: 187: }
  5238                           ;Switch_B1.c: 188: }
  5239                           ;Switch_B1.c: 189: }
  5240                           ;Switch_B1.c: 190: }
  5241                           ;Switch_B1.c: 191: }
  5242                           ;Switch_B1.c: 192: } else {
  5243  02FB  0008               	return
  5244  02FC                     l7465:	
  5245                           
  5246                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  5247  02FC  0874               	movf	_Sw,w
  5248  02FD  0086               	movwf	6
  5249  02FE  3001               	movlw	1	; select bank2/3
  5250  02FF  0087               	movwf	7
  5251  0300  1D01               	btfss	1,2
  5252  0301  0008               	return
  5253                           
  5254                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  5255  0302  3001               	movlw	1
  5256  0303  0020               	movlb	0	; select bank0
  5257  0304  00ED               	movwf	??_setSw_Main
  5258  0305  0874               	movf	_Sw,w
  5259  0306  3E02               	addlw	2
  5260  0307  0086               	movwf	6
  5261  0308  3001               	movlw	1	; select bank2/3
  5262  0309  0087               	movwf	7
  5263  030A  086D               	movf	??_setSw_Main,w
  5264  030B  0781               	addwf	1,f
  5265                           
  5266                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  5267  030C  0874               	movf	_Sw,w
  5268  030D  3E02               	addlw	2
  5269  030E  0086               	movwf	6
  5270  030F  3001               	movlw	1	; select bank2/3
  5271  0310  0087               	movwf	7
  5272  0311  3005               	movlw	5
  5273  0312  0201               	subwf	1,w
  5274  0313  1C03               	skipc
  5275  0314  0008               	return
  5276                           
  5277                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  5278  0315  0874               	movf	_Sw,w
  5279  0316  3E02               	addlw	2
  5280  0317  0086               	movwf	6
  5281  0318  3001               	movlw	1	; select bank2/3
  5282  0319  0087               	movwf	7
  5283  031A  0181               	clrf	1
  5284                           
  5285                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  5286  031B  0874               	movf	_Sw,w
  5287  031C  0086               	movwf	6
  5288  031D  3001               	movlw	1	; select bank2/3
  5289  031E  0087               	movwf	7
  5290  031F  1101               	bcf	1,2
  5291                           
  5292                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  5293  0320  0874               	movf	_Sw,w
  5294  0321  3E03               	addlw	3
  5295  0322  0086               	movwf	6
  5296  0323  3001               	movlw	1	; select bank2/3
  5297  0324  0087               	movwf	7
  5298  0325  3000               	movlw	0
  5299  0326  3FC0               	movwi [0]fsr1
  5300  0327  3FC1               	movwi [1]fsr1
  5301                           
  5302                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  5303  0328  0874               	movf	_Sw,w
  5304  0329  0086               	movwf	6
  5305  032A  3001               	movlw	1	; select bank2/3
  5306  032B  0087               	movwf	7
  5307  032C  1181               	bcf	1,3
  5308                           
  5309                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  5310  032D  0874               	movf	_Sw,w
  5311  032E  3E05               	addlw	5
  5312  032F  0086               	movwf	6
  5313  0330  3001               	movlw	1	; select bank2/3
  5314  0331  0087               	movwf	7
  5315  0332  3000               	movlw	0
  5316  0333  3FC0               	movwi [0]fsr1
  5317  0334  3FC1               	movwi [1]fsr1
  5318                           
  5319                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  5320  0335  0874               	movf	_Sw,w
  5321  0336  0086               	movwf	6
  5322  0337  3001               	movlw	1	; select bank2/3
  5323  0338  0087               	movwf	7
  5324  0339  1201               	bcf	1,4
  5325                           
  5326                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  5327  033A  0874               	movf	_Sw,w
  5328  033B  3E07               	addlw	7
  5329  033C  0086               	movwf	6
  5330  033D  3001               	movlw	1	; select bank2/3
  5331  033E  0087               	movwf	7
  5332  033F  3000               	movlw	0
  5333  0340  3FC0               	movwi [0]fsr1
  5334  0341  3FC1               	movwi [1]fsr1
  5335                           
  5336                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  5337  0342  0874               	movf	_Sw,w
  5338  0343  0086               	movwf	6
  5339  0344  3001               	movlw	1	; select bank2/3
  5340  0345  0087               	movwf	7
  5341  0346  1281               	bcf	1,5
  5342                           
  5343                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5344  0347  0021               	movlb	1	; select bank1
  5345  0348  0869               	movf	setSw_Main@sw^(0+128),w
  5346  0349  318A  2258         	fcall	_setDimmerLights_SwOff
  5347                           
  5348                           ;Switch_B1.c: 211: }
  5349                           ;Switch_B1.c: 212: }
  5350                           ;Switch_B1.c: 213: }
  5351                           ;Switch_B1.c: 214: } else {
  5352  034B  0008               	return
  5353  034C                     l1848:	
  5354                           
  5355                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5356  034C  0021               	movlb	1	; select bank1
  5357  034D  1C20               	btfss	_myMain^(0+128),0
  5358  034E  0008               	return
  5359                           
  5360                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5361  034F  0874               	movf	_Sw,w
  5362  0350  0086               	movwf	6
  5363  0351  3001               	movlw	1	; select bank2/3
  5364  0352  0087               	movwf	7
  5365  0353  1401               	bsf	1,0
  5366  0354  0008               	return
  5367  0355                     __end_of_setSw_Main:	
  5368                           
  5369                           	psect	text14
  5370  0BFF                     __ptext14:	
  5371 ;; *************** function _setDimmerLights_SwOn *****************
  5372 ;; Defined at:
  5373 ;;		line 405 in file "../src/Dimmer_B1.c"
  5374 ;; Parameters:    Size  Location     Type
  5375 ;;  sw              1    wreg     unsigned char 
  5376 ;; Auto vars:     Size  Location     Type
  5377 ;;  sw              1   17[BANK0 ] unsigned char 
  5378 ;;  idle            1   16[BANK0 ] unsigned char 
  5379 ;; Return value:  Size  Location     Type
  5380 ;;		None               void
  5381 ;; Registers used:
  5382 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5389 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5390 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5391 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5392 ;;Total ram usage:        5 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    7
  5395 ;; This function calls:
  5396 ;;		_DimmerLightsPointSelect
  5397 ;;		_setBuz
  5398 ;; This function is called by:
  5399 ;;		_setSw_Main
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           
  5404                           ;psect for function _setDimmerLights_SwOn
  5405  0BFF                     _setDimmerLights_SwOn:	
  5406                           
  5407                           ;incstack = 0
  5408                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5409                           ;setDimmerLights_SwOn@sw stored from wreg
  5410  0BFF  0020               	movlb	0	; select bank0
  5411  0C00  00B1               	movwf	setDimmerLights_SwOn@sw
  5412                           
  5413                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  5414  0C01  0831               	movf	setDimmerLights_SwOn@sw,w
  5415  0C02  3194  2445  318B   	fcall	_DimmerLightsPointSelect
  5416                           
  5417                           ;Dimmer_B1.c: 407: char idle = 0;
  5418  0C05  0020               	movlb	0	; select bank0
  5419  0C06  01B0               	clrf	setDimmerLights_SwOn@idle
  5420                           
  5421                           ;Dimmer_B1.c: 410: if (idle == 0) {
  5422  0C07  08B0               	movf	setDimmerLights_SwOn@idle,f
  5423  0C08  1D03               	skipz
  5424  0C09  2C2A               	goto	l6839
  5425                           
  5426                           ;Dimmer_B1.c: 411: if (sw == 1) {
  5427  0C0A  0831               	movf	setDimmerLights_SwOn@sw,w
  5428  0C0B  3A01               	xorlw	1
  5429  0C0C  1D03               	skipz
  5430  0C0D  2C19               	goto	l6829
  5431                           
  5432                           ;Dimmer_B1.c: 412: idle = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1 
      +                          : 0;
  5433  0C0E  01AE               	clrf	_setDimmerLights_SwOn$1960
  5434  0C0F  0AAE               	incf	_setDimmerLights_SwOn$1960,f
  5435  0C10  0022               	movlb	2	; select bank2
  5436  0C11  1DE9               	btfss	(_DimmerLights2^(0+256)+10),3
  5437  0C12  1B60               	btfsc	(_DimmerLights2^(0+256)+1),6
  5438  0C13  2C16               	goto	l6827
  5439  0C14  0020               	movlb	0	; select bank0
  5440  0C15  01AE               	clrf	_setDimmerLights_SwOn$1960
  5441  0C16                     l6827:	
  5442  0C16  0020               	movlb	0	; select bank0
  5443  0C17  082E               	movf	_setDimmerLights_SwOn$1960,w
  5444  0C18  2C27               	goto	L2
  5445  0C19                     l6829:	
  5446                           ;Dimmer_B1.c: 413: } else if (sw == 2) {
  5447                           
  5448  0C19  0831               	movf	setDimmerLights_SwOn@sw,w
  5449  0C1A  3A02               	xorlw	2
  5450  0C1B  1D03               	skipz
  5451  0C1C  2C2A               	goto	l6839
  5452                           
  5453                           ;Dimmer_B1.c: 414: idle = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1 
      +                          : 0;
  5454  0C1D  01AF               	clrf	_setDimmerLights_SwOn$1961
  5455  0C1E  0AAF               	incf	_setDimmerLights_SwOn$1961,f
  5456  0C1F  0022               	movlb	2	; select bank2
  5457  0C20  1DD8               	btfss	(_DimmerLights1^(0+256)+10),3
  5458  0C21  1B4F               	btfsc	(_DimmerLights1^(0+256)+1),6
  5459  0C22  2C25               	goto	l6837
  5460  0C23  0020               	movlb	0	; select bank0
  5461  0C24  01AF               	clrf	_setDimmerLights_SwOn$1961
  5462  0C25                     l6837:	
  5463  0C25  0020               	movlb	0	; select bank0
  5464  0C26  082F               	movf	_setDimmerLights_SwOn$1961,w
  5465  0C27                     L2:	
  5466  0C27  00AD               	movwf	??_setDimmerLights_SwOn
  5467  0C28  082D               	movf	??_setDimmerLights_SwOn,w
  5468  0C29  00B0               	movwf	setDimmerLights_SwOn@idle
  5469  0C2A                     l6839:	
  5470                           
  5471                           ;Dimmer_B1.c: 415: }
  5472                           ;Dimmer_B1.c: 416: }
  5473                           ;Dimmer_B1.c: 436: if (idle == 0) {
  5474  0C2A  08B0               	movf	setDimmerLights_SwOn@idle,f
  5475  0C2B  1D03               	skipz
  5476  0C2C  0008               	return
  5477                           
  5478                           ;Dimmer_B1.c: 437: DimmerLights->SwFlag = 1;
  5479  0C2D  086F               	movf	_DimmerLights,w
  5480  0C2E  3E0B               	addlw	11
  5481  0C2F  0086               	movwf	6
  5482  0C30  3001               	movlw	1	; select bank2/3
  5483  0C31  0087               	movwf	7
  5484  0C32  1481               	bsf	1,1
  5485                           
  5486                           ;Dimmer_B1.c: 438: if (DimmerLights->Status == 0) {
  5487  0C33  086F               	movf	_DimmerLights,w
  5488  0C34  3E02               	addlw	2
  5489  0C35  0086               	movwf	6
  5490  0C36  3001               	movlw	1	; select bank2/3
  5491  0C37  0087               	movwf	7
  5492  0C38  1881               	btfsc	1,1
  5493  0C39  2C4D               	goto	l6845
  5494                           
  5495                           ;Dimmer_B1.c: 439: DimmerLights->Status = 1;
  5496  0C3A  086F               	movf	_DimmerLights,w
  5497  0C3B  3E02               	addlw	2
  5498  0C3C  0086               	movwf	6
  5499  0C3D  3001               	movlw	1	; select bank2/3
  5500  0C3E  0087               	movwf	7
  5501  0C3F  1481               	bsf	1,1
  5502                           
  5503                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
  5504  0C40  086F               	movf	_DimmerLights,w
  5505  0C41  3E0A               	addlw	10
  5506  0C42  0086               	movwf	6
  5507  0C43  3001               	movlw	1	; select bank2/3
  5508  0C44  0087               	movwf	7
  5509  0C45  1481               	bsf	1,1
  5510                           
  5511                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 1;
  5512  0C46  086F               	movf	_DimmerLights,w
  5513  0C47  3E0A               	addlw	10
  5514  0C48  0086               	movwf	6
  5515  0C49  3001               	movlw	1	; select bank2/3
  5516  0C4A  0087               	movwf	7
  5517  0C4B  1401               	bsf	1,0
  5518                           
  5519                           ;Dimmer_B1.c: 442: } else {
  5520  0C4C  2C53               	goto	l6847
  5521  0C4D                     l6845:	
  5522                           
  5523                           ;Dimmer_B1.c: 443: DimmerLights->Status = 0;
  5524  0C4D  086F               	movf	_DimmerLights,w
  5525  0C4E  3E02               	addlw	2
  5526  0C4F  0086               	movwf	6
  5527  0C50  3001               	movlw	1	; select bank2/3
  5528  0C51  0087               	movwf	7
  5529  0C52  1081               	bcf	1,1
  5530  0C53                     l6847:	
  5531                           
  5532                           ;Dimmer_B1.c: 444: }
  5533                           ;Dimmer_B1.c: 445: setBuz(1, 100);
  5534  0C53  3064               	movlw	100
  5535  0C54  00A9               	movwf	setBuz@time
  5536  0C55  3000               	movlw	0
  5537  0C56  00AA               	movwf	setBuz@time+1
  5538  0C57  3001               	movlw	1
  5539  0C58  318B  234D         	fcall	_setBuz
  5540  0C5A  0008               	return
  5541  0C5B                     __end_of_setDimmerLights_SwOn:	
  5542                           
  5543                           	psect	text15
  5544  16CE                     __ptext15:	
  5545 ;; *************** function _setDimmerLights_AdjOn *****************
  5546 ;; Defined at:
  5547 ;;		line 477 in file "../src/Dimmer_B1.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;  sw              1    wreg     unsigned char 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  sw              1    2[BANK0 ] unsigned char 
  5552 ;; Return value:  Size  Location     Type
  5553 ;;		None               void
  5554 ;; Registers used:
  5555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5562 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5564 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5565 ;;Total ram usage:        1 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    6
  5568 ;; This function calls:
  5569 ;;		_DimmerLightsPointSelect
  5570 ;; This function is called by:
  5571 ;;		_setSw_Main
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           
  5576                           ;psect for function _setDimmerLights_AdjOn
  5577  16CE                     _setDimmerLights_AdjOn:	
  5578                           
  5579                           ;incstack = 0
  5580                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5581                           ;setDimmerLights_AdjOn@sw stored from wreg
  5582  16CE  0020               	movlb	0	; select bank0
  5583  16CF  00A2               	movwf	setDimmerLights_AdjOn@sw
  5584                           
  5585                           ;Dimmer_B1.c: 478: DimmerLightsPointSelect(sw);
  5586  16D0  0822               	movf	setDimmerLights_AdjOn@sw,w
  5587  16D1  3194  2445  3196   	fcall	_DimmerLightsPointSelect
  5588                           
  5589                           ;Dimmer_B1.c: 488: if (DimmerLights->Trigger == 0) {
  5590  16D4  0020               	movlb	0	; select bank0
  5591  16D5  086F               	movf	_DimmerLights,w
  5592  16D6  3E0A               	addlw	10
  5593  16D7  0086               	movwf	6
  5594  16D8  3001               	movlw	1	; select bank2/3
  5595  16D9  0087               	movwf	7
  5596  16DA  1881               	btfsc	1,1
  5597  16DB  0008               	return
  5598                           
  5599                           ;Dimmer_B1.c: 489: if (DimmerLights->SwFlag == 1) {
  5600  16DC  086F               	movf	_DimmerLights,w
  5601  16DD  3E0B               	addlw	11
  5602  16DE  0086               	movwf	6
  5603  16DF  3001               	movlw	1	; select bank2/3
  5604  16E0  0087               	movwf	7
  5605  16E1  1C81               	btfss	1,1
  5606  16E2  0008               	return
  5607                           
  5608                           ;Dimmer_B1.c: 490: DimmerLights->SwAdj = 1;
  5609  16E3  086F               	movf	_DimmerLights,w
  5610  16E4  3E0B               	addlw	11
  5611  16E5  0086               	movwf	6
  5612  16E6  3001               	movlw	1	; select bank2/3
  5613  16E7  0087               	movwf	7
  5614  16E8  1501               	bsf	1,2
  5615                           
  5616                           ;Dimmer_B1.c: 491: DimmerLights->Status = 1;
  5617  16E9  086F               	movf	_DimmerLights,w
  5618  16EA  3E02               	addlw	2
  5619  16EB  0086               	movwf	6
  5620  16EC  3001               	movlw	1	; select bank2/3
  5621  16ED  0087               	movwf	7
  5622  16EE  1481               	bsf	1,1
  5623                           
  5624                           ;Dimmer_B1.c: 493: DimmerLights->TriggerAdj = 1;
  5625  16EF  086F               	movf	_DimmerLights,w
  5626  16F0  3E0A               	addlw	10
  5627  16F1  0086               	movwf	6
  5628  16F2  3001               	movlw	1	; select bank2/3
  5629  16F3  0087               	movwf	7
  5630  16F4  1581               	bsf	1,3
  5631                           
  5632                           ;Dimmer_B1.c: 494: DimmerLights->SwitchAdj = 1;
  5633  16F5  086F               	movf	_DimmerLights,w
  5634  16F6  3E0A               	addlw	10
  5635  16F7  0086               	movwf	6
  5636  16F8  3001               	movlw	1	; select bank2/3
  5637  16F9  0087               	movwf	7
  5638  16FA  1501               	bsf	1,2
  5639  16FB  0008               	return
  5640  16FC                     __end_of_setDimmerLights_AdjOn:	
  5641                           
  5642                           	psect	text16
  5643  15AE                     __ptext16:	
  5644 ;; *************** function _getSw_KeyStatus *****************
  5645 ;; Defined at:
  5646 ;;		line 222 in file "../src/Switch_B1.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;  sw              1    wreg     unsigned char 
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;  sw              1    4[BANK0 ] unsigned char 
  5651 ;;  status          1    3[BANK0 ] unsigned char 
  5652 ;; Return value:  Size  Location     Type
  5653 ;;                  1    wreg      unsigned char 
  5654 ;; Registers used:
  5655 ;;		wreg, status,2
  5656 ;; Tracked objects:
  5657 ;;		On entry : 0/0
  5658 ;;		On exit  : 0/0
  5659 ;;		Unchanged: 0/0
  5660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5662 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5664 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5665 ;;Total ram usage:        5 bytes
  5666 ;; Hardware stack levels used:    1
  5667 ;; Hardware stack levels required when called:    5
  5668 ;; This function calls:
  5669 ;;		Nothing
  5670 ;; This function is called by:
  5671 ;;		_setSw_Main
  5672 ;; This function uses a non-reentrant model
  5673 ;;
  5674                           
  5675                           
  5676                           ;psect for function _getSw_KeyStatus
  5677  15AE                     _getSw_KeyStatus:	
  5678                           
  5679                           ;incstack = 0
  5680                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  5681                           ;getSw_KeyStatus@sw stored from wreg
  5682  15AE  0020               	movlb	0	; select bank0
  5683  15AF  00A4               	movwf	getSw_KeyStatus@sw
  5684                           
  5685                           ;Switch_B1.c: 223: char status = 0;
  5686  15B0  01A3               	clrf	getSw_KeyStatus@status
  5687                           
  5688                           ;Switch_B1.c: 235: if (sw == 1) {
  5689  15B1  0824               	movf	getSw_KeyStatus@sw,w
  5690  15B2  3A01               	xorlw	1
  5691  15B3  1D03               	skipz
  5692  15B4  2DBD               	goto	l7075
  5693                           
  5694                           ;Switch_B1.c: 236: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  5695  15B5  01A1               	clrf	_getSw_KeyStatus$5330
  5696  15B6  0AA1               	incf	_getSw_KeyStatus$5330,f
  5697  15B7  1F0C               	btfss	12,6	;volatile
  5698  15B8  1A0C               	btfsc	12,4	;volatile
  5699  15B9  2DBB               	goto	l7073
  5700  15BA  01A1               	clrf	_getSw_KeyStatus$5330
  5701  15BB                     l7073:	
  5702  15BB  0821               	movf	_getSw_KeyStatus$5330,w
  5703  15BC  2DC8               	goto	L3
  5704  15BD                     l7075:	
  5705                           ;Switch_B1.c: 237: } else if (sw == 2) {
  5706                           
  5707  15BD  0824               	movf	getSw_KeyStatus@sw,w
  5708  15BE  3A02               	xorlw	2
  5709  15BF  1D03               	skipz
  5710  15C0  2DCB               	goto	l7085
  5711                           
  5712                           ;Switch_B1.c: 238: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  5713  15C1  01A2               	clrf	_getSw_KeyStatus$5331
  5714  15C2  0AA2               	incf	_getSw_KeyStatus$5331,f
  5715  15C3  1C0C               	btfss	12,0	;volatile
  5716  15C4  188D               	btfsc	13,1	;volatile
  5717  15C5  2DC7               	goto	l7083
  5718  15C6  01A2               	clrf	_getSw_KeyStatus$5331
  5719  15C7                     l7083:	
  5720  15C7  0822               	movf	_getSw_KeyStatus$5331,w
  5721  15C8                     L3:	
  5722  15C8  00A0               	movwf	??_getSw_KeyStatus
  5723  15C9  0820               	movf	??_getSw_KeyStatus,w
  5724  15CA  00A3               	movwf	getSw_KeyStatus@status
  5725  15CB                     l7085:	
  5726                           
  5727                           ;Switch_B1.c: 239: }
  5728                           ;Switch_B1.c: 246: return status;
  5729  15CB  0823               	movf	getSw_KeyStatus@status,w
  5730  15CC  0008               	return
  5731  15CD                     __end_of_getSw_KeyStatus:	
  5732                           
  5733                           	psect	text17
  5734  14BA                     __ptext17:	
  5735 ;; *************** function _SwPointSelect *****************
  5736 ;; Defined at:
  5737 ;;		line 25 in file "../src/Switch_B1.c"
  5738 ;; Parameters:    Size  Location     Type
  5739 ;;  sw              1    wreg     unsigned char 
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;  sw              1    1[BANK0 ] unsigned char 
  5742 ;; Return value:  Size  Location     Type
  5743 ;;		None               void
  5744 ;; Registers used:
  5745 ;;		wreg
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5752 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5753 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5754 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5755 ;;Total ram usage:        2 bytes
  5756 ;; Hardware stack levels used:    1
  5757 ;; Hardware stack levels required when called:    5
  5758 ;; This function calls:
  5759 ;;		Nothing
  5760 ;; This function is called by:
  5761 ;;		_setSw_Main
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           
  5766                           ;psect for function _SwPointSelect
  5767  14BA                     _SwPointSelect:	
  5768                           
  5769                           ;incstack = 0
  5770                           ; Regs used in _SwPointSelect: [wreg]
  5771                           ;SwPointSelect@sw stored from wreg
  5772  14BA  0020               	movlb	0	; select bank0
  5773  14BB  00A1               	movwf	SwPointSelect@sw
  5774                           
  5775                           ;Switch_B1.c: 28: if (sw == 1) {
  5776  14BC  0821               	movf	SwPointSelect@sw,w
  5777  14BD  3A01               	xorlw	1
  5778  14BE  1D03               	skipz
  5779  14BF  2CC5               	goto	l7059
  5780                           
  5781                           ;Switch_B1.c: 29: Sw = &Sw1;
  5782  14C0  30C5               	movlw	_Sw1& (0+255)
  5783  14C1  00A0               	movwf	??_SwPointSelect
  5784  14C2  0820               	movf	??_SwPointSelect,w
  5785  14C3  00F4               	movwf	_Sw
  5786                           
  5787                           ;Switch_B1.c: 30: }
  5788  14C4  0008               	return
  5789  14C5                     l7059:	
  5790                           
  5791                           ;Switch_B1.c: 33: else if (sw == 2) {
  5792  14C5  0821               	movf	SwPointSelect@sw,w
  5793  14C6  3A02               	xorlw	2
  5794  14C7  1D03               	skipz
  5795  14C8  0008               	return
  5796                           
  5797                           ;Switch_B1.c: 34: Sw = &Sw2;
  5798  14C9  30CE               	movlw	_Sw2& (0+255)
  5799  14CA  00A0               	movwf	??_SwPointSelect
  5800  14CB  0820               	movf	??_SwPointSelect,w
  5801  14CC  00F4               	movwf	_Sw
  5802  14CD  0008               	return
  5803  14CE                     __end_of_SwPointSelect:	
  5804                           
  5805                           	psect	text18
  5806  1392                     __ptext18:	
  5807 ;; *************** function _Switch_Initialization *****************
  5808 ;; Defined at:
  5809 ;;		line 46 in file "../src/Switch_B1.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;		None
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;		None
  5814 ;; Return value:  Size  Location     Type
  5815 ;;		None               void
  5816 ;; Registers used:
  5817 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5827 ;;Total ram usage:        0 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    8
  5830 ;; This function calls:
  5831 ;;		_TouchPower
  5832 ;;		_setSw_Initialization
  5833 ;; This function is called by:
  5834 ;;		_main
  5835 ;; This function uses a non-reentrant model
  5836 ;;
  5837                           
  5838                           
  5839                           ;psect for function _Switch_Initialization
  5840  1392                     _Switch_Initialization:	
  5841                           
  5842                           ;Switch_B1.c: 47: TouchPower();
  5843                           
  5844                           ;incstack = 0
  5845                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5846  1392  3194  24F8  3193   	fcall	_TouchPower
  5847                           
  5848                           ;Switch_B1.c: 49: WPUB1 = 0;
  5849  1395  0024               	movlb	4	; select bank4
  5850  1396  108D               	bcf	13,1	;volatile
  5851                           
  5852                           ;Switch_B1.c: 58: setSw_Initialization(1);
  5853  1397  3001               	movlw	1
  5854  1398  3193  231A  3193   	fcall	_setSw_Initialization
  5855                           
  5856                           ;Switch_B1.c: 62: setSw_Initialization(2);
  5857  139B  3002               	movlw	2
  5858  139C  3193  231A         	fcall	_setSw_Initialization
  5859  139E  0008               	return
  5860  139F                     __end_of_Switch_Initialization:	
  5861                           
  5862                           	psect	text19
  5863  131A                     __ptext19:	
  5864 ;; *************** function _setSw_Initialization *****************
  5865 ;; Defined at:
  5866 ;;		line 93 in file "../src/Switch_B1.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;  sw              1    wreg     unsigned char 
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;  sw              1    4[BANK0 ] unsigned char 
  5871 ;; Return value:  Size  Location     Type
  5872 ;;		None               void
  5873 ;; Registers used:
  5874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5883 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5884 ;;Total ram usage:        1 bytes
  5885 ;; Hardware stack levels used:    1
  5886 ;; Hardware stack levels required when called:    7
  5887 ;; This function calls:
  5888 ;;		_setLED
  5889 ;; This function is called by:
  5890 ;;		_Switch_Initialization
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           
  5895                           ;psect for function _setSw_Initialization
  5896  131A                     _setSw_Initialization:	
  5897                           
  5898                           ;incstack = 0
  5899                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5900                           ;setSw_Initialization@sw stored from wreg
  5901  131A  0020               	movlb	0	; select bank0
  5902  131B  00A4               	movwf	setSw_Initialization@sw
  5903                           
  5904                           ;Switch_B1.c: 94: setLED(sw, 1);
  5905  131C  01A2               	clrf	setLED@command
  5906  131D  0AA2               	incf	setLED@command,f
  5907  131E  0824               	movf	setSw_Initialization@sw,w
  5908  131F  3189  216F         	fcall	_setLED
  5909  1321  0008               	return
  5910  1322                     __end_of_setSw_Initialization:	
  5911                           
  5912                           	psect	text20
  5913  14F8                     __ptext20:	
  5914 ;; *************** function _TouchPower *****************
  5915 ;; Defined at:
  5916 ;;		line 10 in file "../src/Switch_B1.c"
  5917 ;; Parameters:    Size  Location     Type
  5918 ;;		None
  5919 ;; Auto vars:     Size  Location     Type
  5920 ;;		None
  5921 ;; Return value:  Size  Location     Type
  5922 ;;		None               void
  5923 ;; Registers used:
  5924 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5925 ;; Tracked objects:
  5926 ;;		On entry : 0/0
  5927 ;;		On exit  : 0/0
  5928 ;;		Unchanged: 0/0
  5929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5934 ;;Total ram usage:        0 bytes
  5935 ;; Hardware stack levels used:    1
  5936 ;; Hardware stack levels required when called:    6
  5937 ;; This function calls:
  5938 ;;		_Timeout_Counter
  5939 ;;		_set_TimeoutCleared
  5940 ;; This function is called by:
  5941 ;;		_Switch_Initialization
  5942 ;;		_Switch_Main
  5943 ;; This function uses a non-reentrant model
  5944 ;;
  5945                           
  5946                           
  5947                           ;psect for function _TouchPower
  5948  14F8                     _TouchPower:	
  5949                           
  5950                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  5951                           
  5952                           ;incstack = 0
  5953                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5954  14F8  0021               	movlb	1	; select bank1
  5955  14F9  1C20               	btfss	_myMain^(0+128),0
  5956  14FA  0008               	return
  5957                           
  5958                           ;Switch_B1.c: 12: if (RC5 == 0) {
  5959  14FB  0020               	movlb	0	; select bank0
  5960  14FC  1A8E               	btfsc	14,5	;volatile
  5961  14FD  0008               	return
  5962  14FE  2D04               	goto	l7401
  5963  14FF                     l1826:	
  5964                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  5965                           
  5966                           
  5967                           ;Switch_B1.c: 14: RC5 = 1;
  5968  14FF  0020               	movlb	0	; select bank0
  5969  1500  168E               	bsf	14,5	;volatile
  5970                           
  5971                           ;Switch_B1.c: 15: Timeout_Counter();
  5972  1501  3194  24E3  3194   	fcall	_Timeout_Counter
  5973  1504                     l7401:	
  5974  1504  0020               	movlb	0	; select bank0
  5975  1505  1A8E               	btfsc	14,5	;volatile
  5976  1506  2D0A               	goto	l7405
  5977  1507  0021               	movlb	1	; select bank1
  5978  1508  1D2B               	btfss	(_myMain^(0+128)+11),2
  5979  1509  2CFF               	goto	l1826
  5980  150A                     l7405:	
  5981                           
  5982                           ;Switch_B1.c: 16: }
  5983                           ;Switch_B1.c: 17: set_TimeoutCleared();
  5984  150A  3192  22CC         	fcall	_set_TimeoutCleared
  5985  150C  0008               	return
  5986  150D                     __end_of_TouchPower:	
  5987                           
  5988                           	psect	text21
  5989  12CC                     __ptext21:	
  5990 ;; *************** function _set_TimeoutCleared *****************
  5991 ;; Defined at:
  5992 ;;		line 283 in file "../src/Main_B1.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;		None
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;		None
  5997 ;; Return value:  Size  Location     Type
  5998 ;;		None               void
  5999 ;; Registers used:
  6000 ;;		status,2
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;Total ram usage:        0 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; Hardware stack levels required when called:    5
  6013 ;; This function calls:
  6014 ;;		Nothing
  6015 ;; This function is called by:
  6016 ;;		_getAD
  6017 ;;		_TouchPower
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           
  6022                           ;psect for function _set_TimeoutCleared
  6023  12CC                     _set_TimeoutCleared:	
  6024                           
  6025                           ;Main_B1.c: 284: myMain.Timeout = 0;
  6026                           
  6027                           ;incstack = 0
  6028                           ; Regs used in _set_TimeoutCleared: [status,2]
  6029  12CC  0021               	movlb	1	; select bank1
  6030  12CD  112B               	bcf	(_myMain^(0+128)+11),2
  6031                           
  6032                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
  6033  12CE  01AC               	clrf	(_myMain^(0+128)+12)
  6034  12CF  01AD               	clrf	((_myMain+1)^(0+128)+12)
  6035  12D0  0008               	return
  6036  12D1                     __end_of_set_TimeoutCleared:	
  6037                           
  6038                           	psect	text22
  6039  14E3                     __ptext22:	
  6040 ;; *************** function _Timeout_Counter *****************
  6041 ;; Defined at:
  6042 ;;		line 274 in file "../src/Main_B1.c"
  6043 ;; Parameters:    Size  Location     Type
  6044 ;;		None
  6045 ;; Auto vars:     Size  Location     Type
  6046 ;;		None
  6047 ;; Return value:  Size  Location     Type
  6048 ;;		None               void
  6049 ;; Registers used:
  6050 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6051 ;; Tracked objects:
  6052 ;;		On entry : 0/0
  6053 ;;		On exit  : 0/0
  6054 ;;		Unchanged: 0/0
  6055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6060 ;;Total ram usage:        0 bytes
  6061 ;; Hardware stack levels used:    1
  6062 ;; Hardware stack levels required when called:    5
  6063 ;; This function calls:
  6064 ;;		Nothing
  6065 ;; This function is called by:
  6066 ;;		_getAD
  6067 ;;		_TouchPower
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           
  6072                           ;psect for function _Timeout_Counter
  6073  14E3                     _Timeout_Counter:	
  6074                           
  6075                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
  6076                           
  6077                           ;incstack = 0
  6078                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6079  14E3  3001               	movlw	1
  6080  14E4  0021               	movlb	1	; select bank1
  6081  14E5  07AC               	addwf	(_myMain^(0+128)+12),f
  6082  14E6  3000               	movlw	0
  6083  14E7  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
  6084                           
  6085                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 25000) {
  6086  14E8  300C               	movlw	12
  6087  14E9  3EA0               	addlw	_myMain& (0+255)
  6088  14EA  0086               	movwf	6
  6089  14EB  0187               	clrf	7
  6090  14EC  3F40               	moviw [0]fsr1
  6091  14ED  3AA8               	xorlw	168
  6092  14EE  1D03               	skipz
  6093  14EF  2CF2               	goto	u8145
  6094  14F0  3F41               	moviw [1]fsr1
  6095  14F1  3A61               	xorlw	97
  6096  14F2                     u8145:	
  6097  14F2  1D03               	skipz
  6098  14F3  0008               	return
  6099                           
  6100                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
  6101  14F4  01AC               	clrf	(_myMain^(0+128)+12)
  6102  14F5  01AD               	clrf	((_myMain+1)^(0+128)+12)
  6103                           
  6104                           ;Main_B1.c: 278: myMain.Timeout = 1;
  6105  14F6  152B               	bsf	(_myMain^(0+128)+11),2
  6106  14F7  0008               	return
  6107  14F8                     __end_of_Timeout_Counter:	
  6108                           
  6109                           	psect	text23
  6110  140E                     __ptext23:	
  6111 ;; *************** function _Mcu_Initialization *****************
  6112 ;; Defined at:
  6113 ;;		line 30 in file "../src/MCU_B1.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;		None
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;		None
  6118 ;; Return value:  Size  Location     Type
  6119 ;;		None               void
  6120 ;; Registers used:
  6121 ;;		wreg, status,2, status,0, pclath, cstack
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;Total ram usage:        0 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    6
  6134 ;; This function calls:
  6135 ;;		_ADC_Set
  6136 ;;		_Fosc_Set
  6137 ;;		_IOC_Set
  6138 ;;		_IO_Set
  6139 ;;		_TMR1_Set
  6140 ;;		_WDT_Set
  6141 ;; This function is called by:
  6142 ;;		_main
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           
  6147                           ;psect for function _Mcu_Initialization
  6148  140E                     _Mcu_Initialization:	
  6149                           
  6150                           ;MCU_B1.c: 32: Fosc_Set();
  6151                           
  6152                           ;incstack = 0
  6153                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  6154  140E  3192  22C8  3194   	fcall	_Fosc_Set
  6155                           
  6156                           ;MCU_B1.c: 34: IO_Set();
  6157  1411  3195  2559  3194   	fcall	_IO_Set
  6158                           
  6159                           ;MCU_B1.c: 36: ;;
  6160                           ;MCU_B1.c: 38: TMR1_Set();
  6161  1414  3193  2386  3194   	fcall	_TMR1_Set
  6162                           
  6163                           ;MCU_B1.c: 40: ADC_Set();
  6164  1417  3192  22E3  3194   	fcall	_ADC_Set
  6165                           
  6166                           ;MCU_B1.c: 42: ;;
  6167                           ;MCU_B1.c: 44: ;;
  6168                           ;MCU_B1.c: 46: IOC_Set();
  6169  141A  3193  237A  3194   	fcall	_IOC_Set
  6170                           
  6171                           ;MCU_B1.c: 48: ;;
  6172                           ;MCU_B1.c: 50: ;;
  6173                           ;MCU_B1.c: 52: WDT_Set();
  6174  141D  3193  2334         	fcall	_WDT_Set
  6175  141F  0008               	return
  6176  1420                     __end_of_Mcu_Initialization:	
  6177                           
  6178                           	psect	text24
  6179  1334                     __ptext24:	
  6180 ;; *************** function _WDT_Set *****************
  6181 ;; Defined at:
  6182 ;;		line 1084 in file "../src/MCU_B1.c"
  6183 ;; Parameters:    Size  Location     Type
  6184 ;;		None
  6185 ;; Auto vars:     Size  Location     Type
  6186 ;;		None
  6187 ;; Return value:  Size  Location     Type
  6188 ;;		None               void
  6189 ;; Registers used:
  6190 ;;		wreg
  6191 ;; Tracked objects:
  6192 ;;		On entry : 0/0
  6193 ;;		On exit  : 0/0
  6194 ;;		Unchanged: 0/0
  6195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6200 ;;Total ram usage:        1 bytes
  6201 ;; Hardware stack levels used:    1
  6202 ;; Hardware stack levels required when called:    5
  6203 ;; This function calls:
  6204 ;;		Nothing
  6205 ;; This function is called by:
  6206 ;;		_Mcu_Initialization
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           
  6211                           ;psect for function _WDT_Set
  6212  1334                     _WDT_Set:	
  6213                           
  6214                           ;MCU_B1.c: 1091: WDTCON = 0b00010111;;
  6215                           
  6216                           ;incstack = 0
  6217                           ; Regs used in _WDT_Set: [wreg]
  6218  1334  3017               	movlw	23
  6219  1335  0021               	movlb	1	; select bank1
  6220  1336  0097               	movwf	23	;volatile
  6221                           
  6222                           ;MCU_B1.c: 1093: WDT.Enable = 1;
  6223  1337  1440               	bsf	_WDT^(0+128),0
  6224                           
  6225                           ;MCU_B1.c: 1094: WDT.Timer = 10;
  6226  1338  300A               	movlw	10
  6227  1339  0020               	movlb	0	; select bank0
  6228  133A  00A0               	movwf	??_WDT_Set
  6229  133B  0820               	movf	??_WDT_Set,w
  6230  133C  0021               	movlb	1	; select bank1
  6231  133D  00C1               	movwf	(_WDT^(0+128)+1)
  6232  133E  0008               	return
  6233  133F                     __end_of_WDT_Set:	
  6234                           
  6235                           	psect	text25
  6236  1386                     __ptext25:	
  6237 ;; *************** function _TMR1_Set *****************
  6238 ;; Defined at:
  6239 ;;		line 200 in file "../src/MCU_B1.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;		None
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;		None
  6244 ;; Return value:  Size  Location     Type
  6245 ;;		None               void
  6246 ;; Registers used:
  6247 ;;		wreg
  6248 ;; Tracked objects:
  6249 ;;		On entry : 0/0
  6250 ;;		On exit  : 0/0
  6251 ;;		Unchanged: 0/0
  6252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6257 ;;Total ram usage:        0 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; Hardware stack levels required when called:    5
  6260 ;; This function calls:
  6261 ;;		Nothing
  6262 ;; This function is called by:
  6263 ;;		_Mcu_Initialization
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           
  6268                           ;psect for function _TMR1_Set
  6269  1386                     _TMR1_Set:	
  6270                           
  6271                           ;MCU_B1.c: 201: T1CON = (0x40 | 0x00 | 0x01);
  6272                           
  6273                           ;incstack = 0
  6274                           ; Regs used in _TMR1_Set: [wreg]
  6275  1386  3041               	movlw	65
  6276  1387  0020               	movlb	0	; select bank0
  6277  1388  0098               	movwf	24	;volatile
  6278                           
  6279                           ;MCU_B1.c: 202: TMR1H = (int)((65536-1480)/256);
  6280  1389  30FA               	movlw	250
  6281  138A  0097               	movwf	23	;volatile
  6282                           
  6283                           ;MCU_B1.c: 203: TMR1L = (int)((65536-1480)%256);
  6284  138B  3038               	movlw	56
  6285  138C  0096               	movwf	22	;volatile
  6286                           
  6287                           ;MCU_B1.c: 204: TMR1IE = 1;
  6288  138D  0021               	movlb	1	; select bank1
  6289  138E  1411               	bsf	17,0	;volatile
  6290                           
  6291                           ;MCU_B1.c: 205: PEIE = 1;
  6292  138F  170B               	bsf	11,6	;volatile
  6293                           
  6294                           ;MCU_B1.c: 206: GIE = 1;
  6295  1390  178B               	bsf	11,7	;volatile
  6296  1391  0008               	return
  6297  1392                     __end_of_TMR1_Set:	
  6298                           
  6299                           	psect	text26
  6300  1559                     __ptext26:	
  6301 ;; *************** function _IO_Set *****************
  6302 ;; Defined at:
  6303 ;;		line 60 in file "../src/MCU_B1.c"
  6304 ;; Parameters:    Size  Location     Type
  6305 ;;		None
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;		None
  6308 ;; Return value:  Size  Location     Type
  6309 ;;		None               void
  6310 ;; Registers used:
  6311 ;;		wreg, status,2
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;Total ram usage:        0 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:    5
  6324 ;; This function calls:
  6325 ;;		Nothing
  6326 ;; This function is called by:
  6327 ;;		_Mcu_Initialization
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           
  6332                           ;psect for function _IO_Set
  6333  1559                     _IO_Set:	
  6334                           
  6335                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  6336                           
  6337                           ;incstack = 0
  6338                           ; Regs used in _IO_Set: [wreg+status,2]
  6339  1559  3077               	movlw	119
  6340  155A  0021               	movlb	1	; select bank1
  6341  155B  008C               	movwf	12	;volatile
  6342                           
  6343                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  6344  155C  3007               	movlw	7
  6345  155D  008D               	movwf	13	;volatile
  6346                           
  6347                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  6348  155E  300C               	movlw	12
  6349  155F  008E               	movwf	14	;volatile
  6350                           
  6351                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  6352  1560  0022               	movlb	2	; select bank2
  6353  1561  018C               	clrf	12	;volatile
  6354                           
  6355                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  6356  1562  3002               	movlw	2
  6357  1563  008D               	movwf	13	;volatile
  6358                           
  6359                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  6360  1564  018E               	clrf	14	;volatile
  6361                           
  6362                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  6363  1565  3022               	movlw	34
  6364  1566  0023               	movlb	3	; select bank3
  6365  1567  008C               	movwf	12	;volatile
  6366                           
  6367                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  6368  1568  018D               	clrf	13	;volatile
  6369                           
  6370                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  6371  1569  018E               	clrf	14	;volatile
  6372                           
  6373                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  6374  156A  3077               	movlw	119
  6375  156B  0020               	movlb	0	; select bank0
  6376  156C  008C               	movwf	12	;volatile
  6377                           
  6378                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  6379  156D  3007               	movlw	7
  6380  156E  008D               	movwf	13	;volatile
  6381                           
  6382                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  6383  156F  300C               	movlw	12
  6384  1570  008E               	movwf	14	;volatile
  6385                           
  6386                           ;MCU_B1.c: 100: WPUB = 0b00000000;;
  6387  1571  0024               	movlb	4	; select bank4
  6388  1572  018D               	clrf	13	;volatile
  6389  1573  0008               	return
  6390  1574                     __end_of_IO_Set:	
  6391                           
  6392                           	psect	text27
  6393  137A                     __ptext27:	
  6394 ;; *************** function _IOC_Set *****************
  6395 ;; Defined at:
  6396 ;;		line 366 in file "../src/MCU_B1.c"
  6397 ;; Parameters:    Size  Location     Type
  6398 ;;		None
  6399 ;; Auto vars:     Size  Location     Type
  6400 ;;		None
  6401 ;; Return value:  Size  Location     Type
  6402 ;;		None               void
  6403 ;; Registers used:
  6404 ;;		wreg, status,2
  6405 ;; Tracked objects:
  6406 ;;		On entry : 0/0
  6407 ;;		On exit  : 0/0
  6408 ;;		Unchanged: 0/0
  6409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6414 ;;Total ram usage:        0 bytes
  6415 ;; Hardware stack levels used:    1
  6416 ;; Hardware stack levels required when called:    5
  6417 ;; This function calls:
  6418 ;;		Nothing
  6419 ;; This function is called by:
  6420 ;;		_Mcu_Initialization
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           
  6425                           ;psect for function _IOC_Set
  6426  137A                     _IOC_Set:	
  6427                           
  6428                           ;MCU_B1.c: 367: WPUB2 = 0;
  6429                           
  6430                           ;incstack = 0
  6431                           ; Regs used in _IOC_Set: [wreg+status,2]
  6432  137A  0024               	movlb	4	; select bank4
  6433  137B  110D               	bcf	13,2	;volatile
  6434                           
  6435                           ;MCU_B1.c: 387: IOCBP = 0b00000100;
  6436  137C  3004               	movlw	4
  6437  137D  0027               	movlb	7	; select bank7
  6438  137E  0094               	movwf	20	;volatile
  6439                           
  6440                           ;MCU_B1.c: 388: IOCBN = 0b00000000;
  6441  137F  0195               	clrf	21	;volatile
  6442                           
  6443                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
  6444  1380  0196               	clrf	22	;volatile
  6445                           
  6446                           ;MCU_B1.c: 394: IOCIE = 1;
  6447  1381  158B               	bsf	11,3	;volatile
  6448                           
  6449                           ;MCU_B1.c: 395: IOCIF = 0;
  6450  1382  100B               	bcf	11,0	;volatile
  6451                           
  6452                           ;MCU_B1.c: 396: PEIE = 1;
  6453  1383  170B               	bsf	11,6	;volatile
  6454                           
  6455                           ;MCU_B1.c: 397: GIE = 1;
  6456  1384  178B               	bsf	11,7	;volatile
  6457  1385  0008               	return
  6458  1386                     __end_of_IOC_Set:	
  6459                           
  6460                           	psect	text28
  6461  12C8                     __ptext28:	
  6462 ;; *************** function _Fosc_Set *****************
  6463 ;; Defined at:
  6464 ;;		line 56 in file "../src/MCU_B1.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;		None
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;		None
  6469 ;; Return value:  Size  Location     Type
  6470 ;;		None               void
  6471 ;; Registers used:
  6472 ;;		wreg
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;Total ram usage:        0 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:    5
  6485 ;; This function calls:
  6486 ;;		Nothing
  6487 ;; This function is called by:
  6488 ;;		_Mcu_Initialization
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           
  6493                           ;psect for function _Fosc_Set
  6494  12C8                     _Fosc_Set:	
  6495                           
  6496                           ;MCU_B1.c: 57: OSCCON = 0x78;
  6497                           
  6498                           ;incstack = 0
  6499                           ; Regs used in _Fosc_Set: [wreg]
  6500  12C8  3078               	movlw	120
  6501  12C9  0021               	movlb	1	; select bank1
  6502  12CA  0099               	movwf	25	;volatile
  6503  12CB  0008               	return
  6504  12CC                     __end_of_Fosc_Set:	
  6505                           
  6506                           	psect	text29
  6507  12E3                     __ptext29:	
  6508 ;; *************** function _ADC_Set *****************
  6509 ;; Defined at:
  6510 ;;		line 420 in file "../src/MCU_B1.c"
  6511 ;; Parameters:    Size  Location     Type
  6512 ;;		None
  6513 ;; Auto vars:     Size  Location     Type
  6514 ;;		None
  6515 ;; Return value:  Size  Location     Type
  6516 ;;		None               void
  6517 ;; Registers used:
  6518 ;;		wreg
  6519 ;; Tracked objects:
  6520 ;;		On entry : 0/0
  6521 ;;		On exit  : 0/0
  6522 ;;		Unchanged: 0/0
  6523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;Total ram usage:        0 bytes
  6529 ;; Hardware stack levels used:    1
  6530 ;; Hardware stack levels required when called:    5
  6531 ;; This function calls:
  6532 ;;		Nothing
  6533 ;; This function is called by:
  6534 ;;		_Mcu_Initialization
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           
  6539                           ;psect for function _ADC_Set
  6540  12E3                     _ADC_Set:	
  6541                           
  6542                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
  6543                           
  6544                           ;incstack = 0
  6545                           ; Regs used in _ADC_Set: [wreg]
  6546  12E3  30F3               	movlw	243
  6547  12E4  0021               	movlb	1	; select bank1
  6548  12E5  009E               	movwf	30	;volatile
  6549                           
  6550                           ;MCU_B1.c: 422: FVRCON = 0xc1;
  6551  12E6  30C1               	movlw	193
  6552  12E7  0022               	movlb	2	; select bank2
  6553  12E8  0097               	movwf	23	;volatile
  6554  12E9  0008               	return
  6555  12EA                     __end_of_ADC_Set:	
  6556                           
  6557                           	psect	text30
  6558  0042                     __ptext30:	
  6559 ;; *************** function _Load_Main *****************
  6560 ;; Defined at:
  6561 ;;		line 39 in file "../src/OverLoad_B1.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;		None
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;  i               2   12[BANK0 ] int 
  6566 ;;  Load_Status     1   11[BANK0 ] unsigned char 
  6567 ;;  error           1   10[BANK0 ] unsigned char 
  6568 ;; Return value:  Size  Location     Type
  6569 ;;		None               void
  6570 ;; Registers used:
  6571 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6572 ;; Tracked objects:
  6573 ;;		On entry : 0/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6578 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;Total ram usage:        6 bytes
  6582 ;; Hardware stack levels used:    1
  6583 ;; Hardware stack levels required when called:    7
  6584 ;; This function calls:
  6585 ;;		___lwdiv
  6586 ;;		___wmul
  6587 ;;		_getAll_DimmerLights_AdjSw
  6588 ;;		_getDimmer_LoadGO
  6589 ;;		_getDimmer_Load_Status
  6590 ;;		_getMain_All_Error_Status
  6591 ;;		_getMain_LightsStatus
  6592 ;;		_getMain_Lights_Count
  6593 ;;		_setLoad_AH_AL_Restore
  6594 ;; This function is called by:
  6595 ;;		_main
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           
  6600                           ;psect for function _Load_Main
  6601  0042                     _Load_Main:	
  6602                           
  6603                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  6604                           
  6605                           ;incstack = 0
  6606                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6607  0042  3000               	movlw	0
  6608  0043  3197  275C  3180   	fcall	_getMain_All_Error_Status
  6609  0046  0020               	movlb	0	; select bank0
  6610  0047  00A8               	movwf	??_Load_Main
  6611  0048  0828               	movf	??_Load_Main,w
  6612  0049  00AA               	movwf	Load_Main@error
  6613                           
  6614                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  6615  004A  01AB               	clrf	Load_Main@Load_Status
  6616                           
  6617                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  6618  004B  0022               	movlb	2	; select bank2
  6619  004C  1C20               	btfss	_Load^(0+256),0
  6620  004D  29E8               	goto	l1294
  6621                           
  6622                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
  6623  004E  3194  2458  3180   	fcall	_getMain_LightsStatus
  6624  0051  3800               	iorlw	0
  6625  0052  1D03               	skipz
  6626  0053  2856               	goto	l7783
  6627                           
  6628                           ;OverLoad_B1.c: 65: Load.GO = 0;
  6629  0054  0022               	movlb	2	; select bank2
  6630  0055  2877               	goto	l7801
  6631  0056                     l7783:	
  6632                           ;OverLoad_B1.c: 66: } else {
  6633                           
  6634                           
  6635                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
  6636  0056  0020               	movlb	0	; select bank0
  6637  0057  08AA               	movf	Load_Main@error,f
  6638  0058  1D03               	skipz
  6639  0059  2874               	goto	l1297
  6640  005A  3196  26A1  3180   	fcall	_getAll_DimmerLights_AdjSw
  6641  005D  3800               	iorlw	0
  6642  005E  1D03               	skipz
  6643  005F  2874               	goto	l1297
  6644                           
  6645                           ;OverLoad_B1.c: 70: Load.GO = 1;
  6646  0060  0022               	movlb	2	; select bank2
  6647  0061  14A0               	bsf	_Load^(0+256),1
  6648                           
  6649                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
  6650  0062  3193  230A  3180   	fcall	_getDimmer_LoadGO
  6651  0065  3A01               	xorlw	1
  6652  0066  1D03               	skipz
  6653  0067  286F               	goto	l1298
  6654                           
  6655                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
  6656  0068  0022               	movlb	2	; select bank2
  6657  0069  1DA0               	btfss	_Load^(0+256),3
  6658  006A  1BA0               	btfsc	_Load^(0+256),7
  6659  006B  2878               	goto	l1296
  6660                           
  6661                           ;OverLoad_B1.c: 74: Load.Run = 1;
  6662  006C  15A0               	bsf	_Load^(0+256),3
  6663                           
  6664                           ;OverLoad_B1.c: 75: Load.Count = 0;
  6665  006D  01C9               	clrf	(_Load^(0+256)+41)
  6666                           
  6667                           ;OverLoad_B1.c: 76: }
  6668                           ;OverLoad_B1.c: 77: } else {
  6669  006E  2878               	goto	l1296
  6670  006F                     l1298:	
  6671                           
  6672                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
  6673  006F  0022               	movlb	2	; select bank2
  6674  0070  1FA0               	btfss	_Load^(0+256),7
  6675  0071  2878               	goto	l1296
  6676                           
  6677                           ;OverLoad_B1.c: 79: Load.OK = 0;
  6678  0072  13A0               	bcf	_Load^(0+256),7
  6679                           
  6680                           ;OverLoad_B1.c: 80: }
  6681                           ;OverLoad_B1.c: 81: }
  6682                           ;OverLoad_B1.c: 82: } else {
  6683  0073  2878               	goto	l1296
  6684  0074                     l1297:	
  6685                           
  6686                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
  6687  0074  0022               	movlb	2	; select bank2
  6688  0075  1CA0               	btfss	_Load^(0+256),1
  6689  0076  2878               	goto	l1296
  6690  0077                     l7801:	
  6691                           
  6692                           ;OverLoad_B1.c: 84: Load.GO = 0;
  6693  0077  10A0               	bcf	_Load^(0+256),1
  6694  0078                     l1296:	
  6695                           
  6696                           ;OverLoad_B1.c: 85: }
  6697                           ;OverLoad_B1.c: 86: }
  6698                           ;OverLoad_B1.c: 88: }
  6699                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
  6700  0078  1CA0               	btfss	_Load^(0+256),1
  6701  0079  29C4               	goto	l1304
  6702                           
  6703                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
  6704  007A  1520               	bsf	_Load^(0+256),2
  6705                           
  6706                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
  6707  007B  1E20               	btfss	_Load^(0+256),4
  6708  007C  29C2               	goto	l1305
  6709                           
  6710                           ;OverLoad_B1.c: 95: Load.Time++;
  6711  007D  3001               	movlw	1
  6712  007E  07A1               	addwf	(_Load^(0+256)+1),f
  6713  007F  3000               	movlw	0
  6714  0080  3DA2               	addwfc	((_Load+1)^(0+256)+1),f
  6715                           
  6716                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
  6717  0081  3000               	movlw	0
  6718  0082  0222               	subwf	((_Load+1)^(0+256)+1),w
  6719  0083  3005               	movlw	5
  6720  0084  1903               	skipnz
  6721  0085  0221               	subwf	(_Load^(0+256)+1),w
  6722  0086  1C03               	skipc
  6723  0087  0008               	return
  6724                           
  6725                           ;OverLoad_B1.c: 97: Load.Time = 0;
  6726  0088  01A1               	clrf	(_Load^(0+256)+1)
  6727  0089  01A2               	clrf	((_Load+1)^(0+256)+1)
  6728                           
  6729                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
  6730  008A  1220               	bcf	_Load^(0+256),4
  6731                           
  6732                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
  6733  008B  3001               	movlw	1
  6734  008C  0020               	movlb	0	; select bank0
  6735  008D  00AC               	movwf	Load_Main@i
  6736  008E  3000               	movlw	0
  6737  008F  00AD               	movwf	Load_Main@i+1
  6738  0090  082D               	movf	Load_Main@i+1,w
  6739  0091  3A80               	xorlw	128
  6740  0092  00A8               	movwf	??_Load_Main
  6741  0093  3080               	movlw	128
  6742  0094  0228               	subwf	??_Load_Main,w
  6743  0095  1D03               	skipz
  6744  0096  2899               	goto	u9475
  6745  0097  3004               	movlw	4
  6746  0098  022C               	subwf	Load_Main@i,w
  6747  0099                     u9475:	
  6748  0099  1803               	btfsc	3,0
  6749  009A  28CD               	goto	l7823
  6750  009B                     l7817:	
  6751                           
  6752                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
  6753  009B  0020               	movlb	0	; select bank0
  6754  009C  352C               	lslf	Load_Main@i,w
  6755  009D  3E2B               	addlw	(_Load+11)& (0+255)
  6756  009E  0086               	movwf	6
  6757  009F  3001               	movlw	1	; select bank2/3
  6758  00A0  0087               	movwf	7
  6759  00A1  3F40               	moviw [0]fsr1
  6760  00A2  00A8               	movwf	??_Load_Main
  6761  00A3  3F41               	moviw [1]fsr1
  6762  00A4  00A9               	movwf	??_Load_Main+1
  6763  00A5  0828               	movf	??_Load_Main,w
  6764  00A6  0022               	movlb	2	; select bank2
  6765  00A7  07A5               	addwf	(_Load^(0+256)+5),f
  6766  00A8  0020               	movlb	0	; select bank0
  6767  00A9  0829               	movf	??_Load_Main+1,w
  6768  00AA  0022               	movlb	2	; select bank2
  6769  00AB  3DA6               	addwfc	((_Load+1)^(0+256)+5),f
  6770                           
  6771                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
  6772  00AC  0020               	movlb	0	; select bank0
  6773  00AD  352C               	lslf	Load_Main@i,w
  6774  00AE  3E35               	addlw	(_Load+21)& (0+255)
  6775  00AF  0086               	movwf	6
  6776  00B0  3001               	movlw	1	; select bank2/3
  6777  00B1  0087               	movwf	7
  6778  00B2  3F40               	moviw [0]fsr1
  6779  00B3  00A8               	movwf	??_Load_Main
  6780  00B4  3F41               	moviw [1]fsr1
  6781  00B5  00A9               	movwf	??_Load_Main+1
  6782  00B6  0828               	movf	??_Load_Main,w
  6783  00B7  0022               	movlb	2	; select bank2
  6784  00B8  07A7               	addwf	(_Load^(0+256)+7),f
  6785  00B9  0020               	movlb	0	; select bank0
  6786  00BA  0829               	movf	??_Load_Main+1,w
  6787  00BB  0022               	movlb	2	; select bank2
  6788  00BC  3DA8               	addwfc	((_Load+1)^(0+256)+7),f
  6789  00BD  3001               	movlw	1
  6790  00BE  0020               	movlb	0	; select bank0
  6791  00BF  07AC               	addwf	Load_Main@i,f
  6792  00C0  3000               	movlw	0
  6793  00C1  3DAD               	addwfc	Load_Main@i+1,f
  6794  00C2  082D               	movf	Load_Main@i+1,w
  6795  00C3  3A80               	xorlw	128
  6796  00C4  00A8               	movwf	??_Load_Main
  6797  00C5  3080               	movlw	128
  6798  00C6  0228               	subwf	??_Load_Main,w
  6799  00C7  1D03               	skipz
  6800  00C8  28CB               	goto	u9485
  6801  00C9  3004               	movlw	4
  6802  00CA  022C               	subwf	Load_Main@i,w
  6803  00CB                     u9485:	
  6804  00CB  1C03               	skipc
  6805  00CC  289B               	goto	l7817
  6806  00CD                     l7823:	
  6807                           
  6808                           ;OverLoad_B1.c: 103: }
  6809                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
  6810  00CD  3003               	movlw	3
  6811  00CE  0020               	movlb	0	; select bank0
  6812  00CF  00A0               	movwf	___lwdiv@divisor
  6813  00D0  3000               	movlw	0
  6814  00D1  00A1               	movwf	___lwdiv@divisor+1
  6815  00D2  0022               	movlb	2	; select bank2
  6816  00D3  0826               	movf	((_Load+1)^(0+256)+5),w
  6817  00D4  0020               	movlb	0	; select bank0
  6818  00D5  01A3               	clrf	___lwdiv@dividend+1
  6819  00D6  07A3               	addwf	___lwdiv@dividend+1,f
  6820  00D7  0022               	movlb	2	; select bank2
  6821  00D8  0825               	movf	(_Load^(0+256)+5),w
  6822  00D9  0020               	movlb	0	; select bank0
  6823  00DA  01A2               	clrf	___lwdiv@dividend
  6824  00DB  07A2               	addwf	___lwdiv@dividend,f
  6825  00DC  3197  278F  3180   	fcall	___lwdiv
  6826  00DF  0020               	movlb	0	; select bank0
  6827  00E0  0821               	movf	?___lwdiv+1,w
  6828  00E1  0022               	movlb	2	; select bank2
  6829  00E2  01A6               	clrf	((_Load+1)^(0+256)+5)
  6830  00E3  07A6               	addwf	((_Load+1)^(0+256)+5),f
  6831  00E4  0020               	movlb	0	; select bank0
  6832  00E5  0820               	movf	?___lwdiv,w
  6833  00E6  0022               	movlb	2	; select bank2
  6834  00E7  01A5               	clrf	(_Load^(0+256)+5)
  6835  00E8  07A5               	addwf	(_Load^(0+256)+5),f
  6836                           
  6837                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
  6838  00E9  3003               	movlw	3
  6839  00EA  0020               	movlb	0	; select bank0
  6840  00EB  00A0               	movwf	___lwdiv@divisor
  6841  00EC  3000               	movlw	0
  6842  00ED  00A1               	movwf	___lwdiv@divisor+1
  6843  00EE  0022               	movlb	2	; select bank2
  6844  00EF  0828               	movf	((_Load+1)^(0+256)+7),w
  6845  00F0  0020               	movlb	0	; select bank0
  6846  00F1  01A3               	clrf	___lwdiv@dividend+1
  6847  00F2  07A3               	addwf	___lwdiv@dividend+1,f
  6848  00F3  0022               	movlb	2	; select bank2
  6849  00F4  0827               	movf	(_Load^(0+256)+7),w
  6850  00F5  0020               	movlb	0	; select bank0
  6851  00F6  01A2               	clrf	___lwdiv@dividend
  6852  00F7  07A2               	addwf	___lwdiv@dividend,f
  6853  00F8  3197  278F  3180   	fcall	___lwdiv
  6854  00FB  0020               	movlb	0	; select bank0
  6855  00FC  0821               	movf	?___lwdiv+1,w
  6856  00FD  0022               	movlb	2	; select bank2
  6857  00FE  01A8               	clrf	((_Load+1)^(0+256)+7)
  6858  00FF  07A8               	addwf	((_Load+1)^(0+256)+7),f
  6859  0100  0020               	movlb	0	; select bank0
  6860  0101  0820               	movf	?___lwdiv,w
  6861  0102  0022               	movlb	2	; select bank2
  6862  0103  01A7               	clrf	(_Load^(0+256)+7)
  6863  0104  07A7               	addwf	(_Load^(0+256)+7),f
  6864                           
  6865                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
  6866  0105  3195  2574  3180   	fcall	_setLoad_AH_AL_Restore
  6867                           
  6868                           ;OverLoad_B1.c: 108: if (Load.ADH > Load.ADL) {
  6869  0108  0022               	movlb	2	; select bank2
  6870  0109  0826               	movf	((_Load+1)^(0+256)+5),w
  6871  010A  0228               	subwf	((_Load+1)^(0+256)+7),w
  6872  010B  1D03               	skipz
  6873  010C  290F               	goto	u9495
  6874  010D  0825               	movf	(_Load^(0+256)+5),w
  6875  010E  0227               	subwf	(_Load^(0+256)+7),w
  6876  010F                     u9495:	
  6877  010F  1803               	skipnc
  6878  0110  0008               	return
  6879                           
  6880                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
  6881  0111  3005               	movlw	5
  6882  0112  3E20               	addlw	_Load& (0+255)
  6883  0113  0086               	movwf	6
  6884  0114  3001               	movlw	1	; select bank2/3
  6885  0115  0087               	movwf	7
  6886  0116  0927               	comf	(_Load^(0+256)+7),w
  6887  0117  0020               	movlb	0	; select bank0
  6888  0118  00A8               	movwf	??_Load_Main
  6889  0119  0022               	movlb	2	; select bank2
  6890  011A  0928               	comf	((_Load+1)^(0+256)+7),w
  6891  011B  0020               	movlb	0	; select bank0
  6892  011C  00A9               	movwf	??_Load_Main+1
  6893  011D  0AA8               	incf	??_Load_Main,f
  6894  011E  1903               	skipnz
  6895  011F  0AA9               	incf	??_Load_Main+1,f
  6896  0120  3F40               	moviw [0]fsr1
  6897  0121  0728               	addwf	??_Load_Main,w
  6898  0122  0022               	movlb	2	; select bank2
  6899  0123  00BF               	movwf	(_Load^(0+256)+31)
  6900  0124  3F41               	moviw [1]fsr1
  6901  0125  0020               	movlb	0	; select bank0
  6902  0126  3D29               	addwfc	??_Load_Main+1,w
  6903  0127  0022               	movlb	2	; select bank2
  6904  0128  00C0               	movwf	(_Load^(0+256)+32)
  6905                           
  6906                           ;OverLoad_B1.c: 110: Load.ADH = 0;
  6907  0129  01A5               	clrf	(_Load^(0+256)+5)
  6908  012A  01A6               	clrf	((_Load+1)^(0+256)+5)
  6909                           
  6910                           ;OverLoad_B1.c: 111: Load.ADL = 0;
  6911  012B  01A7               	clrf	(_Load^(0+256)+7)
  6912  012C  01A8               	clrf	((_Load+1)^(0+256)+7)
  6913                           
  6914                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
  6915  012D  1DA0               	btfss	_Load^(0+256),3
  6916  012E  298E               	goto	l7863
  6917                           
  6918                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
  6919  012F  3002               	movlw	2
  6920  0130  0249               	subwf	(_Load^(0+256)+41),w
  6921  0131  1803               	skipnc
  6922  0132  298E               	goto	l7863
  6923                           
  6924                           ;OverLoad_B1.c: 115: Load.Count++;
  6925  0133  3001               	movlw	1
  6926  0134  0020               	movlb	0	; select bank0
  6927  0135  00A8               	movwf	??_Load_Main
  6928  0136  0828               	movf	??_Load_Main,w
  6929  0137  0022               	movlb	2	; select bank2
  6930  0138  07C9               	addwf	(_Load^(0+256)+41),f
  6931                           
  6932                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
  6933  0139  3193  2312  3180   	fcall	_getDimmer_Load_Status
  6934  013C  0020               	movlb	0	; select bank0
  6935  013D  00A8               	movwf	??_Load_Main
  6936  013E  0828               	movf	??_Load_Main,w
  6937  013F  00AB               	movwf	Load_Main@Load_Status
  6938                           
  6939                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
  6940  0140  3194  24A6  3180   	fcall	_getMain_Lights_Count
  6941  0143  0020               	movlb	0	; select bank0
  6942  0144  00A8               	movwf	??_Load_Main
  6943  0145  0828               	movf	??_Load_Main,w
  6944  0146  0022               	movlb	2	; select bank2
  6945  0147  00CC               	movwf	(_Load^(0+256)+44)
  6946                           
  6947                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
  6948  0148  0849               	movf	(_Load^(0+256)+41),w
  6949  0149  3A01               	xorlw	1
  6950  014A  1D03               	skipz
  6951  014B  2956               	goto	l7849
  6952                           
  6953                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
  6954  014C  3002               	movlw	2
  6955  014D  0020               	movlb	0	; select bank0
  6956  014E  00A8               	movwf	??_Load_Main
  6957  014F  0828               	movf	??_Load_Main,w
  6958  0150  0022               	movlb	2	; select bank2
  6959  0151  00CB               	movwf	(_Load^(0+256)+43)
  6960                           
  6961                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*50);
  6962  0152  30E8               	movlw	232
  6963  0153  00C5               	movwf	(_Load^(0+256)+37)
  6964  0154  3003               	movlw	3
  6965  0155  2961               	goto	L4
  6966  0156                     l7849:	
  6967                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
  6968                           
  6969  0156  0849               	movf	(_Load^(0+256)+41),w
  6970  0157  3A02               	xorlw	2
  6971  0158  1D03               	skipz
  6972  0159  298E               	goto	l7863
  6973                           
  6974                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
  6975  015A  084C               	movf	(_Load^(0+256)+44),w
  6976  015B  3A01               	xorlw	1
  6977  015C  1D03               	skipz
  6978  015D  2963               	goto	l7855
  6979                           
  6980                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.1*50);
  6981  015E  3037               	movlw	55
  6982  015F  00C5               	movwf	(_Load^(0+256)+37)
  6983  0160  3000               	movlw	0
  6984  0161                     L4:	
  6985  0161  00C6               	movwf	(_Load^(0+256)+38)
  6986                           
  6987                           ;OverLoad_B1.c: 124: } else {
  6988  0162  298E               	goto	l7863
  6989  0163                     l7855:	
  6990                           
  6991                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
  6992  0163  0020               	movlb	0	; select bank0
  6993  0164  08AB               	movf	Load_Main@Load_Status,f
  6994  0165  1D03               	skipz
  6995  0166  2982               	goto	l7859
  6996                           
  6997                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
  6998  0167  0022               	movlb	2	; select bank2
  6999  0168  084C               	movf	(_Load^(0+256)+44),w
  7000  0169  0020               	movlb	0	; select bank0
  7001  016A  00A8               	movwf	??_Load_Main
  7002  016B  01A9               	clrf	??_Load_Main+1
  7003  016C  0828               	movf	??_Load_Main,w
  7004  016D  00A0               	movwf	___wmul@multiplier
  7005  016E  0829               	movf	??_Load_Main+1,w
  7006  016F  00A1               	movwf	___wmul@multiplier+1
  7007  0170  3037               	movlw	55
  7008  0171  00A2               	movwf	___wmul@multiplicand
  7009  0172  3000               	movlw	0
  7010  0173  00A3               	movwf	___wmul@multiplicand+1
  7011  0174  3195  2590  3180   	fcall	___wmul
  7012  0177  0020               	movlb	0	; select bank0
  7013  0178  0821               	movf	?___wmul+1,w
  7014  0179  0022               	movlb	2	; select bank2
  7015  017A  01C6               	clrf	((_Load+1)^(0+256)+37)
  7016  017B  07C6               	addwf	((_Load+1)^(0+256)+37),f
  7017  017C  0020               	movlb	0	; select bank0
  7018  017D  0820               	movf	?___wmul,w
  7019  017E  0022               	movlb	2	; select bank2
  7020  017F  01C5               	clrf	(_Load^(0+256)+37)
  7021  0180  07C5               	addwf	(_Load^(0+256)+37),f
  7022                           
  7023                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
  7024  0181  298E               	goto	l7863
  7025  0182                     l7859:	
  7026  0182  0020               	movlb	0	; select bank0
  7027  0183  082B               	movf	Load_Main@Load_Status,w
  7028  0184  3A01               	xorlw	1
  7029  0185  1D03               	skipz
  7030  0186  298E               	goto	l7863
  7031                           
  7032                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
  7033  0187  0022               	movlb	2	; select bank2
  7034  0188  0829               	movf	(_Load^(0+256)+9),w
  7035  0189  3E37               	addlw	55
  7036  018A  00C5               	movwf	(_Load^(0+256)+37)
  7037  018B  3000               	movlw	0
  7038  018C  3D2A               	addwfc	((_Load+1)^(0+256)+9),w
  7039  018D  00C6               	movwf	((_Load+1)^(0+256)+37)
  7040  018E                     l7863:	
  7041                           
  7042                           ;OverLoad_B1.c: 129: }
  7043                           ;OverLoad_B1.c: 130: }
  7044                           ;OverLoad_B1.c: 131: }
  7045                           ;OverLoad_B1.c: 132: }
  7046                           ;OverLoad_B1.c: 133: }
  7047                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
  7048  018E  0022               	movlb	2	; select bank2
  7049  018F  0846               	movf	((_Load+1)^(0+256)+37),w
  7050  0190  0240               	subwf	((_Load+1)^(0+256)+31),w
  7051  0191  1D03               	skipz
  7052  0192  2995               	goto	u9575
  7053  0193  0845               	movf	(_Load^(0+256)+37),w
  7054  0194  023F               	subwf	(_Load^(0+256)+31),w
  7055  0195                     u9575:	
  7056  0195  1C03               	skipc
  7057  0196  29A4               	goto	l7873
  7058                           
  7059                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
  7060  0197  3001               	movlw	1
  7061  0198  0020               	movlb	0	; select bank0
  7062  0199  00A8               	movwf	??_Load_Main
  7063  019A  0828               	movf	??_Load_Main,w
  7064  019B  0022               	movlb	2	; select bank2
  7065  019C  07CA               	addwf	(_Load^(0+256)+42),f
  7066                           
  7067                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
  7068  019D  084A               	movf	(_Load^(0+256)+42),w
  7069  019E  024B               	subwf	(_Load^(0+256)+43),w
  7070  019F  1803               	skipnc
  7071  01A0  0008               	return
  7072                           
  7073                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
  7074  01A1  01CA               	clrf	(_Load^(0+256)+42)
  7075                           
  7076                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
  7077  01A2  16A0               	bsf	_Load^(0+256),5
  7078                           
  7079                           ;OverLoad_B1.c: 161: }
  7080                           ;OverLoad_B1.c: 162: } else {
  7081  01A3  0008               	return
  7082  01A4                     l7873:	
  7083                           
  7084                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
  7085  01A4  01CA               	clrf	(_Load^(0+256)+42)
  7086                           
  7087                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
  7088  01A5  1DA0               	btfss	_Load^(0+256),3
  7089  01A6  0008               	return
  7090                           
  7091                           ;OverLoad_B1.c: 165: Load.SafeCount++;
  7092  01A7  3001               	movlw	1
  7093  01A8  0020               	movlb	0	; select bank0
  7094  01A9  00A8               	movwf	??_Load_Main
  7095  01AA  0828               	movf	??_Load_Main,w
  7096  01AB  0022               	movlb	2	; select bank2
  7097  01AC  07CD               	addwf	(_Load^(0+256)+45),f
  7098                           
  7099                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
  7100  01AD  3003               	movlw	3
  7101  01AE  024D               	subwf	(_Load^(0+256)+45),w
  7102  01AF  1C03               	skipc
  7103  01B0  0008               	return
  7104                           
  7105                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
  7106  01B1  01CD               	clrf	(_Load^(0+256)+45)
  7107                           
  7108                           ;OverLoad_B1.c: 168: Load.OK = 1;
  7109  01B2  17A0               	bsf	_Load^(0+256),7
  7110                           
  7111                           ;OverLoad_B1.c: 169: Load.Run = 0;
  7112  01B3  11A0               	bcf	_Load^(0+256),3
  7113                           
  7114                           ;OverLoad_B1.c: 170: Load.Count = 0;
  7115  01B4  01C9               	clrf	(_Load^(0+256)+41)
  7116                           
  7117                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
  7118  01B5  0840               	movf	((_Load+1)^(0+256)+31),w
  7119  01B6  01AA               	clrf	((_Load+1)^(0+256)+9)
  7120  01B7  07AA               	addwf	((_Load+1)^(0+256)+9),f
  7121  01B8  083F               	movf	(_Load^(0+256)+31),w
  7122  01B9  01A9               	clrf	(_Load^(0+256)+9)
  7123  01BA  07A9               	addwf	(_Load^(0+256)+9),f
  7124                           
  7125                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
  7126  01BB  3003               	movlw	3
  7127  01BC  0020               	movlb	0	; select bank0
  7128  01BD  00A8               	movwf	??_Load_Main
  7129  01BE  0828               	movf	??_Load_Main,w
  7130  01BF  0022               	movlb	2	; select bank2
  7131  01C0  00CB               	movwf	(_Load^(0+256)+43)
  7132                           
  7133                           ;OverLoad_B1.c: 175: }
  7134                           ;OverLoad_B1.c: 176: }
  7135                           ;OverLoad_B1.c: 199: }
  7136                           ;OverLoad_B1.c: 200: }
  7137                           ;OverLoad_B1.c: 201: }
  7138                           ;OverLoad_B1.c: 202: } else {
  7139  01C1  0008               	return
  7140  01C2                     l1305:	
  7141                           
  7142                           ;OverLoad_B1.c: 203: Load.ADtoGO = 1;
  7143  01C2  1620               	bsf	_Load^(0+256),4
  7144                           
  7145                           ;OverLoad_B1.c: 204: }
  7146                           ;OverLoad_B1.c: 205: } else {
  7147  01C3  0008               	return
  7148  01C4                     l1304:	
  7149                           
  7150                           ;OverLoad_B1.c: 207: if (Load.LightsON == 1) {
  7151  01C4  1D20               	btfss	_Load^(0+256),2
  7152  01C5  29D7               	goto	l7911
  7153                           
  7154                           ;OverLoad_B1.c: 208: Load.LightsON = 0;
  7155  01C6  1120               	bcf	_Load^(0+256),2
  7156                           
  7157                           ;OverLoad_B1.c: 210: Load.ADtoGO = 0;
  7158  01C7  1220               	bcf	_Load^(0+256),4
  7159                           
  7160                           ;OverLoad_B1.c: 211: Load.Time = 0;
  7161  01C8  01A1               	clrf	(_Load^(0+256)+1)
  7162  01C9  01A2               	clrf	((_Load+1)^(0+256)+1)
  7163                           
  7164                           ;OverLoad_B1.c: 212: setLoad_AH_AL_Restore();
  7165  01CA  3195  2574  3180   	fcall	_setLoad_AH_AL_Restore
  7166                           
  7167                           ;OverLoad_B1.c: 214: Load.ErrorCount = 0;
  7168  01CD  0022               	movlb	2	; select bank2
  7169  01CE  01CA               	clrf	(_Load^(0+256)+42)
  7170                           
  7171                           ;OverLoad_B1.c: 215: Load.SafeCount = 0;
  7172  01CF  01CD               	clrf	(_Load^(0+256)+45)
  7173                           
  7174                           ;OverLoad_B1.c: 217: Load.ADH = 0;
  7175  01D0  01A5               	clrf	(_Load^(0+256)+5)
  7176  01D1  01A6               	clrf	((_Load+1)^(0+256)+5)
  7177                           
  7178                           ;OverLoad_B1.c: 218: Load.ADL = 0;
  7179  01D2  01A7               	clrf	(_Load^(0+256)+7)
  7180  01D3  01A8               	clrf	((_Load+1)^(0+256)+7)
  7181                           
  7182                           ;OverLoad_B1.c: 224: Load.Run = 0;
  7183  01D4  11A0               	bcf	_Load^(0+256),3
  7184                           
  7185                           ;OverLoad_B1.c: 225: Load.Count = 0;
  7186  01D5  01C9               	clrf	(_Load^(0+256)+41)
  7187                           
  7188                           ;OverLoad_B1.c: 226: Load.OK = 0;
  7189  01D6  13A0               	bcf	_Load^(0+256),7
  7190  01D7                     l7911:	
  7191                           
  7192                           ;OverLoad_B1.c: 248: }
  7193                           ;OverLoad_B1.c: 249: if (Load.ERROR == 1) {
  7194  01D7  1EA0               	btfss	_Load^(0+256),5
  7195  01D8  0008               	return
  7196                           
  7197                           ;OverLoad_B1.c: 250: Load.ErrorTime++;
  7198  01D9  3001               	movlw	1
  7199  01DA  07A3               	addwf	(_Load^(0+256)+3),f
  7200  01DB  3000               	movlw	0
  7201  01DC  3DA4               	addwfc	((_Load+1)^(0+256)+3),f
  7202                           
  7203                           ;OverLoad_B1.c: 251: if (Load.ErrorTime >= 1000) {
  7204  01DD  3003               	movlw	3
  7205  01DE  0224               	subwf	((_Load+1)^(0+256)+3),w
  7206  01DF  30E8               	movlw	232
  7207  01E0  1903               	skipnz
  7208  01E1  0223               	subwf	(_Load^(0+256)+3),w
  7209  01E2  1C03               	skipc
  7210  01E3  0008               	return
  7211                           
  7212                           ;OverLoad_B1.c: 252: Load.ErrorTime = 0;
  7213  01E4  01A3               	clrf	(_Load^(0+256)+3)
  7214  01E5  01A4               	clrf	((_Load+1)^(0+256)+3)
  7215                           
  7216                           ;OverLoad_B1.c: 253: Load.ERROR = 0;
  7217  01E6  12A0               	bcf	_Load^(0+256),5
  7218                           
  7219                           ;OverLoad_B1.c: 254: }
  7220                           ;OverLoad_B1.c: 255: }
  7221                           ;OverLoad_B1.c: 256: }
  7222                           ;OverLoad_B1.c: 257: } else {
  7223  01E7  0008               	return
  7224  01E8                     l1294:	
  7225                           
  7226                           ;OverLoad_B1.c: 258: if (myMain.PowerON == 1) {
  7227  01E8  0021               	movlb	1	; select bank1
  7228  01E9  1C20               	btfss	_myMain^(0+128),0
  7229  01EA  0008               	return
  7230                           
  7231                           ;OverLoad_B1.c: 259: Load.Enable = 1;
  7232  01EB  0022               	movlb	2	; select bank2
  7233  01EC  1420               	bsf	_Load^(0+256),0
  7234  01ED  0008               	return
  7235  01EE                     __end_of_Load_Main:	
  7236                           
  7237                           	psect	text31
  7238  14A6                     __ptext31:	
  7239 ;; *************** function _getMain_Lights_Count *****************
  7240 ;; Defined at:
  7241 ;;		line 467 in file "../src/Main_B1.c"
  7242 ;; Parameters:    Size  Location     Type
  7243 ;;		None
  7244 ;; Auto vars:     Size  Location     Type
  7245 ;;  status2         1    2[BANK0 ] unsigned char 
  7246 ;;  status1         1    1[BANK0 ] unsigned char 
  7247 ;;  count           1    0[BANK0 ] unsigned char 
  7248 ;; Return value:  Size  Location     Type
  7249 ;;                  1    wreg      unsigned char 
  7250 ;; Registers used:
  7251 ;;		wreg, status,2, status,0
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7258 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7260 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7261 ;;Total ram usage:        3 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; Hardware stack levels required when called:    5
  7264 ;; This function calls:
  7265 ;;		Nothing
  7266 ;; This function is called by:
  7267 ;;		_Load_Main
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           
  7272                           ;psect for function _getMain_Lights_Count
  7273  14A6                     _getMain_Lights_Count:	
  7274                           
  7275                           ;Main_B1.c: 468: char count = 0;
  7276                           
  7277                           ;incstack = 0
  7278                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  7279  14A6  0020               	movlb	0	; select bank0
  7280  14A7  01A0               	clrf	getMain_Lights_Count@count
  7281                           
  7282                           ;Main_B1.c: 472: char status1 = 0;
  7283  14A8  01A1               	clrf	getMain_Lights_Count@status1
  7284                           
  7285                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
  7286  14A9  3000               	movlw	0
  7287  14AA  0022               	movlb	2	; select bank2
  7288  14AB  194F               	btfsc	(_DimmerLights1^(0+256)+1),2
  7289  14AC  3001               	movlw	1
  7290  14AD  0020               	movlb	0	; select bank0
  7291  14AE  00A1               	movwf	getMain_Lights_Count@status1
  7292                           
  7293                           ;Main_B1.c: 476: char status2 = 0;
  7294  14AF  01A2               	clrf	getMain_Lights_Count@status2
  7295                           
  7296                           ;Main_B1.c: 477: status2 = DimmerLights2.StatusFlag == 1 ? 1 : 0;
  7297  14B0  3000               	movlw	0
  7298  14B1  0022               	movlb	2	; select bank2
  7299  14B2  1960               	btfsc	(_DimmerLights2^(0+256)+1),2
  7300  14B3  3001               	movlw	1
  7301  14B4  0020               	movlb	0	; select bank0
  7302  14B5  00A2               	movwf	getMain_Lights_Count@status2
  7303                           
  7304                           ;Main_B1.c: 501: return count = (status1 + status2);
  7305  14B6  0821               	movf	getMain_Lights_Count@status1,w
  7306  14B7  0722               	addwf	getMain_Lights_Count@status2,w
  7307  14B8  00A0               	movwf	getMain_Lights_Count@count
  7308  14B9  0008               	return
  7309  14BA                     __end_of_getMain_Lights_Count:	
  7310                           
  7311                           	psect	text32
  7312  1312                     __ptext32:	
  7313 ;; *************** function _getDimmer_Load_Status *****************
  7314 ;; Defined at:
  7315 ;;		line 896 in file "../src/Dimmer_B1.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;		None
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;  status          1    0[BANK0 ] unsigned char 
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  1    wreg      unsigned char 
  7322 ;; Registers used:
  7323 ;;		wreg, status,2
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7333 ;;Total ram usage:        1 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; Hardware stack levels required when called:    5
  7336 ;; This function calls:
  7337 ;;		Nothing
  7338 ;; This function is called by:
  7339 ;;		_Load_Main
  7340 ;; This function uses a non-reentrant model
  7341 ;;
  7342                           
  7343                           
  7344                           ;psect for function _getDimmer_Load_Status
  7345  1312                     _getDimmer_Load_Status:	
  7346                           
  7347                           ;Dimmer_B1.c: 897: char status = Dimmer.Load_Status == 1 ? 1 : 0;
  7348                           
  7349                           ;incstack = 0
  7350                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
  7351  1312  3000               	movlw	0
  7352  1313  0021               	movlb	1	; select bank1
  7353  1314  19BA               	btfsc	_Dimmer^(0+128),3	;volatile
  7354  1315  3001               	movlw	1
  7355  1316  0020               	movlb	0	; select bank0
  7356  1317  00A0               	movwf	getDimmer_Load_Status@status
  7357                           
  7358                           ;Dimmer_B1.c: 898: return status;
  7359  1318  0820               	movf	getDimmer_Load_Status@status,w
  7360  1319  0008               	return
  7361  131A                     __end_of_getDimmer_Load_Status:	
  7362                           
  7363                           	psect	text33
  7364  130A                     __ptext33:	
  7365 ;; *************** function _getDimmer_LoadGO *****************
  7366 ;; Defined at:
  7367 ;;		line 631 in file "../src/Dimmer_B1.c"
  7368 ;; Parameters:    Size  Location     Type
  7369 ;;		None
  7370 ;; Auto vars:     Size  Location     Type
  7371 ;;  loadgo          1    0[BANK0 ] unsigned char 
  7372 ;; Return value:  Size  Location     Type
  7373 ;;                  1    wreg      unsigned char 
  7374 ;; Registers used:
  7375 ;;		wreg, status,2
  7376 ;; Tracked objects:
  7377 ;;		On entry : 0/0
  7378 ;;		On exit  : 0/0
  7379 ;;		Unchanged: 0/0
  7380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7382 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7384 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7385 ;;Total ram usage:        1 bytes
  7386 ;; Hardware stack levels used:    1
  7387 ;; Hardware stack levels required when called:    5
  7388 ;; This function calls:
  7389 ;;		Nothing
  7390 ;; This function is called by:
  7391 ;;		_Load_Main
  7392 ;; This function uses a non-reentrant model
  7393 ;;
  7394                           
  7395                           
  7396                           ;psect for function _getDimmer_LoadGO
  7397  130A                     _getDimmer_LoadGO:	
  7398                           
  7399                           ;Dimmer_B1.c: 632: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
  7400                           
  7401                           ;incstack = 0
  7402                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
  7403  130A  3000               	movlw	0
  7404  130B  0021               	movlb	1	; select bank1
  7405  130C  193A               	btfsc	_Dimmer^(0+128),2	;volatile
  7406  130D  3001               	movlw	1
  7407  130E  0020               	movlb	0	; select bank0
  7408  130F  00A0               	movwf	getDimmer_LoadGO@loadgo
  7409                           
  7410                           ;Dimmer_B1.c: 633: return loadgo;
  7411  1310  0820               	movf	getDimmer_LoadGO@loadgo,w
  7412  1311  0008               	return
  7413  1312                     __end_of_getDimmer_LoadGO:	
  7414                           
  7415                           	psect	text34
  7416  16A1                     __ptext34:	
  7417 ;; *************** function _getAll_DimmerLights_AdjSw *****************
  7418 ;; Defined at:
  7419 ;;		line 840 in file "../src/Dimmer_B1.c"
  7420 ;; Parameters:    Size  Location     Type
  7421 ;;		None
  7422 ;; Auto vars:     Size  Location     Type
  7423 ;;  i               2    4[BANK0 ] int 
  7424 ;;  adjsw           1    6[BANK0 ] unsigned char 
  7425 ;;  count           1    3[BANK0 ] unsigned char 
  7426 ;; Return value:  Size  Location     Type
  7427 ;;                  1    wreg      unsigned char 
  7428 ;; Registers used:
  7429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7436 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;Total ram usage:        5 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    6
  7442 ;; This function calls:
  7443 ;;		_DimmerLightsPointSelect
  7444 ;; This function is called by:
  7445 ;;		_Load_Main
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           
  7450                           ;psect for function _getAll_DimmerLights_AdjSw
  7451  16A1                     _getAll_DimmerLights_AdjSw:	
  7452                           
  7453                           ;Dimmer_B1.c: 841: char count = 2;
  7454                           
  7455                           ;incstack = 0
  7456                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  7457  16A1  3002               	movlw	2
  7458  16A2  0020               	movlb	0	; select bank0
  7459  16A3  00A2               	movwf	??_getAll_DimmerLights_AdjSw
  7460  16A4  0822               	movf	??_getAll_DimmerLights_AdjSw,w
  7461  16A5  00A3               	movwf	getAll_DimmerLights_AdjSw@count
  7462                           
  7463                           ;Dimmer_B1.c: 842: char adjsw = 0;
  7464  16A6  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
  7465                           
  7466                           ;Dimmer_B1.c: 844: for (int i = 0; i < count; i++) {
  7467  16A7  01A4               	clrf	getAll_DimmerLights_AdjSw@i
  7468  16A8  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
  7469  16A9                     l7181:	
  7470  16A9  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
  7471  16AA  3A80               	xorlw	128
  7472  16AB  00A2               	movwf	??_getAll_DimmerLights_AdjSw
  7473  16AC  3080               	movlw	128
  7474  16AD  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
  7475  16AE  1D03               	skipz
  7476  16AF  2EB2               	goto	u8395
  7477  16B0  0823               	movf	getAll_DimmerLights_AdjSw@count,w
  7478  16B1  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
  7479  16B2                     u8395:	
  7480  16B2  1803               	btfsc	3,0
  7481  16B3  2ECB               	goto	l7183
  7482                           
  7483                           ;Dimmer_B1.c: 845: DimmerLightsPointSelect(i + 1);
  7484  16B4  0020               	movlb	0	; select bank0
  7485  16B5  0824               	movf	getAll_DimmerLights_AdjSw@i,w
  7486  16B6  3E01               	addlw	1
  7487  16B7  3194  2445  3196   	fcall	_DimmerLightsPointSelect
  7488                           
  7489                           ;Dimmer_B1.c: 846: if (adjsw == 0) {
  7490  16BA  0020               	movlb	0	; select bank0
  7491  16BB  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
  7492  16BC  1D03               	skipz
  7493  16BD  2EC6               	goto	l7179
  7494                           
  7495                           ;Dimmer_B1.c: 847: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
  7496  16BE  0A6F               	incf	_DimmerLights,w
  7497  16BF  0086               	movwf	6
  7498  16C0  3001               	movlw	1	; select bank2/3
  7499  16C1  0087               	movwf	7
  7500  16C2  3000               	movlw	0
  7501  16C3  1B01               	btfsc	1,6
  7502  16C4  3001               	movlw	1
  7503  16C5  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
  7504  16C6                     l7179:	
  7505  16C6  3001               	movlw	1
  7506  16C7  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
  7507  16C8  3000               	movlw	0
  7508  16C9  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
  7509  16CA  2EA9               	goto	l7181
  7510  16CB                     l7183:	
  7511                           
  7512                           ;Dimmer_B1.c: 848: }
  7513                           ;Dimmer_B1.c: 849: }
  7514                           ;Dimmer_B1.c: 850: return adjsw;
  7515  16CB  0020               	movlb	0	; select bank0
  7516  16CC  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
  7517  16CD  0008               	return
  7518  16CE                     __end_of_getAll_DimmerLights_AdjSw:	
  7519                           
  7520                           	psect	text35
  7521  1590                     __ptext35:	
  7522 ;; *************** function ___wmul *****************
  7523 ;; Defined at:
  7524 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7527 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7528 ;; Auto vars:     Size  Location     Type
  7529 ;;  product         2    4[BANK0 ] unsigned int 
  7530 ;; Return value:  Size  Location     Type
  7531 ;;                  2    0[BANK0 ] unsigned int 
  7532 ;; Registers used:
  7533 ;;		wreg, status,2, status,0
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7539 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7543 ;;Total ram usage:        6 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    5
  7546 ;; This function calls:
  7547 ;;		Nothing
  7548 ;; This function is called by:
  7549 ;;		_Load_Main
  7550 ;; This function uses a non-reentrant model
  7551 ;;
  7552                           
  7553                           
  7554                           ;psect for function ___wmul
  7555  1590                     ___wmul:	
  7556                           
  7557                           ;incstack = 0
  7558                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7559  1590  0020               	movlb	0	; select bank0
  7560  1591  01A4               	clrf	___wmul@product
  7561  1592  01A5               	clrf	___wmul@product+1
  7562  1593                     l7493:	
  7563  1593  1C20               	btfss	___wmul@multiplier,0
  7564  1594  2D99               	goto	l1996
  7565  1595  0822               	movf	___wmul@multiplicand,w
  7566  1596  07A4               	addwf	___wmul@product,f
  7567  1597  0823               	movf	___wmul@multiplicand+1,w
  7568  1598  3DA5               	addwfc	___wmul@product+1,f
  7569  1599                     l1996:	
  7570  1599  3001               	movlw	1
  7571  159A                     u8855:	
  7572  159A  35A2               	lslf	___wmul@multiplicand,f
  7573  159B  0DA3               	rlf	___wmul@multiplicand+1,f
  7574  159C  0B89               	decfsz	9,f
  7575  159D  2D9A               	goto	u8855
  7576  159E  3001               	movlw	1
  7577  159F                     u8865:	
  7578  159F  36A1               	lsrf	___wmul@multiplier+1,f
  7579  15A0  0CA0               	rrf	___wmul@multiplier,f
  7580  15A1  0B89               	decfsz	9,f
  7581  15A2  2D9F               	goto	u8865
  7582  15A3  0821               	movf	___wmul@multiplier+1,w
  7583  15A4  0420               	iorwf	___wmul@multiplier,w
  7584  15A5  1D03               	skipz
  7585  15A6  2D93               	goto	l7493
  7586  15A7  0825               	movf	___wmul@product+1,w
  7587  15A8  01A1               	clrf	?___wmul+1
  7588  15A9  07A1               	addwf	?___wmul+1,f
  7589  15AA  0824               	movf	___wmul@product,w
  7590  15AB  01A0               	clrf	?___wmul
  7591  15AC  07A0               	addwf	?___wmul,f
  7592  15AD  0008               	return
  7593  15AE                     __end_of___wmul:	
  7594                           
  7595                           	psect	text36
  7596  178F                     __ptext36:	
  7597 ;; *************** function ___lwdiv *****************
  7598 ;; Defined at:
  7599 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  7600 ;; Parameters:    Size  Location     Type
  7601 ;;  divisor         2    0[BANK0 ] unsigned int 
  7602 ;;  dividend        2    2[BANK0 ] unsigned int 
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;  quotient        2    6[BANK0 ] unsigned int 
  7605 ;;  counter         1    5[BANK0 ] unsigned char 
  7606 ;; Return value:  Size  Location     Type
  7607 ;;                  2    0[BANK0 ] unsigned int 
  7608 ;; Registers used:
  7609 ;;		wreg, status,2, status,0
  7610 ;; Tracked objects:
  7611 ;;		On entry : 0/0
  7612 ;;		On exit  : 0/0
  7613 ;;		Unchanged: 0/0
  7614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7615 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7616 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7617 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7618 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7619 ;;Total ram usage:        8 bytes
  7620 ;; Hardware stack levels used:    1
  7621 ;; Hardware stack levels required when called:    5
  7622 ;; This function calls:
  7623 ;;		Nothing
  7624 ;; This function is called by:
  7625 ;;		_Load_Main
  7626 ;; This function uses a non-reentrant model
  7627 ;;
  7628                           
  7629                           
  7630                           ;psect for function ___lwdiv
  7631  178F                     ___lwdiv:	
  7632                           
  7633                           ;incstack = 0
  7634                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7635  178F  0020               	movlb	0	; select bank0
  7636  1790  01A6               	clrf	___lwdiv@quotient
  7637  1791  01A7               	clrf	___lwdiv@quotient+1
  7638  1792  0821               	movf	___lwdiv@divisor+1,w
  7639  1793  0420               	iorwf	___lwdiv@divisor,w
  7640  1794  1903               	skipnz
  7641  1795  2FBF               	goto	l7525
  7642  1796  01A5               	clrf	___lwdiv@counter
  7643  1797  0AA5               	incf	___lwdiv@counter,f
  7644  1798                     l7513:	
  7645  1798  1BA1               	btfsc	___lwdiv@divisor+1,7
  7646  1799  2FA4               	goto	l7515
  7647  179A  3001               	movlw	1
  7648  179B                     u8895:	
  7649  179B  35A0               	lslf	___lwdiv@divisor,f
  7650  179C  0DA1               	rlf	___lwdiv@divisor+1,f
  7651  179D  0B89               	decfsz	9,f
  7652  179E  2F9B               	goto	u8895
  7653  179F  3001               	movlw	1
  7654  17A0  00A4               	movwf	??___lwdiv
  7655  17A1  0824               	movf	??___lwdiv,w
  7656  17A2  07A5               	addwf	___lwdiv@counter,f
  7657  17A3  2F98               	goto	l7513
  7658  17A4                     l7515:	
  7659  17A4  3001               	movlw	1
  7660  17A5                     u8915:	
  7661  17A5  35A6               	lslf	___lwdiv@quotient,f
  7662  17A6  0DA7               	rlf	___lwdiv@quotient+1,f
  7663  17A7  0B89               	decfsz	9,f
  7664  17A8  2FA5               	goto	u8915
  7665  17A9  0821               	movf	___lwdiv@divisor+1,w
  7666  17AA  0223               	subwf	___lwdiv@dividend+1,w
  7667  17AB  1D03               	skipz
  7668  17AC  2FAF               	goto	u8925
  7669  17AD  0820               	movf	___lwdiv@divisor,w
  7670  17AE  0222               	subwf	___lwdiv@dividend,w
  7671  17AF                     u8925:	
  7672  17AF  1C03               	skipc
  7673  17B0  2FB6               	goto	l7521
  7674  17B1  0820               	movf	___lwdiv@divisor,w
  7675  17B2  02A2               	subwf	___lwdiv@dividend,f
  7676  17B3  0821               	movf	___lwdiv@divisor+1,w
  7677  17B4  3BA3               	subwfb	___lwdiv@dividend+1,f
  7678  17B5  1426               	bsf	___lwdiv@quotient,0
  7679  17B6                     l7521:	
  7680  17B6  3001               	movlw	1
  7681  17B7                     u8935:	
  7682  17B7  36A1               	lsrf	___lwdiv@divisor+1,f
  7683  17B8  0CA0               	rrf	___lwdiv@divisor,f
  7684  17B9  0B89               	decfsz	9,f
  7685  17BA  2FB7               	goto	u8935
  7686  17BB  3001               	movlw	1
  7687  17BC  02A5               	subwf	___lwdiv@counter,f
  7688  17BD  1D03               	btfss	3,2
  7689  17BE  2FA4               	goto	l7515
  7690  17BF                     l7525:	
  7691  17BF  0827               	movf	___lwdiv@quotient+1,w
  7692  17C0  01A1               	clrf	?___lwdiv+1
  7693  17C1  07A1               	addwf	?___lwdiv+1,f
  7694  17C2  0826               	movf	___lwdiv@quotient,w
  7695  17C3  01A0               	clrf	?___lwdiv
  7696  17C4  07A0               	addwf	?___lwdiv,f
  7697  17C5  0008               	return
  7698  17C6                     __end_of___lwdiv:	
  7699                           
  7700                           	psect	text37
  7701  12C2                     __ptext37:	
  7702 ;; *************** function _Load_Initialization *****************
  7703 ;; Defined at:
  7704 ;;		line 9 in file "../src/OverLoad_B1.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;		None
  7707 ;; Auto vars:     Size  Location     Type
  7708 ;;		None
  7709 ;; Return value:  Size  Location     Type
  7710 ;;		None               void
  7711 ;; Registers used:
  7712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7713 ;; Tracked objects:
  7714 ;;		On entry : 0/0
  7715 ;;		On exit  : 0/0
  7716 ;;		Unchanged: 0/0
  7717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;Total ram usage:        0 bytes
  7723 ;; Hardware stack levels used:    1
  7724 ;; Hardware stack levels required when called:    6
  7725 ;; This function calls:
  7726 ;;		_setLoad_AH_AL_Restore
  7727 ;; This function is called by:
  7728 ;;		_main
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           
  7733                           ;psect for function _Load_Initialization
  7734  12C2                     _Load_Initialization:	
  7735                           
  7736                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  7737                           
  7738                           ;incstack = 0
  7739                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7740  12C2  3195  2574         	fcall	_setLoad_AH_AL_Restore
  7741  12C4  0008               	return
  7742  12C5                     __end_of_Load_Initialization:	
  7743                           
  7744                           	psect	text38
  7745  1574                     __ptext38:	
  7746 ;; *************** function _setLoad_AH_AL_Restore *****************
  7747 ;; Defined at:
  7748 ;;		line 285 in file "../src/OverLoad_B1.c"
  7749 ;; Parameters:    Size  Location     Type
  7750 ;;		None
  7751 ;; Auto vars:     Size  Location     Type
  7752 ;;  i               1    1[BANK0 ] unsigned char 
  7753 ;; Return value:  Size  Location     Type
  7754 ;;		None               void
  7755 ;; Registers used:
  7756 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7757 ;; Tracked objects:
  7758 ;;		On entry : 0/0
  7759 ;;		On exit  : 0/0
  7760 ;;		Unchanged: 0/0
  7761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7764 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;Total ram usage:        2 bytes
  7767 ;; Hardware stack levels used:    1
  7768 ;; Hardware stack levels required when called:    5
  7769 ;; This function calls:
  7770 ;;		Nothing
  7771 ;; This function is called by:
  7772 ;;		_Load_Initialization
  7773 ;;		_Load_Main
  7774 ;; This function uses a non-reentrant model
  7775 ;;
  7776                           
  7777                           
  7778                           ;psect for function _setLoad_AH_AL_Restore
  7779  1574                     _setLoad_AH_AL_Restore:	
  7780                           
  7781                           ;OverLoad_B1.c: 286: char i;
  7782                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
  7783                           
  7784                           ;incstack = 0
  7785                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  7786  1574  0020               	movlb	0	; select bank0
  7787  1575  01A1               	clrf	setLoad_AH_AL_Restore@i
  7788  1576                     L5:	
  7789  1576  3005               	movlw	5
  7790  1577  0221               	subwf	setLoad_AH_AL_Restore@i,w
  7791  1578  1803               	btfsc	3,0
  7792  1579  0008               	return
  7793                           
  7794                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
  7795  157A  3521               	lslf	setLoad_AH_AL_Restore@i,w
  7796  157B  3E2B               	addlw	(_Load+11)& (0+255)
  7797  157C  0086               	movwf	6
  7798  157D  3001               	movlw	1	; select bank2/3
  7799  157E  0087               	movwf	7
  7800  157F  3000               	movlw	0
  7801  1580  3FC0               	movwi [0]fsr1
  7802  1581  3FC1               	movwi [1]fsr1
  7803                           
  7804                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
  7805  1582  3521               	lslf	setLoad_AH_AL_Restore@i,w
  7806  1583  3E35               	addlw	(_Load+21)& (0+255)
  7807  1584  0086               	movwf	6
  7808  1585  3001               	movlw	1	; select bank2/3
  7809  1586  0087               	movwf	7
  7810  1587  30FF               	movlw	255
  7811  1588  3FC0               	movwi [0]fsr1
  7812  1589  30FF               	movlw	255
  7813  158A  3FC1               	movwi [1]fsr1
  7814  158B  3001               	movlw	1
  7815  158C  00A0               	movwf	??_setLoad_AH_AL_Restore
  7816  158D  0820               	movf	??_setLoad_AH_AL_Restore,w
  7817  158E  07A1               	addwf	setLoad_AH_AL_Restore@i,f
  7818  158F  2D76               	goto	L5
  7819  1590                     __end_of_setLoad_AH_AL_Restore:	
  7820                           
  7821                           	psect	text39
  7822  136E                     __ptext39:	
  7823 ;; *************** function _LED_Main *****************
  7824 ;; Defined at:
  7825 ;;		line 47 in file "../src/LED_B1.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;		None
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;		None
  7830 ;; Return value:  Size  Location     Type
  7831 ;;		None               void
  7832 ;; Registers used:
  7833 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7843 ;;Total ram usage:        0 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; Hardware stack levels required when called:    7
  7846 ;; This function calls:
  7847 ;;		_setLED_Main
  7848 ;; This function is called by:
  7849 ;;		_main
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           
  7854                           ;psect for function _LED_Main
  7855  136E                     _LED_Main:	
  7856                           
  7857                           ;LED_B1.c: 53: setLED_Main(1);
  7858                           
  7859                           ;incstack = 0
  7860                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7861  136E  3001               	movlw	1
  7862  136F  3188  2036  3193   	fcall	_setLED_Main
  7863                           
  7864                           ;LED_B1.c: 56: setLED_Main(2);
  7865  1372  3002               	movlw	2
  7866  1373  3188  2036  3193   	fcall	_setLED_Main
  7867                           
  7868                           ;LED_B1.c: 62: setLED_Main(99);
  7869  1376  3063               	movlw	99
  7870  1377  3188  2036         	fcall	_setLED_Main
  7871  1379  0008               	return
  7872  137A                     __end_of_LED_Main:	
  7873                           
  7874                           	psect	text40
  7875  0836                     __ptext40:	
  7876 ;; *************** function _setLED_Main *****************
  7877 ;; Defined at:
  7878 ;;		line 221 in file "../src/LED_B1.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  led             1    wreg     unsigned char 
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  led             1    4[BANK0 ] unsigned char 
  7883 ;; Return value:  Size  Location     Type
  7884 ;;		None               void
  7885 ;; Registers used:
  7886 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7887 ;; Tracked objects:
  7888 ;;		On entry : 0/0
  7889 ;;		On exit  : 0/0
  7890 ;;		Unchanged: 0/0
  7891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;Total ram usage:        3 bytes
  7897 ;; Hardware stack levels used:    1
  7898 ;; Hardware stack levels required when called:    6
  7899 ;; This function calls:
  7900 ;;		_LedPointSelect
  7901 ;; This function is called by:
  7902 ;;		_LED_Main
  7903 ;; This function uses a non-reentrant model
  7904 ;;
  7905                           
  7906                           
  7907                           ;psect for function _setLED_Main
  7908  0836                     _setLED_Main:	
  7909                           
  7910                           ;incstack = 0
  7911                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7912                           ;setLED_Main@led stored from wreg
  7913  0836  0020               	movlb	0	; select bank0
  7914  0837  00A4               	movwf	setLED_Main@led
  7915                           
  7916                           ;LED_B1.c: 222: LedPointSelect(led);
  7917  0838  0824               	movf	setLED_Main@led,w
  7918  0839  3195  253E  3188   	fcall	_LedPointSelect
  7919                           
  7920                           ;LED_B1.c: 223: if (LED->GO == 1) {
  7921  083C  0873               	movf	_LED,w
  7922  083D  0086               	movwf	6
  7923  083E  0187               	clrf	7
  7924  083F  1C81               	btfss	1,1
  7925  0840  0008               	return
  7926                           
  7927                           ;LED_B1.c: 224: LED->Time++;
  7928  0841  0A73               	incf	_LED,w
  7929  0842  0086               	movwf	6
  7930  0843  0187               	clrf	7
  7931  0844  3001               	movlw	1
  7932  0845  0781               	addwf	1,f
  7933  0846  3141               	addfsr 1,1
  7934  0847  1803               	skipnc
  7935  0848  0A81               	incf	1,f
  7936                           
  7937                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
  7938  0849  0A73               	incf	_LED,w
  7939  084A  0086               	movwf	6
  7940  084B  0187               	clrf	7
  7941  084C  3F40               	moviw [0]fsr1
  7942  084D  0020               	movlb	0	; select bank0
  7943  084E  00A2               	movwf	??_setLED_Main
  7944  084F  3F41               	moviw [1]fsr1
  7945  0850  00A3               	movwf	??_setLED_Main+1
  7946  0851  3000               	movlw	0
  7947  0852  0223               	subwf	??_setLED_Main+1,w
  7948  0853  3032               	movlw	50
  7949  0854  1903               	skipnz
  7950  0855  0222               	subwf	??_setLED_Main,w
  7951  0856  1C03               	skipc
  7952  0857  0008               	return
  7953                           
  7954                           ;LED_B1.c: 226: LED->Time = 0;
  7955  0858  0A73               	incf	_LED,w
  7956  0859  0086               	movwf	6
  7957  085A  0187               	clrf	7
  7958  085B  3000               	movlw	0
  7959  085C  3FC0               	movwi [0]fsr1
  7960  085D  3FC1               	movwi [1]fsr1
  7961                           
  7962                           ;LED_B1.c: 228: if (led == 1) {
  7963  085E  0824               	movf	setLED_Main@led,w
  7964  085F  3A01               	xorlw	1
  7965                           
  7966                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
  7967  0860  3008               	movlw	8
  7968  0861  1903               	btfsc	3,2
  7969  0862  068C               	xorwf	12,f
  7970                           
  7971                           ;LED_B1.c: 230: }
  7972                           ;LED_B1.c: 233: if (led == 2) {
  7973  0863  0824               	movf	setLED_Main@led,w
  7974  0864  3A02               	xorlw	2
  7975  0865  1D03               	skipz
  7976  0866  2869               	goto	l720
  7977                           
  7978                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
  7979  0867  3080               	movlw	128
  7980  0868  068E               	xorwf	14,f
  7981  0869                     l720:	
  7982                           
  7983                           ;LED_B1.c: 235: }
  7984                           ;LED_B1.c: 243: if (led == 99) {
  7985  0869  0824               	movf	setLED_Main@led,w
  7986  086A  3A63               	xorlw	99
  7987  086B  1D03               	skipz
  7988  086C  0008               	return
  7989                           
  7990                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
  7991  086D  3020               	movlw	32
  7992  086E  068D               	xorwf	13,f
  7993  086F  0008               	return
  7994  0870                     __end_of_setLED_Main:	
  7995                           
  7996                           	psect	text41
  7997  1362                     __ptext41:	
  7998 ;; *************** function _LED_Initialization *****************
  7999 ;; Defined at:
  8000 ;;		line 31 in file "../src/LED_B1.c"
  8001 ;; Parameters:    Size  Location     Type
  8002 ;;		None
  8003 ;; Auto vars:     Size  Location     Type
  8004 ;;		None
  8005 ;; Return value:  Size  Location     Type
  8006 ;;		None               void
  8007 ;; Registers used:
  8008 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8009 ;; Tracked objects:
  8010 ;;		On entry : 0/0
  8011 ;;		On exit  : 0/0
  8012 ;;		Unchanged: 0/0
  8013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8018 ;;Total ram usage:        0 bytes
  8019 ;; Hardware stack levels used:    1
  8020 ;; Hardware stack levels required when called:    8
  8021 ;; This function calls:
  8022 ;;		_setLED_Initialization
  8023 ;; This function is called by:
  8024 ;;		_main
  8025 ;; This function uses a non-reentrant model
  8026 ;;
  8027                           
  8028                           
  8029                           ;psect for function _LED_Initialization
  8030  1362                     _LED_Initialization:	
  8031                           
  8032                           ;LED_B1.c: 33: setLED_Initialization(1);
  8033                           
  8034                           ;incstack = 0
  8035                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8036  1362  3001               	movlw	1
  8037  1363  3193  23DB  3193   	fcall	_setLED_Initialization
  8038                           
  8039                           ;LED_B1.c: 36: setLED_Initialization(2);
  8040  1366  3002               	movlw	2
  8041  1367  3193  23DB  3193   	fcall	_setLED_Initialization
  8042                           
  8043                           ;LED_B1.c: 42: setLED_Initialization(99);
  8044  136A  3063               	movlw	99
  8045  136B  3193  23DB         	fcall	_setLED_Initialization
  8046  136D  0008               	return
  8047  136E                     __end_of_LED_Initialization:	
  8048                           
  8049                           	psect	text42
  8050  13DB                     __ptext42:	
  8051 ;; *************** function _setLED_Initialization *****************
  8052 ;; Defined at:
  8053 ;;		line 69 in file "../src/LED_B1.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;  led             1    wreg     unsigned char 
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;  led             1    4[BANK0 ] unsigned char 
  8058 ;; Return value:  Size  Location     Type
  8059 ;;		None               void
  8060 ;; Registers used:
  8061 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8062 ;; Tracked objects:
  8063 ;;		On entry : 0/0
  8064 ;;		On exit  : 0/0
  8065 ;;		Unchanged: 0/0
  8066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;Total ram usage:        1 bytes
  8072 ;; Hardware stack levels used:    1
  8073 ;; Hardware stack levels required when called:    7
  8074 ;; This function calls:
  8075 ;;		_LedPointSelect
  8076 ;;		_setLED
  8077 ;; This function is called by:
  8078 ;;		_LED_Initialization
  8079 ;; This function uses a non-reentrant model
  8080 ;;
  8081                           
  8082                           
  8083                           ;psect for function _setLED_Initialization
  8084  13DB                     _setLED_Initialization:	
  8085                           
  8086                           ;incstack = 0
  8087                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8088                           ;setLED_Initialization@led stored from wreg
  8089  13DB  0020               	movlb	0	; select bank0
  8090  13DC  00A4               	movwf	setLED_Initialization@led
  8091                           
  8092                           ;LED_B1.c: 70: LedPointSelect(led);
  8093  13DD  0824               	movf	setLED_Initialization@led,w
  8094  13DE  3195  253E  3193   	fcall	_LedPointSelect
  8095                           
  8096                           ;LED_B1.c: 71: LED->Enable = 1;
  8097  13E1  0873               	movf	_LED,w
  8098  13E2  0086               	movwf	6
  8099  13E3  0187               	clrf	7
  8100  13E4  1401               	bsf	1,0
  8101                           
  8102                           ;LED_B1.c: 72: setLED(led, 0);
  8103  13E5  0020               	movlb	0	; select bank0
  8104  13E6  01A2               	clrf	setLED@command
  8105  13E7  0824               	movf	setLED_Initialization@led,w
  8106  13E8  3189  216F         	fcall	_setLED
  8107  13EA  0008               	return
  8108  13EB                     __end_of_setLED_Initialization:	
  8109                           
  8110                           	psect	text43
  8111  0800                     __ptext43:	
  8112 ;; *************** function _Flash_Memory_Main *****************
  8113 ;; Defined at:
  8114 ;;		line 966 in file "../src/MCU_B1.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;		None
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;		None
  8119 ;; Return value:  Size  Location     Type
  8120 ;;		None               void
  8121 ;; Registers used:
  8122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8132 ;;Total ram usage:        1 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    8
  8135 ;; This function calls:
  8136 ;;		_Flash_Memory_Modify
  8137 ;;		_getMain_LightsStatus
  8138 ;; This function is called by:
  8139 ;;		_main
  8140 ;; This function uses a non-reentrant model
  8141 ;;
  8142                           
  8143                           
  8144                           ;psect for function _Flash_Memory_Main
  8145  0800                     _Flash_Memory_Main:	
  8146                           
  8147                           ;MCU_B1.c: 967: if (Memory.Modify == 1) {
  8148                           
  8149                           ;incstack = 0
  8150                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8151  0800  0023               	movlb	3	; select bank3
  8152  0801  1C44               	btfss	(_Memory^(0+384)+36),0
  8153  0802  0008               	return
  8154                           
  8155                           ;MCU_B1.c: 968: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
  8156  0803  3194  2458  3188   	fcall	_getMain_LightsStatus
  8157  0806  3A00               	xorlw	0
  8158  0807  3000               	movlw	0
  8159  0808  1903               	skipnz
  8160  0809  3001               	movlw	1
  8161  080A  0020               	movlb	0	; select bank0
  8162  080B  00A6               	movwf	??_Flash_Memory_Main
  8163  080C  0DA6               	rlf	??_Flash_Memory_Main,f
  8164  080D  0023               	movlb	3	; select bank3
  8165  080E  0844               	movf	(_Memory^(0+384)+36),w
  8166  080F  0020               	movlb	0	; select bank0
  8167  0810  0626               	xorwf	??_Flash_Memory_Main,w
  8168  0811  39FD               	andlw	-3
  8169  0812  0626               	xorwf	??_Flash_Memory_Main,w
  8170  0813  0023               	movlb	3	; select bank3
  8171  0814  00C4               	movwf	(_Memory^(0+384)+36)
  8172                           
  8173                           ;MCU_B1.c: 969: if (Memory.GO == 1) {
  8174  0815  1CC4               	btfss	(_Memory^(0+384)+36),1
  8175  0816  2830               	goto	l962
  8176                           
  8177                           ;MCU_B1.c: 970: Memory.Runtime = 1;
  8178  0817  15C4               	bsf	(_Memory^(0+384)+36),3
  8179                           
  8180                           ;MCU_B1.c: 971: Memory.Time++;
  8181  0818  3001               	movlw	1
  8182  0819  07C2               	addwf	(_Memory^(0+384)+34),f
  8183  081A  3000               	movlw	0
  8184  081B  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  8185                           
  8186                           ;MCU_B1.c: 972: if (Memory.Time == 25) {
  8187  081C  3022               	movlw	34
  8188  081D  3EA0               	addlw	_Memory& (0+255)
  8189  081E  0086               	movwf	6
  8190  081F  3001               	movlw	1	; select bank3/4
  8191  0820  0087               	movwf	7
  8192  0821  3F40               	moviw [0]fsr1
  8193  0822  3A19               	xorlw	25
  8194  0823  1D03               	skipz
  8195  0824  2827               	goto	u9125
  8196  0825  3F41               	moviw [1]fsr1
  8197  0826  3A00               	xorlw	0
  8198  0827                     u9125:	
  8199  0827  1D03               	skipz
  8200  0828  0008               	return
  8201                           
  8202                           ;MCU_B1.c: 973: Memory.Time = 0;
  8203  0829  01C2               	clrf	(_Memory^(0+384)+34)
  8204  082A  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8205                           
  8206                           ;MCU_B1.c: 974: Memory.Modify = 0;
  8207  082B  1044               	bcf	(_Memory^(0+384)+36),0
  8208                           
  8209                           ;MCU_B1.c: 975: Memory.GO = 0;
  8210  082C  10C4               	bcf	(_Memory^(0+384)+36),1
  8211                           
  8212                           ;MCU_B1.c: 976: Flash_Memory_Modify();
  8213  082D  318A  220A         	fcall	_Flash_Memory_Modify
  8214                           
  8215                           ;MCU_B1.c: 977: }
  8216                           ;MCU_B1.c: 978: } else {
  8217  082F  0008               	return
  8218  0830                     l962:	
  8219                           
  8220                           ;MCU_B1.c: 979: if (Memory.Runtime == 1) {
  8221  0830  1DC4               	btfss	(_Memory^(0+384)+36),3
  8222  0831  0008               	return
  8223                           
  8224                           ;MCU_B1.c: 980: Memory.Runtime = 0;
  8225  0832  11C4               	bcf	(_Memory^(0+384)+36),3
  8226                           
  8227                           ;MCU_B1.c: 981: Memory.Time = 0;
  8228  0833  01C2               	clrf	(_Memory^(0+384)+34)
  8229  0834  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8230  0835  0008               	return
  8231  0836                     __end_of_Flash_Memory_Main:	
  8232                           
  8233                           	psect	text44
  8234  0A0A                     __ptext44:	
  8235 ;; *************** function _Flash_Memory_Modify *****************
  8236 ;; Defined at:
  8237 ;;		line 1039 in file "../src/MCU_B1.c"
  8238 ;; Parameters:    Size  Location     Type
  8239 ;;		None
  8240 ;; Auto vars:     Size  Location     Type
  8241 ;;  i               1    5[BANK0 ] unsigned char 
  8242 ;; Return value:  Size  Location     Type
  8243 ;;		None               void
  8244 ;; Registers used:
  8245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8246 ;; Tracked objects:
  8247 ;;		On entry : 0/0
  8248 ;;		On exit  : 0/0
  8249 ;;		Unchanged: 0/0
  8250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8254 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8255 ;;Total ram usage:        2 bytes
  8256 ;; Hardware stack levels used:    1
  8257 ;; Hardware stack levels required when called:    7
  8258 ;; This function calls:
  8259 ;;		_Flash_Memory_Erasing
  8260 ;;		_Flash_Memory_Read
  8261 ;;		_Flash_Memory_Write
  8262 ;;		_setMemory_Data
  8263 ;; This function is called by:
  8264 ;;		_Flash_Memory_Main
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           
  8269                           ;psect for function _Flash_Memory_Modify
  8270  0A0A                     _Flash_Memory_Modify:	
  8271                           
  8272                           ;MCU_B1.c: 1040: char i = 0;
  8273                           
  8274                           ;incstack = 0
  8275                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8276  0A0A  0020               	movlb	0	; select bank0
  8277  0A0B  01A5               	clrf	Flash_Memory_Modify@i
  8278                           
  8279                           ;MCU_B1.c: 1041: for (i = 0; i < 32; i++) {
  8280  0A0C  01A5               	clrf	Flash_Memory_Modify@i
  8281  0A0D  3020               	movlw	32
  8282  0A0E  0225               	subwf	Flash_Memory_Modify@i,w
  8283  0A0F  1803               	btfsc	3,0
  8284  0A10  2A26               	goto	l7295
  8285  0A11                     l7289:	
  8286                           
  8287                           ;MCU_B1.c: 1042: Memory.Data[i] = Flash_Memory_Read(i);
  8288  0A11  0825               	movf	Flash_Memory_Modify@i,w
  8289  0A12  3195  2524  318A   	fcall	_Flash_Memory_Read
  8290  0A15  0020               	movlb	0	; select bank0
  8291  0A16  00A4               	movwf	??_Flash_Memory_Modify
  8292  0A17  0825               	movf	Flash_Memory_Modify@i,w
  8293  0A18  3EA0               	addlw	_Memory& (0+255)
  8294  0A19  0086               	movwf	6
  8295  0A1A  3001               	movlw	1	; select bank3/4
  8296  0A1B  0087               	movwf	7
  8297  0A1C  0824               	movf	??_Flash_Memory_Modify,w
  8298  0A1D  0081               	movwf	1
  8299  0A1E  3001               	movlw	1
  8300  0A1F  00A4               	movwf	??_Flash_Memory_Modify
  8301  0A20  0824               	movf	??_Flash_Memory_Modify,w
  8302  0A21  07A5               	addwf	Flash_Memory_Modify@i,f
  8303  0A22  3020               	movlw	32
  8304  0A23  0225               	subwf	Flash_Memory_Modify@i,w
  8305  0A24  1C03               	skipc
  8306  0A25  2A11               	goto	l7289
  8307  0A26                     l7295:	
  8308                           
  8309                           ;MCU_B1.c: 1043: }
  8310                           ;MCU_B1.c: 1044: setMemory_Data(0, product->Data[12]);
  8311  0A26  087A               	movf	_product,w
  8312  0A27  0086               	movwf	6
  8313  0A28  3002               	movlw	2	; select bank4/5
  8314  0A29  0087               	movwf	7
  8315  0A2A  3002               	movlw	2	; select bank4/5
  8316  0A2B  3F4C               	moviw [12]fsr1
  8317  0A2C  00A0               	movwf	setMemory_Data@data
  8318  0A2D  3000               	movlw	0
  8319  0A2E  3193  234A  318A   	fcall	_setMemory_Data
  8320                           
  8321                           ;MCU_B1.c: 1045: setMemory_Data(1, product->Data[13]);
  8322  0A31  087A               	movf	_product,w
  8323  0A32  0086               	movwf	6
  8324  0A33  3002               	movlw	2	; select bank4/5
  8325  0A34  0087               	movwf	7
  8326  0A35  3002               	movlw	2	; select bank4/5
  8327  0A36  3F4D               	moviw [13]fsr1
  8328  0A37  0020               	movlb	0	; select bank0
  8329  0A38  00A0               	movwf	setMemory_Data@data
  8330  0A39  3001               	movlw	1
  8331  0A3A  3193  234A  318A   	fcall	_setMemory_Data
  8332                           
  8333                           ;MCU_B1.c: 1046: setMemory_Data(2, product->Data[14]);
  8334  0A3D  087A               	movf	_product,w
  8335  0A3E  0086               	movwf	6
  8336  0A3F  3002               	movlw	2	; select bank4/5
  8337  0A40  0087               	movwf	7
  8338  0A41  3002               	movlw	2	; select bank4/5
  8339  0A42  3F4E               	moviw [14]fsr1
  8340  0A43  0020               	movlb	0	; select bank0
  8341  0A44  00A0               	movwf	setMemory_Data@data
  8342  0A45  3002               	movlw	2
  8343  0A46  3193  234A  318A   	fcall	_setMemory_Data
  8344                           
  8345                           ;MCU_B1.c: 1052: if (Memory.LoopSave == 1) {
  8346  0A49  0023               	movlb	3	; select bank3
  8347  0A4A  1D44               	btfss	(_Memory^(0+384)+36),2
  8348  0A4B  2A50               	goto	l985
  8349                           
  8350                           ;MCU_B1.c: 1053: Memory.LoopSave = 0;
  8351  0A4C  1144               	bcf	(_Memory^(0+384)+36),2
  8352                           
  8353                           ;MCU_B1.c: 1054: myMain.FirstOpen = 0;
  8354  0A4D  0021               	movlb	1	; select bank1
  8355  0A4E  11A0               	bcf	_myMain^(0+128),3
  8356                           
  8357                           ;MCU_B1.c: 1055: myMain.First = 0;
  8358  0A4F  12A0               	bcf	_myMain^(0+128),5
  8359  0A50                     l985:	
  8360                           
  8361                           ;MCU_B1.c: 1057: }
  8362                           ;MCU_B1.c: 1058: GIE = 0;
  8363  0A50  138B               	bcf	11,7	;volatile
  8364                           
  8365                           ;MCU_B1.c: 1059: Flash_Memory_Erasing();
  8366  0A51  3193  2356  318A   	fcall	_Flash_Memory_Erasing
  8367                           
  8368                           ;MCU_B1.c: 1060: Flash_Memory_Write();
  8369  0A54  3196  26FC         	fcall	_Flash_Memory_Write
  8370                           
  8371                           ;MCU_B1.c: 1061: GIE = 1;
  8372  0A56  178B               	bsf	11,7	;volatile
  8373  0A57  0008               	return
  8374  0A58                     __end_of_Flash_Memory_Modify:	
  8375                           
  8376                           	psect	text45
  8377  1356                     __ptext45:	
  8378 ;; *************** function _Flash_Memory_Erasing *****************
  8379 ;; Defined at:
  8380 ;;		line 1028 in file "../src/MCU_B1.c"
  8381 ;; Parameters:    Size  Location     Type
  8382 ;;		None
  8383 ;; Auto vars:     Size  Location     Type
  8384 ;;		None
  8385 ;; Return value:  Size  Location     Type
  8386 ;;		None               void
  8387 ;; Registers used:
  8388 ;;		wreg, status,2, status,0, pclath, cstack
  8389 ;; Tracked objects:
  8390 ;;		On entry : 0/0
  8391 ;;		On exit  : 0/0
  8392 ;;		Unchanged: 0/0
  8393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8398 ;;Total ram usage:        0 bytes
  8399 ;; Hardware stack levels used:    1
  8400 ;; Hardware stack levels required when called:    6
  8401 ;; This function calls:
  8402 ;;		_Flash_Memory_Unlock
  8403 ;; This function is called by:
  8404 ;;		_Flash_Memory_Modify
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           
  8409                           ;psect for function _Flash_Memory_Erasing
  8410  1356                     _Flash_Memory_Erasing:	
  8411                           
  8412                           ;MCU_B1.c: 1029: CFGS = 0;
  8413                           
  8414                           ;incstack = 0
  8415                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
  8416  1356  0023               	movlb	3	; select bank3
  8417  1357  1315               	bcf	21,6	;volatile
  8418                           
  8419                           ;MCU_B1.c: 1030: PMADRH = 0x30;
  8420  1358  3030               	movlw	48
  8421  1359  0092               	movwf	18	;volatile
  8422                           
  8423                           ;MCU_B1.c: 1031: PMADRL = 0x00;
  8424  135A  0191               	clrf	17	;volatile
  8425                           
  8426                           ;MCU_B1.c: 1032: FREE = 1;
  8427  135B  1615               	bsf	21,4	;volatile
  8428                           
  8429                           ;MCU_B1.c: 1033: WREN = 1;
  8430  135C  1515               	bsf	21,2	;volatile
  8431                           
  8432                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
  8433  135D  3193  232B         	fcall	_Flash_Memory_Unlock
  8434                           
  8435                           ;MCU_B1.c: 1035: WREN = 0;
  8436  135F  0023               	movlb	3	; select bank3
  8437  1360  1115               	bcf	21,2	;volatile
  8438  1361  0008               	return
  8439  1362                     __end_of_Flash_Memory_Erasing:	
  8440                           
  8441                           	psect	text46
  8442  062C                     __ptext46:	
  8443 ;; *************** function _Flash_Memory_Initialization *****************
  8444 ;; Defined at:
  8445 ;;		line 925 in file "../src/MCU_B1.c"
  8446 ;; Parameters:    Size  Location     Type
  8447 ;;		None
  8448 ;; Auto vars:     Size  Location     Type
  8449 ;;  i               1   67[BANK0 ] unsigned char 
  8450 ;; Return value:  Size  Location     Type
  8451 ;;		None               void
  8452 ;; Registers used:
  8453 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8454 ;; Tracked objects:
  8455 ;;		On entry : 0/0
  8456 ;;		On exit  : 0/0
  8457 ;;		Unchanged: 0/0
  8458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8461 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8462 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8463 ;;Total ram usage:        2 bytes
  8464 ;; Hardware stack levels used:    1
  8465 ;; Hardware stack levels required when called:    8
  8466 ;; This function calls:
  8467 ;;		_Flash_Memory_Read
  8468 ;;		_Flash_Memory_Write
  8469 ;;		_setMemory_Data
  8470 ;;		_setPercentValue
  8471 ;; This function is called by:
  8472 ;;		_main
  8473 ;; This function uses a non-reentrant model
  8474 ;;
  8475                           
  8476                           
  8477                           ;psect for function _Flash_Memory_Initialization
  8478  062C                     _Flash_Memory_Initialization:	
  8479                           
  8480                           ;MCU_B1.c: 926: char i = 0;
  8481                           
  8482                           ;incstack = 0
  8483                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  8484  062C  0020               	movlb	0	; select bank0
  8485  062D  01E3               	clrf	Flash_Memory_Initialization@i
  8486                           
  8487                           ;MCU_B1.c: 927: if (Flash_Memory_Read(31) == 0xaa) {
  8488  062E  301F               	movlw	31
  8489  062F  3195  2524  3186   	fcall	_Flash_Memory_Read
  8490  0632  3AAA               	xorlw	170
  8491  0633  1D03               	skipz
  8492  0634  2E9E               	goto	l7607
  8493                           
  8494                           ;MCU_B1.c: 928: product->Data[12] = Flash_Memory_Read(0);
  8495  0635  3000               	movlw	0
  8496  0636  3195  2524  3186   	fcall	_Flash_Memory_Read
  8497  0639  0020               	movlb	0	; select bank0
  8498  063A  00E2               	movwf	??_Flash_Memory_Initialization
  8499  063B  087A               	movf	_product,w
  8500  063C  3E0C               	addlw	12
  8501  063D  0086               	movwf	6
  8502  063E  3002               	movlw	2	; select bank4/5
  8503  063F  0087               	movwf	7
  8504  0640  0862               	movf	??_Flash_Memory_Initialization,w
  8505  0641  0081               	movwf	1
  8506                           
  8507                           ;MCU_B1.c: 929: product->Data[13] = Flash_Memory_Read(1);
  8508  0642  3001               	movlw	1
  8509  0643  3195  2524  3186   	fcall	_Flash_Memory_Read
  8510  0646  0020               	movlb	0	; select bank0
  8511  0647  00E2               	movwf	??_Flash_Memory_Initialization
  8512  0648  087A               	movf	_product,w
  8513  0649  3E0D               	addlw	13
  8514  064A  0086               	movwf	6
  8515  064B  3002               	movlw	2	; select bank4/5
  8516  064C  0087               	movwf	7
  8517  064D  0862               	movf	??_Flash_Memory_Initialization,w
  8518  064E  0081               	movwf	1
  8519                           
  8520                           ;MCU_B1.c: 930: product->Data[14] = Flash_Memory_Read(2);
  8521  064F  3002               	movlw	2
  8522  0650  3195  2524  3186   	fcall	_Flash_Memory_Read
  8523  0653  0020               	movlb	0	; select bank0
  8524  0654  00E2               	movwf	??_Flash_Memory_Initialization
  8525  0655  087A               	movf	_product,w
  8526  0656  3E0E               	addlw	14
  8527  0657  0086               	movwf	6
  8528  0658  3002               	movlw	2	; select bank4/5
  8529  0659  0087               	movwf	7
  8530  065A  0862               	movf	??_Flash_Memory_Initialization,w
  8531  065B  0081               	movwf	1
  8532                           
  8533                           ;MCU_B1.c: 936: i = setPercentValue(((char)(70*0.8)));
  8534  065C  3038               	movlw	56
  8535  065D  318D  257D  3186   	fcall	_setPercentValue
  8536  0660  0020               	movlb	0	; select bank0
  8537  0661  00E2               	movwf	??_Flash_Memory_Initialization
  8538  0662  0862               	movf	??_Flash_Memory_Initialization,w
  8539  0663  00E3               	movwf	Flash_Memory_Initialization@i
  8540                           
  8541                           ;MCU_B1.c: 937: product->Data[21] = i;
  8542  0664  0863               	movf	Flash_Memory_Initialization@i,w
  8543  0665  00E2               	movwf	??_Flash_Memory_Initialization
  8544  0666  087A               	movf	_product,w
  8545  0667  3E15               	addlw	21
  8546  0668  0086               	movwf	6
  8547  0669  3002               	movlw	2	; select bank4/5
  8548  066A  0087               	movwf	7
  8549  066B  0862               	movf	??_Flash_Memory_Initialization,w
  8550  066C  0081               	movwf	1
  8551                           
  8552                           ;MCU_B1.c: 938: product->Data[22] = i;
  8553  066D  0863               	movf	Flash_Memory_Initialization@i,w
  8554  066E  00E2               	movwf	??_Flash_Memory_Initialization
  8555  066F  087A               	movf	_product,w
  8556  0670  3E16               	addlw	22
  8557  0671  0086               	movwf	6
  8558  0672  3002               	movlw	2	; select bank4/5
  8559  0673  0087               	movwf	7
  8560  0674  0862               	movf	??_Flash_Memory_Initialization,w
  8561  0675  0081               	movwf	1
  8562                           
  8563                           ;MCU_B1.c: 939: product->Data[23] = i;
  8564  0676  0863               	movf	Flash_Memory_Initialization@i,w
  8565  0677  00E2               	movwf	??_Flash_Memory_Initialization
  8566  0678  087A               	movf	_product,w
  8567  0679  3E17               	addlw	23
  8568  067A  0086               	movwf	6
  8569  067B  3002               	movlw	2	; select bank4/5
  8570  067C  0087               	movwf	7
  8571  067D  0862               	movf	??_Flash_Memory_Initialization,w
  8572  067E  0081               	movwf	1
  8573                           
  8574                           ;MCU_B1.c: 941: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
  8575  067F  087A               	movf	_product,w
  8576  0680  3E0C               	addlw	12
  8577  0681  0086               	movwf	6
  8578  0682  3002               	movlw	2	; select bank4/5
  8579  0683  0087               	movwf	7
  8580  0684  0801               	movf	1,w
  8581  0685  3AFF               	xorlw	255
  8582  0686  1D03               	skipz
  8583  0687  0008               	return
  8584  0688  087A               	movf	_product,w
  8585  0689  3E0D               	addlw	13
  8586  068A  0086               	movwf	6
  8587  068B  3002               	movlw	2	; select bank4/5
  8588  068C  0087               	movwf	7
  8589  068D  0801               	movf	1,w
  8590  068E  3AFF               	xorlw	255
  8591  068F  1D03               	skipz
  8592  0690  0008               	return
  8593  0691  087A               	movf	_product,w
  8594  0692  3E0E               	addlw	14
  8595  0693  0086               	movwf	6
  8596  0694  3002               	movlw	2	; select bank4/5
  8597  0695  0087               	movwf	7
  8598  0696  0801               	movf	1,w
  8599  0697  3AFF               	xorlw	255
  8600  0698  1D03               	skipz
  8601  0699  0008               	return
  8602                           
  8603                           ;MCU_B1.c: 942: myMain.FirstOpen = 1;
  8604  069A  0021               	movlb	1	; select bank1
  8605  069B  15A0               	bsf	_myMain^(0+128),3
  8606                           
  8607                           ;MCU_B1.c: 943: myMain.First = 1;
  8608  069C  16A0               	bsf	_myMain^(0+128),5
  8609                           
  8610                           ;MCU_B1.c: 944: }
  8611                           ;MCU_B1.c: 945: } else {
  8612  069D  0008               	return
  8613  069E                     l7607:	
  8614                           
  8615                           ;MCU_B1.c: 946: i = setPercentValue(((char)(70*0.8)));
  8616  069E  3038               	movlw	56
  8617  069F  318D  257D  3186   	fcall	_setPercentValue
  8618  06A2  0020               	movlb	0	; select bank0
  8619  06A3  00E2               	movwf	??_Flash_Memory_Initialization
  8620  06A4  0862               	movf	??_Flash_Memory_Initialization,w
  8621  06A5  00E3               	movwf	Flash_Memory_Initialization@i
  8622                           
  8623                           ;MCU_B1.c: 947: setMemory_Data(0, 0xff);
  8624  06A6  30FF               	movlw	255
  8625  06A7  00E2               	movwf	??_Flash_Memory_Initialization
  8626  06A8  0862               	movf	??_Flash_Memory_Initialization,w
  8627  06A9  00A0               	movwf	setMemory_Data@data
  8628  06AA  3000               	movlw	0
  8629  06AB  3193  234A  3186   	fcall	_setMemory_Data
  8630                           
  8631                           ;MCU_B1.c: 948: setMemory_Data(1, 0xff);
  8632  06AE  30FF               	movlw	255
  8633  06AF  0020               	movlb	0	; select bank0
  8634  06B0  00E2               	movwf	??_Flash_Memory_Initialization
  8635  06B1  0862               	movf	??_Flash_Memory_Initialization,w
  8636  06B2  00A0               	movwf	setMemory_Data@data
  8637  06B3  3001               	movlw	1
  8638  06B4  3193  234A  3186   	fcall	_setMemory_Data
  8639                           
  8640                           ;MCU_B1.c: 949: setMemory_Data(2, 0xff);
  8641  06B7  30FF               	movlw	255
  8642  06B8  0020               	movlb	0	; select bank0
  8643  06B9  00E2               	movwf	??_Flash_Memory_Initialization
  8644  06BA  0862               	movf	??_Flash_Memory_Initialization,w
  8645  06BB  00A0               	movwf	setMemory_Data@data
  8646  06BC  3002               	movlw	2
  8647  06BD  3193  234A  3186   	fcall	_setMemory_Data
  8648                           
  8649                           ;MCU_B1.c: 950: setMemory_Data(3, 0xff);
  8650  06C0  30FF               	movlw	255
  8651  06C1  0020               	movlb	0	; select bank0
  8652  06C2  00E2               	movwf	??_Flash_Memory_Initialization
  8653  06C3  0862               	movf	??_Flash_Memory_Initialization,w
  8654  06C4  00A0               	movwf	setMemory_Data@data
  8655  06C5  3003               	movlw	3
  8656  06C6  3193  234A  3186   	fcall	_setMemory_Data
  8657                           
  8658                           ;MCU_B1.c: 951: setMemory_Data(4, 0xff);
  8659  06C9  30FF               	movlw	255
  8660  06CA  0020               	movlb	0	; select bank0
  8661  06CB  00E2               	movwf	??_Flash_Memory_Initialization
  8662  06CC  0862               	movf	??_Flash_Memory_Initialization,w
  8663  06CD  00A0               	movwf	setMemory_Data@data
  8664  06CE  3004               	movlw	4
  8665  06CF  3193  234A  3186   	fcall	_setMemory_Data
  8666                           
  8667                           ;MCU_B1.c: 952: setMemory_Data(5, 0xff);
  8668  06D2  30FF               	movlw	255
  8669  06D3  0020               	movlb	0	; select bank0
  8670  06D4  00E2               	movwf	??_Flash_Memory_Initialization
  8671  06D5  0862               	movf	??_Flash_Memory_Initialization,w
  8672  06D6  00A0               	movwf	setMemory_Data@data
  8673  06D7  3005               	movlw	5
  8674  06D8  3193  234A  3186   	fcall	_setMemory_Data
  8675                           
  8676                           ;MCU_B1.c: 953: setMemory_Data(31, 0xaa);
  8677  06DB  30AA               	movlw	170
  8678  06DC  0020               	movlb	0	; select bank0
  8679  06DD  00E2               	movwf	??_Flash_Memory_Initialization
  8680  06DE  0862               	movf	??_Flash_Memory_Initialization,w
  8681  06DF  00A0               	movwf	setMemory_Data@data
  8682  06E0  301F               	movlw	31
  8683  06E1  3193  234A  3186   	fcall	_setMemory_Data
  8684                           
  8685                           ;MCU_B1.c: 954: product->Data[21] = i;
  8686  06E4  0020               	movlb	0	; select bank0
  8687  06E5  0863               	movf	Flash_Memory_Initialization@i,w
  8688  06E6  00E2               	movwf	??_Flash_Memory_Initialization
  8689  06E7  087A               	movf	_product,w
  8690  06E8  3E15               	addlw	21
  8691  06E9  0086               	movwf	6
  8692  06EA  3002               	movlw	2	; select bank4/5
  8693  06EB  0087               	movwf	7
  8694  06EC  0862               	movf	??_Flash_Memory_Initialization,w
  8695  06ED  0081               	movwf	1
  8696                           
  8697                           ;MCU_B1.c: 955: product->Data[22] = i;
  8698  06EE  0863               	movf	Flash_Memory_Initialization@i,w
  8699  06EF  00E2               	movwf	??_Flash_Memory_Initialization
  8700  06F0  087A               	movf	_product,w
  8701  06F1  3E16               	addlw	22
  8702  06F2  0086               	movwf	6
  8703  06F3  3002               	movlw	2	; select bank4/5
  8704  06F4  0087               	movwf	7
  8705  06F5  0862               	movf	??_Flash_Memory_Initialization,w
  8706  06F6  0081               	movwf	1
  8707                           
  8708                           ;MCU_B1.c: 956: product->Data[23] = i;
  8709  06F7  0863               	movf	Flash_Memory_Initialization@i,w
  8710  06F8  00E2               	movwf	??_Flash_Memory_Initialization
  8711  06F9  087A               	movf	_product,w
  8712  06FA  3E17               	addlw	23
  8713  06FB  0086               	movwf	6
  8714  06FC  3002               	movlw	2	; select bank4/5
  8715  06FD  0087               	movwf	7
  8716  06FE  0862               	movf	??_Flash_Memory_Initialization,w
  8717  06FF  0081               	movwf	1
  8718                           
  8719                           ;MCU_B1.c: 957: GIE = 0;
  8720  0700  138B               	bcf	11,7	;volatile
  8721                           
  8722                           ;MCU_B1.c: 958: Flash_Memory_Write();
  8723  0701  3196  26FC         	fcall	_Flash_Memory_Write
  8724                           
  8725                           ;MCU_B1.c: 959: GIE = 1;
  8726  0703  178B               	bsf	11,7	;volatile
  8727                           
  8728                           ;MCU_B1.c: 960: myMain.FirstOpen = 1;
  8729  0704  0021               	movlb	1	; select bank1
  8730  0705  15A0               	bsf	_myMain^(0+128),3
  8731                           
  8732                           ;MCU_B1.c: 961: myMain.First = 1;
  8733  0706  16A0               	bsf	_myMain^(0+128),5
  8734  0707  0008               	return
  8735  0708                     __end_of_Flash_Memory_Initialization:	
  8736                           
  8737                           	psect	text47
  8738  134A                     __ptext47:	
  8739 ;; *************** function _setMemory_Data *****************
  8740 ;; Defined at:
  8741 ;;		line 1076 in file "../src/MCU_B1.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;  address         1    wreg     unsigned char 
  8744 ;;  data            1    0[BANK0 ] unsigned char 
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;  address         1    2[BANK0 ] unsigned char 
  8747 ;; Return value:  Size  Location     Type
  8748 ;;		None               void
  8749 ;; Registers used:
  8750 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8751 ;; Tracked objects:
  8752 ;;		On entry : 0/0
  8753 ;;		On exit  : 0/0
  8754 ;;		Unchanged: 0/0
  8755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8756 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8757 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8760 ;;Total ram usage:        3 bytes
  8761 ;; Hardware stack levels used:    1
  8762 ;; Hardware stack levels required when called:    5
  8763 ;; This function calls:
  8764 ;;		Nothing
  8765 ;; This function is called by:
  8766 ;;		_Flash_Memory_Initialization
  8767 ;;		_Flash_Memory_Modify
  8768 ;; This function uses a non-reentrant model
  8769 ;;
  8770                           
  8771                           
  8772                           ;psect for function _setMemory_Data
  8773  134A                     _setMemory_Data:	
  8774                           
  8775                           ;incstack = 0
  8776                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
  8777                           ;setMemory_Data@address stored from wreg
  8778  134A  0020               	movlb	0	; select bank0
  8779  134B  00A2               	movwf	setMemory_Data@address
  8780                           
  8781                           ;MCU_B1.c: 1077: Memory.Data[address] = data;
  8782  134C  0820               	movf	setMemory_Data@data,w
  8783  134D  00A1               	movwf	??_setMemory_Data
  8784  134E  0822               	movf	setMemory_Data@address,w
  8785  134F  3EA0               	addlw	_Memory& (0+255)
  8786  1350  0086               	movwf	6
  8787  1351  3001               	movlw	1	; select bank3/4
  8788  1352  0087               	movwf	7
  8789  1353  0821               	movf	??_setMemory_Data,w
  8790  1354  0081               	movwf	1
  8791  1355  0008               	return
  8792  1356                     __end_of_setMemory_Data:	
  8793                           
  8794                           	psect	text48
  8795  16FC                     __ptext48:	
  8796 ;; *************** function _Flash_Memory_Write *****************
  8797 ;; Defined at:
  8798 ;;		line 1009 in file "../src/MCU_B1.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;		None
  8801 ;; Auto vars:     Size  Location     Type
  8802 ;;  i               1    1[BANK0 ] unsigned char 
  8803 ;; Return value:  Size  Location     Type
  8804 ;;		None               void
  8805 ;; Registers used:
  8806 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8807 ;; Tracked objects:
  8808 ;;		On entry : 0/0
  8809 ;;		On exit  : 0/0
  8810 ;;		Unchanged: 0/0
  8811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8813 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8814 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8815 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;Total ram usage:        2 bytes
  8817 ;; Hardware stack levels used:    1
  8818 ;; Hardware stack levels required when called:    6
  8819 ;; This function calls:
  8820 ;;		_Flash_Memory_Unlock
  8821 ;; This function is called by:
  8822 ;;		_Flash_Memory_Initialization
  8823 ;;		_Flash_Memory_Modify
  8824 ;; This function uses a non-reentrant model
  8825 ;;
  8826                           
  8827                           
  8828                           ;psect for function _Flash_Memory_Write
  8829  16FC                     _Flash_Memory_Write:	
  8830                           
  8831                           ;MCU_B1.c: 1010: char i = 0;
  8832                           
  8833                           ;incstack = 0
  8834                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8835  16FC  0020               	movlb	0	; select bank0
  8836  16FD  01A1               	clrf	Flash_Memory_Write@i
  8837                           
  8838                           ;MCU_B1.c: 1011: CFGS = 0;
  8839  16FE  0023               	movlb	3	; select bank3
  8840  16FF  1315               	bcf	21,6	;volatile
  8841                           
  8842                           ;MCU_B1.c: 1012: PMADRH = 0x30;
  8843  1700  3030               	movlw	48
  8844  1701  0092               	movwf	18	;volatile
  8845                           
  8846                           ;MCU_B1.c: 1013: PMDATH = 0;
  8847  1702  0194               	clrf	20	;volatile
  8848                           
  8849                           ;MCU_B1.c: 1014: FREE = 0;
  8850  1703  1215               	bcf	21,4	;volatile
  8851                           
  8852                           ;MCU_B1.c: 1015: LWLO = 1;
  8853  1704  1695               	bsf	21,5	;volatile
  8854                           
  8855                           ;MCU_B1.c: 1016: WREN = 1;
  8856  1705  1515               	bsf	21,2	;volatile
  8857                           
  8858                           ;MCU_B1.c: 1017: for (i = 0; i < 32; i++) {
  8859  1706  0020               	movlb	0	; select bank0
  8860  1707  01A1               	clrf	Flash_Memory_Write@i
  8861  1708  3020               	movlw	32
  8862  1709  0221               	subwf	Flash_Memory_Write@i,w
  8863  170A  1803               	btfsc	3,0
  8864  170B  2F24               	goto	l976
  8865  170C                     l7027:	
  8866                           
  8867                           ;MCU_B1.c: 1018: PMADRL = i;
  8868  170C  0821               	movf	Flash_Memory_Write@i,w
  8869  170D  0023               	movlb	3	; select bank3
  8870  170E  0091               	movwf	17	;volatile
  8871                           
  8872                           ;MCU_B1.c: 1019: PMDATL = Memory.Data[i];
  8873  170F  0020               	movlb	0	; select bank0
  8874  1710  0821               	movf	Flash_Memory_Write@i,w
  8875  1711  3EA0               	addlw	_Memory& (0+255)
  8876  1712  0086               	movwf	6
  8877  1713  3001               	movlw	1	; select bank3/4
  8878  1714  0087               	movwf	7
  8879  1715  0801               	movf	1,w
  8880  1716  0023               	movlb	3	; select bank3
  8881  1717  0093               	movwf	19	;volatile
  8882                           
  8883                           ;MCU_B1.c: 1020: Flash_Memory_Unlock();
  8884  1718  3193  232B  3196   	fcall	_Flash_Memory_Unlock
  8885  171B  3001               	movlw	1
  8886  171C  0020               	movlb	0	; select bank0
  8887  171D  00A0               	movwf	??_Flash_Memory_Write
  8888  171E  0820               	movf	??_Flash_Memory_Write,w
  8889  171F  07A1               	addwf	Flash_Memory_Write@i,f
  8890  1720  3020               	movlw	32
  8891  1721  0221               	subwf	Flash_Memory_Write@i,w
  8892  1722  1C03               	skipc
  8893  1723  2F0C               	goto	l7027
  8894  1724                     l976:	
  8895                           
  8896                           ;MCU_B1.c: 1021: }
  8897                           ;MCU_B1.c: 1022: LWLO = 0;
  8898  1724  0023               	movlb	3	; select bank3
  8899  1725  1295               	bcf	21,5	;volatile
  8900                           
  8901                           ;MCU_B1.c: 1023: Flash_Memory_Unlock();
  8902  1726  3193  232B         	fcall	_Flash_Memory_Unlock
  8903                           
  8904                           ;MCU_B1.c: 1024: WREN = 0;
  8905  1728  0023               	movlb	3	; select bank3
  8906  1729  1115               	bcf	21,2	;volatile
  8907  172A  0008               	return
  8908  172B                     __end_of_Flash_Memory_Write:	
  8909                           
  8910                           	psect	text49
  8911  132B                     __ptext49:	
  8912 ;; *************** function _Flash_Memory_Unlock *****************
  8913 ;; Defined at:
  8914 ;;		line 988 in file "../src/MCU_B1.c"
  8915 ;; Parameters:    Size  Location     Type
  8916 ;;		None
  8917 ;; Auto vars:     Size  Location     Type
  8918 ;;		None
  8919 ;; Return value:  Size  Location     Type
  8920 ;;		None               void
  8921 ;; Registers used:
  8922 ;;		wreg
  8923 ;; Tracked objects:
  8924 ;;		On entry : 0/0
  8925 ;;		On exit  : 0/0
  8926 ;;		Unchanged: 0/0
  8927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;Total ram usage:        0 bytes
  8933 ;; Hardware stack levels used:    1
  8934 ;; Hardware stack levels required when called:    5
  8935 ;; This function calls:
  8936 ;;		Nothing
  8937 ;; This function is called by:
  8938 ;;		_Flash_Memory_Write
  8939 ;;		_Flash_Memory_Erasing
  8940 ;; This function uses a non-reentrant model
  8941 ;;
  8942                           
  8943                           
  8944                           ;psect for function _Flash_Memory_Unlock
  8945  132B                     _Flash_Memory_Unlock:	
  8946                           
  8947                           ;MCU_B1.c: 989: PMCON2 = 0x55;
  8948                           
  8949                           ;incstack = 0
  8950                           ; Regs used in _Flash_Memory_Unlock: [wreg]
  8951  132B  3055               	movlw	85
  8952  132C  0023               	movlb	3	; select bank3
  8953  132D  0096               	movwf	22	;volatile
  8954                           
  8955                           ;MCU_B1.c: 990: PMCON2 = 0xaa;
  8956  132E  30AA               	movlw	170
  8957  132F  0096               	movwf	22	;volatile
  8958                           
  8959                           ;MCU_B1.c: 991: WR = 1;
  8960  1330  1495               	bsf	21,1	;volatile
  8961                           
  8962                           ;MCU_B1.c: 992: __nop();
  8963  1331  0000               	nop
  8964                           
  8965                           ;MCU_B1.c: 993: __nop();
  8966  1332  0000               	nop
  8967  1333  0008               	return
  8968  1334                     __end_of_Flash_Memory_Unlock:	
  8969                           
  8970                           	psect	text50
  8971  1524                     __ptext50:	
  8972 ;; *************** function _Flash_Memory_Read *****************
  8973 ;; Defined at:
  8974 ;;		line 997 in file "../src/MCU_B1.c"
  8975 ;; Parameters:    Size  Location     Type
  8976 ;;  address         1    wreg     unsigned char 
  8977 ;; Auto vars:     Size  Location     Type
  8978 ;;  address         1    2[BANK0 ] unsigned char 
  8979 ;;  ret             1    3[BANK0 ] unsigned char 
  8980 ;;  i               1    1[BANK0 ] unsigned char 
  8981 ;; Return value:  Size  Location     Type
  8982 ;;                  1    wreg      unsigned char 
  8983 ;; Registers used:
  8984 ;;		wreg, status,2
  8985 ;; Tracked objects:
  8986 ;;		On entry : 0/0
  8987 ;;		On exit  : 0/0
  8988 ;;		Unchanged: 0/0
  8989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8993 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8994 ;;Total ram usage:        4 bytes
  8995 ;; Hardware stack levels used:    1
  8996 ;; Hardware stack levels required when called:    5
  8997 ;; This function calls:
  8998 ;;		Nothing
  8999 ;; This function is called by:
  9000 ;;		_Flash_Memory_Initialization
  9001 ;;		_Flash_Memory_Modify
  9002 ;; This function uses a non-reentrant model
  9003 ;;
  9004                           
  9005                           
  9006                           ;psect for function _Flash_Memory_Read
  9007  1524                     _Flash_Memory_Read:	
  9008                           
  9009                           ;incstack = 0
  9010                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
  9011                           ;Flash_Memory_Read@address stored from wreg
  9012  1524  0020               	movlb	0	; select bank0
  9013  1525  00A2               	movwf	Flash_Memory_Read@address
  9014                           
  9015                           ;MCU_B1.c: 998: char i = 0, ret = 0;
  9016  1526  01A1               	clrf	Flash_Memory_Read@i
  9017  1527  01A3               	clrf	Flash_Memory_Read@ret
  9018                           
  9019                           ;MCU_B1.c: 999: PMADRH = 0x30;
  9020  1528  3030               	movlw	48
  9021  1529  0023               	movlb	3	; select bank3
  9022  152A  0092               	movwf	18	;volatile
  9023                           
  9024                           ;MCU_B1.c: 1000: PMADRL = address;
  9025  152B  0020               	movlb	0	; select bank0
  9026  152C  0822               	movf	Flash_Memory_Read@address,w
  9027  152D  0023               	movlb	3	; select bank3
  9028  152E  0091               	movwf	17	;volatile
  9029                           
  9030                           ;MCU_B1.c: 1001: CFGS = 0;
  9031  152F  1315               	bcf	21,6	;volatile
  9032                           
  9033                           ;MCU_B1.c: 1002: RD = 1;
  9034  1530  1415               	bsf	21,0	;volatile
  9035                           
  9036                           ;MCU_B1.c: 1003: i = PMDATH;
  9037  1531  0814               	movf	20,w	;volatile
  9038  1532  0020               	movlb	0	; select bank0
  9039  1533  00A0               	movwf	??_Flash_Memory_Read
  9040  1534  0820               	movf	??_Flash_Memory_Read,w
  9041  1535  00A1               	movwf	Flash_Memory_Read@i
  9042                           
  9043                           ;MCU_B1.c: 1004: ret = PMDATL;
  9044  1536  0023               	movlb	3	; select bank3
  9045  1537  0813               	movf	19,w	;volatile
  9046  1538  0020               	movlb	0	; select bank0
  9047  1539  00A0               	movwf	??_Flash_Memory_Read
  9048  153A  0820               	movf	??_Flash_Memory_Read,w
  9049  153B  00A3               	movwf	Flash_Memory_Read@ret
  9050                           
  9051                           ;MCU_B1.c: 1005: return ret;
  9052  153C  0823               	movf	Flash_Memory_Read@ret,w
  9053  153D  0008               	return
  9054  153E                     __end_of_Flash_Memory_Read:	
  9055                           
  9056                           	psect	text51
  9057  054C                     __ptext51:	
  9058 ;; *************** function _Exception_Main *****************
  9059 ;; Defined at:
  9060 ;;		line 523 in file "../src/Main_B1.c"
  9061 ;; Parameters:    Size  Location     Type
  9062 ;;		None
  9063 ;; Auto vars:     Size  Location     Type
  9064 ;;  i               2    4[BANK1 ] int 
  9065 ;;  i               2    2[BANK1 ] int 
  9066 ;;  lights          1    6[BANK1 ] unsigned char 
  9067 ;;  error           1    1[BANK1 ] unsigned char 
  9068 ;;  count           1    0[BANK1 ] unsigned char 
  9069 ;; Return value:  Size  Location     Type
  9070 ;;		None               void
  9071 ;; Registers used:
  9072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9073 ;; Tracked objects:
  9074 ;;		On entry : 0/0
  9075 ;;		On exit  : 0/0
  9076 ;;		Unchanged: 0/0
  9077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;Total ram usage:        8 bytes
  9083 ;; Hardware stack levels used:    1
  9084 ;; Hardware stack levels required when called:    9
  9085 ;; This function calls:
  9086 ;;		_getDimmerLights_Line
  9087 ;;		_getDimmerLights_Status
  9088 ;;		_getMain_All_Error_Status
  9089 ;;		_getMain_LightsStatus
  9090 ;;		_setBuz
  9091 ;;		_setDimmerLights_SwOff
  9092 ;;		_setLED
  9093 ;; This function is called by:
  9094 ;;		_main
  9095 ;; This function uses a non-reentrant model
  9096 ;;
  9097                           
  9098                           
  9099                           ;psect for function _Exception_Main
  9100  054C                     _Exception_Main:	
  9101                           
  9102                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
  9103                           
  9104                           ;incstack = 0
  9105                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9106  054C  3000               	movlw	0
  9107  054D  3197  275C  3185   	fcall	_getMain_All_Error_Status
  9108  0550  0020               	movlb	0	; select bank0
  9109  0551  00ED               	movwf	??_Exception_Main
  9110  0552  086D               	movf	??_Exception_Main,w
  9111  0553  0021               	movlb	1	; select bank1
  9112  0554  00EA               	movwf	Exception_Main@error^(0+128)
  9113                           
  9114                           ;Main_B1.c: 525: char lights = 0, count = 2;
  9115  0555  01EF               	clrf	Exception_Main@lights^(0+128)
  9116  0556  3002               	movlw	2
  9117  0557  0020               	movlb	0	; select bank0
  9118  0558  00ED               	movwf	??_Exception_Main
  9119  0559  086D               	movf	??_Exception_Main,w
  9120  055A  0021               	movlb	1	; select bank1
  9121  055B  00E9               	movwf	Exception_Main@count^(0+128)
  9122                           
  9123                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
  9124  055C  1DAB               	btfss	(_myMain^(0+128)+11),3
  9125  055D  2D6B               	goto	l7937
  9126                           
  9127                           ;Main_B1.c: 527: if (error == 0) {
  9128  055E  08EA               	movf	Exception_Main@error^(0+128),f
  9129  055F  1D03               	skipz
  9130  0560  0008               	return
  9131                           
  9132                           ;Main_B1.c: 528: myMain.Error_Run = 0;
  9133  0561  11AB               	bcf	(_myMain^(0+128)+11),3
  9134                           
  9135                           ;Main_B1.c: 533: setLED(99, 10);
  9136  0562  300A               	movlw	10
  9137  0563  0020               	movlb	0	; select bank0
  9138  0564  00ED               	movwf	??_Exception_Main
  9139  0565  086D               	movf	??_Exception_Main,w
  9140  0566  00A2               	movwf	setLED@command
  9141  0567  3063               	movlw	99
  9142  0568  3189  216F         	fcall	_setLED
  9143                           
  9144                           ;Main_B1.c: 535: }
  9145                           ;Main_B1.c: 536: } else {
  9146  056A  0008               	return
  9147  056B                     l7937:	
  9148                           
  9149                           ;Main_B1.c: 537: if (error != 0) {
  9150  056B  0021               	movlb	1	; select bank1
  9151  056C  086A               	movf	Exception_Main@error^(0+128),w
  9152  056D  1903               	btfsc	3,2
  9153  056E  0008               	return
  9154                           
  9155                           ;Main_B1.c: 538: myMain.Error_Run = 1;
  9156  056F  15AB               	bsf	(_myMain^(0+128)+11),3
  9157                           
  9158                           ;Main_B1.c: 541: setLED(99, 11);
  9159  0570  300B               	movlw	11
  9160  0571  0020               	movlb	0	; select bank0
  9161  0572  00ED               	movwf	??_Exception_Main
  9162  0573  086D               	movf	??_Exception_Main,w
  9163  0574  00A2               	movwf	setLED@command
  9164  0575  3063               	movlw	99
  9165  0576  3189  216F  3185   	fcall	_setLED
  9166                           
  9167                           ;Main_B1.c: 543: switch (error) {
  9168  0579  2E21               	goto	l7985
  9169  057A                     l7943:	
  9170                           ;Main_B1.c: 544: case 2:
  9171                           
  9172                           
  9173                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
  9174  057A  3194  2458  3185   	fcall	_getMain_LightsStatus
  9175  057D  3A01               	xorlw	1
  9176  057E  1D03               	skipz
  9177  057F  2D89               	goto	l7947
  9178                           
  9179                           ;Main_B1.c: 546: setBuz(10, 300);
  9180  0580  302C               	movlw	44
  9181  0581  0020               	movlb	0	; select bank0
  9182  0582  00A9               	movwf	setBuz@time
  9183  0583  3001               	movlw	1
  9184  0584  00AA               	movwf	setBuz@time+1
  9185  0585  300A               	movlw	10
  9186  0586  318B  234D  3185   	fcall	_setBuz
  9187  0589                     l7947:	
  9188                           
  9189                           ;Main_B1.c: 547: }
  9190                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
  9191  0589  0021               	movlb	1	; select bank1
  9192  058A  01EB               	clrf	Exception_Main@i^(0+128)
  9193  058B  01EC               	clrf	(Exception_Main@i+1)^(0+128)
  9194  058C                     l7957:	
  9195  058C  086C               	movf	(Exception_Main@i+1)^(0+128),w
  9196  058D  3A80               	xorlw	128
  9197  058E  0020               	movlb	0	; select bank0
  9198  058F  00ED               	movwf	??_Exception_Main
  9199  0590  3080               	movlw	128
  9200  0591  026D               	subwf	??_Exception_Main,w
  9201  0592  1D03               	skipz
  9202  0593  2D97               	goto	u9705
  9203  0594  0021               	movlb	1	; select bank1
  9204  0595  0869               	movf	Exception_Main@count^(0+128),w
  9205  0596  026B               	subwf	Exception_Main@i^(0+128),w
  9206  0597                     u9705:	
  9207  0597  1803               	btfsc	3,0
  9208  0598  2DBB               	goto	u9700
  9209                           
  9210                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
  9211  0599  0021               	movlb	1	; select bank1
  9212  059A  086B               	movf	Exception_Main@i^(0+128),w
  9213  059B  3E01               	addlw	1
  9214  059C  3193  23EB  3185   	fcall	_getDimmerLights_Status
  9215  059F  3A01               	xorlw	1
  9216  05A0  1D03               	skipz
  9217  05A1  2DB5               	goto	l7955
  9218                           
  9219                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
  9220  05A2  0020               	movlb	0	; select bank0
  9221  05A3  086F               	movf	_DimmerLights,w
  9222  05A4  3E0B               	addlw	11
  9223  05A5  0086               	movwf	6
  9224  05A6  3001               	movlw	1	; select bank2/3
  9225  05A7  0087               	movwf	7
  9226  05A8  1481               	bsf	1,1
  9227                           
  9228                           ;Main_B1.c: 553: DimmerLights->Status = 0;
  9229  05A9  086F               	movf	_DimmerLights,w
  9230  05AA  3E02               	addlw	2
  9231  05AB  0086               	movwf	6
  9232  05AC  3001               	movlw	1	; select bank2/3
  9233  05AD  0087               	movwf	7
  9234  05AE  1081               	bcf	1,1
  9235                           
  9236                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
  9237  05AF  0021               	movlb	1	; select bank1
  9238  05B0  086B               	movf	Exception_Main@i^(0+128),w
  9239  05B1  3E01               	addlw	1
  9240  05B2  318A  2258  3185   	fcall	_setDimmerLights_SwOff
  9241  05B5                     l7955:	
  9242  05B5  3001               	movlw	1
  9243  05B6  0021               	movlb	1	; select bank1
  9244  05B7  07EB               	addwf	Exception_Main@i^(0+128),f
  9245  05B8  3000               	movlw	0
  9246  05B9  3DEC               	addwfc	(Exception_Main@i+1)^(0+128),f
  9247  05BA  2D8C               	goto	l7957
  9248  05BB                     u9700:	
  9249  05BB  0021               	movlb	1	; select bank1
  9250  05BC  0008               	return
  9251  05BD                     l7959:	
  9252                           ;Main_B1.c: 558: case 3:
  9253                           
  9254                           ;Main_B1.c: 555: }
  9255                           ;Main_B1.c: 556: }
  9256                           ;Main_B1.c: 557: break;
  9257                           
  9258                           
  9259                           ;Main_B1.c: 560: setBuz(5, 300);
  9260  05BD  302C               	movlw	44
  9261  05BE  0020               	movlb	0	; select bank0
  9262  05BF  00A9               	movwf	setBuz@time
  9263  05C0  3001               	movlw	1
  9264  05C1  00AA               	movwf	setBuz@time+1
  9265  05C2  3005               	movlw	5
  9266  05C3  318B  234D  3185   	fcall	_setBuz
  9267                           
  9268                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
  9269  05C6  3194  246B  3185   	fcall	_getDimmerLights_Line
  9270  05C9  0020               	movlb	0	; select bank0
  9271  05CA  00ED               	movwf	??_Exception_Main
  9272  05CB  086D               	movf	??_Exception_Main,w
  9273  05CC  0021               	movlb	1	; select bank1
  9274  05CD  00EF               	movwf	Exception_Main@lights^(0+128)
  9275                           
  9276                           ;Main_B1.c: 562: if (lights == 0) {
  9277  05CE  08EF               	movf	Exception_Main@lights^(0+128),f
  9278  05CF  1D03               	skipz
  9279  05D0  2E04               	goto	l7977
  9280                           
  9281                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
  9282  05D1  01ED               	clrf	Exception_Main@i_3142^(0+128)
  9283  05D2  01EE               	clrf	(Exception_Main@i_3142+1)^(0+128)
  9284  05D3                     l7975:	
  9285  05D3  086E               	movf	(Exception_Main@i_3142+1)^(0+128),w
  9286  05D4  3A80               	xorlw	128
  9287  05D5  0020               	movlb	0	; select bank0
  9288  05D6  00ED               	movwf	??_Exception_Main
  9289  05D7  3080               	movlw	128
  9290  05D8  026D               	subwf	??_Exception_Main,w
  9291  05D9  1D03               	skipz
  9292  05DA  2DDE               	goto	u9735
  9293  05DB  0021               	movlb	1	; select bank1
  9294  05DC  0869               	movf	Exception_Main@count^(0+128),w
  9295  05DD  026D               	subwf	Exception_Main@i_3142^(0+128),w
  9296  05DE                     u9735:	
  9297  05DE  1803               	btfsc	3,0
  9298  05DF  2E02               	goto	u9730
  9299                           
  9300                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
  9301  05E0  0021               	movlb	1	; select bank1
  9302  05E1  086D               	movf	Exception_Main@i_3142^(0+128),w
  9303  05E2  3E01               	addlw	1
  9304  05E3  3193  23EB  3185   	fcall	_getDimmerLights_Status
  9305  05E6  3A01               	xorlw	1
  9306  05E7  1D03               	skipz
  9307  05E8  2DFC               	goto	l7973
  9308                           
  9309                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
  9310  05E9  0020               	movlb	0	; select bank0
  9311  05EA  086F               	movf	_DimmerLights,w
  9312  05EB  3E0B               	addlw	11
  9313  05EC  0086               	movwf	6
  9314  05ED  3001               	movlw	1	; select bank2/3
  9315  05EE  0087               	movwf	7
  9316  05EF  1481               	bsf	1,1
  9317                           
  9318                           ;Main_B1.c: 568: DimmerLights->Status = 0;
  9319  05F0  086F               	movf	_DimmerLights,w
  9320  05F1  3E02               	addlw	2
  9321  05F2  0086               	movwf	6
  9322  05F3  3001               	movlw	1	; select bank2/3
  9323  05F4  0087               	movwf	7
  9324  05F5  1081               	bcf	1,1
  9325                           
  9326                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
  9327  05F6  0021               	movlb	1	; select bank1
  9328  05F7  086D               	movf	Exception_Main@i_3142^(0+128),w
  9329  05F8  3E01               	addlw	1
  9330  05F9  318A  2258  3185   	fcall	_setDimmerLights_SwOff
  9331  05FC                     l7973:	
  9332  05FC  3001               	movlw	1
  9333  05FD  0021               	movlb	1	; select bank1
  9334  05FE  07ED               	addwf	Exception_Main@i_3142^(0+128),f
  9335  05FF  3000               	movlw	0
  9336  0600  3DEE               	addwfc	(Exception_Main@i_3142+1)^(0+128),f
  9337  0601  2DD3               	goto	l7975
  9338  0602                     u9730:	
  9339  0602  0021               	movlb	1	; select bank1
  9340  0603  0008               	return
  9341  0604                     l7977:	
  9342                           ;Main_B1.c: 570: }
  9343                           ;Main_B1.c: 571: }
  9344                           ;Main_B1.c: 572: } else {
  9345                           
  9346                           
  9347                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
  9348  0604  0021               	movlb	1	; select bank1
  9349  0605  086F               	movf	Exception_Main@lights^(0+128),w
  9350  0606  3193  23EB  3185   	fcall	_getDimmerLights_Status
  9351  0609  3A01               	xorlw	1
  9352  060A  1903               	btfsc	3,2
  9353  060B  2E0E               	goto	l7979
  9354  060C  0021               	movlb	1	; select bank1
  9355  060D  0008               	return
  9356  060E                     l7979:	
  9357                           
  9358                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
  9359  060E  0020               	movlb	0	; select bank0
  9360  060F  086F               	movf	_DimmerLights,w
  9361  0610  3E0B               	addlw	11
  9362  0611  0086               	movwf	6
  9363  0612  3001               	movlw	1	; select bank2/3
  9364  0613  0087               	movwf	7
  9365  0614  1481               	bsf	1,1
  9366                           
  9367                           ;Main_B1.c: 577: DimmerLights->Status = 0;
  9368  0615  086F               	movf	_DimmerLights,w
  9369  0616  3E02               	addlw	2
  9370  0617  0086               	movwf	6
  9371  0618  3001               	movlw	1	; select bank2/3
  9372  0619  0087               	movwf	7
  9373  061A  1081               	bcf	1,1
  9374                           
  9375                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
  9376  061B  0021               	movlb	1	; select bank1
  9377  061C  086F               	movf	Exception_Main@lights^(0+128),w
  9378  061D  318A  2258         	fcall	_setDimmerLights_SwOff
  9379  061F  0021               	movlb	1	; select bank1
  9380  0620  0008               	return
  9381  0621                     l7985:	
  9382                           ;Main_B1.c: 582: }
  9383                           
  9384                           ;Main_B1.c: 579: }
  9385                           ;Main_B1.c: 580: }
  9386                           ;Main_B1.c: 581: break;
  9387                           
  9388  0621  0021               	movlb	1	; select bank1
  9389  0622  086A               	movf	Exception_Main@error^(0+128),w
  9390                           
  9391                           ; Switch size 1, requested type "space"
  9392                           ; Number of cases is 2, Range of values is 2 to 3
  9393                           ; switch strategies available:
  9394                           ; Name         Instructions Cycles
  9395                           ; simple_byte            7     4 (average)
  9396                           ; direct_byte           13     9 (fixed)
  9397                           ; jumptable            263     9 (fixed)
  9398                           ;	Chosen strategy is simple_byte
  9399  0623  3A02               	xorlw	2	; case 2
  9400  0624  1903               	skipnz
  9401  0625  2D7A               	goto	l7943
  9402  0626  3A01               	xorlw	1	; case 3
  9403  0627  1903               	skipnz
  9404  0628  2DBD               	goto	l7959
  9405  0629  2E2B               	goto	l1202
  9406  062A  0008               	return
  9407  062B                     l1202:	
  9408  062B  0008               	return
  9409  062C                     __end_of_Exception_Main:	
  9410                           
  9411                           	psect	text52
  9412  146B                     __ptext52:	
  9413 ;; *************** function _getDimmerLights_Line *****************
  9414 ;; Defined at:
  9415 ;;		line 744 in file "../src/Dimmer_B1.c"
  9416 ;; Parameters:    Size  Location     Type
  9417 ;;		None
  9418 ;; Auto vars:     Size  Location     Type
  9419 ;;  line            1    1[BANK0 ] unsigned char 
  9420 ;; Return value:  Size  Location     Type
  9421 ;;                  1    wreg      unsigned char 
  9422 ;; Registers used:
  9423 ;;		wreg, status,2
  9424 ;; Tracked objects:
  9425 ;;		On entry : 0/0
  9426 ;;		On exit  : 0/0
  9427 ;;		Unchanged: 0/0
  9428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9430 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9431 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9432 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;Total ram usage:        2 bytes
  9434 ;; Hardware stack levels used:    1
  9435 ;; Hardware stack levels required when called:    5
  9436 ;; This function calls:
  9437 ;;		Nothing
  9438 ;; This function is called by:
  9439 ;;		_Exception_Main
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           
  9444                           ;psect for function _getDimmerLights_Line
  9445  146B                     _getDimmerLights_Line:	
  9446                           
  9447                           ;Dimmer_B1.c: 745: char line = 0;
  9448                           
  9449                           ;incstack = 0
  9450                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  9451  146B  0020               	movlb	0	; select bank0
  9452  146C  01A1               	clrf	getDimmerLights_Line@line
  9453                           
  9454                           ;Dimmer_B1.c: 747: if (DimmerLights1.Line == 1) {
  9455  146D  0022               	movlb	2	; select bank2
  9456  146E  1F58               	btfss	(_DimmerLights1^(0+256)+10),6
  9457  146F  2C74               	goto	l544
  9458                           
  9459                           ;Dimmer_B1.c: 748: line = 1;
  9460  1470  0020               	movlb	0	; select bank0
  9461  1471  01A1               	clrf	getDimmerLights_Line@line
  9462  1472  0AA1               	incf	getDimmerLights_Line@line,f
  9463                           
  9464                           ;Dimmer_B1.c: 749: }
  9465  1473  2C7B               	goto	l545
  9466  1474                     l544:	
  9467                           
  9468                           ;Dimmer_B1.c: 752: else if (DimmerLights2.Line == 1) {
  9469  1474  1F69               	btfss	(_DimmerLights2^(0+256)+10),6
  9470  1475  2C7B               	goto	l545
  9471                           
  9472                           ;Dimmer_B1.c: 753: line = 2;
  9473  1476  3002               	movlw	2
  9474  1477  0020               	movlb	0	; select bank0
  9475  1478  00A0               	movwf	??_getDimmerLights_Line
  9476  1479  0820               	movf	??_getDimmerLights_Line,w
  9477  147A  00A1               	movwf	getDimmerLights_Line@line
  9478  147B                     l545:	
  9479                           
  9480                           ;Dimmer_B1.c: 754: }
  9481                           ;Dimmer_B1.c: 761: return line;
  9482  147B  0020               	movlb	0	; select bank0
  9483  147C  0821               	movf	getDimmerLights_Line@line,w
  9484  147D  0008               	return
  9485  147E                     __end_of_getDimmerLights_Line:	
  9486                           
  9487                           	psect	text53
  9488  15CD                     __ptext53:	
  9489 ;; *************** function _DimmerLights_Main *****************
  9490 ;; Defined at:
  9491 ;;		line 502 in file "../src/Dimmer_B1.c"
  9492 ;; Parameters:    Size  Location     Type
  9493 ;;		None
  9494 ;; Auto vars:     Size  Location     Type
  9495 ;;		None
  9496 ;; Return value:  Size  Location     Type
  9497 ;;		None               void
  9498 ;; Registers used:
  9499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9500 ;; Tracked objects:
  9501 ;;		On entry : 0/0
  9502 ;;		On exit  : 0/0
  9503 ;;		Unchanged: 0/0
  9504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9509 ;;Total ram usage:        0 bytes
  9510 ;; Hardware stack levels used:    1
  9511 ;; Hardware stack levels required when called:   10
  9512 ;; This function calls:
  9513 ;;		_getLoad_OK
  9514 ;;		_getMain_All_Error_Status
  9515 ;;		_getMain_LightsStatus
  9516 ;;		_setDimmerLights_Main
  9517 ;; This function is called by:
  9518 ;;		_main
  9519 ;; This function uses a non-reentrant model
  9520 ;;
  9521                           
  9522                           
  9523                           ;psect for function _DimmerLights_Main
  9524  15CD                     _DimmerLights_Main:	
  9525                           
  9526                           ;Dimmer_B1.c: 514: if (Dimmer.LoadGO == 1) {
  9527                           
  9528                           ;incstack = 0
  9529                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9530  15CD  0021               	movlb	1	; select bank1
  9531  15CE  1D3A               	btfss	_Dimmer^(0+128),2	;volatile
  9532  15CF  2DE5               	goto	l7577
  9533                           
  9534                           ;Dimmer_B1.c: 515: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
  9535  15D0  3193  2302  3195   	fcall	_getLoad_OK
  9536  15D3  3A01               	xorlw	1
  9537  15D4  1903               	skipnz
  9538  15D5  2DE3               	goto	l491
  9539  15D6  3000               	movlw	0
  9540  15D7  3197  275C  3195   	fcall	_getMain_All_Error_Status
  9541  15DA  3800               	iorlw	0
  9542  15DB  1D03               	skipz
  9543  15DC  2DE3               	goto	l491
  9544  15DD  3194  2458  3195   	fcall	_getMain_LightsStatus
  9545  15E0  3800               	iorlw	0
  9546  15E1  1D03               	skipz
  9547  15E2  2DE5               	goto	l7577
  9548  15E3                     l491:	
  9549                           
  9550                           ;Dimmer_B1.c: 516: Dimmer.LoadGO = 0;
  9551  15E3  0021               	movlb	1	; select bank1
  9552  15E4  113A               	bcf	_Dimmer^(0+128),2	;volatile
  9553  15E5                     l7577:	
  9554                           
  9555                           ;Dimmer_B1.c: 517: }
  9556                           ;Dimmer_B1.c: 518: }
  9557                           ;Dimmer_B1.c: 522: setDimmerLights_Main(1);
  9558  15E5  3001               	movlw	1
  9559  15E6  318D  25E2  3195   	fcall	_setDimmerLights_Main
  9560                           
  9561                           ;Dimmer_B1.c: 526: setDimmerLights_Main(2);
  9562  15E9  3002               	movlw	2
  9563  15EA  318D  25E2         	fcall	_setDimmerLights_Main
  9564  15EC  0008               	return
  9565  15ED                     __end_of_DimmerLights_Main:	
  9566                           
  9567                           	psect	text54
  9568  0DE2                     __ptext54:	
  9569 ;; *************** function _setDimmerLights_Main *****************
  9570 ;; Defined at:
  9571 ;;		line 536 in file "../src/Dimmer_B1.c"
  9572 ;; Parameters:    Size  Location     Type
  9573 ;;  lights          1    wreg     unsigned char 
  9574 ;; Auto vars:     Size  Location     Type
  9575 ;;  lights          1   73[BANK0 ] unsigned char 
  9576 ;; Return value:  Size  Location     Type
  9577 ;;		None               void
  9578 ;; Registers used:
  9579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9580 ;; Tracked objects:
  9581 ;;		On entry : 0/0
  9582 ;;		On exit  : 0/0
  9583 ;;		Unchanged: 0/0
  9584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;Total ram usage:        1 bytes
  9590 ;; Hardware stack levels used:    1
  9591 ;; Hardware stack levels required when called:    9
  9592 ;; This function calls:
  9593 ;;		_DimmerLightsPointSelect
  9594 ;;		_getDimmerLights_Allow_Condition
  9595 ;;		_getMain_LightsStatus
  9596 ;;		_setDimmerLights
  9597 ;;		_setDimmerLights_Adj
  9598 ;; This function is called by:
  9599 ;;		_DimmerLights_Main
  9600 ;; This function uses a non-reentrant model
  9601 ;;
  9602                           
  9603                           
  9604                           ;psect for function _setDimmerLights_Main
  9605  0DE2                     _setDimmerLights_Main:	
  9606                           
  9607                           ;incstack = 0
  9608                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9609                           ;setDimmerLights_Main@lights stored from wreg
  9610  0DE2  0020               	movlb	0	; select bank0
  9611  0DE3  00E9               	movwf	setDimmerLights_Main@lights
  9612                           
  9613                           ;Dimmer_B1.c: 537: DimmerLightsPointSelect(lights);
  9614  0DE4  0869               	movf	setDimmerLights_Main@lights,w
  9615  0DE5  3194  2445  318D   	fcall	_DimmerLightsPointSelect
  9616                           
  9617                           ;Dimmer_B1.c: 539: if (DimmerLights->Trigger == 1) {
  9618  0DE8  0020               	movlb	0	; select bank0
  9619  0DE9  086F               	movf	_DimmerLights,w
  9620  0DEA  3E0A               	addlw	10
  9621  0DEB  0086               	movwf	6
  9622  0DEC  3001               	movlw	1	; select bank2/3
  9623  0DED  0087               	movwf	7
  9624  0DEE  1C81               	btfss	1,1
  9625  0DEF  2E11               	goto	l7135
  9626                           
  9627                           ;Dimmer_B1.c: 540: if (getDimmerLights_Allow_Condition(lights) == 0) {
  9628  0DF0  0869               	movf	setDimmerLights_Main@lights,w
  9629  0DF1  3197  27C6  318D   	fcall	_getDimmerLights_Allow_Condition
  9630  0DF4  3800               	iorlw	0
  9631  0DF5  1D03               	skipz
  9632  0DF6  0008               	return
  9633                           
  9634                           ;Dimmer_B1.c: 541: DimmerLights->Trigger = 0;
  9635  0DF7  0020               	movlb	0	; select bank0
  9636  0DF8  086F               	movf	_DimmerLights,w
  9637  0DF9  3E0A               	addlw	10
  9638  0DFA  0086               	movwf	6
  9639  0DFB  3001               	movlw	1	; select bank2/3
  9640  0DFC  0087               	movwf	7
  9641  0DFD  1081               	bcf	1,1
  9642                           
  9643                           ;Dimmer_B1.c: 542: if (DimmerLights->Switch == 1) {
  9644  0DFE  086F               	movf	_DimmerLights,w
  9645  0DFF  3E0A               	addlw	10
  9646  0E00  0086               	movwf	6
  9647  0E01  3001               	movlw	1	; select bank2/3
  9648  0E02  0087               	movwf	7
  9649  0E03  1C01               	btfss	1,0
  9650  0E04  2E0B               	goto	l7133
  9651                           
  9652                           ;Dimmer_B1.c: 543: setDimmerLights(lights, 1);
  9653  0E05  01E6               	clrf	setDimmerLights@status
  9654  0E06  0AE6               	incf	setDimmerLights@status,f
  9655  0E07  0869               	movf	setDimmerLights_Main@lights,w
  9656  0E08  3187  27B8         	fcall	_setDimmerLights
  9657                           
  9658                           ;Dimmer_B1.c: 544: } else {
  9659  0E0A  0008               	return
  9660  0E0B                     l7133:	
  9661                           
  9662                           ;Dimmer_B1.c: 545: setDimmerLights(lights, 0);
  9663  0E0B  0020               	movlb	0	; select bank0
  9664  0E0C  01E6               	clrf	setDimmerLights@status
  9665  0E0D  0869               	movf	setDimmerLights_Main@lights,w
  9666  0E0E  3187  27B8         	fcall	_setDimmerLights
  9667                           
  9668                           ;Dimmer_B1.c: 546: }
  9669                           ;Dimmer_B1.c: 547: }
  9670                           ;Dimmer_B1.c: 548: } else {
  9671  0E10  0008               	return
  9672  0E11                     l7135:	
  9673                           
  9674                           ;Dimmer_B1.c: 549: if (getMain_LightsStatus() == 1) {
  9675  0E11  3194  2458  318D   	fcall	_getMain_LightsStatus
  9676  0E14  3A01               	xorlw	1
  9677  0E15  1D03               	skipz
  9678  0E16  2E40               	goto	l7147
  9679                           
  9680                           ;Dimmer_B1.c: 550: if (DimmerLights->TriggerAdj == 1) {
  9681  0E17  0020               	movlb	0	; select bank0
  9682  0E18  086F               	movf	_DimmerLights,w
  9683  0E19  3E0A               	addlw	10
  9684  0E1A  0086               	movwf	6
  9685  0E1B  3001               	movlw	1	; select bank2/3
  9686  0E1C  0087               	movwf	7
  9687  0E1D  1D81               	btfss	1,3
  9688  0E1E  0008               	return
  9689                           
  9690                           ;Dimmer_B1.c: 551: if (getDimmerLights_Allow_Condition(lights) == 0) {
  9691  0E1F  0869               	movf	setDimmerLights_Main@lights,w
  9692  0E20  3197  27C6  318D   	fcall	_getDimmerLights_Allow_Condition
  9693  0E23  3800               	iorlw	0
  9694  0E24  1D03               	skipz
  9695  0E25  0008               	return
  9696                           
  9697                           ;Dimmer_B1.c: 552: DimmerLights->TriggerAdj = 0;
  9698  0E26  0020               	movlb	0	; select bank0
  9699  0E27  086F               	movf	_DimmerLights,w
  9700  0E28  3E0A               	addlw	10
  9701  0E29  0086               	movwf	6
  9702  0E2A  3001               	movlw	1	; select bank2/3
  9703  0E2B  0087               	movwf	7
  9704  0E2C  1181               	bcf	1,3
  9705                           
  9706                           ;Dimmer_B1.c: 553: if (DimmerLights->SwitchAdj == 1) {
  9707  0E2D  086F               	movf	_DimmerLights,w
  9708  0E2E  3E0A               	addlw	10
  9709  0E2F  0086               	movwf	6
  9710  0E30  3001               	movlw	1	; select bank2/3
  9711  0E31  0087               	movwf	7
  9712  0E32  1D01               	btfss	1,2
  9713  0E33  2E3A               	goto	l7145
  9714                           
  9715                           ;Dimmer_B1.c: 554: setDimmerLights_Adj(lights, 1);
  9716  0E34  01E6               	clrf	setDimmerLights_Adj@status
  9717  0E35  0AE6               	incf	setDimmerLights_Adj@status,f
  9718  0E36  0869               	movf	setDimmerLights_Main@lights,w
  9719  0E37  3189  21BC         	fcall	_setDimmerLights_Adj
  9720                           
  9721                           ;Dimmer_B1.c: 555: } else {
  9722  0E39  0008               	return
  9723  0E3A                     l7145:	
  9724                           
  9725                           ;Dimmer_B1.c: 556: setDimmerLights_Adj(lights, 0);
  9726  0E3A  0020               	movlb	0	; select bank0
  9727  0E3B  01E6               	clrf	setDimmerLights_Adj@status
  9728  0E3C  0869               	movf	setDimmerLights_Main@lights,w
  9729  0E3D  3189  21BC         	fcall	_setDimmerLights_Adj
  9730                           
  9731                           ;Dimmer_B1.c: 557: }
  9732                           ;Dimmer_B1.c: 558: }
  9733                           ;Dimmer_B1.c: 559: }
  9734                           ;Dimmer_B1.c: 560: } else {
  9735  0E3F  0008               	return
  9736  0E40                     l7147:	
  9737                           
  9738                           ;Dimmer_B1.c: 561: if (DimmerLights->TriggerAdj == 1) {
  9739  0E40  0020               	movlb	0	; select bank0
  9740  0E41  086F               	movf	_DimmerLights,w
  9741  0E42  3E0A               	addlw	10
  9742  0E43  0086               	movwf	6
  9743  0E44  3001               	movlw	1	; select bank2/3
  9744  0E45  0087               	movwf	7
  9745  0E46  1D81               	btfss	1,3
  9746  0E47  0008               	return
  9747                           
  9748                           ;Dimmer_B1.c: 562: DimmerLights->TriggerAdj = 0;
  9749  0E48  086F               	movf	_DimmerLights,w
  9750  0E49  3E0A               	addlw	10
  9751  0E4A  0086               	movwf	6
  9752  0E4B  3001               	movlw	1	; select bank2/3
  9753  0E4C  0087               	movwf	7
  9754  0E4D  1181               	bcf	1,3
  9755  0E4E  0008               	return
  9756  0E4F                     __end_of_setDimmerLights_Main:	
  9757                           
  9758                           	psect	text55
  9759  09BC                     __ptext55:	
  9760 ;; *************** function _setDimmerLights_Adj *****************
  9761 ;; Defined at:
  9762 ;;		line 680 in file "../src/Dimmer_B1.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;  lights          1    wreg     unsigned char 
  9765 ;;  status          1   70[BANK0 ] unsigned char 
  9766 ;; Auto vars:     Size  Location     Type
  9767 ;;  lights          1   72[BANK0 ] unsigned char 
  9768 ;; Return value:  Size  Location     Type
  9769 ;;		None               void
  9770 ;; Registers used:
  9771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9772 ;; Tracked objects:
  9773 ;;		On entry : 0/0
  9774 ;;		On exit  : 0/0
  9775 ;;		Unchanged: 0/0
  9776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9777 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9778 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9779 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;Total ram usage:        3 bytes
  9782 ;; Hardware stack levels used:    1
  9783 ;; Hardware stack levels required when called:    8
  9784 ;; This function calls:
  9785 ;;		_setBuz
  9786 ;;		_setDimmerLights_Line
  9787 ;;		_setPercentValue
  9788 ;;		_setProductData
  9789 ;; This function is called by:
  9790 ;;		_setDimmerLights_Main
  9791 ;; This function uses a non-reentrant model
  9792 ;;
  9793                           
  9794                           
  9795                           ;psect for function _setDimmerLights_Adj
  9796  09BC                     _setDimmerLights_Adj:	
  9797                           
  9798                           ;incstack = 0
  9799                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9800                           ;setDimmerLights_Adj@lights stored from wreg
  9801  09BC  0020               	movlb	0	; select bank0
  9802  09BD  00E8               	movwf	setDimmerLights_Adj@lights
  9803                           
  9804                           ;Dimmer_B1.c: 682: if (status == 1) {
  9805  09BE  0866               	movf	setDimmerLights_Adj@status,w
  9806  09BF  3A01               	xorlw	1
  9807  09C0  1D03               	skipz
  9808  09C1  29D4               	goto	l6961
  9809                           
  9810                           ;Dimmer_B1.c: 683: DimmerLights->AdjSw = 1;
  9811  09C2  0A6F               	incf	_DimmerLights,w
  9812  09C3  0086               	movwf	6
  9813  09C4  3001               	movlw	1	; select bank2/3
  9814  09C5  0087               	movwf	7
  9815  09C6  1701               	bsf	1,6
  9816                           
  9817                           ;Dimmer_B1.c: 684: DimmerLights->Signal = 1;
  9818  09C7  0A6F               	incf	_DimmerLights,w
  9819  09C8  0086               	movwf	6
  9820  09C9  3001               	movlw	1	; select bank2/3
  9821  09CA  0087               	movwf	7
  9822  09CB  1681               	bsf	1,5
  9823                           
  9824                           ;Dimmer_B1.c: 685: setBuz(1, 100);
  9825  09CC  3064               	movlw	100
  9826  09CD  00A9               	movwf	setBuz@time
  9827  09CE  3000               	movlw	0
  9828  09CF  00AA               	movwf	setBuz@time+1
  9829  09D0  3001               	movlw	1
  9830  09D1  318B  234D         	fcall	_setBuz
  9831                           
  9832                           ;Dimmer_B1.c: 686: } else if (status == 0) {
  9833  09D3  0008               	return
  9834  09D4                     l6961:	
  9835  09D4  0020               	movlb	0	; select bank0
  9836  09D5  08E6               	movf	setDimmerLights_Adj@status,f
  9837  09D6  1D03               	skipz
  9838  09D7  0008               	return
  9839                           
  9840                           ;Dimmer_B1.c: 687: Dimmer.Load_Status = 0;
  9841  09D8  0021               	movlb	1	; select bank1
  9842  09D9  11BA               	bcf	_Dimmer^(0+128),3	;volatile
  9843                           
  9844                           ;Dimmer_B1.c: 688: setDimmerLights_Line(lights);
  9845  09DA  0020               	movlb	0	; select bank0
  9846  09DB  0868               	movf	setDimmerLights_Adj@lights,w
  9847  09DC  3195  250D  3189   	fcall	_setDimmerLights_Line
  9848                           
  9849                           ;Dimmer_B1.c: 689: DimmerLights->AdjSw = 0;
  9850  09DF  0020               	movlb	0	; select bank0
  9851  09E0  0A6F               	incf	_DimmerLights,w
  9852  09E1  0086               	movwf	6
  9853  09E2  3001               	movlw	1	; select bank2/3
  9854  09E3  0087               	movwf	7
  9855  09E4  1301               	bcf	1,6
  9856                           
  9857                           ;Dimmer_B1.c: 690: DimmerLights->Signal = 0;
  9858  09E5  0A6F               	incf	_DimmerLights,w
  9859  09E6  0086               	movwf	6
  9860  09E7  3001               	movlw	1	; select bank2/3
  9861  09E8  0087               	movwf	7
  9862  09E9  1281               	bcf	1,5
  9863                           
  9864                           ;Dimmer_B1.c: 692: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
  9865  09EA  086F               	movf	_DimmerLights,w
  9866  09EB  3E04               	addlw	4
  9867  09EC  0086               	movwf	6
  9868  09ED  3001               	movlw	1	; select bank2/3
  9869  09EE  0087               	movwf	7
  9870  09EF  0801               	movf	1,w
  9871  09F0  00E7               	movwf	??_setDimmerLights_Adj
  9872  09F1  086F               	movf	_DimmerLights,w
  9873  09F2  3E06               	addlw	6
  9874  09F3  0086               	movwf	6
  9875  09F4  3001               	movlw	1	; select bank2/3
  9876  09F5  0087               	movwf	7
  9877  09F6  0867               	movf	??_setDimmerLights_Adj,w
  9878  09F7  0081               	movwf	1
  9879                           
  9880                           ;Dimmer_B1.c: 693: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
  9881  09F8  086F               	movf	_DimmerLights,w
  9882  09F9  3E04               	addlw	4
  9883  09FA  0086               	movwf	6
  9884  09FB  3001               	movlw	1	; select bank2/3
  9885  09FC  0087               	movwf	7
  9886  09FD  0801               	movf	1,w
  9887  09FE  318D  257D  3189   	fcall	_setPercentValue
  9888  0A01  0020               	movlb	0	; select bank0
  9889  0A02  00E7               	movwf	??_setDimmerLights_Adj
  9890  0A03  0867               	movf	??_setDimmerLights_Adj,w
  9891  0A04  00E2               	movwf	setProductData@value
  9892  0A05  0868               	movf	setDimmerLights_Adj@lights,w
  9893  0A06  3E14               	addlw	20
  9894  0A07  3193  239F         	fcall	_setProductData
  9895                           
  9896                           ;Dimmer_B1.c: 708: ;;
  9897                           ;Dimmer_B1.c: 709: ;;
  9898  0A09  0008               	return
  9899  0A0A                     __end_of_setDimmerLights_Adj:	
  9900                           
  9901                           	psect	text56
  9902  07B8                     __ptext56:	
  9903 ;; *************** function _setDimmerLights *****************
  9904 ;; Defined at:
  9905 ;;		line 638 in file "../src/Dimmer_B1.c"
  9906 ;; Parameters:    Size  Location     Type
  9907 ;;  lights          1    wreg     unsigned char 
  9908 ;;  status          1   70[BANK0 ] unsigned char 
  9909 ;; Auto vars:     Size  Location     Type
  9910 ;;  lights          1   72[BANK0 ] unsigned char 
  9911 ;; Return value:  Size  Location     Type
  9912 ;;		None               void
  9913 ;; Registers used:
  9914 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9915 ;; Tracked objects:
  9916 ;;		On entry : 0/0
  9917 ;;		On exit  : 0/0
  9918 ;;		Unchanged: 0/0
  9919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9920 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9923 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;Total ram usage:        3 bytes
  9925 ;; Hardware stack levels used:    1
  9926 ;; Hardware stack levels required when called:    8
  9927 ;; This function calls:
  9928 ;;		_setDimmerLights_Line
  9929 ;;		_setLED
  9930 ;;		_setPercentValue
  9931 ;;		_setProductData
  9932 ;; This function is called by:
  9933 ;;		_setDimmerLights_Main
  9934 ;; This function uses a non-reentrant model
  9935 ;;
  9936                           
  9937                           
  9938                           ;psect for function _setDimmerLights
  9939  07B8                     _setDimmerLights:	
  9940                           
  9941                           ;incstack = 0
  9942                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9943                           ;setDimmerLights@lights stored from wreg
  9944  07B8  0020               	movlb	0	; select bank0
  9945  07B9  00E8               	movwf	setDimmerLights@lights
  9946                           
  9947                           ;Dimmer_B1.c: 646: if (status == 1) {
  9948  07BA  0866               	movf	setDimmerLights@status,w
  9949  07BB  3A01               	xorlw	1
  9950  07BC  1D03               	skipz
  9951  07BD  2FE7               	goto	l6945
  9952                           
  9953                           ;Dimmer_B1.c: 647: DimmerLights->StatusFlag = 1;
  9954  07BE  0A6F               	incf	_DimmerLights,w
  9955  07BF  0086               	movwf	6
  9956  07C0  3001               	movlw	1	; select bank2/3
  9957  07C1  0087               	movwf	7
  9958  07C2  1501               	bsf	1,2
  9959                           
  9960                           ;Dimmer_B1.c: 650: Dimmer.Load_Status = 1;
  9961  07C3  0021               	movlb	1	; select bank1
  9962  07C4  15BA               	bsf	_Dimmer^(0+128),3	;volatile
  9963                           
  9964                           ;Dimmer_B1.c: 651: setDimmerLights_Line(lights);
  9965  07C5  0020               	movlb	0	; select bank0
  9966  07C6  0868               	movf	setDimmerLights@lights,w
  9967  07C7  3195  250D  3187   	fcall	_setDimmerLights_Line
  9968                           
  9969                           ;Dimmer_B1.c: 653: setLED(lights, 0);
  9970  07CA  0020               	movlb	0	; select bank0
  9971  07CB  01A2               	clrf	setLED@command
  9972  07CC  0868               	movf	setDimmerLights@lights,w
  9973  07CD  3189  216F  3187   	fcall	_setLED
  9974                           
  9975                           ;Dimmer_B1.c: 658: DimmerLights->DimmingValue = ((char)(70*0.8));
  9976  07D0  3038               	movlw	56
  9977  07D1  0020               	movlb	0	; select bank0
  9978  07D2  00E7               	movwf	??_setDimmerLights
  9979  07D3  086F               	movf	_DimmerLights,w
  9980  07D4  3E04               	addlw	4
  9981  07D5  0086               	movwf	6
  9982  07D6  3001               	movlw	1	; select bank2/3
  9983  07D7  0087               	movwf	7
  9984  07D8  0867               	movf	??_setDimmerLights,w
  9985  07D9  0081               	movwf	1
  9986                           
  9987                           ;Dimmer_B1.c: 660: setProductData((20 + lights), setPercentValue(((char)(70*0.8))));
  9988  07DA  3038               	movlw	56
  9989  07DB  318D  257D  3187   	fcall	_setPercentValue
  9990  07DE  0020               	movlb	0	; select bank0
  9991  07DF  00E7               	movwf	??_setDimmerLights
  9992  07E0  0867               	movf	??_setDimmerLights,w
  9993  07E1  00E2               	movwf	setProductData@value
  9994  07E2  0868               	movf	setDimmerLights@lights,w
  9995  07E3  3E14               	addlw	20
  9996  07E4  3193  239F         	fcall	_setProductData
  9997                           
  9998                           ;Dimmer_B1.c: 662: } else if (status == 0) {
  9999  07E6  0008               	return
 10000  07E7                     l6945:	
 10001  07E7  0020               	movlb	0	; select bank0
 10002  07E8  08E6               	movf	setDimmerLights@status,f
 10003  07E9  1D03               	skipz
 10004  07EA  0008               	return
 10005                           
 10006                           ;Dimmer_B1.c: 663: DimmerLights->StatusFlag = 0;
 10007  07EB  0A6F               	incf	_DimmerLights,w
 10008  07EC  0086               	movwf	6
 10009  07ED  3001               	movlw	1	; select bank2/3
 10010  07EE  0087               	movwf	7
 10011  07EF  1101               	bcf	1,2
 10012                           
 10013                           ;Dimmer_B1.c: 666: Dimmer.Load_Status = 0;
 10014  07F0  0021               	movlb	1	; select bank1
 10015  07F1  11BA               	bcf	_Dimmer^(0+128),3	;volatile
 10016                           
 10017                           ;Dimmer_B1.c: 667: setDimmerLights_Line(0);
 10018  07F2  3000               	movlw	0
 10019  07F3  3195  250D  3187   	fcall	_setDimmerLights_Line
 10020                           
 10021                           ;Dimmer_B1.c: 669: setLED(lights, 1);
 10022  07F6  0020               	movlb	0	; select bank0
 10023  07F7  01A2               	clrf	setLED@command
 10024  07F8  0AA2               	incf	setLED@command,f
 10025  07F9  0868               	movf	setDimmerLights@lights,w
 10026  07FA  3189  216F         	fcall	_setLED
 10027  07FC  0008               	return
 10028  07FD                     __end_of_setDimmerLights:	
 10029                           
 10030                           	psect	text57
 10031  0D7D                     __ptext57:	
 10032 ;; *************** function _setPercentValue *****************
 10033 ;; Defined at:
 10034 ;;		line 1042 in file "../src/Dimmer_B1.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;  value           1    wreg     unsigned char 
 10037 ;; Auto vars:     Size  Location     Type
 10038 ;;  value           1   62[BANK0 ] unsigned char 
 10039 ;;  i               3   63[BANK0 ] float 
 10040 ;; Return value:  Size  Location     Type
 10041 ;;                  1    wreg      unsigned char 
 10042 ;; Registers used:
 10043 ;;		wreg, status,2, status,0, pclath, cstack
 10044 ;; Tracked objects:
 10045 ;;		On entry : 0/0
 10046 ;;		On exit  : 0/0
 10047 ;;		Unchanged: 0/0
 10048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;Total ram usage:        6 bytes
 10054 ;; Hardware stack levels used:    1
 10055 ;; Hardware stack levels required when called:    7
 10056 ;; This function calls:
 10057 ;;		___awtoft
 10058 ;;		___ftadd
 10059 ;;		___ftdiv
 10060 ;;		___ftneg
 10061 ;;		___fttol
 10062 ;; This function is called by:
 10063 ;;		_setDimmerLights
 10064 ;;		_setDimmerLights_Adj
 10065 ;;		_Flash_Memory_Initialization
 10066 ;; This function uses a non-reentrant model
 10067 ;;
 10068                           
 10069                           
 10070                           ;psect for function _setPercentValue
 10071  0D7D                     _setPercentValue:	
 10072                           
 10073                           ;incstack = 0
 10074                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 10075                           ;setPercentValue@value stored from wreg
 10076  0D7D  0020               	movlb	0	; select bank0
 10077  0D7E  00DE               	movwf	setPercentValue@value
 10078                           
 10079                           ;Dimmer_B1.c: 1050: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 10080  0D7F  3000               	movlw	0
 10081  0D80  00DF               	movwf	setPercentValue@i
 10082  0D81  3030               	movlw	48
 10083  0D82  00E0               	movwf	setPercentValue@i+1
 10084  0D83  3042               	movlw	66
 10085  0D84  00E1               	movwf	setPercentValue@i+2
 10086                           
 10087                           ;Dimmer_B1.c: 1051: i /= 100;
 10088  0D85  3000               	movlw	0
 10089  0D86  00AE               	movwf	___ftdiv@f2
 10090  0D87  30C8               	movlw	200
 10091  0D88  00AF               	movwf	___ftdiv@f2+1
 10092  0D89  3042               	movlw	66
 10093  0D8A  00B0               	movwf	___ftdiv@f2+2
 10094  0D8B  085F               	movf	setPercentValue@i,w
 10095  0D8C  00B1               	movwf	___ftdiv@f1
 10096  0D8D  0860               	movf	setPercentValue@i+1,w
 10097  0D8E  00B2               	movwf	___ftdiv@f1+1
 10098  0D8F  0861               	movf	setPercentValue@i+2,w
 10099  0D90  00B3               	movwf	___ftdiv@f1+2
 10100  0D91  318F  2757  318D   	fcall	___ftdiv
 10101  0D94  0020               	movlb	0	; select bank0
 10102  0D95  082E               	movf	?___ftdiv,w
 10103  0D96  00DF               	movwf	setPercentValue@i
 10104  0D97  082F               	movf	?___ftdiv+1,w
 10105  0D98  00E0               	movwf	setPercentValue@i+1
 10106  0D99  0830               	movf	?___ftdiv+2,w
 10107  0D9A  00E1               	movwf	setPercentValue@i+2
 10108                           
 10109                           ;Dimmer_B1.c: 1053: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 10110  0D9B  085E               	movf	setPercentValue@value,w
 10111  0D9C  00DC               	movwf	??_setPercentValue
 10112  0D9D  01DD               	clrf	??_setPercentValue+1
 10113  0D9E  09DC               	comf	??_setPercentValue,f
 10114  0D9F  09DD               	comf	??_setPercentValue+1,f
 10115  0DA0  0ADC               	incf	??_setPercentValue,f
 10116  0DA1  1903               	skipnz
 10117  0DA2  0ADD               	incf	??_setPercentValue+1,f
 10118  0DA3  085C               	movf	??_setPercentValue,w
 10119  0DA4  3E38               	addlw	56
 10120  0DA5  00A8               	movwf	___awtoft@c
 10121  0DA6  3000               	movlw	0
 10122  0DA7  3D5D               	addwfc	??_setPercentValue+1,w
 10123  0DA8  00A9               	movwf	___awtoft@c+1
 10124  0DA9  3196  262D  318D   	fcall	___awtoft
 10125  0DAC  0020               	movlb	0	; select bank0
 10126  0DAD  0828               	movf	?___awtoft,w
 10127  0DAE  00B1               	movwf	___ftdiv@f1
 10128  0DAF  0829               	movf	?___awtoft+1,w
 10129  0DB0  00B2               	movwf	___ftdiv@f1+1
 10130  0DB1  082A               	movf	?___awtoft+2,w
 10131  0DB2  00B3               	movwf	___ftdiv@f1+2
 10132  0DB3  085F               	movf	setPercentValue@i,w
 10133  0DB4  00AE               	movwf	___ftdiv@f2
 10134  0DB5  0860               	movf	setPercentValue@i+1,w
 10135  0DB6  00AF               	movwf	___ftdiv@f2+1
 10136  0DB7  0861               	movf	setPercentValue@i+2,w
 10137  0DB8  00B0               	movwf	___ftdiv@f2+2
 10138  0DB9  318F  2757  318D   	fcall	___ftdiv
 10139  0DBC  0020               	movlb	0	; select bank0
 10140  0DBD  082E               	movf	?___ftdiv,w
 10141  0DBE  00BE               	movwf	___ftneg@f1
 10142  0DBF  082F               	movf	?___ftdiv+1,w
 10143  0DC0  00BF               	movwf	___ftneg@f1+1
 10144  0DC1  0830               	movf	?___ftdiv+2,w
 10145  0DC2  00C0               	movwf	___ftneg@f1+2
 10146  0DC3  3193  2322  318D   	fcall	___ftneg
 10147  0DC6  0020               	movlb	0	; select bank0
 10148  0DC7  083E               	movf	?___ftneg,w
 10149  0DC8  00C4               	movwf	___ftadd@f2
 10150  0DC9  083F               	movf	?___ftneg+1,w
 10151  0DCA  00C5               	movwf	___ftadd@f2+1
 10152  0DCB  0840               	movf	?___ftneg+2,w
 10153  0DCC  00C6               	movwf	___ftadd@f2+2
 10154  0DCD  3000               	movlw	0
 10155  0DCE  00C1               	movwf	___ftadd@f1
 10156  0DCF  30C8               	movlw	200
 10157  0DD0  00C2               	movwf	___ftadd@f1+1
 10158  0DD1  3042               	movlw	66
 10159  0DD2  00C3               	movwf	___ftadd@f1+2
 10160  0DD3  3184  2456  318D   	fcall	___ftadd
 10161  0DD6  0020               	movlb	0	; select bank0
 10162  0DD7  0841               	movf	?___ftadd,w
 10163  0DD8  00CE               	movwf	___fttol@f1
 10164  0DD9  0842               	movf	?___ftadd+1,w
 10165  0DDA  00CF               	movwf	___fttol@f1+1
 10166  0DDB  0843               	movf	?___ftadd+2,w
 10167  0DDC  00D0               	movwf	___fttol@f1+2
 10168  0DDD  318E  26D0         	fcall	___fttol
 10169  0DDF  0020               	movlb	0	; select bank0
 10170  0DE0  084E               	movf	?___fttol,w
 10171  0DE1  0008               	return
 10172  0DE2                     __end_of_setPercentValue:	
 10173                           
 10174                           	psect	text58
 10175  0ED0                     __ptext58:	
 10176 ;; *************** function ___fttol *****************
 10177 ;; Defined at:
 10178 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 10179 ;; Parameters:    Size  Location     Type
 10180 ;;  f1              3   46[BANK0 ] float 
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;  lval            4   55[BANK0 ] unsigned long 
 10183 ;;  exp1            1   59[BANK0 ] unsigned char 
 10184 ;;  sign1           1   54[BANK0 ] unsigned char 
 10185 ;; Return value:  Size  Location     Type
 10186 ;;                  4   46[BANK0 ] long 
 10187 ;; Registers used:
 10188 ;;		wreg, status,2, status,0
 10189 ;; Tracked objects:
 10190 ;;		On entry : 0/0
 10191 ;;		On exit  : 0/0
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10194 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10195 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10196 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10197 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10198 ;;Total ram usage:       14 bytes
 10199 ;; Hardware stack levels used:    1
 10200 ;; Hardware stack levels required when called:    5
 10201 ;; This function calls:
 10202 ;;		Nothing
 10203 ;; This function is called by:
 10204 ;;		_setPercentValue
 10205 ;;		_getPercentValue
 10206 ;; This function uses a non-reentrant model
 10207 ;;
 10208                           
 10209                           
 10210                           ;psect for function ___fttol
 10211  0ED0                     ___fttol:	
 10212                           
 10213                           ;incstack = 0
 10214                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 10215  0ED0  0020               	movlb	0	; select bank0
 10216  0ED1  084E               	movf	___fttol@f1,w
 10217  0ED2  00D2               	movwf	??___fttol
 10218  0ED3  084F               	movf	___fttol@f1+1,w
 10219  0ED4  00D3               	movwf	??___fttol+1
 10220  0ED5  0850               	movf	___fttol@f1+2,w
 10221  0ED6  00D4               	movwf	??___fttol+2
 10222  0ED7  1003               	clrc
 10223  0ED8  0D53               	rlf	??___fttol+1,w
 10224  0ED9  0D54               	rlf	??___fttol+2,w
 10225  0EDA  00D5               	movwf	??___fttol+3
 10226  0EDB  0855               	movf	??___fttol+3,w
 10227  0EDC  00DB               	movwf	___fttol@exp1
 10228  0EDD  08DB               	movf	___fttol@exp1,f
 10229  0EDE  1D03               	skipz
 10230  0EDF  2EE9               	goto	l4645
 10231  0EE0  3000               	movlw	0
 10232  0EE1  00D1               	movwf	?___fttol+3
 10233  0EE2  3000               	movlw	0
 10234  0EE3  00D0               	movwf	?___fttol+2
 10235  0EE4  3000               	movlw	0
 10236  0EE5  00CF               	movwf	?___fttol+1
 10237  0EE6  3000               	movlw	0
 10238  0EE7  00CE               	movwf	?___fttol
 10239  0EE8  0008               	return
 10240  0EE9                     l4645:	
 10241  0EE9  084E               	movf	___fttol@f1,w
 10242  0EEA  00D2               	movwf	??___fttol
 10243  0EEB  084F               	movf	___fttol@f1+1,w
 10244  0EEC  00D3               	movwf	??___fttol+1
 10245  0EED  0850               	movf	___fttol@f1+2,w
 10246  0EEE  00D4               	movwf	??___fttol+2
 10247  0EEF  3017               	movlw	23
 10248  0EF0                     u4085:	
 10249  0EF0  36D4               	lsrf	??___fttol+2,f
 10250  0EF1  0CD3               	rrf	??___fttol+1,f
 10251  0EF2  0CD2               	rrf	??___fttol,f
 10252  0EF3  0B89               	decfsz	9,f
 10253  0EF4  2EF0               	goto	u4085
 10254  0EF5  0852               	movf	??___fttol,w
 10255  0EF6  00D5               	movwf	??___fttol+3
 10256  0EF7  0855               	movf	??___fttol+3,w
 10257  0EF8  00D6               	movwf	___fttol@sign1
 10258  0EF9  17CF               	bsf	___fttol@f1+1,7
 10259  0EFA  30FF               	movlw	255
 10260  0EFB  05CE               	andwf	___fttol@f1,f
 10261  0EFC  30FF               	movlw	255
 10262  0EFD  05CF               	andwf	___fttol@f1+1,f
 10263  0EFE  3000               	movlw	0
 10264  0EFF  05D0               	andwf	___fttol@f1+2,f
 10265  0F00  084E               	movf	___fttol@f1,w
 10266  0F01  00D7               	movwf	___fttol@lval
 10267  0F02  084F               	movf	___fttol@f1+1,w
 10268  0F03  00D8               	movwf	___fttol@lval+1
 10269  0F04  0850               	movf	___fttol@f1+2,w
 10270  0F05  00D9               	movwf	___fttol@lval+2
 10271  0F06  01DA               	clrf	___fttol@lval+3
 10272  0F07  308E               	movlw	142
 10273  0F08  02DB               	subwf	___fttol@exp1,f
 10274  0F09  1FDB               	btfss	___fttol@exp1,7
 10275  0F0A  2F27               	goto	l4665
 10276  0F0B  085B               	movf	___fttol@exp1,w
 10277  0F0C  3A80               	xorlw	128
 10278  0F0D  3E8F               	addlw	143
 10279  0F0E  1803               	skipnc
 10280  0F0F  2F19               	goto	l4663
 10281  0F10  3000               	movlw	0
 10282  0F11  00D1               	movwf	?___fttol+3
 10283  0F12  3000               	movlw	0
 10284  0F13  00D0               	movwf	?___fttol+2
 10285  0F14  3000               	movlw	0
 10286  0F15  00CF               	movwf	?___fttol+1
 10287  0F16  3000               	movlw	0
 10288  0F17  00CE               	movwf	?___fttol
 10289  0F18  0008               	return
 10290  0F19                     l4663:	
 10291  0F19  3001               	movlw	1
 10292  0F1A                     u4115:	
 10293  0F1A  36DA               	lsrf	___fttol@lval+3,f
 10294  0F1B  0CD9               	rrf	___fttol@lval+2,f
 10295  0F1C  0CD8               	rrf	___fttol@lval+1,f
 10296  0F1D  0CD7               	rrf	___fttol@lval,f
 10297  0F1E  0B89               	decfsz	9,f
 10298  0F1F  2F1A               	goto	u4115
 10299  0F20  3001               	movlw	1
 10300  0F21  00D2               	movwf	??___fttol
 10301  0F22  0852               	movf	??___fttol,w
 10302  0F23  07DB               	addwf	___fttol@exp1,f
 10303  0F24  1903               	btfsc	3,2
 10304  0F25  2F40               	goto	l4675
 10305  0F26  2F19               	goto	l4663
 10306  0F27                     l4665:	
 10307  0F27  3018               	movlw	24
 10308  0F28  025B               	subwf	___fttol@exp1,w
 10309  0F29  1C03               	skipc
 10310  0F2A  2F3D               	goto	l4673
 10311  0F2B  3000               	movlw	0
 10312  0F2C  00D1               	movwf	?___fttol+3
 10313  0F2D  3000               	movlw	0
 10314  0F2E  00D0               	movwf	?___fttol+2
 10315  0F2F  3000               	movlw	0
 10316  0F30  00CF               	movwf	?___fttol+1
 10317  0F31  3000               	movlw	0
 10318  0F32  00CE               	movwf	?___fttol
 10319  0F33  0008               	return
 10320  0F34                     l4671:	
 10321  0F34  3001               	movlw	1
 10322  0F35                     u4145:	
 10323  0F35  35D7               	lslf	___fttol@lval,f
 10324  0F36  0DD8               	rlf	___fttol@lval+1,f
 10325  0F37  0DD9               	rlf	___fttol@lval+2,f
 10326  0F38  0DDA               	rlf	___fttol@lval+3,f
 10327  0F39  0B89               	decfsz	9,f
 10328  0F3A  2F35               	goto	u4145
 10329  0F3B  3001               	movlw	1
 10330  0F3C  02DB               	subwf	___fttol@exp1,f
 10331  0F3D                     l4673:	
 10332  0F3D  08DB               	movf	___fttol@exp1,f
 10333  0F3E  1D03               	skipz
 10334  0F3F  2F34               	goto	l4671
 10335  0F40                     l4675:	
 10336  0F40  0856               	movf	___fttol@sign1,w
 10337  0F41  1903               	btfsc	3,2
 10338  0F42  2F4E               	goto	l4679
 10339  0F43  09D7               	comf	___fttol@lval,f
 10340  0F44  09D8               	comf	___fttol@lval+1,f
 10341  0F45  09D9               	comf	___fttol@lval+2,f
 10342  0F46  09DA               	comf	___fttol@lval+3,f
 10343  0F47  0AD7               	incf	___fttol@lval,f
 10344  0F48  1903               	skipnz
 10345  0F49  0AD8               	incf	___fttol@lval+1,f
 10346  0F4A  1903               	skipnz
 10347  0F4B  0AD9               	incf	___fttol@lval+2,f
 10348  0F4C  1903               	skipnz
 10349  0F4D  0ADA               	incf	___fttol@lval+3,f
 10350  0F4E                     l4679:	
 10351  0F4E  085A               	movf	___fttol@lval+3,w
 10352  0F4F  00D1               	movwf	?___fttol+3
 10353  0F50  0859               	movf	___fttol@lval+2,w
 10354  0F51  00D0               	movwf	?___fttol+2
 10355  0F52  0858               	movf	___fttol@lval+1,w
 10356  0F53  00CF               	movwf	?___fttol+1
 10357  0F54  0857               	movf	___fttol@lval,w
 10358  0F55  00CE               	movwf	?___fttol
 10359  0F56  0008               	return
 10360  0F57                     __end_of___fttol:	
 10361                           
 10362                           	psect	text59
 10363  1322                     __ptext59:	
 10364 ;; *************** function ___ftneg *****************
 10365 ;; Defined at:
 10366 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;  f1              3   30[BANK0 ] float 
 10369 ;; Auto vars:     Size  Location     Type
 10370 ;;		None
 10371 ;; Return value:  Size  Location     Type
 10372 ;;                  3   30[BANK0 ] float 
 10373 ;; Registers used:
 10374 ;;		wreg
 10375 ;; Tracked objects:
 10376 ;;		On entry : 0/0
 10377 ;;		On exit  : 0/0
 10378 ;;		Unchanged: 0/0
 10379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10380 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;Total ram usage:        3 bytes
 10385 ;; Hardware stack levels used:    1
 10386 ;; Hardware stack levels required when called:    5
 10387 ;; This function calls:
 10388 ;;		Nothing
 10389 ;; This function is called by:
 10390 ;;		_setPercentValue
 10391 ;;		_getPercentValue
 10392 ;; This function uses a non-reentrant model
 10393 ;;
 10394                           
 10395                           
 10396                           ;psect for function ___ftneg
 10397  1322                     ___ftneg:	
 10398                           
 10399                           ;incstack = 0
 10400                           ; Regs used in ___ftneg: [wreg]
 10401  1322  0020               	movlb	0	; select bank0
 10402  1323  0840               	movf	___ftneg@f1+2,w
 10403  1324  043F               	iorwf	___ftneg@f1+1,w
 10404  1325  043E               	iorwf	___ftneg@f1,w
 10405  1326  1903               	skipnz
 10406  1327  0008               	return
 10407  1328  3080               	movlw	128
 10408  1329  06C0               	xorwf	___ftneg@f1+2,f
 10409  132A  0008               	return
 10410  132B                     __end_of___ftneg:	
 10411                           
 10412                           	psect	text60
 10413  0F57                     __ptext60:	
 10414 ;; *************** function ___ftdiv *****************
 10415 ;; Defined at:
 10416 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;  f2              3   14[BANK0 ] float 
 10419 ;;  f1              3   17[BANK0 ] float 
 10420 ;; Auto vars:     Size  Location     Type
 10421 ;;  f3              3   25[BANK0 ] float 
 10422 ;;  sign            1   29[BANK0 ] unsigned char 
 10423 ;;  exp             1   28[BANK0 ] unsigned char 
 10424 ;;  cntr            1   24[BANK0 ] unsigned char 
 10425 ;; Return value:  Size  Location     Type
 10426 ;;                  3   14[BANK0 ] float 
 10427 ;; Registers used:
 10428 ;;		wreg, status,2, status,0, pclath, cstack
 10429 ;; Tracked objects:
 10430 ;;		On entry : 0/0
 10431 ;;		On exit  : 0/0
 10432 ;;		Unchanged: 0/0
 10433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10434 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;Total ram usage:       16 bytes
 10439 ;; Hardware stack levels used:    1
 10440 ;; Hardware stack levels required when called:    6
 10441 ;; This function calls:
 10442 ;;		___ftpack
 10443 ;; This function is called by:
 10444 ;;		_setPercentValue
 10445 ;;		_getPercentValue
 10446 ;; This function uses a non-reentrant model
 10447 ;;
 10448                           
 10449                           
 10450                           ;psect for function ___ftdiv
 10451  0F57                     ___ftdiv:	
 10452                           
 10453                           ;incstack = 0
 10454                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10455  0F57  0020               	movlb	0	; select bank0
 10456  0F58  0831               	movf	___ftdiv@f1,w
 10457  0F59  00B4               	movwf	??___ftdiv
 10458  0F5A  0832               	movf	___ftdiv@f1+1,w
 10459  0F5B  00B5               	movwf	??___ftdiv+1
 10460  0F5C  0833               	movf	___ftdiv@f1+2,w
 10461  0F5D  00B6               	movwf	??___ftdiv+2
 10462  0F5E  1003               	clrc
 10463  0F5F  0D35               	rlf	??___ftdiv+1,w
 10464  0F60  0D36               	rlf	??___ftdiv+2,w
 10465  0F61  00B7               	movwf	??___ftdiv+3
 10466  0F62  0837               	movf	??___ftdiv+3,w
 10467  0F63  00BC               	movwf	___ftdiv@exp
 10468  0F64  08BC               	movf	___ftdiv@exp,f
 10469  0F65  1D03               	skipz
 10470  0F66  2F6E               	goto	l6609
 10471  0F67  3000               	movlw	0
 10472  0F68  00AE               	movwf	?___ftdiv
 10473  0F69  3000               	movlw	0
 10474  0F6A  00AF               	movwf	?___ftdiv+1
 10475  0F6B  3000               	movlw	0
 10476  0F6C  00B0               	movwf	?___ftdiv+2
 10477  0F6D  0008               	return
 10478  0F6E                     l6609:	
 10479  0F6E  082E               	movf	___ftdiv@f2,w
 10480  0F6F  00B4               	movwf	??___ftdiv
 10481  0F70  082F               	movf	___ftdiv@f2+1,w
 10482  0F71  00B5               	movwf	??___ftdiv+1
 10483  0F72  0830               	movf	___ftdiv@f2+2,w
 10484  0F73  00B6               	movwf	??___ftdiv+2
 10485  0F74  1003               	clrc
 10486  0F75  0D35               	rlf	??___ftdiv+1,w
 10487  0F76  0D36               	rlf	??___ftdiv+2,w
 10488  0F77  00B7               	movwf	??___ftdiv+3
 10489  0F78  0837               	movf	??___ftdiv+3,w
 10490  0F79  00BD               	movwf	___ftdiv@sign
 10491  0F7A  08BD               	movf	___ftdiv@sign,f
 10492  0F7B  1D03               	skipz
 10493  0F7C  2F84               	goto	l6615
 10494  0F7D  3000               	movlw	0
 10495  0F7E  00AE               	movwf	?___ftdiv
 10496  0F7F  3000               	movlw	0
 10497  0F80  00AF               	movwf	?___ftdiv+1
 10498  0F81  3000               	movlw	0
 10499  0F82  00B0               	movwf	?___ftdiv+2
 10500  0F83  0008               	return
 10501  0F84                     l6615:	
 10502  0F84  3000               	movlw	0
 10503  0F85  00B9               	movwf	___ftdiv@f3
 10504  0F86  3000               	movlw	0
 10505  0F87  00BA               	movwf	___ftdiv@f3+1
 10506  0F88  3000               	movlw	0
 10507  0F89  00BB               	movwf	___ftdiv@f3+2
 10508  0F8A  3089               	movlw	137
 10509  0F8B  073D               	addwf	___ftdiv@sign,w
 10510  0F8C  00B4               	movwf	??___ftdiv
 10511  0F8D  0834               	movf	??___ftdiv,w
 10512  0F8E  02BC               	subwf	___ftdiv@exp,f
 10513  0F8F  0831               	movf	___ftdiv@f1,w
 10514  0F90  00B4               	movwf	??___ftdiv
 10515  0F91  0832               	movf	___ftdiv@f1+1,w
 10516  0F92  00B5               	movwf	??___ftdiv+1
 10517  0F93  0833               	movf	___ftdiv@f1+2,w
 10518  0F94  00B6               	movwf	??___ftdiv+2
 10519  0F95  3010               	movlw	16
 10520  0F96                     u7495:	
 10521  0F96  36B6               	lsrf	??___ftdiv+2,f
 10522  0F97  0CB5               	rrf	??___ftdiv+1,f
 10523  0F98  0CB4               	rrf	??___ftdiv,f
 10524  0F99  0B89               	decfsz	9,f
 10525  0F9A  2F96               	goto	u7495
 10526  0F9B  0834               	movf	??___ftdiv,w
 10527  0F9C  00B7               	movwf	??___ftdiv+3
 10528  0F9D  0837               	movf	??___ftdiv+3,w
 10529  0F9E  00BD               	movwf	___ftdiv@sign
 10530  0F9F  082E               	movf	___ftdiv@f2,w
 10531  0FA0  00B4               	movwf	??___ftdiv
 10532  0FA1  082F               	movf	___ftdiv@f2+1,w
 10533  0FA2  00B5               	movwf	??___ftdiv+1
 10534  0FA3  0830               	movf	___ftdiv@f2+2,w
 10535  0FA4  00B6               	movwf	??___ftdiv+2
 10536  0FA5  3010               	movlw	16
 10537  0FA6                     u7505:	
 10538  0FA6  36B6               	lsrf	??___ftdiv+2,f
 10539  0FA7  0CB5               	rrf	??___ftdiv+1,f
 10540  0FA8  0CB4               	rrf	??___ftdiv,f
 10541  0FA9  0B89               	decfsz	9,f
 10542  0FAA  2FA6               	goto	u7505
 10543  0FAB  0834               	movf	??___ftdiv,w
 10544  0FAC  00B7               	movwf	??___ftdiv+3
 10545  0FAD  0837               	movf	??___ftdiv+3,w
 10546  0FAE  06BD               	xorwf	___ftdiv@sign,f
 10547  0FAF  3080               	movlw	128
 10548  0FB0  00B4               	movwf	??___ftdiv
 10549  0FB1  0834               	movf	??___ftdiv,w
 10550  0FB2  05BD               	andwf	___ftdiv@sign,f
 10551  0FB3  17B2               	bsf	___ftdiv@f1+1,7
 10552  0FB4  30FF               	movlw	255
 10553  0FB5  05B1               	andwf	___ftdiv@f1,f
 10554  0FB6  30FF               	movlw	255
 10555  0FB7  05B2               	andwf	___ftdiv@f1+1,f
 10556  0FB8  3000               	movlw	0
 10557  0FB9  05B3               	andwf	___ftdiv@f1+2,f
 10558  0FBA  17AF               	bsf	___ftdiv@f2+1,7
 10559  0FBB  30FF               	movlw	255
 10560  0FBC  05AE               	andwf	___ftdiv@f2,f
 10561  0FBD  30FF               	movlw	255
 10562  0FBE  05AF               	andwf	___ftdiv@f2+1,f
 10563  0FBF  3000               	movlw	0
 10564  0FC0  05B0               	andwf	___ftdiv@f2+2,f
 10565  0FC1  3018               	movlw	24
 10566  0FC2  00B4               	movwf	??___ftdiv
 10567  0FC3  0834               	movf	??___ftdiv,w
 10568  0FC4  00B8               	movwf	___ftdiv@cntr
 10569  0FC5                     l6629:	
 10570  0FC5  3001               	movlw	1
 10571  0FC6                     u7515:	
 10572  0FC6  35B9               	lslf	___ftdiv@f3,f
 10573  0FC7  0DBA               	rlf	___ftdiv@f3+1,f
 10574  0FC8  0DBB               	rlf	___ftdiv@f3+2,f
 10575  0FC9  0B89               	decfsz	9,f
 10576  0FCA  2FC6               	goto	u7515
 10577  0FCB  0830               	movf	___ftdiv@f2+2,w
 10578  0FCC  0233               	subwf	___ftdiv@f1+2,w
 10579  0FCD  1D03               	skipz
 10580  0FCE  2FD5               	goto	u7525
 10581  0FCF  082F               	movf	___ftdiv@f2+1,w
 10582  0FD0  0232               	subwf	___ftdiv@f1+1,w
 10583  0FD1  1D03               	skipz
 10584  0FD2  2FD5               	goto	u7525
 10585  0FD3  082E               	movf	___ftdiv@f2,w
 10586  0FD4  0231               	subwf	___ftdiv@f1,w
 10587  0FD5                     u7525:	
 10588  0FD5  1C03               	skipc
 10589  0FD6  2FDE               	goto	l6637
 10590  0FD7  082E               	movf	___ftdiv@f2,w
 10591  0FD8  02B1               	subwf	___ftdiv@f1,f
 10592  0FD9  082F               	movf	___ftdiv@f2+1,w
 10593  0FDA  3BB2               	subwfb	___ftdiv@f1+1,f
 10594  0FDB  0830               	movf	___ftdiv@f2+2,w
 10595  0FDC  3BB3               	subwfb	___ftdiv@f1+2,f
 10596  0FDD  1439               	bsf	___ftdiv@f3,0
 10597  0FDE                     l6637:	
 10598  0FDE  3001               	movlw	1
 10599  0FDF                     u7535:	
 10600  0FDF  35B1               	lslf	___ftdiv@f1,f
 10601  0FE0  0DB2               	rlf	___ftdiv@f1+1,f
 10602  0FE1  0DB3               	rlf	___ftdiv@f1+2,f
 10603  0FE2  0B89               	decfsz	9,f
 10604  0FE3  2FDF               	goto	u7535
 10605  0FE4  3001               	movlw	1
 10606  0FE5  02B8               	subwf	___ftdiv@cntr,f
 10607  0FE6  1D03               	btfss	3,2
 10608  0FE7  2FC5               	goto	l6629
 10609  0FE8  0839               	movf	___ftdiv@f3,w
 10610  0FE9  00A0               	movwf	___ftpack@arg
 10611  0FEA  083A               	movf	___ftdiv@f3+1,w
 10612  0FEB  00A1               	movwf	___ftpack@arg+1
 10613  0FEC  083B               	movf	___ftdiv@f3+2,w
 10614  0FED  00A2               	movwf	___ftpack@arg+2
 10615  0FEE  083C               	movf	___ftdiv@exp,w
 10616  0FEF  00B4               	movwf	??___ftdiv
 10617  0FF0  0834               	movf	??___ftdiv,w
 10618  0FF1  00A3               	movwf	___ftpack@exp
 10619  0FF2  083D               	movf	___ftdiv@sign,w
 10620  0FF3  00B5               	movwf	??___ftdiv+1
 10621  0FF4  0835               	movf	??___ftdiv+1,w
 10622  0FF5  00A4               	movwf	___ftpack@sign
 10623  0FF6  318C  24BA         	fcall	___ftpack
 10624  0FF8  0020               	movlb	0	; select bank0
 10625  0FF9  0820               	movf	?___ftpack,w
 10626  0FFA  00AE               	movwf	?___ftdiv
 10627  0FFB  0821               	movf	?___ftpack+1,w
 10628  0FFC  00AF               	movwf	?___ftdiv+1
 10629  0FFD  0822               	movf	?___ftpack+2,w
 10630  0FFE  00B0               	movwf	?___ftdiv+2
 10631  0FFF  0008               	return
 10632  1000                     __end_of___ftdiv:	
 10633                           
 10634                           	psect	text61
 10635  0456                     __ptext61:	
 10636 ;; *************** function ___ftadd *****************
 10637 ;; Defined at:
 10638 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 10639 ;; Parameters:    Size  Location     Type
 10640 ;;  f1              3   33[BANK0 ] float 
 10641 ;;  f2              3   36[BANK0 ] float 
 10642 ;; Auto vars:     Size  Location     Type
 10643 ;;  exp1            1   45[BANK0 ] unsigned char 
 10644 ;;  exp2            1   44[BANK0 ] unsigned char 
 10645 ;;  sign            1   43[BANK0 ] unsigned char 
 10646 ;; Return value:  Size  Location     Type
 10647 ;;                  3   33[BANK0 ] float 
 10648 ;; Registers used:
 10649 ;;		wreg, status,2, status,0, pclath, cstack
 10650 ;; Tracked objects:
 10651 ;;		On entry : 0/0
 10652 ;;		On exit  : 0/0
 10653 ;;		Unchanged: 0/0
 10654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10655 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10656 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10657 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10658 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;Total ram usage:       13 bytes
 10660 ;; Hardware stack levels used:    1
 10661 ;; Hardware stack levels required when called:    6
 10662 ;; This function calls:
 10663 ;;		___ftpack
 10664 ;; This function is called by:
 10665 ;;		_setPercentValue
 10666 ;;		_getPercentValue
 10667 ;; This function uses a non-reentrant model
 10668 ;;
 10669                           
 10670                           
 10671                           ;psect for function ___ftadd
 10672  0456                     ___ftadd:	
 10673                           
 10674                           ;incstack = 0
 10675                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10676  0456  0020               	movlb	0	; select bank0
 10677  0457  0841               	movf	___ftadd@f1,w
 10678  0458  00C7               	movwf	??___ftadd
 10679  0459  0842               	movf	___ftadd@f1+1,w
 10680  045A  00C8               	movwf	??___ftadd+1
 10681  045B  0843               	movf	___ftadd@f1+2,w
 10682  045C  00C9               	movwf	??___ftadd+2
 10683  045D  1003               	clrc
 10684  045E  0D48               	rlf	??___ftadd+1,w
 10685  045F  0D49               	rlf	??___ftadd+2,w
 10686  0460  00CA               	movwf	??___ftadd+3
 10687  0461  084A               	movf	??___ftadd+3,w
 10688  0462  00CD               	movwf	___ftadd@exp1
 10689  0463  0844               	movf	___ftadd@f2,w
 10690  0464  00C7               	movwf	??___ftadd
 10691  0465  0845               	movf	___ftadd@f2+1,w
 10692  0466  00C8               	movwf	??___ftadd+1
 10693  0467  0846               	movf	___ftadd@f2+2,w
 10694  0468  00C9               	movwf	??___ftadd+2
 10695  0469  1003               	clrc
 10696  046A  0D48               	rlf	??___ftadd+1,w
 10697  046B  0D49               	rlf	??___ftadd+2,w
 10698  046C  00CA               	movwf	??___ftadd+3
 10699  046D  084A               	movf	??___ftadd+3,w
 10700  046E  00CC               	movwf	___ftadd@exp2
 10701  046F  084D               	movf	___ftadd@exp1,w
 10702  0470  1903               	btfsc	3,2
 10703  0471  2C7E               	goto	l6539
 10704  0472  084C               	movf	___ftadd@exp2,w
 10705  0473  024D               	subwf	___ftadd@exp1,w
 10706  0474  1803               	skipnc
 10707  0475  2C85               	goto	l6543
 10708  0476  034D               	decf	___ftadd@exp1,w
 10709  0477  3AFF               	xorlw	255
 10710  0478  074C               	addwf	___ftadd@exp2,w
 10711  0479  00C7               	movwf	??___ftadd
 10712  047A  3019               	movlw	25
 10713  047B  0247               	subwf	??___ftadd,w
 10714  047C  1C03               	skipc
 10715  047D  2C85               	goto	l6543
 10716  047E                     l6539:	
 10717  047E  0844               	movf	___ftadd@f2,w
 10718  047F  00C1               	movwf	?___ftadd
 10719  0480  0845               	movf	___ftadd@f2+1,w
 10720  0481  00C2               	movwf	?___ftadd+1
 10721  0482  0846               	movf	___ftadd@f2+2,w
 10722  0483  00C3               	movwf	?___ftadd+2
 10723  0484  0008               	return
 10724  0485                     l6543:	
 10725  0485  084C               	movf	___ftadd@exp2,w
 10726  0486  1903               	btfsc	3,2
 10727  0487  0008               	return
 10728  0488  084D               	movf	___ftadd@exp1,w
 10729  0489  024C               	subwf	___ftadd@exp2,w
 10730  048A  1803               	skipnc
 10731  048B  2C94               	goto	l6549
 10732  048C  034C               	decf	___ftadd@exp2,w
 10733  048D  3AFF               	xorlw	255
 10734  048E  074D               	addwf	___ftadd@exp1,w
 10735  048F  00C7               	movwf	??___ftadd
 10736  0490  3019               	movlw	25
 10737  0491  0247               	subwf	??___ftadd,w
 10738  0492  1803               	btfsc	3,0
 10739  0493  0008               	return
 10740  0494                     l6549:	
 10741  0494  3006               	movlw	6
 10742  0495  00C7               	movwf	??___ftadd
 10743  0496  0847               	movf	??___ftadd,w
 10744  0497  00CB               	movwf	___ftadd@sign
 10745  0498  1BC3               	btfsc	___ftadd@f1+2,7
 10746  0499  17CB               	bsf	___ftadd@sign,7
 10747  049A  1BC6               	btfsc	___ftadd@f2+2,7
 10748  049B  174B               	bsf	___ftadd@sign,6
 10749  049C  17C2               	bsf	___ftadd@f1+1,7
 10750  049D  30FF               	movlw	255
 10751  049E  05C1               	andwf	___ftadd@f1,f
 10752  049F  30FF               	movlw	255
 10753  04A0  05C2               	andwf	___ftadd@f1+1,f
 10754  04A1  3000               	movlw	0
 10755  04A2  05C3               	andwf	___ftadd@f1+2,f
 10756  04A3  17C5               	bsf	___ftadd@f2+1,7
 10757  04A4  30FF               	movlw	255
 10758  04A5  05C4               	andwf	___ftadd@f2,f
 10759  04A6  30FF               	movlw	255
 10760  04A7  05C5               	andwf	___ftadd@f2+1,f
 10761  04A8  3000               	movlw	0
 10762  04A9  05C6               	andwf	___ftadd@f2+2,f
 10763  04AA  084C               	movf	___ftadd@exp2,w
 10764  04AB  024D               	subwf	___ftadd@exp1,w
 10765  04AC  1803               	skipnc
 10766  04AD  2CD0               	goto	l6571
 10767  04AE                     l6561:	
 10768  04AE  3001               	movlw	1
 10769  04AF                     u7335:	
 10770  04AF  35C4               	lslf	___ftadd@f2,f
 10771  04B0  0DC5               	rlf	___ftadd@f2+1,f
 10772  04B1  0DC6               	rlf	___ftadd@f2+2,f
 10773  04B2  0B89               	decfsz	9,f
 10774  04B3  2CAF               	goto	u7335
 10775  04B4  3001               	movlw	1
 10776  04B5  02CC               	subwf	___ftadd@exp2,f
 10777  04B6  084C               	movf	___ftadd@exp2,w
 10778  04B7  064D               	xorwf	___ftadd@exp1,w
 10779  04B8  1903               	skipnz
 10780  04B9  2CCB               	goto	l6569
 10781  04BA  3001               	movlw	1
 10782  04BB  02CB               	subwf	___ftadd@sign,f
 10783  04BC  084B               	movf	___ftadd@sign,w
 10784  04BD  3907               	andlw	7
 10785  04BE  1903               	btfsc	3,2
 10786  04BF  2CCB               	goto	l6569
 10787  04C0  2CAE               	goto	l6561
 10788  04C1                     l6567:	
 10789  04C1  3001               	movlw	1
 10790  04C2                     u7365:	
 10791  04C2  36C3               	lsrf	___ftadd@f1+2,f
 10792  04C3  0CC2               	rrf	___ftadd@f1+1,f
 10793  04C4  0CC1               	rrf	___ftadd@f1,f
 10794  04C5  0B89               	decfsz	9,f
 10795  04C6  2CC2               	goto	u7365
 10796  04C7  3001               	movlw	1
 10797  04C8  00C7               	movwf	??___ftadd
 10798  04C9  0847               	movf	??___ftadd,w
 10799  04CA  07CD               	addwf	___ftadd@exp1,f
 10800  04CB                     l6569:	
 10801  04CB  084D               	movf	___ftadd@exp1,w
 10802  04CC  064C               	xorwf	___ftadd@exp2,w
 10803  04CD  1903               	btfsc	3,2
 10804  04CE  2CF5               	goto	l2186
 10805  04CF  2CC1               	goto	l6567
 10806  04D0                     l6571:	
 10807  04D0  084D               	movf	___ftadd@exp1,w
 10808  04D1  024C               	subwf	___ftadd@exp2,w
 10809  04D2  1803               	skipnc
 10810  04D3  2CF5               	goto	l2186
 10811  04D4                     l6573:	
 10812  04D4  3001               	movlw	1
 10813  04D5                     u7395:	
 10814  04D5  35C1               	lslf	___ftadd@f1,f
 10815  04D6  0DC2               	rlf	___ftadd@f1+1,f
 10816  04D7  0DC3               	rlf	___ftadd@f1+2,f
 10817  04D8  0B89               	decfsz	9,f
 10818  04D9  2CD5               	goto	u7395
 10819  04DA  3001               	movlw	1
 10820  04DB  02CD               	subwf	___ftadd@exp1,f
 10821  04DC  084C               	movf	___ftadd@exp2,w
 10822  04DD  064D               	xorwf	___ftadd@exp1,w
 10823  04DE  1903               	skipnz
 10824  04DF  2CF1               	goto	l6581
 10825  04E0  3001               	movlw	1
 10826  04E1  02CB               	subwf	___ftadd@sign,f
 10827  04E2  084B               	movf	___ftadd@sign,w
 10828  04E3  3907               	andlw	7
 10829  04E4  1903               	btfsc	3,2
 10830  04E5  2CF1               	goto	l6581
 10831  04E6  2CD4               	goto	l6573
 10832  04E7                     l6579:	
 10833  04E7  3001               	movlw	1
 10834  04E8                     u7425:	
 10835  04E8  36C6               	lsrf	___ftadd@f2+2,f
 10836  04E9  0CC5               	rrf	___ftadd@f2+1,f
 10837  04EA  0CC4               	rrf	___ftadd@f2,f
 10838  04EB  0B89               	decfsz	9,f
 10839  04EC  2CE8               	goto	u7425
 10840  04ED  3001               	movlw	1
 10841  04EE  00C7               	movwf	??___ftadd
 10842  04EF  0847               	movf	??___ftadd,w
 10843  04F0  07CC               	addwf	___ftadd@exp2,f
 10844  04F1                     l6581:	
 10845  04F1  084D               	movf	___ftadd@exp1,w
 10846  04F2  064C               	xorwf	___ftadd@exp2,w
 10847  04F3  1D03               	skipz
 10848  04F4  2CE7               	goto	l6579
 10849  04F5                     l2186:	
 10850  04F5  1FCB               	btfss	___ftadd@sign,7
 10851  04F6  2D07               	goto	l6585
 10852  04F7  30FF               	movlw	255
 10853  04F8  06C1               	xorwf	___ftadd@f1,f
 10854  04F9  30FF               	movlw	255
 10855  04FA  06C2               	xorwf	___ftadd@f1+1,f
 10856  04FB  30FF               	movlw	255
 10857  04FC  06C3               	xorwf	___ftadd@f1+2,f
 10858  04FD  3001               	movlw	1
 10859  04FE  07C1               	addwf	___ftadd@f1,f
 10860  04FF  3000               	movlw	0
 10861  0500  1803               	skipnc
 10862  0501  3001               	movlw	1
 10863  0502  07C2               	addwf	___ftadd@f1+1,f
 10864  0503  3000               	movlw	0
 10865  0504  1803               	skipnc
 10866  0505  3001               	movlw	1
 10867  0506  07C3               	addwf	___ftadd@f1+2,f
 10868  0507                     l6585:	
 10869  0507  1F4B               	btfss	___ftadd@sign,6
 10870  0508  2D19               	goto	l6589
 10871  0509  30FF               	movlw	255
 10872  050A  06C4               	xorwf	___ftadd@f2,f
 10873  050B  30FF               	movlw	255
 10874  050C  06C5               	xorwf	___ftadd@f2+1,f
 10875  050D  30FF               	movlw	255
 10876  050E  06C6               	xorwf	___ftadd@f2+2,f
 10877  050F  3001               	movlw	1
 10878  0510  07C4               	addwf	___ftadd@f2,f
 10879  0511  3000               	movlw	0
 10880  0512  1803               	skipnc
 10881  0513  3001               	movlw	1
 10882  0514  07C5               	addwf	___ftadd@f2+1,f
 10883  0515  3000               	movlw	0
 10884  0516  1803               	skipnc
 10885  0517  3001               	movlw	1
 10886  0518  07C6               	addwf	___ftadd@f2+2,f
 10887  0519                     l6589:	
 10888  0519  01CB               	clrf	___ftadd@sign
 10889  051A  0841               	movf	___ftadd@f1,w
 10890  051B  07C4               	addwf	___ftadd@f2,f
 10891  051C  0842               	movf	___ftadd@f1+1,w
 10892  051D  3DC5               	addwfc	___ftadd@f2+1,f
 10893  051E  0843               	movf	___ftadd@f1+2,w
 10894  051F  3DC6               	addwfc	___ftadd@f2+2,f
 10895  0520  1FC6               	btfss	___ftadd@f2+2,7
 10896  0521  2D34               	goto	l6599
 10897  0522  30FF               	movlw	255
 10898  0523  06C4               	xorwf	___ftadd@f2,f
 10899  0524  30FF               	movlw	255
 10900  0525  06C5               	xorwf	___ftadd@f2+1,f
 10901  0526  30FF               	movlw	255
 10902  0527  06C6               	xorwf	___ftadd@f2+2,f
 10903  0528  3001               	movlw	1
 10904  0529  07C4               	addwf	___ftadd@f2,f
 10905  052A  3000               	movlw	0
 10906  052B  1803               	skipnc
 10907  052C  3001               	movlw	1
 10908  052D  07C5               	addwf	___ftadd@f2+1,f
 10909  052E  3000               	movlw	0
 10910  052F  1803               	skipnc
 10911  0530  3001               	movlw	1
 10912  0531  07C6               	addwf	___ftadd@f2+2,f
 10913  0532  01CB               	clrf	___ftadd@sign
 10914  0533  0ACB               	incf	___ftadd@sign,f
 10915  0534                     l6599:	
 10916  0534  0844               	movf	___ftadd@f2,w
 10917  0535  00A0               	movwf	___ftpack@arg
 10918  0536  0845               	movf	___ftadd@f2+1,w
 10919  0537  00A1               	movwf	___ftpack@arg+1
 10920  0538  0846               	movf	___ftadd@f2+2,w
 10921  0539  00A2               	movwf	___ftpack@arg+2
 10922  053A  084D               	movf	___ftadd@exp1,w
 10923  053B  00C7               	movwf	??___ftadd
 10924  053C  0847               	movf	??___ftadd,w
 10925  053D  00A3               	movwf	___ftpack@exp
 10926  053E  084B               	movf	___ftadd@sign,w
 10927  053F  00C8               	movwf	??___ftadd+1
 10928  0540  0848               	movf	??___ftadd+1,w
 10929  0541  00A4               	movwf	___ftpack@sign
 10930  0542  318C  24BA         	fcall	___ftpack
 10931  0544  0020               	movlb	0	; select bank0
 10932  0545  0820               	movf	?___ftpack,w
 10933  0546  00C1               	movwf	?___ftadd
 10934  0547  0821               	movf	?___ftpack+1,w
 10935  0548  00C2               	movwf	?___ftadd+1
 10936  0549  0822               	movf	?___ftpack+2,w
 10937  054A  00C3               	movwf	?___ftadd+2
 10938  054B  0008               	return
 10939  054C                     __end_of___ftadd:	
 10940                           
 10941                           	psect	text62
 10942  162D                     __ptext62:	
 10943 ;; *************** function ___awtoft *****************
 10944 ;; Defined at:
 10945 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 10946 ;; Parameters:    Size  Location     Type
 10947 ;;  c               2    8[BANK0 ] int 
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;  sign            1   13[BANK0 ] unsigned char 
 10950 ;; Return value:  Size  Location     Type
 10951 ;;                  3    8[BANK0 ] float 
 10952 ;; Registers used:
 10953 ;;		wreg, status,2, status,0, pclath, cstack
 10954 ;; Tracked objects:
 10955 ;;		On entry : 0/0
 10956 ;;		On exit  : 0/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10959 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;Total ram usage:        6 bytes
 10964 ;; Hardware stack levels used:    1
 10965 ;; Hardware stack levels required when called:    6
 10966 ;; This function calls:
 10967 ;;		___ftpack
 10968 ;; This function is called by:
 10969 ;;		_setPercentValue
 10970 ;;		_getPercentValue
 10971 ;; This function uses a non-reentrant model
 10972 ;;
 10973                           
 10974                           
 10975                           ;psect for function ___awtoft
 10976  162D                     ___awtoft:	
 10977                           
 10978                           ;incstack = 0
 10979                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 10980  162D  0020               	movlb	0	; select bank0
 10981  162E  01AD               	clrf	___awtoft@sign
 10982  162F  1FA9               	btfss	___awtoft@c+1,7
 10983  1630  2E38               	goto	l6527
 10984  1631  09A8               	comf	___awtoft@c,f
 10985  1632  09A9               	comf	___awtoft@c+1,f
 10986  1633  0AA8               	incf	___awtoft@c,f
 10987  1634  1903               	skipnz
 10988  1635  0AA9               	incf	___awtoft@c+1,f
 10989  1636  01AD               	clrf	___awtoft@sign
 10990  1637  0AAD               	incf	___awtoft@sign,f
 10991  1638                     l6527:	
 10992  1638  0828               	movf	___awtoft@c,w
 10993  1639  00A0               	movwf	___ftpack@arg
 10994  163A  0829               	movf	___awtoft@c+1,w
 10995  163B  00A1               	movwf	___ftpack@arg+1
 10996  163C  01A2               	clrf	___ftpack@arg+2
 10997  163D  308E               	movlw	142
 10998  163E  00AB               	movwf	??___awtoft
 10999  163F  082B               	movf	??___awtoft,w
 11000  1640  00A3               	movwf	___ftpack@exp
 11001  1641  082D               	movf	___awtoft@sign,w
 11002  1642  00AC               	movwf	??___awtoft+1
 11003  1643  082C               	movf	??___awtoft+1,w
 11004  1644  00A4               	movwf	___ftpack@sign
 11005  1645  318C  24BA         	fcall	___ftpack
 11006  1647  0020               	movlb	0	; select bank0
 11007  1648  0820               	movf	?___ftpack,w
 11008  1649  00A8               	movwf	?___awtoft
 11009  164A  0821               	movf	?___ftpack+1,w
 11010  164B  00A9               	movwf	?___awtoft+1
 11011  164C  0822               	movf	?___ftpack+2,w
 11012  164D  00AA               	movwf	?___awtoft+2
 11013  164E  0008               	return
 11014  164F                     __end_of___awtoft:	
 11015                           
 11016                           	psect	text63
 11017  0CBA                     __ptext63:	
 11018 ;; *************** function ___ftpack *****************
 11019 ;; Defined at:
 11020 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;  arg             3    0[BANK0 ] unsigned um
 11023 ;;  exp             1    3[BANK0 ] unsigned char 
 11024 ;;  sign            1    4[BANK0 ] unsigned char 
 11025 ;; Auto vars:     Size  Location     Type
 11026 ;;		None
 11027 ;; Return value:  Size  Location     Type
 11028 ;;                  3    0[BANK0 ] float 
 11029 ;; Registers used:
 11030 ;;		wreg, status,2, status,0
 11031 ;; Tracked objects:
 11032 ;;		On entry : 0/0
 11033 ;;		On exit  : 0/0
 11034 ;;		Unchanged: 0/0
 11035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11036 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11038 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;Total ram usage:        8 bytes
 11041 ;; Hardware stack levels used:    1
 11042 ;; Hardware stack levels required when called:    5
 11043 ;; This function calls:
 11044 ;;		Nothing
 11045 ;; This function is called by:
 11046 ;;		___awtoft
 11047 ;;		___ftadd
 11048 ;;		___ftdiv
 11049 ;;		___ftmul
 11050 ;; This function uses a non-reentrant model
 11051 ;;
 11052                           
 11053                           
 11054                           ;psect for function ___ftpack
 11055  0CBA                     ___ftpack:	
 11056                           
 11057                           ;incstack = 0
 11058                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11059  0CBA  0020               	movlb	0	; select bank0
 11060  0CBB  0823               	movf	___ftpack@exp,w
 11061  0CBC  1903               	btfsc	3,2
 11062  0CBD  2CC3               	goto	l6403
 11063  0CBE  0822               	movf	___ftpack@arg+2,w
 11064  0CBF  0421               	iorwf	___ftpack@arg+1,w
 11065  0CC0  0420               	iorwf	___ftpack@arg,w
 11066  0CC1  1D03               	skipz
 11067  0CC2  2CD4               	goto	l6409
 11068  0CC3                     l6403:	
 11069  0CC3  3000               	movlw	0
 11070  0CC4  00A0               	movwf	?___ftpack
 11071  0CC5  3000               	movlw	0
 11072  0CC6  00A1               	movwf	?___ftpack+1
 11073  0CC7  3000               	movlw	0
 11074  0CC8  00A2               	movwf	?___ftpack+2
 11075  0CC9  0008               	return
 11076  0CCA                     l6407:	
 11077  0CCA  3001               	movlw	1
 11078  0CCB  00A5               	movwf	??___ftpack
 11079  0CCC  0825               	movf	??___ftpack,w
 11080  0CCD  07A3               	addwf	___ftpack@exp,f
 11081  0CCE  3001               	movlw	1
 11082  0CCF                     u6955:	
 11083  0CCF  36A2               	lsrf	___ftpack@arg+2,f
 11084  0CD0  0CA1               	rrf	___ftpack@arg+1,f
 11085  0CD1  0CA0               	rrf	___ftpack@arg,f
 11086  0CD2  0B89               	decfsz	9,f
 11087  0CD3  2CCF               	goto	u6955
 11088  0CD4                     l6409:	
 11089  0CD4  30FE               	movlw	254
 11090  0CD5  0522               	andwf	___ftpack@arg+2,w
 11091  0CD6  1903               	btfsc	3,2
 11092  0CD7  2CED               	goto	l2157
 11093  0CD8  2CCA               	goto	l6407
 11094  0CD9                     l6411:	
 11095  0CD9  3001               	movlw	1
 11096  0CDA  00A5               	movwf	??___ftpack
 11097  0CDB  0825               	movf	??___ftpack,w
 11098  0CDC  07A3               	addwf	___ftpack@exp,f
 11099  0CDD  3001               	movlw	1
 11100  0CDE  07A0               	addwf	___ftpack@arg,f
 11101  0CDF  3000               	movlw	0
 11102  0CE0  1803               	skipnc
 11103  0CE1  3001               	movlw	1
 11104  0CE2  07A1               	addwf	___ftpack@arg+1,f
 11105  0CE3  3000               	movlw	0
 11106  0CE4  1803               	skipnc
 11107  0CE5  3001               	movlw	1
 11108  0CE6  07A2               	addwf	___ftpack@arg+2,f
 11109  0CE7  3001               	movlw	1
 11110  0CE8                     u6975:	
 11111  0CE8  36A2               	lsrf	___ftpack@arg+2,f
 11112  0CE9  0CA1               	rrf	___ftpack@arg+1,f
 11113  0CEA  0CA0               	rrf	___ftpack@arg,f
 11114  0CEB  0B89               	decfsz	9,f
 11115  0CEC  2CE8               	goto	u6975
 11116  0CED                     l2157:	
 11117  0CED  30FF               	movlw	255
 11118  0CEE  0522               	andwf	___ftpack@arg+2,w
 11119  0CEF  1903               	btfsc	3,2
 11120  0CF0  2CFA               	goto	l6419
 11121  0CF1  2CD9               	goto	l6411
 11122  0CF2                     l6417:	
 11123  0CF2  3001               	movlw	1
 11124  0CF3  02A3               	subwf	___ftpack@exp,f
 11125  0CF4  3001               	movlw	1
 11126  0CF5                     u6995:	
 11127  0CF5  35A0               	lslf	___ftpack@arg,f
 11128  0CF6  0DA1               	rlf	___ftpack@arg+1,f
 11129  0CF7  0DA2               	rlf	___ftpack@arg+2,f
 11130  0CF8  0B89               	decfsz	9,f
 11131  0CF9  2CF5               	goto	u6995
 11132  0CFA                     l6419:	
 11133  0CFA  1FA1               	btfss	___ftpack@arg+1,7
 11134  0CFB  2CF2               	goto	l6417
 11135  0CFC  1823               	btfsc	___ftpack@exp,0
 11136  0CFD  2D04               	goto	l2163
 11137  0CFE  30FF               	movlw	255
 11138  0CFF  05A0               	andwf	___ftpack@arg,f
 11139  0D00  307F               	movlw	127
 11140  0D01  05A1               	andwf	___ftpack@arg+1,f
 11141  0D02  30FF               	movlw	255
 11142  0D03  05A2               	andwf	___ftpack@arg+2,f
 11143  0D04                     l2163:	
 11144  0D04  1003               	clrc
 11145  0D05  0CA3               	rrf	___ftpack@exp,f
 11146  0D06  0823               	movf	___ftpack@exp,w
 11147  0D07  00A5               	movwf	??___ftpack
 11148  0D08  01A6               	clrf	??___ftpack+1
 11149  0D09  01A7               	clrf	??___ftpack+2
 11150  0D0A  3010               	movlw	16
 11151  0D0B                     u7025:	
 11152  0D0B  35A5               	lslf	??___ftpack,f
 11153  0D0C  0DA6               	rlf	??___ftpack+1,f
 11154  0D0D  0DA7               	rlf	??___ftpack+2,f
 11155  0D0E  0B89               	decfsz	9,f
 11156  0D0F  2D0B               	goto	u7025
 11157  0D10  0825               	movf	??___ftpack,w
 11158  0D11  04A0               	iorwf	___ftpack@arg,f
 11159  0D12  0826               	movf	??___ftpack+1,w
 11160  0D13  04A1               	iorwf	___ftpack@arg+1,f
 11161  0D14  0827               	movf	??___ftpack+2,w
 11162  0D15  04A2               	iorwf	___ftpack@arg+2,f
 11163  0D16  0824               	movf	___ftpack@sign,w
 11164  0D17  1903               	btfsc	3,2
 11165  0D18  0008               	return
 11166  0D19  17A2               	bsf	___ftpack@arg+2,7
 11167  0D1A  0008               	return
 11168  0D1B                     __end_of___ftpack:	
 11169                           
 11170                           	psect	text64
 11171  096F                     __ptext64:	
 11172 ;; *************** function _setLED *****************
 11173 ;; Defined at:
 11174 ;;		line 76 in file "../src/LED_B1.c"
 11175 ;; Parameters:    Size  Location     Type
 11176 ;;  led             1    wreg     unsigned char 
 11177 ;;  command         1    2[BANK0 ] unsigned char 
 11178 ;; Auto vars:     Size  Location     Type
 11179 ;;  led             1    3[BANK0 ] unsigned char 
 11180 ;; Return value:  Size  Location     Type
 11181 ;;		None               void
 11182 ;; Registers used:
 11183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11184 ;; Tracked objects:
 11185 ;;		On entry : 0/0
 11186 ;;		On exit  : 0/0
 11187 ;;		Unchanged: 0/0
 11188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11189 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11190 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11192 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11193 ;;Total ram usage:        2 bytes
 11194 ;; Hardware stack levels used:    1
 11195 ;; Hardware stack levels required when called:    6
 11196 ;; This function calls:
 11197 ;;		_LedPointSelect
 11198 ;; This function is called by:
 11199 ;;		_setDimmerLights
 11200 ;;		_setLED_Initialization
 11201 ;;		_Exception_Main
 11202 ;;		_setSw_Initialization
 11203 ;; This function uses a non-reentrant model
 11204 ;;
 11205                           
 11206                           
 11207                           ;psect for function _setLED
 11208  096F                     _setLED:	
 11209                           
 11210                           ;incstack = 0
 11211                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11212                           ;setLED@led stored from wreg
 11213  096F  0020               	movlb	0	; select bank0
 11214  0970  00A3               	movwf	setLED@led
 11215                           
 11216                           ;LED_B1.c: 77: LedPointSelect(led);
 11217  0971  0823               	movf	setLED@led,w
 11218  0972  3195  253E  3189   	fcall	_LedPointSelect
 11219                           
 11220                           ;LED_B1.c: 78: if (command == 0) {
 11221  0975  0020               	movlb	0	; select bank0
 11222  0976  08A2               	movf	setLED@command,f
 11223  0977  1D03               	skipz
 11224  0978  2986               	goto	l6729
 11225                           
 11226                           ;LED_B1.c: 80: if (led == 1) {
 11227  0979  0823               	movf	setLED@led,w
 11228  097A  3A01               	xorlw	1
 11229  097B  1D03               	skipz
 11230  097C  297E               	goto	l6721
 11231                           
 11232                           ;LED_B1.c: 84: RA3 = 1;
 11233  097D  158C               	bsf	12,3	;volatile
 11234  097E                     l6721:	
 11235                           
 11236                           ;LED_B1.c: 86: }
 11237                           ;LED_B1.c: 89: if (led == 2) {
 11238  097E  0823               	movf	setLED@led,w
 11239  097F  3A02               	xorlw	2
 11240  0980  1903               	btfsc	3,2
 11241                           
 11242                           ;LED_B1.c: 93: RC7 = 1;
 11243  0981  178E               	bsf	14,7	;volatile
 11244                           
 11245                           ;LED_B1.c: 95: }
 11246                           ;LED_B1.c: 107: if (led == 99) {
 11247  0982  0823               	movf	setLED@led,w
 11248  0983  3A63               	xorlw	99
 11249  0984  1903               	btfsc	3,2
 11250                           
 11251                           ;LED_B1.c: 111: RB5 = 1;
 11252  0985  168D               	bsf	13,5	;volatile
 11253  0986                     l6729:	
 11254                           
 11255                           ;LED_B1.c: 113: }
 11256                           ;LED_B1.c: 115: }
 11257                           ;LED_B1.c: 116: if (command == 1) {
 11258  0986  0822               	movf	setLED@command,w
 11259  0987  3A01               	xorlw	1
 11260  0988  1D03               	skipz
 11261  0989  2997               	goto	l6743
 11262                           
 11263                           ;LED_B1.c: 118: if (led == 1) {
 11264  098A  0823               	movf	setLED@led,w
 11265  098B  3A01               	xorlw	1
 11266  098C  1D03               	skipz
 11267  098D  298F               	goto	l6735
 11268                           
 11269                           ;LED_B1.c: 122: RA3 = 0;
 11270  098E  118C               	bcf	12,3	;volatile
 11271  098F                     l6735:	
 11272                           
 11273                           ;LED_B1.c: 124: }
 11274                           ;LED_B1.c: 127: if (led == 2) {
 11275  098F  0823               	movf	setLED@led,w
 11276  0990  3A02               	xorlw	2
 11277  0991  1903               	btfsc	3,2
 11278                           
 11279                           ;LED_B1.c: 131: RC7 = 0;
 11280  0992  138E               	bcf	14,7	;volatile
 11281                           
 11282                           ;LED_B1.c: 133: }
 11283                           ;LED_B1.c: 145: if (led == 99) {
 11284  0993  0823               	movf	setLED@led,w
 11285  0994  3A63               	xorlw	99
 11286  0995  1903               	btfsc	3,2
 11287                           
 11288                           ;LED_B1.c: 149: RB5 = 0;
 11289  0996  128D               	bcf	13,5	;volatile
 11290  0997                     l6743:	
 11291                           
 11292                           ;LED_B1.c: 151: }
 11293                           ;LED_B1.c: 153: }
 11294                           ;LED_B1.c: 154: if (command == 10) {
 11295  0997  0822               	movf	setLED@command,w
 11296  0998  3A0A               	xorlw	10
 11297  0999  1D03               	skipz
 11298  099A  29B3               	goto	l6759
 11299                           
 11300                           ;LED_B1.c: 155: LED->GO = 0;
 11301  099B  0873               	movf	_LED,w
 11302  099C  0086               	movwf	6
 11303  099D  0187               	clrf	7
 11304  099E  1081               	bcf	1,1
 11305                           
 11306                           ;LED_B1.c: 156: LED->Time = 0;
 11307  099F  0A73               	incf	_LED,w
 11308  09A0  0086               	movwf	6
 11309  09A1  0187               	clrf	7
 11310  09A2  3000               	movlw	0
 11311  09A3  3FC0               	movwi [0]fsr1
 11312  09A4  3FC1               	movwi [1]fsr1
 11313                           
 11314                           ;LED_B1.c: 158: if (led == 1) {
 11315  09A5  0823               	movf	setLED@led,w
 11316  09A6  3A01               	xorlw	1
 11317  09A7  1D03               	skipz
 11318  09A8  29AB               	goto	l6751
 11319                           
 11320                           ;LED_B1.c: 162: RA3 = 1;
 11321  09A9  158C               	bsf	12,3	;volatile
 11322                           
 11323                           ;LED_B1.c: 164: }
 11324  09AA  29AF               	goto	l6755
 11325  09AB                     l6751:	
 11326                           
 11327                           ;LED_B1.c: 167: else if (led == 2) {
 11328  09AB  0823               	movf	setLED@led,w
 11329  09AC  3A02               	xorlw	2
 11330  09AD  1903               	btfsc	3,2
 11331                           
 11332                           ;LED_B1.c: 171: RC7 = 1;
 11333  09AE  178E               	bsf	14,7	;volatile
 11334  09AF                     l6755:	
 11335                           
 11336                           ;LED_B1.c: 173: }
 11337                           ;LED_B1.c: 185: if (led == 99) {
 11338  09AF  0823               	movf	setLED@led,w
 11339  09B0  3A63               	xorlw	99
 11340  09B1  1903               	btfsc	3,2
 11341                           
 11342                           ;LED_B1.c: 189: RB5 = 1;
 11343  09B2  168D               	bsf	13,5	;volatile
 11344  09B3                     l6759:	
 11345                           
 11346                           ;LED_B1.c: 191: }
 11347                           ;LED_B1.c: 193: }
 11348                           ;LED_B1.c: 194: if (command == 11) {
 11349  09B3  0822               	movf	setLED@command,w
 11350  09B4  3A0B               	xorlw	11
 11351  09B5  1D03               	skipz
 11352  09B6  0008               	return
 11353                           
 11354                           ;LED_B1.c: 195: LED->GO = 1;
 11355  09B7  0873               	movf	_LED,w
 11356  09B8  0086               	movwf	6
 11357  09B9  0187               	clrf	7
 11358  09BA  1481               	bsf	1,1
 11359  09BB  0008               	return
 11360  09BC                     __end_of_setLED:	
 11361                           
 11362                           	psect	text65
 11363  153E                     __ptext65:	
 11364 ;; *************** function _LedPointSelect *****************
 11365 ;; Defined at:
 11366 ;;		line 7 in file "../src/LED_B1.c"
 11367 ;; Parameters:    Size  Location     Type
 11368 ;;  led             1    wreg     unsigned char 
 11369 ;; Auto vars:     Size  Location     Type
 11370 ;;  led             1    1[BANK0 ] unsigned char 
 11371 ;; Return value:  Size  Location     Type
 11372 ;;		None               void
 11373 ;; Registers used:
 11374 ;;		wreg
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11382 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;Total ram usage:        2 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; Hardware stack levels required when called:    5
 11387 ;; This function calls:
 11388 ;;		Nothing
 11389 ;; This function is called by:
 11390 ;;		_setLED_Initialization
 11391 ;;		_setLED
 11392 ;;		_setLED_Main
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           
 11397                           ;psect for function _LedPointSelect
 11398  153E                     _LedPointSelect:	
 11399                           
 11400                           ;incstack = 0
 11401                           ; Regs used in _LedPointSelect: [wreg]
 11402                           ;LedPointSelect@led stored from wreg
 11403  153E  0020               	movlb	0	; select bank0
 11404  153F  00A1               	movwf	LedPointSelect@led
 11405                           
 11406                           ;LED_B1.c: 9: if (led == 1) {
 11407  1540  0821               	movf	LedPointSelect@led,w
 11408  1541  3A01               	xorlw	1
 11409  1542  1D03               	skipz
 11410  1543  2D48               	goto	l685
 11411                           
 11412                           ;LED_B1.c: 10: LED = &VarLED1;
 11413  1544  30E1               	movlw	_VarLED1& (0+255)
 11414  1545  00A0               	movwf	??_LedPointSelect
 11415  1546  0820               	movf	??_LedPointSelect,w
 11416  1547  00F3               	movwf	_LED
 11417  1548                     l685:	
 11418                           
 11419                           ;LED_B1.c: 11: }
 11420                           ;LED_B1.c: 14: if (led == 2) {
 11421  1548  0821               	movf	LedPointSelect@led,w
 11422  1549  3A02               	xorlw	2
 11423  154A  1D03               	skipz
 11424  154B  2D50               	goto	l686
 11425                           
 11426                           ;LED_B1.c: 15: LED = &VarLED2;
 11427  154C  30E5               	movlw	_VarLED2& (0+255)
 11428  154D  00A0               	movwf	??_LedPointSelect
 11429  154E  0820               	movf	??_LedPointSelect,w
 11430  154F  00F3               	movwf	_LED
 11431  1550                     l686:	
 11432                           
 11433                           ;LED_B1.c: 16: }
 11434                           ;LED_B1.c: 24: if (led == 99) {
 11435  1550  0821               	movf	LedPointSelect@led,w
 11436  1551  3A63               	xorlw	99
 11437  1552  1D03               	skipz
 11438  1553  0008               	return
 11439                           
 11440                           ;LED_B1.c: 25: LED = &VarErrLED;
 11441  1554  30DD               	movlw	_VarErrLED& (0+255)
 11442  1555  00A0               	movwf	??_LedPointSelect
 11443  1556  0820               	movf	??_LedPointSelect,w
 11444  1557  00F3               	movwf	_LED
 11445  1558  0008               	return
 11446  1559                     __end_of_LedPointSelect:	
 11447                           
 11448                           	psect	text66
 11449  150D                     __ptext66:	
 11450 ;; *************** function _setDimmerLights_Line *****************
 11451 ;; Defined at:
 11452 ;;		line 714 in file "../src/Dimmer_B1.c"
 11453 ;; Parameters:    Size  Location     Type
 11454 ;;  lights          1    wreg     unsigned char 
 11455 ;; Auto vars:     Size  Location     Type
 11456 ;;  lights          1    0[BANK0 ] unsigned char 
 11457 ;; Return value:  Size  Location     Type
 11458 ;;		None               void
 11459 ;; Registers used:
 11460 ;;		wreg
 11461 ;; Tracked objects:
 11462 ;;		On entry : 0/0
 11463 ;;		On exit  : 0/0
 11464 ;;		Unchanged: 0/0
 11465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11467 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11469 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;Total ram usage:        1 bytes
 11471 ;; Hardware stack levels used:    1
 11472 ;; Hardware stack levels required when called:    5
 11473 ;; This function calls:
 11474 ;;		Nothing
 11475 ;; This function is called by:
 11476 ;;		_setDimmerLights
 11477 ;;		_setDimmerLights_Adj
 11478 ;; This function uses a non-reentrant model
 11479 ;;
 11480                           
 11481                           
 11482                           ;psect for function _setDimmerLights_Line
 11483  150D                     _setDimmerLights_Line:	
 11484                           
 11485                           ;incstack = 0
 11486                           ; Regs used in _setDimmerLights_Line: [wreg]
 11487                           ;setDimmerLights_Line@lights stored from wreg
 11488  150D  0020               	movlb	0	; select bank0
 11489  150E  00A0               	movwf	setDimmerLights_Line@lights
 11490                           
 11491                           ;Dimmer_B1.c: 715: Dimmer.LoadGO = 1;
 11492  150F  0021               	movlb	1	; select bank1
 11493  1510  153A               	bsf	_Dimmer^(0+128),2	;volatile
 11494                           
 11495                           ;Dimmer_B1.c: 717: DimmerLights1.Line = 0;
 11496  1511  0022               	movlb	2	; select bank2
 11497  1512  1358               	bcf	(_DimmerLights1^(0+256)+10),6
 11498                           
 11499                           ;Dimmer_B1.c: 720: DimmerLights2.Line = 0;
 11500  1513  1369               	bcf	(_DimmerLights2^(0+256)+10),6
 11501                           
 11502                           ;Dimmer_B1.c: 726: if (lights == 1) {
 11503  1514  0020               	movlb	0	; select bank0
 11504  1515  0820               	movf	setDimmerLights_Line@lights,w
 11505  1516  3A01               	xorlw	1
 11506  1517  1D03               	skipz
 11507  1518  2D1C               	goto	l6709
 11508                           
 11509                           ;Dimmer_B1.c: 727: DimmerLights1.Line = 1;
 11510  1519  0022               	movlb	2	; select bank2
 11511  151A  1758               	bsf	(_DimmerLights1^(0+256)+10),6
 11512                           
 11513                           ;Dimmer_B1.c: 728: }
 11514  151B  0008               	return
 11515  151C                     l6709:	
 11516                           
 11517                           ;Dimmer_B1.c: 731: else if (lights == 2) {
 11518  151C  0020               	movlb	0	; select bank0
 11519  151D  0820               	movf	setDimmerLights_Line@lights,w
 11520  151E  3A02               	xorlw	2
 11521  151F  1D03               	skipz
 11522  1520  0008               	return
 11523                           
 11524                           ;Dimmer_B1.c: 732: DimmerLights2.Line = 1;
 11525  1521  0022               	movlb	2	; select bank2
 11526  1522  1769               	bsf	(_DimmerLights2^(0+256)+10),6
 11527  1523  0008               	return
 11528  1524                     __end_of_setDimmerLights_Line:	
 11529                           
 11530                           	psect	text67
 11531  1458                     __ptext67:	
 11532 ;; *************** function _getMain_LightsStatus *****************
 11533 ;; Defined at:
 11534 ;;		line 375 in file "../src/Main_B1.c"
 11535 ;; Parameters:    Size  Location     Type
 11536 ;;		None
 11537 ;; Auto vars:     Size  Location     Type
 11538 ;;  status          1    0[BANK0 ] unsigned char 
 11539 ;; Return value:  Size  Location     Type
 11540 ;;                  1    wreg      unsigned char 
 11541 ;; Registers used:
 11542 ;;		wreg, status,2, status,0
 11543 ;; Tracked objects:
 11544 ;;		On entry : 0/0
 11545 ;;		On exit  : 0/0
 11546 ;;		Unchanged: 0/0
 11547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;Total ram usage:        1 bytes
 11553 ;; Hardware stack levels used:    1
 11554 ;; Hardware stack levels required when called:    5
 11555 ;; This function calls:
 11556 ;;		Nothing
 11557 ;; This function is called by:
 11558 ;;		_DimmerLights_Main
 11559 ;;		_setDimmerLights_Main
 11560 ;;		_Flash_Memory_Main
 11561 ;;		_Exception_Main
 11562 ;;		_Load_Main
 11563 ;; This function uses a non-reentrant model
 11564 ;;
 11565                           
 11566                           
 11567                           ;psect for function _getMain_LightsStatus
 11568  1458                     _getMain_LightsStatus:	
 11569                           
 11570                           ;Main_B1.c: 376: char status = 0;
 11571                           
 11572                           ;incstack = 0
 11573                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 11574  1458  0020               	movlb	0	; select bank0
 11575  1459  01A0               	clrf	getMain_LightsStatus@status
 11576                           
 11577                           ;Main_B1.c: 395: status = DimmerLights1.Status == 1 ? 1 : 0;
 11578  145A  3000               	movlw	0
 11579  145B  0022               	movlb	2	; select bank2
 11580  145C  18D0               	btfsc	(_DimmerLights1^(0+256)+2),1
 11581  145D  3001               	movlw	1
 11582  145E  0020               	movlb	0	; select bank0
 11583  145F  00A0               	movwf	getMain_LightsStatus@status
 11584                           
 11585                           ;Main_B1.c: 396: if (status == 0) {
 11586  1460  08A0               	movf	getMain_LightsStatus@status,f
 11587  1461  1D03               	skipz
 11588  1462  2C69               	goto	l6889
 11589                           
 11590                           ;Main_B1.c: 397: status = DimmerLights2.Status == 1 ? 1 : 0;
 11591  1463  3000               	movlw	0
 11592  1464  0022               	movlb	2	; select bank2
 11593  1465  18E1               	btfsc	(_DimmerLights2^(0+256)+2),1
 11594  1466  3001               	movlw	1
 11595  1467  0020               	movlb	0	; select bank0
 11596  1468  00A0               	movwf	getMain_LightsStatus@status
 11597  1469                     l6889:	
 11598                           
 11599                           ;Main_B1.c: 398: }
 11600                           ;Main_B1.c: 422: return status;
 11601  1469  0820               	movf	getMain_LightsStatus@status,w
 11602  146A  0008               	return
 11603  146B                     __end_of_getMain_LightsStatus:	
 11604                           
 11605                           	psect	text68
 11606  17C6                     __ptext68:	
 11607 ;; *************** function _getDimmerLights_Allow_Condition *****************
 11608 ;; Defined at:
 11609 ;;		line 594 in file "../src/Dimmer_B1.c"
 11610 ;; Parameters:    Size  Location     Type
 11611 ;;  lights          1    wreg     unsigned char 
 11612 ;; Auto vars:     Size  Location     Type
 11613 ;;  lights          1    5[BANK0 ] unsigned char 
 11614 ;;  allow           1    6[BANK0 ] unsigned char 
 11615 ;; Return value:  Size  Location     Type
 11616 ;;                  1    wreg      unsigned char 
 11617 ;; Registers used:
 11618 ;;		wreg, status,2, status,0, pclath, cstack
 11619 ;; Tracked objects:
 11620 ;;		On entry : 0/0
 11621 ;;		On exit  : 0/0
 11622 ;;		Unchanged: 0/0
 11623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11625 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11626 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11628 ;;Total ram usage:        6 bytes
 11629 ;; Hardware stack levels used:    1
 11630 ;; Hardware stack levels required when called:    6
 11631 ;; This function calls:
 11632 ;;		_getLoad_OK
 11633 ;; This function is called by:
 11634 ;;		_setDimmerLights_Main
 11635 ;; This function uses a non-reentrant model
 11636 ;;
 11637                           
 11638                           
 11639                           ;psect for function _getDimmerLights_Allow_Condition
 11640  17C6                     _getDimmerLights_Allow_Condition:	
 11641                           
 11642                           ;incstack = 0
 11643                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 11644                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 11645  17C6  0020               	movlb	0	; select bank0
 11646  17C7  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 11647                           
 11648                           ;Dimmer_B1.c: 595: char allow = 0;
 11649  17C8  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 11650                           
 11651                           ;Dimmer_B1.c: 602: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 11652  17C9  01A2               	clrf	_getDimmerLights_Allow_Condition$1979
 11653  17CA  0AA2               	incf	_getDimmerLights_Allow_Condition$1979,f
 11654  17CB  3193  2302  3197   	fcall	_getLoad_OK
 11655  17CE  3800               	iorlw	0
 11656  17CF  1D03               	skipz
 11657  17D0  2FD6               	goto	l6903
 11658  17D1  0021               	movlb	1	; select bank1
 11659  17D2  193A               	btfsc	_Dimmer^(0+128),2	;volatile
 11660  17D3  2FD6               	goto	l6903
 11661  17D4  0020               	movlb	0	; select bank0
 11662  17D5  01A2               	clrf	_getDimmerLights_Allow_Condition$1979
 11663  17D6                     l6903:	
 11664  17D6  0020               	movlb	0	; select bank0
 11665  17D7  0822               	movf	_getDimmerLights_Allow_Condition$1979,w
 11666  17D8  00A1               	movwf	??_getDimmerLights_Allow_Condition
 11667  17D9  0821               	movf	??_getDimmerLights_Allow_Condition,w
 11668  17DA  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 11669                           
 11670                           ;Dimmer_B1.c: 607: if (allow == 0) {
 11671  17DB  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 11672  17DC  1D03               	skipz
 11673  17DD  2FFE               	goto	l6927
 11674                           
 11675                           ;Dimmer_B1.c: 608: if (lights == 1) {
 11676  17DE  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 11677  17DF  3A01               	xorlw	1
 11678  17E0  1D03               	skipz
 11679  17E1  2FED               	goto	l6917
 11680                           
 11681                           ;Dimmer_B1.c: 609: allow = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1
      +                           : 0;
 11682  17E2  01A3               	clrf	_getDimmerLights_Allow_Condition$1980
 11683  17E3  0AA3               	incf	_getDimmerLights_Allow_Condition$1980,f
 11684  17E4  0022               	movlb	2	; select bank2
 11685  17E5  1DE9               	btfss	(_DimmerLights2^(0+256)+10),3
 11686  17E6  1B60               	btfsc	(_DimmerLights2^(0+256)+1),6
 11687  17E7  2FEA               	goto	l6915
 11688  17E8  0020               	movlb	0	; select bank0
 11689  17E9  01A3               	clrf	_getDimmerLights_Allow_Condition$1980
 11690  17EA                     l6915:	
 11691  17EA  0020               	movlb	0	; select bank0
 11692  17EB  0823               	movf	_getDimmerLights_Allow_Condition$1980,w
 11693  17EC  2FFB               	goto	L6
 11694  17ED                     l6917:	
 11695                           ;Dimmer_B1.c: 610: } else if (lights == 2) {
 11696                           
 11697  17ED  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 11698  17EE  3A02               	xorlw	2
 11699  17EF  1D03               	skipz
 11700  17F0  2FFE               	goto	l6927
 11701                           
 11702                           ;Dimmer_B1.c: 611: allow = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1
      +                           : 0;
 11703  17F1  01A4               	clrf	_getDimmerLights_Allow_Condition$1981
 11704  17F2  0AA4               	incf	_getDimmerLights_Allow_Condition$1981,f
 11705  17F3  0022               	movlb	2	; select bank2
 11706  17F4  1DD8               	btfss	(_DimmerLights1^(0+256)+10),3
 11707  17F5  1B4F               	btfsc	(_DimmerLights1^(0+256)+1),6
 11708  17F6  2FF9               	goto	l6925
 11709  17F7  0020               	movlb	0	; select bank0
 11710  17F8  01A4               	clrf	_getDimmerLights_Allow_Condition$1981
 11711  17F9                     l6925:	
 11712  17F9  0020               	movlb	0	; select bank0
 11713  17FA  0824               	movf	_getDimmerLights_Allow_Condition$1981,w
 11714  17FB                     L6:	
 11715  17FB  00A1               	movwf	??_getDimmerLights_Allow_Condition
 11716  17FC  0821               	movf	??_getDimmerLights_Allow_Condition,w
 11717  17FD  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 11718  17FE                     l6927:	
 11719                           
 11720                           ;Dimmer_B1.c: 612: }
 11721                           ;Dimmer_B1.c: 613: }
 11722                           ;Dimmer_B1.c: 627: return allow;
 11723  17FE  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 11724  17FF  0008               	return
 11725  1800                     __end_of_getDimmerLights_Allow_Condition:	
 11726                           
 11727                           	psect	text69
 11728  1302                     __ptext69:	
 11729 ;; *************** function _getLoad_OK *****************
 11730 ;; Defined at:
 11731 ;;		line 265 in file "../src/OverLoad_B1.c"
 11732 ;; Parameters:    Size  Location     Type
 11733 ;;		None
 11734 ;; Auto vars:     Size  Location     Type
 11735 ;;  ok              1    0[BANK0 ] unsigned char 
 11736 ;; Return value:  Size  Location     Type
 11737 ;;                  1    wreg      unsigned char 
 11738 ;; Registers used:
 11739 ;;		wreg, status,2
 11740 ;; Tracked objects:
 11741 ;;		On entry : 0/0
 11742 ;;		On exit  : 0/0
 11743 ;;		Unchanged: 0/0
 11744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11748 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11749 ;;Total ram usage:        1 bytes
 11750 ;; Hardware stack levels used:    1
 11751 ;; Hardware stack levels required when called:    5
 11752 ;; This function calls:
 11753 ;;		Nothing
 11754 ;; This function is called by:
 11755 ;;		_DimmerLights_Main
 11756 ;;		_getDimmerLights_Allow_Condition
 11757 ;; This function uses a non-reentrant model
 11758 ;;
 11759                           
 11760                           
 11761                           ;psect for function _getLoad_OK
 11762  1302                     _getLoad_OK:	
 11763                           
 11764                           ;OverLoad_B1.c: 266: char ok = Load.OK == 1 ? 1 : 0;
 11765                           
 11766                           ;incstack = 0
 11767                           ; Regs used in _getLoad_OK: [wreg+status,2]
 11768  1302  3000               	movlw	0
 11769  1303  0022               	movlb	2	; select bank2
 11770  1304  1BA0               	btfsc	_Load^(0+256),7
 11771  1305  3001               	movlw	1
 11772  1306  0020               	movlb	0	; select bank0
 11773  1307  00A0               	movwf	getLoad_OK@ok
 11774                           
 11775                           ;OverLoad_B1.c: 267: return ok;
 11776  1308  0820               	movf	getLoad_OK@ok,w
 11777  1309  0008               	return
 11778  130A                     __end_of_getLoad_OK:	
 11779                           
 11780                           	psect	text70
 11781  175C                     __ptext70:	
 11782 ;; *************** function _getMain_All_Error_Status *****************
 11783 ;; Defined at:
 11784 ;;		line 426 in file "../src/Main_B1.c"
 11785 ;; Parameters:    Size  Location     Type
 11786 ;;  command         1    wreg     unsigned char 
 11787 ;; Auto vars:     Size  Location     Type
 11788 ;;  command         1    5[BANK0 ] unsigned char 
 11789 ;;  status          1    6[BANK0 ] unsigned char 
 11790 ;; Return value:  Size  Location     Type
 11791 ;;                  1    wreg      unsigned char 
 11792 ;; Registers used:
 11793 ;;		wreg, status,2, status,0
 11794 ;; Tracked objects:
 11795 ;;		On entry : 0/0
 11796 ;;		On exit  : 0/0
 11797 ;;		Unchanged: 0/0
 11798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11800 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11802 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11803 ;;Total ram usage:        7 bytes
 11804 ;; Hardware stack levels used:    1
 11805 ;; Hardware stack levels required when called:    5
 11806 ;; This function calls:
 11807 ;;		Nothing
 11808 ;; This function is called by:
 11809 ;;		_DimmerLights_Main
 11810 ;;		_Exception_Main
 11811 ;;		_Load_Main
 11812 ;;		_setTemp_Main
 11813 ;;		_setSw_Main
 11814 ;; This function uses a non-reentrant model
 11815 ;;
 11816                           
 11817                           
 11818                           ;psect for function _getMain_All_Error_Status
 11819  175C                     _getMain_All_Error_Status:	
 11820                           
 11821                           ;incstack = 0
 11822                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 11823                           ;getMain_All_Error_Status@command stored from wreg
 11824  175C  0020               	movlb	0	; select bank0
 11825  175D  00A5               	movwf	getMain_All_Error_Status@command
 11826                           
 11827                           ;Main_B1.c: 427: char status = 0;
 11828  175E  01A6               	clrf	getMain_All_Error_Status@status
 11829                           
 11830                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 11831  175F  08A6               	movf	getMain_All_Error_Status@status,f
 11832  1760  1D03               	skipz
 11833  1761  2F76               	goto	l6869
 11834  1762  0825               	movf	getMain_All_Error_Status@command,w
 11835  1763  3A02               	xorlw	2
 11836  1764  1903               	skipnz
 11837  1765  2F76               	goto	l6869
 11838                           
 11839                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 11840  1766  0021               	movlb	1	; select bank1
 11841  1767  18C6               	btfsc	_Temp^(0+128),1
 11842  1768  2F6D               	goto	l6867
 11843  1769  0020               	movlb	0	; select bank0
 11844  176A  01A1               	clrf	_getMain_All_Error_Status$3127
 11845  176B  01A2               	clrf	_getMain_All_Error_Status$3127+1
 11846  176C  2F72               	goto	l1167
 11847  176D                     l6867:	
 11848  176D  3002               	movlw	2
 11849  176E  0020               	movlb	0	; select bank0
 11850  176F  00A1               	movwf	_getMain_All_Error_Status$3127
 11851  1770  3000               	movlw	0
 11852  1771  00A2               	movwf	_getMain_All_Error_Status$3127+1
 11853  1772                     l1167:	
 11854  1772  0821               	movf	_getMain_All_Error_Status$3127,w
 11855  1773  00A0               	movwf	??_getMain_All_Error_Status
 11856  1774  0820               	movf	??_getMain_All_Error_Status,w
 11857  1775  00A6               	movwf	getMain_All_Error_Status@status
 11858  1776                     l6869:	
 11859                           
 11860                           ;Main_B1.c: 440: }
 11861                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 11862  1776  08A6               	movf	getMain_All_Error_Status@status,f
 11863  1777  1D03               	skipz
 11864  1778  2F8D               	goto	l1168
 11865  1779  0825               	movf	getMain_All_Error_Status@command,w
 11866  177A  3A03               	xorlw	3
 11867  177B  1903               	skipnz
 11868  177C  2F8D               	goto	l1168
 11869                           
 11870                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 11871  177D  0022               	movlb	2	; select bank2
 11872  177E  1AA0               	btfsc	_Load^(0+256),5
 11873  177F  2F84               	goto	l6877
 11874  1780  0020               	movlb	0	; select bank0
 11875  1781  01A3               	clrf	_getMain_All_Error_Status$3128
 11876  1782  01A4               	clrf	_getMain_All_Error_Status$3128+1
 11877  1783  2F89               	goto	l1172
 11878  1784                     l6877:	
 11879  1784  3003               	movlw	3
 11880  1785  0020               	movlb	0	; select bank0
 11881  1786  00A3               	movwf	_getMain_All_Error_Status$3128
 11882  1787  3000               	movlw	0
 11883  1788  00A4               	movwf	_getMain_All_Error_Status$3128+1
 11884  1789                     l1172:	
 11885  1789  0823               	movf	_getMain_All_Error_Status$3128,w
 11886  178A  00A0               	movwf	??_getMain_All_Error_Status
 11887  178B  0820               	movf	??_getMain_All_Error_Status,w
 11888  178C  00A6               	movwf	getMain_All_Error_Status@status
 11889  178D                     l1168:	
 11890                           
 11891                           ;Main_B1.c: 447: }
 11892                           ;Main_B1.c: 463: return status;
 11893  178D  0826               	movf	getMain_All_Error_Status@status,w
 11894  178E  0008               	return
 11895  178F                     __end_of_getMain_All_Error_Status:	
 11896                           
 11897                           	psect	text71
 11898  1492                     __ptext71:	
 11899 ;; *************** function _DimmerLights_Initialization *****************
 11900 ;; Defined at:
 11901 ;;		line 341 in file "../src/Dimmer_B1.c"
 11902 ;; Parameters:    Size  Location     Type
 11903 ;;		None
 11904 ;; Auto vars:     Size  Location     Type
 11905 ;;		None
 11906 ;; Return value:  Size  Location     Type
 11907 ;;		None               void
 11908 ;; Registers used:
 11909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11910 ;; Tracked objects:
 11911 ;;		On entry : 0/0
 11912 ;;		On exit  : 0/0
 11913 ;;		Unchanged: 0/0
 11914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;Total ram usage:        1 bytes
 11920 ;; Hardware stack levels used:    1
 11921 ;; Hardware stack levels required when called:    7
 11922 ;; This function calls:
 11923 ;;		_setDimmerLights_Initialization
 11924 ;; This function is called by:
 11925 ;;		_main
 11926 ;; This function uses a non-reentrant model
 11927 ;;
 11928                           
 11929                           
 11930                           ;psect for function _DimmerLights_Initialization
 11931  1492                     _DimmerLights_Initialization:	
 11932                           
 11933                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 11934                           
 11935                           ;incstack = 0
 11936                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11937  1492  304E               	movlw	_DimmerLights1& (0+255)
 11938  1493  0020               	movlb	0	; select bank0
 11939  1494  00A4               	movwf	??_DimmerLights_Initialization
 11940  1495  0824               	movf	??_DimmerLights_Initialization,w
 11941  1496  0021               	movlb	1	; select bank1
 11942  1497  00C2               	movwf	_DimmerLights11^(0+128)
 11943                           
 11944                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 11945  1498  3001               	movlw	1
 11946  1499  3197  272B  3194   	fcall	_setDimmerLights_Initialization
 11947                           
 11948                           ;Dimmer_B1.c: 349: DimmerLights22 = &DimmerLights2;
 11949  149C  305F               	movlw	_DimmerLights2& (0+255)
 11950  149D  0020               	movlb	0	; select bank0
 11951  149E  00A4               	movwf	??_DimmerLights_Initialization
 11952  149F  0824               	movf	??_DimmerLights_Initialization,w
 11953  14A0  0021               	movlb	1	; select bank1
 11954  14A1  00C3               	movwf	_DimmerLights22^(0+128)
 11955                           
 11956                           ;Dimmer_B1.c: 350: setDimmerLights_Initialization(2);
 11957  14A2  3002               	movlw	2
 11958  14A3  3197  272B         	fcall	_setDimmerLights_Initialization
 11959  14A5  0008               	return
 11960  14A6                     __end_of_DimmerLights_Initialization:	
 11961                           
 11962                           	psect	text72
 11963  172B                     __ptext72:	
 11964 ;; *************** function _setDimmerLights_Initialization *****************
 11965 ;; Defined at:
 11966 ;;		line 365 in file "../src/Dimmer_B1.c"
 11967 ;; Parameters:    Size  Location     Type
 11968 ;;  lights          1    wreg     unsigned char 
 11969 ;; Auto vars:     Size  Location     Type
 11970 ;;  lights          1    3[BANK0 ] unsigned char 
 11971 ;; Return value:  Size  Location     Type
 11972 ;;		None               void
 11973 ;; Registers used:
 11974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11975 ;; Tracked objects:
 11976 ;;		On entry : 0/0
 11977 ;;		On exit  : 0/0
 11978 ;;		Unchanged: 0/0
 11979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11983 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11984 ;;Total ram usage:        2 bytes
 11985 ;; Hardware stack levels used:    1
 11986 ;; Hardware stack levels required when called:    6
 11987 ;; This function calls:
 11988 ;;		_DimmerLightsPointSelect
 11989 ;; This function is called by:
 11990 ;;		_DimmerLights_Initialization
 11991 ;; This function uses a non-reentrant model
 11992 ;;
 11993                           
 11994                           
 11995                           ;psect for function _setDimmerLights_Initialization
 11996  172B                     _setDimmerLights_Initialization:	
 11997                           
 11998                           ;incstack = 0
 11999                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 12000                           ;setDimmerLights_Initialization@lights stored from wreg
 12001  172B  0020               	movlb	0	; select bank0
 12002  172C  00A3               	movwf	setDimmerLights_Initialization@lights
 12003                           
 12004                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 12005  172D  0823               	movf	setDimmerLights_Initialization@lights,w
 12006  172E  3194  2445  3197   	fcall	_DimmerLightsPointSelect
 12007                           
 12008                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 12009  1731  3007               	movlw	7
 12010  1732  0020               	movlb	0	; select bank0
 12011  1733  00A2               	movwf	??_setDimmerLights_Initialization
 12012  1734  086F               	movf	_DimmerLights,w
 12013  1735  3E08               	addlw	8
 12014  1736  0086               	movwf	6
 12015  1737  3001               	movlw	1	; select bank2/3
 12016  1738  0087               	movwf	7
 12017  1739  0822               	movf	??_setDimmerLights_Initialization,w
 12018  173A  0081               	movwf	1
 12019                           
 12020                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(70*0.8));
 12021  173B  3038               	movlw	56
 12022  173C  00A2               	movwf	??_setDimmerLights_Initialization
 12023  173D  086F               	movf	_DimmerLights,w
 12024  173E  3E06               	addlw	6
 12025  173F  0086               	movwf	6
 12026  1740  3001               	movlw	1	; select bank2/3
 12027  1741  0087               	movwf	7
 12028  1742  0822               	movf	??_setDimmerLights_Initialization,w
 12029  1743  0081               	movwf	1
 12030                           
 12031                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 12032  1744  300C               	movlw	12
 12033  1745  00A2               	movwf	??_setDimmerLights_Initialization
 12034  1746  086F               	movf	_DimmerLights,w
 12035  1747  3E09               	addlw	9
 12036  1748  0086               	movwf	6
 12037  1749  3001               	movlw	1	; select bank2/3
 12038  174A  0087               	movwf	7
 12039  174B  0822               	movf	??_setDimmerLights_Initialization,w
 12040  174C  0081               	movwf	1
 12041                           
 12042                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12043  174D  086F               	movf	_DimmerLights,w
 12044  174E  3E06               	addlw	6
 12045  174F  0086               	movwf	6
 12046  1750  3001               	movlw	1	; select bank2/3
 12047  1751  0087               	movwf	7
 12048  1752  0801               	movf	1,w
 12049  1753  00A2               	movwf	??_setDimmerLights_Initialization
 12050  1754  086F               	movf	_DimmerLights,w
 12051  1755  3E04               	addlw	4
 12052  1756  0086               	movwf	6
 12053  1757  3001               	movlw	1	; select bank2/3
 12054  1758  0087               	movwf	7
 12055  1759  0822               	movf	??_setDimmerLights_Initialization,w
 12056  175A  0081               	movwf	1
 12057  175B  0008               	return
 12058  175C                     __end_of_setDimmerLights_Initialization:	
 12059                           
 12060                           	psect	text73
 12061  12FA                     __ptext73:	
 12062 ;; *************** function _DelayOff_Main *****************
 12063 ;; Defined at:
 12064 ;;		line 41 in file "../src/DelayOff_B1.c"
 12065 ;; Parameters:    Size  Location     Type
 12066 ;;		None
 12067 ;; Auto vars:     Size  Location     Type
 12068 ;;		None
 12069 ;; Return value:  Size  Location     Type
 12070 ;;		None               void
 12071 ;; Registers used:
 12072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12073 ;; Tracked objects:
 12074 ;;		On entry : 0/0
 12075 ;;		On exit  : 0/0
 12076 ;;		Unchanged: 0/0
 12077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12082 ;;Total ram usage:        0 bytes
 12083 ;; Hardware stack levels used:    1
 12084 ;; Hardware stack levels required when called:   11
 12085 ;; This function calls:
 12086 ;;		_DlyOff_Main
 12087 ;; This function is called by:
 12088 ;;		_main
 12089 ;; This function uses a non-reentrant model
 12090 ;;
 12091                           
 12092                           
 12093                           ;psect for function _DelayOff_Main
 12094  12FA                     _DelayOff_Main:	
 12095                           
 12096                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 12097                           
 12098                           ;incstack = 0
 12099                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12100  12FA  3001               	movlw	1
 12101  12FB  318C  245B  3192   	fcall	_DlyOff_Main
 12102                           
 12103                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 12104  12FE  3002               	movlw	2
 12105  12FF  318C  245B         	fcall	_DlyOff_Main
 12106  1301  0008               	return
 12107  1302                     __end_of_DelayOff_Main:	
 12108                           
 12109                           	psect	text74
 12110  0C5B                     __ptext74:	
 12111 ;; *************** function _DlyOff_Main *****************
 12112 ;; Defined at:
 12113 ;;		line 61 in file "../src/DelayOff_B1.c"
 12114 ;; Parameters:    Size  Location     Type
 12115 ;;  sw              1    wreg     unsigned char 
 12116 ;; Auto vars:     Size  Location     Type
 12117 ;;  sw              1   78[BANK0 ] unsigned char 
 12118 ;; Return value:  Size  Location     Type
 12119 ;;		None               void
 12120 ;; Registers used:
 12121 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12122 ;; Tracked objects:
 12123 ;;		On entry : 0/0
 12124 ;;		On exit  : 0/0
 12125 ;;		Unchanged: 0/0
 12126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12128 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12129 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;Total ram usage:        3 bytes
 12132 ;; Hardware stack levels used:    1
 12133 ;; Hardware stack levels required when called:   10
 12134 ;; This function calls:
 12135 ;;		_DelayOffPointSelect
 12136 ;;		_setBuz
 12137 ;;		_setDimmerLights_ErrorClose
 12138 ;; This function is called by:
 12139 ;;		_DelayOff_Main
 12140 ;; This function uses a non-reentrant model
 12141 ;;
 12142                           
 12143                           
 12144                           ;psect for function _DlyOff_Main
 12145  0C5B                     _DlyOff_Main:	
 12146                           
 12147                           ;incstack = 0
 12148                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12149                           ;DlyOff_Main@sw stored from wreg
 12150  0C5B  0020               	movlb	0	; select bank0
 12151  0C5C  00EE               	movwf	DlyOff_Main@sw
 12152                           
 12153                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 12154  0C5D  086E               	movf	DlyOff_Main@sw,w
 12155  0C5E  3194  247E  318C   	fcall	_DelayOffPointSelect
 12156                           
 12157                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 12158  0C61  0870               	movf	_DelayOff,w
 12159  0C62  0086               	movwf	6
 12160  0C63  0871               	movf	_DelayOff+1,w
 12161  0C64  0087               	movwf	7
 12162  0C65  1C81               	btfss	1,1
 12163  0C66  0008               	return
 12164                           
 12165                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 12166  0C67  0870               	movf	_DelayOff,w
 12167  0C68  0086               	movwf	6
 12168  0C69  0871               	movf	_DelayOff+1,w
 12169  0C6A  0087               	movwf	7
 12170  0C6B  3142               	addfsr 1,2
 12171  0C6C  3001               	movlw	1
 12172  0C6D  0781               	addwf	1,f
 12173  0C6E  3141               	addfsr 1,1
 12174  0C6F  1803               	skipnc
 12175  0C70  0A81               	incf	1,f
 12176                           
 12177                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 12178  0C71  0870               	movf	_DelayOff,w
 12179  0C72  0086               	movwf	6
 12180  0C73  0871               	movf	_DelayOff+1,w
 12181  0C74  0087               	movwf	7
 12182  0C75  3142               	addfsr 1,2
 12183  0C76  3F40               	moviw [0]fsr1
 12184  0C77  0021               	movlb	1	; select bank1
 12185  0C78  00ED               	movwf	??_DlyOff_Main^(0+128)
 12186  0C79  3F41               	moviw [1]fsr1
 12187  0C7A  00EE               	movwf	(??_DlyOff_Main^(0+128)+1)
 12188  0C7B  3017               	movlw	23
 12189  0C7C  026E               	subwf	(??_DlyOff_Main+1)^(0+128),w
 12190  0C7D  3070               	movlw	112
 12191  0C7E  1903               	skipnz
 12192  0C7F  026D               	subwf	??_DlyOff_Main^(0+128),w
 12193  0C80  1C03               	skipc
 12194  0C81  0008               	return
 12195                           
 12196                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 12197  0C82  0870               	movf	_DelayOff,w
 12198  0C83  0086               	movwf	6
 12199  0C84  0871               	movf	_DelayOff+1,w
 12200  0C85  0087               	movwf	7
 12201  0C86  3142               	addfsr 1,2
 12202  0C87  3000               	movlw	0
 12203  0C88  3FC0               	movwi [0]fsr1
 12204  0C89  3FC1               	movwi [1]fsr1
 12205                           
 12206                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 12207  0C8A  3001               	movlw	1
 12208  0C8B  00ED               	movwf	??_DlyOff_Main^(0+128)
 12209  0C8C  0870               	movf	_DelayOff,w
 12210  0C8D  0086               	movwf	6
 12211  0C8E  0871               	movf	_DelayOff+1,w
 12212  0C8F  0087               	movwf	7
 12213  0C90  3144               	addfsr 1,4
 12214  0C91  086D               	movf	??_DlyOff_Main^(0+128),w
 12215  0C92  0781               	addwf	1,f
 12216                           
 12217                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 12218  0C93  0870               	movf	_DelayOff,w
 12219  0C94  0086               	movwf	6
 12220  0C95  0871               	movf	_DelayOff+1,w
 12221  0C96  0087               	movwf	7
 12222  0C97  3144               	addfsr 1,4
 12223  0C98  0870               	movf	_DelayOff,w
 12224  0C99  0084               	movwf	4
 12225  0C9A  0871               	movf	_DelayOff+1,w
 12226  0C9B  0085               	movwf	5
 12227  0C9C  3101               	addfsr 0,1
 12228  0C9D  0800               	movf	0,w
 12229  0C9E  0201               	subwf	1,w
 12230  0C9F  1C03               	skipc
 12231  0CA0  0008               	return
 12232                           
 12233                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 12234  0CA1  0870               	movf	_DelayOff,w
 12235  0CA2  0086               	movwf	6
 12236  0CA3  0871               	movf	_DelayOff+1,w
 12237  0CA4  0087               	movwf	7
 12238  0CA5  3144               	addfsr 1,4
 12239  0CA6  0181               	clrf	1
 12240                           
 12241                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 12242  0CA7  0870               	movf	_DelayOff,w
 12243  0CA8  0086               	movwf	6
 12244  0CA9  0871               	movf	_DelayOff+1,w
 12245  0CAA  0087               	movwf	7
 12246  0CAB  1081               	bcf	1,1
 12247                           
 12248                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 12249  0CAC  3064               	movlw	100
 12250  0CAD  0020               	movlb	0	; select bank0
 12251  0CAE  00A9               	movwf	setBuz@time
 12252  0CAF  3000               	movlw	0
 12253  0CB0  00AA               	movwf	setBuz@time+1
 12254  0CB1  3001               	movlw	1
 12255  0CB2  318B  234D  318C   	fcall	_setBuz
 12256                           
 12257                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 12258  0CB5  0020               	movlb	0	; select bank0
 12259  0CB6  086E               	movf	DlyOff_Main@sw,w
 12260  0CB7  318D  251B         	fcall	_setDimmerLights_ErrorClose
 12261  0CB9  0008               	return
 12262  0CBA                     __end_of_DlyOff_Main:	
 12263                           
 12264                           	psect	text75
 12265  0D1B                     __ptext75:	
 12266 ;; *************** function _setDimmerLights_ErrorClose *****************
 12267 ;; Defined at:
 12268 ;;		line 854 in file "../src/Dimmer_B1.c"
 12269 ;; Parameters:    Size  Location     Type
 12270 ;;  lights          1    wreg     unsigned char 
 12271 ;; Auto vars:     Size  Location     Type
 12272 ;;  lights          1    1[BANK1 ] unsigned char 
 12273 ;;  i               2    2[BANK1 ] int 
 12274 ;;  count           1    0[BANK1 ] unsigned char 
 12275 ;; Return value:  Size  Location     Type
 12276 ;;		None               void
 12277 ;; Registers used:
 12278 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12279 ;; Tracked objects:
 12280 ;;		On entry : 0/0
 12281 ;;		On exit  : 0/0
 12282 ;;		Unchanged: 0/0
 12283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12285 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12287 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;Total ram usage:        5 bytes
 12289 ;; Hardware stack levels used:    1
 12290 ;; Hardware stack levels required when called:    9
 12291 ;; This function calls:
 12292 ;;		_DimmerLightsPointSelect
 12293 ;;		_getDimmerLights_Status
 12294 ;;		_setDimmerLights_SwOff
 12295 ;; This function is called by:
 12296 ;;		_DlyOff_Main
 12297 ;; This function uses a non-reentrant model
 12298 ;;
 12299                           
 12300                           
 12301                           ;psect for function _setDimmerLights_ErrorClose
 12302  0D1B                     _setDimmerLights_ErrorClose:	
 12303                           
 12304                           ;incstack = 0
 12305                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12306                           ;setDimmerLights_ErrorClose@lights stored from wreg
 12307  0D1B  0021               	movlb	1	; select bank1
 12308  0D1C  00EA               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 12309                           
 12310                           ;Dimmer_B1.c: 855: if (lights == 255) {
 12311  0D1D  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 12312  0D1E  3AFF               	xorlw	255
 12313  0D1F  1D03               	skipz
 12314  0D20  2D5E               	goto	l6805
 12315                           
 12316                           ;Dimmer_B1.c: 860: char count = 2;
 12317  0D21  3002               	movlw	2
 12318  0D22  0020               	movlb	0	; select bank0
 12319  0D23  00ED               	movwf	??_setDimmerLights_ErrorClose
 12320  0D24  086D               	movf	??_setDimmerLights_ErrorClose,w
 12321  0D25  0021               	movlb	1	; select bank1
 12322  0D26  00E9               	movwf	setDimmerLights_ErrorClose@count^(0+128)
 12323                           
 12324                           ;Dimmer_B1.c: 865: for (int i = 0; i < count; i++) {
 12325  0D27  01EB               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 12326  0D28  01EC               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 12327  0D29                     l6803:	
 12328  0D29  086C               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 12329  0D2A  3A80               	xorlw	128
 12330  0D2B  0020               	movlb	0	; select bank0
 12331  0D2C  00ED               	movwf	??_setDimmerLights_ErrorClose
 12332  0D2D  3080               	movlw	128
 12333  0D2E  026D               	subwf	??_setDimmerLights_ErrorClose,w
 12334  0D2F  1D03               	skipz
 12335  0D30  2D34               	goto	u7815
 12336  0D31  0021               	movlb	1	; select bank1
 12337  0D32  0869               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 12338  0D33  026B               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 12339  0D34                     u7815:	
 12340  0D34  1803               	btfsc	3,0
 12341  0D35  0008               	return
 12342                           
 12343                           ;Dimmer_B1.c: 866: DimmerLightsPointSelect(i + 1);
 12344  0D36  0021               	movlb	1	; select bank1
 12345  0D37  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 12346  0D38  3E01               	addlw	1
 12347  0D39  3194  2445  318D   	fcall	_DimmerLightsPointSelect
 12348                           
 12349                           ;Dimmer_B1.c: 867: if (getDimmerLights_Status(i + 1) == 1) {
 12350  0D3C  0021               	movlb	1	; select bank1
 12351  0D3D  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 12352  0D3E  3E01               	addlw	1
 12353  0D3F  3193  23EB  318D   	fcall	_getDimmerLights_Status
 12354  0D42  3A01               	xorlw	1
 12355  0D43  1D03               	skipz
 12356  0D44  2D58               	goto	l6801
 12357                           
 12358                           ;Dimmer_B1.c: 868: DimmerLights->SwFlag = 1;
 12359  0D45  0020               	movlb	0	; select bank0
 12360  0D46  086F               	movf	_DimmerLights,w
 12361  0D47  3E0B               	addlw	11
 12362  0D48  0086               	movwf	6
 12363  0D49  3001               	movlw	1	; select bank2/3
 12364  0D4A  0087               	movwf	7
 12365  0D4B  1481               	bsf	1,1
 12366                           
 12367                           ;Dimmer_B1.c: 869: DimmerLights->Status = 0;
 12368  0D4C  086F               	movf	_DimmerLights,w
 12369  0D4D  3E02               	addlw	2
 12370  0D4E  0086               	movwf	6
 12371  0D4F  3001               	movlw	1	; select bank2/3
 12372  0D50  0087               	movwf	7
 12373  0D51  1081               	bcf	1,1
 12374                           
 12375                           ;Dimmer_B1.c: 870: setDimmerLights_SwOff(i + 1);
 12376  0D52  0021               	movlb	1	; select bank1
 12377  0D53  086B               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 12378  0D54  3E01               	addlw	1
 12379  0D55  318A  2258  318D   	fcall	_setDimmerLights_SwOff
 12380  0D58                     l6801:	
 12381  0D58  3001               	movlw	1
 12382  0D59  0021               	movlb	1	; select bank1
 12383  0D5A  07EB               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 12384  0D5B  3000               	movlw	0
 12385  0D5C  3DEC               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 12386  0D5D  2D29               	goto	l6803
 12387  0D5E                     l6805:	
 12388                           ;Dimmer_B1.c: 871: }
 12389                           ;Dimmer_B1.c: 872: }
 12390                           ;Dimmer_B1.c: 873: } else {
 12391                           
 12392                           
 12393                           ;Dimmer_B1.c: 874: DimmerLightsPointSelect(lights);
 12394  0D5E  0021               	movlb	1	; select bank1
 12395  0D5F  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 12396  0D60  3194  2445  318D   	fcall	_DimmerLightsPointSelect
 12397                           
 12398                           ;Dimmer_B1.c: 875: if (getDimmerLights_Status(lights) == 1) {
 12399  0D63  0021               	movlb	1	; select bank1
 12400  0D64  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 12401  0D65  3193  23EB  318D   	fcall	_getDimmerLights_Status
 12402  0D68  3A01               	xorlw	1
 12403  0D69  1D03               	skipz
 12404  0D6A  0008               	return
 12405                           
 12406                           ;Dimmer_B1.c: 876: DimmerLights->SwFlag = 1;
 12407  0D6B  0020               	movlb	0	; select bank0
 12408  0D6C  086F               	movf	_DimmerLights,w
 12409  0D6D  3E0B               	addlw	11
 12410  0D6E  0086               	movwf	6
 12411  0D6F  3001               	movlw	1	; select bank2/3
 12412  0D70  0087               	movwf	7
 12413  0D71  1481               	bsf	1,1
 12414                           
 12415                           ;Dimmer_B1.c: 877: DimmerLights->Status = 0;
 12416  0D72  086F               	movf	_DimmerLights,w
 12417  0D73  3E02               	addlw	2
 12418  0D74  0086               	movwf	6
 12419  0D75  3001               	movlw	1	; select bank2/3
 12420  0D76  0087               	movwf	7
 12421  0D77  1081               	bcf	1,1
 12422                           
 12423                           ;Dimmer_B1.c: 878: setDimmerLights_SwOff(lights);
 12424  0D78  0021               	movlb	1	; select bank1
 12425  0D79  086A               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 12426  0D7A  318A  2258         	fcall	_setDimmerLights_SwOff
 12427  0D7C  0008               	return
 12428  0D7D                     __end_of_setDimmerLights_ErrorClose:	
 12429                           
 12430                           	psect	text76
 12431  0A58                     __ptext76:	
 12432 ;; *************** function _setDimmerLights_SwOff *****************
 12433 ;; Defined at:
 12434 ;;		line 450 in file "../src/Dimmer_B1.c"
 12435 ;; Parameters:    Size  Location     Type
 12436 ;;  sw              1    wreg     unsigned char 
 12437 ;; Auto vars:     Size  Location     Type
 12438 ;;  sw              1   76[BANK0 ] unsigned char 
 12439 ;; Return value:  Size  Location     Type
 12440 ;;		None               void
 12441 ;; Registers used:
 12442 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12443 ;; Tracked objects:
 12444 ;;		On entry : 0/0
 12445 ;;		On exit  : 0/0
 12446 ;;		Unchanged: 0/0
 12447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12449 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;Total ram usage:        1 bytes
 12453 ;; Hardware stack levels used:    1
 12454 ;; Hardware stack levels required when called:    8
 12455 ;; This function calls:
 12456 ;;		_DimmerLightsPointSelect
 12457 ;;		_getDelayOff_GO
 12458 ;;		_setDelayOff_GO
 12459 ;; This function is called by:
 12460 ;;		_setDimmerLights_ErrorClose
 12461 ;;		_Exception_Main
 12462 ;;		_setSw_Main
 12463 ;; This function uses a non-reentrant model
 12464 ;;
 12465                           
 12466                           
 12467                           ;psect for function _setDimmerLights_SwOff
 12468  0A58                     _setDimmerLights_SwOff:	
 12469                           
 12470                           ;incstack = 0
 12471                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12472                           ;setDimmerLights_SwOff@sw stored from wreg
 12473  0A58  0020               	movlb	0	; select bank0
 12474  0A59  00EC               	movwf	setDimmerLights_SwOff@sw
 12475                           
 12476                           ;Dimmer_B1.c: 451: DimmerLightsPointSelect(sw);
 12477  0A5A  086C               	movf	setDimmerLights_SwOff@sw,w
 12478  0A5B  3194  2445  318A   	fcall	_DimmerLightsPointSelect
 12479                           
 12480                           ;Dimmer_B1.c: 453: if (DimmerLights->SwFlag == 1) {
 12481  0A5E  0020               	movlb	0	; select bank0
 12482  0A5F  086F               	movf	_DimmerLights,w
 12483  0A60  3E0B               	addlw	11
 12484  0A61  0086               	movwf	6
 12485  0A62  3001               	movlw	1	; select bank2/3
 12486  0A63  0087               	movwf	7
 12487  0A64  1C81               	btfss	1,1
 12488  0A65  0008               	return
 12489                           
 12490                           ;Dimmer_B1.c: 454: DimmerLights->SwFlag = 0;
 12491  0A66  086F               	movf	_DimmerLights,w
 12492  0A67  3E0B               	addlw	11
 12493  0A68  0086               	movwf	6
 12494  0A69  3001               	movlw	1	; select bank2/3
 12495  0A6A  0087               	movwf	7
 12496  0A6B  1081               	bcf	1,1
 12497                           
 12498                           ;Dimmer_B1.c: 455: if (DimmerLights->Status == 1) {
 12499  0A6C  086F               	movf	_DimmerLights,w
 12500  0A6D  3E02               	addlw	2
 12501  0A6E  0086               	movwf	6
 12502  0A6F  3001               	movlw	1	; select bank2/3
 12503  0A70  0087               	movwf	7
 12504  0A71  1C81               	btfss	1,1
 12505  0A72  2A8D               	goto	l6691
 12506                           
 12507                           ;Dimmer_B1.c: 457: if (DimmerLights->SwAdj == 1) {
 12508  0A73  086F               	movf	_DimmerLights,w
 12509  0A74  3E0B               	addlw	11
 12510  0A75  0086               	movwf	6
 12511  0A76  3001               	movlw	1	; select bank2/3
 12512  0A77  0087               	movwf	7
 12513  0A78  1D01               	btfss	1,2
 12514  0A79  0008               	return
 12515                           
 12516                           ;Dimmer_B1.c: 458: DimmerLights->SwAdj = 0;
 12517  0A7A  086F               	movf	_DimmerLights,w
 12518  0A7B  3E0B               	addlw	11
 12519  0A7C  0086               	movwf	6
 12520  0A7D  3001               	movlw	1	; select bank2/3
 12521  0A7E  0087               	movwf	7
 12522  0A7F  1101               	bcf	1,2
 12523                           
 12524                           ;Dimmer_B1.c: 460: DimmerLights->TriggerAdj = 1;
 12525  0A80  086F               	movf	_DimmerLights,w
 12526  0A81  3E0A               	addlw	10
 12527  0A82  0086               	movwf	6
 12528  0A83  3001               	movlw	1	; select bank2/3
 12529  0A84  0087               	movwf	7
 12530  0A85  1581               	bsf	1,3
 12531                           
 12532                           ;Dimmer_B1.c: 461: DimmerLights->SwitchAdj = 0;
 12533  0A86  086F               	movf	_DimmerLights,w
 12534  0A87  3E0A               	addlw	10
 12535  0A88  0086               	movwf	6
 12536  0A89  3001               	movlw	1	; select bank2/3
 12537  0A8A  0087               	movwf	7
 12538  0A8B  1101               	bcf	1,2
 12539                           
 12540                           ;Dimmer_B1.c: 462: }
 12541                           ;Dimmer_B1.c: 463: } else {
 12542  0A8C  0008               	return
 12543  0A8D                     l6691:	
 12544                           
 12545                           ;Dimmer_B1.c: 464: DimmerLights->Trigger = 1;
 12546  0A8D  086F               	movf	_DimmerLights,w
 12547  0A8E  3E0A               	addlw	10
 12548  0A8F  0086               	movwf	6
 12549  0A90  3001               	movlw	1	; select bank2/3
 12550  0A91  0087               	movwf	7
 12551  0A92  1481               	bsf	1,1
 12552                           
 12553                           ;Dimmer_B1.c: 465: DimmerLights->Switch = 0;
 12554  0A93  086F               	movf	_DimmerLights,w
 12555  0A94  3E0A               	addlw	10
 12556  0A95  0086               	movwf	6
 12557  0A96  3001               	movlw	1	; select bank2/3
 12558  0A97  0087               	movwf	7
 12559  0A98  1001               	bcf	1,0
 12560                           
 12561                           ;Dimmer_B1.c: 468: if (getDelayOff_GO(sw) == 1) {
 12562  0A99  086C               	movf	setDimmerLights_SwOff@sw,w
 12563  0A9A  3193  23CB  318A   	fcall	_getDelayOff_GO
 12564  0A9D  3A01               	xorlw	1
 12565  0A9E  1D03               	skipz
 12566  0A9F  0008               	return
 12567                           
 12568                           ;Dimmer_B1.c: 469: setDelayOff_GO(sw, 0, 0);
 12569  0AA0  0020               	movlb	0	; select bank0
 12570  0AA1  01E6               	clrf	setDelayOff_GO@command
 12571  0AA2  01E7               	clrf	setDelayOff_GO@value
 12572  0AA3  086C               	movf	setDimmerLights_SwOff@sw,w
 12573  0AA4  318B  23A6         	fcall	_setDelayOff_GO
 12574  0AA6  0008               	return
 12575  0AA7                     __end_of_setDimmerLights_SwOff:	
 12576                           
 12577                           	psect	text77
 12578  0BA6                     __ptext77:	
 12579 ;; *************** function _setDelayOff_GO *****************
 12580 ;; Defined at:
 12581 ;;		line 83 in file "../src/DelayOff_B1.c"
 12582 ;; Parameters:    Size  Location     Type
 12583 ;;  sw              1    wreg     unsigned char 
 12584 ;;  command         1   70[BANK0 ] unsigned char 
 12585 ;;  value           1   71[BANK0 ] unsigned char 
 12586 ;; Auto vars:     Size  Location     Type
 12587 ;;  sw              1   75[BANK0 ] unsigned char 
 12588 ;; Return value:  Size  Location     Type
 12589 ;;		None               void
 12590 ;; Registers used:
 12591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12592 ;; Tracked objects:
 12593 ;;		On entry : 0/0
 12594 ;;		On exit  : 0/0
 12595 ;;		Unchanged: 0/0
 12596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12597 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12598 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12599 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12600 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12601 ;;Total ram usage:        6 bytes
 12602 ;; Hardware stack levels used:    1
 12603 ;; Hardware stack levels required when called:    7
 12604 ;; This function calls:
 12605 ;;		_DelayOffPointSelect
 12606 ;;		_DelayTimejudge
 12607 ;;		_setProductData
 12608 ;; This function is called by:
 12609 ;;		_setDimmerLights_SwOff
 12610 ;; This function uses a non-reentrant model
 12611 ;;
 12612                           
 12613                           
 12614                           ;psect for function _setDelayOff_GO
 12615  0BA6                     _setDelayOff_GO:	
 12616                           
 12617                           ;incstack = 0
 12618                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12619                           ;setDelayOff_GO@sw stored from wreg
 12620  0BA6  0020               	movlb	0	; select bank0
 12621  0BA7  00EB               	movwf	setDelayOff_GO@sw
 12622                           
 12623                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 12624  0BA8  086B               	movf	setDelayOff_GO@sw,w
 12625  0BA9  3194  247E  318B   	fcall	_DelayOffPointSelect
 12626                           
 12627                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 12628  0BAC  0020               	movlb	0	; select bank0
 12629  0BAD  0866               	movf	setDelayOff_GO@command,w
 12630  0BAE  3A01               	xorlw	1
 12631  0BAF  3000               	movlw	0
 12632  0BB0  1903               	skipnz
 12633  0BB1  3001               	movlw	1
 12634  0BB2  00E8               	movwf	??_setDelayOff_GO
 12635  0BB3  0870               	movf	_DelayOff,w
 12636  0BB4  0086               	movwf	6
 12637  0BB5  0871               	movf	_DelayOff+1,w
 12638  0BB6  0087               	movwf	7
 12639  0BB7  0DE8               	rlf	??_setDelayOff_GO,f
 12640  0BB8  0801               	movf	1,w
 12641  0BB9  0668               	xorwf	??_setDelayOff_GO,w
 12642  0BBA  39FD               	andlw	-3
 12643  0BBB  0668               	xorwf	??_setDelayOff_GO,w
 12644  0BBC  0081               	movwf	1
 12645                           
 12646                           ;DelayOff_B1.c: 89: if (command == 1) {
 12647  0BBD  0866               	movf	setDelayOff_GO@command,w
 12648  0BBE  3A01               	xorlw	1
 12649  0BBF  1D03               	skipz
 12650  0BC0  2BEA               	goto	l6447
 12651                           
 12652                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 12653  0BC1  0867               	movf	setDelayOff_GO@value,w
 12654  0BC2  3196  2677  318B   	fcall	_DelayTimejudge
 12655  0BC5  0020               	movlb	0	; select bank0
 12656  0BC6  00E8               	movwf	??_setDelayOff_GO
 12657  0BC7  0870               	movf	_DelayOff,w
 12658  0BC8  3E01               	addlw	1
 12659  0BC9  00E9               	movwf	??_setDelayOff_GO+1
 12660  0BCA  3000               	movlw	0
 12661  0BCB  3D71               	addwfc	_DelayOff+1,w
 12662  0BCC  00EA               	movwf	??_setDelayOff_GO+2
 12663  0BCD  0869               	movf	??_setDelayOff_GO+1,w
 12664  0BCE  0086               	movwf	6
 12665  0BCF  086A               	movf	??_setDelayOff_GO+2,w
 12666  0BD0  0087               	movwf	7
 12667  0BD1  0868               	movf	??_setDelayOff_GO,w
 12668  0BD2  0081               	movwf	1
 12669                           
 12670                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 12671  0BD3  300F               	movlw	15
 12672  0BD4  0567               	andwf	setDelayOff_GO@value,w
 12673  0BD5  00E8               	movwf	??_setDelayOff_GO
 12674  0BD6  0868               	movf	??_setDelayOff_GO,w
 12675  0BD7  3A05               	xorlw	5
 12676  0BD8  1903               	skipnz
 12677  0BD9  2BDE               	goto	l6441
 12678  0BDA  0867               	movf	setDelayOff_GO@value,w
 12679  0BDB  390F               	andlw	15
 12680  0BDC  1D03               	btfss	3,2
 12681  0BDD  2BE4               	goto	l6445
 12682  0BDE                     l6441:	
 12683  0BDE  3026               	movlw	38
 12684  0BDF  0267               	subwf	setDelayOff_GO@value,w
 12685  0BE0  1803               	skipnc
 12686  0BE1  2BE4               	goto	l6445
 12687                           
 12688                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 12689  0BE2  0867               	movf	setDelayOff_GO@value,w
 12690  0BE3  2BE6               	goto	L8
 12691  0BE4                     l6445:	
 12692                           ;DelayOff_B1.c: 93: } else {
 12693                           
 12694                           
 12695                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 12696  0BE4  3005               	movlw	5
 12697  0BE5  0020               	movlb	0	; select bank0
 12698  0BE6                     L8:	
 12699  0BE6  00E8               	movwf	??_setDelayOff_GO
 12700  0BE7  0868               	movf	??_setDelayOff_GO,w
 12701  0BE8  00E2               	movwf	setProductData@value
 12702  0BE9  2BEC               	goto	L7
 12703  0BEA                     l6447:	
 12704                           ;DelayOff_B1.c: 95: }
 12705                           ;DelayOff_B1.c: 96: } else {
 12706                           
 12707                           
 12708                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 12709  0BEA  0020               	movlb	0	; select bank0
 12710  0BEB  01E2               	clrf	setProductData@value
 12711  0BEC                     L7:	
 12712  0BEC  086B               	movf	setDelayOff_GO@sw,w
 12713  0BED  3E1A               	addlw	26
 12714  0BEE  3193  239F         	fcall	_setProductData
 12715                           
 12716                           ;DelayOff_B1.c: 98: }
 12717                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 12718  0BF0  0870               	movf	_DelayOff,w
 12719  0BF1  0086               	movwf	6
 12720  0BF2  0871               	movf	_DelayOff+1,w
 12721  0BF3  0087               	movwf	7
 12722  0BF4  3142               	addfsr 1,2
 12723  0BF5  3000               	movlw	0
 12724  0BF6  3FC0               	movwi [0]fsr1
 12725  0BF7  3FC1               	movwi [1]fsr1
 12726                           
 12727                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 12728  0BF8  0870               	movf	_DelayOff,w
 12729  0BF9  0086               	movwf	6
 12730  0BFA  0871               	movf	_DelayOff+1,w
 12731  0BFB  0087               	movwf	7
 12732  0BFC  3144               	addfsr 1,4
 12733  0BFD  0181               	clrf	1
 12734  0BFE  0008               	return
 12735  0BFF                     __end_of_setDelayOff_GO:	
 12736                           
 12737                           	psect	text78
 12738  139F                     __ptext78:	
 12739 ;; *************** function _setProductData *****************
 12740 ;; Defined at:
 12741 ;;		line 605 in file "../src/Main_B1.c"
 12742 ;; Parameters:    Size  Location     Type
 12743 ;;  address         1    wreg     unsigned char 
 12744 ;;  value           1   66[BANK0 ] unsigned char 
 12745 ;; Auto vars:     Size  Location     Type
 12746 ;;  address         1   69[BANK0 ] unsigned char 
 12747 ;; Return value:  Size  Location     Type
 12748 ;;		None               void
 12749 ;; Registers used:
 12750 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12751 ;; Tracked objects:
 12752 ;;		On entry : 0/0
 12753 ;;		On exit  : 0/0
 12754 ;;		Unchanged: 0/0
 12755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12756 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12757 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12758 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12759 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12760 ;;Total ram usage:        4 bytes
 12761 ;; Hardware stack levels used:    1
 12762 ;; Hardware stack levels required when called:    5
 12763 ;; This function calls:
 12764 ;;		Nothing
 12765 ;; This function is called by:
 12766 ;;		_setDelayOff_GO
 12767 ;;		_setDimmerLights
 12768 ;;		_setDimmerLights_Adj
 12769 ;;		_setTemp_Main
 12770 ;; This function uses a non-reentrant model
 12771 ;;
 12772                           
 12773                           
 12774                           ;psect for function _setProductData
 12775  139F                     _setProductData:	
 12776                           
 12777                           ;incstack = 0
 12778                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 12779                           ;setProductData@address stored from wreg
 12780  139F  0020               	movlb	0	; select bank0
 12781  13A0  00E5               	movwf	setProductData@address
 12782                           
 12783                           ;Main_B1.c: 606: product->Data[address] = value;
 12784  13A1  0862               	movf	setProductData@value,w
 12785  13A2  00E3               	movwf	??_setProductData
 12786  13A3  0865               	movf	setProductData@address,w
 12787  13A4  077A               	addwf	_product,w
 12788  13A5  00E4               	movwf	??_setProductData+1
 12789  13A6  0864               	movf	??_setProductData+1,w
 12790  13A7  0086               	movwf	6
 12791  13A8  3002               	movlw	2	; select bank4/5
 12792  13A9  0087               	movwf	7
 12793  13AA  0863               	movf	??_setProductData,w
 12794  13AB  0081               	movwf	1
 12795  13AC  0008               	return
 12796  13AD                     __end_of_setProductData:	
 12797                           
 12798                           	psect	text79
 12799  1677                     __ptext79:	
 12800 ;; *************** function _DelayTimejudge *****************
 12801 ;; Defined at:
 12802 ;;		line 112 in file "../src/DelayOff_B1.c"
 12803 ;; Parameters:    Size  Location     Type
 12804 ;;  value           1    wreg     unsigned char 
 12805 ;; Auto vars:     Size  Location     Type
 12806 ;;  value           1    9[BANK0 ] unsigned char 
 12807 ;;  k               1    8[BANK0 ] unsigned char 
 12808 ;;  j               1    7[BANK0 ] unsigned char 
 12809 ;;  i               1    6[BANK0 ] unsigned char 
 12810 ;; Return value:  Size  Location     Type
 12811 ;;                  1    wreg      unsigned char 
 12812 ;; Registers used:
 12813 ;;		wreg, status,2, status,0, pclath, cstack
 12814 ;; Tracked objects:
 12815 ;;		On entry : 0/0
 12816 ;;		On exit  : 0/0
 12817 ;;		Unchanged: 0/0
 12818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12822 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12823 ;;Total ram usage:        6 bytes
 12824 ;; Hardware stack levels used:    1
 12825 ;; Hardware stack levels required when called:    6
 12826 ;; This function calls:
 12827 ;;		___bmul
 12828 ;; This function is called by:
 12829 ;;		_setDelayOff_GO
 12830 ;; This function uses a non-reentrant model
 12831 ;;
 12832                           
 12833                           
 12834                           ;psect for function _DelayTimejudge
 12835  1677                     _DelayTimejudge:	
 12836                           
 12837                           ;incstack = 0
 12838                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 12839                           ;DelayTimejudge@value stored from wreg
 12840  1677  0020               	movlb	0	; select bank0
 12841  1678  00A9               	movwf	DelayTimejudge@value
 12842                           
 12843                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 12844  1679  3005               	movlw	5
 12845  167A  00A4               	movwf	??_DelayTimejudge
 12846  167B  0824               	movf	??_DelayTimejudge,w
 12847  167C  00A6               	movwf	DelayTimejudge@i
 12848  167D  01A7               	clrf	DelayTimejudge@j
 12849  167E  01A8               	clrf	DelayTimejudge@k
 12850                           
 12851                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 12852  167F  3031               	movlw	49
 12853  1680  0229               	subwf	DelayTimejudge@value,w
 12854  1681  1803               	skipnc
 12855  1682  2E9F               	goto	l6393
 12856                           
 12857                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 12858  1683  0829               	movf	DelayTimejudge@value,w
 12859  1684  390F               	andlw	15
 12860  1685  00A4               	movwf	??_DelayTimejudge
 12861  1686  0824               	movf	??_DelayTimejudge,w
 12862  1687  00A7               	movwf	DelayTimejudge@j
 12863                           
 12864                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 12865  1688  0829               	movf	DelayTimejudge@value,w
 12866  1689  00A4               	movwf	??_DelayTimejudge
 12867  168A  3004               	movlw	4
 12868  168B                     u6925:	
 12869  168B  36A4               	lsrf	??_DelayTimejudge,f
 12870  168C  0B89               	decfsz	9,f
 12871  168D  2E8B               	goto	u6925
 12872  168E  0824               	movf	??_DelayTimejudge,w
 12873  168F  390F               	andlw	15
 12874  1690  00A5               	movwf	??_DelayTimejudge+1
 12875  1691  0825               	movf	??_DelayTimejudge+1,w
 12876  1692  00A8               	movwf	DelayTimejudge@k
 12877                           
 12878                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 12879  1693  300A               	movlw	10
 12880  1694  00A4               	movwf	??_DelayTimejudge
 12881  1695  0824               	movf	??_DelayTimejudge,w
 12882  1696  00A0               	movwf	___bmul@multiplicand
 12883  1697  0828               	movf	DelayTimejudge@k,w
 12884  1698  3193  23FC         	fcall	___bmul
 12885  169A  0020               	movlb	0	; select bank0
 12886  169B  0727               	addwf	DelayTimejudge@j,w
 12887  169C  00A5               	movwf	??_DelayTimejudge+1
 12888  169D  0825               	movf	??_DelayTimejudge+1,w
 12889  169E  00A6               	movwf	DelayTimejudge@i
 12890  169F                     l6393:	
 12891                           
 12892                           ;DelayOff_B1.c: 118: }
 12893                           ;DelayOff_B1.c: 139: return i;
 12894  169F  0826               	movf	DelayTimejudge@i,w
 12895  16A0  0008               	return
 12896  16A1                     __end_of_DelayTimejudge:	
 12897                           
 12898                           	psect	text80
 12899  13FC                     __ptext80:	
 12900 ;; *************** function ___bmul *****************
 12901 ;; Defined at:
 12902 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 12903 ;; Parameters:    Size  Location     Type
 12904 ;;  multiplier      1    wreg     unsigned char 
 12905 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 12906 ;; Auto vars:     Size  Location     Type
 12907 ;;  multiplier      1    3[BANK0 ] unsigned char 
 12908 ;;  product         1    2[BANK0 ] unsigned char 
 12909 ;; Return value:  Size  Location     Type
 12910 ;;                  1    wreg      unsigned char 
 12911 ;; Registers used:
 12912 ;;		wreg, status,2, status,0
 12913 ;; Tracked objects:
 12914 ;;		On entry : 0/0
 12915 ;;		On exit  : 0/0
 12916 ;;		Unchanged: 0/0
 12917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12918 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12919 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12920 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;Total ram usage:        4 bytes
 12923 ;; Hardware stack levels used:    1
 12924 ;; Hardware stack levels required when called:    5
 12925 ;; This function calls:
 12926 ;;		Nothing
 12927 ;; This function is called by:
 12928 ;;		_DelayTimejudge
 12929 ;; This function uses a non-reentrant model
 12930 ;;
 12931                           
 12932                           
 12933                           ;psect for function ___bmul
 12934  13FC                     ___bmul:	
 12935                           
 12936                           ;incstack = 0
 12937                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 12938                           ;___bmul@multiplier stored from wreg
 12939  13FC  0020               	movlb	0	; select bank0
 12940  13FD  00A3               	movwf	___bmul@multiplier
 12941  13FE  01A2               	clrf	___bmul@product
 12942  13FF                     l6359:	
 12943  13FF  1C23               	btfss	___bmul@multiplier,0
 12944  1400  2C05               	goto	l6363
 12945  1401  0820               	movf	___bmul@multiplicand,w
 12946  1402  00A1               	movwf	??___bmul
 12947  1403  0821               	movf	??___bmul,w
 12948  1404  07A2               	addwf	___bmul@product,f
 12949  1405                     l6363:	
 12950  1405  1003               	clrc
 12951  1406  0DA0               	rlf	___bmul@multiplicand,f
 12952  1407  1003               	clrc
 12953  1408  0CA3               	rrf	___bmul@multiplier,f
 12954  1409  08A3               	movf	___bmul@multiplier,f
 12955  140A  1D03               	skipz
 12956  140B  2BFF               	goto	l6359
 12957  140C  0822               	movf	___bmul@product,w
 12958  140D  0008               	return
 12959  140E                     __end_of___bmul:	
 12960                           
 12961                           	psect	text81
 12962  13CB                     __ptext81:	
 12963 ;; *************** function _getDelayOff_GO *****************
 12964 ;; Defined at:
 12965 ;;		line 105 in file "../src/DelayOff_B1.c"
 12966 ;; Parameters:    Size  Location     Type
 12967 ;;  sw              1    wreg     unsigned char 
 12968 ;; Auto vars:     Size  Location     Type
 12969 ;;  sw              1    1[BANK0 ] unsigned char 
 12970 ;;  go              1    2[BANK0 ] unsigned char 
 12971 ;; Return value:  Size  Location     Type
 12972 ;;                  1    wreg      unsigned char 
 12973 ;; Registers used:
 12974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12975 ;; Tracked objects:
 12976 ;;		On entry : 0/0
 12977 ;;		On exit  : 0/0
 12978 ;;		Unchanged: 0/0
 12979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12981 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12983 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12984 ;;Total ram usage:        2 bytes
 12985 ;; Hardware stack levels used:    1
 12986 ;; Hardware stack levels required when called:    6
 12987 ;; This function calls:
 12988 ;;		_DelayOffPointSelect
 12989 ;; This function is called by:
 12990 ;;		_setDimmerLights_SwOff
 12991 ;; This function uses a non-reentrant model
 12992 ;;
 12993                           
 12994                           
 12995                           ;psect for function _getDelayOff_GO
 12996  13CB                     _getDelayOff_GO:	
 12997                           
 12998                           ;incstack = 0
 12999                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13000                           ;getDelayOff_GO@sw stored from wreg
 13001  13CB  0020               	movlb	0	; select bank0
 13002  13CC  00A1               	movwf	getDelayOff_GO@sw
 13003                           
 13004                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 13005  13CD  0821               	movf	getDelayOff_GO@sw,w
 13006  13CE  3194  247E         	fcall	_DelayOffPointSelect
 13007                           
 13008                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 13009  13D0  0870               	movf	_DelayOff,w
 13010  13D1  0086               	movwf	6
 13011  13D2  0871               	movf	_DelayOff+1,w
 13012  13D3  0087               	movwf	7
 13013  13D4  3000               	movlw	0
 13014  13D5  1881               	btfsc	1,1
 13015  13D6  3001               	movlw	1
 13016  13D7  0020               	movlb	0	; select bank0
 13017  13D8  00A2               	movwf	getDelayOff_GO@go
 13018                           
 13019                           ;DelayOff_B1.c: 108: return go;
 13020  13D9  0822               	movf	getDelayOff_GO@go,w
 13021  13DA  0008               	return
 13022  13DB                     __end_of_getDelayOff_GO:	
 13023                           
 13024                           	psect	text82
 13025  13EB                     __ptext82:	
 13026 ;; *************** function _getDimmerLights_Status *****************
 13027 ;; Defined at:
 13028 ;;		line 765 in file "../src/Dimmer_B1.c"
 13029 ;; Parameters:    Size  Location     Type
 13030 ;;  lights          1    wreg     unsigned char 
 13031 ;; Auto vars:     Size  Location     Type
 13032 ;;  lights          1    2[BANK0 ] unsigned char 
 13033 ;;  status          1    3[BANK0 ] unsigned char 
 13034 ;; Return value:  Size  Location     Type
 13035 ;;                  1    wreg      unsigned char 
 13036 ;; Registers used:
 13037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13038 ;; Tracked objects:
 13039 ;;		On entry : 0/0
 13040 ;;		On exit  : 0/0
 13041 ;;		Unchanged: 0/0
 13042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13044 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13046 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;Total ram usage:        2 bytes
 13048 ;; Hardware stack levels used:    1
 13049 ;; Hardware stack levels required when called:    6
 13050 ;; This function calls:
 13051 ;;		_DimmerLightsPointSelect
 13052 ;; This function is called by:
 13053 ;;		_setDimmerLights_ErrorClose
 13054 ;;		_Exception_Main
 13055 ;; This function uses a non-reentrant model
 13056 ;;
 13057                           
 13058                           
 13059                           ;psect for function _getDimmerLights_Status
 13060  13EB                     _getDimmerLights_Status:	
 13061                           
 13062                           ;incstack = 0
 13063                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 13064                           ;getDimmerLights_Status@lights stored from wreg
 13065  13EB  0020               	movlb	0	; select bank0
 13066  13EC  00A2               	movwf	getDimmerLights_Status@lights
 13067                           
 13068                           ;Dimmer_B1.c: 766: DimmerLightsPointSelect(lights);
 13069  13ED  0822               	movf	getDimmerLights_Status@lights,w
 13070  13EE  3194  2445         	fcall	_DimmerLightsPointSelect
 13071                           
 13072                           ;Dimmer_B1.c: 767: char status = DimmerLights->Status == 1 ? 1 : 0;
 13073  13F0  0020               	movlb	0	; select bank0
 13074  13F1  086F               	movf	_DimmerLights,w
 13075  13F2  3E02               	addlw	2
 13076  13F3  0086               	movwf	6
 13077  13F4  3001               	movlw	1	; select bank2/3
 13078  13F5  0087               	movwf	7
 13079  13F6  3000               	movlw	0
 13080  13F7  1881               	btfsc	1,1
 13081  13F8  3001               	movlw	1
 13082  13F9  00A3               	movwf	getDimmerLights_Status@status
 13083                           
 13084                           ;Dimmer_B1.c: 768: return status;
 13085  13FA  0823               	movf	getDimmerLights_Status@status,w
 13086  13FB  0008               	return
 13087  13FC                     __end_of_getDimmerLights_Status:	
 13088                           
 13089                           	psect	text83
 13090  1445                     __ptext83:	
 13091 ;; *************** function _DimmerLightsPointSelect *****************
 13092 ;; Defined at:
 13093 ;;		line 321 in file "../src/Dimmer_B1.c"
 13094 ;; Parameters:    Size  Location     Type
 13095 ;;  lights          1    wreg     unsigned char 
 13096 ;; Auto vars:     Size  Location     Type
 13097 ;;  lights          1    1[BANK0 ] unsigned char 
 13098 ;; Return value:  Size  Location     Type
 13099 ;;		None               void
 13100 ;; Registers used:
 13101 ;;		wreg
 13102 ;; Tracked objects:
 13103 ;;		On entry : 0/0
 13104 ;;		On exit  : 0/0
 13105 ;;		Unchanged: 0/0
 13106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13109 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13110 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13111 ;;Total ram usage:        2 bytes
 13112 ;; Hardware stack levels used:    1
 13113 ;; Hardware stack levels required when called:    5
 13114 ;; This function calls:
 13115 ;;		Nothing
 13116 ;; This function is called by:
 13117 ;;		_setDimmerLights_Initialization
 13118 ;;		_setDimmerLights_SwOn
 13119 ;;		_setDimmerLights_SwOff
 13120 ;;		_setDimmerLights_AdjOn
 13121 ;;		_setDimmerLights_Main
 13122 ;;		_getDimmerLights_Status
 13123 ;;		_getAll_DimmerLights_AdjSw
 13124 ;;		_setDimmerLights_ErrorClose
 13125 ;;		_setDimmerLights_Status
 13126 ;;		_setDimmerLights_AdjRF
 13127 ;;		_setDimmerLights_GO
 13128 ;;		_setDimmerLights_MaxmumValue
 13129 ;;		_setDimmerLights_Trigger
 13130 ;; This function uses a non-reentrant model
 13131 ;;
 13132                           
 13133                           
 13134                           ;psect for function _DimmerLightsPointSelect
 13135  1445                     _DimmerLightsPointSelect:	
 13136                           
 13137                           ;incstack = 0
 13138                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 13139                           ;DimmerLightsPointSelect@lights stored from wreg
 13140  1445  0020               	movlb	0	; select bank0
 13141  1446  00A1               	movwf	DimmerLightsPointSelect@lights
 13142                           
 13143                           ;Dimmer_B1.c: 323: if (lights == 1) {
 13144  1447  0821               	movf	DimmerLightsPointSelect@lights,w
 13145  1448  3A01               	xorlw	1
 13146  1449  1D03               	skipz
 13147  144A  2C4F               	goto	l450
 13148                           
 13149                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 13150  144B  304E               	movlw	_DimmerLights1& (0+255)
 13151  144C  00A0               	movwf	??_DimmerLightsPointSelect
 13152  144D  0820               	movf	??_DimmerLightsPointSelect,w
 13153  144E  00EF               	movwf	_DimmerLights
 13154  144F                     l450:	
 13155                           
 13156                           ;Dimmer_B1.c: 325: }
 13157                           ;Dimmer_B1.c: 328: if (lights == 2) {
 13158  144F  0821               	movf	DimmerLightsPointSelect@lights,w
 13159  1450  3A02               	xorlw	2
 13160  1451  1D03               	skipz
 13161  1452  0008               	return
 13162                           
 13163                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights2;
 13164  1453  305F               	movlw	_DimmerLights2& (0+255)
 13165  1454  00A0               	movwf	??_DimmerLightsPointSelect
 13166  1455  0820               	movf	??_DimmerLightsPointSelect,w
 13167  1456  00EF               	movwf	_DimmerLights
 13168  1457  0008               	return
 13169  1458                     __end_of_DimmerLightsPointSelect:	
 13170                           
 13171                           	psect	text84
 13172  0B4D                     __ptext84:	
 13173 ;; *************** function _setBuz *****************
 13174 ;; Defined at:
 13175 ;;		line 22 in file "../src/Buzzer_B1.c"
 13176 ;; Parameters:    Size  Location     Type
 13177 ;;  count           1    wreg     unsigned char 
 13178 ;;  time            2    9[BANK0 ] int 
 13179 ;; Auto vars:     Size  Location     Type
 13180 ;;  count           1   12[BANK0 ] unsigned char 
 13181 ;; Return value:  Size  Location     Type
 13182 ;;		None               void
 13183 ;; Registers used:
 13184 ;;		wreg, status,2, status,0, pclath, cstack
 13185 ;; Tracked objects:
 13186 ;;		On entry : 0/0
 13187 ;;		On exit  : 0/0
 13188 ;;		Unchanged: 0/0
 13189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13190 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13193 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13194 ;;Total ram usage:        4 bytes
 13195 ;; Hardware stack levels used:    1
 13196 ;; Hardware stack levels required when called:    6
 13197 ;; This function calls:
 13198 ;;		___awdiv
 13199 ;; This function is called by:
 13200 ;;		_DlyOff_Main
 13201 ;;		_setDimmerLights_SwOn
 13202 ;;		_setDimmerLights_Adj
 13203 ;;		_my_MainTimer
 13204 ;;		_Exception_Main
 13205 ;;		_setTemp_Main
 13206 ;;		_setSw_Main
 13207 ;; This function uses a non-reentrant model
 13208 ;;
 13209                           
 13210                           
 13211                           ;psect for function _setBuz
 13212  0B4D                     _setBuz:	
 13213                           
 13214                           ;incstack = 0
 13215                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 13216                           ;setBuz@count stored from wreg
 13217  0B4D  0020               	movlb	0	; select bank0
 13218  0B4E  00AC               	movwf	setBuz@count
 13219                           
 13220                           ;Buzzer_B1.c: 23: time /= 10;
 13221  0B4F  300A               	movlw	10
 13222  0B50  00A0               	movwf	___awdiv@divisor
 13223  0B51  3000               	movlw	0
 13224  0B52  00A1               	movwf	___awdiv@divisor+1
 13225  0B53  082A               	movf	setBuz@time+1,w
 13226  0B54  01A3               	clrf	___awdiv@dividend+1
 13227  0B55  07A3               	addwf	___awdiv@dividend+1,f
 13228  0B56  0829               	movf	setBuz@time,w
 13229  0B57  01A2               	clrf	___awdiv@dividend
 13230  0B58  07A2               	addwf	___awdiv@dividend,f
 13231  0B59  318A  22F9  318B   	fcall	___awdiv
 13232  0B5C  0020               	movlb	0	; select bank0
 13233  0B5D  0821               	movf	?___awdiv+1,w
 13234  0B5E  01AA               	clrf	setBuz@time+1
 13235  0B5F  07AA               	addwf	setBuz@time+1,f
 13236  0B60  0820               	movf	?___awdiv,w
 13237  0B61  01A9               	clrf	setBuz@time
 13238  0B62  07A9               	addwf	setBuz@time,f
 13239                           
 13240                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 13241  0B63  0021               	movlb	1	; select bank1
 13242  0B64  1C2E               	btfss	_Buz1^(0+128),0
 13243  0B65  0008               	return
 13244                           
 13245                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 13246  0B66  18AE               	btfsc	_Buz1^(0+128),1
 13247  0B67  2B7E               	goto	l68
 13248                           
 13249                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 13250  0B68  14AE               	bsf	_Buz1^(0+128),1
 13251                           
 13252                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 13253  0B69  01AF               	clrf	(_Buz1^(0+128)+1)
 13254  0B6A  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 13255                           
 13256                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 13257  0B6B  0020               	movlb	0	; select bank0
 13258  0B6C  082C               	movf	setBuz@count,w
 13259  0B6D  00AB               	movwf	??_setBuz
 13260  0B6E  082B               	movf	??_setBuz,w
 13261  0B6F  0021               	movlb	1	; select bank1
 13262  0B70  00B1               	movwf	(_Buz1^(0+128)+3)
 13263                           
 13264                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 13265  0B71  0020               	movlb	0	; select bank0
 13266  0B72  082A               	movf	setBuz@time+1,w
 13267  0B73  0021               	movlb	1	; select bank1
 13268  0B74  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 13269  0B75  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 13270  0B76  0020               	movlb	0	; select bank0
 13271  0B77  0829               	movf	setBuz@time,w
 13272  0B78  0021               	movlb	1	; select bank1
 13273  0B79  01B4               	clrf	(_Buz1^(0+128)+6)
 13274  0B7A  07B4               	addwf	(_Buz1^(0+128)+6),f
 13275                           
 13276                           ;Buzzer_B1.c: 30: RB3 = 1;
 13277  0B7B  0020               	movlb	0	; select bank0
 13278  0B7C  158D               	bsf	13,3	;volatile
 13279                           
 13280                           ;Buzzer_B1.c: 31: } else {
 13281  0B7D  0008               	return
 13282  0B7E                     l68:	
 13283                           
 13284                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 13285  0B7E  19AE               	btfsc	_Buz1^(0+128),3
 13286  0B7F  2B92               	goto	l70
 13287                           
 13288                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 13289  0B80  15AE               	bsf	_Buz1^(0+128),3
 13290                           
 13291                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 13292  0B81  0020               	movlb	0	; select bank0
 13293  0B82  082C               	movf	setBuz@count,w
 13294  0B83  00AB               	movwf	??_setBuz
 13295  0B84  082B               	movf	??_setBuz,w
 13296  0B85  0021               	movlb	1	; select bank1
 13297  0B86  00B2               	movwf	(_Buz1^(0+128)+4)
 13298                           
 13299                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 13300  0B87  0020               	movlb	0	; select bank0
 13301  0B88  082A               	movf	setBuz@time+1,w
 13302  0B89  0021               	movlb	1	; select bank1
 13303  0B8A  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 13304  0B8B  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 13305  0B8C  0020               	movlb	0	; select bank0
 13306  0B8D  0829               	movf	setBuz@time,w
 13307  0B8E  0021               	movlb	1	; select bank1
 13308  0B8F  01B6               	clrf	(_Buz1^(0+128)+8)
 13309  0B90  07B6               	addwf	(_Buz1^(0+128)+8),f
 13310                           
 13311                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 13312  0B91  0008               	return
 13313  0B92                     l70:	
 13314  0B92  1A2E               	btfsc	_Buz1^(0+128),4
 13315  0B93  0008               	return
 13316                           
 13317                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 13318  0B94  162E               	bsf	_Buz1^(0+128),4
 13319                           
 13320                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 13321  0B95  0020               	movlb	0	; select bank0
 13322  0B96  082C               	movf	setBuz@count,w
 13323  0B97  00AB               	movwf	??_setBuz
 13324  0B98  082B               	movf	??_setBuz,w
 13325  0B99  0021               	movlb	1	; select bank1
 13326  0B9A  00B3               	movwf	(_Buz1^(0+128)+5)
 13327                           
 13328                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 13329  0B9B  0020               	movlb	0	; select bank0
 13330  0B9C  082A               	movf	setBuz@time+1,w
 13331  0B9D  0021               	movlb	1	; select bank1
 13332  0B9E  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 13333  0B9F  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 13334  0BA0  0020               	movlb	0	; select bank0
 13335  0BA1  0829               	movf	setBuz@time,w
 13336  0BA2  0021               	movlb	1	; select bank1
 13337  0BA3  01B8               	clrf	(_Buz1^(0+128)+10)
 13338  0BA4  07B8               	addwf	(_Buz1^(0+128)+10),f
 13339  0BA5  0008               	return
 13340  0BA6                     __end_of_setBuz:	
 13341                           
 13342                           	psect	text85
 13343  0AF9                     __ptext85:	
 13344 ;; *************** function ___awdiv *****************
 13345 ;; Defined at:
 13346 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 13347 ;; Parameters:    Size  Location     Type
 13348 ;;  divisor         2    0[BANK0 ] int 
 13349 ;;  dividend        2    2[BANK0 ] int 
 13350 ;; Auto vars:     Size  Location     Type
 13351 ;;  quotient        2    7[BANK0 ] int 
 13352 ;;  sign            1    6[BANK0 ] unsigned char 
 13353 ;;  counter         1    5[BANK0 ] unsigned char 
 13354 ;; Return value:  Size  Location     Type
 13355 ;;                  2    0[BANK0 ] int 
 13356 ;; Registers used:
 13357 ;;		wreg, status,2, status,0
 13358 ;; Tracked objects:
 13359 ;;		On entry : 0/0
 13360 ;;		On exit  : 0/0
 13361 ;;		Unchanged: 0/0
 13362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13363 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13364 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13365 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13366 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13367 ;;Total ram usage:        9 bytes
 13368 ;; Hardware stack levels used:    1
 13369 ;; Hardware stack levels required when called:    5
 13370 ;; This function calls:
 13371 ;;		Nothing
 13372 ;; This function is called by:
 13373 ;;		_setBuz
 13374 ;; This function uses a non-reentrant model
 13375 ;;
 13376                           
 13377                           
 13378                           ;psect for function ___awdiv
 13379  0AF9                     ___awdiv:	
 13380                           
 13381                           ;incstack = 0
 13382                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13383  0AF9  0020               	movlb	0	; select bank0
 13384  0AFA  01A6               	clrf	___awdiv@sign
 13385  0AFB  1FA1               	btfss	___awdiv@divisor+1,7
 13386  0AFC  2B04               	goto	l6483
 13387  0AFD  09A0               	comf	___awdiv@divisor,f
 13388  0AFE  09A1               	comf	___awdiv@divisor+1,f
 13389  0AFF  0AA0               	incf	___awdiv@divisor,f
 13390  0B00  1903               	skipnz
 13391  0B01  0AA1               	incf	___awdiv@divisor+1,f
 13392  0B02  01A6               	clrf	___awdiv@sign
 13393  0B03  0AA6               	incf	___awdiv@sign,f
 13394  0B04                     l6483:	
 13395  0B04  1FA3               	btfss	___awdiv@dividend+1,7
 13396  0B05  2B0F               	goto	l6489
 13397  0B06  09A2               	comf	___awdiv@dividend,f
 13398  0B07  09A3               	comf	___awdiv@dividend+1,f
 13399  0B08  0AA2               	incf	___awdiv@dividend,f
 13400  0B09  1903               	skipnz
 13401  0B0A  0AA3               	incf	___awdiv@dividend+1,f
 13402  0B0B  3001               	movlw	1
 13403  0B0C  00A4               	movwf	??___awdiv
 13404  0B0D  0824               	movf	??___awdiv,w
 13405  0B0E  06A6               	xorwf	___awdiv@sign,f
 13406  0B0F                     l6489:	
 13407  0B0F  01A7               	clrf	___awdiv@quotient
 13408  0B10  01A8               	clrf	___awdiv@quotient+1
 13409  0B11  0821               	movf	___awdiv@divisor+1,w
 13410  0B12  0420               	iorwf	___awdiv@divisor,w
 13411  0B13  1903               	skipnz
 13412  0B14  2B3E               	goto	l6511
 13413  0B15  01A5               	clrf	___awdiv@counter
 13414  0B16  0AA5               	incf	___awdiv@counter,f
 13415  0B17                     l6499:	
 13416  0B17  1BA1               	btfsc	___awdiv@divisor+1,7
 13417  0B18  2B23               	goto	l6501
 13418  0B19  3001               	movlw	1
 13419  0B1A                     u7165:	
 13420  0B1A  35A0               	lslf	___awdiv@divisor,f
 13421  0B1B  0DA1               	rlf	___awdiv@divisor+1,f
 13422  0B1C  0B89               	decfsz	9,f
 13423  0B1D  2B1A               	goto	u7165
 13424  0B1E  3001               	movlw	1
 13425  0B1F  00A4               	movwf	??___awdiv
 13426  0B20  0824               	movf	??___awdiv,w
 13427  0B21  07A5               	addwf	___awdiv@counter,f
 13428  0B22  2B17               	goto	l6499
 13429  0B23                     l6501:	
 13430  0B23  3001               	movlw	1
 13431  0B24                     u7185:	
 13432  0B24  35A7               	lslf	___awdiv@quotient,f
 13433  0B25  0DA8               	rlf	___awdiv@quotient+1,f
 13434  0B26  0B89               	decfsz	9,f
 13435  0B27  2B24               	goto	u7185
 13436  0B28  0821               	movf	___awdiv@divisor+1,w
 13437  0B29  0223               	subwf	___awdiv@dividend+1,w
 13438  0B2A  1D03               	skipz
 13439  0B2B  2B2E               	goto	u7195
 13440  0B2C  0820               	movf	___awdiv@divisor,w
 13441  0B2D  0222               	subwf	___awdiv@dividend,w
 13442  0B2E                     u7195:	
 13443  0B2E  1C03               	skipc
 13444  0B2F  2B35               	goto	l6507
 13445  0B30  0820               	movf	___awdiv@divisor,w
 13446  0B31  02A2               	subwf	___awdiv@dividend,f
 13447  0B32  0821               	movf	___awdiv@divisor+1,w
 13448  0B33  3BA3               	subwfb	___awdiv@dividend+1,f
 13449  0B34  1427               	bsf	___awdiv@quotient,0
 13450  0B35                     l6507:	
 13451  0B35  3001               	movlw	1
 13452  0B36                     u7205:	
 13453  0B36  36A1               	lsrf	___awdiv@divisor+1,f
 13454  0B37  0CA0               	rrf	___awdiv@divisor,f
 13455  0B38  0B89               	decfsz	9,f
 13456  0B39  2B36               	goto	u7205
 13457  0B3A  3001               	movlw	1
 13458  0B3B  02A5               	subwf	___awdiv@counter,f
 13459  0B3C  1D03               	btfss	3,2
 13460  0B3D  2B23               	goto	l6501
 13461  0B3E                     l6511:	
 13462  0B3E  0826               	movf	___awdiv@sign,w
 13463  0B3F  1903               	btfsc	3,2
 13464  0B40  2B46               	goto	l6515
 13465  0B41  09A7               	comf	___awdiv@quotient,f
 13466  0B42  09A8               	comf	___awdiv@quotient+1,f
 13467  0B43  0AA7               	incf	___awdiv@quotient,f
 13468  0B44  1903               	skipnz
 13469  0B45  0AA8               	incf	___awdiv@quotient+1,f
 13470  0B46                     l6515:	
 13471  0B46  0828               	movf	___awdiv@quotient+1,w
 13472  0B47  01A1               	clrf	?___awdiv+1
 13473  0B48  07A1               	addwf	?___awdiv+1,f
 13474  0B49  0827               	movf	___awdiv@quotient,w
 13475  0B4A  01A0               	clrf	?___awdiv
 13476  0B4B  07A0               	addwf	?___awdiv,f
 13477  0B4C  0008               	return
 13478  0B4D                     __end_of___awdiv:	
 13479                           
 13480                           	psect	text86
 13481  12F2                     __ptext86:	
 13482 ;; *************** function _DelayOff_Initialization *****************
 13483 ;; Defined at:
 13484 ;;		line 26 in file "../src/DelayOff_B1.c"
 13485 ;; Parameters:    Size  Location     Type
 13486 ;;		None
 13487 ;; Auto vars:     Size  Location     Type
 13488 ;;		None
 13489 ;; Return value:  Size  Location     Type
 13490 ;;		None               void
 13491 ;; Registers used:
 13492 ;;		wreg, status,2, status,0, pclath, cstack
 13493 ;; Tracked objects:
 13494 ;;		On entry : 0/0
 13495 ;;		On exit  : 0/0
 13496 ;;		Unchanged: 0/0
 13497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13502 ;;Total ram usage:        0 bytes
 13503 ;; Hardware stack levels used:    1
 13504 ;; Hardware stack levels required when called:    7
 13505 ;; This function calls:
 13506 ;;		_DlyOff_Initialization
 13507 ;; This function is called by:
 13508 ;;		_main
 13509 ;; This function uses a non-reentrant model
 13510 ;;
 13511                           
 13512                           
 13513                           ;psect for function _DelayOff_Initialization
 13514  12F2                     _DelayOff_Initialization:	
 13515                           
 13516                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 13517                           
 13518                           ;incstack = 0
 13519                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 13520  12F2  3001               	movlw	1
 13521  12F3  3192  22D1  3192   	fcall	_DlyOff_Initialization
 13522                           
 13523                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 13524  12F6  3002               	movlw	2
 13525  12F7  3192  22D1         	fcall	_DlyOff_Initialization
 13526  12F9  0008               	return
 13527  12FA                     __end_of_DelayOff_Initialization:	
 13528                           
 13529                           	psect	text87
 13530  12D1                     __ptext87:	
 13531 ;; *************** function _DlyOff_Initialization *****************
 13532 ;; Defined at:
 13533 ;;		line 56 in file "../src/DelayOff_B1.c"
 13534 ;; Parameters:    Size  Location     Type
 13535 ;;  sw              1    wreg     unsigned char 
 13536 ;; Auto vars:     Size  Location     Type
 13537 ;;  sw              1    1[BANK0 ] unsigned char 
 13538 ;; Return value:  Size  Location     Type
 13539 ;;		None               void
 13540 ;; Registers used:
 13541 ;;		wreg, status,2, status,0, pclath, cstack
 13542 ;; Tracked objects:
 13543 ;;		On entry : 0/0
 13544 ;;		On exit  : 0/0
 13545 ;;		Unchanged: 0/0
 13546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13548 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13550 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13551 ;;Total ram usage:        1 bytes
 13552 ;; Hardware stack levels used:    1
 13553 ;; Hardware stack levels required when called:    6
 13554 ;; This function calls:
 13555 ;;		_DelayOffPointSelect
 13556 ;; This function is called by:
 13557 ;;		_DelayOff_Initialization
 13558 ;; This function uses a non-reentrant model
 13559 ;;
 13560                           
 13561                           
 13562                           ;psect for function _DlyOff_Initialization
 13563  12D1                     _DlyOff_Initialization:	
 13564                           
 13565                           ;incstack = 0
 13566                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 13567                           ;DlyOff_Initialization@sw stored from wreg
 13568  12D1  0020               	movlb	0	; select bank0
 13569  12D2  00A1               	movwf	DlyOff_Initialization@sw
 13570                           
 13571                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 13572  12D3  0821               	movf	DlyOff_Initialization@sw,w
 13573  12D4  3194  247E         	fcall	_DelayOffPointSelect
 13574  12D6  0008               	return
 13575  12D7                     __end_of_DlyOff_Initialization:	
 13576                           
 13577                           	psect	text88
 13578  147E                     __ptext88:	
 13579 ;; *************** function _DelayOffPointSelect *****************
 13580 ;; Defined at:
 13581 ;;		line 7 in file "../src/DelayOff_B1.c"
 13582 ;; Parameters:    Size  Location     Type
 13583 ;;  sw              1    wreg     unsigned char 
 13584 ;; Auto vars:     Size  Location     Type
 13585 ;;  sw              1    0[BANK0 ] unsigned char 
 13586 ;; Return value:  Size  Location     Type
 13587 ;;		None               void
 13588 ;; Registers used:
 13589 ;;		wreg, status,2, status,0
 13590 ;; Tracked objects:
 13591 ;;		On entry : 0/0
 13592 ;;		On exit  : 0/0
 13593 ;;		Unchanged: 0/0
 13594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13596 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13598 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13599 ;;Total ram usage:        1 bytes
 13600 ;; Hardware stack levels used:    1
 13601 ;; Hardware stack levels required when called:    5
 13602 ;; This function calls:
 13603 ;;		Nothing
 13604 ;; This function is called by:
 13605 ;;		_DlyOff_Initialization
 13606 ;;		_DlyOff_Main
 13607 ;;		_setDelayOff_GO
 13608 ;;		_getDelayOff_GO
 13609 ;; This function uses a non-reentrant model
 13610 ;;
 13611                           
 13612                           
 13613                           ;psect for function _DelayOffPointSelect
 13614  147E                     _DelayOffPointSelect:	
 13615                           
 13616                           ;incstack = 0
 13617                           ; Regs used in _DelayOffPointSelect: [wreg+status,2+status,0]
 13618                           ;DelayOffPointSelect@sw stored from wreg
 13619  147E  0020               	movlb	0	; select bank0
 13620  147F  00A0               	movwf	DelayOffPointSelect@sw
 13621                           
 13622                           ;DelayOff_B1.c: 9: if (sw == 1) {
 13623  1480  0820               	movf	DelayOffPointSelect@sw,w
 13624  1481  3A01               	xorlw	1
 13625  1482  1D03               	skipz
 13626  1483  2C89               	goto	l6377
 13627                           
 13628                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 13629  1484  30D8               	movlw	low _DlySw1
 13630  1485  00F0               	movwf	_DelayOff
 13631  1486  3000               	movlw	high _DlySw1
 13632  1487  00F1               	movwf	_DelayOff+1
 13633                           
 13634                           ;DelayOff_B1.c: 11: }
 13635  1488  0008               	return
 13636  1489                     l6377:	
 13637                           
 13638                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 13639  1489  0820               	movf	DelayOffPointSelect@sw,w
 13640  148A  3A02               	xorlw	2
 13641  148B  1D03               	skipz
 13642  148C  0008               	return
 13643                           
 13644                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 13645  148D  30D7               	movlw	low _DlySw2
 13646  148E  00F0               	movwf	_DelayOff
 13647  148F  3001               	movlw	high _DlySw2
 13648  1490  00F1               	movwf	_DelayOff+1
 13649  1491  0008               	return
 13650  1492                     __end_of_DelayOffPointSelect:	
 13651                           
 13652                           	psect	text89
 13653  0925                     __ptext89:	
 13654 ;; *************** function _Buzzer_Main *****************
 13655 ;; Defined at:
 13656 ;;		line 46 in file "../src/Buzzer_B1.c"
 13657 ;; Parameters:    Size  Location     Type
 13658 ;;		None
 13659 ;; Auto vars:     Size  Location     Type
 13660 ;;		None
 13661 ;; Return value:  Size  Location     Type
 13662 ;;		None               void
 13663 ;; Registers used:
 13664 ;;		wreg, status,2, status,0
 13665 ;; Tracked objects:
 13666 ;;		On entry : 0/0
 13667 ;;		On exit  : 0/0
 13668 ;;		Unchanged: 0/0
 13669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;Total ram usage:        1 bytes
 13675 ;; Hardware stack levels used:    1
 13676 ;; Hardware stack levels required when called:    5
 13677 ;; This function calls:
 13678 ;;		Nothing
 13679 ;; This function is called by:
 13680 ;;		_main
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           
 13685                           ;psect for function _Buzzer_Main
 13686  0925                     _Buzzer_Main:	
 13687                           
 13688                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 13689                           
 13690                           ;incstack = 0
 13691                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 13692  0925  0021               	movlb	1	; select bank1
 13693  0926  1CAE               	btfss	_Buz1^(0+128),1
 13694  0927  0008               	return
 13695                           
 13696                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 13697  0928  3001               	movlw	1
 13698  0929  07AF               	addwf	(_Buz1^(0+128)+1),f
 13699  092A  3000               	movlw	0
 13700  092B  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 13701                           
 13702                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 13703  092C  0835               	movf	((_Buz1+1)^(0+128)+6),w
 13704  092D  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 13705  092E  1D03               	skipz
 13706  092F  2932               	goto	u8965
 13707  0930  0834               	movf	(_Buz1^(0+128)+6),w
 13708  0931  022F               	subwf	(_Buz1^(0+128)+1),w
 13709  0932                     u8965:	
 13710  0932  1C03               	skipc
 13711  0933  0008               	return
 13712                           
 13713                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 13714  0934  01AF               	clrf	(_Buz1^(0+128)+1)
 13715  0935  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 13716                           
 13717                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 13718  0936  12AE               	bcf	_Buz1^(0+128),5
 13719  0937  0020               	movlb	0	; select bank0
 13720  0938  1D8D               	btfss	13,3	;volatile
 13721  0939  293C               	goto	l7539
 13722  093A  0021               	movlb	1	; select bank1
 13723  093B  16AE               	bsf	_Buz1^(0+128),5
 13724  093C                     l7539:	
 13725                           
 13726                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 13727  093C  0021               	movlb	1	; select bank1
 13728  093D  1AAE               	btfsc	_Buz1^(0+128),5
 13729  093E  2968               	goto	l78
 13730                           
 13731                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 13732  093F  08B1               	movf	(_Buz1^(0+128)+3),f
 13733  0940  1D03               	skipz
 13734  0941  2964               	goto	l79
 13735                           
 13736                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 13737  0942  1DAE               	btfss	_Buz1^(0+128),3
 13738  0943  2952               	goto	l80
 13739                           
 13740                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 13741  0944  11AE               	bcf	_Buz1^(0+128),3
 13742                           
 13743                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 13744  0945  0832               	movf	(_Buz1^(0+128)+4),w
 13745  0946  0020               	movlb	0	; select bank0
 13746  0947  00A0               	movwf	??_Buzzer_Main
 13747  0948  0820               	movf	??_Buzzer_Main,w
 13748  0949  0021               	movlb	1	; select bank1
 13749  094A  00B1               	movwf	(_Buz1^(0+128)+3)
 13750                           
 13751                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 13752  094B  0837               	movf	((_Buz1+1)^(0+128)+8),w
 13753  094C  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 13754  094D  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 13755  094E  0836               	movf	(_Buz1^(0+128)+8),w
 13756  094F  01B4               	clrf	(_Buz1^(0+128)+6)
 13757  0950  07B4               	addwf	(_Buz1^(0+128)+6),f
 13758                           
 13759                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 13760  0951  0008               	return
 13761  0952                     l80:	
 13762  0952  1E2E               	btfss	_Buz1^(0+128),4
 13763  0953  2962               	goto	l82
 13764                           
 13765                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 13766  0954  122E               	bcf	_Buz1^(0+128),4
 13767                           
 13768                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 13769  0955  0833               	movf	(_Buz1^(0+128)+5),w
 13770  0956  0020               	movlb	0	; select bank0
 13771  0957  00A0               	movwf	??_Buzzer_Main
 13772  0958  0820               	movf	??_Buzzer_Main,w
 13773  0959  0021               	movlb	1	; select bank1
 13774  095A  00B1               	movwf	(_Buz1^(0+128)+3)
 13775                           
 13776                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 13777  095B  0839               	movf	((_Buz1+1)^(0+128)+10),w
 13778  095C  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 13779  095D  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 13780  095E  0838               	movf	(_Buz1^(0+128)+10),w
 13781  095F  01B4               	clrf	(_Buz1^(0+128)+6)
 13782  0960  07B4               	addwf	(_Buz1^(0+128)+6),f
 13783                           
 13784                           ;Buzzer_B1.c: 62: } else {
 13785  0961  0008               	return
 13786  0962                     l82:	
 13787                           
 13788                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 13789  0962  10AE               	bcf	_Buz1^(0+128),1
 13790                           
 13791                           ;Buzzer_B1.c: 64: }
 13792                           ;Buzzer_B1.c: 65: } else {
 13793  0963  0008               	return
 13794  0964                     l79:	
 13795                           
 13796                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 13797  0964  16AE               	bsf	_Buz1^(0+128),5
 13798                           
 13799                           ;Buzzer_B1.c: 68: RB3 = 1;
 13800  0965  0020               	movlb	0	; select bank0
 13801  0966  158D               	bsf	13,3	;volatile
 13802                           
 13803                           ;Buzzer_B1.c: 69: }
 13804                           ;Buzzer_B1.c: 70: } else {
 13805  0967  0008               	return
 13806  0968                     l78:	
 13807                           
 13808                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 13809  0968  12AE               	bcf	_Buz1^(0+128),5
 13810                           
 13811                           ;Buzzer_B1.c: 73: RB3 = 0;
 13812  0969  0020               	movlb	0	; select bank0
 13813  096A  118D               	bcf	13,3	;volatile
 13814                           
 13815                           ;Buzzer_B1.c: 75: Buz1.Count--;
 13816  096B  3001               	movlw	1
 13817  096C  0021               	movlb	1	; select bank1
 13818  096D  02B1               	subwf	(_Buz1^(0+128)+3),f
 13819  096E  0008               	return
 13820  096F                     __end_of_Buzzer_Main:	
 13821                           
 13822                           	psect	text90
 13823  12BF                     __ptext90:	
 13824 ;; *************** function _Buzzer_Initialization *****************
 13825 ;; Defined at:
 13826 ;;		line 11 in file "../src/Buzzer_B1.c"
 13827 ;; Parameters:    Size  Location     Type
 13828 ;;		None
 13829 ;; Auto vars:     Size  Location     Type
 13830 ;;		None
 13831 ;; Return value:  Size  Location     Type
 13832 ;;		None               void
 13833 ;; Registers used:
 13834 ;;		None
 13835 ;; Tracked objects:
 13836 ;;		On entry : 0/0
 13837 ;;		On exit  : 0/0
 13838 ;;		Unchanged: 0/0
 13839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13844 ;;Total ram usage:        0 bytes
 13845 ;; Hardware stack levels used:    1
 13846 ;; Hardware stack levels required when called:    5
 13847 ;; This function calls:
 13848 ;;		Nothing
 13849 ;; This function is called by:
 13850 ;;		_main
 13851 ;; This function uses a non-reentrant model
 13852 ;;
 13853                           
 13854                           
 13855                           ;psect for function _Buzzer_Initialization
 13856  12BF                     _Buzzer_Initialization:	
 13857                           
 13858                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 13859                           
 13860                           ;incstack = 0
 13861                           ; Regs used in _Buzzer_Initialization: []
 13862  12BF  0021               	movlb	1	; select bank1
 13863  12C0  142E               	bsf	_Buz1^(0+128),0
 13864  12C1  0008               	return
 13865  12C2                     __end_of_Buzzer_Initialization:	
 13866                           
 13867                           	psect	intentry
 13868  0004                     __pintentry:	
 13869 ;; *************** function _ISR *****************
 13870 ;; Defined at:
 13871 ;;		line 108 in file "../src/MCU_B1.c"
 13872 ;; Parameters:    Size  Location     Type
 13873 ;;		None
 13874 ;; Auto vars:     Size  Location     Type
 13875 ;;		None
 13876 ;; Return value:  Size  Location     Type
 13877 ;;		None               void
 13878 ;; Registers used:
 13879 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13880 ;; Tracked objects:
 13881 ;;		On entry : 0/0
 13882 ;;		On exit  : 0/0
 13883 ;;		Unchanged: 0/0
 13884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13889 ;;Total ram usage:        1 bytes
 13890 ;; Hardware stack levels used:    1
 13891 ;; Hardware stack levels required when called:    4
 13892 ;; This function calls:
 13893 ;;		_IOC_ISR
 13894 ;;		_TMR1_ISR
 13895 ;; This function is called by:
 13896 ;;		Interrupt level 1
 13897 ;; This function uses a non-reentrant model
 13898 ;;
 13899                           
 13900  0004                     _ISR:	
 13901                           
 13902                           ;incstack = 0
 13903                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13904  0004  147E               	bsf	126,0	;set compiler interrupt flag
 13905  0005  3180               	pagesel	$
 13906  0006  0020               	movlb	0	; select bank0
 13907  0007  087F               	movf	127,w
 13908  0008  00F9               	movwf	??_ISR
 13909                           
 13910                           ;MCU_B1.c: 110: IOC_ISR();
 13911  0009  3193  23AD  3180   	fcall	_IOC_ISR
 13912                           
 13913                           ;MCU_B1.c: 112: ;;
 13914                           ;MCU_B1.c: 114: TMR1_ISR();
 13915  000C  3196  264F         	fcall	_TMR1_ISR
 13916  000E  0879               	movf	??_ISR,w
 13917  000F  0020               	movlb	0	; select bank0
 13918  0010  00FF               	movwf	127
 13919  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 13920  0012  0009               	retfie
 13921  0013                     __end_of_ISR:	
 13922                           
 13923                           	psect	text92
 13924  164F                     __ptext92:	
 13925 ;; *************** function _TMR1_ISR *****************
 13926 ;; Defined at:
 13927 ;;		line 210 in file "../src/MCU_B1.c"
 13928 ;; Parameters:    Size  Location     Type
 13929 ;;		None
 13930 ;; Auto vars:     Size  Location     Type
 13931 ;;		None
 13932 ;; Return value:  Size  Location     Type
 13933 ;;		None               void
 13934 ;; Registers used:
 13935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13936 ;; Tracked objects:
 13937 ;;		On entry : 0/0
 13938 ;;		On exit  : 0/0
 13939 ;;		Unchanged: 0/0
 13940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13944 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13945 ;;Total ram usage:        0 bytes
 13946 ;; Hardware stack levels used:    1
 13947 ;; Hardware stack levels required when called:    2
 13948 ;; This function calls:
 13949 ;;		_setDimmerLights_IntrControl
 13950 ;; This function is called by:
 13951 ;;		_ISR
 13952 ;; This function uses a non-reentrant model
 13953 ;;
 13954                           
 13955                           
 13956                           ;psect for function _TMR1_ISR
 13957  164F                     _TMR1_ISR:	
 13958                           
 13959                           ;MCU_B1.c: 212: if (TMR1IE == 1 && TMR1IF == 1) {
 13960                           
 13961                           ;incstack = 0
 13962                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13963  164F  0021               	movlb	1	; select bank1
 13964  1650  1C11               	btfss	17,0	;volatile
 13965  1651  0008               	return
 13966  1652  0020               	movlb	0	; select bank0
 13967  1653  1C11               	btfss	17,0	;volatile
 13968  1654  0008               	return
 13969                           
 13970                           ;MCU_B1.c: 213: TMR1H = (int)((65536-1480)/256);
 13971  1655  30FA               	movlw	250
 13972  1656  0097               	movwf	23	;volatile
 13973                           
 13974                           ;MCU_B1.c: 214: TMR1L = (int)((65536-1480)%256);
 13975  1657  3038               	movlw	56
 13976  1658  0096               	movwf	22	;volatile
 13977                           
 13978                           ;MCU_B1.c: 215: TMR1IF = 0;
 13979  1659  1011               	bcf	17,0	;volatile
 13980                           
 13981                           ;MCU_B1.c: 220: setDimmerLights_IntrControl(1);
 13982  165A  3001               	movlw	1
 13983  165B  3183  2355  3196   	fcall	_setDimmerLights_IntrControl
 13984                           
 13985                           ;MCU_B1.c: 225: setDimmerLights_IntrControl(2);
 13986  165E  3002               	movlw	2
 13987  165F  3183  2355  3196   	fcall	_setDimmerLights_IntrControl
 13988                           
 13989                           ;MCU_B1.c: 236: Timer1.Count++;
 13990  1662  3001               	movlw	1
 13991  1663  0021               	movlb	1	; select bank1
 13992  1664  07BE               	addwf	(_Timer1^(0+128)+1),f
 13993  1665  3000               	movlw	0
 13994  1666  3DBF               	addwfc	((_Timer1+1)^(0+128)+1),f
 13995                           
 13996                           ;MCU_B1.c: 237: if (Timer1.Count == 100) {
 13997  1667  3001               	movlw	1
 13998  1668  3EBD               	addlw	_Timer1& (0+255)
 13999  1669  0086               	movwf	6
 14000  166A  0187               	clrf	7
 14001  166B  3F40               	moviw [0]fsr1
 14002  166C  3A64               	xorlw	100
 14003  166D  1D03               	skipz
 14004  166E  2E71               	goto	u598_25
 14005  166F  3F41               	moviw [1]fsr1
 14006  1670  3A00               	xorlw	0
 14007  1671                     u598_25:	
 14008  1671  1D03               	skipz
 14009  1672  0008               	return
 14010                           
 14011                           ;MCU_B1.c: 238: Timer1.Count = 0;
 14012  1673  01BE               	clrf	(_Timer1^(0+128)+1)
 14013  1674  01BF               	clrf	((_Timer1+1)^(0+128)+1)
 14014                           
 14015                           ;MCU_B1.c: 239: Timer1.Timeout = 1;
 14016  1675  143D               	bsf	_Timer1^(0+128),0
 14017  1676  0008               	return
 14018  1677                     __end_of_TMR1_ISR:	
 14019                           
 14020                           	psect	text93
 14021  0355                     __ptext93:	
 14022 ;; *************** function _setDimmerLights_IntrControl *****************
 14023 ;; Defined at:
 14024 ;;		line 96 in file "../src/Dimmer_B1.c"
 14025 ;; Parameters:    Size  Location     Type
 14026 ;;  lights          1    wreg     unsigned char 
 14027 ;; Auto vars:     Size  Location     Type
 14028 ;;  lights          1    3[COMMON] unsigned char 
 14029 ;; Return value:  Size  Location     Type
 14030 ;;		None               void
 14031 ;; Registers used:
 14032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14033 ;; Tracked objects:
 14034 ;;		On entry : 0/0
 14035 ;;		On exit  : 0/0
 14036 ;;		Unchanged: 0/0
 14037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14042 ;;Total ram usage:        2 bytes
 14043 ;; Hardware stack levels used:    1
 14044 ;; Hardware stack levels required when called:    1
 14045 ;; This function calls:
 14046 ;;		_DimmerIntrPointSelect
 14047 ;; This function is called by:
 14048 ;;		_TMR1_ISR
 14049 ;; This function uses a non-reentrant model
 14050 ;;
 14051                           
 14052                           
 14053                           ;psect for function _setDimmerLights_IntrControl
 14054  0355                     _setDimmerLights_IntrControl:	
 14055                           
 14056                           ;incstack = 0
 14057                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14058                           ;setDimmerLights_IntrControl@lights stored from wreg
 14059  0355  00F8               	movwf	setDimmerLights_IntrControl@lights
 14060                           
 14061                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 14062  0356  0878               	movf	setDimmerLights_IntrControl@lights,w
 14063  0357  3194  2432  3183   	fcall	_DimmerIntrPointSelect
 14064                           
 14065                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 14066  035A  0872               	movf	_DimmerLightsIntr,w
 14067  035B  3E02               	addlw	2
 14068  035C  0086               	movwf	6
 14069  035D  3001               	movlw	1	; select bank2/3
 14070  035E  0087               	movwf	7
 14071  035F  1D01               	btfss	1,2
 14072  0360  2B7F               	goto	i1l5193
 14073                           
 14074                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 14075  0361  3001               	movlw	1
 14076  0362  00F7               	movwf	??_setDimmerLights_IntrControl
 14077  0363  0872               	movf	_DimmerLightsIntr,w
 14078  0364  3E03               	addlw	3
 14079  0365  0086               	movwf	6
 14080  0366  3001               	movlw	1	; select bank2/3
 14081  0367  0087               	movwf	7
 14082  0368  0877               	movf	??_setDimmerLights_IntrControl,w
 14083  0369  0781               	addwf	1,f
 14084                           
 14085                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(70*0.8)) + 1) {
 14086  036A  0872               	movf	_DimmerLightsIntr,w
 14087  036B  3E03               	addlw	3
 14088  036C  0086               	movwf	6
 14089  036D  3001               	movlw	1	; select bank2/3
 14090  036E  0087               	movwf	7
 14091  036F  3039               	movlw	57
 14092  0370  0201               	subwf	1,w
 14093  0371  1C03               	skipc
 14094  0372  2B7F               	goto	i1l5193
 14095                           
 14096                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 14097  0373  0872               	movf	_DimmerLightsIntr,w
 14098  0374  3E03               	addlw	3
 14099  0375  0086               	movwf	6
 14100  0376  3001               	movlw	1	; select bank2/3
 14101  0377  0087               	movwf	7
 14102  0378  0181               	clrf	1
 14103                           
 14104                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 14105  0379  0872               	movf	_DimmerLightsIntr,w
 14106  037A  3E02               	addlw	2
 14107  037B  0086               	movwf	6
 14108  037C  3001               	movlw	1	; select bank2/3
 14109  037D  0087               	movwf	7
 14110  037E  1101               	bcf	1,2
 14111  037F                     i1l5193:	
 14112                           
 14113                           ;Dimmer_B1.c: 241: }
 14114                           ;Dimmer_B1.c: 242: }
 14115                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 14116  037F  0A72               	incf	_DimmerLightsIntr,w
 14117  0380  0086               	movwf	6
 14118  0381  3001               	movlw	1	; select bank2/3
 14119  0382  0087               	movwf	7
 14120  0383  1C01               	btfss	1,0
 14121  0384  2BB6               	goto	i1l5209
 14122                           
 14123                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 14124  0385  0872               	movf	_DimmerLightsIntr,w
 14125  0386  3E03               	addlw	3
 14126  0387  0086               	movwf	6
 14127  0388  3001               	movlw	1	; select bank2/3
 14128  0389  0087               	movwf	7
 14129  038A  0872               	movf	_DimmerLightsIntr,w
 14130  038B  3E04               	addlw	4
 14131  038C  0084               	movwf	4
 14132  038D  3001               	movlw	1	; select bank2/3
 14133  038E  0085               	movwf	5
 14134  038F  0800               	movf	0,w
 14135  0390  0201               	subwf	1,w
 14136  0391  1C03               	skipc
 14137  0392  0008               	return
 14138                           
 14139                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 14140  0393  0A72               	incf	_DimmerLightsIntr,w
 14141  0394  0086               	movwf	6
 14142  0395  3001               	movlw	1	; select bank2/3
 14143  0396  0087               	movwf	7
 14144  0397  1001               	bcf	1,0
 14145                           
 14146                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 14147  0398  0A72               	incf	_DimmerLightsIntr,w
 14148  0399  0086               	movwf	6
 14149  039A  3001               	movlw	1	; select bank2/3
 14150  039B  0087               	movwf	7
 14151  039C  1581               	bsf	1,3
 14152                           
 14153                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 14154  039D  0872               	movf	_DimmerLightsIntr,w
 14155  039E  0086               	movwf	6
 14156  039F  3001               	movlw	1	; select bank2/3
 14157  03A0  0087               	movwf	7
 14158  03A1  1C01               	btfss	1,0
 14159  03A2  0008               	return
 14160                           
 14161                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 14162  03A3  0872               	movf	_DimmerLightsIntr,w
 14163  03A4  0086               	movwf	6
 14164  03A5  3001               	movlw	1	; select bank2/3
 14165  03A6  0087               	movwf	7
 14166  03A7  1001               	bcf	1,0
 14167                           
 14168                           ;Dimmer_B1.c: 252: if (lights == 1) {
 14169  03A8  0878               	movf	setDimmerLights_IntrControl@lights,w
 14170  03A9  3A01               	xorlw	1
 14171  03AA  1D03               	skipz
 14172  03AB  2BAF               	goto	i1l5205
 14173                           
 14174                           ;Dimmer_B1.c: 253: RA7 = 0;
 14175  03AC  0020               	movlb	0	; select bank0
 14176  03AD  138C               	bcf	12,7	;volatile
 14177                           
 14178                           ;Dimmer_B1.c: 255: }
 14179  03AE  0008               	return
 14180  03AF                     i1l5205:	
 14181                           
 14182                           ;Dimmer_B1.c: 258: else if (lights == 2) {
 14183  03AF  0878               	movf	setDimmerLights_IntrControl@lights,w
 14184  03B0  3A02               	xorlw	2
 14185  03B1  1D03               	skipz
 14186  03B2  0008               	return
 14187                           
 14188                           ;Dimmer_B1.c: 259: RB4 = 0;
 14189  03B3  0020               	movlb	0	; select bank0
 14190  03B4  120D               	bcf	13,4	;volatile
 14191                           
 14192                           ;Dimmer_B1.c: 260: }
 14193                           ;Dimmer_B1.c: 262: }
 14194                           ;Dimmer_B1.c: 263: }
 14195                           ;Dimmer_B1.c: 264: } else {
 14196  03B5  0008               	return
 14197  03B6                     i1l5209:	
 14198                           
 14199                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 14200  03B6  0A72               	incf	_DimmerLightsIntr,w
 14201  03B7  0086               	movwf	6
 14202  03B8  3001               	movlw	1	; select bank2/3
 14203  03B9  0087               	movwf	7
 14204  03BA  1D81               	btfss	1,3
 14205  03BB  0008               	return
 14206                           
 14207                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 14208  03BC  0A72               	incf	_DimmerLightsIntr,w
 14209  03BD  0086               	movwf	6
 14210  03BE  3001               	movlw	1	; select bank2/3
 14211  03BF  0087               	movwf	7
 14212  03C0  1181               	bcf	1,3
 14213                           
 14214                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 14215  03C1  3001               	movlw	1
 14216  03C2  00F7               	movwf	??_setDimmerLights_IntrControl
 14217  03C3  0872               	movf	_DimmerLightsIntr,w
 14218  03C4  3E05               	addlw	5
 14219  03C5  0086               	movwf	6
 14220  03C6  3001               	movlw	1	; select bank2/3
 14221  03C7  0087               	movwf	7
 14222  03C8  0877               	movf	??_setDimmerLights_IntrControl,w
 14223  03C9  0781               	addwf	1,f
 14224                           
 14225                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 14226  03CA  0872               	movf	_DimmerLightsIntr,w
 14227  03CB  3E05               	addlw	5
 14228  03CC  0086               	movwf	6
 14229  03CD  3001               	movlw	1	; select bank2/3
 14230  03CE  0087               	movwf	7
 14231  03CF  0872               	movf	_DimmerLightsIntr,w
 14232  03D0  3E08               	addlw	8
 14233  03D1  0084               	movwf	4
 14234  03D2  3001               	movlw	1	; select bank2/3
 14235  03D3  0085               	movwf	5
 14236  03D4  0800               	movf	0,w
 14237  03D5  0201               	subwf	1,w
 14238  03D6  1C03               	skipc
 14239  03D7  2C1A               	goto	i1l5235
 14240                           
 14241                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 14242  03D8  0872               	movf	_DimmerLightsIntr,w
 14243  03D9  3E05               	addlw	5
 14244  03DA  0086               	movwf	6
 14245  03DB  3001               	movlw	1	; select bank2/3
 14246  03DC  0087               	movwf	7
 14247  03DD  0181               	clrf	1
 14248                           
 14249                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 14250  03DE  0A72               	incf	_DimmerLightsIntr,w
 14251  03DF  0086               	movwf	6
 14252  03E0  3001               	movlw	1	; select bank2/3
 14253  03E1  0087               	movwf	7
 14254  03E2  1F01               	btfss	1,6
 14255  03E3  0008               	return
 14256                           
 14257                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 14258  03E4  0A72               	incf	_DimmerLightsIntr,w
 14259  03E5  0086               	movwf	6
 14260  03E6  3001               	movlw	1	; select bank2/3
 14261  03E7  0087               	movwf	7
 14262  03E8  1B81               	btfsc	1,7
 14263  03E9  2C03               	goto	i1l5229
 14264                           
 14265                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(70*0.8))) {
 14266  03EA  0872               	movf	_DimmerLightsIntr,w
 14267  03EB  3E04               	addlw	4
 14268  03EC  0086               	movwf	6
 14269  03ED  3001               	movlw	1	; select bank2/3
 14270  03EE  0087               	movwf	7
 14271  03EF  3038               	movlw	56
 14272  03F0  0201               	subwf	1,w
 14273  03F1  1803               	skipnc
 14274  03F2  2BFD               	goto	i1l5227
 14275                           
 14276                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 14277  03F3  3001               	movlw	1
 14278  03F4  00F7               	movwf	??_setDimmerLights_IntrControl
 14279  03F5  0872               	movf	_DimmerLightsIntr,w
 14280  03F6  3E04               	addlw	4
 14281  03F7  0086               	movwf	6
 14282  03F8  3001               	movlw	1	; select bank2/3
 14283  03F9  0087               	movwf	7
 14284  03FA  0877               	movf	??_setDimmerLights_IntrControl,w
 14285  03FB  0781               	addwf	1,f
 14286                           
 14287                           ;Dimmer_B1.c: 274: } else {
 14288  03FC  0008               	return
 14289  03FD                     i1l5227:	
 14290                           
 14291                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 14292  03FD  0A72               	incf	_DimmerLightsIntr,w
 14293  03FE  0086               	movwf	6
 14294  03FF  3001               	movlw	1	; select bank2/3
 14295  0400  0087               	movwf	7
 14296  0401  1781               	bsf	1,7
 14297                           
 14298                           ;Dimmer_B1.c: 276: }
 14299                           ;Dimmer_B1.c: 277: } else {
 14300  0402  0008               	return
 14301  0403                     i1l5229:	
 14302                           
 14303                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 14304  0403  0872               	movf	_DimmerLightsIntr,w
 14305  0404  3E04               	addlw	4
 14306  0405  0086               	movwf	6
 14307  0406  3001               	movlw	1	; select bank2/3
 14308  0407  0087               	movwf	7
 14309  0408  300D               	movlw	13
 14310  0409  0201               	subwf	1,w
 14311  040A  1C03               	skipc
 14312  040B  2C14               	goto	i1l5233
 14313                           
 14314                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 14315  040C  0872               	movf	_DimmerLightsIntr,w
 14316  040D  3E04               	addlw	4
 14317  040E  0086               	movwf	6
 14318  040F  3001               	movlw	1	; select bank2/3
 14319  0410  0087               	movwf	7
 14320  0411  3001               	movlw	1
 14321  0412  0281               	subwf	1,f
 14322                           
 14323                           ;Dimmer_B1.c: 280: } else
 14324  0413  0008               	return
 14325  0414                     i1l5233:	
 14326                           
 14327                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 14328  0414  0A72               	incf	_DimmerLightsIntr,w
 14329  0415  0086               	movwf	6
 14330  0416  3001               	movlw	1	; select bank2/3
 14331  0417  0087               	movwf	7
 14332  0418  1381               	bcf	1,7
 14333                           
 14334                           ;Dimmer_B1.c: 282: }
 14335                           ;Dimmer_B1.c: 283: }
 14336                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 14337  0419  0008               	return
 14338  041A                     i1l5235:	
 14339  041A  0872               	movf	_DimmerLightsIntr,w
 14340  041B  3E02               	addlw	2
 14341  041C  0086               	movwf	6
 14342  041D  3001               	movlw	1	; select bank2/3
 14343  041E  0087               	movwf	7
 14344  041F  1C01               	btfss	1,0
 14345  0420  0008               	return
 14346                           
 14347                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 14348  0421  0872               	movf	_DimmerLightsIntr,w
 14349  0422  3E04               	addlw	4
 14350  0423  0086               	movwf	6
 14351  0424  3001               	movlw	1	; select bank2/3
 14352  0425  0087               	movwf	7
 14353  0426  0872               	movf	_DimmerLightsIntr,w
 14354  0427  3E06               	addlw	6
 14355  0428  0084               	movwf	4
 14356  0429  3001               	movlw	1	; select bank2/3
 14357  042A  0085               	movwf	5
 14358  042B  0800               	movf	0,w
 14359  042C  0201               	subwf	1,w
 14360  042D  1803               	skipnc
 14361  042E  2C39               	goto	i1l5241
 14362                           
 14363                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 14364  042F  3001               	movlw	1
 14365  0430  00F7               	movwf	??_setDimmerLights_IntrControl
 14366  0431  0872               	movf	_DimmerLightsIntr,w
 14367  0432  3E04               	addlw	4
 14368  0433  0086               	movwf	6
 14369  0434  3001               	movlw	1	; select bank2/3
 14370  0435  0087               	movwf	7
 14371  0436  0877               	movf	??_setDimmerLights_IntrControl,w
 14372  0437  0781               	addwf	1,f
 14373                           
 14374                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 14375  0438  0008               	return
 14376  0439                     i1l5241:	
 14377  0439  0872               	movf	_DimmerLightsIntr,w
 14378  043A  3E06               	addlw	6
 14379  043B  0086               	movwf	6
 14380  043C  3001               	movlw	1	; select bank2/3
 14381  043D  0087               	movwf	7
 14382  043E  0872               	movf	_DimmerLightsIntr,w
 14383  043F  3E04               	addlw	4
 14384  0440  0084               	movwf	4
 14385  0441  3001               	movlw	1	; select bank2/3
 14386  0442  0085               	movwf	5
 14387  0443  0800               	movf	0,w
 14388  0444  0201               	subwf	1,w
 14389  0445  1803               	skipnc
 14390  0446  2C4F               	goto	i1l5245
 14391                           
 14392                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 14393  0447  0872               	movf	_DimmerLightsIntr,w
 14394  0448  3E04               	addlw	4
 14395  0449  0086               	movwf	6
 14396  044A  3001               	movlw	1	; select bank2/3
 14397  044B  0087               	movwf	7
 14398  044C  3001               	movlw	1
 14399  044D  0281               	subwf	1,f
 14400                           
 14401                           ;Dimmer_B1.c: 289: } else {
 14402  044E  0008               	return
 14403  044F                     i1l5245:	
 14404                           
 14405                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 14406  044F  0872               	movf	_DimmerLightsIntr,w
 14407  0450  3E02               	addlw	2
 14408  0451  0086               	movwf	6
 14409  0452  3001               	movlw	1	; select bank2/3
 14410  0453  0087               	movwf	7
 14411  0454  1001               	bcf	1,0
 14412  0455  0008               	return
 14413  0456                     __end_of_setDimmerLights_IntrControl:	
 14414                           
 14415                           	psect	text94
 14416  1432                     __ptext94:	
 14417 ;; *************** function _DimmerIntrPointSelect *****************
 14418 ;; Defined at:
 14419 ;;		line 74 in file "../src/Dimmer_B1.c"
 14420 ;; Parameters:    Size  Location     Type
 14421 ;;  lights          1    wreg     unsigned char 
 14422 ;; Auto vars:     Size  Location     Type
 14423 ;;  lights          1    1[COMMON] unsigned char 
 14424 ;; Return value:  Size  Location     Type
 14425 ;;		None               void
 14426 ;; Registers used:
 14427 ;;		wreg
 14428 ;; Tracked objects:
 14429 ;;		On entry : 0/0
 14430 ;;		On exit  : 0/0
 14431 ;;		Unchanged: 0/0
 14432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14434 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14435 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14436 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14437 ;;Total ram usage:        2 bytes
 14438 ;; Hardware stack levels used:    1
 14439 ;; This function calls:
 14440 ;;		Nothing
 14441 ;; This function is called by:
 14442 ;;		_setDimmerLights_IntrControl
 14443 ;; This function uses a non-reentrant model
 14444 ;;
 14445                           
 14446                           
 14447                           ;psect for function _DimmerIntrPointSelect
 14448  1432                     _DimmerIntrPointSelect:	
 14449                           
 14450                           ;incstack = 0
 14451                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 14452                           ;DimmerIntrPointSelect@lights stored from wreg
 14453  1432  00F6               	movwf	DimmerIntrPointSelect@lights
 14454                           
 14455                           ;Dimmer_B1.c: 76: if (lights == 1) {
 14456  1433  0876               	movf	DimmerIntrPointSelect@lights,w
 14457  1434  3A01               	xorlw	1
 14458  1435  1D03               	skipz
 14459  1436  2C3C               	goto	i1l4877
 14460                           
 14461                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 14462  1437  304E               	movlw	_DimmerLights1& (0+255)
 14463  1438  00F5               	movwf	??_DimmerIntrPointSelect
 14464  1439  0875               	movf	??_DimmerIntrPointSelect,w
 14465  143A  00F2               	movwf	_DimmerLightsIntr
 14466                           
 14467                           ;Dimmer_B1.c: 78: }
 14468  143B  0008               	return
 14469  143C                     i1l4877:	
 14470                           
 14471                           ;Dimmer_B1.c: 81: else if (lights == 2) {
 14472  143C  0876               	movf	DimmerIntrPointSelect@lights,w
 14473  143D  3A02               	xorlw	2
 14474  143E  1D03               	skipz
 14475  143F  0008               	return
 14476                           
 14477                           ;Dimmer_B1.c: 82: DimmerLightsIntr = &DimmerLights2;
 14478  1440  305F               	movlw	_DimmerLights2& (0+255)
 14479  1441  00F5               	movwf	??_DimmerIntrPointSelect
 14480  1442  0875               	movf	??_DimmerIntrPointSelect,w
 14481  1443  00F2               	movwf	_DimmerLightsIntr
 14482  1444  0008               	return
 14483  1445                     __end_of_DimmerIntrPointSelect:	
 14484                           
 14485                           	psect	text95
 14486  13AD                     __ptext95:	
 14487 ;; *************** function _IOC_ISR *****************
 14488 ;; Defined at:
 14489 ;;		line 401 in file "../src/MCU_B1.c"
 14490 ;; Parameters:    Size  Location     Type
 14491 ;;		None
 14492 ;; Auto vars:     Size  Location     Type
 14493 ;;		None
 14494 ;; Return value:  Size  Location     Type
 14495 ;;		None               void
 14496 ;; Registers used:
 14497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14498 ;; Tracked objects:
 14499 ;;		On entry : 0/0
 14500 ;;		On exit  : 0/0
 14501 ;;		Unchanged: 0/0
 14502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14507 ;;Total ram usage:        0 bytes
 14508 ;; Hardware stack levels used:    1
 14509 ;; Hardware stack levels required when called:    3
 14510 ;; This function calls:
 14511 ;;		_setDimmerReClock
 14512 ;; This function is called by:
 14513 ;;		_ISR
 14514 ;; This function uses a non-reentrant model
 14515 ;;
 14516                           
 14517                           
 14518                           ;psect for function _IOC_ISR
 14519  13AD                     _IOC_ISR:	
 14520                           
 14521                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 14522                           
 14523                           ;incstack = 0
 14524                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14525  13AD  1D8B               	btfss	11,3	;volatile
 14526  13AE  0008               	return
 14527  13AF  1C0B               	btfss	11,0	;volatile
 14528  13B0  0008               	return
 14529  13B1  0027               	movlb	7	; select bank7
 14530  13B2  1D16               	btfss	22,2	;volatile
 14531  13B3  0008               	return
 14532                           
 14533                           ;MCU_B1.c: 403: IOCBF2 = 0;
 14534  13B4  1116               	bcf	22,2	;volatile
 14535                           
 14536                           ;MCU_B1.c: 404: IOCIF = 0;
 14537  13B5  100B               	bcf	11,0	;volatile
 14538                           
 14539                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 14540  13B6  0021               	movlb	1	; select bank1
 14541  13B7  1C20               	btfss	_myMain^(0+128),0
 14542  13B8  0008               	return
 14543                           
 14544                           ;MCU_B1.c: 408: setDimmerReClock();
 14545  13B9  3192  22EA         	fcall	_setDimmerReClock
 14546  13BB  0008               	return
 14547  13BC                     __end_of_IOC_ISR:	
 14548                           
 14549                           	psect	text96
 14550  12EA                     __ptext96:	
 14551 ;; *************** function _setDimmerReClock *****************
 14552 ;; Defined at:
 14553 ;;		line 244 in file "../src/MCU_B1.c"
 14554 ;; Parameters:    Size  Location     Type
 14555 ;;		None
 14556 ;; Auto vars:     Size  Location     Type
 14557 ;;		None
 14558 ;; Return value:  Size  Location     Type
 14559 ;;		None               void
 14560 ;; Registers used:
 14561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14562 ;; Tracked objects:
 14563 ;;		On entry : 0/0
 14564 ;;		On exit  : 0/0
 14565 ;;		Unchanged: 0/0
 14566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14571 ;;Total ram usage:        0 bytes
 14572 ;; Hardware stack levels used:    1
 14573 ;; Hardware stack levels required when called:    2
 14574 ;; This function calls:
 14575 ;;		_setDimmerLights_IntrIOC_GO
 14576 ;; This function is called by:
 14577 ;;		_IOC_ISR
 14578 ;; This function uses a non-reentrant model
 14579 ;;
 14580                           
 14581                           
 14582                           ;psect for function _setDimmerReClock
 14583  12EA                     _setDimmerReClock:	
 14584                           
 14585                           ;MCU_B1.c: 249: setDimmerLights_IntrIOC_GO(1);
 14586                           
 14587                           ;incstack = 0
 14588                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14589  12EA  3001               	movlw	1
 14590  12EB  3188  2070  3192   	fcall	_setDimmerLights_IntrIOC_GO
 14591                           
 14592                           ;MCU_B1.c: 253: setDimmerLights_IntrIOC_GO(2);
 14593  12EE  3002               	movlw	2
 14594  12EF  3188  2070         	fcall	_setDimmerLights_IntrIOC_GO
 14595  12F1  0008               	return
 14596  12F2                     __end_of_setDimmerReClock:	
 14597                           
 14598                           	psect	text97
 14599  0870                     __ptext97:	
 14600 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 14601 ;; Defined at:
 14602 ;;		line 28 in file "../src/Dimmer_B1.c"
 14603 ;; Parameters:    Size  Location     Type
 14604 ;;  lights          1    wreg     unsigned char 
 14605 ;; Auto vars:     Size  Location     Type
 14606 ;;  lights          1    2[COMMON] unsigned char 
 14607 ;; Return value:  Size  Location     Type
 14608 ;;		None               void
 14609 ;; Registers used:
 14610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14611 ;; Tracked objects:
 14612 ;;		On entry : 0/0
 14613 ;;		On exit  : 0/0
 14614 ;;		Unchanged: 0/0
 14615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14617 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14619 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14620 ;;Total ram usage:        1 bytes
 14621 ;; Hardware stack levels used:    1
 14622 ;; Hardware stack levels required when called:    1
 14623 ;; This function calls:
 14624 ;;		_DimmerIntrIOCPointSelect
 14625 ;; This function is called by:
 14626 ;;		_setDimmerReClock
 14627 ;; This function uses a non-reentrant model
 14628 ;;
 14629                           
 14630                           
 14631                           ;psect for function _setDimmerLights_IntrIOC_GO
 14632  0870                     _setDimmerLights_IntrIOC_GO:	
 14633                           
 14634                           ;incstack = 0
 14635                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14636                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 14637  0870  00F7               	movwf	setDimmerLights_IntrIOC_GO@lights
 14638                           
 14639                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 14640  0871  0877               	movf	setDimmerLights_IntrIOC_GO@lights,w
 14641  0872  3194  24CE  3188   	fcall	_DimmerIntrIOCPointSelect
 14642                           
 14643                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 1) {
 14644  0875  0021               	movlb	1	; select bank1
 14645  0876  0844               	movf	_DimmerLightsIntrIOC^(0+128),w
 14646  0877  3E02               	addlw	2
 14647  0878  0086               	movwf	6
 14648  0879  3001               	movlw	1	; select bank2/3
 14649  087A  0087               	movwf	7
 14650  087B  1901               	btfsc	1,2
 14651  087C  0008               	return
 14652  087D  0020               	movlb	0	; select bank0
 14653  087E  1D0D               	btfss	13,2	;volatile
 14654  087F  0008               	return
 14655                           
 14656                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 14657  0880  0021               	movlb	1	; select bank1
 14658  0881  0844               	movf	_DimmerLightsIntrIOC^(0+128),w
 14659  0882  3E02               	addlw	2
 14660  0883  0086               	movwf	6
 14661  0884  3001               	movlw	1	; select bank2/3
 14662  0885  0087               	movwf	7
 14663  0886  1501               	bsf	1,2
 14664                           
 14665                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 14666  0887  0A44               	incf	_DimmerLightsIntrIOC^(0+128),w
 14667  0888  0086               	movwf	6
 14668  0889  3001               	movlw	1	; select bank2/3
 14669  088A  0087               	movwf	7
 14670  088B  1401               	bsf	1,0
 14671                           
 14672                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 14673  088C  0A44               	incf	_DimmerLightsIntrIOC^(0+128),w
 14674  088D  0086               	movwf	6
 14675  088E  3001               	movlw	1	; select bank2/3
 14676  088F  0087               	movwf	7
 14677  0890  1481               	bsf	1,1
 14678                           
 14679                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 14680  0891  01BC               	clrf	(_Dimmer^(0+128)+2)	;volatile
 14681                           
 14682                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 14683  0892  0A44               	incf	_DimmerLightsIntrIOC^(0+128),w
 14684  0893  0086               	movwf	6
 14685  0894  3001               	movlw	1	; select bank2/3
 14686  0895  0087               	movwf	7
 14687  0896  1D01               	btfss	1,2
 14688  0897  0008               	return
 14689                           
 14690                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 14691  0898  0844               	movf	_DimmerLightsIntrIOC^(0+128),w
 14692  0899  0086               	movwf	6
 14693  089A  3001               	movlw	1	; select bank2/3
 14694  089B  0087               	movwf	7
 14695  089C  1401               	bsf	1,0
 14696                           
 14697                           ;Dimmer_B1.c: 55: if (lights == 1) {
 14698  089D  0877               	movf	setDimmerLights_IntrIOC_GO@lights,w
 14699  089E  3A01               	xorlw	1
 14700  089F  1D03               	skipz
 14701  08A0  28A4               	goto	i1l4869
 14702                           
 14703                           ;Dimmer_B1.c: 56: RA7 = 1;
 14704  08A1  0020               	movlb	0	; select bank0
 14705  08A2  178C               	bsf	12,7	;volatile
 14706                           
 14707                           ;Dimmer_B1.c: 58: }
 14708  08A3  0008               	return
 14709  08A4                     i1l4869:	
 14710                           
 14711                           ;Dimmer_B1.c: 61: else if (lights == 2) {
 14712  08A4  0877               	movf	setDimmerLights_IntrIOC_GO@lights,w
 14713  08A5  3A02               	xorlw	2
 14714  08A6  1D03               	skipz
 14715  08A7  0008               	return
 14716                           
 14717                           ;Dimmer_B1.c: 62: RB4 = 1;
 14718  08A8  0020               	movlb	0	; select bank0
 14719  08A9  160D               	bsf	13,4	;volatile
 14720  08AA  0008               	return
 14721  08AB                     __end_of_setDimmerLights_IntrIOC_GO:	
 14722                           
 14723                           	psect	text98
 14724  14CE                     __ptext98:	
 14725 ;; *************** function _DimmerIntrIOCPointSelect *****************
 14726 ;; Defined at:
 14727 ;;		line 8 in file "../src/Dimmer_B1.c"
 14728 ;; Parameters:    Size  Location     Type
 14729 ;;  lights          1    wreg     unsigned char 
 14730 ;; Auto vars:     Size  Location     Type
 14731 ;;  lights          1    1[COMMON] unsigned char 
 14732 ;; Return value:  Size  Location     Type
 14733 ;;		None               void
 14734 ;; Registers used:
 14735 ;;		wreg
 14736 ;; Tracked objects:
 14737 ;;		On entry : 0/0
 14738 ;;		On exit  : 0/0
 14739 ;;		Unchanged: 0/0
 14740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14742 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14743 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14744 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14745 ;;Total ram usage:        2 bytes
 14746 ;; Hardware stack levels used:    1
 14747 ;; This function calls:
 14748 ;;		Nothing
 14749 ;; This function is called by:
 14750 ;;		_setDimmerLights_IntrIOC_GO
 14751 ;; This function uses a non-reentrant model
 14752 ;;
 14753                           
 14754                           
 14755                           ;psect for function _DimmerIntrIOCPointSelect
 14756  14CE                     _DimmerIntrIOCPointSelect:	
 14757                           
 14758                           ;incstack = 0
 14759                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 14760                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 14761  14CE  00F6               	movwf	DimmerIntrIOCPointSelect@lights
 14762                           
 14763                           ;Dimmer_B1.c: 10: if (lights == 1) {
 14764  14CF  0876               	movf	DimmerIntrIOCPointSelect@lights,w
 14765  14D0  3A01               	xorlw	1
 14766  14D1  1D03               	skipz
 14767  14D2  2CD9               	goto	i1l4715
 14768                           
 14769                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 14770  14D3  304E               	movlw	_DimmerLights1& (0+255)
 14771  14D4  00F5               	movwf	??_DimmerIntrIOCPointSelect
 14772  14D5  0875               	movf	??_DimmerIntrIOCPointSelect,w
 14773  14D6  0021               	movlb	1	; select bank1
 14774  14D7  00C4               	movwf	_DimmerLightsIntrIOC^(0+128)
 14775                           
 14776                           ;Dimmer_B1.c: 12: }
 14777  14D8  0008               	return
 14778  14D9                     i1l4715:	
 14779                           
 14780                           ;Dimmer_B1.c: 15: else if (lights == 2) {
 14781  14D9  0876               	movf	DimmerIntrIOCPointSelect@lights,w
 14782  14DA  3A02               	xorlw	2
 14783  14DB  1D03               	skipz
 14784  14DC  0008               	return
 14785                           
 14786                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 14787  14DD  305F               	movlw	_DimmerLights2& (0+255)
 14788  14DE  00F5               	movwf	??_DimmerIntrIOCPointSelect
 14789  14DF  0875               	movf	??_DimmerIntrIOCPointSelect,w
 14790  14E0  0021               	movlb	1	; select bank1
 14791  14E1  00C4               	movwf	_DimmerLightsIntrIOC^(0+128)
 14792  14E2  0008               	return
 14793  14E3                     __end_of_DimmerIntrIOCPointSelect:	
 14794  007E                     btemp	set	126	;btemp
 14795  007E                     pic14e$flags	set	126
 14796  007E                     wtemp	set	126
 14797  007E                     wtemp0	set	126
 14798  0080                     wtemp1	set	128
 14799  0082                     wtemp2	set	130
 14800  0084                     wtemp3	set	132
 14801  0086                     wtemp4	set	134
 14802  0088                     wtemp5	set	136
 14803  007F                     wtemp6	set	127
 14804  007E                     ttemp	set	126
 14805  007E                     ttemp0	set	126
 14806  0081                     ttemp1	set	129
 14807  0084                     ttemp2	set	132
 14808  0087                     ttemp3	set	135
 14809  007F                     ttemp4	set	127
 14810  007E                     ltemp	set	126
 14811  007E                     ltemp0	set	126
 14812  0082                     ltemp1	set	130
 14813  0086                     ltemp2	set	134
 14814  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        32
    BSS         219
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      11
    BANK0            80     79      80
    BANK1            80      7      80
    BANK2            80      0      80
    BANK3            80      4      64
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(2) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK1[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setDimmerLights_AdjOn->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setProductData
    _setDimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Exception_Main
    _Switch_Main->_setSw_Main
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   63846
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1435
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    2277
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    2277
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    5751
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    5751
                                             77 BANK0      2     2      0
                                              0 BANK1      1     1      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1735
                                             13 BANK0      5     5      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0      93
                                              2 BANK0      1     1      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1890
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      80
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     232
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1243
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   11903
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    5215
                                             77 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   26680
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   26337
                                             73 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
               _getMain_LightsStatus
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   13045
                                             70 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   12661
                                             70 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10669
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     380
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    3267
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    4032
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2672
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2385
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     989
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      71
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     281
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3893
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3893
                                             78 BANK0      1     1      0
                                              4 BANK1      2     2      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    2334
                                             77 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    1857
                                             76 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       6     4      2    1575
                                             70 BANK0      6     4      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1     601
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              1 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1435
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              1 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _ISR                                                  1     1      0     220
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR1_ISR                                             0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (10) _setDimmerLights_IntrControl                         2     2      0     110
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (11) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _IOC_ISR                                              0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (10) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (11) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (12) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_LightsStatus
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     15B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     15B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Dec 22 16:45:24 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0075  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l70 0B92  
                                      l80 0952                                        l82 0962  
                                      l68 0B7E                                        l78 0968  
                                      l79 0964                                        _RD 0CA8  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 0074                       ___wmul@multiplicand 0022  
                    _getDimmerLights_Line 146B                    __end_of_setDelayOff_GO 0BFF  
                            ___ftadd@exp1 004D                              ___ftadd@exp2 004C  
               setDimmerLights_Adj@lights 0068                      _setDimmerLights_Main 0DE2  
                    _setDimmerLights_Line 150D                              ___ftadd@sign 004B  
                    _setDimmerLights_SwOn 0BFF                                       l450 144F  
                                     l544 1474                                       l720 0869  
                                     l545 147B                                       l491 15E3  
                                     l685 1548                                       l686 1550  
                                     l962 0830                                       l976 1724  
                                     l985 0A50                                       _GIE 005F  
                                     _RA0 0060      __size_of_DimmerLights_Initialization 0014  
                                     _RB1 0069                                       _RA3 0063  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 0073                                       _RB3 006B  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC5 0075                                       _RC7 0077  
                                     _ISR 0004                                       _WDT 00C0  
            getDimmerLights_Status@lights 0022                                       _Sw1 01C5  
                                     _Sw2 01CE                 setDimmerLights_Adj@status 0066  
                   _Buzzer_Initialization 12BF                           __end_of_ADC_Set 12EA  
                         ?_DelayTimejudge 0075                                       wreg 0009  
    setDimmerLights_Initialization@lights 0023              getDimmerLights_Status@status 0023  
                         _setDimmerLights 07B8                         ??_getSw_KeyStatus 0020  
                   _setDimmerLights_AdjOn 16CE                                      ?_ISR 0075  
         setDimmerLights_ErrorClose@count 00E9                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 13BC                                Load_Main@i 002C  
                            ___ftdiv@sign 003D                                      l1202 062B  
                                    l1140 08E5                                      l1304 01C4  
                                    l1305 01C2                                      l1172 1789  
                                    l1167 1772                                      l1168 178D  
                                    l1434 07B4                  ?_DimmerLightsPointSelect 0075  
                                    l2163 0D04                                      l2157 0CED  
                                    l1294 01E8                                      l1439 07AE  
                                    l1296 0078                                      l1297 0074  
                                    l2186 04F5                                      l1298 006F  
                         __end_of_IOC_Set 1386                                      l1826 14FF  
                                    l1850 0231                                      l1848 034C  
                                    l6411 0CD9                                      l6403 0CC3  
                                    l7027 170C                                      l1996 1599  
                                    l6501 0B23                                      l4645 0EE9  
                                    l7133 0E0B                                      l6511 0B3E  
                                    l6407 0CCA                                      l4671 0F34  
                                    l4663 0F19                                      l7135 0E11  
                                    l6441 0BDE                                      l6417 0CF2  
                                    l6409 0CD4                                      l4673 0F3D  
                                    l4665 0F27                                      l7145 0E3A  
                                    l7401 1504                                      l7073 15BB  
                                    l6515 0B46                                      l6507 0B35  
                                    l6363 1405                                      l6419 0CFA  
                                    l4675 0F40                                      l7147 0E40  
                                    l7059 14C5                                      l7083 15C7  
                                    l7075 15BD                                      l8043 0AD0  
                   _setDimmerLights_SwOff 0A58                                      l6445 0BE4  
                                    l7181 16A9                                      l7405 150A  
                                    l7085 15CB                                      l6359 13FF  
                                    l6447 0BEA                                      l6527 1638  
                                    l6543 0485                                      l6615 0F84  
                                    l4679 0F4E                                      l7183 16CB  
                                    l7343 0724                                      l7271 15F8  
                                    l8039 0AC5                                      l6377 1489  
                                    l6393 169F                                      l6801 0D58  
                                    l6721 097E                                      l6561 04AE  
                                    l6609 0F6E                                      l7521 17B6  
                                    l7513 1798                                      l7273 15FB  
                                    l6483 0B04                                      l6803 0D29  
                                    l6571 04D0                                      l6539 047E  
                                    l7515 17A4                                      l7179 16C6  
                                    l7435 0260                                      l7419 021C  
                                    l6805 0D5E                                      l6709 151C  
                                    l6581 04F1                                      l6573 04D4  
                                    l6549 0494                                      l6637 0FDE  
                                    l6629 0FC5                                      l7525 17BF  
                                    l7445 0293                                      l7373 0783  
                                    l7277 1600                                      l6903 17D6  
                                    l6751 09AB                                      l6735 098F  
                                    l6743 0997                                      l6567 04C1  
                                    l7607 069E                                      l7295 0A26  
                                    l7375 0785                                      l7703 0E95  
                                    l6489 0B0F                                      l6729 0986  
                                    l6585 0507                                      l6569 04CB  
                                    l7289 0A11                                      l7801 0077  
                                    l7457 02CD                                      l7465 02FC  
                                    l7385 079A                                      l7539 093C  
                                    l6499 0B17                                      l6691 0A8D  
                                    l6915 17EA                                      l6755 09AF  
                                    l6579 04E7                                      l6827 0C16  
                                    l7387 079B                                      l7723 0ECA  
                                    l7707 0E9D                                      l6925 17F9  
                                    l6917 17ED                                      l6589 0519  
                                    l7493 1593                                      l6845 0C4D  
                                    l6837 0C25                                      l6829 0C19  
                                    l6927 17FE                                      l6759 09B3  
                                    l6599 0534                                      l7911 01D7  
                                    l7823 00CD                                      l6847 0C53  
                                    l6839 0C2A                                      l6945 07E7  
                                    l6961 09D4                                      l7577 15E5  
                                    l7817 009B                                      l7737 0916  
                                    l6867 176D                                      l7755 08C5  
                                    l6877 1784                                      l6869 1776  
                   _myMain_Initialization 13BC                                      l7943 057A  
                                    l7855 0163                                      l7863 018E  
                                    l7783 0056                                      l7695 0E70  
                                    l6889 1469                                      l7937 056B  
                                    l7873 01A4                                      l7849 0156  
                                    l7955 05B5                                      l7947 0589  
                                    l7859 0182                                      l7973 05FC  
                                    l7957 058C                                      l7975 05D3  
                                    l7959 05BD                                      l7977 0604  
                                    l7985 0621                                      _CFGS 0CAE  
                                    l7979 060E                              __CFG_WDTE$ON 0000  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u4115 0F1A                                      u4145 0F35  
                                    u4085 0EF0                                      _PEIE 005E  
                                    u7025 0D0B                                      u7205 0B36  
                                    u7165 0B1A                                      u7335 04AF  
                                    u7185 0B24                                      u7425 04E8  
                                    u7505 0FA6                                      u8145 14F2  
                                    u7195 0B2E                                      u7515 0FC6  
                                    u7365 04C2                                      u7525 0FD5  
                                    u9125 0827                                      u7535 0FDF  
                                    u7395 04D5                                      u9235 0EB7  
                                    u6925 168B                                      u7815 0D34  
                                    u7495 0F96                                      u8615 078B  
                                    u9335 08DD                                      u9185 0E83  
                                    u6955 0CCF                                      u8395 16B2  
                                    u9700 05BB                                      u9285 090D  
                                    u6975 0CE8                                      u9295 091C  
                                    u9705 0597                                      u9730 0602  
                                    u6995 0CF5                                      u8915 17A5  
                                    u9475 0099                                      u8595 076B  
                                    u8925 17AF                                      u9485 00CB  
                                    u9735 05DE                                      u8935 17B7  
                                    u8855 159A                                      u9575 0195  
                                    u9495 010F                                      u8865 159F  
                                    _LWLO 0CAD                                      u8965 0932  
                                    u8895 179B                                      _WREN 0CAA  
                                    _WPUB 020D                                      _Buz1 00AE  
                                    _Load 0120                                      _Temp 00C6  
                                    _main 0AA7                              ___ftpack@arg 0020  
                     __end_of_DlyOff_Main 0CBA                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 133F  
                                    ltemp 007E                          _setDimmerReClock 12EA  
                                    start 0013                                      ttemp 007E  
                                    wtemp 007E                       DelayTimejudge@value 0029  
                       ___bmul@multiplier 0023            getAll_DimmerLights_AdjSw@adjsw 0026  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$1980 0023  
    _getDimmerLights_Allow_Condition$1981 0024      _getDimmerLights_Allow_Condition$1979 0022  
                       ?_getDimmer_LoadGO 0075            getAll_DimmerLights_AdjSw@count 0023  
                                   ??_ISR 0079                              ___fttol@exp1 005B  
                            ___fttol@lval 0057   __end_of_getDimmerLights_Allow_Condition 1800  
__size_of_getDimmerLights_Allow_Condition 003A         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0075           _getDimmerLights_Allow_Condition 17C6  
                  _getDimmerLights_Status 13EB                        ??_getDimmer_LoadGO 0020  
          __size_of_DimmerIntrPointSelect 0013                          __end_of_LED_Main 137A  
        setDimmerLights_ErrorClose@lights 00EA             __end_of_DimmerIntrPointSelect 1445  
                   ?_getDimmerLights_Line 0075                     ?_setDimmerLights_Main 0075  
                   ?_setDimmerLights_Line 0075                           ?_setDelayOff_GO 0066  
                   ?_setDimmerLights_SwOn 0075                                     ?_main 01DC  
                         __end_of___awdiv 0B4D                           __end_of___ftadd 054C  
                         __end_of___ftdiv 1000                           __end_of___ftneg 132B  
                         ___awdiv@divisor 0020                                     _T1CON 0018  
                         __end_of___fttol 0F57                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 17C6                           ___awdiv@counter 0025  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0075  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _WPUB1 1069  
                                   _WPUB2 106A                   __end_of_Timeout_Counter 14F8  
                           __CFG_WRT$HALF 0000        __end_of_setDimmerLights_IntrIOC_GO 08AB  
              _setDimmerLights_IntrIOC_GO 0870                          __end_of_TMR1_ISR 1677  
                 __size_of_setProductData 000E        __end_of_setDimmerLights_ErrorClose 0D7D  
              _setDimmerLights_ErrorClose 0D1B                          __end_of_TMR1_Set 1392  
                                   _getAD 15ED                             ___awtoft@sign 002D  
             DimmerIntrPointSelect@lights 0076                             ___ftpack@sign 0024  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1432  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 14BA  
                      Flash_Memory_Read@i 0021                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0010  
            __end_of_getMain_LightsStatus 146B             __end_of_setLED_Initialization 13EB  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F               __size_of_Flash_Memory_Write 002F  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0075  
                       setTemp_Main@error 0068                    ??_Flash_Memory_Erasing 0020  
                         __initialization 0015                   __size_of_getDelayOff_GO 0010  
                       ??_setPercentValue 005C                              __end_of_main 0AF9  
                        __end_of_Fosc_Set 12CC                            _Exception_Main 054C  
                               ??_ADC_Set 0020                   __end_of_setDimmerLights 07FD  
                    _setSw_Initialization 131A                                    ??_main 006F  
                           ___fttol@sign1 0056                            _setMemory_Data 134A  
                  ?_Buzzer_Initialization 0075         __size_of_DimmerIntrIOCPointSelect 0015  
                 ??_DlyOff_Initialization 0021                 ?_DimmerIntrIOCPointSelect 0075  
                               ??_IOC_ISR 0078                                 ??_IOC_Set 0020  
         __end_of_DimmerLightsPointSelect 1458                    ?_setDimmerLights_AdjOn 0075  
                 ??_Switch_Initialization 0025                                    ?_getAD 0020  
                  ?_setDimmerLights_SwOff 0075                               _DlyOff_Main 0C5B  
                  ?_myMain_Initialization 0075                                    _ADCON0 009D  
                                  _ADCON1 009E                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1312                                 ??_WDT_Set 0020  
                        __end_of___awtoft 164F                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 0D1B                  _getMain_All_Error_Status 175C  
                                  _IOCBF2 1CB2                                    i1l5205 03AF  
                                  i1l5241 0439                                    i1l5233 0414  
                                  i1l5209 03B6                                    i1l5227 03FD  
                                  i1l5235 041A                                    i1l5245 044F  
                                  i1l5229 0403                                    i1l5193 037F  
                                  i1l4715 14D9                                    i1l4869 08A4  
                                  i1l4877 143C                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0026                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01AC  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  u598_25 1671                                    _IO_Set 1559  
                                  _WDTCON 0097                      Exception_Main@i_3142 00ED  
                                  _Dimmer 00BA                                    _DlySw1 00D8  
                                  _DlySw2 01D7                __end_of_Mcu_Initialization 1420  
                     __end_of_Buzzer_Main 096F                                    _Memory 01A0  
                                  _Timer1 00BD                                    ___bmul 13FC  
                  __end_of_Exception_Main 062C                      Load_Main@Load_Status 002B  
                    Exception_Main@lights 00EF                                    ___wmul 1590  
                               ??___awdiv 0024                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 0014                                 ??___ftdiv 0034  
                               ??___ftneg 0041                     setDimmerLights@lights 0068  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0075  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0069                    ??_setDimmerLights_Line 0020  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 096F  
                                  _myMain 00A0                    __end_of_setMemory_Data 1356  
                        _DimmerLightsIntr 0072                     ?_setSw_Initialization 0075  
                   setDimmerLights@status 0066                          ___awdiv@quotient 0027  
                                  _setBuz 0B4D                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 12C5          ??_setDimmerLights_Initialization 0022  
         ?_setDimmerLights_Initialization 0075       __end_of_setDimmerLights_IntrControl 0456  
             _setDimmerLights_IntrControl 0355                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0075               getMain_Lights_Count@status1 0021  
             getMain_Lights_Count@status2 0022                     __end_of_SwPointSelect 14CE  
            __size_of_Flash_Memory_Modify 004E         setDimmerLights_IntrControl@lights 0078  
                 __size_of_LedPointSelect 001B                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                getMain_LightsStatus@status 0020  
                              _TouchPower 14F8                ?_getAll_DimmerLights_AdjSw 0075  
                 __end_of__initialization 003E                                 ?_LED_Main 0075  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                           ?_my_MainTimer 0075                 _setDimmerLights_SwOn$1960 002E  
               _setDimmerLights_SwOn$1961 002F                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0075  
                              ___fttol@f1 004E                            __pcstackCOMMON 0075  
          DimmerIntrIOCPointSelect@lights 0076                           ?_Exception_Main 0075  
                            __pidataBANK4 160D                             __end_of_getAD 160D  
                               ?_TMR1_ISR 0075                                 ?_TMR1_Set 0075  
                  setLoad_AH_AL_Restore@i 0021              __size_of_setDimmerLights_Adj 004E  
                      _LED_Initialization 1362                           _getSw_KeyStatus 15AE  
                        ??_DelayTimejudge 0024                           ?_setMemory_Data 0020  
           ??_Flash_Memory_Initialization 0062                          ?_setDimmerLights 0066  
                    _getMain_Lights_Count 14A6                                 ?_WDT_Main 0075  
                       __end_of_Load_Main 01EE                      _getMain_LightsStatus 1458  
              __end_of_set_TimeoutCleared 12D1                  __end_of_setDimmerReClock 12F2  
                     ?_LED_Initialization 0075                            _setProductData 139F  
                          _DimmerLights11 00C2                            _DimmerLights22 00C3  
                    __size_of_setLED_Main 003A                    ?_getDimmer_Load_Status 0075  
                                 ??_getAD 0023                       _Temp_Initialization 12C5  
                              __pbssBANK0 006F                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                               ?_Fosc_Set 0075                               _Buzzer_Main 0925  
                       __end_of_Temp_Main 0800                                   ?_IO_Set 0075  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 12F2  
                              __pnvCOMMON 007A                             ??_Switch_Main 006F  
                    ??_LED_Initialization 0025                              _DimmerLights 006F  
                       LedPointSelect@led 0021                    __size_of_DelayOff_Main 0008  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0075  
                              __pmaintext 0AA7                            _getDelayOff_GO 13CB  
                    ?_Temp_Initialization 0075                                   ?___bmul 0020  
        __size_of_DimmerLightsPointSelect 0013                          ??_setDelayOff_GO 0068  
           ??_DimmerLights_Initialization 0024                                   ?___wmul 0020  
                              ??_TMR1_ISR 0079                             ?_setTemp_Main 0075  
                              _getLoad_AD 0E4F                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 1302                                   ?_setLED 0022  
                   ?_getMain_Lights_Count 0075                                   _ADC_Set 12E3  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 08E7  
                              ??_WDT_Main 0020                     ?_getMain_LightsStatus 0075  
                  __end_of_setProductData 13AD                                   _IOC_ISR 13AD  
                                 _IOC_Set 137A     getDimmerLights_Allow_Condition@lights 0025  
                       _Flash_Memory_Main 0800                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1524                getAll_DimmerLights_AdjSw@i 0024  
             ?_setDimmerLights_IntrIOC_GO 0075               ?_setDimmerLights_ErrorClose 0075  
                      ?_Flash_Memory_Main 0075                        ?_Flash_Memory_Read 0075  
                                 _WDT_Set 1334                                ??_Fosc_Set 0020  
                             ?_TouchPower 0075                           _setPercentValue 0D7D  
                 ??_setLoad_AH_AL_Restore 0020                           __size_of_IO_Set 001B  
                     ??_Flash_Memory_Main 0026                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 13DB                                   _VarLED1 00E1  
                                 _VarLED2 00E5            __end_of_getDimmerLights_Status 13FC  
                 __end_of_getSw_KeyStatus 15CD          __end_of_DimmerIntrIOCPointSelect 14E3  
                   ??_Temp_Initialization 0020                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 0AF9                                   ___ftadd 0456  
                                 ___ftdiv 0F57                                   ___ftneg 1322  
                         __size_of___wmul 001E                                   ___fttol 0ED0  
                     __end_of_Switch_Main 134A                                   ___lwdiv 178F  
                 ??_Buzzer_Initialization 0020                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 004D  
                         __size_of_setBuz 0059                                   __ptext1 08AB  
                                 __ptext2 13BC                                   __ptext3 08E7  
                                 __ptext4 0E4F                                   __ptext5 15ED  
                                 __ptext6 1420                                   __ptext7 0002  
                                 __ptext8 07FD                                   __ptext9 0708  
                 ??_setDimmerLights_AdjOn 0022                     _DimmerIntrPointSelect 1432  
                            __size_of_ISR 000F                ??_getMain_All_Error_Status 0020  
                         ?_setProductData 0062                 __end_of_Flash_Memory_Main 0836  
               __end_of_Flash_Memory_Read 153E                   ??_setDimmerLights_SwOff 006C  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 12FA  
                       _DimmerLights_Main 15CD            __size_of_DlyOff_Initialization 0006  
           __end_of_DlyOff_Initialization 12D7                  ??_setTemp_Initialization 0020  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0075  
                      ?_DimmerLights_Main 0075                                   _product 007A  
                          _LedPointSelect 153E                       _DelayOffPointSelect 147E  
                                 clrloop0 12DE            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 139F                      end_of_initialization 003E  
               ??_DelayOff_Initialization 0022                __end_of_Flash_Memory_Write 172B  
                                 init_ram 12D7                       ??_DimmerLights_Main 006A  
                    Flash_Memory_Read@ret 0023                                   initloop 12D8  
                              _setSw_Main 01EE                    setDimmerLights_SwOn@sw 0031  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 13DB  
                         ?_getDelayOff_GO 0075             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0075                       _Flash_Memory_Modify 0A0A  
                             ?_getLoad_AD 0075                               ?_getLoad_OK 0075  
                  ??_getMain_Lights_Count 0020                       _Flash_Memory_Unlock 132B  
                  ??_getMain_LightsStatus 0020                               ?_getTemp_AD 0075  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 15ED  
                      _Mcu_Initialization 140E                      __end_of_my_MainTimer 08E7  
                          ?_DelayOff_Main 0075                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1559                   __end_of_setPercentValue 0DE2  
                     ?_Mcu_Initialization 0075                      ?_Flash_Memory_Modify 0075  
                     _setDimmerLights_Adj 09BC                      ?_Flash_Memory_Unlock 0075  
         getMain_All_Error_Status@command 0025               ??_getAll_DimmerLights_AdjSw 0022  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006D  
                          __end_of_IO_Set 1574                               _Switch_Main 133F  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0075  
                 _DimmerLightsPointSelect 1445                          ??_setMemory_Data 0021  
                    ??_Mcu_Initialization 0021                     ??_DelayOffPointSelect 0020  
                           ?_WDT_Clearing 0075                      ?_setDimmerLights_Adj 0066  
                          __end_of___bmul 140E                  _DimmerIntrIOCPointSelect 14CE  
                          __end_of___wmul 15AE                         getSw_KeyStatus@sw 0024  
                       __size_of_TMR1_ISR 0028             __size_of_getDimmerLights_Line 0013  
                  ?_DimmerIntrPointSelect 0075                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006D                            __end_of_setLED 09BC  
           __size_of_setDimmerLights_Line 0017             __size_of_setDimmerLights_SwOn 005C  
                          __end_of_setBuz 0BA6                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0075  
                     start_initialization 0015                           ?_LedPointSelect 0075  
                               _Load_Main 0042                               __end_of_ISR 0013  
                        _getDimmer_LoadGO 130A                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                        ??_setDimmerReClock 0078  
         __size_of_setTemp_Initialization 0001                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 07B8                       __size_of_getLoad_AD 0081  
                            ?_Buzzer_Main 0075                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 12CC                                  ??_IO_Set 0020  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 00DD  
                             ?_setSw_Main 0075                       __size_of_getTemp_AD 003E  
                  ?_setLED_Initialization 0075                         __size_of_Fosc_Set 0004  
                               _Temp_Main 07FD                       ?_set_TimeoutCleared 0075  
                          ??_WDT_Clearing 0020                     setProductData@address 0065  
                     Exception_Main@count 00E9                       Exception_Main@error 00EA  
                                ??___bmul 0021                     ??_setDimmerLights_Adj 0067  
                                ??___wmul 0024                    __size_of_SwPointSelect 0014  
                             __pdataBANK4 0220                                  ??_setLED 0023  
               _getAll_DimmerLights_AdjSw 16A1                                  ?_ADC_Set 0075  
                                ??_setBuz 002B                           ??_DelayOff_Main 006F  
        __end_of_getMain_All_Error_Status 178F                __size_of_DimmerLights_Main 0020  
                      setMemory_Data@data 0020                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0075                               __pbssCOMMON 0070  
                                ?_IOC_Set 0075                                 ___latbits 0003  
                              ?_Load_Main 0075                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E9                             __pcstackBANK3 01DC  
                    ??_set_TimeoutCleared 0020                          ?_setPercentValue 0075  
                __size_of_setDimmerLights 0045                             DlyOff_Main@sw 006E  
                                ?_WDT_Set 0075                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 005F                             _DimmerLights1 014E  
                           _DimmerLights2 015F                     setDelayOff_GO@command 0066  
               ??_DimmerLightsPointSelect 0020            __size_of_setLoad_AH_AL_Restore 001C  
           __end_of_setLoad_AH_AL_Restore 1590               __size_of_LED_Initialization 000C  
                         Exception_Main@i 00EB                                ?_Temp_Main 0075  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0020  
                              setBuz@time 0029                       setDelayOff_GO@value 0067  
                          Load_Main@error 002A                    _setTemp_Initialization 12BE  
     __end_of_Flash_Memory_Initialization 0708               _Flash_Memory_Initialization 062C  
                                ?___awdiv 0020                                  ?___ftadd 0041  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                          ??_setProductData 0063  
           __size_of_setSw_Initialization 0008            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 12C2                          setPercentValue@i 005F  
                getDimmerLights_Line@line 0021                        __end_of_TouchPower 150D  
                         DelayTimejudge@i 0026                           DelayTimejudge@j 0027  
                         DelayTimejudge@k 0028                       __size_of_setSw_Main 0167  
          __size_of_setDimmerLights_AdjOn 002E             __end_of_setDimmerLights_AdjOn 16FC  
          __size_of_setDimmerLights_SwOff 004F            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 0AA7             __end_of_myMain_Initialization 13CB  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0026  
                 __size_of_DelayTimejudge 002A                             _SwPointSelect 14BA  
                     __end_of_setLED_Main 0870                          ??_getDelayOff_GO 0021  
                     _DimmerLightsIntrIOC 00C4               __end_of_Temp_Initialization 12C8  
                          ___wmul@product 0024                                  _LED_Main 136E  
                         SwPointSelect@sw 0021                                 clear_ram0 12DD  
                            _my_MainTimer 08AB       __end_of_DimmerLights_Initialization 14A6  
             _DimmerLights_Initialization 1492                                  _GO_nDONE 04E9  
                       ??_Timeout_Counter 0020                        _Flash_Memory_Write 16FC  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 164F  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1386  
                            ??_getTemp_AD 0024                                  _WDT_Main 1420  
                 DlyOff_Initialization@sw 0021                     getSw_KeyStatus@status 0023  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
                     ?_Flash_Memory_Write 0075                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0059                                  _DelayOff 0070  
                            setSw_Main@sw 00E9          setDimmerLights_IntrIOC_GO@lights 0077  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 000F  
            ?_setDimmerLights_IntrControl 0075            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1362  
                          ?_SwPointSelect 0075                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                     _DlyOff_Initialization 12D1  
                                _Fosc_Set 12C8                          __size_of_WDT_Set 000B  
                      __end_of_getLoad_AD 0ED0                        __end_of_getLoad_OK 130A  
                   _Switch_Initialization 1392         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 0067  
               ?_getMain_All_Error_Status 0075                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 0925                              ?_Switch_Main 0075  
              ??_DimmerIntrIOCPointSelect 0075                         getLoad_AD@channel 0026  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00C5  
                             ??_Temp_Main 0069             _getMain_All_Error_Status$3127 0021  
           _getMain_All_Error_Status$3128 0023                  __end_of_getDimmer_LoadGO 1312  
                     _Load_Initialization 12C2                                 setLED@led 0023  
                 ??_DimmerIntrPointSelect 0075                              _setTemp_Main 0708  
                        __size_of___awdiv 0054                          __size_of___ftadd 00F6  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 0030                                  ___awtoft 162D  
                        ??_LedPointSelect 0020                                  ___ftpack 0CBA  
           __size_of_getMain_Lights_Count 0014                    getDimmer_LoadGO@loadgo 0020  
           __size_of_getMain_LightsStatus 0013                         getTemp_AD@channel 0025  
                             _setLED_Main 0836            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0075                          getDelayOff_GO@go 0022  
                        getDelayOff_GO@sw 0021             __end_of_getDimmer_Load_Status 131A  
                        setDelayOff_GO@sw 006B                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0075        __size_of_getAll_DimmerLights_AdjSw 002D  
                         ___lwdiv@counter 0025                                  __ptext10 12C5  
                                __ptext11 12BE                                  __ptext20 14F8  
                                __ptext12 133F                                  __ptext21 12CC  
                                __ptext13 01EE                                  __ptext30 0042  
                                __ptext22 14E3                                  __ptext14 0BFF  
                                __ptext31 14A6                                  __ptext23 140E  
                                __ptext15 16CE                                  __ptext40 0836  
                                __ptext32 1312                                  __ptext24 1334  
                                __ptext16 15AE                                  __ptext41 1362  
                                __ptext33 130A                                  __ptext25 1386  
                                __ptext17 14BA                                  __ptext50 1524  
                                __ptext42 13DB                                  __ptext34 16A1  
                                __ptext26 1559                                  __ptext18 1392  
                                __ptext51 054C                                  __ptext43 0800  
                                __ptext35 1590                                  __ptext27 137A  
                                __ptext19 131A                                  __ptext60 0F57  
                                __ptext52 146B                                  __ptext44 0A0A  
                                __ptext36 178F                                  __ptext28 12C8  
                                __ptext61 0456                                  __ptext53 15CD  
                                __ptext45 1356                                  __ptext37 12C2  
                                __ptext29 12E3                                  __ptext70 175C  
                                __ptext62 162D                                  __ptext54 0DE2  
                                __ptext46 062C                                  __ptext38 1574  
                                __ptext71 1492                                  __ptext63 0CBA  
                                __ptext55 09BC                                  __ptext47 134A  
                                __ptext39 136E                                  __ptext80 13FC  
                                __ptext72 172B                                  __ptext64 096F  
                                __ptext56 07B8                                  __ptext48 16FC  
                                __ptext81 13CB                                  __ptext73 12FA  
                                __ptext65 153E                                  __ptext57 0D7D  
                                __ptext49 132B                                  __ptext90 12BF  
                                __ptext82 13EB                                  __ptext74 0C5B  
                                __ptext66 150D                                  __ptext58 0ED0  
                                __ptext83 1445                                  __ptext75 0D1B  
                                __ptext67 1458                                  __ptext59 1322  
                                __ptext92 164F                                  __ptext84 0B4D  
                                __ptext76 0A58                                  __ptext68 17C6  
                                __ptext93 0355                                  __ptext85 0AF9  
                                __ptext77 0BA6                                  __ptext69 1302  
                                __ptext94 1432                                  __ptext86 12F2  
                                __ptext78 139F                                  __ptext95 13AD  
                                __ptext87 12D1                                  __ptext79 1677  
                                __ptext96 12EA                                  __ptext88 147E  
                                __ptext97 0870                                  __ptext89 0925  
                                __ptext98 14CE                                  __product 0220  
           ??_setDimmerLights_IntrControl 0077                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 147E  
            __end_of_setDimmerLights_Main 0E4F              __end_of_setDimmerLights_Line 1524  
            __end_of_setDimmerLights_SwOn 0C5B                              ??_setSw_Main 006D  
                           setLED@command 0022                             __size_of_main 0052  
              setDimmerLights_Main@lights 0069               __end_of_DelayOffPointSelect 1492  
               __size_of_setDimmerReClock 0008                   setDimmerLights_AdjOn@sw 0022  
             __size_of_Mcu_Initialization 0012               setDimmerLights_ErrorClose@i 00EB  
                            getLoad_OK@ok 0020                                  main@argc 01DC  
                                main@argv 01DE                      _getSw_KeyStatus$5330 0021  
                    _getSw_KeyStatus$5331 0022                  __size_of_getSw_KeyStatus 001F  
             __end_of_Flash_Memory_Modify 0A58               __end_of_Flash_Memory_Unlock 1334  
                         ??_SwPointSelect 0020                        __end_of_setSw_Main 0355  
                   ??_Load_Initialization 0022                    ?_DlyOff_Initialization 0075  
                          _DelayTimejudge 1677                               pic14e$flags 007E  
            ??_setDimmerLights_IntrIOC_GO 0077                setDimmerLights_Line@lights 0020  
            ??_setDimmerLights_ErrorClose 006D                   setDimmerLights_SwOff@sw 006C  
       __end_of_getAll_DimmerLights_AdjSw 16CE                                  intlevel1 0000  
                  ?_Switch_Initialization 0075    __end_of_setDimmerLights_Initialization 175C  
 __size_of_setDimmerLights_Initialization 0031            _setDimmerLights_Initialization 172B  
             __end_of_setDimmerLights_Adj 0A0A                   ?_setTemp_Initialization 0075  
    __size_of_setDimmerLights_IntrControl 0101                               getLoad_AD@i 0029  
                             getLoad_AD@j 0028                               getLoad_AD@k 0027  
                    _Flash_Memory_Erasing 1356                   __size_of_Exception_Main 00E0  
         __end_of_DelayOff_Initialization 12FA       __size_of_setDimmerLights_IntrIOC_GO 003B  
     __size_of_setDimmerLights_ErrorClose 0062                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1302                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 0BA6                    __end_of_DelayTimejudge 16A1  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00DC  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 00ED  
                   setMemory_Data@address 0022              __end_of_setSw_Initialization 1322  
                         _Timeout_Counter 14E3           __size_of_getDimmerLights_Status 0011  
              __end_of_LED_Initialization 136E            __end_of_setTemp_Initialization 12BF  
                __size_of_setPercentValue 0065                      setPercentValue@value 005E  
                   _setLoad_AH_AL_Restore 1574  
