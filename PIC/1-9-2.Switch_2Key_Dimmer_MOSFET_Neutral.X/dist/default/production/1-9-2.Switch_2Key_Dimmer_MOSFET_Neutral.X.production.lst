

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Mar 19 16:32:01 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	intentry,global,class=CODE,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   167                           	psect	text147,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,inline,delta=2
   169                           	psect	text149,local,class=CODE,merge=1,inline,delta=2
   170                           	psect	text150,local,class=CODE,merge=1,inline,delta=2
   171                           	psect	text151,local,class=CODE,merge=1,inline,delta=2
   172                           	psect	text152,local,class=CODE,merge=1,inline,delta=2
   173                           	psect	text153,local,class=CODE,merge=1,delta=2
   174                           	dabs	1,0x7E,2
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  0010                     	;# 
   191  0011                     	;# 
   192  0012                     	;# 
   193  0015                     	;# 
   194  0016                     	;# 
   195  0016                     	;# 
   196  0017                     	;# 
   197  0018                     	;# 
   198  0019                     	;# 
   199  001A                     	;# 
   200  001B                     	;# 
   201  001C                     	;# 
   202  008C                     	;# 
   203  008D                     	;# 
   204  008E                     	;# 
   205  0090                     	;# 
   206  0091                     	;# 
   207  0092                     	;# 
   208  0095                     	;# 
   209  0096                     	;# 
   210  0097                     	;# 
   211  0099                     	;# 
   212  009A                     	;# 
   213  009B                     	;# 
   214  009B                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009E                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  0116                     	;# 
   222  0117                     	;# 
   223  011D                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  018E                     	;# 
   227  0191                     	;# 
   228  0191                     	;# 
   229  0192                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0194                     	;# 
   233  0195                     	;# 
   234  0196                     	;# 
   235  0197                     	;# 
   236  0199                     	;# 
   237  019A                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019C                     	;# 
   243  019C                     	;# 
   244  019D                     	;# 
   245  019E                     	;# 
   246  019F                     	;# 
   247  020D                     	;# 
   248  0210                     	;# 
   249  0211                     	;# 
   250  0211                     	;# 
   251  0212                     	;# 
   252  0212                     	;# 
   253  0213                     	;# 
   254  0213                     	;# 
   255  0214                     	;# 
   256  0214                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0215                     	;# 
   260  0216                     	;# 
   261  0216                     	;# 
   262  0217                     	;# 
   263  0217                     	;# 
   264  0291                     	;# 
   265  0291                     	;# 
   266  0292                     	;# 
   267  0293                     	;# 
   268  0298                     	;# 
   269  0298                     	;# 
   270  0299                     	;# 
   271  029A                     	;# 
   272  0394                     	;# 
   273  0395                     	;# 
   274  0396                     	;# 
   275  0FE4                     	;# 
   276  0FE5                     	;# 
   277  0FE6                     	;# 
   278  0FE7                     	;# 
   279  0FE8                     	;# 
   280  0FE9                     	;# 
   281  0FEA                     	;# 
   282  0FEB                     	;# 
   283  0FED                     	;# 
   284  0FEE                     	;# 
   285  0FEF                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  0010                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0015                     	;# 
   305  0016                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001C                     	;# 
   313  008C                     	;# 
   314  008D                     	;# 
   315  008E                     	;# 
   316  0090                     	;# 
   317  0091                     	;# 
   318  0092                     	;# 
   319  0095                     	;# 
   320  0096                     	;# 
   321  0097                     	;# 
   322  0099                     	;# 
   323  009A                     	;# 
   324  009B                     	;# 
   325  009B                     	;# 
   326  009C                     	;# 
   327  009D                     	;# 
   328  009E                     	;# 
   329  010C                     	;# 
   330  010D                     	;# 
   331  010E                     	;# 
   332  0116                     	;# 
   333  0117                     	;# 
   334  011D                     	;# 
   335  018C                     	;# 
   336  018D                     	;# 
   337  018E                     	;# 
   338  0191                     	;# 
   339  0191                     	;# 
   340  0192                     	;# 
   341  0193                     	;# 
   342  0193                     	;# 
   343  0194                     	;# 
   344  0195                     	;# 
   345  0196                     	;# 
   346  0197                     	;# 
   347  0199                     	;# 
   348  019A                     	;# 
   349  019B                     	;# 
   350  019B                     	;# 
   351  019B                     	;# 
   352  019B                     	;# 
   353  019C                     	;# 
   354  019C                     	;# 
   355  019D                     	;# 
   356  019E                     	;# 
   357  019F                     	;# 
   358  020D                     	;# 
   359  0210                     	;# 
   360  0211                     	;# 
   361  0211                     	;# 
   362  0212                     	;# 
   363  0212                     	;# 
   364  0213                     	;# 
   365  0213                     	;# 
   366  0214                     	;# 
   367  0214                     	;# 
   368  0215                     	;# 
   369  0215                     	;# 
   370  0215                     	;# 
   371  0216                     	;# 
   372  0216                     	;# 
   373  0217                     	;# 
   374  0217                     	;# 
   375  0291                     	;# 
   376  0291                     	;# 
   377  0292                     	;# 
   378  0293                     	;# 
   379  0298                     	;# 
   380  0298                     	;# 
   381  0299                     	;# 
   382  029A                     	;# 
   383  0394                     	;# 
   384  0395                     	;# 
   385  0396                     	;# 
   386  0FE4                     	;# 
   387  0FE5                     	;# 
   388  0FE6                     	;# 
   389  0FE7                     	;# 
   390  0FE8                     	;# 
   391  0FE9                     	;# 
   392  0FEA                     	;# 
   393  0FEB                     	;# 
   394  0FED                     	;# 
   395  0FEE                     	;# 
   396  0FEF                     	;# 
   397  0000                     	;# 
   398  0001                     	;# 
   399  0002                     	;# 
   400  0003                     	;# 
   401  0004                     	;# 
   402  0005                     	;# 
   403  0006                     	;# 
   404  0007                     	;# 
   405  0008                     	;# 
   406  0009                     	;# 
   407  000A                     	;# 
   408  000B                     	;# 
   409  000C                     	;# 
   410  000D                     	;# 
   411  000E                     	;# 
   412  0010                     	;# 
   413  0011                     	;# 
   414  0012                     	;# 
   415  0015                     	;# 
   416  0016                     	;# 
   417  0016                     	;# 
   418  0017                     	;# 
   419  0018                     	;# 
   420  0019                     	;# 
   421  001A                     	;# 
   422  001B                     	;# 
   423  001C                     	;# 
   424  008C                     	;# 
   425  008D                     	;# 
   426  008E                     	;# 
   427  0090                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0095                     	;# 
   431  0096                     	;# 
   432  0097                     	;# 
   433  0099                     	;# 
   434  009A                     	;# 
   435  009B                     	;# 
   436  009B                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  010C                     	;# 
   441  010D                     	;# 
   442  010E                     	;# 
   443  0116                     	;# 
   444  0117                     	;# 
   445  011D                     	;# 
   446  018C                     	;# 
   447  018D                     	;# 
   448  018E                     	;# 
   449  0191                     	;# 
   450  0191                     	;# 
   451  0192                     	;# 
   452  0193                     	;# 
   453  0193                     	;# 
   454  0194                     	;# 
   455  0195                     	;# 
   456  0196                     	;# 
   457  0197                     	;# 
   458  0199                     	;# 
   459  019A                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019B                     	;# 
   463  019B                     	;# 
   464  019C                     	;# 
   465  019C                     	;# 
   466  019D                     	;# 
   467  019E                     	;# 
   468  019F                     	;# 
   469  020D                     	;# 
   470  0210                     	;# 
   471  0211                     	;# 
   472  0211                     	;# 
   473  0212                     	;# 
   474  0212                     	;# 
   475  0213                     	;# 
   476  0213                     	;# 
   477  0214                     	;# 
   478  0214                     	;# 
   479  0215                     	;# 
   480  0215                     	;# 
   481  0215                     	;# 
   482  0216                     	;# 
   483  0216                     	;# 
   484  0217                     	;# 
   485  0217                     	;# 
   486  0291                     	;# 
   487  0291                     	;# 
   488  0292                     	;# 
   489  0293                     	;# 
   490  0298                     	;# 
   491  0298                     	;# 
   492  0299                     	;# 
   493  029A                     	;# 
   494  0394                     	;# 
   495  0395                     	;# 
   496  0396                     	;# 
   497  0FE4                     	;# 
   498  0FE5                     	;# 
   499  0FE6                     	;# 
   500  0FE7                     	;# 
   501  0FE8                     	;# 
   502  0FE9                     	;# 
   503  0FEA                     	;# 
   504  0FEB                     	;# 
   505  0FED                     	;# 
   506  0FEE                     	;# 
   507  0FEF                     	;# 
   508  0000                     	;# 
   509  0001                     	;# 
   510  0002                     	;# 
   511  0003                     	;# 
   512  0004                     	;# 
   513  0005                     	;# 
   514  0006                     	;# 
   515  0007                     	;# 
   516  0008                     	;# 
   517  0009                     	;# 
   518  000A                     	;# 
   519  000B                     	;# 
   520  000C                     	;# 
   521  000D                     	;# 
   522  000E                     	;# 
   523  0010                     	;# 
   524  0011                     	;# 
   525  0012                     	;# 
   526  0015                     	;# 
   527  0016                     	;# 
   528  0016                     	;# 
   529  0017                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  001A                     	;# 
   533  001B                     	;# 
   534  001C                     	;# 
   535  008C                     	;# 
   536  008D                     	;# 
   537  008E                     	;# 
   538  0090                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0095                     	;# 
   542  0096                     	;# 
   543  0097                     	;# 
   544  0099                     	;# 
   545  009A                     	;# 
   546  009B                     	;# 
   547  009B                     	;# 
   548  009C                     	;# 
   549  009D                     	;# 
   550  009E                     	;# 
   551  010C                     	;# 
   552  010D                     	;# 
   553  010E                     	;# 
   554  0116                     	;# 
   555  0117                     	;# 
   556  011D                     	;# 
   557  018C                     	;# 
   558  018D                     	;# 
   559  018E                     	;# 
   560  0191                     	;# 
   561  0191                     	;# 
   562  0192                     	;# 
   563  0193                     	;# 
   564  0193                     	;# 
   565  0194                     	;# 
   566  0195                     	;# 
   567  0196                     	;# 
   568  0197                     	;# 
   569  0199                     	;# 
   570  019A                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019B                     	;# 
   574  019B                     	;# 
   575  019C                     	;# 
   576  019C                     	;# 
   577  019D                     	;# 
   578  019E                     	;# 
   579  019F                     	;# 
   580  020D                     	;# 
   581  0210                     	;# 
   582  0211                     	;# 
   583  0211                     	;# 
   584  0212                     	;# 
   585  0212                     	;# 
   586  0213                     	;# 
   587  0213                     	;# 
   588  0214                     	;# 
   589  0214                     	;# 
   590  0215                     	;# 
   591  0215                     	;# 
   592  0215                     	;# 
   593  0216                     	;# 
   594  0216                     	;# 
   595  0217                     	;# 
   596  0217                     	;# 
   597  0291                     	;# 
   598  0291                     	;# 
   599  0292                     	;# 
   600  0293                     	;# 
   601  0298                     	;# 
   602  0298                     	;# 
   603  0299                     	;# 
   604  029A                     	;# 
   605  0394                     	;# 
   606  0395                     	;# 
   607  0396                     	;# 
   608  0FE4                     	;# 
   609  0FE5                     	;# 
   610  0FE6                     	;# 
   611  0FE7                     	;# 
   612  0FE8                     	;# 
   613  0FE9                     	;# 
   614  0FEA                     	;# 
   615  0FEB                     	;# 
   616  0FED                     	;# 
   617  0FEE                     	;# 
   618  0FEF                     	;# 
   619  0000                     	;# 
   620  0001                     	;# 
   621  0002                     	;# 
   622  0003                     	;# 
   623  0004                     	;# 
   624  0005                     	;# 
   625  0006                     	;# 
   626  0007                     	;# 
   627  0008                     	;# 
   628  0009                     	;# 
   629  000A                     	;# 
   630  000B                     	;# 
   631  000C                     	;# 
   632  000D                     	;# 
   633  000E                     	;# 
   634  0010                     	;# 
   635  0011                     	;# 
   636  0012                     	;# 
   637  0015                     	;# 
   638  0016                     	;# 
   639  0016                     	;# 
   640  0017                     	;# 
   641  0018                     	;# 
   642  0019                     	;# 
   643  001A                     	;# 
   644  001B                     	;# 
   645  001C                     	;# 
   646  008C                     	;# 
   647  008D                     	;# 
   648  008E                     	;# 
   649  0090                     	;# 
   650  0091                     	;# 
   651  0092                     	;# 
   652  0095                     	;# 
   653  0096                     	;# 
   654  0097                     	;# 
   655  0099                     	;# 
   656  009A                     	;# 
   657  009B                     	;# 
   658  009B                     	;# 
   659  009C                     	;# 
   660  009D                     	;# 
   661  009E                     	;# 
   662  010C                     	;# 
   663  010D                     	;# 
   664  010E                     	;# 
   665  0116                     	;# 
   666  0117                     	;# 
   667  011D                     	;# 
   668  018C                     	;# 
   669  018D                     	;# 
   670  018E                     	;# 
   671  0191                     	;# 
   672  0191                     	;# 
   673  0192                     	;# 
   674  0193                     	;# 
   675  0193                     	;# 
   676  0194                     	;# 
   677  0195                     	;# 
   678  0196                     	;# 
   679  0197                     	;# 
   680  0199                     	;# 
   681  019A                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019C                     	;# 
   687  019C                     	;# 
   688  019D                     	;# 
   689  019E                     	;# 
   690  019F                     	;# 
   691  020D                     	;# 
   692  0210                     	;# 
   693  0211                     	;# 
   694  0211                     	;# 
   695  0212                     	;# 
   696  0212                     	;# 
   697  0213                     	;# 
   698  0213                     	;# 
   699  0214                     	;# 
   700  0214                     	;# 
   701  0215                     	;# 
   702  0215                     	;# 
   703  0215                     	;# 
   704  0216                     	;# 
   705  0216                     	;# 
   706  0217                     	;# 
   707  0217                     	;# 
   708  0291                     	;# 
   709  0291                     	;# 
   710  0292                     	;# 
   711  0293                     	;# 
   712  0298                     	;# 
   713  0298                     	;# 
   714  0299                     	;# 
   715  029A                     	;# 
   716  0394                     	;# 
   717  0395                     	;# 
   718  0396                     	;# 
   719  0FE4                     	;# 
   720  0FE5                     	;# 
   721  0FE6                     	;# 
   722  0FE7                     	;# 
   723  0FE8                     	;# 
   724  0FE9                     	;# 
   725  0FEA                     	;# 
   726  0FEB                     	;# 
   727  0FED                     	;# 
   728  0FEE                     	;# 
   729  0FEF                     	;# 
   730  0000                     	;# 
   731  0001                     	;# 
   732  0002                     	;# 
   733  0003                     	;# 
   734  0004                     	;# 
   735  0005                     	;# 
   736  0006                     	;# 
   737  0007                     	;# 
   738  0008                     	;# 
   739  0009                     	;# 
   740  000A                     	;# 
   741  000B                     	;# 
   742  000C                     	;# 
   743  000D                     	;# 
   744  000E                     	;# 
   745  0010                     	;# 
   746  0011                     	;# 
   747  0012                     	;# 
   748  0015                     	;# 
   749  0016                     	;# 
   750  0016                     	;# 
   751  0017                     	;# 
   752  0018                     	;# 
   753  0019                     	;# 
   754  001A                     	;# 
   755  001B                     	;# 
   756  001C                     	;# 
   757  008C                     	;# 
   758  008D                     	;# 
   759  008E                     	;# 
   760  0090                     	;# 
   761  0091                     	;# 
   762  0092                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  010E                     	;# 
   776  0116                     	;# 
   777  0117                     	;# 
   778  011D                     	;# 
   779  018C                     	;# 
   780  018D                     	;# 
   781  018E                     	;# 
   782  0191                     	;# 
   783  0191                     	;# 
   784  0192                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0194                     	;# 
   788  0195                     	;# 
   789  0196                     	;# 
   790  0197                     	;# 
   791  0199                     	;# 
   792  019A                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019B                     	;# 
   796  019B                     	;# 
   797  019C                     	;# 
   798  019C                     	;# 
   799  019D                     	;# 
   800  019E                     	;# 
   801  019F                     	;# 
   802  020D                     	;# 
   803  0210                     	;# 
   804  0211                     	;# 
   805  0211                     	;# 
   806  0212                     	;# 
   807  0212                     	;# 
   808  0213                     	;# 
   809  0213                     	;# 
   810  0214                     	;# 
   811  0214                     	;# 
   812  0215                     	;# 
   813  0215                     	;# 
   814  0215                     	;# 
   815  0216                     	;# 
   816  0216                     	;# 
   817  0217                     	;# 
   818  0217                     	;# 
   819  0291                     	;# 
   820  0291                     	;# 
   821  0292                     	;# 
   822  0293                     	;# 
   823  0298                     	;# 
   824  0298                     	;# 
   825  0299                     	;# 
   826  029A                     	;# 
   827  0394                     	;# 
   828  0395                     	;# 
   829  0396                     	;# 
   830  0FE4                     	;# 
   831  0FE5                     	;# 
   832  0FE6                     	;# 
   833  0FE7                     	;# 
   834  0FE8                     	;# 
   835  0FE9                     	;# 
   836  0FEA                     	;# 
   837  0FEB                     	;# 
   838  0FED                     	;# 
   839  0FEE                     	;# 
   840  0FEF                     	;# 
   841  0000                     	;# 
   842  0001                     	;# 
   843  0002                     	;# 
   844  0003                     	;# 
   845  0004                     	;# 
   846  0005                     	;# 
   847  0006                     	;# 
   848  0007                     	;# 
   849  0008                     	;# 
   850  0009                     	;# 
   851  000A                     	;# 
   852  000B                     	;# 
   853  000C                     	;# 
   854  000D                     	;# 
   855  000E                     	;# 
   856  0010                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0015                     	;# 
   860  0016                     	;# 
   861  0016                     	;# 
   862  0017                     	;# 
   863  0018                     	;# 
   864  0019                     	;# 
   865  001A                     	;# 
   866  001B                     	;# 
   867  001C                     	;# 
   868  008C                     	;# 
   869  008D                     	;# 
   870  008E                     	;# 
   871  0090                     	;# 
   872  0091                     	;# 
   873  0092                     	;# 
   874  0095                     	;# 
   875  0096                     	;# 
   876  0097                     	;# 
   877  0099                     	;# 
   878  009A                     	;# 
   879  009B                     	;# 
   880  009B                     	;# 
   881  009C                     	;# 
   882  009D                     	;# 
   883  009E                     	;# 
   884  010C                     	;# 
   885  010D                     	;# 
   886  010E                     	;# 
   887  0116                     	;# 
   888  0117                     	;# 
   889  011D                     	;# 
   890  018C                     	;# 
   891  018D                     	;# 
   892  018E                     	;# 
   893  0191                     	;# 
   894  0191                     	;# 
   895  0192                     	;# 
   896  0193                     	;# 
   897  0193                     	;# 
   898  0194                     	;# 
   899  0195                     	;# 
   900  0196                     	;# 
   901  0197                     	;# 
   902  0199                     	;# 
   903  019A                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019B                     	;# 
   907  019B                     	;# 
   908  019C                     	;# 
   909  019C                     	;# 
   910  019D                     	;# 
   911  019E                     	;# 
   912  019F                     	;# 
   913  020D                     	;# 
   914  0210                     	;# 
   915  0211                     	;# 
   916  0211                     	;# 
   917  0212                     	;# 
   918  0212                     	;# 
   919  0213                     	;# 
   920  0213                     	;# 
   921  0214                     	;# 
   922  0214                     	;# 
   923  0215                     	;# 
   924  0215                     	;# 
   925  0215                     	;# 
   926  0216                     	;# 
   927  0216                     	;# 
   928  0217                     	;# 
   929  0217                     	;# 
   930  0291                     	;# 
   931  0291                     	;# 
   932  0292                     	;# 
   933  0293                     	;# 
   934  0298                     	;# 
   935  0298                     	;# 
   936  0299                     	;# 
   937  029A                     	;# 
   938  0394                     	;# 
   939  0395                     	;# 
   940  0396                     	;# 
   941  0FE4                     	;# 
   942  0FE5                     	;# 
   943  0FE6                     	;# 
   944  0FE7                     	;# 
   945  0FE8                     	;# 
   946  0FE9                     	;# 
   947  0FEA                     	;# 
   948  0FEB                     	;# 
   949  0FED                     	;# 
   950  0FEE                     	;# 
   951  0FEF                     	;# 
   952  0000                     	;# 
   953  0001                     	;# 
   954  0002                     	;# 
   955  0003                     	;# 
   956  0004                     	;# 
   957  0005                     	;# 
   958  0006                     	;# 
   959  0007                     	;# 
   960  0008                     	;# 
   961  0009                     	;# 
   962  000A                     	;# 
   963  000B                     	;# 
   964  000C                     	;# 
   965  000D                     	;# 
   966  000E                     	;# 
   967  0010                     	;# 
   968  0011                     	;# 
   969  0012                     	;# 
   970  0015                     	;# 
   971  0016                     	;# 
   972  0016                     	;# 
   973  0017                     	;# 
   974  0018                     	;# 
   975  0019                     	;# 
   976  001A                     	;# 
   977  001B                     	;# 
   978  001C                     	;# 
   979  008C                     	;# 
   980  008D                     	;# 
   981  008E                     	;# 
   982  0090                     	;# 
   983  0091                     	;# 
   984  0092                     	;# 
   985  0095                     	;# 
   986  0096                     	;# 
   987  0097                     	;# 
   988  0099                     	;# 
   989  009A                     	;# 
   990  009B                     	;# 
   991  009B                     	;# 
   992  009C                     	;# 
   993  009D                     	;# 
   994  009E                     	;# 
   995  010C                     	;# 
   996  010D                     	;# 
   997  010E                     	;# 
   998  0116                     	;# 
   999  0117                     	;# 
  1000  011D                     	;# 
  1001  018C                     	;# 
  1002  018D                     	;# 
  1003  018E                     	;# 
  1004  0191                     	;# 
  1005  0191                     	;# 
  1006  0192                     	;# 
  1007  0193                     	;# 
  1008  0193                     	;# 
  1009  0194                     	;# 
  1010  0195                     	;# 
  1011  0196                     	;# 
  1012  0197                     	;# 
  1013  0199                     	;# 
  1014  019A                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019B                     	;# 
  1018  019B                     	;# 
  1019  019C                     	;# 
  1020  019C                     	;# 
  1021  019D                     	;# 
  1022  019E                     	;# 
  1023  019F                     	;# 
  1024  020D                     	;# 
  1025  0210                     	;# 
  1026  0211                     	;# 
  1027  0211                     	;# 
  1028  0212                     	;# 
  1029  0212                     	;# 
  1030  0213                     	;# 
  1031  0213                     	;# 
  1032  0214                     	;# 
  1033  0214                     	;# 
  1034  0215                     	;# 
  1035  0215                     	;# 
  1036  0215                     	;# 
  1037  0216                     	;# 
  1038  0216                     	;# 
  1039  0217                     	;# 
  1040  0217                     	;# 
  1041  0291                     	;# 
  1042  0291                     	;# 
  1043  0292                     	;# 
  1044  0293                     	;# 
  1045  0298                     	;# 
  1046  0298                     	;# 
  1047  0299                     	;# 
  1048  029A                     	;# 
  1049  0394                     	;# 
  1050  0395                     	;# 
  1051  0396                     	;# 
  1052  0FE4                     	;# 
  1053  0FE5                     	;# 
  1054  0FE6                     	;# 
  1055  0FE7                     	;# 
  1056  0FE8                     	;# 
  1057  0FE9                     	;# 
  1058  0FEA                     	;# 
  1059  0FEB                     	;# 
  1060  0FED                     	;# 
  1061  0FEE                     	;# 
  1062  0FEF                     	;# 
  1063  0000                     	;# 
  1064  0001                     	;# 
  1065  0002                     	;# 
  1066  0003                     	;# 
  1067  0004                     	;# 
  1068  0005                     	;# 
  1069  0006                     	;# 
  1070  0007                     	;# 
  1071  0008                     	;# 
  1072  0009                     	;# 
  1073  000A                     	;# 
  1074  000B                     	;# 
  1075  000C                     	;# 
  1076  000D                     	;# 
  1077  000E                     	;# 
  1078  0010                     	;# 
  1079  0011                     	;# 
  1080  0012                     	;# 
  1081  0015                     	;# 
  1082  0016                     	;# 
  1083  0016                     	;# 
  1084  0017                     	;# 
  1085  0018                     	;# 
  1086  0019                     	;# 
  1087  001A                     	;# 
  1088  001B                     	;# 
  1089  001C                     	;# 
  1090  008C                     	;# 
  1091  008D                     	;# 
  1092  008E                     	;# 
  1093  0090                     	;# 
  1094  0091                     	;# 
  1095  0092                     	;# 
  1096  0095                     	;# 
  1097  0096                     	;# 
  1098  0097                     	;# 
  1099  0099                     	;# 
  1100  009A                     	;# 
  1101  009B                     	;# 
  1102  009B                     	;# 
  1103  009C                     	;# 
  1104  009D                     	;# 
  1105  009E                     	;# 
  1106  010C                     	;# 
  1107  010D                     	;# 
  1108  010E                     	;# 
  1109  0116                     	;# 
  1110  0117                     	;# 
  1111  011D                     	;# 
  1112  018C                     	;# 
  1113  018D                     	;# 
  1114  018E                     	;# 
  1115  0191                     	;# 
  1116  0191                     	;# 
  1117  0192                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0194                     	;# 
  1121  0195                     	;# 
  1122  0196                     	;# 
  1123  0197                     	;# 
  1124  0199                     	;# 
  1125  019A                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019C                     	;# 
  1131  019C                     	;# 
  1132  019D                     	;# 
  1133  019E                     	;# 
  1134  019F                     	;# 
  1135  020D                     	;# 
  1136  0210                     	;# 
  1137  0211                     	;# 
  1138  0211                     	;# 
  1139  0212                     	;# 
  1140  0212                     	;# 
  1141  0213                     	;# 
  1142  0213                     	;# 
  1143  0214                     	;# 
  1144  0214                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0215                     	;# 
  1148  0216                     	;# 
  1149  0216                     	;# 
  1150  0217                     	;# 
  1151  0217                     	;# 
  1152  0291                     	;# 
  1153  0291                     	;# 
  1154  0292                     	;# 
  1155  0293                     	;# 
  1156  0298                     	;# 
  1157  0298                     	;# 
  1158  0299                     	;# 
  1159  029A                     	;# 
  1160  0394                     	;# 
  1161  0395                     	;# 
  1162  0396                     	;# 
  1163  0FE4                     	;# 
  1164  0FE5                     	;# 
  1165  0FE6                     	;# 
  1166  0FE7                     	;# 
  1167  0FE8                     	;# 
  1168  0FE9                     	;# 
  1169  0FEA                     	;# 
  1170  0FEB                     	;# 
  1171  0FED                     	;# 
  1172  0FEE                     	;# 
  1173  0FEF                     	;# 
  1174  0000                     	;# 
  1175  0001                     	;# 
  1176  0002                     	;# 
  1177  0003                     	;# 
  1178  0004                     	;# 
  1179  0005                     	;# 
  1180  0006                     	;# 
  1181  0007                     	;# 
  1182  0008                     	;# 
  1183  0009                     	;# 
  1184  000A                     	;# 
  1185  000B                     	;# 
  1186  000C                     	;# 
  1187  000D                     	;# 
  1188  000E                     	;# 
  1189  0010                     	;# 
  1190  0011                     	;# 
  1191  0012                     	;# 
  1192  0015                     	;# 
  1193  0016                     	;# 
  1194  0016                     	;# 
  1195  0017                     	;# 
  1196  0018                     	;# 
  1197  0019                     	;# 
  1198  001A                     	;# 
  1199  001B                     	;# 
  1200  001C                     	;# 
  1201  008C                     	;# 
  1202  008D                     	;# 
  1203  008E                     	;# 
  1204  0090                     	;# 
  1205  0091                     	;# 
  1206  0092                     	;# 
  1207  0095                     	;# 
  1208  0096                     	;# 
  1209  0097                     	;# 
  1210  0099                     	;# 
  1211  009A                     	;# 
  1212  009B                     	;# 
  1213  009B                     	;# 
  1214  009C                     	;# 
  1215  009D                     	;# 
  1216  009E                     	;# 
  1217  010C                     	;# 
  1218  010D                     	;# 
  1219  010E                     	;# 
  1220  0116                     	;# 
  1221  0117                     	;# 
  1222  011D                     	;# 
  1223  018C                     	;# 
  1224  018D                     	;# 
  1225  018E                     	;# 
  1226  0191                     	;# 
  1227  0191                     	;# 
  1228  0192                     	;# 
  1229  0193                     	;# 
  1230  0193                     	;# 
  1231  0194                     	;# 
  1232  0195                     	;# 
  1233  0196                     	;# 
  1234  0197                     	;# 
  1235  0199                     	;# 
  1236  019A                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019C                     	;# 
  1242  019C                     	;# 
  1243  019D                     	;# 
  1244  019E                     	;# 
  1245  019F                     	;# 
  1246  020D                     	;# 
  1247  0210                     	;# 
  1248  0211                     	;# 
  1249  0211                     	;# 
  1250  0212                     	;# 
  1251  0212                     	;# 
  1252  0213                     	;# 
  1253  0213                     	;# 
  1254  0214                     	;# 
  1255  0214                     	;# 
  1256  0215                     	;# 
  1257  0215                     	;# 
  1258  0215                     	;# 
  1259  0216                     	;# 
  1260  0216                     	;# 
  1261  0217                     	;# 
  1262  0217                     	;# 
  1263  0291                     	;# 
  1264  0291                     	;# 
  1265  0292                     	;# 
  1266  0293                     	;# 
  1267  0298                     	;# 
  1268  0298                     	;# 
  1269  0299                     	;# 
  1270  029A                     	;# 
  1271  0394                     	;# 
  1272  0395                     	;# 
  1273  0396                     	;# 
  1274  0FE4                     	;# 
  1275  0FE5                     	;# 
  1276  0FE6                     	;# 
  1277  0FE7                     	;# 
  1278  0FE8                     	;# 
  1279  0FE9                     	;# 
  1280  0FEA                     	;# 
  1281  0FEB                     	;# 
  1282  0FED                     	;# 
  1283  0FEE                     	;# 
  1284  0FEF                     	;# 
  1285  0000                     	;# 
  1286  0001                     	;# 
  1287  0002                     	;# 
  1288  0003                     	;# 
  1289  0004                     	;# 
  1290  0005                     	;# 
  1291  0006                     	;# 
  1292  0007                     	;# 
  1293  0008                     	;# 
  1294  0009                     	;# 
  1295  000A                     	;# 
  1296  000B                     	;# 
  1297  000C                     	;# 
  1298  000D                     	;# 
  1299  000E                     	;# 
  1300  0010                     	;# 
  1301  0011                     	;# 
  1302  0012                     	;# 
  1303  0015                     	;# 
  1304  0016                     	;# 
  1305  0016                     	;# 
  1306  0017                     	;# 
  1307  0018                     	;# 
  1308  0019                     	;# 
  1309  001A                     	;# 
  1310  001B                     	;# 
  1311  001C                     	;# 
  1312  008C                     	;# 
  1313  008D                     	;# 
  1314  008E                     	;# 
  1315  0090                     	;# 
  1316  0091                     	;# 
  1317  0092                     	;# 
  1318  0095                     	;# 
  1319  0096                     	;# 
  1320  0097                     	;# 
  1321  0099                     	;# 
  1322  009A                     	;# 
  1323  009B                     	;# 
  1324  009B                     	;# 
  1325  009C                     	;# 
  1326  009D                     	;# 
  1327  009E                     	;# 
  1328  010C                     	;# 
  1329  010D                     	;# 
  1330  010E                     	;# 
  1331  0116                     	;# 
  1332  0117                     	;# 
  1333  011D                     	;# 
  1334  018C                     	;# 
  1335  018D                     	;# 
  1336  018E                     	;# 
  1337  0191                     	;# 
  1338  0191                     	;# 
  1339  0192                     	;# 
  1340  0193                     	;# 
  1341  0193                     	;# 
  1342  0194                     	;# 
  1343  0195                     	;# 
  1344  0196                     	;# 
  1345  0197                     	;# 
  1346  0199                     	;# 
  1347  019A                     	;# 
  1348  019B                     	;# 
  1349  019B                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019C                     	;# 
  1353  019C                     	;# 
  1354  019D                     	;# 
  1355  019E                     	;# 
  1356  019F                     	;# 
  1357  020D                     	;# 
  1358  0210                     	;# 
  1359  0211                     	;# 
  1360  0211                     	;# 
  1361  0212                     	;# 
  1362  0212                     	;# 
  1363  0213                     	;# 
  1364  0213                     	;# 
  1365  0214                     	;# 
  1366  0214                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0215                     	;# 
  1370  0216                     	;# 
  1371  0216                     	;# 
  1372  0217                     	;# 
  1373  0217                     	;# 
  1374  0291                     	;# 
  1375  0291                     	;# 
  1376  0292                     	;# 
  1377  0293                     	;# 
  1378  0298                     	;# 
  1379  0298                     	;# 
  1380  0299                     	;# 
  1381  029A                     	;# 
  1382  0394                     	;# 
  1383  0395                     	;# 
  1384  0396                     	;# 
  1385  0FE4                     	;# 
  1386  0FE5                     	;# 
  1387  0FE6                     	;# 
  1388  0FE7                     	;# 
  1389  0FE8                     	;# 
  1390  0FE9                     	;# 
  1391  0FEA                     	;# 
  1392  0FEB                     	;# 
  1393  0FED                     	;# 
  1394  0FEE                     	;# 
  1395  0FEF                     	;# 
  1396  0000                     	;# 
  1397  0001                     	;# 
  1398  0002                     	;# 
  1399  0003                     	;# 
  1400  0004                     	;# 
  1401  0005                     	;# 
  1402  0006                     	;# 
  1403  0007                     	;# 
  1404  0008                     	;# 
  1405  0009                     	;# 
  1406  000A                     	;# 
  1407  000B                     	;# 
  1408  000C                     	;# 
  1409  000D                     	;# 
  1410  000E                     	;# 
  1411  0010                     	;# 
  1412  0011                     	;# 
  1413  0012                     	;# 
  1414  0015                     	;# 
  1415  0016                     	;# 
  1416  0016                     	;# 
  1417  0017                     	;# 
  1418  0018                     	;# 
  1419  0019                     	;# 
  1420  001A                     	;# 
  1421  001B                     	;# 
  1422  001C                     	;# 
  1423  008C                     	;# 
  1424  008D                     	;# 
  1425  008E                     	;# 
  1426  0090                     	;# 
  1427  0091                     	;# 
  1428  0092                     	;# 
  1429  0095                     	;# 
  1430  0096                     	;# 
  1431  0097                     	;# 
  1432  0099                     	;# 
  1433  009A                     	;# 
  1434  009B                     	;# 
  1435  009B                     	;# 
  1436  009C                     	;# 
  1437  009D                     	;# 
  1438  009E                     	;# 
  1439  010C                     	;# 
  1440  010D                     	;# 
  1441  010E                     	;# 
  1442  0116                     	;# 
  1443  0117                     	;# 
  1444  011D                     	;# 
  1445  018C                     	;# 
  1446  018D                     	;# 
  1447  018E                     	;# 
  1448  0191                     	;# 
  1449  0191                     	;# 
  1450  0192                     	;# 
  1451  0193                     	;# 
  1452  0193                     	;# 
  1453  0194                     	;# 
  1454  0195                     	;# 
  1455  0196                     	;# 
  1456  0197                     	;# 
  1457  0199                     	;# 
  1458  019A                     	;# 
  1459  019B                     	;# 
  1460  019B                     	;# 
  1461  019B                     	;# 
  1462  019B                     	;# 
  1463  019C                     	;# 
  1464  019C                     	;# 
  1465  019D                     	;# 
  1466  019E                     	;# 
  1467  019F                     	;# 
  1468  020D                     	;# 
  1469  0210                     	;# 
  1470  0211                     	;# 
  1471  0211                     	;# 
  1472  0212                     	;# 
  1473  0212                     	;# 
  1474  0213                     	;# 
  1475  0213                     	;# 
  1476  0214                     	;# 
  1477  0214                     	;# 
  1478  0215                     	;# 
  1479  0215                     	;# 
  1480  0215                     	;# 
  1481  0216                     	;# 
  1482  0216                     	;# 
  1483  0217                     	;# 
  1484  0217                     	;# 
  1485  0291                     	;# 
  1486  0291                     	;# 
  1487  0292                     	;# 
  1488  0293                     	;# 
  1489  0298                     	;# 
  1490  0298                     	;# 
  1491  0299                     	;# 
  1492  029A                     	;# 
  1493  0394                     	;# 
  1494  0395                     	;# 
  1495  0396                     	;# 
  1496  0FE4                     	;# 
  1497  0FE5                     	;# 
  1498  0FE6                     	;# 
  1499  0FE7                     	;# 
  1500  0FE8                     	;# 
  1501  0FE9                     	;# 
  1502  0FEA                     	;# 
  1503  0FEB                     	;# 
  1504  0FED                     	;# 
  1505  0FEE                     	;# 
  1506  0FEF                     	;# 
  1507  0000                     	;# 
  1508  0001                     	;# 
  1509  0002                     	;# 
  1510  0003                     	;# 
  1511  0004                     	;# 
  1512  0005                     	;# 
  1513  0006                     	;# 
  1514  0007                     	;# 
  1515  0008                     	;# 
  1516  0009                     	;# 
  1517  000A                     	;# 
  1518  000B                     	;# 
  1519  000C                     	;# 
  1520  000D                     	;# 
  1521  000E                     	;# 
  1522  0010                     	;# 
  1523  0011                     	;# 
  1524  0012                     	;# 
  1525  0015                     	;# 
  1526  0016                     	;# 
  1527  0016                     	;# 
  1528  0017                     	;# 
  1529  0018                     	;# 
  1530  0019                     	;# 
  1531  001A                     	;# 
  1532  001B                     	;# 
  1533  001C                     	;# 
  1534  008C                     	;# 
  1535  008D                     	;# 
  1536  008E                     	;# 
  1537  0090                     	;# 
  1538  0091                     	;# 
  1539  0092                     	;# 
  1540  0095                     	;# 
  1541  0096                     	;# 
  1542  0097                     	;# 
  1543  0099                     	;# 
  1544  009A                     	;# 
  1545  009B                     	;# 
  1546  009B                     	;# 
  1547  009C                     	;# 
  1548  009D                     	;# 
  1549  009E                     	;# 
  1550  010C                     	;# 
  1551  010D                     	;# 
  1552  010E                     	;# 
  1553  0116                     	;# 
  1554  0117                     	;# 
  1555  011D                     	;# 
  1556  018C                     	;# 
  1557  018D                     	;# 
  1558  018E                     	;# 
  1559  0191                     	;# 
  1560  0191                     	;# 
  1561  0192                     	;# 
  1562  0193                     	;# 
  1563  0193                     	;# 
  1564  0194                     	;# 
  1565  0195                     	;# 
  1566  0196                     	;# 
  1567  0197                     	;# 
  1568  0199                     	;# 
  1569  019A                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019B                     	;# 
  1573  019B                     	;# 
  1574  019C                     	;# 
  1575  019C                     	;# 
  1576  019D                     	;# 
  1577  019E                     	;# 
  1578  019F                     	;# 
  1579  020D                     	;# 
  1580  0210                     	;# 
  1581  0211                     	;# 
  1582  0211                     	;# 
  1583  0212                     	;# 
  1584  0212                     	;# 
  1585  0213                     	;# 
  1586  0213                     	;# 
  1587  0214                     	;# 
  1588  0214                     	;# 
  1589  0215                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0216                     	;# 
  1593  0216                     	;# 
  1594  0217                     	;# 
  1595  0217                     	;# 
  1596  0291                     	;# 
  1597  0291                     	;# 
  1598  0292                     	;# 
  1599  0293                     	;# 
  1600  0298                     	;# 
  1601  0298                     	;# 
  1602  0299                     	;# 
  1603  029A                     	;# 
  1604  0394                     	;# 
  1605  0395                     	;# 
  1606  0396                     	;# 
  1607  0FE4                     	;# 
  1608  0FE5                     	;# 
  1609  0FE6                     	;# 
  1610  0FE7                     	;# 
  1611  0FE8                     	;# 
  1612  0FE9                     	;# 
  1613  0FEA                     	;# 
  1614  0FEB                     	;# 
  1615  0FED                     	;# 
  1616  0FEE                     	;# 
  1617  0FEF                     	;# 
  1618  0000                     	;# 
  1619  0001                     	;# 
  1620  0002                     	;# 
  1621  0003                     	;# 
  1622  0004                     	;# 
  1623  0005                     	;# 
  1624  0006                     	;# 
  1625  0007                     	;# 
  1626  0008                     	;# 
  1627  0009                     	;# 
  1628  000A                     	;# 
  1629  000B                     	;# 
  1630  000C                     	;# 
  1631  000D                     	;# 
  1632  000E                     	;# 
  1633  0010                     	;# 
  1634  0011                     	;# 
  1635  0012                     	;# 
  1636  0015                     	;# 
  1637  0016                     	;# 
  1638  0016                     	;# 
  1639  0017                     	;# 
  1640  0018                     	;# 
  1641  0019                     	;# 
  1642  001A                     	;# 
  1643  001B                     	;# 
  1644  001C                     	;# 
  1645  008C                     	;# 
  1646  008D                     	;# 
  1647  008E                     	;# 
  1648  0090                     	;# 
  1649  0091                     	;# 
  1650  0092                     	;# 
  1651  0095                     	;# 
  1652  0096                     	;# 
  1653  0097                     	;# 
  1654  0099                     	;# 
  1655  009A                     	;# 
  1656  009B                     	;# 
  1657  009B                     	;# 
  1658  009C                     	;# 
  1659  009D                     	;# 
  1660  009E                     	;# 
  1661  010C                     	;# 
  1662  010D                     	;# 
  1663  010E                     	;# 
  1664  0116                     	;# 
  1665  0117                     	;# 
  1666  011D                     	;# 
  1667  018C                     	;# 
  1668  018D                     	;# 
  1669  018E                     	;# 
  1670  0191                     	;# 
  1671  0191                     	;# 
  1672  0192                     	;# 
  1673  0193                     	;# 
  1674  0193                     	;# 
  1675  0194                     	;# 
  1676  0195                     	;# 
  1677  0196                     	;# 
  1678  0197                     	;# 
  1679  0199                     	;# 
  1680  019A                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019B                     	;# 
  1684  019B                     	;# 
  1685  019C                     	;# 
  1686  019C                     	;# 
  1687  019D                     	;# 
  1688  019E                     	;# 
  1689  019F                     	;# 
  1690  020D                     	;# 
  1691  0210                     	;# 
  1692  0211                     	;# 
  1693  0211                     	;# 
  1694  0212                     	;# 
  1695  0212                     	;# 
  1696  0213                     	;# 
  1697  0213                     	;# 
  1698  0214                     	;# 
  1699  0214                     	;# 
  1700  0215                     	;# 
  1701  0215                     	;# 
  1702  0215                     	;# 
  1703  0216                     	;# 
  1704  0216                     	;# 
  1705  0217                     	;# 
  1706  0217                     	;# 
  1707  0291                     	;# 
  1708  0291                     	;# 
  1709  0292                     	;# 
  1710  0293                     	;# 
  1711  0298                     	;# 
  1712  0298                     	;# 
  1713  0299                     	;# 
  1714  029A                     	;# 
  1715  0394                     	;# 
  1716  0395                     	;# 
  1717  0396                     	;# 
  1718  0FE4                     	;# 
  1719  0FE5                     	;# 
  1720  0FE6                     	;# 
  1721  0FE7                     	;# 
  1722  0FE8                     	;# 
  1723  0FE9                     	;# 
  1724  0FEA                     	;# 
  1725  0FEB                     	;# 
  1726  0FED                     	;# 
  1727  0FEE                     	;# 
  1728  0FEF                     	;# 
  1729  0000                     	;# 
  1730  0001                     	;# 
  1731  0002                     	;# 
  1732  0003                     	;# 
  1733  0004                     	;# 
  1734  0005                     	;# 
  1735  0006                     	;# 
  1736  0007                     	;# 
  1737  0008                     	;# 
  1738  0009                     	;# 
  1739  000A                     	;# 
  1740  000B                     	;# 
  1741  000C                     	;# 
  1742  000D                     	;# 
  1743  000E                     	;# 
  1744  0010                     	;# 
  1745  0011                     	;# 
  1746  0012                     	;# 
  1747  0015                     	;# 
  1748  0016                     	;# 
  1749  0016                     	;# 
  1750  0017                     	;# 
  1751  0018                     	;# 
  1752  0019                     	;# 
  1753  001A                     	;# 
  1754  001B                     	;# 
  1755  001C                     	;# 
  1756  008C                     	;# 
  1757  008D                     	;# 
  1758  008E                     	;# 
  1759  0090                     	;# 
  1760  0091                     	;# 
  1761  0092                     	;# 
  1762  0095                     	;# 
  1763  0096                     	;# 
  1764  0097                     	;# 
  1765  0099                     	;# 
  1766  009A                     	;# 
  1767  009B                     	;# 
  1768  009B                     	;# 
  1769  009C                     	;# 
  1770  009D                     	;# 
  1771  009E                     	;# 
  1772  010C                     	;# 
  1773  010D                     	;# 
  1774  010E                     	;# 
  1775  0116                     	;# 
  1776  0117                     	;# 
  1777  011D                     	;# 
  1778  018C                     	;# 
  1779  018D                     	;# 
  1780  018E                     	;# 
  1781  0191                     	;# 
  1782  0191                     	;# 
  1783  0192                     	;# 
  1784  0193                     	;# 
  1785  0193                     	;# 
  1786  0194                     	;# 
  1787  0195                     	;# 
  1788  0196                     	;# 
  1789  0197                     	;# 
  1790  0199                     	;# 
  1791  019A                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019C                     	;# 
  1797  019C                     	;# 
  1798  019D                     	;# 
  1799  019E                     	;# 
  1800  019F                     	;# 
  1801  020D                     	;# 
  1802  0210                     	;# 
  1803  0211                     	;# 
  1804  0211                     	;# 
  1805  0212                     	;# 
  1806  0212                     	;# 
  1807  0213                     	;# 
  1808  0213                     	;# 
  1809  0214                     	;# 
  1810  0214                     	;# 
  1811  0215                     	;# 
  1812  0215                     	;# 
  1813  0215                     	;# 
  1814  0216                     	;# 
  1815  0216                     	;# 
  1816  0217                     	;# 
  1817  0217                     	;# 
  1818  0291                     	;# 
  1819  0291                     	;# 
  1820  0292                     	;# 
  1821  0293                     	;# 
  1822  0298                     	;# 
  1823  0298                     	;# 
  1824  0299                     	;# 
  1825  029A                     	;# 
  1826  0394                     	;# 
  1827  0395                     	;# 
  1828  0396                     	;# 
  1829  0FE4                     	;# 
  1830  0FE5                     	;# 
  1831  0FE6                     	;# 
  1832  0FE7                     	;# 
  1833  0FE8                     	;# 
  1834  0FE9                     	;# 
  1835  0FEA                     	;# 
  1836  0FEB                     	;# 
  1837  0FED                     	;# 
  1838  0FEE                     	;# 
  1839  0FEF                     	;# 
  1840  0000                     	;# 
  1841  0001                     	;# 
  1842  0002                     	;# 
  1843  0003                     	;# 
  1844  0004                     	;# 
  1845  0005                     	;# 
  1846  0006                     	;# 
  1847  0007                     	;# 
  1848  0008                     	;# 
  1849  0009                     	;# 
  1850  000A                     	;# 
  1851  000B                     	;# 
  1852  000C                     	;# 
  1853  000D                     	;# 
  1854  000E                     	;# 
  1855  0010                     	;# 
  1856  0011                     	;# 
  1857  0012                     	;# 
  1858  0015                     	;# 
  1859  0016                     	;# 
  1860  0016                     	;# 
  1861  0017                     	;# 
  1862  0018                     	;# 
  1863  0019                     	;# 
  1864  001A                     	;# 
  1865  001B                     	;# 
  1866  001C                     	;# 
  1867  008C                     	;# 
  1868  008D                     	;# 
  1869  008E                     	;# 
  1870  0090                     	;# 
  1871  0091                     	;# 
  1872  0092                     	;# 
  1873  0095                     	;# 
  1874  0096                     	;# 
  1875  0097                     	;# 
  1876  0099                     	;# 
  1877  009A                     	;# 
  1878  009B                     	;# 
  1879  009B                     	;# 
  1880  009C                     	;# 
  1881  009D                     	;# 
  1882  009E                     	;# 
  1883  010C                     	;# 
  1884  010D                     	;# 
  1885  010E                     	;# 
  1886  0116                     	;# 
  1887  0117                     	;# 
  1888  011D                     	;# 
  1889  018C                     	;# 
  1890  018D                     	;# 
  1891  018E                     	;# 
  1892  0191                     	;# 
  1893  0191                     	;# 
  1894  0192                     	;# 
  1895  0193                     	;# 
  1896  0193                     	;# 
  1897  0194                     	;# 
  1898  0195                     	;# 
  1899  0196                     	;# 
  1900  0197                     	;# 
  1901  0199                     	;# 
  1902  019A                     	;# 
  1903  019B                     	;# 
  1904  019B                     	;# 
  1905  019B                     	;# 
  1906  019B                     	;# 
  1907  019C                     	;# 
  1908  019C                     	;# 
  1909  019D                     	;# 
  1910  019E                     	;# 
  1911  019F                     	;# 
  1912  020D                     	;# 
  1913  0210                     	;# 
  1914  0211                     	;# 
  1915  0211                     	;# 
  1916  0212                     	;# 
  1917  0212                     	;# 
  1918  0213                     	;# 
  1919  0213                     	;# 
  1920  0214                     	;# 
  1921  0214                     	;# 
  1922  0215                     	;# 
  1923  0215                     	;# 
  1924  0215                     	;# 
  1925  0216                     	;# 
  1926  0216                     	;# 
  1927  0217                     	;# 
  1928  0217                     	;# 
  1929  0291                     	;# 
  1930  0291                     	;# 
  1931  0292                     	;# 
  1932  0293                     	;# 
  1933  0298                     	;# 
  1934  0298                     	;# 
  1935  0299                     	;# 
  1936  029A                     	;# 
  1937  0394                     	;# 
  1938  0395                     	;# 
  1939  0396                     	;# 
  1940  0FE4                     	;# 
  1941  0FE5                     	;# 
  1942  0FE6                     	;# 
  1943  0FE7                     	;# 
  1944  0FE8                     	;# 
  1945  0FE9                     	;# 
  1946  0FEA                     	;# 
  1947  0FEB                     	;# 
  1948  0FED                     	;# 
  1949  0FEE                     	;# 
  1950  0FEF                     	;# 
  1951  0000                     	;# 
  1952  0001                     	;# 
  1953  0002                     	;# 
  1954  0003                     	;# 
  1955  0004                     	;# 
  1956  0005                     	;# 
  1957  0006                     	;# 
  1958  0007                     	;# 
  1959  0008                     	;# 
  1960  0009                     	;# 
  1961  000A                     	;# 
  1962  000B                     	;# 
  1963  000C                     	;# 
  1964  000D                     	;# 
  1965  000E                     	;# 
  1966  0010                     	;# 
  1967  0011                     	;# 
  1968  0012                     	;# 
  1969  0015                     	;# 
  1970  0016                     	;# 
  1971  0016                     	;# 
  1972  0017                     	;# 
  1973  0018                     	;# 
  1974  0019                     	;# 
  1975  001A                     	;# 
  1976  001B                     	;# 
  1977  001C                     	;# 
  1978  008C                     	;# 
  1979  008D                     	;# 
  1980  008E                     	;# 
  1981  0090                     	;# 
  1982  0091                     	;# 
  1983  0092                     	;# 
  1984  0095                     	;# 
  1985  0096                     	;# 
  1986  0097                     	;# 
  1987  0099                     	;# 
  1988  009A                     	;# 
  1989  009B                     	;# 
  1990  009B                     	;# 
  1991  009C                     	;# 
  1992  009D                     	;# 
  1993  009E                     	;# 
  1994  010C                     	;# 
  1995  010D                     	;# 
  1996  010E                     	;# 
  1997  0116                     	;# 
  1998  0117                     	;# 
  1999  011D                     	;# 
  2000  018C                     	;# 
  2001  018D                     	;# 
  2002  018E                     	;# 
  2003  0191                     	;# 
  2004  0191                     	;# 
  2005  0192                     	;# 
  2006  0193                     	;# 
  2007  0193                     	;# 
  2008  0194                     	;# 
  2009  0195                     	;# 
  2010  0196                     	;# 
  2011  0197                     	;# 
  2012  0199                     	;# 
  2013  019A                     	;# 
  2014  019B                     	;# 
  2015  019B                     	;# 
  2016  019B                     	;# 
  2017  019B                     	;# 
  2018  019C                     	;# 
  2019  019C                     	;# 
  2020  019D                     	;# 
  2021  019E                     	;# 
  2022  019F                     	;# 
  2023  020D                     	;# 
  2024  0210                     	;# 
  2025  0211                     	;# 
  2026  0211                     	;# 
  2027  0212                     	;# 
  2028  0212                     	;# 
  2029  0213                     	;# 
  2030  0213                     	;# 
  2031  0214                     	;# 
  2032  0214                     	;# 
  2033  0215                     	;# 
  2034  0215                     	;# 
  2035  0215                     	;# 
  2036  0216                     	;# 
  2037  0216                     	;# 
  2038  0217                     	;# 
  2039  0217                     	;# 
  2040  0291                     	;# 
  2041  0291                     	;# 
  2042  0292                     	;# 
  2043  0293                     	;# 
  2044  0298                     	;# 
  2045  0298                     	;# 
  2046  0299                     	;# 
  2047  029A                     	;# 
  2048  0394                     	;# 
  2049  0395                     	;# 
  2050  0396                     	;# 
  2051  0FE4                     	;# 
  2052  0FE5                     	;# 
  2053  0FE6                     	;# 
  2054  0FE7                     	;# 
  2055  0FE8                     	;# 
  2056  0FE9                     	;# 
  2057  0FEA                     	;# 
  2058  0FEB                     	;# 
  2059  0FED                     	;# 
  2060  0FEE                     	;# 
  2061  0FEF                     	;# 
  2062  0000                     	;# 
  2063  0001                     	;# 
  2064  0002                     	;# 
  2065  0003                     	;# 
  2066  0004                     	;# 
  2067  0005                     	;# 
  2068  0006                     	;# 
  2069  0007                     	;# 
  2070  0008                     	;# 
  2071  0009                     	;# 
  2072  000A                     	;# 
  2073  000B                     	;# 
  2074  000C                     	;# 
  2075  000D                     	;# 
  2076  000E                     	;# 
  2077  0010                     	;# 
  2078  0011                     	;# 
  2079  0012                     	;# 
  2080  0015                     	;# 
  2081  0016                     	;# 
  2082  0016                     	;# 
  2083  0017                     	;# 
  2084  0018                     	;# 
  2085  0019                     	;# 
  2086  001A                     	;# 
  2087  001B                     	;# 
  2088  001C                     	;# 
  2089  008C                     	;# 
  2090  008D                     	;# 
  2091  008E                     	;# 
  2092  0090                     	;# 
  2093  0091                     	;# 
  2094  0092                     	;# 
  2095  0095                     	;# 
  2096  0096                     	;# 
  2097  0097                     	;# 
  2098  0099                     	;# 
  2099  009A                     	;# 
  2100  009B                     	;# 
  2101  009B                     	;# 
  2102  009C                     	;# 
  2103  009D                     	;# 
  2104  009E                     	;# 
  2105  010C                     	;# 
  2106  010D                     	;# 
  2107  010E                     	;# 
  2108  0116                     	;# 
  2109  0117                     	;# 
  2110  011D                     	;# 
  2111  018C                     	;# 
  2112  018D                     	;# 
  2113  018E                     	;# 
  2114  0191                     	;# 
  2115  0191                     	;# 
  2116  0192                     	;# 
  2117  0193                     	;# 
  2118  0193                     	;# 
  2119  0194                     	;# 
  2120  0195                     	;# 
  2121  0196                     	;# 
  2122  0197                     	;# 
  2123  0199                     	;# 
  2124  019A                     	;# 
  2125  019B                     	;# 
  2126  019B                     	;# 
  2127  019B                     	;# 
  2128  019B                     	;# 
  2129  019C                     	;# 
  2130  019C                     	;# 
  2131  019D                     	;# 
  2132  019E                     	;# 
  2133  019F                     	;# 
  2134  020D                     	;# 
  2135  0210                     	;# 
  2136  0211                     	;# 
  2137  0211                     	;# 
  2138  0212                     	;# 
  2139  0212                     	;# 
  2140  0213                     	;# 
  2141  0213                     	;# 
  2142  0214                     	;# 
  2143  0214                     	;# 
  2144  0215                     	;# 
  2145  0215                     	;# 
  2146  0215                     	;# 
  2147  0216                     	;# 
  2148  0216                     	;# 
  2149  0217                     	;# 
  2150  0217                     	;# 
  2151  0291                     	;# 
  2152  0291                     	;# 
  2153  0292                     	;# 
  2154  0293                     	;# 
  2155  0298                     	;# 
  2156  0298                     	;# 
  2157  0299                     	;# 
  2158  029A                     	;# 
  2159  0394                     	;# 
  2160  0395                     	;# 
  2161  0396                     	;# 
  2162  0FE4                     	;# 
  2163  0FE5                     	;# 
  2164  0FE6                     	;# 
  2165  0FE7                     	;# 
  2166  0FE8                     	;# 
  2167  0FE9                     	;# 
  2168  0FEA                     	;# 
  2169  0FEB                     	;# 
  2170  0FED                     	;# 
  2171  0FEE                     	;# 
  2172  0FEF                     	;# 
  2173                           
  2174                           	psect	idataBANK4
  2175  1B8E                     __pidataBANK4:	
  2176                           
  2177                           ;initializer for __product
  2178  1B8E  3463               	retlw	99
  2179  1B8F  3402               	retlw	2
  2180  1B90  3400               	retlw	0
  2181  1B91  3400               	retlw	0
  2182  1B92  3400               	retlw	0
  2183  1B93  3400               	retlw	0
  2184  1B94  3400               	retlw	0
  2185  1B95  3400               	retlw	0
  2186  1B96  3400               	retlw	0
  2187  1B97  3400               	retlw	0
  2188  1B98  3400               	retlw	0
  2189  1B99  3400               	retlw	0
  2190  1B9A  34FF               	retlw	255
  2191  1B9B  34FF               	retlw	255
  2192  1B9C  34FF               	retlw	255
  2193  1B9D  3400               	retlw	0
  2194  1B9E  3400               	retlw	0
  2195  1B9F  3400               	retlw	0
  2196  1BA0  3400               	retlw	0
  2197  1BA1  3400               	retlw	0
  2198  1BA2  3400               	retlw	0
  2199  1BA3  3400               	retlw	0
  2200  1BA4  3400               	retlw	0
  2201  1BA5  3400               	retlw	0
  2202  1BA6  3400               	retlw	0
  2203  1BA7  3400               	retlw	0
  2204  1BA8  3400               	retlw	0
  2205  1BA9  3400               	retlw	0
  2206  1BAA  3400               	retlw	0
  2207  1BAB  3400               	retlw	0
  2208  1BAC  3400               	retlw	0
  2209  1BAD  3400               	retlw	0
  2210                           
  2211                           	psect	stringtext
  2212  1800                     __pstringtext:	
  2213  1800                     _CC2500_registers_address:	
  2214  1800  3403               	retlw	3
  2215  1801  3416               	retlw	22
  2216  1802  3417               	retlw	23
  2217  1803  341E               	retlw	30
  2218  1804  341F               	retlw	31
  2219  1805  3420               	retlw	32
  2220  1806  342A               	retlw	42
  2221  1807  342B               	retlw	43
  2222  1808  340B               	retlw	11
  2223  1809  340C               	retlw	12
  2224  180A  340D               	retlw	13
  2225  180B  340E               	retlw	14
  2226  180C  340F               	retlw	15
  2227  180D  3410               	retlw	16
  2228  180E  3411               	retlw	17
  2229  180F  3412               	retlw	18
  2230  1810  3413               	retlw	19
  2231  1811  3414               	retlw	20
  2232  1812  340A               	retlw	10
  2233  1813  3415               	retlw	21
  2234  1814  3421               	retlw	33
  2235  1815  3422               	retlw	34
  2236  1816  3418               	retlw	24
  2237  1817  3419               	retlw	25
  2238  1818  341A               	retlw	26
  2239  1819  341B               	retlw	27
  2240  181A  341C               	retlw	28
  2241  181B  341D               	retlw	29
  2242  181C  3423               	retlw	35
  2243  181D  3424               	retlw	36
  2244  181E  3425               	retlw	37
  2245  181F  3426               	retlw	38
  2246  1820  3429               	retlw	41
  2247  1821  342C               	retlw	44
  2248  1822  342D               	retlw	45
  2249  1823  342E               	retlw	46
  2250  1824  3400               	retlw	0
  2251  1825  3401               	retlw	1
  2252  1826  3402               	retlw	2
  2253  1827  3407               	retlw	7
  2254  1828  3408               	retlw	8
  2255  1829  3409               	retlw	9
  2256  182A  3406               	retlw	6
  2257  182B  3404               	retlw	4
  2258  182C  3405               	retlw	5
  2259  182D  3427               	retlw	39
  2260  182E  3428               	retlw	40
  2261  182F                     __end_of_CC2500_registers_address:	
  2262  182F                     _CC2500_rfSettings:	
  2263  182F  3407               	retlw	7
  2264  1830  3407               	retlw	7
  2265  1831  3430               	retlw	48
  2266  1832  3487               	retlw	135
  2267  1833  346B               	retlw	107
  2268  1834  34F8               	retlw	248
  2269  1835  347F               	retlw	127
  2270  1836  343F               	retlw	63
  2271  1837  3409               	retlw	9
  2272  1838  3400               	retlw	0
  2273  1839  345C               	retlw	92
  2274  183A  34A7               	retlw	167
  2275  183B  3462               	retlw	98
  2276  183C  3486               	retlw	134
  2277  183D  3483               	retlw	131
  2278  183E  3403               	retlw	3
  2279  183F  3422               	retlw	34
  2280  1840  34F8               	retlw	248
  2281  1841  3400               	retlw	0
  2282  1842  3444               	retlw	68
  2283  1843  34B6               	retlw	182
  2284  1844  3410               	retlw	16
  2285  1845  3418               	retlw	24
  2286  1846  341D               	retlw	29
  2287  1847  341C               	retlw	28
  2288  1848  34C7               	retlw	199
  2289  1849  3400               	retlw	0
  2290  184A  34B2               	retlw	178
  2291  184B  34EA               	retlw	234
  2292  184C  340A               	retlw	10
  2293  184D  3400               	retlw	0
  2294  184E  3411               	retlw	17
  2295  184F  3459               	retlw	89
  2296  1850  3488               	retlw	136
  2297  1851  3431               	retlw	49
  2298  1852  340B               	retlw	11
  2299  1853  342F               	retlw	47
  2300  1854  342E               	retlw	46
  2301  1855  3406               	retlw	6
  2302  1856  3404               	retlw	4
  2303  1857  3405               	retlw	5
  2304  1858  3400               	retlw	0
  2305  1859  3430               	retlw	48
  2306  185A  34D3               	retlw	211
  2307  185B  3491               	retlw	145
  2308  185C  3441               	retlw	65
  2309  185D  3400               	retlw	0
  2310  185E                     __end_of_CC2500_rfSettings:	
  2311  185E                     _CC2500_patable_vaule:	
  2312  185E  34FE               	retlw	254
  2313  185F  34FE               	retlw	254
  2314  1860  34FE               	retlw	254
  2315  1861  34FE               	retlw	254
  2316  1862  34FE               	retlw	254
  2317  1863  34FE               	retlw	254
  2318  1864  34FE               	retlw	254
  2319  1865  34FE               	retlw	254
  2320  1866                     __end_of_CC2500_patable_vaule:	
  2321                           
  2322                           	psect	nvBANK1
  2323  00EE                     __pnvBANK1:	
  2324  00EE                     _product:	
  2325  00EE                     	ds	1
  2326  000C                     _PORTA	set	12
  2327  000D                     _PORTB	set	13
  2328  000E                     _PORTC	set	14
  2329  0018                     _T1CON	set	24
  2330  0017                     _TMR1H	set	23
  2331  0016                     _TMR1L	set	22
  2332  005F                     _GIE	set	95
  2333  005B                     _IOCIE	set	91
  2334  0058                     _IOCIF	set	88
  2335  005E                     _PEIE	set	94
  2336  0060                     _RA0	set	96
  2337  0063                     _RA3	set	99
  2338  0064                     _RA4	set	100
  2339  0066                     _RA6	set	102
  2340  0067                     _RA7	set	103
  2341  0068                     _RB0	set	104
  2342  0069                     _RB1	set	105
  2343  006A                     _RB2	set	106
  2344  006B                     _RB3	set	107
  2345  006C                     _RB4	set	108
  2346  006D                     _RB5	set	109
  2347  0070                     _RC0	set	112
  2348  0071                     _RC1	set	113
  2349  0072                     _RC2	set	114
  2350  0074                     _RC4	set	116
  2351  0075                     _RC5	set	117
  2352  0077                     _RC7	set	119
  2353  0088                     _TMR1IF	set	136
  2354  009D                     _ADCON0	set	157
  2355  009E                     _ADCON1	set	158
  2356  009C                     _ADRESH	set	156
  2357  009B                     _ADRESL	set	155
  2358  0099                     _OSCCON	set	153
  2359  008C                     _TRISA	set	140
  2360  008D                     _TRISB	set	141
  2361  008E                     _TRISC	set	142
  2362  0097                     _WDTCON	set	151
  2363  04E9                     _GO_nDONE	set	1257
  2364  0488                     _TMR1IE	set	1160
  2365  0117                     _FVRCON	set	279
  2366  010C                     _LATA	set	268
  2367  010D                     _LATB	set	269
  2368  010E                     _LATC	set	270
  2369  018C                     _ANSELA	set	396
  2370  018D                     _ANSELB	set	397
  2371  018E                     _ANSELC	set	398
  2372  0192                     _PMADRH	set	402
  2373  0191                     _PMADRL	set	401
  2374  0196                     _PMCON2	set	406
  2375  0194                     _PMDATH	set	404
  2376  0193                     _PMDATL	set	403
  2377  0CAE                     _CFGS	set	3246
  2378  0CAC                     _FREE	set	3244
  2379  0CAD                     _LWLO	set	3245
  2380  0CA8                     _RD	set	3240
  2381  0CA9                     _WR	set	3241
  2382  0CAA                     _WREN	set	3242
  2383  020D                     _WPUB	set	525
  2384  0396                     _IOCBF	set	918
  2385  0395                     _IOCBN	set	917
  2386  0394                     _IOCBP	set	916
  2387  1CB2                     _IOCBF2	set	7346
  2388                           
  2389                           ; #config settings
  2390  0000                     
  2391                           	psect	cinit
  2392  0021                     start_initialization:	
  2393  0021                     __initialization:	
  2394                           
  2395                           ; Clear objects allocated to BITCOMMON
  2396  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2397                           
  2398                           ; Clear objects allocated to BITBANK1
  2399  0022  0021               	movlb	1	; select bank1
  2400  0023  01EF               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2401                           
  2402                           ; Clear objects allocated to BANK1
  2403  0024  30A0               	movlw	low __pbssBANK1
  2404  0025  0084               	movwf	4
  2405  0026  3000               	movlw	high __pbssBANK1
  2406  0027  0085               	movwf	5
  2407  0028  3045               	movlw	69
  2408  0029  31A6  2619  3180   	fcall	clear_ram0
  2409                           
  2410                           ; Clear objects allocated to BANK2
  2411  002C  3020               	movlw	low __pbssBANK2
  2412  002D  0084               	movwf	4
  2413  002E  3001               	movlw	high __pbssBANK2
  2414  002F  0085               	movwf	5
  2415  0030  304E               	movlw	78
  2416  0031  31A6  2619  3180   	fcall	clear_ram0
  2417                           
  2418                           ; Clear objects allocated to BANK3
  2419  0034  30A0               	movlw	low __pbssBANK3
  2420  0035  0084               	movwf	4
  2421  0036  3001               	movlw	high __pbssBANK3
  2422  0037  0085               	movwf	5
  2423  0038  304F               	movlw	79
  2424  0039  31A6  2619  3180   	fcall	clear_ram0
  2425                           
  2426                           ; Clear objects allocated to BANK4
  2427  003C  3020               	movlw	low __pbssBANK4
  2428  003D  0084               	movwf	4
  2429  003E  3002               	movlw	high __pbssBANK4
  2430  003F  0085               	movwf	5
  2431  0040  302E               	movlw	46
  2432  0041  31A6  2619  3180   	fcall	clear_ram0
  2433                           
  2434                           ; Initialize objects allocated to BANK4
  2435  0044  308E               	movlw	low __pidataBANK4
  2436  0045  0084               	movwf	4
  2437  0046  309B               	movlw	(high __pidataBANK4)| (0+128)
  2438  0047  0085               	movwf	5
  2439  0048  304E               	movlw	low __pdataBANK4
  2440  0049  0086               	movwf	6
  2441  004A  3002               	movlw	high __pdataBANK4
  2442  004B  0087               	movwf	7
  2443  004C  3020               	movlw	32
  2444  004D  31A6  2613         	fcall	init_ram
  2445  004F                     end_of_initialization:	
  2446                           ;End of C runtime variable initialization code
  2447                           
  2448  004F                     __end_of__initialization:	
  2449  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2450  0050  0020               	movlb	0
  2451  0051  3192  2A39         	ljmp	_main	;jump to C main() function
  2452                           
  2453                           	psect	bitbssCOMMON
  2454  03E8                     __pbitbssCOMMON:	
  2455  03E8                     _Transceive_OK:	
  2456  03E8                     	ds	1
  2457                           
  2458                           	psect	bitbssBANK1
  2459  0778                     __pbitbssBANK1:	
  2460  0778                     _Receive_OK:	
  2461  0778                     	ds	1
  2462                           
  2463                           	psect	bssBANK1
  2464  00A0                     __pbssBANK1:	
  2465  00A0                     _RF1:	
  2466  00A0                     	ds	15
  2467  00AF                     _myMain:	
  2468  00AF                     	ds	13
  2469  00BC                     _DimmerIntr1:	
  2470  00BC                     	ds	12
  2471  00C8                     _DimmerIntr2:	
  2472  00C8                     	ds	12
  2473  00D4                     _Sw:	
  2474  00D4                     	ds	2
  2475  00D6                     _CRC:	
  2476  00D6                     	ds	1
  2477  00D7                     _Cmd:	
  2478  00D7                     	ds	1
  2479  00D8                     _DelayOff:	
  2480  00D8                     	ds	1
  2481  00D9                     _DimmerIntr:	
  2482  00D9                     	ds	1
  2483  00DA                     _DimmerLights:	
  2484  00DA                     	ds	1
  2485  00DB                     _LED:	
  2486  00DB                     	ds	1
  2487  00DC                     _Light:	
  2488  00DC                     	ds	1
  2489  00DD                     _RSSI:	
  2490  00DD                     	ds	1
  2491  00DE                     _Rx_Length:	
  2492  00DE                     	ds	1
  2493  00DF                     _SPI0Buffer:	
  2494  00DF                     	ds	1
  2495  00E0                     _SwDetect:	
  2496  00E0                     	ds	1
  2497  00E1                     _Tx_Length:	
  2498  00E1                     	ds	1
  2499  00E2                     _r_address:	
  2500  00E2                     	ds	1
  2501  00E3                     _r_data:	
  2502  00E3                     	ds	1
  2503  00E4                     _s_data:	
  2504  00E4                     	ds	1
  2505                           
  2506                           	psect	bssBANK2
  2507  0120                     __pbssBANK2:	
  2508  0120                     _Buz1:	
  2509  0120                     	ds	12
  2510  012C                     _Dimmer:	
  2511  012C                     	ds	5
  2512  0131                     _Timer1:	
  2513  0131                     	ds	3
  2514  0134                     _RF_Count:	
  2515  0134                     	ds	2
  2516  0136                     _WDT:	
  2517  0136                     	ds	2
  2518  0138                     _Load:	
  2519  0138                     	ds	40
  2520  0160                     _Temp:	
  2521  0160                     	ds	14
  2522                           
  2523                           	psect	bssBANK3
  2524  01A0                     __pbssBANK3:	
  2525  01A0                     _RF_Data:	
  2526  01A0                     	ds	30
  2527  01BE                     _DimmerLights1:	
  2528  01BE                     	ds	9
  2529  01C7                     _DimmerLights2:	
  2530  01C7                     	ds	9
  2531  01D0                     _Sw1:	
  2532  01D0                     	ds	9
  2533  01D9                     _DlySw1:	
  2534  01D9                     	ds	5
  2535  01DE                     _DlySw2:	
  2536  01DE                     	ds	5
  2537  01E3                     _VarErrLED:	
  2538  01E3                     	ds	4
  2539  01E7                     _VarLED1:	
  2540  01E7                     	ds	4
  2541  01EB                     _VarLED2:	
  2542  01EB                     	ds	4
  2543                           
  2544                           	psect	bssBANK4
  2545  0220                     __pbssBANK4:	
  2546  0220                     _Memory:	
  2547  0220                     	ds	37
  2548  0245                     _Sw2:	
  2549  0245                     	ds	9
  2550                           
  2551                           	psect	dataBANK4
  2552  024E                     __pdataBANK4:	
  2553  024E                     __product:	
  2554  024E                     	ds	32
  2555                           
  2556                           	psect	clrtext
  2557  2619                     clear_ram0:	
  2558                           ;	Called with FSR0 containing the base address, and
  2559                           ;	WREG with the size to clear
  2560                           
  2561  2619  0064               	clrwdt	;clear the watchdog before getting into this loop
  2562  261A                     clrloop0:	
  2563  261A  0180               	clrf	0	;clear RAM location pointed to by FSR
  2564  261B  3101               	addfsr 0,1
  2565  261C  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2566  261D  2E1A               	goto	clrloop0	;have we reached the end yet?
  2567  261E  3400               	retlw	0	;all done for this memory range, return
  2568                           
  2569                           	psect	inittext
  2570  2613                     init_ram:	
  2571  2613  00FE               	movwf	126
  2572  2614                     initloop:	
  2573  2614  0012               	moviw fsr0++
  2574  2615  001E               	movwi fsr1++
  2575  2616  0BFE               	decfsz	126,f
  2576  2617  2E14               	goto	initloop
  2577  2618  3400               	retlw	0
  2578                           
  2579                           	psect	cstackBANK1
  2580  00E5                     __pcstackBANK1:	
  2581  00E5                     setDimmerLights_OnOff@lights:	
  2582  00E5                     setRFSW_Control@status:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585                           
  2586                           ; 1 bytes @ 0x0
  2587  00E5                     	ds	1
  2588  00E6                     setDimmerLights_Main@lights:	
  2589  00E6                     setRFSW_Control@rfDimming:	
  2590                           ; 1 bytes @ 0x1
  2591                           
  2592                           
  2593                           ; 1 bytes @ 0x1
  2594  00E6                     	ds	1
  2595  00E7                     setRFSW_Control@sw:	
  2596                           
  2597                           ; 1 bytes @ 0x2
  2598  00E7                     	ds	1
  2599  00E8                     ??_setRF_Main:	
  2600                           
  2601                           ; 0 bytes @ 0x3
  2602  00E8                     	ds	1
  2603  00E9                     setRF_Main@error:	
  2604                           
  2605                           ; 1 bytes @ 0x4
  2606  00E9                     	ds	1
  2607  00EA                     ?_main:	
  2608  00EA                     main@argc:	
  2609                           ; 2 bytes @ 0x5
  2610                           
  2611                           
  2612                           ; 2 bytes @ 0x5
  2613  00EA                     	ds	2
  2614  00EC                     main@argv:	
  2615                           
  2616                           ; 2 bytes @ 0x7
  2617  00EC                     	ds	2
  2618                           
  2619                           	psect	cstackCOMMON
  2620  0070                     __pcstackCOMMON:	
  2621  0070                     ?_CC2500_WriteCommand:	
  2622  0070                     ?_RF_Timeout_Counter:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_setRF_TimeoutCleared:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_CC2500_WriteByte:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_CC2500_ReadStatus:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_CC2500_ReadByte:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_CC2500_PowerRST:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_CC2500_InitSetREG:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_CC2500_InitPATable:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_CC2500_ClearTXFIFO:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_CC2500_ClearRXFIFO:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_CC2500_FrequencyCabr:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_CC2500_SIDLEMode:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_DlyOff_Initialization:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_DlyOff_Main:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_setDimmerLights_SwOn:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setDimmerLights_SwOff:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setMemory_Modify:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_setDimmerLights_Initialization:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_setDimmerLights_Main:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_DimmerLights_DimmingFunction:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setDimmerLights_Line:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_setDimmerLights_DimmingClose:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_setTxData:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setRF_TransceiveGO:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_setLED_Initialization:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_setLED_Main:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Fosc_Set:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_IO_Set:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_TMR1_Set:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_ADC_Set:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_IOC_Set:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_WDT_Set:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_TMR1_ISR:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_IOC_ISR:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_Timeout_Counter:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_set_TimeoutCleared:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Flash_Memory_Write:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_Flash_Memory_Modify:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_WDT_Clearing:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_myMain_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Temp_Initialization:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_Load_Initialization:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_Switch_Initialization:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_RF_Initialization:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_getLoad_AD:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_getTemp_AD:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_my_MainTimer:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_Temp_Main:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_Load_Main:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_Switch_Main:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_RF_Main:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_Exception_Main:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setLoad_AH_AL_Restore:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setTemp_Initialization:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_setTemp_Main:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_setOverTemp_ADV_Restore:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_setRF_Initialization:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_setRF_Main:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_RF_RxDisable:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_getRxData:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_setLog_Code:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_setControl_Lights_Table:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_setRFSW_Control:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_setRFSW_AdjControl:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_setRF_AdjControl:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_setSw_Initialization:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_setSw_Main:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_Buzzer_Initialization:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_Buzzer_Main:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_CC2500_TxData:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_CC2500_RxData:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_CC2500_PowerOnInitial:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_DelayOffPointSelect:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_DelayOff_Initialization:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_DelayOff_Main:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_DimmerIntr_Initialization:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_DimmerLights_SelectPointer:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_DimmerLights_Initialization:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_setDimmerLights_DimmingOn:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_DimmerLights_Main:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_DimmerLights_TMR_1:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ??_DimmerLights_TMR_1:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_DimmerLights_IOC_1:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_DimmerLights_TMR_2:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ??_DimmerLights_TMR_2:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_DimmerLights_IOC_2:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_LedPointSelect:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_LED_Initialization:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_LED_Main:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_Mcu_Initialization:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_ISR:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_Flash_Memory_Initialization:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0070                     ?_Flash_Memory_Main:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0070                     ?_Flash_Memory_Unlock:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0070                     ?_Flash_Memory_Erasing:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0070                     ?_setMemory_LoopSave:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0070                     ?_WDT_Main:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0070                     ?_setRF_Learn:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0070                     ?_TouchPower:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0070                     ?_SwPointSelect:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0070                     ?_getDimmerLights_Status:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0070                     ?_getDimmerLights_ValueToPercent:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_getDimmerLights_PercentToValue:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getLoad_OK:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getMain_All_Error_Status:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getMain_All_LightsStatus:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_getDimmerLights_Allow_Condition:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_getCmd_Status:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_Flash_Memory_Read:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_getAll_Sw_KeyStatus:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_getRF_KeyStatus:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_getSw_KeyStatus:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_getDelayOff_GO:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_getDimmerIntr_DimmingValue:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_getDimmerIntr_Dimming_Sw:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_getDimmerLights_Line:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_getDimmer_LoadGO:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0070                     ?_getDimmer_Load_Status:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0070                     ?_getMain_Lights_Count:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982  0070                     ?i1___lbdiv:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985  0070                     setDimmerLights_Initialization@lights:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988  0070                     i1___lbdiv@divisor:	
  2989                           ; 1 bytes @ 0x0
  2990                           
  2991                           
  2992                           ; 1 bytes @ 0x0
  2993  0070                     	ds	1
  2994  0071                     ??_TMR1_ISR:	
  2995  0071                     ??i1___lbdiv:	
  2996                           ; 0 bytes @ 0x1
  2997                           
  2998                           
  2999                           ; 0 bytes @ 0x1
  3000  0071                     	ds	1
  3001  0072                     i1___lbdiv@dividend:	
  3002                           
  3003                           ; 1 bytes @ 0x2
  3004  0072                     	ds	1
  3005  0073                     i1___lbdiv@counter:	
  3006                           
  3007                           ; 1 bytes @ 0x3
  3008  0073                     	ds	1
  3009  0074                     i1___lbdiv@quotient:	
  3010                           
  3011                           ; 1 bytes @ 0x4
  3012  0074                     	ds	1
  3013  0075                     ?i1_Division:	
  3014  0075                     i1Division@num:	
  3015                           ; 1 bytes @ 0x5
  3016                           
  3017                           
  3018                           ; 1 bytes @ 0x5
  3019  0075                     	ds	1
  3020  0076                     ??i1_Division:	
  3021                           
  3022                           ; 0 bytes @ 0x6
  3023  0076                     	ds	2
  3024  0078                     i1Division@value:	
  3025                           
  3026                           ; 1 bytes @ 0x8
  3027  0078                     	ds	1
  3028  0079                     i1Division@result:	
  3029                           
  3030                           ; 1 bytes @ 0x9
  3031  0079                     	ds	1
  3032  007A                     ??_DimmerLights_IOC_1:	
  3033  007A                     ??_DimmerLights_IOC_2:	
  3034                           ; 0 bytes @ 0xA
  3035                           
  3036                           
  3037                           ; 0 bytes @ 0xA
  3038  007A                     	ds	2
  3039  007C                     ??_IOC_ISR:	
  3040  007C                     ??_ISR:	
  3041                           ; 0 bytes @ 0xC
  3042                           
  3043                           
  3044                           ; 0 bytes @ 0xC
  3045  007C                     	ds	1
  3046                           
  3047                           	psect	cstackBANK0
  3048  0020                     __pcstackBANK0:	
  3049  0020                     ??_RF_Timeout_Counter:	
  3050  0020                     ??_setRF_TimeoutCleared:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_CC2500_WriteByte:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_CC2500_ReadByte:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ?_DelayTime_1us:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_setMemory_Modify:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ??_setDimmerLights_Initialization:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_getLoad_OK:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_getMain_All_Error_Status:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_getMain_All_LightsStatus:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_DimmerLights_DimmingFunction:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ??_setDimmerLights_Line:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_getCmd_Status:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ?_setCmd_Status:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ??_setTxData:	
  3090                           ; 0 bytes @ 0x0
  3091                           
  3092  0020                     ??_setRF_TransceiveGO:	
  3093                           ; 0 bytes @ 0x0
  3094                           
  3095  0020                     ??_Fosc_Set:	
  3096                           ; 0 bytes @ 0x0
  3097                           
  3098  0020                     ??_IO_Set:	
  3099                           ; 0 bytes @ 0x0
  3100                           
  3101  0020                     ??_TMR1_Set:	
  3102                           ; 0 bytes @ 0x0
  3103                           
  3104  0020                     ??_ADC_Set:	
  3105                           ; 0 bytes @ 0x0
  3106                           
  3107  0020                     ??_IOC_Set:	
  3108                           ; 0 bytes @ 0x0
  3109                           
  3110  0020                     ??_WDT_Set:	
  3111                           ; 0 bytes @ 0x0
  3112                           
  3113  0020                     ??_Timeout_Counter:	
  3114                           ; 0 bytes @ 0x0
  3115                           
  3116  0020                     ??_set_TimeoutCleared:	
  3117                           ; 0 bytes @ 0x0
  3118                           
  3119  0020                     ??_Flash_Memory_Read:	
  3120                           ; 0 bytes @ 0x0
  3121                           
  3122  0020                     ?_setMemory_Data:	
  3123                           ; 0 bytes @ 0x0
  3124                           
  3125  0020                     ??_Flash_Memory_Write:	
  3126                           ; 0 bytes @ 0x0
  3127                           
  3128  0020                     ??_getAll_Sw_KeyStatus:	
  3129                           ; 0 bytes @ 0x0
  3130                           
  3131  0020                     ??_WDT_Clearing:	
  3132                           ; 0 bytes @ 0x0
  3133                           
  3134  0020                     ??_myMain_Initialization:	
  3135                           ; 0 bytes @ 0x0
  3136                           
  3137  0020                     ??_Temp_Initialization:	
  3138                           ; 0 bytes @ 0x0
  3139                           
  3140  0020                     ??_setLoad_AH_AL_Restore:	
  3141                           ; 0 bytes @ 0x0
  3142                           
  3143  0020                     ??_setTemp_Initialization:	
  3144                           ; 0 bytes @ 0x0
  3145                           
  3146  0020                     ??_setOverTemp_ADV_Restore:	
  3147                           ; 0 bytes @ 0x0
  3148                           
  3149  0020                     ??_setRF_Initialization:	
  3150                           ; 0 bytes @ 0x0
  3151                           
  3152  0020                     ??_getRF_KeyStatus:	
  3153                           ; 0 bytes @ 0x0
  3154                           
  3155  0020                     ??_getSw_KeyStatus:	
  3156                           ; 0 bytes @ 0x0
  3157                           
  3158  0020                     ??_Buzzer_Initialization:	
  3159                           ; 0 bytes @ 0x0
  3160                           
  3161  0020                     ??_Buzzer_Main:	
  3162                           ; 0 bytes @ 0x0
  3163                           
  3164  0020                     ??_DelayOffPointSelect:	
  3165                           ; 0 bytes @ 0x0
  3166                           
  3167  0020                     ?_setDimmerIntr_ControlStatus:	
  3168                           ; 0 bytes @ 0x0
  3169                           
  3170  0020                     ??_getDimmerIntr_DimmingValue:	
  3171                           ; 0 bytes @ 0x0
  3172                           
  3173  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3174                           ; 0 bytes @ 0x0
  3175                           
  3176  0020                     ??_getDimmerIntr_Dimming_Sw:	
  3177                           ; 0 bytes @ 0x0
  3178                           
  3179  0020                     ?_setDimmerIntr_Dimming_RF:	
  3180                           ; 0 bytes @ 0x0
  3181                           
  3182  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3183                           ; 0 bytes @ 0x0
  3184                           
  3185  0020                     ??_DimmerLights_SelectPointer:	
  3186                           ; 0 bytes @ 0x0
  3187                           
  3188  0020                     ??_getDimmerLights_Line:	
  3189                           ; 0 bytes @ 0x0
  3190                           
  3191  0020                     ??_getDimmer_LoadGO:	
  3192                           ; 0 bytes @ 0x0
  3193                           
  3194  0020                     ??_getDimmer_Load_Status:	
  3195                           ; 0 bytes @ 0x0
  3196                           
  3197  0020                     ??_LedPointSelect:	
  3198                           ; 0 bytes @ 0x0
  3199                           
  3200  0020                     ??_Flash_Memory_Unlock:	
  3201                           ; 0 bytes @ 0x0
  3202                           
  3203  0020                     ??_Flash_Memory_Erasing:	
  3204                           ; 0 bytes @ 0x0
  3205                           
  3206  0020                     ??_setMemory_LoopSave:	
  3207                           ; 0 bytes @ 0x0
  3208                           
  3209  0020                     ??_WDT_Main:	
  3210                           ; 0 bytes @ 0x0
  3211                           
  3212  0020                     ??_getMain_Lights_Count:	
  3213                           ; 0 bytes @ 0x0
  3214                           
  3215  0020                     ??_setRF_Learn:	
  3216                           ; 0 bytes @ 0x0
  3217                           
  3218  0020                     ??_TouchPower:	
  3219                           ; 0 bytes @ 0x0
  3220                           
  3221  0020                     ??_SwPointSelect:	
  3222                           ; 0 bytes @ 0x0
  3223                           
  3224  0020                     ?___bmul:	
  3225                           ; 0 bytes @ 0x0
  3226                           
  3227  0020                     ?___lbdiv:	
  3228                           ; 1 bytes @ 0x0
  3229                           
  3230  0020                     ?_getBuz_GO:	
  3231                           ; 1 bytes @ 0x0
  3232                           
  3233  0020                     ?_getAD:	
  3234                           ; 2 bytes @ 0x0
  3235                           
  3236  0020                     ?___wmul:	
  3237                           ; 2 bytes @ 0x0
  3238                           
  3239  0020                     ?___awdiv:	
  3240                           ; 2 bytes @ 0x0
  3241                           
  3242  0020                     ?___lwdiv:	
  3243                           ; 2 bytes @ 0x0
  3244                           
  3245  0020                     ?___ftpack:	
  3246                           ; 2 bytes @ 0x0
  3247                           
  3248  0020                     setDimmerIntr_ControlStatus@command:	
  3249                           ; 3 bytes @ 0x0
  3250                           
  3251  0020                     setDimmerIntr_Dimming_Sw@command:	
  3252                           ; 1 bytes @ 0x0
  3253                           
  3254  0020                     getDimmerIntr_Dimming_Sw@status:	
  3255                           ; 1 bytes @ 0x0
  3256                           
  3257  0020                     setDimmerIntr_Dimming_RF@command:	
  3258                           ; 1 bytes @ 0x0
  3259                           
  3260  0020                     setDimmerLights_Line@lights:	
  3261                           ; 1 bytes @ 0x0
  3262                           
  3263  0020                     getDimmer_LoadGO@loadgo:	
  3264                           ; 1 bytes @ 0x0
  3265                           
  3266  0020                     getDimmer_Load_Status@status:	
  3267                           ; 1 bytes @ 0x0
  3268                           
  3269  0020                     getAD@adcon1:	
  3270                           ; 1 bytes @ 0x0
  3271                           
  3272  0020                     setMemory_Data@data:	
  3273                           ; 1 bytes @ 0x0
  3274                           
  3275  0020                     getMain_All_LightsStatus@status:	
  3276                           ; 1 bytes @ 0x0
  3277                           
  3278  0020                     getMain_Lights_Count@count:	
  3279                           ; 1 bytes @ 0x0
  3280                           
  3281  0020                     setCmd_Status@cmd:	
  3282                           ; 1 bytes @ 0x0
  3283                           
  3284  0020                     getCmd_Status@number:	
  3285                           ; 1 bytes @ 0x0
  3286                           
  3287  0020                     getLoad_OK@ok:	
  3288                           ; 1 bytes @ 0x0
  3289                           
  3290  0020                     SwPointSelect@sw:	
  3291                           ; 1 bytes @ 0x0
  3292                           
  3293  0020                     ___bmul@multiplicand:	
  3294                           ; 1 bytes @ 0x0
  3295                           
  3296  0020                     ___lbdiv@divisor:	
  3297                           ; 1 bytes @ 0x0
  3298                           
  3299  0020                     DelayTime_1us@count:	
  3300                           ; 1 bytes @ 0x0
  3301                           
  3302  0020                     ___wmul@multiplier:	
  3303                           ; 2 bytes @ 0x0
  3304                           
  3305  0020                     ___awdiv@divisor:	
  3306                           ; 2 bytes @ 0x0
  3307                           
  3308  0020                     ___lwdiv@divisor:	
  3309                           ; 2 bytes @ 0x0
  3310                           
  3311  0020                     ___ftpack@arg:	
  3312                           ; 2 bytes @ 0x0
  3313                           
  3314                           
  3315                           ; 3 bytes @ 0x0
  3316  0020                     	ds	1
  3317  0021                     ??_getDimmerLights_Allow_Condition:	
  3318  0021                     ??_setCmd_Status:	
  3319                           ; 0 bytes @ 0x1
  3320                           
  3321  0021                     ??_setMemory_Data:	
  3322                           ; 0 bytes @ 0x1
  3323                           
  3324  0021                     ??_RF_Initialization:	
  3325                           ; 0 bytes @ 0x1
  3326                           
  3327  0021                     ??_setDimmerIntr_ControlStatus:	
  3328                           ; 0 bytes @ 0x1
  3329                           
  3330  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3331                           ; 0 bytes @ 0x1
  3332                           
  3333  0021                     ??_setDimmerIntr_Dimming_RF:	
  3334                           ; 0 bytes @ 0x1
  3335                           
  3336  0021                     ??_Mcu_Initialization:	
  3337                           ; 0 bytes @ 0x1
  3338                           
  3339  0021                     ??___bmul:	
  3340                           ; 0 bytes @ 0x1
  3341                           
  3342  0021                     ??___lbdiv:	
  3343                           ; 0 bytes @ 0x1
  3344                           
  3345  0021                     CC2500_WriteByte@loop_a:	
  3346                           ; 0 bytes @ 0x1
  3347                           
  3348  0021                     CC2500_ReadByte@loop_b:	
  3349                           ; 1 bytes @ 0x1
  3350                           
  3351  0021                     DelayOffPointSelect@sw:	
  3352                           ; 1 bytes @ 0x1
  3353                           
  3354  0021                     getDimmerIntr_DimmingValue@value:	
  3355                           ; 1 bytes @ 0x1
  3356                           
  3357  0021                     getDimmerIntr_Dimming_Sw@lights:	
  3358                           ; 1 bytes @ 0x1
  3359                           
  3360  0021                     _getAll_DimmerIntr_Dimming_Sw_RF$2387:	
  3361                           ; 1 bytes @ 0x1
  3362                           
  3363  0021                     DimmerLights_SelectPointer@lights:	
  3364                           ; 1 bytes @ 0x1
  3365                           
  3366  0021                     getDimmerLights_Line@line:	
  3367                           ; 1 bytes @ 0x1
  3368                           
  3369  0021                     DimmerLights_DimmingFunction@lights:	
  3370                           ; 1 bytes @ 0x1
  3371                           
  3372  0021                     LedPointSelect@led:	
  3373                           ; 1 bytes @ 0x1
  3374                           
  3375  0021                     Flash_Memory_Read@i:	
  3376                           ; 1 bytes @ 0x1
  3377                           
  3378  0021                     Flash_Memory_Write@i:	
  3379                           ; 1 bytes @ 0x1
  3380                           
  3381  0021                     setMemory_Modify@command:	
  3382                           ; 1 bytes @ 0x1
  3383                           
  3384  0021                     setMemory_LoopSave@command:	
  3385                           ; 1 bytes @ 0x1
  3386                           
  3387  0021                     getMain_Lights_Count@status1:	
  3388                           ; 1 bytes @ 0x1
  3389                           
  3390  0021                     getCmd_Status@cmd:	
  3391                           ; 1 bytes @ 0x1
  3392                           
  3393  0021                     setLoad_AH_AL_Restore@i:	
  3394                           ; 1 bytes @ 0x1
  3395                           
  3396  0021                     setRF_Learn@command:	
  3397                           ; 1 bytes @ 0x1
  3398                           
  3399  0021                     getRF_KeyStatus@key:	
  3400                           ; 1 bytes @ 0x1
  3401                           
  3402  0021                     setRF_TransceiveGO@command:	
  3403                           ; 1 bytes @ 0x1
  3404                           
  3405  0021                     _getSw_KeyStatus$6887:	
  3406                           ; 1 bytes @ 0x1
  3407                           
  3408  0021                     getAll_Sw_KeyStatus@status:	
  3409                           ; 1 bytes @ 0x1
  3410                           
  3411  0021                     _getMain_All_Error_Status$3917:	
  3412                           ; 1 bytes @ 0x1
  3413                           
  3414  0021                     setOverTemp_ADV_Restore@i:	
  3415                           ; 2 bytes @ 0x1
  3416                           
  3417                           
  3418                           ; 2 bytes @ 0x1
  3419  0021                     	ds	1
  3420  0022                     ??_CC2500_WriteCommand:	
  3421  0022                     ??_CC2500_ReadStatus:	
  3422                           ; 0 bytes @ 0x2
  3423                           
  3424  0022                     ??_DelayTime_1us:	
  3425                           ; 0 bytes @ 0x2
  3426                           
  3427  0022                     ?_CC2500_WriteREG:	
  3428                           ; 0 bytes @ 0x2
  3429                           
  3430  0022                     ??_DlyOff_Initialization:	
  3431                           ; 0 bytes @ 0x2
  3432                           
  3433  0022                     ??_getDimmerLights_Status:	
  3434                           ; 0 bytes @ 0x2
  3435                           
  3436  0022                     ??_setDimmerLights_SwOff:	
  3437                           ; 0 bytes @ 0x2
  3438                           
  3439  0022                     ?_setLED:	
  3440                           ; 0 bytes @ 0x2
  3441                           
  3442  0022                     ??_setLED_Main:	
  3443                           ; 0 bytes @ 0x2
  3444                           
  3445  0022                     ??_Load_Initialization:	
  3446                           ; 0 bytes @ 0x2
  3447                           
  3448  0022                     ??_getBuz_GO:	
  3449                           ; 0 bytes @ 0x2
  3450                           
  3451  0022                     ??_getDelayOff_GO:	
  3452                           ; 0 bytes @ 0x2
  3453                           
  3454  0022                     ??_setDimmerLights_DimmingOn:	
  3455                           ; 0 bytes @ 0x2
  3456                           
  3457  0022                     ?_setDimmerLights_DimmingRun:	
  3458                           ; 0 bytes @ 0x2
  3459                           
  3460  0022                     CC2500_WriteREG@value:	
  3461                           ; 0 bytes @ 0x2
  3462                           
  3463  0022                     DlyOff_Initialization@sw:	
  3464                           ; 1 bytes @ 0x2
  3465                           
  3466  0022                     getDelayOff_GO@sw:	
  3467                           ; 1 bytes @ 0x2
  3468                           
  3469  0022                     setDimmerIntr_ControlStatus@lights:	
  3470                           ; 1 bytes @ 0x2
  3471                           
  3472  0022                     getDimmerIntr_DimmingValue@lights:	
  3473                           ; 1 bytes @ 0x2
  3474                           
  3475  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3476                           ; 1 bytes @ 0x2
  3477                           
  3478  0022                     setDimmerIntr_Dimming_RF@lights:	
  3479                           ; 1 bytes @ 0x2
  3480                           
  3481  0022                     _getAll_DimmerIntr_Dimming_Sw_RF$2388:	
  3482                           ; 1 bytes @ 0x2
  3483                           
  3484  0022                     setDimmerLights_SwOff@sw:	
  3485                           ; 1 bytes @ 0x2
  3486                           
  3487  0022                     setDimmerLights_DimmingOn@sw:	
  3488                           ; 1 bytes @ 0x2
  3489                           
  3490  0022                     _getDimmerLights_Allow_Condition$2527:	
  3491                           ; 1 bytes @ 0x2
  3492                           
  3493  0022                     getDimmerLights_Status@lights:	
  3494                           ; 1 bytes @ 0x2
  3495                           
  3496  0022                     setDimmerLights_DimmingRun@command:	
  3497                           ; 1 bytes @ 0x2
  3498                           
  3499  0022                     setLED@command:	
  3500                           ; 1 bytes @ 0x2
  3501                           
  3502  0022                     Flash_Memory_Read@address:	
  3503                           ; 1 bytes @ 0x2
  3504                           
  3505  0022                     setMemory_Data@address:	
  3506                           ; 1 bytes @ 0x2
  3507                           
  3508  0022                     getMain_Lights_Count@status2:	
  3509                           ; 1 bytes @ 0x2
  3510                           
  3511  0022                     setCmd_Status@number:	
  3512                           ; 1 bytes @ 0x2
  3513                           
  3514  0022                     _getRF_KeyStatus$5789:	
  3515                           ; 1 bytes @ 0x2
  3516                           
  3517  0022                     _getSw_KeyStatus$6888:	
  3518                           ; 1 bytes @ 0x2
  3519                           
  3520  0022                     _getAll_Sw_KeyStatus$6891:	
  3521                           ; 1 bytes @ 0x2
  3522                           
  3523  0022                     ___bmul@product:	
  3524                           ; 1 bytes @ 0x2
  3525                           
  3526  0022                     ___lbdiv@dividend:	
  3527                           ; 1 bytes @ 0x2
  3528                           
  3529  0022                     DelayTime_1us@i:	
  3530                           ; 1 bytes @ 0x2
  3531                           
  3532  0022                     ___wmul@multiplicand:	
  3533                           ; 2 bytes @ 0x2
  3534                           
  3535  0022                     ___awdiv@dividend:	
  3536                           ; 2 bytes @ 0x2
  3537                           
  3538  0022                     ___lwdiv@dividend:	
  3539                           ; 2 bytes @ 0x2
  3540                           
  3541                           
  3542                           ; 2 bytes @ 0x2
  3543  0022                     	ds	1
  3544  0023                     ??_CC2500_WriteREG:	
  3545  0023                     ??_setLED:	
  3546                           ; 0 bytes @ 0x3
  3547                           
  3548  0023                     ??_setDimmerLights_DimmingClose:	
  3549                           ; 0 bytes @ 0x3
  3550                           
  3551  0023                     ??_DelayOff_Initialization:	
  3552                           ; 0 bytes @ 0x3
  3553                           
  3554  0023                     ??_setDimmerLights_DimmingRun:	
  3555                           ; 0 bytes @ 0x3
  3556                           
  3557  0023                     ??_getAD:	
  3558                           ; 0 bytes @ 0x3
  3559                           
  3560  0023                     CC2500_WriteCommand@command:	
  3561                           ; 0 bytes @ 0x3
  3562                           
  3563  0023                     CC2500_ReadStatus@status_addr:	
  3564                           ; 1 bytes @ 0x3
  3565                           
  3566  0023                     getDelayOff_GO@go:	
  3567                           ; 1 bytes @ 0x3
  3568                           
  3569  0023                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3570                           ; 1 bytes @ 0x3
  3571                           
  3572  0023                     _getDimmerLights_Allow_Condition$2528:	
  3573                           ; 1 bytes @ 0x3
  3574                           
  3575  0023                     getDimmerLights_Status@status:	
  3576                           ; 1 bytes @ 0x3
  3577                           
  3578  0023                     setLED@led:	
  3579                           ; 1 bytes @ 0x3
  3580                           
  3581  0023                     getAD@adcon0:	
  3582                           ; 1 bytes @ 0x3
  3583                           
  3584  0023                     Flash_Memory_Read@ret:	
  3585                           ; 1 bytes @ 0x3
  3586                           
  3587  0023                     getSw_KeyStatus@status:	
  3588                           ; 1 bytes @ 0x3
  3589                           
  3590  0023                     ___bmul@multiplier:	
  3591                           ; 1 bytes @ 0x3
  3592                           
  3593  0023                     ___ftpack@exp:	
  3594                           ; 1 bytes @ 0x3
  3595                           
  3596  0023                     ___lbdiv@counter:	
  3597                           ; 1 bytes @ 0x3
  3598                           
  3599  0023                     _getMain_All_Error_Status$3918:	
  3600                           ; 1 bytes @ 0x3
  3601                           
  3602                           
  3603                           ; 2 bytes @ 0x3
  3604  0023                     	ds	1
  3605  0024                     ??_CC2500_ClearTXFIFO:	
  3606  0024                     ??_CC2500_ClearRXFIFO:	
  3607                           ; 0 bytes @ 0x4
  3608                           
  3609  0024                     ??_CC2500_SIDLEMode:	
  3610                           ; 0 bytes @ 0x4
  3611                           
  3612  0024                     ??_setLED_Initialization:	
  3613                           ; 0 bytes @ 0x4
  3614                           
  3615  0024                     ??_Flash_Memory_Modify:	
  3616                           ; 0 bytes @ 0x4
  3617                           
  3618  0024                     ??_getLoad_AD:	
  3619                           ; 0 bytes @ 0x4
  3620                           
  3621  0024                     ??_getTemp_AD:	
  3622                           ; 0 bytes @ 0x4
  3623                           
  3624  0024                     ??_RF_RxDisable:	
  3625                           ; 0 bytes @ 0x4
  3626                           
  3627  0024                     ??_setRF_AdjControl:	
  3628                           ; 0 bytes @ 0x4
  3629                           
  3630  0024                     ??_setSw_Initialization:	
  3631                           ; 0 bytes @ 0x4
  3632                           
  3633  0024                     ??_CC2500_TxData:	
  3634                           ; 0 bytes @ 0x4
  3635                           
  3636  0024                     ??_CC2500_RxData:	
  3637                           ; 0 bytes @ 0x4
  3638                           
  3639  0024                     ??_Flash_Memory_Initialization:	
  3640                           ; 0 bytes @ 0x4
  3641                           
  3642  0024                     ??___wmul:	
  3643                           ; 0 bytes @ 0x4
  3644                           
  3645  0024                     ??___awdiv:	
  3646                           ; 0 bytes @ 0x4
  3647                           
  3648  0024                     ??___lwdiv:	
  3649                           ; 0 bytes @ 0x4
  3650                           
  3651  0024                     CC2500_WriteREG@w_addr:	
  3652                           ; 0 bytes @ 0x4
  3653                           
  3654  0024                     _getDimmerLights_Allow_Condition$2529:	
  3655                           ; 1 bytes @ 0x4
  3656                           
  3657  0024                     setDimmerLights_DimmingRun@lights:	
  3658                           ; 1 bytes @ 0x4
  3659                           
  3660  0024                     setLED_Initialization@led:	
  3661                           ; 1 bytes @ 0x4
  3662                           
  3663  0024                     setLED_Main@led:	
  3664                           ; 1 bytes @ 0x4
  3665                           
  3666  0024                     setSw_Initialization@sw:	
  3667                           ; 1 bytes @ 0x4
  3668                           
  3669  0024                     getSw_KeyStatus@sw:	
  3670                           ; 1 bytes @ 0x4
  3671                           
  3672  0024                     ___ftpack@sign:	
  3673                           ; 1 bytes @ 0x4
  3674                           
  3675  0024                     ___lbdiv@quotient:	
  3676                           ; 1 bytes @ 0x4
  3677                           
  3678  0024                     getBuz_GO@i:	
  3679                           ; 1 bytes @ 0x4
  3680                           
  3681  0024                     DelayTime_1us@j:	
  3682                           ; 2 bytes @ 0x4
  3683                           
  3684  0024                     ___wmul@product:	
  3685                           ; 2 bytes @ 0x4
  3686                           
  3687                           
  3688                           ; 2 bytes @ 0x4
  3689  0024                     	ds	1
  3690  0025                     ??_CC2500_InitSetREG:	
  3691  0025                     ??_CC2500_InitPATable:	
  3692                           ; 0 bytes @ 0x5
  3693                           
  3694  0025                     ??_Switch_Initialization:	
  3695                           ; 0 bytes @ 0x5
  3696                           
  3697  0025                     ??___ftpack:	
  3698                           ; 0 bytes @ 0x5
  3699                           
  3700  0025                     ??_LED_Initialization:	
  3701                           ; 0 bytes @ 0x5
  3702                           
  3703  0025                     ??_LED_Main:	
  3704                           ; 0 bytes @ 0x5
  3705                           
  3706  0025                     ?_Division:	
  3707                           ; 0 bytes @ 0x5
  3708                           
  3709  0025                     CC2500_TxData@loop_e:	
  3710                           ; 1 bytes @ 0x5
  3711                           
  3712  0025                     CC2500_RxData@loop_f:	
  3713                           ; 1 bytes @ 0x5
  3714                           
  3715  0025                     getDimmerLights_Allow_Condition@lights:	
  3716                           ; 1 bytes @ 0x5
  3717                           
  3718  0025                     Division@num:	
  3719                           ; 1 bytes @ 0x5
  3720                           
  3721  0025                     Flash_Memory_Initialization@value:	
  3722                           ; 1 bytes @ 0x5
  3723                           
  3724  0025                     Flash_Memory_Modify@i:	
  3725                           ; 1 bytes @ 0x5
  3726                           
  3727  0025                     getMain_All_Error_Status@command:	
  3728                           ; 1 bytes @ 0x5
  3729                           
  3730  0025                     getTemp_AD@channel:	
  3731                           ; 1 bytes @ 0x5
  3732                           
  3733  0025                     setRF_AdjControl@status:	
  3734                           ; 1 bytes @ 0x5
  3735                           
  3736  0025                     ___awdiv@counter:	
  3737                           ; 1 bytes @ 0x5
  3738                           
  3739  0025                     ___lwdiv@quotient:	
  3740                           ; 1 bytes @ 0x5
  3741                           
  3742                           
  3743                           ; 2 bytes @ 0x5
  3744  0025                     	ds	1
  3745  0026                     ??_CC2500_PowerRST:	
  3746  0026                     ??_CC2500_FrequencyCabr:	
  3747                           ; 0 bytes @ 0x6
  3748                           
  3749  0026                     ??_Division:	
  3750                           ; 0 bytes @ 0x6
  3751                           
  3752  0026                     ??_Flash_Memory_Main:	
  3753                           ; 0 bytes @ 0x6
  3754                           
  3755  0026                     CC2500_InitSetREG@temp1:	
  3756                           ; 0 bytes @ 0x6
  3757                           
  3758  0026                     CC2500_InitPATable@temp:	
  3759                           ; 1 bytes @ 0x6
  3760                           
  3761  0026                     getDimmerLights_Allow_Condition@allow:	
  3762                           ; 1 bytes @ 0x6
  3763                           
  3764  0026                     getMain_All_Error_Status@status:	
  3765                           ; 1 bytes @ 0x6
  3766                           
  3767  0026                     getLoad_AD@channel:	
  3768                           ; 1 bytes @ 0x6
  3769                           
  3770  0026                     setRF_AdjControl@dimmingStatus:	
  3771                           ; 1 bytes @ 0x6
  3772                           
  3773  0026                     ___awdiv@sign:	
  3774                           ; 1 bytes @ 0x6
  3775                           
  3776  0026                     getTemp_AD@ADRES:	
  3777                           ; 1 bytes @ 0x6
  3778                           
  3779                           
  3780                           ; 2 bytes @ 0x6
  3781  0026                     	ds	1
  3782  0027                     CC2500_InitSetREG@temp2:	
  3783  0027                     CC2500_InitPATable@loop_d:	
  3784                           ; 1 bytes @ 0x7
  3785                           
  3786  0027                     Flash_Memory_Main@key_Status:	
  3787                           ; 1 bytes @ 0x7
  3788                           
  3789  0027                     getLoad_AD@k:	
  3790                           ; 1 bytes @ 0x7
  3791                           
  3792  0027                     setRF_AdjControl@sw:	
  3793                           ; 1 bytes @ 0x7
  3794                           
  3795  0027                     ___lwdiv@counter:	
  3796                           ; 1 bytes @ 0x7
  3797                           
  3798  0027                     ___awdiv@quotient:	
  3799                           ; 1 bytes @ 0x7
  3800                           
  3801                           
  3802                           ; 2 bytes @ 0x7
  3803  0027                     	ds	1
  3804  0028                     ?___awtoft:	
  3805  0028                     CC2500_InitSetREG@loop_c:	
  3806                           ; 3 bytes @ 0x8
  3807                           
  3808  0028                     Division@value:	
  3809                           ; 1 bytes @ 0x8
  3810                           
  3811  0028                     _Flash_Memory_Main$3441:	
  3812                           ; 1 bytes @ 0x8
  3813                           
  3814  0028                     getLoad_AD@j:	
  3815                           ; 1 bytes @ 0x8
  3816                           
  3817  0028                     ___awtoft@c:	
  3818                           ; 1 bytes @ 0x8
  3819                           
  3820                           
  3821                           ; 2 bytes @ 0x8
  3822  0028                     	ds	1
  3823  0029                     ?_setBuz:	
  3824  0029                     ??_CC2500_PowerOnInitial:	
  3825                           ; 0 bytes @ 0x9
  3826                           
  3827  0029                     Division@result:	
  3828                           ; 0 bytes @ 0x9
  3829                           
  3830  0029                     setBuz@time:	
  3831                           ; 1 bytes @ 0x9
  3832                           
  3833  0029                     getLoad_AD@ADRES:	
  3834                           ; 2 bytes @ 0x9
  3835                           
  3836                           
  3837                           ; 2 bytes @ 0x9
  3838  0029                     	ds	2
  3839  002B                     ??_setBuz:	
  3840  002B                     ??___awtoft:	
  3841                           ; 0 bytes @ 0xB
  3842                           
  3843  002B                     getLoad_AD@i:	
  3844                           ; 0 bytes @ 0xB
  3845                           
  3846                           
  3847                           ; 1 bytes @ 0xB
  3848  002B                     	ds	1
  3849  002C                     setBuz@count:	
  3850                           
  3851                           ; 1 bytes @ 0xC
  3852  002C                     	ds	1
  3853  002D                     ??_setDimmerLights_SwOn:	
  3854  002D                     ??_my_MainTimer:	
  3855                           ; 0 bytes @ 0xD
  3856                           
  3857  002D                     ??_Exception_Main:	
  3858                           ; 0 bytes @ 0xD
  3859                           
  3860  002D                     ___awtoft@sign:	
  3861                           ; 0 bytes @ 0xD
  3862                           
  3863                           
  3864                           ; 1 bytes @ 0xD
  3865  002D                     	ds	1
  3866  002E                     ?___ftdiv:	
  3867  002E                     ?___ftmul:	
  3868                           ; 3 bytes @ 0xE
  3869                           
  3870  002E                     setDimmerLights_SwOn@dimmingStatus:	
  3871                           ; 3 bytes @ 0xE
  3872                           
  3873  002E                     Exception_Main@status:	
  3874                           ; 1 bytes @ 0xE
  3875                           
  3876  002E                     ___ftdiv@f2:	
  3877                           ; 1 bytes @ 0xE
  3878                           
  3879  002E                     ___ftmul@f1:	
  3880                           ; 3 bytes @ 0xE
  3881                           
  3882                           
  3883                           ; 3 bytes @ 0xE
  3884  002E                     	ds	1
  3885  002F                     _setDimmerLights_SwOn$2441:	
  3886  002F                     Exception_Main@count:	
  3887                           ; 1 bytes @ 0xF
  3888                           
  3889                           
  3890                           ; 1 bytes @ 0xF
  3891  002F                     	ds	1
  3892  0030                     _setDimmerLights_SwOn$2450:	
  3893  0030                     Exception_Main@error:	
  3894                           ; 1 bytes @ 0x10
  3895                           
  3896                           
  3897                           ; 1 bytes @ 0x10
  3898  0030                     	ds	1
  3899  0031                     setDimmerLights_SwOn@idle:	
  3900  0031                     Exception_Main@i:	
  3901                           ; 1 bytes @ 0x11
  3902                           
  3903  0031                     ___ftdiv@f1:	
  3904                           ; 2 bytes @ 0x11
  3905                           
  3906  0031                     ___ftmul@f2:	
  3907                           ; 3 bytes @ 0x11
  3908                           
  3909                           
  3910                           ; 3 bytes @ 0x11
  3911  0031                     	ds	1
  3912  0032                     setDimmerLights_SwOn@sw:	
  3913                           
  3914                           ; 1 bytes @ 0x12
  3915  0032                     	ds	1
  3916  0033                     ??_setSw_Main:	
  3917  0033                     Exception_Main@i_3930:	
  3918                           ; 0 bytes @ 0x13
  3919                           
  3920                           
  3921                           ; 2 bytes @ 0x13
  3922  0033                     	ds	1
  3923  0034                     ??___ftdiv:	
  3924  0034                     ??___ftmul:	
  3925                           ; 0 bytes @ 0x14
  3926                           
  3927                           
  3928                           ; 0 bytes @ 0x14
  3929  0034                     	ds	1
  3930  0035                     Exception_Main@lights:	
  3931  0035                     setSw_Main@sw:	
  3932                           ; 1 bytes @ 0x15
  3933                           
  3934                           
  3935                           ; 1 bytes @ 0x15
  3936  0035                     	ds	1
  3937  0036                     ??_Switch_Main:	
  3938                           
  3939                           ; 0 bytes @ 0x16
  3940  0036                     	ds	2
  3941  0038                     ___ftdiv@cntr:	
  3942  0038                     ___ftmul@exp:	
  3943                           ; 1 bytes @ 0x18
  3944                           
  3945                           
  3946                           ; 1 bytes @ 0x18
  3947  0038                     	ds	1
  3948  0039                     ___ftdiv@f3:	
  3949  0039                     ___ftmul@f3_as_product:	
  3950                           ; 3 bytes @ 0x19
  3951                           
  3952                           
  3953                           ; 3 bytes @ 0x19
  3954  0039                     	ds	3
  3955  003C                     ___ftdiv@exp:	
  3956  003C                     ___ftmul@cntr:	
  3957                           ; 1 bytes @ 0x1C
  3958                           
  3959                           
  3960                           ; 1 bytes @ 0x1C
  3961  003C                     	ds	1
  3962  003D                     ___ftdiv@sign:	
  3963  003D                     ___ftmul@sign:	
  3964                           ; 1 bytes @ 0x1D
  3965                           
  3966                           
  3967                           ; 1 bytes @ 0x1D
  3968  003D                     	ds	1
  3969  003E                     ?___ftneg:	
  3970  003E                     ___ftneg@f1:	
  3971                           ; 3 bytes @ 0x1E
  3972                           
  3973                           
  3974                           ; 3 bytes @ 0x1E
  3975  003E                     	ds	3
  3976  0041                     ??___ftneg:	
  3977  0041                     ?___ftadd:	
  3978                           ; 0 bytes @ 0x21
  3979                           
  3980  0041                     ___ftadd@f1:	
  3981                           ; 3 bytes @ 0x21
  3982                           
  3983                           
  3984                           ; 3 bytes @ 0x21
  3985  0041                     	ds	3
  3986  0044                     ___ftadd@f2:	
  3987                           
  3988                           ; 3 bytes @ 0x24
  3989  0044                     	ds	3
  3990  0047                     ??___ftadd:	
  3991                           
  3992                           ; 0 bytes @ 0x27
  3993  0047                     	ds	4
  3994  004B                     ___ftadd@sign:	
  3995                           
  3996                           ; 1 bytes @ 0x2B
  3997  004B                     	ds	1
  3998  004C                     ___ftadd@exp2:	
  3999                           
  4000                           ; 1 bytes @ 0x2C
  4001  004C                     	ds	1
  4002  004D                     ___ftadd@exp1:	
  4003                           
  4004                           ; 1 bytes @ 0x2D
  4005  004D                     	ds	1
  4006  004E                     ?___fttol:	
  4007  004E                     ___fttol@f1:	
  4008                           ; 4 bytes @ 0x2E
  4009                           
  4010                           
  4011                           ; 3 bytes @ 0x2E
  4012  004E                     	ds	4
  4013  0052                     ??___fttol:	
  4014                           
  4015                           ; 0 bytes @ 0x32
  4016  0052                     	ds	4
  4017  0056                     ___fttol@sign1:	
  4018                           
  4019                           ; 1 bytes @ 0x36
  4020  0056                     	ds	1
  4021  0057                     ___fttol@lval:	
  4022                           
  4023                           ; 4 bytes @ 0x37
  4024  0057                     	ds	4
  4025  005B                     ___fttol@exp1:	
  4026                           
  4027                           ; 1 bytes @ 0x3B
  4028  005B                     	ds	1
  4029  005C                     ??_getDimmerLights_ValueToPercent:	
  4030  005C                     ??_getDimmerLights_PercentToValue:	
  4031                           ; 0 bytes @ 0x3C
  4032                           
  4033                           
  4034                           ; 0 bytes @ 0x3C
  4035  005C                     	ds	2
  4036  005E                     getDimmerLights_PercentToValue@value:	
  4037  005E                     getDimmerLights_ValueToPercent@value:	
  4038                           ; 1 bytes @ 0x3E
  4039                           
  4040                           
  4041                           ; 1 bytes @ 0x3E
  4042  005E                     	ds	1
  4043  005F                     getDimmerLights_PercentToValue@i:	
  4044  005F                     getDimmerLights_ValueToPercent@i:	
  4045                           ; 3 bytes @ 0x3F
  4046                           
  4047                           
  4048                           ; 3 bytes @ 0x3F
  4049  005F                     	ds	3
  4050  0062                     ?_setProductData:	
  4051  0062                     ??_DimmerIntr_Initialization:	
  4052                           ; 0 bytes @ 0x42
  4053                           
  4054  0062                     ?_setDimmerIntr_DimmingValue:	
  4055                           ; 0 bytes @ 0x42
  4056                           
  4057  0062                     ?_setDimmerIntr_MaxmumValue:	
  4058                           ; 0 bytes @ 0x42
  4059                           
  4060  0062                     setDimmerIntr_DimmingValue@value:	
  4061                           ; 0 bytes @ 0x42
  4062                           
  4063  0062                     setDimmerIntr_MaxmumValue@value:	
  4064                           ; 1 bytes @ 0x42
  4065                           
  4066  0062                     setProductData@value:	
  4067                           ; 1 bytes @ 0x42
  4068                           
  4069                           
  4070                           ; 1 bytes @ 0x42
  4071  0062                     	ds	1
  4072  0063                     ??_setProductData:	
  4073  0063                     ??_setDimmerIntr_DimmingValue:	
  4074                           ; 0 bytes @ 0x43
  4075                           
  4076  0063                     ??_setDimmerIntr_MaxmumValue:	
  4077                           ; 0 bytes @ 0x43
  4078                           
  4079                           
  4080                           ; 0 bytes @ 0x43
  4081  0063                     	ds	1
  4082  0064                     ??_DimmerLights_Initialization:	
  4083  0064                     setDimmerIntr_DimmingValue@lights:	
  4084                           ; 0 bytes @ 0x44
  4085                           
  4086  0064                     setDimmerIntr_MaxmumValue@lights:	
  4087                           ; 1 bytes @ 0x44
  4088                           
  4089  0064                     setProductData@address:	
  4090                           ; 1 bytes @ 0x44
  4091                           
  4092                           
  4093                           ; 1 bytes @ 0x44
  4094  0064                     	ds	1
  4095  0065                     ??_DlyOff_Main:	
  4096  0065                     ?_setRF_DimmerLights:	
  4097                           ; 0 bytes @ 0x45
  4098                           
  4099  0065                     ??_Load_Main:	
  4100                           ; 0 bytes @ 0x45
  4101                           
  4102  0065                     ??_setTemp_Main:	
  4103                           ; 0 bytes @ 0x45
  4104                           
  4105  0065                     ??_setLog_Code:	
  4106                           ; 0 bytes @ 0x45
  4107                           
  4108  0065                     ??_setRFSW_AdjControl:	
  4109                           ; 0 bytes @ 0x45
  4110                           
  4111  0065                     ?_setDelayOff_GO:	
  4112                           ; 0 bytes @ 0x45
  4113                           
  4114  0065                     setDelayOff_GO@command:	
  4115                           ; 0 bytes @ 0x45
  4116                           
  4117  0065                     setRF_DimmerLights@on:	
  4118                           ; 1 bytes @ 0x45
  4119                           
  4120                           
  4121                           ; 1 bytes @ 0x45
  4122  0065                     	ds	1
  4123  0066                     ??_setRF_DimmerLights:	
  4124  0066                     setDelayOff_GO@value:	
  4125                           ; 0 bytes @ 0x46
  4126                           
  4127                           
  4128                           ; 1 bytes @ 0x46
  4129  0066                     	ds	1
  4130  0067                     ??_setDelayOff_GO:	
  4131  0067                     DlyOff_Main@sw:	
  4132                           ; 0 bytes @ 0x47
  4133                           
  4134  0067                     setTemp_Main@error:	
  4135                           ; 1 bytes @ 0x47
  4136                           
  4137  0067                     setRFSW_AdjControl@status:	
  4138                           ; 1 bytes @ 0x47
  4139                           
  4140  0067                     _Load_Main$4309:	
  4141                           ; 1 bytes @ 0x47
  4142                           
  4143                           
  4144                           ; 2 bytes @ 0x47
  4145  0067                     	ds	1
  4146  0068                     ??_DelayOff_Main:	
  4147  0068                     setRFSW_AdjControl@sw:	
  4148                           ; 0 bytes @ 0x48
  4149                           
  4150  0068                     setRF_DimmerLights@status:	
  4151                           ; 1 bytes @ 0x48
  4152                           
  4153  0068                     setTemp_Main@SafeValue:	
  4154                           ; 1 bytes @ 0x48
  4155                           
  4156                           
  4157                           ; 2 bytes @ 0x48
  4158  0068                     	ds	1
  4159  0069                     setDelayOff_GO@i:	
  4160  0069                     Load_Main@error:	
  4161                           ; 1 bytes @ 0x49
  4162                           
  4163  0069                     setRF_DimmerLights@lights:	
  4164                           ; 1 bytes @ 0x49
  4165                           
  4166                           
  4167                           ; 1 bytes @ 0x49
  4168  0069                     	ds	1
  4169  006A                     ?_setDimmerLights_Dimming:	
  4170  006A                     setDelayOff_GO@j:	
  4171                           ; 0 bytes @ 0x4A
  4172                           
  4173  006A                     setDimmerLights_Dimming@status:	
  4174                           ; 1 bytes @ 0x4A
  4175                           
  4176  006A                     Load_Main@ErrorCountValue:	
  4177                           ; 1 bytes @ 0x4A
  4178                           
  4179  006A                     setTemp_Main@DangerValue:	
  4180                           ; 1 bytes @ 0x4A
  4181                           
  4182                           
  4183                           ; 2 bytes @ 0x4A
  4184  006A                     	ds	1
  4185  006B                     ??_setDimmerLights_Dimming:	
  4186  006B                     setDelayOff_GO@k:	
  4187                           ; 0 bytes @ 0x4B
  4188                           
  4189  006B                     Load_Main@Load_RunStatus:	
  4190                           ; 1 bytes @ 0x4B
  4191                           
  4192                           
  4193                           ; 1 bytes @ 0x4B
  4194  006B                     	ds	1
  4195  006C                     setDelayOff_GO@sw:	
  4196  006C                     setDimmerLights_Dimming@value:	
  4197                           ; 1 bytes @ 0x4C
  4198                           
  4199  006C                     setTemp_Main@TempGO:	
  4200                           ; 1 bytes @ 0x4C
  4201                           
  4202  006C                     Load_Main@i:	
  4203                           ; 1 bytes @ 0x4C
  4204                           
  4205                           
  4206                           ; 2 bytes @ 0x4C
  4207  006C                     	ds	1
  4208  006D                     ?_setDimmerLights_OnOff:	
  4209  006D                     ??_setRFSW_Control:	
  4210                           ; 0 bytes @ 0x4D
  4211                           
  4212  006D                     setDimmerLights_OnOff@command:	
  4213                           ; 0 bytes @ 0x4D
  4214                           
  4215  006D                     setDimmerLights_Dimming@lights:	
  4216                           ; 1 bytes @ 0x4D
  4217                           
  4218  006D                     setTemp_Main@AD:	
  4219                           ; 1 bytes @ 0x4D
  4220                           
  4221                           
  4222                           ; 2 bytes @ 0x4D
  4223  006D                     	ds	1
  4224  006E                     ??_setDimmerLights_OnOff:	
  4225  006E                     ??_getRxData:	
  4226                           ; 0 bytes @ 0x4E
  4227                           
  4228  006E                     ??_setControl_Lights_Table:	
  4229                           ; 0 bytes @ 0x4E
  4230                           
  4231  006E                     Load_Main@LightsCount:	
  4232                           ; 0 bytes @ 0x4E
  4233                           
  4234                           
  4235                           ; 1 bytes @ 0x4E
  4236  006E                     	ds	1
  4237  006F                     ??_Temp_Main:	
  4238  006F                     getRxData@error:	
  4239                           ; 0 bytes @ 0x4F
  4240                           
  4241                           
  4242                           ; 1 bytes @ 0x4F
  4243  006F                     	ds	1
  4244  0070                     ??_setDimmerLights_Main:	
  4245  0070                     ??_RF_Main:	
  4246                           ; 0 bytes @ 0x50
  4247                           
  4248  0070                     ??_DimmerLights_Main:	
  4249                           ; 0 bytes @ 0x50
  4250                           
  4251  0070                     ??_main:	
  4252                           ; 0 bytes @ 0x50
  4253                           
  4254                           
  4255                           	psect	maintext
  4256  1239                     __pmaintext:	
  4257                           ; 0 bytes @ 0x50
  4258 ;;
  4259 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4260 ;;
  4261 ;; *************** function _main *****************
  4262 ;; Defined at:
  4263 ;;		line 7 in file "../src/Main_B1.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;  argc            2    5[BANK1 ] int 
  4266 ;;  argv            2    7[BANK1 ] PTR PTR unsigned char 
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;		None
  4269 ;; Return value:  Size  Location     Type
  4270 ;;                  2    5[BANK1 ] int 
  4271 ;; Registers used:
  4272 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4273 ;; Tracked objects:
  4274 ;;		On entry : 17F/0
  4275 ;;		On exit  : 0/0
  4276 ;;		Unchanged: 0/0
  4277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4278 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4281 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4282 ;;Total ram usage:        4 bytes
  4283 ;; Hardware stack levels required when called:   13
  4284 ;; This function calls:
  4285 ;;		_Buzzer_Initialization
  4286 ;;		_Buzzer_Main
  4287 ;;		_CC2500_PowerOnInitial
  4288 ;;		_DelayOff_Initialization
  4289 ;;		_DelayOff_Main
  4290 ;;		_DimmerLights_Initialization
  4291 ;;		_DimmerLights_Main
  4292 ;;		_Exception_Main
  4293 ;;		_Flash_Memory_Initialization
  4294 ;;		_Flash_Memory_Main
  4295 ;;		_LED_Initialization
  4296 ;;		_LED_Main
  4297 ;;		_Load_Initialization
  4298 ;;		_Load_Main
  4299 ;;		_Mcu_Initialization
  4300 ;;		_RF_Initialization
  4301 ;;		_RF_Main
  4302 ;;		_Switch_Initialization
  4303 ;;		_Switch_Main
  4304 ;;		_Temp_Initialization
  4305 ;;		_Temp_Main
  4306 ;;		_WDT_Main
  4307 ;;		_getLoad_AD
  4308 ;;		_getTemp_AD
  4309 ;;		_myMain_Initialization
  4310 ;;		_my_MainTimer
  4311 ;; This function is called by:
  4312 ;;		Startup code after reset
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           
  4317                           ;psect for function _main
  4318  1239                     _main:	
  4319                           
  4320                           ;Main_B1.c: 8: myMain_Initialization();
  4321                           
  4322                           ;incstack = 0
  4323                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4324  1239  3198  20C7  3192   	fcall	_myMain_Initialization
  4325                           
  4326                           ;Main_B1.c: 9: Mcu_Initialization();
  4327  123C  31A7  27DC  3192   	fcall	_Mcu_Initialization
  4328                           
  4329                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4330  123F  318E  2662  3192   	fcall	_Flash_Memory_Initialization
  4331                           
  4332                           ;Main_B1.c: 11: LED_Initialization();
  4333  1242  31A6  26D8  3192   	fcall	_LED_Initialization
  4334                           
  4335                           ;Main_B1.c: 12: Buzzer_Initialization();
  4336  1245  31A5  25E2  3192   	fcall	_Buzzer_Initialization
  4337                           
  4338                           ;Main_B1.c: 14: ;;
  4339                           ;Main_B1.c: 15: Temp_Initialization();
  4340  1248  31A5  25EE  3192   	fcall	_Temp_Initialization
  4341                           
  4342                           ;Main_B1.c: 16: Load_Initialization();
  4343  124B  31A5  25E5  3192   	fcall	_Load_Initialization
  4344                           
  4345                           ;Main_B1.c: 17: ;;
  4346                           ;Main_B1.c: 18: DelayOff_Initialization();
  4347  124E  31A6  2626  3192   	fcall	_DelayOff_Initialization
  4348                           
  4349                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4350  1251  31A6  2670  3192   	fcall	_DimmerLights_Initialization
  4351                           
  4352                           ;Main_B1.c: 21: ;;
  4353                           ;Main_B1.c: 22: ;;
  4354                           ;Main_B1.c: 23: ;;
  4355                           ;Main_B1.c: 24: Switch_Initialization();
  4356  1254  31A6  2656  3192   	fcall	_Switch_Initialization
  4357                           
  4358                           ;Main_B1.c: 25: RF_Initialization();
  4359  1257  31A5  25E8  3192   	fcall	_RF_Initialization
  4360                           
  4361                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4362  125A  3199  2103  3192   	fcall	_CC2500_PowerOnInitial
  4363  125D                     l10393:	
  4364                           ;Main_B1.c: 27: ;;
  4365                           ;Main_B1.c: 28: ;;
  4366                           ;Main_B1.c: 30: while (1) {
  4367                           
  4368                           
  4369                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4370  125D  0021               	movlb	1	; select bank1
  4371  125E  1C2F               	btfss	_myMain^(0+128),0
  4372  125F  2A68               	goto	l10397
  4373                           
  4374                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4375  1260  3005               	movlw	5
  4376  1261  3196  269A  3192   	fcall	_getLoad_AD
  4377                           
  4378                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4379  1264  3009               	movlw	9
  4380  1265  318A  226C  3192   	fcall	_getTemp_AD
  4381  1268                     l10397:	
  4382                           
  4383                           ;Main_B1.c: 57: }
  4384                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4385  1268  0022               	movlb	2	; select bank2
  4386  1269  1C31               	btfss	_Timer1^(0+256),0
  4387  126A  2A5D               	goto	l10393
  4388                           
  4389                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4390  126B  1031               	bcf	_Timer1^(0+256),0
  4391                           
  4392                           ;Main_B1.c: 96: my_MainTimer();
  4393  126C  3190  20B3  3192   	fcall	_my_MainTimer
  4394                           
  4395                           ;Main_B1.c: 97: WDT_Main();
  4396  126F  31A7  27EE  3192   	fcall	_WDT_Main
  4397                           
  4398                           ;Main_B1.c: 98: ;;
  4399                           ;Main_B1.c: 99: ;;
  4400                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4401  1272  0021               	movlb	1	; select bank1
  4402  1273  1C2F               	btfss	_myMain^(0+128),0
  4403  1274  2A5D               	goto	l10393
  4404                           
  4405                           ;Main_B1.c: 101: Flash_Memory_Main();
  4406  1275  3190  2031  3192   	fcall	_Flash_Memory_Main
  4407                           
  4408                           ;Main_B1.c: 103: LED_Main();
  4409  1278  31A6  26E4  3192   	fcall	_LED_Main
  4410                           
  4411                           ;Main_B1.c: 104: Buzzer_Main();
  4412  127B  3187  27B6  3192   	fcall	_Buzzer_Main
  4413                           
  4414                           ;Main_B1.c: 106: ;;
  4415                           ;Main_B1.c: 107: Temp_Main();
  4416  127E  31A5  25F1  3192   	fcall	_Temp_Main
  4417                           
  4418                           ;Main_B1.c: 108: Load_Main();
  4419  1281  3180  2053  3192   	fcall	_Load_Main
  4420                           
  4421                           ;Main_B1.c: 109: ;;
  4422                           ;Main_B1.c: 111: ;;
  4423                           ;Main_B1.c: 112: DimmerLights_Main();
  4424  1284  319C  24C4  3192   	fcall	_DimmerLights_Main
  4425                           
  4426                           ;Main_B1.c: 113: Switch_Main();
  4427  1287  31A6  2691  3192   	fcall	_Switch_Main
  4428                           
  4429                           ;Main_B1.c: 114: ;;
  4430                           ;Main_B1.c: 115: ;;
  4431                           ;Main_B1.c: 117: RF_Main();
  4432  128A  31A5  25EB  3192   	fcall	_RF_Main
  4433                           
  4434                           ;Main_B1.c: 118: DelayOff_Main();
  4435  128D  31A6  262E  3192   	fcall	_DelayOff_Main
  4436                           
  4437                           ;Main_B1.c: 119: ;;
  4438                           ;Main_B1.c: 120: ;;
  4439                           ;Main_B1.c: 121: Exception_Main();
  4440  1290  3186  260A  3192   	fcall	_Exception_Main
  4441  1293  2A5D               	goto	l10393
  4442  1294                     __end_of_main:	
  4443                           ;Main_B1.c: 128: }
  4444                           ;Main_B1.c: 129: }
  4445                           ;Main_B1.c: 163: }
  4446                           ;Main_B1.c: 164: return (0);
  4447                           ;	Return value of _main is never used
  4448                           
  4449                           
  4450                           	psect	text1
  4451  10B3                     __ptext1:	
  4452 ;; *************** function _my_MainTimer *****************
  4453 ;; Defined at:
  4454 ;;		line 185 in file "../src/Main_B1.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;		None
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;		None
  4459 ;; Return value:  Size  Location     Type
  4460 ;;		None               void
  4461 ;; Registers used:
  4462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4471 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;Total ram usage:        1 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    7
  4475 ;; This function calls:
  4476 ;;		_setBuz
  4477 ;;		_setTxData
  4478 ;; This function is called by:
  4479 ;;		_main
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           
  4484                           ;psect for function _my_MainTimer
  4485  10B3                     _my_MainTimer:	
  4486                           
  4487                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  4488                           
  4489                           ;incstack = 0
  4490                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4491  10B3  0021               	movlb	1	; select bank1
  4492  10B4  182F               	btfsc	_myMain^(0+128),0
  4493  10B5  28CD               	goto	l9219
  4494                           
  4495                           ;Main_B1.c: 188: myMain.PowerCount++;
  4496  10B6  3001               	movlw	1
  4497  10B7  0020               	movlb	0	; select bank0
  4498  10B8  00AD               	movwf	??_my_MainTimer
  4499  10B9  082D               	movf	??_my_MainTimer,w
  4500  10BA  0021               	movlb	1	; select bank1
  4501  10BB  07B0               	addwf	(_myMain^(0+128)+1),f
  4502                           
  4503                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4504  10BC  0830               	movf	(_myMain^(0+128)+1),w
  4505  10BD  3A4B               	xorlw	75
  4506  10BE  1D03               	skipz
  4507  10BF  0008               	return
  4508                           
  4509                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  4510  10C0  01B0               	clrf	(_myMain^(0+128)+1)
  4511                           
  4512                           ;Main_B1.c: 191: myMain.PowerON = 1;
  4513  10C1  142F               	bsf	_myMain^(0+128),0
  4514                           
  4515                           ;Main_B1.c: 196: setBuz(3, 50);
  4516  10C2  3032               	movlw	50
  4517  10C3  0020               	movlb	0	; select bank0
  4518  10C4  00A9               	movwf	setBuz@time
  4519  10C5  3000               	movlw	0
  4520  10C6  00AA               	movwf	setBuz@time+1
  4521  10C7  3003               	movlw	3
  4522  10C8  3191  21E0         	fcall	_setBuz
  4523                           
  4524                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  4525  10CA  0021               	movlb	1	; select bank1
  4526  10CB  162F               	bsf	_myMain^(0+128),4
  4527                           
  4528                           ;Main_B1.c: 206: }
  4529                           ;Main_B1.c: 207: } else {
  4530  10CC  0008               	return
  4531  10CD                     l9219:	
  4532                           
  4533                           ;Main_B1.c: 208: myMain.PowerCount++;
  4534  10CD  3001               	movlw	1
  4535  10CE  0020               	movlb	0	; select bank0
  4536  10CF  00AD               	movwf	??_my_MainTimer
  4537  10D0  082D               	movf	??_my_MainTimer,w
  4538  10D1  0021               	movlb	1	; select bank1
  4539  10D2  07B0               	addwf	(_myMain^(0+128)+1),f
  4540                           
  4541                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4542  10D3  0830               	movf	(_myMain^(0+128)+1),w
  4543  10D4  3A32               	xorlw	50
  4544  10D5  1D03               	skipz
  4545  10D6  28DB               	goto	l9227
  4546                           
  4547                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  4548  10D7  01B0               	clrf	(_myMain^(0+128)+1)
  4549                           
  4550                           ;Main_B1.c: 222: setTxData();
  4551  10D8  318D  25A7  3190   	fcall	_setTxData
  4552  10DB                     l9227:	
  4553                           
  4554                           ;Main_B1.c: 226: }
  4555                           ;Main_B1.c: 228: myMain.Count1++;
  4556  10DB  3001               	movlw	1
  4557  10DC  0021               	movlb	1	; select bank1
  4558  10DD  07B3               	addwf	(_myMain^(0+128)+4),f
  4559  10DE  3000               	movlw	0
  4560  10DF  3DB4               	addwfc	((_myMain+1)^(0+128)+4),f
  4561                           
  4562                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4563  10E0  3004               	movlw	4
  4564  10E1  3EAF               	addlw	_myMain& (0+255)
  4565  10E2  0086               	movwf	6
  4566  10E3  0187               	clrf	7
  4567  10E4  3F40               	moviw [0]fsr1
  4568  10E5  3A32               	xorlw	50
  4569  10E6  1D03               	skipz
  4570  10E7  28EA               	goto	u9955
  4571  10E8  3F41               	moviw [1]fsr1
  4572  10E9  3A00               	xorlw	0
  4573  10EA                     u9955:	
  4574  10EA  1D03               	skipz
  4575  10EB  0008               	return
  4576                           
  4577                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4578  10EC  01B3               	clrf	(_myMain^(0+128)+4)
  4579  10ED  01B4               	clrf	((_myMain+1)^(0+128)+4)
  4580                           
  4581                           ;Main_B1.c: 242: if (myMain.Flag) {
  4582  10EE  1CAF               	btfss	_myMain^(0+128),1
  4583  10EF  28F2               	goto	l1693
  4584                           
  4585                           ;Main_B1.c: 243: myMain.Flag = 0;
  4586  10F0  10AF               	bcf	_myMain^(0+128),1
  4587                           
  4588                           ;Main_B1.c: 252: } else {
  4589  10F1  0008               	return
  4590  10F2                     l1693:	
  4591                           
  4592                           ;Main_B1.c: 253: myMain.Flag = 1;
  4593  10F2  14AF               	bsf	_myMain^(0+128),1
  4594  10F3  0008               	return
  4595  10F4                     __end_of_my_MainTimer:	
  4596                           
  4597                           	psect	text2
  4598  18C7                     __ptext2:	
  4599 ;; *************** function _myMain_Initialization *****************
  4600 ;; Defined at:
  4601 ;;		line 170 in file "../src/Main_B1.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;		None
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;		None
  4606 ;; Return value:  Size  Location     Type
  4607 ;;		None               void
  4608 ;; Registers used:
  4609 ;;		wreg, fsr1l, fsr1h
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4617 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4619 ;;Total ram usage:        1 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    5
  4622 ;; This function calls:
  4623 ;;		Nothing
  4624 ;; This function is called by:
  4625 ;;		_main
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           
  4630                           ;psect for function _myMain_Initialization
  4631  18C7                     _myMain_Initialization:	
  4632                           
  4633                           ;Main_B1.c: 173: product = &_product;
  4634                           
  4635                           ;incstack = 0
  4636                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4637  18C7  304E               	movlw	__product& (0+255)
  4638  18C8  0020               	movlb	0	; select bank0
  4639  18C9  00A0               	movwf	??_myMain_Initialization
  4640  18CA  0820               	movf	??_myMain_Initialization,w
  4641  18CB  0021               	movlb	1	; select bank1
  4642  18CC  00EE               	movwf	_product^(0+128)
  4643                           
  4644                           ;Main_B1.c: 174: product->Data[20] = 210;
  4645  18CD  30D2               	movlw	210
  4646  18CE  0020               	movlb	0	; select bank0
  4647  18CF  00A0               	movwf	??_myMain_Initialization
  4648  18D0  0021               	movlb	1	; select bank1
  4649  18D1  086E               	movf	_product^(0+128),w
  4650  18D2  3E14               	addlw	20
  4651  18D3  0086               	movwf	6
  4652  18D4  3002               	movlw	2	; select bank4/5
  4653  18D5  0087               	movwf	7
  4654  18D6  0020               	movlb	0	; select bank0
  4655  18D7  0820               	movf	??_myMain_Initialization,w
  4656  18D8  0081               	movwf	1
  4657  18D9  0008               	return
  4658  18DA                     __end_of_myMain_Initialization:	
  4659                           
  4660                           	psect	text3
  4661  0A6C                     __ptext3:	
  4662 ;; *************** function _getTemp_AD *****************
  4663 ;; Defined at:
  4664 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;  channel         1    wreg     unsigned char 
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;  channel         1    5[BANK0 ] unsigned char 
  4669 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4670 ;; Return value:  Size  Location     Type
  4671 ;;		None               void
  4672 ;; Registers used:
  4673 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4681 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4682 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4683 ;;Total ram usage:        4 bytes
  4684 ;; Hardware stack levels used:    1
  4685 ;; Hardware stack levels required when called:    7
  4686 ;; This function calls:
  4687 ;;		_getAD
  4688 ;; This function is called by:
  4689 ;;		_main
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           
  4694                           ;psect for function _getTemp_AD
  4695  0A6C                     _getTemp_AD:	
  4696                           
  4697                           ;incstack = 0
  4698                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4699                           ;getTemp_AD@channel stored from wreg
  4700  0A6C  0020               	movlb	0	; select bank0
  4701  0A6D  00A5               	movwf	getTemp_AD@channel
  4702                           
  4703                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4704  0A6E  01A6               	clrf	getTemp_AD@ADRES
  4705  0A6F  01A7               	clrf	getTemp_AD@ADRES+1
  4706                           
  4707                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4708  0A70  0022               	movlb	2	; select bank2
  4709  0A71  1D60               	btfss	_Temp^(0+256),2
  4710  0A72  0008               	return
  4711                           
  4712                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4713  0A73  30F0               	movlw	240
  4714  0A74  0020               	movlb	0	; select bank0
  4715  0A75  00A4               	movwf	??_getTemp_AD
  4716  0A76  0824               	movf	??_getTemp_AD,w
  4717  0A77  00A0               	movwf	getAD@adcon1
  4718  0A78  0825               	movf	getTemp_AD@channel,w
  4719  0A79  319B  236E  318A   	fcall	_getAD
  4720  0A7C  0020               	movlb	0	; select bank0
  4721  0A7D  0821               	movf	?_getAD+1,w
  4722  0A7E  01A7               	clrf	getTemp_AD@ADRES+1
  4723  0A7F  07A7               	addwf	getTemp_AD@ADRES+1,f
  4724  0A80  0820               	movf	?_getAD,w
  4725  0A81  01A6               	clrf	getTemp_AD@ADRES
  4726  0A82  07A6               	addwf	getTemp_AD@ADRES,f
  4727                           
  4728                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4729  0A83  0827               	movf	getTemp_AD@ADRES+1,w
  4730  0A84  0426               	iorwf	getTemp_AD@ADRES,w
  4731  0A85  1903               	skipnz
  4732  0A86  0008               	return
  4733                           
  4734                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4735  0A87  0827               	movf	getTemp_AD@ADRES+1,w
  4736  0A88  0022               	movlb	2	; select bank2
  4737  0A89  0265               	subwf	((_Temp+1)^(0+256)+4),w
  4738  0A8A  1D03               	skipz
  4739  0A8B  2A90               	goto	u9875
  4740  0A8C  0020               	movlb	0	; select bank0
  4741  0A8D  0826               	movf	getTemp_AD@ADRES,w
  4742  0A8E  0022               	movlb	2	; select bank2
  4743  0A8F  0264               	subwf	(_Temp^(0+256)+4),w
  4744  0A90                     u9875:	
  4745  0A90  1803               	skipnc
  4746  0A91  2A9D               	goto	l9189
  4747                           
  4748                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4749  0A92  0020               	movlb	0	; select bank0
  4750  0A93  0827               	movf	getTemp_AD@ADRES+1,w
  4751  0A94  0022               	movlb	2	; select bank2
  4752  0A95  01E5               	clrf	((_Temp+1)^(0+256)+4)
  4753  0A96  07E5               	addwf	((_Temp+1)^(0+256)+4),f
  4754  0A97  0020               	movlb	0	; select bank0
  4755  0A98  0826               	movf	getTemp_AD@ADRES,w
  4756  0A99  0022               	movlb	2	; select bank2
  4757  0A9A  01E4               	clrf	(_Temp^(0+256)+4)
  4758  0A9B  07E4               	addwf	(_Temp^(0+256)+4),f
  4759                           
  4760                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4761  0A9C  0008               	return
  4762  0A9D                     l9189:	
  4763  0A9D  0020               	movlb	0	; select bank0
  4764  0A9E  0827               	movf	getTemp_AD@ADRES+1,w
  4765  0A9F  0022               	movlb	2	; select bank2
  4766  0AA0  0267               	subwf	((_Temp+1)^(0+256)+6),w
  4767  0AA1  1D03               	skipz
  4768  0AA2  2AA7               	goto	u9885
  4769  0AA3  0020               	movlb	0	; select bank0
  4770  0AA4  0826               	movf	getTemp_AD@ADRES,w
  4771  0AA5  0022               	movlb	2	; select bank2
  4772  0AA6  0266               	subwf	(_Temp^(0+256)+6),w
  4773  0AA7                     u9885:	
  4774  0AA7  1803               	skipnc
  4775  0AA8  2AB4               	goto	l9193
  4776                           
  4777                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4778  0AA9  0020               	movlb	0	; select bank0
  4779  0AAA  0827               	movf	getTemp_AD@ADRES+1,w
  4780  0AAB  0022               	movlb	2	; select bank2
  4781  0AAC  01E7               	clrf	((_Temp+1)^(0+256)+6)
  4782  0AAD  07E7               	addwf	((_Temp+1)^(0+256)+6),f
  4783  0AAE  0020               	movlb	0	; select bank0
  4784  0AAF  0826               	movf	getTemp_AD@ADRES,w
  4785  0AB0  0022               	movlb	2	; select bank2
  4786  0AB1  01E6               	clrf	(_Temp^(0+256)+6)
  4787  0AB2  07E6               	addwf	(_Temp^(0+256)+6),f
  4788                           
  4789                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4790  0AB3  0008               	return
  4791  0AB4                     l9193:	
  4792  0AB4  0020               	movlb	0	; select bank0
  4793  0AB5  0827               	movf	getTemp_AD@ADRES+1,w
  4794  0AB6  0022               	movlb	2	; select bank2
  4795  0AB7  0269               	subwf	((_Temp+1)^(0+256)+8),w
  4796  0AB8  1D03               	skipz
  4797  0AB9  2ABE               	goto	u9895
  4798  0ABA  0020               	movlb	0	; select bank0
  4799  0ABB  0826               	movf	getTemp_AD@ADRES,w
  4800  0ABC  0022               	movlb	2	; select bank2
  4801  0ABD  0268               	subwf	(_Temp^(0+256)+8),w
  4802  0ABE                     u9895:	
  4803  0ABE  1803               	skipnc
  4804  0ABF  2ACB               	goto	l9197
  4805                           
  4806                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4807  0AC0  0020               	movlb	0	; select bank0
  4808  0AC1  0827               	movf	getTemp_AD@ADRES+1,w
  4809  0AC2  0022               	movlb	2	; select bank2
  4810  0AC3  01E9               	clrf	((_Temp+1)^(0+256)+8)
  4811  0AC4  07E9               	addwf	((_Temp+1)^(0+256)+8),f
  4812  0AC5  0020               	movlb	0	; select bank0
  4813  0AC6  0826               	movf	getTemp_AD@ADRES,w
  4814  0AC7  0022               	movlb	2	; select bank2
  4815  0AC8  01E8               	clrf	(_Temp^(0+256)+8)
  4816  0AC9  07E8               	addwf	(_Temp^(0+256)+8),f
  4817                           
  4818                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4819  0ACA  0008               	return
  4820  0ACB                     l9197:	
  4821  0ACB  0020               	movlb	0	; select bank0
  4822  0ACC  0827               	movf	getTemp_AD@ADRES+1,w
  4823  0ACD  0022               	movlb	2	; select bank2
  4824  0ACE  026B               	subwf	((_Temp+1)^(0+256)+10),w
  4825  0ACF  1D03               	skipz
  4826  0AD0  2AD5               	goto	u9905
  4827  0AD1  0020               	movlb	0	; select bank0
  4828  0AD2  0826               	movf	getTemp_AD@ADRES,w
  4829  0AD3  0022               	movlb	2	; select bank2
  4830  0AD4  026A               	subwf	(_Temp^(0+256)+10),w
  4831  0AD5                     u9905:	
  4832  0AD5  1803               	skipnc
  4833  0AD6  2AE2               	goto	l9201
  4834                           
  4835                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4836  0AD7  0020               	movlb	0	; select bank0
  4837  0AD8  0827               	movf	getTemp_AD@ADRES+1,w
  4838  0AD9  0022               	movlb	2	; select bank2
  4839  0ADA  01EB               	clrf	((_Temp+1)^(0+256)+10)
  4840  0ADB  07EB               	addwf	((_Temp+1)^(0+256)+10),f
  4841  0ADC  0020               	movlb	0	; select bank0
  4842  0ADD  0826               	movf	getTemp_AD@ADRES,w
  4843  0ADE  0022               	movlb	2	; select bank2
  4844  0ADF  01EA               	clrf	(_Temp^(0+256)+10)
  4845  0AE0  07EA               	addwf	(_Temp^(0+256)+10),f
  4846                           
  4847                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4848  0AE1  0008               	return
  4849  0AE2                     l9201:	
  4850  0AE2  0020               	movlb	0	; select bank0
  4851  0AE3  0827               	movf	getTemp_AD@ADRES+1,w
  4852  0AE4  0022               	movlb	2	; select bank2
  4853  0AE5  026D               	subwf	((_Temp+1)^(0+256)+12),w
  4854  0AE6  1D03               	skipz
  4855  0AE7  2AEC               	goto	u9915
  4856  0AE8  0020               	movlb	0	; select bank0
  4857  0AE9  0826               	movf	getTemp_AD@ADRES,w
  4858  0AEA  0022               	movlb	2	; select bank2
  4859  0AEB  026C               	subwf	(_Temp^(0+256)+12),w
  4860  0AEC                     u9915:	
  4861  0AEC  1803               	skipnc
  4862  0AED  0008               	return
  4863                           
  4864                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4865  0AEE  0020               	movlb	0	; select bank0
  4866  0AEF  0827               	movf	getTemp_AD@ADRES+1,w
  4867  0AF0  0022               	movlb	2	; select bank2
  4868  0AF1  01ED               	clrf	((_Temp+1)^(0+256)+12)
  4869  0AF2  07ED               	addwf	((_Temp+1)^(0+256)+12),f
  4870  0AF3  0020               	movlb	0	; select bank0
  4871  0AF4  0826               	movf	getTemp_AD@ADRES,w
  4872  0AF5  0022               	movlb	2	; select bank2
  4873  0AF6  01EC               	clrf	(_Temp^(0+256)+12)
  4874  0AF7  07EC               	addwf	(_Temp^(0+256)+12),f
  4875  0AF8  0008               	return
  4876  0AF9                     __end_of_getTemp_AD:	
  4877                           
  4878                           	psect	text4
  4879  169A                     __ptext4:	
  4880 ;; *************** function _getLoad_AD *****************
  4881 ;; Defined at:
  4882 ;;		line 16 in file "../src/OverLoad_B1.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;  channel         1    wreg     unsigned char 
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;  channel         1    6[BANK0 ] unsigned char 
  4887 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4888 ;;  i               1   11[BANK0 ] unsigned char 
  4889 ;;  j               1    8[BANK0 ] unsigned char 
  4890 ;;  k               1    7[BANK0 ] unsigned char 
  4891 ;; Return value:  Size  Location     Type
  4892 ;;		None               void
  4893 ;; Registers used:
  4894 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4895 ;; Tracked objects:
  4896 ;;		On entry : 0/0
  4897 ;;		On exit  : 0/0
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4901 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4902 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4903 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4904 ;;Total ram usage:        8 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; Hardware stack levels required when called:    7
  4907 ;; This function calls:
  4908 ;;		_getAD
  4909 ;; This function is called by:
  4910 ;;		_main
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           
  4915                           ;psect for function _getLoad_AD
  4916  169A                     _getLoad_AD:	
  4917                           
  4918                           ;incstack = 0
  4919                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4920                           ;getLoad_AD@channel stored from wreg
  4921  169A  0020               	movlb	0	; select bank0
  4922  169B  00A6               	movwf	getLoad_AD@channel
  4923                           
  4924                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4925  169C  01AB               	clrf	getLoad_AD@i
  4926  169D  01A8               	clrf	getLoad_AD@j
  4927  169E  01A7               	clrf	getLoad_AD@k
  4928                           
  4929                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4930  169F  01A9               	clrf	getLoad_AD@ADRES
  4931  16A0  01AA               	clrf	getLoad_AD@ADRES+1
  4932                           
  4933                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4934  16A1  0022               	movlb	2	; select bank2
  4935  16A2  1E38               	btfss	_Load^(0+256),4
  4936  16A3  0008               	return
  4937                           
  4938                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4939  16A4  30F3               	movlw	243
  4940  16A5  0020               	movlb	0	; select bank0
  4941  16A6  00A4               	movwf	??_getLoad_AD
  4942  16A7  0824               	movf	??_getLoad_AD,w
  4943  16A8  00A0               	movwf	getAD@adcon1
  4944  16A9  0826               	movf	getLoad_AD@channel,w
  4945  16AA  319B  236E  3196   	fcall	_getAD
  4946  16AD  0020               	movlb	0	; select bank0
  4947  16AE  0821               	movf	?_getAD+1,w
  4948  16AF  01AA               	clrf	getLoad_AD@ADRES+1
  4949  16B0  07AA               	addwf	getLoad_AD@ADRES+1,f
  4950  16B1  0820               	movf	?_getAD,w
  4951  16B2  01A9               	clrf	getLoad_AD@ADRES
  4952  16B3  07A9               	addwf	getLoad_AD@ADRES,f
  4953                           
  4954                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4955  16B4  01AB               	clrf	getLoad_AD@i
  4956  16B5  3004               	movlw	4
  4957  16B6  022B               	subwf	getLoad_AD@i,w
  4958  16B7  1803               	btfsc	3,0
  4959  16B8  2EE0               	goto	l9157
  4960  16B9                     l9145:	
  4961                           
  4962                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4963  16B9  352B               	lslf	getLoad_AD@i,w
  4964  16BA  3E43               	addlw	(_Load+11)& (0+255)
  4965  16BB  0086               	movwf	6
  4966  16BC  3001               	movlw	1	; select bank2/3
  4967  16BD  0087               	movwf	7
  4968  16BE  3F40               	moviw [0]fsr1
  4969  16BF  00A4               	movwf	??_getLoad_AD
  4970  16C0  3F41               	moviw [1]fsr1
  4971  16C1  00A5               	movwf	??_getLoad_AD+1
  4972  16C2  082A               	movf	getLoad_AD@ADRES+1,w
  4973  16C3  0225               	subwf	??_getLoad_AD+1,w
  4974  16C4  1D03               	skipz
  4975  16C5  2EC8               	goto	u9775
  4976  16C6  0829               	movf	getLoad_AD@ADRES,w
  4977  16C7  0224               	subwf	??_getLoad_AD,w
  4978  16C8                     u9775:	
  4979  16C8  1803               	skipnc
  4980  16C9  2ED8               	goto	l9153
  4981  16CA  08A8               	movf	getLoad_AD@j,f
  4982  16CB  1D03               	skipz
  4983  16CC  2ED8               	goto	l9153
  4984                           
  4985                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4986  16CD  352B               	lslf	getLoad_AD@i,w
  4987  16CE  3E43               	addlw	(_Load+11)& (0+255)
  4988  16CF  0086               	movwf	6
  4989  16D0  3001               	movlw	1	; select bank2/3
  4990  16D1  0087               	movwf	7
  4991  16D2  0829               	movf	getLoad_AD@ADRES,w
  4992  16D3  3FC0               	movwi [0]fsr1
  4993  16D4  082A               	movf	getLoad_AD@ADRES+1,w
  4994  16D5  3FC1               	movwi [1]fsr1
  4995                           
  4996                           ;OverLoad_B1.c: 25: j = 1;
  4997  16D6  01A8               	clrf	getLoad_AD@j
  4998  16D7  0AA8               	incf	getLoad_AD@j,f
  4999  16D8                     l9153:	
  5000  16D8  3001               	movlw	1
  5001  16D9  00A4               	movwf	??_getLoad_AD
  5002  16DA  0824               	movf	??_getLoad_AD,w
  5003  16DB  07AB               	addwf	getLoad_AD@i,f
  5004  16DC  3004               	movlw	4
  5005  16DD  022B               	subwf	getLoad_AD@i,w
  5006  16DE  1C03               	skipc
  5007  16DF  2EB9               	goto	l9145
  5008  16E0                     l9157:	
  5009                           
  5010                           ;OverLoad_B1.c: 26: }
  5011                           ;OverLoad_B1.c: 27: }
  5012                           ;OverLoad_B1.c: 28: if (j == 0) {
  5013  16E0  08A8               	movf	getLoad_AD@j,f
  5014  16E1  1D03               	skipz
  5015  16E2  0008               	return
  5016                           
  5017                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  5018  16E3  01AB               	clrf	getLoad_AD@i
  5019  16E4                     L1:	
  5020  16E4  3004               	movlw	4
  5021  16E5  022B               	subwf	getLoad_AD@i,w
  5022  16E6  1803               	btfsc	3,0
  5023  16E7  0008               	return
  5024                           
  5025                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  5026  16E8  352B               	lslf	getLoad_AD@i,w
  5027  16E9  3E4D               	addlw	(_Load+21)& (0+255)
  5028  16EA  0086               	movwf	6
  5029  16EB  3001               	movlw	1	; select bank2/3
  5030  16EC  0087               	movwf	7
  5031  16ED  3F40               	moviw [0]fsr1
  5032  16EE  00A4               	movwf	??_getLoad_AD
  5033  16EF  3F41               	moviw [1]fsr1
  5034  16F0  00A5               	movwf	??_getLoad_AD+1
  5035  16F1  0825               	movf	??_getLoad_AD+1,w
  5036  16F2  022A               	subwf	getLoad_AD@ADRES+1,w
  5037  16F3  1D03               	skipz
  5038  16F4  2EF7               	goto	u9825
  5039  16F5  0824               	movf	??_getLoad_AD,w
  5040  16F6  0229               	subwf	getLoad_AD@ADRES,w
  5041  16F7                     u9825:	
  5042  16F7  1803               	skipnc
  5043  16F8  2F07               	goto	l9173
  5044  16F9  08A7               	movf	getLoad_AD@k,f
  5045  16FA  1D03               	skipz
  5046  16FB  2F07               	goto	l9173
  5047                           
  5048                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  5049  16FC  352B               	lslf	getLoad_AD@i,w
  5050  16FD  3E4D               	addlw	(_Load+21)& (0+255)
  5051  16FE  0086               	movwf	6
  5052  16FF  3001               	movlw	1	; select bank2/3
  5053  1700  0087               	movwf	7
  5054  1701  0829               	movf	getLoad_AD@ADRES,w
  5055  1702  3FC0               	movwi [0]fsr1
  5056  1703  082A               	movf	getLoad_AD@ADRES+1,w
  5057  1704  3FC1               	movwi [1]fsr1
  5058                           
  5059                           ;OverLoad_B1.c: 32: k = 1;
  5060  1705  01A7               	clrf	getLoad_AD@k
  5061  1706  0AA7               	incf	getLoad_AD@k,f
  5062  1707                     l9173:	
  5063  1707  3001               	movlw	1
  5064  1708  00A4               	movwf	??_getLoad_AD
  5065  1709  0824               	movf	??_getLoad_AD,w
  5066  170A  07AB               	addwf	getLoad_AD@i,f
  5067  170B  2EE4               	goto	L1
  5068  170C                     __end_of_getLoad_AD:	
  5069                           
  5070                           	psect	text5
  5071  1B6E                     __ptext5:	
  5072 ;; *************** function _getAD *****************
  5073 ;; Defined at:
  5074 ;;		line 461 in file "../src/MCU_B1.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;  adcon0          1    wreg     unsigned char 
  5077 ;;  adcon1          1    0[BANK0 ] unsigned char 
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;  adcon0          1    3[BANK0 ] unsigned char 
  5080 ;; Return value:  Size  Location     Type
  5081 ;;                  2    0[BANK0 ] int 
  5082 ;; Registers used:
  5083 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5089 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5090 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5092 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5093 ;;Total ram usage:        4 bytes
  5094 ;; Hardware stack levels used:    1
  5095 ;; Hardware stack levels required when called:    6
  5096 ;; This function calls:
  5097 ;;		_Timeout_Counter
  5098 ;;		_set_TimeoutCleared
  5099 ;; This function is called by:
  5100 ;;		_getLoad_AD
  5101 ;;		_getTemp_AD
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           
  5106                           ;psect for function _getAD
  5107  1B6E                     _getAD:	
  5108                           
  5109                           ;incstack = 0
  5110                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5111                           ;getAD@adcon0 stored from wreg
  5112  1B6E  0020               	movlb	0	; select bank0
  5113  1B6F  00A3               	movwf	getAD@adcon0
  5114                           
  5115                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  5116  1B70  0823               	movf	getAD@adcon0,w
  5117  1B71  0021               	movlb	1	; select bank1
  5118  1B72  009D               	movwf	29	;volatile
  5119                           
  5120                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  5121  1B73  0020               	movlb	0	; select bank0
  5122  1B74  0820               	movf	getAD@adcon1,w
  5123  1B75  0021               	movlb	1	; select bank1
  5124  1B76  009E               	movwf	30	;volatile
  5125                           
  5126                           ;MCU_B1.c: 464: GO_nDONE = 1;
  5127  1B77  149D               	bsf	29,1	;volatile
  5128                           
  5129                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5130  1B78  2B7C               	goto	l8615
  5131  1B79                     l8613:	
  5132                           
  5133                           ;MCU_B1.c: 466: Timeout_Counter();
  5134  1B79  3199  2118  319B   	fcall	_Timeout_Counter
  5135  1B7C                     l8615:	
  5136  1B7C  0021               	movlb	1	; select bank1
  5137  1B7D  1C9D               	btfss	29,1	;volatile
  5138  1B7E  2B81               	goto	l8619
  5139  1B7F  1D39               	btfss	(_myMain^(0+128)+10),2
  5140  1B80  2B79               	goto	l8613
  5141  1B81                     l8619:	
  5142                           
  5143                           ;MCU_B1.c: 467: };
  5144                           ;MCU_B1.c: 468: set_TimeoutCleared();
  5145  1B81  31A6  2608         	fcall	_set_TimeoutCleared
  5146                           
  5147                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  5148  1B83  0021               	movlb	1	; select bank1
  5149  1B84  081C               	movf	28,w	;volatile
  5150  1B85  0020               	movlb	0	; select bank0
  5151  1B86  01A1               	clrf	?_getAD+1
  5152  1B87  07A1               	addwf	?_getAD+1,f
  5153  1B88  0021               	movlb	1	; select bank1
  5154  1B89  081B               	movf	27,w	;volatile
  5155  1B8A  0020               	movlb	0	; select bank0
  5156  1B8B  01A0               	clrf	?_getAD
  5157  1B8C  07A0               	addwf	?_getAD,f
  5158  1B8D  0008               	return
  5159  1B8E                     __end_of_getAD:	
  5160                           
  5161                           	psect	text6
  5162  27EE                     __ptext6:	
  5163 ;; *************** function _WDT_Main *****************
  5164 ;; Defined at:
  5165 ;;		line 1116 in file "../src/MCU_B1.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;		None
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;		None
  5170 ;; Return value:  Size  Location     Type
  5171 ;;		None               void
  5172 ;; Registers used:
  5173 ;;		wreg, status,2, status,0, pclath, cstack
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5181 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5182 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5183 ;;Total ram usage:        1 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:    6
  5186 ;; This function calls:
  5187 ;;		_WDT_Clearing
  5188 ;; This function is called by:
  5189 ;;		_main
  5190 ;; This function uses a non-reentrant model
  5191 ;;
  5192                           
  5193                           
  5194                           ;psect for function _WDT_Main
  5195  27EE                     _WDT_Main:	
  5196                           
  5197                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  5198                           
  5199                           ;incstack = 0
  5200                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5201  27EE  0022               	movlb	2	; select bank2
  5202  27EF  1C36               	btfss	_WDT^(0+256),0
  5203  27F0  0008               	return
  5204                           
  5205                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  5206  27F1  3001               	movlw	1
  5207  27F2  02B7               	subwf	(_WDT^(0+256)+1),f
  5208  27F3  0837               	movf	(_WDT^(0+256)+1),w
  5209  27F4  3AFF               	xorlw	255
  5210  27F5  1903               	skipnz
  5211  27F6  0008               	return
  5212                           
  5213                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  5214  27F7  3064               	movlw	100
  5215  27F8  0020               	movlb	0	; select bank0
  5216  27F9  00A0               	movwf	??_WDT_Main
  5217  27FA  0820               	movf	??_WDT_Main,w
  5218  27FB  0022               	movlb	2	; select bank2
  5219  27FC  00B7               	movwf	(_WDT^(0+256)+1)
  5220                           
  5221                           ;MCU_B1.c: 1120: WDT_Clearing();
  5222  27FD  3180  2002         	fcall	_WDT_Clearing
  5223  27FF  0008               	return
  5224  2800                     __end_of_WDT_Main:	
  5225                           
  5226                           	psect	text7
  5227  0002                     __ptext7:	
  5228 ;; *************** function _WDT_Clearing *****************
  5229 ;; Defined at:
  5230 ;;		line 1126 in file "../src/MCU_B1.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;		None
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;		None
  5235 ;; Return value:  Size  Location     Type
  5236 ;;		None               void
  5237 ;; Registers used:
  5238 ;;		None
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;Total ram usage:        0 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    5
  5251 ;; This function calls:
  5252 ;;		Nothing
  5253 ;; This function is called by:
  5254 ;;		_WDT_Main
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           
  5259                           ;psect for function _WDT_Clearing
  5260  0002                     _WDT_Clearing:	
  5261                           
  5262                           ;incstack = 0
  5263                           ; Regs used in _WDT_Clearing: []
  5264  0002  0064               	clrwdt	;# 
  5265  0003  0008               	return
  5266  0004                     __end_of_WDT_Clearing:	
  5267                           
  5268                           	psect	text8
  5269  25F1                     __ptext8:	
  5270 ;; *************** function _Temp_Main *****************
  5271 ;; Defined at:
  5272 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;		None
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;		None
  5277 ;; Return value:  Size  Location     Type
  5278 ;;		None               void
  5279 ;; Registers used:
  5280 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5281 ;; Tracked objects:
  5282 ;;		On entry : 0/0
  5283 ;;		On exit  : 0/0
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5290 ;;Total ram usage:        0 bytes
  5291 ;; Hardware stack levels used:    1
  5292 ;; Hardware stack levels required when called:    8
  5293 ;; This function calls:
  5294 ;;		_setTemp_Main
  5295 ;; This function is called by:
  5296 ;;		_main
  5297 ;; This function uses a non-reentrant model
  5298 ;;
  5299                           
  5300                           
  5301                           ;psect for function _Temp_Main
  5302  25F1                     _Temp_Main:	
  5303                           
  5304                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5305                           
  5306                           ;incstack = 0
  5307                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5308  25F1  3185  2533         	fcall	_setTemp_Main
  5309  25F3  0008               	return
  5310  25F4                     __end_of_Temp_Main:	
  5311                           
  5312                           	psect	text9
  5313  0533                     __ptext9:	
  5314 ;; *************** function _setTemp_Main *****************
  5315 ;; Defined at:
  5316 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5317 ;; Parameters:    Size  Location     Type
  5318 ;;		None
  5319 ;; Auto vars:     Size  Location     Type
  5320 ;;  AD              2   77[BANK0 ] int 
  5321 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5322 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5323 ;;  TempGO          1   76[BANK0 ] unsigned char 
  5324 ;;  error           1   71[BANK0 ] unsigned char 
  5325 ;; Return value:  Size  Location     Type
  5326 ;;		None               void
  5327 ;; Registers used:
  5328 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5329 ;; Tracked objects:
  5330 ;;		On entry : 0/0
  5331 ;;		On exit  : 0/0
  5332 ;;		Unchanged: 0/0
  5333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5335 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5337 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5338 ;;Total ram usage:       10 bytes
  5339 ;; Hardware stack levels used:    1
  5340 ;; Hardware stack levels required when called:    7
  5341 ;; This function calls:
  5342 ;;		___lwdiv
  5343 ;;		_getMain_All_Error_Status
  5344 ;;		_getMain_All_LightsStatus
  5345 ;;		_setBuz
  5346 ;;		_setOverTemp_ADV_Restore
  5347 ;;		_setProductData
  5348 ;; This function is called by:
  5349 ;;		_Temp_Main
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           
  5354                           ;psect for function _setTemp_Main
  5355  0533                     _setTemp_Main:	
  5356                           
  5357                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5358                           
  5359                           ;incstack = 0
  5360                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5361  0533  3000               	movlw	0
  5362  0534  319D  25C7  3185   	fcall	_getMain_All_Error_Status
  5363  0537  0020               	movlb	0	; select bank0
  5364  0538  00E5               	movwf	??_setTemp_Main
  5365  0539  0865               	movf	??_setTemp_Main,w
  5366  053A  00E7               	movwf	setTemp_Main@error
  5367                           
  5368                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5369  053B  01E8               	clrf	setTemp_Main@SafeValue
  5370  053C  01E9               	clrf	setTemp_Main@SafeValue+1
  5371  053D  01EA               	clrf	setTemp_Main@DangerValue
  5372  053E  01EB               	clrf	setTemp_Main@DangerValue+1
  5373                           
  5374                           ;OverTemperature_B1.c: 75: int AD = 0;
  5375  053F  01ED               	clrf	setTemp_Main@AD
  5376  0540  01EE               	clrf	setTemp_Main@AD+1
  5377                           
  5378                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5379  0541  3198  208E  3185   	fcall	_getMain_All_LightsStatus
  5380  0544  0020               	movlb	0	; select bank0
  5381  0545  00E5               	movwf	??_setTemp_Main
  5382  0546  0865               	movf	??_setTemp_Main,w
  5383  0547  00EC               	movwf	setTemp_Main@TempGO
  5384                           
  5385                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5386  0548  0022               	movlb	2	; select bank2
  5387  0549  1C60               	btfss	_Temp^(0+256),0
  5388  054A  2E04               	goto	l2069
  5389                           
  5390                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5391  054B  1960               	btfsc	_Temp^(0+256),2
  5392  054C  2D6A               	goto	l8725
  5393                           
  5394                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5395  054D  0020               	movlb	0	; select bank0
  5396  054E  086C               	movf	setTemp_Main@TempGO,w
  5397  054F  3A01               	xorlw	1
  5398  0550  1D03               	skipz
  5399  0551  2D55               	goto	l2075
  5400  0552  0022               	movlb	2	; select bank2
  5401  0553  1CE0               	btfss	_Temp^(0+256),1
  5402  0554  2D58               	goto	l8717
  5403  0555                     l2075:	
  5404  0555  0022               	movlb	2	; select bank2
  5405  0556  1CE0               	btfss	_Temp^(0+256),1
  5406  0557  2D67               	goto	l8723
  5407  0558                     l8717:	
  5408                           
  5409                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5410  0558  3001               	movlw	1
  5411  0559  07E1               	addwf	(_Temp^(0+256)+1),f
  5412  055A  3000               	movlw	0
  5413  055B  3DE2               	addwfc	((_Temp+1)^(0+256)+1),f
  5414                           
  5415                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5416  055C  3000               	movlw	0
  5417  055D  0262               	subwf	((_Temp+1)^(0+256)+1),w
  5418  055E  30FA               	movlw	250
  5419  055F  1903               	skipnz
  5420  0560  0261               	subwf	(_Temp^(0+256)+1),w
  5421  0561  1C03               	skipc
  5422  0562  0008               	return
  5423                           
  5424                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5425  0563  01E1               	clrf	(_Temp^(0+256)+1)
  5426  0564  01E2               	clrf	((_Temp+1)^(0+256)+1)
  5427                           
  5428                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5429  0565  1560               	bsf	_Temp^(0+256),2
  5430                           
  5431                           ;OverTemperature_B1.c: 92: }
  5432                           ;OverTemperature_B1.c: 93: } else {
  5433  0566  0008               	return
  5434  0567                     l8723:	
  5435                           
  5436                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5437  0567  01E1               	clrf	(_Temp^(0+256)+1)
  5438  0568  01E2               	clrf	((_Temp+1)^(0+256)+1)
  5439                           
  5440                           ;OverTemperature_B1.c: 95: }
  5441                           ;OverTemperature_B1.c: 96: } else {
  5442  0569  0008               	return
  5443  056A                     l8725:	
  5444                           
  5445                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5446  056A  3001               	movlw	1
  5447  056B  07E1               	addwf	(_Temp^(0+256)+1),f
  5448  056C  3000               	movlw	0
  5449  056D  3DE2               	addwfc	((_Temp+1)^(0+256)+1),f
  5450                           
  5451                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5452  056E  3000               	movlw	0
  5453  056F  0262               	subwf	((_Temp+1)^(0+256)+1),w
  5454  0570  3005               	movlw	5
  5455  0571  1903               	skipnz
  5456  0572  0261               	subwf	(_Temp^(0+256)+1),w
  5457  0573  1C03               	skipc
  5458  0574  0008               	return
  5459                           
  5460                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5461  0575  01E1               	clrf	(_Temp^(0+256)+1)
  5462  0576  01E2               	clrf	((_Temp+1)^(0+256)+1)
  5463                           
  5464                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5465  0577  3003               	movlw	3
  5466  0578  0020               	movlb	0	; select bank0
  5467  0579  00A0               	movwf	___lwdiv@divisor
  5468  057A  3000               	movlw	0
  5469  057B  00A1               	movwf	___lwdiv@divisor+1
  5470  057C  300A               	movlw	10
  5471  057D  3E60               	addlw	_Temp& (0+255)
  5472  057E  0086               	movwf	6
  5473  057F  3001               	movlw	1	; select bank2/3
  5474  0580  0087               	movwf	7
  5475  0581  3008               	movlw	8
  5476  0582  3E60               	addlw	_Temp& (0+255)
  5477  0583  0084               	movwf	4
  5478  0584  3001               	movlw	1	; select bank2/3
  5479  0585  0085               	movwf	5
  5480  0586  3F00               	moviw [0]fsr0
  5481  0587  0022               	movlb	2	; select bank2
  5482  0588  0766               	addwf	(_Temp^(0+256)+6),w
  5483  0589  0020               	movlb	0	; select bank0
  5484  058A  00E5               	movwf	??_setTemp_Main
  5485  058B  3F01               	moviw [1]fsr0
  5486  058C  0022               	movlb	2	; select bank2
  5487  058D  3D67               	addwfc	((_Temp+1)^(0+256)+6),w
  5488  058E  0020               	movlb	0	; select bank0
  5489  058F  00E6               	movwf	??_setTemp_Main+1
  5490  0590  3F40               	moviw [0]fsr1
  5491  0591  0765               	addwf	??_setTemp_Main,w
  5492  0592  00A2               	movwf	___lwdiv@dividend
  5493  0593  3F41               	moviw [1]fsr1
  5494  0594  3D66               	addwfc	??_setTemp_Main+1,w
  5495  0595  00A3               	movwf	___lwdiv@dividend+1
  5496  0596  319E  262E  3185   	fcall	___lwdiv
  5497  0599  0020               	movlb	0	; select bank0
  5498  059A  0821               	movf	?___lwdiv+1,w
  5499  059B  01EE               	clrf	setTemp_Main@AD+1
  5500  059C  07EE               	addwf	setTemp_Main@AD+1,f
  5501  059D  0820               	movf	?___lwdiv,w
  5502  059E  01ED               	clrf	setTemp_Main@AD
  5503  059F  07ED               	addwf	setTemp_Main@AD,f
  5504                           
  5505                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5506  05A0  319A  229B  3185   	fcall	_setOverTemp_ADV_Restore
  5507                           
  5508                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5509  05A3  0020               	movlb	0	; select bank0
  5510  05A4  086E               	movf	setTemp_Main@AD+1,w
  5511  05A5  3A80               	xorlw	128
  5512  05A6  00E5               	movwf	??_setTemp_Main
  5513  05A7  3080               	movlw	128
  5514  05A8  0265               	subwf	??_setTemp_Main,w
  5515  05A9  1D03               	skipz
  5516  05AA  2DAD               	goto	u9065
  5517  05AB  3001               	movlw	1
  5518  05AC  026D               	subwf	setTemp_Main@AD,w
  5519  05AD                     u9065:	
  5520  05AD  1C03               	skipc
  5521  05AE  0008               	return
  5522                           
  5523                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5524  05AF  0022               	movlb	2	; select bank2
  5525  05B0  1160               	bcf	_Temp^(0+256),2
  5526                           
  5527                           ;OverTemperature_B1.c: 123: SafeValue = 455;
  5528  05B1  30C7               	movlw	199
  5529  05B2  0020               	movlb	0	; select bank0
  5530  05B3  00E8               	movwf	setTemp_Main@SafeValue
  5531  05B4  3001               	movlw	1
  5532  05B5  00E9               	movwf	setTemp_Main@SafeValue+1
  5533                           
  5534                           ;OverTemperature_B1.c: 124: DangerValue = 415;
  5535  05B6  309F               	movlw	159
  5536  05B7  00EA               	movwf	setTemp_Main@DangerValue
  5537  05B8  3001               	movlw	1
  5538  05B9  00EB               	movwf	setTemp_Main@DangerValue+1
  5539                           
  5540                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5541  05BA  0022               	movlb	2	; select bank2
  5542  05BB  1CE0               	btfss	_Temp^(0+256),1
  5543  05BC  2DDB               	goto	l8755
  5544                           
  5545                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5546  05BD  0020               	movlb	0	; select bank0
  5547  05BE  0869               	movf	setTemp_Main@SafeValue+1,w
  5548  05BF  026E               	subwf	setTemp_Main@AD+1,w
  5549  05C0  1D03               	skipz
  5550  05C1  2DC4               	goto	u9085
  5551  05C2  0868               	movf	setTemp_Main@SafeValue,w
  5552  05C3  026D               	subwf	setTemp_Main@AD,w
  5553  05C4                     u9085:	
  5554  05C4  1C03               	skipc
  5555  05C5  2DF0               	goto	l8765
  5556                           
  5557                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5558  05C6  3001               	movlw	1
  5559  05C7  00E5               	movwf	??_setTemp_Main
  5560  05C8  0865               	movf	??_setTemp_Main,w
  5561  05C9  0022               	movlb	2	; select bank2
  5562  05CA  07E3               	addwf	(_Temp^(0+256)+3),f
  5563                           
  5564                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5565  05CB  3003               	movlw	3
  5566  05CC  0263               	subwf	(_Temp^(0+256)+3),w
  5567  05CD  1C03               	skipc
  5568  05CE  2DF2               	goto	l8767
  5569                           
  5570                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5571  05CF  01E3               	clrf	(_Temp^(0+256)+3)
  5572                           
  5573                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5574  05D0  10E0               	bcf	_Temp^(0+256),1
  5575                           
  5576                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5577  05D1  3064               	movlw	100
  5578  05D2  0020               	movlb	0	; select bank0
  5579  05D3  00A9               	movwf	setBuz@time
  5580  05D4  3000               	movlw	0
  5581  05D5  00AA               	movwf	setBuz@time+1
  5582  05D6  3002               	movlw	2
  5583  05D7  3191  21E0  3185   	fcall	_setBuz
  5584                           
  5585                           ;OverTemperature_B1.c: 137: }
  5586                           ;OverTemperature_B1.c: 138: } else {
  5587  05DA  2DF2               	goto	l8767
  5588  05DB                     l8755:	
  5589                           ;OverTemperature_B1.c: 140: }
  5590                           ;OverTemperature_B1.c: 141: } else {
  5591                           
  5592                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5593                           
  5594                           
  5595                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5596  05DB  0020               	movlb	0	; select bank0
  5597  05DC  086E               	movf	setTemp_Main@AD+1,w
  5598  05DD  026B               	subwf	setTemp_Main@DangerValue+1,w
  5599  05DE  1D03               	skipz
  5600  05DF  2DE2               	goto	u9105
  5601  05E0  086D               	movf	setTemp_Main@AD,w
  5602  05E1  026A               	subwf	setTemp_Main@DangerValue,w
  5603  05E2                     u9105:	
  5604  05E2  1C03               	skipc
  5605  05E3  2DF0               	goto	l8765
  5606                           
  5607                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5608  05E4  3001               	movlw	1
  5609  05E5  00E5               	movwf	??_setTemp_Main
  5610  05E6  0865               	movf	??_setTemp_Main,w
  5611  05E7  0022               	movlb	2	; select bank2
  5612  05E8  07E3               	addwf	(_Temp^(0+256)+3),f
  5613                           
  5614                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5615  05E9  3003               	movlw	3
  5616  05EA  0263               	subwf	(_Temp^(0+256)+3),w
  5617  05EB  1C03               	skipc
  5618  05EC  2DF2               	goto	l8767
  5619                           
  5620                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5621  05ED  01E3               	clrf	(_Temp^(0+256)+3)
  5622                           
  5623                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5624  05EE  14E0               	bsf	_Temp^(0+256),1
  5625                           
  5626                           ;OverTemperature_B1.c: 147: }
  5627                           ;OverTemperature_B1.c: 148: } else {
  5628  05EF  2DF2               	goto	l8767
  5629  05F0                     l8765:	
  5630                           
  5631                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5632  05F0  0022               	movlb	2	; select bank2
  5633  05F1  01E3               	clrf	(_Temp^(0+256)+3)
  5634  05F2                     l8767:	
  5635                           
  5636                           ;OverTemperature_B1.c: 150: }
  5637                           ;OverTemperature_B1.c: 151: }
  5638                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5639  05F2  0020               	movlb	0	; select bank0
  5640  05F3  086E               	movf	setTemp_Main@AD+1,w
  5641  05F4  00E5               	movwf	??_setTemp_Main
  5642  05F5  0865               	movf	??_setTemp_Main,w
  5643  05F6  00E2               	movwf	setProductData@value
  5644  05F7  3018               	movlw	24
  5645  05F8  31A6  26A8  3185   	fcall	_setProductData
  5646                           
  5647                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5648  05FB  0020               	movlb	0	; select bank0
  5649  05FC  086D               	movf	setTemp_Main@AD,w
  5650  05FD  00E5               	movwf	??_setTemp_Main
  5651  05FE  0865               	movf	??_setTemp_Main,w
  5652  05FF  00E2               	movwf	setProductData@value
  5653  0600  3019               	movlw	25
  5654  0601  31A6  26A8         	fcall	_setProductData
  5655                           
  5656                           ;OverTemperature_B1.c: 169: }
  5657                           ;OverTemperature_B1.c: 170: }
  5658                           ;OverTemperature_B1.c: 171: }
  5659                           ;OverTemperature_B1.c: 174: } else {
  5660  0603  0008               	return
  5661  0604                     l2069:	
  5662                           
  5663                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5664  0604  0021               	movlb	1	; select bank1
  5665  0605  1C2F               	btfss	_myMain^(0+128),0
  5666  0606  0008               	return
  5667                           
  5668                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5669  0607  0022               	movlb	2	; select bank2
  5670  0608  1460               	bsf	_Temp^(0+256),0
  5671  0609  0008               	return
  5672  060A                     __end_of_setTemp_Main:	
  5673                           
  5674                           	psect	text10
  5675  1A9B                     __ptext10:	
  5676 ;; *************** function _setOverTemp_ADV_Restore *****************
  5677 ;; Defined at:
  5678 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5679 ;; Parameters:    Size  Location     Type
  5680 ;;		None
  5681 ;; Auto vars:     Size  Location     Type
  5682 ;;  i               2    1[BANK0 ] int 
  5683 ;; Return value:  Size  Location     Type
  5684 ;;		None               void
  5685 ;; Registers used:
  5686 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5687 ;; Tracked objects:
  5688 ;;		On entry : 0/0
  5689 ;;		On exit  : 0/0
  5690 ;;		Unchanged: 0/0
  5691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5695 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5696 ;;Total ram usage:        3 bytes
  5697 ;; Hardware stack levels used:    1
  5698 ;; Hardware stack levels required when called:    5
  5699 ;; This function calls:
  5700 ;;		Nothing
  5701 ;; This function is called by:
  5702 ;;		_setTemp_Main
  5703 ;; This function uses a non-reentrant model
  5704 ;;
  5705                           
  5706                           
  5707                           ;psect for function _setOverTemp_ADV_Restore
  5708  1A9B                     _setOverTemp_ADV_Restore:	
  5709                           
  5710                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5711                           
  5712                           ;incstack = 0
  5713                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5714  1A9B  0020               	movlb	0	; select bank0
  5715  1A9C  01A1               	clrf	setOverTemp_ADV_Restore@i
  5716  1A9D  01A2               	clrf	setOverTemp_ADV_Restore@i+1
  5717  1A9E                     L2:	
  5718  1A9E  0822               	movf	setOverTemp_ADV_Restore@i+1,w
  5719  1A9F  3A80               	xorlw	128
  5720  1AA0  00A0               	movwf	??_setOverTemp_ADV_Restore
  5721  1AA1  3080               	movlw	128
  5722  1AA2  0220               	subwf	??_setOverTemp_ADV_Restore,w
  5723  1AA3  1D03               	skipz
  5724  1AA4  2AA7               	goto	u7685
  5725  1AA5  3005               	movlw	5
  5726  1AA6  0221               	subwf	setOverTemp_ADV_Restore@i,w
  5727  1AA7                     u7685:	
  5728  1AA7  1803               	btfsc	3,0
  5729  1AA8  0008               	return
  5730                           
  5731                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5732  1AA9  0020               	movlb	0	; select bank0
  5733  1AAA  3521               	lslf	setOverTemp_ADV_Restore@i,w
  5734  1AAB  3E64               	addlw	(_Temp+4)& (0+255)
  5735  1AAC  0086               	movwf	6
  5736  1AAD  3001               	movlw	1	; select bank2/3
  5737  1AAE  0087               	movwf	7
  5738  1AAF  3000               	movlw	0
  5739  1AB0  3FC0               	movwi [0]fsr1
  5740  1AB1  3FC1               	movwi [1]fsr1
  5741  1AB2  3001               	movlw	1
  5742  1AB3  07A1               	addwf	setOverTemp_ADV_Restore@i,f
  5743  1AB4  3000               	movlw	0
  5744  1AB5  3DA2               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5745  1AB6  2A9E               	goto	L2
  5746  1AB7                     __end_of_setOverTemp_ADV_Restore:	
  5747                           
  5748                           	psect	text11
  5749  25EE                     __ptext11:	
  5750 ;; *************** function _Temp_Initialization *****************
  5751 ;; Defined at:
  5752 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5753 ;; Parameters:    Size  Location     Type
  5754 ;;		None
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;		None
  5757 ;; Return value:  Size  Location     Type
  5758 ;;		None               void
  5759 ;; Registers used:
  5760 ;;		status,2, status,0, pclath, cstack
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;Total ram usage:        0 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; Hardware stack levels required when called:    6
  5773 ;; This function calls:
  5774 ;;		_setTemp_Initialization
  5775 ;; This function is called by:
  5776 ;;		_main
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780                           
  5781                           ;psect for function _Temp_Initialization
  5782  25EE                     _Temp_Initialization:	
  5783                           
  5784                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5785                           
  5786                           ;incstack = 0
  5787                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5788  25EE  3190  2001         	fcall	_setTemp_Initialization
  5789  25F0  0008               	return
  5790  25F1                     __end_of_Temp_Initialization:	
  5791                           
  5792                           	psect	text12
  5793  1001                     __ptext12:	
  5794 ;; *************** function _setTemp_Initialization *****************
  5795 ;; Defined at:
  5796 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5797 ;; Parameters:    Size  Location     Type
  5798 ;;		None
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;		None
  5801 ;; Return value:  Size  Location     Type
  5802 ;;		None               void
  5803 ;; Registers used:
  5804 ;;		None
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5814 ;;Total ram usage:        0 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    5
  5817 ;; This function calls:
  5818 ;;		Nothing
  5819 ;; This function is called by:
  5820 ;;		_Temp_Initialization
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           
  5825                           ;psect for function _setTemp_Initialization
  5826  1001                     _setTemp_Initialization:	
  5827                           
  5828                           ;incstack = 0
  5829                           ; Regs used in _setTemp_Initialization: []
  5830  1001  0008               	return
  5831  1002                     __end_of_setTemp_Initialization:	
  5832                           
  5833                           	psect	text13
  5834  2691                     __ptext13:	
  5835 ;; *************** function _Switch_Main *****************
  5836 ;; Defined at:
  5837 ;;		line 76 in file "../src/Switch_B1.c"
  5838 ;; Parameters:    Size  Location     Type
  5839 ;;		None
  5840 ;; Auto vars:     Size  Location     Type
  5841 ;;		None
  5842 ;; Return value:  Size  Location     Type
  5843 ;;		None               void
  5844 ;; Registers used:
  5845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5846 ;; Tracked objects:
  5847 ;;		On entry : 0/0
  5848 ;;		On exit  : 0/0
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5855 ;;Total ram usage:        0 bytes
  5856 ;; Hardware stack levels used:    1
  5857 ;; Hardware stack levels required when called:    9
  5858 ;; This function calls:
  5859 ;;		_TouchPower
  5860 ;;		_setSw_Main
  5861 ;; This function is called by:
  5862 ;;		_main
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           
  5867                           ;psect for function _Switch_Main
  5868  2691                     _Switch_Main:	
  5869                           
  5870                           ;Switch_B1.c: 79: setSw_Main(1);
  5871                           
  5872                           ;incstack = 0
  5873                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5874  2691  3001               	movlw	1
  5875  2692  3182  22B6  31A6   	fcall	_setSw_Main
  5876                           
  5877                           ;Switch_B1.c: 83: setSw_Main(2);
  5878  2695  3002               	movlw	2
  5879  2696  3182  22B6  31A6   	fcall	_setSw_Main
  5880                           
  5881                           ;Switch_B1.c: 91: TouchPower();
  5882  2699  3199  212D         	fcall	_TouchPower
  5883  269B  0008               	return
  5884  269C                     __end_of_Switch_Main:	
  5885                           
  5886                           	psect	text14
  5887  02B6                     __ptext14:	
  5888 ;; *************** function _setSw_Main *****************
  5889 ;; Defined at:
  5890 ;;		line 117 in file "../src/Switch_B1.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;  sw              1    wreg     unsigned char 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  sw              1   21[BANK0 ] unsigned char 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;		None               void
  5897 ;; Registers used:
  5898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5906 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5907 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5908 ;;Total ram usage:        3 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    8
  5911 ;; This function calls:
  5912 ;;		_SwPointSelect
  5913 ;;		_getMain_All_Error_Status
  5914 ;;		_getSw_KeyStatus
  5915 ;;		_setBuz
  5916 ;;		_setDimmerLights_DimmingOn
  5917 ;;		_setDimmerLights_SwOff
  5918 ;;		_setDimmerLights_SwOn
  5919 ;;		_setRF_Learn
  5920 ;; This function is called by:
  5921 ;;		_Switch_Main
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           
  5926                           ;psect for function _setSw_Main
  5927  02B6                     _setSw_Main:	
  5928                           
  5929                           ;incstack = 0
  5930                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5931                           ;setSw_Main@sw stored from wreg
  5932  02B6  0020               	movlb	0	; select bank0
  5933  02B7  00B5               	movwf	setSw_Main@sw
  5934                           
  5935                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5936  02B8  0835               	movf	setSw_Main@sw,w
  5937  02B9  3199  21B4  3182   	fcall	_SwPointSelect
  5938                           
  5939                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5940  02BC  0021               	movlb	1	; select bank1
  5941  02BD  0854               	movf	_Sw^(0+128),w
  5942  02BE  0086               	movwf	6
  5943  02BF  0855               	movf	(_Sw+1)^(0+128),w
  5944  02C0  0087               	movwf	7
  5945  02C1  1C01               	btfss	1,0
  5946  02C2  2C35               	goto	l2881
  5947                           
  5948                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5949  02C3  3000               	movlw	0
  5950  02C4  319D  25C7  3182   	fcall	_getMain_All_Error_Status
  5951  02C7  3800               	iorlw	0
  5952  02C8  1D03               	skipz
  5953  02C9  2AE9               	goto	l8879
  5954                           
  5955                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5956  02CA  0021               	movlb	1	; select bank1
  5957  02CB  0854               	movf	_Sw^(0+128),w
  5958  02CC  0086               	movwf	6
  5959  02CD  0855               	movf	(_Sw+1)^(0+128),w
  5960  02CE  0087               	movwf	7
  5961  02CF  3141               	addfsr 1,1
  5962  02D0  1081               	bcf	1,1
  5963                           
  5964                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5965  02D1  0020               	movlb	0	; select bank0
  5966  02D2  0835               	movf	setSw_Main@sw,w
  5967  02D3  319B  232F  3182   	fcall	_getSw_KeyStatus
  5968  02D6  3A01               	xorlw	1
  5969  02D7  3000               	movlw	0
  5970  02D8  1903               	skipnz
  5971  02D9  3001               	movlw	1
  5972  02DA  0020               	movlb	0	; select bank0
  5973  02DB  00B3               	movwf	??_setSw_Main
  5974  02DC  0021               	movlb	1	; select bank1
  5975  02DD  0854               	movf	_Sw^(0+128),w
  5976  02DE  0086               	movwf	6
  5977  02DF  0855               	movf	(_Sw+1)^(0+128),w
  5978  02E0  0087               	movwf	7
  5979  02E1  0020               	movlb	0	; select bank0
  5980  02E2  0DB3               	rlf	??_setSw_Main,f
  5981  02E3  0801               	movf	1,w
  5982  02E4  0633               	xorwf	??_setSw_Main,w
  5983  02E5  39FD               	andlw	-3
  5984  02E6  0633               	xorwf	??_setSw_Main,w
  5985  02E7  0081               	movwf	1
  5986                           
  5987                           ;Switch_B1.c: 124: } else {
  5988  02E8  2B01               	goto	l2883
  5989  02E9                     l8879:	
  5990                           
  5991                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5992  02E9  0021               	movlb	1	; select bank1
  5993  02EA  0854               	movf	_Sw^(0+128),w
  5994  02EB  0086               	movwf	6
  5995  02EC  0855               	movf	(_Sw+1)^(0+128),w
  5996  02ED  0087               	movwf	7
  5997  02EE  3141               	addfsr 1,1
  5998  02EF  1881               	btfsc	1,1
  5999  02F0  2B01               	goto	l2883
  6000                           
  6001                           ;Switch_B1.c: 126: Sw->Detect = 1;
  6002  02F1  0854               	movf	_Sw^(0+128),w
  6003  02F2  0086               	movwf	6
  6004  02F3  0855               	movf	(_Sw+1)^(0+128),w
  6005  02F4  0087               	movwf	7
  6006  02F5  3141               	addfsr 1,1
  6007  02F6  1481               	bsf	1,1
  6008                           
  6009                           ;Switch_B1.c: 128: Sw->Touch = 0;
  6010  02F7  0854               	movf	_Sw^(0+128),w
  6011  02F8  0086               	movwf	6
  6012  02F9  0855               	movf	(_Sw+1)^(0+128),w
  6013  02FA  0087               	movwf	7
  6014  02FB  1081               	bcf	1,1
  6015                           
  6016                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  6017  02FC  0854               	movf	_Sw^(0+128),w
  6018  02FD  0086               	movwf	6
  6019  02FE  0855               	movf	(_Sw+1)^(0+128),w
  6020  02FF  0087               	movwf	7
  6021  0300  1501               	bsf	1,2
  6022  0301                     l2883:	
  6023                           
  6024                           ;Switch_B1.c: 130: }
  6025                           ;Switch_B1.c: 131: }
  6026                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  6027  0301  0021               	movlb	1	; select bank1
  6028  0302  0854               	movf	_Sw^(0+128),w
  6029  0303  0086               	movwf	6
  6030  0304  0855               	movf	(_Sw+1)^(0+128),w
  6031  0305  0087               	movwf	7
  6032  0306  1C81               	btfss	1,1
  6033  0307  2BDD               	goto	l8929
  6034                           
  6035                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  6036  0308  0854               	movf	_Sw^(0+128),w
  6037  0309  0086               	movwf	6
  6038  030A  0855               	movf	(_Sw+1)^(0+128),w
  6039  030B  0087               	movwf	7
  6040  030C  1901               	btfsc	1,2
  6041  030D  2B34               	goto	l8895
  6042                           
  6043                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  6044  030E  3001               	movlw	1
  6045  030F  0020               	movlb	0	; select bank0
  6046  0310  00B3               	movwf	??_setSw_Main
  6047  0311  0021               	movlb	1	; select bank1
  6048  0312  0854               	movf	_Sw^(0+128),w
  6049  0313  0086               	movwf	6
  6050  0314  0855               	movf	(_Sw+1)^(0+128),w
  6051  0315  0087               	movwf	7
  6052  0316  3142               	addfsr 1,2
  6053  0317  0020               	movlb	0	; select bank0
  6054  0318  0833               	movf	??_setSw_Main,w
  6055  0319  0781               	addwf	1,f
  6056                           
  6057                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (100 / 20)) {
  6058  031A  0021               	movlb	1	; select bank1
  6059  031B  0854               	movf	_Sw^(0+128),w
  6060  031C  0086               	movwf	6
  6061  031D  0855               	movf	(_Sw+1)^(0+128),w
  6062  031E  0087               	movwf	7
  6063  031F  3142               	addfsr 1,2
  6064  0320  3005               	movlw	5
  6065  0321  0201               	subwf	1,w
  6066  0322  1C03               	skipc
  6067  0323  0008               	return
  6068                           
  6069                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  6070  0324  0854               	movf	_Sw^(0+128),w
  6071  0325  0086               	movwf	6
  6072  0326  0855               	movf	(_Sw+1)^(0+128),w
  6073  0327  0087               	movwf	7
  6074  0328  3142               	addfsr 1,2
  6075  0329  0181               	clrf	1
  6076                           
  6077                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  6078  032A  0854               	movf	_Sw^(0+128),w
  6079  032B  0086               	movwf	6
  6080  032C  0855               	movf	(_Sw+1)^(0+128),w
  6081  032D  0087               	movwf	7
  6082  032E  1501               	bsf	1,2
  6083                           
  6084                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  6085  032F  0020               	movlb	0	; select bank0
  6086  0330  0835               	movf	setSw_Main@sw,w
  6087  0331  3197  270C         	fcall	_setDimmerLights_SwOn
  6088                           
  6089                           ;Switch_B1.c: 147: }
  6090                           ;Switch_B1.c: 148: } else {
  6091  0333  0008               	return
  6092  0334                     l8895:	
  6093                           
  6094                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  6095  0334  0021               	movlb	1	; select bank1
  6096  0335  0854               	movf	_Sw^(0+128),w
  6097  0336  0086               	movwf	6
  6098  0337  0855               	movf	(_Sw+1)^(0+128),w
  6099  0338  0087               	movwf	7
  6100  0339  1981               	btfsc	1,3
  6101  033A  2B69               	goto	l8905
  6102                           
  6103                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  6104  033B  0854               	movf	_Sw^(0+128),w
  6105  033C  0086               	movwf	6
  6106  033D  0855               	movf	(_Sw+1)^(0+128),w
  6107  033E  0087               	movwf	7
  6108  033F  3143               	addfsr 1,3
  6109  0340  3001               	movlw	1
  6110  0341  0781               	addwf	1,f
  6111  0342  3141               	addfsr 1,1
  6112  0343  1803               	skipnc
  6113  0344  0A81               	incf	1,f
  6114                           
  6115                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  6116  0345  0854               	movf	_Sw^(0+128),w
  6117  0346  0086               	movwf	6
  6118  0347  0855               	movf	(_Sw+1)^(0+128),w
  6119  0348  0087               	movwf	7
  6120  0349  3143               	addfsr 1,3
  6121  034A  3F40               	moviw [0]fsr1
  6122  034B  0020               	movlb	0	; select bank0
  6123  034C  00B3               	movwf	??_setSw_Main
  6124  034D  3F41               	moviw [1]fsr1
  6125  034E  00B4               	movwf	??_setSw_Main+1
  6126  034F  3000               	movlw	0
  6127  0350  0234               	subwf	??_setSw_Main+1,w
  6128  0351  304B               	movlw	75
  6129  0352  1903               	skipnz
  6130  0353  0233               	subwf	??_setSw_Main,w
  6131  0354  1C03               	skipc
  6132  0355  0008               	return
  6133                           
  6134                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  6135  0356  0021               	movlb	1	; select bank1
  6136  0357  0854               	movf	_Sw^(0+128),w
  6137  0358  0086               	movwf	6
  6138  0359  0855               	movf	(_Sw+1)^(0+128),w
  6139  035A  0087               	movwf	7
  6140  035B  3143               	addfsr 1,3
  6141  035C  3000               	movlw	0
  6142  035D  3FC0               	movwi [0]fsr1
  6143  035E  3FC1               	movwi [1]fsr1
  6144                           
  6145                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  6146  035F  0854               	movf	_Sw^(0+128),w
  6147  0360  0086               	movwf	6
  6148  0361  0855               	movf	(_Sw+1)^(0+128),w
  6149  0362  0087               	movwf	7
  6150  0363  1581               	bsf	1,3
  6151                           
  6152                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  6153  0364  0020               	movlb	0	; select bank0
  6154  0365  0835               	movf	setSw_Main@sw,w
  6155  0366  319C  24EC         	fcall	_setDimmerLights_DimmingOn
  6156                           
  6157                           ;Switch_B1.c: 162: }
  6158                           ;Switch_B1.c: 163: } else {
  6159  0368  0008               	return
  6160  0369                     l8905:	
  6161                           
  6162                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  6163  0369  0021               	movlb	1	; select bank1
  6164  036A  0854               	movf	_Sw^(0+128),w
  6165  036B  0086               	movwf	6
  6166  036C  0855               	movf	(_Sw+1)^(0+128),w
  6167  036D  0087               	movwf	7
  6168  036E  1A01               	btfsc	1,4
  6169  036F  2BA9               	goto	l8919
  6170                           
  6171                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  6172  0370  0854               	movf	_Sw^(0+128),w
  6173  0371  0086               	movwf	6
  6174  0372  0855               	movf	(_Sw+1)^(0+128),w
  6175  0373  0087               	movwf	7
  6176  0374  3145               	addfsr 1,5
  6177  0375  3001               	movlw	1
  6178  0376  0781               	addwf	1,f
  6179  0377  3141               	addfsr 1,1
  6180  0378  1803               	skipnc
  6181  0379  0A81               	incf	1,f
  6182                           
  6183                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  6184  037A  0854               	movf	_Sw^(0+128),w
  6185  037B  0086               	movwf	6
  6186  037C  0855               	movf	(_Sw+1)^(0+128),w
  6187  037D  0087               	movwf	7
  6188  037E  3145               	addfsr 1,5
  6189  037F  3F40               	moviw [0]fsr1
  6190  0380  0020               	movlb	0	; select bank0
  6191  0381  00B3               	movwf	??_setSw_Main
  6192  0382  3F41               	moviw [1]fsr1
  6193  0383  00B4               	movwf	??_setSw_Main+1
  6194  0384  3000               	movlw	0
  6195  0385  0234               	subwf	??_setSw_Main+1,w
  6196  0386  304B               	movlw	75
  6197  0387  1903               	skipnz
  6198  0388  0233               	subwf	??_setSw_Main,w
  6199  0389  1C03               	skipc
  6200  038A  0008               	return
  6201                           
  6202                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  6203  038B  0021               	movlb	1	; select bank1
  6204  038C  0854               	movf	_Sw^(0+128),w
  6205  038D  0086               	movwf	6
  6206  038E  0855               	movf	(_Sw+1)^(0+128),w
  6207  038F  0087               	movwf	7
  6208  0390  3145               	addfsr 1,5
  6209  0391  3000               	movlw	0
  6210  0392  3FC0               	movwi [0]fsr1
  6211  0393  3FC1               	movwi [1]fsr1
  6212                           
  6213                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  6214  0394  0854               	movf	_Sw^(0+128),w
  6215  0395  0086               	movwf	6
  6216  0396  0855               	movf	(_Sw+1)^(0+128),w
  6217  0397  0087               	movwf	7
  6218  0398  1601               	bsf	1,4
  6219                           
  6220                           ;Switch_B1.c: 172: setRF_Learn(1);
  6221  0399  3001               	movlw	1
  6222  039A  3198  20DA  3182   	fcall	_setRF_Learn
  6223                           
  6224                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  6225  039D  0021               	movlb	1	; select bank1
  6226  039E  1EAF               	btfss	_myMain^(0+128),5
  6227  039F  0008               	return
  6228                           
  6229                           ;Switch_B1.c: 174: setBuz(2, 100);
  6230  03A0  3064               	movlw	100
  6231  03A1  0020               	movlb	0	; select bank0
  6232  03A2  00A9               	movwf	setBuz@time
  6233  03A3  3000               	movlw	0
  6234  03A4  00AA               	movwf	setBuz@time+1
  6235  03A5  3002               	movlw	2
  6236  03A6  3191  21E0         	fcall	_setBuz
  6237                           
  6238                           ;Switch_B1.c: 175: }
  6239                           ;Switch_B1.c: 179: }
  6240                           ;Switch_B1.c: 180: } else {
  6241  03A8  0008               	return
  6242  03A9                     l8919:	
  6243                           
  6244                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  6245  03A9  0021               	movlb	1	; select bank1
  6246  03AA  0854               	movf	_Sw^(0+128),w
  6247  03AB  0086               	movwf	6
  6248  03AC  0855               	movf	(_Sw+1)^(0+128),w
  6249  03AD  0087               	movwf	7
  6250  03AE  1A81               	btfsc	1,5
  6251  03AF  0008               	return
  6252                           
  6253                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  6254  03B0  0854               	movf	_Sw^(0+128),w
  6255  03B1  0086               	movwf	6
  6256  03B2  0855               	movf	(_Sw+1)^(0+128),w
  6257  03B3  0087               	movwf	7
  6258  03B4  3147               	addfsr 1,7
  6259  03B5  3001               	movlw	1
  6260  03B6  0781               	addwf	1,f
  6261  03B7  3141               	addfsr 1,1
  6262  03B8  1803               	skipnc
  6263  03B9  0A81               	incf	1,f
  6264                           
  6265                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  6266  03BA  0854               	movf	_Sw^(0+128),w
  6267  03BB  0086               	movwf	6
  6268  03BC  0855               	movf	(_Sw+1)^(0+128),w
  6269  03BD  0087               	movwf	7
  6270  03BE  3147               	addfsr 1,7
  6271  03BF  3F40               	moviw [0]fsr1
  6272  03C0  0020               	movlb	0	; select bank0
  6273  03C1  00B3               	movwf	??_setSw_Main
  6274  03C2  3F41               	moviw [1]fsr1
  6275  03C3  00B4               	movwf	??_setSw_Main+1
  6276  03C4  3000               	movlw	0
  6277  03C5  0234               	subwf	??_setSw_Main+1,w
  6278  03C6  3096               	movlw	150
  6279  03C7  1903               	skipnz
  6280  03C8  0233               	subwf	??_setSw_Main,w
  6281  03C9  1C03               	skipc
  6282  03CA  0008               	return
  6283                           
  6284                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  6285  03CB  0021               	movlb	1	; select bank1
  6286  03CC  0854               	movf	_Sw^(0+128),w
  6287  03CD  0086               	movwf	6
  6288  03CE  0855               	movf	(_Sw+1)^(0+128),w
  6289  03CF  0087               	movwf	7
  6290  03D0  3147               	addfsr 1,7
  6291  03D1  3000               	movlw	0
  6292  03D2  3FC0               	movwi [0]fsr1
  6293  03D3  3FC1               	movwi [1]fsr1
  6294                           
  6295                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  6296  03D4  0854               	movf	_Sw^(0+128),w
  6297  03D5  0086               	movwf	6
  6298  03D6  0855               	movf	(_Sw+1)^(0+128),w
  6299  03D7  0087               	movwf	7
  6300  03D8  1681               	bsf	1,5
  6301                           
  6302                           ;Switch_B1.c: 188: setRF_Learn(0);
  6303  03D9  3000               	movlw	0
  6304  03DA  3198  20DA         	fcall	_setRF_Learn
  6305                           
  6306                           ;Switch_B1.c: 191: }
  6307                           ;Switch_B1.c: 192: }
  6308                           ;Switch_B1.c: 193: }
  6309                           ;Switch_B1.c: 195: }
  6310                           ;Switch_B1.c: 196: }
  6311                           ;Switch_B1.c: 197: } else {
  6312  03DC  0008               	return
  6313  03DD                     l8929:	
  6314                           
  6315                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  6316  03DD  0021               	movlb	1	; select bank1
  6317  03DE  0854               	movf	_Sw^(0+128),w
  6318  03DF  0086               	movwf	6
  6319  03E0  0855               	movf	(_Sw+1)^(0+128),w
  6320  03E1  0087               	movwf	7
  6321  03E2  1D01               	btfss	1,2
  6322  03E3  0008               	return
  6323                           
  6324                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  6325  03E4  3001               	movlw	1
  6326  03E5  0020               	movlb	0	; select bank0
  6327  03E6  00B3               	movwf	??_setSw_Main
  6328  03E7  0021               	movlb	1	; select bank1
  6329  03E8  0854               	movf	_Sw^(0+128),w
  6330  03E9  0086               	movwf	6
  6331  03EA  0855               	movf	(_Sw+1)^(0+128),w
  6332  03EB  0087               	movwf	7
  6333  03EC  3142               	addfsr 1,2
  6334  03ED  0020               	movlb	0	; select bank0
  6335  03EE  0833               	movf	??_setSw_Main,w
  6336  03EF  0781               	addwf	1,f
  6337                           
  6338                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (100 / 20)) {
  6339  03F0  0021               	movlb	1	; select bank1
  6340  03F1  0854               	movf	_Sw^(0+128),w
  6341  03F2  0086               	movwf	6
  6342  03F3  0855               	movf	(_Sw+1)^(0+128),w
  6343  03F4  0087               	movwf	7
  6344  03F5  3142               	addfsr 1,2
  6345  03F6  3005               	movlw	5
  6346  03F7  0201               	subwf	1,w
  6347  03F8  1C03               	skipc
  6348  03F9  0008               	return
  6349                           
  6350                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  6351  03FA  0854               	movf	_Sw^(0+128),w
  6352  03FB  0086               	movwf	6
  6353  03FC  0855               	movf	(_Sw+1)^(0+128),w
  6354  03FD  0087               	movwf	7
  6355  03FE  3142               	addfsr 1,2
  6356  03FF  0181               	clrf	1
  6357                           
  6358                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  6359  0400  0854               	movf	_Sw^(0+128),w
  6360  0401  0086               	movwf	6
  6361  0402  0855               	movf	(_Sw+1)^(0+128),w
  6362  0403  0087               	movwf	7
  6363  0404  1101               	bcf	1,2
  6364                           
  6365                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  6366  0405  0854               	movf	_Sw^(0+128),w
  6367  0406  0086               	movwf	6
  6368  0407  0855               	movf	(_Sw+1)^(0+128),w
  6369  0408  0087               	movwf	7
  6370  0409  3143               	addfsr 1,3
  6371  040A  3000               	movlw	0
  6372  040B  3FC0               	movwi [0]fsr1
  6373  040C  3FC1               	movwi [1]fsr1
  6374                           
  6375                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  6376  040D  0854               	movf	_Sw^(0+128),w
  6377  040E  0086               	movwf	6
  6378  040F  0855               	movf	(_Sw+1)^(0+128),w
  6379  0410  0087               	movwf	7
  6380  0411  1181               	bcf	1,3
  6381                           
  6382                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  6383  0412  0854               	movf	_Sw^(0+128),w
  6384  0413  0086               	movwf	6
  6385  0414  0855               	movf	(_Sw+1)^(0+128),w
  6386  0415  0087               	movwf	7
  6387  0416  1201               	bcf	1,4
  6388                           
  6389                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  6390  0417  0854               	movf	_Sw^(0+128),w
  6391  0418  0086               	movwf	6
  6392  0419  0855               	movf	(_Sw+1)^(0+128),w
  6393  041A  0087               	movwf	7
  6394  041B  1281               	bcf	1,5
  6395                           
  6396                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  6397  041C  0854               	movf	_Sw^(0+128),w
  6398  041D  0086               	movwf	6
  6399  041E  0855               	movf	(_Sw+1)^(0+128),w
  6400  041F  0087               	movwf	7
  6401  0420  3145               	addfsr 1,5
  6402  0421  3000               	movlw	0
  6403  0422  3FC0               	movwi [0]fsr1
  6404  0423  3FC1               	movwi [1]fsr1
  6405                           
  6406                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  6407  0424  0854               	movf	_Sw^(0+128),w
  6408  0425  0086               	movwf	6
  6409  0426  0855               	movf	(_Sw+1)^(0+128),w
  6410  0427  0087               	movwf	7
  6411  0428  3147               	addfsr 1,7
  6412  0429  3000               	movlw	0
  6413  042A  3FC0               	movwi [0]fsr1
  6414  042B  3FC1               	movwi [1]fsr1
  6415                           
  6416                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  6417  042C  0020               	movlb	0	; select bank0
  6418  042D  0835               	movf	setSw_Main@sw,w
  6419  042E  319E  26D5  3182   	fcall	_setDimmerLights_SwOff
  6420                           
  6421                           ;Switch_B1.c: 220: setRF_Learn(0);
  6422  0431  3000               	movlw	0
  6423  0432  3198  20DA         	fcall	_setRF_Learn
  6424                           
  6425                           ;Switch_B1.c: 222: }
  6426                           ;Switch_B1.c: 223: }
  6427                           ;Switch_B1.c: 224: }
  6428                           ;Switch_B1.c: 225: } else {
  6429  0434  0008               	return
  6430  0435                     l2881:	
  6431                           
  6432                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  6433  0435  1C2F               	btfss	_myMain^(0+128),0
  6434  0436  0008               	return
  6435                           
  6436                           ;Switch_B1.c: 227: Sw->Enable = 1;
  6437  0437  0854               	movf	_Sw^(0+128),w
  6438  0438  0086               	movwf	6
  6439  0439  0855               	movf	(_Sw+1)^(0+128),w
  6440  043A  0087               	movwf	7
  6441  043B  1401               	bsf	1,0
  6442  043C  0008               	return
  6443  043D                     __end_of_setSw_Main:	
  6444                           
  6445                           	psect	text15
  6446  18DA                     __ptext15:	
  6447 ;; *************** function _setRF_Learn *****************
  6448 ;; Defined at:
  6449 ;;		line 33 in file "../src/RF_Control_B1.c"
  6450 ;; Parameters:    Size  Location     Type
  6451 ;;  command         1    wreg     unsigned char 
  6452 ;; Auto vars:     Size  Location     Type
  6453 ;;  command         1    1[BANK0 ] unsigned char 
  6454 ;; Return value:  Size  Location     Type
  6455 ;;		None               void
  6456 ;; Registers used:
  6457 ;;		wreg, status,2, status,0
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6464 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6465 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6467 ;;Total ram usage:        2 bytes
  6468 ;; Hardware stack levels used:    1
  6469 ;; Hardware stack levels required when called:    5
  6470 ;; This function calls:
  6471 ;;		Nothing
  6472 ;; This function is called by:
  6473 ;;		_setSw_Main
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           
  6478                           ;psect for function _setRF_Learn
  6479  18DA                     _setRF_Learn:	
  6480                           
  6481                           ;incstack = 0
  6482                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6483                           ;setRF_Learn@command stored from wreg
  6484  18DA  0020               	movlb	0	; select bank0
  6485  18DB  00A1               	movwf	setRF_Learn@command
  6486                           
  6487                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6488  18DC  0821               	movf	setRF_Learn@command,w
  6489  18DD  3A01               	xorlw	1
  6490  18DE  3000               	movlw	0
  6491  18DF  1903               	skipnz
  6492  18E0  3001               	movlw	1
  6493  18E1  00A0               	movwf	??_setRF_Learn
  6494  18E2  0EA0               	swapf	??_setRF_Learn,f
  6495  18E3  0DA0               	rlf	??_setRF_Learn,f
  6496  18E4  0DA0               	rlf	??_setRF_Learn,f
  6497  18E5  0021               	movlb	1	; select bank1
  6498  18E6  0820               	movf	_RF1^(0+128),w
  6499  18E7  0020               	movlb	0	; select bank0
  6500  18E8  0620               	xorwf	??_setRF_Learn,w
  6501  18E9  39BF               	andlw	-65
  6502  18EA  0620               	xorwf	??_setRF_Learn,w
  6503  18EB  0021               	movlb	1	; select bank1
  6504  18EC  00A0               	movwf	_RF1^(0+128)
  6505  18ED  0008               	return
  6506  18EE                     __end_of_setRF_Learn:	
  6507                           
  6508                           	psect	text16
  6509  1CEC                     __ptext16:	
  6510 ;; *************** function _setDimmerLights_DimmingOn *****************
  6511 ;; Defined at:
  6512 ;;		line 816 in file "../src/Dimmer_B1.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;  sw              1    wreg     unsigned char 
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;  sw              1    2[BANK0 ] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;		None               void
  6519 ;; Registers used:
  6520 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;Total ram usage:        1 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    6
  6533 ;; This function calls:
  6534 ;;		_DimmerLights_SelectPointer
  6535 ;; This function is called by:
  6536 ;;		_setSw_Main
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           
  6541                           ;psect for function _setDimmerLights_DimmingOn
  6542  1CEC                     _setDimmerLights_DimmingOn:	
  6543                           
  6544                           ;incstack = 0
  6545                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6546                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6547  1CEC  0020               	movlb	0	; select bank0
  6548  1CED  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6549                           
  6550                           ;Dimmer_B1.c: 822: DimmerLights_SelectPointer(sw);
  6551  1CEE  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6552  1CEF  3199  216F  319C   	fcall	_DimmerLights_SelectPointer
  6553                           
  6554                           ;Dimmer_B1.c: 823: if (DimmerLights->Trigger == 0) {
  6555  1CF2  0021               	movlb	1	; select bank1
  6556  1CF3  085A               	movf	_DimmerLights^(0+128),w
  6557  1CF4  0086               	movwf	6
  6558  1CF5  3001               	movlw	1	; select bank2/3
  6559  1CF6  0087               	movwf	7
  6560  1CF7  1881               	btfsc	1,1
  6561  1CF8  0008               	return
  6562                           
  6563                           ;Dimmer_B1.c: 824: if (DimmerLights->SwFlag == 1) {
  6564  1CF9  085A               	movf	_DimmerLights^(0+128),w
  6565  1CFA  0086               	movwf	6
  6566  1CFB  3001               	movlw	1	; select bank2/3
  6567  1CFC  0087               	movwf	7
  6568  1CFD  1C01               	btfss	1,0
  6569  1CFE  0008               	return
  6570                           
  6571                           ;Dimmer_B1.c: 825: DimmerLights->Status = 1;
  6572  1CFF  0A5A               	incf	_DimmerLights^(0+128),w
  6573  1D00  0086               	movwf	6
  6574  1D01  3001               	movlw	1	; select bank2/3
  6575  1D02  0087               	movwf	7
  6576  1D03  1401               	bsf	1,0
  6577                           
  6578                           ;Dimmer_B1.c: 827: DimmerLights->DimmingSwFlag = 1;
  6579  1D04  085A               	movf	_DimmerLights^(0+128),w
  6580  1D05  0086               	movwf	6
  6581  1D06  3001               	movlw	1	; select bank2/3
  6582  1D07  0087               	movwf	7
  6583  1D08  1581               	bsf	1,3
  6584                           
  6585                           ;Dimmer_B1.c: 828: DimmerLights->DimmingTrigger = 1;
  6586  1D09  085A               	movf	_DimmerLights^(0+128),w
  6587  1D0A  0086               	movwf	6
  6588  1D0B  3001               	movlw	1	; select bank2/3
  6589  1D0C  0087               	movwf	7
  6590  1D0D  1601               	bsf	1,4
  6591                           
  6592                           ;Dimmer_B1.c: 829: DimmerLights->DimmingSwitch = 1;
  6593  1D0E  085A               	movf	_DimmerLights^(0+128),w
  6594  1D0F  0086               	movwf	6
  6595  1D10  3001               	movlw	1	; select bank2/3
  6596  1D11  0087               	movwf	7
  6597  1D12  1681               	bsf	1,5
  6598  1D13  0008               	return
  6599  1D14                     __end_of_setDimmerLights_DimmingOn:	
  6600                           
  6601                           	psect	text17
  6602  1B2F                     __ptext17:	
  6603 ;; *************** function _getSw_KeyStatus *****************
  6604 ;; Defined at:
  6605 ;;		line 238 in file "../src/Switch_B1.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;  sw              1    wreg     unsigned char 
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;  sw              1    4[BANK0 ] unsigned char 
  6610 ;;  status          1    3[BANK0 ] unsigned char 
  6611 ;; Return value:  Size  Location     Type
  6612 ;;                  1    wreg      unsigned char 
  6613 ;; Registers used:
  6614 ;;		wreg, status,2
  6615 ;; Tracked objects:
  6616 ;;		On entry : 0/0
  6617 ;;		On exit  : 0/0
  6618 ;;		Unchanged: 0/0
  6619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6622 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;Total ram usage:        5 bytes
  6625 ;; Hardware stack levels used:    1
  6626 ;; Hardware stack levels required when called:    5
  6627 ;; This function calls:
  6628 ;;		Nothing
  6629 ;; This function is called by:
  6630 ;;		_setSw_Main
  6631 ;; This function uses a non-reentrant model
  6632 ;;
  6633                           
  6634                           
  6635                           ;psect for function _getSw_KeyStatus
  6636  1B2F                     _getSw_KeyStatus:	
  6637                           
  6638                           ;incstack = 0
  6639                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6640                           ;getSw_KeyStatus@sw stored from wreg
  6641  1B2F  0020               	movlb	0	; select bank0
  6642  1B30  00A4               	movwf	getSw_KeyStatus@sw
  6643                           
  6644                           ;Switch_B1.c: 239: char status = 0;
  6645  1B31  01A3               	clrf	getSw_KeyStatus@status
  6646                           
  6647                           ;Switch_B1.c: 259: if (sw == 1) {
  6648  1B32  0824               	movf	getSw_KeyStatus@sw,w
  6649  1B33  3A01               	xorlw	1
  6650  1B34  1D03               	skipz
  6651  1B35  2B3E               	goto	l8147
  6652                           
  6653                           ;Switch_B1.c: 260: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6654  1B36  01A1               	clrf	_getSw_KeyStatus$6887
  6655  1B37  0AA1               	incf	_getSw_KeyStatus$6887,f
  6656  1B38  1F0C               	btfss	12,6	;volatile
  6657  1B39  1A0C               	btfsc	12,4	;volatile
  6658  1B3A  2B3C               	goto	l8145
  6659  1B3B  01A1               	clrf	_getSw_KeyStatus$6887
  6660  1B3C                     l8145:	
  6661  1B3C  0821               	movf	_getSw_KeyStatus$6887,w
  6662  1B3D  2B49               	goto	L3
  6663  1B3E                     l8147:	
  6664                           ;Switch_B1.c: 261: } else if (sw == 2) {
  6665                           
  6666  1B3E  0824               	movf	getSw_KeyStatus@sw,w
  6667  1B3F  3A02               	xorlw	2
  6668  1B40  1D03               	skipz
  6669  1B41  2B4C               	goto	l8157
  6670                           
  6671                           ;Switch_B1.c: 262: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6672  1B42  01A2               	clrf	_getSw_KeyStatus$6888
  6673  1B43  0AA2               	incf	_getSw_KeyStatus$6888,f
  6674  1B44  1C0C               	btfss	12,0	;volatile
  6675  1B45  188D               	btfsc	13,1	;volatile
  6676  1B46  2B48               	goto	l8155
  6677  1B47  01A2               	clrf	_getSw_KeyStatus$6888
  6678  1B48                     l8155:	
  6679  1B48  0822               	movf	_getSw_KeyStatus$6888,w
  6680  1B49                     L3:	
  6681  1B49  00A0               	movwf	??_getSw_KeyStatus
  6682  1B4A  0820               	movf	??_getSw_KeyStatus,w
  6683  1B4B  00A3               	movwf	getSw_KeyStatus@status
  6684  1B4C                     l8157:	
  6685                           
  6686                           ;Switch_B1.c: 263: }
  6687                           ;Switch_B1.c: 276: return status;
  6688  1B4C  0823               	movf	getSw_KeyStatus@status,w
  6689  1B4D  0008               	return
  6690  1B4E                     __end_of_getSw_KeyStatus:	
  6691                           
  6692                           	psect	text18
  6693  19B4                     __ptext18:	
  6694 ;; *************** function _SwPointSelect *****************
  6695 ;; Defined at:
  6696 ;;		line 25 in file "../src/Switch_B1.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;  sw              1    wreg     unsigned char 
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;  sw              1    0[BANK0 ] unsigned char 
  6701 ;; Return value:  Size  Location     Type
  6702 ;;		None               void
  6703 ;; Registers used:
  6704 ;;		wreg, status,2, status,0
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6711 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6713 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6714 ;;Total ram usage:        1 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    5
  6717 ;; This function calls:
  6718 ;;		Nothing
  6719 ;; This function is called by:
  6720 ;;		_setSw_Main
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           
  6725                           ;psect for function _SwPointSelect
  6726  19B4                     _SwPointSelect:	
  6727                           
  6728                           ;incstack = 0
  6729                           ; Regs used in _SwPointSelect: [wreg+status,2+status,0]
  6730                           ;SwPointSelect@sw stored from wreg
  6731  19B4  0020               	movlb	0	; select bank0
  6732  19B5  00A0               	movwf	SwPointSelect@sw
  6733                           
  6734                           ;Switch_B1.c: 28: if (sw == 1) {
  6735  19B6  0820               	movf	SwPointSelect@sw,w
  6736  19B7  3A01               	xorlw	1
  6737  19B8  1D03               	skipz
  6738  19B9  29C0               	goto	l8131
  6739                           
  6740                           ;Switch_B1.c: 29: Sw = &Sw1;
  6741  19BA  30D0               	movlw	low _Sw1
  6742  19BB  0021               	movlb	1	; select bank1
  6743  19BC  00D4               	movwf	_Sw^(0+128)
  6744  19BD  3001               	movlw	high _Sw1
  6745  19BE  00D5               	movwf	(_Sw+1)^(0+128)
  6746                           
  6747                           ;Switch_B1.c: 30: }
  6748  19BF  0008               	return
  6749  19C0                     l8131:	
  6750                           
  6751                           ;Switch_B1.c: 33: else if (sw == 2) {
  6752  19C0  0020               	movlb	0	; select bank0
  6753  19C1  0820               	movf	SwPointSelect@sw,w
  6754  19C2  3A02               	xorlw	2
  6755  19C3  1D03               	skipz
  6756  19C4  0008               	return
  6757                           
  6758                           ;Switch_B1.c: 34: Sw = &Sw2;
  6759  19C5  3045               	movlw	low _Sw2
  6760  19C6  0021               	movlb	1	; select bank1
  6761  19C7  00D4               	movwf	_Sw^(0+128)
  6762  19C8  3002               	movlw	high _Sw2
  6763  19C9  00D5               	movwf	(_Sw+1)^(0+128)
  6764  19CA  0008               	return
  6765  19CB                     __end_of_SwPointSelect:	
  6766                           
  6767                           	psect	text19
  6768  192D                     __ptext19:	
  6769 ;; *************** function _TouchPower *****************
  6770 ;; Defined at:
  6771 ;;		line 10 in file "../src/Switch_B1.c"
  6772 ;; Parameters:    Size  Location     Type
  6773 ;;		None
  6774 ;; Auto vars:     Size  Location     Type
  6775 ;;		None
  6776 ;; Return value:  Size  Location     Type
  6777 ;;		None               void
  6778 ;; Registers used:
  6779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6789 ;;Total ram usage:        0 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    6
  6792 ;; This function calls:
  6793 ;;		_Timeout_Counter
  6794 ;;		_set_TimeoutCleared
  6795 ;; This function is called by:
  6796 ;;		_Switch_Main
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           
  6801                           ;psect for function _TouchPower
  6802  192D                     _TouchPower:	
  6803                           
  6804                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6805                           
  6806                           ;incstack = 0
  6807                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6808  192D  0021               	movlb	1	; select bank1
  6809  192E  1C2F               	btfss	_myMain^(0+128),0
  6810  192F  0008               	return
  6811                           
  6812                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6813  1930  0020               	movlb	0	; select bank0
  6814  1931  1A8E               	btfsc	14,5	;volatile
  6815  1932  0008               	return
  6816  1933  2939               	goto	l8861
  6817  1934                     l2859:	
  6818                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6819                           
  6820                           
  6821                           ;Switch_B1.c: 14: RC5 = 1;
  6822  1934  0020               	movlb	0	; select bank0
  6823  1935  168E               	bsf	14,5	;volatile
  6824                           
  6825                           ;Switch_B1.c: 15: Timeout_Counter();
  6826  1936  3199  2118  3199   	fcall	_Timeout_Counter
  6827  1939                     l8861:	
  6828  1939  0020               	movlb	0	; select bank0
  6829  193A  1A8E               	btfsc	14,5	;volatile
  6830  193B  293F               	goto	l8865
  6831  193C  0021               	movlb	1	; select bank1
  6832  193D  1D39               	btfss	(_myMain^(0+128)+10),2
  6833  193E  2934               	goto	l2859
  6834  193F                     l8865:	
  6835                           
  6836                           ;Switch_B1.c: 16: }
  6837                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6838  193F  31A6  2608         	fcall	_set_TimeoutCleared
  6839  1941  0008               	return
  6840  1942                     __end_of_TouchPower:	
  6841                           
  6842                           	psect	text20
  6843  2608                     __ptext20:	
  6844 ;; *************** function _set_TimeoutCleared *****************
  6845 ;; Defined at:
  6846 ;;		line 281 in file "../src/Main_B1.c"
  6847 ;; Parameters:    Size  Location     Type
  6848 ;;		None
  6849 ;; Auto vars:     Size  Location     Type
  6850 ;;		None
  6851 ;; Return value:  Size  Location     Type
  6852 ;;		None               void
  6853 ;; Registers used:
  6854 ;;		status,2
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;Total ram usage:        0 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; Hardware stack levels required when called:    5
  6867 ;; This function calls:
  6868 ;;		Nothing
  6869 ;; This function is called by:
  6870 ;;		_getAD
  6871 ;;		_TouchPower
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875                           
  6876                           ;psect for function _set_TimeoutCleared
  6877  2608                     _set_TimeoutCleared:	
  6878                           
  6879                           ;Main_B1.c: 282: myMain.Timeout = 0;
  6880                           
  6881                           ;incstack = 0
  6882                           ; Regs used in _set_TimeoutCleared: [status,2]
  6883  2608  0021               	movlb	1	; select bank1
  6884  2609  1139               	bcf	(_myMain^(0+128)+10),2
  6885                           
  6886                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  6887  260A  01BA               	clrf	(_myMain^(0+128)+11)
  6888  260B  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6889  260C  0008               	return
  6890  260D                     __end_of_set_TimeoutCleared:	
  6891                           
  6892                           	psect	text21
  6893  1918                     __ptext21:	
  6894 ;; *************** function _Timeout_Counter *****************
  6895 ;; Defined at:
  6896 ;;		line 272 in file "../src/Main_B1.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;		None
  6899 ;; Auto vars:     Size  Location     Type
  6900 ;;		None
  6901 ;; Return value:  Size  Location     Type
  6902 ;;		None               void
  6903 ;; Registers used:
  6904 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6905 ;; Tracked objects:
  6906 ;;		On entry : 0/0
  6907 ;;		On exit  : 0/0
  6908 ;;		Unchanged: 0/0
  6909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6914 ;;Total ram usage:        0 bytes
  6915 ;; Hardware stack levels used:    1
  6916 ;; Hardware stack levels required when called:    5
  6917 ;; This function calls:
  6918 ;;		Nothing
  6919 ;; This function is called by:
  6920 ;;		_getAD
  6921 ;;		_TouchPower
  6922 ;; This function uses a non-reentrant model
  6923 ;;
  6924                           
  6925                           
  6926                           ;psect for function _Timeout_Counter
  6927  1918                     _Timeout_Counter:	
  6928                           
  6929                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  6930                           
  6931                           ;incstack = 0
  6932                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6933  1918  3001               	movlw	1
  6934  1919  0021               	movlb	1	; select bank1
  6935  191A  07BA               	addwf	(_myMain^(0+128)+11),f
  6936  191B  3000               	movlw	0
  6937  191C  3DBB               	addwfc	((_myMain+1)^(0+128)+11),f
  6938                           
  6939                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6940  191D  300B               	movlw	11
  6941  191E  3EAF               	addlw	_myMain& (0+255)
  6942  191F  0086               	movwf	6
  6943  1920  0187               	clrf	7
  6944  1921  3F40               	moviw [0]fsr1
  6945  1922  3AA8               	xorlw	168
  6946  1923  1D03               	skipz
  6947  1924  2927               	goto	u7655
  6948  1925  3F41               	moviw [1]fsr1
  6949  1926  3A61               	xorlw	97
  6950  1927                     u7655:	
  6951  1927  1D03               	skipz
  6952  1928  0008               	return
  6953                           
  6954                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  6955  1929  01BA               	clrf	(_myMain^(0+128)+11)
  6956  192A  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6957                           
  6958                           ;Main_B1.c: 276: myMain.Timeout = 1;
  6959  192B  1539               	bsf	(_myMain^(0+128)+10),2
  6960  192C  0008               	return
  6961  192D                     __end_of_Timeout_Counter:	
  6962                           
  6963                           	psect	text22
  6964  2656                     __ptext22:	
  6965 ;; *************** function _Switch_Initialization *****************
  6966 ;; Defined at:
  6967 ;;		line 46 in file "../src/Switch_B1.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;		None
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;		None
  6972 ;; Return value:  Size  Location     Type
  6973 ;;		None               void
  6974 ;; Registers used:
  6975 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6976 ;; Tracked objects:
  6977 ;;		On entry : 0/0
  6978 ;;		On exit  : 0/0
  6979 ;;		Unchanged: 0/0
  6980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;Total ram usage:        0 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; Hardware stack levels required when called:    8
  6988 ;; This function calls:
  6989 ;;		_setSw_Initialization
  6990 ;; This function is called by:
  6991 ;;		_main
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           
  6996                           ;psect for function _Switch_Initialization
  6997  2656                     _Switch_Initialization:	
  6998                           
  6999                           ;Switch_B1.c: 52: setSw_Initialization(1);
  7000                           
  7001                           ;incstack = 0
  7002                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7003  2656  3001               	movlw	1
  7004  2657  31A6  264E  31A6   	fcall	_setSw_Initialization
  7005                           
  7006                           ;Switch_B1.c: 56: setSw_Initialization(2);
  7007  265A  3002               	movlw	2
  7008  265B  31A6  264E         	fcall	_setSw_Initialization
  7009  265D  0008               	return
  7010  265E                     __end_of_Switch_Initialization:	
  7011                           
  7012                           	psect	text23
  7013  264E                     __ptext23:	
  7014 ;; *************** function _setSw_Initialization *****************
  7015 ;; Defined at:
  7016 ;;		line 66 in file "../src/Switch_B1.c"
  7017 ;; Parameters:    Size  Location     Type
  7018 ;;  sw              1    wreg     unsigned char 
  7019 ;; Auto vars:     Size  Location     Type
  7020 ;;  sw              1    4[BANK0 ] unsigned char 
  7021 ;; Return value:  Size  Location     Type
  7022 ;;		None               void
  7023 ;; Registers used:
  7024 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7025 ;; Tracked objects:
  7026 ;;		On entry : 0/0
  7027 ;;		On exit  : 0/0
  7028 ;;		Unchanged: 0/0
  7029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7031 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;Total ram usage:        1 bytes
  7035 ;; Hardware stack levels used:    1
  7036 ;; Hardware stack levels required when called:    7
  7037 ;; This function calls:
  7038 ;;		_setLED
  7039 ;; This function is called by:
  7040 ;;		_Switch_Initialization
  7041 ;; This function uses a non-reentrant model
  7042 ;;
  7043                           
  7044                           
  7045                           ;psect for function _setSw_Initialization
  7046  264E                     _setSw_Initialization:	
  7047                           
  7048                           ;incstack = 0
  7049                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7050                           ;setSw_Initialization@sw stored from wreg
  7051  264E  0020               	movlb	0	; select bank0
  7052  264F  00A4               	movwf	setSw_Initialization@sw
  7053                           
  7054                           ;Switch_B1.c: 68: setLED(sw, 1);
  7055  2650  01A2               	clrf	setLED@command
  7056  2651  0AA2               	incf	setLED@command,f
  7057  2652  0824               	movf	setSw_Initialization@sw,w
  7058  2653  3188  2000         	fcall	_setLED
  7059  2655  0008               	return
  7060  2656                     __end_of_setSw_Initialization:	
  7061                           
  7062                           	psect	text24
  7063  25EB                     __ptext24:	
  7064 ;; *************** function _RF_Main *****************
  7065 ;; Defined at:
  7066 ;;		line 26 in file "../src/RF_Control_B1.c"
  7067 ;; Parameters:    Size  Location     Type
  7068 ;;		None
  7069 ;; Auto vars:     Size  Location     Type
  7070 ;;		None
  7071 ;; Return value:  Size  Location     Type
  7072 ;;		None               void
  7073 ;; Registers used:
  7074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7075 ;; Tracked objects:
  7076 ;;		On entry : 0/0
  7077 ;;		On exit  : 0/0
  7078 ;;		Unchanged: 0/0
  7079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7084 ;;Total ram usage:        0 bytes
  7085 ;; Hardware stack levels used:    1
  7086 ;; Hardware stack levels required when called:   12
  7087 ;; This function calls:
  7088 ;;		_setRF_Main
  7089 ;; This function is called by:
  7090 ;;		_main
  7091 ;; This function uses a non-reentrant model
  7092 ;;
  7093                           
  7094                           
  7095                           ;psect for function _RF_Main
  7096  25EB                     _RF_Main:	
  7097                           
  7098                           ;RF_Control_B1.c: 28: setRF_Main();
  7099                           
  7100                           ;incstack = 0
  7101                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7102  25EB  3186  26E1         	fcall	_setRF_Main
  7103  25ED  0008               	return
  7104  25EE                     __end_of_RF_Main:	
  7105                           
  7106                           	psect	text25
  7107  06E1                     __ptext25:	
  7108 ;; *************** function _setRF_Main *****************
  7109 ;; Defined at:
  7110 ;;		line 53 in file "../src/RF_Control_B1.c"
  7111 ;; Parameters:    Size  Location     Type
  7112 ;;		None
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;  error           1    4[BANK1 ] unsigned char 
  7115 ;; Return value:  Size  Location     Type
  7116 ;;		None               void
  7117 ;; Registers used:
  7118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7128 ;;Total ram usage:        2 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:   11
  7131 ;; This function calls:
  7132 ;;		_CC2500_PowerOnInitial
  7133 ;;		_CC2500_RxData
  7134 ;;		_CC2500_TxData
  7135 ;;		_CC2500_WriteCommand
  7136 ;;		_RF_RxDisable
  7137 ;;		___lwdiv
  7138 ;;		_getBuz_GO
  7139 ;;		_getRF_KeyStatus
  7140 ;;		_getRxData
  7141 ;; This function is called by:
  7142 ;;		_RF_Main
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           
  7147                           ;psect for function _setRF_Main
  7148  06E1                     _setRF_Main:	
  7149                           
  7150                           ;RF_Control_B1.c: 54: char error = 0;
  7151                           
  7152                           ;incstack = 0
  7153                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7154  06E1  0021               	movlb	1	; select bank1
  7155  06E2  01E9               	clrf	setRF_Main@error^(0+128)
  7156                           
  7157                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  7158  06E3  1C20               	btfss	_RF1^(0+128),0
  7159  06E4  2FB2               	goto	l2448
  7160                           
  7161                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7162  06E5  31A7  2772  3186   	fcall	_getBuz_GO
  7163  06E8  0020               	movlb	0	; select bank0
  7164  06E9  0821               	movf	?_getBuz_GO+1,w
  7165  06EA  0420               	iorwf	?_getBuz_GO,w
  7166  06EB  1D03               	skipz
  7167  06EC  2F93               	goto	l10231
  7168                           
  7169                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  7170  06ED  31A7  2783  3186   	fcall	_getRF_KeyStatus
  7171  06F0  3A01               	xorlw	1
  7172  06F1  3000               	movlw	0
  7173  06F2  1903               	skipnz
  7174  06F3  3001               	movlw	1
  7175  06F4  0021               	movlb	1	; select bank1
  7176  06F5  00E8               	movwf	??_setRF_Main^(0+128)
  7177  06F6  0CE8               	rrf	??_setRF_Main^(0+128),f
  7178  06F7  0CE8               	rrf	??_setRF_Main^(0+128),f
  7179  06F8  0820               	movf	_RF1^(0+128),w
  7180  06F9  0668               	xorwf	??_setRF_Main^(0+128),w
  7181  06FA  397F               	andlw	-129
  7182  06FB  0668               	xorwf	??_setRF_Main^(0+128),w
  7183  06FC  00A0               	movwf	_RF1^(0+128)
  7184                           
  7185                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  7186  06FD  1FA0               	btfss	_RF1^(0+128),7
  7187  06FE  2F01               	goto	l2452
  7188  06FF  1F20               	btfss	_RF1^(0+128),6
  7189  0700  2F93               	goto	l10231
  7190  0701                     l2452:	
  7191                           
  7192                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  7193  0701  1D20               	btfss	_RF1^(0+128),2
  7194  0702  2F52               	goto	l2453
  7195                           
  7196                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  7197  0703  1B20               	btfsc	_RF1^(0+128),6
  7198  0704  2F4D               	goto	l10203
  7199                           
  7200                           ;RF_Control_B1.c: 68: RF1.Count++;
  7201  0705  3001               	movlw	1
  7202  0706  07A3               	addwf	(_RF1^(0+128)+3),f
  7203  0707  3000               	movlw	0
  7204  0708  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7205                           
  7206                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  7207  0709  3014               	movlw	20
  7208  070A  0020               	movlb	0	; select bank0
  7209  070B  00A0               	movwf	___lwdiv@divisor
  7210  070C  3000               	movlw	0
  7211  070D  00A1               	movwf	___lwdiv@divisor+1
  7212  070E  0021               	movlb	1	; select bank1
  7213  070F  0829               	movf	((_RF1+1)^(0+128)+8),w
  7214  0710  0020               	movlb	0	; select bank0
  7215  0711  01A3               	clrf	___lwdiv@dividend+1
  7216  0712  07A3               	addwf	___lwdiv@dividend+1,f
  7217  0713  0021               	movlb	1	; select bank1
  7218  0714  0828               	movf	(_RF1^(0+128)+8),w
  7219  0715  0020               	movlb	0	; select bank0
  7220  0716  01A2               	clrf	___lwdiv@dividend
  7221  0717  07A2               	addwf	___lwdiv@dividend,f
  7222  0718  319E  262E  3186   	fcall	___lwdiv
  7223  071B  0020               	movlb	0	; select bank0
  7224  071C  0821               	movf	?___lwdiv+1,w
  7225  071D  0021               	movlb	1	; select bank1
  7226  071E  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7227  071F  1D03               	skipz
  7228  0720  2F25               	goto	u11485
  7229  0721  0020               	movlb	0	; select bank0
  7230  0722  0820               	movf	?___lwdiv,w
  7231  0723  0021               	movlb	1	; select bank1
  7232  0724  0223               	subwf	(_RF1^(0+128)+3),w
  7233  0725                     u11485:	
  7234  0725  1C03               	skipc
  7235  0726  2F93               	goto	l10231
  7236                           
  7237                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7238  0727  3014               	movlw	20
  7239  0728  0020               	movlb	0	; select bank0
  7240  0729  00A0               	movwf	___lwdiv@divisor
  7241  072A  3000               	movlw	0
  7242  072B  00A1               	movwf	___lwdiv@divisor+1
  7243  072C  0021               	movlb	1	; select bank1
  7244  072D  0829               	movf	((_RF1+1)^(0+128)+8),w
  7245  072E  0020               	movlb	0	; select bank0
  7246  072F  01A3               	clrf	___lwdiv@dividend+1
  7247  0730  07A3               	addwf	___lwdiv@dividend+1,f
  7248  0731  0021               	movlb	1	; select bank1
  7249  0732  0828               	movf	(_RF1^(0+128)+8),w
  7250  0733  0020               	movlb	0	; select bank0
  7251  0734  01A2               	clrf	___lwdiv@dividend
  7252  0735  07A2               	addwf	___lwdiv@dividend,f
  7253  0736  319E  262E  3186   	fcall	___lwdiv
  7254  0739  0020               	movlb	0	; select bank0
  7255  073A  0821               	movf	?___lwdiv+1,w
  7256  073B  0021               	movlb	1	; select bank1
  7257  073C  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7258  073D  07A4               	addwf	((_RF1+1)^(0+128)+3),f
  7259  073E  0020               	movlb	0	; select bank0
  7260  073F  0820               	movf	?___lwdiv,w
  7261  0740  0021               	movlb	1	; select bank1
  7262  0741  01A3               	clrf	(_RF1^(0+128)+3)
  7263  0742  07A3               	addwf	(_RF1^(0+128)+3),f
  7264                           
  7265                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7266  0743  1120               	bcf	_RF1^(0+128),2
  7267                           
  7268                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7269  0744  01AB               	clrf	(_RF1^(0+128)+11)
  7270  0745  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7271                           
  7272                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7273  0746  31A7  2730  3186   	fcall	_RF_RxDisable
  7274                           
  7275                           ;RF_Control_B1.c: 75: CC2500_TxData();
  7276  0749  3195  25BF  3186   	fcall	_CC2500_TxData
  7277                           
  7278                           ;RF_Control_B1.c: 77: }
  7279                           ;RF_Control_B1.c: 78: } else {
  7280  074C  2F93               	goto	l10231
  7281  074D                     l10203:	
  7282                           
  7283                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7284  074D  0021               	movlb	1	; select bank1
  7285  074E  01A3               	clrf	(_RF1^(0+128)+3)
  7286  074F  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7287                           
  7288                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  7289  0750  1120               	bcf	_RF1^(0+128),2
  7290                           
  7291                           ;RF_Control_B1.c: 81: }
  7292                           ;RF_Control_B1.c: 82: } else {
  7293  0751  2F93               	goto	l10231
  7294  0752                     l2453:	
  7295                           
  7296                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  7297  0752  1DA0               	btfss	_RF1^(0+128),3
  7298  0753  2F61               	goto	l10217
  7299                           
  7300                           ;RF_Control_B1.c: 85: CC2500_RxData();
  7301  0754  3195  2554  3186   	fcall	_CC2500_RxData
  7302                           
  7303                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  7304  0757  0021               	movlb	1	; select bank1
  7305  0758  1CA0               	btfss	_RF1^(0+128),1
  7306  0759  2F93               	goto	l10231
  7307                           
  7308                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  7309  075A  10A0               	bcf	_RF1^(0+128),1
  7310                           
  7311                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  7312  075B  01AB               	clrf	(_RF1^(0+128)+11)
  7313  075C  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7314                           
  7315                           ;RF_Control_B1.c: 97: getRxData();
  7316  075D  3194  2482  3186   	fcall	_getRxData
  7317                           
  7318                           ;RF_Control_B1.c: 100: }
  7319                           ;RF_Control_B1.c: 101: } else {
  7320  0760  2F93               	goto	l10231
  7321  0761                     l10217:	
  7322                           
  7323                           ;RF_Control_B1.c: 102: RF1.Count++;
  7324  0761  3001               	movlw	1
  7325  0762  0021               	movlb	1	; select bank1
  7326  0763  07A3               	addwf	(_RF1^(0+128)+3),f
  7327  0764  3000               	movlw	0
  7328  0765  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7329                           
  7330                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7331  0766  3014               	movlw	20
  7332  0767  0020               	movlb	0	; select bank0
  7333  0768  00A0               	movwf	___lwdiv@divisor
  7334  0769  3000               	movlw	0
  7335  076A  00A1               	movwf	___lwdiv@divisor+1
  7336  076B  0021               	movlb	1	; select bank1
  7337  076C  0829               	movf	((_RF1+1)^(0+128)+8),w
  7338  076D  0020               	movlb	0	; select bank0
  7339  076E  01A3               	clrf	___lwdiv@dividend+1
  7340  076F  07A3               	addwf	___lwdiv@dividend+1,f
  7341  0770  0021               	movlb	1	; select bank1
  7342  0771  0828               	movf	(_RF1^(0+128)+8),w
  7343  0772  0020               	movlb	0	; select bank0
  7344  0773  01A2               	clrf	___lwdiv@dividend
  7345  0774  07A2               	addwf	___lwdiv@dividend,f
  7346  0775  319E  262E  3186   	fcall	___lwdiv
  7347  0778  0020               	movlb	0	; select bank0
  7348  0779  0821               	movf	?___lwdiv+1,w
  7349  077A  0021               	movlb	1	; select bank1
  7350  077B  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7351  077C  1D03               	skipz
  7352  077D  2F82               	goto	u11515
  7353  077E  0020               	movlb	0	; select bank0
  7354  077F  0820               	movf	?___lwdiv,w
  7355  0780  0021               	movlb	1	; select bank1
  7356  0781  0223               	subwf	(_RF1^(0+128)+3),w
  7357  0782                     u11515:	
  7358  0782  1C03               	skipc
  7359  0783  2F93               	goto	l10231
  7360                           
  7361                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7362  0784  01A3               	clrf	(_RF1^(0+128)+3)
  7363  0785  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7364                           
  7365                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7366  0786  15A0               	bsf	_RF1^(0+128),3
  7367                           
  7368                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7369  0787  3036               	movlw	54
  7370  0788  319A  224A  3186   	fcall	_CC2500_WriteCommand
  7371                           
  7372                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7373  078B  303A               	movlw	58
  7374  078C  319A  224A  3186   	fcall	_CC2500_WriteCommand
  7375                           
  7376                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7377  078F  3034               	movlw	52
  7378  0790  319A  224A  3186   	fcall	_CC2500_WriteCommand
  7379  0793                     l10231:	
  7380                           
  7381                           ;RF_Control_B1.c: 111: }
  7382                           ;RF_Control_B1.c: 112: }
  7383                           ;RF_Control_B1.c: 113: }
  7384                           ;RF_Control_B1.c: 114: }
  7385                           ;RF_Control_B1.c: 115: }
  7386                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7387  0793  3001               	movlw	1
  7388  0794  0021               	movlb	1	; select bank1
  7389  0795  07AB               	addwf	(_RF1^(0+128)+11),f
  7390  0796  3000               	movlw	0
  7391  0797  3DAC               	addwfc	((_RF1+1)^(0+128)+11),f
  7392                           
  7393                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7394  0798  300B               	movlw	11
  7395  0799  022C               	subwf	((_RF1+1)^(0+128)+11),w
  7396  079A  30B9               	movlw	185
  7397  079B  1903               	skipnz
  7398  079C  022B               	subwf	(_RF1^(0+128)+11),w
  7399  079D  1C03               	skipc
  7400  079E  2FAB               	goto	l10245
  7401                           
  7402                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7403  079F  01AB               	clrf	(_RF1^(0+128)+11)
  7404  07A0  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7405                           
  7406                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7407  07A1  11A0               	bcf	_RF1^(0+128),3
  7408                           
  7409                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7410  07A2  10A0               	bcf	_RF1^(0+128),1
  7411                           
  7412                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7413  07A3  3036               	movlw	54
  7414  07A4  319A  224A  3186   	fcall	_CC2500_WriteCommand
  7415                           
  7416                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7417  07A7  303A               	movlw	58
  7418  07A8  319A  224A  3186   	fcall	_CC2500_WriteCommand
  7419  07AB                     l10245:	
  7420                           
  7421                           ;RF_Control_B1.c: 125: }
  7422                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7423  07AB  0021               	movlb	1	; select bank1
  7424  07AC  1F21               	btfss	(_RF1^(0+128)+1),6
  7425  07AD  0008               	return
  7426                           
  7427                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7428  07AE  1321               	bcf	(_RF1^(0+128)+1),6
  7429                           
  7430                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7431  07AF  3199  2103         	fcall	_CC2500_PowerOnInitial
  7432                           
  7433                           ;RF_Control_B1.c: 130: }
  7434                           ;RF_Control_B1.c: 132: } else {
  7435  07B1  0008               	return
  7436  07B2                     l2448:	
  7437                           
  7438                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7439  07B2  1C2F               	btfss	_myMain^(0+128),0
  7440  07B3  0008               	return
  7441                           
  7442                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7443  07B4  1420               	bsf	_RF1^(0+128),0
  7444  07B5  0008               	return
  7445  07B6                     __end_of_setRF_Main:	
  7446                           
  7447                           	psect	text26
  7448  1482                     __ptext26:	
  7449 ;; *************** function _getRxData *****************
  7450 ;; Defined at:
  7451 ;;		line 227 in file "../src/RF_Control_B1.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;		None
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;  error           1   79[BANK0 ] unsigned char 
  7456 ;; Return value:  Size  Location     Type
  7457 ;;		None               void
  7458 ;; Registers used:
  7459 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;Total ram usage:        2 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; Hardware stack levels required when called:   10
  7472 ;; This function calls:
  7473 ;;		_getMain_All_Error_Status
  7474 ;;		_setControl_Lights_Table
  7475 ;;		_setLog_Code
  7476 ;;		_setTxData
  7477 ;; This function is called by:
  7478 ;;		_setRF_Main
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           
  7483                           ;psect for function _getRxData
  7484  1482                     _getRxData:	
  7485                           
  7486                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7487                           
  7488                           ;incstack = 0
  7489                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7490  1482  0023               	movlb	3	; select bank3
  7491  1483  0820               	movf	_RF_Data^(0+384),w
  7492  1484  3AAA               	xorlw	170
  7493  1485  1D03               	skipz
  7494  1486  2C9A               	goto	l8099
  7495  1487  0821               	movf	(_RF_Data^(0+384)+1),w
  7496  1488  3A01               	xorlw	1
  7497  1489  1D03               	skipz
  7498  148A  2C9A               	goto	l8099
  7499                           
  7500                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7501  148B  3055               	movlw	85
  7502  148C  0020               	movlb	0	; select bank0
  7503  148D  00EE               	movwf	??_getRxData
  7504  148E  0021               	movlb	1	; select bank1
  7505  148F  086E               	movf	_product^(0+128),w
  7506  1490  3E02               	addlw	2
  7507  1491  0086               	movwf	6
  7508  1492  3002               	movlw	2	; select bank4/5
  7509  1493  0087               	movwf	7
  7510  1494  0020               	movlb	0	; select bank0
  7511  1495  086E               	movf	??_getRxData,w
  7512  1496  0081               	movwf	1
  7513                           
  7514                           ;RF_Control_B1.c: 231: setTxData();
  7515  1497  318D  25A7         	fcall	_setTxData
  7516                           
  7517                           ;RF_Control_B1.c: 235: } else {
  7518  1499  0008               	return
  7519  149A                     l8099:	
  7520                           
  7521                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7522  149A  3000               	movlw	0
  7523  149B  319D  25C7  3194   	fcall	_getMain_All_Error_Status
  7524  149E  0020               	movlb	0	; select bank0
  7525  149F  00EE               	movwf	??_getRxData
  7526  14A0  086E               	movf	??_getRxData,w
  7527  14A1  00EF               	movwf	getRxData@error
  7528                           
  7529                           ;RF_Control_B1.c: 237: if (error == 0) {
  7530  14A2  08EF               	movf	getRxData@error,f
  7531  14A3  1D03               	skipz
  7532  14A4  2CE7               	goto	l2493
  7533                           
  7534                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7535  14A5  0021               	movlb	1	; select bank1
  7536  14A6  1F20               	btfss	_RF1^(0+128),6
  7537  14A7  2CB3               	goto	l8111
  7538                           
  7539                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7540  14A8  0023               	movlb	3	; select bank3
  7541  14A9  08A0               	movf	_RF_Data^(0+384),f
  7542  14AA  1D03               	skipz
  7543  14AB  0008               	return
  7544  14AC  0821               	movf	(_RF_Data^(0+384)+1),w
  7545  14AD  3A64               	xorlw	100
  7546  14AE  1D03               	skipz
  7547  14AF  0008               	return
  7548                           
  7549                           ;RF_Control_B1.c: 241: setLog_Code();
  7550  14B0  319D  25FA         	fcall	_setLog_Code
  7551                           
  7552                           ;RF_Control_B1.c: 242: }
  7553                           ;RF_Control_B1.c: 243: } else {
  7554  14B2  0008               	return
  7555  14B3                     l8111:	
  7556                           
  7557                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7558  14B3  0023               	movlb	3	; select bank3
  7559  14B4  0834               	movf	(_RF_Data^(0+384)+20),w
  7560  14B5  3AD2               	xorlw	210
  7561  14B6  1903               	skipnz
  7562  14B7  2CBC               	goto	l8115
  7563  14B8  0834               	movf	(_RF_Data^(0+384)+20),w
  7564  14B9  3A0A               	xorlw	10
  7565  14BA  1D03               	skipz
  7566  14BB  0008               	return
  7567  14BC                     l8115:	
  7568                           
  7569                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7570  14BC  08A0               	movf	_RF_Data^(0+384),f
  7571  14BD  1D03               	skipz
  7572  14BE  0008               	return
  7573  14BF  0821               	movf	(_RF_Data^(0+384)+1),w
  7574  14C0  3A02               	xorlw	2
  7575  14C1  1D03               	skipz
  7576  14C2  0008               	return
  7577                           
  7578                           ;RF_Control_B1.c: 248: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7579  14C3  0021               	movlb	1	; select bank1
  7580  14C4  086E               	movf	_product^(0+128),w
  7581  14C5  3E0C               	addlw	12
  7582  14C6  0086               	movwf	6
  7583  14C7  3002               	movlw	2	; select bank4/5
  7584  14C8  0087               	movwf	7
  7585  14C9  0023               	movlb	3	; select bank3
  7586  14CA  082C               	movf	(_RF_Data^(0+384)+12),w
  7587  14CB  0601               	xorwf	1,w
  7588  14CC  1D03               	skipz
  7589  14CD  0008               	return
  7590  14CE  0021               	movlb	1	; select bank1
  7591  14CF  086E               	movf	_product^(0+128),w
  7592  14D0  3E0D               	addlw	13
  7593  14D1  0086               	movwf	6
  7594  14D2  3002               	movlw	2	; select bank4/5
  7595  14D3  0087               	movwf	7
  7596  14D4  0023               	movlb	3	; select bank3
  7597  14D5  082D               	movf	(_RF_Data^(0+384)+13),w
  7598  14D6  0601               	xorwf	1,w
  7599  14D7  1D03               	skipz
  7600  14D8  0008               	return
  7601  14D9  0021               	movlb	1	; select bank1
  7602  14DA  086E               	movf	_product^(0+128),w
  7603  14DB  3E0E               	addlw	14
  7604  14DC  0086               	movwf	6
  7605  14DD  3002               	movlw	2	; select bank4/5
  7606  14DE  0087               	movwf	7
  7607  14DF  0023               	movlb	3	; select bank3
  7608  14E0  082E               	movf	(_RF_Data^(0+384)+14),w
  7609  14E1  0601               	xorwf	1,w
  7610  14E2  1D03               	skipz
  7611  14E3  0008               	return
  7612                           
  7613                           ;RF_Control_B1.c: 249: setControl_Lights_Table();
  7614  14E4  318A  22F9         	fcall	_setControl_Lights_Table
  7615                           
  7616                           ;RF_Control_B1.c: 250: }
  7617                           ;RF_Control_B1.c: 253: }
  7618                           ;RF_Control_B1.c: 264: }
  7619                           ;RF_Control_B1.c: 265: }
  7620                           ;RF_Control_B1.c: 266: } else {
  7621  14E6  0008               	return
  7622  14E7                     l2493:	
  7623                           
  7624                           ;RF_Control_B1.c: 267: __nop();
  7625  14E7  0000               	nop
  7626  14E8  0008               	return
  7627  14E9                     __end_of_getRxData:	
  7628                           
  7629                           	psect	text27
  7630  1DFA                     __ptext27:	
  7631 ;; *************** function _setLog_Code *****************
  7632 ;; Defined at:
  7633 ;;		line 273 in file "../src/RF_Control_B1.c"
  7634 ;; Parameters:    Size  Location     Type
  7635 ;;		None
  7636 ;; Auto vars:     Size  Location     Type
  7637 ;;		None
  7638 ;; Return value:  Size  Location     Type
  7639 ;;		None               void
  7640 ;; Registers used:
  7641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7642 ;; Tracked objects:
  7643 ;;		On entry : 0/0
  7644 ;;		On exit  : 0/0
  7645 ;;		Unchanged: 0/0
  7646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7649 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7650 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7651 ;;Total ram usage:        1 bytes
  7652 ;; Hardware stack levels used:    1
  7653 ;; Hardware stack levels required when called:    7
  7654 ;; This function calls:
  7655 ;;		_setBuz
  7656 ;;		_setMemory_LoopSave
  7657 ;;		_setMemory_Modify
  7658 ;;		_setProductData
  7659 ;; This function is called by:
  7660 ;;		_getRxData
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           
  7665                           ;psect for function _setLog_Code
  7666  1DFA                     _setLog_Code:	
  7667                           
  7668                           ;RF_Control_B1.c: 274: RF1.Learn = 0;
  7669                           
  7670                           ;incstack = 0
  7671                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7672  1DFA  0021               	movlb	1	; select bank1
  7673  1DFB  1320               	bcf	_RF1^(0+128),6
  7674                           
  7675                           ;RF_Control_B1.c: 275: setProductData(12, RF_Data[12]);
  7676  1DFC  0023               	movlb	3	; select bank3
  7677  1DFD  082C               	movf	(_RF_Data^(0+384)+12),w
  7678  1DFE  0020               	movlb	0	; select bank0
  7679  1DFF  00E5               	movwf	??_setLog_Code
  7680  1E00  0865               	movf	??_setLog_Code,w
  7681  1E01  00E2               	movwf	setProductData@value
  7682  1E02  300C               	movlw	12
  7683  1E03  31A6  26A8  319D   	fcall	_setProductData
  7684                           
  7685                           ;RF_Control_B1.c: 276: setProductData(13, RF_Data[13]);
  7686  1E06  0023               	movlb	3	; select bank3
  7687  1E07  082D               	movf	(_RF_Data^(0+384)+13),w
  7688  1E08  0020               	movlb	0	; select bank0
  7689  1E09  00E5               	movwf	??_setLog_Code
  7690  1E0A  0865               	movf	??_setLog_Code,w
  7691  1E0B  00E2               	movwf	setProductData@value
  7692  1E0C  300D               	movlw	13
  7693  1E0D  31A6  26A8  319D   	fcall	_setProductData
  7694                           
  7695                           ;RF_Control_B1.c: 277: setProductData(14, RF_Data[14]);
  7696  1E10  0023               	movlb	3	; select bank3
  7697  1E11  082E               	movf	(_RF_Data^(0+384)+14),w
  7698  1E12  0020               	movlb	0	; select bank0
  7699  1E13  00E5               	movwf	??_setLog_Code
  7700  1E14  0865               	movf	??_setLog_Code,w
  7701  1E15  00E2               	movwf	setProductData@value
  7702  1E16  300E               	movlw	14
  7703  1E17  31A6  26A8  319D   	fcall	_setProductData
  7704                           
  7705                           ;RF_Control_B1.c: 278: setBuz(1, 100);
  7706  1E1A  3064               	movlw	100
  7707  1E1B  0020               	movlb	0	; select bank0
  7708  1E1C  00A9               	movwf	setBuz@time
  7709  1E1D  3000               	movlw	0
  7710  1E1E  00AA               	movwf	setBuz@time+1
  7711  1E1F  3001               	movlw	1
  7712  1E20  3191  21E0  319D   	fcall	_setBuz
  7713                           
  7714                           ;RF_Control_B1.c: 279: if (myMain.First == 1) {
  7715  1E23  0021               	movlb	1	; select bank1
  7716  1E24  1EAF               	btfss	_myMain^(0+128),5
  7717  1E25  2E2A               	goto	l2506
  7718                           
  7719                           ;RF_Control_B1.c: 280: setMemory_LoopSave(1);
  7720  1E26  3001               	movlw	1
  7721  1E27  3198  20B4  319D   	fcall	_setMemory_LoopSave
  7722  1E2A                     l2506:	
  7723                           
  7724                           ;RF_Control_B1.c: 281: }
  7725                           ;RF_Control_B1.c: 282: setMemory_Modify(1);
  7726  1E2A  3001               	movlw	1
  7727  1E2B  3198  2068         	fcall	_setMemory_Modify
  7728  1E2D  0008               	return
  7729  1E2E                     __end_of_setLog_Code:	
  7730                           
  7731                           	psect	text28
  7732  18B4                     __ptext28:	
  7733 ;; *************** function _setMemory_LoopSave *****************
  7734 ;; Defined at:
  7735 ;;		line 1089 in file "../src/MCU_B1.c"
  7736 ;; Parameters:    Size  Location     Type
  7737 ;;  command         1    wreg     unsigned char 
  7738 ;; Auto vars:     Size  Location     Type
  7739 ;;  command         1    1[BANK0 ] unsigned char 
  7740 ;; Return value:  Size  Location     Type
  7741 ;;		None               void
  7742 ;; Registers used:
  7743 ;;		wreg, status,2, status,0
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7753 ;;Total ram usage:        2 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; Hardware stack levels required when called:    5
  7756 ;; This function calls:
  7757 ;;		Nothing
  7758 ;; This function is called by:
  7759 ;;		_setLog_Code
  7760 ;; This function uses a non-reentrant model
  7761 ;;
  7762                           
  7763                           
  7764                           ;psect for function _setMemory_LoopSave
  7765  18B4                     _setMemory_LoopSave:	
  7766                           
  7767                           ;incstack = 0
  7768                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7769                           ;setMemory_LoopSave@command stored from wreg
  7770  18B4  0020               	movlb	0	; select bank0
  7771  18B5  00A1               	movwf	setMemory_LoopSave@command
  7772                           
  7773                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7774  18B6  0821               	movf	setMemory_LoopSave@command,w
  7775  18B7  3A01               	xorlw	1
  7776  18B8  3000               	movlw	0
  7777  18B9  1903               	skipnz
  7778  18BA  3001               	movlw	1
  7779  18BB  00A0               	movwf	??_setMemory_LoopSave
  7780  18BC  0DA0               	rlf	??_setMemory_LoopSave,f
  7781  18BD  0DA0               	rlf	??_setMemory_LoopSave,f
  7782  18BE  0024               	movlb	4	; select bank4
  7783  18BF  0844               	movf	(_Memory^(0+512)+36),w
  7784  18C0  0020               	movlb	0	; select bank0
  7785  18C1  0620               	xorwf	??_setMemory_LoopSave,w
  7786  18C2  39FB               	andlw	-5
  7787  18C3  0620               	xorwf	??_setMemory_LoopSave,w
  7788  18C4  0024               	movlb	4	; select bank4
  7789  18C5  00C4               	movwf	(_Memory^(0+512)+36)
  7790  18C6  0008               	return
  7791  18C7                     __end_of_setMemory_LoopSave:	
  7792                           
  7793                           	psect	text29
  7794  0AF9                     __ptext29:	
  7795 ;; *************** function _setControl_Lights_Table *****************
  7796 ;; Defined at:
  7797 ;;		line 286 in file "../src/RF_Control_B1.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;		None
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;		None
  7802 ;; Return value:  Size  Location     Type
  7803 ;;		None               void
  7804 ;; Registers used:
  7805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7806 ;; Tracked objects:
  7807 ;;		On entry : 0/0
  7808 ;;		On exit  : 0/0
  7809 ;;		Unchanged: 0/0
  7810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;Total ram usage:        0 bytes
  7816 ;; Hardware stack levels used:    1
  7817 ;; Hardware stack levels required when called:    9
  7818 ;; This function calls:
  7819 ;;		_getDimmerLights_Status
  7820 ;;		_getMain_All_LightsStatus
  7821 ;;		_setCmd_Status
  7822 ;;		_setDimmerLights_SwOff
  7823 ;;		_setDimmerLights_SwOn
  7824 ;;		_setProductData
  7825 ;;		_setRFSW_AdjControl
  7826 ;;		_setRFSW_Control
  7827 ;;		_setRF_AdjControl
  7828 ;;		_setTxData
  7829 ;; This function is called by:
  7830 ;;		_getRxData
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834                           
  7835                           ;psect for function _setControl_Lights_Table
  7836  0AF9                     _setControl_Lights_Table:	
  7837                           
  7838                           ;RF_Control_B1.c: 288: switch (RF_Data[15]) {
  7839                           
  7840                           ;incstack = 0
  7841                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7842  0AF9  2B7A               	goto	l7669
  7843  0AFA                     l7641:	
  7844                           ;RF_Control_B1.c: 290: case 0x00:
  7845                           
  7846                           
  7847                           ;RF_Control_B1.c: 291: if (getMain_All_LightsStatus() == 1) {
  7848  0AFA  3198  208E  318A   	fcall	_getMain_All_LightsStatus
  7849  0AFD  3A01               	xorlw	1
  7850  0AFE  1D03               	skipz
  7851  0AFF  2B25               	goto	l7651
  7852                           
  7853                           ;RF_Control_B1.c: 294: if (getDimmerLights_Status(1) == 1) {
  7854  0B00  3001               	movlw	1
  7855  0B01  31A7  273F  318A   	fcall	_getDimmerLights_Status
  7856  0B04  3A01               	xorlw	1
  7857  0B05  1D03               	skipz
  7858  0B06  2B0F               	goto	l2513
  7859                           
  7860                           ;RF_Control_B1.c: 295: setDimmerLights_SwOn(1);
  7861  0B07  3001               	movlw	1
  7862  0B08  3197  270C  318A   	fcall	_setDimmerLights_SwOn
  7863                           
  7864                           ;RF_Control_B1.c: 296: setDimmerLights_SwOff(1);
  7865  0B0B  3001               	movlw	1
  7866  0B0C  319E  26D5  318A   	fcall	_setDimmerLights_SwOff
  7867  0B0F                     l2513:	
  7868                           
  7869                           ;RF_Control_B1.c: 297: }
  7870                           ;RF_Control_B1.c: 300: if (getDimmerLights_Status(2) == 1) {
  7871  0B0F  3002               	movlw	2
  7872  0B10  31A7  273F  318A   	fcall	_getDimmerLights_Status
  7873  0B13  3A01               	xorlw	1
  7874  0B14  1D03               	skipz
  7875  0B15  2B1E               	goto	l7649
  7876                           
  7877                           ;RF_Control_B1.c: 301: setDimmerLights_SwOn(2);
  7878  0B16  3002               	movlw	2
  7879  0B17  3197  270C  318A   	fcall	_setDimmerLights_SwOn
  7880                           
  7881                           ;RF_Control_B1.c: 302: setDimmerLights_SwOff(2);
  7882  0B1A  3002               	movlw	2
  7883  0B1B  319E  26D5  318A   	fcall	_setDimmerLights_SwOff
  7884  0B1E                     l7649:	
  7885                           
  7886                           ;RF_Control_B1.c: 303: }
  7887                           ;RF_Control_B1.c: 312: setCmd_Status(1, 1);
  7888  0B1E  0020               	movlb	0	; select bank0
  7889  0B1F  01A0               	clrf	setCmd_Status@cmd
  7890  0B20  0AA0               	incf	setCmd_Status@cmd,f
  7891  0B21  3001               	movlw	1
  7892  0B22  3199  21E4         	fcall	_setCmd_Status
  7893                           
  7894                           ;RF_Control_B1.c: 313: } else {
  7895  0B24  0008               	return
  7896  0B25                     l7651:	
  7897                           
  7898                           ;RF_Control_B1.c: 314: setProductData(9, 0);
  7899  0B25  0020               	movlb	0	; select bank0
  7900  0B26  01E2               	clrf	setProductData@value
  7901  0B27  3009               	movlw	9
  7902  0B28  31A6  26A8  318A   	fcall	_setProductData
  7903                           
  7904                           ;RF_Control_B1.c: 315: setProductData(11, 0);
  7905  0B2B  0020               	movlb	0	; select bank0
  7906  0B2C  01E2               	clrf	setProductData@value
  7907  0B2D  300B               	movlw	11
  7908  0B2E  31A6  26A8  318A   	fcall	_setProductData
  7909                           
  7910                           ;RF_Control_B1.c: 316: setProductData(15, 0);
  7911  0B31  0020               	movlb	0	; select bank0
  7912  0B32  01E2               	clrf	setProductData@value
  7913  0B33  300F               	movlw	15
  7914  0B34  31A6  26A8  318A   	fcall	_setProductData
  7915                           
  7916                           ;RF_Control_B1.c: 317: setProductData(17, 0);
  7917  0B37  0020               	movlb	0	; select bank0
  7918  0B38  01E2               	clrf	setProductData@value
  7919  0B39  3011               	movlw	17
  7920  0B3A  31A6  26A8  318A   	fcall	_setProductData
  7921                           
  7922                           ;RF_Control_B1.c: 318: setTxData();
  7923  0B3D  318D  25A7         	fcall	_setTxData
  7924                           
  7925                           ;RF_Control_B1.c: 319: }
  7926                           ;RF_Control_B1.c: 320: break;
  7927  0B3F  0008               	return
  7928  0B40                     l7653:	
  7929                           ;RF_Control_B1.c: 322: case 0x20:
  7930                           
  7931                           
  7932                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7933  0B40  0020               	movlb	0	; select bank0
  7934  0B41  01E2               	clrf	setProductData@value
  7935  0B42  3009               	movlw	9
  7936  0B43  31A6  26A8  318A   	fcall	_setProductData
  7937                           
  7938                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7939  0B46  0020               	movlb	0	; select bank0
  7940  0B47  01E2               	clrf	setProductData@value
  7941  0B48  300B               	movlw	11
  7942  0B49  31A6  26A8  318A   	fcall	_setProductData
  7943                           
  7944                           ;RF_Control_B1.c: 325: setProductData(15, product->Data[15]);
  7945  0B4C  0021               	movlb	1	; select bank1
  7946  0B4D  086E               	movf	_product^(0+128),w
  7947  0B4E  0086               	movwf	6
  7948  0B4F  3002               	movlw	2	; select bank4/5
  7949  0B50  0087               	movwf	7
  7950  0B51  3002               	movlw	2	; select bank4/5
  7951  0B52  3F4F               	moviw [15]fsr1
  7952  0B53  0020               	movlb	0	; select bank0
  7953  0B54  00E2               	movwf	setProductData@value
  7954  0B55  300F               	movlw	15
  7955  0B56  31A6  26A8  318A   	fcall	_setProductData
  7956                           
  7957                           ;RF_Control_B1.c: 326: setProductData(17, 0);
  7958  0B59  0020               	movlb	0	; select bank0
  7959  0B5A  01E2               	clrf	setProductData@value
  7960  0B5B  3011               	movlw	17
  7961  0B5C  31A6  26A8  318A   	fcall	_setProductData
  7962                           
  7963                           ;RF_Control_B1.c: 327: setTxData();
  7964  0B5F  318D  25A7         	fcall	_setTxData
  7965                           
  7966                           ;RF_Control_B1.c: 328: break;
  7967  0B61  0008               	return
  7968  0B62                     l7655:	
  7969                           ;RF_Control_B1.c: 331: case 0x01:
  7970                           
  7971                           
  7972                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7973  0B62  3001               	movlw	1
  7974  0B63  3192  2294         	fcall	_setRFSW_Control
  7975                           
  7976                           ;RF_Control_B1.c: 333: break;
  7977  0B65  0008               	return
  7978  0B66                     l7657:	
  7979                           ;RF_Control_B1.c: 337: case 0x11:
  7980                           
  7981                           
  7982                           ;RF_Control_B1.c: 338: setRFSW_AdjControl(1);
  7983  0B66  3001               	movlw	1
  7984  0B67  3188  2053         	fcall	_setRFSW_AdjControl
  7985                           
  7986                           ;RF_Control_B1.c: 339: break;
  7987  0B69  0008               	return
  7988  0B6A                     l7659:	
  7989                           ;RF_Control_B1.c: 341: case 0xd1:
  7990                           
  7991                           
  7992                           ;RF_Control_B1.c: 342: setRF_AdjControl(1);
  7993  0B6A  3001               	movlw	1
  7994  0B6B  319F  270E         	fcall	_setRF_AdjControl
  7995                           
  7996                           ;RF_Control_B1.c: 343: break;
  7997  0B6D  0008               	return
  7998  0B6E                     l7661:	
  7999                           ;RF_Control_B1.c: 348: case 0x02:
  8000                           
  8001                           
  8002                           ;RF_Control_B1.c: 349: setRFSW_Control(2);
  8003  0B6E  3002               	movlw	2
  8004  0B6F  3192  2294         	fcall	_setRFSW_Control
  8005                           
  8006                           ;RF_Control_B1.c: 350: break;
  8007  0B71  0008               	return
  8008  0B72                     l7663:	
  8009                           ;RF_Control_B1.c: 353: case 0x21:
  8010                           
  8011                           
  8012                           ;RF_Control_B1.c: 354: setRFSW_AdjControl(2);
  8013  0B72  3002               	movlw	2
  8014  0B73  3188  2053         	fcall	_setRFSW_AdjControl
  8015                           
  8016                           ;RF_Control_B1.c: 355: break;
  8017  0B75  0008               	return
  8018  0B76                     l7665:	
  8019                           ;RF_Control_B1.c: 357: case 0xd2:
  8020                           
  8021                           
  8022                           ;RF_Control_B1.c: 358: setRF_AdjControl(2);
  8023  0B76  3002               	movlw	2
  8024  0B77  319F  270E         	fcall	_setRF_AdjControl
  8025                           
  8026                           ;RF_Control_B1.c: 376: }
  8027                           
  8028                           ;RF_Control_B1.c: 359: break;
  8029  0B79  0008               	return
  8030  0B7A                     l7669:	
  8031  0B7A  0023               	movlb	3	; select bank3
  8032  0B7B  082F               	movf	(_RF_Data^(0+384)+15),w
  8033                           
  8034                           ; Switch size 1, requested type "space"
  8035                           ; Number of cases is 8, Range of values is 0 to 210
  8036                           ; switch strategies available:
  8037                           ; Name         Instructions Cycles
  8038                           ; simple_byte           25    13 (average)
  8039                           ; jumptable            260     6 (fixed)
  8040                           ;	Chosen strategy is simple_byte
  8041  0B7C  3A00               	xorlw	0	; case 0
  8042  0B7D  1903               	skipnz
  8043  0B7E  2AFA               	goto	l7641
  8044  0B7F  3A01               	xorlw	1	; case 1
  8045  0B80  1903               	skipnz
  8046  0B81  2B62               	goto	l7655
  8047  0B82  3A03               	xorlw	3	; case 2
  8048  0B83  1903               	skipnz
  8049  0B84  2B6E               	goto	l7661
  8050  0B85  3A13               	xorlw	19	; case 17
  8051  0B86  1903               	skipnz
  8052  0B87  2B66               	goto	l7657
  8053  0B88  3A31               	xorlw	49	; case 32
  8054  0B89  1903               	skipnz
  8055  0B8A  2B40               	goto	l7653
  8056  0B8B  3A01               	xorlw	1	; case 33
  8057  0B8C  1903               	skipnz
  8058  0B8D  2B72               	goto	l7663
  8059  0B8E  3AF0               	xorlw	240	; case 209
  8060  0B8F  1903               	skipnz
  8061  0B90  2B6A               	goto	l7659
  8062  0B91  3A03               	xorlw	3	; case 210
  8063  0B92  1903               	skipnz
  8064  0B93  2B76               	goto	l7665
  8065  0B94  2B95               	goto	l2524
  8066  0B95                     l2524:	
  8067  0B95  0008               	return
  8068  0B96                     __end_of_setControl_Lights_Table:	
  8069                           
  8070                           	psect	text30
  8071  1F0E                     __ptext30:	
  8072 ;; *************** function _setRF_AdjControl *****************
  8073 ;; Defined at:
  8074 ;;		line 457 in file "../src/RF_Control_B1.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;  sw              1    wreg     unsigned char 
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;  sw              1    7[BANK0 ] unsigned char 
  8079 ;;  dimmingStatu    1    6[BANK0 ] unsigned char 
  8080 ;;  status          1    5[BANK0 ] unsigned char 
  8081 ;; Return value:  Size  Location     Type
  8082 ;;		None               void
  8083 ;; Registers used:
  8084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8085 ;; Tracked objects:
  8086 ;;		On entry : 0/0
  8087 ;;		On exit  : 0/0
  8088 ;;		Unchanged: 0/0
  8089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;Total ram usage:        4 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; Hardware stack levels required when called:    7
  8097 ;; This function calls:
  8098 ;;		_DimmerLights_SelectPointer
  8099 ;;		_getDimmerIntr_Dimming_Sw
  8100 ;;		_getDimmerLights_Status
  8101 ;; This function is called by:
  8102 ;;		_setControl_Lights_Table
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106                           
  8107                           ;psect for function _setRF_AdjControl
  8108  1F0E                     _setRF_AdjControl:	
  8109                           
  8110                           ;incstack = 0
  8111                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8112                           ;setRF_AdjControl@sw stored from wreg
  8113  1F0E  0020               	movlb	0	; select bank0
  8114  1F0F  00A7               	movwf	setRF_AdjControl@sw
  8115                           
  8116                           ;RF_Control_B1.c: 458: char status = 0;
  8117  1F10  01A5               	clrf	setRF_AdjControl@status
  8118                           
  8119                           ;RF_Control_B1.c: 460: status = getDimmerLights_Status(sw);
  8120  1F11  0827               	movf	setRF_AdjControl@sw,w
  8121  1F12  31A7  273F  319F   	fcall	_getDimmerLights_Status
  8122  1F15  0020               	movlb	0	; select bank0
  8123  1F16  00A4               	movwf	??_setRF_AdjControl
  8124  1F17  0824               	movf	??_setRF_AdjControl,w
  8125  1F18  00A5               	movwf	setRF_AdjControl@status
  8126                           
  8127                           ;RF_Control_B1.c: 461: char dimmingStatus = 0;
  8128  1F19  01A6               	clrf	setRF_AdjControl@dimmingStatus
  8129                           
  8130                           ;RF_Control_B1.c: 462: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
  8131  1F1A  0827               	movf	setRF_AdjControl@sw,w
  8132  1F1B  3199  21CB  319F   	fcall	_getDimmerIntr_Dimming_Sw
  8133  1F1E  0020               	movlb	0	; select bank0
  8134  1F1F  00A4               	movwf	??_setRF_AdjControl
  8135  1F20  0824               	movf	??_setRF_AdjControl,w
  8136  1F21  00A6               	movwf	setRF_AdjControl@dimmingStatus
  8137                           
  8138                           ;RF_Control_B1.c: 464: if (status == 1) {
  8139  1F22  0825               	movf	setRF_AdjControl@status,w
  8140  1F23  3A01               	xorlw	1
  8141  1F24  1D03               	skipz
  8142  1F25  0008               	return
  8143                           
  8144                           ;RF_Control_B1.c: 465: if (dimmingStatus == 0) {
  8145  1F26  08A6               	movf	setRF_AdjControl@dimmingStatus,f
  8146  1F27  1D03               	skipz
  8147  1F28  2F38               	goto	l7369
  8148                           
  8149                           ;RF_Control_B1.c: 466: DimmerLights_SelectPointer(sw);
  8150  1F29  0827               	movf	setRF_AdjControl@sw,w
  8151  1F2A  3199  216F         	fcall	_DimmerLights_SelectPointer
  8152                           
  8153                           ;RF_Control_B1.c: 467: DimmerLights->DimmingTrigger = 1;
  8154  1F2C  0021               	movlb	1	; select bank1
  8155  1F2D  085A               	movf	_DimmerLights^(0+128),w
  8156  1F2E  0086               	movwf	6
  8157  1F2F  3001               	movlw	1	; select bank2/3
  8158  1F30  0087               	movwf	7
  8159  1F31  1601               	bsf	1,4
  8160                           
  8161                           ;RF_Control_B1.c: 468: DimmerLights->DimmingSwitch = 1;
  8162  1F32  085A               	movf	_DimmerLights^(0+128),w
  8163  1F33  0086               	movwf	6
  8164  1F34  3001               	movlw	1	; select bank2/3
  8165  1F35  0087               	movwf	7
  8166  1F36  1681               	bsf	1,5
  8167                           
  8168                           ;RF_Control_B1.c: 470: } else {
  8169  1F37  0008               	return
  8170  1F38                     l7369:	
  8171                           
  8172                           ;RF_Control_B1.c: 471: DimmerLights_SelectPointer(sw);
  8173  1F38  0020               	movlb	0	; select bank0
  8174  1F39  0827               	movf	setRF_AdjControl@sw,w
  8175  1F3A  3199  216F         	fcall	_DimmerLights_SelectPointer
  8176                           
  8177                           ;RF_Control_B1.c: 472: DimmerLights->DimmingTrigger = 1;
  8178  1F3C  0021               	movlb	1	; select bank1
  8179  1F3D  085A               	movf	_DimmerLights^(0+128),w
  8180  1F3E  0086               	movwf	6
  8181  1F3F  3001               	movlw	1	; select bank2/3
  8182  1F40  0087               	movwf	7
  8183  1F41  1601               	bsf	1,4
  8184                           
  8185                           ;RF_Control_B1.c: 473: DimmerLights->DimmingSwitch = 0;
  8186  1F42  085A               	movf	_DimmerLights^(0+128),w
  8187  1F43  0086               	movwf	6
  8188  1F44  3001               	movlw	1	; select bank2/3
  8189  1F45  0087               	movwf	7
  8190  1F46  1281               	bcf	1,5
  8191  1F47  0008               	return
  8192  1F48                     __end_of_setRF_AdjControl:	
  8193                           
  8194                           	psect	text31
  8195  1294                     __ptext31:	
  8196 ;; *************** function _setRFSW_Control *****************
  8197 ;; Defined at:
  8198 ;;		line 384 in file "../src/RF_Control_B1.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;  sw              1    wreg     unsigned char 
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;  sw              1    2[BANK1 ] unsigned char 
  8203 ;;  rfDimming       1    1[BANK1 ] unsigned char 
  8204 ;;  status          1    0[BANK1 ] unsigned char 
  8205 ;; Return value:  Size  Location     Type
  8206 ;;		None               void
  8207 ;; Registers used:
  8208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;Total ram usage:        4 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    8
  8221 ;; This function calls:
  8222 ;;		_getDimmerLights_Status
  8223 ;;		_setBuz
  8224 ;;		_setDelayOff_GO
  8225 ;;		_setDimmerLights_SwOff
  8226 ;;		_setDimmerLights_SwOn
  8227 ;;		_setRF_DimmerLights
  8228 ;;		_setTxData
  8229 ;; This function is called by:
  8230 ;;		_setControl_Lights_Table
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           
  8235                           ;psect for function _setRFSW_Control
  8236  1294                     _setRFSW_Control:	
  8237                           
  8238                           ;incstack = 0
  8239                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8240                           ;setRFSW_Control@sw stored from wreg
  8241  1294  0021               	movlb	1	; select bank1
  8242  1295  00E7               	movwf	setRFSW_Control@sw^(0+128)
  8243                           
  8244                           ;RF_Control_B1.c: 385: char status = 0;
  8245  1296  01E5               	clrf	setRFSW_Control@status^(0+128)
  8246                           
  8247                           ;RF_Control_B1.c: 386: char rfDimming = 0;
  8248  1297  01E6               	clrf	setRFSW_Control@rfDimming^(0+128)
  8249                           
  8250                           ;RF_Control_B1.c: 387: rfDimming = RF1.flagDimming == 1 ? 1 : 0;
  8251  1298  3000               	movlw	0
  8252  1299  1822               	btfsc	(_RF1^(0+128)+2),0
  8253  129A  3001               	movlw	1
  8254  129B  00E6               	movwf	setRFSW_Control@rfDimming^(0+128)
  8255                           
  8256                           ;RF_Control_B1.c: 389: if (rfDimming == 0) {
  8257  129C  08E6               	movf	setRFSW_Control@rfDimming^(0+128),f
  8258  129D  1D03               	skipz
  8259  129E  2ADE               	goto	l2527
  8260                           
  8261                           ;RF_Control_B1.c: 390: if (RF_Data[16] == 0x80) {
  8262  129F  0023               	movlb	3	; select bank3
  8263  12A0  0830               	movf	(_RF_Data^(0+384)+16),w
  8264  12A1  3A80               	xorlw	128
  8265  12A2  1D03               	skipz
  8266  12A3  2AD1               	goto	l7317
  8267                           
  8268                           ;RF_Control_B1.c: 391: setDelayOff_GO(sw, 1, RF_Data[17]);
  8269  12A4  0020               	movlb	0	; select bank0
  8270  12A5  01E5               	clrf	setDelayOff_GO@command
  8271  12A6  0AE5               	incf	setDelayOff_GO@command,f
  8272  12A7  0023               	movlb	3	; select bank3
  8273  12A8  0831               	movf	(_RF_Data^(0+384)+17),w
  8274  12A9  0020               	movlb	0	; select bank0
  8275  12AA  00ED               	movwf	??_setRFSW_Control
  8276  12AB  086D               	movf	??_setRFSW_Control,w
  8277  12AC  00E6               	movwf	setDelayOff_GO@value
  8278  12AD  0021               	movlb	1	; select bank1
  8279  12AE  0867               	movf	setRFSW_Control@sw^(0+128),w
  8280  12AF  3189  21E0  3192   	fcall	_setDelayOff_GO
  8281                           
  8282                           ;RF_Control_B1.c: 392: if (getDimmerLights_Status(sw) == 1) {
  8283  12B2  0021               	movlb	1	; select bank1
  8284  12B3  0867               	movf	setRFSW_Control@sw^(0+128),w
  8285  12B4  31A7  273F  3192   	fcall	_getDimmerLights_Status
  8286  12B7  3A01               	xorlw	1
  8287  12B8  1D03               	skipz
  8288  12B9  2AD1               	goto	l7317
  8289                           
  8290                           ;RF_Control_B1.c: 393: setBuz(1, 100);
  8291  12BA  3064               	movlw	100
  8292  12BB  0020               	movlb	0	; select bank0
  8293  12BC  00A9               	movwf	setBuz@time
  8294  12BD  3000               	movlw	0
  8295  12BE  00AA               	movwf	setBuz@time+1
  8296  12BF  3001               	movlw	1
  8297  12C0  3191  21E0  3192   	fcall	_setBuz
  8298                           
  8299                           ;RF_Control_B1.c: 394: setRF_DimmerLights(sw, 1);
  8300  12C3  0020               	movlb	0	; select bank0
  8301  12C4  01E5               	clrf	setRF_DimmerLights@on
  8302  12C5  0AE5               	incf	setRF_DimmerLights@on,f
  8303  12C6  0021               	movlb	1	; select bank1
  8304  12C7  0867               	movf	setRFSW_Control@sw^(0+128),w
  8305  12C8  3194  241D  3192   	fcall	_setRF_DimmerLights
  8306                           
  8307                           ;RF_Control_B1.c: 395: setTxData();
  8308  12CB  318D  25A7  3192   	fcall	_setTxData
  8309                           
  8310                           ;RF_Control_B1.c: 396: status = 1;
  8311  12CE  0021               	movlb	1	; select bank1
  8312  12CF  01E5               	clrf	setRFSW_Control@status^(0+128)
  8313  12D0  0AE5               	incf	setRFSW_Control@status^(0+128),f
  8314  12D1                     l7317:	
  8315                           
  8316                           ;RF_Control_B1.c: 397: }
  8317                           ;RF_Control_B1.c: 398: }
  8318                           ;RF_Control_B1.c: 400: if (status == 0) {
  8319  12D1  0021               	movlb	1	; select bank1
  8320  12D2  08E5               	movf	setRFSW_Control@status^(0+128),f
  8321  12D3  1D03               	skipz
  8322  12D4  0008               	return
  8323                           
  8324                           ;RF_Control_B1.c: 402: setDimmerLights_SwOn(sw);
  8325  12D5  0867               	movf	setRFSW_Control@sw^(0+128),w
  8326  12D6  3197  270C  3192   	fcall	_setDimmerLights_SwOn
  8327                           
  8328                           ;RF_Control_B1.c: 403: setDimmerLights_SwOff(sw);
  8329  12D9  0021               	movlb	1	; select bank1
  8330  12DA  0867               	movf	setRFSW_Control@sw^(0+128),w
  8331  12DB  319E  26D5         	fcall	_setDimmerLights_SwOff
  8332                           
  8333                           ;RF_Control_B1.c: 405: }
  8334                           ;RF_Control_B1.c: 406: } else {
  8335  12DD  0008               	return
  8336  12DE                     l2527:	
  8337                           
  8338                           ;RF_Control_B1.c: 408: RF1.flagDimming = 0;
  8339  12DE  1022               	bcf	(_RF1^(0+128)+2),0
  8340                           
  8341                           ;RF_Control_B1.c: 409: DimmerLights->DimmingTrigger = 1;
  8342  12DF  085A               	movf	_DimmerLights^(0+128),w
  8343  12E0  0086               	movwf	6
  8344  12E1  3001               	movlw	1	; select bank2/3
  8345  12E2  0087               	movwf	7
  8346  12E3  1601               	bsf	1,4
  8347                           
  8348                           ;RF_Control_B1.c: 410: DimmerLights->DimmingSwitch = 0;
  8349  12E4  085A               	movf	_DimmerLights^(0+128),w
  8350  12E5  0086               	movwf	6
  8351  12E6  3001               	movlw	1	; select bank2/3
  8352  12E7  0087               	movwf	7
  8353  12E8  1281               	bcf	1,5
  8354                           
  8355                           ;RF_Control_B1.c: 411: setBuz(1, 100);
  8356  12E9  3064               	movlw	100
  8357  12EA  0020               	movlb	0	; select bank0
  8358  12EB  00A9               	movwf	setBuz@time
  8359  12EC  3000               	movlw	0
  8360  12ED  00AA               	movwf	setBuz@time+1
  8361  12EE  3001               	movlw	1
  8362  12EF  3191  21E0         	fcall	_setBuz
  8363  12F1  0008               	return
  8364  12F2                     __end_of_setRFSW_Control:	
  8365                           
  8366                           	psect	text32
  8367  0853                     __ptext32:	
  8368 ;; *************** function _setRFSW_AdjControl *****************
  8369 ;; Defined at:
  8370 ;;		line 416 in file "../src/RF_Control_B1.c"
  8371 ;; Parameters:    Size  Location     Type
  8372 ;;  sw              1    wreg     unsigned char 
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;  sw              1   72[BANK0 ] unsigned char 
  8375 ;;  status          1   71[BANK0 ] unsigned char 
  8376 ;; Return value:  Size  Location     Type
  8377 ;;		None               void
  8378 ;; Registers used:
  8379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8380 ;; Tracked objects:
  8381 ;;		On entry : 0/0
  8382 ;;		On exit  : 0/0
  8383 ;;		Unchanged: 0/0
  8384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8386 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8389 ;;Total ram usage:        4 bytes
  8390 ;; Hardware stack levels used:    1
  8391 ;; Hardware stack levels required when called:    8
  8392 ;; This function calls:
  8393 ;;		_getDimmerLights_PercentToValue
  8394 ;;		_getDimmerLights_Status
  8395 ;;		_setDimmerIntr_Dimming_RF
  8396 ;;		_setDimmerIntr_MaxmumValue
  8397 ;;		_setDimmerLights_DimmingRun
  8398 ;;		_setDimmerLights_SwOff
  8399 ;;		_setDimmerLights_SwOn
  8400 ;;		_setMemory_Modify
  8401 ;;		_setProductData
  8402 ;;		_setTxData
  8403 ;; This function is called by:
  8404 ;;		_setControl_Lights_Table
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           
  8409                           ;psect for function _setRFSW_AdjControl
  8410  0853                     _setRFSW_AdjControl:	
  8411                           
  8412                           ;incstack = 0
  8413                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8414                           ;setRFSW_AdjControl@sw stored from wreg
  8415  0853  0020               	movlb	0	; select bank0
  8416  0854  00E8               	movwf	setRFSW_AdjControl@sw
  8417                           
  8418                           ;RF_Control_B1.c: 417: char status = 0;
  8419  0855  01E7               	clrf	setRFSW_AdjControl@status
  8420                           
  8421                           ;RF_Control_B1.c: 419: status = getDimmerLights_Status(sw);
  8422  0856  0868               	movf	setRFSW_AdjControl@sw,w
  8423  0857  31A7  273F  3188   	fcall	_getDimmerLights_Status
  8424  085A  0020               	movlb	0	; select bank0
  8425  085B  00E5               	movwf	??_setRFSW_AdjControl
  8426  085C  0865               	movf	??_setRFSW_AdjControl,w
  8427  085D  00E7               	movwf	setRFSW_AdjControl@status
  8428                           
  8429                           ;RF_Control_B1.c: 421: if (RF_Data[9] > 0x64) {
  8430  085E  3065               	movlw	101
  8431  085F  0023               	movlb	3	; select bank3
  8432  0860  0229               	subwf	(_RF_Data^(0+384)+9),w
  8433  0861  1C03               	skipc
  8434  0862  286A               	goto	l7333
  8435                           
  8436                           ;RF_Control_B1.c: 422: RF_Data[9] = 0x64;
  8437  0863  3064               	movlw	100
  8438  0864  0020               	movlb	0	; select bank0
  8439  0865  00E5               	movwf	??_setRFSW_AdjControl
  8440  0866  0865               	movf	??_setRFSW_AdjControl,w
  8441  0867  0023               	movlb	3	; select bank3
  8442  0868  00A9               	movwf	(_RF_Data^(0+384)+9)
  8443                           
  8444                           ;RF_Control_B1.c: 423: } else if (RF_Data[9] < 0x01) {
  8445  0869  286F               	goto	l7337
  8446  086A                     l7333:	
  8447  086A  08A9               	movf	(_RF_Data^(0+384)+9),f
  8448  086B  1D03               	skipz
  8449  086C  286F               	goto	l7337
  8450                           
  8451                           ;RF_Control_B1.c: 424: RF_Data[9] = 0x01;
  8452  086D  01A9               	clrf	(_RF_Data^(0+384)+9)
  8453  086E  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8454  086F                     l7337:	
  8455                           
  8456                           ;RF_Control_B1.c: 425: }
  8457                           ;RF_Control_B1.c: 426: setProductData(9, RF_Data[9]);
  8458  086F  0829               	movf	(_RF_Data^(0+384)+9),w
  8459  0870  0020               	movlb	0	; select bank0
  8460  0871  00E5               	movwf	??_setRFSW_AdjControl
  8461  0872  0865               	movf	??_setRFSW_AdjControl,w
  8462  0873  00E2               	movwf	setProductData@value
  8463  0874  3009               	movlw	9
  8464  0875  31A6  26A8  3188   	fcall	_setProductData
  8465                           
  8466                           ;RF_Control_B1.c: 427: setProductData(11, sw);
  8467  0878  0020               	movlb	0	; select bank0
  8468  0879  0868               	movf	setRFSW_AdjControl@sw,w
  8469  087A  00E5               	movwf	??_setRFSW_AdjControl
  8470  087B  0865               	movf	??_setRFSW_AdjControl,w
  8471  087C  00E2               	movwf	setProductData@value
  8472  087D  300B               	movlw	11
  8473  087E  31A6  26A8  3188   	fcall	_setProductData
  8474                           
  8475                           ;RF_Control_B1.c: 428: setProductData(17, product->Data[26 + sw]);
  8476  0881  0020               	movlb	0	; select bank0
  8477  0882  0868               	movf	setRFSW_AdjControl@sw,w
  8478  0883  3E1A               	addlw	26
  8479  0884  0021               	movlb	1	; select bank1
  8480  0885  076E               	addwf	_product^(0+128),w
  8481  0886  0020               	movlb	0	; select bank0
  8482  0887  00E5               	movwf	??_setRFSW_AdjControl
  8483  0888  0865               	movf	??_setRFSW_AdjControl,w
  8484  0889  0086               	movwf	6
  8485  088A  3002               	movlw	2	; select bank4/5
  8486  088B  0087               	movwf	7
  8487  088C  0801               	movf	1,w
  8488  088D  00E6               	movwf	??_setRFSW_AdjControl+1
  8489  088E  0866               	movf	??_setRFSW_AdjControl+1,w
  8490  088F  00E2               	movwf	setProductData@value
  8491  0890  3011               	movlw	17
  8492  0891  31A6  26A8  3188   	fcall	_setProductData
  8493                           
  8494                           ;RF_Control_B1.c: 429: setProductData((20 + sw), RF_Data[9]);
  8495  0894  0023               	movlb	3	; select bank3
  8496  0895  0829               	movf	(_RF_Data^(0+384)+9),w
  8497  0896  0020               	movlb	0	; select bank0
  8498  0897  00E5               	movwf	??_setRFSW_AdjControl
  8499  0898  0865               	movf	??_setRFSW_AdjControl,w
  8500  0899  00E2               	movwf	setProductData@value
  8501  089A  0868               	movf	setRFSW_AdjControl@sw,w
  8502  089B  3E14               	addlw	20
  8503  089C  31A6  26A8  3188   	fcall	_setProductData
  8504                           
  8505                           ;RF_Control_B1.c: 437: setMemory_Modify(1);
  8506  089F  3001               	movlw	1
  8507  08A0  3198  2068  3188   	fcall	_setMemory_Modify
  8508                           
  8509                           ;RF_Control_B1.c: 441: if (status == 1) {
  8510  08A3  0020               	movlb	0	; select bank0
  8511  08A4  0867               	movf	setRFSW_AdjControl@status,w
  8512  08A5  3A01               	xorlw	1
  8513  08A6  1D03               	skipz
  8514  08A7  28BF               	goto	l7347
  8515                           
  8516                           ;RF_Control_B1.c: 442: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8517  08A8  0023               	movlb	3	; select bank3
  8518  08A9  0829               	movf	(_RF_Data^(0+384)+9),w
  8519  08AA  3193  2353  3188   	fcall	_getDimmerLights_PercentToValue
  8520  08AD  0020               	movlb	0	; select bank0
  8521  08AE  00E5               	movwf	??_setRFSW_AdjControl
  8522  08AF  0865               	movf	??_setRFSW_AdjControl,w
  8523  08B0  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8524  08B1  0868               	movf	setRFSW_AdjControl@sw,w
  8525  08B2  3199  2186  3188   	fcall	_setDimmerIntr_MaxmumValue
  8526                           
  8527                           ;RF_Control_B1.c: 443: setDimmerIntr_Dimming_RF(sw, 1);
  8528  08B5  0020               	movlb	0	; select bank0
  8529  08B6  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8530  08B7  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8531  08B8  0868               	movf	setRFSW_AdjControl@sw,w
  8532  08B9  319D  2598  3188   	fcall	_setDimmerIntr_Dimming_RF
  8533                           
  8534                           ;RF_Control_B1.c: 444: setTxData();
  8535  08BC  318D  25A7         	fcall	_setTxData
  8536                           
  8537                           ;RF_Control_B1.c: 446: } else if (status == 0) {
  8538  08BE  0008               	return
  8539  08BF                     l7347:	
  8540  08BF  0020               	movlb	0	; select bank0
  8541  08C0  08E7               	movf	setRFSW_AdjControl@status,f
  8542  08C1  1D03               	skipz
  8543  08C2  0008               	return
  8544                           
  8545                           ;RF_Control_B1.c: 450: setDimmerLights_DimmingRun(sw, 1);
  8546  08C3  01A2               	clrf	setDimmerLights_DimmingRun@command
  8547  08C4  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8548  08C5  0868               	movf	setRFSW_AdjControl@sw,w
  8549  08C6  319A  2264  3188   	fcall	_setDimmerLights_DimmingRun
  8550                           
  8551                           ;RF_Control_B1.c: 451: setDimmerLights_SwOn(sw);
  8552  08C9  0020               	movlb	0	; select bank0
  8553  08CA  0868               	movf	setRFSW_AdjControl@sw,w
  8554  08CB  3197  270C  3188   	fcall	_setDimmerLights_SwOn
  8555                           
  8556                           ;RF_Control_B1.c: 452: setDimmerLights_SwOff(sw);
  8557  08CE  0020               	movlb	0	; select bank0
  8558  08CF  0868               	movf	setRFSW_AdjControl@sw,w
  8559  08D0  319E  26D5         	fcall	_setDimmerLights_SwOff
  8560  08D2  0008               	return
  8561  08D3                     __end_of_setRFSW_AdjControl:	
  8562                           
  8563                           	psect	text33
  8564  1A64                     __ptext33:	
  8565 ;; *************** function _setDimmerLights_DimmingRun *****************
  8566 ;; Defined at:
  8567 ;;		line 1203 in file "../src/Dimmer_B1.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;  lights          1    wreg     unsigned char 
  8570 ;;  command         1    2[BANK0 ] unsigned char 
  8571 ;; Auto vars:     Size  Location     Type
  8572 ;;  lights          1    4[BANK0 ] unsigned char 
  8573 ;; Return value:  Size  Location     Type
  8574 ;;		None               void
  8575 ;; Registers used:
  8576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8577 ;; Tracked objects:
  8578 ;;		On entry : 0/0
  8579 ;;		On exit  : 0/0
  8580 ;;		Unchanged: 0/0
  8581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8582 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;Total ram usage:        3 bytes
  8587 ;; Hardware stack levels used:    1
  8588 ;; Hardware stack levels required when called:    6
  8589 ;; This function calls:
  8590 ;;		_DimmerLights_SelectPointer
  8591 ;; This function is called by:
  8592 ;;		_setRFSW_AdjControl
  8593 ;; This function uses a non-reentrant model
  8594 ;;
  8595                           
  8596                           
  8597                           ;psect for function _setDimmerLights_DimmingRun
  8598  1A64                     _setDimmerLights_DimmingRun:	
  8599                           
  8600                           ;incstack = 0
  8601                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8602                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8603  1A64  0020               	movlb	0	; select bank0
  8604  1A65  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8605                           
  8606                           ;Dimmer_B1.c: 1204: DimmerLights_SelectPointer(lights);
  8607  1A66  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8608  1A67  3199  216F         	fcall	_DimmerLights_SelectPointer
  8609                           
  8610                           ;Dimmer_B1.c: 1205: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8611  1A69  0020               	movlb	0	; select bank0
  8612  1A6A  0822               	movf	setDimmerLights_DimmingRun@command,w
  8613  1A6B  3A01               	xorlw	1
  8614  1A6C  3000               	movlw	0
  8615  1A6D  1903               	skipnz
  8616  1A6E  3001               	movlw	1
  8617  1A6F  00A3               	movwf	??_setDimmerLights_DimmingRun
  8618  1A70  0021               	movlb	1	; select bank1
  8619  1A71  0A5A               	incf	_DimmerLights^(0+128),w
  8620  1A72  0086               	movwf	6
  8621  1A73  3001               	movlw	1	; select bank2/3
  8622  1A74  0087               	movwf	7
  8623  1A75  0020               	movlb	0	; select bank0
  8624  1A76  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8625  1A77  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8626  1A78  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8627  1A79  0801               	movf	1,w
  8628  1A7A  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8629  1A7B  39BF               	andlw	-65
  8630  1A7C  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8631  1A7D  0081               	movwf	1
  8632  1A7E  0008               	return
  8633  1A7F                     __end_of_setDimmerLights_DimmingRun:	
  8634                           
  8635                           	psect	text34
  8636  2783                     __ptext34:	
  8637 ;; *************** function _getRF_KeyStatus *****************
  8638 ;; Defined at:
  8639 ;;		line 166 in file "../src/RF_Control_B1.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;		None
  8642 ;; Auto vars:     Size  Location     Type
  8643 ;;  key             1    1[BANK0 ] unsigned char 
  8644 ;; Return value:  Size  Location     Type
  8645 ;;                  1    wreg      unsigned char 
  8646 ;; Registers used:
  8647 ;;		wreg, status,2
  8648 ;; Tracked objects:
  8649 ;;		On entry : 0/0
  8650 ;;		On exit  : 0/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8654 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;Total ram usage:        3 bytes
  8658 ;; Hardware stack levels used:    1
  8659 ;; Hardware stack levels required when called:    5
  8660 ;; This function calls:
  8661 ;;		Nothing
  8662 ;; This function is called by:
  8663 ;;		_setRF_Main
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           
  8668                           ;psect for function _getRF_KeyStatus
  8669  2783                     _getRF_KeyStatus:	
  8670                           
  8671                           ;RF_Control_B1.c: 167: char key = 0;
  8672                           
  8673                           ;incstack = 0
  8674                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8675  2783  0020               	movlb	0	; select bank0
  8676  2784  01A1               	clrf	getRF_KeyStatus@key
  8677                           
  8678                           ;RF_Control_B1.c: 173: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8679  2785  01A2               	clrf	_getRF_KeyStatus$5789
  8680  2786  0AA2               	incf	_getRF_KeyStatus$5789,f
  8681  2787  1F0C               	btfss	12,6	;volatile
  8682  2788  1A0C               	btfsc	12,4	;volatile
  8683  2789  2F8E               	goto	l8079
  8684  278A  1C0C               	btfss	12,0	;volatile
  8685  278B  188D               	btfsc	13,1	;volatile
  8686  278C  2F8E               	goto	l8079
  8687  278D  01A2               	clrf	_getRF_KeyStatus$5789
  8688  278E                     l8079:	
  8689  278E  0822               	movf	_getRF_KeyStatus$5789,w
  8690  278F  00A0               	movwf	??_getRF_KeyStatus
  8691  2790  0820               	movf	??_getRF_KeyStatus,w
  8692  2791  00A1               	movwf	getRF_KeyStatus@key
  8693                           
  8694                           ;RF_Control_B1.c: 179: return key;
  8695  2792  0821               	movf	getRF_KeyStatus@key,w
  8696  2793  0008               	return
  8697  2794                     __end_of_getRF_KeyStatus:	
  8698                           
  8699                           	psect	text35
  8700  2772                     __ptext35:	
  8701 ;; *************** function _getBuz_GO *****************
  8702 ;; Defined at:
  8703 ;;		line 82 in file "../src/Buzzer_B1.c"
  8704 ;; Parameters:    Size  Location     Type
  8705 ;;		None
  8706 ;; Auto vars:     Size  Location     Type
  8707 ;;  i               2    4[BANK0 ] int 
  8708 ;; Return value:  Size  Location     Type
  8709 ;;                  2    0[BANK0 ] int 
  8710 ;; Registers used:
  8711 ;;		wreg, status,2, status,0
  8712 ;; Tracked objects:
  8713 ;;		On entry : 0/0
  8714 ;;		On exit  : 0/0
  8715 ;;		Unchanged: 0/0
  8716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8717 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8719 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8720 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8721 ;;Total ram usage:        6 bytes
  8722 ;; Hardware stack levels used:    1
  8723 ;; Hardware stack levels required when called:    5
  8724 ;; This function calls:
  8725 ;;		Nothing
  8726 ;; This function is called by:
  8727 ;;		_setRF_Main
  8728 ;; This function uses a non-reentrant model
  8729 ;;
  8730                           
  8731                           
  8732                           ;psect for function _getBuz_GO
  8733  2772                     _getBuz_GO:	
  8734                           
  8735                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8736                           
  8737                           ;incstack = 0
  8738                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8739  2772  0022               	movlb	2	; select bank2
  8740  2773  0C20               	rrf	_Buz1^(0+256),w
  8741  2774  3901               	andlw	1
  8742  2775  0020               	movlb	0	; select bank0
  8743  2776  00A2               	movwf	??_getBuz_GO
  8744  2777  01A3               	clrf	??_getBuz_GO+1
  8745  2778  0822               	movf	??_getBuz_GO,w
  8746  2779  00A4               	movwf	getBuz_GO@i
  8747  277A  0823               	movf	??_getBuz_GO+1,w
  8748  277B  00A5               	movwf	getBuz_GO@i+1
  8749                           
  8750                           ;Buzzer_B1.c: 84: return i;
  8751  277C  0825               	movf	getBuz_GO@i+1,w
  8752  277D  01A1               	clrf	?_getBuz_GO+1
  8753  277E  07A1               	addwf	?_getBuz_GO+1,f
  8754  277F  0824               	movf	getBuz_GO@i,w
  8755  2780  01A0               	clrf	?_getBuz_GO
  8756  2781  07A0               	addwf	?_getBuz_GO,f
  8757  2782  0008               	return
  8758  2783                     __end_of_getBuz_GO:	
  8759                           
  8760                           	psect	text36
  8761  2730                     __ptext36:	
  8762 ;; *************** function _RF_RxDisable *****************
  8763 ;; Defined at:
  8764 ;;		line 154 in file "../src/RF_Control_B1.c"
  8765 ;; Parameters:    Size  Location     Type
  8766 ;;		None
  8767 ;; Auto vars:     Size  Location     Type
  8768 ;;		None
  8769 ;; Return value:  Size  Location     Type
  8770 ;;		None               void
  8771 ;; Registers used:
  8772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8773 ;; Tracked objects:
  8774 ;;		On entry : 0/0
  8775 ;;		On exit  : 0/0
  8776 ;;		Unchanged: 0/0
  8777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;Total ram usage:        0 bytes
  8783 ;; Hardware stack levels used:    1
  8784 ;; Hardware stack levels required when called:    7
  8785 ;; This function calls:
  8786 ;;		_CC2500_WriteCommand
  8787 ;; This function is called by:
  8788 ;;		_setRF_Main
  8789 ;; This function uses a non-reentrant model
  8790 ;;
  8791                           
  8792                           
  8793                           ;psect for function _RF_RxDisable
  8794  2730                     _RF_RxDisable:	
  8795                           
  8796                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8797                           
  8798                           ;incstack = 0
  8799                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8800  2730  0021               	movlb	1	; select bank1
  8801  2731  18A0               	btfsc	_RF1^(0+128),1
  8802  2732  2F35               	goto	l2478
  8803  2733  1DA0               	btfss	_RF1^(0+128),3
  8804  2734  0008               	return
  8805  2735                     l2478:	
  8806                           
  8807                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8808  2735  11A0               	bcf	_RF1^(0+128),3
  8809                           
  8810                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8811  2736  10A0               	bcf	_RF1^(0+128),1
  8812                           
  8813                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8814  2737  3036               	movlw	54
  8815  2738  319A  224A  31A7   	fcall	_CC2500_WriteCommand
  8816                           
  8817                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8818  273B  303A               	movlw	58
  8819  273C  319A  224A         	fcall	_CC2500_WriteCommand
  8820  273E  0008               	return
  8821  273F                     __end_of_RF_RxDisable:	
  8822                           
  8823                           	psect	text37
  8824  15BF                     __ptext37:	
  8825 ;; *************** function _CC2500_TxData *****************
  8826 ;; Defined at:
  8827 ;;		line 32 in file "../src/CC2500_B1.c"
  8828 ;; Parameters:    Size  Location     Type
  8829 ;;		None
  8830 ;; Auto vars:     Size  Location     Type
  8831 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8832 ;; Return value:  Size  Location     Type
  8833 ;;		None               void
  8834 ;; Registers used:
  8835 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8842 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8844 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8845 ;;Total ram usage:        2 bytes
  8846 ;; Hardware stack levels used:    1
  8847 ;; Hardware stack levels required when called:    7
  8848 ;; This function calls:
  8849 ;;		_CC2500_WriteByte
  8850 ;;		_CC2500_WriteCommand
  8851 ;;		_RF_Timeout_Counter
  8852 ;;		_setRF_TimeoutCleared
  8853 ;; This function is called by:
  8854 ;;		_setRF_Main
  8855 ;; This function uses a non-reentrant model
  8856 ;;
  8857                           
  8858                           
  8859                           ;psect for function _CC2500_TxData
  8860  15BF                     _CC2500_TxData:	
  8861                           
  8862                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8863                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8864                           
  8865                           ;incstack = 0
  8866                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8867  15BF  3036               	movlw	54
  8868  15C0  319A  224A  3195   	fcall	_CC2500_WriteCommand
  8869                           
  8870                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8871  15C3  303B               	movlw	59
  8872  15C4  319A  224A  3195   	fcall	_CC2500_WriteCommand
  8873                           
  8874                           ;CC2500_B1.c: 38: RC4 = 0;
  8875  15C7  0020               	movlb	0	; select bank0
  8876  15C8  120E               	bcf	14,4	;volatile
  8877                           
  8878                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8879  15C9  307F               	movlw	127
  8880  15CA  00A4               	movwf	??_CC2500_TxData
  8881  15CB  0824               	movf	??_CC2500_TxData,w
  8882  15CC  0021               	movlb	1	; select bank1
  8883  15CD  00DF               	movwf	_SPI0Buffer^(0+128)
  8884                           
  8885                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8886  15CE  2DD2               	goto	l9951
  8887  15CF                     l9949:	
  8888                           
  8889                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8890  15CF  3198  20EE  3195   	fcall	_RF_Timeout_Counter
  8891  15D2                     l9951:	
  8892  15D2  0020               	movlb	0	; select bank0
  8893  15D3  1D0E               	btfss	14,2	;volatile
  8894  15D4  2DD8               	goto	l9955
  8895  15D5  0021               	movlb	1	; select bank1
  8896  15D6  1F21               	btfss	(_RF1^(0+128)+1),6
  8897  15D7  2DCF               	goto	l9949
  8898  15D8                     l9955:	
  8899                           
  8900                           ;CC2500_B1.c: 42: };
  8901                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8902  15D8  31A5  25F8  3195   	fcall	_setRF_TimeoutCleared
  8903                           
  8904                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8905  15DB  3199  21FD  3195   	fcall	_CC2500_WriteByte
  8906                           
  8907                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8908  15DE  0021               	movlb	1	; select bank1
  8909  15DF  0861               	movf	_Tx_Length^(0+128),w
  8910  15E0  0020               	movlb	0	; select bank0
  8911  15E1  00A4               	movwf	??_CC2500_TxData
  8912  15E2  0824               	movf	??_CC2500_TxData,w
  8913  15E3  0021               	movlb	1	; select bank1
  8914  15E4  00DF               	movwf	_SPI0Buffer^(0+128)
  8915                           
  8916                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8917  15E5  3199  21FD  3195   	fcall	_CC2500_WriteByte
  8918                           
  8919                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8920  15E8  0020               	movlb	0	; select bank0
  8921  15E9  01A5               	clrf	CC2500_TxData@loop_e
  8922  15EA                     l9969:	
  8923  15EA  0021               	movlb	1	; select bank1
  8924  15EB  0861               	movf	_Tx_Length^(0+128),w
  8925  15EC  0020               	movlb	0	; select bank0
  8926  15ED  0225               	subwf	CC2500_TxData@loop_e,w
  8927  15EE  1803               	btfsc	3,0
  8928  15EF  2E03               	goto	l259
  8929                           
  8930                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8931  15F0  0825               	movf	CC2500_TxData@loop_e,w
  8932  15F1  3EA0               	addlw	_RF_Data& (0+255)
  8933  15F2  0086               	movwf	6
  8934  15F3  3001               	movlw	1	; select bank3/4
  8935  15F4  0087               	movwf	7
  8936  15F5  0801               	movf	1,w
  8937  15F6  00A4               	movwf	??_CC2500_TxData
  8938  15F7  0824               	movf	??_CC2500_TxData,w
  8939  15F8  0021               	movlb	1	; select bank1
  8940  15F9  00DF               	movwf	_SPI0Buffer^(0+128)
  8941                           
  8942                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8943  15FA  3199  21FD  3195   	fcall	_CC2500_WriteByte
  8944  15FD  3001               	movlw	1
  8945  15FE  0020               	movlb	0	; select bank0
  8946  15FF  00A4               	movwf	??_CC2500_TxData
  8947  1600  0824               	movf	??_CC2500_TxData,w
  8948  1601  07A5               	addwf	CC2500_TxData@loop_e,f
  8949  1602  2DEA               	goto	l9969
  8950  1603                     l259:	
  8951                           
  8952                           ;CC2500_B1.c: 51: }
  8953                           ;CC2500_B1.c: 52: RC4 = 1;
  8954  1603  160E               	bsf	14,4	;volatile
  8955                           
  8956                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8957  1604  3035               	movlw	53
  8958  1605  319A  224A  3195   	fcall	_CC2500_WriteCommand
  8959                           
  8960                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8961  1608  2E0C               	goto	l9975
  8962  1609                     l9973:	
  8963                           
  8964                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8965  1609  3198  20EE  3195   	fcall	_RF_Timeout_Counter
  8966  160C                     l9975:	
  8967  160C  0020               	movlb	0	; select bank0
  8968  160D  180D               	btfsc	13,0	;volatile
  8969  160E  2E12               	goto	l9979
  8970  160F  0021               	movlb	1	; select bank1
  8971  1610  1F21               	btfss	(_RF1^(0+128)+1),6
  8972  1611  2E09               	goto	l9973
  8973  1612                     l9979:	
  8974                           
  8975                           ;CC2500_B1.c: 56: };
  8976                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8977  1612  31A5  25F8  3195   	fcall	_setRF_TimeoutCleared
  8978                           
  8979                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8980  1615  2E19               	goto	l9983
  8981  1616                     l9981:	
  8982                           
  8983                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8984  1616  3198  20EE  3195   	fcall	_RF_Timeout_Counter
  8985  1619                     l9983:	
  8986  1619  0020               	movlb	0	; select bank0
  8987  161A  1C0D               	btfss	13,0	;volatile
  8988  161B  2E1F               	goto	l9987
  8989  161C  0021               	movlb	1	; select bank1
  8990  161D  1F21               	btfss	(_RF1^(0+128)+1),6
  8991  161E  2E16               	goto	l9981
  8992  161F                     l9987:	
  8993                           
  8994                           ;CC2500_B1.c: 61: };
  8995                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8996  161F  31A5  25F8  3195   	fcall	_setRF_TimeoutCleared
  8997                           
  8998                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8999  1622  3036               	movlw	54
  9000  1623  319A  224A  3195   	fcall	_CC2500_WriteCommand
  9001                           
  9002                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  9003  1626  303B               	movlw	59
  9004  1627  319A  224A         	fcall	_CC2500_WriteCommand
  9005                           
  9006                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  9007  1629  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9008  162A  0008               	return
  9009  162B                     __end_of_CC2500_TxData:	
  9010                           
  9011                           	psect	text38
  9012  1554                     __ptext38:	
  9013 ;; *************** function _CC2500_RxData *****************
  9014 ;; Defined at:
  9015 ;;		line 73 in file "../src/CC2500_B1.c"
  9016 ;; Parameters:    Size  Location     Type
  9017 ;;		None
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9020 ;; Return value:  Size  Location     Type
  9021 ;;		None               void
  9022 ;; Registers used:
  9023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9024 ;; Tracked objects:
  9025 ;;		On entry : 0/0
  9026 ;;		On exit  : 0/0
  9027 ;;		Unchanged: 0/0
  9028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9031 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;Total ram usage:        2 bytes
  9034 ;; Hardware stack levels used:    1
  9035 ;; Hardware stack levels required when called:    7
  9036 ;; This function calls:
  9037 ;;		_CC2500_ReadByte
  9038 ;;		_CC2500_ReadStatus
  9039 ;;		_CC2500_WriteByte
  9040 ;;		_CC2500_WriteCommand
  9041 ;;		_RF_Timeout_Counter
  9042 ;;		_setRF_TimeoutCleared
  9043 ;; This function is called by:
  9044 ;;		_setRF_Main
  9045 ;; This function uses a non-reentrant model
  9046 ;;
  9047                           
  9048                           
  9049                           ;psect for function _CC2500_RxData
  9050  1554                     _CC2500_RxData:	
  9051                           
  9052                           ;CC2500_B1.c: 74: unsigned char loop_f;
  9053                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  9054                           
  9055                           ;incstack = 0
  9056                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9057  1554  0020               	movlb	0	; select bank0
  9058  1555  180D               	btfsc	13,0	;volatile
  9059  1556  0008               	return
  9060                           
  9061                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  9062  1557  303B               	movlw	59
  9063  1558  319C  2479  3195   	fcall	_CC2500_ReadStatus
  9064                           
  9065                           ;CC2500_B1.c: 89: if (s_data != 0) {
  9066  155B  0021               	movlb	1	; select bank1
  9067  155C  0864               	movf	_s_data^(0+128),w
  9068  155D  1903               	btfsc	3,2
  9069  155E  0008               	return
  9070                           
  9071                           ;CC2500_B1.c: 90: RC4 = 0;
  9072  155F  0020               	movlb	0	; select bank0
  9073  1560  120E               	bcf	14,4	;volatile
  9074                           
  9075                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  9076  1561  30FF               	movlw	255
  9077  1562  00A4               	movwf	??_CC2500_RxData
  9078  1563  0824               	movf	??_CC2500_RxData,w
  9079  1564  0021               	movlb	1	; select bank1
  9080  1565  00DF               	movwf	_SPI0Buffer^(0+128)
  9081                           
  9082                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  9083  1566  2D6A               	goto	l10007
  9084  1567                     l10005:	
  9085                           
  9086                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  9087  1567  3198  20EE  3195   	fcall	_RF_Timeout_Counter
  9088  156A                     l10007:	
  9089  156A  0020               	movlb	0	; select bank0
  9090  156B  1D0E               	btfss	14,2	;volatile
  9091  156C  2D70               	goto	l10011
  9092  156D  0021               	movlb	1	; select bank1
  9093  156E  1F21               	btfss	(_RF1^(0+128)+1),6
  9094  156F  2D67               	goto	l10005
  9095  1570                     l10011:	
  9096                           
  9097                           ;CC2500_B1.c: 95: };
  9098                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  9099  1570  31A5  25F8  3195   	fcall	_setRF_TimeoutCleared
  9100                           
  9101                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  9102  1573  3199  21FD  3195   	fcall	_CC2500_WriteByte
  9103                           
  9104                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  9105  1576  319A  22B7  3195   	fcall	_CC2500_ReadByte
  9106                           
  9107                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  9108  1579  0021               	movlb	1	; select bank1
  9109  157A  085F               	movf	_SPI0Buffer^(0+128),w
  9110  157B  0020               	movlb	0	; select bank0
  9111  157C  00A4               	movwf	??_CC2500_RxData
  9112  157D  0824               	movf	??_CC2500_RxData,w
  9113  157E  0021               	movlb	1	; select bank1
  9114  157F  00DE               	movwf	_Rx_Length^(0+128)
  9115                           
  9116                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9117  1580  0020               	movlb	0	; select bank0
  9118  1581  01A5               	clrf	CC2500_RxData@loop_f
  9119  1582                     l10027:	
  9120  1582  0021               	movlb	1	; select bank1
  9121  1583  085E               	movf	_Rx_Length^(0+128),w
  9122  1584  0020               	movlb	0	; select bank0
  9123  1585  0225               	subwf	CC2500_RxData@loop_f,w
  9124  1586  1803               	btfsc	3,0
  9125  1587  2D9B               	goto	l10029
  9126                           
  9127                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9128  1588  319A  22B7  3195   	fcall	_CC2500_ReadByte
  9129                           
  9130                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  9131  158B  0021               	movlb	1	; select bank1
  9132  158C  085F               	movf	_SPI0Buffer^(0+128),w
  9133  158D  0020               	movlb	0	; select bank0
  9134  158E  00A4               	movwf	??_CC2500_RxData
  9135  158F  0825               	movf	CC2500_RxData@loop_f,w
  9136  1590  3EA0               	addlw	_RF_Data& (0+255)
  9137  1591  0086               	movwf	6
  9138  1592  3001               	movlw	1	; select bank3/4
  9139  1593  0087               	movwf	7
  9140  1594  0824               	movf	??_CC2500_RxData,w
  9141  1595  0081               	movwf	1
  9142  1596  3001               	movlw	1
  9143  1597  00A4               	movwf	??_CC2500_RxData
  9144  1598  0824               	movf	??_CC2500_RxData,w
  9145  1599  07A5               	addwf	CC2500_RxData@loop_f,f
  9146  159A  2D82               	goto	l10027
  9147  159B                     l10029:	
  9148                           
  9149                           ;CC2500_B1.c: 104: }
  9150                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  9151  159B  319A  22B7  3195   	fcall	_CC2500_ReadByte
  9152                           
  9153                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  9154  159E  0021               	movlb	1	; select bank1
  9155  159F  085F               	movf	_SPI0Buffer^(0+128),w
  9156  15A0  0020               	movlb	0	; select bank0
  9157  15A1  00A4               	movwf	??_CC2500_RxData
  9158  15A2  0824               	movf	??_CC2500_RxData,w
  9159  15A3  0021               	movlb	1	; select bank1
  9160  15A4  00DD               	movwf	_RSSI^(0+128)
  9161                           
  9162                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  9163  15A5  319A  22B7  3195   	fcall	_CC2500_ReadByte
  9164                           
  9165                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  9166  15A8  0021               	movlb	1	; select bank1
  9167  15A9  085F               	movf	_SPI0Buffer^(0+128),w
  9168  15AA  0020               	movlb	0	; select bank0
  9169  15AB  00A4               	movwf	??_CC2500_RxData
  9170  15AC  0824               	movf	??_CC2500_RxData,w
  9171  15AD  0021               	movlb	1	; select bank1
  9172  15AE  00D6               	movwf	_CRC^(0+128)
  9173                           
  9174                           ;CC2500_B1.c: 109: RC4 = 1;
  9175  15AF  0020               	movlb	0	; select bank0
  9176  15B0  160E               	bsf	14,4	;volatile
  9177                           
  9178                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  9179  15B1  0021               	movlb	1	; select bank1
  9180  15B2  1BD6               	btfsc	_CRC^(0+128),7
  9181                           
  9182                           ;CC2500_B1.c: 111: Receive_OK = 1;
  9183  15B3  146F               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  9184                           
  9185                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  9186  15B4  11A0               	bcf	_RF1^(0+128),3
  9187                           
  9188                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  9189  15B5  14A0               	bsf	_RF1^(0+128),1
  9190                           
  9191                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  9192  15B6  3036               	movlw	54
  9193  15B7  319A  224A  3195   	fcall	_CC2500_WriteCommand
  9194                           
  9195                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  9196  15BA  303A               	movlw	58
  9197  15BB  319A  224A         	fcall	_CC2500_WriteCommand
  9198  15BD  0021               	movlb	1	; select bank1
  9199  15BE  0008               	return
  9200  15BF                     __end_of_CC2500_RxData:	
  9201                           
  9202                           	psect	text39
  9203  1C79                     __ptext39:	
  9204 ;; *************** function _CC2500_ReadStatus *****************
  9205 ;; Defined at:
  9206 ;;		line 308 in file "../src/CC2500_B1.c"
  9207 ;; Parameters:    Size  Location     Type
  9208 ;;  status_addr     1    wreg     unsigned char 
  9209 ;; Auto vars:     Size  Location     Type
  9210 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9211 ;; Return value:  Size  Location     Type
  9212 ;;		None               void
  9213 ;; Registers used:
  9214 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9215 ;; Tracked objects:
  9216 ;;		On entry : 0/0
  9217 ;;		On exit  : 0/0
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9221 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9222 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9223 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9224 ;;Total ram usage:        2 bytes
  9225 ;; Hardware stack levels used:    1
  9226 ;; Hardware stack levels required when called:    6
  9227 ;; This function calls:
  9228 ;;		_CC2500_ReadByte
  9229 ;;		_CC2500_WriteByte
  9230 ;;		_RF_Timeout_Counter
  9231 ;;		_setRF_TimeoutCleared
  9232 ;; This function is called by:
  9233 ;;		_CC2500_RxData
  9234 ;; This function uses a non-reentrant model
  9235 ;;
  9236                           
  9237                           
  9238                           ;psect for function _CC2500_ReadStatus
  9239  1C79                     _CC2500_ReadStatus:	
  9240                           
  9241                           ;incstack = 0
  9242                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9243                           ;CC2500_ReadStatus@status_addr stored from wreg
  9244  1C79  0020               	movlb	0	; select bank0
  9245  1C7A  00A3               	movwf	CC2500_ReadStatus@status_addr
  9246                           
  9247                           ;CC2500_B1.c: 309: RC4 = 0;
  9248  1C7B  120E               	bcf	14,4	;volatile
  9249                           
  9250                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9251  1C7C  0823               	movf	CC2500_ReadStatus@status_addr,w
  9252  1C7D  3EC0               	addlw	192
  9253  1C7E  00A2               	movwf	??_CC2500_ReadStatus
  9254  1C7F  0822               	movf	??_CC2500_ReadStatus,w
  9255  1C80  0021               	movlb	1	; select bank1
  9256  1C81  00DF               	movwf	_SPI0Buffer^(0+128)
  9257                           
  9258                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  9259  1C82  2C86               	goto	l9807
  9260  1C83                     l9805:	
  9261                           
  9262                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9263  1C83  3198  20EE  319C   	fcall	_RF_Timeout_Counter
  9264  1C86                     l9807:	
  9265  1C86  0020               	movlb	0	; select bank0
  9266  1C87  1D0E               	btfss	14,2	;volatile
  9267  1C88  2C8C               	goto	l9811
  9268  1C89  0021               	movlb	1	; select bank1
  9269  1C8A  1F21               	btfss	(_RF1^(0+128)+1),6
  9270  1C8B  2C83               	goto	l9805
  9271  1C8C                     l9811:	
  9272                           
  9273                           ;CC2500_B1.c: 314: };
  9274                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9275  1C8C  31A5  25F8  319C   	fcall	_setRF_TimeoutCleared
  9276                           
  9277                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9278  1C8F  3199  21FD  319C   	fcall	_CC2500_WriteByte
  9279                           
  9280                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9281  1C92  319A  22B7         	fcall	_CC2500_ReadByte
  9282                           
  9283                           ;CC2500_B1.c: 319: RC4 = 1;
  9284  1C94  0020               	movlb	0	; select bank0
  9285  1C95  160E               	bsf	14,4	;volatile
  9286                           
  9287                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9288  1C96  0021               	movlb	1	; select bank1
  9289  1C97  085F               	movf	_SPI0Buffer^(0+128),w
  9290  1C98  0020               	movlb	0	; select bank0
  9291  1C99  00A2               	movwf	??_CC2500_ReadStatus
  9292  1C9A  0822               	movf	??_CC2500_ReadStatus,w
  9293  1C9B  0021               	movlb	1	; select bank1
  9294  1C9C  00E4               	movwf	_s_data^(0+128)
  9295  1C9D  0008               	return
  9296  1C9E                     __end_of_CC2500_ReadStatus:	
  9297                           
  9298                           	psect	text40
  9299  1AB7                     __ptext40:	
  9300 ;; *************** function _CC2500_ReadByte *****************
  9301 ;; Defined at:
  9302 ;;		line 242 in file "../src/CC2500_B1.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;		None
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9307 ;; Return value:  Size  Location     Type
  9308 ;;		None               void
  9309 ;; Registers used:
  9310 ;;		wreg, status,2, status,0
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;Total ram usage:        2 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    5
  9323 ;; This function calls:
  9324 ;;		Nothing
  9325 ;; This function is called by:
  9326 ;;		_CC2500_RxData
  9327 ;;		_CC2500_ReadStatus
  9328 ;;		_CC2500_ReadREG
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           
  9333                           ;psect for function _CC2500_ReadByte
  9334  1AB7                     _CC2500_ReadByte:	
  9335                           
  9336                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9337                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9338                           
  9339                           ;incstack = 0
  9340                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9341  1AB7  0020               	movlb	0	; select bank0
  9342  1AB8  01A1               	clrf	CC2500_ReadByte@loop_b
  9343  1AB9                     L4:	
  9344  1AB9  3008               	movlw	8
  9345  1ABA  0221               	subwf	CC2500_ReadByte@loop_b,w
  9346  1ABB  1803               	btfsc	3,0
  9347  1ABC  0008               	return
  9348                           
  9349                           ;CC2500_B1.c: 245: RC1 = 1;
  9350  1ABD  148E               	bsf	14,1	;volatile
  9351                           
  9352                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9353  1ABE  1003               	clrc
  9354  1ABF  0021               	movlb	1	; select bank1
  9355  1AC0  0DDF               	rlf	_SPI0Buffer^(0+128),f
  9356                           
  9357                           ;CC2500_B1.c: 247: if (RC2 == 1)
  9358  1AC1  0020               	movlb	0	; select bank0
  9359  1AC2  1D0E               	btfss	14,2	;volatile
  9360  1AC3  2AC7               	goto	l9769
  9361                           
  9362                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9363  1AC4  0021               	movlb	1	; select bank1
  9364  1AC5  145F               	bsf	_SPI0Buffer^(0+128),0
  9365  1AC6  2ACD               	goto	l9771
  9366  1AC7                     l9769:	
  9367                           
  9368                           ;CC2500_B1.c: 249: else
  9369                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9370  1AC7  30FE               	movlw	254
  9371  1AC8  0020               	movlb	0	; select bank0
  9372  1AC9  00A0               	movwf	??_CC2500_ReadByte
  9373  1ACA  0820               	movf	??_CC2500_ReadByte,w
  9374  1ACB  0021               	movlb	1	; select bank1
  9375  1ACC  05DF               	andwf	_SPI0Buffer^(0+128),f
  9376  1ACD                     l9771:	
  9377                           
  9378                           ;CC2500_B1.c: 251: RC1 = 0;
  9379  1ACD  0020               	movlb	0	; select bank0
  9380  1ACE  108E               	bcf	14,1	;volatile
  9381  1ACF  3001               	movlw	1
  9382  1AD0  00A0               	movwf	??_CC2500_ReadByte
  9383  1AD1  0820               	movf	??_CC2500_ReadByte,w
  9384  1AD2  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9385  1AD3  2AB9               	goto	L4
  9386  1AD4                     __end_of_CC2500_ReadByte:	
  9387                           
  9388                           	psect	text41
  9389  1903                     __ptext41:	
  9390 ;; *************** function _CC2500_PowerOnInitial *****************
  9391 ;; Defined at:
  9392 ;;		line 126 in file "../src/CC2500_B1.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;		None
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;		None
  9397 ;; Return value:  Size  Location     Type
  9398 ;;		None               void
  9399 ;; Registers used:
  9400 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;Total ram usage:        0 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; Hardware stack levels required when called:    8
  9413 ;; This function calls:
  9414 ;;		_CC2500_ClearRXFIFO
  9415 ;;		_CC2500_ClearTXFIFO
  9416 ;;		_CC2500_FrequencyCabr
  9417 ;;		_CC2500_InitPATable
  9418 ;;		_CC2500_InitSetREG
  9419 ;;		_CC2500_PowerRST
  9420 ;;		_CC2500_SIDLEMode
  9421 ;; This function is called by:
  9422 ;;		_main
  9423 ;;		_setRF_Main
  9424 ;; This function uses a non-reentrant model
  9425 ;;
  9426                           
  9427                           
  9428                           ;psect for function _CC2500_PowerOnInitial
  9429  1903                     _CC2500_PowerOnInitial:	
  9430                           
  9431                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9432                           
  9433                           ;incstack = 0
  9434                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9435  1903  3190  20F4  3199   	fcall	_CC2500_PowerRST
  9436                           
  9437                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9438  1906  319D  2514  3199   	fcall	_CC2500_InitSetREG
  9439                           
  9440                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9441  1909  319B  2310  3199   	fcall	_CC2500_InitPATable
  9442                           
  9443                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9444  190C  31A6  2600  3199   	fcall	_CC2500_ClearTXFIFO
  9445                           
  9446                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9447  190F  31A5  25FC  3199   	fcall	_CC2500_ClearRXFIFO
  9448                           
  9449                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9450  1912  31A7  2708  3199   	fcall	_CC2500_FrequencyCabr
  9451                           
  9452                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9453  1915  31A6  2604         	fcall	_CC2500_SIDLEMode
  9454  1917  0008               	return
  9455  1918                     __end_of_CC2500_PowerOnInitial:	
  9456                           
  9457                           	psect	text42
  9458  2604                     __ptext42:	
  9459 ;; *************** function _CC2500_SIDLEMode *****************
  9460 ;; Defined at:
  9461 ;;		line 216 in file "../src/CC2500_B1.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;		None
  9466 ;; Return value:  Size  Location     Type
  9467 ;;		None               void
  9468 ;; Registers used:
  9469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;Total ram usage:        0 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    7
  9482 ;; This function calls:
  9483 ;;		_CC2500_WriteCommand
  9484 ;; This function is called by:
  9485 ;;		_CC2500_PowerOnInitial
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           
  9490                           ;psect for function _CC2500_SIDLEMode
  9491  2604                     _CC2500_SIDLEMode:	
  9492                           
  9493                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9494                           
  9495                           ;incstack = 0
  9496                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9497  2604  3036               	movlw	54
  9498  2605  319A  224A         	fcall	_CC2500_WriteCommand
  9499  2607  0008               	return
  9500  2608                     __end_of_CC2500_SIDLEMode:	
  9501                           
  9502                           	psect	text43
  9503  10F4                     __ptext43:	
  9504 ;; *************** function _CC2500_PowerRST *****************
  9505 ;; Defined at:
  9506 ;;		line 139 in file "../src/CC2500_B1.c"
  9507 ;; Parameters:    Size  Location     Type
  9508 ;;		None
  9509 ;; Auto vars:     Size  Location     Type
  9510 ;;		None
  9511 ;; Return value:  Size  Location     Type
  9512 ;;		None               void
  9513 ;; Registers used:
  9514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9515 ;; Tracked objects:
  9516 ;;		On entry : 0/0
  9517 ;;		On exit  : 0/0
  9518 ;;		Unchanged: 0/0
  9519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9524 ;;Total ram usage:        1 bytes
  9525 ;; Hardware stack levels used:    1
  9526 ;; Hardware stack levels required when called:    6
  9527 ;; This function calls:
  9528 ;;		_CC2500_WriteByte
  9529 ;;		_DelayTime_1us
  9530 ;;		_RF_Timeout_Counter
  9531 ;;		_setRF_TimeoutCleared
  9532 ;; This function is called by:
  9533 ;;		_CC2500_PowerOnInitial
  9534 ;; This function uses a non-reentrant model
  9535 ;;
  9536                           
  9537                           
  9538                           ;psect for function _CC2500_PowerRST
  9539  10F4                     _CC2500_PowerRST:	
  9540                           
  9541                           ;CC2500_B1.c: 140: RC1 = 0;
  9542                           
  9543                           ;incstack = 0
  9544                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9545  10F4  0020               	movlb	0	; select bank0
  9546  10F5  108E               	bcf	14,1	;volatile
  9547                           
  9548                           ;CC2500_B1.c: 141: RC0 = 0;
  9549  10F6  100E               	bcf	14,0	;volatile
  9550                           
  9551                           ;CC2500_B1.c: 142: RC4 = 1;
  9552  10F7  160E               	bsf	14,4	;volatile
  9553                           
  9554                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9555  10F8  300A               	movlw	10
  9556  10F9  00A0               	movwf	DelayTime_1us@count
  9557  10FA  3000               	movlw	0
  9558  10FB  00A1               	movwf	DelayTime_1us@count+1
  9559  10FC  319C  249E  3190   	fcall	_DelayTime_1us
  9560                           
  9561                           ;CC2500_B1.c: 144: RC4 = 0;
  9562  10FF  0020               	movlb	0	; select bank0
  9563  1100  120E               	bcf	14,4	;volatile
  9564                           
  9565                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9566  1101  300A               	movlw	10
  9567  1102  00A0               	movwf	DelayTime_1us@count
  9568  1103  3000               	movlw	0
  9569  1104  00A1               	movwf	DelayTime_1us@count+1
  9570  1105  319C  249E  3190   	fcall	_DelayTime_1us
  9571                           
  9572                           ;CC2500_B1.c: 146: RC4 = 1;
  9573  1108  0020               	movlb	0	; select bank0
  9574  1109  160E               	bsf	14,4	;volatile
  9575                           
  9576                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9577  110A  3028               	movlw	40
  9578  110B  00A0               	movwf	DelayTime_1us@count
  9579  110C  3000               	movlw	0
  9580  110D  00A1               	movwf	DelayTime_1us@count+1
  9581  110E  319C  249E  3190   	fcall	_DelayTime_1us
  9582                           
  9583                           ;CC2500_B1.c: 148: RC4 = 0;
  9584  1111  0020               	movlb	0	; select bank0
  9585  1112  120E               	bcf	14,4	;volatile
  9586                           
  9587                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9588  1113  3030               	movlw	48
  9589  1114  00A6               	movwf	??_CC2500_PowerRST
  9590  1115  0826               	movf	??_CC2500_PowerRST,w
  9591  1116  0021               	movlb	1	; select bank1
  9592  1117  00DF               	movwf	_SPI0Buffer^(0+128)
  9593                           
  9594                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9595  1118  291C               	goto	l9835
  9596  1119                     l9833:	
  9597                           
  9598                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9599  1119  3198  20EE  3190   	fcall	_RF_Timeout_Counter
  9600  111C                     l9835:	
  9601  111C  0020               	movlb	0	; select bank0
  9602  111D  1D0E               	btfss	14,2	;volatile
  9603  111E  2922               	goto	l9839
  9604  111F  0021               	movlb	1	; select bank1
  9605  1120  1F21               	btfss	(_RF1^(0+128)+1),6
  9606  1121  2919               	goto	l9833
  9607  1122                     l9839:	
  9608                           
  9609                           ;CC2500_B1.c: 152: };
  9610                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9611  1122  31A5  25F8  3190   	fcall	_setRF_TimeoutCleared
  9612                           
  9613                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9614  1125  3199  21FD  3190   	fcall	_CC2500_WriteByte
  9615                           
  9616                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9617  1128  292C               	goto	l9845
  9618  1129                     l9843:	
  9619                           
  9620                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9621  1129  3198  20EE  3190   	fcall	_RF_Timeout_Counter
  9622  112C                     l9845:	
  9623  112C  0020               	movlb	0	; select bank0
  9624  112D  1D0E               	btfss	14,2	;volatile
  9625  112E  2932               	goto	l9849
  9626  112F  0021               	movlb	1	; select bank1
  9627  1130  1F21               	btfss	(_RF1^(0+128)+1),6
  9628  1131  2929               	goto	l9843
  9629  1132                     l9849:	
  9630                           
  9631                           ;CC2500_B1.c: 157: };
  9632                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9633  1132  31A5  25F8         	fcall	_setRF_TimeoutCleared
  9634                           
  9635                           ;CC2500_B1.c: 159: RC0 = 0;
  9636  1134  0020               	movlb	0	; select bank0
  9637  1135  100E               	bcf	14,0	;volatile
  9638                           
  9639                           ;CC2500_B1.c: 160: RC4 = 1;
  9640  1136  160E               	bsf	14,4	;volatile
  9641  1137  0008               	return
  9642  1138                     __end_of_CC2500_PowerRST:	
  9643                           
  9644                           	psect	text44
  9645  1D14                     __ptext44:	
  9646 ;; *************** function _CC2500_InitSetREG *****************
  9647 ;; Defined at:
  9648 ;;		line 166 in file "../src/CC2500_B1.c"
  9649 ;; Parameters:    Size  Location     Type
  9650 ;;		None
  9651 ;; Auto vars:     Size  Location     Type
  9652 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9653 ;;  temp2           1    7[BANK0 ] unsigned char 
  9654 ;;  temp1           1    6[BANK0 ] unsigned char 
  9655 ;; Return value:  Size  Location     Type
  9656 ;;		None               void
  9657 ;; Registers used:
  9658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9659 ;; Tracked objects:
  9660 ;;		On entry : 0/0
  9661 ;;		On exit  : 0/0
  9662 ;;		Unchanged: 0/0
  9663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;Total ram usage:        4 bytes
  9669 ;; Hardware stack levels used:    1
  9670 ;; Hardware stack levels required when called:    7
  9671 ;; This function calls:
  9672 ;;		_CC2500_WriteREG
  9673 ;; This function is called by:
  9674 ;;		_CC2500_PowerOnInitial
  9675 ;; This function uses a non-reentrant model
  9676 ;;
  9677                           
  9678                           
  9679                           ;psect for function _CC2500_InitSetREG
  9680  1D14                     _CC2500_InitSetREG:	
  9681                           
  9682                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9683                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9684                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9685                           
  9686                           ;incstack = 0
  9687                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9688  1D14  0020               	movlb	0	; select bank0
  9689  1D15  01A8               	clrf	CC2500_InitSetREG@loop_c
  9690  1D16                     L5:	
  9691  1D16  302F               	movlw	47
  9692  1D17  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9693  1D18  1803               	btfsc	3,0
  9694  1D19  0008               	return
  9695                           
  9696                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9697  1D1A  0828               	movf	CC2500_InitSetREG@loop_c,w
  9698  1D1B  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9699  1D1C  0084               	movwf	4
  9700  1D1D  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9701  1D1E  1803               	skipnc
  9702  1D1F  3E01               	addlw	1
  9703  1D20  0085               	movwf	5
  9704  1D21  0800               	movf	0,w	;code access
  9705  1D22  00A5               	movwf	??_CC2500_InitSetREG
  9706  1D23  0825               	movf	??_CC2500_InitSetREG,w
  9707  1D24  00A6               	movwf	CC2500_InitSetREG@temp1
  9708                           
  9709                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9710  1D25  0828               	movf	CC2500_InitSetREG@loop_c,w
  9711  1D26  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9712  1D27  0084               	movwf	4
  9713  1D28  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9714  1D29  1803               	skipnc
  9715  1D2A  3E01               	addlw	1
  9716  1D2B  0085               	movwf	5
  9717  1D2C  0800               	movf	0,w	;code access
  9718  1D2D  00A5               	movwf	??_CC2500_InitSetREG
  9719  1D2E  0825               	movf	??_CC2500_InitSetREG,w
  9720  1D2F  00A7               	movwf	CC2500_InitSetREG@temp2
  9721                           
  9722                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9723  1D30  0827               	movf	CC2500_InitSetREG@temp2,w
  9724  1D31  00A5               	movwf	??_CC2500_InitSetREG
  9725  1D32  0825               	movf	??_CC2500_InitSetREG,w
  9726  1D33  00A2               	movwf	CC2500_WriteREG@value
  9727  1D34  0826               	movf	CC2500_InitSetREG@temp1,w
  9728  1D35  319C  2456  319D   	fcall	_CC2500_WriteREG
  9729  1D38  3001               	movlw	1
  9730  1D39  0020               	movlb	0	; select bank0
  9731  1D3A  00A5               	movwf	??_CC2500_InitSetREG
  9732  1D3B  0825               	movf	??_CC2500_InitSetREG,w
  9733  1D3C  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9734  1D3D  2D16               	goto	L5
  9735  1D3E                     __end_of_CC2500_InitSetREG:	
  9736                           
  9737                           	psect	text45
  9738  1B10                     __ptext45:	
  9739 ;; *************** function _CC2500_InitPATable *****************
  9740 ;; Defined at:
  9741 ;;		line 181 in file "../src/CC2500_B1.c"
  9742 ;; Parameters:    Size  Location     Type
  9743 ;;		None
  9744 ;; Auto vars:     Size  Location     Type
  9745 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9746 ;;  temp            1    6[BANK0 ] unsigned char 
  9747 ;; Return value:  Size  Location     Type
  9748 ;;		None               void
  9749 ;; Registers used:
  9750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9751 ;; Tracked objects:
  9752 ;;		On entry : 0/0
  9753 ;;		On exit  : 0/0
  9754 ;;		Unchanged: 0/0
  9755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;Total ram usage:        3 bytes
  9761 ;; Hardware stack levels used:    1
  9762 ;; Hardware stack levels required when called:    7
  9763 ;; This function calls:
  9764 ;;		_CC2500_WriteREG
  9765 ;; This function is called by:
  9766 ;;		_CC2500_PowerOnInitial
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           
  9771                           ;psect for function _CC2500_InitPATable
  9772  1B10                     _CC2500_InitPATable:	
  9773                           
  9774                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9775                           ;CC2500_B1.c: 183: unsigned char temp;
  9776                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9777                           
  9778                           ;incstack = 0
  9779                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9780  1B10  0020               	movlb	0	; select bank0
  9781  1B11  01A7               	clrf	CC2500_InitPATable@loop_d
  9782  1B12                     L6:	
  9783  1B12  3008               	movlw	8
  9784  1B13  0227               	subwf	CC2500_InitPATable@loop_d,w
  9785  1B14  1803               	btfsc	3,0
  9786  1B15  0008               	return
  9787                           
  9788                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9789  1B16  0827               	movf	CC2500_InitPATable@loop_d,w
  9790  1B17  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9791  1B18  0084               	movwf	4
  9792  1B19  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9793  1B1A  1803               	skipnc
  9794  1B1B  3E01               	addlw	1
  9795  1B1C  0085               	movwf	5
  9796  1B1D  0800               	movf	0,w	;code access
  9797  1B1E  00A5               	movwf	??_CC2500_InitPATable
  9798  1B1F  0825               	movf	??_CC2500_InitPATable,w
  9799  1B20  00A6               	movwf	CC2500_InitPATable@temp
  9800                           
  9801                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9802  1B21  0826               	movf	CC2500_InitPATable@temp,w
  9803  1B22  00A5               	movwf	??_CC2500_InitPATable
  9804  1B23  0825               	movf	??_CC2500_InitPATable,w
  9805  1B24  00A2               	movwf	CC2500_WriteREG@value
  9806  1B25  303E               	movlw	62
  9807  1B26  319C  2456  319B   	fcall	_CC2500_WriteREG
  9808  1B29  3001               	movlw	1
  9809  1B2A  0020               	movlb	0	; select bank0
  9810  1B2B  00A5               	movwf	??_CC2500_InitPATable
  9811  1B2C  0825               	movf	??_CC2500_InitPATable,w
  9812  1B2D  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9813  1B2E  2B12               	goto	L6
  9814  1B2F                     __end_of_CC2500_InitPATable:	
  9815                           
  9816                           	psect	text46
  9817  1C56                     __ptext46:	
  9818 ;; *************** function _CC2500_WriteREG *****************
  9819 ;; Defined at:
  9820 ;;		line 258 in file "../src/CC2500_B1.c"
  9821 ;; Parameters:    Size  Location     Type
  9822 ;;  w_addr          1    wreg     unsigned char 
  9823 ;;  value           1    2[BANK0 ] unsigned char 
  9824 ;; Auto vars:     Size  Location     Type
  9825 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9826 ;; Return value:  Size  Location     Type
  9827 ;;		None               void
  9828 ;; Registers used:
  9829 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9830 ;; Tracked objects:
  9831 ;;		On entry : 0/0
  9832 ;;		On exit  : 0/0
  9833 ;;		Unchanged: 0/0
  9834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9835 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;Total ram usage:        3 bytes
  9840 ;; Hardware stack levels used:    1
  9841 ;; Hardware stack levels required when called:    6
  9842 ;; This function calls:
  9843 ;;		_CC2500_WriteByte
  9844 ;;		_RF_Timeout_Counter
  9845 ;;		_setRF_TimeoutCleared
  9846 ;; This function is called by:
  9847 ;;		_CC2500_InitSetREG
  9848 ;;		_CC2500_InitPATable
  9849 ;; This function uses a non-reentrant model
  9850 ;;
  9851                           
  9852                           
  9853                           ;psect for function _CC2500_WriteREG
  9854  1C56                     _CC2500_WriteREG:	
  9855                           
  9856                           ;incstack = 0
  9857                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9858                           ;CC2500_WriteREG@w_addr stored from wreg
  9859  1C56  0020               	movlb	0	; select bank0
  9860  1C57  00A4               	movwf	CC2500_WriteREG@w_addr
  9861                           
  9862                           ;CC2500_B1.c: 259: RC4 = 0;
  9863  1C58  120E               	bcf	14,4	;volatile
  9864                           
  9865                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9866  1C59  0824               	movf	CC2500_WriteREG@w_addr,w
  9867  1C5A  00A3               	movwf	??_CC2500_WriteREG
  9868  1C5B  0823               	movf	??_CC2500_WriteREG,w
  9869  1C5C  0021               	movlb	1	; select bank1
  9870  1C5D  00DF               	movwf	_SPI0Buffer^(0+128)
  9871                           
  9872                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9873  1C5E  2C62               	goto	l9781
  9874  1C5F                     l9779:	
  9875                           
  9876                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9877  1C5F  3198  20EE  319C   	fcall	_RF_Timeout_Counter
  9878  1C62                     l9781:	
  9879  1C62  0020               	movlb	0	; select bank0
  9880  1C63  1D0E               	btfss	14,2	;volatile
  9881  1C64  2C68               	goto	l9785
  9882  1C65  0021               	movlb	1	; select bank1
  9883  1C66  1F21               	btfss	(_RF1^(0+128)+1),6
  9884  1C67  2C5F               	goto	l9779
  9885  1C68                     l9785:	
  9886                           
  9887                           ;CC2500_B1.c: 263: };
  9888                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9889  1C68  31A5  25F8  319C   	fcall	_setRF_TimeoutCleared
  9890                           
  9891                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9892  1C6B  3199  21FD  319C   	fcall	_CC2500_WriteByte
  9893                           
  9894                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9895  1C6E  0020               	movlb	0	; select bank0
  9896  1C6F  0822               	movf	CC2500_WriteREG@value,w
  9897  1C70  00A3               	movwf	??_CC2500_WriteREG
  9898  1C71  0823               	movf	??_CC2500_WriteREG,w
  9899  1C72  0021               	movlb	1	; select bank1
  9900  1C73  00DF               	movwf	_SPI0Buffer^(0+128)
  9901                           
  9902                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9903  1C74  3199  21FD         	fcall	_CC2500_WriteByte
  9904                           
  9905                           ;CC2500_B1.c: 269: RC4 = 1;
  9906  1C76  0020               	movlb	0	; select bank0
  9907  1C77  160E               	bsf	14,4	;volatile
  9908  1C78  0008               	return
  9909  1C79                     __end_of_CC2500_WriteREG:	
  9910                           
  9911                           	psect	text47
  9912  2708                     __ptext47:	
  9913 ;; *************** function _CC2500_FrequencyCabr *****************
  9914 ;; Defined at:
  9915 ;;		line 208 in file "../src/CC2500_B1.c"
  9916 ;; Parameters:    Size  Location     Type
  9917 ;;		None
  9918 ;; Auto vars:     Size  Location     Type
  9919 ;;		None
  9920 ;; Return value:  Size  Location     Type
  9921 ;;		None               void
  9922 ;; Registers used:
  9923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9924 ;; Tracked objects:
  9925 ;;		On entry : 0/0
  9926 ;;		On exit  : 0/0
  9927 ;;		Unchanged: 0/0
  9928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;Total ram usage:        0 bytes
  9934 ;; Hardware stack levels used:    1
  9935 ;; Hardware stack levels required when called:    7
  9936 ;; This function calls:
  9937 ;;		_CC2500_WriteCommand
  9938 ;;		_DelayTime_1us
  9939 ;; This function is called by:
  9940 ;;		_CC2500_PowerOnInitial
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           
  9945                           ;psect for function _CC2500_FrequencyCabr
  9946  2708                     _CC2500_FrequencyCabr:	
  9947                           
  9948                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9949                           
  9950                           ;incstack = 0
  9951                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9952  2708  3033               	movlw	51
  9953  2709  319A  224A  31A7   	fcall	_CC2500_WriteCommand
  9954                           
  9955                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9956  270C  30E8               	movlw	232
  9957  270D  0020               	movlb	0	; select bank0
  9958  270E  00A0               	movwf	DelayTime_1us@count
  9959  270F  3003               	movlw	3
  9960  2710  00A1               	movwf	DelayTime_1us@count+1
  9961  2711  319C  249E         	fcall	_DelayTime_1us
  9962  2713  0008               	return
  9963  2714                     __end_of_CC2500_FrequencyCabr:	
  9964                           
  9965                           	psect	text48
  9966  1C9E                     __ptext48:	
  9967 ;; *************** function _DelayTime_1us *****************
  9968 ;; Defined at:
  9969 ;;		line 327 in file "../src/CC2500_B1.c"
  9970 ;; Parameters:    Size  Location     Type
  9971 ;;  count           2    0[BANK0 ] int 
  9972 ;; Auto vars:     Size  Location     Type
  9973 ;;  j               2    4[BANK0 ] unsigned int 
  9974 ;;  i               2    2[BANK0 ] unsigned int 
  9975 ;; Return value:  Size  Location     Type
  9976 ;;		None               void
  9977 ;; Registers used:
  9978 ;;		wreg, status,2
  9979 ;; Tracked objects:
  9980 ;;		On entry : 0/0
  9981 ;;		On exit  : 0/0
  9982 ;;		Unchanged: 0/0
  9983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9984 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9985 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;Total ram usage:        6 bytes
  9989 ;; Hardware stack levels used:    1
  9990 ;; Hardware stack levels required when called:    5
  9991 ;; This function calls:
  9992 ;;		Nothing
  9993 ;; This function is called by:
  9994 ;;		_CC2500_PowerRST
  9995 ;;		_CC2500_FrequencyCabr
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           
 10000                           ;psect for function _DelayTime_1us
 10001  1C9E                     _DelayTime_1us:	
 10002                           
 10003                           ;CC2500_B1.c: 328: unsigned int i, j;
 10004                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
 10005                           
 10006                           ;incstack = 0
 10007                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 10008  1C9E  3001               	movlw	1
 10009  1C9F  0020               	movlb	0	; select bank0
 10010  1CA0  00A2               	movwf	DelayTime_1us@i
 10011  1CA1  3000               	movlw	0
 10012  1CA2  00A3               	movwf	DelayTime_1us@i+1
 10013  1CA3                     l371:	
 10014  1CA3  0821               	movf	DelayTime_1us@count+1,w
 10015  1CA4  0223               	subwf	DelayTime_1us@i+1,w
 10016  1CA5  1D03               	skipz
 10017  1CA6  2CA9               	goto	u6595
 10018  1CA7  0820               	movf	DelayTime_1us@count,w
 10019  1CA8  0222               	subwf	DelayTime_1us@i,w
 10020  1CA9                     u6595:	
 10021  1CA9  1803               	btfsc	3,0
 10022  1CAA  0008               	return
 10023                           
 10024                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
 10025  1CAB  01A4               	clrf	DelayTime_1us@j
 10026  1CAC  01A5               	clrf	DelayTime_1us@j+1
 10027  1CAD  3000               	movlw	0
 10028  1CAE  0225               	subwf	DelayTime_1us@j+1,w
 10029  1CAF  3002               	movlw	2
 10030  1CB0  1903               	skipnz
 10031  1CB1  0224               	subwf	DelayTime_1us@j,w
 10032  1CB2  1803               	btfsc	3,0
 10033  1CB3  2CBF               	goto	l7241
 10034  1CB4                     l7239:	
 10035  1CB4  3001               	movlw	1
 10036  1CB5  07A4               	addwf	DelayTime_1us@j,f
 10037  1CB6  3000               	movlw	0
 10038  1CB7  3DA5               	addwfc	DelayTime_1us@j+1,f
 10039  1CB8  3000               	movlw	0
 10040  1CB9  0225               	subwf	DelayTime_1us@j+1,w
 10041  1CBA  3002               	movlw	2
 10042  1CBB  1903               	skipnz
 10043  1CBC  0224               	subwf	DelayTime_1us@j,w
 10044  1CBD  1C03               	skipc
 10045  1CBE  2CB4               	goto	l7239
 10046  1CBF                     l7241:	
 10047  1CBF  3001               	movlw	1
 10048  1CC0  07A2               	addwf	DelayTime_1us@i,f
 10049  1CC1  3000               	movlw	0
 10050  1CC2  3DA3               	addwfc	DelayTime_1us@i+1,f
 10051  1CC3  2CA3               	goto	l371
 10052  1CC4                     __end_of_DelayTime_1us:	
 10053                           
 10054                           	psect	text49
 10055  2600                     __ptext49:	
 10056 ;; *************** function _CC2500_ClearTXFIFO *****************
 10057 ;; Defined at:
 10058 ;;		line 194 in file "../src/CC2500_B1.c"
 10059 ;; Parameters:    Size  Location     Type
 10060 ;;		None
 10061 ;; Auto vars:     Size  Location     Type
 10062 ;;		None
 10063 ;; Return value:  Size  Location     Type
 10064 ;;		None               void
 10065 ;; Registers used:
 10066 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10067 ;; Tracked objects:
 10068 ;;		On entry : 0/0
 10069 ;;		On exit  : 0/0
 10070 ;;		Unchanged: 0/0
 10071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10076 ;;Total ram usage:        0 bytes
 10077 ;; Hardware stack levels used:    1
 10078 ;; Hardware stack levels required when called:    7
 10079 ;; This function calls:
 10080 ;;		_CC2500_WriteCommand
 10081 ;; This function is called by:
 10082 ;;		_CC2500_PowerOnInitial
 10083 ;; This function uses a non-reentrant model
 10084 ;;
 10085                           
 10086                           
 10087                           ;psect for function _CC2500_ClearTXFIFO
 10088  2600                     _CC2500_ClearTXFIFO:	
 10089                           
 10090                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
 10091                           
 10092                           ;incstack = 0
 10093                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10094  2600  303B               	movlw	59
 10095  2601  319A  224A         	fcall	_CC2500_WriteCommand
 10096  2603  0008               	return
 10097  2604                     __end_of_CC2500_ClearTXFIFO:	
 10098                           
 10099                           	psect	text50
 10100  25FC                     __ptext50:	
 10101 ;; *************** function _CC2500_ClearRXFIFO *****************
 10102 ;; Defined at:
 10103 ;;		line 201 in file "../src/CC2500_B1.c"
 10104 ;; Parameters:    Size  Location     Type
 10105 ;;		None
 10106 ;; Auto vars:     Size  Location     Type
 10107 ;;		None
 10108 ;; Return value:  Size  Location     Type
 10109 ;;		None               void
 10110 ;; Registers used:
 10111 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10112 ;; Tracked objects:
 10113 ;;		On entry : 0/0
 10114 ;;		On exit  : 0/0
 10115 ;;		Unchanged: 0/0
 10116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;Total ram usage:        0 bytes
 10122 ;; Hardware stack levels used:    1
 10123 ;; Hardware stack levels required when called:    7
 10124 ;; This function calls:
 10125 ;;		_CC2500_WriteCommand
 10126 ;; This function is called by:
 10127 ;;		_CC2500_PowerOnInitial
 10128 ;; This function uses a non-reentrant model
 10129 ;;
 10130                           
 10131                           
 10132                           ;psect for function _CC2500_ClearRXFIFO
 10133  25FC                     _CC2500_ClearRXFIFO:	
 10134                           
 10135                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
 10136                           
 10137                           ;incstack = 0
 10138                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10139  25FC  303A               	movlw	58
 10140  25FD  319A  224A         	fcall	_CC2500_WriteCommand
 10141  25FF  0008               	return
 10142  2600                     __end_of_CC2500_ClearRXFIFO:	
 10143                           
 10144                           	psect	text51
 10145  1A4A                     __ptext51:	
 10146 ;; *************** function _CC2500_WriteCommand *****************
 10147 ;; Defined at:
 10148 ;;		line 292 in file "../src/CC2500_B1.c"
 10149 ;; Parameters:    Size  Location     Type
 10150 ;;  command         1    wreg     unsigned char 
 10151 ;; Auto vars:     Size  Location     Type
 10152 ;;  command         1    3[BANK0 ] unsigned char 
 10153 ;; Return value:  Size  Location     Type
 10154 ;;		None               void
 10155 ;; Registers used:
 10156 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10157 ;; Tracked objects:
 10158 ;;		On entry : 0/0
 10159 ;;		On exit  : 0/0
 10160 ;;		Unchanged: 0/0
 10161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10163 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10164 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10165 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10166 ;;Total ram usage:        2 bytes
 10167 ;; Hardware stack levels used:    1
 10168 ;; Hardware stack levels required when called:    6
 10169 ;; This function calls:
 10170 ;;		_CC2500_WriteByte
 10171 ;;		_RF_Timeout_Counter
 10172 ;;		_setRF_TimeoutCleared
 10173 ;; This function is called by:
 10174 ;;		_CC2500_TxData
 10175 ;;		_CC2500_RxData
 10176 ;;		_CC2500_ClearTXFIFO
 10177 ;;		_CC2500_ClearRXFIFO
 10178 ;;		_CC2500_FrequencyCabr
 10179 ;;		_CC2500_SIDLEMode
 10180 ;;		_setRF_Main
 10181 ;;		_RF_RxDisable
 10182 ;; This function uses a non-reentrant model
 10183 ;;
 10184                           
 10185                           
 10186                           ;psect for function _CC2500_WriteCommand
 10187  1A4A                     _CC2500_WriteCommand:	
 10188                           
 10189                           ;incstack = 0
 10190                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10191                           ;CC2500_WriteCommand@command stored from wreg
 10192  1A4A  0020               	movlb	0	; select bank0
 10193  1A4B  00A3               	movwf	CC2500_WriteCommand@command
 10194                           
 10195                           ;CC2500_B1.c: 293: RC4 = 0;
 10196  1A4C  120E               	bcf	14,4	;volatile
 10197                           
 10198                           ;CC2500_B1.c: 294: SPI0Buffer = command;
 10199  1A4D  0823               	movf	CC2500_WriteCommand@command,w
 10200  1A4E  00A2               	movwf	??_CC2500_WriteCommand
 10201  1A4F  0822               	movf	??_CC2500_WriteCommand,w
 10202  1A50  0021               	movlb	1	; select bank1
 10203  1A51  00DF               	movwf	_SPI0Buffer^(0+128)
 10204                           
 10205                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
 10206  1A52  2A56               	goto	l9747
 10207  1A53                     l9745:	
 10208                           
 10209                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
 10210  1A53  3198  20EE  319A   	fcall	_RF_Timeout_Counter
 10211  1A56                     l9747:	
 10212  1A56  0020               	movlb	0	; select bank0
 10213  1A57  1D0E               	btfss	14,2	;volatile
 10214  1A58  2A5C               	goto	l9751
 10215  1A59  0021               	movlb	1	; select bank1
 10216  1A5A  1F21               	btfss	(_RF1^(0+128)+1),6
 10217  1A5B  2A53               	goto	l9745
 10218  1A5C                     l9751:	
 10219                           
 10220                           ;CC2500_B1.c: 298: };
 10221                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
 10222  1A5C  31A5  25F8  319A   	fcall	_setRF_TimeoutCleared
 10223                           
 10224                           ;CC2500_B1.c: 301: CC2500_WriteByte();
 10225  1A5F  3199  21FD         	fcall	_CC2500_WriteByte
 10226                           
 10227                           ;CC2500_B1.c: 302: RC4 = 1;
 10228  1A61  0020               	movlb	0	; select bank0
 10229  1A62  160E               	bsf	14,4	;volatile
 10230  1A63  0008               	return
 10231  1A64                     __end_of_CC2500_WriteCommand:	
 10232                           
 10233                           	psect	text52
 10234  25F8                     __ptext52:	
 10235 ;; *************** function _setRF_TimeoutCleared *****************
 10236 ;; Defined at:
 10237 ;;		line 149 in file "../src/RF_Control_B1.c"
 10238 ;; Parameters:    Size  Location     Type
 10239 ;;		None
 10240 ;; Auto vars:     Size  Location     Type
 10241 ;;		None
 10242 ;; Return value:  Size  Location     Type
 10243 ;;		None               void
 10244 ;; Registers used:
 10245 ;;		status,2
 10246 ;; Tracked objects:
 10247 ;;		On entry : 0/0
 10248 ;;		On exit  : 0/0
 10249 ;;		Unchanged: 0/0
 10250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10255 ;;Total ram usage:        0 bytes
 10256 ;; Hardware stack levels used:    1
 10257 ;; Hardware stack levels required when called:    5
 10258 ;; This function calls:
 10259 ;;		Nothing
 10260 ;; This function is called by:
 10261 ;;		_CC2500_TxData
 10262 ;;		_CC2500_RxData
 10263 ;;		_CC2500_PowerRST
 10264 ;;		_CC2500_WriteREG
 10265 ;;		_CC2500_WriteCommand
 10266 ;;		_CC2500_ReadStatus
 10267 ;;		_CC2500_ReadREG
 10268 ;; This function uses a non-reentrant model
 10269 ;;
 10270                           
 10271                           
 10272                           ;psect for function _setRF_TimeoutCleared
 10273  25F8                     _setRF_TimeoutCleared:	
 10274                           
 10275                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
 10276                           
 10277                           ;incstack = 0
 10278                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10279  25F8  0021               	movlb	1	; select bank1
 10280  25F9  01AD               	clrf	(_RF1^(0+128)+13)
 10281  25FA  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10282  25FB  0008               	return
 10283  25FC                     __end_of_setRF_TimeoutCleared:	
 10284                           
 10285                           	psect	text53
 10286  18EE                     __ptext53:	
 10287 ;; *************** function _RF_Timeout_Counter *****************
 10288 ;; Defined at:
 10289 ;;		line 141 in file "../src/RF_Control_B1.c"
 10290 ;; Parameters:    Size  Location     Type
 10291 ;;		None
 10292 ;; Auto vars:     Size  Location     Type
 10293 ;;		None
 10294 ;; Return value:  Size  Location     Type
 10295 ;;		None               void
 10296 ;; Registers used:
 10297 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10298 ;; Tracked objects:
 10299 ;;		On entry : 0/0
 10300 ;;		On exit  : 0/0
 10301 ;;		Unchanged: 0/0
 10302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;Total ram usage:        0 bytes
 10308 ;; Hardware stack levels used:    1
 10309 ;; Hardware stack levels required when called:    5
 10310 ;; This function calls:
 10311 ;;		Nothing
 10312 ;; This function is called by:
 10313 ;;		_CC2500_TxData
 10314 ;;		_CC2500_RxData
 10315 ;;		_CC2500_PowerRST
 10316 ;;		_CC2500_WriteREG
 10317 ;;		_CC2500_WriteCommand
 10318 ;;		_CC2500_ReadStatus
 10319 ;;		_CC2500_ReadREG
 10320 ;; This function uses a non-reentrant model
 10321 ;;
 10322                           
 10323                           
 10324                           ;psect for function _RF_Timeout_Counter
 10325  18EE                     _RF_Timeout_Counter:	
 10326                           
 10327                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
 10328                           
 10329                           ;incstack = 0
 10330                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10331  18EE  3001               	movlw	1
 10332  18EF  0021               	movlb	1	; select bank1
 10333  18F0  07AD               	addwf	(_RF1^(0+128)+13),f
 10334  18F1  3000               	movlw	0
 10335  18F2  3DAE               	addwfc	((_RF1+1)^(0+128)+13),f
 10336                           
 10337                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
 10338  18F3  300D               	movlw	13
 10339  18F4  3EA0               	addlw	_RF1& (0+255)
 10340  18F5  0086               	movwf	6
 10341  18F6  0187               	clrf	7
 10342  18F7  3F40               	moviw [0]fsr1
 10343  18F8  3AA8               	xorlw	168
 10344  18F9  1D03               	skipz
 10345  18FA  28FD               	goto	u10675
 10346  18FB  3F41               	moviw [1]fsr1
 10347  18FC  3A61               	xorlw	97
 10348  18FD                     u10675:	
 10349  18FD  1D03               	skipz
 10350  18FE  0008               	return
 10351                           
 10352                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
 10353  18FF  01AD               	clrf	(_RF1^(0+128)+13)
 10354  1900  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10355                           
 10356                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
 10357  1901  1721               	bsf	(_RF1^(0+128)+1),6
 10358  1902  0008               	return
 10359  1903                     __end_of_RF_Timeout_Counter:	
 10360                           
 10361                           	psect	text54
 10362  19FD                     __ptext54:	
 10363 ;; *************** function _CC2500_WriteByte *****************
 10364 ;; Defined at:
 10365 ;;		line 226 in file "../src/CC2500_B1.c"
 10366 ;; Parameters:    Size  Location     Type
 10367 ;;		None
 10368 ;; Auto vars:     Size  Location     Type
 10369 ;;  loop_a          1    1[BANK0 ] unsigned char 
 10370 ;; Return value:  Size  Location     Type
 10371 ;;		None               void
 10372 ;; Registers used:
 10373 ;;		wreg, status,2, status,0
 10374 ;; Tracked objects:
 10375 ;;		On entry : 0/0
 10376 ;;		On exit  : 0/0
 10377 ;;		Unchanged: 0/0
 10378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;Total ram usage:        2 bytes
 10384 ;; Hardware stack levels used:    1
 10385 ;; Hardware stack levels required when called:    5
 10386 ;; This function calls:
 10387 ;;		Nothing
 10388 ;; This function is called by:
 10389 ;;		_CC2500_TxData
 10390 ;;		_CC2500_RxData
 10391 ;;		_CC2500_PowerRST
 10392 ;;		_CC2500_WriteREG
 10393 ;;		_CC2500_WriteCommand
 10394 ;;		_CC2500_ReadStatus
 10395 ;;		_CC2500_ReadREG
 10396 ;; This function uses a non-reentrant model
 10397 ;;
 10398                           
 10399                           
 10400                           ;psect for function _CC2500_WriteByte
 10401  19FD                     _CC2500_WriteByte:	
 10402                           
 10403                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10404                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10405                           
 10406                           ;incstack = 0
 10407                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10408  19FD  0020               	movlb	0	; select bank0
 10409  19FE  01A1               	clrf	CC2500_WriteByte@loop_a
 10410  19FF                     L7:	
 10411  19FF  3008               	movlw	8
 10412  1A00  0221               	subwf	CC2500_WriteByte@loop_a,w
 10413  1A01  1803               	btfsc	3,0
 10414  1A02  0008               	return
 10415                           
 10416                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10417  1A03  0021               	movlb	1	; select bank1
 10418  1A04  1FDF               	btfss	_SPI0Buffer^(0+128),7
 10419  1A05  2A09               	goto	l327
 10420                           
 10421                           ;CC2500_B1.c: 230: RC0 = 1;
 10422  1A06  0020               	movlb	0	; select bank0
 10423  1A07  140E               	bsf	14,0	;volatile
 10424  1A08  2A0B               	goto	l328
 10425  1A09                     l327:	
 10426                           
 10427                           ;CC2500_B1.c: 231: else
 10428                           ;CC2500_B1.c: 232: RC0 = 0;
 10429  1A09  0020               	movlb	0	; select bank0
 10430  1A0A  100E               	bcf	14,0	;volatile
 10431  1A0B                     l328:	
 10432                           
 10433                           ;CC2500_B1.c: 233: RC1 = 1;
 10434  1A0B  148E               	bsf	14,1	;volatile
 10435                           
 10436                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10437  1A0C  1003               	clrc
 10438  1A0D  0021               	movlb	1	; select bank1
 10439  1A0E  0DDF               	rlf	_SPI0Buffer^(0+128),f
 10440                           
 10441                           ;CC2500_B1.c: 235: RC1 = 0;
 10442  1A0F  0020               	movlb	0	; select bank0
 10443  1A10  108E               	bcf	14,1	;volatile
 10444  1A11  3001               	movlw	1
 10445  1A12  00A0               	movwf	??_CC2500_WriteByte
 10446  1A13  0820               	movf	??_CC2500_WriteByte,w
 10447  1A14  07A1               	addwf	CC2500_WriteByte@loop_a,f
 10448  1A15  29FF               	goto	L7
 10449  1A16                     __end_of_CC2500_WriteByte:	
 10450                           
 10451                           	psect	text55
 10452  25E8                     __ptext55:	
 10453 ;; *************** function _RF_Initialization *****************
 10454 ;; Defined at:
 10455 ;;		line 9 in file "../src/RF_Control_B1.c"
 10456 ;; Parameters:    Size  Location     Type
 10457 ;;		None
 10458 ;; Auto vars:     Size  Location     Type
 10459 ;;		None
 10460 ;; Return value:  Size  Location     Type
 10461 ;;		None               void
 10462 ;; Registers used:
 10463 ;;		wreg, status,2, status,0, pclath, cstack
 10464 ;; Tracked objects:
 10465 ;;		On entry : 0/0
 10466 ;;		On exit  : 0/0
 10467 ;;		Unchanged: 0/0
 10468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;Total ram usage:        0 bytes
 10474 ;; Hardware stack levels used:    1
 10475 ;; Hardware stack levels required when called:    6
 10476 ;; This function calls:
 10477 ;;		_setRF_Initialization
 10478 ;; This function is called by:
 10479 ;;		_main
 10480 ;; This function uses a non-reentrant model
 10481 ;;
 10482                           
 10483                           
 10484                           ;psect for function _RF_Initialization
 10485  25E8                     _RF_Initialization:	
 10486                           
 10487                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10488                           
 10489                           ;incstack = 0
 10490                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10491  25E8  31A6  2686         	fcall	_setRF_Initialization
 10492  25EA  0008               	return
 10493  25EB                     __end_of_RF_Initialization:	
 10494                           
 10495                           	psect	text56
 10496  2686                     __ptext56:	
 10497 ;; *************** function _setRF_Initialization *****************
 10498 ;; Defined at:
 10499 ;;		line 17 in file "../src/RF_Control_B1.c"
 10500 ;; Parameters:    Size  Location     Type
 10501 ;;		None
 10502 ;; Auto vars:     Size  Location     Type
 10503 ;;		None
 10504 ;; Return value:  Size  Location     Type
 10505 ;;		None               void
 10506 ;; Registers used:
 10507 ;;		wreg
 10508 ;; Tracked objects:
 10509 ;;		On entry : 0/0
 10510 ;;		On exit  : 0/0
 10511 ;;		Unchanged: 0/0
 10512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10514 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10516 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10517 ;;Total ram usage:        1 bytes
 10518 ;; Hardware stack levels used:    1
 10519 ;; Hardware stack levels required when called:    5
 10520 ;; This function calls:
 10521 ;;		Nothing
 10522 ;; This function is called by:
 10523 ;;		_RF_Initialization
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           
 10528                           ;psect for function _setRF_Initialization
 10529  2686                     _setRF_Initialization:	
 10530                           
 10531                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10532                           
 10533                           ;incstack = 0
 10534                           ; Regs used in _setRF_Initialization: [wreg]
 10535  2686  3015               	movlw	21
 10536  2687  0020               	movlb	0	; select bank0
 10537  2688  00A0               	movwf	??_setRF_Initialization
 10538  2689  0820               	movf	??_setRF_Initialization,w
 10539  268A  0021               	movlb	1	; select bank1
 10540  268B  00E1               	movwf	_Tx_Length^(0+128)
 10541                           
 10542                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10543  268C  30C8               	movlw	200
 10544  268D  00A8               	movwf	(_RF1^(0+128)+8)
 10545  268E  3000               	movlw	0
 10546  268F  00A9               	movwf	(_RF1^(0+128)+9)
 10547  2690  0008               	return
 10548  2691                     __end_of_setRF_Initialization:	
 10549                           
 10550                           	psect	text57
 10551  27DC                     __ptext57:	
 10552 ;; *************** function _Mcu_Initialization *****************
 10553 ;; Defined at:
 10554 ;;		line 30 in file "../src/MCU_B1.c"
 10555 ;; Parameters:    Size  Location     Type
 10556 ;;		None
 10557 ;; Auto vars:     Size  Location     Type
 10558 ;;		None
 10559 ;; Return value:  Size  Location     Type
 10560 ;;		None               void
 10561 ;; Registers used:
 10562 ;;		wreg, status,2, status,0, pclath, cstack
 10563 ;; Tracked objects:
 10564 ;;		On entry : 0/0
 10565 ;;		On exit  : 0/0
 10566 ;;		Unchanged: 0/0
 10567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;Total ram usage:        0 bytes
 10573 ;; Hardware stack levels used:    1
 10574 ;; Hardware stack levels required when called:    6
 10575 ;; This function calls:
 10576 ;;		_ADC_Set
 10577 ;;		_Fosc_Set
 10578 ;;		_IOC_Set
 10579 ;;		_IO_Set
 10580 ;;		_TMR1_Set
 10581 ;;		_WDT_Set
 10582 ;; This function is called by:
 10583 ;;		_main
 10584 ;; This function uses a non-reentrant model
 10585 ;;
 10586                           
 10587                           
 10588                           ;psect for function _Mcu_Initialization
 10589  27DC                     _Mcu_Initialization:	
 10590                           
 10591                           ;MCU_B1.c: 32: Fosc_Set();
 10592                           
 10593                           ;incstack = 0
 10594                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10595  27DC  31A5  25F4  31A7   	fcall	_Fosc_Set
 10596                           
 10597                           ;MCU_B1.c: 34: IO_Set();
 10598  27DF  319A  2230  31A7   	fcall	_IO_Set
 10599                           
 10600                           ;MCU_B1.c: 36: ;;
 10601                           ;MCU_B1.c: 38: TMR1_Set();
 10602  27E2  31A6  26F0  31A7   	fcall	_TMR1_Set
 10603                           
 10604                           ;MCU_B1.c: 40: ADC_Set();
 10605  27E5  31A6  261F  31A7   	fcall	_ADC_Set
 10606                           
 10607                           ;MCU_B1.c: 42: ;;
 10608                           ;MCU_B1.c: 44: ;;
 10609                           ;MCU_B1.c: 46: IOC_Set();
 10610  27E8  31A6  267B  31A7   	fcall	_IOC_Set
 10611                           
 10612                           ;MCU_B1.c: 48: ;;
 10613                           ;MCU_B1.c: 50: ;;
 10614                           ;MCU_B1.c: 52: WDT_Set();
 10615  27EB  31A6  26FC         	fcall	_WDT_Set
 10616  27ED  0008               	return
 10617  27EE                     __end_of_Mcu_Initialization:	
 10618                           
 10619                           	psect	text58
 10620  26FC                     __ptext58:	
 10621 ;; *************** function _WDT_Set *****************
 10622 ;; Defined at:
 10623 ;;		line 1102 in file "../src/MCU_B1.c"
 10624 ;; Parameters:    Size  Location     Type
 10625 ;;		None
 10626 ;; Auto vars:     Size  Location     Type
 10627 ;;		None
 10628 ;; Return value:  Size  Location     Type
 10629 ;;		None               void
 10630 ;; Registers used:
 10631 ;;		wreg
 10632 ;; Tracked objects:
 10633 ;;		On entry : 0/0
 10634 ;;		On exit  : 0/0
 10635 ;;		Unchanged: 0/0
 10636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10639 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10640 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10641 ;;Total ram usage:        1 bytes
 10642 ;; Hardware stack levels used:    1
 10643 ;; Hardware stack levels required when called:    5
 10644 ;; This function calls:
 10645 ;;		Nothing
 10646 ;; This function is called by:
 10647 ;;		_Mcu_Initialization
 10648 ;; This function uses a non-reentrant model
 10649 ;;
 10650                           
 10651                           
 10652                           ;psect for function _WDT_Set
 10653  26FC                     _WDT_Set:	
 10654                           
 10655                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10656                           
 10657                           ;incstack = 0
 10658                           ; Regs used in _WDT_Set: [wreg]
 10659  26FC  3017               	movlw	23
 10660  26FD  0021               	movlb	1	; select bank1
 10661  26FE  0097               	movwf	23	;volatile
 10662                           
 10663                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10664  26FF  0022               	movlb	2	; select bank2
 10665  2700  1436               	bsf	_WDT^(0+256),0
 10666                           
 10667                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10668  2701  300A               	movlw	10
 10669  2702  0020               	movlb	0	; select bank0
 10670  2703  00A0               	movwf	??_WDT_Set
 10671  2704  0820               	movf	??_WDT_Set,w
 10672  2705  0022               	movlb	2	; select bank2
 10673  2706  00B7               	movwf	(_WDT^(0+256)+1)
 10674  2707  0008               	return
 10675  2708                     __end_of_WDT_Set:	
 10676                           
 10677                           	psect	text59
 10678  26F0                     __ptext59:	
 10679 ;; *************** function _TMR1_Set *****************
 10680 ;; Defined at:
 10681 ;;		line 226 in file "../src/MCU_B1.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;		None
 10684 ;; Auto vars:     Size  Location     Type
 10685 ;;		None
 10686 ;; Return value:  Size  Location     Type
 10687 ;;		None               void
 10688 ;; Registers used:
 10689 ;;		wreg
 10690 ;; Tracked objects:
 10691 ;;		On entry : 0/0
 10692 ;;		On exit  : 0/0
 10693 ;;		Unchanged: 0/0
 10694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;Total ram usage:        0 bytes
 10700 ;; Hardware stack levels used:    1
 10701 ;; Hardware stack levels required when called:    5
 10702 ;; This function calls:
 10703 ;;		Nothing
 10704 ;; This function is called by:
 10705 ;;		_Mcu_Initialization
 10706 ;; This function uses a non-reentrant model
 10707 ;;
 10708                           
 10709                           
 10710                           ;psect for function _TMR1_Set
 10711  26F0                     _TMR1_Set:	
 10712                           
 10713                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10714                           
 10715                           ;incstack = 0
 10716                           ; Regs used in _TMR1_Set: [wreg]
 10717  26F0  3041               	movlw	65
 10718  26F1  0020               	movlb	0	; select bank0
 10719  26F2  0098               	movwf	24	;volatile
 10720                           
 10721                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10722  26F3  30FA               	movlw	250
 10723  26F4  0097               	movwf	23	;volatile
 10724                           
 10725                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10726  26F5  3038               	movlw	56
 10727  26F6  0096               	movwf	22	;volatile
 10728                           
 10729                           ;MCU_B1.c: 230: TMR1IE = 1;
 10730  26F7  0021               	movlb	1	; select bank1
 10731  26F8  1411               	bsf	17,0	;volatile
 10732                           
 10733                           ;MCU_B1.c: 231: PEIE = 1;
 10734  26F9  170B               	bsf	11,6	;volatile
 10735                           
 10736                           ;MCU_B1.c: 232: GIE = 1;
 10737  26FA  178B               	bsf	11,7	;volatile
 10738  26FB  0008               	return
 10739  26FC                     __end_of_TMR1_Set:	
 10740                           
 10741                           	psect	text60
 10742  1A30                     __ptext60:	
 10743 ;; *************** function _IO_Set *****************
 10744 ;; Defined at:
 10745 ;;		line 60 in file "../src/MCU_B1.c"
 10746 ;; Parameters:    Size  Location     Type
 10747 ;;		None
 10748 ;; Auto vars:     Size  Location     Type
 10749 ;;		None
 10750 ;; Return value:  Size  Location     Type
 10751 ;;		None               void
 10752 ;; Registers used:
 10753 ;;		wreg, status,2
 10754 ;; Tracked objects:
 10755 ;;		On entry : 0/0
 10756 ;;		On exit  : 0/0
 10757 ;;		Unchanged: 0/0
 10758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;Total ram usage:        0 bytes
 10764 ;; Hardware stack levels used:    1
 10765 ;; Hardware stack levels required when called:    5
 10766 ;; This function calls:
 10767 ;;		Nothing
 10768 ;; This function is called by:
 10769 ;;		_Mcu_Initialization
 10770 ;; This function uses a non-reentrant model
 10771 ;;
 10772                           
 10773                           
 10774                           ;psect for function _IO_Set
 10775  1A30                     _IO_Set:	
 10776                           
 10777                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
 10778                           
 10779                           ;incstack = 0
 10780                           ; Regs used in _IO_Set: [wreg+status,2]
 10781  1A30  3077               	movlw	119
 10782  1A31  0021               	movlb	1	; select bank1
 10783  1A32  008C               	movwf	12	;volatile
 10784                           
 10785                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
 10786  1A33  3007               	movlw	7
 10787  1A34  008D               	movwf	13	;volatile
 10788                           
 10789                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10790  1A35  300C               	movlw	12
 10791  1A36  008E               	movwf	14	;volatile
 10792                           
 10793                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10794  1A37  0022               	movlb	2	; select bank2
 10795  1A38  018C               	clrf	12	;volatile
 10796                           
 10797                           ;MCU_B1.c: 97: LATB = 0b00000000;;
 10798  1A39  018D               	clrf	13	;volatile
 10799                           
 10800                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10801  1A3A  018E               	clrf	14	;volatile
 10802                           
 10803                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10804  1A3B  3022               	movlw	34
 10805  1A3C  0023               	movlb	3	; select bank3
 10806  1A3D  008C               	movwf	12	;volatile
 10807                           
 10808                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10809  1A3E  018D               	clrf	13	;volatile
 10810                           
 10811                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10812  1A3F  018E               	clrf	14	;volatile
 10813                           
 10814                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
 10815  1A40  3077               	movlw	119
 10816  1A41  0020               	movlb	0	; select bank0
 10817  1A42  008C               	movwf	12	;volatile
 10818                           
 10819                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
 10820  1A43  3007               	movlw	7
 10821  1A44  008D               	movwf	13	;volatile
 10822                           
 10823                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10824  1A45  300C               	movlw	12
 10825  1A46  008E               	movwf	14	;volatile
 10826                           
 10827                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10828  1A47  0024               	movlb	4	; select bank4
 10829  1A48  018D               	clrf	13	;volatile
 10830  1A49  0008               	return
 10831  1A4A                     __end_of_IO_Set:	
 10832                           
 10833                           	psect	text61
 10834  267B                     __ptext61:	
 10835 ;; *************** function _IOC_Set *****************
 10836 ;; Defined at:
 10837 ;;		line 380 in file "../src/MCU_B1.c"
 10838 ;; Parameters:    Size  Location     Type
 10839 ;;		None
 10840 ;; Auto vars:     Size  Location     Type
 10841 ;;		None
 10842 ;; Return value:  Size  Location     Type
 10843 ;;		None               void
 10844 ;; Registers used:
 10845 ;;		wreg, status,2
 10846 ;; Tracked objects:
 10847 ;;		On entry : 0/0
 10848 ;;		On exit  : 0/0
 10849 ;;		Unchanged: 0/0
 10850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10855 ;;Total ram usage:        0 bytes
 10856 ;; Hardware stack levels used:    1
 10857 ;; Hardware stack levels required when called:    5
 10858 ;; This function calls:
 10859 ;;		Nothing
 10860 ;; This function is called by:
 10861 ;;		_Mcu_Initialization
 10862 ;; This function uses a non-reentrant model
 10863 ;;
 10864                           
 10865                           
 10866                           ;psect for function _IOC_Set
 10867  267B                     _IOC_Set:	
 10868                           
 10869                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10870                           
 10871                           ;incstack = 0
 10872                           ; Regs used in _IOC_Set: [wreg+status,2]
 10873  267B  3004               	movlw	4
 10874  267C  0027               	movlb	7	; select bank7
 10875  267D  0094               	movwf	20	;volatile
 10876                           
 10877                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10878  267E  3004               	movlw	4
 10879  267F  0095               	movwf	21	;volatile
 10880                           
 10881                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10882  2680  0196               	clrf	22	;volatile
 10883                           
 10884                           ;MCU_B1.c: 387: IOCIE = 1;
 10885  2681  158B               	bsf	11,3	;volatile
 10886                           
 10887                           ;MCU_B1.c: 388: IOCIF = 0;
 10888  2682  100B               	bcf	11,0	;volatile
 10889                           
 10890                           ;MCU_B1.c: 389: PEIE = 1;
 10891  2683  170B               	bsf	11,6	;volatile
 10892                           
 10893                           ;MCU_B1.c: 390: GIE = 1;
 10894  2684  178B               	bsf	11,7	;volatile
 10895  2685  0008               	return
 10896  2686                     __end_of_IOC_Set:	
 10897                           
 10898                           	psect	text62
 10899  25F4                     __ptext62:	
 10900 ;; *************** function _Fosc_Set *****************
 10901 ;; Defined at:
 10902 ;;		line 56 in file "../src/MCU_B1.c"
 10903 ;; Parameters:    Size  Location     Type
 10904 ;;		None
 10905 ;; Auto vars:     Size  Location     Type
 10906 ;;		None
 10907 ;; Return value:  Size  Location     Type
 10908 ;;		None               void
 10909 ;; Registers used:
 10910 ;;		wreg
 10911 ;; Tracked objects:
 10912 ;;		On entry : 0/0
 10913 ;;		On exit  : 0/0
 10914 ;;		Unchanged: 0/0
 10915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10920 ;;Total ram usage:        0 bytes
 10921 ;; Hardware stack levels used:    1
 10922 ;; Hardware stack levels required when called:    5
 10923 ;; This function calls:
 10924 ;;		Nothing
 10925 ;; This function is called by:
 10926 ;;		_Mcu_Initialization
 10927 ;; This function uses a non-reentrant model
 10928 ;;
 10929                           
 10930                           
 10931                           ;psect for function _Fosc_Set
 10932  25F4                     _Fosc_Set:	
 10933                           
 10934                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10935                           
 10936                           ;incstack = 0
 10937                           ; Regs used in _Fosc_Set: [wreg]
 10938  25F4  3078               	movlw	120
 10939  25F5  0021               	movlb	1	; select bank1
 10940  25F6  0099               	movwf	25	;volatile
 10941  25F7  0008               	return
 10942  25F8                     __end_of_Fosc_Set:	
 10943                           
 10944                           	psect	text63
 10945  261F                     __ptext63:	
 10946 ;; *************** function _ADC_Set *****************
 10947 ;; Defined at:
 10948 ;;		line 427 in file "../src/MCU_B1.c"
 10949 ;; Parameters:    Size  Location     Type
 10950 ;;		None
 10951 ;; Auto vars:     Size  Location     Type
 10952 ;;		None
 10953 ;; Return value:  Size  Location     Type
 10954 ;;		None               void
 10955 ;; Registers used:
 10956 ;;		wreg
 10957 ;; Tracked objects:
 10958 ;;		On entry : 0/0
 10959 ;;		On exit  : 0/0
 10960 ;;		Unchanged: 0/0
 10961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10966 ;;Total ram usage:        0 bytes
 10967 ;; Hardware stack levels used:    1
 10968 ;; Hardware stack levels required when called:    5
 10969 ;; This function calls:
 10970 ;;		Nothing
 10971 ;; This function is called by:
 10972 ;;		_Mcu_Initialization
 10973 ;; This function uses a non-reentrant model
 10974 ;;
 10975                           
 10976                           
 10977                           ;psect for function _ADC_Set
 10978  261F                     _ADC_Set:	
 10979                           
 10980                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10981                           
 10982                           ;incstack = 0
 10983                           ; Regs used in _ADC_Set: [wreg]
 10984  261F  30F3               	movlw	243
 10985  2620  0021               	movlb	1	; select bank1
 10986  2621  009E               	movwf	30	;volatile
 10987                           
 10988                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10989  2622  30C1               	movlw	193
 10990  2623  0022               	movlb	2	; select bank2
 10991  2624  0097               	movwf	23	;volatile
 10992  2625  0008               	return
 10993  2626                     __end_of_ADC_Set:	
 10994                           
 10995                           	psect	text64
 10996  0053                     __ptext64:	
 10997 ;; *************** function _Load_Main *****************
 10998 ;; Defined at:
 10999 ;;		line 40 in file "../src/OverLoad_B1.c"
 11000 ;; Parameters:    Size  Location     Type
 11001 ;;		None
 11002 ;; Auto vars:     Size  Location     Type
 11003 ;;  i               2   76[BANK0 ] int 
 11004 ;;  LightsCount     1   78[BANK0 ] unsigned char 
 11005 ;;  Load_RunStat    1   75[BANK0 ] unsigned char 
 11006 ;;  ErrorCountVa    1   74[BANK0 ] unsigned char 
 11007 ;;  error           1   73[BANK0 ] unsigned char 
 11008 ;; Return value:  Size  Location     Type
 11009 ;;		None               void
 11010 ;; Registers used:
 11011 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11012 ;; Tracked objects:
 11013 ;;		On entry : 0/0
 11014 ;;		On exit  : 0/0
 11015 ;;		Unchanged: 0/0
 11016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11018 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11019 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11020 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11021 ;;Total ram usage:       10 bytes
 11022 ;; Hardware stack levels used:    1
 11023 ;; Hardware stack levels required when called:    6
 11024 ;; This function calls:
 11025 ;;		___lwdiv
 11026 ;;		___wmul
 11027 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 11028 ;;		_getDimmer_LoadGO
 11029 ;;		_getDimmer_Load_Status
 11030 ;;		_getMain_All_Error_Status
 11031 ;;		_getMain_All_LightsStatus
 11032 ;;		_getMain_Lights_Count
 11033 ;;		_setLoad_AH_AL_Restore
 11034 ;;		_setProductData
 11035 ;; This function is called by:
 11036 ;;		_main
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040                           
 11041                           ;psect for function _Load_Main
 11042  0053                     _Load_Main:	
 11043                           
 11044                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 11045                           
 11046                           ;incstack = 0
 11047                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11048  0053  3000               	movlw	0
 11049  0054  319D  25C7  3180   	fcall	_getMain_All_Error_Status
 11050  0057  0020               	movlb	0	; select bank0
 11051  0058  00E5               	movwf	??_Load_Main
 11052  0059  0865               	movf	??_Load_Main,w
 11053  005A  00E9               	movwf	Load_Main@error
 11054                           
 11055                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 11056  005B  01EB               	clrf	Load_Main@Load_RunStatus
 11057  005C  01EA               	clrf	Load_Main@ErrorCountValue
 11058  005D  01EE               	clrf	Load_Main@LightsCount
 11059                           
 11060                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 11061  005E  0022               	movlb	2	; select bank2
 11062  005F  1C38               	btfss	_Load^(0+256),0
 11063  0060  2AB0               	goto	l1885
 11064                           
 11065                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 11066  0061  3198  208E  3180   	fcall	_getMain_All_LightsStatus
 11067  0064  3800               	iorlw	0
 11068  0065  1D03               	skipz
 11069  0066  2869               	goto	l9253
 11070                           
 11071                           ;OverLoad_B1.c: 46: Load.GO = 0;
 11072  0067  0022               	movlb	2	; select bank2
 11073  0068  288A               	goto	l9271
 11074  0069                     l9253:	
 11075                           ;OverLoad_B1.c: 47: } else {
 11076                           
 11077                           
 11078                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 11079  0069  0020               	movlb	0	; select bank0
 11080  006A  08E9               	movf	Load_Main@error,f
 11081  006B  1D03               	skipz
 11082  006C  2887               	goto	l1888
 11083  006D  319B  23CF  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 11084  0070  3800               	iorlw	0
 11085  0071  1D03               	skipz
 11086  0072  2887               	goto	l1888
 11087                           
 11088                           ;OverLoad_B1.c: 51: Load.GO = 1;
 11089  0073  0022               	movlb	2	; select bank2
 11090  0074  14B8               	bsf	_Load^(0+256),1
 11091                           
 11092                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 11093  0075  31A6  263E  3180   	fcall	_getDimmer_LoadGO
 11094  0078  3A01               	xorlw	1
 11095  0079  1D03               	skipz
 11096  007A  2882               	goto	l1889
 11097                           
 11098                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 11099  007B  0022               	movlb	2	; select bank2
 11100  007C  1DB8               	btfss	_Load^(0+256),3
 11101  007D  1BB8               	btfsc	_Load^(0+256),7
 11102  007E  288B               	goto	l1887
 11103                           
 11104                           ;OverLoad_B1.c: 55: Load.Run = 1;
 11105  007F  15B8               	bsf	_Load^(0+256),3
 11106                           
 11107                           ;OverLoad_B1.c: 56: Load.Count = 0;
 11108  0080  01DD               	clrf	(_Load^(0+256)+37)
 11109                           
 11110                           ;OverLoad_B1.c: 57: }
 11111                           ;OverLoad_B1.c: 58: } else {
 11112  0081  288B               	goto	l1887
 11113  0082                     l1889:	
 11114                           
 11115                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 11116  0082  0022               	movlb	2	; select bank2
 11117  0083  1FB8               	btfss	_Load^(0+256),7
 11118  0084  288B               	goto	l1887
 11119                           
 11120                           ;OverLoad_B1.c: 60: Load.OK = 0;
 11121  0085  13B8               	bcf	_Load^(0+256),7
 11122                           
 11123                           ;OverLoad_B1.c: 61: }
 11124                           ;OverLoad_B1.c: 62: }
 11125                           ;OverLoad_B1.c: 63: } else {
 11126  0086  288B               	goto	l1887
 11127  0087                     l1888:	
 11128                           
 11129                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 11130  0087  0022               	movlb	2	; select bank2
 11131  0088  1CB8               	btfss	_Load^(0+256),1
 11132  0089  288B               	goto	l1887
 11133  008A                     l9271:	
 11134                           
 11135                           ;OverLoad_B1.c: 65: Load.GO = 0;
 11136  008A  10B8               	bcf	_Load^(0+256),1
 11137  008B                     l1887:	
 11138                           
 11139                           ;OverLoad_B1.c: 66: }
 11140                           ;OverLoad_B1.c: 67: }
 11141                           ;OverLoad_B1.c: 89: }
 11142                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 11143  008B  1CB8               	btfss	_Load^(0+256),1
 11144  008C  2A50               	goto	l1895
 11145                           
 11146                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 11147  008D  1538               	bsf	_Load^(0+256),2
 11148                           
 11149                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 11150  008E  1E38               	btfss	_Load^(0+256),4
 11151  008F  2A4E               	goto	l1896
 11152                           
 11153                           ;OverLoad_B1.c: 96: Load.Time++;
 11154  0090  3001               	movlw	1
 11155  0091  07B9               	addwf	(_Load^(0+256)+1),f
 11156  0092  3000               	movlw	0
 11157  0093  3DBA               	addwfc	((_Load+1)^(0+256)+1),f
 11158                           
 11159                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 11160  0094  3000               	movlw	0
 11161  0095  023A               	subwf	((_Load+1)^(0+256)+1),w
 11162  0096  3002               	movlw	2
 11163  0097  1903               	skipnz
 11164  0098  0239               	subwf	(_Load^(0+256)+1),w
 11165  0099  1C03               	skipc
 11166  009A  0008               	return
 11167                           
 11168                           ;OverLoad_B1.c: 98: Load.Time = 0;
 11169  009B  01B9               	clrf	(_Load^(0+256)+1)
 11170  009C  01BA               	clrf	((_Load+1)^(0+256)+1)
 11171                           
 11172                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 11173  009D  1238               	bcf	_Load^(0+256),4
 11174                           
 11175                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 11176  009E  3001               	movlw	1
 11177  009F  0020               	movlb	0	; select bank0
 11178  00A0  00EC               	movwf	Load_Main@i
 11179  00A1  3000               	movlw	0
 11180  00A2  00ED               	movwf	Load_Main@i+1
 11181  00A3  086D               	movf	Load_Main@i+1,w
 11182  00A4  3A80               	xorlw	128
 11183  00A5  00E5               	movwf	??_Load_Main
 11184  00A6  3080               	movlw	128
 11185  00A7  0265               	subwf	??_Load_Main,w
 11186  00A8  1D03               	skipz
 11187  00A9  28AC               	goto	u10095
 11188  00AA  3004               	movlw	4
 11189  00AB  026C               	subwf	Load_Main@i,w
 11190  00AC                     u10095:	
 11191  00AC  1803               	btfsc	3,0
 11192  00AD  28E0               	goto	l9293
 11193  00AE                     l9287:	
 11194                           
 11195                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 11196  00AE  0020               	movlb	0	; select bank0
 11197  00AF  356C               	lslf	Load_Main@i,w
 11198  00B0  3E43               	addlw	(_Load+11)& (0+255)
 11199  00B1  0086               	movwf	6
 11200  00B2  3001               	movlw	1	; select bank2/3
 11201  00B3  0087               	movwf	7
 11202  00B4  3F40               	moviw [0]fsr1
 11203  00B5  00E5               	movwf	??_Load_Main
 11204  00B6  3F41               	moviw [1]fsr1
 11205  00B7  00E6               	movwf	??_Load_Main+1
 11206  00B8  0865               	movf	??_Load_Main,w
 11207  00B9  0022               	movlb	2	; select bank2
 11208  00BA  07BD               	addwf	(_Load^(0+256)+5),f
 11209  00BB  0020               	movlb	0	; select bank0
 11210  00BC  0866               	movf	??_Load_Main+1,w
 11211  00BD  0022               	movlb	2	; select bank2
 11212  00BE  3DBE               	addwfc	((_Load+1)^(0+256)+5),f
 11213                           
 11214                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 11215  00BF  0020               	movlb	0	; select bank0
 11216  00C0  356C               	lslf	Load_Main@i,w
 11217  00C1  3E4D               	addlw	(_Load+21)& (0+255)
 11218  00C2  0086               	movwf	6
 11219  00C3  3001               	movlw	1	; select bank2/3
 11220  00C4  0087               	movwf	7
 11221  00C5  3F40               	moviw [0]fsr1
 11222  00C6  00E5               	movwf	??_Load_Main
 11223  00C7  3F41               	moviw [1]fsr1
 11224  00C8  00E6               	movwf	??_Load_Main+1
 11225  00C9  0865               	movf	??_Load_Main,w
 11226  00CA  0022               	movlb	2	; select bank2
 11227  00CB  07BF               	addwf	(_Load^(0+256)+7),f
 11228  00CC  0020               	movlb	0	; select bank0
 11229  00CD  0866               	movf	??_Load_Main+1,w
 11230  00CE  0022               	movlb	2	; select bank2
 11231  00CF  3DC0               	addwfc	((_Load+1)^(0+256)+7),f
 11232  00D0  3001               	movlw	1
 11233  00D1  0020               	movlb	0	; select bank0
 11234  00D2  07EC               	addwf	Load_Main@i,f
 11235  00D3  3000               	movlw	0
 11236  00D4  3DED               	addwfc	Load_Main@i+1,f
 11237  00D5  086D               	movf	Load_Main@i+1,w
 11238  00D6  3A80               	xorlw	128
 11239  00D7  00E5               	movwf	??_Load_Main
 11240  00D8  3080               	movlw	128
 11241  00D9  0265               	subwf	??_Load_Main,w
 11242  00DA  1D03               	skipz
 11243  00DB  28DE               	goto	u10105
 11244  00DC  3004               	movlw	4
 11245  00DD  026C               	subwf	Load_Main@i,w
 11246  00DE                     u10105:	
 11247  00DE  1C03               	skipc
 11248  00DF  28AE               	goto	l9287
 11249  00E0                     l9293:	
 11250                           
 11251                           ;OverLoad_B1.c: 104: }
 11252                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 11253  00E0  3003               	movlw	3
 11254  00E1  0020               	movlb	0	; select bank0
 11255  00E2  00A0               	movwf	___lwdiv@divisor
 11256  00E3  3000               	movlw	0
 11257  00E4  00A1               	movwf	___lwdiv@divisor+1
 11258  00E5  0022               	movlb	2	; select bank2
 11259  00E6  083E               	movf	((_Load+1)^(0+256)+5),w
 11260  00E7  0020               	movlb	0	; select bank0
 11261  00E8  01A3               	clrf	___lwdiv@dividend+1
 11262  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 11263  00EA  0022               	movlb	2	; select bank2
 11264  00EB  083D               	movf	(_Load^(0+256)+5),w
 11265  00EC  0020               	movlb	0	; select bank0
 11266  00ED  01A2               	clrf	___lwdiv@dividend
 11267  00EE  07A2               	addwf	___lwdiv@dividend,f
 11268  00EF  319E  262E  3180   	fcall	___lwdiv
 11269  00F2  0020               	movlb	0	; select bank0
 11270  00F3  0821               	movf	?___lwdiv+1,w
 11271  00F4  0022               	movlb	2	; select bank2
 11272  00F5  01BE               	clrf	((_Load+1)^(0+256)+5)
 11273  00F6  07BE               	addwf	((_Load+1)^(0+256)+5),f
 11274  00F7  0020               	movlb	0	; select bank0
 11275  00F8  0820               	movf	?___lwdiv,w
 11276  00F9  0022               	movlb	2	; select bank2
 11277  00FA  01BD               	clrf	(_Load^(0+256)+5)
 11278  00FB  07BD               	addwf	(_Load^(0+256)+5),f
 11279                           
 11280                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11281  00FC  3003               	movlw	3
 11282  00FD  0020               	movlb	0	; select bank0
 11283  00FE  00A0               	movwf	___lwdiv@divisor
 11284  00FF  3000               	movlw	0
 11285  0100  00A1               	movwf	___lwdiv@divisor+1
 11286  0101  0022               	movlb	2	; select bank2
 11287  0102  0840               	movf	((_Load+1)^(0+256)+7),w
 11288  0103  0020               	movlb	0	; select bank0
 11289  0104  01A3               	clrf	___lwdiv@dividend+1
 11290  0105  07A3               	addwf	___lwdiv@dividend+1,f
 11291  0106  0022               	movlb	2	; select bank2
 11292  0107  083F               	movf	(_Load^(0+256)+7),w
 11293  0108  0020               	movlb	0	; select bank0
 11294  0109  01A2               	clrf	___lwdiv@dividend
 11295  010A  07A2               	addwf	___lwdiv@dividend,f
 11296  010B  319E  262E  3180   	fcall	___lwdiv
 11297  010E  0020               	movlb	0	; select bank0
 11298  010F  0821               	movf	?___lwdiv+1,w
 11299  0110  0022               	movlb	2	; select bank2
 11300  0111  01C0               	clrf	((_Load+1)^(0+256)+7)
 11301  0112  07C0               	addwf	((_Load+1)^(0+256)+7),f
 11302  0113  0020               	movlb	0	; select bank0
 11303  0114  0820               	movf	?___lwdiv,w
 11304  0115  0022               	movlb	2	; select bank2
 11305  0116  01BF               	clrf	(_Load^(0+256)+7)
 11306  0117  07BF               	addwf	(_Load^(0+256)+7),f
 11307                           
 11308                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11309  0118  319A  227F  3180   	fcall	_setLoad_AH_AL_Restore
 11310                           
 11311                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11312  011B  0022               	movlb	2	; select bank2
 11313  011C  0840               	movf	((_Load+1)^(0+256)+7),w
 11314  011D  023E               	subwf	((_Load+1)^(0+256)+5),w
 11315  011E  1D03               	skipz
 11316  011F  2922               	goto	u10115
 11317  0120  083F               	movf	(_Load^(0+256)+7),w
 11318  0121  023D               	subwf	(_Load^(0+256)+5),w
 11319  0122                     u10115:	
 11320  0122  1C03               	skipc
 11321  0123  0008               	return
 11322                           
 11323                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11324  0124  3005               	movlw	5
 11325  0125  3E38               	addlw	_Load& (0+255)
 11326  0126  0086               	movwf	6
 11327  0127  3001               	movlw	1	; select bank2/3
 11328  0128  0087               	movwf	7
 11329  0129  093F               	comf	(_Load^(0+256)+7),w
 11330  012A  0020               	movlb	0	; select bank0
 11331  012B  00E5               	movwf	??_Load_Main
 11332  012C  0022               	movlb	2	; select bank2
 11333  012D  0940               	comf	((_Load+1)^(0+256)+7),w
 11334  012E  0020               	movlb	0	; select bank0
 11335  012F  00E6               	movwf	??_Load_Main+1
 11336  0130  0AE5               	incf	??_Load_Main,f
 11337  0131  1903               	skipnz
 11338  0132  0AE6               	incf	??_Load_Main+1,f
 11339  0133  3F40               	moviw [0]fsr1
 11340  0134  0765               	addwf	??_Load_Main,w
 11341  0135  0022               	movlb	2	; select bank2
 11342  0136  00D7               	movwf	(_Load^(0+256)+31)
 11343  0137  3F41               	moviw [1]fsr1
 11344  0138  0020               	movlb	0	; select bank0
 11345  0139  3D66               	addwfc	??_Load_Main+1,w
 11346  013A  0022               	movlb	2	; select bank2
 11347  013B  00D8               	movwf	(_Load^(0+256)+32)
 11348                           
 11349                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11350  013C  01BD               	clrf	(_Load^(0+256)+5)
 11351  013D  01BE               	clrf	((_Load+1)^(0+256)+5)
 11352                           
 11353                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11354  013E  01BF               	clrf	(_Load^(0+256)+7)
 11355  013F  01C0               	clrf	((_Load+1)^(0+256)+7)
 11356                           
 11357                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11358  0140  1DB8               	btfss	_Load^(0+256),3
 11359  0141  299B               	goto	l9333
 11360                           
 11361                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11362  0142  3002               	movlw	2
 11363  0143  025D               	subwf	(_Load^(0+256)+37),w
 11364  0144  1803               	skipnc
 11365  0145  299B               	goto	l9333
 11366                           
 11367                           ;OverLoad_B1.c: 117: Load.Count++;
 11368  0146  3001               	movlw	1
 11369  0147  0020               	movlb	0	; select bank0
 11370  0148  00E5               	movwf	??_Load_Main
 11371  0149  0865               	movf	??_Load_Main,w
 11372  014A  0022               	movlb	2	; select bank2
 11373  014B  07DD               	addwf	(_Load^(0+256)+37),f
 11374                           
 11375                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11376  014C  31A6  2646  3180   	fcall	_getDimmer_Load_Status
 11377  014F  0020               	movlb	0	; select bank0
 11378  0150  00E5               	movwf	??_Load_Main
 11379  0151  0865               	movf	??_Load_Main,w
 11380  0152  00EB               	movwf	Load_Main@Load_RunStatus
 11381                           
 11382                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11383  0153  31A7  27CA  3180   	fcall	_getMain_Lights_Count
 11384  0156  0020               	movlb	0	; select bank0
 11385  0157  00E5               	movwf	??_Load_Main
 11386  0158  0865               	movf	??_Load_Main,w
 11387  0159  00EE               	movwf	Load_Main@LightsCount
 11388                           
 11389                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11390  015A  0022               	movlb	2	; select bank2
 11391  015B  085D               	movf	(_Load^(0+256)+37),w
 11392  015C  3A01               	xorlw	1
 11393  015D  1D03               	skipz
 11394  015E  2963               	goto	l9319
 11395                           
 11396                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*56);
 11397  015F  3060               	movlw	96
 11398  0160  00DB               	movwf	(_Load^(0+256)+35)
 11399  0161  3004               	movlw	4
 11400  0162  2970               	goto	L8
 11401  0163                     l9319:	
 11402                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11403                           
 11404  0163  085D               	movf	(_Load^(0+256)+37),w
 11405  0164  3A02               	xorlw	2
 11406  0165  1D03               	skipz
 11407  0166  299B               	goto	l9333
 11408                           
 11409                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11410  0167  0020               	movlb	0	; select bank0
 11411  0168  086E               	movf	Load_Main@LightsCount,w
 11412  0169  3A01               	xorlw	1
 11413  016A  1D03               	skipz
 11414  016B  2972               	goto	l9325
 11415                           
 11416                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.2*56);
 11417  016C  3043               	movlw	67
 11418  016D  0022               	movlb	2	; select bank2
 11419  016E  00DB               	movwf	(_Load^(0+256)+35)
 11420  016F  3000               	movlw	0
 11421  0170                     L8:	
 11422  0170  00DC               	movwf	(_Load^(0+256)+36)
 11423                           
 11424                           ;OverLoad_B1.c: 132: } else {
 11425  0171  299B               	goto	l9333
 11426  0172                     l9325:	
 11427                           
 11428                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11429  0172  0020               	movlb	0	; select bank0
 11430  0173  08EB               	movf	Load_Main@Load_RunStatus,f
 11431  0174  1D03               	skipz
 11432  0175  298F               	goto	l9329
 11433                           
 11434                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.2*56) * LightsCount;
 11435  0176  086E               	movf	Load_Main@LightsCount,w
 11436  0177  00E5               	movwf	??_Load_Main
 11437  0178  01E6               	clrf	??_Load_Main+1
 11438  0179  0865               	movf	??_Load_Main,w
 11439  017A  00A0               	movwf	___wmul@multiplier
 11440  017B  0866               	movf	??_Load_Main+1,w
 11441  017C  00A1               	movwf	___wmul@multiplier+1
 11442  017D  3043               	movlw	67
 11443  017E  00A2               	movwf	___wmul@multiplicand
 11444  017F  3000               	movlw	0
 11445  0180  00A3               	movwf	___wmul@multiplicand+1
 11446  0181  319A  22F2  3180   	fcall	___wmul
 11447  0184  0020               	movlb	0	; select bank0
 11448  0185  0821               	movf	?___wmul+1,w
 11449  0186  0022               	movlb	2	; select bank2
 11450  0187  01DC               	clrf	((_Load+1)^(0+256)+35)
 11451  0188  07DC               	addwf	((_Load+1)^(0+256)+35),f
 11452  0189  0020               	movlb	0	; select bank0
 11453  018A  0820               	movf	?___wmul,w
 11454  018B  0022               	movlb	2	; select bank2
 11455  018C  01DB               	clrf	(_Load^(0+256)+35)
 11456  018D  07DB               	addwf	(_Load^(0+256)+35),f
 11457                           
 11458                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11459  018E  299B               	goto	l9333
 11460  018F                     l9329:	
 11461  018F  0020               	movlb	0	; select bank0
 11462  0190  086B               	movf	Load_Main@Load_RunStatus,w
 11463  0191  3A01               	xorlw	1
 11464  0192  1D03               	skipz
 11465  0193  299B               	goto	l9333
 11466                           
 11467                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.2*56) + Load.TotalLoad;
 11468  0194  0022               	movlb	2	; select bank2
 11469  0195  0841               	movf	(_Load^(0+256)+9),w
 11470  0196  3E43               	addlw	67
 11471  0197  00DB               	movwf	(_Load^(0+256)+35)
 11472  0198  3000               	movlw	0
 11473  0199  3D42               	addwfc	((_Load+1)^(0+256)+9),w
 11474  019A  00DC               	movwf	((_Load+1)^(0+256)+35)
 11475  019B                     l9333:	
 11476                           
 11477                           ;OverLoad_B1.c: 137: }
 11478                           ;OverLoad_B1.c: 138: }
 11479                           ;OverLoad_B1.c: 139: }
 11480                           ;OverLoad_B1.c: 140: }
 11481                           ;OverLoad_B1.c: 141: }
 11482                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11483  019B  0022               	movlb	2	; select bank2
 11484  019C  085C               	movf	((_Load+1)^(0+256)+35),w
 11485  019D  0258               	subwf	((_Load+1)^(0+256)+31),w
 11486  019E  1D03               	skipz
 11487  019F  29A2               	goto	u10195
 11488  01A0  085B               	movf	(_Load^(0+256)+35),w
 11489  01A1  0257               	subwf	(_Load^(0+256)+31),w
 11490  01A2                     u10195:	
 11491  01A2  1C03               	skipc
 11492  01A3  29FB               	goto	l9361
 11493                           
 11494                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11495  01A4  0020               	movlb	0	; select bank0
 11496  01A5  086E               	movf	Load_Main@LightsCount,w
 11497  01A6  3A01               	xorlw	1
 11498  01A7  1903               	skipnz
 11499  01A8  29AB               	goto	l9339
 11500  01A9  3003               	movlw	3
 11501  01AA  29AC               	goto	L9
 11502  01AB                     l9339:	
 11503  01AB  3002               	movlw	2
 11504  01AC                     L9:	
 11505  01AC  00E7               	movwf	_Load_Main$4309
 11506  01AD  3000               	movlw	0
 11507  01AE  00E8               	movwf	_Load_Main$4309+1
 11508  01AF  0867               	movf	_Load_Main$4309,w
 11509  01B0  00E5               	movwf	??_Load_Main
 11510  01B1  0865               	movf	??_Load_Main,w
 11511  01B2  00EA               	movwf	Load_Main@ErrorCountValue
 11512                           
 11513                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11514  01B3  3001               	movlw	1
 11515  01B4  00E5               	movwf	??_Load_Main
 11516  01B5  0865               	movf	??_Load_Main,w
 11517  01B6  0022               	movlb	2	; select bank2
 11518  01B7  07DE               	addwf	(_Load^(0+256)+38),f
 11519                           
 11520                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11521  01B8  085E               	movf	(_Load^(0+256)+38),w
 11522  01B9  0020               	movlb	0	; select bank0
 11523  01BA  026A               	subwf	Load_Main@ErrorCountValue,w
 11524  01BB  1803               	skipnc
 11525  01BC  0008               	return
 11526                           
 11527                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11528  01BD  0022               	movlb	2	; select bank2
 11529  01BE  01DE               	clrf	(_Load^(0+256)+38)
 11530                           
 11531                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11532  01BF  16B8               	bsf	_Load^(0+256),5
 11533                           
 11534                           ;OverLoad_B1.c: 162: setProductData(4, (Load.AD >> 8));
 11535  01C0  0858               	movf	((_Load+1)^(0+256)+31),w
 11536  01C1  0020               	movlb	0	; select bank0
 11537  01C2  00E5               	movwf	??_Load_Main
 11538  01C3  0865               	movf	??_Load_Main,w
 11539  01C4  00E2               	movwf	setProductData@value
 11540  01C5  3004               	movlw	4
 11541  01C6  31A6  26A8  3180   	fcall	_setProductData
 11542                           
 11543                           ;OverLoad_B1.c: 163: setProductData(5, Load.AD);
 11544  01C9  0022               	movlb	2	; select bank2
 11545  01CA  0857               	movf	(_Load^(0+256)+31),w
 11546  01CB  0020               	movlb	0	; select bank0
 11547  01CC  00E5               	movwf	??_Load_Main
 11548  01CD  0865               	movf	??_Load_Main,w
 11549  01CE  00E2               	movwf	setProductData@value
 11550  01CF  3005               	movlw	5
 11551  01D0  31A6  26A8  3180   	fcall	_setProductData
 11552                           
 11553                           ;OverLoad_B1.c: 164: setProductData(6, (Load.JudgeValue >> 8));
 11554  01D3  0022               	movlb	2	; select bank2
 11555  01D4  085C               	movf	((_Load+1)^(0+256)+35),w
 11556  01D5  0020               	movlb	0	; select bank0
 11557  01D6  00E5               	movwf	??_Load_Main
 11558  01D7  0865               	movf	??_Load_Main,w
 11559  01D8  00E2               	movwf	setProductData@value
 11560  01D9  3006               	movlw	6
 11561  01DA  31A6  26A8  3180   	fcall	_setProductData
 11562                           
 11563                           ;OverLoad_B1.c: 165: setProductData(7, Load.JudgeValue);
 11564  01DD  0022               	movlb	2	; select bank2
 11565  01DE  085B               	movf	(_Load^(0+256)+35),w
 11566  01DF  0020               	movlb	0	; select bank0
 11567  01E0  00E5               	movwf	??_Load_Main
 11568  01E1  0865               	movf	??_Load_Main,w
 11569  01E2  00E2               	movwf	setProductData@value
 11570  01E3  3007               	movlw	7
 11571  01E4  31A6  26A8  3180   	fcall	_setProductData
 11572                           
 11573                           ;OverLoad_B1.c: 166: setProductData(8, LightsCount);
 11574  01E7  0020               	movlb	0	; select bank0
 11575  01E8  086E               	movf	Load_Main@LightsCount,w
 11576  01E9  00E5               	movwf	??_Load_Main
 11577  01EA  0865               	movf	??_Load_Main,w
 11578  01EB  00E2               	movwf	setProductData@value
 11579  01EC  3008               	movlw	8
 11580  01ED  31A6  26A8  3180   	fcall	_setProductData
 11581                           
 11582                           ;OverLoad_B1.c: 167: setProductData(10, getDimmer_LoadGO());
 11583  01F0  31A6  263E  3180   	fcall	_getDimmer_LoadGO
 11584  01F3  0020               	movlb	0	; select bank0
 11585  01F4  00E5               	movwf	??_Load_Main
 11586  01F5  0865               	movf	??_Load_Main,w
 11587  01F6  00E2               	movwf	setProductData@value
 11588  01F7  300A               	movlw	10
 11589  01F8  31A6  26A8         	fcall	_setProductData
 11590                           
 11591                           ;OverLoad_B1.c: 170: }
 11592                           ;OverLoad_B1.c: 171: } else {
 11593  01FA  0008               	return
 11594  01FB                     l9361:	
 11595                           
 11596                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11597  01FB  0022               	movlb	2	; select bank2
 11598  01FC  01DE               	clrf	(_Load^(0+256)+38)
 11599                           
 11600                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11601  01FD  1DB8               	btfss	_Load^(0+256),3
 11602  01FE  2A13               	goto	l9377
 11603                           
 11604                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11605  01FF  3001               	movlw	1
 11606  0200  0020               	movlb	0	; select bank0
 11607  0201  00E5               	movwf	??_Load_Main
 11608  0202  0865               	movf	??_Load_Main,w
 11609  0203  0022               	movlb	2	; select bank2
 11610  0204  07DF               	addwf	(_Load^(0+256)+39),f
 11611                           
 11612                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11613  0205  3003               	movlw	3
 11614  0206  025F               	subwf	(_Load^(0+256)+39),w
 11615  0207  1C03               	skipc
 11616  0208  2A13               	goto	l9377
 11617                           
 11618                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11619  0209  01DF               	clrf	(_Load^(0+256)+39)
 11620                           
 11621                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11622  020A  17B8               	bsf	_Load^(0+256),7
 11623                           
 11624                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11625  020B  11B8               	bcf	_Load^(0+256),3
 11626                           
 11627                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11628  020C  01DD               	clrf	(_Load^(0+256)+37)
 11629                           
 11630                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11631  020D  0858               	movf	((_Load+1)^(0+256)+31),w
 11632  020E  01C2               	clrf	((_Load+1)^(0+256)+9)
 11633  020F  07C2               	addwf	((_Load+1)^(0+256)+9),f
 11634  0210  0857               	movf	(_Load^(0+256)+31),w
 11635  0211  01C1               	clrf	(_Load^(0+256)+9)
 11636  0212  07C1               	addwf	(_Load^(0+256)+9),f
 11637  0213                     l9377:	
 11638                           
 11639                           ;OverLoad_B1.c: 184: }
 11640                           ;OverLoad_B1.c: 185: }
 11641                           ;OverLoad_B1.c: 200: setProductData(4, (Load.AD >> 8));
 11642  0213  0858               	movf	((_Load+1)^(0+256)+31),w
 11643  0214  0020               	movlb	0	; select bank0
 11644  0215  00E5               	movwf	??_Load_Main
 11645  0216  0865               	movf	??_Load_Main,w
 11646  0217  00E2               	movwf	setProductData@value
 11647  0218  3004               	movlw	4
 11648  0219  31A6  26A8  3180   	fcall	_setProductData
 11649                           
 11650                           ;OverLoad_B1.c: 201: setProductData(5, Load.AD);
 11651  021C  0022               	movlb	2	; select bank2
 11652  021D  0857               	movf	(_Load^(0+256)+31),w
 11653  021E  0020               	movlb	0	; select bank0
 11654  021F  00E5               	movwf	??_Load_Main
 11655  0220  0865               	movf	??_Load_Main,w
 11656  0221  00E2               	movwf	setProductData@value
 11657  0222  3005               	movlw	5
 11658  0223  31A6  26A8  3180   	fcall	_setProductData
 11659                           
 11660                           ;OverLoad_B1.c: 202: setProductData(6, (Load.JudgeValue >> 8));
 11661  0226  0022               	movlb	2	; select bank2
 11662  0227  085C               	movf	((_Load+1)^(0+256)+35),w
 11663  0228  0020               	movlb	0	; select bank0
 11664  0229  00E5               	movwf	??_Load_Main
 11665  022A  0865               	movf	??_Load_Main,w
 11666  022B  00E2               	movwf	setProductData@value
 11667  022C  3006               	movlw	6
 11668  022D  31A6  26A8  3180   	fcall	_setProductData
 11669                           
 11670                           ;OverLoad_B1.c: 203: setProductData(7, Load.JudgeValue);
 11671  0230  0022               	movlb	2	; select bank2
 11672  0231  085B               	movf	(_Load^(0+256)+35),w
 11673  0232  0020               	movlb	0	; select bank0
 11674  0233  00E5               	movwf	??_Load_Main
 11675  0234  0865               	movf	??_Load_Main,w
 11676  0235  00E2               	movwf	setProductData@value
 11677  0236  3007               	movlw	7
 11678  0237  31A6  26A8  3180   	fcall	_setProductData
 11679                           
 11680                           ;OverLoad_B1.c: 204: setProductData(8, LightsCount);
 11681  023A  0020               	movlb	0	; select bank0
 11682  023B  086E               	movf	Load_Main@LightsCount,w
 11683  023C  00E5               	movwf	??_Load_Main
 11684  023D  0865               	movf	??_Load_Main,w
 11685  023E  00E2               	movwf	setProductData@value
 11686  023F  3008               	movlw	8
 11687  0240  31A6  26A8  3180   	fcall	_setProductData
 11688                           
 11689                           ;OverLoad_B1.c: 205: setProductData(10, getDimmer_LoadGO());
 11690  0243  31A6  263E  3180   	fcall	_getDimmer_LoadGO
 11691  0246  0020               	movlb	0	; select bank0
 11692  0247  00E5               	movwf	??_Load_Main
 11693  0248  0865               	movf	??_Load_Main,w
 11694  0249  00E2               	movwf	setProductData@value
 11695  024A  300A               	movlw	10
 11696  024B  31A6  26A8         	fcall	_setProductData
 11697                           
 11698                           ;OverLoad_B1.c: 208: }
 11699                           ;OverLoad_B1.c: 209: }
 11700                           ;OverLoad_B1.c: 210: }
 11701                           ;OverLoad_B1.c: 211: } else {
 11702  024D  0008               	return
 11703  024E                     l1896:	
 11704                           
 11705                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11706  024E  1638               	bsf	_Load^(0+256),4
 11707                           
 11708                           ;OverLoad_B1.c: 213: }
 11709                           ;OverLoad_B1.c: 214: } else {
 11710  024F  0008               	return
 11711  0250                     l1895:	
 11712                           
 11713                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11714  0250  1D38               	btfss	_Load^(0+256),2
 11715  0251  2A9E               	goto	l9409
 11716                           
 11717                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11718  0252  1138               	bcf	_Load^(0+256),2
 11719                           
 11720                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11721  0253  1238               	bcf	_Load^(0+256),4
 11722                           
 11723                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11724  0254  01B9               	clrf	(_Load^(0+256)+1)
 11725  0255  01BA               	clrf	((_Load+1)^(0+256)+1)
 11726                           
 11727                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11728  0256  319A  227F  3180   	fcall	_setLoad_AH_AL_Restore
 11729                           
 11730                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11731  0259  0022               	movlb	2	; select bank2
 11732  025A  01DE               	clrf	(_Load^(0+256)+38)
 11733                           
 11734                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11735  025B  01DF               	clrf	(_Load^(0+256)+39)
 11736                           
 11737                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11738  025C  01BD               	clrf	(_Load^(0+256)+5)
 11739  025D  01BE               	clrf	((_Load+1)^(0+256)+5)
 11740                           
 11741                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11742  025E  01BF               	clrf	(_Load^(0+256)+7)
 11743  025F  01C0               	clrf	((_Load+1)^(0+256)+7)
 11744                           
 11745                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11746  0260  11B8               	bcf	_Load^(0+256),3
 11747                           
 11748                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11749  0261  01DD               	clrf	(_Load^(0+256)+37)
 11750                           
 11751                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11752  0262  13B8               	bcf	_Load^(0+256),7
 11753                           
 11754                           ;OverLoad_B1.c: 249: setProductData(4, (Load.AD >> 8));
 11755  0263  0858               	movf	((_Load+1)^(0+256)+31),w
 11756  0264  0020               	movlb	0	; select bank0
 11757  0265  00E5               	movwf	??_Load_Main
 11758  0266  0865               	movf	??_Load_Main,w
 11759  0267  00E2               	movwf	setProductData@value
 11760  0268  3004               	movlw	4
 11761  0269  31A6  26A8  3180   	fcall	_setProductData
 11762                           
 11763                           ;OverLoad_B1.c: 250: setProductData(5, Load.AD);
 11764  026C  0022               	movlb	2	; select bank2
 11765  026D  0857               	movf	(_Load^(0+256)+31),w
 11766  026E  0020               	movlb	0	; select bank0
 11767  026F  00E5               	movwf	??_Load_Main
 11768  0270  0865               	movf	??_Load_Main,w
 11769  0271  00E2               	movwf	setProductData@value
 11770  0272  3005               	movlw	5
 11771  0273  31A6  26A8  3180   	fcall	_setProductData
 11772                           
 11773                           ;OverLoad_B1.c: 251: setProductData(6, (Load.JudgeValue >> 8));
 11774  0276  0022               	movlb	2	; select bank2
 11775  0277  085C               	movf	((_Load+1)^(0+256)+35),w
 11776  0278  0020               	movlb	0	; select bank0
 11777  0279  00E5               	movwf	??_Load_Main
 11778  027A  0865               	movf	??_Load_Main,w
 11779  027B  00E2               	movwf	setProductData@value
 11780  027C  3006               	movlw	6
 11781  027D  31A6  26A8  3180   	fcall	_setProductData
 11782                           
 11783                           ;OverLoad_B1.c: 252: setProductData(7, Load.JudgeValue);
 11784  0280  0022               	movlb	2	; select bank2
 11785  0281  085B               	movf	(_Load^(0+256)+35),w
 11786  0282  0020               	movlb	0	; select bank0
 11787  0283  00E5               	movwf	??_Load_Main
 11788  0284  0865               	movf	??_Load_Main,w
 11789  0285  00E2               	movwf	setProductData@value
 11790  0286  3007               	movlw	7
 11791  0287  31A6  26A8  3180   	fcall	_setProductData
 11792                           
 11793                           ;OverLoad_B1.c: 253: setProductData(8, LightsCount);
 11794  028A  0020               	movlb	0	; select bank0
 11795  028B  086E               	movf	Load_Main@LightsCount,w
 11796  028C  00E5               	movwf	??_Load_Main
 11797  028D  0865               	movf	??_Load_Main,w
 11798  028E  00E2               	movwf	setProductData@value
 11799  028F  3008               	movlw	8
 11800  0290  31A6  26A8  3180   	fcall	_setProductData
 11801                           
 11802                           ;OverLoad_B1.c: 254: setProductData(10, getDimmer_LoadGO());
 11803  0293  31A6  263E  3180   	fcall	_getDimmer_LoadGO
 11804  0296  0020               	movlb	0	; select bank0
 11805  0297  00E5               	movwf	??_Load_Main
 11806  0298  0865               	movf	??_Load_Main,w
 11807  0299  00E2               	movwf	setProductData@value
 11808  029A  300A               	movlw	10
 11809  029B  31A6  26A8  3180   	fcall	_setProductData
 11810  029E                     l9409:	
 11811                           
 11812                           ;OverLoad_B1.c: 257: }
 11813                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11814  029E  0022               	movlb	2	; select bank2
 11815  029F  1EB8               	btfss	_Load^(0+256),5
 11816  02A0  0008               	return
 11817                           
 11818                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11819  02A1  3001               	movlw	1
 11820  02A2  07BB               	addwf	(_Load^(0+256)+3),f
 11821  02A3  3000               	movlw	0
 11822  02A4  3DBC               	addwfc	((_Load+1)^(0+256)+3),f
 11823                           
 11824                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11825  02A5  3001               	movlw	1
 11826  02A6  023C               	subwf	((_Load+1)^(0+256)+3),w
 11827  02A7  30F4               	movlw	244
 11828  02A8  1903               	skipnz
 11829  02A9  023B               	subwf	(_Load^(0+256)+3),w
 11830  02AA  1C03               	skipc
 11831  02AB  0008               	return
 11832                           
 11833                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11834  02AC  01BB               	clrf	(_Load^(0+256)+3)
 11835  02AD  01BC               	clrf	((_Load+1)^(0+256)+3)
 11836                           
 11837                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11838  02AE  12B8               	bcf	_Load^(0+256),5
 11839                           
 11840                           ;OverLoad_B1.c: 263: }
 11841                           ;OverLoad_B1.c: 264: }
 11842                           ;OverLoad_B1.c: 265: }
 11843                           ;OverLoad_B1.c: 266: } else {
 11844  02AF  0008               	return
 11845  02B0                     l1885:	
 11846                           
 11847                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11848  02B0  0021               	movlb	1	; select bank1
 11849  02B1  1C2F               	btfss	_myMain^(0+128),0
 11850  02B2  0008               	return
 11851                           
 11852                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11853  02B3  0022               	movlb	2	; select bank2
 11854  02B4  1438               	bsf	_Load^(0+256),0
 11855  02B5  0008               	return
 11856  02B6                     __end_of_Load_Main:	
 11857                           
 11858                           	psect	text65
 11859  27CA                     __ptext65:	
 11860 ;; *************** function _getMain_Lights_Count *****************
 11861 ;; Defined at:
 11862 ;;		line 459 in file "../src/Main_B1.c"
 11863 ;; Parameters:    Size  Location     Type
 11864 ;;		None
 11865 ;; Auto vars:     Size  Location     Type
 11866 ;;  status2         1    2[BANK0 ] unsigned char 
 11867 ;;  status1         1    1[BANK0 ] unsigned char 
 11868 ;;  count           1    0[BANK0 ] unsigned char 
 11869 ;; Return value:  Size  Location     Type
 11870 ;;                  1    wreg      unsigned char 
 11871 ;; Registers used:
 11872 ;;		wreg, status,2, status,0
 11873 ;; Tracked objects:
 11874 ;;		On entry : 0/0
 11875 ;;		On exit  : 0/0
 11876 ;;		Unchanged: 0/0
 11877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11879 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11881 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11882 ;;Total ram usage:        3 bytes
 11883 ;; Hardware stack levels used:    1
 11884 ;; Hardware stack levels required when called:    5
 11885 ;; This function calls:
 11886 ;;		Nothing
 11887 ;; This function is called by:
 11888 ;;		_Load_Main
 11889 ;; This function uses a non-reentrant model
 11890 ;;
 11891                           
 11892                           
 11893                           ;psect for function _getMain_Lights_Count
 11894  27CA                     _getMain_Lights_Count:	
 11895                           
 11896                           ;Main_B1.c: 460: char count = 0;
 11897                           
 11898                           ;incstack = 0
 11899                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11900  27CA  0020               	movlb	0	; select bank0
 11901  27CB  01A0               	clrf	getMain_Lights_Count@count
 11902                           
 11903                           ;Main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11904  27CC  3000               	movlw	0
 11905  27CD  0021               	movlb	1	; select bank1
 11906  27CE  19BC               	btfsc	_DimmerIntr1^(0+128),3
 11907  27CF  3001               	movlw	1
 11908  27D0  0020               	movlb	0	; select bank0
 11909  27D1  00A1               	movwf	getMain_Lights_Count@status1
 11910                           
 11911                           ;Main_B1.c: 467: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11912  27D2  3000               	movlw	0
 11913  27D3  0021               	movlb	1	; select bank1
 11914  27D4  19C8               	btfsc	_DimmerIntr2^(0+128),3
 11915  27D5  3001               	movlw	1
 11916  27D6  0020               	movlb	0	; select bank0
 11917  27D7  00A2               	movwf	getMain_Lights_Count@status2
 11918                           
 11919                           ;Main_B1.c: 490: return count = (status1 + status2);
 11920  27D8  0821               	movf	getMain_Lights_Count@status1,w
 11921  27D9  0722               	addwf	getMain_Lights_Count@status2,w
 11922  27DA  00A0               	movwf	getMain_Lights_Count@count
 11923  27DB  0008               	return
 11924  27DC                     __end_of_getMain_Lights_Count:	
 11925                           
 11926                           	psect	text66
 11927  2646                     __ptext66:	
 11928 ;; *************** function _getDimmer_Load_Status *****************
 11929 ;; Defined at:
 11930 ;;		line 1275 in file "../src/Dimmer_B1.c"
 11931 ;; Parameters:    Size  Location     Type
 11932 ;;		None
 11933 ;; Auto vars:     Size  Location     Type
 11934 ;;  status          1    0[BANK0 ] unsigned char 
 11935 ;; Return value:  Size  Location     Type
 11936 ;;                  1    wreg      unsigned char 
 11937 ;; Registers used:
 11938 ;;		wreg, status,2
 11939 ;; Tracked objects:
 11940 ;;		On entry : 0/0
 11941 ;;		On exit  : 0/0
 11942 ;;		Unchanged: 0/0
 11943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11945 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11948 ;;Total ram usage:        1 bytes
 11949 ;; Hardware stack levels used:    1
 11950 ;; Hardware stack levels required when called:    5
 11951 ;; This function calls:
 11952 ;;		Nothing
 11953 ;; This function is called by:
 11954 ;;		_Load_Main
 11955 ;; This function uses a non-reentrant model
 11956 ;;
 11957                           
 11958                           
 11959                           ;psect for function _getDimmer_Load_Status
 11960  2646                     _getDimmer_Load_Status:	
 11961                           
 11962                           ;Dimmer_B1.c: 1276: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11963                           
 11964                           ;incstack = 0
 11965                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11966  2646  3000               	movlw	0
 11967  2647  0022               	movlb	2	; select bank2
 11968  2648  192C               	btfsc	_Dimmer^(0+256),2
 11969  2649  3001               	movlw	1
 11970  264A  0020               	movlb	0	; select bank0
 11971  264B  00A0               	movwf	getDimmer_Load_Status@status
 11972                           
 11973                           ;Dimmer_B1.c: 1277: return status;
 11974  264C  0820               	movf	getDimmer_Load_Status@status,w
 11975  264D  0008               	return
 11976  264E                     __end_of_getDimmer_Load_Status:	
 11977                           
 11978                           	psect	text67
 11979  263E                     __ptext67:	
 11980 ;; *************** function _getDimmer_LoadGO *****************
 11981 ;; Defined at:
 11982 ;;		line 1269 in file "../src/Dimmer_B1.c"
 11983 ;; Parameters:    Size  Location     Type
 11984 ;;		None
 11985 ;; Auto vars:     Size  Location     Type
 11986 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11987 ;; Return value:  Size  Location     Type
 11988 ;;                  1    wreg      unsigned char 
 11989 ;; Registers used:
 11990 ;;		wreg, status,2
 11991 ;; Tracked objects:
 11992 ;;		On entry : 0/0
 11993 ;;		On exit  : 0/0
 11994 ;;		Unchanged: 0/0
 11995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11999 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12000 ;;Total ram usage:        1 bytes
 12001 ;; Hardware stack levels used:    1
 12002 ;; Hardware stack levels required when called:    5
 12003 ;; This function calls:
 12004 ;;		Nothing
 12005 ;; This function is called by:
 12006 ;;		_Load_Main
 12007 ;; This function uses a non-reentrant model
 12008 ;;
 12009                           
 12010                           
 12011                           ;psect for function _getDimmer_LoadGO
 12012  263E                     _getDimmer_LoadGO:	
 12013                           
 12014                           ;Dimmer_B1.c: 1270: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 12015                           
 12016                           ;incstack = 0
 12017                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 12018  263E  3000               	movlw	0
 12019  263F  0022               	movlb	2	; select bank2
 12020  2640  18AC               	btfsc	_Dimmer^(0+256),1
 12021  2641  3001               	movlw	1
 12022  2642  0020               	movlb	0	; select bank0
 12023  2643  00A0               	movwf	getDimmer_LoadGO@loadgo
 12024                           
 12025                           ;Dimmer_B1.c: 1271: return loadgo;
 12026  2644  0820               	movf	getDimmer_LoadGO@loadgo,w
 12027  2645  0008               	return
 12028  2646                     __end_of_getDimmer_LoadGO:	
 12029                           
 12030                           	psect	text68
 12031  1BCF                     __ptext68:	
 12032 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 12033 ;; Defined at:
 12034 ;;		line 318 in file "../src/Dimmer_B1.c"
 12035 ;; Parameters:    Size  Location     Type
 12036 ;;		None
 12037 ;; Auto vars:     Size  Location     Type
 12038 ;;  status          1    3[BANK0 ] unsigned char 
 12039 ;; Return value:  Size  Location     Type
 12040 ;;                  1    wreg      unsigned char 
 12041 ;; Registers used:
 12042 ;;		wreg, status,2, status,0
 12043 ;; Tracked objects:
 12044 ;;		On entry : 0/0
 12045 ;;		On exit  : 0/0
 12046 ;;		Unchanged: 0/0
 12047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;Total ram usage:        4 bytes
 12053 ;; Hardware stack levels used:    1
 12054 ;; Hardware stack levels required when called:    5
 12055 ;; This function calls:
 12056 ;;		Nothing
 12057 ;; This function is called by:
 12058 ;;		_Load_Main
 12059 ;; This function uses a non-reentrant model
 12060 ;;
 12061                           
 12062                           
 12063                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 12064  1BCF                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 12065                           
 12066                           ;Dimmer_B1.c: 319: char status = 0;
 12067                           
 12068                           ;incstack = 0
 12069                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 12070  1BCF  0020               	movlb	0	; select bank0
 12071  1BD0  01A3               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 12072                           
 12073                           ;Dimmer_B1.c: 326: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 12074  1BD1  01A1               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2387
 12075  1BD2  0AA1               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2387,f
 12076  1BD3  0021               	movlb	1	; select bank1
 12077  1BD4  1E3C               	btfss	_DimmerIntr1^(0+128),4
 12078  1BD5  1A48               	btfsc	_DimmerIntr2^(0+128),4
 12079  1BD6  2BD9               	goto	l8269
 12080  1BD7  0020               	movlb	0	; select bank0
 12081  1BD8  01A1               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2387
 12082  1BD9                     l8269:	
 12083  1BD9  0020               	movlb	0	; select bank0
 12084  1BDA  0821               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2387,w
 12085  1BDB  00A0               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 12086  1BDC  0820               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 12087  1BDD  00A3               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 12088                           
 12089                           ;Dimmer_B1.c: 334: if (status == 0) {
 12090  1BDE  08A3               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 12091  1BDF  1D03               	skipz
 12092  1BE0  2BEE               	goto	l8281
 12093                           
 12094                           ;Dimmer_B1.c: 340: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 12095  1BE1  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2388
 12096  1BE2  0AA2               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2388,f
 12097  1BE3  0021               	movlb	1	; select bank1
 12098  1BE4  1F3C               	btfss	_DimmerIntr1^(0+128),6
 12099  1BE5  1B48               	btfsc	_DimmerIntr2^(0+128),6
 12100  1BE6  2BE9               	goto	l8279
 12101  1BE7  0020               	movlb	0	; select bank0
 12102  1BE8  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2388
 12103  1BE9                     l8279:	
 12104  1BE9  0020               	movlb	0	; select bank0
 12105  1BEA  0822               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2388,w
 12106  1BEB  00A0               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 12107  1BEC  0820               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 12108  1BED  00A3               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 12109  1BEE                     l8281:	
 12110                           
 12111                           ;Dimmer_B1.c: 346: }
 12112                           ;Dimmer_B1.c: 348: return status;
 12113  1BEE  0823               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 12114  1BEF  0008               	return
 12115  1BF0                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 12116                           
 12117                           	psect	text69
 12118  1AF2                     __ptext69:	
 12119 ;; *************** function ___wmul *****************
 12120 ;; Defined at:
 12121 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 12122 ;; Parameters:    Size  Location     Type
 12123 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12124 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12125 ;; Auto vars:     Size  Location     Type
 12126 ;;  product         2    4[BANK0 ] unsigned int 
 12127 ;; Return value:  Size  Location     Type
 12128 ;;                  2    0[BANK0 ] unsigned int 
 12129 ;; Registers used:
 12130 ;;		wreg, status,2, status,0
 12131 ;; Tracked objects:
 12132 ;;		On entry : 0/0
 12133 ;;		On exit  : 0/0
 12134 ;;		Unchanged: 0/0
 12135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12136 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12137 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12139 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12140 ;;Total ram usage:        6 bytes
 12141 ;; Hardware stack levels used:    1
 12142 ;; Hardware stack levels required when called:    5
 12143 ;; This function calls:
 12144 ;;		Nothing
 12145 ;; This function is called by:
 12146 ;;		_Load_Main
 12147 ;; This function uses a non-reentrant model
 12148 ;;
 12149                           
 12150                           
 12151                           ;psect for function ___wmul
 12152  1AF2                     ___wmul:	
 12153                           
 12154                           ;incstack = 0
 12155                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12156  1AF2  0020               	movlb	0	; select bank0
 12157  1AF3  01A4               	clrf	___wmul@product
 12158  1AF4  01A5               	clrf	___wmul@product+1
 12159  1AF5                     l8959:	
 12160  1AF5  1C20               	btfss	___wmul@multiplier,0
 12161  1AF6  2AFB               	goto	l3094
 12162  1AF7  0822               	movf	___wmul@multiplicand,w
 12163  1AF8  07A4               	addwf	___wmul@product,f
 12164  1AF9  0823               	movf	___wmul@multiplicand+1,w
 12165  1AFA  3DA5               	addwfc	___wmul@product+1,f
 12166  1AFB                     l3094:	
 12167  1AFB  3001               	movlw	1
 12168  1AFC                     u9475:	
 12169  1AFC  35A2               	lslf	___wmul@multiplicand,f
 12170  1AFD  0DA3               	rlf	___wmul@multiplicand+1,f
 12171  1AFE  0B89               	decfsz	9,f
 12172  1AFF  2AFC               	goto	u9475
 12173  1B00  3001               	movlw	1
 12174  1B01                     u9485:	
 12175  1B01  36A1               	lsrf	___wmul@multiplier+1,f
 12176  1B02  0CA0               	rrf	___wmul@multiplier,f
 12177  1B03  0B89               	decfsz	9,f
 12178  1B04  2B01               	goto	u9485
 12179  1B05  0821               	movf	___wmul@multiplier+1,w
 12180  1B06  0420               	iorwf	___wmul@multiplier,w
 12181  1B07  1D03               	skipz
 12182  1B08  2AF5               	goto	l8959
 12183  1B09  0825               	movf	___wmul@product+1,w
 12184  1B0A  01A1               	clrf	?___wmul+1
 12185  1B0B  07A1               	addwf	?___wmul+1,f
 12186  1B0C  0824               	movf	___wmul@product,w
 12187  1B0D  01A0               	clrf	?___wmul
 12188  1B0E  07A0               	addwf	?___wmul,f
 12189  1B0F  0008               	return
 12190  1B10                     __end_of___wmul:	
 12191                           
 12192                           	psect	text70
 12193  1E2E                     __ptext70:	
 12194 ;; *************** function ___lwdiv *****************
 12195 ;; Defined at:
 12196 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 12197 ;; Parameters:    Size  Location     Type
 12198 ;;  divisor         2    0[BANK0 ] unsigned int 
 12199 ;;  dividend        2    2[BANK0 ] unsigned int 
 12200 ;; Auto vars:     Size  Location     Type
 12201 ;;  quotient        2    5[BANK0 ] unsigned int 
 12202 ;;  counter         1    7[BANK0 ] unsigned char 
 12203 ;; Return value:  Size  Location     Type
 12204 ;;                  2    0[BANK0 ] unsigned int 
 12205 ;; Registers used:
 12206 ;;		wreg, status,2, status,0
 12207 ;; Tracked objects:
 12208 ;;		On entry : 0/0
 12209 ;;		On exit  : 0/0
 12210 ;;		Unchanged: 0/0
 12211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12212 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12213 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12215 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12216 ;;Total ram usage:        8 bytes
 12217 ;; Hardware stack levels used:    1
 12218 ;; Hardware stack levels required when called:    5
 12219 ;; This function calls:
 12220 ;;		Nothing
 12221 ;; This function is called by:
 12222 ;;		_Load_Main
 12223 ;;		_setTemp_Main
 12224 ;;		_setRF_Main
 12225 ;; This function uses a non-reentrant model
 12226 ;;
 12227                           
 12228                           
 12229                           ;psect for function ___lwdiv
 12230  1E2E                     ___lwdiv:	
 12231                           
 12232                           ;incstack = 0
 12233                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12234  1E2E  0020               	movlb	0	; select bank0
 12235  1E2F  01A5               	clrf	___lwdiv@quotient
 12236  1E30  01A6               	clrf	___lwdiv@quotient+1
 12237  1E31  0821               	movf	___lwdiv@divisor+1,w
 12238  1E32  0420               	iorwf	___lwdiv@divisor,w
 12239  1E33  1903               	skipnz
 12240  1E34  2E5E               	goto	l8183
 12241  1E35  01A7               	clrf	___lwdiv@counter
 12242  1E36  0AA7               	incf	___lwdiv@counter,f
 12243  1E37                     l8171:	
 12244  1E37  1BA1               	btfsc	___lwdiv@divisor+1,7
 12245  1E38  2E43               	goto	l8173
 12246  1E39  3001               	movlw	1
 12247  1E3A                     u7985:	
 12248  1E3A  35A0               	lslf	___lwdiv@divisor,f
 12249  1E3B  0DA1               	rlf	___lwdiv@divisor+1,f
 12250  1E3C  0B89               	decfsz	9,f
 12251  1E3D  2E3A               	goto	u7985
 12252  1E3E  3001               	movlw	1
 12253  1E3F  00A4               	movwf	??___lwdiv
 12254  1E40  0824               	movf	??___lwdiv,w
 12255  1E41  07A7               	addwf	___lwdiv@counter,f
 12256  1E42  2E37               	goto	l8171
 12257  1E43                     l8173:	
 12258  1E43  3001               	movlw	1
 12259  1E44                     u8005:	
 12260  1E44  35A5               	lslf	___lwdiv@quotient,f
 12261  1E45  0DA6               	rlf	___lwdiv@quotient+1,f
 12262  1E46  0B89               	decfsz	9,f
 12263  1E47  2E44               	goto	u8005
 12264  1E48  0821               	movf	___lwdiv@divisor+1,w
 12265  1E49  0223               	subwf	___lwdiv@dividend+1,w
 12266  1E4A  1D03               	skipz
 12267  1E4B  2E4E               	goto	u8015
 12268  1E4C  0820               	movf	___lwdiv@divisor,w
 12269  1E4D  0222               	subwf	___lwdiv@dividend,w
 12270  1E4E                     u8015:	
 12271  1E4E  1C03               	skipc
 12272  1E4F  2E55               	goto	l8179
 12273  1E50  0820               	movf	___lwdiv@divisor,w
 12274  1E51  02A2               	subwf	___lwdiv@dividend,f
 12275  1E52  0821               	movf	___lwdiv@divisor+1,w
 12276  1E53  3BA3               	subwfb	___lwdiv@dividend+1,f
 12277  1E54  1425               	bsf	___lwdiv@quotient,0
 12278  1E55                     l8179:	
 12279  1E55  3001               	movlw	1
 12280  1E56                     u8025:	
 12281  1E56  36A1               	lsrf	___lwdiv@divisor+1,f
 12282  1E57  0CA0               	rrf	___lwdiv@divisor,f
 12283  1E58  0B89               	decfsz	9,f
 12284  1E59  2E56               	goto	u8025
 12285  1E5A  3001               	movlw	1
 12286  1E5B  02A7               	subwf	___lwdiv@counter,f
 12287  1E5C  1D03               	btfss	3,2
 12288  1E5D  2E43               	goto	l8173
 12289  1E5E                     l8183:	
 12290  1E5E  0826               	movf	___lwdiv@quotient+1,w
 12291  1E5F  01A1               	clrf	?___lwdiv+1
 12292  1E60  07A1               	addwf	?___lwdiv+1,f
 12293  1E61  0825               	movf	___lwdiv@quotient,w
 12294  1E62  01A0               	clrf	?___lwdiv
 12295  1E63  07A0               	addwf	?___lwdiv,f
 12296  1E64  0008               	return
 12297  1E65                     __end_of___lwdiv:	
 12298                           
 12299                           	psect	text71
 12300  25E5                     __ptext71:	
 12301 ;; *************** function _Load_Initialization *****************
 12302 ;; Defined at:
 12303 ;;		line 9 in file "../src/OverLoad_B1.c"
 12304 ;; Parameters:    Size  Location     Type
 12305 ;;		None
 12306 ;; Auto vars:     Size  Location     Type
 12307 ;;		None
 12308 ;; Return value:  Size  Location     Type
 12309 ;;		None               void
 12310 ;; Registers used:
 12311 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12312 ;; Tracked objects:
 12313 ;;		On entry : 0/0
 12314 ;;		On exit  : 0/0
 12315 ;;		Unchanged: 0/0
 12316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;Total ram usage:        0 bytes
 12322 ;; Hardware stack levels used:    1
 12323 ;; Hardware stack levels required when called:    6
 12324 ;; This function calls:
 12325 ;;		_setLoad_AH_AL_Restore
 12326 ;; This function is called by:
 12327 ;;		_main
 12328 ;; This function uses a non-reentrant model
 12329 ;;
 12330                           
 12331                           
 12332                           ;psect for function _Load_Initialization
 12333  25E5                     _Load_Initialization:	
 12334                           
 12335                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12336                           
 12337                           ;incstack = 0
 12338                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12339  25E5  319A  227F         	fcall	_setLoad_AH_AL_Restore
 12340  25E7  0008               	return
 12341  25E8                     __end_of_Load_Initialization:	
 12342                           
 12343                           	psect	text72
 12344  1A7F                     __ptext72:	
 12345 ;; *************** function _setLoad_AH_AL_Restore *****************
 12346 ;; Defined at:
 12347 ;;		line 294 in file "../src/OverLoad_B1.c"
 12348 ;; Parameters:    Size  Location     Type
 12349 ;;		None
 12350 ;; Auto vars:     Size  Location     Type
 12351 ;;  i               1    1[BANK0 ] unsigned char 
 12352 ;; Return value:  Size  Location     Type
 12353 ;;		None               void
 12354 ;; Registers used:
 12355 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12356 ;; Tracked objects:
 12357 ;;		On entry : 0/0
 12358 ;;		On exit  : 0/0
 12359 ;;		Unchanged: 0/0
 12360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12364 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12365 ;;Total ram usage:        2 bytes
 12366 ;; Hardware stack levels used:    1
 12367 ;; Hardware stack levels required when called:    5
 12368 ;; This function calls:
 12369 ;;		Nothing
 12370 ;; This function is called by:
 12371 ;;		_Load_Initialization
 12372 ;;		_Load_Main
 12373 ;; This function uses a non-reentrant model
 12374 ;;
 12375                           
 12376                           
 12377                           ;psect for function _setLoad_AH_AL_Restore
 12378  1A7F                     _setLoad_AH_AL_Restore:	
 12379                           
 12380                           ;OverLoad_B1.c: 295: char i;
 12381                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 12382                           
 12383                           ;incstack = 0
 12384                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12385  1A7F  0020               	movlb	0	; select bank0
 12386  1A80  01A1               	clrf	setLoad_AH_AL_Restore@i
 12387  1A81                     L10:	
 12388  1A81  3005               	movlw	5
 12389  1A82  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12390  1A83  1803               	btfsc	3,0
 12391  1A84  0008               	return
 12392                           
 12393                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 12394  1A85  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12395  1A86  3E43               	addlw	(_Load+11)& (0+255)
 12396  1A87  0086               	movwf	6
 12397  1A88  3001               	movlw	1	; select bank2/3
 12398  1A89  0087               	movwf	7
 12399  1A8A  3000               	movlw	0
 12400  1A8B  3FC0               	movwi [0]fsr1
 12401  1A8C  3FC1               	movwi [1]fsr1
 12402                           
 12403                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 12404  1A8D  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12405  1A8E  3E4D               	addlw	(_Load+21)& (0+255)
 12406  1A8F  0086               	movwf	6
 12407  1A90  3001               	movlw	1	; select bank2/3
 12408  1A91  0087               	movwf	7
 12409  1A92  30FF               	movlw	255
 12410  1A93  3FC0               	movwi [0]fsr1
 12411  1A94  30FF               	movlw	255
 12412  1A95  3FC1               	movwi [1]fsr1
 12413  1A96  3001               	movlw	1
 12414  1A97  00A0               	movwf	??_setLoad_AH_AL_Restore
 12415  1A98  0820               	movf	??_setLoad_AH_AL_Restore,w
 12416  1A99  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12417  1A9A  2A81               	goto	L10
 12418  1A9B                     __end_of_setLoad_AH_AL_Restore:	
 12419                           
 12420                           	psect	text73
 12421  26E4                     __ptext73:	
 12422 ;; *************** function _LED_Main *****************
 12423 ;; Defined at:
 12424 ;;		line 47 in file "../src/LED_B1.c"
 12425 ;; Parameters:    Size  Location     Type
 12426 ;;		None
 12427 ;; Auto vars:     Size  Location     Type
 12428 ;;		None
 12429 ;; Return value:  Size  Location     Type
 12430 ;;		None               void
 12431 ;; Registers used:
 12432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12433 ;; Tracked objects:
 12434 ;;		On entry : 0/0
 12435 ;;		On exit  : 0/0
 12436 ;;		Unchanged: 0/0
 12437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;Total ram usage:        0 bytes
 12443 ;; Hardware stack levels used:    1
 12444 ;; Hardware stack levels required when called:    7
 12445 ;; This function calls:
 12446 ;;		_setLED_Main
 12447 ;; This function is called by:
 12448 ;;		_main
 12449 ;; This function uses a non-reentrant model
 12450 ;;
 12451                           
 12452                           
 12453                           ;psect for function _LED_Main
 12454  26E4                     _LED_Main:	
 12455                           
 12456                           ;LED_B1.c: 58: setLED_Main(1);
 12457                           
 12458                           ;incstack = 0
 12459                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12460  26E4  3001               	movlw	1
 12461  26E5  3190  2072  31A6   	fcall	_setLED_Main
 12462                           
 12463                           ;LED_B1.c: 61: setLED_Main(2);
 12464  26E8  3002               	movlw	2
 12465  26E9  3190  2072  31A6   	fcall	_setLED_Main
 12466                           
 12467                           ;LED_B1.c: 67: setLED_Main(99);
 12468  26EC  3063               	movlw	99
 12469  26ED  3190  2072         	fcall	_setLED_Main
 12470  26EF  0008               	return
 12471  26F0                     __end_of_LED_Main:	
 12472                           
 12473                           	psect	text74
 12474  1072                     __ptext74:	
 12475 ;; *************** function _setLED_Main *****************
 12476 ;; Defined at:
 12477 ;;		line 229 in file "../src/LED_B1.c"
 12478 ;; Parameters:    Size  Location     Type
 12479 ;;  led             1    wreg     unsigned char 
 12480 ;; Auto vars:     Size  Location     Type
 12481 ;;  led             1    4[BANK0 ] unsigned char 
 12482 ;; Return value:  Size  Location     Type
 12483 ;;		None               void
 12484 ;; Registers used:
 12485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12486 ;; Tracked objects:
 12487 ;;		On entry : 0/0
 12488 ;;		On exit  : 0/0
 12489 ;;		Unchanged: 0/0
 12490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12493 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;Total ram usage:        3 bytes
 12496 ;; Hardware stack levels used:    1
 12497 ;; Hardware stack levels required when called:    6
 12498 ;; This function calls:
 12499 ;;		_LedPointSelect
 12500 ;; This function is called by:
 12501 ;;		_LED_Main
 12502 ;; This function uses a non-reentrant model
 12503 ;;
 12504                           
 12505                           
 12506                           ;psect for function _setLED_Main
 12507  1072                     _setLED_Main:	
 12508                           
 12509                           ;incstack = 0
 12510                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12511                           ;setLED_Main@led stored from wreg
 12512  1072  0020               	movlb	0	; select bank0
 12513  1073  00A4               	movwf	setLED_Main@led
 12514                           
 12515                           ;LED_B1.c: 230: LedPointSelect(led);
 12516  1074  0824               	movf	setLED_Main@led,w
 12517  1075  319B  234E  3190   	fcall	_LedPointSelect
 12518                           
 12519                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12520  1078  0021               	movlb	1	; select bank1
 12521  1079  085B               	movf	_LED^(0+128),w
 12522  107A  0086               	movwf	6
 12523  107B  3001               	movlw	1	; select bank2/3
 12524  107C  0087               	movwf	7
 12525  107D  1C81               	btfss	1,1
 12526  107E  0008               	return
 12527                           
 12528                           ;LED_B1.c: 232: LED->Time++;
 12529  107F  0A5B               	incf	_LED^(0+128),w
 12530  1080  0086               	movwf	6
 12531  1081  3001               	movlw	1	; select bank2/3
 12532  1082  0087               	movwf	7
 12533  1083  3001               	movlw	1
 12534  1084  0781               	addwf	1,f
 12535  1085  3141               	addfsr 1,1
 12536  1086  1803               	skipnc
 12537  1087  0A81               	incf	1,f
 12538                           
 12539                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12540  1088  0A5B               	incf	_LED^(0+128),w
 12541  1089  0086               	movwf	6
 12542  108A  3001               	movlw	1	; select bank2/3
 12543  108B  0087               	movwf	7
 12544  108C  3F40               	moviw [0]fsr1
 12545  108D  0020               	movlb	0	; select bank0
 12546  108E  00A2               	movwf	??_setLED_Main
 12547  108F  3F41               	moviw [1]fsr1
 12548  1090  00A3               	movwf	??_setLED_Main+1
 12549  1091  3000               	movlw	0
 12550  1092  0223               	subwf	??_setLED_Main+1,w
 12551  1093  3019               	movlw	25
 12552  1094  1903               	skipnz
 12553  1095  0222               	subwf	??_setLED_Main,w
 12554  1096  1C03               	skipc
 12555  1097  0008               	return
 12556                           
 12557                           ;LED_B1.c: 234: LED->Time = 0;
 12558  1098  0021               	movlb	1	; select bank1
 12559  1099  0A5B               	incf	_LED^(0+128),w
 12560  109A  0086               	movwf	6
 12561  109B  3001               	movlw	1	; select bank2/3
 12562  109C  0087               	movwf	7
 12563  109D  3000               	movlw	0
 12564  109E  3FC0               	movwi [0]fsr1
 12565  109F  3FC1               	movwi [1]fsr1
 12566                           
 12567                           ;LED_B1.c: 237: if (led == 1) {
 12568  10A0  0020               	movlb	0	; select bank0
 12569  10A1  0824               	movf	setLED_Main@led,w
 12570  10A2  3A01               	xorlw	1
 12571                           
 12572                           ;LED_B1.c: 238: RA3 = RA3 == 1 ? 0 : 1;
 12573  10A3  3008               	movlw	8
 12574  10A4  1903               	btfsc	3,2
 12575  10A5  068C               	xorwf	12,f
 12576                           
 12577                           ;LED_B1.c: 239: }
 12578                           ;LED_B1.c: 242: if (led == 2) {
 12579  10A6  0824               	movf	setLED_Main@led,w
 12580  10A7  3A02               	xorlw	2
 12581  10A8  1D03               	skipz
 12582  10A9  28AC               	goto	l1205
 12583                           
 12584                           ;LED_B1.c: 243: RC7 = RC7 == 1 ? 0 : 1;
 12585  10AA  3080               	movlw	128
 12586  10AB  068E               	xorwf	14,f
 12587  10AC                     l1205:	
 12588                           
 12589                           ;LED_B1.c: 244: }
 12590                           ;LED_B1.c: 252: if (led == 99) {
 12591  10AC  0824               	movf	setLED_Main@led,w
 12592  10AD  3A63               	xorlw	99
 12593  10AE  1D03               	skipz
 12594  10AF  0008               	return
 12595                           
 12596                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12597  10B0  3020               	movlw	32
 12598  10B1  068D               	xorwf	13,f
 12599  10B2  0008               	return
 12600  10B3                     __end_of_setLED_Main:	
 12601                           
 12602                           	psect	text75
 12603  26D8                     __ptext75:	
 12604 ;; *************** function _LED_Initialization *****************
 12605 ;; Defined at:
 12606 ;;		line 31 in file "../src/LED_B1.c"
 12607 ;; Parameters:    Size  Location     Type
 12608 ;;		None
 12609 ;; Auto vars:     Size  Location     Type
 12610 ;;		None
 12611 ;; Return value:  Size  Location     Type
 12612 ;;		None               void
 12613 ;; Registers used:
 12614 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12615 ;; Tracked objects:
 12616 ;;		On entry : 0/0
 12617 ;;		On exit  : 0/0
 12618 ;;		Unchanged: 0/0
 12619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;Total ram usage:        0 bytes
 12625 ;; Hardware stack levels used:    1
 12626 ;; Hardware stack levels required when called:    8
 12627 ;; This function calls:
 12628 ;;		_setLED_Initialization
 12629 ;; This function is called by:
 12630 ;;		_main
 12631 ;; This function uses a non-reentrant model
 12632 ;;
 12633                           
 12634                           
 12635                           ;psect for function _LED_Initialization
 12636  26D8                     _LED_Initialization:	
 12637                           
 12638                           ;LED_B1.c: 33: setLED_Initialization(1);
 12639                           
 12640                           ;incstack = 0
 12641                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12642  26D8  3001               	movlw	1
 12643  26D9  31A7  27B8  31A6   	fcall	_setLED_Initialization
 12644                           
 12645                           ;LED_B1.c: 36: setLED_Initialization(2);
 12646  26DC  3002               	movlw	2
 12647  26DD  31A7  27B8  31A6   	fcall	_setLED_Initialization
 12648                           
 12649                           ;LED_B1.c: 42: setLED_Initialization(99);
 12650  26E0  3063               	movlw	99
 12651  26E1  31A7  27B8         	fcall	_setLED_Initialization
 12652  26E3  0008               	return
 12653  26E4                     __end_of_LED_Initialization:	
 12654                           
 12655                           	psect	text76
 12656  27B8                     __ptext76:	
 12657 ;; *************** function _setLED_Initialization *****************
 12658 ;; Defined at:
 12659 ;;		line 74 in file "../src/LED_B1.c"
 12660 ;; Parameters:    Size  Location     Type
 12661 ;;  led             1    wreg     unsigned char 
 12662 ;; Auto vars:     Size  Location     Type
 12663 ;;  led             1    4[BANK0 ] unsigned char 
 12664 ;; Return value:  Size  Location     Type
 12665 ;;		None               void
 12666 ;; Registers used:
 12667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12668 ;; Tracked objects:
 12669 ;;		On entry : 0/0
 12670 ;;		On exit  : 0/0
 12671 ;;		Unchanged: 0/0
 12672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12676 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12677 ;;Total ram usage:        1 bytes
 12678 ;; Hardware stack levels used:    1
 12679 ;; Hardware stack levels required when called:    7
 12680 ;; This function calls:
 12681 ;;		_LedPointSelect
 12682 ;;		_setLED
 12683 ;; This function is called by:
 12684 ;;		_LED_Initialization
 12685 ;; This function uses a non-reentrant model
 12686 ;;
 12687                           
 12688                           
 12689                           ;psect for function _setLED_Initialization
 12690  27B8                     _setLED_Initialization:	
 12691                           
 12692                           ;incstack = 0
 12693                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12694                           ;setLED_Initialization@led stored from wreg
 12695  27B8  0020               	movlb	0	; select bank0
 12696  27B9  00A4               	movwf	setLED_Initialization@led
 12697                           
 12698                           ;LED_B1.c: 75: LedPointSelect(led);
 12699  27BA  0824               	movf	setLED_Initialization@led,w
 12700  27BB  319B  234E  31A7   	fcall	_LedPointSelect
 12701                           
 12702                           ;LED_B1.c: 76: LED->Enable = 1;
 12703  27BE  0021               	movlb	1	; select bank1
 12704  27BF  085B               	movf	_LED^(0+128),w
 12705  27C0  0086               	movwf	6
 12706  27C1  3001               	movlw	1	; select bank2/3
 12707  27C2  0087               	movwf	7
 12708  27C3  1401               	bsf	1,0
 12709                           
 12710                           ;LED_B1.c: 77: setLED(led, 0);
 12711  27C4  0020               	movlb	0	; select bank0
 12712  27C5  01A2               	clrf	setLED@command
 12713  27C6  0824               	movf	setLED_Initialization@led,w
 12714  27C7  3188  2000         	fcall	_setLED
 12715  27C9  0008               	return
 12716  27CA                     __end_of_setLED_Initialization:	
 12717                           
 12718                           	psect	text77
 12719  1031                     __ptext77:	
 12720 ;; *************** function _Flash_Memory_Main *****************
 12721 ;; Defined at:
 12722 ;;		line 976 in file "../src/MCU_B1.c"
 12723 ;; Parameters:    Size  Location     Type
 12724 ;;		None
 12725 ;; Auto vars:     Size  Location     Type
 12726 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12727 ;; Return value:  Size  Location     Type
 12728 ;;		None               void
 12729 ;; Registers used:
 12730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12731 ;; Tracked objects:
 12732 ;;		On entry : 0/0
 12733 ;;		On exit  : 0/0
 12734 ;;		Unchanged: 0/0
 12735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;Total ram usage:        3 bytes
 12741 ;; Hardware stack levels used:    1
 12742 ;; Hardware stack levels required when called:    8
 12743 ;; This function calls:
 12744 ;;		_Flash_Memory_Modify
 12745 ;;		_getAll_Sw_KeyStatus
 12746 ;;		_getMain_All_LightsStatus
 12747 ;; This function is called by:
 12748 ;;		_main
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           
 12753                           ;psect for function _Flash_Memory_Main
 12754  1031                     _Flash_Memory_Main:	
 12755                           
 12756                           ;MCU_B1.c: 977: char key_Status = 0;
 12757                           
 12758                           ;incstack = 0
 12759                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12760  1031  0020               	movlb	0	; select bank0
 12761  1032  01A7               	clrf	Flash_Memory_Main@key_Status
 12762                           
 12763                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12764  1033  31A7  2761  3190   	fcall	_getAll_Sw_KeyStatus
 12765  1036  0020               	movlb	0	; select bank0
 12766  1037  00A6               	movwf	??_Flash_Memory_Main
 12767  1038  0826               	movf	??_Flash_Memory_Main,w
 12768  1039  00A7               	movwf	Flash_Memory_Main@key_Status
 12769                           
 12770                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12771  103A  0024               	movlb	4	; select bank4
 12772  103B  1C44               	btfss	(_Memory^(0+512)+36),0
 12773  103C  0008               	return
 12774                           
 12775                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12776  103D  0020               	movlb	0	; select bank0
 12777  103E  01A8               	clrf	_Flash_Memory_Main$3441
 12778  103F  3198  208E  3190   	fcall	_getMain_All_LightsStatus
 12779  1042  3800               	iorlw	0
 12780  1043  1D03               	skipz
 12781  1044  284B               	goto	l9091
 12782  1045  0020               	movlb	0	; select bank0
 12783  1046  08A7               	movf	Flash_Memory_Main@key_Status,f
 12784  1047  1D03               	skipz
 12785  1048  284B               	goto	l9091
 12786  1049  01A8               	clrf	_Flash_Memory_Main$3441
 12787  104A  0AA8               	incf	_Flash_Memory_Main$3441,f
 12788  104B                     l9091:	
 12789  104B  0020               	movlb	0	; select bank0
 12790  104C  0828               	movf	_Flash_Memory_Main$3441,w
 12791  104D  0024               	movlb	4	; select bank4
 12792  104E  10C4               	bcf	(_Memory^(0+512)+36),1
 12793  104F  1D03               	skipz
 12794  1050  14C4               	bsf	(_Memory^(0+512)+36),1
 12795                           
 12796                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12797  1051  1CC4               	btfss	(_Memory^(0+512)+36),1
 12798  1052  286C               	goto	l1478
 12799                           
 12800                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12801  1053  15C4               	bsf	(_Memory^(0+512)+36),3
 12802                           
 12803                           ;MCU_B1.c: 985: Memory.Time++;
 12804  1054  3001               	movlw	1
 12805  1055  07C2               	addwf	(_Memory^(0+512)+34),f
 12806  1056  3000               	movlw	0
 12807  1057  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12808                           
 12809                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12810  1058  3022               	movlw	34
 12811  1059  3E20               	addlw	_Memory& (0+255)
 12812  105A  0086               	movwf	6
 12813  105B  3002               	movlw	2	; select bank4/5
 12814  105C  0087               	movwf	7
 12815  105D  3F40               	moviw [0]fsr1
 12816  105E  3A0A               	xorlw	10
 12817  105F  1D03               	skipz
 12818  1060  2863               	goto	u9715
 12819  1061  3F41               	moviw [1]fsr1
 12820  1062  3A00               	xorlw	0
 12821  1063                     u9715:	
 12822  1063  1D03               	skipz
 12823  1064  0008               	return
 12824                           
 12825                           ;MCU_B1.c: 987: Memory.Time = 0;
 12826  1065  01C2               	clrf	(_Memory^(0+512)+34)
 12827  1066  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12828                           
 12829                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12830  1067  1044               	bcf	(_Memory^(0+512)+36),0
 12831                           
 12832                           ;MCU_B1.c: 989: Memory.GO = 0;
 12833  1068  10C4               	bcf	(_Memory^(0+512)+36),1
 12834                           
 12835                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12836  1069  3188  20D3         	fcall	_Flash_Memory_Modify
 12837                           
 12838                           ;MCU_B1.c: 991: }
 12839                           ;MCU_B1.c: 992: } else {
 12840  106B  0008               	return
 12841  106C                     l1478:	
 12842                           
 12843                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12844  106C  1DC4               	btfss	(_Memory^(0+512)+36),3
 12845  106D  0008               	return
 12846                           
 12847                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12848  106E  11C4               	bcf	(_Memory^(0+512)+36),3
 12849                           
 12850                           ;MCU_B1.c: 995: Memory.Time = 0;
 12851  106F  01C2               	clrf	(_Memory^(0+512)+34)
 12852  1070  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12853  1071  0008               	return
 12854  1072                     __end_of_Flash_Memory_Main:	
 12855                           
 12856                           	psect	text78
 12857  2761                     __ptext78:	
 12858 ;; *************** function _getAll_Sw_KeyStatus *****************
 12859 ;; Defined at:
 12860 ;;		line 279 in file "../src/Switch_B1.c"
 12861 ;; Parameters:    Size  Location     Type
 12862 ;;		None
 12863 ;; Auto vars:     Size  Location     Type
 12864 ;;  status          1    1[BANK0 ] unsigned char 
 12865 ;; Return value:  Size  Location     Type
 12866 ;;                  1    wreg      unsigned char 
 12867 ;; Registers used:
 12868 ;;		wreg, status,2
 12869 ;; Tracked objects:
 12870 ;;		On entry : 0/0
 12871 ;;		On exit  : 0/0
 12872 ;;		Unchanged: 0/0
 12873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12878 ;;Total ram usage:        3 bytes
 12879 ;; Hardware stack levels used:    1
 12880 ;; Hardware stack levels required when called:    5
 12881 ;; This function calls:
 12882 ;;		Nothing
 12883 ;; This function is called by:
 12884 ;;		_Flash_Memory_Main
 12885 ;; This function uses a non-reentrant model
 12886 ;;
 12887                           
 12888                           
 12889                           ;psect for function _getAll_Sw_KeyStatus
 12890  2761                     _getAll_Sw_KeyStatus:	
 12891                           
 12892                           ;Switch_B1.c: 280: char status = 0;
 12893                           
 12894                           ;incstack = 0
 12895                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12896  2761  0020               	movlb	0	; select bank0
 12897  2762  01A1               	clrf	getAll_Sw_KeyStatus@status
 12898                           
 12899                           ;Switch_B1.c: 290: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1 ? 1 : 0;
 12900  2763  01A2               	clrf	_getAll_Sw_KeyStatus$6891
 12901  2764  0AA2               	incf	_getAll_Sw_KeyStatus$6891,f
 12902  2765  1F0C               	btfss	12,6	;volatile
 12903  2766  1A0C               	btfsc	12,4	;volatile
 12904  2767  2F6C               	goto	l8639
 12905  2768  1C0C               	btfss	12,0	;volatile
 12906  2769  188D               	btfsc	13,1	;volatile
 12907  276A  2F6C               	goto	l8639
 12908  276B  01A2               	clrf	_getAll_Sw_KeyStatus$6891
 12909  276C                     l8639:	
 12910  276C  0822               	movf	_getAll_Sw_KeyStatus$6891,w
 12911  276D  00A0               	movwf	??_getAll_Sw_KeyStatus
 12912  276E  0820               	movf	??_getAll_Sw_KeyStatus,w
 12913  276F  00A1               	movwf	getAll_Sw_KeyStatus@status
 12914                           
 12915                           ;Switch_B1.c: 303: return status;
 12916  2770  0821               	movf	getAll_Sw_KeyStatus@status,w
 12917  2771  0008               	return
 12918  2772                     __end_of_getAll_Sw_KeyStatus:	
 12919                           
 12920                           	psect	text79
 12921  08D3                     __ptext79:	
 12922 ;; *************** function _Flash_Memory_Modify *****************
 12923 ;; Defined at:
 12924 ;;		line 1053 in file "../src/MCU_B1.c"
 12925 ;; Parameters:    Size  Location     Type
 12926 ;;		None
 12927 ;; Auto vars:     Size  Location     Type
 12928 ;;  i               1    5[BANK0 ] unsigned char 
 12929 ;; Return value:  Size  Location     Type
 12930 ;;		None               void
 12931 ;; Registers used:
 12932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12933 ;; Tracked objects:
 12934 ;;		On entry : 0/0
 12935 ;;		On exit  : 0/0
 12936 ;;		Unchanged: 0/0
 12937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;Total ram usage:        2 bytes
 12943 ;; Hardware stack levels used:    1
 12944 ;; Hardware stack levels required when called:    7
 12945 ;; This function calls:
 12946 ;;		_Flash_Memory_Erasing
 12947 ;;		_Flash_Memory_Read
 12948 ;;		_Flash_Memory_Write
 12949 ;;		_setMemory_Data
 12950 ;; This function is called by:
 12951 ;;		_Flash_Memory_Main
 12952 ;; This function uses a non-reentrant model
 12953 ;;
 12954                           
 12955                           
 12956                           ;psect for function _Flash_Memory_Modify
 12957  08D3                     _Flash_Memory_Modify:	
 12958                           
 12959                           ;MCU_B1.c: 1054: char i = 0;
 12960                           
 12961                           ;incstack = 0
 12962                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12963  08D3  0020               	movlb	0	; select bank0
 12964  08D4  01A5               	clrf	Flash_Memory_Modify@i
 12965                           
 12966                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12967  08D5  01A5               	clrf	Flash_Memory_Modify@i
 12968  08D6  3020               	movlw	32
 12969  08D7  0225               	subwf	Flash_Memory_Modify@i,w
 12970  08D8  1803               	btfsc	3,0
 12971  08D9  28EF               	goto	l8657
 12972  08DA                     l8651:	
 12973                           
 12974                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12975  08DA  0825               	movf	Flash_Memory_Modify@i,w
 12976  08DB  319A  2216  3188   	fcall	_Flash_Memory_Read
 12977  08DE  0020               	movlb	0	; select bank0
 12978  08DF  00A4               	movwf	??_Flash_Memory_Modify
 12979  08E0  0825               	movf	Flash_Memory_Modify@i,w
 12980  08E1  3E20               	addlw	_Memory& (0+255)
 12981  08E2  0086               	movwf	6
 12982  08E3  3002               	movlw	2	; select bank4/5
 12983  08E4  0087               	movwf	7
 12984  08E5  0824               	movf	??_Flash_Memory_Modify,w
 12985  08E6  0081               	movwf	1
 12986  08E7  3001               	movlw	1
 12987  08E8  00A4               	movwf	??_Flash_Memory_Modify
 12988  08E9  0824               	movf	??_Flash_Memory_Modify,w
 12989  08EA  07A5               	addwf	Flash_Memory_Modify@i,f
 12990  08EB  3020               	movlw	32
 12991  08EC  0225               	subwf	Flash_Memory_Modify@i,w
 12992  08ED  1C03               	skipc
 12993  08EE  28DA               	goto	l8651
 12994  08EF                     l8657:	
 12995                           
 12996                           ;MCU_B1.c: 1057: }
 12997                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12998  08EF  0021               	movlb	1	; select bank1
 12999  08F0  086E               	movf	_product^(0+128),w
 13000  08F1  0086               	movwf	6
 13001  08F2  3002               	movlw	2	; select bank4/5
 13002  08F3  0087               	movwf	7
 13003  08F4  3002               	movlw	2	; select bank4/5
 13004  08F5  3F4C               	moviw [12]fsr1
 13005  08F6  0020               	movlb	0	; select bank0
 13006  08F7  00A0               	movwf	setMemory_Data@data
 13007  08F8  3000               	movlw	0
 13008  08F9  31A6  26C0  3188   	fcall	_setMemory_Data
 13009                           
 13010                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 13011  08FC  0021               	movlb	1	; select bank1
 13012  08FD  086E               	movf	_product^(0+128),w
 13013  08FE  0086               	movwf	6
 13014  08FF  3002               	movlw	2	; select bank4/5
 13015  0900  0087               	movwf	7
 13016  0901  3002               	movlw	2	; select bank4/5
 13017  0902  3F4D               	moviw [13]fsr1
 13018  0903  0020               	movlb	0	; select bank0
 13019  0904  00A0               	movwf	setMemory_Data@data
 13020  0905  3001               	movlw	1
 13021  0906  31A6  26C0  3188   	fcall	_setMemory_Data
 13022                           
 13023                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 13024  0909  0021               	movlb	1	; select bank1
 13025  090A  086E               	movf	_product^(0+128),w
 13026  090B  0086               	movwf	6
 13027  090C  3002               	movlw	2	; select bank4/5
 13028  090D  0087               	movwf	7
 13029  090E  3002               	movlw	2	; select bank4/5
 13030  090F  3F4E               	moviw [14]fsr1
 13031  0910  0020               	movlb	0	; select bank0
 13032  0911  00A0               	movwf	setMemory_Data@data
 13033  0912  3002               	movlw	2
 13034  0913  31A6  26C0  3188   	fcall	_setMemory_Data
 13035                           
 13036                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 13037  0916  0021               	movlb	1	; select bank1
 13038  0917  086E               	movf	_product^(0+128),w
 13039  0918  0086               	movwf	6
 13040  0919  3002               	movlw	2	; select bank4/5
 13041  091A  0087               	movwf	7
 13042  091B  3002               	movlw	2	; select bank4/5
 13043  091C  3F55               	moviw [21]fsr1
 13044  091D  0020               	movlb	0	; select bank0
 13045  091E  00A0               	movwf	setMemory_Data@data
 13046  091F  3003               	movlw	3
 13047  0920  31A6  26C0  3188   	fcall	_setMemory_Data
 13048                           
 13049                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 13050  0923  0021               	movlb	1	; select bank1
 13051  0924  086E               	movf	_product^(0+128),w
 13052  0925  0086               	movwf	6
 13053  0926  3002               	movlw	2	; select bank4/5
 13054  0927  0087               	movwf	7
 13055  0928  3002               	movlw	2	; select bank4/5
 13056  0929  3F56               	moviw [22]fsr1
 13057  092A  0020               	movlb	0	; select bank0
 13058  092B  00A0               	movwf	setMemory_Data@data
 13059  092C  3004               	movlw	4
 13060  092D  31A6  26C0  3188   	fcall	_setMemory_Data
 13061                           
 13062                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 13063  0930  0021               	movlb	1	; select bank1
 13064  0931  086E               	movf	_product^(0+128),w
 13065  0932  0086               	movwf	6
 13066  0933  3002               	movlw	2	; select bank4/5
 13067  0934  0087               	movwf	7
 13068  0935  3002               	movlw	2	; select bank4/5
 13069  0936  3F57               	moviw [23]fsr1
 13070  0937  0020               	movlb	0	; select bank0
 13071  0938  00A0               	movwf	setMemory_Data@data
 13072  0939  3005               	movlw	5
 13073  093A  31A6  26C0  3188   	fcall	_setMemory_Data
 13074                           
 13075                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 13076  093D  0021               	movlb	1	; select bank1
 13077  093E  1EB9               	btfss	(_myMain^(0+128)+10),5
 13078  093F  294A               	goto	l8665
 13079                           
 13080                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 13081  0940  12B9               	bcf	(_myMain^(0+128)+10),5
 13082                           
 13083                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 13084  0941  30AA               	movlw	170
 13085  0942  0020               	movlb	0	; select bank0
 13086  0943  00A4               	movwf	??_Flash_Memory_Modify
 13087  0944  0824               	movf	??_Flash_Memory_Modify,w
 13088  0945  00A0               	movwf	setMemory_Data@data
 13089  0946  301E               	movlw	30
 13090  0947  31A6  26C0  3188   	fcall	_setMemory_Data
 13091  094A                     l8665:	
 13092                           
 13093                           ;MCU_B1.c: 1068: }
 13094                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 13095  094A  0024               	movlb	4	; select bank4
 13096  094B  1D44               	btfss	(_Memory^(0+512)+36),2
 13097  094C  2951               	goto	l1502
 13098                           
 13099                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 13100  094D  1144               	bcf	(_Memory^(0+512)+36),2
 13101                           
 13102                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 13103  094E  0021               	movlb	1	; select bank1
 13104  094F  11AF               	bcf	_myMain^(0+128),3
 13105                           
 13106                           ;MCU_B1.c: 1073: myMain.First = 0;
 13107  0950  12AF               	bcf	_myMain^(0+128),5
 13108  0951                     l1502:	
 13109                           
 13110                           ;MCU_B1.c: 1075: }
 13111                           ;MCU_B1.c: 1076: GIE = 0;
 13112  0951  138B               	bcf	11,7	;volatile
 13113                           
 13114                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 13115  0952  31A6  26CC  3188   	fcall	_Flash_Memory_Erasing
 13116                           
 13117                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 13118  0955  3190  2002         	fcall	_Flash_Memory_Write
 13119                           
 13120                           ;MCU_B1.c: 1079: GIE = 1;
 13121  0957  178B               	bsf	11,7	;volatile
 13122  0958  0008               	return
 13123  0959                     __end_of_Flash_Memory_Modify:	
 13124                           
 13125                           	psect	text80
 13126  26CC                     __ptext80:	
 13127 ;; *************** function _Flash_Memory_Erasing *****************
 13128 ;; Defined at:
 13129 ;;		line 1042 in file "../src/MCU_B1.c"
 13130 ;; Parameters:    Size  Location     Type
 13131 ;;		None
 13132 ;; Auto vars:     Size  Location     Type
 13133 ;;		None
 13134 ;; Return value:  Size  Location     Type
 13135 ;;		None               void
 13136 ;; Registers used:
 13137 ;;		wreg, status,2, status,0, pclath, cstack
 13138 ;; Tracked objects:
 13139 ;;		On entry : 0/0
 13140 ;;		On exit  : 0/0
 13141 ;;		Unchanged: 0/0
 13142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13147 ;;Total ram usage:        0 bytes
 13148 ;; Hardware stack levels used:    1
 13149 ;; Hardware stack levels required when called:    6
 13150 ;; This function calls:
 13151 ;;		_Flash_Memory_Unlock
 13152 ;; This function is called by:
 13153 ;;		_Flash_Memory_Modify
 13154 ;; This function uses a non-reentrant model
 13155 ;;
 13156                           
 13157                           
 13158                           ;psect for function _Flash_Memory_Erasing
 13159  26CC                     _Flash_Memory_Erasing:	
 13160                           
 13161                           ;MCU_B1.c: 1043: CFGS = 0;
 13162                           
 13163                           ;incstack = 0
 13164                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 13165  26CC  0023               	movlb	3	; select bank3
 13166  26CD  1315               	bcf	21,6	;volatile
 13167                           
 13168                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 13169  26CE  3030               	movlw	48
 13170  26CF  0092               	movwf	18	;volatile
 13171                           
 13172                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 13173  26D0  0191               	clrf	17	;volatile
 13174                           
 13175                           ;MCU_B1.c: 1046: FREE = 1;
 13176  26D1  1615               	bsf	21,4	;volatile
 13177                           
 13178                           ;MCU_B1.c: 1047: WREN = 1;
 13179  26D2  1515               	bsf	21,2	;volatile
 13180                           
 13181                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 13182  26D3  31A6  2667         	fcall	_Flash_Memory_Unlock
 13183                           
 13184                           ;MCU_B1.c: 1049: WREN = 0;
 13185  26D5  0023               	movlb	3	; select bank3
 13186  26D6  1115               	bcf	21,2	;volatile
 13187  26D7  0008               	return
 13188  26D8                     __end_of_Flash_Memory_Erasing:	
 13189                           
 13190                           	psect	text81
 13191  0E62                     __ptext81:	
 13192 ;; *************** function _Flash_Memory_Initialization *****************
 13193 ;; Defined at:
 13194 ;;		line 932 in file "../src/MCU_B1.c"
 13195 ;; Parameters:    Size  Location     Type
 13196 ;;		None
 13197 ;; Auto vars:     Size  Location     Type
 13198 ;;  value           1    5[BANK0 ] unsigned char 
 13199 ;; Return value:  Size  Location     Type
 13200 ;;		None               void
 13201 ;; Registers used:
 13202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13203 ;; Tracked objects:
 13204 ;;		On entry : 0/0
 13205 ;;		On exit  : 0/0
 13206 ;;		Unchanged: 0/0
 13207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13209 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13211 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13212 ;;Total ram usage:        2 bytes
 13213 ;; Hardware stack levels used:    1
 13214 ;; Hardware stack levels required when called:    7
 13215 ;; This function calls:
 13216 ;;		_Flash_Memory_Read
 13217 ;;		_Flash_Memory_Write
 13218 ;;		_setMemory_Data
 13219 ;; This function is called by:
 13220 ;;		_main
 13221 ;; This function uses a non-reentrant model
 13222 ;;
 13223                           
 13224                           
 13225                           ;psect for function _Flash_Memory_Initialization
 13226  0E62                     _Flash_Memory_Initialization:	
 13227                           
 13228                           ;MCU_B1.c: 933: char value = 0;
 13229                           
 13230                           ;incstack = 0
 13231                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13232  0E62  0020               	movlb	0	; select bank0
 13233  0E63  01A5               	clrf	Flash_Memory_Initialization@value
 13234                           
 13235                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 13236  0E64  301F               	movlw	31
 13237  0E65  319A  2216  318E   	fcall	_Flash_Memory_Read
 13238  0E68  3AAA               	xorlw	170
 13239  0E69  1D03               	skipz
 13240  0E6A  2EE4               	goto	l9065
 13241                           
 13242                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 13243  0E6B  3000               	movlw	0
 13244  0E6C  319A  2216  318E   	fcall	_Flash_Memory_Read
 13245  0E6F  0020               	movlb	0	; select bank0
 13246  0E70  00A4               	movwf	??_Flash_Memory_Initialization
 13247  0E71  0021               	movlb	1	; select bank1
 13248  0E72  086E               	movf	_product^(0+128),w
 13249  0E73  3E0C               	addlw	12
 13250  0E74  0086               	movwf	6
 13251  0E75  3002               	movlw	2	; select bank4/5
 13252  0E76  0087               	movwf	7
 13253  0E77  0020               	movlb	0	; select bank0
 13254  0E78  0824               	movf	??_Flash_Memory_Initialization,w
 13255  0E79  0081               	movwf	1
 13256                           
 13257                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 13258  0E7A  3001               	movlw	1
 13259  0E7B  319A  2216  318E   	fcall	_Flash_Memory_Read
 13260  0E7E  0020               	movlb	0	; select bank0
 13261  0E7F  00A4               	movwf	??_Flash_Memory_Initialization
 13262  0E80  0021               	movlb	1	; select bank1
 13263  0E81  086E               	movf	_product^(0+128),w
 13264  0E82  3E0D               	addlw	13
 13265  0E83  0086               	movwf	6
 13266  0E84  3002               	movlw	2	; select bank4/5
 13267  0E85  0087               	movwf	7
 13268  0E86  0020               	movlb	0	; select bank0
 13269  0E87  0824               	movf	??_Flash_Memory_Initialization,w
 13270  0E88  0081               	movwf	1
 13271                           
 13272                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 13273  0E89  3002               	movlw	2
 13274  0E8A  319A  2216  318E   	fcall	_Flash_Memory_Read
 13275  0E8D  0020               	movlb	0	; select bank0
 13276  0E8E  00A4               	movwf	??_Flash_Memory_Initialization
 13277  0E8F  0021               	movlb	1	; select bank1
 13278  0E90  086E               	movf	_product^(0+128),w
 13279  0E91  3E0E               	addlw	14
 13280  0E92  0086               	movwf	6
 13281  0E93  3002               	movlw	2	; select bank4/5
 13282  0E94  0087               	movwf	7
 13283  0E95  0020               	movlb	0	; select bank0
 13284  0E96  0824               	movf	??_Flash_Memory_Initialization,w
 13285  0E97  0081               	movwf	1
 13286                           
 13287                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 13288  0E98  3003               	movlw	3
 13289  0E99  319A  2216  318E   	fcall	_Flash_Memory_Read
 13290  0E9C  0020               	movlb	0	; select bank0
 13291  0E9D  00A4               	movwf	??_Flash_Memory_Initialization
 13292  0E9E  0021               	movlb	1	; select bank1
 13293  0E9F  086E               	movf	_product^(0+128),w
 13294  0EA0  3E15               	addlw	21
 13295  0EA1  0086               	movwf	6
 13296  0EA2  3002               	movlw	2	; select bank4/5
 13297  0EA3  0087               	movwf	7
 13298  0EA4  0020               	movlb	0	; select bank0
 13299  0EA5  0824               	movf	??_Flash_Memory_Initialization,w
 13300  0EA6  0081               	movwf	1
 13301                           
 13302                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 13303  0EA7  3004               	movlw	4
 13304  0EA8  319A  2216  318E   	fcall	_Flash_Memory_Read
 13305  0EAB  0020               	movlb	0	; select bank0
 13306  0EAC  00A4               	movwf	??_Flash_Memory_Initialization
 13307  0EAD  0021               	movlb	1	; select bank1
 13308  0EAE  086E               	movf	_product^(0+128),w
 13309  0EAF  3E16               	addlw	22
 13310  0EB0  0086               	movwf	6
 13311  0EB1  3002               	movlw	2	; select bank4/5
 13312  0EB2  0087               	movwf	7
 13313  0EB3  0020               	movlb	0	; select bank0
 13314  0EB4  0824               	movf	??_Flash_Memory_Initialization,w
 13315  0EB5  0081               	movwf	1
 13316                           
 13317                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 13318  0EB6  3005               	movlw	5
 13319  0EB7  319A  2216  318E   	fcall	_Flash_Memory_Read
 13320  0EBA  0020               	movlb	0	; select bank0
 13321  0EBB  00A4               	movwf	??_Flash_Memory_Initialization
 13322  0EBC  0021               	movlb	1	; select bank1
 13323  0EBD  086E               	movf	_product^(0+128),w
 13324  0EBE  3E17               	addlw	23
 13325  0EBF  0086               	movwf	6
 13326  0EC0  3002               	movlw	2	; select bank4/5
 13327  0EC1  0087               	movwf	7
 13328  0EC2  0020               	movlb	0	; select bank0
 13329  0EC3  0824               	movf	??_Flash_Memory_Initialization,w
 13330  0EC4  0081               	movwf	1
 13331                           
 13332                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 13333  0EC5  0021               	movlb	1	; select bank1
 13334  0EC6  086E               	movf	_product^(0+128),w
 13335  0EC7  3E0C               	addlw	12
 13336  0EC8  0086               	movwf	6
 13337  0EC9  3002               	movlw	2	; select bank4/5
 13338  0ECA  0087               	movwf	7
 13339  0ECB  0801               	movf	1,w
 13340  0ECC  3AFF               	xorlw	255
 13341  0ECD  1D03               	skipz
 13342  0ECE  0008               	return
 13343  0ECF  086E               	movf	_product^(0+128),w
 13344  0ED0  3E0D               	addlw	13
 13345  0ED1  0086               	movwf	6
 13346  0ED2  3002               	movlw	2	; select bank4/5
 13347  0ED3  0087               	movwf	7
 13348  0ED4  0801               	movf	1,w
 13349  0ED5  3AFF               	xorlw	255
 13350  0ED6  1D03               	skipz
 13351  0ED7  0008               	return
 13352  0ED8  086E               	movf	_product^(0+128),w
 13353  0ED9  3E0E               	addlw	14
 13354  0EDA  0086               	movwf	6
 13355  0EDB  3002               	movlw	2	; select bank4/5
 13356  0EDC  0087               	movwf	7
 13357  0EDD  0801               	movf	1,w
 13358  0EDE  3AFF               	xorlw	255
 13359  0EDF  1D03               	skipz
 13360  0EE0  0008               	return
 13361                           
 13362                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 13363  0EE1  15AF               	bsf	_myMain^(0+128),3
 13364                           
 13365                           ;MCU_B1.c: 951: myMain.First = 1;
 13366  0EE2  16AF               	bsf	_myMain^(0+128),5
 13367                           
 13368                           ;MCU_B1.c: 952: }
 13369                           ;MCU_B1.c: 953: } else {
 13370  0EE3  0008               	return
 13371  0EE4                     l9065:	
 13372                           
 13373                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 13374  0EE4  30FF               	movlw	255
 13375  0EE5  0020               	movlb	0	; select bank0
 13376  0EE6  00A4               	movwf	??_Flash_Memory_Initialization
 13377  0EE7  0824               	movf	??_Flash_Memory_Initialization,w
 13378  0EE8  00A0               	movwf	setMemory_Data@data
 13379  0EE9  3000               	movlw	0
 13380  0EEA  31A6  26C0  318E   	fcall	_setMemory_Data
 13381                           
 13382                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 13383  0EED  30FF               	movlw	255
 13384  0EEE  0020               	movlb	0	; select bank0
 13385  0EEF  00A4               	movwf	??_Flash_Memory_Initialization
 13386  0EF0  0824               	movf	??_Flash_Memory_Initialization,w
 13387  0EF1  00A0               	movwf	setMemory_Data@data
 13388  0EF2  3001               	movlw	1
 13389  0EF3  31A6  26C0  318E   	fcall	_setMemory_Data
 13390                           
 13391                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 13392  0EF6  30FF               	movlw	255
 13393  0EF7  0020               	movlb	0	; select bank0
 13394  0EF8  00A4               	movwf	??_Flash_Memory_Initialization
 13395  0EF9  0824               	movf	??_Flash_Memory_Initialization,w
 13396  0EFA  00A0               	movwf	setMemory_Data@data
 13397  0EFB  3002               	movlw	2
 13398  0EFC  31A6  26C0  318E   	fcall	_setMemory_Data
 13399                           
 13400                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 13401  0EFF  30FF               	movlw	255
 13402  0F00  0020               	movlb	0	; select bank0
 13403  0F01  00A4               	movwf	??_Flash_Memory_Initialization
 13404  0F02  0824               	movf	??_Flash_Memory_Initialization,w
 13405  0F03  00A0               	movwf	setMemory_Data@data
 13406  0F04  3003               	movlw	3
 13407  0F05  31A6  26C0  318E   	fcall	_setMemory_Data
 13408                           
 13409                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 13410  0F08  30FF               	movlw	255
 13411  0F09  0020               	movlb	0	; select bank0
 13412  0F0A  00A4               	movwf	??_Flash_Memory_Initialization
 13413  0F0B  0824               	movf	??_Flash_Memory_Initialization,w
 13414  0F0C  00A0               	movwf	setMemory_Data@data
 13415  0F0D  3004               	movlw	4
 13416  0F0E  31A6  26C0  318E   	fcall	_setMemory_Data
 13417                           
 13418                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 13419  0F11  30FF               	movlw	255
 13420  0F12  0020               	movlb	0	; select bank0
 13421  0F13  00A4               	movwf	??_Flash_Memory_Initialization
 13422  0F14  0824               	movf	??_Flash_Memory_Initialization,w
 13423  0F15  00A0               	movwf	setMemory_Data@data
 13424  0F16  3005               	movlw	5
 13425  0F17  31A6  26C0  318E   	fcall	_setMemory_Data
 13426                           
 13427                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 13428  0F1A  30AA               	movlw	170
 13429  0F1B  0020               	movlb	0	; select bank0
 13430  0F1C  00A4               	movwf	??_Flash_Memory_Initialization
 13431  0F1D  0824               	movf	??_Flash_Memory_Initialization,w
 13432  0F1E  00A0               	movwf	setMemory_Data@data
 13433  0F1F  301F               	movlw	31
 13434  0F20  31A6  26C0  318E   	fcall	_setMemory_Data
 13435                           
 13436                           ;MCU_B1.c: 966: GIE = 0;
 13437  0F23  138B               	bcf	11,7	;volatile
 13438                           
 13439                           ;MCU_B1.c: 967: Flash_Memory_Write();
 13440  0F24  3190  2002         	fcall	_Flash_Memory_Write
 13441                           
 13442                           ;MCU_B1.c: 968: GIE = 1;
 13443  0F26  178B               	bsf	11,7	;volatile
 13444                           
 13445                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 13446  0F27  0021               	movlb	1	; select bank1
 13447  0F28  15AF               	bsf	_myMain^(0+128),3
 13448                           
 13449                           ;MCU_B1.c: 970: myMain.First = 1;
 13450  0F29  16AF               	bsf	_myMain^(0+128),5
 13451                           
 13452                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 13453  0F2A  1639               	bsf	(_myMain^(0+128)+10),4
 13454  0F2B  0008               	return
 13455  0F2C                     __end_of_Flash_Memory_Initialization:	
 13456                           
 13457                           	psect	text82
 13458  26C0                     __ptext82:	
 13459 ;; *************** function _setMemory_Data *****************
 13460 ;; Defined at:
 13461 ;;		line 1094 in file "../src/MCU_B1.c"
 13462 ;; Parameters:    Size  Location     Type
 13463 ;;  address         1    wreg     unsigned char 
 13464 ;;  data            1    0[BANK0 ] unsigned char 
 13465 ;; Auto vars:     Size  Location     Type
 13466 ;;  address         1    2[BANK0 ] unsigned char 
 13467 ;; Return value:  Size  Location     Type
 13468 ;;		None               void
 13469 ;; Registers used:
 13470 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13471 ;; Tracked objects:
 13472 ;;		On entry : 0/0
 13473 ;;		On exit  : 0/0
 13474 ;;		Unchanged: 0/0
 13475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13476 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13478 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13479 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13480 ;;Total ram usage:        3 bytes
 13481 ;; Hardware stack levels used:    1
 13482 ;; Hardware stack levels required when called:    5
 13483 ;; This function calls:
 13484 ;;		Nothing
 13485 ;; This function is called by:
 13486 ;;		_Flash_Memory_Initialization
 13487 ;;		_Flash_Memory_Modify
 13488 ;; This function uses a non-reentrant model
 13489 ;;
 13490                           
 13491                           
 13492                           ;psect for function _setMemory_Data
 13493  26C0                     _setMemory_Data:	
 13494                           
 13495                           ;incstack = 0
 13496                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13497                           ;setMemory_Data@address stored from wreg
 13498  26C0  0020               	movlb	0	; select bank0
 13499  26C1  00A2               	movwf	setMemory_Data@address
 13500                           
 13501                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 13502  26C2  0820               	movf	setMemory_Data@data,w
 13503  26C3  00A1               	movwf	??_setMemory_Data
 13504  26C4  0822               	movf	setMemory_Data@address,w
 13505  26C5  3E20               	addlw	_Memory& (0+255)
 13506  26C6  0086               	movwf	6
 13507  26C7  3002               	movlw	2	; select bank4/5
 13508  26C8  0087               	movwf	7
 13509  26C9  0821               	movf	??_setMemory_Data,w
 13510  26CA  0081               	movwf	1
 13511  26CB  0008               	return
 13512  26CC                     __end_of_setMemory_Data:	
 13513                           
 13514                           	psect	text83
 13515  1002                     __ptext83:	
 13516 ;; *************** function _Flash_Memory_Write *****************
 13517 ;; Defined at:
 13518 ;;		line 1023 in file "../src/MCU_B1.c"
 13519 ;; Parameters:    Size  Location     Type
 13520 ;;		None
 13521 ;; Auto vars:     Size  Location     Type
 13522 ;;  i               1    1[BANK0 ] unsigned char 
 13523 ;; Return value:  Size  Location     Type
 13524 ;;		None               void
 13525 ;; Registers used:
 13526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13527 ;; Tracked objects:
 13528 ;;		On entry : 0/0
 13529 ;;		On exit  : 0/0
 13530 ;;		Unchanged: 0/0
 13531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;Total ram usage:        2 bytes
 13537 ;; Hardware stack levels used:    1
 13538 ;; Hardware stack levels required when called:    6
 13539 ;; This function calls:
 13540 ;;		_Flash_Memory_Unlock
 13541 ;; This function is called by:
 13542 ;;		_Flash_Memory_Initialization
 13543 ;;		_Flash_Memory_Modify
 13544 ;; This function uses a non-reentrant model
 13545 ;;
 13546                           
 13547                           
 13548                           ;psect for function _Flash_Memory_Write
 13549  1002                     _Flash_Memory_Write:	
 13550                           
 13551                           ;MCU_B1.c: 1024: char i = 0;
 13552                           
 13553                           ;incstack = 0
 13554                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13555  1002  0020               	movlb	0	; select bank0
 13556  1003  01A1               	clrf	Flash_Memory_Write@i
 13557                           
 13558                           ;MCU_B1.c: 1025: CFGS = 0;
 13559  1004  0023               	movlb	3	; select bank3
 13560  1005  1315               	bcf	21,6	;volatile
 13561                           
 13562                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 13563  1006  3030               	movlw	48
 13564  1007  0092               	movwf	18	;volatile
 13565                           
 13566                           ;MCU_B1.c: 1027: PMDATH = 0;
 13567  1008  0194               	clrf	20	;volatile
 13568                           
 13569                           ;MCU_B1.c: 1028: FREE = 0;
 13570  1009  1215               	bcf	21,4	;volatile
 13571                           
 13572                           ;MCU_B1.c: 1029: LWLO = 1;
 13573  100A  1695               	bsf	21,5	;volatile
 13574                           
 13575                           ;MCU_B1.c: 1030: WREN = 1;
 13576  100B  1515               	bsf	21,2	;volatile
 13577                           
 13578                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 13579  100C  0020               	movlb	0	; select bank0
 13580  100D  01A1               	clrf	Flash_Memory_Write@i
 13581  100E  3020               	movlw	32
 13582  100F  0221               	subwf	Flash_Memory_Write@i,w
 13583  1010  1803               	btfsc	3,0
 13584  1011  282A               	goto	l1492
 13585  1012                     l8023:	
 13586                           
 13587                           ;MCU_B1.c: 1032: PMADRL = i;
 13588  1012  0821               	movf	Flash_Memory_Write@i,w
 13589  1013  0023               	movlb	3	; select bank3
 13590  1014  0091               	movwf	17	;volatile
 13591                           
 13592                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 13593  1015  0020               	movlb	0	; select bank0
 13594  1016  0821               	movf	Flash_Memory_Write@i,w
 13595  1017  3E20               	addlw	_Memory& (0+255)
 13596  1018  0086               	movwf	6
 13597  1019  3002               	movlw	2	; select bank4/5
 13598  101A  0087               	movwf	7
 13599  101B  0801               	movf	1,w
 13600  101C  0023               	movlb	3	; select bank3
 13601  101D  0093               	movwf	19	;volatile
 13602                           
 13603                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 13604  101E  31A6  2667  3190   	fcall	_Flash_Memory_Unlock
 13605  1021  3001               	movlw	1
 13606  1022  0020               	movlb	0	; select bank0
 13607  1023  00A0               	movwf	??_Flash_Memory_Write
 13608  1024  0820               	movf	??_Flash_Memory_Write,w
 13609  1025  07A1               	addwf	Flash_Memory_Write@i,f
 13610  1026  3020               	movlw	32
 13611  1027  0221               	subwf	Flash_Memory_Write@i,w
 13612  1028  1C03               	skipc
 13613  1029  2812               	goto	l8023
 13614  102A                     l1492:	
 13615                           
 13616                           ;MCU_B1.c: 1035: }
 13617                           ;MCU_B1.c: 1036: LWLO = 0;
 13618  102A  0023               	movlb	3	; select bank3
 13619  102B  1295               	bcf	21,5	;volatile
 13620                           
 13621                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 13622  102C  31A6  2667         	fcall	_Flash_Memory_Unlock
 13623                           
 13624                           ;MCU_B1.c: 1038: WREN = 0;
 13625  102E  0023               	movlb	3	; select bank3
 13626  102F  1115               	bcf	21,2	;volatile
 13627  1030  0008               	return
 13628  1031                     __end_of_Flash_Memory_Write:	
 13629                           
 13630                           	psect	text84
 13631  2667                     __ptext84:	
 13632 ;; *************** function _Flash_Memory_Unlock *****************
 13633 ;; Defined at:
 13634 ;;		line 1002 in file "../src/MCU_B1.c"
 13635 ;; Parameters:    Size  Location     Type
 13636 ;;		None
 13637 ;; Auto vars:     Size  Location     Type
 13638 ;;		None
 13639 ;; Return value:  Size  Location     Type
 13640 ;;		None               void
 13641 ;; Registers used:
 13642 ;;		wreg
 13643 ;; Tracked objects:
 13644 ;;		On entry : 0/0
 13645 ;;		On exit  : 0/0
 13646 ;;		Unchanged: 0/0
 13647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;Total ram usage:        0 bytes
 13653 ;; Hardware stack levels used:    1
 13654 ;; Hardware stack levels required when called:    5
 13655 ;; This function calls:
 13656 ;;		Nothing
 13657 ;; This function is called by:
 13658 ;;		_Flash_Memory_Write
 13659 ;;		_Flash_Memory_Erasing
 13660 ;; This function uses a non-reentrant model
 13661 ;;
 13662                           
 13663                           
 13664                           ;psect for function _Flash_Memory_Unlock
 13665  2667                     _Flash_Memory_Unlock:	
 13666                           
 13667                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 13668                           
 13669                           ;incstack = 0
 13670                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13671  2667  3055               	movlw	85
 13672  2668  0023               	movlb	3	; select bank3
 13673  2669  0096               	movwf	22	;volatile
 13674                           
 13675                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 13676  266A  30AA               	movlw	170
 13677  266B  0096               	movwf	22	;volatile
 13678                           
 13679                           ;MCU_B1.c: 1005: WR = 1;
 13680  266C  1495               	bsf	21,1	;volatile
 13681                           
 13682                           ;MCU_B1.c: 1006: __nop();
 13683  266D  0000               	nop
 13684                           
 13685                           ;MCU_B1.c: 1007: __nop();
 13686  266E  0000               	nop
 13687  266F  0008               	return
 13688  2670                     __end_of_Flash_Memory_Unlock:	
 13689                           
 13690                           	psect	text85
 13691  1A16                     __ptext85:	
 13692 ;; *************** function _Flash_Memory_Read *****************
 13693 ;; Defined at:
 13694 ;;		line 1011 in file "../src/MCU_B1.c"
 13695 ;; Parameters:    Size  Location     Type
 13696 ;;  address         1    wreg     unsigned char 
 13697 ;; Auto vars:     Size  Location     Type
 13698 ;;  address         1    2[BANK0 ] unsigned char 
 13699 ;;  ret             1    3[BANK0 ] unsigned char 
 13700 ;;  i               1    1[BANK0 ] unsigned char 
 13701 ;; Return value:  Size  Location     Type
 13702 ;;                  1    wreg      unsigned char 
 13703 ;; Registers used:
 13704 ;;		wreg, status,2
 13705 ;; Tracked objects:
 13706 ;;		On entry : 0/0
 13707 ;;		On exit  : 0/0
 13708 ;;		Unchanged: 0/0
 13709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13711 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13712 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13713 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13714 ;;Total ram usage:        4 bytes
 13715 ;; Hardware stack levels used:    1
 13716 ;; Hardware stack levels required when called:    5
 13717 ;; This function calls:
 13718 ;;		Nothing
 13719 ;; This function is called by:
 13720 ;;		_Flash_Memory_Initialization
 13721 ;;		_Flash_Memory_Modify
 13722 ;; This function uses a non-reentrant model
 13723 ;;
 13724                           
 13725                           
 13726                           ;psect for function _Flash_Memory_Read
 13727  1A16                     _Flash_Memory_Read:	
 13728                           
 13729                           ;incstack = 0
 13730                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13731                           ;Flash_Memory_Read@address stored from wreg
 13732  1A16  0020               	movlb	0	; select bank0
 13733  1A17  00A2               	movwf	Flash_Memory_Read@address
 13734                           
 13735                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13736  1A18  01A1               	clrf	Flash_Memory_Read@i
 13737  1A19  01A3               	clrf	Flash_Memory_Read@ret
 13738                           
 13739                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13740  1A1A  3030               	movlw	48
 13741  1A1B  0023               	movlb	3	; select bank3
 13742  1A1C  0092               	movwf	18	;volatile
 13743                           
 13744                           ;MCU_B1.c: 1014: PMADRL = address;
 13745  1A1D  0020               	movlb	0	; select bank0
 13746  1A1E  0822               	movf	Flash_Memory_Read@address,w
 13747  1A1F  0023               	movlb	3	; select bank3
 13748  1A20  0091               	movwf	17	;volatile
 13749                           
 13750                           ;MCU_B1.c: 1015: CFGS = 0;
 13751  1A21  1315               	bcf	21,6	;volatile
 13752                           
 13753                           ;MCU_B1.c: 1016: RD = 1;
 13754  1A22  1415               	bsf	21,0	;volatile
 13755                           
 13756                           ;MCU_B1.c: 1017: i = PMDATH;
 13757  1A23  0814               	movf	20,w	;volatile
 13758  1A24  0020               	movlb	0	; select bank0
 13759  1A25  00A0               	movwf	??_Flash_Memory_Read
 13760  1A26  0820               	movf	??_Flash_Memory_Read,w
 13761  1A27  00A1               	movwf	Flash_Memory_Read@i
 13762                           
 13763                           ;MCU_B1.c: 1018: ret = PMDATL;
 13764  1A28  0023               	movlb	3	; select bank3
 13765  1A29  0813               	movf	19,w	;volatile
 13766  1A2A  0020               	movlb	0	; select bank0
 13767  1A2B  00A0               	movwf	??_Flash_Memory_Read
 13768  1A2C  0820               	movf	??_Flash_Memory_Read,w
 13769  1A2D  00A3               	movwf	Flash_Memory_Read@ret
 13770                           
 13771                           ;MCU_B1.c: 1019: return ret;
 13772  1A2E  0823               	movf	Flash_Memory_Read@ret,w
 13773  1A2F  0008               	return
 13774  1A30                     __end_of_Flash_Memory_Read:	
 13775                           
 13776                           	psect	text86
 13777  060A                     __ptext86:	
 13778 ;; *************** function _Exception_Main *****************
 13779 ;; Defined at:
 13780 ;;		line 499 in file "../src/Main_B1.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;		None
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;  i               2   19[BANK0 ] int 
 13785 ;;  i               2   17[BANK0 ] int 
 13786 ;;  lights          1   21[BANK0 ] unsigned char 
 13787 ;;  error           1   16[BANK0 ] unsigned char 
 13788 ;;  count           1   15[BANK0 ] unsigned char 
 13789 ;;  status          1   14[BANK0 ] unsigned char 
 13790 ;; Return value:  Size  Location     Type
 13791 ;;		None               void
 13792 ;; Registers used:
 13793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13794 ;; Tracked objects:
 13795 ;;		On entry : 0/0
 13796 ;;		On exit  : 0/0
 13797 ;;		Unchanged: 0/0
 13798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13802 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13803 ;;Total ram usage:        9 bytes
 13804 ;; Hardware stack levels used:    1
 13805 ;; Hardware stack levels required when called:    7
 13806 ;; This function calls:
 13807 ;;		_getDimmerLights_Line
 13808 ;;		_getDimmerLights_Status
 13809 ;;		_getMain_All_Error_Status
 13810 ;;		_getMain_All_LightsStatus
 13811 ;;		_setBuz
 13812 ;;		_setDimmerLights_SwOff
 13813 ;;		_setLED
 13814 ;; This function is called by:
 13815 ;;		_main
 13816 ;; This function uses a non-reentrant model
 13817 ;;
 13818                           
 13819                           
 13820                           ;psect for function _Exception_Main
 13821  060A                     _Exception_Main:	
 13822                           
 13823                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13824                           
 13825                           ;incstack = 0
 13826                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13827  060A  3000               	movlw	0
 13828  060B  319D  25C7  3186   	fcall	_getMain_All_Error_Status
 13829  060E  0020               	movlb	0	; select bank0
 13830  060F  00AD               	movwf	??_Exception_Main
 13831  0610  082D               	movf	??_Exception_Main,w
 13832  0611  00B0               	movwf	Exception_Main@error
 13833                           
 13834                           ;Main_B1.c: 501: char lights = 0, count = 2;
 13835  0612  01B5               	clrf	Exception_Main@lights
 13836  0613  3002               	movlw	2
 13837  0614  00AD               	movwf	??_Exception_Main
 13838  0615  082D               	movf	??_Exception_Main,w
 13839  0616  00AF               	movwf	Exception_Main@count
 13840                           
 13841                           ;Main_B1.c: 502: char status = 0;
 13842  0617  01AE               	clrf	Exception_Main@status
 13843                           
 13844                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
 13845  0618  0021               	movlb	1	; select bank1
 13846  0619  1DB9               	btfss	(_myMain^(0+128)+10),3
 13847  061A  2E2A               	goto	l10303
 13848                           
 13849                           ;Main_B1.c: 505: if (error == 0) {
 13850  061B  0020               	movlb	0	; select bank0
 13851  061C  08B0               	movf	Exception_Main@error,f
 13852  061D  1D03               	skipz
 13853  061E  0008               	return
 13854                           
 13855                           ;Main_B1.c: 506: myMain.Error_Run = 0;
 13856  061F  0021               	movlb	1	; select bank1
 13857  0620  11B9               	bcf	(_myMain^(0+128)+10),3
 13858                           
 13859                           ;Main_B1.c: 509: setLED(99, 10);
 13860  0621  300A               	movlw	10
 13861  0622  0020               	movlb	0	; select bank0
 13862  0623  00AD               	movwf	??_Exception_Main
 13863  0624  082D               	movf	??_Exception_Main,w
 13864  0625  00A2               	movwf	setLED@command
 13865  0626  3063               	movlw	99
 13866  0627  3188  2000         	fcall	_setLED
 13867                           
 13868                           ;Main_B1.c: 522: }
 13869                           ;Main_B1.c: 523: } else {
 13870  0629  0008               	return
 13871  062A                     l10303:	
 13872                           
 13873                           ;Main_B1.c: 524: if (error != 0) {
 13874  062A  0020               	movlb	0	; select bank0
 13875  062B  0830               	movf	Exception_Main@error,w
 13876  062C  1903               	btfsc	3,2
 13877  062D  0008               	return
 13878                           
 13879                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 13880  062E  0021               	movlb	1	; select bank1
 13881  062F  15B9               	bsf	(_myMain^(0+128)+10),3
 13882                           
 13883                           ;Main_B1.c: 527: setLED(99, 11);
 13884  0630  300B               	movlw	11
 13885  0631  0020               	movlb	0	; select bank0
 13886  0632  00AD               	movwf	??_Exception_Main
 13887  0633  082D               	movf	??_Exception_Main,w
 13888  0634  00A2               	movwf	setLED@command
 13889  0635  3063               	movlw	99
 13890  0636  3188  2000  3186   	fcall	_setLED
 13891                           
 13892                           ;Main_B1.c: 538: switch (error) {
 13893  0639  2ED6               	goto	l10351
 13894  063A                     l10309:	
 13895                           ;Main_B1.c: 539: case 2:
 13896                           
 13897                           
 13898                           ;Main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13899  063A  3198  208E  3186   	fcall	_getMain_All_LightsStatus
 13900  063D  3A01               	xorlw	1
 13901  063E  1D03               	skipz
 13902  063F  2E49               	goto	l10313
 13903                           
 13904                           ;Main_B1.c: 547: setBuz(10, 300);
 13905  0640  302C               	movlw	44
 13906  0641  0020               	movlb	0	; select bank0
 13907  0642  00A9               	movwf	setBuz@time
 13908  0643  3001               	movlw	1
 13909  0644  00AA               	movwf	setBuz@time+1
 13910  0645  300A               	movlw	10
 13911  0646  3191  21E0  3186   	fcall	_setBuz
 13912  0649                     l10313:	
 13913                           
 13914                           ;Main_B1.c: 548: }
 13915                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 13916  0649  0020               	movlb	0	; select bank0
 13917  064A  01B1               	clrf	Exception_Main@i
 13918  064B  01B2               	clrf	Exception_Main@i+1
 13919  064C                     l10323:	
 13920  064C  0832               	movf	Exception_Main@i+1,w
 13921  064D  3A80               	xorlw	128
 13922  064E  00AD               	movwf	??_Exception_Main
 13923  064F  3080               	movlw	128
 13924  0650  022D               	subwf	??_Exception_Main,w
 13925  0651  1D03               	skipz
 13926  0652  2E55               	goto	u11665
 13927  0653  082F               	movf	Exception_Main@count,w
 13928  0654  0231               	subwf	Exception_Main@i,w
 13929  0655                     u11665:	
 13930  0655  1803               	btfsc	3,0
 13931  0656  2E77               	goto	u11660
 13932                           
 13933                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13934  0657  0020               	movlb	0	; select bank0
 13935  0658  0831               	movf	Exception_Main@i,w
 13936  0659  3E01               	addlw	1
 13937  065A  31A7  273F  3186   	fcall	_getDimmerLights_Status
 13938  065D  3A01               	xorlw	1
 13939  065E  1D03               	skipz
 13940  065F  2E71               	goto	l10321
 13941                           
 13942                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 13943  0660  0021               	movlb	1	; select bank1
 13944  0661  085A               	movf	_DimmerLights^(0+128),w
 13945  0662  0086               	movwf	6
 13946  0663  3001               	movlw	1	; select bank2/3
 13947  0664  0087               	movwf	7
 13948  0665  1401               	bsf	1,0
 13949                           
 13950                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 13951  0666  0A5A               	incf	_DimmerLights^(0+128),w
 13952  0667  0086               	movwf	6
 13953  0668  3001               	movlw	1	; select bank2/3
 13954  0669  0087               	movwf	7
 13955  066A  1001               	bcf	1,0
 13956                           
 13957                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13958  066B  0020               	movlb	0	; select bank0
 13959  066C  0831               	movf	Exception_Main@i,w
 13960  066D  3E01               	addlw	1
 13961  066E  319E  26D5  3186   	fcall	_setDimmerLights_SwOff
 13962  0671                     l10321:	
 13963  0671  3001               	movlw	1
 13964  0672  0020               	movlb	0	; select bank0
 13965  0673  07B1               	addwf	Exception_Main@i,f
 13966  0674  3000               	movlw	0
 13967  0675  3DB2               	addwfc	Exception_Main@i+1,f
 13968  0676  2E4C               	goto	l10323
 13969  0677                     u11660:	
 13970  0677  0020               	movlb	0	; select bank0
 13971  0678  0008               	return
 13972  0679                     l10325:	
 13973                           ;Main_B1.c: 561: case 3:
 13974                           
 13975                           ;Main_B1.c: 556: }
 13976                           ;Main_B1.c: 557: }
 13977                           ;Main_B1.c: 560: break;
 13978                           
 13979                           
 13980                           ;Main_B1.c: 563: setBuz(5, 300);
 13981  0679  302C               	movlw	44
 13982  067A  0020               	movlb	0	; select bank0
 13983  067B  00A9               	movwf	setBuz@time
 13984  067C  3001               	movlw	1
 13985  067D  00AA               	movwf	setBuz@time+1
 13986  067E  3005               	movlw	5
 13987  067F  3191  21E0  3186   	fcall	_setBuz
 13988                           
 13989                           ;Main_B1.c: 564: lights = getDimmerLights_Line();
 13990  0682  3198  20A1  3186   	fcall	_getDimmerLights_Line
 13991  0685  0020               	movlb	0	; select bank0
 13992  0686  00AD               	movwf	??_Exception_Main
 13993  0687  082D               	movf	??_Exception_Main,w
 13994  0688  00B5               	movwf	Exception_Main@lights
 13995                           
 13996                           ;Main_B1.c: 565: if (lights == 0) {
 13997  0689  08B5               	movf	Exception_Main@lights,f
 13998  068A  1D03               	skipz
 13999  068B  2EBB               	goto	l10343
 14000                           
 14001                           ;Main_B1.c: 567: for (int i = 0; i < count; i++) {
 14002  068C  01B3               	clrf	Exception_Main@i_3930
 14003  068D  01B4               	clrf	Exception_Main@i_3930+1
 14004  068E                     l10341:	
 14005  068E  0834               	movf	Exception_Main@i_3930+1,w
 14006  068F  3A80               	xorlw	128
 14007  0690  00AD               	movwf	??_Exception_Main
 14008  0691  3080               	movlw	128
 14009  0692  022D               	subwf	??_Exception_Main,w
 14010  0693  1D03               	skipz
 14011  0694  2E97               	goto	u11695
 14012  0695  082F               	movf	Exception_Main@count,w
 14013  0696  0233               	subwf	Exception_Main@i_3930,w
 14014  0697                     u11695:	
 14015  0697  1803               	btfsc	3,0
 14016  0698  2EB9               	goto	u11690
 14017                           
 14018                           ;Main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 14019  0699  0020               	movlb	0	; select bank0
 14020  069A  0833               	movf	Exception_Main@i_3930,w
 14021  069B  3E01               	addlw	1
 14022  069C  31A7  273F  3186   	fcall	_getDimmerLights_Status
 14023  069F  3A01               	xorlw	1
 14024  06A0  1D03               	skipz
 14025  06A1  2EB3               	goto	l10339
 14026                           
 14027                           ;Main_B1.c: 570: DimmerLights->SwFlag = 1;
 14028  06A2  0021               	movlb	1	; select bank1
 14029  06A3  085A               	movf	_DimmerLights^(0+128),w
 14030  06A4  0086               	movwf	6
 14031  06A5  3001               	movlw	1	; select bank2/3
 14032  06A6  0087               	movwf	7
 14033  06A7  1401               	bsf	1,0
 14034                           
 14035                           ;Main_B1.c: 571: DimmerLights->Status = 0;
 14036  06A8  0A5A               	incf	_DimmerLights^(0+128),w
 14037  06A9  0086               	movwf	6
 14038  06AA  3001               	movlw	1	; select bank2/3
 14039  06AB  0087               	movwf	7
 14040  06AC  1001               	bcf	1,0
 14041                           
 14042                           ;Main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 14043  06AD  0020               	movlb	0	; select bank0
 14044  06AE  0833               	movf	Exception_Main@i_3930,w
 14045  06AF  3E01               	addlw	1
 14046  06B0  319E  26D5  3186   	fcall	_setDimmerLights_SwOff
 14047  06B3                     l10339:	
 14048  06B3  3001               	movlw	1
 14049  06B4  0020               	movlb	0	; select bank0
 14050  06B5  07B3               	addwf	Exception_Main@i_3930,f
 14051  06B6  3000               	movlw	0
 14052  06B7  3DB4               	addwfc	Exception_Main@i_3930+1,f
 14053  06B8  2E8E               	goto	l10341
 14054  06B9                     u11690:	
 14055  06B9  0020               	movlb	0	; select bank0
 14056  06BA  0008               	return
 14057  06BB                     l10343:	
 14058                           ;Main_B1.c: 573: }
 14059                           ;Main_B1.c: 574: }
 14060                           ;Main_B1.c: 575: } else {
 14061                           
 14062                           
 14063                           ;Main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 14064  06BB  0020               	movlb	0	; select bank0
 14065  06BC  0835               	movf	Exception_Main@lights,w
 14066  06BD  31A7  273F  3186   	fcall	_getDimmerLights_Status
 14067  06C0  3A01               	xorlw	1
 14068  06C1  1903               	btfsc	3,2
 14069  06C2  2EC5               	goto	l10345
 14070  06C3  0020               	movlb	0	; select bank0
 14071  06C4  0008               	return
 14072  06C5                     l10345:	
 14073                           
 14074                           ;Main_B1.c: 579: DimmerLights->SwFlag = 1;
 14075  06C5  0021               	movlb	1	; select bank1
 14076  06C6  085A               	movf	_DimmerLights^(0+128),w
 14077  06C7  0086               	movwf	6
 14078  06C8  3001               	movlw	1	; select bank2/3
 14079  06C9  0087               	movwf	7
 14080  06CA  1401               	bsf	1,0
 14081                           
 14082                           ;Main_B1.c: 580: DimmerLights->Status = 0;
 14083  06CB  0A5A               	incf	_DimmerLights^(0+128),w
 14084  06CC  0086               	movwf	6
 14085  06CD  3001               	movlw	1	; select bank2/3
 14086  06CE  0087               	movwf	7
 14087  06CF  1001               	bcf	1,0
 14088                           
 14089                           ;Main_B1.c: 581: setDimmerLights_SwOff(lights);
 14090  06D0  0020               	movlb	0	; select bank0
 14091  06D1  0835               	movf	Exception_Main@lights,w
 14092  06D2  319E  26D5         	fcall	_setDimmerLights_SwOff
 14093  06D4  0020               	movlb	0	; select bank0
 14094  06D5  0008               	return
 14095  06D6                     l10351:	
 14096                           ;Main_B1.c: 586: }
 14097                           
 14098                           ;Main_B1.c: 582: }
 14099                           ;Main_B1.c: 583: }
 14100                           ;Main_B1.c: 585: break;
 14101                           
 14102  06D6  0020               	movlb	0	; select bank0
 14103  06D7  0830               	movf	Exception_Main@error,w
 14104                           
 14105                           ; Switch size 1, requested type "space"
 14106                           ; Number of cases is 2, Range of values is 2 to 3
 14107                           ; switch strategies available:
 14108                           ; Name         Instructions Cycles
 14109                           ; simple_byte            7     4 (average)
 14110                           ; direct_byte           13     9 (fixed)
 14111                           ; jumptable            263     9 (fixed)
 14112                           ;	Chosen strategy is simple_byte
 14113  06D8  3A02               	xorlw	2	; case 2
 14114  06D9  1903               	skipnz
 14115  06DA  2E3A               	goto	l10309
 14116  06DB  3A01               	xorlw	1	; case 3
 14117  06DC  1903               	skipnz
 14118  06DD  2E79               	goto	l10325
 14119  06DE  2EE0               	goto	l1749
 14120  06DF  0008               	return
 14121  06E0                     l1749:	
 14122  06E0  0008               	return
 14123  06E1                     __end_of_Exception_Main:	
 14124                           
 14125                           	psect	text87
 14126  18A1                     __ptext87:	
 14127 ;; *************** function _getDimmerLights_Line *****************
 14128 ;; Defined at:
 14129 ;;		line 1169 in file "../src/Dimmer_B1.c"
 14130 ;; Parameters:    Size  Location     Type
 14131 ;;		None
 14132 ;; Auto vars:     Size  Location     Type
 14133 ;;  line            1    1[BANK0 ] unsigned char 
 14134 ;; Return value:  Size  Location     Type
 14135 ;;                  1    wreg      unsigned char 
 14136 ;; Registers used:
 14137 ;;		wreg, status,2
 14138 ;; Tracked objects:
 14139 ;;		On entry : 0/0
 14140 ;;		On exit  : 0/0
 14141 ;;		Unchanged: 0/0
 14142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14144 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14146 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14147 ;;Total ram usage:        2 bytes
 14148 ;; Hardware stack levels used:    1
 14149 ;; Hardware stack levels required when called:    5
 14150 ;; This function calls:
 14151 ;;		Nothing
 14152 ;; This function is called by:
 14153 ;;		_Exception_Main
 14154 ;; This function uses a non-reentrant model
 14155 ;;
 14156                           
 14157                           
 14158                           ;psect for function _getDimmerLights_Line
 14159  18A1                     _getDimmerLights_Line:	
 14160                           
 14161                           ;Dimmer_B1.c: 1170: char line = 0;
 14162                           
 14163                           ;incstack = 0
 14164                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 14165  18A1  0020               	movlb	0	; select bank0
 14166  18A2  01A1               	clrf	getDimmerLights_Line@line
 14167                           
 14168                           ;Dimmer_B1.c: 1172: if (DimmerLights1.Line == 1) {
 14169  18A3  0023               	movlb	3	; select bank3
 14170  18A4  1CBF               	btfss	(_DimmerLights1^(0+384)+1),1
 14171  18A5  28AA               	goto	l948
 14172                           
 14173                           ;Dimmer_B1.c: 1173: line = 1;
 14174  18A6  0020               	movlb	0	; select bank0
 14175  18A7  01A1               	clrf	getDimmerLights_Line@line
 14176  18A8  0AA1               	incf	getDimmerLights_Line@line,f
 14177                           
 14178                           ;Dimmer_B1.c: 1174: }
 14179  18A9  28B1               	goto	l949
 14180  18AA                     l948:	
 14181                           
 14182                           ;Dimmer_B1.c: 1177: else if (DimmerLights2.Line == 1) {
 14183  18AA  1CC8               	btfss	(_DimmerLights2^(0+384)+1),1
 14184  18AB  28B1               	goto	l949
 14185                           
 14186                           ;Dimmer_B1.c: 1178: line = 2;
 14187  18AC  3002               	movlw	2
 14188  18AD  0020               	movlb	0	; select bank0
 14189  18AE  00A0               	movwf	??_getDimmerLights_Line
 14190  18AF  0820               	movf	??_getDimmerLights_Line,w
 14191  18B0  00A1               	movwf	getDimmerLights_Line@line
 14192  18B1                     l949:	
 14193                           
 14194                           ;Dimmer_B1.c: 1179: }
 14195                           ;Dimmer_B1.c: 1186: return line;
 14196  18B1  0020               	movlb	0	; select bank0
 14197  18B2  0821               	movf	getDimmerLights_Line@line,w
 14198  18B3  0008               	return
 14199  18B4                     __end_of_getDimmerLights_Line:	
 14200                           
 14201                           	psect	text88
 14202  1CC4                     __ptext88:	
 14203 ;; *************** function _DimmerLights_Main *****************
 14204 ;; Defined at:
 14205 ;;		line 837 in file "../src/Dimmer_B1.c"
 14206 ;; Parameters:    Size  Location     Type
 14207 ;;		None
 14208 ;; Auto vars:     Size  Location     Type
 14209 ;;		None
 14210 ;; Return value:  Size  Location     Type
 14211 ;;		None               void
 14212 ;; Registers used:
 14213 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14214 ;; Tracked objects:
 14215 ;;		On entry : 0/0
 14216 ;;		On exit  : 0/0
 14217 ;;		Unchanged: 0/0
 14218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14223 ;;Total ram usage:        0 bytes
 14224 ;; Hardware stack levels used:    1
 14225 ;; Hardware stack levels required when called:   10
 14226 ;; This function calls:
 14227 ;;		_DimmerLights_DimmingFunction
 14228 ;;		_getLoad_OK
 14229 ;;		_getMain_All_Error_Status
 14230 ;;		_getMain_All_LightsStatus
 14231 ;;		_setDimmerLights_Main
 14232 ;; This function is called by:
 14233 ;;		_main
 14234 ;; This function uses a non-reentrant model
 14235 ;;
 14236                           
 14237                           
 14238                           ;psect for function _DimmerLights_Main
 14239  1CC4                     _DimmerLights_Main:	
 14240                           
 14241                           ;Dimmer_B1.c: 840: if (Dimmer.LoadGO == 1) {
 14242                           
 14243                           ;incstack = 0
 14244                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14245  1CC4  0022               	movlb	2	; select bank2
 14246  1CC5  1CAC               	btfss	_Dimmer^(0+256),1
 14247  1CC6  2CDC               	goto	l10263
 14248                           
 14249                           ;Dimmer_B1.c: 841: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 14250  1CC7  31A6  2636  319C   	fcall	_getLoad_OK
 14251  1CCA  3A01               	xorlw	1
 14252  1CCB  1903               	skipnz
 14253  1CCC  2CDA               	goto	l874
 14254  1CCD  3000               	movlw	0
 14255  1CCE  319D  25C7  319C   	fcall	_getMain_All_Error_Status
 14256  1CD1  3800               	iorlw	0
 14257  1CD2  1D03               	skipz
 14258  1CD3  2CDA               	goto	l874
 14259  1CD4  3198  208E  319C   	fcall	_getMain_All_LightsStatus
 14260  1CD7  3800               	iorlw	0
 14261  1CD8  1D03               	skipz
 14262  1CD9  2CDC               	goto	l10263
 14263  1CDA                     l874:	
 14264                           
 14265                           ;Dimmer_B1.c: 842: Dimmer.LoadGO = 0;
 14266  1CDA  0022               	movlb	2	; select bank2
 14267  1CDB  10AC               	bcf	_Dimmer^(0+256),1
 14268  1CDC                     l10263:	
 14269                           
 14270                           ;Dimmer_B1.c: 843: }
 14271                           ;Dimmer_B1.c: 844: }
 14272                           ;Dimmer_B1.c: 849: setDimmerLights_Main(1);
 14273  1CDC  3001               	movlw	1
 14274  1CDD  3194  24E9  319C   	fcall	_setDimmerLights_Main
 14275                           
 14276                           ;Dimmer_B1.c: 852: DimmerLights_DimmingFunction(1);
 14277  1CE0  3001               	movlw	1
 14278  1CE1  3197  2780  319C   	fcall	_DimmerLights_DimmingFunction
 14279                           
 14280                           ;Dimmer_B1.c: 862: setDimmerLights_Main(2);
 14281  1CE4  3002               	movlw	2
 14282  1CE5  3194  24E9  319C   	fcall	_setDimmerLights_Main
 14283                           
 14284                           ;Dimmer_B1.c: 864: DimmerLights_DimmingFunction(2);
 14285  1CE8  3002               	movlw	2
 14286  1CE9  3197  2780         	fcall	_DimmerLights_DimmingFunction
 14287  1CEB  0008               	return
 14288  1CEC                     __end_of_DimmerLights_Main:	
 14289                           
 14290                           	psect	text89
 14291  14E9                     __ptext89:	
 14292 ;; *************** function _setDimmerLights_Main *****************
 14293 ;; Defined at:
 14294 ;;		line 879 in file "../src/Dimmer_B1.c"
 14295 ;; Parameters:    Size  Location     Type
 14296 ;;  lights          1    wreg     unsigned char 
 14297 ;; Auto vars:     Size  Location     Type
 14298 ;;  lights          1    1[BANK1 ] unsigned char 
 14299 ;; Return value:  Size  Location     Type
 14300 ;;		None               void
 14301 ;; Registers used:
 14302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14303 ;; Tracked objects:
 14304 ;;		On entry : 0/0
 14305 ;;		On exit  : 0/0
 14306 ;;		Unchanged: 0/0
 14307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14309 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14311 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14312 ;;Total ram usage:        1 bytes
 14313 ;; Hardware stack levels used:    1
 14314 ;; Hardware stack levels required when called:    9
 14315 ;; This function calls:
 14316 ;;		_DimmerLights_SelectPointer
 14317 ;;		_getDimmerLights_Allow_Condition
 14318 ;;		_getMain_All_LightsStatus
 14319 ;;		_setDimmerLights_Dimming
 14320 ;;		_setDimmerLights_OnOff
 14321 ;; This function is called by:
 14322 ;;		_DimmerLights_Main
 14323 ;; This function uses a non-reentrant model
 14324 ;;
 14325                           
 14326                           
 14327                           ;psect for function _setDimmerLights_Main
 14328  14E9                     _setDimmerLights_Main:	
 14329                           
 14330                           ;incstack = 0
 14331                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14332                           ;setDimmerLights_Main@lights stored from wreg
 14333  14E9  0021               	movlb	1	; select bank1
 14334  14EA  00E6               	movwf	setDimmerLights_Main@lights^(0+128)
 14335                           
 14336                           ;Dimmer_B1.c: 881: DimmerLights_SelectPointer(lights);
 14337  14EB  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14338  14EC  3199  216F  3194   	fcall	_DimmerLights_SelectPointer
 14339                           
 14340                           ;Dimmer_B1.c: 882: if (DimmerLights->Trigger == 1) {
 14341  14EF  0021               	movlb	1	; select bank1
 14342  14F0  085A               	movf	_DimmerLights^(0+128),w
 14343  14F1  0086               	movwf	6
 14344  14F2  3001               	movlw	1	; select bank2/3
 14345  14F3  0087               	movwf	7
 14346  14F4  1C81               	btfss	1,1
 14347  14F5  2D18               	goto	l10129
 14348                           
 14349                           ;Dimmer_B1.c: 883: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14350  14F6  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14351  14F7  319F  27C2  3194   	fcall	_getDimmerLights_Allow_Condition
 14352  14FA  3800               	iorlw	0
 14353  14FB  1D03               	skipz
 14354  14FC  0008               	return
 14355                           
 14356                           ;Dimmer_B1.c: 884: DimmerLights->Trigger = 0;
 14357  14FD  0021               	movlb	1	; select bank1
 14358  14FE  085A               	movf	_DimmerLights^(0+128),w
 14359  14FF  0086               	movwf	6
 14360  1500  3001               	movlw	1	; select bank2/3
 14361  1501  0087               	movwf	7
 14362  1502  1081               	bcf	1,1
 14363                           
 14364                           ;Dimmer_B1.c: 885: if (DimmerLights->Switch == 1) {
 14365  1503  085A               	movf	_DimmerLights^(0+128),w
 14366  1504  0086               	movwf	6
 14367  1505  3001               	movlw	1	; select bank2/3
 14368  1506  0087               	movwf	7
 14369  1507  1D01               	btfss	1,2
 14370  1508  2D11               	goto	l10127
 14371                           
 14372                           ;Dimmer_B1.c: 886: setDimmerLights_OnOff(lights, 1);
 14373  1509  0020               	movlb	0	; select bank0
 14374  150A  01ED               	clrf	setDimmerLights_OnOff@command
 14375  150B  0AED               	incf	setDimmerLights_OnOff@command,f
 14376  150C  0021               	movlb	1	; select bank1
 14377  150D  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14378  150E  318F  272C         	fcall	_setDimmerLights_OnOff
 14379                           
 14380                           ;Dimmer_B1.c: 887: } else {
 14381  1510  0008               	return
 14382  1511                     l10127:	
 14383                           
 14384                           ;Dimmer_B1.c: 888: setDimmerLights_OnOff(lights, 0);
 14385  1511  0020               	movlb	0	; select bank0
 14386  1512  01ED               	clrf	setDimmerLights_OnOff@command
 14387  1513  0021               	movlb	1	; select bank1
 14388  1514  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14389  1515  318F  272C         	fcall	_setDimmerLights_OnOff
 14390                           
 14391                           ;Dimmer_B1.c: 889: }
 14392                           ;Dimmer_B1.c: 890: }
 14393                           ;Dimmer_B1.c: 891: } else {
 14394  1517  0008               	return
 14395  1518                     l10129:	
 14396                           
 14397                           ;Dimmer_B1.c: 892: if (getMain_All_LightsStatus() == 1) {
 14398  1518  3198  208E  3194   	fcall	_getMain_All_LightsStatus
 14399  151B  3A01               	xorlw	1
 14400  151C  1D03               	skipz
 14401  151D  2D47               	goto	l10141
 14402                           
 14403                           ;Dimmer_B1.c: 893: if (DimmerLights->DimmingTrigger == 1) {
 14404  151E  0021               	movlb	1	; select bank1
 14405  151F  085A               	movf	_DimmerLights^(0+128),w
 14406  1520  0086               	movwf	6
 14407  1521  3001               	movlw	1	; select bank2/3
 14408  1522  0087               	movwf	7
 14409  1523  1E01               	btfss	1,4
 14410  1524  0008               	return
 14411                           
 14412                           ;Dimmer_B1.c: 894: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14413  1525  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14414  1526  319F  27C2  3194   	fcall	_getDimmerLights_Allow_Condition
 14415  1529  3800               	iorlw	0
 14416  152A  1D03               	skipz
 14417  152B  0008               	return
 14418                           
 14419                           ;Dimmer_B1.c: 895: DimmerLights->DimmingTrigger = 0;
 14420  152C  0021               	movlb	1	; select bank1
 14421  152D  085A               	movf	_DimmerLights^(0+128),w
 14422  152E  0086               	movwf	6
 14423  152F  3001               	movlw	1	; select bank2/3
 14424  1530  0087               	movwf	7
 14425  1531  1201               	bcf	1,4
 14426                           
 14427                           ;Dimmer_B1.c: 896: if (DimmerLights->DimmingSwitch == 1) {
 14428  1532  085A               	movf	_DimmerLights^(0+128),w
 14429  1533  0086               	movwf	6
 14430  1534  3001               	movlw	1	; select bank2/3
 14431  1535  0087               	movwf	7
 14432  1536  1E81               	btfss	1,5
 14433  1537  2D40               	goto	l10139
 14434                           
 14435                           ;Dimmer_B1.c: 897: setDimmerLights_Dimming(lights, 1);
 14436  1538  0020               	movlb	0	; select bank0
 14437  1539  01EA               	clrf	setDimmerLights_Dimming@status
 14438  153A  0AEA               	incf	setDimmerLights_Dimming@status,f
 14439  153B  0021               	movlb	1	; select bank1
 14440  153C  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14441  153D  3191  218C         	fcall	_setDimmerLights_Dimming
 14442                           
 14443                           ;Dimmer_B1.c: 898: } else {
 14444  153F  0008               	return
 14445  1540                     l10139:	
 14446                           
 14447                           ;Dimmer_B1.c: 899: setDimmerLights_Dimming(lights, 0);
 14448  1540  0020               	movlb	0	; select bank0
 14449  1541  01EA               	clrf	setDimmerLights_Dimming@status
 14450  1542  0021               	movlb	1	; select bank1
 14451  1543  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14452  1544  3191  218C         	fcall	_setDimmerLights_Dimming
 14453                           
 14454                           ;Dimmer_B1.c: 900: }
 14455                           ;Dimmer_B1.c: 901: }
 14456                           ;Dimmer_B1.c: 902: }
 14457                           ;Dimmer_B1.c: 903: } else {
 14458  1546  0008               	return
 14459  1547                     l10141:	
 14460                           
 14461                           ;Dimmer_B1.c: 904: if (DimmerLights->DimmingTrigger == 1) {
 14462  1547  0021               	movlb	1	; select bank1
 14463  1548  085A               	movf	_DimmerLights^(0+128),w
 14464  1549  0086               	movwf	6
 14465  154A  3001               	movlw	1	; select bank2/3
 14466  154B  0087               	movwf	7
 14467  154C  1E01               	btfss	1,4
 14468  154D  0008               	return
 14469                           
 14470                           ;Dimmer_B1.c: 905: DimmerLights->DimmingTrigger = 0;
 14471  154E  085A               	movf	_DimmerLights^(0+128),w
 14472  154F  0086               	movwf	6
 14473  1550  3001               	movlw	1	; select bank2/3
 14474  1551  0087               	movwf	7
 14475  1552  1201               	bcf	1,4
 14476  1553  0008               	return
 14477  1554                     __end_of_setDimmerLights_Main:	
 14478                           
 14479                           	psect	text90
 14480  0F2C                     __ptext90:	
 14481 ;; *************** function _setDimmerLights_OnOff *****************
 14482 ;; Defined at:
 14483 ;;		line 956 in file "../src/Dimmer_B1.c"
 14484 ;; Parameters:    Size  Location     Type
 14485 ;;  lights          1    wreg     unsigned char 
 14486 ;;  command         1   77[BANK0 ] unsigned char 
 14487 ;; Auto vars:     Size  Location     Type
 14488 ;;  lights          1    0[BANK1 ] unsigned char 
 14489 ;; Return value:  Size  Location     Type
 14490 ;;		None               void
 14491 ;; Registers used:
 14492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14493 ;; Tracked objects:
 14494 ;;		On entry : 0/0
 14495 ;;		On exit  : 0/0
 14496 ;;		Unchanged: 0/0
 14497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14498 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14500 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14501 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14502 ;;Total ram usage:        4 bytes
 14503 ;; Hardware stack levels used:    1
 14504 ;; Hardware stack levels required when called:    8
 14505 ;; This function calls:
 14506 ;;		_getCmd_Status
 14507 ;;		_getDelayOff_GO
 14508 ;;		_getDimmerLights_PercentToValue
 14509 ;;		_getMain_All_LightsStatus
 14510 ;;		_setCmd_Status
 14511 ;;		_setDelayOff_GO
 14512 ;;		_setDimmerIntr_ControlStatus
 14513 ;;		_setDimmerIntr_DimmingValue
 14514 ;;		_setDimmerIntr_Dimming_RF
 14515 ;;		_setDimmerIntr_MaxmumValue
 14516 ;;		_setDimmerLights_DimmingClose
 14517 ;;		_setDimmerLights_Line
 14518 ;;		_setLED
 14519 ;;		_setProductData
 14520 ;;		_setRF_DimmerLights
 14521 ;;		_setTxData
 14522 ;; This function is called by:
 14523 ;;		_setDimmerLights_Main
 14524 ;; This function uses a non-reentrant model
 14525 ;;
 14526                           
 14527                           
 14528                           ;psect for function _setDimmerLights_OnOff
 14529  0F2C                     _setDimmerLights_OnOff:	
 14530                           
 14531                           ;incstack = 0
 14532                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14533                           ;setDimmerLights_OnOff@lights stored from wreg
 14534  0F2C  0021               	movlb	1	; select bank1
 14535  0F2D  00E5               	movwf	setDimmerLights_OnOff@lights^(0+128)
 14536                           
 14537                           ;Dimmer_B1.c: 958: if (command == 1) {
 14538  0F2E  0020               	movlb	0	; select bank0
 14539  0F2F  086D               	movf	setDimmerLights_OnOff@command,w
 14540  0F30  3A01               	xorlw	1
 14541  0F31  1D03               	skipz
 14542  0F32  2F97               	goto	l10075
 14543                           
 14544                           ;Dimmer_B1.c: 960: setDimmerIntr_ControlStatus(lights, 1);
 14545  0F33  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14546  0F34  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 14547  0F35  0021               	movlb	1	; select bank1
 14548  0F36  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14549  0F37  319D  2569  318F   	fcall	_setDimmerIntr_ControlStatus
 14550                           
 14551                           ;Dimmer_B1.c: 963: Dimmer.Load_Status = 1;
 14552  0F3A  0022               	movlb	2	; select bank2
 14553  0F3B  152C               	bsf	_Dimmer^(0+256),2
 14554                           
 14555                           ;Dimmer_B1.c: 964: setDimmerLights_Line(lights);
 14556  0F3C  0021               	movlb	1	; select bank1
 14557  0F3D  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14558  0F3E  319A  22D4  318F   	fcall	_setDimmerLights_Line
 14559                           
 14560                           ;Dimmer_B1.c: 970: setLED(lights, 0);
 14561  0F41  0020               	movlb	0	; select bank0
 14562  0F42  01A2               	clrf	setLED@command
 14563  0F43  0021               	movlb	1	; select bank1
 14564  0F44  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14565  0F45  3188  2000  318F   	fcall	_setLED
 14566                           
 14567                           ;Dimmer_B1.c: 991: if (DimmerLights->DimmingRun == 1) {
 14568  0F48  0021               	movlb	1	; select bank1
 14569  0F49  0A5A               	incf	_DimmerLights^(0+128),w
 14570  0F4A  0086               	movwf	6
 14571  0F4B  3001               	movlw	1	; select bank2/3
 14572  0F4C  0087               	movwf	7
 14573  0F4D  1F01               	btfss	1,6
 14574  0F4E  2F73               	goto	l10065
 14575                           
 14576                           ;Dimmer_B1.c: 992: DimmerLights->DimmingRun = 0;
 14577  0F4F  0A5A               	incf	_DimmerLights^(0+128),w
 14578  0F50  0086               	movwf	6
 14579  0F51  3001               	movlw	1	; select bank2/3
 14580  0F52  0087               	movwf	7
 14581  0F53  1301               	bcf	1,6
 14582                           
 14583                           ;Dimmer_B1.c: 993: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 14584  0F54  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14585  0F55  3E14               	addlw	20
 14586  0F56  076E               	addwf	_product^(0+128),w
 14587  0F57  0020               	movlb	0	; select bank0
 14588  0F58  00EE               	movwf	??_setDimmerLights_OnOff
 14589  0F59  086E               	movf	??_setDimmerLights_OnOff,w
 14590  0F5A  0086               	movwf	6
 14591  0F5B  3002               	movlw	2	; select bank4/5
 14592  0F5C  0087               	movwf	7
 14593  0F5D  0801               	movf	1,w
 14594  0F5E  3193  2353  318F   	fcall	_getDimmerLights_PercentToValue
 14595  0F61  0020               	movlb	0	; select bank0
 14596  0F62  00EF               	movwf	??_setDimmerLights_OnOff+1
 14597  0F63  086F               	movf	??_setDimmerLights_OnOff+1,w
 14598  0F64  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14599  0F65  0021               	movlb	1	; select bank1
 14600  0F66  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14601  0F67  3199  2186  318F   	fcall	_setDimmerIntr_MaxmumValue
 14602                           
 14603                           ;Dimmer_B1.c: 994: setDimmerIntr_Dimming_RF(lights, 1);
 14604  0F6A  0020               	movlb	0	; select bank0
 14605  0F6B  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 14606  0F6C  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 14607  0F6D  0021               	movlb	1	; select bank1
 14608  0F6E  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14609  0F6F  319D  2598  318F   	fcall	_setDimmerIntr_Dimming_RF
 14610                           
 14611                           ;Dimmer_B1.c: 995: } else {
 14612  0F72  2F8A               	goto	l10067
 14613  0F73                     l10065:	
 14614                           
 14615                           ;Dimmer_B1.c: 997: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 14616  0F73  0021               	movlb	1	; select bank1
 14617  0F74  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14618  0F75  3E14               	addlw	20
 14619  0F76  076E               	addwf	_product^(0+128),w
 14620  0F77  0020               	movlb	0	; select bank0
 14621  0F78  00EE               	movwf	??_setDimmerLights_OnOff
 14622  0F79  086E               	movf	??_setDimmerLights_OnOff,w
 14623  0F7A  0086               	movwf	6
 14624  0F7B  3002               	movlw	2	; select bank4/5
 14625  0F7C  0087               	movwf	7
 14626  0F7D  0801               	movf	1,w
 14627  0F7E  3193  2353  318F   	fcall	_getDimmerLights_PercentToValue
 14628  0F81  0020               	movlb	0	; select bank0
 14629  0F82  00EF               	movwf	??_setDimmerLights_OnOff+1
 14630  0F83  086F               	movf	??_setDimmerLights_OnOff+1,w
 14631  0F84  00E2               	movwf	setDimmerIntr_DimmingValue@value
 14632  0F85  0021               	movlb	1	; select bank1
 14633  0F86  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14634  0F87  3199  219D  318F   	fcall	_setDimmerIntr_DimmingValue
 14635  0F8A                     l10067:	
 14636                           
 14637                           ;Dimmer_B1.c: 1003: }
 14638                           ;Dimmer_B1.c: 1005: if (lights == 1) {
 14639  0F8A  0021               	movlb	1	; select bank1
 14640  0F8B  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14641  0F8C  3A01               	xorlw	1
 14642  0F8D  1D03               	skipz
 14643  0F8E  2F91               	goto	l10071
 14644                           
 14645                           ;Dimmer_B1.c: 1007: DimmerIntr1.TuneGO = 1;
 14646  0F8F  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 14647                           
 14648                           ;Dimmer_B1.c: 1009: } else if (lights == 2) {
 14649  0F90  2FCE               	goto	l10093
 14650  0F91                     l10071:	
 14651  0F91  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14652  0F92  3A02               	xorlw	2
 14653  0F93  1D03               	skipz
 14654  0F94  2FCE               	goto	l10093
 14655                           
 14656                           ;Dimmer_B1.c: 1011: DimmerIntr2.TuneGO = 1;
 14657  0F95  1749               	bsf	(_DimmerIntr2^(0+128)+1),6
 14658                           
 14659                           ;Dimmer_B1.c: 1013: }
 14660                           ;Dimmer_B1.c: 1019: } else if (command == 0) {
 14661  0F96  2FCE               	goto	l10093
 14662  0F97                     l10075:	
 14663  0F97  0020               	movlb	0	; select bank0
 14664  0F98  08ED               	movf	setDimmerLights_OnOff@command,f
 14665  0F99  1D03               	skipz
 14666  0F9A  2FCE               	goto	l10093
 14667                           
 14668                           ;Dimmer_B1.c: 1021: setDimmerIntr_ControlStatus(lights, 0);
 14669  0F9B  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14670  0F9C  0021               	movlb	1	; select bank1
 14671  0F9D  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14672  0F9E  319D  2569  318F   	fcall	_setDimmerIntr_ControlStatus
 14673                           
 14674                           ;Dimmer_B1.c: 1023: Dimmer.Load_Status = 0;
 14675  0FA1  0022               	movlb	2	; select bank2
 14676  0FA2  112C               	bcf	_Dimmer^(0+256),2
 14677                           
 14678                           ;Dimmer_B1.c: 1024: setDimmerLights_Line(0);
 14679  0FA3  3000               	movlw	0
 14680  0FA4  319A  22D4  318F   	fcall	_setDimmerLights_Line
 14681                           
 14682                           ;Dimmer_B1.c: 1028: if (getDelayOff_GO(lights) == 1) {
 14683  0FA7  0021               	movlb	1	; select bank1
 14684  0FA8  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14685  0FA9  31A7  2750  318F   	fcall	_getDelayOff_GO
 14686  0FAC  3A01               	xorlw	1
 14687  0FAD  1D03               	skipz
 14688  0FAE  2FB7               	goto	l914
 14689                           
 14690                           ;Dimmer_B1.c: 1029: setDelayOff_GO(lights, 0, 0);
 14691  0FAF  0020               	movlb	0	; select bank0
 14692  0FB0  01E5               	clrf	setDelayOff_GO@command
 14693  0FB1  01E6               	clrf	setDelayOff_GO@value
 14694  0FB2  0021               	movlb	1	; select bank1
 14695  0FB3  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14696  0FB4  3189  21E0  318F   	fcall	_setDelayOff_GO
 14697  0FB7                     l914:	
 14698                           
 14699                           ;Dimmer_B1.c: 1030: }
 14700                           ;Dimmer_B1.c: 1035: setLED(lights, 1);
 14701  0FB7  0020               	movlb	0	; select bank0
 14702  0FB8  01A2               	clrf	setLED@command
 14703  0FB9  0AA2               	incf	setLED@command,f
 14704  0FBA  0021               	movlb	1	; select bank1
 14705  0FBB  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14706  0FBC  3188  2000  318F   	fcall	_setLED
 14707                           
 14708                           ;Dimmer_B1.c: 1040: if (lights == 1) {
 14709  0FBF  0021               	movlb	1	; select bank1
 14710  0FC0  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14711  0FC1  3A01               	xorlw	1
 14712  0FC2  1D03               	skipz
 14713  0FC3  2FC7               	goto	l10089
 14714                           
 14715                           ;Dimmer_B1.c: 1041: RA7 = 0;
 14716  0FC4  0020               	movlb	0	; select bank0
 14717  0FC5  138C               	bcf	12,7	;volatile
 14718                           
 14719                           ;Dimmer_B1.c: 1043: }
 14720  0FC6  2FCE               	goto	l10093
 14721  0FC7                     l10089:	
 14722                           
 14723                           ;Dimmer_B1.c: 1046: else if (lights == 2) {
 14724  0FC7  0021               	movlb	1	; select bank1
 14725  0FC8  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14726  0FC9  3A02               	xorlw	2
 14727  0FCA  1D03               	skipz
 14728  0FCB  2FCE               	goto	l10093
 14729                           
 14730                           ;Dimmer_B1.c: 1047: RB4 = 0;
 14731  0FCC  0020               	movlb	0	; select bank0
 14732  0FCD  120D               	bcf	13,4	;volatile
 14733  0FCE                     l10093:	
 14734                           
 14735                           ;Dimmer_B1.c: 1048: }
 14736                           ;Dimmer_B1.c: 1054: }
 14737                           ;Dimmer_B1.c: 1056: setDimmerLights_DimmingClose();
 14738  0FCE  31A6  26B4  318F   	fcall	_setDimmerLights_DimmingClose
 14739                           
 14740                           ;Dimmer_B1.c: 1058: setRF_DimmerLights(lights, command);
 14741  0FD1  0020               	movlb	0	; select bank0
 14742  0FD2  086D               	movf	setDimmerLights_OnOff@command,w
 14743  0FD3  00EE               	movwf	??_setDimmerLights_OnOff
 14744  0FD4  086E               	movf	??_setDimmerLights_OnOff,w
 14745  0FD5  00E5               	movwf	setRF_DimmerLights@on
 14746  0FD6  0021               	movlb	1	; select bank1
 14747  0FD7  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14748  0FD8  3194  241D  318F   	fcall	_setRF_DimmerLights
 14749                           
 14750                           ;Dimmer_B1.c: 1060: if (getCmd_Status(1) == 1) {
 14751  0FDB  3001               	movlw	1
 14752  0FDC  31A7  2794  318F   	fcall	_getCmd_Status
 14753  0FDF  3A01               	xorlw	1
 14754  0FE0  1D03               	skipz
 14755  0FE1  2FFD               	goto	l10109
 14756                           
 14757                           ;Dimmer_B1.c: 1061: if (getMain_All_LightsStatus() == 0) {
 14758  0FE2  3198  208E  318F   	fcall	_getMain_All_LightsStatus
 14759  0FE5  3800               	iorlw	0
 14760  0FE6  1D03               	skipz
 14761  0FE7  0008               	return
 14762                           
 14763                           ;Dimmer_B1.c: 1062: setCmd_Status(1, 0);
 14764  0FE8  0020               	movlb	0	; select bank0
 14765  0FE9  01A0               	clrf	setCmd_Status@cmd
 14766  0FEA  3001               	movlw	1
 14767  0FEB  3199  21E4  318F   	fcall	_setCmd_Status
 14768                           
 14769                           ;Dimmer_B1.c: 1063: setProductData(11, 0);
 14770  0FEE  0020               	movlb	0	; select bank0
 14771  0FEF  01E2               	clrf	setProductData@value
 14772  0FF0  300B               	movlw	11
 14773  0FF1  31A6  26A8  318F   	fcall	_setProductData
 14774                           
 14775                           ;Dimmer_B1.c: 1064: setProductData(17, 0);
 14776  0FF4  0020               	movlb	0	; select bank0
 14777  0FF5  01E2               	clrf	setProductData@value
 14778  0FF6  3011               	movlw	17
 14779  0FF7  31A6  26A8  318F   	fcall	_setProductData
 14780                           
 14781                           ;Dimmer_B1.c: 1065: setTxData();
 14782  0FFA  318D  25A7         	fcall	_setTxData
 14783                           
 14784                           ;Dimmer_B1.c: 1066: }
 14785                           ;Dimmer_B1.c: 1067: } else {
 14786  0FFC  0008               	return
 14787  0FFD                     l10109:	
 14788                           
 14789                           ;Dimmer_B1.c: 1068: setTxData();
 14790  0FFD  318D  25A7         	fcall	_setTxData
 14791  0FFF  0008               	return
 14792  1000                     __end_of_setDimmerLights_OnOff:	
 14793                           
 14794                           	psect	text91
 14795  0800                     __ptext91:	
 14796 ;; *************** function _setLED *****************
 14797 ;; Defined at:
 14798 ;;		line 81 in file "../src/LED_B1.c"
 14799 ;; Parameters:    Size  Location     Type
 14800 ;;  led             1    wreg     unsigned char 
 14801 ;;  command         1    2[BANK0 ] unsigned char 
 14802 ;; Auto vars:     Size  Location     Type
 14803 ;;  led             1    3[BANK0 ] unsigned char 
 14804 ;; Return value:  Size  Location     Type
 14805 ;;		None               void
 14806 ;; Registers used:
 14807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14808 ;; Tracked objects:
 14809 ;;		On entry : 0/0
 14810 ;;		On exit  : 0/0
 14811 ;;		Unchanged: 0/0
 14812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14813 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14816 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;Total ram usage:        2 bytes
 14818 ;; Hardware stack levels used:    1
 14819 ;; Hardware stack levels required when called:    6
 14820 ;; This function calls:
 14821 ;;		_LedPointSelect
 14822 ;; This function is called by:
 14823 ;;		_setDimmerLights_OnOff
 14824 ;;		_setLED_Initialization
 14825 ;;		_Exception_Main
 14826 ;;		_setSw_Initialization
 14827 ;; This function uses a non-reentrant model
 14828 ;;
 14829                           
 14830                           
 14831                           ;psect for function _setLED
 14832  0800                     _setLED:	
 14833                           
 14834                           ;incstack = 0
 14835                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14836                           ;setLED@led stored from wreg
 14837  0800  0020               	movlb	0	; select bank0
 14838  0801  00A3               	movwf	setLED@led
 14839                           
 14840                           ;LED_B1.c: 82: LedPointSelect(led);
 14841  0802  0823               	movf	setLED@led,w
 14842  0803  319B  234E  3188   	fcall	_LedPointSelect
 14843                           
 14844                           ;LED_B1.c: 83: if (command == 0) {
 14845  0806  0020               	movlb	0	; select bank0
 14846  0807  08A2               	movf	setLED@command,f
 14847  0808  1D03               	skipz
 14848  0809  2817               	goto	l9909
 14849                           
 14850                           ;LED_B1.c: 85: if (led == 1) {
 14851  080A  0823               	movf	setLED@led,w
 14852  080B  3A01               	xorlw	1
 14853  080C  1D03               	skipz
 14854  080D  280F               	goto	l9901
 14855                           
 14856                           ;LED_B1.c: 89: RA3 = 1;
 14857  080E  158C               	bsf	12,3	;volatile
 14858  080F                     l9901:	
 14859                           
 14860                           ;LED_B1.c: 91: }
 14861                           ;LED_B1.c: 94: if (led == 2) {
 14862  080F  0823               	movf	setLED@led,w
 14863  0810  3A02               	xorlw	2
 14864  0811  1903               	btfsc	3,2
 14865                           
 14866                           ;LED_B1.c: 98: RC7 = 1;
 14867  0812  178E               	bsf	14,7	;volatile
 14868                           
 14869                           ;LED_B1.c: 100: }
 14870                           ;LED_B1.c: 112: if (led == 99) {
 14871  0813  0823               	movf	setLED@led,w
 14872  0814  3A63               	xorlw	99
 14873  0815  1903               	btfsc	3,2
 14874                           
 14875                           ;LED_B1.c: 116: RB5 = 1;
 14876  0816  168D               	bsf	13,5	;volatile
 14877  0817                     l9909:	
 14878                           
 14879                           ;LED_B1.c: 118: }
 14880                           ;LED_B1.c: 120: }
 14881                           ;LED_B1.c: 121: if (command == 1) {
 14882  0817  0822               	movf	setLED@command,w
 14883  0818  3A01               	xorlw	1
 14884  0819  1D03               	skipz
 14885  081A  2828               	goto	l9923
 14886                           
 14887                           ;LED_B1.c: 123: if (led == 1) {
 14888  081B  0823               	movf	setLED@led,w
 14889  081C  3A01               	xorlw	1
 14890  081D  1D03               	skipz
 14891  081E  2820               	goto	l9915
 14892                           
 14893                           ;LED_B1.c: 127: RA3 = 0;
 14894  081F  118C               	bcf	12,3	;volatile
 14895  0820                     l9915:	
 14896                           
 14897                           ;LED_B1.c: 129: }
 14898                           ;LED_B1.c: 132: if (led == 2) {
 14899  0820  0823               	movf	setLED@led,w
 14900  0821  3A02               	xorlw	2
 14901  0822  1903               	btfsc	3,2
 14902                           
 14903                           ;LED_B1.c: 136: RC7 = 0;
 14904  0823  138E               	bcf	14,7	;volatile
 14905                           
 14906                           ;LED_B1.c: 138: }
 14907                           ;LED_B1.c: 150: if (led == 99) {
 14908  0824  0823               	movf	setLED@led,w
 14909  0825  3A63               	xorlw	99
 14910  0826  1903               	btfsc	3,2
 14911                           
 14912                           ;LED_B1.c: 154: RB5 = 0;
 14913  0827  128D               	bcf	13,5	;volatile
 14914  0828                     l9923:	
 14915                           
 14916                           ;LED_B1.c: 156: }
 14917                           ;LED_B1.c: 158: }
 14918                           ;LED_B1.c: 159: if (command == 10) {
 14919  0828  0822               	movf	setLED@command,w
 14920  0829  3A0A               	xorlw	10
 14921  082A  1D03               	skipz
 14922  082B  2848               	goto	l9939
 14923                           
 14924                           ;LED_B1.c: 160: LED->GO = 0;
 14925  082C  0021               	movlb	1	; select bank1
 14926  082D  085B               	movf	_LED^(0+128),w
 14927  082E  0086               	movwf	6
 14928  082F  3001               	movlw	1	; select bank2/3
 14929  0830  0087               	movwf	7
 14930  0831  1081               	bcf	1,1
 14931                           
 14932                           ;LED_B1.c: 161: LED->Time = 0;
 14933  0832  0A5B               	incf	_LED^(0+128),w
 14934  0833  0086               	movwf	6
 14935  0834  3001               	movlw	1	; select bank2/3
 14936  0835  0087               	movwf	7
 14937  0836  3000               	movlw	0
 14938  0837  3FC0               	movwi [0]fsr1
 14939  0838  3FC1               	movwi [1]fsr1
 14940                           
 14941                           ;LED_B1.c: 163: if (led == 1) {
 14942  0839  0020               	movlb	0	; select bank0
 14943  083A  0823               	movf	setLED@led,w
 14944  083B  3A01               	xorlw	1
 14945  083C  1D03               	skipz
 14946  083D  2840               	goto	l9931
 14947                           
 14948                           ;LED_B1.c: 167: RA3 = 1;
 14949  083E  158C               	bsf	12,3	;volatile
 14950                           
 14951                           ;LED_B1.c: 169: }
 14952  083F  2844               	goto	l9935
 14953  0840                     l9931:	
 14954                           
 14955                           ;LED_B1.c: 172: else if (led == 2) {
 14956  0840  0823               	movf	setLED@led,w
 14957  0841  3A02               	xorlw	2
 14958  0842  1903               	btfsc	3,2
 14959                           
 14960                           ;LED_B1.c: 176: RC7 = 1;
 14961  0843  178E               	bsf	14,7	;volatile
 14962  0844                     l9935:	
 14963                           
 14964                           ;LED_B1.c: 178: }
 14965                           ;LED_B1.c: 190: if (led == 99) {
 14966  0844  0823               	movf	setLED@led,w
 14967  0845  3A63               	xorlw	99
 14968  0846  1903               	btfsc	3,2
 14969                           
 14970                           ;LED_B1.c: 194: RB5 = 1;
 14971  0847  168D               	bsf	13,5	;volatile
 14972  0848                     l9939:	
 14973                           
 14974                           ;LED_B1.c: 196: }
 14975                           ;LED_B1.c: 198: }
 14976                           ;LED_B1.c: 199: if (command == 11) {
 14977  0848  0822               	movf	setLED@command,w
 14978  0849  3A0B               	xorlw	11
 14979  084A  1D03               	skipz
 14980  084B  0008               	return
 14981                           
 14982                           ;LED_B1.c: 200: LED->GO = 1;
 14983  084C  0021               	movlb	1	; select bank1
 14984  084D  085B               	movf	_LED^(0+128),w
 14985  084E  0086               	movwf	6
 14986  084F  3001               	movlw	1	; select bank2/3
 14987  0850  0087               	movwf	7
 14988  0851  1481               	bsf	1,1
 14989  0852  0008               	return
 14990  0853                     __end_of_setLED:	
 14991                           
 14992                           	psect	text92
 14993  1B4E                     __ptext92:	
 14994 ;; *************** function _LedPointSelect *****************
 14995 ;; Defined at:
 14996 ;;		line 7 in file "../src/LED_B1.c"
 14997 ;; Parameters:    Size  Location     Type
 14998 ;;  led             1    wreg     unsigned char 
 14999 ;; Auto vars:     Size  Location     Type
 15000 ;;  led             1    1[BANK0 ] unsigned char 
 15001 ;; Return value:  Size  Location     Type
 15002 ;;		None               void
 15003 ;; Registers used:
 15004 ;;		wreg
 15005 ;; Tracked objects:
 15006 ;;		On entry : 0/0
 15007 ;;		On exit  : 0/0
 15008 ;;		Unchanged: 0/0
 15009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15011 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15013 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;Total ram usage:        2 bytes
 15015 ;; Hardware stack levels used:    1
 15016 ;; Hardware stack levels required when called:    5
 15017 ;; This function calls:
 15018 ;;		Nothing
 15019 ;; This function is called by:
 15020 ;;		_setLED_Initialization
 15021 ;;		_setLED
 15022 ;;		_setLED_Main
 15023 ;; This function uses a non-reentrant model
 15024 ;;
 15025                           
 15026                           
 15027                           ;psect for function _LedPointSelect
 15028  1B4E                     _LedPointSelect:	
 15029                           
 15030                           ;incstack = 0
 15031                           ; Regs used in _LedPointSelect: [wreg]
 15032                           ;LedPointSelect@led stored from wreg
 15033  1B4E  0020               	movlb	0	; select bank0
 15034  1B4F  00A1               	movwf	LedPointSelect@led
 15035                           
 15036                           ;LED_B1.c: 9: if (led == 1) {
 15037  1B50  0821               	movf	LedPointSelect@led,w
 15038  1B51  3A01               	xorlw	1
 15039  1B52  1D03               	skipz
 15040  1B53  2B59               	goto	l1170
 15041                           
 15042                           ;LED_B1.c: 10: LED = &VarLED1;
 15043  1B54  30E7               	movlw	_VarLED1& (0+255)
 15044  1B55  00A0               	movwf	??_LedPointSelect
 15045  1B56  0820               	movf	??_LedPointSelect,w
 15046  1B57  0021               	movlb	1	; select bank1
 15047  1B58  00DB               	movwf	_LED^(0+128)
 15048  1B59                     l1170:	
 15049                           
 15050                           ;LED_B1.c: 11: }
 15051                           ;LED_B1.c: 14: if (led == 2) {
 15052  1B59  0020               	movlb	0	; select bank0
 15053  1B5A  0821               	movf	LedPointSelect@led,w
 15054  1B5B  3A02               	xorlw	2
 15055  1B5C  1D03               	skipz
 15056  1B5D  2B63               	goto	l1171
 15057                           
 15058                           ;LED_B1.c: 15: LED = &VarLED2;
 15059  1B5E  30EB               	movlw	_VarLED2& (0+255)
 15060  1B5F  00A0               	movwf	??_LedPointSelect
 15061  1B60  0820               	movf	??_LedPointSelect,w
 15062  1B61  0021               	movlb	1	; select bank1
 15063  1B62  00DB               	movwf	_LED^(0+128)
 15064  1B63                     l1171:	
 15065                           
 15066                           ;LED_B1.c: 16: }
 15067                           ;LED_B1.c: 24: if (led == 99) {
 15068  1B63  0020               	movlb	0	; select bank0
 15069  1B64  0821               	movf	LedPointSelect@led,w
 15070  1B65  3A63               	xorlw	99
 15071  1B66  1D03               	skipz
 15072  1B67  0008               	return
 15073                           
 15074                           ;LED_B1.c: 25: LED = &VarErrLED;
 15075  1B68  30E3               	movlw	_VarErrLED& (0+255)
 15076  1B69  00A0               	movwf	??_LedPointSelect
 15077  1B6A  0820               	movf	??_LedPointSelect,w
 15078  1B6B  0021               	movlb	1	; select bank1
 15079  1B6C  00DB               	movwf	_LED^(0+128)
 15080  1B6D  0008               	return
 15081  1B6E                     __end_of_LedPointSelect:	
 15082                           
 15083                           	psect	text93
 15084  26B4                     __ptext93:	
 15085 ;; *************** function _setDimmerLights_DimmingClose *****************
 15086 ;; Defined at:
 15087 ;;		line 1837 in file "../src/Dimmer_B1.c"
 15088 ;; Parameters:    Size  Location     Type
 15089 ;;		None
 15090 ;; Auto vars:     Size  Location     Type
 15091 ;;		None
 15092 ;; Return value:  Size  Location     Type
 15093 ;;		None               void
 15094 ;; Registers used:
 15095 ;;		wreg, status,2, status,0, pclath, cstack
 15096 ;; Tracked objects:
 15097 ;;		On entry : 0/0
 15098 ;;		On exit  : 0/0
 15099 ;;		Unchanged: 0/0
 15100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15105 ;;Total ram usage:        0 bytes
 15106 ;; Hardware stack levels used:    1
 15107 ;; Hardware stack levels required when called:    6
 15108 ;; This function calls:
 15109 ;;		_setDimmerIntr_Dimming_Sw
 15110 ;; This function is called by:
 15111 ;;		_setDimmerLights_OnOff
 15112 ;; This function uses a non-reentrant model
 15113 ;;
 15114                           
 15115                           
 15116                           ;psect for function _setDimmerLights_DimmingClose
 15117  26B4                     _setDimmerLights_DimmingClose:	
 15118                           
 15119                           ;Dimmer_B1.c: 1839: setDimmerIntr_Dimming_Sw(1, 0);
 15120                           
 15121                           ;incstack = 0
 15122                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 15123  26B4  0020               	movlb	0	; select bank0
 15124  26B5  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15125  26B6  3001               	movlw	1
 15126  26B7  319D  253E  31A6   	fcall	_setDimmerIntr_Dimming_Sw
 15127                           
 15128                           ;Dimmer_B1.c: 1843: setDimmerIntr_Dimming_Sw(2, 0);
 15129  26BA  0020               	movlb	0	; select bank0
 15130  26BB  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15131  26BC  3002               	movlw	2
 15132  26BD  319D  253E         	fcall	_setDimmerIntr_Dimming_Sw
 15133  26BF  0008               	return
 15134  26C0                     __end_of_setDimmerLights_DimmingClose:	
 15135                           
 15136                           	psect	text94
 15137  1D98                     __ptext94:	
 15138 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 15139 ;; Defined at:
 15140 ;;		line 260 in file "../src/Dimmer_B1.c"
 15141 ;; Parameters:    Size  Location     Type
 15142 ;;  lights          1    wreg     unsigned char 
 15143 ;;  command         1    0[BANK0 ] unsigned char 
 15144 ;; Auto vars:     Size  Location     Type
 15145 ;;  lights          1    2[BANK0 ] unsigned char 
 15146 ;; Return value:  Size  Location     Type
 15147 ;;		None               void
 15148 ;; Registers used:
 15149 ;;		wreg, status,2, status,0
 15150 ;; Tracked objects:
 15151 ;;		On entry : 0/0
 15152 ;;		On exit  : 0/0
 15153 ;;		Unchanged: 0/0
 15154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15155 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15157 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15158 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15159 ;;Total ram usage:        3 bytes
 15160 ;; Hardware stack levels used:    1
 15161 ;; Hardware stack levels required when called:    5
 15162 ;; This function calls:
 15163 ;;		Nothing
 15164 ;; This function is called by:
 15165 ;;		_setDimmerLights_OnOff
 15166 ;;		_setRFSW_AdjControl
 15167 ;;		_DimmerLights_AssignationDimming
 15168 ;; This function uses a non-reentrant model
 15169 ;;
 15170                           
 15171                           
 15172                           ;psect for function _setDimmerIntr_Dimming_RF
 15173  1D98                     _setDimmerIntr_Dimming_RF:	
 15174                           
 15175                           ;incstack = 0
 15176                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 15177                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 15178  1D98  0020               	movlb	0	; select bank0
 15179  1D99  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 15180                           
 15181                           ;Dimmer_B1.c: 262: if (lights == 1) {
 15182  1D9A  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 15183  1D9B  3A01               	xorlw	1
 15184  1D9C  1D03               	skipz
 15185  1D9D  2DB0               	goto	l7127
 15186                           
 15187                           ;Dimmer_B1.c: 263: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 15188  1D9E  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 15189  1D9F  3A01               	xorlw	1
 15190  1DA0  3000               	movlw	0
 15191  1DA1  1903               	skipnz
 15192  1DA2  3001               	movlw	1
 15193  1DA3  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 15194  1DA4  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 15195  1DA5  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 15196  1DA6  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 15197  1DA7  0021               	movlb	1	; select bank1
 15198  1DA8  083C               	movf	_DimmerIntr1^(0+128),w
 15199  1DA9  0020               	movlb	0	; select bank0
 15200  1DAA  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 15201  1DAB  39BF               	andlw	-65
 15202  1DAC  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 15203  1DAD  0021               	movlb	1	; select bank1
 15204  1DAE  00BC               	movwf	_DimmerIntr1^(0+128)
 15205                           
 15206                           ;Dimmer_B1.c: 264: }
 15207  1DAF  0008               	return
 15208  1DB0                     l7127:	
 15209                           
 15210                           ;Dimmer_B1.c: 267: else if (lights == 2) {
 15211  1DB0  0020               	movlb	0	; select bank0
 15212  1DB1  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 15213  1DB2  3A02               	xorlw	2
 15214  1DB3  1D03               	skipz
 15215  1DB4  0008               	return
 15216                           
 15217                           ;Dimmer_B1.c: 268: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 15218  1DB5  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 15219  1DB6  3A01               	xorlw	1
 15220  1DB7  3000               	movlw	0
 15221  1DB8  1903               	skipnz
 15222  1DB9  3001               	movlw	1
 15223  1DBA  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 15224  1DBB  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 15225  1DBC  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 15226  1DBD  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 15227  1DBE  0021               	movlb	1	; select bank1
 15228  1DBF  0848               	movf	_DimmerIntr2^(0+128),w
 15229  1DC0  0020               	movlb	0	; select bank0
 15230  1DC1  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 15231  1DC2  39BF               	andlw	-65
 15232  1DC3  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 15233  1DC4  0021               	movlb	1	; select bank1
 15234  1DC5  00C8               	movwf	_DimmerIntr2^(0+128)
 15235  1DC6  0008               	return
 15236  1DC7                     __end_of_setDimmerIntr_Dimming_RF:	
 15237                           
 15238                           	psect	text95
 15239  199D                     __ptext95:	
 15240 ;; *************** function _setDimmerIntr_DimmingValue *****************
 15241 ;; Defined at:
 15242 ;;		line 107 in file "../src/Dimmer_B1.c"
 15243 ;; Parameters:    Size  Location     Type
 15244 ;;  lights          1    wreg     unsigned char 
 15245 ;;  value           1   66[BANK0 ] unsigned char 
 15246 ;; Auto vars:     Size  Location     Type
 15247 ;;  lights          1   68[BANK0 ] unsigned char 
 15248 ;; Return value:  Size  Location     Type
 15249 ;;		None               void
 15250 ;; Registers used:
 15251 ;;		wreg
 15252 ;; Tracked objects:
 15253 ;;		On entry : 0/0
 15254 ;;		On exit  : 0/0
 15255 ;;		Unchanged: 0/0
 15256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15257 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15259 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15260 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;Total ram usage:        3 bytes
 15262 ;; Hardware stack levels used:    1
 15263 ;; Hardware stack levels required when called:    5
 15264 ;; This function calls:
 15265 ;;		Nothing
 15266 ;; This function is called by:
 15267 ;;		_setDimmerLights_OnOff
 15268 ;; This function uses a non-reentrant model
 15269 ;;
 15270                           
 15271                           
 15272                           ;psect for function _setDimmerIntr_DimmingValue
 15273  199D                     _setDimmerIntr_DimmingValue:	
 15274                           
 15275                           ;incstack = 0
 15276                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 15277                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 15278  199D  0020               	movlb	0	; select bank0
 15279  199E  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 15280                           
 15281                           ;Dimmer_B1.c: 109: if (lights == 1) {
 15282  199F  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 15283  19A0  3A01               	xorlw	1
 15284  19A1  1D03               	skipz
 15285  19A2  29A9               	goto	l7495
 15286                           
 15287                           ;Dimmer_B1.c: 110: DimmerIntr1.DimmingValue = value;
 15288  19A3  0862               	movf	setDimmerIntr_DimmingValue@value,w
 15289  19A4  00E3               	movwf	??_setDimmerIntr_DimmingValue
 15290  19A5  0863               	movf	??_setDimmerIntr_DimmingValue,w
 15291  19A6  0021               	movlb	1	; select bank1
 15292  19A7  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 15293                           
 15294                           ;Dimmer_B1.c: 111: }
 15295  19A8  0008               	return
 15296  19A9                     l7495:	
 15297                           
 15298                           ;Dimmer_B1.c: 114: else if (lights == 2) {
 15299  19A9  0020               	movlb	0	; select bank0
 15300  19AA  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 15301  19AB  3A02               	xorlw	2
 15302  19AC  1D03               	skipz
 15303  19AD  0008               	return
 15304                           
 15305                           ;Dimmer_B1.c: 115: DimmerIntr2.DimmingValue = value;
 15306  19AE  0862               	movf	setDimmerIntr_DimmingValue@value,w
 15307  19AF  00E3               	movwf	??_setDimmerIntr_DimmingValue
 15308  19B0  0863               	movf	??_setDimmerIntr_DimmingValue,w
 15309  19B1  0021               	movlb	1	; select bank1
 15310  19B2  00CD               	movwf	(_DimmerIntr2^(0+128)+5)
 15311  19B3  0008               	return
 15312  19B4                     __end_of_setDimmerIntr_DimmingValue:	
 15313                           
 15314                           	psect	text96
 15315  1D69                     __ptext96:	
 15316 ;; *************** function _setDimmerIntr_ControlStatus *****************
 15317 ;; Defined at:
 15318 ;;		line 89 in file "../src/Dimmer_B1.c"
 15319 ;; Parameters:    Size  Location     Type
 15320 ;;  lights          1    wreg     unsigned char 
 15321 ;;  command         1    0[BANK0 ] unsigned char 
 15322 ;; Auto vars:     Size  Location     Type
 15323 ;;  lights          1    2[BANK0 ] unsigned char 
 15324 ;; Return value:  Size  Location     Type
 15325 ;;		None               void
 15326 ;; Registers used:
 15327 ;;		wreg, status,2, status,0
 15328 ;; Tracked objects:
 15329 ;;		On entry : 0/0
 15330 ;;		On exit  : 0/0
 15331 ;;		Unchanged: 0/0
 15332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15333 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15335 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15336 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15337 ;;Total ram usage:        3 bytes
 15338 ;; Hardware stack levels used:    1
 15339 ;; Hardware stack levels required when called:    5
 15340 ;; This function calls:
 15341 ;;		Nothing
 15342 ;; This function is called by:
 15343 ;;		_setDimmerLights_OnOff
 15344 ;; This function uses a non-reentrant model
 15345 ;;
 15346                           
 15347                           
 15348                           ;psect for function _setDimmerIntr_ControlStatus
 15349  1D69                     _setDimmerIntr_ControlStatus:	
 15350                           
 15351                           ;incstack = 0
 15352                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 15353                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 15354  1D69  0020               	movlb	0	; select bank0
 15355  1D6A  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 15356                           
 15357                           ;Dimmer_B1.c: 91: if (lights == 1) {
 15358  1D6B  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 15359  1D6C  3A01               	xorlw	1
 15360  1D6D  1D03               	skipz
 15361  1D6E  2D81               	goto	l7487
 15362                           
 15363                           ;Dimmer_B1.c: 92: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 15364  1D6F  0820               	movf	setDimmerIntr_ControlStatus@command,w
 15365  1D70  3A01               	xorlw	1
 15366  1D71  3000               	movlw	0
 15367  1D72  1903               	skipnz
 15368  1D73  3001               	movlw	1
 15369  1D74  00A1               	movwf	??_setDimmerIntr_ControlStatus
 15370  1D75  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15371  1D76  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15372  1D77  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15373  1D78  0021               	movlb	1	; select bank1
 15374  1D79  083C               	movf	_DimmerIntr1^(0+128),w
 15375  1D7A  0020               	movlb	0	; select bank0
 15376  1D7B  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 15377  1D7C  39F7               	andlw	-9
 15378  1D7D  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 15379  1D7E  0021               	movlb	1	; select bank1
 15380  1D7F  00BC               	movwf	_DimmerIntr1^(0+128)
 15381                           
 15382                           ;Dimmer_B1.c: 93: }
 15383  1D80  0008               	return
 15384  1D81                     l7487:	
 15385                           
 15386                           ;Dimmer_B1.c: 96: else if (lights == 2) {
 15387  1D81  0020               	movlb	0	; select bank0
 15388  1D82  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 15389  1D83  3A02               	xorlw	2
 15390  1D84  1D03               	skipz
 15391  1D85  0008               	return
 15392                           
 15393                           ;Dimmer_B1.c: 97: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 15394  1D86  0820               	movf	setDimmerIntr_ControlStatus@command,w
 15395  1D87  3A01               	xorlw	1
 15396  1D88  3000               	movlw	0
 15397  1D89  1903               	skipnz
 15398  1D8A  3001               	movlw	1
 15399  1D8B  00A1               	movwf	??_setDimmerIntr_ControlStatus
 15400  1D8C  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15401  1D8D  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15402  1D8E  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15403  1D8F  0021               	movlb	1	; select bank1
 15404  1D90  0848               	movf	_DimmerIntr2^(0+128),w
 15405  1D91  0020               	movlb	0	; select bank0
 15406  1D92  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 15407  1D93  39F7               	andlw	-9
 15408  1D94  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 15409  1D95  0021               	movlb	1	; select bank1
 15410  1D96  00C8               	movwf	_DimmerIntr2^(0+128)
 15411  1D97  0008               	return
 15412  1D98                     __end_of_setDimmerIntr_ControlStatus:	
 15413                           
 15414                           	psect	text97
 15415  09E0                     __ptext97:	
 15416 ;; *************** function _setDelayOff_GO *****************
 15417 ;; Defined at:
 15418 ;;		line 87 in file "../src/DelayOff_B1.c"
 15419 ;; Parameters:    Size  Location     Type
 15420 ;;  sw              1    wreg     unsigned char 
 15421 ;;  command         1   69[BANK0 ] unsigned char 
 15422 ;;  value           1   70[BANK0 ] unsigned char 
 15423 ;; Auto vars:     Size  Location     Type
 15424 ;;  sw              1   76[BANK0 ] unsigned char 
 15425 ;;  k               1   75[BANK0 ] unsigned char 
 15426 ;;  j               1   74[BANK0 ] unsigned char 
 15427 ;;  i               1   73[BANK0 ] unsigned char 
 15428 ;; Return value:  Size  Location     Type
 15429 ;;		None               void
 15430 ;; Registers used:
 15431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15432 ;; Tracked objects:
 15433 ;;		On entry : 0/0
 15434 ;;		On exit  : 0/0
 15435 ;;		Unchanged: 0/0
 15436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15437 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15438 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15439 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15440 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15441 ;;Total ram usage:        8 bytes
 15442 ;; Hardware stack levels used:    1
 15443 ;; Hardware stack levels required when called:    6
 15444 ;; This function calls:
 15445 ;;		_DelayOffPointSelect
 15446 ;;		___bmul
 15447 ;;		_setProductData
 15448 ;; This function is called by:
 15449 ;;		_setDimmerLights_OnOff
 15450 ;;		_setRFSW_Control
 15451 ;; This function uses a non-reentrant model
 15452 ;;
 15453                           
 15454                           
 15455                           ;psect for function _setDelayOff_GO
 15456  09E0                     _setDelayOff_GO:	
 15457                           
 15458                           ;incstack = 0
 15459                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15460                           ;setDelayOff_GO@sw stored from wreg
 15461  09E0  0020               	movlb	0	; select bank0
 15462  09E1  00EC               	movwf	setDelayOff_GO@sw
 15463                           
 15464                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 15465  09E2  086C               	movf	setDelayOff_GO@sw,w
 15466  09E3  3199  2158  3189   	fcall	_DelayOffPointSelect
 15467                           
 15468                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 15469  09E6  0020               	movlb	0	; select bank0
 15470  09E7  0865               	movf	setDelayOff_GO@command,w
 15471  09E8  3A01               	xorlw	1
 15472  09E9  3000               	movlw	0
 15473  09EA  1903               	skipnz
 15474  09EB  3001               	movlw	1
 15475  09EC  00E7               	movwf	??_setDelayOff_GO
 15476  09ED  0021               	movlb	1	; select bank1
 15477  09EE  0858               	movf	_DelayOff^(0+128),w
 15478  09EF  0086               	movwf	6
 15479  09F0  3001               	movlw	1	; select bank2/3
 15480  09F1  0087               	movwf	7
 15481  09F2  0020               	movlb	0	; select bank0
 15482  09F3  0DE7               	rlf	??_setDelayOff_GO,f
 15483  09F4  0801               	movf	1,w
 15484  09F5  0667               	xorwf	??_setDelayOff_GO,w
 15485  09F6  39FD               	andlw	-3
 15486  09F7  0667               	xorwf	??_setDelayOff_GO,w
 15487  09F8  0081               	movwf	1
 15488                           
 15489                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 15490  09F9  0021               	movlb	1	; select bank1
 15491  09FA  0858               	movf	_DelayOff^(0+128),w
 15492  09FB  3E02               	addlw	2
 15493  09FC  0086               	movwf	6
 15494  09FD  3001               	movlw	1	; select bank2/3
 15495  09FE  0087               	movwf	7
 15496  09FF  3000               	movlw	0
 15497  0A00  3FC0               	movwi [0]fsr1
 15498  0A01  3FC1               	movwi [1]fsr1
 15499                           
 15500                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 15501  0A02  0858               	movf	_DelayOff^(0+128),w
 15502  0A03  3E04               	addlw	4
 15503  0A04  0086               	movwf	6
 15504  0A05  3001               	movlw	1	; select bank2/3
 15505  0A06  0087               	movwf	7
 15506  0A07  0181               	clrf	1
 15507                           
 15508                           ;DelayOff_B1.c: 94: if (command == 1) {
 15509  0A08  0020               	movlb	0	; select bank0
 15510  0A09  0865               	movf	setDelayOff_GO@command,w
 15511  0A0A  3A01               	xorlw	1
 15512  0A0B  1D03               	skipz
 15513  0A0C  2A62               	goto	l7099
 15514                           
 15515                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 15516  0A0D  3005               	movlw	5
 15517  0A0E  00E7               	movwf	??_setDelayOff_GO
 15518  0A0F  0867               	movf	??_setDelayOff_GO,w
 15519  0A10  00E9               	movwf	setDelayOff_GO@i
 15520  0A11  01EA               	clrf	setDelayOff_GO@j
 15521  0A12  01EB               	clrf	setDelayOff_GO@k
 15522                           
 15523                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 15524  0A13  300F               	movlw	15
 15525  0A14  0566               	andwf	setDelayOff_GO@value,w
 15526  0A15  00E7               	movwf	??_setDelayOff_GO
 15527  0A16  0867               	movf	??_setDelayOff_GO,w
 15528  0A17  3A05               	xorlw	5
 15529  0A18  1903               	skipnz
 15530  0A19  2A1E               	goto	l7085
 15531  0A1A  0866               	movf	setDelayOff_GO@value,w
 15532  0A1B  390F               	andlw	15
 15533  0A1C  1D03               	btfss	3,2
 15534  0A1D  2A4E               	goto	l7095
 15535  0A1E                     l7085:	
 15536  0A1E  3031               	movlw	49
 15537  0A1F  0266               	subwf	setDelayOff_GO@value,w
 15538  0A20  1803               	skipnc
 15539  0A21  2A4E               	goto	l7095
 15540                           
 15541                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 15542  0A22  0866               	movf	setDelayOff_GO@value,w
 15543  0A23  390F               	andlw	15
 15544  0A24  00E7               	movwf	??_setDelayOff_GO
 15545  0A25  0867               	movf	??_setDelayOff_GO,w
 15546  0A26  00EA               	movwf	setDelayOff_GO@j
 15547                           
 15548                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 15549  0A27  0866               	movf	setDelayOff_GO@value,w
 15550  0A28  00E7               	movwf	??_setDelayOff_GO
 15551  0A29  3004               	movlw	4
 15552  0A2A                     u6435:	
 15553  0A2A  36E7               	lsrf	??_setDelayOff_GO,f
 15554  0A2B  0B89               	decfsz	9,f
 15555  0A2C  2A2A               	goto	u6435
 15556  0A2D  0867               	movf	??_setDelayOff_GO,w
 15557  0A2E  390F               	andlw	15
 15558  0A2F  00E8               	movwf	??_setDelayOff_GO+1
 15559  0A30  0868               	movf	??_setDelayOff_GO+1,w
 15560  0A31  00EB               	movwf	setDelayOff_GO@k
 15561                           
 15562                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 15563  0A32  300A               	movlw	10
 15564  0A33  00E7               	movwf	??_setDelayOff_GO
 15565  0A34  0867               	movf	??_setDelayOff_GO,w
 15566  0A35  00A0               	movwf	___bmul@multiplicand
 15567  0A36  086B               	movf	setDelayOff_GO@k,w
 15568  0A37  31A7  27A6  3189   	fcall	___bmul
 15569  0A3A  0020               	movlb	0	; select bank0
 15570  0A3B  076A               	addwf	setDelayOff_GO@j,w
 15571  0A3C  00E8               	movwf	??_setDelayOff_GO+1
 15572  0A3D  0021               	movlb	1	; select bank1
 15573  0A3E  0A58               	incf	_DelayOff^(0+128),w
 15574  0A3F  0086               	movwf	6
 15575  0A40  3001               	movlw	1	; select bank2/3
 15576  0A41  0087               	movwf	7
 15577  0A42  0020               	movlb	0	; select bank0
 15578  0A43  0868               	movf	??_setDelayOff_GO+1,w
 15579  0A44  0081               	movwf	1
 15580                           
 15581                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 15582  0A45  0866               	movf	setDelayOff_GO@value,w
 15583  0A46  00E7               	movwf	??_setDelayOff_GO
 15584  0A47  0867               	movf	??_setDelayOff_GO,w
 15585  0A48  00E2               	movwf	setProductData@value
 15586  0A49  086C               	movf	setDelayOff_GO@sw,w
 15587  0A4A  3E1A               	addlw	26
 15588  0A4B  31A6  26A8         	fcall	_setProductData
 15589                           
 15590                           ;DelayOff_B1.c: 103: } else {
 15591  0A4D  0008               	return
 15592  0A4E                     l7095:	
 15593                           
 15594                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 15595  0A4E  3005               	movlw	5
 15596  0A4F  0020               	movlb	0	; select bank0
 15597  0A50  00E7               	movwf	??_setDelayOff_GO
 15598  0A51  0021               	movlb	1	; select bank1
 15599  0A52  0A58               	incf	_DelayOff^(0+128),w
 15600  0A53  0086               	movwf	6
 15601  0A54  3001               	movlw	1	; select bank2/3
 15602  0A55  0087               	movwf	7
 15603  0A56  0020               	movlb	0	; select bank0
 15604  0A57  0867               	movf	??_setDelayOff_GO,w
 15605  0A58  0081               	movwf	1
 15606                           
 15607                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 15608  0A59  3005               	movlw	5
 15609  0A5A  00E7               	movwf	??_setDelayOff_GO
 15610  0A5B  0867               	movf	??_setDelayOff_GO,w
 15611  0A5C  00E2               	movwf	setProductData@value
 15612  0A5D  086C               	movf	setDelayOff_GO@sw,w
 15613  0A5E  3E1A               	addlw	26
 15614  0A5F  31A6  26A8         	fcall	_setProductData
 15615                           
 15616                           ;DelayOff_B1.c: 106: }
 15617                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 15618  0A61  0008               	return
 15619  0A62                     l7099:	
 15620  0A62  0020               	movlb	0	; select bank0
 15621  0A63  08E5               	movf	setDelayOff_GO@command,f
 15622  0A64  1D03               	skipz
 15623  0A65  0008               	return
 15624                           
 15625                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 15626  0A66  01E2               	clrf	setProductData@value
 15627  0A67  086C               	movf	setDelayOff_GO@sw,w
 15628  0A68  3E1A               	addlw	26
 15629  0A69  31A6  26A8         	fcall	_setProductData
 15630  0A6B  0008               	return
 15631  0A6C                     __end_of_setDelayOff_GO:	
 15632                           
 15633                           	psect	text98
 15634  27A6                     __ptext98:	
 15635 ;; *************** function ___bmul *****************
 15636 ;; Defined at:
 15637 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15638 ;; Parameters:    Size  Location     Type
 15639 ;;  multiplier      1    wreg     unsigned char 
 15640 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 15641 ;; Auto vars:     Size  Location     Type
 15642 ;;  multiplier      1    3[BANK0 ] unsigned char 
 15643 ;;  product         1    2[BANK0 ] unsigned char 
 15644 ;; Return value:  Size  Location     Type
 15645 ;;                  1    wreg      unsigned char 
 15646 ;; Registers used:
 15647 ;;		wreg, status,2, status,0
 15648 ;; Tracked objects:
 15649 ;;		On entry : 0/0
 15650 ;;		On exit  : 0/0
 15651 ;;		Unchanged: 0/0
 15652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15653 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15656 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15657 ;;Total ram usage:        4 bytes
 15658 ;; Hardware stack levels used:    1
 15659 ;; Hardware stack levels required when called:    5
 15660 ;; This function calls:
 15661 ;;		Nothing
 15662 ;; This function is called by:
 15663 ;;		_setDelayOff_GO
 15664 ;;		_DelayTimejudge
 15665 ;; This function uses a non-reentrant model
 15666 ;;
 15667                           
 15668                           
 15669                           ;psect for function ___bmul
 15670  27A6                     ___bmul:	
 15671                           
 15672                           ;incstack = 0
 15673                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15674                           ;___bmul@multiplier stored from wreg
 15675  27A6  0020               	movlb	0	; select bank0
 15676  27A7  00A3               	movwf	___bmul@multiplier
 15677  27A8  01A2               	clrf	___bmul@product
 15678  27A9                     l6735:	
 15679  27A9  1C23               	btfss	___bmul@multiplier,0
 15680  27AA  2FAF               	goto	l6739
 15681  27AB  0820               	movf	___bmul@multiplicand,w
 15682  27AC  00A1               	movwf	??___bmul
 15683  27AD  0821               	movf	??___bmul,w
 15684  27AE  07A2               	addwf	___bmul@product,f
 15685  27AF                     l6739:	
 15686  27AF  1003               	clrc
 15687  27B0  0DA0               	rlf	___bmul@multiplicand,f
 15688  27B1  1003               	clrc
 15689  27B2  0CA3               	rrf	___bmul@multiplier,f
 15690  27B3  08A3               	movf	___bmul@multiplier,f
 15691  27B4  1D03               	skipz
 15692  27B5  2FA9               	goto	l6735
 15693  27B6  0822               	movf	___bmul@product,w
 15694  27B7  0008               	return
 15695  27B8                     __end_of___bmul:	
 15696                           
 15697                           	psect	text99
 15698  19E4                     __ptext99:	
 15699 ;; *************** function _setCmd_Status *****************
 15700 ;; Defined at:
 15701 ;;		line 651 in file "../src/Main_B1.c"
 15702 ;; Parameters:    Size  Location     Type
 15703 ;;  number          1    wreg     unsigned char 
 15704 ;;  cmd             1    0[BANK0 ] unsigned char 
 15705 ;; Auto vars:     Size  Location     Type
 15706 ;;  number          1    2[BANK0 ] unsigned char 
 15707 ;; Return value:  Size  Location     Type
 15708 ;;		None               void
 15709 ;; Registers used:
 15710 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15711 ;; Tracked objects:
 15712 ;;		On entry : 0/0
 15713 ;;		On exit  : 0/0
 15714 ;;		Unchanged: 0/0
 15715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15716 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15717 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15718 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15719 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15720 ;;Total ram usage:        3 bytes
 15721 ;; Hardware stack levels used:    1
 15722 ;; Hardware stack levels required when called:    5
 15723 ;; This function calls:
 15724 ;;		Nothing
 15725 ;; This function is called by:
 15726 ;;		_setDimmerLights_OnOff
 15727 ;;		_setControl_Lights_Table
 15728 ;; This function uses a non-reentrant model
 15729 ;;
 15730                           
 15731                           
 15732                           ;psect for function _setCmd_Status
 15733  19E4                     _setCmd_Status:	
 15734                           
 15735                           ;incstack = 0
 15736                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15737                           ;setCmd_Status@number stored from wreg
 15738  19E4  0020               	movlb	0	; select bank0
 15739  19E5  00A2               	movwf	setCmd_Status@number
 15740                           
 15741                           ;Main_B1.c: 652: switch (number) {
 15742  19E6  29F6               	goto	l7287
 15743  19E7                     l7283:	
 15744                           ;Main_B1.c: 653: case 1:
 15745                           
 15746                           
 15747                           ;Main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 15748  19E7  0820               	movf	setCmd_Status@cmd,w
 15749  19E8  3A01               	xorlw	1
 15750  19E9  3000               	movlw	0
 15751  19EA  1903               	skipnz
 15752  19EB  3001               	movlw	1
 15753  19EC  00A1               	movwf	??_setCmd_Status
 15754  19ED  0021               	movlb	1	; select bank1
 15755  19EE  0857               	movf	_Cmd^(0+128),w
 15756  19EF  0020               	movlb	0	; select bank0
 15757  19F0  0621               	xorwf	??_setCmd_Status,w
 15758  19F1  39FE               	andlw	-2
 15759  19F2  0621               	xorwf	??_setCmd_Status,w
 15760  19F3  0021               	movlb	1	; select bank1
 15761  19F4  00D7               	movwf	_Cmd^(0+128)
 15762                           
 15763                           ;Main_B1.c: 656: }
 15764                           
 15765                           ;Main_B1.c: 655: break;
 15766  19F5  0008               	return
 15767  19F6                     l7287:	
 15768  19F6  0020               	movlb	0	; select bank0
 15769  19F7  0822               	movf	setCmd_Status@number,w
 15770                           
 15771                           ; Switch size 1, requested type "space"
 15772                           ; Number of cases is 1, Range of values is 1 to 1
 15773                           ; switch strategies available:
 15774                           ; Name         Instructions Cycles
 15775                           ; simple_byte            4     3 (average)
 15776                           ; direct_byte           11     9 (fixed)
 15777                           ; jumptable            263     9 (fixed)
 15778                           ;	Chosen strategy is simple_byte
 15779  19F8  3A01               	xorlw	1	; case 1
 15780  19F9  1903               	skipnz
 15781  19FA  29E7               	goto	l7283
 15782  19FB  29FC               	goto	l1758
 15783  19FC                     l1758:	
 15784  19FC  0008               	return
 15785  19FD                     __end_of_setCmd_Status:	
 15786                           
 15787                           	psect	text100
 15788  188E                     __ptext100:	
 15789 ;; *************** function _getMain_All_LightsStatus *****************
 15790 ;; Defined at:
 15791 ;;		line 373 in file "../src/Main_B1.c"
 15792 ;; Parameters:    Size  Location     Type
 15793 ;;		None
 15794 ;; Auto vars:     Size  Location     Type
 15795 ;;  status          1    0[BANK0 ] unsigned char 
 15796 ;; Return value:  Size  Location     Type
 15797 ;;                  1    wreg      unsigned char 
 15798 ;; Registers used:
 15799 ;;		wreg, status,2, status,0
 15800 ;; Tracked objects:
 15801 ;;		On entry : 0/0
 15802 ;;		On exit  : 0/0
 15803 ;;		Unchanged: 0/0
 15804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15806 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15808 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15809 ;;Total ram usage:        1 bytes
 15810 ;; Hardware stack levels used:    1
 15811 ;; Hardware stack levels required when called:    5
 15812 ;; This function calls:
 15813 ;;		Nothing
 15814 ;; This function is called by:
 15815 ;;		_DimmerLights_Main
 15816 ;;		_setDimmerLights_Main
 15817 ;;		_setDimmerLights_OnOff
 15818 ;;		_Flash_Memory_Main
 15819 ;;		_Exception_Main
 15820 ;;		_Load_Main
 15821 ;;		_setTemp_Main
 15822 ;;		_setControl_Lights_Table
 15823 ;; This function uses a non-reentrant model
 15824 ;;
 15825                           
 15826                           
 15827                           ;psect for function _getMain_All_LightsStatus
 15828  188E                     _getMain_All_LightsStatus:	
 15829                           
 15830                           ;Main_B1.c: 374: char status = 0;
 15831                           
 15832                           ;incstack = 0
 15833                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15834  188E  0020               	movlb	0	; select bank0
 15835  188F  01A0               	clrf	getMain_All_LightsStatus@status
 15836                           
 15837                           ;Main_B1.c: 393: status = DimmerLights1.Status == 1 ? 1 : 0;
 15838  1890  3000               	movlw	0
 15839  1891  0023               	movlb	3	; select bank3
 15840  1892  183F               	btfsc	(_DimmerLights1^(0+384)+1),0
 15841  1893  3001               	movlw	1
 15842  1894  0020               	movlb	0	; select bank0
 15843  1895  00A0               	movwf	getMain_All_LightsStatus@status
 15844                           
 15845                           ;Main_B1.c: 394: if (status == 0) {
 15846  1896  08A0               	movf	getMain_All_LightsStatus@status,f
 15847  1897  1D03               	skipz
 15848  1898  289F               	goto	l7277
 15849                           
 15850                           ;Main_B1.c: 395: status = DimmerLights2.Status == 1 ? 1 : 0;
 15851  1899  3000               	movlw	0
 15852  189A  0023               	movlb	3	; select bank3
 15853  189B  1848               	btfsc	(_DimmerLights2^(0+384)+1),0
 15854  189C  3001               	movlw	1
 15855  189D  0020               	movlb	0	; select bank0
 15856  189E  00A0               	movwf	getMain_All_LightsStatus@status
 15857  189F                     l7277:	
 15858                           
 15859                           ;Main_B1.c: 396: }
 15860                           ;Main_B1.c: 420: return status;
 15861  189F  0820               	movf	getMain_All_LightsStatus@status,w
 15862  18A0  0008               	return
 15863  18A1                     __end_of_getMain_All_LightsStatus:	
 15864                           
 15865                           	psect	text101
 15866  2750                     __ptext101:	
 15867 ;; *************** function _getDelayOff_GO *****************
 15868 ;; Defined at:
 15869 ;;		line 114 in file "../src/DelayOff_B1.c"
 15870 ;; Parameters:    Size  Location     Type
 15871 ;;  sw              1    wreg     unsigned char 
 15872 ;; Auto vars:     Size  Location     Type
 15873 ;;  sw              1    2[BANK0 ] unsigned char 
 15874 ;;  go              1    3[BANK0 ] unsigned char 
 15875 ;; Return value:  Size  Location     Type
 15876 ;;                  1    wreg      unsigned char 
 15877 ;; Registers used:
 15878 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15879 ;; Tracked objects:
 15880 ;;		On entry : 0/0
 15881 ;;		On exit  : 0/0
 15882 ;;		Unchanged: 0/0
 15883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15885 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15887 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15888 ;;Total ram usage:        2 bytes
 15889 ;; Hardware stack levels used:    1
 15890 ;; Hardware stack levels required when called:    6
 15891 ;; This function calls:
 15892 ;;		_DelayOffPointSelect
 15893 ;; This function is called by:
 15894 ;;		_setDimmerLights_OnOff
 15895 ;; This function uses a non-reentrant model
 15896 ;;
 15897                           
 15898                           
 15899                           ;psect for function _getDelayOff_GO
 15900  2750                     _getDelayOff_GO:	
 15901                           
 15902                           ;incstack = 0
 15903                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15904                           ;getDelayOff_GO@sw stored from wreg
 15905  2750  0020               	movlb	0	; select bank0
 15906  2751  00A2               	movwf	getDelayOff_GO@sw
 15907                           
 15908                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15909  2752  0822               	movf	getDelayOff_GO@sw,w
 15910  2753  3199  2158         	fcall	_DelayOffPointSelect
 15911                           
 15912                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15913  2755  0021               	movlb	1	; select bank1
 15914  2756  0858               	movf	_DelayOff^(0+128),w
 15915  2757  0086               	movwf	6
 15916  2758  3001               	movlw	1	; select bank2/3
 15917  2759  0087               	movwf	7
 15918  275A  3000               	movlw	0
 15919  275B  1881               	btfsc	1,1
 15920  275C  3001               	movlw	1
 15921  275D  0020               	movlb	0	; select bank0
 15922  275E  00A3               	movwf	getDelayOff_GO@go
 15923                           
 15924                           ;DelayOff_B1.c: 117: return go;
 15925  275F  0823               	movf	getDelayOff_GO@go,w
 15926  2760  0008               	return
 15927  2761                     __end_of_getDelayOff_GO:	
 15928                           
 15929                           	psect	text102
 15930  2794                     __ptext102:	
 15931 ;; *************** function _getCmd_Status *****************
 15932 ;; Defined at:
 15933 ;;		line 659 in file "../src/Main_B1.c"
 15934 ;; Parameters:    Size  Location     Type
 15935 ;;  number          1    wreg     unsigned char 
 15936 ;; Auto vars:     Size  Location     Type
 15937 ;;  number          1    0[BANK0 ] unsigned char 
 15938 ;;  cmd             1    1[BANK0 ] unsigned char 
 15939 ;; Return value:  Size  Location     Type
 15940 ;;                  1    wreg      unsigned char 
 15941 ;; Registers used:
 15942 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15943 ;; Tracked objects:
 15944 ;;		On entry : 0/0
 15945 ;;		On exit  : 0/0
 15946 ;;		Unchanged: 0/0
 15947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15949 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15951 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15952 ;;Total ram usage:        2 bytes
 15953 ;; Hardware stack levels used:    1
 15954 ;; Hardware stack levels required when called:    5
 15955 ;; This function calls:
 15956 ;;		Nothing
 15957 ;; This function is called by:
 15958 ;;		_setDimmerLights_OnOff
 15959 ;; This function uses a non-reentrant model
 15960 ;;
 15961                           
 15962                           
 15963                           ;psect for function _getCmd_Status
 15964  2794                     _getCmd_Status:	
 15965                           
 15966                           ;incstack = 0
 15967                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15968                           ;getCmd_Status@number stored from wreg
 15969  2794  0020               	movlb	0	; select bank0
 15970  2795  00A0               	movwf	getCmd_Status@number
 15971                           
 15972                           ;Main_B1.c: 660: char cmd = 0;
 15973  2796  01A1               	clrf	getCmd_Status@cmd
 15974                           
 15975                           ;Main_B1.c: 661: switch (number) {
 15976  2797  2F9F               	goto	l7613
 15977  2798                     l7609:	
 15978                           ;Main_B1.c: 662: case 1:
 15979                           
 15980                           
 15981                           ;Main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15982  2798  3000               	movlw	0
 15983  2799  0021               	movlb	1	; select bank1
 15984  279A  1857               	btfsc	_Cmd^(0+128),0
 15985  279B  3001               	movlw	1
 15986  279C  0020               	movlb	0	; select bank0
 15987  279D  00A1               	movwf	getCmd_Status@cmd
 15988                           
 15989                           ;Main_B1.c: 665: }
 15990                           
 15991                           ;Main_B1.c: 664: break;
 15992  279E  2FA4               	goto	l7615
 15993  279F                     l7613:	
 15994  279F  0820               	movf	getCmd_Status@number,w
 15995                           
 15996                           ; Switch size 1, requested type "space"
 15997                           ; Number of cases is 1, Range of values is 1 to 1
 15998                           ; switch strategies available:
 15999                           ; Name         Instructions Cycles
 16000                           ; simple_byte            4     3 (average)
 16001                           ; direct_byte           11     9 (fixed)
 16002                           ; jumptable            263     9 (fixed)
 16003                           ;	Chosen strategy is simple_byte
 16004  27A0  3A01               	xorlw	1	; case 1
 16005  27A1  1903               	skipnz
 16006  27A2  2F98               	goto	l7609
 16007  27A3  2FA4               	goto	l7615
 16008  27A4                     l7615:	
 16009                           
 16010                           ;Main_B1.c: 666: return cmd;
 16011  27A4  0821               	movf	getCmd_Status@cmd,w
 16012  27A5  0008               	return
 16013  27A6                     __end_of_getCmd_Status:	
 16014                           
 16015                           	psect	text103
 16016  118C                     __ptext103:	
 16017 ;; *************** function _setDimmerLights_Dimming *****************
 16018 ;; Defined at:
 16019 ;;		line 1074 in file "../src/Dimmer_B1.c"
 16020 ;; Parameters:    Size  Location     Type
 16021 ;;  lights          1    wreg     unsigned char 
 16022 ;;  status          1   74[BANK0 ] unsigned char 
 16023 ;; Auto vars:     Size  Location     Type
 16024 ;;  lights          1   77[BANK0 ] unsigned char 
 16025 ;;  value           1   76[BANK0 ] unsigned char 
 16026 ;; Return value:  Size  Location     Type
 16027 ;;		None               void
 16028 ;; Registers used:
 16029 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16030 ;; Tracked objects:
 16031 ;;		On entry : 0/0
 16032 ;;		On exit  : 0/0
 16033 ;;		Unchanged: 0/0
 16034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16035 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16036 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;Total ram usage:        4 bytes
 16040 ;; Hardware stack levels used:    1
 16041 ;; Hardware stack levels required when called:    8
 16042 ;; This function calls:
 16043 ;;		_getDimmerIntr_DimmingValue
 16044 ;;		_getDimmerLights_ValueToPercent
 16045 ;;		_setBuz
 16046 ;;		_setDimmerIntr_Dimming_Sw
 16047 ;;		_setDimmerIntr_MaxmumValue
 16048 ;;		_setDimmerLights_Line
 16049 ;;		_setMemory_Modify
 16050 ;;		_setProductData
 16051 ;;		_setRF_DimmerLights
 16052 ;;		_setRF_TransceiveGO
 16053 ;;		_setTxData
 16054 ;; This function is called by:
 16055 ;;		_setDimmerLights_Main
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           
 16060                           ;psect for function _setDimmerLights_Dimming
 16061  118C                     _setDimmerLights_Dimming:	
 16062                           
 16063                           ;incstack = 0
 16064                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16065                           ;setDimmerLights_Dimming@lights stored from wreg
 16066  118C  0020               	movlb	0	; select bank0
 16067  118D  00ED               	movwf	setDimmerLights_Dimming@lights
 16068                           
 16069                           ;Dimmer_B1.c: 1075: setDimmerIntr_Dimming_Sw(lights, status);
 16070  118E  086A               	movf	setDimmerLights_Dimming@status,w
 16071  118F  00EB               	movwf	??_setDimmerLights_Dimming
 16072  1190  086B               	movf	??_setDimmerLights_Dimming,w
 16073  1191  00A0               	movwf	setDimmerIntr_Dimming_Sw@command
 16074  1192  086D               	movf	setDimmerLights_Dimming@lights,w
 16075  1193  319D  253E  3191   	fcall	_setDimmerIntr_Dimming_Sw
 16076                           
 16077                           ;Dimmer_B1.c: 1076: if (status == 1) {
 16078  1196  0020               	movlb	0	; select bank0
 16079  1197  086A               	movf	setDimmerLights_Dimming@status,w
 16080  1198  3A01               	xorlw	1
 16081  1199  1D03               	skipz
 16082  119A  29A8               	goto	l7953
 16083                           
 16084                           ;Dimmer_B1.c: 1078: setRF_TransceiveGO(0);
 16085  119B  3000               	movlw	0
 16086  119C  3198  207B  3191   	fcall	_setRF_TransceiveGO
 16087                           
 16088                           ;Dimmer_B1.c: 1080: setBuz(1, 100);
 16089  119F  3064               	movlw	100
 16090  11A0  0020               	movlb	0	; select bank0
 16091  11A1  00A9               	movwf	setBuz@time
 16092  11A2  3000               	movlw	0
 16093  11A3  00AA               	movwf	setBuz@time+1
 16094  11A4  3001               	movlw	1
 16095  11A5  3191  21E0         	fcall	_setBuz
 16096                           
 16097                           ;Dimmer_B1.c: 1081: } else if (status == 0) {
 16098  11A7  0008               	return
 16099  11A8                     l7953:	
 16100  11A8  0020               	movlb	0	; select bank0
 16101  11A9  08EA               	movf	setDimmerLights_Dimming@status,f
 16102  11AA  1D03               	skipz
 16103  11AB  0008               	return
 16104                           
 16105                           ;Dimmer_B1.c: 1084: Dimmer.Load_Status = 0;
 16106  11AC  0022               	movlb	2	; select bank2
 16107  11AD  112C               	bcf	_Dimmer^(0+256),2
 16108                           
 16109                           ;Dimmer_B1.c: 1085: setDimmerLights_Line(lights);
 16110  11AE  0020               	movlb	0	; select bank0
 16111  11AF  086D               	movf	setDimmerLights_Dimming@lights,w
 16112  11B0  319A  22D4  3191   	fcall	_setDimmerLights_Line
 16113                           
 16114                           ;Dimmer_B1.c: 1087: char value = getDimmerIntr_DimmingValue(lights);
 16115  11B3  0020               	movlb	0	; select bank0
 16116  11B4  086D               	movf	setDimmerLights_Dimming@lights,w
 16117  11B5  3199  2142  3191   	fcall	_getDimmerIntr_DimmingValue
 16118  11B8  0020               	movlb	0	; select bank0
 16119  11B9  00EB               	movwf	??_setDimmerLights_Dimming
 16120  11BA  086B               	movf	??_setDimmerLights_Dimming,w
 16121  11BB  00EC               	movwf	setDimmerLights_Dimming@value
 16122                           
 16123                           ;Dimmer_B1.c: 1088: setDimmerIntr_MaxmumValue(lights, value);
 16124  11BC  086C               	movf	setDimmerLights_Dimming@value,w
 16125  11BD  00EB               	movwf	??_setDimmerLights_Dimming
 16126  11BE  086B               	movf	??_setDimmerLights_Dimming,w
 16127  11BF  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 16128  11C0  086D               	movf	setDimmerLights_Dimming@lights,w
 16129  11C1  3199  2186  3191   	fcall	_setDimmerIntr_MaxmumValue
 16130                           
 16131                           ;Dimmer_B1.c: 1089: setProductData((20 + lights), getDimmerLights_ValueToPercent(value))
      +                          ;
 16132  11C4  0020               	movlb	0	; select bank0
 16133  11C5  086C               	movf	setDimmerLights_Dimming@value,w
 16134  11C6  3193  23B8  3191   	fcall	_getDimmerLights_ValueToPercent
 16135  11C9  0020               	movlb	0	; select bank0
 16136  11CA  00EB               	movwf	??_setDimmerLights_Dimming
 16137  11CB  086B               	movf	??_setDimmerLights_Dimming,w
 16138  11CC  00E2               	movwf	setProductData@value
 16139  11CD  086D               	movf	setDimmerLights_Dimming@lights,w
 16140  11CE  3E14               	addlw	20
 16141  11CF  31A6  26A8  3191   	fcall	_setProductData
 16142                           
 16143                           ;Dimmer_B1.c: 1096: setMemory_Modify(1);
 16144  11D2  3001               	movlw	1
 16145  11D3  3198  2068  3191   	fcall	_setMemory_Modify
 16146                           
 16147                           ;Dimmer_B1.c: 1100: setRF_DimmerLights(lights, 1);
 16148  11D6  0020               	movlb	0	; select bank0
 16149  11D7  01E5               	clrf	setRF_DimmerLights@on
 16150  11D8  0AE5               	incf	setRF_DimmerLights@on,f
 16151  11D9  086D               	movf	setDimmerLights_Dimming@lights,w
 16152  11DA  3194  241D  3191   	fcall	_setRF_DimmerLights
 16153                           
 16154                           ;Dimmer_B1.c: 1101: setTxData();
 16155  11DD  318D  25A7         	fcall	_setTxData
 16156  11DF  0008               	return
 16157  11E0                     __end_of_setDimmerLights_Dimming:	
 16158                           
 16159                           	psect	text104
 16160  0DA7                     __ptext104:	
 16161 ;; *************** function _setTxData *****************
 16162 ;; Defined at:
 16163 ;;		line 183 in file "../src/RF_Control_B1.c"
 16164 ;; Parameters:    Size  Location     Type
 16165 ;;		None
 16166 ;; Auto vars:     Size  Location     Type
 16167 ;;  i               1    0        unsigned char 
 16168 ;; Return value:  Size  Location     Type
 16169 ;;		None               void
 16170 ;; Registers used:
 16171 ;;		wreg, fsr1l, fsr1h, status,2
 16172 ;; Tracked objects:
 16173 ;;		On entry : 0/0
 16174 ;;		On exit  : 0/0
 16175 ;;		Unchanged: 0/0
 16176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;Total ram usage:        1 bytes
 16182 ;; Hardware stack levels used:    1
 16183 ;; Hardware stack levels required when called:    5
 16184 ;; This function calls:
 16185 ;;		Nothing
 16186 ;; This function is called by:
 16187 ;;		_setDimmerLights_OnOff
 16188 ;;		_setDimmerLights_Dimming
 16189 ;;		_my_MainTimer
 16190 ;;		_getRxData
 16191 ;;		_setControl_Lights_Table
 16192 ;;		_setRFSW_Control
 16193 ;;		_setRFSW_AdjControl
 16194 ;; This function uses a non-reentrant model
 16195 ;;
 16196                           
 16197                           
 16198                           ;psect for function _setTxData
 16199  0DA7                     _setTxData:	
 16200                           
 16201                           ;RF_Control_B1.c: 184: char i;
 16202                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 16203                           
 16204                           ;incstack = 0
 16205                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 16206  0DA7  0021               	movlb	1	; select bank1
 16207  0DA8  1C20               	btfss	_RF1^(0+128),0
 16208  0DA9  0008               	return
 16209                           
 16210                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 16211  0DAA  1520               	bsf	_RF1^(0+128),2
 16212                           
 16213                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 16214  0DAB  01A3               	clrf	(_RF1^(0+128)+3)
 16215  0DAC  01A4               	clrf	((_RF1+1)^(0+128)+3)
 16216                           
 16217                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 16218  0DAD  3063               	movlw	99
 16219  0DAE  0020               	movlb	0	; select bank0
 16220  0DAF  00A0               	movwf	??_setTxData
 16221  0DB0  0820               	movf	??_setTxData,w
 16222  0DB1  0023               	movlb	3	; select bank3
 16223  0DB2  00A0               	movwf	_RF_Data^(0+384)
 16224                           
 16225                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 16226  0DB3  3002               	movlw	2
 16227  0DB4  0020               	movlb	0	; select bank0
 16228  0DB5  00A0               	movwf	??_setTxData
 16229  0DB6  0820               	movf	??_setTxData,w
 16230  0DB7  0023               	movlb	3	; select bank3
 16231  0DB8  00A1               	movwf	(_RF_Data^(0+384)+1)
 16232                           
 16233                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 16234  0DB9  0021               	movlb	1	; select bank1
 16235  0DBA  086E               	movf	_product^(0+128),w
 16236  0DBB  0086               	movwf	6
 16237  0DBC  3002               	movlw	2	; select bank4/5
 16238  0DBD  0087               	movwf	7
 16239  0DBE  3002               	movlw	2	; select bank4/5
 16240  0DBF  3F42               	moviw [2]fsr1
 16241  0DC0  0023               	movlb	3	; select bank3
 16242  0DC1  00A2               	movwf	(_RF_Data^(0+384)+2)
 16243                           
 16244                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 16245  0DC2  0021               	movlb	1	; select bank1
 16246  0DC3  086E               	movf	_product^(0+128),w
 16247  0DC4  0086               	movwf	6
 16248  0DC5  3002               	movlw	2	; select bank4/5
 16249  0DC6  0087               	movwf	7
 16250  0DC7  3002               	movlw	2	; select bank4/5
 16251  0DC8  3F43               	moviw [3]fsr1
 16252  0DC9  0023               	movlb	3	; select bank3
 16253  0DCA  00A3               	movwf	(_RF_Data^(0+384)+3)
 16254                           
 16255                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 16256  0DCB  0021               	movlb	1	; select bank1
 16257  0DCC  086E               	movf	_product^(0+128),w
 16258  0DCD  0086               	movwf	6
 16259  0DCE  3002               	movlw	2	; select bank4/5
 16260  0DCF  0087               	movwf	7
 16261  0DD0  3002               	movlw	2	; select bank4/5
 16262  0DD1  3F44               	moviw [4]fsr1
 16263  0DD2  0023               	movlb	3	; select bank3
 16264  0DD3  00A4               	movwf	(_RF_Data^(0+384)+4)
 16265                           
 16266                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 16267  0DD4  0021               	movlb	1	; select bank1
 16268  0DD5  086E               	movf	_product^(0+128),w
 16269  0DD6  0086               	movwf	6
 16270  0DD7  3002               	movlw	2	; select bank4/5
 16271  0DD8  0087               	movwf	7
 16272  0DD9  3002               	movlw	2	; select bank4/5
 16273  0DDA  3F45               	moviw [5]fsr1
 16274  0DDB  0023               	movlb	3	; select bank3
 16275  0DDC  00A5               	movwf	(_RF_Data^(0+384)+5)
 16276                           
 16277                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 16278  0DDD  0021               	movlb	1	; select bank1
 16279  0DDE  086E               	movf	_product^(0+128),w
 16280  0DDF  0086               	movwf	6
 16281  0DE0  3002               	movlw	2	; select bank4/5
 16282  0DE1  0087               	movwf	7
 16283  0DE2  3002               	movlw	2	; select bank4/5
 16284  0DE3  3F46               	moviw [6]fsr1
 16285  0DE4  0023               	movlb	3	; select bank3
 16286  0DE5  00A6               	movwf	(_RF_Data^(0+384)+6)
 16287                           
 16288                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 16289  0DE6  0021               	movlb	1	; select bank1
 16290  0DE7  086E               	movf	_product^(0+128),w
 16291  0DE8  0086               	movwf	6
 16292  0DE9  3002               	movlw	2	; select bank4/5
 16293  0DEA  0087               	movwf	7
 16294  0DEB  3002               	movlw	2	; select bank4/5
 16295  0DEC  3F47               	moviw [7]fsr1
 16296  0DED  0023               	movlb	3	; select bank3
 16297  0DEE  00A7               	movwf	(_RF_Data^(0+384)+7)
 16298                           
 16299                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 16300  0DEF  0021               	movlb	1	; select bank1
 16301  0DF0  086E               	movf	_product^(0+128),w
 16302  0DF1  0086               	movwf	6
 16303  0DF2  3002               	movlw	2	; select bank4/5
 16304  0DF3  0087               	movwf	7
 16305  0DF4  3002               	movlw	2	; select bank4/5
 16306  0DF5  3F48               	moviw [8]fsr1
 16307  0DF6  0023               	movlb	3	; select bank3
 16308  0DF7  00A8               	movwf	(_RF_Data^(0+384)+8)
 16309                           
 16310                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 16311  0DF8  0021               	movlb	1	; select bank1
 16312  0DF9  086E               	movf	_product^(0+128),w
 16313  0DFA  0086               	movwf	6
 16314  0DFB  3002               	movlw	2	; select bank4/5
 16315  0DFC  0087               	movwf	7
 16316  0DFD  3002               	movlw	2	; select bank4/5
 16317  0DFE  3F49               	moviw [9]fsr1
 16318  0DFF  0023               	movlb	3	; select bank3
 16319  0E00  00A9               	movwf	(_RF_Data^(0+384)+9)
 16320                           
 16321                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 16322  0E01  0021               	movlb	1	; select bank1
 16323  0E02  086E               	movf	_product^(0+128),w
 16324  0E03  0086               	movwf	6
 16325  0E04  3002               	movlw	2	; select bank4/5
 16326  0E05  0087               	movwf	7
 16327  0E06  3002               	movlw	2	; select bank4/5
 16328  0E07  3F4A               	moviw [10]fsr1
 16329  0E08  0023               	movlb	3	; select bank3
 16330  0E09  00AA               	movwf	(_RF_Data^(0+384)+10)
 16331                           
 16332                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 16333  0E0A  0021               	movlb	1	; select bank1
 16334  0E0B  086E               	movf	_product^(0+128),w
 16335  0E0C  0086               	movwf	6
 16336  0E0D  3002               	movlw	2	; select bank4/5
 16337  0E0E  0087               	movwf	7
 16338  0E0F  3002               	movlw	2	; select bank4/5
 16339  0E10  3F4B               	moviw [11]fsr1
 16340  0E11  0023               	movlb	3	; select bank3
 16341  0E12  00AB               	movwf	(_RF_Data^(0+384)+11)
 16342                           
 16343                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 16344  0E13  0021               	movlb	1	; select bank1
 16345  0E14  086E               	movf	_product^(0+128),w
 16346  0E15  0086               	movwf	6
 16347  0E16  3002               	movlw	2	; select bank4/5
 16348  0E17  0087               	movwf	7
 16349  0E18  3002               	movlw	2	; select bank4/5
 16350  0E19  3F4C               	moviw [12]fsr1
 16351  0E1A  0023               	movlb	3	; select bank3
 16352  0E1B  00AC               	movwf	(_RF_Data^(0+384)+12)
 16353                           
 16354                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 16355  0E1C  0021               	movlb	1	; select bank1
 16356  0E1D  086E               	movf	_product^(0+128),w
 16357  0E1E  0086               	movwf	6
 16358  0E1F  3002               	movlw	2	; select bank4/5
 16359  0E20  0087               	movwf	7
 16360  0E21  3002               	movlw	2	; select bank4/5
 16361  0E22  3F4D               	moviw [13]fsr1
 16362  0E23  0023               	movlb	3	; select bank3
 16363  0E24  00AD               	movwf	(_RF_Data^(0+384)+13)
 16364                           
 16365                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 16366  0E25  0021               	movlb	1	; select bank1
 16367  0E26  086E               	movf	_product^(0+128),w
 16368  0E27  0086               	movwf	6
 16369  0E28  3002               	movlw	2	; select bank4/5
 16370  0E29  0087               	movwf	7
 16371  0E2A  3002               	movlw	2	; select bank4/5
 16372  0E2B  3F4E               	moviw [14]fsr1
 16373  0E2C  0023               	movlb	3	; select bank3
 16374  0E2D  00AE               	movwf	(_RF_Data^(0+384)+14)
 16375                           
 16376                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 16377  0E2E  0021               	movlb	1	; select bank1
 16378  0E2F  086E               	movf	_product^(0+128),w
 16379  0E30  0086               	movwf	6
 16380  0E31  3002               	movlw	2	; select bank4/5
 16381  0E32  0087               	movwf	7
 16382  0E33  3002               	movlw	2	; select bank4/5
 16383  0E34  3F4F               	moviw [15]fsr1
 16384  0E35  0023               	movlb	3	; select bank3
 16385  0E36  00AF               	movwf	(_RF_Data^(0+384)+15)
 16386                           
 16387                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 16388  0E37  0021               	movlb	1	; select bank1
 16389  0E38  086E               	movf	_product^(0+128),w
 16390  0E39  0086               	movwf	6
 16391  0E3A  3002               	movlw	2	; select bank4/5
 16392  0E3B  0087               	movwf	7
 16393  0E3C  3002               	movlw	2	; select bank4/5
 16394  0E3D  3F50               	moviw [16]fsr1
 16395  0E3E  0023               	movlb	3	; select bank3
 16396  0E3F  00B0               	movwf	(_RF_Data^(0+384)+16)
 16397                           
 16398                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 16399  0E40  0021               	movlb	1	; select bank1
 16400  0E41  086E               	movf	_product^(0+128),w
 16401  0E42  0086               	movwf	6
 16402  0E43  3002               	movlw	2	; select bank4/5
 16403  0E44  0087               	movwf	7
 16404  0E45  3002               	movlw	2	; select bank4/5
 16405  0E46  3F51               	moviw [17]fsr1
 16406  0E47  0023               	movlb	3	; select bank3
 16407  0E48  00B1               	movwf	(_RF_Data^(0+384)+17)
 16408                           
 16409                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 16410  0E49  0021               	movlb	1	; select bank1
 16411  0E4A  086E               	movf	_product^(0+128),w
 16412  0E4B  0086               	movwf	6
 16413  0E4C  3002               	movlw	2	; select bank4/5
 16414  0E4D  0087               	movwf	7
 16415  0E4E  3002               	movlw	2	; select bank4/5
 16416  0E4F  3F52               	moviw [18]fsr1
 16417  0E50  0023               	movlb	3	; select bank3
 16418  0E51  00B2               	movwf	(_RF_Data^(0+384)+18)
 16419                           
 16420                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 16421  0E52  0021               	movlb	1	; select bank1
 16422  0E53  086E               	movf	_product^(0+128),w
 16423  0E54  0086               	movwf	6
 16424  0E55  3002               	movlw	2	; select bank4/5
 16425  0E56  0087               	movwf	7
 16426  0E57  3002               	movlw	2	; select bank4/5
 16427  0E58  3F53               	moviw [19]fsr1
 16428  0E59  0023               	movlb	3	; select bank3
 16429  0E5A  00B3               	movwf	(_RF_Data^(0+384)+19)
 16430                           
 16431                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 16432  0E5B  30D2               	movlw	210
 16433  0E5C  0020               	movlb	0	; select bank0
 16434  0E5D  00A0               	movwf	??_setTxData
 16435  0E5E  0820               	movf	??_setTxData,w
 16436  0E5F  0023               	movlb	3	; select bank3
 16437  0E60  00B4               	movwf	(_RF_Data^(0+384)+20)
 16438  0E61  0008               	return
 16439  0E62                     __end_of_setTxData:	
 16440                           
 16441                           	psect	text105
 16442  187B                     __ptext105:	
 16443 ;; *************** function _setRF_TransceiveGO *****************
 16444 ;; Defined at:
 16445 ;;		line 518 in file "../src/RF_Control_B1.c"
 16446 ;; Parameters:    Size  Location     Type
 16447 ;;  command         1    wreg     unsigned char 
 16448 ;; Auto vars:     Size  Location     Type
 16449 ;;  command         1    1[BANK0 ] unsigned char 
 16450 ;; Return value:  Size  Location     Type
 16451 ;;		None               void
 16452 ;; Registers used:
 16453 ;;		wreg, status,2, status,0
 16454 ;; Tracked objects:
 16455 ;;		On entry : 0/0
 16456 ;;		On exit  : 0/0
 16457 ;;		Unchanged: 0/0
 16458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16461 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16462 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16463 ;;Total ram usage:        2 bytes
 16464 ;; Hardware stack levels used:    1
 16465 ;; Hardware stack levels required when called:    5
 16466 ;; This function calls:
 16467 ;;		Nothing
 16468 ;; This function is called by:
 16469 ;;		_setDimmerLights_Dimming
 16470 ;; This function uses a non-reentrant model
 16471 ;;
 16472                           
 16473                           
 16474                           ;psect for function _setRF_TransceiveGO
 16475  187B                     _setRF_TransceiveGO:	
 16476                           
 16477                           ;incstack = 0
 16478                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 16479                           ;setRF_TransceiveGO@command stored from wreg
 16480  187B  0020               	movlb	0	; select bank0
 16481  187C  00A1               	movwf	setRF_TransceiveGO@command
 16482                           
 16483                           ;RF_Control_B1.c: 519: RF1.TransceiveGO = command == 1 ? 1 : 0;
 16484  187D  0821               	movf	setRF_TransceiveGO@command,w
 16485  187E  3A01               	xorlw	1
 16486  187F  3000               	movlw	0
 16487  1880  1903               	skipnz
 16488  1881  3001               	movlw	1
 16489  1882  00A0               	movwf	??_setRF_TransceiveGO
 16490  1883  0DA0               	rlf	??_setRF_TransceiveGO,f
 16491  1884  0DA0               	rlf	??_setRF_TransceiveGO,f
 16492  1885  0021               	movlb	1	; select bank1
 16493  1886  0820               	movf	_RF1^(0+128),w
 16494  1887  0020               	movlb	0	; select bank0
 16495  1888  0620               	xorwf	??_setRF_TransceiveGO,w
 16496  1889  39FB               	andlw	-5
 16497  188A  0620               	xorwf	??_setRF_TransceiveGO,w
 16498  188B  0021               	movlb	1	; select bank1
 16499  188C  00A0               	movwf	_RF1^(0+128)
 16500  188D  0008               	return
 16501  188E                     __end_of_setRF_TransceiveGO:	
 16502                           
 16503                           	psect	text106
 16504  141D                     __ptext106:	
 16505 ;; *************** function _setRF_DimmerLights *****************
 16506 ;; Defined at:
 16507 ;;		line 503 in file "../src/RF_Control_B1.c"
 16508 ;; Parameters:    Size  Location     Type
 16509 ;;  lights          1    wreg     unsigned char 
 16510 ;;  on              1   69[BANK0 ] unsigned char 
 16511 ;; Auto vars:     Size  Location     Type
 16512 ;;  lights          1   73[BANK0 ] unsigned char 
 16513 ;;  status          1   72[BANK0 ] unsigned char 
 16514 ;; Return value:  Size  Location     Type
 16515 ;;		None               void
 16516 ;; Registers used:
 16517 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16518 ;; Tracked objects:
 16519 ;;		On entry : 0/0
 16520 ;;		On exit  : 0/0
 16521 ;;		Unchanged: 0/0
 16522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16523 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16524 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16525 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16526 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16527 ;;Total ram usage:        5 bytes
 16528 ;; Hardware stack levels used:    1
 16529 ;; Hardware stack levels required when called:    6
 16530 ;; This function calls:
 16531 ;;		_setProductData
 16532 ;; This function is called by:
 16533 ;;		_setDimmerLights_OnOff
 16534 ;;		_setDimmerLights_Dimming
 16535 ;;		_setRFSW_Control
 16536 ;; This function uses a non-reentrant model
 16537 ;;
 16538                           
 16539                           
 16540                           ;psect for function _setRF_DimmerLights
 16541  141D                     _setRF_DimmerLights:	
 16542                           
 16543                           ;incstack = 0
 16544                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16545                           ;setRF_DimmerLights@lights stored from wreg
 16546  141D  0020               	movlb	0	; select bank0
 16547  141E  00E9               	movwf	setRF_DimmerLights@lights
 16548                           
 16549                           ;RF_Control_B1.c: 504: char status = 1;
 16550  141F  01E8               	clrf	setRF_DimmerLights@status
 16551  1420  0AE8               	incf	setRF_DimmerLights@status,f
 16552                           
 16553                           ;RF_Control_B1.c: 505: status <<= (lights - 1);
 16554  1421  0869               	movf	setRF_DimmerLights@lights,w
 16555  1422  3EFF               	addlw	-1
 16556  1423  0A89               	incf	9,f
 16557  1424  2C27               	goto	u6490
 16558  1425                     u6495:	
 16559  1425  1003               	clrc
 16560  1426  0DE8               	rlf	setRF_DimmerLights@status,f
 16561  1427                     u6490:	
 16562  1427  3EFF               	addlw	-1
 16563  1428  1D03               	skipz
 16564  1429  2C25               	goto	u6495
 16565                           
 16566                           ;RF_Control_B1.c: 506: setProductData(11, lights);
 16567  142A  0869               	movf	setRF_DimmerLights@lights,w
 16568  142B  00E6               	movwf	??_setRF_DimmerLights
 16569  142C  0866               	movf	??_setRF_DimmerLights,w
 16570  142D  00E2               	movwf	setProductData@value
 16571  142E  300B               	movlw	11
 16572  142F  31A6  26A8  3194   	fcall	_setProductData
 16573                           
 16574                           ;RF_Control_B1.c: 507: setProductData(17, product->Data[26 + lights]);
 16575  1432  0020               	movlb	0	; select bank0
 16576  1433  0869               	movf	setRF_DimmerLights@lights,w
 16577  1434  3E1A               	addlw	26
 16578  1435  0021               	movlb	1	; select bank1
 16579  1436  076E               	addwf	_product^(0+128),w
 16580  1437  0020               	movlb	0	; select bank0
 16581  1438  00E6               	movwf	??_setRF_DimmerLights
 16582  1439  0866               	movf	??_setRF_DimmerLights,w
 16583  143A  0086               	movwf	6
 16584  143B  3002               	movlw	2	; select bank4/5
 16585  143C  0087               	movwf	7
 16586  143D  0801               	movf	1,w
 16587  143E  00E7               	movwf	??_setRF_DimmerLights+1
 16588  143F  0867               	movf	??_setRF_DimmerLights+1,w
 16589  1440  00E2               	movwf	setProductData@value
 16590  1441  3011               	movlw	17
 16591  1442  31A6  26A8  3194   	fcall	_setProductData
 16592                           
 16593                           ;RF_Control_B1.c: 508: if (on == 1) {
 16594  1445  0020               	movlb	0	; select bank0
 16595  1446  0865               	movf	setRF_DimmerLights@on,w
 16596  1447  3A01               	xorlw	1
 16597  1448  1D03               	skipz
 16598  1449  2C6C               	goto	l7143
 16599                           
 16600                           ;RF_Control_B1.c: 509: setProductData(9, product->Data[20 + lights]);
 16601  144A  0869               	movf	setRF_DimmerLights@lights,w
 16602  144B  3E14               	addlw	20
 16603  144C  0021               	movlb	1	; select bank1
 16604  144D  076E               	addwf	_product^(0+128),w
 16605  144E  0020               	movlb	0	; select bank0
 16606  144F  00E6               	movwf	??_setRF_DimmerLights
 16607  1450  0866               	movf	??_setRF_DimmerLights,w
 16608  1451  0086               	movwf	6
 16609  1452  3002               	movlw	2	; select bank4/5
 16610  1453  0087               	movwf	7
 16611  1454  0801               	movf	1,w
 16612  1455  00E7               	movwf	??_setRF_DimmerLights+1
 16613  1456  0867               	movf	??_setRF_DimmerLights+1,w
 16614  1457  00E2               	movwf	setProductData@value
 16615  1458  3009               	movlw	9
 16616  1459  31A6  26A8  3194   	fcall	_setProductData
 16617                           
 16618                           ;RF_Control_B1.c: 510: setProductData(15, (product->Data[15] | status));
 16619  145C  0021               	movlb	1	; select bank1
 16620  145D  086E               	movf	_product^(0+128),w
 16621  145E  3E0F               	addlw	15
 16622  145F  0086               	movwf	6
 16623  1460  3002               	movlw	2	; select bank4/5
 16624  1461  0087               	movwf	7
 16625  1462  0801               	movf	1,w
 16626  1463  0020               	movlb	0	; select bank0
 16627  1464  0468               	iorwf	setRF_DimmerLights@status,w
 16628  1465  00E6               	movwf	??_setRF_DimmerLights
 16629  1466  0866               	movf	??_setRF_DimmerLights,w
 16630  1467  00E2               	movwf	setProductData@value
 16631  1468  300F               	movlw	15
 16632  1469  31A6  26A8         	fcall	_setProductData
 16633                           
 16634                           ;RF_Control_B1.c: 511: } else {
 16635  146B  0008               	return
 16636  146C                     l7143:	
 16637                           
 16638                           ;RF_Control_B1.c: 512: setProductData(9, 0x00);
 16639  146C  0020               	movlb	0	; select bank0
 16640  146D  01E2               	clrf	setProductData@value
 16641  146E  3009               	movlw	9
 16642  146F  31A6  26A8  3194   	fcall	_setProductData
 16643                           
 16644                           ;RF_Control_B1.c: 513: setProductData(15, (product->Data[15]&(~status)));
 16645  1472  0021               	movlb	1	; select bank1
 16646  1473  086E               	movf	_product^(0+128),w
 16647  1474  3E0F               	addlw	15
 16648  1475  0086               	movwf	6
 16649  1476  3002               	movlw	2	; select bank4/5
 16650  1477  0087               	movwf	7
 16651  1478  0020               	movlb	0	; select bank0
 16652  1479  0968               	comf	setRF_DimmerLights@status,w
 16653  147A  0501               	andwf	1,w
 16654  147B  00E6               	movwf	??_setRF_DimmerLights
 16655  147C  0866               	movf	??_setRF_DimmerLights,w
 16656  147D  00E2               	movwf	setProductData@value
 16657  147E  300F               	movlw	15
 16658  147F  31A6  26A8         	fcall	_setProductData
 16659  1481  0008               	return
 16660  1482                     __end_of_setRF_DimmerLights:	
 16661                           
 16662                           	psect	text107
 16663  1AD4                     __ptext107:	
 16664 ;; *************** function _setDimmerLights_Line *****************
 16665 ;; Defined at:
 16666 ;;		line 1146 in file "../src/Dimmer_B1.c"
 16667 ;; Parameters:    Size  Location     Type
 16668 ;;  lights          1    wreg     unsigned char 
 16669 ;; Auto vars:     Size  Location     Type
 16670 ;;  lights          1    0[BANK0 ] unsigned char 
 16671 ;; Return value:  Size  Location     Type
 16672 ;;		None               void
 16673 ;; Registers used:
 16674 ;;		wreg
 16675 ;; Tracked objects:
 16676 ;;		On entry : 0/0
 16677 ;;		On exit  : 0/0
 16678 ;;		Unchanged: 0/0
 16679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16683 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;Total ram usage:        1 bytes
 16685 ;; Hardware stack levels used:    1
 16686 ;; Hardware stack levels required when called:    5
 16687 ;; This function calls:
 16688 ;;		Nothing
 16689 ;; This function is called by:
 16690 ;;		_setDimmerLights_OnOff
 16691 ;;		_setDimmerLights_Dimming
 16692 ;; This function uses a non-reentrant model
 16693 ;;
 16694                           
 16695                           
 16696                           ;psect for function _setDimmerLights_Line
 16697  1AD4                     _setDimmerLights_Line:	
 16698                           
 16699                           ;incstack = 0
 16700                           ; Regs used in _setDimmerLights_Line: [wreg]
 16701                           ;setDimmerLights_Line@lights stored from wreg
 16702  1AD4  0020               	movlb	0	; select bank0
 16703  1AD5  00A0               	movwf	setDimmerLights_Line@lights
 16704                           
 16705                           ;Dimmer_B1.c: 1147: Dimmer.LoadGO = 1;
 16706  1AD6  0022               	movlb	2	; select bank2
 16707  1AD7  14AC               	bsf	_Dimmer^(0+256),1
 16708                           
 16709                           ;Dimmer_B1.c: 1149: DimmerLights1.Line = 0;
 16710  1AD8  0023               	movlb	3	; select bank3
 16711  1AD9  10BF               	bcf	(_DimmerLights1^(0+384)+1),1
 16712                           
 16713                           ;Dimmer_B1.c: 1150: if (lights == 1 && lights != 0) {
 16714  1ADA  0020               	movlb	0	; select bank0
 16715  1ADB  0820               	movf	setDimmerLights_Line@lights,w
 16716  1ADC  3A01               	xorlw	1
 16717  1ADD  1D03               	skipz
 16718  1ADE  2AE4               	goto	l943
 16719  1ADF  0820               	movf	setDimmerLights_Line@lights,w
 16720  1AE0  1903               	btfsc	3,2
 16721  1AE1  2AE4               	goto	l943
 16722                           
 16723                           ;Dimmer_B1.c: 1151: DimmerLights1.Line = 1;
 16724  1AE2  0023               	movlb	3	; select bank3
 16725  1AE3  14BF               	bsf	(_DimmerLights1^(0+384)+1),1
 16726  1AE4                     l943:	
 16727                           
 16728                           ;Dimmer_B1.c: 1152: }
 16729                           ;Dimmer_B1.c: 1155: DimmerLights2.Line = 0;
 16730  1AE4  0023               	movlb	3	; select bank3
 16731  1AE5  10C8               	bcf	(_DimmerLights2^(0+384)+1),1
 16732                           
 16733                           ;Dimmer_B1.c: 1156: if (lights == 2 && lights != 0) {
 16734  1AE6  0020               	movlb	0	; select bank0
 16735  1AE7  0820               	movf	setDimmerLights_Line@lights,w
 16736  1AE8  3A02               	xorlw	2
 16737  1AE9  1D03               	skipz
 16738  1AEA  0008               	return
 16739  1AEB  0820               	movf	setDimmerLights_Line@lights,w
 16740  1AEC  1903               	btfsc	3,2
 16741  1AED  0008               	return
 16742                           
 16743                           ;Dimmer_B1.c: 1157: DimmerLights2.Line = 1;
 16744  1AEE  0023               	movlb	3	; select bank3
 16745  1AEF  14C8               	bsf	(_DimmerLights2^(0+384)+1),1
 16746  1AF0  0020               	movlb	0	; select bank0
 16747  1AF1  0008               	return
 16748  1AF2                     __end_of_setDimmerLights_Line:	
 16749                           
 16750                           	psect	text108
 16751  1986                     __ptext108:	
 16752 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16753 ;; Defined at:
 16754 ;;		line 145 in file "../src/Dimmer_B1.c"
 16755 ;; Parameters:    Size  Location     Type
 16756 ;;  lights          1    wreg     unsigned char 
 16757 ;;  value           1   66[BANK0 ] unsigned char 
 16758 ;; Auto vars:     Size  Location     Type
 16759 ;;  lights          1   68[BANK0 ] unsigned char 
 16760 ;; Return value:  Size  Location     Type
 16761 ;;		None               void
 16762 ;; Registers used:
 16763 ;;		wreg
 16764 ;; Tracked objects:
 16765 ;;		On entry : 0/0
 16766 ;;		On exit  : 0/0
 16767 ;;		Unchanged: 0/0
 16768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16769 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16772 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16773 ;;Total ram usage:        3 bytes
 16774 ;; Hardware stack levels used:    1
 16775 ;; Hardware stack levels required when called:    5
 16776 ;; This function calls:
 16777 ;;		Nothing
 16778 ;; This function is called by:
 16779 ;;		_setDimmerLights_OnOff
 16780 ;;		_setDimmerLights_Dimming
 16781 ;;		_setRFSW_AdjControl
 16782 ;;		_DimmerLights_AssignationDimming
 16783 ;; This function uses a non-reentrant model
 16784 ;;
 16785                           
 16786                           
 16787                           ;psect for function _setDimmerIntr_MaxmumValue
 16788  1986                     _setDimmerIntr_MaxmumValue:	
 16789                           
 16790                           ;incstack = 0
 16791                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16792                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16793  1986  0020               	movlb	0	; select bank0
 16794  1987  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 16795                           
 16796                           ;Dimmer_B1.c: 147: if (lights == 1) {
 16797  1988  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16798  1989  3A01               	xorlw	1
 16799  198A  1D03               	skipz
 16800  198B  2992               	goto	l7119
 16801                           
 16802                           ;Dimmer_B1.c: 148: DimmerIntr1.MaxmumValue = value;
 16803  198C  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16804  198D  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16805  198E  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16806  198F  0021               	movlb	1	; select bank1
 16807  1990  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16808                           
 16809                           ;Dimmer_B1.c: 149: }
 16810  1991  0008               	return
 16811  1992                     l7119:	
 16812                           
 16813                           ;Dimmer_B1.c: 152: else if (lights == 2) {
 16814  1992  0020               	movlb	0	; select bank0
 16815  1993  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16816  1994  3A02               	xorlw	2
 16817  1995  1D03               	skipz
 16818  1996  0008               	return
 16819                           
 16820                           ;Dimmer_B1.c: 153: DimmerIntr2.MaxmumValue = value;
 16821  1997  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16822  1998  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16823  1999  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16824  199A  0021               	movlb	1	; select bank1
 16825  199B  00CE               	movwf	(_DimmerIntr2^(0+128)+6)
 16826  199C  0008               	return
 16827  199D                     __end_of_setDimmerIntr_MaxmumValue:	
 16828                           
 16829                           	psect	text109
 16830  1D3E                     __ptext109:	
 16831 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16832 ;; Defined at:
 16833 ;;		line 221 in file "../src/Dimmer_B1.c"
 16834 ;; Parameters:    Size  Location     Type
 16835 ;;  lights          1    wreg     unsigned char 
 16836 ;;  command         1    0[BANK0 ] unsigned char 
 16837 ;; Auto vars:     Size  Location     Type
 16838 ;;  lights          1    2[BANK0 ] unsigned char 
 16839 ;; Return value:  Size  Location     Type
 16840 ;;		None               void
 16841 ;; Registers used:
 16842 ;;		wreg, status,2, status,0
 16843 ;; Tracked objects:
 16844 ;;		On entry : 0/0
 16845 ;;		On exit  : 0/0
 16846 ;;		Unchanged: 0/0
 16847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16848 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16850 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16851 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16852 ;;Total ram usage:        3 bytes
 16853 ;; Hardware stack levels used:    1
 16854 ;; Hardware stack levels required when called:    5
 16855 ;; This function calls:
 16856 ;;		Nothing
 16857 ;; This function is called by:
 16858 ;;		_setDimmerLights_Dimming
 16859 ;;		_setDimmerLights_DimmingClose
 16860 ;; This function uses a non-reentrant model
 16861 ;;
 16862                           
 16863                           
 16864                           ;psect for function _setDimmerIntr_Dimming_Sw
 16865  1D3E                     _setDimmerIntr_Dimming_Sw:	
 16866                           
 16867                           ;incstack = 0
 16868                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16869                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16870  1D3E  0020               	movlb	0	; select bank0
 16871  1D3F  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 16872                           
 16873                           ;Dimmer_B1.c: 223: if (lights == 1) {
 16874  1D40  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16875  1D41  3A01               	xorlw	1
 16876  1D42  1D03               	skipz
 16877  1D43  2D54               	goto	l7265
 16878                           
 16879                           ;Dimmer_B1.c: 224: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16880  1D44  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16881  1D45  3A01               	xorlw	1
 16882  1D46  3000               	movlw	0
 16883  1D47  1903               	skipnz
 16884  1D48  3001               	movlw	1
 16885  1D49  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16886  1D4A  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16887  1D4B  0021               	movlb	1	; select bank1
 16888  1D4C  083C               	movf	_DimmerIntr1^(0+128),w
 16889  1D4D  0020               	movlb	0	; select bank0
 16890  1D4E  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16891  1D4F  39EF               	andlw	-17
 16892  1D50  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16893  1D51  0021               	movlb	1	; select bank1
 16894  1D52  00BC               	movwf	_DimmerIntr1^(0+128)
 16895                           
 16896                           ;Dimmer_B1.c: 225: }
 16897  1D53  0008               	return
 16898  1D54                     l7265:	
 16899                           
 16900                           ;Dimmer_B1.c: 228: else if (lights == 2) {
 16901  1D54  0020               	movlb	0	; select bank0
 16902  1D55  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16903  1D56  3A02               	xorlw	2
 16904  1D57  1D03               	skipz
 16905  1D58  0008               	return
 16906                           
 16907                           ;Dimmer_B1.c: 229: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16908  1D59  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16909  1D5A  3A01               	xorlw	1
 16910  1D5B  3000               	movlw	0
 16911  1D5C  1903               	skipnz
 16912  1D5D  3001               	movlw	1
 16913  1D5E  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16914  1D5F  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16915  1D60  0021               	movlb	1	; select bank1
 16916  1D61  0848               	movf	_DimmerIntr2^(0+128),w
 16917  1D62  0020               	movlb	0	; select bank0
 16918  1D63  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16919  1D64  39EF               	andlw	-17
 16920  1D65  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16921  1D66  0021               	movlb	1	; select bank1
 16922  1D67  00C8               	movwf	_DimmerIntr2^(0+128)
 16923  1D68  0008               	return
 16924  1D69                     __end_of_setDimmerIntr_Dimming_Sw:	
 16925                           
 16926                           	psect	text110
 16927  1942                     __ptext110:	
 16928 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16929 ;; Defined at:
 16930 ;;		line 125 in file "../src/Dimmer_B1.c"
 16931 ;; Parameters:    Size  Location     Type
 16932 ;;  lights          1    wreg     unsigned char 
 16933 ;; Auto vars:     Size  Location     Type
 16934 ;;  lights          1    2[BANK0 ] unsigned char 
 16935 ;;  value           1    1[BANK0 ] unsigned char 
 16936 ;; Return value:  Size  Location     Type
 16937 ;;                  1    wreg      unsigned char 
 16938 ;; Registers used:
 16939 ;;		wreg, status,2
 16940 ;; Tracked objects:
 16941 ;;		On entry : 0/0
 16942 ;;		On exit  : 0/0
 16943 ;;		Unchanged: 0/0
 16944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16946 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16947 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16948 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16949 ;;Total ram usage:        3 bytes
 16950 ;; Hardware stack levels used:    1
 16951 ;; Hardware stack levels required when called:    5
 16952 ;; This function calls:
 16953 ;;		Nothing
 16954 ;; This function is called by:
 16955 ;;		_setDimmerLights_Dimming
 16956 ;; This function uses a non-reentrant model
 16957 ;;
 16958                           
 16959                           
 16960                           ;psect for function _getDimmerIntr_DimmingValue
 16961  1942                     _getDimmerIntr_DimmingValue:	
 16962                           
 16963                           ;incstack = 0
 16964                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16965                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16966  1942  0020               	movlb	0	; select bank0
 16967  1943  00A2               	movwf	getDimmerIntr_DimmingValue@lights
 16968                           
 16969                           ;Dimmer_B1.c: 126: char value = 0;
 16970  1944  01A1               	clrf	getDimmerIntr_DimmingValue@value
 16971                           
 16972                           ;Dimmer_B1.c: 128: if (lights == 1) {
 16973  1945  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 16974  1946  3A01               	xorlw	1
 16975  1947  1D03               	skipz
 16976  1948  294C               	goto	l7505
 16977                           
 16978                           ;Dimmer_B1.c: 129: value = DimmerIntr1.DimmingValue;
 16979  1949  0021               	movlb	1	; select bank1
 16980  194A  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16981  194B  2952               	goto	L11
 16982  194C                     l7505:	
 16983                           ;Dimmer_B1.c: 130: }
 16984                           
 16985                           
 16986                           ;Dimmer_B1.c: 133: else if (lights == 2) {
 16987  194C  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 16988  194D  3A02               	xorlw	2
 16989  194E  1D03               	skipz
 16990  194F  2956               	goto	l767
 16991                           
 16992                           ;Dimmer_B1.c: 134: value = DimmerIntr2.DimmingValue;
 16993  1950  0021               	movlb	1	; select bank1
 16994  1951  084D               	movf	(_DimmerIntr2^(0+128)+5),w
 16995  1952                     L11:	
 16996  1952  0020               	movlb	0	; select bank0
 16997  1953  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16998  1954  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16999  1955  00A1               	movwf	getDimmerIntr_DimmingValue@value
 17000  1956                     l767:	
 17001                           
 17002                           ;Dimmer_B1.c: 135: }
 17003                           ;Dimmer_B1.c: 142: return value;
 17004  1956  0821               	movf	getDimmerIntr_DimmingValue@value,w
 17005  1957  0008               	return
 17006  1958                     __end_of_getDimmerIntr_DimmingValue:	
 17007                           
 17008                           	psect	text111
 17009  1FC2                     __ptext111:	
 17010 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17011 ;; Defined at:
 17012 ;;		line 1107 in file "../src/Dimmer_B1.c"
 17013 ;; Parameters:    Size  Location     Type
 17014 ;;  lights          1    wreg     unsigned char 
 17015 ;; Auto vars:     Size  Location     Type
 17016 ;;  lights          1    5[BANK0 ] unsigned char 
 17017 ;;  allow           1    6[BANK0 ] unsigned char 
 17018 ;; Return value:  Size  Location     Type
 17019 ;;                  1    wreg      unsigned char 
 17020 ;; Registers used:
 17021 ;;		wreg, status,2, status,0, pclath, cstack
 17022 ;; Tracked objects:
 17023 ;;		On entry : 0/0
 17024 ;;		On exit  : 0/0
 17025 ;;		Unchanged: 0/0
 17026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17028 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17030 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17031 ;;Total ram usage:        6 bytes
 17032 ;; Hardware stack levels used:    1
 17033 ;; Hardware stack levels required when called:    6
 17034 ;; This function calls:
 17035 ;;		_getLoad_OK
 17036 ;; This function is called by:
 17037 ;;		_setDimmerLights_Main
 17038 ;; This function uses a non-reentrant model
 17039 ;;
 17040                           
 17041                           
 17042                           ;psect for function _getDimmerLights_Allow_Condition
 17043  1FC2                     _getDimmerLights_Allow_Condition:	
 17044                           
 17045                           ;incstack = 0
 17046                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 17047                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 17048  1FC2  0020               	movlb	0	; select bank0
 17049  1FC3  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 17050                           
 17051                           ;Dimmer_B1.c: 1108: char allow = 0;
 17052  1FC4  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 17053                           
 17054                           ;Dimmer_B1.c: 1114: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17055  1FC5  01A2               	clrf	_getDimmerLights_Allow_Condition$2527
 17056  1FC6  0AA2               	incf	_getDimmerLights_Allow_Condition$2527,f
 17057  1FC7  31A6  2636  319F   	fcall	_getLoad_OK
 17058  1FCA  3800               	iorlw	0
 17059  1FCB  1D03               	skipz
 17060  1FCC  2FD2               	goto	l7857
 17061  1FCD  0022               	movlb	2	; select bank2
 17062  1FCE  18AC               	btfsc	_Dimmer^(0+256),1
 17063  1FCF  2FD2               	goto	l7857
 17064  1FD0  0020               	movlb	0	; select bank0
 17065  1FD1  01A2               	clrf	_getDimmerLights_Allow_Condition$2527
 17066  1FD2                     l7857:	
 17067  1FD2  0020               	movlb	0	; select bank0
 17068  1FD3  0822               	movf	_getDimmerLights_Allow_Condition$2527,w
 17069  1FD4  00A1               	movwf	??_getDimmerLights_Allow_Condition
 17070  1FD5  0821               	movf	??_getDimmerLights_Allow_Condition,w
 17071  1FD6  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 17072                           
 17073                           ;Dimmer_B1.c: 1118: if (allow == 0) {
 17074  1FD7  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 17075  1FD8  1D03               	skipz
 17076  1FD9  2FFE               	goto	l7881
 17077                           
 17078                           ;Dimmer_B1.c: 1119: if (lights == 1) {
 17079  1FDA  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 17080  1FDB  3A01               	xorlw	1
 17081  1FDC  1D03               	skipz
 17082  1FDD  2FEB               	goto	l7871
 17083                           
 17084                           ;Dimmer_B1.c: 1120: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 17085  1FDE  01A3               	clrf	_getDimmerLights_Allow_Condition$2528
 17086  1FDF  0AA3               	incf	_getDimmerLights_Allow_Condition$2528,f
 17087  1FE0  0023               	movlb	3	; select bank3
 17088  1FE1  1A47               	btfsc	_DimmerLights2^(0+384),4
 17089  1FE2  2FE8               	goto	l7869
 17090  1FE3  0021               	movlb	1	; select bank1
 17091  1FE4  1A48               	btfsc	_DimmerIntr2^(0+128),4
 17092  1FE5  2FE8               	goto	l7869
 17093  1FE6  0020               	movlb	0	; select bank0
 17094  1FE7  01A3               	clrf	_getDimmerLights_Allow_Condition$2528
 17095  1FE8                     l7869:	
 17096  1FE8  0020               	movlb	0	; select bank0
 17097  1FE9  0823               	movf	_getDimmerLights_Allow_Condition$2528,w
 17098  1FEA  2FFB               	goto	L12
 17099  1FEB                     l7871:	
 17100                           ;Dimmer_B1.c: 1121: } else if (lights == 2) {
 17101                           
 17102  1FEB  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 17103  1FEC  3A02               	xorlw	2
 17104  1FED  1D03               	skipz
 17105  1FEE  2FFE               	goto	l7881
 17106                           
 17107                           ;Dimmer_B1.c: 1122: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 17108  1FEF  01A4               	clrf	_getDimmerLights_Allow_Condition$2529
 17109  1FF0  0AA4               	incf	_getDimmerLights_Allow_Condition$2529,f
 17110  1FF1  0023               	movlb	3	; select bank3
 17111  1FF2  1A3E               	btfsc	_DimmerLights1^(0+384),4
 17112  1FF3  2FF9               	goto	l7879
 17113  1FF4  0021               	movlb	1	; select bank1
 17114  1FF5  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 17115  1FF6  2FF9               	goto	l7879
 17116  1FF7  0020               	movlb	0	; select bank0
 17117  1FF8  01A4               	clrf	_getDimmerLights_Allow_Condition$2529
 17118  1FF9                     l7879:	
 17119  1FF9  0020               	movlb	0	; select bank0
 17120  1FFA  0824               	movf	_getDimmerLights_Allow_Condition$2529,w
 17121  1FFB                     L12:	
 17122  1FFB  00A1               	movwf	??_getDimmerLights_Allow_Condition
 17123  1FFC  0821               	movf	??_getDimmerLights_Allow_Condition,w
 17124  1FFD  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 17125  1FFE                     l7881:	
 17126                           
 17127                           ;Dimmer_B1.c: 1123: }
 17128                           ;Dimmer_B1.c: 1124: }
 17129                           ;Dimmer_B1.c: 1141: return allow;
 17130  1FFE  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 17131  1FFF  0008               	return
 17132  2000                     __end_of_getDimmerLights_Allow_Condition:	
 17133                           
 17134                           	psect	text112
 17135  2636                     __ptext112:	
 17136 ;; *************** function _getLoad_OK *****************
 17137 ;; Defined at:
 17138 ;;		line 274 in file "../src/OverLoad_B1.c"
 17139 ;; Parameters:    Size  Location     Type
 17140 ;;		None
 17141 ;; Auto vars:     Size  Location     Type
 17142 ;;  ok              1    0[BANK0 ] unsigned char 
 17143 ;; Return value:  Size  Location     Type
 17144 ;;                  1    wreg      unsigned char 
 17145 ;; Registers used:
 17146 ;;		wreg, status,2
 17147 ;; Tracked objects:
 17148 ;;		On entry : 0/0
 17149 ;;		On exit  : 0/0
 17150 ;;		Unchanged: 0/0
 17151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17155 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17156 ;;Total ram usage:        1 bytes
 17157 ;; Hardware stack levels used:    1
 17158 ;; Hardware stack levels required when called:    5
 17159 ;; This function calls:
 17160 ;;		Nothing
 17161 ;; This function is called by:
 17162 ;;		_DimmerLights_Main
 17163 ;;		_getDimmerLights_Allow_Condition
 17164 ;; This function uses a non-reentrant model
 17165 ;;
 17166                           
 17167                           
 17168                           ;psect for function _getLoad_OK
 17169  2636                     _getLoad_OK:	
 17170                           
 17171                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 17172                           
 17173                           ;incstack = 0
 17174                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17175  2636  3000               	movlw	0
 17176  2637  0022               	movlb	2	; select bank2
 17177  2638  1BB8               	btfsc	_Load^(0+256),7
 17178  2639  3001               	movlw	1
 17179  263A  0020               	movlb	0	; select bank0
 17180  263B  00A0               	movwf	getLoad_OK@ok
 17181                           
 17182                           ;OverLoad_B1.c: 276: return ok;
 17183  263C  0820               	movf	getLoad_OK@ok,w
 17184  263D  0008               	return
 17185  263E                     __end_of_getLoad_OK:	
 17186                           
 17187                           	psect	text113
 17188  1DC7                     __ptext113:	
 17189 ;; *************** function _getMain_All_Error_Status *****************
 17190 ;; Defined at:
 17191 ;;		line 424 in file "../src/Main_B1.c"
 17192 ;; Parameters:    Size  Location     Type
 17193 ;;  command         1    wreg     unsigned char 
 17194 ;; Auto vars:     Size  Location     Type
 17195 ;;  command         1    5[BANK0 ] unsigned char 
 17196 ;;  status          1    6[BANK0 ] unsigned char 
 17197 ;; Return value:  Size  Location     Type
 17198 ;;                  1    wreg      unsigned char 
 17199 ;; Registers used:
 17200 ;;		wreg, status,2, status,0
 17201 ;; Tracked objects:
 17202 ;;		On entry : 0/0
 17203 ;;		On exit  : 0/0
 17204 ;;		Unchanged: 0/0
 17205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17207 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17208 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17209 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17210 ;;Total ram usage:        7 bytes
 17211 ;; Hardware stack levels used:    1
 17212 ;; Hardware stack levels required when called:    5
 17213 ;; This function calls:
 17214 ;;		Nothing
 17215 ;; This function is called by:
 17216 ;;		_DimmerLights_Main
 17217 ;;		_Exception_Main
 17218 ;;		_Load_Main
 17219 ;;		_setTemp_Main
 17220 ;;		_getRxData
 17221 ;;		_setSw_Main
 17222 ;; This function uses a non-reentrant model
 17223 ;;
 17224                           
 17225                           
 17226                           ;psect for function _getMain_All_Error_Status
 17227  1DC7                     _getMain_All_Error_Status:	
 17228                           
 17229                           ;incstack = 0
 17230                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17231                           ;getMain_All_Error_Status@command stored from wreg
 17232  1DC7  0020               	movlb	0	; select bank0
 17233  1DC8  00A5               	movwf	getMain_All_Error_Status@command
 17234                           
 17235                           ;Main_B1.c: 425: char status = 0;
 17236  1DC9  01A6               	clrf	getMain_All_Error_Status@status
 17237                           
 17238                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 17239  1DCA  08A6               	movf	getMain_All_Error_Status@status,f
 17240  1DCB  1D03               	skipz
 17241  1DCC  2DE1               	goto	l7529
 17242  1DCD  0825               	movf	getMain_All_Error_Status@command,w
 17243  1DCE  3A02               	xorlw	2
 17244  1DCF  1903               	skipnz
 17245  1DD0  2DE1               	goto	l7529
 17246                           
 17247                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 17248  1DD1  0022               	movlb	2	; select bank2
 17249  1DD2  18E0               	btfsc	_Temp^(0+256),1
 17250  1DD3  2DD8               	goto	l7527
 17251  1DD4  0020               	movlb	0	; select bank0
 17252  1DD5  01A1               	clrf	_getMain_All_Error_Status$3917
 17253  1DD6  01A2               	clrf	_getMain_All_Error_Status$3917+1
 17254  1DD7  2DDD               	goto	l1717
 17255  1DD8                     l7527:	
 17256  1DD8  3002               	movlw	2
 17257  1DD9  0020               	movlb	0	; select bank0
 17258  1DDA  00A1               	movwf	_getMain_All_Error_Status$3917
 17259  1DDB  3000               	movlw	0
 17260  1DDC  00A2               	movwf	_getMain_All_Error_Status$3917+1
 17261  1DDD                     l1717:	
 17262  1DDD  0821               	movf	_getMain_All_Error_Status$3917,w
 17263  1DDE  00A0               	movwf	??_getMain_All_Error_Status
 17264  1DDF  0820               	movf	??_getMain_All_Error_Status,w
 17265  1DE0  00A6               	movwf	getMain_All_Error_Status@status
 17266  1DE1                     l7529:	
 17267                           
 17268                           ;Main_B1.c: 438: }
 17269                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 17270  1DE1  08A6               	movf	getMain_All_Error_Status@status,f
 17271  1DE2  1D03               	skipz
 17272  1DE3  2DF8               	goto	l1718
 17273  1DE4  0825               	movf	getMain_All_Error_Status@command,w
 17274  1DE5  3A03               	xorlw	3
 17275  1DE6  1903               	skipnz
 17276  1DE7  2DF8               	goto	l1718
 17277                           
 17278                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 17279  1DE8  0022               	movlb	2	; select bank2
 17280  1DE9  1AB8               	btfsc	_Load^(0+256),5
 17281  1DEA  2DEF               	goto	l7537
 17282  1DEB  0020               	movlb	0	; select bank0
 17283  1DEC  01A3               	clrf	_getMain_All_Error_Status$3918
 17284  1DED  01A4               	clrf	_getMain_All_Error_Status$3918+1
 17285  1DEE  2DF4               	goto	l1722
 17286  1DEF                     l7537:	
 17287  1DEF  3003               	movlw	3
 17288  1DF0  0020               	movlb	0	; select bank0
 17289  1DF1  00A3               	movwf	_getMain_All_Error_Status$3918
 17290  1DF2  3000               	movlw	0
 17291  1DF3  00A4               	movwf	_getMain_All_Error_Status$3918+1
 17292  1DF4                     l1722:	
 17293  1DF4  0823               	movf	_getMain_All_Error_Status$3918,w
 17294  1DF5  00A0               	movwf	??_getMain_All_Error_Status
 17295  1DF6  0820               	movf	??_getMain_All_Error_Status,w
 17296  1DF7  00A6               	movwf	getMain_All_Error_Status@status
 17297  1DF8                     l1718:	
 17298                           
 17299                           ;Main_B1.c: 445: }
 17300                           ;Main_B1.c: 455: return status;
 17301  1DF8  0826               	movf	getMain_All_Error_Status@status,w
 17302  1DF9  0008               	return
 17303  1DFA                     __end_of_getMain_All_Error_Status:	
 17304                           
 17305                           	psect	text114
 17306  1780                     __ptext114:	
 17307 ;; *************** function _DimmerLights_DimmingFunction *****************
 17308 ;; Defined at:
 17309 ;;		line 1852 in file "../src/Dimmer_B1.c"
 17310 ;; Parameters:    Size  Location     Type
 17311 ;;  lights          1    wreg     unsigned char 
 17312 ;; Auto vars:     Size  Location     Type
 17313 ;;  lights          1    1[BANK0 ] unsigned char 
 17314 ;; Return value:  Size  Location     Type
 17315 ;;		None               void
 17316 ;; Registers used:
 17317 ;;		wreg, status,2, status,0
 17318 ;; Tracked objects:
 17319 ;;		On entry : 0/0
 17320 ;;		On exit  : 0/0
 17321 ;;		Unchanged: 0/0
 17322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17324 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17326 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17327 ;;Total ram usage:        2 bytes
 17328 ;; Hardware stack levels used:    1
 17329 ;; Hardware stack levels required when called:    5
 17330 ;; This function calls:
 17331 ;;		Nothing
 17332 ;; This function is called by:
 17333 ;;		_DimmerLights_Main
 17334 ;; This function uses a non-reentrant model
 17335 ;;
 17336                           
 17337                           
 17338                           ;psect for function _DimmerLights_DimmingFunction
 17339  1780                     _DimmerLights_DimmingFunction:	
 17340                           
 17341                           ;incstack = 0
 17342                           ; Regs used in _DimmerLights_DimmingFunction: [wreg+status,2+status,0]
 17343                           ;DimmerLights_DimmingFunction@lights stored from wreg
 17344  1780  0020               	movlb	0	; select bank0
 17345  1781  00A1               	movwf	DimmerLights_DimmingFunction@lights
 17346                           
 17347                           ;Dimmer_B1.c: 1854: if (lights == 1) {
 17348  1782  0821               	movf	DimmerLights_DimmingFunction@lights,w
 17349  1783  3A01               	xorlw	1
 17350  1784  1D03               	skipz
 17351  1785  2FBB               	goto	l8347
 17352                           
 17353                           ;Dimmer_B1.c: 1855: if (DimmerIntr1.Tune == 1) {
 17354  1786  0021               	movlb	1	; select bank1
 17355  1787  1CBC               	btfss	_DimmerIntr1^(0+128),1
 17356  1788  2FBB               	goto	l8347
 17357                           
 17358                           ;Dimmer_B1.c: 1856: DimmerIntr1.Tune = 0;
 17359  1789  10BC               	bcf	_DimmerIntr1^(0+128),1
 17360                           
 17361                           ;Dimmer_B1.c: 1857: DimmerIntr1.TuneTime++;
 17362  178A  3001               	movlw	1
 17363  178B  0020               	movlb	0	; select bank0
 17364  178C  00A0               	movwf	??_DimmerLights_DimmingFunction
 17365  178D  0820               	movf	??_DimmerLights_DimmingFunction,w
 17366  178E  0021               	movlb	1	; select bank1
 17367  178F  07BF               	addwf	(_DimmerIntr1^(0+128)+3),f
 17368                           
 17369                           ;Dimmer_B1.c: 1858: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 17370  1790  0840               	movf	(_DimmerIntr1^(0+128)+4),w
 17371  1791  023F               	subwf	(_DimmerIntr1^(0+128)+3),w
 17372  1792  1C03               	skipc
 17373  1793  2FBB               	goto	l8347
 17374                           
 17375                           ;Dimmer_B1.c: 1859: DimmerIntr1.TuneTime = 0;
 17376  1794  01BF               	clrf	(_DimmerIntr1^(0+128)+3)
 17377                           
 17378                           ;Dimmer_B1.c: 1860: DimmerIntr1.TuneGO = 1;
 17379  1795  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 17380                           
 17381                           ;Dimmer_B1.c: 1861: if (DimmerIntr1.Dimming_Sw == 1) {
 17382  1796  1E3C               	btfss	_DimmerIntr1^(0+128),4
 17383  1797  2FA6               	goto	l1040
 17384                           
 17385                           ;Dimmer_B1.c: 1862: if (DimmerIntr1.Dimming_Status == 0) {
 17386  1798  1ABC               	btfsc	_DimmerIntr1^(0+128),5
 17387  1799  2FA0               	goto	l8335
 17388                           
 17389                           ;Dimmer_B1.c: 1863: if (DimmerIntr1.DimmingValue < ((char)(77*0.55))) {
 17390  179A  302A               	movlw	42
 17391  179B  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 17392  179C  1C03               	btfss	3,0
 17393  179D  2FAC               	goto	l8341
 17394                           
 17395                           ;Dimmer_B1.c: 1866: DimmerIntr1.Dimming_Status = 1;
 17396                           
 17397                           ;Dimmer_B1.c: 1865: } else {
 17398                           
 17399                           ;Dimmer_B1.c: 1864: DimmerIntr1.DimmingValue++;
 17400  179E  16BC               	bsf	_DimmerIntr1^(0+128),5
 17401                           
 17402                           ;Dimmer_B1.c: 1867: }
 17403                           ;Dimmer_B1.c: 1868: } else {
 17404  179F  2FBB               	goto	l8347
 17405  17A0                     l8335:	
 17406                           
 17407                           ;Dimmer_B1.c: 1869: if (DimmerIntr1.DimmingValue > ((char)(5*0.55))) {
 17408  17A0  3003               	movlw	3
 17409  17A1  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 17410  17A2  1803               	btfsc	3,0
 17411  17A3  2FB7               	goto	l8345
 17412                           
 17413                           ;Dimmer_B1.c: 1872: DimmerIntr1.Dimming_Status = 0;
 17414                           
 17415                           ;Dimmer_B1.c: 1871: } else {
 17416                           
 17417                           ;Dimmer_B1.c: 1870: DimmerIntr1.DimmingValue--;
 17418  17A4  12BC               	bcf	_DimmerIntr1^(0+128),5
 17419                           
 17420                           ;Dimmer_B1.c: 1873: }
 17421                           ;Dimmer_B1.c: 1874: }
 17422                           ;Dimmer_B1.c: 1875: } else if (DimmerIntr1.Dimming_RF == 1) {
 17423  17A5  2FBB               	goto	l8347
 17424  17A6                     l1040:	
 17425  17A6  1F3C               	btfss	_DimmerIntr1^(0+128),6
 17426  17A7  2FBB               	goto	l8347
 17427                           
 17428                           ;Dimmer_B1.c: 1876: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 17429  17A8  0842               	movf	(_DimmerIntr1^(0+128)+6),w
 17430  17A9  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 17431  17AA  1803               	skipnc
 17432  17AB  2FB3               	goto	l8343
 17433  17AC                     l8341:	
 17434                           
 17435                           ;Dimmer_B1.c: 1877: DimmerIntr1.DimmingValue++;
 17436  17AC  3001               	movlw	1
 17437  17AD  0020               	movlb	0	; select bank0
 17438  17AE  00A0               	movwf	??_DimmerLights_DimmingFunction
 17439  17AF  0820               	movf	??_DimmerLights_DimmingFunction,w
 17440  17B0  0021               	movlb	1	; select bank1
 17441  17B1  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 17442                           
 17443                           ;Dimmer_B1.c: 1878: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 17444  17B2  2FBB               	goto	l8347
 17445  17B3                     l8343:	
 17446  17B3  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 17447  17B4  0242               	subwf	(_DimmerIntr1^(0+128)+6),w
 17448  17B5  1803               	skipnc
 17449  17B6  2FBA               	goto	l1051
 17450  17B7                     l8345:	
 17451                           
 17452                           ;Dimmer_B1.c: 1879: DimmerIntr1.DimmingValue--;
 17453  17B7  3001               	movlw	1
 17454  17B8  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 17455                           
 17456                           ;Dimmer_B1.c: 1880: } else {
 17457  17B9  2FBB               	goto	l8347
 17458  17BA                     l1051:	
 17459                           
 17460                           ;Dimmer_B1.c: 1881: DimmerIntr1.Dimming_RF = 0;
 17461  17BA  133C               	bcf	_DimmerIntr1^(0+128),6
 17462  17BB                     l8347:	
 17463                           
 17464                           ;Dimmer_B1.c: 1882: }
 17465                           ;Dimmer_B1.c: 1883: }
 17466                           ;Dimmer_B1.c: 1884: }
 17467                           ;Dimmer_B1.c: 1885: }
 17468                           ;Dimmer_B1.c: 1886: }
 17469                           ;Dimmer_B1.c: 1890: if (lights == 2) {
 17470  17BB  0020               	movlb	0	; select bank0
 17471  17BC  0821               	movf	DimmerLights_DimmingFunction@lights,w
 17472  17BD  3A02               	xorlw	2
 17473  17BE  1D03               	skipz
 17474  17BF  0008               	return
 17475                           
 17476                           ;Dimmer_B1.c: 1891: if (DimmerIntr2.Tune == 1) {
 17477  17C0  0021               	movlb	1	; select bank1
 17478  17C1  1CC8               	btfss	_DimmerIntr2^(0+128),1
 17479  17C2  0008               	return
 17480                           
 17481                           ;Dimmer_B1.c: 1892: DimmerIntr2.Tune = 0;
 17482  17C3  10C8               	bcf	_DimmerIntr2^(0+128),1
 17483                           
 17484                           ;Dimmer_B1.c: 1893: DimmerIntr2.TuneTime++;
 17485  17C4  3001               	movlw	1
 17486  17C5  0020               	movlb	0	; select bank0
 17487  17C6  00A0               	movwf	??_DimmerLights_DimmingFunction
 17488  17C7  0820               	movf	??_DimmerLights_DimmingFunction,w
 17489  17C8  0021               	movlb	1	; select bank1
 17490  17C9  07CB               	addwf	(_DimmerIntr2^(0+128)+3),f
 17491                           
 17492                           ;Dimmer_B1.c: 1894: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 17493  17CA  084C               	movf	(_DimmerIntr2^(0+128)+4),w
 17494  17CB  024B               	subwf	(_DimmerIntr2^(0+128)+3),w
 17495  17CC  1C03               	skipc
 17496  17CD  0008               	return
 17497                           
 17498                           ;Dimmer_B1.c: 1895: DimmerIntr2.TuneTime = 0;
 17499  17CE  01CB               	clrf	(_DimmerIntr2^(0+128)+3)
 17500                           
 17501                           ;Dimmer_B1.c: 1896: DimmerIntr2.TuneGO = 1;
 17502  17CF  1749               	bsf	(_DimmerIntr2^(0+128)+1),6
 17503                           
 17504                           ;Dimmer_B1.c: 1897: if (DimmerIntr2.Dimming_Sw == 1) {
 17505  17D0  1E48               	btfss	_DimmerIntr2^(0+128),4
 17506  17D1  2FEA               	goto	l1056
 17507                           
 17508                           ;Dimmer_B1.c: 1898: if (DimmerIntr2.Dimming_Status == 0) {
 17509  17D2  1AC8               	btfsc	_DimmerIntr2^(0+128),5
 17510  17D3  2FE1               	goto	l8369
 17511                           
 17512                           ;Dimmer_B1.c: 1899: if (DimmerIntr2.DimmingValue < ((char)(77*0.55))) {
 17513  17D4  302A               	movlw	42
 17514  17D5  024D               	subwf	(_DimmerIntr2^(0+128)+5),w
 17515  17D6  1803               	skipnc
 17516  17D7  2FDF               	goto	l1058
 17517                           
 17518                           ;Dimmer_B1.c: 1900: DimmerIntr2.DimmingValue++;
 17519  17D8  3001               	movlw	1
 17520  17D9  0020               	movlb	0	; select bank0
 17521  17DA  00A0               	movwf	??_DimmerLights_DimmingFunction
 17522  17DB  0820               	movf	??_DimmerLights_DimmingFunction,w
 17523  17DC  0021               	movlb	1	; select bank1
 17524  17DD  07CD               	addwf	(_DimmerIntr2^(0+128)+5),f
 17525                           
 17526                           ;Dimmer_B1.c: 1901: } else {
 17527  17DE  0008               	return
 17528  17DF                     l1058:	
 17529                           
 17530                           ;Dimmer_B1.c: 1902: DimmerIntr2.Dimming_Status = 1;
 17531  17DF  16C8               	bsf	_DimmerIntr2^(0+128),5
 17532                           
 17533                           ;Dimmer_B1.c: 1903: }
 17534                           ;Dimmer_B1.c: 1904: } else {
 17535  17E0  0008               	return
 17536  17E1                     l8369:	
 17537                           
 17538                           ;Dimmer_B1.c: 1905: if (DimmerIntr2.DimmingValue > ((char)(5*0.55))) {
 17539  17E1  3003               	movlw	3
 17540  17E2  024D               	subwf	(_DimmerIntr2^(0+128)+5),w
 17541  17E3  1C03               	skipc
 17542  17E4  2FE8               	goto	l1061
 17543                           
 17544                           ;Dimmer_B1.c: 1906: DimmerIntr2.DimmingValue--;
 17545  17E5  3001               	movlw	1
 17546  17E6  02CD               	subwf	(_DimmerIntr2^(0+128)+5),f
 17547                           
 17548                           ;Dimmer_B1.c: 1907: } else {
 17549  17E7  0008               	return
 17550  17E8                     l1061:	
 17551                           
 17552                           ;Dimmer_B1.c: 1908: DimmerIntr2.Dimming_Status = 0;
 17553  17E8  12C8               	bcf	_DimmerIntr2^(0+128),5
 17554                           
 17555                           ;Dimmer_B1.c: 1909: }
 17556                           ;Dimmer_B1.c: 1910: }
 17557                           ;Dimmer_B1.c: 1911: } else if (DimmerIntr2.Dimming_RF == 1) {
 17558  17E9  0008               	return
 17559  17EA                     l1056:	
 17560  17EA  1F48               	btfss	_DimmerIntr2^(0+128),6
 17561  17EB  0008               	return
 17562                           
 17563                           ;Dimmer_B1.c: 1912: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 17564  17EC  084E               	movf	(_DimmerIntr2^(0+128)+6),w
 17565  17ED  024D               	subwf	(_DimmerIntr2^(0+128)+5),w
 17566  17EE  1803               	skipnc
 17567  17EF  2FF7               	goto	l8377
 17568                           
 17569                           ;Dimmer_B1.c: 1913: DimmerIntr2.DimmingValue++;
 17570  17F0  3001               	movlw	1
 17571  17F1  0020               	movlb	0	; select bank0
 17572  17F2  00A0               	movwf	??_DimmerLights_DimmingFunction
 17573  17F3  0820               	movf	??_DimmerLights_DimmingFunction,w
 17574  17F4  0021               	movlb	1	; select bank1
 17575  17F5  07CD               	addwf	(_DimmerIntr2^(0+128)+5),f
 17576                           
 17577                           ;Dimmer_B1.c: 1914: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 17578  17F6  0008               	return
 17579  17F7                     l8377:	
 17580  17F7  084D               	movf	(_DimmerIntr2^(0+128)+5),w
 17581  17F8  024E               	subwf	(_DimmerIntr2^(0+128)+6),w
 17582  17F9  1803               	skipnc
 17583  17FA  2FFE               	goto	l1067
 17584                           
 17585                           ;Dimmer_B1.c: 1915: DimmerIntr2.DimmingValue--;
 17586  17FB  3001               	movlw	1
 17587  17FC  02CD               	subwf	(_DimmerIntr2^(0+128)+5),f
 17588                           
 17589                           ;Dimmer_B1.c: 1916: } else {
 17590  17FD  0008               	return
 17591  17FE                     l1067:	
 17592                           
 17593                           ;Dimmer_B1.c: 1917: DimmerIntr2.Dimming_RF = 0;
 17594  17FE  1348               	bcf	_DimmerIntr2^(0+128),6
 17595  17FF  0008               	return
 17596  1800                     __end_of_DimmerLights_DimmingFunction:	
 17597                           
 17598                           	psect	text115
 17599  2670                     __ptext115:	
 17600 ;; *************** function _DimmerLights_Initialization *****************
 17601 ;; Defined at:
 17602 ;;		line 673 in file "../src/Dimmer_B1.c"
 17603 ;; Parameters:    Size  Location     Type
 17604 ;;		None
 17605 ;; Auto vars:     Size  Location     Type
 17606 ;;		None
 17607 ;; Return value:  Size  Location     Type
 17608 ;;		None               void
 17609 ;; Registers used:
 17610 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17611 ;; Tracked objects:
 17612 ;;		On entry : 0/0
 17613 ;;		On exit  : 0/0
 17614 ;;		Unchanged: 0/0
 17615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17620 ;;Total ram usage:        0 bytes
 17621 ;; Hardware stack levels used:    1
 17622 ;; Hardware stack levels required when called:    9
 17623 ;; This function calls:
 17624 ;;		_DimmerIntr_Initialization
 17625 ;;		_setDimmerLights_Initialization
 17626 ;; This function is called by:
 17627 ;;		_main
 17628 ;; This function uses a non-reentrant model
 17629 ;;
 17630                           
 17631                           
 17632                           ;psect for function _DimmerLights_Initialization
 17633  2670                     _DimmerLights_Initialization:	
 17634                           
 17635                           ;Dimmer_B1.c: 675: setDimmerLights_Initialization(1);
 17636                           
 17637                           ;incstack = 0
 17638                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 17639  2670  3001               	movlw	1
 17640  2671  3190  2000  31A6   	fcall	_setDimmerLights_Initialization
 17641                           
 17642                           ;Dimmer_B1.c: 679: setDimmerLights_Initialization(2);
 17643  2674  3002               	movlw	2
 17644  2675  3190  2000  31A6   	fcall	_setDimmerLights_Initialization
 17645                           
 17646                           ;Dimmer_B1.c: 685: DimmerIntr_Initialization();
 17647  2678  318C  24F3         	fcall	_DimmerIntr_Initialization
 17648  267A  0008               	return
 17649  267B                     __end_of_DimmerLights_Initialization:	
 17650                           
 17651                           	psect	text116
 17652  1000                     __ptext116:	
 17653 ;; *************** function _setDimmerLights_Initialization *****************
 17654 ;; Defined at:
 17655 ;;		line 689 in file "../src/Dimmer_B1.c"
 17656 ;; Parameters:    Size  Location     Type
 17657 ;;  lights          1    wreg     unsigned char 
 17658 ;; Auto vars:     Size  Location     Type
 17659 ;;  lights          1    0[COMMON] unsigned char 
 17660 ;; Return value:  Size  Location     Type
 17661 ;;		None               void
 17662 ;; Registers used:
 17663 ;;		wreg
 17664 ;; Tracked objects:
 17665 ;;		On entry : 0/0
 17666 ;;		On exit  : 0/0
 17667 ;;		Unchanged: 0/0
 17668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17673 ;;Total ram usage:        0 bytes
 17674 ;; Hardware stack levels used:    1
 17675 ;; Hardware stack levels required when called:    5
 17676 ;; This function calls:
 17677 ;;		Nothing
 17678 ;; This function is called by:
 17679 ;;		_DimmerLights_Initialization
 17680 ;; This function uses a non-reentrant model
 17681 ;;
 17682                           
 17683                           
 17684                           ;psect for function _setDimmerLights_Initialization
 17685  1000                     _setDimmerLights_Initialization:	
 17686                           
 17687                           ;incstack = 0
 17688                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17689  1000  0008               	return
 17690  1001                     __end_of_setDimmerLights_Initialization:	
 17691                           
 17692                           	psect	text117
 17693  0CF3                     __ptext117:	
 17694 ;; *************** function _DimmerIntr_Initialization *****************
 17695 ;; Defined at:
 17696 ;;		line 7 in file "../src/Dimmer_B1.c"
 17697 ;; Parameters:    Size  Location     Type
 17698 ;;		None
 17699 ;; Auto vars:     Size  Location     Type
 17700 ;;		None
 17701 ;; Return value:  Size  Location     Type
 17702 ;;		None               void
 17703 ;; Registers used:
 17704 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17705 ;; Tracked objects:
 17706 ;;		On entry : 0/0
 17707 ;;		On exit  : 0/0
 17708 ;;		Unchanged: 0/0
 17709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17712 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17713 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17714 ;;Total ram usage:        2 bytes
 17715 ;; Hardware stack levels used:    1
 17716 ;; Hardware stack levels required when called:    8
 17717 ;; This function calls:
 17718 ;;		_Division
 17719 ;;		_getDimmerLights_PercentToValue
 17720 ;;		_getDimmerLights_ValueToPercent
 17721 ;;		_setMemory_Modify
 17722 ;; This function is called by:
 17723 ;;		_DimmerLights_Initialization
 17724 ;; This function uses a non-reentrant model
 17725 ;;
 17726                           
 17727                           
 17728                           ;psect for function _DimmerIntr_Initialization
 17729  0CF3                     _DimmerIntr_Initialization:	
 17730                           
 17731                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 3;
 17732                           
 17733                           ;incstack = 0
 17734                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 17735  0CF3  3003               	movlw	3
 17736  0CF4  0020               	movlb	0	; select bank0
 17737  0CF5  00E2               	movwf	??_DimmerIntr_Initialization
 17738  0CF6  0862               	movf	??_DimmerIntr_Initialization,w
 17739  0CF7  0021               	movlb	1	; select bank1
 17740  0CF8  00C0               	movwf	(_DimmerIntr1^(0+128)+4)
 17741                           
 17742                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(77*0.55));
 17743  0CF9  302A               	movlw	42
 17744  0CFA  0020               	movlb	0	; select bank0
 17745  0CFB  00E2               	movwf	??_DimmerIntr_Initialization
 17746  0CFC  0862               	movf	??_DimmerIntr_Initialization,w
 17747  0CFD  0021               	movlb	1	; select bank1
 17748  0CFE  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 17749                           
 17750                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(5*0.55));
 17751  0CFF  3002               	movlw	2
 17752  0D00  0020               	movlb	0	; select bank0
 17753  0D01  00E2               	movwf	??_DimmerIntr_Initialization
 17754  0D02  0862               	movf	??_DimmerIntr_Initialization,w
 17755  0D03  0021               	movlb	1	; select bank1
 17756  0D04  00C3               	movwf	(_DimmerIntr1^(0+128)+7)
 17757                           
 17758                           ;Dimmer_B1.c: 13: DimmerIntr1.Tune = 0;
 17759  0D05  10BC               	bcf	_DimmerIntr1^(0+128),1
 17760                           
 17761                           ;Dimmer_B1.c: 17: if (myMain.InitDimmer == 1) {
 17762  0D06  1E39               	btfss	(_myMain^(0+128)+10),4
 17763  0D07  2D17               	goto	l748
 17764                           
 17765                           ;Dimmer_B1.c: 18: product->Data[21] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17766  0D08  302A               	movlw	42
 17767  0D09  3193  23B8  318C   	fcall	_getDimmerLights_ValueToPercent
 17768  0D0C  0020               	movlb	0	; select bank0
 17769  0D0D  00E2               	movwf	??_DimmerIntr_Initialization
 17770  0D0E  0021               	movlb	1	; select bank1
 17771  0D0F  086E               	movf	_product^(0+128),w
 17772  0D10  3E15               	addlw	21
 17773  0D11  0086               	movwf	6
 17774  0D12  3002               	movlw	2	; select bank4/5
 17775  0D13  0087               	movwf	7
 17776  0D14  0020               	movlb	0	; select bank0
 17777  0D15  0862               	movf	??_DimmerIntr_Initialization,w
 17778  0D16  0081               	movwf	1
 17779  0D17                     l748:	
 17780                           
 17781                           ;Dimmer_B1.c: 19: }
 17782                           ;Dimmer_B1.c: 21: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 17783  0D17  0021               	movlb	1	; select bank1
 17784  0D18  086E               	movf	_product^(0+128),w
 17785  0D19  3E15               	addlw	21
 17786  0D1A  0086               	movwf	6
 17787  0D1B  3002               	movlw	2	; select bank4/5
 17788  0D1C  0087               	movwf	7
 17789  0D1D  0801               	movf	1,w
 17790  0D1E  3193  2353  318C   	fcall	_getDimmerLights_PercentToValue
 17791  0D21  0020               	movlb	0	; select bank0
 17792  0D22  00E2               	movwf	??_DimmerIntr_Initialization
 17793  0D23  0862               	movf	??_DimmerIntr_Initialization,w
 17794  0D24  0021               	movlb	1	; select bank1
 17795  0D25  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 17796                           
 17797                           ;Dimmer_B1.c: 28: DimmerIntr1.TuneValue2 = Division(((char)(77*0.55)), 2);
 17798  0D26  3002               	movlw	2
 17799  0D27  0020               	movlb	0	; select bank0
 17800  0D28  00E2               	movwf	??_DimmerIntr_Initialization
 17801  0D29  0862               	movf	??_DimmerIntr_Initialization,w
 17802  0D2A  00A5               	movwf	Division@num
 17803  0D2B  302A               	movlw	42
 17804  0D2C  31A7  2721  318C   	fcall	_Division
 17805  0D2F  0020               	movlb	0	; select bank0
 17806  0D30  00E3               	movwf	??_DimmerIntr_Initialization+1
 17807  0D31  0863               	movf	??_DimmerIntr_Initialization+1,w
 17808  0D32  0021               	movlb	1	; select bank1
 17809  0D33  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 17810                           
 17811                           ;Dimmer_B1.c: 29: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17812  0D34  0844               	movf	(_DimmerIntr1^(0+128)+8),w
 17813  0D35  3E0D               	addlw	13
 17814  0D36  0020               	movlb	0	; select bank0
 17815  0D37  00E2               	movwf	??_DimmerIntr_Initialization
 17816  0D38  0862               	movf	??_DimmerIntr_Initialization,w
 17817  0D39  0021               	movlb	1	; select bank1
 17818  0D3A  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 17819                           
 17820                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 17821  0D3B  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 17822  0D3C  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 17823  0D3D  0020               	movlb	0	; select bank0
 17824  0D3E  00E2               	movwf	??_DimmerIntr_Initialization
 17825  0D3F  0862               	movf	??_DimmerIntr_Initialization,w
 17826  0D40  0021               	movlb	1	; select bank1
 17827  0D41  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 17828                           
 17829                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 17830  0D42  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 17831  0D43  3E01               	addlw	1
 17832  0D44  0020               	movlb	0	; select bank0
 17833  0D45  00E2               	movwf	??_DimmerIntr_Initialization
 17834  0D46  0862               	movf	??_DimmerIntr_Initialization,w
 17835  0D47  0021               	movlb	1	; select bank1
 17836  0D48  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 17837                           
 17838                           ;Dimmer_B1.c: 37: DimmerIntr2.TuneTimeValue = 3;
 17839  0D49  3003               	movlw	3
 17840  0D4A  0020               	movlb	0	; select bank0
 17841  0D4B  00E2               	movwf	??_DimmerIntr_Initialization
 17842  0D4C  0862               	movf	??_DimmerIntr_Initialization,w
 17843  0D4D  0021               	movlb	1	; select bank1
 17844  0D4E  00CC               	movwf	(_DimmerIntr2^(0+128)+4)
 17845                           
 17846                           ;Dimmer_B1.c: 38: DimmerIntr2.MaxmumValue = ((char)(77*0.55));
 17847  0D4F  302A               	movlw	42
 17848  0D50  0020               	movlb	0	; select bank0
 17849  0D51  00E2               	movwf	??_DimmerIntr_Initialization
 17850  0D52  0862               	movf	??_DimmerIntr_Initialization,w
 17851  0D53  0021               	movlb	1	; select bank1
 17852  0D54  00CE               	movwf	(_DimmerIntr2^(0+128)+6)
 17853                           
 17854                           ;Dimmer_B1.c: 39: DimmerIntr2.MinimumValue = ((char)(5*0.55));
 17855  0D55  3002               	movlw	2
 17856  0D56  0020               	movlb	0	; select bank0
 17857  0D57  00E2               	movwf	??_DimmerIntr_Initialization
 17858  0D58  0862               	movf	??_DimmerIntr_Initialization,w
 17859  0D59  0021               	movlb	1	; select bank1
 17860  0D5A  00CF               	movwf	(_DimmerIntr2^(0+128)+7)
 17861                           
 17862                           ;Dimmer_B1.c: 40: DimmerIntr2.Tune = 0;
 17863  0D5B  10C8               	bcf	_DimmerIntr2^(0+128),1
 17864                           
 17865                           ;Dimmer_B1.c: 44: if (myMain.InitDimmer == 1) {
 17866  0D5C  1E39               	btfss	(_myMain^(0+128)+10),4
 17867  0D5D  2D6D               	goto	l749
 17868                           
 17869                           ;Dimmer_B1.c: 45: product->Data[22] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17870  0D5E  302A               	movlw	42
 17871  0D5F  3193  23B8  318C   	fcall	_getDimmerLights_ValueToPercent
 17872  0D62  0020               	movlb	0	; select bank0
 17873  0D63  00E2               	movwf	??_DimmerIntr_Initialization
 17874  0D64  0021               	movlb	1	; select bank1
 17875  0D65  086E               	movf	_product^(0+128),w
 17876  0D66  3E16               	addlw	22
 17877  0D67  0086               	movwf	6
 17878  0D68  3002               	movlw	2	; select bank4/5
 17879  0D69  0087               	movwf	7
 17880  0D6A  0020               	movlb	0	; select bank0
 17881  0D6B  0862               	movf	??_DimmerIntr_Initialization,w
 17882  0D6C  0081               	movwf	1
 17883  0D6D                     l749:	
 17884                           
 17885                           ;Dimmer_B1.c: 46: }
 17886                           ;Dimmer_B1.c: 48: DimmerIntr2.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[22]);
 17887  0D6D  0021               	movlb	1	; select bank1
 17888  0D6E  086E               	movf	_product^(0+128),w
 17889  0D6F  3E16               	addlw	22
 17890  0D70  0086               	movwf	6
 17891  0D71  3002               	movlw	2	; select bank4/5
 17892  0D72  0087               	movwf	7
 17893  0D73  0801               	movf	1,w
 17894  0D74  3193  2353  318C   	fcall	_getDimmerLights_PercentToValue
 17895  0D77  0020               	movlb	0	; select bank0
 17896  0D78  00E2               	movwf	??_DimmerIntr_Initialization
 17897  0D79  0862               	movf	??_DimmerIntr_Initialization,w
 17898  0D7A  0021               	movlb	1	; select bank1
 17899  0D7B  00CD               	movwf	(_DimmerIntr2^(0+128)+5)
 17900                           
 17901                           ;Dimmer_B1.c: 55: DimmerIntr2.TuneValue2 = Division(((char)(77*0.55)), 2);
 17902  0D7C  3002               	movlw	2
 17903  0D7D  0020               	movlb	0	; select bank0
 17904  0D7E  00E2               	movwf	??_DimmerIntr_Initialization
 17905  0D7F  0862               	movf	??_DimmerIntr_Initialization,w
 17906  0D80  00A5               	movwf	Division@num
 17907  0D81  302A               	movlw	42
 17908  0D82  31A7  2721  318C   	fcall	_Division
 17909  0D85  0020               	movlb	0	; select bank0
 17910  0D86  00E3               	movwf	??_DimmerIntr_Initialization+1
 17911  0D87  0863               	movf	??_DimmerIntr_Initialization+1,w
 17912  0D88  0021               	movlb	1	; select bank1
 17913  0D89  00D0               	movwf	(_DimmerIntr2^(0+128)+8)
 17914                           
 17915                           ;Dimmer_B1.c: 56: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17916  0D8A  0850               	movf	(_DimmerIntr2^(0+128)+8),w
 17917  0D8B  3E0D               	addlw	13
 17918  0D8C  0020               	movlb	0	; select bank0
 17919  0D8D  00E2               	movwf	??_DimmerIntr_Initialization
 17920  0D8E  0862               	movf	??_DimmerIntr_Initialization,w
 17921  0D8F  0021               	movlb	1	; select bank1
 17922  0D90  00D1               	movwf	(_DimmerIntr2^(0+128)+9)
 17923                           
 17924                           ;Dimmer_B1.c: 57: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneValu
      +                          e2;
 17925  0D91  0851               	movf	(_DimmerIntr2^(0+128)+9),w
 17926  0D92  0750               	addwf	(_DimmerIntr2^(0+128)+8),w
 17927  0D93  0020               	movlb	0	; select bank0
 17928  0D94  00E2               	movwf	??_DimmerIntr_Initialization
 17929  0D95  0862               	movf	??_DimmerIntr_Initialization,w
 17930  0D96  0021               	movlb	1	; select bank1
 17931  0D97  00D2               	movwf	(_DimmerIntr2^(0+128)+10)
 17932                           
 17933                           ;Dimmer_B1.c: 58: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 1;
 17934  0D98  0852               	movf	(_DimmerIntr2^(0+128)+10),w
 17935  0D99  3E01               	addlw	1
 17936  0D9A  0020               	movlb	0	; select bank0
 17937  0D9B  00E2               	movwf	??_DimmerIntr_Initialization
 17938  0D9C  0862               	movf	??_DimmerIntr_Initialization,w
 17939  0D9D  0021               	movlb	1	; select bank1
 17940  0D9E  00D3               	movwf	(_DimmerIntr2^(0+128)+11)
 17941                           
 17942                           ;Dimmer_B1.c: 81: if (myMain.InitDimmer == 1) {
 17943  0D9F  1E39               	btfss	(_myMain^(0+128)+10),4
 17944  0DA0  0008               	return
 17945                           
 17946                           ;Dimmer_B1.c: 82: myMain.InitDimmer = 0;
 17947  0DA1  1239               	bcf	(_myMain^(0+128)+10),4
 17948                           
 17949                           ;Dimmer_B1.c: 83: myMain.SaveDimmer = 1;
 17950  0DA2  16B9               	bsf	(_myMain^(0+128)+10),5
 17951                           
 17952                           ;Dimmer_B1.c: 84: setMemory_Modify(1);
 17953  0DA3  3001               	movlw	1
 17954  0DA4  3198  2068         	fcall	_setMemory_Modify
 17955  0DA6  0008               	return
 17956  0DA7                     __end_of_DimmerIntr_Initialization:	
 17957                           
 17958                           	psect	text118
 17959  1868                     __ptext118:	
 17960 ;; *************** function _setMemory_Modify *****************
 17961 ;; Defined at:
 17962 ;;		line 1083 in file "../src/MCU_B1.c"
 17963 ;; Parameters:    Size  Location     Type
 17964 ;;  command         1    wreg     unsigned char 
 17965 ;; Auto vars:     Size  Location     Type
 17966 ;;  command         1    1[BANK0 ] unsigned char 
 17967 ;; Return value:  Size  Location     Type
 17968 ;;		None               void
 17969 ;; Registers used:
 17970 ;;		wreg, status,2, status,0
 17971 ;; Tracked objects:
 17972 ;;		On entry : 0/0
 17973 ;;		On exit  : 0/0
 17974 ;;		Unchanged: 0/0
 17975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17977 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17978 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17979 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17980 ;;Total ram usage:        2 bytes
 17981 ;; Hardware stack levels used:    1
 17982 ;; Hardware stack levels required when called:    5
 17983 ;; This function calls:
 17984 ;;		Nothing
 17985 ;; This function is called by:
 17986 ;;		_DimmerIntr_Initialization
 17987 ;;		_setDimmerLights_Dimming
 17988 ;;		_setLog_Code
 17989 ;;		_setRFSW_AdjControl
 17990 ;;		_DimmerLights_AssignationDimming
 17991 ;; This function uses a non-reentrant model
 17992 ;;
 17993                           
 17994                           
 17995                           ;psect for function _setMemory_Modify
 17996  1868                     _setMemory_Modify:	
 17997                           
 17998                           ;incstack = 0
 17999                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 18000                           ;setMemory_Modify@command stored from wreg
 18001  1868  0020               	movlb	0	; select bank0
 18002  1869  00A1               	movwf	setMemory_Modify@command
 18003                           
 18004                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 18005  186A  0821               	movf	setMemory_Modify@command,w
 18006  186B  3A01               	xorlw	1
 18007  186C  3000               	movlw	0
 18008  186D  1903               	skipnz
 18009  186E  3001               	movlw	1
 18010  186F  00A0               	movwf	??_setMemory_Modify
 18011  1870  0024               	movlb	4	; select bank4
 18012  1871  0844               	movf	(_Memory^(0+512)+36),w
 18013  1872  0020               	movlb	0	; select bank0
 18014  1873  0620               	xorwf	??_setMemory_Modify,w
 18015  1874  39FE               	andlw	-2
 18016  1875  0620               	xorwf	??_setMemory_Modify,w
 18017  1876  0024               	movlb	4	; select bank4
 18018  1877  00C4               	movwf	(_Memory^(0+512)+36)
 18019                           
 18020                           ;MCU_B1.c: 1085: Memory.Time = 0;
 18021  1878  01C2               	clrf	(_Memory^(0+512)+34)
 18022  1879  01C3               	clrf	((_Memory+1)^(0+512)+34)
 18023  187A  0008               	return
 18024  187B                     __end_of_setMemory_Modify:	
 18025                           
 18026                           	psect	text119
 18027  13B8                     __ptext119:	
 18028 ;; *************** function _getDimmerLights_ValueToPercent *****************
 18029 ;; Defined at:
 18030 ;;		line 1246 in file "../src/Dimmer_B1.c"
 18031 ;; Parameters:    Size  Location     Type
 18032 ;;  value           1    wreg     unsigned char 
 18033 ;; Auto vars:     Size  Location     Type
 18034 ;;  value           1   62[BANK0 ] unsigned char 
 18035 ;;  i               3   63[BANK0 ] float 
 18036 ;; Return value:  Size  Location     Type
 18037 ;;                  1    wreg      unsigned char 
 18038 ;; Registers used:
 18039 ;;		wreg, status,2, status,0, pclath, cstack
 18040 ;; Tracked objects:
 18041 ;;		On entry : 0/0
 18042 ;;		On exit  : 0/0
 18043 ;;		Unchanged: 0/0
 18044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18046 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18047 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18048 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18049 ;;Total ram usage:        6 bytes
 18050 ;; Hardware stack levels used:    1
 18051 ;; Hardware stack levels required when called:    7
 18052 ;; This function calls:
 18053 ;;		___awtoft
 18054 ;;		___ftadd
 18055 ;;		___ftdiv
 18056 ;;		___ftneg
 18057 ;;		___fttol
 18058 ;; This function is called by:
 18059 ;;		_DimmerIntr_Initialization
 18060 ;;		_setDimmerLights_Dimming
 18061 ;; This function uses a non-reentrant model
 18062 ;;
 18063                           
 18064                           
 18065                           ;psect for function _getDimmerLights_ValueToPercent
 18066  13B8                     _getDimmerLights_ValueToPercent:	
 18067                           
 18068                           ;incstack = 0
 18069                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 18070                           ;getDimmerLights_ValueToPercent@value stored from wreg
 18071  13B8  0020               	movlb	0	; select bank0
 18072  13B9  00DE               	movwf	getDimmerLights_ValueToPercent@value
 18073                           
 18074                           ;Dimmer_B1.c: 1254: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 18075  13BA  3000               	movlw	0
 18076  13BB  00DF               	movwf	getDimmerLights_ValueToPercent@i
 18077  13BC  3020               	movlw	32
 18078  13BD  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 18079  13BE  3042               	movlw	66
 18080  13BF  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 18081                           
 18082                           ;Dimmer_B1.c: 1255: i /= 100;
 18083  13C0  3000               	movlw	0
 18084  13C1  00AE               	movwf	___ftdiv@f2
 18085  13C2  30C8               	movlw	200
 18086  13C3  00AF               	movwf	___ftdiv@f2+1
 18087  13C4  3042               	movlw	66
 18088  13C5  00B0               	movwf	___ftdiv@f2+2
 18089  13C6  085F               	movf	getDimmerLights_ValueToPercent@i,w
 18090  13C7  00B1               	movwf	___ftdiv@f1
 18091  13C8  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 18092  13C9  00B2               	movwf	___ftdiv@f1+1
 18093  13CA  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 18094  13CB  00B3               	movwf	___ftdiv@f1+2
 18095  13CC  318B  2396  3193   	fcall	___ftdiv
 18096  13CF  0020               	movlb	0	; select bank0
 18097  13D0  082E               	movf	?___ftdiv,w
 18098  13D1  00DF               	movwf	getDimmerLights_ValueToPercent@i
 18099  13D2  082F               	movf	?___ftdiv+1,w
 18100  13D3  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 18101  13D4  0830               	movf	?___ftdiv+2,w
 18102  13D5  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 18103                           
 18104                           ;Dimmer_B1.c: 1257: return (char) (100 - ((((char)(77*0.55)) - value) / i));
 18105  13D6  085E               	movf	getDimmerLights_ValueToPercent@value,w
 18106  13D7  00DC               	movwf	??_getDimmerLights_ValueToPercent
 18107  13D8  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 18108  13D9  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 18109  13DA  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 18110  13DB  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 18111  13DC  1903               	skipnz
 18112  13DD  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 18113  13DE  085C               	movf	??_getDimmerLights_ValueToPercent,w
 18114  13DF  3E2A               	addlw	42
 18115  13E0  00A8               	movwf	___awtoft@c
 18116  13E1  3000               	movlw	0
 18117  13E2  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 18118  13E3  00A9               	movwf	___awtoft@c+1
 18119  13E4  319C  2434  3193   	fcall	___awtoft
 18120  13E7  0020               	movlb	0	; select bank0
 18121  13E8  0828               	movf	?___awtoft,w
 18122  13E9  00B1               	movwf	___ftdiv@f1
 18123  13EA  0829               	movf	?___awtoft+1,w
 18124  13EB  00B2               	movwf	___ftdiv@f1+1
 18125  13EC  082A               	movf	?___awtoft+2,w
 18126  13ED  00B3               	movwf	___ftdiv@f1+2
 18127  13EE  085F               	movf	getDimmerLights_ValueToPercent@i,w
 18128  13EF  00AE               	movwf	___ftdiv@f2
 18129  13F0  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 18130  13F1  00AF               	movwf	___ftdiv@f2+1
 18131  13F2  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 18132  13F3  00B0               	movwf	___ftdiv@f2+2
 18133  13F4  318B  2396  3193   	fcall	___ftdiv
 18134  13F7  0020               	movlb	0	; select bank0
 18135  13F8  082E               	movf	?___ftdiv,w
 18136  13F9  00BE               	movwf	___ftneg@f1
 18137  13FA  082F               	movf	?___ftdiv+1,w
 18138  13FB  00BF               	movwf	___ftneg@f1+1
 18139  13FC  0830               	movf	?___ftdiv+2,w
 18140  13FD  00C0               	movwf	___ftneg@f1+2
 18141  13FE  31A6  265E  3193   	fcall	___ftneg
 18142  1401  0020               	movlb	0	; select bank0
 18143  1402  083E               	movf	?___ftneg,w
 18144  1403  00C4               	movwf	___ftadd@f2
 18145  1404  083F               	movf	?___ftneg+1,w
 18146  1405  00C5               	movwf	___ftadd@f2+1
 18147  1406  0840               	movf	?___ftneg+2,w
 18148  1407  00C6               	movwf	___ftadd@f2+2
 18149  1408  3000               	movlw	0
 18150  1409  00C1               	movwf	___ftadd@f1
 18151  140A  30C8               	movlw	200
 18152  140B  00C2               	movwf	___ftadd@f1+1
 18153  140C  3042               	movlw	66
 18154  140D  00C3               	movwf	___ftadd@f1+2
 18155  140E  3184  243D  3193   	fcall	___ftadd
 18156  1411  0020               	movlb	0	; select bank0
 18157  1412  0841               	movf	?___ftadd,w
 18158  1413  00CE               	movwf	___fttol@f1
 18159  1414  0842               	movf	?___ftadd+1,w
 18160  1415  00CF               	movwf	___fttol@f1+1
 18161  1416  0843               	movf	?___ftadd+2,w
 18162  1417  00D0               	movwf	___fttol@f1+2
 18163  1418  3189  2159         	fcall	___fttol
 18164  141A  0020               	movlb	0	; select bank0
 18165  141B  084E               	movf	?___fttol,w
 18166  141C  0008               	return
 18167  141D                     __end_of_getDimmerLights_ValueToPercent:	
 18168                           
 18169                           	psect	text120
 18170  1353                     __ptext120:	
 18171 ;; *************** function _getDimmerLights_PercentToValue *****************
 18172 ;; Defined at:
 18173 ;;		line 1230 in file "../src/Dimmer_B1.c"
 18174 ;; Parameters:    Size  Location     Type
 18175 ;;  value           1    wreg     unsigned char 
 18176 ;; Auto vars:     Size  Location     Type
 18177 ;;  value           1   62[BANK0 ] unsigned char 
 18178 ;;  i               3   63[BANK0 ] float 
 18179 ;; Return value:  Size  Location     Type
 18180 ;;                  1    wreg      unsigned char 
 18181 ;; Registers used:
 18182 ;;		wreg, status,2, status,0, pclath, cstack
 18183 ;; Tracked objects:
 18184 ;;		On entry : 0/0
 18185 ;;		On exit  : 0/0
 18186 ;;		Unchanged: 0/0
 18187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18189 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18190 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18191 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18192 ;;Total ram usage:        6 bytes
 18193 ;; Hardware stack levels used:    1
 18194 ;; Hardware stack levels required when called:    7
 18195 ;; This function calls:
 18196 ;;		___awtoft
 18197 ;;		___ftadd
 18198 ;;		___ftdiv
 18199 ;;		___ftmul
 18200 ;;		___ftneg
 18201 ;;		___fttol
 18202 ;; This function is called by:
 18203 ;;		_DimmerIntr_Initialization
 18204 ;;		_setDimmerLights_OnOff
 18205 ;;		_setRFSW_AdjControl
 18206 ;; This function uses a non-reentrant model
 18207 ;;
 18208                           
 18209                           
 18210                           ;psect for function _getDimmerLights_PercentToValue
 18211  1353                     _getDimmerLights_PercentToValue:	
 18212                           
 18213                           ;incstack = 0
 18214                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 18215                           ;getDimmerLights_PercentToValue@value stored from wreg
 18216  1353  0020               	movlb	0	; select bank0
 18217  1354  00DE               	movwf	getDimmerLights_PercentToValue@value
 18218                           
 18219                           ;Dimmer_B1.c: 1238: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 18220  1355  3000               	movlw	0
 18221  1356  00DF               	movwf	getDimmerLights_PercentToValue@i
 18222  1357  3020               	movlw	32
 18223  1358  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 18224  1359  3042               	movlw	66
 18225  135A  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 18226                           
 18227                           ;Dimmer_B1.c: 1239: i /= 100;
 18228  135B  3000               	movlw	0
 18229  135C  00AE               	movwf	___ftdiv@f2
 18230  135D  30C8               	movlw	200
 18231  135E  00AF               	movwf	___ftdiv@f2+1
 18232  135F  3042               	movlw	66
 18233  1360  00B0               	movwf	___ftdiv@f2+2
 18234  1361  085F               	movf	getDimmerLights_PercentToValue@i,w
 18235  1362  00B1               	movwf	___ftdiv@f1
 18236  1363  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 18237  1364  00B2               	movwf	___ftdiv@f1+1
 18238  1365  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 18239  1366  00B3               	movwf	___ftdiv@f1+2
 18240  1367  318B  2396  3193   	fcall	___ftdiv
 18241  136A  0020               	movlb	0	; select bank0
 18242  136B  082E               	movf	?___ftdiv,w
 18243  136C  00DF               	movwf	getDimmerLights_PercentToValue@i
 18244  136D  082F               	movf	?___ftdiv+1,w
 18245  136E  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 18246  136F  0830               	movf	?___ftdiv+2,w
 18247  1370  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 18248                           
 18249                           ;Dimmer_B1.c: 1241: return (char) (((char)(77*0.55)) - ((100 - value) * i));
 18250  1371  085E               	movf	getDimmerLights_PercentToValue@value,w
 18251  1372  00DC               	movwf	??_getDimmerLights_PercentToValue
 18252  1373  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 18253  1374  09DC               	comf	??_getDimmerLights_PercentToValue,f
 18254  1375  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 18255  1376  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 18256  1377  1903               	skipnz
 18257  1378  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 18258  1379  085C               	movf	??_getDimmerLights_PercentToValue,w
 18259  137A  3E64               	addlw	100
 18260  137B  00A8               	movwf	___awtoft@c
 18261  137C  3000               	movlw	0
 18262  137D  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 18263  137E  00A9               	movwf	___awtoft@c+1
 18264  137F  319C  2434  3193   	fcall	___awtoft
 18265  1382  0020               	movlb	0	; select bank0
 18266  1383  0828               	movf	?___awtoft,w
 18267  1384  00B1               	movwf	___ftmul@f2
 18268  1385  0829               	movf	?___awtoft+1,w
 18269  1386  00B2               	movwf	___ftmul@f2+1
 18270  1387  082A               	movf	?___awtoft+2,w
 18271  1388  00B3               	movwf	___ftmul@f2+2
 18272  1389  085F               	movf	getDimmerLights_PercentToValue@i,w
 18273  138A  00AE               	movwf	___ftmul@f1
 18274  138B  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 18275  138C  00AF               	movwf	___ftmul@f1+1
 18276  138D  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 18277  138E  00B0               	movwf	___ftmul@f1+2
 18278  138F  318C  243F  3193   	fcall	___ftmul
 18279  1392  0020               	movlb	0	; select bank0
 18280  1393  082E               	movf	?___ftmul,w
 18281  1394  00BE               	movwf	___ftneg@f1
 18282  1395  082F               	movf	?___ftmul+1,w
 18283  1396  00BF               	movwf	___ftneg@f1+1
 18284  1397  0830               	movf	?___ftmul+2,w
 18285  1398  00C0               	movwf	___ftneg@f1+2
 18286  1399  31A6  265E  3193   	fcall	___ftneg
 18287  139C  0020               	movlb	0	; select bank0
 18288  139D  083E               	movf	?___ftneg,w
 18289  139E  00C4               	movwf	___ftadd@f2
 18290  139F  083F               	movf	?___ftneg+1,w
 18291  13A0  00C5               	movwf	___ftadd@f2+1
 18292  13A1  0840               	movf	?___ftneg+2,w
 18293  13A2  00C6               	movwf	___ftadd@f2+2
 18294  13A3  3000               	movlw	0
 18295  13A4  00C1               	movwf	___ftadd@f1
 18296  13A5  3028               	movlw	40
 18297  13A6  00C2               	movwf	___ftadd@f1+1
 18298  13A7  3042               	movlw	66
 18299  13A8  00C3               	movwf	___ftadd@f1+2
 18300  13A9  3184  243D  3193   	fcall	___ftadd
 18301  13AC  0020               	movlb	0	; select bank0
 18302  13AD  0841               	movf	?___ftadd,w
 18303  13AE  00CE               	movwf	___fttol@f1
 18304  13AF  0842               	movf	?___ftadd+1,w
 18305  13B0  00CF               	movwf	___fttol@f1+1
 18306  13B1  0843               	movf	?___ftadd+2,w
 18307  13B2  00D0               	movwf	___fttol@f1+2
 18308  13B3  3189  2159         	fcall	___fttol
 18309  13B5  0020               	movlb	0	; select bank0
 18310  13B6  084E               	movf	?___fttol,w
 18311  13B7  0008               	return
 18312  13B8                     __end_of_getDimmerLights_PercentToValue:	
 18313                           
 18314                           	psect	text121
 18315  0959                     __ptext121:	
 18316 ;; *************** function ___fttol *****************
 18317 ;; Defined at:
 18318 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 18319 ;; Parameters:    Size  Location     Type
 18320 ;;  f1              3   46[BANK0 ] float 
 18321 ;; Auto vars:     Size  Location     Type
 18322 ;;  lval            4   55[BANK0 ] unsigned long 
 18323 ;;  exp1            1   59[BANK0 ] unsigned char 
 18324 ;;  sign1           1   54[BANK0 ] unsigned char 
 18325 ;; Return value:  Size  Location     Type
 18326 ;;                  4   46[BANK0 ] long 
 18327 ;; Registers used:
 18328 ;;		wreg, status,2, status,0
 18329 ;; Tracked objects:
 18330 ;;		On entry : 0/0
 18331 ;;		On exit  : 0/0
 18332 ;;		Unchanged: 0/0
 18333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18334 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18335 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18336 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18337 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18338 ;;Total ram usage:       14 bytes
 18339 ;; Hardware stack levels used:    1
 18340 ;; Hardware stack levels required when called:    5
 18341 ;; This function calls:
 18342 ;;		Nothing
 18343 ;; This function is called by:
 18344 ;;		_getDimmerLights_PercentToValue
 18345 ;;		_getDimmerLights_ValueToPercent
 18346 ;; This function uses a non-reentrant model
 18347 ;;
 18348                           
 18349                           
 18350                           ;psect for function ___fttol
 18351  0959                     ___fttol:	
 18352                           
 18353                           ;incstack = 0
 18354                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 18355  0959  0020               	movlb	0	; select bank0
 18356  095A  084E               	movf	___fttol@f1,w
 18357  095B  00D2               	movwf	??___fttol
 18358  095C  084F               	movf	___fttol@f1+1,w
 18359  095D  00D3               	movwf	??___fttol+1
 18360  095E  0850               	movf	___fttol@f1+2,w
 18361  095F  00D4               	movwf	??___fttol+2
 18362  0960  1003               	clrc
 18363  0961  0D53               	rlf	??___fttol+1,w
 18364  0962  0D54               	rlf	??___fttol+2,w
 18365  0963  00D5               	movwf	??___fttol+3
 18366  0964  0855               	movf	??___fttol+3,w
 18367  0965  00DB               	movwf	___fttol@exp1
 18368  0966  08DB               	movf	___fttol@exp1,f
 18369  0967  1D03               	skipz
 18370  0968  2972               	goto	l6939
 18371  0969  3000               	movlw	0
 18372  096A  00D1               	movwf	?___fttol+3
 18373  096B  3000               	movlw	0
 18374  096C  00D0               	movwf	?___fttol+2
 18375  096D  3000               	movlw	0
 18376  096E  00CF               	movwf	?___fttol+1
 18377  096F  3000               	movlw	0
 18378  0970  00CE               	movwf	?___fttol
 18379  0971  0008               	return
 18380  0972                     l6939:	
 18381  0972  084E               	movf	___fttol@f1,w
 18382  0973  00D2               	movwf	??___fttol
 18383  0974  084F               	movf	___fttol@f1+1,w
 18384  0975  00D3               	movwf	??___fttol+1
 18385  0976  0850               	movf	___fttol@f1+2,w
 18386  0977  00D4               	movwf	??___fttol+2
 18387  0978  3017               	movlw	23
 18388  0979                     u6135:	
 18389  0979  36D4               	lsrf	??___fttol+2,f
 18390  097A  0CD3               	rrf	??___fttol+1,f
 18391  097B  0CD2               	rrf	??___fttol,f
 18392  097C  0B89               	decfsz	9,f
 18393  097D  2979               	goto	u6135
 18394  097E  0852               	movf	??___fttol,w
 18395  097F  00D5               	movwf	??___fttol+3
 18396  0980  0855               	movf	??___fttol+3,w
 18397  0981  00D6               	movwf	___fttol@sign1
 18398  0982  17CF               	bsf	___fttol@f1+1,7
 18399  0983  30FF               	movlw	255
 18400  0984  05CE               	andwf	___fttol@f1,f
 18401  0985  30FF               	movlw	255
 18402  0986  05CF               	andwf	___fttol@f1+1,f
 18403  0987  3000               	movlw	0
 18404  0988  05D0               	andwf	___fttol@f1+2,f
 18405  0989  084E               	movf	___fttol@f1,w
 18406  098A  00D7               	movwf	___fttol@lval
 18407  098B  084F               	movf	___fttol@f1+1,w
 18408  098C  00D8               	movwf	___fttol@lval+1
 18409  098D  0850               	movf	___fttol@f1+2,w
 18410  098E  00D9               	movwf	___fttol@lval+2
 18411  098F  01DA               	clrf	___fttol@lval+3
 18412  0990  308E               	movlw	142
 18413  0991  02DB               	subwf	___fttol@exp1,f
 18414  0992  1FDB               	btfss	___fttol@exp1,7
 18415  0993  29B0               	goto	l6959
 18416  0994  085B               	movf	___fttol@exp1,w
 18417  0995  3A80               	xorlw	128
 18418  0996  3E8F               	addlw	143
 18419  0997  1803               	skipnc
 18420  0998  29A2               	goto	l6957
 18421  0999  3000               	movlw	0
 18422  099A  00D1               	movwf	?___fttol+3
 18423  099B  3000               	movlw	0
 18424  099C  00D0               	movwf	?___fttol+2
 18425  099D  3000               	movlw	0
 18426  099E  00CF               	movwf	?___fttol+1
 18427  099F  3000               	movlw	0
 18428  09A0  00CE               	movwf	?___fttol
 18429  09A1  0008               	return
 18430  09A2                     l6957:	
 18431  09A2  3001               	movlw	1
 18432  09A3                     u6165:	
 18433  09A3  36DA               	lsrf	___fttol@lval+3,f
 18434  09A4  0CD9               	rrf	___fttol@lval+2,f
 18435  09A5  0CD8               	rrf	___fttol@lval+1,f
 18436  09A6  0CD7               	rrf	___fttol@lval,f
 18437  09A7  0B89               	decfsz	9,f
 18438  09A8  29A3               	goto	u6165
 18439  09A9  3001               	movlw	1
 18440  09AA  00D2               	movwf	??___fttol
 18441  09AB  0852               	movf	??___fttol,w
 18442  09AC  07DB               	addwf	___fttol@exp1,f
 18443  09AD  1903               	btfsc	3,2
 18444  09AE  29C9               	goto	l6969
 18445  09AF  29A2               	goto	l6957
 18446  09B0                     l6959:	
 18447  09B0  3018               	movlw	24
 18448  09B1  025B               	subwf	___fttol@exp1,w
 18449  09B2  1C03               	skipc
 18450  09B3  29C6               	goto	l6967
 18451  09B4  3000               	movlw	0
 18452  09B5  00D1               	movwf	?___fttol+3
 18453  09B6  3000               	movlw	0
 18454  09B7  00D0               	movwf	?___fttol+2
 18455  09B8  3000               	movlw	0
 18456  09B9  00CF               	movwf	?___fttol+1
 18457  09BA  3000               	movlw	0
 18458  09BB  00CE               	movwf	?___fttol
 18459  09BC  0008               	return
 18460  09BD                     l6965:	
 18461  09BD  3001               	movlw	1
 18462  09BE                     u6195:	
 18463  09BE  35D7               	lslf	___fttol@lval,f
 18464  09BF  0DD8               	rlf	___fttol@lval+1,f
 18465  09C0  0DD9               	rlf	___fttol@lval+2,f
 18466  09C1  0DDA               	rlf	___fttol@lval+3,f
 18467  09C2  0B89               	decfsz	9,f
 18468  09C3  29BE               	goto	u6195
 18469  09C4  3001               	movlw	1
 18470  09C5  02DB               	subwf	___fttol@exp1,f
 18471  09C6                     l6967:	
 18472  09C6  08DB               	movf	___fttol@exp1,f
 18473  09C7  1D03               	skipz
 18474  09C8  29BD               	goto	l6965
 18475  09C9                     l6969:	
 18476  09C9  0856               	movf	___fttol@sign1,w
 18477  09CA  1903               	btfsc	3,2
 18478  09CB  29D7               	goto	l6973
 18479  09CC  09D7               	comf	___fttol@lval,f
 18480  09CD  09D8               	comf	___fttol@lval+1,f
 18481  09CE  09D9               	comf	___fttol@lval+2,f
 18482  09CF  09DA               	comf	___fttol@lval+3,f
 18483  09D0  0AD7               	incf	___fttol@lval,f
 18484  09D1  1903               	skipnz
 18485  09D2  0AD8               	incf	___fttol@lval+1,f
 18486  09D3  1903               	skipnz
 18487  09D4  0AD9               	incf	___fttol@lval+2,f
 18488  09D5  1903               	skipnz
 18489  09D6  0ADA               	incf	___fttol@lval+3,f
 18490  09D7                     l6973:	
 18491  09D7  085A               	movf	___fttol@lval+3,w
 18492  09D8  00D1               	movwf	?___fttol+3
 18493  09D9  0859               	movf	___fttol@lval+2,w
 18494  09DA  00D0               	movwf	?___fttol+2
 18495  09DB  0858               	movf	___fttol@lval+1,w
 18496  09DC  00CF               	movwf	?___fttol+1
 18497  09DD  0857               	movf	___fttol@lval,w
 18498  09DE  00CE               	movwf	?___fttol
 18499  09DF  0008               	return
 18500  09E0                     __end_of___fttol:	
 18501                           
 18502                           	psect	text122
 18503  265E                     __ptext122:	
 18504 ;; *************** function ___ftneg *****************
 18505 ;; Defined at:
 18506 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 18507 ;; Parameters:    Size  Location     Type
 18508 ;;  f1              3   30[BANK0 ] float 
 18509 ;; Auto vars:     Size  Location     Type
 18510 ;;		None
 18511 ;; Return value:  Size  Location     Type
 18512 ;;                  3   30[BANK0 ] float 
 18513 ;; Registers used:
 18514 ;;		wreg
 18515 ;; Tracked objects:
 18516 ;;		On entry : 0/0
 18517 ;;		On exit  : 0/0
 18518 ;;		Unchanged: 0/0
 18519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18520 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18523 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18524 ;;Total ram usage:        3 bytes
 18525 ;; Hardware stack levels used:    1
 18526 ;; Hardware stack levels required when called:    5
 18527 ;; This function calls:
 18528 ;;		Nothing
 18529 ;; This function is called by:
 18530 ;;		_getDimmerLights_PercentToValue
 18531 ;;		_getDimmerLights_ValueToPercent
 18532 ;; This function uses a non-reentrant model
 18533 ;;
 18534                           
 18535                           
 18536                           ;psect for function ___ftneg
 18537  265E                     ___ftneg:	
 18538                           
 18539                           ;incstack = 0
 18540                           ; Regs used in ___ftneg: [wreg]
 18541  265E  0020               	movlb	0	; select bank0
 18542  265F  0840               	movf	___ftneg@f1+2,w
 18543  2660  043F               	iorwf	___ftneg@f1+1,w
 18544  2661  043E               	iorwf	___ftneg@f1,w
 18545  2662  1903               	skipnz
 18546  2663  0008               	return
 18547  2664  3080               	movlw	128
 18548  2665  06C0               	xorwf	___ftneg@f1+2,f
 18549  2666  0008               	return
 18550  2667                     __end_of___ftneg:	
 18551                           
 18552                           	psect	text123
 18553  0C3F                     __ptext123:	
 18554 ;; *************** function ___ftmul *****************
 18555 ;; Defined at:
 18556 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 18557 ;; Parameters:    Size  Location     Type
 18558 ;;  f1              3   14[BANK0 ] float 
 18559 ;;  f2              3   17[BANK0 ] float 
 18560 ;; Auto vars:     Size  Location     Type
 18561 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 18562 ;;  sign            1   29[BANK0 ] unsigned char 
 18563 ;;  cntr            1   28[BANK0 ] unsigned char 
 18564 ;;  exp             1   24[BANK0 ] unsigned char 
 18565 ;; Return value:  Size  Location     Type
 18566 ;;                  3   14[BANK0 ] float 
 18567 ;; Registers used:
 18568 ;;		wreg, status,2, status,0, pclath, cstack
 18569 ;; Tracked objects:
 18570 ;;		On entry : 0/0
 18571 ;;		On exit  : 0/0
 18572 ;;		Unchanged: 0/0
 18573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18574 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18575 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18576 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18577 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18578 ;;Total ram usage:       16 bytes
 18579 ;; Hardware stack levels used:    1
 18580 ;; Hardware stack levels required when called:    6
 18581 ;; This function calls:
 18582 ;;		___ftpack
 18583 ;; This function is called by:
 18584 ;;		_getDimmerLights_PercentToValue
 18585 ;; This function uses a non-reentrant model
 18586 ;;
 18587                           
 18588                           
 18589                           ;psect for function ___ftmul
 18590  0C3F                     ___ftmul:	
 18591                           
 18592                           ;incstack = 0
 18593                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 18594  0C3F  0020               	movlb	0	; select bank0
 18595  0C40  082E               	movf	___ftmul@f1,w
 18596  0C41  00B4               	movwf	??___ftmul
 18597  0C42  082F               	movf	___ftmul@f1+1,w
 18598  0C43  00B5               	movwf	??___ftmul+1
 18599  0C44  0830               	movf	___ftmul@f1+2,w
 18600  0C45  00B6               	movwf	??___ftmul+2
 18601  0C46  1003               	clrc
 18602  0C47  0D35               	rlf	??___ftmul+1,w
 18603  0C48  0D36               	rlf	??___ftmul+2,w
 18604  0C49  00B7               	movwf	??___ftmul+3
 18605  0C4A  0837               	movf	??___ftmul+3,w
 18606  0C4B  00B8               	movwf	___ftmul@exp
 18607  0C4C  08B8               	movf	___ftmul@exp,f
 18608  0C4D  1D03               	skipz
 18609  0C4E  2C56               	goto	l6881
 18610  0C4F  3000               	movlw	0
 18611  0C50  00AE               	movwf	?___ftmul
 18612  0C51  3000               	movlw	0
 18613  0C52  00AF               	movwf	?___ftmul+1
 18614  0C53  3000               	movlw	0
 18615  0C54  00B0               	movwf	?___ftmul+2
 18616  0C55  0008               	return
 18617  0C56                     l6881:	
 18618  0C56  0831               	movf	___ftmul@f2,w
 18619  0C57  00B4               	movwf	??___ftmul
 18620  0C58  0832               	movf	___ftmul@f2+1,w
 18621  0C59  00B5               	movwf	??___ftmul+1
 18622  0C5A  0833               	movf	___ftmul@f2+2,w
 18623  0C5B  00B6               	movwf	??___ftmul+2
 18624  0C5C  1003               	clrc
 18625  0C5D  0D35               	rlf	??___ftmul+1,w
 18626  0C5E  0D36               	rlf	??___ftmul+2,w
 18627  0C5F  00B7               	movwf	??___ftmul+3
 18628  0C60  0837               	movf	??___ftmul+3,w
 18629  0C61  00BD               	movwf	___ftmul@sign
 18630  0C62  08BD               	movf	___ftmul@sign,f
 18631  0C63  1D03               	skipz
 18632  0C64  2C6C               	goto	l6887
 18633  0C65  3000               	movlw	0
 18634  0C66  00AE               	movwf	?___ftmul
 18635  0C67  3000               	movlw	0
 18636  0C68  00AF               	movwf	?___ftmul+1
 18637  0C69  3000               	movlw	0
 18638  0C6A  00B0               	movwf	?___ftmul+2
 18639  0C6B  0008               	return
 18640  0C6C                     l6887:	
 18641  0C6C  083D               	movf	___ftmul@sign,w
 18642  0C6D  3E7B               	addlw	123
 18643  0C6E  00B4               	movwf	??___ftmul
 18644  0C6F  0834               	movf	??___ftmul,w
 18645  0C70  07B8               	addwf	___ftmul@exp,f
 18646  0C71  082E               	movf	___ftmul@f1,w
 18647  0C72  00B4               	movwf	??___ftmul
 18648  0C73  082F               	movf	___ftmul@f1+1,w
 18649  0C74  00B5               	movwf	??___ftmul+1
 18650  0C75  0830               	movf	___ftmul@f1+2,w
 18651  0C76  00B6               	movwf	??___ftmul+2
 18652  0C77  3010               	movlw	16
 18653  0C78                     u6015:	
 18654  0C78  36B6               	lsrf	??___ftmul+2,f
 18655  0C79  0CB5               	rrf	??___ftmul+1,f
 18656  0C7A  0CB4               	rrf	??___ftmul,f
 18657  0C7B  0B89               	decfsz	9,f
 18658  0C7C  2C78               	goto	u6015
 18659  0C7D  0834               	movf	??___ftmul,w
 18660  0C7E  00B7               	movwf	??___ftmul+3
 18661  0C7F  0837               	movf	??___ftmul+3,w
 18662  0C80  00BD               	movwf	___ftmul@sign
 18663  0C81  0831               	movf	___ftmul@f2,w
 18664  0C82  00B4               	movwf	??___ftmul
 18665  0C83  0832               	movf	___ftmul@f2+1,w
 18666  0C84  00B5               	movwf	??___ftmul+1
 18667  0C85  0833               	movf	___ftmul@f2+2,w
 18668  0C86  00B6               	movwf	??___ftmul+2
 18669  0C87  3010               	movlw	16
 18670  0C88                     u6025:	
 18671  0C88  36B6               	lsrf	??___ftmul+2,f
 18672  0C89  0CB5               	rrf	??___ftmul+1,f
 18673  0C8A  0CB4               	rrf	??___ftmul,f
 18674  0C8B  0B89               	decfsz	9,f
 18675  0C8C  2C88               	goto	u6025
 18676  0C8D  0834               	movf	??___ftmul,w
 18677  0C8E  00B7               	movwf	??___ftmul+3
 18678  0C8F  0837               	movf	??___ftmul+3,w
 18679  0C90  06BD               	xorwf	___ftmul@sign,f
 18680  0C91  3080               	movlw	128
 18681  0C92  00B4               	movwf	??___ftmul
 18682  0C93  0834               	movf	??___ftmul,w
 18683  0C94  05BD               	andwf	___ftmul@sign,f
 18684  0C95  17AF               	bsf	___ftmul@f1+1,7
 18685  0C96  17B2               	bsf	___ftmul@f2+1,7
 18686  0C97  30FF               	movlw	255
 18687  0C98  05B1               	andwf	___ftmul@f2,f
 18688  0C99  30FF               	movlw	255
 18689  0C9A  05B2               	andwf	___ftmul@f2+1,f
 18690  0C9B  3000               	movlw	0
 18691  0C9C  05B3               	andwf	___ftmul@f2+2,f
 18692  0C9D  3000               	movlw	0
 18693  0C9E  00B9               	movwf	___ftmul@f3_as_product
 18694  0C9F  3000               	movlw	0
 18695  0CA0  00BA               	movwf	___ftmul@f3_as_product+1
 18696  0CA1  3000               	movlw	0
 18697  0CA2  00BB               	movwf	___ftmul@f3_as_product+2
 18698  0CA3  3007               	movlw	7
 18699  0CA4  00B4               	movwf	??___ftmul
 18700  0CA5  0834               	movf	??___ftmul,w
 18701  0CA6  00BC               	movwf	___ftmul@cntr
 18702  0CA7                     l6899:	
 18703  0CA7  1C2E               	btfss	___ftmul@f1,0
 18704  0CA8  2CAF               	goto	l6903
 18705  0CA9  0831               	movf	___ftmul@f2,w
 18706  0CAA  07B9               	addwf	___ftmul@f3_as_product,f
 18707  0CAB  0832               	movf	___ftmul@f2+1,w
 18708  0CAC  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 18709  0CAD  0833               	movf	___ftmul@f2+2,w
 18710  0CAE  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 18711  0CAF                     l6903:	
 18712  0CAF  3001               	movlw	1
 18713  0CB0                     u6045:	
 18714  0CB0  36B0               	lsrf	___ftmul@f1+2,f
 18715  0CB1  0CAF               	rrf	___ftmul@f1+1,f
 18716  0CB2  0CAE               	rrf	___ftmul@f1,f
 18717  0CB3  0B89               	decfsz	9,f
 18718  0CB4  2CB0               	goto	u6045
 18719  0CB5  3001               	movlw	1
 18720  0CB6                     u6055:	
 18721  0CB6  35B1               	lslf	___ftmul@f2,f
 18722  0CB7  0DB2               	rlf	___ftmul@f2+1,f
 18723  0CB8  0DB3               	rlf	___ftmul@f2+2,f
 18724  0CB9  0B89               	decfsz	9,f
 18725  0CBA  2CB6               	goto	u6055
 18726  0CBB  3001               	movlw	1
 18727  0CBC  02BC               	subwf	___ftmul@cntr,f
 18728  0CBD  1D03               	btfss	3,2
 18729  0CBE  2CA7               	goto	l6899
 18730  0CBF  3009               	movlw	9
 18731  0CC0  00B4               	movwf	??___ftmul
 18732  0CC1  0834               	movf	??___ftmul,w
 18733  0CC2  00BC               	movwf	___ftmul@cntr
 18734  0CC3                     l6911:	
 18735  0CC3  1C2E               	btfss	___ftmul@f1,0
 18736  0CC4  2CCB               	goto	l6915
 18737  0CC5  0831               	movf	___ftmul@f2,w
 18738  0CC6  07B9               	addwf	___ftmul@f3_as_product,f
 18739  0CC7  0832               	movf	___ftmul@f2+1,w
 18740  0CC8  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 18741  0CC9  0833               	movf	___ftmul@f2+2,w
 18742  0CCA  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 18743  0CCB                     l6915:	
 18744  0CCB  3001               	movlw	1
 18745  0CCC                     u6085:	
 18746  0CCC  36B0               	lsrf	___ftmul@f1+2,f
 18747  0CCD  0CAF               	rrf	___ftmul@f1+1,f
 18748  0CCE  0CAE               	rrf	___ftmul@f1,f
 18749  0CCF  0B89               	decfsz	9,f
 18750  0CD0  2CCC               	goto	u6085
 18751  0CD1  3001               	movlw	1
 18752  0CD2                     u6095:	
 18753  0CD2  36BB               	lsrf	___ftmul@f3_as_product+2,f
 18754  0CD3  0CBA               	rrf	___ftmul@f3_as_product+1,f
 18755  0CD4  0CB9               	rrf	___ftmul@f3_as_product,f
 18756  0CD5  0B89               	decfsz	9,f
 18757  0CD6  2CD2               	goto	u6095
 18758  0CD7  3001               	movlw	1
 18759  0CD8  02BC               	subwf	___ftmul@cntr,f
 18760  0CD9  1D03               	btfss	3,2
 18761  0CDA  2CC3               	goto	l6911
 18762  0CDB  0839               	movf	___ftmul@f3_as_product,w
 18763  0CDC  00A0               	movwf	___ftpack@arg
 18764  0CDD  083A               	movf	___ftmul@f3_as_product+1,w
 18765  0CDE  00A1               	movwf	___ftpack@arg+1
 18766  0CDF  083B               	movf	___ftmul@f3_as_product+2,w
 18767  0CE0  00A2               	movwf	___ftpack@arg+2
 18768  0CE1  0838               	movf	___ftmul@exp,w
 18769  0CE2  00B4               	movwf	??___ftmul
 18770  0CE3  0834               	movf	??___ftmul,w
 18771  0CE4  00A3               	movwf	___ftpack@exp
 18772  0CE5  083D               	movf	___ftmul@sign,w
 18773  0CE6  00B5               	movwf	??___ftmul+1
 18774  0CE7  0835               	movf	??___ftmul+1,w
 18775  0CE8  00A4               	movwf	___ftpack@sign
 18776  0CE9  3192  22F2         	fcall	___ftpack
 18777  0CEB  0020               	movlb	0	; select bank0
 18778  0CEC  0820               	movf	?___ftpack,w
 18779  0CED  00AE               	movwf	?___ftmul
 18780  0CEE  0821               	movf	?___ftpack+1,w
 18781  0CEF  00AF               	movwf	?___ftmul+1
 18782  0CF0  0822               	movf	?___ftpack+2,w
 18783  0CF1  00B0               	movwf	?___ftmul+2
 18784  0CF2  0008               	return
 18785  0CF3                     __end_of___ftmul:	
 18786                           
 18787                           	psect	text124
 18788  0B96                     __ptext124:	
 18789 ;; *************** function ___ftdiv *****************
 18790 ;; Defined at:
 18791 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 18792 ;; Parameters:    Size  Location     Type
 18793 ;;  f2              3   14[BANK0 ] float 
 18794 ;;  f1              3   17[BANK0 ] float 
 18795 ;; Auto vars:     Size  Location     Type
 18796 ;;  f3              3   25[BANK0 ] float 
 18797 ;;  sign            1   29[BANK0 ] unsigned char 
 18798 ;;  exp             1   28[BANK0 ] unsigned char 
 18799 ;;  cntr            1   24[BANK0 ] unsigned char 
 18800 ;; Return value:  Size  Location     Type
 18801 ;;                  3   14[BANK0 ] float 
 18802 ;; Registers used:
 18803 ;;		wreg, status,2, status,0, pclath, cstack
 18804 ;; Tracked objects:
 18805 ;;		On entry : 0/0
 18806 ;;		On exit  : 0/0
 18807 ;;		Unchanged: 0/0
 18808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18809 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18810 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18811 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18812 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18813 ;;Total ram usage:       16 bytes
 18814 ;; Hardware stack levels used:    1
 18815 ;; Hardware stack levels required when called:    6
 18816 ;; This function calls:
 18817 ;;		___ftpack
 18818 ;; This function is called by:
 18819 ;;		_getDimmerLights_PercentToValue
 18820 ;;		_getDimmerLights_ValueToPercent
 18821 ;; This function uses a non-reentrant model
 18822 ;;
 18823                           
 18824                           
 18825                           ;psect for function ___ftdiv
 18826  0B96                     ___ftdiv:	
 18827                           
 18828                           ;incstack = 0
 18829                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 18830  0B96  0020               	movlb	0	; select bank0
 18831  0B97  0831               	movf	___ftdiv@f1,w
 18832  0B98  00B4               	movwf	??___ftdiv
 18833  0B99  0832               	movf	___ftdiv@f1+1,w
 18834  0B9A  00B5               	movwf	??___ftdiv+1
 18835  0B9B  0833               	movf	___ftdiv@f1+2,w
 18836  0B9C  00B6               	movwf	??___ftdiv+2
 18837  0B9D  1003               	clrc
 18838  0B9E  0D35               	rlf	??___ftdiv+1,w
 18839  0B9F  0D36               	rlf	??___ftdiv+2,w
 18840  0BA0  00B7               	movwf	??___ftdiv+3
 18841  0BA1  0837               	movf	??___ftdiv+3,w
 18842  0BA2  00BC               	movwf	___ftdiv@exp
 18843  0BA3  08BC               	movf	___ftdiv@exp,f
 18844  0BA4  1D03               	skipz
 18845  0BA5  2BAD               	goto	l6839
 18846  0BA6  3000               	movlw	0
 18847  0BA7  00AE               	movwf	?___ftdiv
 18848  0BA8  3000               	movlw	0
 18849  0BA9  00AF               	movwf	?___ftdiv+1
 18850  0BAA  3000               	movlw	0
 18851  0BAB  00B0               	movwf	?___ftdiv+2
 18852  0BAC  0008               	return
 18853  0BAD                     l6839:	
 18854  0BAD  082E               	movf	___ftdiv@f2,w
 18855  0BAE  00B4               	movwf	??___ftdiv
 18856  0BAF  082F               	movf	___ftdiv@f2+1,w
 18857  0BB0  00B5               	movwf	??___ftdiv+1
 18858  0BB1  0830               	movf	___ftdiv@f2+2,w
 18859  0BB2  00B6               	movwf	??___ftdiv+2
 18860  0BB3  1003               	clrc
 18861  0BB4  0D35               	rlf	??___ftdiv+1,w
 18862  0BB5  0D36               	rlf	??___ftdiv+2,w
 18863  0BB6  00B7               	movwf	??___ftdiv+3
 18864  0BB7  0837               	movf	??___ftdiv+3,w
 18865  0BB8  00BD               	movwf	___ftdiv@sign
 18866  0BB9  08BD               	movf	___ftdiv@sign,f
 18867  0BBA  1D03               	skipz
 18868  0BBB  2BC3               	goto	l6845
 18869  0BBC  3000               	movlw	0
 18870  0BBD  00AE               	movwf	?___ftdiv
 18871  0BBE  3000               	movlw	0
 18872  0BBF  00AF               	movwf	?___ftdiv+1
 18873  0BC0  3000               	movlw	0
 18874  0BC1  00B0               	movwf	?___ftdiv+2
 18875  0BC2  0008               	return
 18876  0BC3                     l6845:	
 18877  0BC3  3000               	movlw	0
 18878  0BC4  00B9               	movwf	___ftdiv@f3
 18879  0BC5  3000               	movlw	0
 18880  0BC6  00BA               	movwf	___ftdiv@f3+1
 18881  0BC7  3000               	movlw	0
 18882  0BC8  00BB               	movwf	___ftdiv@f3+2
 18883  0BC9  3089               	movlw	137
 18884  0BCA  073D               	addwf	___ftdiv@sign,w
 18885  0BCB  00B4               	movwf	??___ftdiv
 18886  0BCC  0834               	movf	??___ftdiv,w
 18887  0BCD  02BC               	subwf	___ftdiv@exp,f
 18888  0BCE  0831               	movf	___ftdiv@f1,w
 18889  0BCF  00B4               	movwf	??___ftdiv
 18890  0BD0  0832               	movf	___ftdiv@f1+1,w
 18891  0BD1  00B5               	movwf	??___ftdiv+1
 18892  0BD2  0833               	movf	___ftdiv@f1+2,w
 18893  0BD3  00B6               	movwf	??___ftdiv+2
 18894  0BD4  3010               	movlw	16
 18895  0BD5                     u5935:	
 18896  0BD5  36B6               	lsrf	??___ftdiv+2,f
 18897  0BD6  0CB5               	rrf	??___ftdiv+1,f
 18898  0BD7  0CB4               	rrf	??___ftdiv,f
 18899  0BD8  0B89               	decfsz	9,f
 18900  0BD9  2BD5               	goto	u5935
 18901  0BDA  0834               	movf	??___ftdiv,w
 18902  0BDB  00B7               	movwf	??___ftdiv+3
 18903  0BDC  0837               	movf	??___ftdiv+3,w
 18904  0BDD  00BD               	movwf	___ftdiv@sign
 18905  0BDE  082E               	movf	___ftdiv@f2,w
 18906  0BDF  00B4               	movwf	??___ftdiv
 18907  0BE0  082F               	movf	___ftdiv@f2+1,w
 18908  0BE1  00B5               	movwf	??___ftdiv+1
 18909  0BE2  0830               	movf	___ftdiv@f2+2,w
 18910  0BE3  00B6               	movwf	??___ftdiv+2
 18911  0BE4  3010               	movlw	16
 18912  0BE5                     u5945:	
 18913  0BE5  36B6               	lsrf	??___ftdiv+2,f
 18914  0BE6  0CB5               	rrf	??___ftdiv+1,f
 18915  0BE7  0CB4               	rrf	??___ftdiv,f
 18916  0BE8  0B89               	decfsz	9,f
 18917  0BE9  2BE5               	goto	u5945
 18918  0BEA  0834               	movf	??___ftdiv,w
 18919  0BEB  00B7               	movwf	??___ftdiv+3
 18920  0BEC  0837               	movf	??___ftdiv+3,w
 18921  0BED  06BD               	xorwf	___ftdiv@sign,f
 18922  0BEE  3080               	movlw	128
 18923  0BEF  00B4               	movwf	??___ftdiv
 18924  0BF0  0834               	movf	??___ftdiv,w
 18925  0BF1  05BD               	andwf	___ftdiv@sign,f
 18926  0BF2  17B2               	bsf	___ftdiv@f1+1,7
 18927  0BF3  30FF               	movlw	255
 18928  0BF4  05B1               	andwf	___ftdiv@f1,f
 18929  0BF5  30FF               	movlw	255
 18930  0BF6  05B2               	andwf	___ftdiv@f1+1,f
 18931  0BF7  3000               	movlw	0
 18932  0BF8  05B3               	andwf	___ftdiv@f1+2,f
 18933  0BF9  17AF               	bsf	___ftdiv@f2+1,7
 18934  0BFA  30FF               	movlw	255
 18935  0BFB  05AE               	andwf	___ftdiv@f2,f
 18936  0BFC  30FF               	movlw	255
 18937  0BFD  05AF               	andwf	___ftdiv@f2+1,f
 18938  0BFE  3000               	movlw	0
 18939  0BFF  05B0               	andwf	___ftdiv@f2+2,f
 18940  0C00  3018               	movlw	24
 18941  0C01  00B4               	movwf	??___ftdiv
 18942  0C02  0834               	movf	??___ftdiv,w
 18943  0C03  00B8               	movwf	___ftdiv@cntr
 18944  0C04                     l6859:	
 18945  0C04  3001               	movlw	1
 18946  0C05                     u5955:	
 18947  0C05  35B9               	lslf	___ftdiv@f3,f
 18948  0C06  0DBA               	rlf	___ftdiv@f3+1,f
 18949  0C07  0DBB               	rlf	___ftdiv@f3+2,f
 18950  0C08  0B89               	decfsz	9,f
 18951  0C09  2C05               	goto	u5955
 18952  0C0A  0830               	movf	___ftdiv@f2+2,w
 18953  0C0B  0233               	subwf	___ftdiv@f1+2,w
 18954  0C0C  1D03               	skipz
 18955  0C0D  2C14               	goto	u5965
 18956  0C0E  082F               	movf	___ftdiv@f2+1,w
 18957  0C0F  0232               	subwf	___ftdiv@f1+1,w
 18958  0C10  1D03               	skipz
 18959  0C11  2C14               	goto	u5965
 18960  0C12  082E               	movf	___ftdiv@f2,w
 18961  0C13  0231               	subwf	___ftdiv@f1,w
 18962  0C14                     u5965:	
 18963  0C14  1C03               	skipc
 18964  0C15  2C1D               	goto	l6867
 18965  0C16  082E               	movf	___ftdiv@f2,w
 18966  0C17  02B1               	subwf	___ftdiv@f1,f
 18967  0C18  082F               	movf	___ftdiv@f2+1,w
 18968  0C19  3BB2               	subwfb	___ftdiv@f1+1,f
 18969  0C1A  0830               	movf	___ftdiv@f2+2,w
 18970  0C1B  3BB3               	subwfb	___ftdiv@f1+2,f
 18971  0C1C  1439               	bsf	___ftdiv@f3,0
 18972  0C1D                     l6867:	
 18973  0C1D  3001               	movlw	1
 18974  0C1E                     u5975:	
 18975  0C1E  35B1               	lslf	___ftdiv@f1,f
 18976  0C1F  0DB2               	rlf	___ftdiv@f1+1,f
 18977  0C20  0DB3               	rlf	___ftdiv@f1+2,f
 18978  0C21  0B89               	decfsz	9,f
 18979  0C22  2C1E               	goto	u5975
 18980  0C23  3001               	movlw	1
 18981  0C24  02B8               	subwf	___ftdiv@cntr,f
 18982  0C25  1D03               	btfss	3,2
 18983  0C26  2C04               	goto	l6859
 18984  0C27  0839               	movf	___ftdiv@f3,w
 18985  0C28  00A0               	movwf	___ftpack@arg
 18986  0C29  083A               	movf	___ftdiv@f3+1,w
 18987  0C2A  00A1               	movwf	___ftpack@arg+1
 18988  0C2B  083B               	movf	___ftdiv@f3+2,w
 18989  0C2C  00A2               	movwf	___ftpack@arg+2
 18990  0C2D  083C               	movf	___ftdiv@exp,w
 18991  0C2E  00B4               	movwf	??___ftdiv
 18992  0C2F  0834               	movf	??___ftdiv,w
 18993  0C30  00A3               	movwf	___ftpack@exp
 18994  0C31  083D               	movf	___ftdiv@sign,w
 18995  0C32  00B5               	movwf	??___ftdiv+1
 18996  0C33  0835               	movf	??___ftdiv+1,w
 18997  0C34  00A4               	movwf	___ftpack@sign
 18998  0C35  3192  22F2         	fcall	___ftpack
 18999  0C37  0020               	movlb	0	; select bank0
 19000  0C38  0820               	movf	?___ftpack,w
 19001  0C39  00AE               	movwf	?___ftdiv
 19002  0C3A  0821               	movf	?___ftpack+1,w
 19003  0C3B  00AF               	movwf	?___ftdiv+1
 19004  0C3C  0822               	movf	?___ftpack+2,w
 19005  0C3D  00B0               	movwf	?___ftdiv+2
 19006  0C3E  0008               	return
 19007  0C3F                     __end_of___ftdiv:	
 19008                           
 19009                           	psect	text125
 19010  043D                     __ptext125:	
 19011 ;; *************** function ___ftadd *****************
 19012 ;; Defined at:
 19013 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 19014 ;; Parameters:    Size  Location     Type
 19015 ;;  f1              3   33[BANK0 ] float 
 19016 ;;  f2              3   36[BANK0 ] float 
 19017 ;; Auto vars:     Size  Location     Type
 19018 ;;  exp1            1   45[BANK0 ] unsigned char 
 19019 ;;  exp2            1   44[BANK0 ] unsigned char 
 19020 ;;  sign            1   43[BANK0 ] unsigned char 
 19021 ;; Return value:  Size  Location     Type
 19022 ;;                  3   33[BANK0 ] float 
 19023 ;; Registers used:
 19024 ;;		wreg, status,2, status,0, pclath, cstack
 19025 ;; Tracked objects:
 19026 ;;		On entry : 0/0
 19027 ;;		On exit  : 0/0
 19028 ;;		Unchanged: 0/0
 19029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19030 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19031 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19032 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19033 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19034 ;;Total ram usage:       13 bytes
 19035 ;; Hardware stack levels used:    1
 19036 ;; Hardware stack levels required when called:    6
 19037 ;; This function calls:
 19038 ;;		___ftpack
 19039 ;; This function is called by:
 19040 ;;		_getDimmerLights_PercentToValue
 19041 ;;		_getDimmerLights_ValueToPercent
 19042 ;; This function uses a non-reentrant model
 19043 ;;
 19044                           
 19045                           
 19046                           ;psect for function ___ftadd
 19047  043D                     ___ftadd:	
 19048                           
 19049                           ;incstack = 0
 19050                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 19051  043D  0020               	movlb	0	; select bank0
 19052  043E  0841               	movf	___ftadd@f1,w
 19053  043F  00C7               	movwf	??___ftadd
 19054  0440  0842               	movf	___ftadd@f1+1,w
 19055  0441  00C8               	movwf	??___ftadd+1
 19056  0442  0843               	movf	___ftadd@f1+2,w
 19057  0443  00C9               	movwf	??___ftadd+2
 19058  0444  1003               	clrc
 19059  0445  0D48               	rlf	??___ftadd+1,w
 19060  0446  0D49               	rlf	??___ftadd+2,w
 19061  0447  00CA               	movwf	??___ftadd+3
 19062  0448  084A               	movf	??___ftadd+3,w
 19063  0449  00CD               	movwf	___ftadd@exp1
 19064  044A  0844               	movf	___ftadd@f2,w
 19065  044B  00C7               	movwf	??___ftadd
 19066  044C  0845               	movf	___ftadd@f2+1,w
 19067  044D  00C8               	movwf	??___ftadd+1
 19068  044E  0846               	movf	___ftadd@f2+2,w
 19069  044F  00C9               	movwf	??___ftadd+2
 19070  0450  1003               	clrc
 19071  0451  0D48               	rlf	??___ftadd+1,w
 19072  0452  0D49               	rlf	??___ftadd+2,w
 19073  0453  00CA               	movwf	??___ftadd+3
 19074  0454  084A               	movf	??___ftadd+3,w
 19075  0455  00CC               	movwf	___ftadd@exp2
 19076  0456  084D               	movf	___ftadd@exp1,w
 19077  0457  1903               	btfsc	3,2
 19078  0458  2C65               	goto	l6769
 19079  0459  084C               	movf	___ftadd@exp2,w
 19080  045A  024D               	subwf	___ftadd@exp1,w
 19081  045B  1803               	skipnc
 19082  045C  2C6C               	goto	l6773
 19083  045D  034D               	decf	___ftadd@exp1,w
 19084  045E  3AFF               	xorlw	255
 19085  045F  074C               	addwf	___ftadd@exp2,w
 19086  0460  00C7               	movwf	??___ftadd
 19087  0461  3019               	movlw	25
 19088  0462  0247               	subwf	??___ftadd,w
 19089  0463  1C03               	skipc
 19090  0464  2C6C               	goto	l6773
 19091  0465                     l6769:	
 19092  0465  0844               	movf	___ftadd@f2,w
 19093  0466  00C1               	movwf	?___ftadd
 19094  0467  0845               	movf	___ftadd@f2+1,w
 19095  0468  00C2               	movwf	?___ftadd+1
 19096  0469  0846               	movf	___ftadd@f2+2,w
 19097  046A  00C3               	movwf	?___ftadd+2
 19098  046B  0008               	return
 19099  046C                     l6773:	
 19100  046C  084C               	movf	___ftadd@exp2,w
 19101  046D  1903               	btfsc	3,2
 19102  046E  0008               	return
 19103  046F  084D               	movf	___ftadd@exp1,w
 19104  0470  024C               	subwf	___ftadd@exp2,w
 19105  0471  1803               	skipnc
 19106  0472  2C7B               	goto	l6779
 19107  0473  034C               	decf	___ftadd@exp2,w
 19108  0474  3AFF               	xorlw	255
 19109  0475  074D               	addwf	___ftadd@exp1,w
 19110  0476  00C7               	movwf	??___ftadd
 19111  0477  3019               	movlw	25
 19112  0478  0247               	subwf	??___ftadd,w
 19113  0479  1803               	btfsc	3,0
 19114  047A  0008               	return
 19115  047B                     l6779:	
 19116  047B  3006               	movlw	6
 19117  047C  00C7               	movwf	??___ftadd
 19118  047D  0847               	movf	??___ftadd,w
 19119  047E  00CB               	movwf	___ftadd@sign
 19120  047F  1BC3               	btfsc	___ftadd@f1+2,7
 19121  0480  17CB               	bsf	___ftadd@sign,7
 19122  0481  1BC6               	btfsc	___ftadd@f2+2,7
 19123  0482  174B               	bsf	___ftadd@sign,6
 19124  0483  17C2               	bsf	___ftadd@f1+1,7
 19125  0484  30FF               	movlw	255
 19126  0485  05C1               	andwf	___ftadd@f1,f
 19127  0486  30FF               	movlw	255
 19128  0487  05C2               	andwf	___ftadd@f1+1,f
 19129  0488  3000               	movlw	0
 19130  0489  05C3               	andwf	___ftadd@f1+2,f
 19131  048A  17C5               	bsf	___ftadd@f2+1,7
 19132  048B  30FF               	movlw	255
 19133  048C  05C4               	andwf	___ftadd@f2,f
 19134  048D  30FF               	movlw	255
 19135  048E  05C5               	andwf	___ftadd@f2+1,f
 19136  048F  3000               	movlw	0
 19137  0490  05C6               	andwf	___ftadd@f2+2,f
 19138  0491  084C               	movf	___ftadd@exp2,w
 19139  0492  024D               	subwf	___ftadd@exp1,w
 19140  0493  1803               	skipnc
 19141  0494  2CB7               	goto	l6801
 19142  0495                     l6791:	
 19143  0495  3001               	movlw	1
 19144  0496                     u5775:	
 19145  0496  35C4               	lslf	___ftadd@f2,f
 19146  0497  0DC5               	rlf	___ftadd@f2+1,f
 19147  0498  0DC6               	rlf	___ftadd@f2+2,f
 19148  0499  0B89               	decfsz	9,f
 19149  049A  2C96               	goto	u5775
 19150  049B  3001               	movlw	1
 19151  049C  02CC               	subwf	___ftadd@exp2,f
 19152  049D  084C               	movf	___ftadd@exp2,w
 19153  049E  064D               	xorwf	___ftadd@exp1,w
 19154  049F  1903               	skipnz
 19155  04A0  2CB2               	goto	l6799
 19156  04A1  3001               	movlw	1
 19157  04A2  02CB               	subwf	___ftadd@sign,f
 19158  04A3  084B               	movf	___ftadd@sign,w
 19159  04A4  3907               	andlw	7
 19160  04A5  1903               	btfsc	3,2
 19161  04A6  2CB2               	goto	l6799
 19162  04A7  2C95               	goto	l6791
 19163  04A8                     l6797:	
 19164  04A8  3001               	movlw	1
 19165  04A9                     u5805:	
 19166  04A9  36C3               	lsrf	___ftadd@f1+2,f
 19167  04AA  0CC2               	rrf	___ftadd@f1+1,f
 19168  04AB  0CC1               	rrf	___ftadd@f1,f
 19169  04AC  0B89               	decfsz	9,f
 19170  04AD  2CA9               	goto	u5805
 19171  04AE  3001               	movlw	1
 19172  04AF  00C7               	movwf	??___ftadd
 19173  04B0  0847               	movf	??___ftadd,w
 19174  04B1  07CD               	addwf	___ftadd@exp1,f
 19175  04B2                     l6799:	
 19176  04B2  084D               	movf	___ftadd@exp1,w
 19177  04B3  064C               	xorwf	___ftadd@exp2,w
 19178  04B4  1903               	btfsc	3,2
 19179  04B5  2CDC               	goto	l3284
 19180  04B6  2CA8               	goto	l6797
 19181  04B7                     l6801:	
 19182  04B7  084D               	movf	___ftadd@exp1,w
 19183  04B8  024C               	subwf	___ftadd@exp2,w
 19184  04B9  1803               	skipnc
 19185  04BA  2CDC               	goto	l3284
 19186  04BB                     l6803:	
 19187  04BB  3001               	movlw	1
 19188  04BC                     u5835:	
 19189  04BC  35C1               	lslf	___ftadd@f1,f
 19190  04BD  0DC2               	rlf	___ftadd@f1+1,f
 19191  04BE  0DC3               	rlf	___ftadd@f1+2,f
 19192  04BF  0B89               	decfsz	9,f
 19193  04C0  2CBC               	goto	u5835
 19194  04C1  3001               	movlw	1
 19195  04C2  02CD               	subwf	___ftadd@exp1,f
 19196  04C3  084C               	movf	___ftadd@exp2,w
 19197  04C4  064D               	xorwf	___ftadd@exp1,w
 19198  04C5  1903               	skipnz
 19199  04C6  2CD8               	goto	l6811
 19200  04C7  3001               	movlw	1
 19201  04C8  02CB               	subwf	___ftadd@sign,f
 19202  04C9  084B               	movf	___ftadd@sign,w
 19203  04CA  3907               	andlw	7
 19204  04CB  1903               	btfsc	3,2
 19205  04CC  2CD8               	goto	l6811
 19206  04CD  2CBB               	goto	l6803
 19207  04CE                     l6809:	
 19208  04CE  3001               	movlw	1
 19209  04CF                     u5865:	
 19210  04CF  36C6               	lsrf	___ftadd@f2+2,f
 19211  04D0  0CC5               	rrf	___ftadd@f2+1,f
 19212  04D1  0CC4               	rrf	___ftadd@f2,f
 19213  04D2  0B89               	decfsz	9,f
 19214  04D3  2CCF               	goto	u5865
 19215  04D4  3001               	movlw	1
 19216  04D5  00C7               	movwf	??___ftadd
 19217  04D6  0847               	movf	??___ftadd,w
 19218  04D7  07CC               	addwf	___ftadd@exp2,f
 19219  04D8                     l6811:	
 19220  04D8  084D               	movf	___ftadd@exp1,w
 19221  04D9  064C               	xorwf	___ftadd@exp2,w
 19222  04DA  1D03               	skipz
 19223  04DB  2CCE               	goto	l6809
 19224  04DC                     l3284:	
 19225  04DC  1FCB               	btfss	___ftadd@sign,7
 19226  04DD  2CEE               	goto	l6815
 19227  04DE  30FF               	movlw	255
 19228  04DF  06C1               	xorwf	___ftadd@f1,f
 19229  04E0  30FF               	movlw	255
 19230  04E1  06C2               	xorwf	___ftadd@f1+1,f
 19231  04E2  30FF               	movlw	255
 19232  04E3  06C3               	xorwf	___ftadd@f1+2,f
 19233  04E4  3001               	movlw	1
 19234  04E5  07C1               	addwf	___ftadd@f1,f
 19235  04E6  3000               	movlw	0
 19236  04E7  1803               	skipnc
 19237  04E8  3001               	movlw	1
 19238  04E9  07C2               	addwf	___ftadd@f1+1,f
 19239  04EA  3000               	movlw	0
 19240  04EB  1803               	skipnc
 19241  04EC  3001               	movlw	1
 19242  04ED  07C3               	addwf	___ftadd@f1+2,f
 19243  04EE                     l6815:	
 19244  04EE  1F4B               	btfss	___ftadd@sign,6
 19245  04EF  2D00               	goto	l6819
 19246  04F0  30FF               	movlw	255
 19247  04F1  06C4               	xorwf	___ftadd@f2,f
 19248  04F2  30FF               	movlw	255
 19249  04F3  06C5               	xorwf	___ftadd@f2+1,f
 19250  04F4  30FF               	movlw	255
 19251  04F5  06C6               	xorwf	___ftadd@f2+2,f
 19252  04F6  3001               	movlw	1
 19253  04F7  07C4               	addwf	___ftadd@f2,f
 19254  04F8  3000               	movlw	0
 19255  04F9  1803               	skipnc
 19256  04FA  3001               	movlw	1
 19257  04FB  07C5               	addwf	___ftadd@f2+1,f
 19258  04FC  3000               	movlw	0
 19259  04FD  1803               	skipnc
 19260  04FE  3001               	movlw	1
 19261  04FF  07C6               	addwf	___ftadd@f2+2,f
 19262  0500                     l6819:	
 19263  0500  01CB               	clrf	___ftadd@sign
 19264  0501  0841               	movf	___ftadd@f1,w
 19265  0502  07C4               	addwf	___ftadd@f2,f
 19266  0503  0842               	movf	___ftadd@f1+1,w
 19267  0504  3DC5               	addwfc	___ftadd@f2+1,f
 19268  0505  0843               	movf	___ftadd@f1+2,w
 19269  0506  3DC6               	addwfc	___ftadd@f2+2,f
 19270  0507  1FC6               	btfss	___ftadd@f2+2,7
 19271  0508  2D1B               	goto	l6829
 19272  0509  30FF               	movlw	255
 19273  050A  06C4               	xorwf	___ftadd@f2,f
 19274  050B  30FF               	movlw	255
 19275  050C  06C5               	xorwf	___ftadd@f2+1,f
 19276  050D  30FF               	movlw	255
 19277  050E  06C6               	xorwf	___ftadd@f2+2,f
 19278  050F  3001               	movlw	1
 19279  0510  07C4               	addwf	___ftadd@f2,f
 19280  0511  3000               	movlw	0
 19281  0512  1803               	skipnc
 19282  0513  3001               	movlw	1
 19283  0514  07C5               	addwf	___ftadd@f2+1,f
 19284  0515  3000               	movlw	0
 19285  0516  1803               	skipnc
 19286  0517  3001               	movlw	1
 19287  0518  07C6               	addwf	___ftadd@f2+2,f
 19288  0519  01CB               	clrf	___ftadd@sign
 19289  051A  0ACB               	incf	___ftadd@sign,f
 19290  051B                     l6829:	
 19291  051B  0844               	movf	___ftadd@f2,w
 19292  051C  00A0               	movwf	___ftpack@arg
 19293  051D  0845               	movf	___ftadd@f2+1,w
 19294  051E  00A1               	movwf	___ftpack@arg+1
 19295  051F  0846               	movf	___ftadd@f2+2,w
 19296  0520  00A2               	movwf	___ftpack@arg+2
 19297  0521  084D               	movf	___ftadd@exp1,w
 19298  0522  00C7               	movwf	??___ftadd
 19299  0523  0847               	movf	??___ftadd,w
 19300  0524  00A3               	movwf	___ftpack@exp
 19301  0525  084B               	movf	___ftadd@sign,w
 19302  0526  00C8               	movwf	??___ftadd+1
 19303  0527  0848               	movf	??___ftadd+1,w
 19304  0528  00A4               	movwf	___ftpack@sign
 19305  0529  3192  22F2         	fcall	___ftpack
 19306  052B  0020               	movlb	0	; select bank0
 19307  052C  0820               	movf	?___ftpack,w
 19308  052D  00C1               	movwf	?___ftadd
 19309  052E  0821               	movf	?___ftpack+1,w
 19310  052F  00C2               	movwf	?___ftadd+1
 19311  0530  0822               	movf	?___ftpack+2,w
 19312  0531  00C3               	movwf	?___ftadd+2
 19313  0532  0008               	return
 19314  0533                     __end_of___ftadd:	
 19315                           
 19316                           	psect	text126
 19317  1C34                     __ptext126:	
 19318 ;; *************** function ___awtoft *****************
 19319 ;; Defined at:
 19320 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 19321 ;; Parameters:    Size  Location     Type
 19322 ;;  c               2    8[BANK0 ] int 
 19323 ;; Auto vars:     Size  Location     Type
 19324 ;;  sign            1   13[BANK0 ] unsigned char 
 19325 ;; Return value:  Size  Location     Type
 19326 ;;                  3    8[BANK0 ] float 
 19327 ;; Registers used:
 19328 ;;		wreg, status,2, status,0, pclath, cstack
 19329 ;; Tracked objects:
 19330 ;;		On entry : 0/0
 19331 ;;		On exit  : 0/0
 19332 ;;		Unchanged: 0/0
 19333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19334 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19335 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19337 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19338 ;;Total ram usage:        6 bytes
 19339 ;; Hardware stack levels used:    1
 19340 ;; Hardware stack levels required when called:    6
 19341 ;; This function calls:
 19342 ;;		___ftpack
 19343 ;; This function is called by:
 19344 ;;		_getDimmerLights_PercentToValue
 19345 ;;		_getDimmerLights_ValueToPercent
 19346 ;; This function uses a non-reentrant model
 19347 ;;
 19348                           
 19349                           
 19350                           ;psect for function ___awtoft
 19351  1C34                     ___awtoft:	
 19352                           
 19353                           ;incstack = 0
 19354                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 19355  1C34  0020               	movlb	0	; select bank0
 19356  1C35  01AD               	clrf	___awtoft@sign
 19357  1C36  1FA9               	btfss	___awtoft@c+1,7
 19358  1C37  2C3F               	goto	l6757
 19359  1C38  09A8               	comf	___awtoft@c,f
 19360  1C39  09A9               	comf	___awtoft@c+1,f
 19361  1C3A  0AA8               	incf	___awtoft@c,f
 19362  1C3B  1903               	skipnz
 19363  1C3C  0AA9               	incf	___awtoft@c+1,f
 19364  1C3D  01AD               	clrf	___awtoft@sign
 19365  1C3E  0AAD               	incf	___awtoft@sign,f
 19366  1C3F                     l6757:	
 19367  1C3F  0828               	movf	___awtoft@c,w
 19368  1C40  00A0               	movwf	___ftpack@arg
 19369  1C41  0829               	movf	___awtoft@c+1,w
 19370  1C42  00A1               	movwf	___ftpack@arg+1
 19371  1C43  01A2               	clrf	___ftpack@arg+2
 19372  1C44  308E               	movlw	142
 19373  1C45  00AB               	movwf	??___awtoft
 19374  1C46  082B               	movf	??___awtoft,w
 19375  1C47  00A3               	movwf	___ftpack@exp
 19376  1C48  082D               	movf	___awtoft@sign,w
 19377  1C49  00AC               	movwf	??___awtoft+1
 19378  1C4A  082C               	movf	??___awtoft+1,w
 19379  1C4B  00A4               	movwf	___ftpack@sign
 19380  1C4C  3192  22F2         	fcall	___ftpack
 19381  1C4E  0020               	movlb	0	; select bank0
 19382  1C4F  0820               	movf	?___ftpack,w
 19383  1C50  00A8               	movwf	?___awtoft
 19384  1C51  0821               	movf	?___ftpack+1,w
 19385  1C52  00A9               	movwf	?___awtoft+1
 19386  1C53  0822               	movf	?___ftpack+2,w
 19387  1C54  00AA               	movwf	?___awtoft+2
 19388  1C55  0008               	return
 19389  1C56                     __end_of___awtoft:	
 19390                           
 19391                           	psect	text127
 19392  12F2                     __ptext127:	
 19393 ;; *************** function ___ftpack *****************
 19394 ;; Defined at:
 19395 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 19396 ;; Parameters:    Size  Location     Type
 19397 ;;  arg             3    0[BANK0 ] unsigned um
 19398 ;;  exp             1    3[BANK0 ] unsigned char 
 19399 ;;  sign            1    4[BANK0 ] unsigned char 
 19400 ;; Auto vars:     Size  Location     Type
 19401 ;;		None
 19402 ;; Return value:  Size  Location     Type
 19403 ;;                  3    0[BANK0 ] float 
 19404 ;; Registers used:
 19405 ;;		wreg, status,2, status,0
 19406 ;; Tracked objects:
 19407 ;;		On entry : 0/0
 19408 ;;		On exit  : 0/0
 19409 ;;		Unchanged: 0/0
 19410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19411 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19413 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19414 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19415 ;;Total ram usage:        8 bytes
 19416 ;; Hardware stack levels used:    1
 19417 ;; Hardware stack levels required when called:    5
 19418 ;; This function calls:
 19419 ;;		Nothing
 19420 ;; This function is called by:
 19421 ;;		___awtoft
 19422 ;;		___ftadd
 19423 ;;		___ftdiv
 19424 ;;		___ftmul
 19425 ;; This function uses a non-reentrant model
 19426 ;;
 19427                           
 19428                           
 19429                           ;psect for function ___ftpack
 19430  12F2                     ___ftpack:	
 19431                           
 19432                           ;incstack = 0
 19433                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 19434  12F2  0020               	movlb	0	; select bank0
 19435  12F3  0823               	movf	___ftpack@exp,w
 19436  12F4  1903               	btfsc	3,2
 19437  12F5  2AFB               	goto	l6603
 19438  12F6  0822               	movf	___ftpack@arg+2,w
 19439  12F7  0421               	iorwf	___ftpack@arg+1,w
 19440  12F8  0420               	iorwf	___ftpack@arg,w
 19441  12F9  1D03               	skipz
 19442  12FA  2B0C               	goto	l6609
 19443  12FB                     l6603:	
 19444  12FB  3000               	movlw	0
 19445  12FC  00A0               	movwf	?___ftpack
 19446  12FD  3000               	movlw	0
 19447  12FE  00A1               	movwf	?___ftpack+1
 19448  12FF  3000               	movlw	0
 19449  1300  00A2               	movwf	?___ftpack+2
 19450  1301  0008               	return
 19451  1302                     l6607:	
 19452  1302  3001               	movlw	1
 19453  1303  00A5               	movwf	??___ftpack
 19454  1304  0825               	movf	??___ftpack,w
 19455  1305  07A3               	addwf	___ftpack@exp,f
 19456  1306  3001               	movlw	1
 19457  1307                     u5365:	
 19458  1307  36A2               	lsrf	___ftpack@arg+2,f
 19459  1308  0CA1               	rrf	___ftpack@arg+1,f
 19460  1309  0CA0               	rrf	___ftpack@arg,f
 19461  130A  0B89               	decfsz	9,f
 19462  130B  2B07               	goto	u5365
 19463  130C                     l6609:	
 19464  130C  30FE               	movlw	254
 19465  130D  0522               	andwf	___ftpack@arg+2,w
 19466  130E  1903               	btfsc	3,2
 19467  130F  2B25               	goto	l3255
 19468  1310  2B02               	goto	l6607
 19469  1311                     l6611:	
 19470  1311  3001               	movlw	1
 19471  1312  00A5               	movwf	??___ftpack
 19472  1313  0825               	movf	??___ftpack,w
 19473  1314  07A3               	addwf	___ftpack@exp,f
 19474  1315  3001               	movlw	1
 19475  1316  07A0               	addwf	___ftpack@arg,f
 19476  1317  3000               	movlw	0
 19477  1318  1803               	skipnc
 19478  1319  3001               	movlw	1
 19479  131A  07A1               	addwf	___ftpack@arg+1,f
 19480  131B  3000               	movlw	0
 19481  131C  1803               	skipnc
 19482  131D  3001               	movlw	1
 19483  131E  07A2               	addwf	___ftpack@arg+2,f
 19484  131F  3001               	movlw	1
 19485  1320                     u5385:	
 19486  1320  36A2               	lsrf	___ftpack@arg+2,f
 19487  1321  0CA1               	rrf	___ftpack@arg+1,f
 19488  1322  0CA0               	rrf	___ftpack@arg,f
 19489  1323  0B89               	decfsz	9,f
 19490  1324  2B20               	goto	u5385
 19491  1325                     l3255:	
 19492  1325  30FF               	movlw	255
 19493  1326  0522               	andwf	___ftpack@arg+2,w
 19494  1327  1903               	btfsc	3,2
 19495  1328  2B32               	goto	l6619
 19496  1329  2B11               	goto	l6611
 19497  132A                     l6617:	
 19498  132A  3001               	movlw	1
 19499  132B  02A3               	subwf	___ftpack@exp,f
 19500  132C  3001               	movlw	1
 19501  132D                     u5405:	
 19502  132D  35A0               	lslf	___ftpack@arg,f
 19503  132E  0DA1               	rlf	___ftpack@arg+1,f
 19504  132F  0DA2               	rlf	___ftpack@arg+2,f
 19505  1330  0B89               	decfsz	9,f
 19506  1331  2B2D               	goto	u5405
 19507  1332                     l6619:	
 19508  1332  1FA1               	btfss	___ftpack@arg+1,7
 19509  1333  2B2A               	goto	l6617
 19510  1334  1823               	btfsc	___ftpack@exp,0
 19511  1335  2B3C               	goto	l3261
 19512  1336  30FF               	movlw	255
 19513  1337  05A0               	andwf	___ftpack@arg,f
 19514  1338  307F               	movlw	127
 19515  1339  05A1               	andwf	___ftpack@arg+1,f
 19516  133A  30FF               	movlw	255
 19517  133B  05A2               	andwf	___ftpack@arg+2,f
 19518  133C                     l3261:	
 19519  133C  1003               	clrc
 19520  133D  0CA3               	rrf	___ftpack@exp,f
 19521  133E  0823               	movf	___ftpack@exp,w
 19522  133F  00A5               	movwf	??___ftpack
 19523  1340  01A6               	clrf	??___ftpack+1
 19524  1341  01A7               	clrf	??___ftpack+2
 19525  1342  3010               	movlw	16
 19526  1343                     u5435:	
 19527  1343  35A5               	lslf	??___ftpack,f
 19528  1344  0DA6               	rlf	??___ftpack+1,f
 19529  1345  0DA7               	rlf	??___ftpack+2,f
 19530  1346  0B89               	decfsz	9,f
 19531  1347  2B43               	goto	u5435
 19532  1348  0825               	movf	??___ftpack,w
 19533  1349  04A0               	iorwf	___ftpack@arg,f
 19534  134A  0826               	movf	??___ftpack+1,w
 19535  134B  04A1               	iorwf	___ftpack@arg+1,f
 19536  134C  0827               	movf	??___ftpack+2,w
 19537  134D  04A2               	iorwf	___ftpack@arg+2,f
 19538  134E  0824               	movf	___ftpack@sign,w
 19539  134F  1903               	btfsc	3,2
 19540  1350  0008               	return
 19541  1351  17A2               	bsf	___ftpack@arg+2,7
 19542  1352  0008               	return
 19543  1353                     __end_of___ftpack:	
 19544                           
 19545                           	psect	text128
 19546  2721                     __ptext128:	
 19547 ;; *************** function _Division *****************
 19548 ;; Defined at:
 19549 ;;		line 1499 in file "../src/Dimmer_B1.c"
 19550 ;; Parameters:    Size  Location     Type
 19551 ;;  value           1    wreg     unsigned char 
 19552 ;;  num             1    5[BANK0 ] unsigned char 
 19553 ;; Auto vars:     Size  Location     Type
 19554 ;;  value           1    8[BANK0 ] unsigned char 
 19555 ;;  result          1    9[BANK0 ] unsigned char 
 19556 ;; Return value:  Size  Location     Type
 19557 ;;                  1    wreg      unsigned char 
 19558 ;; Registers used:
 19559 ;;		wreg, status,2, status,0, pclath, cstack
 19560 ;; Tracked objects:
 19561 ;;		On entry : 0/0
 19562 ;;		On exit  : 0/0
 19563 ;;		Unchanged: 0/0
 19564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19565 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19566 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19567 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19568 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19569 ;;Total ram usage:        5 bytes
 19570 ;; Hardware stack levels used:    1
 19571 ;; Hardware stack levels required when called:    6
 19572 ;; This function calls:
 19573 ;;		___lbdiv
 19574 ;; This function is called by:
 19575 ;;		_DimmerIntr_Initialization
 19576 ;; This function uses a non-reentrant model
 19577 ;;
 19578                           
 19579                           
 19580                           ;psect for function _Division
 19581  2721                     _Division:	
 19582                           
 19583                           ;incstack = 0
 19584                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19585                           ;Division@value stored from wreg
 19586  2721  0020               	movlb	0	; select bank0
 19587  2722  00A8               	movwf	Division@value
 19588                           
 19589                           ;Dimmer_B1.c: 1500: char result = (char) (value / num);
 19590  2723  0825               	movf	Division@num,w
 19591  2724  00A6               	movwf	??_Division
 19592  2725  0826               	movf	??_Division,w
 19593  2726  00A0               	movwf	___lbdiv@divisor
 19594  2727  0828               	movf	Division@value,w
 19595  2728  319C  2412         	fcall	___lbdiv
 19596  272A  0020               	movlb	0	; select bank0
 19597  272B  00A7               	movwf	??_Division+1
 19598  272C  0827               	movf	??_Division+1,w
 19599  272D  00A9               	movwf	Division@result
 19600                           
 19601                           ;Dimmer_B1.c: 1501: return result;
 19602  272E  0829               	movf	Division@result,w
 19603  272F  0008               	return
 19604  2730                     __end_of_Division:	
 19605                           
 19606                           	psect	text129
 19607  1C12                     __ptext129:	
 19608 ;; *************** function ___lbdiv *****************
 19609 ;; Defined at:
 19610 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19611 ;; Parameters:    Size  Location     Type
 19612 ;;  dividend        1    wreg     unsigned char 
 19613 ;;  divisor         1    0[BANK0 ] unsigned char 
 19614 ;; Auto vars:     Size  Location     Type
 19615 ;;  dividend        1    2[BANK0 ] unsigned char 
 19616 ;;  quotient        1    4[BANK0 ] unsigned char 
 19617 ;;  counter         1    3[BANK0 ] unsigned char 
 19618 ;; Return value:  Size  Location     Type
 19619 ;;                  1    wreg      unsigned char 
 19620 ;; Registers used:
 19621 ;;		wreg, status,2, status,0
 19622 ;; Tracked objects:
 19623 ;;		On entry : 0/0
 19624 ;;		On exit  : 0/0
 19625 ;;		Unchanged: 0/0
 19626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19627 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19628 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19629 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19630 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19631 ;;Total ram usage:        5 bytes
 19632 ;; Hardware stack levels used:    1
 19633 ;; Hardware stack levels required when called:    5
 19634 ;; This function calls:
 19635 ;;		Nothing
 19636 ;; This function is called by:
 19637 ;;		_Division
 19638 ;; This function uses a non-reentrant model
 19639 ;;
 19640                           
 19641                           
 19642                           ;psect for function ___lbdiv
 19643  1C12                     ___lbdiv:	
 19644                           
 19645                           ;incstack = 0
 19646                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19647                           ;___lbdiv@dividend stored from wreg
 19648  1C12  0020               	movlb	0	; select bank0
 19649  1C13  00A2               	movwf	___lbdiv@dividend
 19650  1C14  01A4               	clrf	___lbdiv@quotient
 19651  1C15  0820               	movf	___lbdiv@divisor,w
 19652  1C16  1903               	btfsc	3,2
 19653  1C17  2C32               	goto	l7693
 19654  1C18  01A3               	clrf	___lbdiv@counter
 19655  1C19  0AA3               	incf	___lbdiv@counter,f
 19656  1C1A                     l7681:	
 19657  1C1A  1BA0               	btfsc	___lbdiv@divisor,7
 19658  1C1B  2C23               	goto	l7683
 19659  1C1C  1003               	clrc
 19660  1C1D  0DA0               	rlf	___lbdiv@divisor,f
 19661  1C1E  3001               	movlw	1
 19662  1C1F  00A1               	movwf	??___lbdiv
 19663  1C20  0821               	movf	??___lbdiv,w
 19664  1C21  07A3               	addwf	___lbdiv@counter,f
 19665  1C22  2C1A               	goto	l7681
 19666  1C23                     l7683:	
 19667  1C23  1003               	clrc
 19668  1C24  0DA4               	rlf	___lbdiv@quotient,f
 19669  1C25  0820               	movf	___lbdiv@divisor,w
 19670  1C26  0222               	subwf	___lbdiv@dividend,w
 19671  1C27  1C03               	skipc
 19672  1C28  2C2D               	goto	L13
 19673  1C29  0820               	movf	___lbdiv@divisor,w
 19674  1C2A  02A2               	subwf	___lbdiv@dividend,f
 19675  1C2B  1424               	bsf	___lbdiv@quotient,0
 19676  1C2C  1003               	clrc
 19677  1C2D                     L13:	
 19678  1C2D  0CA0               	rrf	___lbdiv@divisor,f
 19679  1C2E  3001               	movlw	1
 19680  1C2F  02A3               	subwf	___lbdiv@counter,f
 19681  1C30  1D03               	btfss	3,2
 19682  1C31  2C23               	goto	l7683
 19683  1C32                     l7693:	
 19684  1C32  0824               	movf	___lbdiv@quotient,w
 19685  1C33  0008               	return
 19686  1C34                     __end_of___lbdiv:	
 19687                           
 19688                           	psect	text130
 19689  262E                     __ptext130:	
 19690 ;; *************** function _DelayOff_Main *****************
 19691 ;; Defined at:
 19692 ;;		line 41 in file "../src/DelayOff_B1.c"
 19693 ;; Parameters:    Size  Location     Type
 19694 ;;		None
 19695 ;; Auto vars:     Size  Location     Type
 19696 ;;		None
 19697 ;; Return value:  Size  Location     Type
 19698 ;;		None               void
 19699 ;; Registers used:
 19700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19701 ;; Tracked objects:
 19702 ;;		On entry : 0/0
 19703 ;;		On exit  : 0/0
 19704 ;;		Unchanged: 0/0
 19705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19710 ;;Total ram usage:        0 bytes
 19711 ;; Hardware stack levels used:    1
 19712 ;; Hardware stack levels required when called:    9
 19713 ;; This function calls:
 19714 ;;		_DlyOff_Main
 19715 ;; This function is called by:
 19716 ;;		_main
 19717 ;; This function uses a non-reentrant model
 19718 ;;
 19719                           
 19720                           
 19721                           ;psect for function _DelayOff_Main
 19722  262E                     _DelayOff_Main:	
 19723                           
 19724                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 19725                           
 19726                           ;incstack = 0
 19727                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19728  262E  3001               	movlw	1
 19729  262F  3196  262B  31A6   	fcall	_DlyOff_Main
 19730                           
 19731                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 19732  2632  3002               	movlw	2
 19733  2633  3196  262B         	fcall	_DlyOff_Main
 19734  2635  0008               	return
 19735  2636                     __end_of_DelayOff_Main:	
 19736                           
 19737                           	psect	text131
 19738  162B                     __ptext131:	
 19739 ;; *************** function _DlyOff_Main *****************
 19740 ;; Defined at:
 19741 ;;		line 61 in file "../src/DelayOff_B1.c"
 19742 ;; Parameters:    Size  Location     Type
 19743 ;;  sw              1    wreg     unsigned char 
 19744 ;; Auto vars:     Size  Location     Type
 19745 ;;  sw              1   71[BANK0 ] unsigned char 
 19746 ;; Return value:  Size  Location     Type
 19747 ;;		None               void
 19748 ;; Registers used:
 19749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19750 ;; Tracked objects:
 19751 ;;		On entry : 0/0
 19752 ;;		On exit  : 0/0
 19753 ;;		Unchanged: 0/0
 19754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19756 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19757 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19758 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19759 ;;Total ram usage:        3 bytes
 19760 ;; Hardware stack levels used:    1
 19761 ;; Hardware stack levels required when called:    8
 19762 ;; This function calls:
 19763 ;;		_DelayOffPointSelect
 19764 ;;		_getDimmerLights_Status
 19765 ;;		_setDimmerLights_SwOff
 19766 ;;		_setDimmerLights_SwOn
 19767 ;;		_setProductData
 19768 ;; This function is called by:
 19769 ;;		_DelayOff_Main
 19770 ;; This function uses a non-reentrant model
 19771 ;;
 19772                           
 19773                           
 19774                           ;psect for function _DlyOff_Main
 19775  162B                     _DlyOff_Main:	
 19776                           
 19777                           ;incstack = 0
 19778                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19779                           ;DlyOff_Main@sw stored from wreg
 19780  162B  0020               	movlb	0	; select bank0
 19781  162C  00E7               	movwf	DlyOff_Main@sw
 19782                           
 19783                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 19784  162D  0867               	movf	DlyOff_Main@sw,w
 19785  162E  3199  2158  3196   	fcall	_DelayOffPointSelect
 19786                           
 19787                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 19788  1631  0021               	movlb	1	; select bank1
 19789  1632  0858               	movf	_DelayOff^(0+128),w
 19790  1633  0086               	movwf	6
 19791  1634  3001               	movlw	1	; select bank2/3
 19792  1635  0087               	movwf	7
 19793  1636  1C81               	btfss	1,1
 19794  1637  0008               	return
 19795                           
 19796                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 19797  1638  0858               	movf	_DelayOff^(0+128),w
 19798  1639  3E02               	addlw	2
 19799  163A  0086               	movwf	6
 19800  163B  3001               	movlw	1	; select bank2/3
 19801  163C  0087               	movwf	7
 19802  163D  3001               	movlw	1
 19803  163E  0781               	addwf	1,f
 19804  163F  3141               	addfsr 1,1
 19805  1640  1803               	skipnc
 19806  1641  0A81               	incf	1,f
 19807                           
 19808                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 19809  1642  0858               	movf	_DelayOff^(0+128),w
 19810  1643  3E02               	addlw	2
 19811  1644  0086               	movwf	6
 19812  1645  3001               	movlw	1	; select bank2/3
 19813  1646  0087               	movwf	7
 19814  1647  3F40               	moviw [0]fsr1
 19815  1648  0020               	movlb	0	; select bank0
 19816  1649  00E5               	movwf	??_DlyOff_Main
 19817  164A  3F41               	moviw [1]fsr1
 19818  164B  00E6               	movwf	??_DlyOff_Main+1
 19819  164C  300B               	movlw	11
 19820  164D  0266               	subwf	??_DlyOff_Main+1,w
 19821  164E  30B8               	movlw	184
 19822  164F  1903               	skipnz
 19823  1650  0265               	subwf	??_DlyOff_Main,w
 19824  1651  1C03               	skipc
 19825  1652  0008               	return
 19826                           
 19827                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 19828  1653  0021               	movlb	1	; select bank1
 19829  1654  0858               	movf	_DelayOff^(0+128),w
 19830  1655  3E02               	addlw	2
 19831  1656  0086               	movwf	6
 19832  1657  3001               	movlw	1	; select bank2/3
 19833  1658  0087               	movwf	7
 19834  1659  3000               	movlw	0
 19835  165A  3FC0               	movwi [0]fsr1
 19836  165B  3FC1               	movwi [1]fsr1
 19837                           
 19838                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 19839  165C  3001               	movlw	1
 19840  165D  0020               	movlb	0	; select bank0
 19841  165E  00E5               	movwf	??_DlyOff_Main
 19842  165F  0021               	movlb	1	; select bank1
 19843  1660  0858               	movf	_DelayOff^(0+128),w
 19844  1661  3E04               	addlw	4
 19845  1662  0086               	movwf	6
 19846  1663  3001               	movlw	1	; select bank2/3
 19847  1664  0087               	movwf	7
 19848  1665  0020               	movlb	0	; select bank0
 19849  1666  0865               	movf	??_DlyOff_Main,w
 19850  1667  0781               	addwf	1,f
 19851                           
 19852                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 19853  1668  0021               	movlb	1	; select bank1
 19854  1669  0858               	movf	_DelayOff^(0+128),w
 19855  166A  3E04               	addlw	4
 19856  166B  0086               	movwf	6
 19857  166C  3001               	movlw	1	; select bank2/3
 19858  166D  0087               	movwf	7
 19859  166E  0A58               	incf	_DelayOff^(0+128),w
 19860  166F  0084               	movwf	4
 19861  1670  3001               	movlw	1	; select bank2/3
 19862  1671  0085               	movwf	5
 19863  1672  0800               	movf	0,w
 19864  1673  0201               	subwf	1,w
 19865  1674  1C03               	skipc
 19866  1675  0008               	return
 19867                           
 19868                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 19869  1676  0858               	movf	_DelayOff^(0+128),w
 19870  1677  3E04               	addlw	4
 19871  1678  0086               	movwf	6
 19872  1679  3001               	movlw	1	; select bank2/3
 19873  167A  0087               	movwf	7
 19874  167B  0181               	clrf	1
 19875                           
 19876                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 19877  167C  0858               	movf	_DelayOff^(0+128),w
 19878  167D  0086               	movwf	6
 19879  167E  3001               	movlw	1	; select bank2/3
 19880  167F  0087               	movwf	7
 19881  1680  1081               	bcf	1,1
 19882                           
 19883                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 19884  1681  0020               	movlb	0	; select bank0
 19885  1682  0867               	movf	DlyOff_Main@sw,w
 19886  1683  31A7  273F  3196   	fcall	_getDimmerLights_Status
 19887  1686  3A01               	xorlw	1
 19888  1687  1D03               	skipz
 19889  1688  2E93               	goto	l581
 19890                           
 19891                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 19892  1689  0020               	movlb	0	; select bank0
 19893  168A  0867               	movf	DlyOff_Main@sw,w
 19894  168B  3197  270C  3196   	fcall	_setDimmerLights_SwOn
 19895                           
 19896                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 19897  168E  0020               	movlb	0	; select bank0
 19898  168F  0867               	movf	DlyOff_Main@sw,w
 19899  1690  319E  26D5  3196   	fcall	_setDimmerLights_SwOff
 19900  1693                     l581:	
 19901                           
 19902                           ;DelayOff_B1.c: 78: }
 19903                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 19904  1693  0020               	movlb	0	; select bank0
 19905  1694  01E2               	clrf	setProductData@value
 19906  1695  0867               	movf	DlyOff_Main@sw,w
 19907  1696  3E1A               	addlw	26
 19908  1697  31A6  26A8         	fcall	_setProductData
 19909  1699  0008               	return
 19910  169A                     __end_of_DlyOff_Main:	
 19911                           
 19912                           	psect	text132
 19913  26A8                     __ptext132:	
 19914 ;; *************** function _setProductData *****************
 19915 ;; Defined at:
 19916 ;;		line 645 in file "../src/Main_B1.c"
 19917 ;; Parameters:    Size  Location     Type
 19918 ;;  address         1    wreg     unsigned char 
 19919 ;;  value           1   66[BANK0 ] unsigned char 
 19920 ;; Auto vars:     Size  Location     Type
 19921 ;;  address         1   68[BANK0 ] unsigned char 
 19922 ;; Return value:  Size  Location     Type
 19923 ;;		None               void
 19924 ;; Registers used:
 19925 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19926 ;; Tracked objects:
 19927 ;;		On entry : 0/0
 19928 ;;		On exit  : 0/0
 19929 ;;		Unchanged: 0/0
 19930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19931 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19934 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19935 ;;Total ram usage:        3 bytes
 19936 ;; Hardware stack levels used:    1
 19937 ;; Hardware stack levels required when called:    5
 19938 ;; This function calls:
 19939 ;;		Nothing
 19940 ;; This function is called by:
 19941 ;;		_DlyOff_Main
 19942 ;;		_setDelayOff_GO
 19943 ;;		_setDimmerLights_OnOff
 19944 ;;		_setDimmerLights_Dimming
 19945 ;;		_Load_Main
 19946 ;;		_setTemp_Main
 19947 ;;		_setLog_Code
 19948 ;;		_setControl_Lights_Table
 19949 ;;		_setRFSW_AdjControl
 19950 ;;		_setRF_DimmerLights
 19951 ;; This function uses a non-reentrant model
 19952 ;;
 19953                           
 19954                           
 19955                           ;psect for function _setProductData
 19956  26A8                     _setProductData:	
 19957                           
 19958                           ;incstack = 0
 19959                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 19960                           ;setProductData@address stored from wreg
 19961  26A8  0020               	movlb	0	; select bank0
 19962  26A9  00E4               	movwf	setProductData@address
 19963                           
 19964                           ;Main_B1.c: 646: _product.Data[address] = value;
 19965  26AA  0862               	movf	setProductData@value,w
 19966  26AB  00E3               	movwf	??_setProductData
 19967  26AC  0864               	movf	setProductData@address,w
 19968  26AD  3E4E               	addlw	__product& (0+255)
 19969  26AE  0086               	movwf	6
 19970  26AF  3002               	movlw	2	; select bank4/5
 19971  26B0  0087               	movwf	7
 19972  26B1  0863               	movf	??_setProductData,w
 19973  26B2  0081               	movwf	1
 19974  26B3  0008               	return
 19975  26B4                     __end_of_setProductData:	
 19976                           
 19977                           	psect	text133
 19978  170C                     __ptext133:	
 19979 ;; *************** function _setDimmerLights_SwOn *****************
 19980 ;; Defined at:
 19981 ;;		line 729 in file "../src/Dimmer_B1.c"
 19982 ;; Parameters:    Size  Location     Type
 19983 ;;  sw              1    wreg     unsigned char 
 19984 ;; Auto vars:     Size  Location     Type
 19985 ;;  sw              1   18[BANK0 ] unsigned char 
 19986 ;;  idle            1   17[BANK0 ] unsigned char 
 19987 ;;  dimmingStatu    1   14[BANK0 ] unsigned char 
 19988 ;; Return value:  Size  Location     Type
 19989 ;;		None               void
 19990 ;; Registers used:
 19991 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19992 ;; Tracked objects:
 19993 ;;		On entry : 0/0
 19994 ;;		On exit  : 0/0
 19995 ;;		Unchanged: 0/0
 19996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19998 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19999 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20000 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20001 ;;Total ram usage:        6 bytes
 20002 ;; Hardware stack levels used:    1
 20003 ;; Hardware stack levels required when called:    7
 20004 ;; This function calls:
 20005 ;;		_DimmerLights_SelectPointer
 20006 ;;		_getDimmerIntr_Dimming_Sw
 20007 ;;		_setBuz
 20008 ;; This function is called by:
 20009 ;;		_DlyOff_Main
 20010 ;;		_setControl_Lights_Table
 20011 ;;		_setRFSW_Control
 20012 ;;		_setRFSW_AdjControl
 20013 ;;		_setSw_Main
 20014 ;; This function uses a non-reentrant model
 20015 ;;
 20016                           
 20017                           
 20018                           ;psect for function _setDimmerLights_SwOn
 20019  170C                     _setDimmerLights_SwOn:	
 20020                           
 20021                           ;incstack = 0
 20022                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20023                           ;setDimmerLights_SwOn@sw stored from wreg
 20024  170C  0020               	movlb	0	; select bank0
 20025  170D  00B2               	movwf	setDimmerLights_SwOn@sw
 20026                           
 20027                           ;Dimmer_B1.c: 730: char idle = 0;
 20028  170E  01B1               	clrf	setDimmerLights_SwOn@idle
 20029                           
 20030                           ;Dimmer_B1.c: 732: char dimmingStatus = 0;
 20031  170F  01AE               	clrf	setDimmerLights_SwOn@dimmingStatus
 20032                           
 20033                           ;Dimmer_B1.c: 733: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 20034  1710  0832               	movf	setDimmerLights_SwOn@sw,w
 20035  1711  3199  21CB  3197   	fcall	_getDimmerIntr_Dimming_Sw
 20036  1714  0020               	movlb	0	; select bank0
 20037  1715  00AD               	movwf	??_setDimmerLights_SwOn
 20038  1716  082D               	movf	??_setDimmerLights_SwOn,w
 20039  1717  00AE               	movwf	setDimmerLights_SwOn@dimmingStatus
 20040                           
 20041                           ;Dimmer_B1.c: 737: if (idle == 0) {
 20042  1718  08B1               	movf	setDimmerLights_SwOn@idle,f
 20043  1719  1D03               	skipz
 20044  171A  2F3F               	goto	l7037
 20045                           
 20046                           ;Dimmer_B1.c: 738: if (sw == 1) {
 20047  171B  0832               	movf	setDimmerLights_SwOn@sw,w
 20048  171C  3A01               	xorlw	1
 20049  171D  1D03               	skipz
 20050  171E  2F2C               	goto	l7027
 20051                           
 20052                           ;Dimmer_B1.c: 739: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 20053  171F  01AF               	clrf	_setDimmerLights_SwOn$2441
 20054  1720  0AAF               	incf	_setDimmerLights_SwOn$2441,f
 20055  1721  0023               	movlb	3	; select bank3
 20056  1722  1A47               	btfsc	_DimmerLights2^(0+384),4
 20057  1723  2F29               	goto	l7025
 20058  1724  0021               	movlb	1	; select bank1
 20059  1725  1A48               	btfsc	_DimmerIntr2^(0+128),4
 20060  1726  2F29               	goto	l7025
 20061  1727  0020               	movlb	0	; select bank0
 20062  1728  01AF               	clrf	_setDimmerLights_SwOn$2441
 20063  1729                     l7025:	
 20064  1729  0020               	movlb	0	; select bank0
 20065  172A  082F               	movf	_setDimmerLights_SwOn$2441,w
 20066  172B  2F3C               	goto	L14
 20067  172C                     l7027:	
 20068                           ;Dimmer_B1.c: 740: } else if (sw == 2) {
 20069                           
 20070  172C  0832               	movf	setDimmerLights_SwOn@sw,w
 20071  172D  3A02               	xorlw	2
 20072  172E  1D03               	skipz
 20073  172F  2F3F               	goto	l7037
 20074                           
 20075                           ;Dimmer_B1.c: 741: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 20076  1730  01B0               	clrf	_setDimmerLights_SwOn$2450
 20077  1731  0AB0               	incf	_setDimmerLights_SwOn$2450,f
 20078  1732  0023               	movlb	3	; select bank3
 20079  1733  1A3E               	btfsc	_DimmerLights1^(0+384),4
 20080  1734  2F3A               	goto	l7035
 20081  1735  0021               	movlb	1	; select bank1
 20082  1736  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 20083  1737  2F3A               	goto	l7035
 20084  1738  0020               	movlb	0	; select bank0
 20085  1739  01B0               	clrf	_setDimmerLights_SwOn$2450
 20086  173A                     l7035:	
 20087  173A  0020               	movlb	0	; select bank0
 20088  173B  0830               	movf	_setDimmerLights_SwOn$2450,w
 20089  173C                     L14:	
 20090  173C  00AD               	movwf	??_setDimmerLights_SwOn
 20091  173D  082D               	movf	??_setDimmerLights_SwOn,w
 20092  173E  00B1               	movwf	setDimmerLights_SwOn@idle
 20093  173F                     l7037:	
 20094                           
 20095                           ;Dimmer_B1.c: 742: }
 20096                           ;Dimmer_B1.c: 743: }
 20097                           ;Dimmer_B1.c: 760: DimmerLights_SelectPointer(sw);
 20098  173F  0832               	movf	setDimmerLights_SwOn@sw,w
 20099  1740  3199  216F  3197   	fcall	_DimmerLights_SelectPointer
 20100                           
 20101                           ;Dimmer_B1.c: 761: if (idle == 0) {
 20102  1743  0020               	movlb	0	; select bank0
 20103  1744  08B1               	movf	setDimmerLights_SwOn@idle,f
 20104  1745  1D03               	skipz
 20105  1746  0008               	return
 20106                           
 20107                           ;Dimmer_B1.c: 763: if (dimmingStatus == 0) {
 20108  1747  08AE               	movf	setDimmerLights_SwOn@dimmingStatus,f
 20109  1748  1D03               	skipz
 20110  1749  2F6C               	goto	l7049
 20111                           
 20112                           ;Dimmer_B1.c: 764: DimmerLights->SwFlag = 1;
 20113  174A  0021               	movlb	1	; select bank1
 20114  174B  085A               	movf	_DimmerLights^(0+128),w
 20115  174C  0086               	movwf	6
 20116  174D  3001               	movlw	1	; select bank2/3
 20117  174E  0087               	movwf	7
 20118  174F  1401               	bsf	1,0
 20119                           
 20120                           ;Dimmer_B1.c: 765: if (DimmerLights->Status == 0) {
 20121  1750  0A5A               	incf	_DimmerLights^(0+128),w
 20122  1751  0086               	movwf	6
 20123  1752  3001               	movlw	1	; select bank2/3
 20124  1753  0087               	movwf	7
 20125  1754  1801               	btfsc	1,0
 20126  1755  2F66               	goto	l7047
 20127                           
 20128                           ;Dimmer_B1.c: 766: DimmerLights->Status = 1;
 20129  1756  0A5A               	incf	_DimmerLights^(0+128),w
 20130  1757  0086               	movwf	6
 20131  1758  3001               	movlw	1	; select bank2/3
 20132  1759  0087               	movwf	7
 20133  175A  1401               	bsf	1,0
 20134                           
 20135                           ;Dimmer_B1.c: 769: DimmerLights->Trigger = 1;
 20136  175B  085A               	movf	_DimmerLights^(0+128),w
 20137  175C  0086               	movwf	6
 20138  175D  3001               	movlw	1	; select bank2/3
 20139  175E  0087               	movwf	7
 20140  175F  1481               	bsf	1,1
 20141                           
 20142                           ;Dimmer_B1.c: 770: DimmerLights->Switch = 1;
 20143  1760  085A               	movf	_DimmerLights^(0+128),w
 20144  1761  0086               	movwf	6
 20145  1762  3001               	movlw	1	; select bank2/3
 20146  1763  0087               	movwf	7
 20147  1764  1501               	bsf	1,2
 20148                           
 20149                           ;Dimmer_B1.c: 777: } else {
 20150  1765  2F77               	goto	l7051
 20151  1766                     l7047:	
 20152                           
 20153                           ;Dimmer_B1.c: 778: DimmerLights->Status = 0;
 20154  1766  0A5A               	incf	_DimmerLights^(0+128),w
 20155  1767  0086               	movwf	6
 20156  1768  3001               	movlw	1	; select bank2/3
 20157  1769  0087               	movwf	7
 20158  176A  1001               	bcf	1,0
 20159                           
 20160                           ;Dimmer_B1.c: 779: }
 20161                           ;Dimmer_B1.c: 780: } else {
 20162  176B  2F77               	goto	l7051
 20163  176C                     l7049:	
 20164                           
 20165                           ;Dimmer_B1.c: 781: DimmerLights->DimmingTrigger = 1;
 20166  176C  0021               	movlb	1	; select bank1
 20167  176D  085A               	movf	_DimmerLights^(0+128),w
 20168  176E  0086               	movwf	6
 20169  176F  3001               	movlw	1	; select bank2/3
 20170  1770  0087               	movwf	7
 20171  1771  1601               	bsf	1,4
 20172                           
 20173                           ;Dimmer_B1.c: 782: DimmerLights->DimmingSwitch = 0;
 20174  1772  085A               	movf	_DimmerLights^(0+128),w
 20175  1773  0086               	movwf	6
 20176  1774  3001               	movlw	1	; select bank2/3
 20177  1775  0087               	movwf	7
 20178  1776  1281               	bcf	1,5
 20179  1777                     l7051:	
 20180                           
 20181                           ;Dimmer_B1.c: 783: }
 20182                           ;Dimmer_B1.c: 784: setBuz(1, 100);
 20183  1777  3064               	movlw	100
 20184  1778  0020               	movlb	0	; select bank0
 20185  1779  00A9               	movwf	setBuz@time
 20186  177A  3000               	movlw	0
 20187  177B  00AA               	movwf	setBuz@time+1
 20188  177C  3001               	movlw	1
 20189  177D  3191  21E0         	fcall	_setBuz
 20190  177F  0008               	return
 20191  1780                     __end_of_setDimmerLights_SwOn:	
 20192                           
 20193                           	psect	text134
 20194  11E0                     __ptext134:	
 20195 ;; *************** function _setBuz *****************
 20196 ;; Defined at:
 20197 ;;		line 22 in file "../src/Buzzer_B1.c"
 20198 ;; Parameters:    Size  Location     Type
 20199 ;;  count           1    wreg     unsigned char 
 20200 ;;  time            2    9[BANK0 ] int 
 20201 ;; Auto vars:     Size  Location     Type
 20202 ;;  count           1   12[BANK0 ] unsigned char 
 20203 ;; Return value:  Size  Location     Type
 20204 ;;		None               void
 20205 ;; Registers used:
 20206 ;;		wreg, status,2, status,0, pclath, cstack
 20207 ;; Tracked objects:
 20208 ;;		On entry : 0/0
 20209 ;;		On exit  : 0/0
 20210 ;;		Unchanged: 0/0
 20211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20212 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20215 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20216 ;;Total ram usage:        4 bytes
 20217 ;; Hardware stack levels used:    1
 20218 ;; Hardware stack levels required when called:    6
 20219 ;; This function calls:
 20220 ;;		___awdiv
 20221 ;; This function is called by:
 20222 ;;		_setDimmerLights_SwOn
 20223 ;;		_setDimmerLights_Dimming
 20224 ;;		_my_MainTimer
 20225 ;;		_Exception_Main
 20226 ;;		_setTemp_Main
 20227 ;;		_setLog_Code
 20228 ;;		_setRFSW_Control
 20229 ;;		_setSw_Main
 20230 ;; This function uses a non-reentrant model
 20231 ;;
 20232                           
 20233                           
 20234                           ;psect for function _setBuz
 20235  11E0                     _setBuz:	
 20236                           
 20237                           ;incstack = 0
 20238                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 20239                           ;setBuz@count stored from wreg
 20240  11E0  0020               	movlb	0	; select bank0
 20241  11E1  00AC               	movwf	setBuz@count
 20242                           
 20243                           ;Buzzer_B1.c: 23: time /= 20;
 20244  11E2  3014               	movlw	20
 20245  11E3  00A0               	movwf	___awdiv@divisor
 20246  11E4  3000               	movlw	0
 20247  11E5  00A1               	movwf	___awdiv@divisor+1
 20248  11E6  082A               	movf	setBuz@time+1,w
 20249  11E7  01A3               	clrf	___awdiv@dividend+1
 20250  11E8  07A3               	addwf	___awdiv@dividend+1,f
 20251  11E9  0829               	movf	setBuz@time,w
 20252  11EA  01A2               	clrf	___awdiv@dividend
 20253  11EB  07A2               	addwf	___awdiv@dividend,f
 20254  11EC  3191  2138  3191   	fcall	___awdiv
 20255  11EF  0020               	movlb	0	; select bank0
 20256  11F0  0821               	movf	?___awdiv+1,w
 20257  11F1  01AA               	clrf	setBuz@time+1
 20258  11F2  07AA               	addwf	setBuz@time+1,f
 20259  11F3  0820               	movf	?___awdiv,w
 20260  11F4  01A9               	clrf	setBuz@time
 20261  11F5  07A9               	addwf	setBuz@time,f
 20262                           
 20263                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 20264  11F6  0022               	movlb	2	; select bank2
 20265  11F7  1C20               	btfss	_Buz1^(0+256),0
 20266  11F8  0008               	return
 20267                           
 20268                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 20269  11F9  18A0               	btfsc	_Buz1^(0+256),1
 20270  11FA  2A11               	goto	l98
 20271                           
 20272                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 20273  11FB  14A0               	bsf	_Buz1^(0+256),1
 20274                           
 20275                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 20276  11FC  01A1               	clrf	(_Buz1^(0+256)+1)
 20277  11FD  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 20278                           
 20279                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 20280  11FE  0020               	movlb	0	; select bank0
 20281  11FF  082C               	movf	setBuz@count,w
 20282  1200  00AB               	movwf	??_setBuz
 20283  1201  082B               	movf	??_setBuz,w
 20284  1202  0022               	movlb	2	; select bank2
 20285  1203  00A3               	movwf	(_Buz1^(0+256)+3)
 20286                           
 20287                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 20288  1204  0020               	movlb	0	; select bank0
 20289  1205  082A               	movf	setBuz@time+1,w
 20290  1206  0022               	movlb	2	; select bank2
 20291  1207  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 20292  1208  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 20293  1209  0020               	movlb	0	; select bank0
 20294  120A  0829               	movf	setBuz@time,w
 20295  120B  0022               	movlb	2	; select bank2
 20296  120C  01A6               	clrf	(_Buz1^(0+256)+6)
 20297  120D  07A6               	addwf	(_Buz1^(0+256)+6),f
 20298                           
 20299                           ;Buzzer_B1.c: 30: RB3 = 1;
 20300  120E  0020               	movlb	0	; select bank0
 20301  120F  158D               	bsf	13,3	;volatile
 20302                           
 20303                           ;Buzzer_B1.c: 31: } else {
 20304  1210  0008               	return
 20305  1211                     l98:	
 20306                           
 20307                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 20308  1211  19A0               	btfsc	_Buz1^(0+256),3
 20309  1212  2A25               	goto	l100
 20310                           
 20311                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 20312  1213  15A0               	bsf	_Buz1^(0+256),3
 20313                           
 20314                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 20315  1214  0020               	movlb	0	; select bank0
 20316  1215  082C               	movf	setBuz@count,w
 20317  1216  00AB               	movwf	??_setBuz
 20318  1217  082B               	movf	??_setBuz,w
 20319  1218  0022               	movlb	2	; select bank2
 20320  1219  00A4               	movwf	(_Buz1^(0+256)+4)
 20321                           
 20322                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 20323  121A  0020               	movlb	0	; select bank0
 20324  121B  082A               	movf	setBuz@time+1,w
 20325  121C  0022               	movlb	2	; select bank2
 20326  121D  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 20327  121E  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 20328  121F  0020               	movlb	0	; select bank0
 20329  1220  0829               	movf	setBuz@time,w
 20330  1221  0022               	movlb	2	; select bank2
 20331  1222  01A8               	clrf	(_Buz1^(0+256)+8)
 20332  1223  07A8               	addwf	(_Buz1^(0+256)+8),f
 20333                           
 20334                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 20335  1224  0008               	return
 20336  1225                     l100:	
 20337  1225  1A20               	btfsc	_Buz1^(0+256),4
 20338  1226  0008               	return
 20339                           
 20340                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 20341  1227  1620               	bsf	_Buz1^(0+256),4
 20342                           
 20343                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 20344  1228  0020               	movlb	0	; select bank0
 20345  1229  082C               	movf	setBuz@count,w
 20346  122A  00AB               	movwf	??_setBuz
 20347  122B  082B               	movf	??_setBuz,w
 20348  122C  0022               	movlb	2	; select bank2
 20349  122D  00A5               	movwf	(_Buz1^(0+256)+5)
 20350                           
 20351                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 20352  122E  0020               	movlb	0	; select bank0
 20353  122F  082A               	movf	setBuz@time+1,w
 20354  1230  0022               	movlb	2	; select bank2
 20355  1231  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 20356  1232  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 20357  1233  0020               	movlb	0	; select bank0
 20358  1234  0829               	movf	setBuz@time,w
 20359  1235  0022               	movlb	2	; select bank2
 20360  1236  01AA               	clrf	(_Buz1^(0+256)+10)
 20361  1237  07AA               	addwf	(_Buz1^(0+256)+10),f
 20362  1238  0008               	return
 20363  1239                     __end_of_setBuz:	
 20364                           
 20365                           	psect	text135
 20366  1138                     __ptext135:	
 20367 ;; *************** function ___awdiv *****************
 20368 ;; Defined at:
 20369 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 20370 ;; Parameters:    Size  Location     Type
 20371 ;;  divisor         2    0[BANK0 ] int 
 20372 ;;  dividend        2    2[BANK0 ] int 
 20373 ;; Auto vars:     Size  Location     Type
 20374 ;;  quotient        2    7[BANK0 ] int 
 20375 ;;  sign            1    6[BANK0 ] unsigned char 
 20376 ;;  counter         1    5[BANK0 ] unsigned char 
 20377 ;; Return value:  Size  Location     Type
 20378 ;;                  2    0[BANK0 ] int 
 20379 ;; Registers used:
 20380 ;;		wreg, status,2, status,0
 20381 ;; Tracked objects:
 20382 ;;		On entry : 0/0
 20383 ;;		On exit  : 0/0
 20384 ;;		Unchanged: 0/0
 20385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20386 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20387 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20388 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20389 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20390 ;;Total ram usage:        9 bytes
 20391 ;; Hardware stack levels used:    1
 20392 ;; Hardware stack levels required when called:    5
 20393 ;; This function calls:
 20394 ;;		Nothing
 20395 ;; This function is called by:
 20396 ;;		_setBuz
 20397 ;; This function uses a non-reentrant model
 20398 ;;
 20399                           
 20400                           
 20401                           ;psect for function ___awdiv
 20402  1138                     ___awdiv:	
 20403                           
 20404                           ;incstack = 0
 20405                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20406  1138  0020               	movlb	0	; select bank0
 20407  1139  01A6               	clrf	___awdiv@sign
 20408  113A  1FA1               	btfss	___awdiv@divisor+1,7
 20409  113B  2943               	goto	l6637
 20410  113C  09A0               	comf	___awdiv@divisor,f
 20411  113D  09A1               	comf	___awdiv@divisor+1,f
 20412  113E  0AA0               	incf	___awdiv@divisor,f
 20413  113F  1903               	skipnz
 20414  1140  0AA1               	incf	___awdiv@divisor+1,f
 20415  1141  01A6               	clrf	___awdiv@sign
 20416  1142  0AA6               	incf	___awdiv@sign,f
 20417  1143                     l6637:	
 20418  1143  1FA3               	btfss	___awdiv@dividend+1,7
 20419  1144  294E               	goto	l6643
 20420  1145  09A2               	comf	___awdiv@dividend,f
 20421  1146  09A3               	comf	___awdiv@dividend+1,f
 20422  1147  0AA2               	incf	___awdiv@dividend,f
 20423  1148  1903               	skipnz
 20424  1149  0AA3               	incf	___awdiv@dividend+1,f
 20425  114A  3001               	movlw	1
 20426  114B  00A4               	movwf	??___awdiv
 20427  114C  0824               	movf	??___awdiv,w
 20428  114D  06A6               	xorwf	___awdiv@sign,f
 20429  114E                     l6643:	
 20430  114E  01A7               	clrf	___awdiv@quotient
 20431  114F  01A8               	clrf	___awdiv@quotient+1
 20432  1150  0821               	movf	___awdiv@divisor+1,w
 20433  1151  0420               	iorwf	___awdiv@divisor,w
 20434  1152  1903               	skipnz
 20435  1153  297D               	goto	l6665
 20436  1154  01A5               	clrf	___awdiv@counter
 20437  1155  0AA5               	incf	___awdiv@counter,f
 20438  1156                     l6653:	
 20439  1156  1BA1               	btfsc	___awdiv@divisor+1,7
 20440  1157  2962               	goto	l6655
 20441  1158  3001               	movlw	1
 20442  1159                     u5485:	
 20443  1159  35A0               	lslf	___awdiv@divisor,f
 20444  115A  0DA1               	rlf	___awdiv@divisor+1,f
 20445  115B  0B89               	decfsz	9,f
 20446  115C  2959               	goto	u5485
 20447  115D  3001               	movlw	1
 20448  115E  00A4               	movwf	??___awdiv
 20449  115F  0824               	movf	??___awdiv,w
 20450  1160  07A5               	addwf	___awdiv@counter,f
 20451  1161  2956               	goto	l6653
 20452  1162                     l6655:	
 20453  1162  3001               	movlw	1
 20454  1163                     u5505:	
 20455  1163  35A7               	lslf	___awdiv@quotient,f
 20456  1164  0DA8               	rlf	___awdiv@quotient+1,f
 20457  1165  0B89               	decfsz	9,f
 20458  1166  2963               	goto	u5505
 20459  1167  0821               	movf	___awdiv@divisor+1,w
 20460  1168  0223               	subwf	___awdiv@dividend+1,w
 20461  1169  1D03               	skipz
 20462  116A  296D               	goto	u5515
 20463  116B  0820               	movf	___awdiv@divisor,w
 20464  116C  0222               	subwf	___awdiv@dividend,w
 20465  116D                     u5515:	
 20466  116D  1C03               	skipc
 20467  116E  2974               	goto	l6661
 20468  116F  0820               	movf	___awdiv@divisor,w
 20469  1170  02A2               	subwf	___awdiv@dividend,f
 20470  1171  0821               	movf	___awdiv@divisor+1,w
 20471  1172  3BA3               	subwfb	___awdiv@dividend+1,f
 20472  1173  1427               	bsf	___awdiv@quotient,0
 20473  1174                     l6661:	
 20474  1174  3001               	movlw	1
 20475  1175                     u5525:	
 20476  1175  36A1               	lsrf	___awdiv@divisor+1,f
 20477  1176  0CA0               	rrf	___awdiv@divisor,f
 20478  1177  0B89               	decfsz	9,f
 20479  1178  2975               	goto	u5525
 20480  1179  3001               	movlw	1
 20481  117A  02A5               	subwf	___awdiv@counter,f
 20482  117B  1D03               	btfss	3,2
 20483  117C  2962               	goto	l6655
 20484  117D                     l6665:	
 20485  117D  0826               	movf	___awdiv@sign,w
 20486  117E  1903               	btfsc	3,2
 20487  117F  2985               	goto	l6669
 20488  1180  09A7               	comf	___awdiv@quotient,f
 20489  1181  09A8               	comf	___awdiv@quotient+1,f
 20490  1182  0AA7               	incf	___awdiv@quotient,f
 20491  1183  1903               	skipnz
 20492  1184  0AA8               	incf	___awdiv@quotient+1,f
 20493  1185                     l6669:	
 20494  1185  0828               	movf	___awdiv@quotient+1,w
 20495  1186  01A1               	clrf	?___awdiv+1
 20496  1187  07A1               	addwf	?___awdiv+1,f
 20497  1188  0827               	movf	___awdiv@quotient,w
 20498  1189  01A0               	clrf	?___awdiv
 20499  118A  07A0               	addwf	?___awdiv,f
 20500  118B  0008               	return
 20501  118C                     __end_of___awdiv:	
 20502                           
 20503                           	psect	text136
 20504  19CB                     __ptext136:	
 20505 ;; *************** function _getDimmerIntr_Dimming_Sw *****************
 20506 ;; Defined at:
 20507 ;;		line 239 in file "../src/Dimmer_B1.c"
 20508 ;; Parameters:    Size  Location     Type
 20509 ;;  lights          1    wreg     unsigned char 
 20510 ;; Auto vars:     Size  Location     Type
 20511 ;;  lights          1    1[BANK0 ] unsigned char 
 20512 ;;  status          1    0[BANK0 ] unsigned char 
 20513 ;; Return value:  Size  Location     Type
 20514 ;;                  1    wreg      unsigned char 
 20515 ;; Registers used:
 20516 ;;		wreg, status,2
 20517 ;; Tracked objects:
 20518 ;;		On entry : 0/0
 20519 ;;		On exit  : 0/0
 20520 ;;		Unchanged: 0/0
 20521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20523 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20525 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20526 ;;Total ram usage:        2 bytes
 20527 ;; Hardware stack levels used:    1
 20528 ;; Hardware stack levels required when called:    5
 20529 ;; This function calls:
 20530 ;;		Nothing
 20531 ;; This function is called by:
 20532 ;;		_setDimmerLights_SwOn
 20533 ;;		_setRF_AdjControl
 20534 ;; This function uses a non-reentrant model
 20535 ;;
 20536                           
 20537                           
 20538                           ;psect for function _getDimmerIntr_Dimming_Sw
 20539  19CB                     _getDimmerIntr_Dimming_Sw:	
 20540                           
 20541                           ;incstack = 0
 20542                           ; Regs used in _getDimmerIntr_Dimming_Sw: [wreg+status,2]
 20543                           ;getDimmerIntr_Dimming_Sw@lights stored from wreg
 20544  19CB  0020               	movlb	0	; select bank0
 20545  19CC  00A1               	movwf	getDimmerIntr_Dimming_Sw@lights
 20546                           
 20547                           ;Dimmer_B1.c: 240: char status = 0;
 20548  19CD  01A0               	clrf	getDimmerIntr_Dimming_Sw@status
 20549                           
 20550                           ;Dimmer_B1.c: 242: if (lights == 1) {
 20551  19CE  0821               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20552  19CF  3A01               	xorlw	1
 20553  19D0  1D03               	skipz
 20554  19D1  29D8               	goto	l6717
 20555                           
 20556                           ;Dimmer_B1.c: 243: status = DimmerIntr1.Dimming_Sw == 1 ? 1 : 0;
 20557  19D2  3000               	movlw	0
 20558  19D3  0021               	movlb	1	; select bank1
 20559  19D4  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 20560  19D5  3001               	movlw	1
 20561  19D6  0020               	movlb	0	; select bank0
 20562  19D7  00A0               	movwf	getDimmerIntr_Dimming_Sw@status
 20563  19D8                     l6717:	
 20564                           
 20565                           ;Dimmer_B1.c: 244: }
 20566                           ;Dimmer_B1.c: 247: if (lights == 2) {
 20567  19D8  0821               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20568  19D9  3A02               	xorlw	2
 20569  19DA  1D03               	skipz
 20570  19DB  29E2               	goto	l6721
 20571                           
 20572                           ;Dimmer_B1.c: 248: status = DimmerIntr2.Dimming_Sw == 1 ? 1 : 0;
 20573  19DC  3000               	movlw	0
 20574  19DD  0021               	movlb	1	; select bank1
 20575  19DE  1A48               	btfsc	_DimmerIntr2^(0+128),4
 20576  19DF  3001               	movlw	1
 20577  19E0  0020               	movlb	0	; select bank0
 20578  19E1  00A0               	movwf	getDimmerIntr_Dimming_Sw@status
 20579  19E2                     l6721:	
 20580                           
 20581                           ;Dimmer_B1.c: 249: }
 20582                           ;Dimmer_B1.c: 257: return status;
 20583  19E2  0820               	movf	getDimmerIntr_Dimming_Sw@status,w
 20584  19E3  0008               	return
 20585  19E4                     __end_of_getDimmerIntr_Dimming_Sw:	
 20586                           
 20587                           	psect	text137
 20588  1ED5                     __ptext137:	
 20589 ;; *************** function _setDimmerLights_SwOff *****************
 20590 ;; Defined at:
 20591 ;;		line 789 in file "../src/Dimmer_B1.c"
 20592 ;; Parameters:    Size  Location     Type
 20593 ;;  sw              1    wreg     unsigned char 
 20594 ;; Auto vars:     Size  Location     Type
 20595 ;;  sw              1    2[BANK0 ] unsigned char 
 20596 ;; Return value:  Size  Location     Type
 20597 ;;		None               void
 20598 ;; Registers used:
 20599 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20600 ;; Tracked objects:
 20601 ;;		On entry : 0/0
 20602 ;;		On exit  : 0/0
 20603 ;;		Unchanged: 0/0
 20604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20606 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20608 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20609 ;;Total ram usage:        1 bytes
 20610 ;; Hardware stack levels used:    1
 20611 ;; Hardware stack levels required when called:    6
 20612 ;; This function calls:
 20613 ;;		_DimmerLights_SelectPointer
 20614 ;; This function is called by:
 20615 ;;		_DlyOff_Main
 20616 ;;		_Exception_Main
 20617 ;;		_setControl_Lights_Table
 20618 ;;		_setRFSW_Control
 20619 ;;		_setRFSW_AdjControl
 20620 ;;		_setSw_Main
 20621 ;; This function uses a non-reentrant model
 20622 ;;
 20623                           
 20624                           
 20625                           ;psect for function _setDimmerLights_SwOff
 20626  1ED5                     _setDimmerLights_SwOff:	
 20627                           
 20628                           ;incstack = 0
 20629                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 20630                           ;setDimmerLights_SwOff@sw stored from wreg
 20631  1ED5  0020               	movlb	0	; select bank0
 20632  1ED6  00A2               	movwf	setDimmerLights_SwOff@sw
 20633                           
 20634                           ;Dimmer_B1.c: 791: DimmerLights_SelectPointer(sw);
 20635  1ED7  0822               	movf	setDimmerLights_SwOff@sw,w
 20636  1ED8  3199  216F  319E   	fcall	_DimmerLights_SelectPointer
 20637                           
 20638                           ;Dimmer_B1.c: 793: if (DimmerLights->SwFlag == 1) {
 20639  1EDB  0021               	movlb	1	; select bank1
 20640  1EDC  085A               	movf	_DimmerLights^(0+128),w
 20641  1EDD  0086               	movwf	6
 20642  1EDE  3001               	movlw	1	; select bank2/3
 20643  1EDF  0087               	movwf	7
 20644  1EE0  1C01               	btfss	1,0
 20645  1EE1  0008               	return
 20646                           
 20647                           ;Dimmer_B1.c: 794: DimmerLights->SwFlag = 0;
 20648  1EE2  085A               	movf	_DimmerLights^(0+128),w
 20649  1EE3  0086               	movwf	6
 20650  1EE4  3001               	movlw	1	; select bank2/3
 20651  1EE5  0087               	movwf	7
 20652  1EE6  1001               	bcf	1,0
 20653                           
 20654                           ;Dimmer_B1.c: 795: if (DimmerLights->Status == 1) {
 20655  1EE7  0A5A               	incf	_DimmerLights^(0+128),w
 20656  1EE8  0086               	movwf	6
 20657  1EE9  3001               	movlw	1	; select bank2/3
 20658  1EEA  0087               	movwf	7
 20659  1EEB  1C01               	btfss	1,0
 20660  1EEC  2F03               	goto	l7063
 20661                           
 20662                           ;Dimmer_B1.c: 796: if (DimmerLights->DimmingSwFlag == 1) {
 20663  1EED  085A               	movf	_DimmerLights^(0+128),w
 20664  1EEE  0086               	movwf	6
 20665  1EEF  3001               	movlw	1	; select bank2/3
 20666  1EF0  0087               	movwf	7
 20667  1EF1  1D81               	btfss	1,3
 20668  1EF2  0008               	return
 20669                           
 20670                           ;Dimmer_B1.c: 797: DimmerLights->DimmingSwFlag = 0;
 20671  1EF3  085A               	movf	_DimmerLights^(0+128),w
 20672  1EF4  0086               	movwf	6
 20673  1EF5  3001               	movlw	1	; select bank2/3
 20674  1EF6  0087               	movwf	7
 20675  1EF7  1181               	bcf	1,3
 20676                           
 20677                           ;Dimmer_B1.c: 799: DimmerLights->DimmingTrigger = 1;
 20678  1EF8  085A               	movf	_DimmerLights^(0+128),w
 20679  1EF9  0086               	movwf	6
 20680  1EFA  3001               	movlw	1	; select bank2/3
 20681  1EFB  0087               	movwf	7
 20682  1EFC  1601               	bsf	1,4
 20683                           
 20684                           ;Dimmer_B1.c: 800: DimmerLights->DimmingSwitch = 0;
 20685  1EFD  085A               	movf	_DimmerLights^(0+128),w
 20686  1EFE  0086               	movwf	6
 20687  1EFF  3001               	movlw	1	; select bank2/3
 20688  1F00  0087               	movwf	7
 20689  1F01  1281               	bcf	1,5
 20690                           
 20691                           ;Dimmer_B1.c: 801: }
 20692                           ;Dimmer_B1.c: 802: } else {
 20693  1F02  0008               	return
 20694  1F03                     l7063:	
 20695                           
 20696                           ;Dimmer_B1.c: 805: DimmerLights->Trigger = 1;
 20697  1F03  085A               	movf	_DimmerLights^(0+128),w
 20698  1F04  0086               	movwf	6
 20699  1F05  3001               	movlw	1	; select bank2/3
 20700  1F06  0087               	movwf	7
 20701  1F07  1481               	bsf	1,1
 20702                           
 20703                           ;Dimmer_B1.c: 806: DimmerLights->Switch = 0;
 20704  1F08  085A               	movf	_DimmerLights^(0+128),w
 20705  1F09  0086               	movwf	6
 20706  1F0A  3001               	movlw	1	; select bank2/3
 20707  1F0B  0087               	movwf	7
 20708  1F0C  1101               	bcf	1,2
 20709  1F0D  0008               	return
 20710  1F0E                     __end_of_setDimmerLights_SwOff:	
 20711                           
 20712                           	psect	text138
 20713  273F                     __ptext138:	
 20714 ;; *************** function _getDimmerLights_Status *****************
 20715 ;; Defined at:
 20716 ;;		line 1197 in file "../src/Dimmer_B1.c"
 20717 ;; Parameters:    Size  Location     Type
 20718 ;;  lights          1    wreg     unsigned char 
 20719 ;; Auto vars:     Size  Location     Type
 20720 ;;  lights          1    2[BANK0 ] unsigned char 
 20721 ;;  status          1    3[BANK0 ] unsigned char 
 20722 ;; Return value:  Size  Location     Type
 20723 ;;                  1    wreg      unsigned char 
 20724 ;; Registers used:
 20725 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20726 ;; Tracked objects:
 20727 ;;		On entry : 0/0
 20728 ;;		On exit  : 0/0
 20729 ;;		Unchanged: 0/0
 20730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20732 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20734 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20735 ;;Total ram usage:        2 bytes
 20736 ;; Hardware stack levels used:    1
 20737 ;; Hardware stack levels required when called:    6
 20738 ;; This function calls:
 20739 ;;		_DimmerLights_SelectPointer
 20740 ;; This function is called by:
 20741 ;;		_DlyOff_Main
 20742 ;;		_Exception_Main
 20743 ;;		_setControl_Lights_Table
 20744 ;;		_setRFSW_Control
 20745 ;;		_setRFSW_AdjControl
 20746 ;;		_setRF_AdjControl
 20747 ;;		_DimmerLights_AssignationDimming
 20748 ;; This function uses a non-reentrant model
 20749 ;;
 20750                           
 20751                           
 20752                           ;psect for function _getDimmerLights_Status
 20753  273F                     _getDimmerLights_Status:	
 20754                           
 20755                           ;incstack = 0
 20756                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 20757                           ;getDimmerLights_Status@lights stored from wreg
 20758  273F  0020               	movlb	0	; select bank0
 20759  2740  00A2               	movwf	getDimmerLights_Status@lights
 20760                           
 20761                           ;Dimmer_B1.c: 1198: DimmerLights_SelectPointer(lights);
 20762  2741  0822               	movf	getDimmerLights_Status@lights,w
 20763  2742  3199  216F         	fcall	_DimmerLights_SelectPointer
 20764                           
 20765                           ;Dimmer_B1.c: 1199: char status = DimmerLights->Status == 1 ? 1 : 0;
 20766  2744  0021               	movlb	1	; select bank1
 20767  2745  0A5A               	incf	_DimmerLights^(0+128),w
 20768  2746  0086               	movwf	6
 20769  2747  3001               	movlw	1	; select bank2/3
 20770  2748  0087               	movwf	7
 20771  2749  3000               	movlw	0
 20772  274A  1801               	btfsc	1,0
 20773  274B  3001               	movlw	1
 20774  274C  0020               	movlb	0	; select bank0
 20775  274D  00A3               	movwf	getDimmerLights_Status@status
 20776                           
 20777                           ;Dimmer_B1.c: 1200: return status;
 20778  274E  0823               	movf	getDimmerLights_Status@status,w
 20779  274F  0008               	return
 20780  2750                     __end_of_getDimmerLights_Status:	
 20781                           
 20782                           	psect	text139
 20783  196F                     __ptext139:	
 20784 ;; *************** function _DimmerLights_SelectPointer *****************
 20785 ;; Defined at:
 20786 ;;		line 652 in file "../src/Dimmer_B1.c"
 20787 ;; Parameters:    Size  Location     Type
 20788 ;;  lights          1    wreg     unsigned char 
 20789 ;; Auto vars:     Size  Location     Type
 20790 ;;  lights          1    1[BANK0 ] unsigned char 
 20791 ;; Return value:  Size  Location     Type
 20792 ;;		None               void
 20793 ;; Registers used:
 20794 ;;		wreg
 20795 ;; Tracked objects:
 20796 ;;		On entry : 0/0
 20797 ;;		On exit  : 0/0
 20798 ;;		Unchanged: 0/0
 20799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20801 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20802 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20803 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20804 ;;Total ram usage:        2 bytes
 20805 ;; Hardware stack levels used:    1
 20806 ;; Hardware stack levels required when called:    5
 20807 ;; This function calls:
 20808 ;;		Nothing
 20809 ;; This function is called by:
 20810 ;;		_setDimmerLights_SwOn
 20811 ;;		_setDimmerLights_SwOff
 20812 ;;		_setDimmerLights_DimmingOn
 20813 ;;		_setDimmerLights_Main
 20814 ;;		_getDimmerLights_Status
 20815 ;;		_setDimmerLights_DimmingRun
 20816 ;;		_setRF_AdjControl
 20817 ;;		_DimmerLights_TwoPhase_Main
 20818 ;;		_setDimmerLights_Status
 20819 ;; This function uses a non-reentrant model
 20820 ;;
 20821                           
 20822                           
 20823                           ;psect for function _DimmerLights_SelectPointer
 20824  196F                     _DimmerLights_SelectPointer:	
 20825                           
 20826                           ;incstack = 0
 20827                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 20828                           ;DimmerLights_SelectPointer@lights stored from wreg
 20829  196F  0020               	movlb	0	; select bank0
 20830  1970  00A1               	movwf	DimmerLights_SelectPointer@lights
 20831                           
 20832                           ;Dimmer_B1.c: 654: if (lights == 1) {
 20833  1971  0821               	movf	DimmerLights_SelectPointer@lights,w
 20834  1972  3A01               	xorlw	1
 20835  1973  1D03               	skipz
 20836  1974  297B               	goto	l6729
 20837                           
 20838                           ;Dimmer_B1.c: 655: DimmerLights = &DimmerLights1;
 20839  1975  30BE               	movlw	_DimmerLights1& (0+255)
 20840  1976  00A0               	movwf	??_DimmerLights_SelectPointer
 20841  1977  0820               	movf	??_DimmerLights_SelectPointer,w
 20842  1978  0021               	movlb	1	; select bank1
 20843  1979  00DA               	movwf	_DimmerLights^(0+128)
 20844                           
 20845                           ;Dimmer_B1.c: 656: }
 20846  197A  0008               	return
 20847  197B                     l6729:	
 20848                           
 20849                           ;Dimmer_B1.c: 659: else if (lights == 2) {
 20850  197B  0020               	movlb	0	; select bank0
 20851  197C  0821               	movf	DimmerLights_SelectPointer@lights,w
 20852  197D  3A02               	xorlw	2
 20853  197E  1D03               	skipz
 20854  197F  0008               	return
 20855                           
 20856                           ;Dimmer_B1.c: 660: DimmerLights = &DimmerLights2;
 20857  1980  30C7               	movlw	_DimmerLights2& (0+255)
 20858  1981  00A0               	movwf	??_DimmerLights_SelectPointer
 20859  1982  0820               	movf	??_DimmerLights_SelectPointer,w
 20860  1983  0021               	movlb	1	; select bank1
 20861  1984  00DA               	movwf	_DimmerLights^(0+128)
 20862  1985  0008               	return
 20863  1986                     __end_of_DimmerLights_SelectPointer:	
 20864                           
 20865                           	psect	text140
 20866  2626                     __ptext140:	
 20867 ;; *************** function _DelayOff_Initialization *****************
 20868 ;; Defined at:
 20869 ;;		line 26 in file "../src/DelayOff_B1.c"
 20870 ;; Parameters:    Size  Location     Type
 20871 ;;		None
 20872 ;; Auto vars:     Size  Location     Type
 20873 ;;		None
 20874 ;; Return value:  Size  Location     Type
 20875 ;;		None               void
 20876 ;; Registers used:
 20877 ;;		wreg, status,2, status,0, pclath, cstack
 20878 ;; Tracked objects:
 20879 ;;		On entry : 0/0
 20880 ;;		On exit  : 0/0
 20881 ;;		Unchanged: 0/0
 20882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20887 ;;Total ram usage:        0 bytes
 20888 ;; Hardware stack levels used:    1
 20889 ;; Hardware stack levels required when called:    7
 20890 ;; This function calls:
 20891 ;;		_DlyOff_Initialization
 20892 ;; This function is called by:
 20893 ;;		_main
 20894 ;; This function uses a non-reentrant model
 20895 ;;
 20896                           
 20897                           
 20898                           ;psect for function _DelayOff_Initialization
 20899  2626                     _DelayOff_Initialization:	
 20900                           
 20901                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 20902                           
 20903                           ;incstack = 0
 20904                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20905  2626  3001               	movlw	1
 20906  2627  31A6  260D  31A6   	fcall	_DlyOff_Initialization
 20907                           
 20908                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 20909  262A  3002               	movlw	2
 20910  262B  31A6  260D         	fcall	_DlyOff_Initialization
 20911  262D  0008               	return
 20912  262E                     __end_of_DelayOff_Initialization:	
 20913                           
 20914                           	psect	text141
 20915  260D                     __ptext141:	
 20916 ;; *************** function _DlyOff_Initialization *****************
 20917 ;; Defined at:
 20918 ;;		line 56 in file "../src/DelayOff_B1.c"
 20919 ;; Parameters:    Size  Location     Type
 20920 ;;  sw              1    wreg     unsigned char 
 20921 ;; Auto vars:     Size  Location     Type
 20922 ;;  sw              1    2[BANK0 ] unsigned char 
 20923 ;; Return value:  Size  Location     Type
 20924 ;;		None               void
 20925 ;; Registers used:
 20926 ;;		wreg, status,2, status,0, pclath, cstack
 20927 ;; Tracked objects:
 20928 ;;		On entry : 0/0
 20929 ;;		On exit  : 0/0
 20930 ;;		Unchanged: 0/0
 20931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20933 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20935 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20936 ;;Total ram usage:        1 bytes
 20937 ;; Hardware stack levels used:    1
 20938 ;; Hardware stack levels required when called:    6
 20939 ;; This function calls:
 20940 ;;		_DelayOffPointSelect
 20941 ;; This function is called by:
 20942 ;;		_DelayOff_Initialization
 20943 ;; This function uses a non-reentrant model
 20944 ;;
 20945                           
 20946                           
 20947                           ;psect for function _DlyOff_Initialization
 20948  260D                     _DlyOff_Initialization:	
 20949                           
 20950                           ;incstack = 0
 20951                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20952                           ;DlyOff_Initialization@sw stored from wreg
 20953  260D  0020               	movlb	0	; select bank0
 20954  260E  00A2               	movwf	DlyOff_Initialization@sw
 20955                           
 20956                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 20957  260F  0822               	movf	DlyOff_Initialization@sw,w
 20958  2610  3199  2158         	fcall	_DelayOffPointSelect
 20959  2612  0008               	return
 20960  2613                     __end_of_DlyOff_Initialization:	
 20961                           
 20962                           	psect	text142
 20963  1958                     __ptext142:	
 20964 ;; *************** function _DelayOffPointSelect *****************
 20965 ;; Defined at:
 20966 ;;		line 7 in file "../src/DelayOff_B1.c"
 20967 ;; Parameters:    Size  Location     Type
 20968 ;;  sw              1    wreg     unsigned char 
 20969 ;; Auto vars:     Size  Location     Type
 20970 ;;  sw              1    1[BANK0 ] unsigned char 
 20971 ;; Return value:  Size  Location     Type
 20972 ;;		None               void
 20973 ;; Registers used:
 20974 ;;		wreg
 20975 ;; Tracked objects:
 20976 ;;		On entry : 0/0
 20977 ;;		On exit  : 0/0
 20978 ;;		Unchanged: 0/0
 20979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20982 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20983 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20984 ;;Total ram usage:        2 bytes
 20985 ;; Hardware stack levels used:    1
 20986 ;; Hardware stack levels required when called:    5
 20987 ;; This function calls:
 20988 ;;		Nothing
 20989 ;; This function is called by:
 20990 ;;		_DlyOff_Initialization
 20991 ;;		_DlyOff_Main
 20992 ;;		_setDelayOff_GO
 20993 ;;		_getDelayOff_GO
 20994 ;; This function uses a non-reentrant model
 20995 ;;
 20996                           
 20997                           
 20998                           ;psect for function _DelayOffPointSelect
 20999  1958                     _DelayOffPointSelect:	
 21000                           
 21001                           ;incstack = 0
 21002                           ; Regs used in _DelayOffPointSelect: [wreg]
 21003                           ;DelayOffPointSelect@sw stored from wreg
 21004  1958  0020               	movlb	0	; select bank0
 21005  1959  00A1               	movwf	DelayOffPointSelect@sw
 21006                           
 21007                           ;DelayOff_B1.c: 9: if (sw == 1) {
 21008  195A  0821               	movf	DelayOffPointSelect@sw,w
 21009  195B  3A01               	xorlw	1
 21010  195C  1D03               	skipz
 21011  195D  2964               	goto	l6705
 21012                           
 21013                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 21014  195E  30D9               	movlw	_DlySw1& (0+255)
 21015  195F  00A0               	movwf	??_DelayOffPointSelect
 21016  1960  0820               	movf	??_DelayOffPointSelect,w
 21017  1961  0021               	movlb	1	; select bank1
 21018  1962  00D8               	movwf	_DelayOff^(0+128)
 21019                           
 21020                           ;DelayOff_B1.c: 11: }
 21021  1963  0008               	return
 21022  1964                     l6705:	
 21023                           
 21024                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 21025  1964  0020               	movlb	0	; select bank0
 21026  1965  0821               	movf	DelayOffPointSelect@sw,w
 21027  1966  3A02               	xorlw	2
 21028  1967  1D03               	skipz
 21029  1968  0008               	return
 21030                           
 21031                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 21032  1969  30DE               	movlw	_DlySw2& (0+255)
 21033  196A  00A0               	movwf	??_DelayOffPointSelect
 21034  196B  0820               	movf	??_DelayOffPointSelect,w
 21035  196C  0021               	movlb	1	; select bank1
 21036  196D  00D8               	movwf	_DelayOff^(0+128)
 21037  196E  0008               	return
 21038  196F                     __end_of_DelayOffPointSelect:	
 21039                           
 21040                           	psect	text143
 21041  07B6                     __ptext143:	
 21042 ;; *************** function _Buzzer_Main *****************
 21043 ;; Defined at:
 21044 ;;		line 46 in file "../src/Buzzer_B1.c"
 21045 ;; Parameters:    Size  Location     Type
 21046 ;;		None
 21047 ;; Auto vars:     Size  Location     Type
 21048 ;;		None
 21049 ;; Return value:  Size  Location     Type
 21050 ;;		None               void
 21051 ;; Registers used:
 21052 ;;		wreg, status,2, status,0
 21053 ;; Tracked objects:
 21054 ;;		On entry : 0/0
 21055 ;;		On exit  : 0/0
 21056 ;;		Unchanged: 0/0
 21057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21061 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21062 ;;Total ram usage:        1 bytes
 21063 ;; Hardware stack levels used:    1
 21064 ;; Hardware stack levels required when called:    5
 21065 ;; This function calls:
 21066 ;;		Nothing
 21067 ;; This function is called by:
 21068 ;;		_main
 21069 ;; This function uses a non-reentrant model
 21070 ;;
 21071                           
 21072                           
 21073                           ;psect for function _Buzzer_Main
 21074  07B6                     _Buzzer_Main:	
 21075                           
 21076                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 21077                           
 21078                           ;incstack = 0
 21079                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 21080  07B6  0022               	movlb	2	; select bank2
 21081  07B7  1CA0               	btfss	_Buz1^(0+256),1
 21082  07B8  0008               	return
 21083                           
 21084                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 21085  07B9  3001               	movlw	1
 21086  07BA  07A1               	addwf	(_Buz1^(0+256)+1),f
 21087  07BB  3000               	movlw	0
 21088  07BC  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 21089                           
 21090                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 21091  07BD  0827               	movf	((_Buz1+1)^(0+256)+6),w
 21092  07BE  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 21093  07BF  1D03               	skipz
 21094  07C0  2FC3               	goto	u9515
 21095  07C1  0826               	movf	(_Buz1^(0+256)+6),w
 21096  07C2  0221               	subwf	(_Buz1^(0+256)+1),w
 21097  07C3                     u9515:	
 21098  07C3  1C03               	skipc
 21099  07C4  0008               	return
 21100                           
 21101                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 21102  07C5  01A1               	clrf	(_Buz1^(0+256)+1)
 21103  07C6  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 21104                           
 21105                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 21106  07C7  12A0               	bcf	_Buz1^(0+256),5
 21107  07C8  0020               	movlb	0	; select bank0
 21108  07C9  1D8D               	btfss	13,3	;volatile
 21109  07CA  2FCD               	goto	l8979
 21110  07CB  0022               	movlb	2	; select bank2
 21111  07CC  16A0               	bsf	_Buz1^(0+256),5
 21112  07CD                     l8979:	
 21113                           
 21114                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 21115  07CD  0022               	movlb	2	; select bank2
 21116  07CE  1AA0               	btfsc	_Buz1^(0+256),5
 21117  07CF  2FF9               	goto	l108
 21118                           
 21119                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 21120  07D0  08A3               	movf	(_Buz1^(0+256)+3),f
 21121  07D1  1D03               	skipz
 21122  07D2  2FF5               	goto	l109
 21123                           
 21124                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 21125  07D3  1DA0               	btfss	_Buz1^(0+256),3
 21126  07D4  2FE3               	goto	l110
 21127                           
 21128                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 21129  07D5  11A0               	bcf	_Buz1^(0+256),3
 21130                           
 21131                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 21132  07D6  0824               	movf	(_Buz1^(0+256)+4),w
 21133  07D7  0020               	movlb	0	; select bank0
 21134  07D8  00A0               	movwf	??_Buzzer_Main
 21135  07D9  0820               	movf	??_Buzzer_Main,w
 21136  07DA  0022               	movlb	2	; select bank2
 21137  07DB  00A3               	movwf	(_Buz1^(0+256)+3)
 21138                           
 21139                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 21140  07DC  0829               	movf	((_Buz1+1)^(0+256)+8),w
 21141  07DD  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 21142  07DE  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 21143  07DF  0828               	movf	(_Buz1^(0+256)+8),w
 21144  07E0  01A6               	clrf	(_Buz1^(0+256)+6)
 21145  07E1  07A6               	addwf	(_Buz1^(0+256)+6),f
 21146                           
 21147                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 21148  07E2  0008               	return
 21149  07E3                     l110:	
 21150  07E3  1E20               	btfss	_Buz1^(0+256),4
 21151  07E4  2FF3               	goto	l112
 21152                           
 21153                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 21154  07E5  1220               	bcf	_Buz1^(0+256),4
 21155                           
 21156                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 21157  07E6  0825               	movf	(_Buz1^(0+256)+5),w
 21158  07E7  0020               	movlb	0	; select bank0
 21159  07E8  00A0               	movwf	??_Buzzer_Main
 21160  07E9  0820               	movf	??_Buzzer_Main,w
 21161  07EA  0022               	movlb	2	; select bank2
 21162  07EB  00A3               	movwf	(_Buz1^(0+256)+3)
 21163                           
 21164                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 21165  07EC  082B               	movf	((_Buz1+1)^(0+256)+10),w
 21166  07ED  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 21167  07EE  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 21168  07EF  082A               	movf	(_Buz1^(0+256)+10),w
 21169  07F0  01A6               	clrf	(_Buz1^(0+256)+6)
 21170  07F1  07A6               	addwf	(_Buz1^(0+256)+6),f
 21171                           
 21172                           ;Buzzer_B1.c: 62: } else {
 21173  07F2  0008               	return
 21174  07F3                     l112:	
 21175                           
 21176                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 21177  07F3  10A0               	bcf	_Buz1^(0+256),1
 21178                           
 21179                           ;Buzzer_B1.c: 64: }
 21180                           ;Buzzer_B1.c: 65: } else {
 21181  07F4  0008               	return
 21182  07F5                     l109:	
 21183                           
 21184                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 21185  07F5  16A0               	bsf	_Buz1^(0+256),5
 21186                           
 21187                           ;Buzzer_B1.c: 68: RB3 = 1;
 21188  07F6  0020               	movlb	0	; select bank0
 21189  07F7  158D               	bsf	13,3	;volatile
 21190                           
 21191                           ;Buzzer_B1.c: 69: }
 21192                           ;Buzzer_B1.c: 70: } else {
 21193  07F8  0008               	return
 21194  07F9                     l108:	
 21195                           
 21196                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 21197  07F9  12A0               	bcf	_Buz1^(0+256),5
 21198                           
 21199                           ;Buzzer_B1.c: 73: RB3 = 0;
 21200  07FA  0020               	movlb	0	; select bank0
 21201  07FB  118D               	bcf	13,3	;volatile
 21202                           
 21203                           ;Buzzer_B1.c: 75: Buz1.Count--;
 21204  07FC  3001               	movlw	1
 21205  07FD  0022               	movlb	2	; select bank2
 21206  07FE  02A3               	subwf	(_Buz1^(0+256)+3),f
 21207  07FF  0008               	return
 21208  0800                     __end_of_Buzzer_Main:	
 21209                           
 21210                           	psect	text144
 21211  25E2                     __ptext144:	
 21212 ;; *************** function _Buzzer_Initialization *****************
 21213 ;; Defined at:
 21214 ;;		line 11 in file "../src/Buzzer_B1.c"
 21215 ;; Parameters:    Size  Location     Type
 21216 ;;		None
 21217 ;; Auto vars:     Size  Location     Type
 21218 ;;		None
 21219 ;; Return value:  Size  Location     Type
 21220 ;;		None               void
 21221 ;; Registers used:
 21222 ;;		None
 21223 ;; Tracked objects:
 21224 ;;		On entry : 0/0
 21225 ;;		On exit  : 0/0
 21226 ;;		Unchanged: 0/0
 21227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21232 ;;Total ram usage:        0 bytes
 21233 ;; Hardware stack levels used:    1
 21234 ;; Hardware stack levels required when called:    5
 21235 ;; This function calls:
 21236 ;;		Nothing
 21237 ;; This function is called by:
 21238 ;;		_main
 21239 ;; This function uses a non-reentrant model
 21240 ;;
 21241                           
 21242                           
 21243                           ;psect for function _Buzzer_Initialization
 21244  25E2                     _Buzzer_Initialization:	
 21245                           
 21246                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 21247                           
 21248                           ;incstack = 0
 21249                           ; Regs used in _Buzzer_Initialization: []
 21250  25E2  0022               	movlb	2	; select bank2
 21251  25E3  1420               	bsf	_Buz1^(0+256),0
 21252  25E4  0008               	return
 21253  25E5                     __end_of_Buzzer_Initialization:	
 21254                           
 21255                           	psect	intentry
 21256  0004                     __pintentry:	
 21257 ;; *************** function _ISR *****************
 21258 ;; Defined at:
 21259 ;;		line 116 in file "../src/MCU_B1.c"
 21260 ;; Parameters:    Size  Location     Type
 21261 ;;		None
 21262 ;; Auto vars:     Size  Location     Type
 21263 ;;		None
 21264 ;; Return value:  Size  Location     Type
 21265 ;;		None               void
 21266 ;; Registers used:
 21267 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21268 ;; Tracked objects:
 21269 ;;		On entry : 0/0
 21270 ;;		On exit  : 0/0
 21271 ;;		Unchanged: 0/0
 21272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21275 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21276 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21277 ;;Total ram usage:        1 bytes
 21278 ;; Hardware stack levels used:    1
 21279 ;; Hardware stack levels required when called:    4
 21280 ;; This function calls:
 21281 ;;		_IOC_ISR
 21282 ;;		_TMR1_ISR
 21283 ;; This function is called by:
 21284 ;;		Interrupt level 1
 21285 ;; This function uses a non-reentrant model
 21286 ;;
 21287                           
 21288  0004                     _ISR:	
 21289                           
 21290                           ;incstack = 0
 21291                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21292  0004  147E               	bsf	126,0	;set compiler interrupt flag
 21293  0005  3180               	pagesel	$
 21294  0006  0020               	movlb	0	; select bank0
 21295  0007  087F               	movf	127,w
 21296  0008  00FC               	movwf	??_ISR
 21297                           
 21298                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 21299  0009  0021               	movlb	1	; select bank1
 21300  000A  1C11               	btfss	17,0	;volatile
 21301  000B  2812               	goto	i1l9637
 21302  000C  0020               	movlb	0	; select bank0
 21303  000D  1C11               	btfss	17,0	;volatile
 21304  000E  2812               	goto	i1l9637
 21305                           
 21306                           ;MCU_B1.c: 126: TMR1_ISR();
 21307  000F  319B  23F0  3180   	fcall	_TMR1_ISR
 21308  0012                     i1l9637:	
 21309                           
 21310                           ;MCU_B1.c: 127: }
 21311                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 21312  0012  198B               	btfsc	11,3	;volatile
 21313  0013  1C0B               	btfss	11,0	;volatile
 21314  0014  281A               	goto	i1l1441
 21315  0015  0027               	movlb	7	; select bank7
 21316  0016  1D16               	btfss	22,2	;volatile
 21317  0017  281A               	goto	i1l1441
 21318                           
 21319                           ;MCU_B1.c: 139: IOC_ISR();
 21320  0018  31A6  269C         	fcall	_IOC_ISR
 21321  001A                     i1l1441:	
 21322                           ;MCU_B1.c: 140: }
 21323                           ;MCU_B1.c: 148: return;
 21324                           
 21325  001A  087C               	movf	??_ISR,w
 21326  001B  0020               	movlb	0	; select bank0
 21327  001C  00FF               	movwf	127
 21328  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 21329  001E  0009               	retfie
 21330  001F                     __end_of_ISR:	
 21331                           
 21332                           	psect	text146
 21333  1BF0                     __ptext146:	
 21334 ;; *************** function _TMR1_ISR *****************
 21335 ;; Defined at:
 21336 ;;		line 236 in file "../src/MCU_B1.c"
 21337 ;; Parameters:    Size  Location     Type
 21338 ;;		None
 21339 ;; Auto vars:     Size  Location     Type
 21340 ;;		None
 21341 ;; Return value:  Size  Location     Type
 21342 ;;		None               void
 21343 ;; Registers used:
 21344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21345 ;; Tracked objects:
 21346 ;;		On entry : 0/0
 21347 ;;		On exit  : 0/0
 21348 ;;		Unchanged: 0/0
 21349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21354 ;;Total ram usage:        0 bytes
 21355 ;; Hardware stack levels used:    1
 21356 ;; Hardware stack levels required when called:    1
 21357 ;; This function calls:
 21358 ;;		_DimmerLights_TMR_1
 21359 ;;		_DimmerLights_TMR_2
 21360 ;; This function is called by:
 21361 ;;		_ISR
 21362 ;; This function uses a non-reentrant model
 21363 ;;
 21364                           
 21365                           
 21366                           ;psect for function _TMR1_ISR
 21367  1BF0                     _TMR1_ISR:	
 21368                           
 21369                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 21370                           
 21371                           ;incstack = 0
 21372                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21373  1BF0  319E  2665  319B   	fcall	_DimmerLights_TMR_1
 21374                           
 21375                           ;MCU_B1.c: 259: DimmerLights_TMR_2();
 21376  1BF3  319E  269D  319B   	fcall	_DimmerLights_TMR_2
 21377                           
 21378                           ;MCU_B1.c: 268: Timer1.Count++;
 21379  1BF6  3001               	movlw	1
 21380  1BF7  0022               	movlb	2	; select bank2
 21381  1BF8  07B2               	addwf	(_Timer1^(0+256)+1),f
 21382  1BF9  3000               	movlw	0
 21383  1BFA  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 21384                           
 21385                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 21386  1BFB  3001               	movlw	1
 21387  1BFC  3E31               	addlw	_Timer1& (0+255)
 21388  1BFD  0086               	movwf	6
 21389  1BFE  3001               	movlw	1	; select bank2/3
 21390  1BFF  0087               	movwf	7
 21391  1C00  3F40               	moviw [0]fsr1
 21392  1C01  3AC8               	xorlw	200
 21393  1C02  1D03               	skipz
 21394  1C03  2C06               	goto	u961_25
 21395  1C04  3F41               	moviw [1]fsr1
 21396  1C05  3A00               	xorlw	0
 21397  1C06                     u961_25:	
 21398  1C06  1D03               	skipz
 21399  1C07  2C0B               	goto	i1l9037
 21400                           
 21401                           ;MCU_B1.c: 270: Timer1.Count = 0;
 21402  1C08  01B2               	clrf	(_Timer1^(0+256)+1)
 21403  1C09  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 21404                           
 21405                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 21406  1C0A  1431               	bsf	_Timer1^(0+256),0
 21407  1C0B                     i1l9037:	
 21408                           
 21409                           ;MCU_B1.c: 272: }
 21410                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 21411  1C0B  30FA               	movlw	250
 21412  1C0C  0020               	movlb	0	; select bank0
 21413  1C0D  0097               	movwf	23	;volatile
 21414                           
 21415                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 21416  1C0E  3038               	movlw	56
 21417  1C0F  0096               	movwf	22	;volatile
 21418                           
 21419                           ;MCU_B1.c: 276: TMR1IF = 0;
 21420  1C10  1011               	bcf	17,0	;volatile
 21421  1C11  0008               	return
 21422  1C12                     __end_of_TMR1_ISR:	
 21423                           
 21424                           	psect	text147
 21425  1E9D                     __ptext147:	
 21426 ;; *************** function _DimmerLights_TMR_2 *****************
 21427 ;; Defined at:
 21428 ;;		line 1675 in file "../src/Dimmer_B1.c"
 21429 ;; Parameters:    Size  Location     Type
 21430 ;;		None
 21431 ;; Auto vars:     Size  Location     Type
 21432 ;;		None
 21433 ;; Return value:  Size  Location     Type
 21434 ;;		None               void
 21435 ;; Registers used:
 21436 ;;		wreg, status,2, status,0
 21437 ;; Tracked objects:
 21438 ;;		On entry : 0/0
 21439 ;;		On exit  : 0/0
 21440 ;;		Unchanged: 0/0
 21441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21444 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21445 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21446 ;;Total ram usage:        1 bytes
 21447 ;; Hardware stack levels used:    1
 21448 ;; This function calls:
 21449 ;;		Nothing
 21450 ;; This function is called by:
 21451 ;;		_TMR1_ISR
 21452 ;; This function uses a non-reentrant model
 21453 ;;
 21454                           
 21455                           
 21456                           ;psect for function _DimmerLights_TMR_2
 21457  1E9D                     _DimmerLights_TMR_2:	
 21458                           
 21459                           ;Dimmer_B1.c: 1677: if (DimmerIntr2.Start == 1) {
 21460                           
 21461                           ;incstack = 0
 21462                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 21463  1E9D  0021               	movlb	1	; select bank1
 21464  1E9E  1D48               	btfss	_DimmerIntr2^(0+128),2
 21465  1E9F  2EC3               	goto	i1l1010
 21466                           
 21467                           ;Dimmer_B1.c: 1678: DimmerIntr2.Count++;
 21468  1EA0  3001               	movlw	1
 21469  1EA1  00F0               	movwf	??_DimmerLights_TMR_2
 21470  1EA2  0870               	movf	??_DimmerLights_TMR_2,w
 21471  1EA3  07CA               	addwf	(_DimmerIntr2^(0+128)+2),f
 21472                           
 21473                           ;Dimmer_B1.c: 1680: if (DimmerIntr2.Count == DimmerIntr2.TuneEnd) {
 21474  1EA4  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21475  1EA5  0653               	xorwf	(_DimmerIntr2^(0+128)+11),w
 21476  1EA6  1D03               	skipz
 21477  1EA7  2EAA               	goto	i1l8481
 21478                           
 21479                           ;Dimmer_B1.c: 1681: DimmerIntr2.Count = 0;
 21480  1EA8  01CA               	clrf	(_DimmerIntr2^(0+128)+2)
 21481                           
 21482                           ;Dimmer_B1.c: 1682: DimmerIntr2.Start = 0;
 21483  1EA9  1148               	bcf	_DimmerIntr2^(0+128),2
 21484  1EAA                     i1l8481:	
 21485                           
 21486                           ;Dimmer_B1.c: 1683: }
 21487                           ;Dimmer_B1.c: 1697: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2) {
 21488  1EAA  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21489  1EAB  0650               	xorwf	(_DimmerIntr2^(0+128)+8),w
 21490  1EAC  1903               	btfsc	3,2
 21491                           
 21492                           ;Dimmer_B1.c: 1698: if (DimmerIntr2.ControlStatus == 1) {
 21493  1EAD  1DC8               	btfss	_DimmerIntr2^(0+128),3
 21494  1EAE  2EB1               	goto	i1l8487
 21495                           
 21496                           ;Dimmer_B1.c: 1699: RB4 = 0;
 21497  1EAF  0020               	movlb	0	; select bank0
 21498  1EB0  120D               	bcf	13,4	;volatile
 21499  1EB1                     i1l8487:	
 21500                           
 21501                           ;Dimmer_B1.c: 1700: }
 21502                           ;Dimmer_B1.c: 1701: }
 21503                           ;Dimmer_B1.c: 1704: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3) {
 21504  1EB1  0021               	movlb	1	; select bank1
 21505  1EB2  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21506  1EB3  0651               	xorwf	(_DimmerIntr2^(0+128)+9),w
 21507  1EB4  1903               	btfsc	3,2
 21508                           
 21509                           ;Dimmer_B1.c: 1705: if (DimmerIntr2.ControlStatus == 1) {
 21510  1EB5  1DC8               	btfss	_DimmerIntr2^(0+128),3
 21511  1EB6  2EB9               	goto	i1l8493
 21512                           
 21513                           ;Dimmer_B1.c: 1706: RB4 = 1;
 21514  1EB7  0020               	movlb	0	; select bank0
 21515  1EB8  160D               	bsf	13,4	;volatile
 21516  1EB9                     i1l8493:	
 21517                           
 21518                           ;Dimmer_B1.c: 1707: }
 21519                           ;Dimmer_B1.c: 1708: }
 21520                           ;Dimmer_B1.c: 1711: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4) {
 21521  1EB9  0021               	movlb	1	; select bank1
 21522  1EBA  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21523  1EBB  0652               	xorwf	(_DimmerIntr2^(0+128)+10),w
 21524  1EBC  1D03               	skipz
 21525  1EBD  0008               	return
 21526                           
 21527                           ;Dimmer_B1.c: 1712: if (DimmerIntr2.ControlStatus == 1) {
 21528  1EBE  1DC8               	btfss	_DimmerIntr2^(0+128),3
 21529  1EBF  0008               	return
 21530                           
 21531                           ;Dimmer_B1.c: 1713: RB4 = 0;
 21532  1EC0  0020               	movlb	0	; select bank0
 21533  1EC1  120D               	bcf	13,4	;volatile
 21534                           
 21535                           ;Dimmer_B1.c: 1714: }
 21536                           ;Dimmer_B1.c: 1717: }
 21537                           ;Dimmer_B1.c: 1719: } else {
 21538  1EC2  0008               	return
 21539  1EC3                     i1l1010:	
 21540                           
 21541                           ;Dimmer_B1.c: 1720: if (DimmerIntr2.GO == 1) {
 21542  1EC3  1C48               	btfss	_DimmerIntr2^(0+128),0
 21543  1EC4  0008               	return
 21544                           
 21545                           ;Dimmer_B1.c: 1721: DimmerIntr2.Count++;
 21546  1EC5  3001               	movlw	1
 21547  1EC6  00F0               	movwf	??_DimmerLights_TMR_2
 21548  1EC7  0870               	movf	??_DimmerLights_TMR_2,w
 21549  1EC8  07CA               	addwf	(_DimmerIntr2^(0+128)+2),f
 21550                           
 21551                           ;Dimmer_B1.c: 1722: if (DimmerIntr2.Count == 5) {
 21552  1EC9  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21553  1ECA  3A05               	xorlw	5
 21554  1ECB  1D03               	skipz
 21555  1ECC  0008               	return
 21556                           
 21557                           ;Dimmer_B1.c: 1723: DimmerIntr2.Count = 0;
 21558  1ECD  01CA               	clrf	(_DimmerIntr2^(0+128)+2)
 21559                           
 21560                           ;Dimmer_B1.c: 1724: DimmerIntr2.GO = 0;
 21561  1ECE  1048               	bcf	_DimmerIntr2^(0+128),0
 21562                           
 21563                           ;Dimmer_B1.c: 1725: DimmerIntr2.Start = 1;
 21564  1ECF  1548               	bsf	_DimmerIntr2^(0+128),2
 21565                           
 21566                           ;Dimmer_B1.c: 1727: if (DimmerIntr2.ControlStatus == 1) {
 21567  1ED0  1DC8               	btfss	_DimmerIntr2^(0+128),3
 21568  1ED1  0008               	return
 21569                           
 21570                           ;Dimmer_B1.c: 1728: RB4 = 1;
 21571  1ED2  0020               	movlb	0	; select bank0
 21572  1ED3  160D               	bsf	13,4	;volatile
 21573  1ED4  0008               	return
 21574  1ED5                     __end_of_DimmerLights_TMR_2:	
 21575                           
 21576                           	psect	text148
 21577  1E65                     __ptext148:	
 21578 ;; *************** function _DimmerLights_TMR_1 *****************
 21579 ;; Defined at:
 21580 ;;		line 1504 in file "../src/Dimmer_B1.c"
 21581 ;; Parameters:    Size  Location     Type
 21582 ;;		None
 21583 ;; Auto vars:     Size  Location     Type
 21584 ;;		None
 21585 ;; Return value:  Size  Location     Type
 21586 ;;		None               void
 21587 ;; Registers used:
 21588 ;;		wreg, status,2, status,0
 21589 ;; Tracked objects:
 21590 ;;		On entry : 0/0
 21591 ;;		On exit  : 0/0
 21592 ;;		Unchanged: 0/0
 21593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21596 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21597 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21598 ;;Total ram usage:        1 bytes
 21599 ;; Hardware stack levels used:    1
 21600 ;; This function calls:
 21601 ;;		Nothing
 21602 ;; This function is called by:
 21603 ;;		_TMR1_ISR
 21604 ;; This function uses a non-reentrant model
 21605 ;;
 21606                           
 21607                           
 21608                           ;psect for function _DimmerLights_TMR_1
 21609  1E65                     _DimmerLights_TMR_1:	
 21610                           
 21611                           ;Dimmer_B1.c: 1506: if (DimmerIntr1.Start == 1) {
 21612                           
 21613                           ;incstack = 0
 21614                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 21615  1E65  0021               	movlb	1	; select bank1
 21616  1E66  1D3C               	btfss	_DimmerIntr1^(0+128),2
 21617  1E67  2E8B               	goto	i1l986
 21618                           
 21619                           ;Dimmer_B1.c: 1507: DimmerIntr1.Count++;
 21620  1E68  3001               	movlw	1
 21621  1E69  00F0               	movwf	??_DimmerLights_TMR_1
 21622  1E6A  0870               	movf	??_DimmerLights_TMR_1,w
 21623  1E6B  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 21624                           
 21625                           ;Dimmer_B1.c: 1509: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 21626  1E6C  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21627  1E6D  0647               	xorwf	(_DimmerIntr1^(0+128)+11),w
 21628  1E6E  1D03               	skipz
 21629  1E6F  2E72               	goto	i1l8413
 21630                           
 21631                           ;Dimmer_B1.c: 1510: DimmerIntr1.Count = 0;
 21632  1E70  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 21633                           
 21634                           ;Dimmer_B1.c: 1511: DimmerIntr1.Start = 0;
 21635  1E71  113C               	bcf	_DimmerIntr1^(0+128),2
 21636  1E72                     i1l8413:	
 21637                           
 21638                           ;Dimmer_B1.c: 1512: }
 21639                           ;Dimmer_B1.c: 1526: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 21640  1E72  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21641  1E73  0644               	xorwf	(_DimmerIntr1^(0+128)+8),w
 21642  1E74  1903               	btfsc	3,2
 21643                           
 21644                           ;Dimmer_B1.c: 1527: if (DimmerIntr1.ControlStatus == 1) {
 21645  1E75  1DBC               	btfss	_DimmerIntr1^(0+128),3
 21646  1E76  2E79               	goto	i1l8419
 21647                           
 21648                           ;Dimmer_B1.c: 1528: RA7 = 0;
 21649  1E77  0020               	movlb	0	; select bank0
 21650  1E78  138C               	bcf	12,7	;volatile
 21651  1E79                     i1l8419:	
 21652                           
 21653                           ;Dimmer_B1.c: 1529: }
 21654                           ;Dimmer_B1.c: 1530: }
 21655                           ;Dimmer_B1.c: 1533: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 21656  1E79  0021               	movlb	1	; select bank1
 21657  1E7A  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21658  1E7B  0645               	xorwf	(_DimmerIntr1^(0+128)+9),w
 21659  1E7C  1903               	btfsc	3,2
 21660                           
 21661                           ;Dimmer_B1.c: 1534: if (DimmerIntr1.ControlStatus == 1) {
 21662  1E7D  1DBC               	btfss	_DimmerIntr1^(0+128),3
 21663  1E7E  2E81               	goto	i1l8425
 21664                           
 21665                           ;Dimmer_B1.c: 1535: RA7 = 1;
 21666  1E7F  0020               	movlb	0	; select bank0
 21667  1E80  178C               	bsf	12,7	;volatile
 21668  1E81                     i1l8425:	
 21669                           
 21670                           ;Dimmer_B1.c: 1536: }
 21671                           ;Dimmer_B1.c: 1537: }
 21672                           ;Dimmer_B1.c: 1540: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 21673  1E81  0021               	movlb	1	; select bank1
 21674  1E82  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21675  1E83  0646               	xorwf	(_DimmerIntr1^(0+128)+10),w
 21676  1E84  1D03               	skipz
 21677  1E85  0008               	return
 21678                           
 21679                           ;Dimmer_B1.c: 1541: if (DimmerIntr1.ControlStatus == 1) {
 21680  1E86  1DBC               	btfss	_DimmerIntr1^(0+128),3
 21681  1E87  0008               	return
 21682                           
 21683                           ;Dimmer_B1.c: 1542: RA7 = 0;
 21684  1E88  0020               	movlb	0	; select bank0
 21685  1E89  138C               	bcf	12,7	;volatile
 21686                           
 21687                           ;Dimmer_B1.c: 1543: }
 21688                           ;Dimmer_B1.c: 1546: }
 21689                           ;Dimmer_B1.c: 1548: } else {
 21690  1E8A  0008               	return
 21691  1E8B                     i1l986:	
 21692                           
 21693                           ;Dimmer_B1.c: 1549: if (DimmerIntr1.GO == 1) {
 21694  1E8B  1C3C               	btfss	_DimmerIntr1^(0+128),0
 21695  1E8C  0008               	return
 21696                           
 21697                           ;Dimmer_B1.c: 1550: DimmerIntr1.Count++;
 21698  1E8D  3001               	movlw	1
 21699  1E8E  00F0               	movwf	??_DimmerLights_TMR_1
 21700  1E8F  0870               	movf	??_DimmerLights_TMR_1,w
 21701  1E90  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 21702                           
 21703                           ;Dimmer_B1.c: 1551: if (DimmerIntr1.Count == 5) {
 21704  1E91  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21705  1E92  3A05               	xorlw	5
 21706  1E93  1D03               	skipz
 21707  1E94  0008               	return
 21708                           
 21709                           ;Dimmer_B1.c: 1552: DimmerIntr1.Count = 0;
 21710  1E95  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 21711                           
 21712                           ;Dimmer_B1.c: 1553: DimmerIntr1.GO = 0;
 21713  1E96  103C               	bcf	_DimmerIntr1^(0+128),0
 21714                           
 21715                           ;Dimmer_B1.c: 1554: DimmerIntr1.Start = 1;
 21716  1E97  153C               	bsf	_DimmerIntr1^(0+128),2
 21717                           
 21718                           ;Dimmer_B1.c: 1556: if (DimmerIntr1.ControlStatus == 1) {
 21719  1E98  1DBC               	btfss	_DimmerIntr1^(0+128),3
 21720  1E99  0008               	return
 21721                           
 21722                           ;Dimmer_B1.c: 1557: RA7 = 1;
 21723  1E9A  0020               	movlb	0	; select bank0
 21724  1E9B  178C               	bsf	12,7	;volatile
 21725  1E9C  0008               	return
 21726  1E9D                     __end_of_DimmerLights_TMR_1:	
 21727                           
 21728                           	psect	text149
 21729  269C                     __ptext149:	
 21730 ;; *************** function _IOC_ISR *****************
 21731 ;; Defined at:
 21732 ;;		line 395 in file "../src/MCU_B1.c"
 21733 ;; Parameters:    Size  Location     Type
 21734 ;;		None
 21735 ;; Auto vars:     Size  Location     Type
 21736 ;;		None
 21737 ;; Return value:  Size  Location     Type
 21738 ;;		None               void
 21739 ;; Registers used:
 21740 ;;		wreg, status,2, status,0, pclath, cstack
 21741 ;; Tracked objects:
 21742 ;;		On entry : 0/0
 21743 ;;		On exit  : 0/0
 21744 ;;		Unchanged: 0/0
 21745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21750 ;;Total ram usage:        0 bytes
 21751 ;; Hardware stack levels used:    1
 21752 ;; Hardware stack levels required when called:    3
 21753 ;; This function calls:
 21754 ;;		_DimmerLights_IOC_1
 21755 ;;		_DimmerLights_IOC_2
 21756 ;; This function is called by:
 21757 ;;		_ISR
 21758 ;; This function uses a non-reentrant model
 21759 ;;
 21760                           
 21761                           
 21762                           ;psect for function _IOC_ISR
 21763  269C                     _IOC_ISR:	
 21764                           
 21765                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 21766                           
 21767                           ;incstack = 0
 21768                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 21769  269C  0021               	movlb	1	; select bank1
 21770  269D  1C2F               	btfss	_myMain^(0+128),0
 21771  269E  2EA4               	goto	i1l9047
 21772                           
 21773                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 21774  269F  319F  2748  31A6   	fcall	_DimmerLights_IOC_1
 21775                           
 21776                           ;MCU_B1.c: 408: DimmerLights_IOC_2();
 21777  26A2  319F  2785         	fcall	_DimmerLights_IOC_2
 21778  26A4                     i1l9047:	
 21779                           
 21780                           ;MCU_B1.c: 416: }
 21781                           ;MCU_B1.c: 418: IOCBF2 = 0;
 21782  26A4  0027               	movlb	7	; select bank7
 21783  26A5  1116               	bcf	22,2	;volatile
 21784                           
 21785                           ;MCU_B1.c: 419: IOCIF = 0;
 21786  26A6  100B               	bcf	11,0	;volatile
 21787  26A7  0008               	return
 21788  26A8                     __end_of_IOC_ISR:	
 21789                           
 21790                           	psect	text150
 21791  1F85                     __ptext150:	
 21792 ;; *************** function _DimmerLights_IOC_2 *****************
 21793 ;; Defined at:
 21794 ;;		line 1768 in file "../src/Dimmer_B1.c"
 21795 ;; Parameters:    Size  Location     Type
 21796 ;;		None
 21797 ;; Auto vars:     Size  Location     Type
 21798 ;;		None
 21799 ;; Return value:  Size  Location     Type
 21800 ;;		None               void
 21801 ;; Registers used:
 21802 ;;		wreg, status,2, status,0, pclath, cstack
 21803 ;; Tracked objects:
 21804 ;;		On entry : 0/0
 21805 ;;		On exit  : 0/0
 21806 ;;		Unchanged: 0/0
 21807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21810 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21811 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21812 ;;Total ram usage:        2 bytes
 21813 ;; Hardware stack levels used:    1
 21814 ;; Hardware stack levels required when called:    2
 21815 ;; This function calls:
 21816 ;;		i1_Division
 21817 ;; This function is called by:
 21818 ;;		_IOC_ISR
 21819 ;; This function uses a non-reentrant model
 21820 ;;
 21821                           
 21822                           
 21823                           ;psect for function _DimmerLights_IOC_2
 21824  1F85                     _DimmerLights_IOC_2:	
 21825                           
 21826                           ;Dimmer_B1.c: 1783: if (DimmerIntr2.Start == 0 && DimmerIntr2.GO == 0) {
 21827                           
 21828                           ;incstack = 0
 21829                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0+pclath+cstack]
 21830  1F85  0021               	movlb	1	; select bank1
 21831  1F86  1948               	btfsc	_DimmerIntr2^(0+128),2
 21832  1F87  0008               	return
 21833  1F88  1848               	btfsc	_DimmerIntr2^(0+128),0
 21834  1F89  0008               	return
 21835                           
 21836                           ;Dimmer_B1.c: 1785: if (RB2 != DimmerIntr2.Status) {
 21837  1F8A  0E49               	swapf	(_DimmerIntr2^(0+128)+1),w
 21838  1F8B  0C89               	rrf	9,f
 21839  1F8C  3901               	andlw	1
 21840  1F8D  00FA               	movwf	??_DimmerLights_IOC_2
 21841  1F8E  3000               	movlw	0
 21842  1F8F  0020               	movlb	0	; select bank0
 21843  1F90  190D               	btfsc	13,2	;volatile
 21844  1F91  3001               	movlw	1
 21845  1F92  067A               	xorwf	??_DimmerLights_IOC_2,w
 21846  1F93  1903               	skipnz
 21847  1F94  0008               	return
 21848                           
 21849                           ;Dimmer_B1.c: 1788: DimmerIntr2.Count = 0;
 21850  1F95  0021               	movlb	1	; select bank1
 21851  1F96  01CA               	clrf	(_DimmerIntr2^(0+128)+2)
 21852                           
 21853                           ;Dimmer_B1.c: 1789: DimmerIntr2.GO = 1;
 21854  1F97  1448               	bsf	_DimmerIntr2^(0+128),0
 21855                           
 21856                           ;Dimmer_B1.c: 1791: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 21857  1F98  1E48               	btfss	_DimmerIntr2^(0+128),4
 21858  1F99  1B48               	btfsc	_DimmerIntr2^(0+128),6
 21859                           
 21860                           ;Dimmer_B1.c: 1792: DimmerIntr2.Tune = 1;
 21861  1F9A  14C8               	bsf	_DimmerIntr2^(0+128),1
 21862                           
 21863                           ;Dimmer_B1.c: 1793: }
 21864                           ;Dimmer_B1.c: 1795: if (DimmerIntr2.TuneGO == 1) {
 21865  1F9B  1F49               	btfss	(_DimmerIntr2^(0+128)+1),6
 21866  1F9C  2FBB               	goto	i1l8537
 21867                           
 21868                           ;Dimmer_B1.c: 1796: DimmerIntr2.TuneGO = 0;
 21869  1F9D  1349               	bcf	(_DimmerIntr2^(0+128)+1),6
 21870                           
 21871                           ;Dimmer_B1.c: 1799: DimmerIntr2.TuneValue2 = Division(DimmerIntr2.DimmingValue, 2);
 21872  1F9E  3002               	movlw	2
 21873  1F9F  00FA               	movwf	??_DimmerLights_IOC_2
 21874  1FA0  087A               	movf	??_DimmerLights_IOC_2,w
 21875  1FA1  00F5               	movwf	i1Division@num
 21876  1FA2  084D               	movf	(_DimmerIntr2^(0+128)+5),w
 21877  1FA3  31A7  2714  319F   	fcall	i1_Division
 21878  1FA6  00FB               	movwf	??_DimmerLights_IOC_2+1
 21879  1FA7  087B               	movf	??_DimmerLights_IOC_2+1,w
 21880  1FA8  0021               	movlb	1	; select bank1
 21881  1FA9  00D0               	movwf	(_DimmerIntr2^(0+128)+8)
 21882                           
 21883                           ;Dimmer_B1.c: 1800: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - DimmerIntr2.
      +                          DimmingValue);
 21884  1FAA  034D               	decf	(_DimmerIntr2^(0+128)+5),w
 21885  1FAB  3AFF               	xorlw	255
 21886  1FAC  0750               	addwf	(_DimmerIntr2^(0+128)+8),w
 21887  1FAD  3E37               	addlw	55
 21888  1FAE  00FA               	movwf	??_DimmerLights_IOC_2
 21889  1FAF  087A               	movf	??_DimmerLights_IOC_2,w
 21890  1FB0  00D1               	movwf	(_DimmerIntr2^(0+128)+9)
 21891                           
 21892                           ;Dimmer_B1.c: 1801: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneVa
      +                          lue2;
 21893  1FB1  0851               	movf	(_DimmerIntr2^(0+128)+9),w
 21894  1FB2  0750               	addwf	(_DimmerIntr2^(0+128)+8),w
 21895  1FB3  00FA               	movwf	??_DimmerLights_IOC_2
 21896  1FB4  087A               	movf	??_DimmerLights_IOC_2,w
 21897  1FB5  00D2               	movwf	(_DimmerIntr2^(0+128)+10)
 21898                           
 21899                           ;Dimmer_B1.c: 1802: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 5;
 21900  1FB6  0852               	movf	(_DimmerIntr2^(0+128)+10),w
 21901  1FB7  3E05               	addlw	5
 21902  1FB8  00FA               	movwf	??_DimmerLights_IOC_2
 21903  1FB9  087A               	movf	??_DimmerLights_IOC_2,w
 21904  1FBA  00D3               	movwf	(_DimmerIntr2^(0+128)+11)
 21905  1FBB                     i1l8537:	
 21906                           
 21907                           ;Dimmer_B1.c: 1803: }
 21908                           ;Dimmer_B1.c: 1812: DimmerIntr2.Status = RB2 == 1 ? 1 : 0;
 21909  1FBB  12C9               	bcf	(_DimmerIntr2^(0+128)+1),5
 21910  1FBC  0020               	movlb	0	; select bank0
 21911  1FBD  1D0D               	btfss	13,2	;volatile
 21912  1FBE  0008               	return
 21913  1FBF  0021               	movlb	1	; select bank1
 21914  1FC0  16C9               	bsf	(_DimmerIntr2^(0+128)+1),5
 21915  1FC1  0008               	return
 21916  1FC2                     __end_of_DimmerLights_IOC_2:	
 21917                           
 21918                           	psect	text151
 21919  1F48                     __ptext151:	
 21920 ;; *************** function _DimmerLights_IOC_1 *****************
 21921 ;; Defined at:
 21922 ;;		line 1599 in file "../src/Dimmer_B1.c"
 21923 ;; Parameters:    Size  Location     Type
 21924 ;;		None
 21925 ;; Auto vars:     Size  Location     Type
 21926 ;;		None
 21927 ;; Return value:  Size  Location     Type
 21928 ;;		None               void
 21929 ;; Registers used:
 21930 ;;		wreg, status,2, status,0, pclath, cstack
 21931 ;; Tracked objects:
 21932 ;;		On entry : 0/0
 21933 ;;		On exit  : 0/0
 21934 ;;		Unchanged: 0/0
 21935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21938 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21939 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21940 ;;Total ram usage:        2 bytes
 21941 ;; Hardware stack levels used:    1
 21942 ;; Hardware stack levels required when called:    2
 21943 ;; This function calls:
 21944 ;;		i1_Division
 21945 ;; This function is called by:
 21946 ;;		_IOC_ISR
 21947 ;; This function uses a non-reentrant model
 21948 ;;
 21949                           
 21950                           
 21951                           ;psect for function _DimmerLights_IOC_1
 21952  1F48                     _DimmerLights_IOC_1:	
 21953                           
 21954                           ;Dimmer_B1.c: 1613: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 21955                           
 21956                           ;incstack = 0
 21957                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 21958  1F48  0021               	movlb	1	; select bank1
 21959  1F49  193C               	btfsc	_DimmerIntr1^(0+128),2
 21960  1F4A  0008               	return
 21961  1F4B  183C               	btfsc	_DimmerIntr1^(0+128),0
 21962  1F4C  0008               	return
 21963                           
 21964                           ;Dimmer_B1.c: 1615: if (RB2 != DimmerIntr1.Status) {
 21965  1F4D  0E3D               	swapf	(_DimmerIntr1^(0+128)+1),w
 21966  1F4E  0C89               	rrf	9,f
 21967  1F4F  3901               	andlw	1
 21968  1F50  00FA               	movwf	??_DimmerLights_IOC_1
 21969  1F51  3000               	movlw	0
 21970  1F52  0020               	movlb	0	; select bank0
 21971  1F53  190D               	btfsc	13,2	;volatile
 21972  1F54  3001               	movlw	1
 21973  1F55  067A               	xorwf	??_DimmerLights_IOC_1,w
 21974  1F56  1903               	skipnz
 21975  1F57  0008               	return
 21976                           
 21977                           ;Dimmer_B1.c: 1618: DimmerIntr1.Count = 0;
 21978  1F58  0021               	movlb	1	; select bank1
 21979  1F59  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 21980                           
 21981                           ;Dimmer_B1.c: 1619: DimmerIntr1.GO = 1;
 21982  1F5A  143C               	bsf	_DimmerIntr1^(0+128),0
 21983                           
 21984                           ;Dimmer_B1.c: 1621: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 21985  1F5B  1E3C               	btfss	_DimmerIntr1^(0+128),4
 21986  1F5C  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 21987                           
 21988                           ;Dimmer_B1.c: 1622: DimmerIntr1.Tune = 1;
 21989  1F5D  14BC               	bsf	_DimmerIntr1^(0+128),1
 21990                           
 21991                           ;Dimmer_B1.c: 1623: }
 21992                           ;Dimmer_B1.c: 1625: if (DimmerIntr1.TuneGO == 1) {
 21993  1F5E  1F3D               	btfss	(_DimmerIntr1^(0+128)+1),6
 21994  1F5F  2F7E               	goto	i1l8469
 21995                           
 21996                           ;Dimmer_B1.c: 1626: DimmerIntr1.TuneGO = 0;
 21997  1F60  133D               	bcf	(_DimmerIntr1^(0+128)+1),6
 21998                           
 21999                           ;Dimmer_B1.c: 1629: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 22000  1F61  3002               	movlw	2
 22001  1F62  00FA               	movwf	??_DimmerLights_IOC_1
 22002  1F63  087A               	movf	??_DimmerLights_IOC_1,w
 22003  1F64  00F5               	movwf	i1Division@num
 22004  1F65  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 22005  1F66  31A7  2714  319F   	fcall	i1_Division
 22006  1F69  00FB               	movwf	??_DimmerLights_IOC_1+1
 22007  1F6A  087B               	movf	??_DimmerLights_IOC_1+1,w
 22008  1F6B  0021               	movlb	1	; select bank1
 22009  1F6C  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 22010                           
 22011                           ;Dimmer_B1.c: 1630: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - DimmerIntr1.
      +                          DimmingValue);
 22012  1F6D  0341               	decf	(_DimmerIntr1^(0+128)+5),w
 22013  1F6E  3AFF               	xorlw	255
 22014  1F6F  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 22015  1F70  3E37               	addlw	55
 22016  1F71  00FA               	movwf	??_DimmerLights_IOC_1
 22017  1F72  087A               	movf	??_DimmerLights_IOC_1,w
 22018  1F73  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 22019                           
 22020                           ;Dimmer_B1.c: 1631: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 22021  1F74  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 22022  1F75  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 22023  1F76  00FA               	movwf	??_DimmerLights_IOC_1
 22024  1F77  087A               	movf	??_DimmerLights_IOC_1,w
 22025  1F78  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 22026                           
 22027                           ;Dimmer_B1.c: 1632: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 5;
 22028  1F79  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 22029  1F7A  3E05               	addlw	5
 22030  1F7B  00FA               	movwf	??_DimmerLights_IOC_1
 22031  1F7C  087A               	movf	??_DimmerLights_IOC_1,w
 22032  1F7D  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 22033  1F7E                     i1l8469:	
 22034                           
 22035                           ;Dimmer_B1.c: 1633: }
 22036                           ;Dimmer_B1.c: 1642: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 22037  1F7E  12BD               	bcf	(_DimmerIntr1^(0+128)+1),5
 22038  1F7F  0020               	movlb	0	; select bank0
 22039  1F80  1D0D               	btfss	13,2	;volatile
 22040  1F81  0008               	return
 22041  1F82  0021               	movlb	1	; select bank1
 22042  1F83  16BD               	bsf	(_DimmerIntr1^(0+128)+1),5
 22043  1F84  0008               	return
 22044  1F85                     __end_of_DimmerLights_IOC_1:	
 22045                           
 22046                           	psect	text152
 22047  2714                     __ptext152:	
 22048 ;; *************** function i1_Division *****************
 22049 ;; Defined at:
 22050 ;;		line 1499 in file "../src/Dimmer_B1.c"
 22051 ;; Parameters:    Size  Location     Type
 22052 ;;  value           1    wreg     unsigned char 
 22053 ;;  num             1    5[COMMON] unsigned char 
 22054 ;; Auto vars:     Size  Location     Type
 22055 ;;  value           1    8[COMMON] unsigned char 
 22056 ;;  Division        1    9[COMMON] unsigned char 
 22057 ;; Return value:  Size  Location     Type
 22058 ;;                  1    wreg      unsigned char 
 22059 ;; Registers used:
 22060 ;;		wreg, status,2, status,0, pclath, cstack
 22061 ;; Tracked objects:
 22062 ;;		On entry : 0/0
 22063 ;;		On exit  : 0/0
 22064 ;;		Unchanged: 0/0
 22065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22066 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22067 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22068 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22069 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22070 ;;Total ram usage:        5 bytes
 22071 ;; Hardware stack levels used:    1
 22072 ;; Hardware stack levels required when called:    1
 22073 ;; This function calls:
 22074 ;;		i1___lbdiv
 22075 ;; This function is called by:
 22076 ;;		_DimmerLights_IOC_1
 22077 ;;		_DimmerLights_IOC_2
 22078 ;; This function uses a non-reentrant model
 22079 ;;
 22080                           
 22081                           
 22082                           ;psect for function i1_Division
 22083  2714                     i1_Division:	
 22084                           
 22085                           ;incstack = 0
 22086                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 22087                           ;i1Division@value stored from wreg
 22088  2714  00F8               	movwf	i1Division@value
 22089                           
 22090                           ;Dimmer_B1.c: 1500: char result = (char) (value / num);
 22091  2715  0875               	movf	i1Division@num,w
 22092  2716  00F6               	movwf	??i1_Division
 22093  2717  0876               	movf	??i1_Division,w
 22094  2718  00F0               	movwf	i1___lbdiv@divisor
 22095  2719  0878               	movf	i1Division@value,w
 22096  271A  319B  23AE         	fcall	i1___lbdiv
 22097  271C  00F7               	movwf	??i1_Division+1
 22098  271D  0877               	movf	??i1_Division+1,w
 22099  271E  00F9               	movwf	i1Division@result
 22100                           
 22101                           ;Dimmer_B1.c: 1501: return result;
 22102  271F  0879               	movf	i1Division@result,w
 22103  2720  0008               	return
 22104  2721                     __end_ofi1_Division:	
 22105                           
 22106                           	psect	text153
 22107  1BAE                     __ptext153:	
 22108 ;; *************** function i1___lbdiv *****************
 22109 ;; Defined at:
 22110 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 22111 ;; Parameters:    Size  Location     Type
 22112 ;;  dividend        1    wreg     unsigned char 
 22113 ;;  divisor         1    0[COMMON] unsigned char 
 22114 ;; Auto vars:     Size  Location     Type
 22115 ;;  dividend        1    2[COMMON] unsigned char 
 22116 ;;  __lbdiv         1    4[COMMON] unsigned char 
 22117 ;;  __lbdiv         1    3[COMMON] unsigned char 
 22118 ;; Return value:  Size  Location     Type
 22119 ;;                  1    wreg      unsigned char 
 22120 ;; Registers used:
 22121 ;;		wreg, status,2, status,0
 22122 ;; Tracked objects:
 22123 ;;		On entry : 0/0
 22124 ;;		On exit  : 0/0
 22125 ;;		Unchanged: 0/0
 22126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22127 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22128 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22129 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22130 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22131 ;;Total ram usage:        5 bytes
 22132 ;; Hardware stack levels used:    1
 22133 ;; This function calls:
 22134 ;;		Nothing
 22135 ;; This function is called by:
 22136 ;;		i1_Division
 22137 ;; This function uses a non-reentrant model
 22138 ;;
 22139                           
 22140                           
 22141                           ;psect for function i1___lbdiv
 22142  1BAE                     i1___lbdiv:	
 22143                           
 22144                           ;incstack = 0
 22145                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 22146                           ;i1___lbdiv@dividend stored from wreg
 22147  1BAE  00F2               	movwf	i1___lbdiv@dividend
 22148  1BAF  01F4               	clrf	i1___lbdiv@quotient
 22149  1BB0  0870               	movf	i1___lbdiv@divisor,w
 22150  1BB1  1903               	btfsc	3,2
 22151  1BB2  2BCD               	goto	i1l7719
 22152  1BB3  01F3               	clrf	i1___lbdiv@counter
 22153  1BB4  0AF3               	incf	i1___lbdiv@counter,f
 22154  1BB5                     i1l7707:	
 22155  1BB5  1BF0               	btfsc	i1___lbdiv@divisor,7
 22156  1BB6  2BBE               	goto	i1l7709
 22157  1BB7  1003               	clrc
 22158  1BB8  0DF0               	rlf	i1___lbdiv@divisor,f
 22159  1BB9  3001               	movlw	1
 22160  1BBA  00F1               	movwf	??i1___lbdiv
 22161  1BBB  0871               	movf	??i1___lbdiv,w
 22162  1BBC  07F3               	addwf	i1___lbdiv@counter,f
 22163  1BBD  2BB5               	goto	i1l7707
 22164  1BBE                     i1l7709:	
 22165  1BBE  1003               	clrc
 22166  1BBF  0DF4               	rlf	i1___lbdiv@quotient,f
 22167  1BC0  0870               	movf	i1___lbdiv@divisor,w
 22168  1BC1  0272               	subwf	i1___lbdiv@dividend,w
 22169  1BC2  1C03               	skipc
 22170  1BC3  2BC8               	goto	L15
 22171  1BC4  0870               	movf	i1___lbdiv@divisor,w
 22172  1BC5  02F2               	subwf	i1___lbdiv@dividend,f
 22173  1BC6  1474               	bsf	i1___lbdiv@quotient,0
 22174  1BC7  1003               	clrc
 22175  1BC8                     L15:	
 22176  1BC8  0CF0               	rrf	i1___lbdiv@divisor,f
 22177  1BC9  3001               	movlw	1
 22178  1BCA  02F3               	subwf	i1___lbdiv@counter,f
 22179  1BCB  1D03               	btfss	3,2
 22180  1BCC  2BBE               	goto	i1l7709
 22181  1BCD                     i1l7719:	
 22182  1BCD  0874               	movf	i1___lbdiv@quotient,w
 22183  1BCE  0008               	return
 22184  1BCF                     __end_ofi1___lbdiv:	
 22185  007E                     btemp	set	126	;btemp
 22186  007E                     pic14e$flags	set	126
 22187  007E                     wtemp	set	126
 22188  007E                     wtemp0	set	126
 22189  0080                     wtemp1	set	128
 22190  0082                     wtemp2	set	130
 22191  0084                     wtemp3	set	132
 22192  0086                     wtemp4	set	134
 22193  0088                     wtemp5	set	136
 22194  007F                     wtemp6	set	127
 22195  007E                     ttemp	set	126
 22196  007E                     ttemp0	set	126
 22197  0081                     ttemp1	set	129
 22198  0084                     ttemp2	set	132
 22199  0087                     ttemp3	set	135
 22200  007F                     ttemp4	set	127
 22201  007E                     ltemp	set	126
 22202  007E                     ltemp0	set	126
 22203  0082                     ltemp1	set	130
 22204  0086                     ltemp2	set	134
 22205  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         272
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      9      80
    BANK2            80      0      78
    BANK3            80      0      79
    BANK4            80      0      78
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(2) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK4[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights2(BANK3[9]), DimmerLights1(BANK3[9]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2
    _DimmerLights_IOC_2->i1_Division
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setProductData
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setControl_Lights_Table->_setRFSW_Control
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  178733
                                              5 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1523
                                             13 BANK0      1     1      0
                             _setBuz
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    7529
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    7529
                                             69 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3952
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3952
                                             19 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1182
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1182
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   54005
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   54005
                                              3 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   49431
                                             78 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5883
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   43364
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     4     4      0     338
                                              4 BANK0      4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      4     4      0   13739
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   22704
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    6644
                                             69 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1306
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1306
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1663
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3523
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   58132
       _DimmerLights_DimmingFunction
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   57857
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   33592
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1151
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     355
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     355
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    5321
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   23770
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    4739
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     444
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     355
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_DimmingFunction                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   27563
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   27563
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     622
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     251
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    6468
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    6468
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    4316
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
                   _getDimmer_LoadGO (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 6     6      0    1843
                                             13 BANK0      6     6      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1523
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_Dimming_Sw                             2     2      0      69
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     614
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     614
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  2     2      0     307
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     307
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     307
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmer_LoadGO (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _DimmerLights_DimmingFunction
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _getDimmer_LoadGO (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmer_LoadGO (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmer_LoadGO (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _getDimmer_LoadGO (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmer_LoadGO (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
     _setProductData
       _getDimmerLights_ValueToPercent (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmer_LoadGO (ARG)
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmer_LoadGO (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
               _getDimmer_LoadGO (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                 _getDimmer_LoadGO (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                 _getDimmer_LoadGO (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmer_LoadGO (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmer_LoadGO (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setTxData

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
     _DimmerLights_IOC_2
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      9      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      4E      13       97.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     199      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     199      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Mar 19 16:32:01 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 19FD                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l98 1211  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1C79  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00D4                            setTemp_Main@AD 006D  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 18A1  
                  __end_of_setDelayOff_GO 0A6C                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                    setRF_AdjControl@status 0025  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 14E9  
                    _setDimmerLights_Line 1AD4                              ___ftadd@sign 004B  
                                     l100 1225                                       l110 07E3  
                                     l112 07F3                                       l108 07F9  
                                     l109 07F5                      _setDimmerLights_SwOn 170C  
                                     l327 1A09                                       l328 1A0B  
                                     l371 1CA3                                       l259 1603  
                                     l581 1693                                       l914 0FB7  
                                     l748 0D17                                       l749 0D6D  
                                     l767 1956                                       l943 1AE4  
                                     l874 1CDA                                       l948 18AA  
                                     l949 18B1                                       _GIE 005F  
                                     _CRC 00D6                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 000B  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00DB  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 0136                                       _Cmd 00D7  
            getDimmerLights_Status@lights 0022                                       _Sw1 01D0  
                                     _Sw2 0245                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1A16                     _Buzzer_Initialization 25E2  
                         __end_of_ADC_Set 2626                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1D98               _setDimmerIntr_ControlStatus 1D69  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 26A8  
                   _setDimmerLights_OnOff 0F2C          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 006C                              ___ftdiv@sign 003D  
                                    l1040 17A6                                      l1051 17BA  
                                    l1061 17E8                                      l1205 10AC  
                                    l1056 17EA                                      l1058 17DF  
                                    l1170 1B59                                      l1067 17FE  
                                    l1171 1B63                                      l1502 0951  
                                    l2075 0555                                      l2069 0604  
                                    l2513 0B0F                                      l1722 1DF4  
                                    l2506 1E2A                            _Load_Main$4309 0067  
                                    l1492 102A                                      l2524 0B95  
                                    l2452 0701                                      l3261 133C  
                                    l1717 1DDD                           __end_of_IOC_Set 2686  
                                    l2453 0752                                      l1718 1DF8  
                                    l1478 106C                                      l3094 1AFB  
                                    l3255 1325                                      l2527 12DE  
                                    l2448 07B2                                      l3284 04DC  
                                    l1749 06E0                                      l2493 14E7  
                                    l1693 10F2                                      l1758 19FC  
                                    l2478 2735                                      l1885 02B0  
                                    l1895 0250                                      l1887 008B  
                                    l1896 024E                                      l1888 0087  
                                    l7025 1729                                      l1889 0082  
                                    l2881 0435                                      l7051 1777  
                                    l7035 173A                                      l7027 172C  
                                    l2859 1934                                      l2883 0301  
                                    l7037 173F                                      l7063 1F03  
                                    l7047 1766                                      l7119 1992  
                                    l7143 146C                                      l7127 1DB0  
                                    l8023 1012                                      l8111 14B3  
                                    l7049 176C                                      l7241 1CBF  
                                    l6611 1311                                      l6603 12FB  
                                    l8115 14BC                                      l8131 19C0  
                   _setDimmerLights_SwOff 1ED5                                      l7085 0A1E  
                                    l7333 086A                                      l7317 12D1  
                                    l6607 1302                                      l7095 0A4E  
                                    l7239 1CB4                                      l6705 1964  
                                    l6721 19E2                                      l6617 132A  
                                    l6609 130C                                      l6801 04B7  
                                    l7505 194C                                      l7265 1D54  
                                    l7337 086F                                      l8145 1B3C  
                                    l9201 0AE2                                      l6643 114E  
                                    l6619 1332                                      l6811 04D8  
                                    l6803 04BB                                      l7283 19E7  
                                    l7099 0A62                                      l8171 1E37  
                                    l7347 08BF                                      l8155 1B48  
                                    l8147 1B3E                                      l6717 19D8  
                                    l6661 1174                                      l6653 1156  
                                    l6637 1143                                      l8341 17AC  
                                    l7613 279F                                      l7277 189F  
                                    l8173 1E43                                      l8157 1B4C  
                                    l6655 1162                                      l6815 04EE  
                                    l6911 0CC3                                      l6903 0CAF  
                                    l8343 17B3                                      l8335 17A0  
                                    l7527 1DD8                                      l7615 27A4  
                                    l7287 19F6                                      l6735 27A9  
                                    l8183 1E5E                                      l8079 278E  
                                    l6729 197B                                      l6665 117D  
                                    l6809 04CE                                      l8345 17B7  
                                    l7537 1DEF                                      l7529 1DE1  
                                    l7609 2798                                      l9065 0EE4  
                                    l8281 1BEE                                      l7369 1F38  
                                    l7641 0AFA                                      l9153 16D8  
                                    l9145 16B9                                      l6819 0500  
                                    l6915 0CCB                                      l8347 17BB  
                                    l6739 27AF                                      l9091 104B  
                                    l8179 1E55                                      l7651 0B25  
                                    l8099 149A                                      l9227 10DB  
                                    l9219 10CD                                      l6669 1185  
                                    l6757 1C3F                                      l6829 051B  
                                    l6773 046C                                      l6845 0BC3  
                                    l8269 1BD9                                      l9325 0172  
                                    l9333 019B                                      l9253 0069  
                                    l7661 0B6E                                      l7653 0B40  
                                    l8613 1B79                                      l9173 1707  
                                    l9157 16E0                                      l6791 0495  
                                    l6839 0BAD                                      l7487 1D81  
                                    l7495 19A9                                      l8279 1BE9  
                                    l9319 0163                                      l9271 008A  
                                    l7663 0B72                                      l7655 0B62  
                                    l8615 1B7C                                      l7681 1C1A  
                                    l6769 0465                                      l6881 0C56  
                                    l8377 17F7                                      l8369 17E1  
                                    l9409 029E                                      l9361 01FB  
                                    l9329 018F                                      l7665 0B76  
                                    l7657 0B66                                      l7649 0B1E  
                                    l9193 0AB4                                      l7683 1C23  
                                    l6779 047B                                      l6867 0C1D  
                                    l6859 0C04                                      l6939 0972  
                                    l8651 08DA                                      l9339 01AB  
                                    l7659 0B6A                                      l8723 0567  
                                    l8619 1B81                                      l7693 1C32  
                                    l6797 04A8                                      l6973 09D7  
                                    l6965 09BD                                      l6957 09A2  
                                    l9293 00E0                                      l7669 0B7A  
                                    l8717 0558                                      l8725 056A  
                                    l9197 0ACB                                      l9189 0A9D  
                   _myMain_Initialization 18C7                                      l6799 04B2  
                                    l6887 0C6C                                      l6967 09C6  
                                    l6959 09B0                                      l7871 1FEB  
                                    l8639 276C                                      l9287 00AE  
                                    l6969 09C9                                      l7881 1FFE  
                                    l7857 1FD2                                      l7953 11A8  
                                    l8665 094A                                      l8657 08EF  
                                    l9377 0213                                      l8905 0369  
                                    l6899 0CA7                                      l9811 1C8C  
                                    l8755 05DB                                      l7869 1FE8  
                                    l9901 080F                                      l9805 1C83  
                                    l8861 1939                                      l8765 05F0  
                                    l7879 1FF9                                      l9751 1A5C  
                                    l9807 1C86                                      l8919 03A9  
                                    l8767 05F2                                      l9745 1A53  
                                    l9833 1119                                      l8865 193F  
                                    l8929 03DD                                      _CFGS 0CAE  
                                    l9931 0840                                      l9915 0820  
                                    l9923 0828                                      l9747 1A56  
                                    l9843 1129                                      l9835 111C  
                                    l9771 1ACD                                      l9909 0817  
                                    l9781 1C62                                      l9845 112C  
                                    l9935 0844                                      l8959 1AF5  
                                    l9839 1122                                      l9951 15D2  
                                    l8895 0334                                      l8879 02E9  
                            __CFG_WDTE$ON 0000                                      l9785 1C68  
                                    l9849 1132                                      l9769 1AC7  
                                    l8979 07CD                                      l9939 0848  
                                    l9779 1C5F                                      l9955 15D8  
                                    l9981 1616                                      l9973 1609  
                                    l9949 15CF                                      l9983 1619  
                                    l9975 160C                                      l9969 15EA  
                                    l9987 161F                                      l9979 1612  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u6015 0C78                                      u6025 0C88  
                                    _PEIE 005E                                      u5405 132D  
                                    u6045 0CB0                                      u6055 0CB6  
                                    u6135 0979                                      u5505 1163  
                                    u5515 116D                                      u5435 1343  
                                    u5525 1175                                      u5365 1307  
                                    u6085 0CCC                                      u6165 09A3  
                                    u8005 1E44                                      u6095 0CD2  
                                    u8015 1E4E                                      u5385 1320  
                                    u8025 1E56                                      u6195 09BE  
                                    u6435 0A2A                                      u5485 1159  
                                    u5805 04A9                                      u9105 05E2  
                                    u6490 1427                                      u5835 04BC  
                                    u5775 0496                                      u5935 0BD5  
                                    u6495 1425                                      u5865 04CF  
                                    u5945 0BE5                                      u9065 05AD  
                                    u5955 0C05                                      u6595 1CA9  
                                    u5965 0C14                                      u9085 05C4  
                                    u5975 0C1E                                      u7655 1927  
                                    u9515 07C3                                      u7685 1AA7  
                                    u9715 1063                                      u9475 1AFC  
                                    u9485 1B01                                      u7985 1E3A  
                                    u9825 16F7                                      u9905 0AD5  
                                    u9915 0AEC                                      _LWLO 0CAD  
                                    u9775 16C8                                      u9875 0A90  
                                    u9955 10EA                                      u9885 0AA7  
                                    u9895 0ABE                                      _RSSI 00DD  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1A7F                _setDimmerLights_DimmingRun 1A64  
                                    _Buz1 0120                                      _Load 0138  
                                    _Temp 0160                                      _main 1239  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 169A  
                         __end_of_RF_Main 25EE                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 2708  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E         setDimmerLights_SwOn@dimmingStatus 002E  
    __end_of_DimmerLights_DimmingFunction 1800     __size_of_DimmerLights_DimmingFunction 0080  
            _DimmerLights_DimmingFunction 1780                __end_of_setRFSW_AdjControl 08D3  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2527 0022      _getDimmerLights_Allow_Condition$2528 0023  
    _getDimmerLights_Allow_Condition$2529 0024                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 2000  __size_of_getDimmerLights_Allow_Condition 003E  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1FC2                    _getDimmerLights_Status 273F  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 26F0  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00D9  
                                   l10011 1570                                     l10005 1567  
                                   l10007 156A                                     l10027 1582  
                                   l10203 074D                                     l10109 0FFD  
                                   l10141 1547                                     l10029 159B  
                                   l10071 0F91                                     l10127 1511  
                                   l10303 062A                                     l10231 0793  
                                   l10065 0F73                                     l10129 1518  
                                   l10321 0671                                     l10313 0649  
                                   l10217 0761                                     l10067 0F8A  
                                   l10075 0F97                                     l10139 1540  
                                   l10323 064C                                     l10093 0FCE  
                                   l10341 068E                                     l10325 0679  
                                   l10309 063A                                     l10245 07AB  
                                   l10263 1CDC                                     l10343 06BB  
                                   l10351 06D6                                     l10089 0FC7  
                                   l10345 06C5                                     l10339 06B3  
                                   l10393 125D                                     l10397 1268  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0065                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00EA                           __end_of___awdiv 118C  
                         __end_of___lbdiv 1C34                           __end_of___ftadd 0533  
                         __end_of___ftdiv 0C3F                           __end_of___ftneg 2667  
                                   u10105 00DE                                     u10115 0122  
                         __end_of___ftmul 0CF3                                     u10095 00AC  
                                   u10195 01A2                           ___awdiv@divisor 0020  
                                   _T1CON 0018                                     u11515 0782  
                         __end_of___fttol 09E0                                     u10675 18FD  
                                   u11660 0677                                     u11485 0725  
                                   u11665 0655                                     u11690 06B9  
                                   u11695 0697                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 1E65                                     i1l986 1E8B  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 192D                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 141D   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 13B8                                     _Light 00DC  
                         i1Division@value 0078                          __end_of_TMR1_ISR 1C12  
                             ?i1_Division 0075                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 26FC  
      DimmerLights_DimmingFunction@lights 0021                                     _getAD 1B6E  
                           ___awtoft@sign 002D                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 2800               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03E8  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 27DC  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012             __end_of_setLED_Initialization 27CA  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      __size_ofi1___lbdiv 0021                       _getAll_Sw_KeyStatus 2761  
                      _setRF_DimmerLights 141D                           ___lbdiv@divisor 0020  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0023                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0067               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0020               ??_setDimmerLights_DimmingOn 0022  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0021  
                        ?_CC2500_PowerRST 0070             ?_DimmerLights_DimmingFunction 0070  
                       ?_setMemory_Modify 0070                          __end_of_Division 2730  
                 __size_of_getDelayOff_GO 0011                              __end_of_main 1294  
                     ?_setRF_DimmerLights 0065                          __end_of_Fosc_Set 25F8  
          getMain_All_LightsStatus@status 0020                        ??_setMemory_Modify 0020  
            setDimmerLights_OnOff@command 006D                            _Exception_Main 060A  
                        ?_CC2500_WriteREG 0022                                 ??_ADC_Set 0020  
                    _setSw_Initialization 264E                                    ??_main 0070  
                           ___fttol@sign1 0056                      ?_getAll_Sw_KeyStatus 0070  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0062  
            ??_DimmerLights_SelectPointer 0020                   _setControl_Lights_Table 0AF9  
                          _setMemory_Data 26C0                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 0778  
      setDimmerIntr_ControlStatus@command 0020                   _setDimmerLights_Dimming 118C  
                               ??_IOC_ISR 007C                                 ??_IOC_Set 0020  
                             _DimmerIntr1 00BC                               _DimmerIntr2 00C8  
                _getMain_All_LightsStatus 188E                  __size_of_setRFSW_Control 005E  
                      _RF_Timeout_Counter 18EE                   ??_Switch_Initialization 0025  
                  ?_setDimmerLights_OnOff 006D                      ??_setRF_DimmerLights 0066  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 162B  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E          __end_of_getDimmerIntr_Dimming_Sw 19E4  
                               ??_RF_Main 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 2646                                 ??_WDT_Set 0020  
                        __end_of___awtoft 1C56                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 1353                  _getMain_All_Error_Status 1DC7  
                setRFSW_Control@rfDimming 00E6                                    _IOCBF2 1CB2  
                                  i1l1010 1EC3                                    i1l1441 001A  
                                  i1l8413 1E72                                    i1l9037 1C0B  
                                  i1l9047 26A4                                    i1l8425 1E81  
                                  i1l7707 1BB5                                    i1l8419 1E79  
                                  i1l7709 1BBE                                    i1l7719 1BCD  
                                  i1l8537 1FBB                                    i1l8481 1EAA  
                                  i1l8469 1F7E                                    i1l8493 1EB9  
                                  i1l8487 1EB1                                    i1l9637 0012  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0026  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 0263  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1A30                                    u961_25 1C06  
                                  _WDTCON 0097      __end_of_setDimmerLights_DimmingClose 26C0  
   __size_of_setDimmerLights_DimmingClose 000C              _setDimmerLights_DimmingClose 26B4  
                      DelayTime_1us@count 0020                      Exception_Main@i_3930 0033  
                      setRF_AdjControl@sw 0027            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 0063             __end_of_CC2500_PowerOnInitial 1918  
                                  _Dimmer 012C                                    _DlySw1 01D9  
                                  _DlySw2 01DE                          _setRF_AdjControl 1F0E  
                ?_setOverTemp_ADV_Restore 0070             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 27A6                __end_of_Mcu_Initialization 27EE  
                     __end_of_Buzzer_Main 0800                                    _Memory 0220  
                        i1Division@result 0079                                    _Timer1 0131  
                                  ___bmul 27A6                    __end_of_Exception_Main 06E1  
                    Exception_Main@lights 0035                                    ___wmul 1AF2  
                     __size_ofi1_Division 000D                                 ??___awdiv 0024  
                               ??___lbdiv 0021                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 0017                                 ??___ftdiv 0034  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0070                    ??_setDimmerLights_Line 0020  
                                  _r_data 00E3                      Exception_Main@status 002E  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1BF0  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0021  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0020          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1BCF                                    _s_data 00E4  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 0800  
                                  _myMain 00AF                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 26CC                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0027                                    _setBuz 11E0  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 006E  
             __end_of_Load_Initialization 25E8          ??_setDimmerLights_Initialization 0020  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0020  
        __end_of_setDimmerIntr_Dimming_RF 1DC7          __end_of_setDimmerIntr_Dimming_Sw 1D69  
                   ___ftmul@f3_as_product 0039                         __end_ofi1___lbdiv 1BCF  
               _setDimmerLights_DimmingOn 1CEC                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 18C7  
             getMain_Lights_Count@status1 0021               getMain_Lights_Count@status2 0022  
             __size_of_DimmerLights_IOC_1 003D               __size_of_DimmerLights_IOC_2 003D  
                   __end_of_SwPointSelect 19CB               __size_of_DimmerLights_TMR_1 0038  
             __size_of_DimmerLights_TMR_2 0038              __size_of_Flash_Memory_Modify 0086  
                 __size_of_LedPointSelect 0020           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 006C                          ___lbdiv@dividend 0022  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 192D               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 004F           setDimmerIntr_DimmingValue@value 0062  
         getDimmerIntr_DimmingValue@value 0021                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5789 0022                             ?_my_MainTimer 0070  
               _setDimmerLights_SwOn$2441 002F                 _setDimmerLights_SwOn$2450 0030  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039             ?_setDimmerLights_DimmingClose 0070  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 004E  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1B8E                             __end_of_getAD 1B8E  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
                      _LED_Initialization 26D8                           _getSw_KeyStatus 1B2F  
               ??_setControl_Lights_Table 006E                        getRF_KeyStatus@key 0021  
                         ?_setMemory_Data 0020            ??_DimmerLights_DimmingFunction 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0024                      _getMain_Lights_Count 27CA  
                               ?_WDT_Main 0070                         __end_of_Load_Main 02B6  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1986                __end_of_set_TimeoutCleared 260D  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0067  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 26A8                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 25EE                        ??_CC2500_WriteByte 0020  
                               ?_Division 0025                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 07B6                         ??_setRFSW_Control 006D  
             ?_setDimmerLights_DimmingRun 0022                         __end_of_Temp_Main 25F4  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 2626                             ??_Switch_Main 0036  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 00DA  
                       LedPointSelect@led 0021     getAll_DimmerIntr_Dimming_Sw_RF@status 0023  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1239                            _getDelayOff_GO 2750  
                     _CC2500_WriteCommand 1A4A                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020                          ??_setDelayOff_GO 0067  
       __end_of_DimmerIntr_Initialization 0DA7             ??_DimmerLights_Initialization 0064  
                                 ?___wmul 0020                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070         __size_of_getDimmerIntr_Dimming_Sw 0019  
                              _getLoad_AD 169A                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 2636                 ?_getDimmerIntr_Dimming_Sw 0070  
                      __size_of_setTxData 00BB                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 261F                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 0A6C        __end_of_DimmerLights_SelectPointer 1986  
              _DimmerLights_SelectPointer 196F                                ??_WDT_Main 0020  
            __end_of_setRF_Initialization 2691                        _setRFSW_AdjControl 0853  
                  __end_of_setProductData 26B4             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 269C                                   _IOC_Set 267B  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0025                      ?_CC2500_WriteCommand 0070  
                            ??i1_Division 0076                         _Flash_Memory_Main 1031  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1A16  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006C  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 25EB                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0026  
                                 _WDT_Set 26FC           __end_of_setControl_Lights_Table 0B96  
                         setRF_Main@error 00E9                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 11E0                   ??_setLoad_AH_AL_Restore 0020  
                     getCmd_Status@number 0020              __end_of_CC2500_FrequencyCabr 2714  
                         __size_of_IO_Set 001A                       setCmd_Status@number 0022  
       __size_of_setDimmerIntr_Dimming_RF 002F         __size_of_setDimmerIntr_Dimming_Sw 002B  
                       __end_of_getBuz_GO 2783                 ?_setDimmerIntr_Dimming_RF 0020  
                     ??_Flash_Memory_Main 0026                 ?_setDimmerIntr_Dimming_Sw 0020  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 2761  
                                 _VarLED1 01E7                                   _VarLED2 01EB  
          __end_of_getDimmerLights_Status 2750                         __end_of_getRxData 14E9  
                 __end_of_getSw_KeyStatus 1B4E                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 1138  
          ??_setDimmerLights_DimmingClose 0023                                   ___lbdiv 1C12  
                                 ___ftadd 043D                                   ___ftdiv 0B96  
                                 ___ftneg 265E                           __size_of___wmul 001E  
                                 ___ftmul 0C3F                                   ___fttol 0959  
                     __end_of_Switch_Main 269C                        __end_ofi1_Division 2721  
                                 ___lwdiv 1E2E                ??_getMain_All_LightsStatus 0020  
                 ??_Buzzer_Initialization 0020                           _getRF_KeyStatus 2783  
                              ??___awtoft 002B                                ??___ftpack 0025  
                         __size_of_setLED 0053                      setRFSW_AdjControl@sw 0068  
                         __size_of_setBuz 0059                                   __ptext1 10B3  
                                 __ptext2 18C7                                   __ptext3 0A6C  
                                 __ptext4 169A                                   __ptext5 1B6E  
                                 __ptext6 27EE                                   __ptext7 0002  
                                 __ptext8 25F1                                   __ptext9 0533  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001B  
              ??_getMain_All_Error_Status 0020                   ??_setDimmerLights_OnOff 006E  
                         ?_setProductData 0062                        i1___lbdiv@dividend 0072  
               __end_of_Flash_Memory_Main 1072                 __end_of_Flash_Memory_Read 1A30  
                 ??_setDimmerLights_SwOff 0022                                _setRF_Main 06E1  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 262E  
                __end_of_setRF_AdjControl 1F48                         _DimmerLights_Main 1CC4  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 2613  
              __end_of_CC2500_ClearRXFIFO 2600                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 2604                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00EE  
                          _LedPointSelect 1B4E                 getAll_Sw_KeyStatus@status 0021  
                         getTemp_AD@ADRES 0026                       _DelayOffPointSelect 1958  
                                 clrloop0 261A            __size_of_Switch_Initialization 0008  
           __end_of_Switch_Initialization 265E                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1D14  
                           _DelayTime_1us 1C9E                         __end_of_setTxData 0E62  
              __end_of_Flash_Memory_Write 1031        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 2613                __end_of_setRF_TransceiveGO 188E  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0070  
                    Flash_Memory_Read@ret 0023                                   initloop 2614  
                              _setSw_Main 02B6                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 0032                         _CC2500_ReadStatus 1C79  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 27B8  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                        i1___lbdiv@quotient 0074  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 1554  
                           _CC2500_TxData 15BF                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 08D3                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1800                             _setCmd_Status 19E4  
                     _Flash_Memory_Unlock 2667                       ??_CC2500_ReadStatus 0022  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                 setTemp_Main@DangerValue 006A                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1CEC                        _Mcu_Initialization 27DC  
                __size_of_CC2500_PowerRST 0044          __size_of_setOverTemp_ADV_Restore 001C  
            __end_of_setRF_TimeoutCleared 25FC                      __end_of_my_MainTimer 10F4  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1B6E                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 006A          setDimmerIntr_DimmingValue@lights 0064  
        getDimmerIntr_DimmingValue@lights 0022                                 i1___lbdiv 1BAE  
               __end_of_CC2500_InitSetREG 1D3E                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 0017                 __end_of_CC2500_ReadStatus 1C9E  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 1D14                          ??_Exception_Main 002D  
                           i1Division@num 0075                            __end_of_IO_Set 1A4A  
                    _setRF_Initialization 2686                        _setMemory_LoopSave 18B4  
                             _Switch_Main 2691                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 2794  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1903               ??_DimmerIntr_Initialization 0062  
                    ??_Mcu_Initialization 0021               __end_of_getAll_Sw_KeyStatus 2772  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 27B8       __size_of_getDimmerIntr_DimmingValue 0016  
                    setRF_DimmerLights@on 0065                            __end_of___wmul 1B10  
                       getSw_KeyStatus@sw 0024               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 0022             __size_of_getDimmerLights_Line 0013  
        DimmerLights_SelectPointer@lights 0021                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006B                            __end_of_setLED 0853  
                           __pbitbssBANK1 0778             __size_of_setDimmerLights_Line 001E  
           __size_of_setDimmerLights_SwOn 0074                            __end_of_setBuz 1239  
              __end_of_DimmerLights_IOC_1 1F85                __end_of_DimmerLights_IOC_2 1FC2  
                    _CC2500_FrequencyCabr 2708                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 1294  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 1E9D  
              __end_of_DimmerLights_TMR_2 1ED5                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 263E                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                                ?i1___lbdiv 0070  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1B2F  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 060A  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 13B8  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 1353  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
           setRF_AdjControl@dimmingStatus 0026                        _set_TimeoutCleared 2608  
       __end_of_setDimmerIntr_MaxmumValue 199D                                  ??_IO_Set 0020  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 01E3  
                       __size_of_Division 000F                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 008D                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 25F1  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 00DE                     setProductData@address 0064  
                     Exception_Main@count 002F                       Exception_Main@error 0030  
                                ??___bmul 0021                                  ??___wmul 0024  
                  __size_of_SwPointSelect 0017          __end_of_getMain_All_LightsStatus 18A1  
                               _Tx_Length 00E1                               __pdataBANK4 024E  
                                ??_setLED 0023                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 0068  
                       ??_CC2500_ReadByte 0020               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 1DFA                          _CC2500_SIDLEMode 2604  
              __size_of_DimmerLights_Main 0028                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0022  
          getDimmerIntr_Dimming_Sw@lights 0021                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 006B            getDimmerIntr_Dimming_Sw@status 0020  
                               ___latbits 0003                          _setMemory_Modify 1868  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E5                 setRF_TransceiveGO@command 0021  
                    ??_set_TimeoutCleared 0020                 _DimmerIntr_Initialization 0CF3  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 0067                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0021                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0025  
          setDimmerIntr_MaxmumValue@value 0062               setDimmerLights_DimmingOn@sw 0022  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 01BE                             _DimmerLights2 01C7  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1A9B                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00EE  
                          getRxData@error 006F               __size_of_LED_Initialization 000C  
                    _setRF_TimeoutCleared 25F8                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0031                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 2794  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 0069  
                  _setTemp_Initialization 1001                                 _getBuz_GO 2772  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 0F2C  
             _Flash_Memory_Initialization 0E62                                  ?___awdiv 0020  
                               __ptext100 188E                                 __ptext101 2750  
                                ?___lbdiv 0020                                 __ptext110 1942  
                               __ptext102 2794                                 __ptext111 1FC2  
                               __ptext103 118C                                 __ptext120 1353  
                               __ptext112 2636                                 __ptext104 0DA7  
                               __ptext121 0959                                 __ptext113 1DC7  
                               __ptext105 187B                                 __ptext130 262E  
                               __ptext122 265E                                 __ptext114 1780  
                               __ptext106 141D                                 __ptext131 162B  
                               __ptext123 0C3F                                 __ptext115 2670  
                               __ptext107 1AD4                                 __ptext140 2626  
                               __ptext132 26A8                                 __ptext124 0B96  
                               __ptext116 1000                                 __ptext108 1986  
                               __ptext141 260D                                 __ptext133 170C  
                               __ptext125 043D                                 __ptext117 0CF3  
                               __ptext109 1D3E                                  ?___ftadd 0041  
                               __ptext150 1F85                                 __ptext142 1958  
                               __ptext134 11E0                                 __ptext126 1C34  
                               __ptext118 1868                                 __ptext151 1F48  
                               __ptext143 07B6                                 __ptext135 1138  
                               __ptext127 12F2                                 __ptext119 13B8  
                               __ptext152 2714                                 __ptext144 25E2  
                               __ptext136 19CB                                 __ptext128 2721  
                               __ptext153 1BAE                                 __ptext137 1ED5  
                               __ptext129 1C12                                 __ptext146 1BF0  
                               __ptext138 273F                                 __ptext147 1E9D  
                               __ptext139 196F                                 __ptext148 1E65  
                               __ptext149 269C                                 _getRxData 1482  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 0041                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 12F2                          ??_setProductData 0063  
                 _setOverTemp_ADV_Restore 1A9B             __size_of_setSw_Initialization 0008  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 25E5  
                           ??_setLog_Code 0065                  getDimmerLights_Line@line 0021  
                      __end_of_TouchPower 1942                       __size_of_setSw_Main 0187  
            CC2500_ReadStatus@status_addr 0023        __end_of_getDimmerIntr_DimmingValue 1958  
            ??_setDimmerIntr_DimmingValue 0063                _getDimmerIntr_DimmingValue 1942  
                  CC2500_WriteByte@loop_a 0021            __size_of_setDimmerLights_OnOff 00D4  
                       ?_setRF_AdjControl 0070                                 _r_address 00E2  
           __end_of_setDimmerLights_OnOff 1000            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 1F0E  
            __end_of_CC2500_patable_vaule 1866             __end_of_myMain_Initialization 18DA  
                             ??i1___lbdiv 0071                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0025                        ??_setRF_AdjControl 0024  
                           _SwPointSelect 19B4                       __end_of_setLED_Main 10B3  
                        ??_getDelayOff_GO 0022                         i1___lbdiv@divisor 0070  
                       i1___lbdiv@counter 0073                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 25F1                         _CC2500_rfSettings 182F  
                          ___wmul@product 0024                                  _LED_Main 26E4  
                         SwPointSelect@sw 0020                                 clear_ram0 2619  
                CC2500_InitPATable@loop_d 0027                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 10B3                                 _setTxData 0DA7  
     __end_of_DimmerLights_Initialization 267B               _DimmerLights_Initialization 2670  
                  _Flash_Memory_Main$3441 0028                        _CC2500_ClearRXFIFO 25FC  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 2600  
                _getDimmerIntr_Dimming_Sw 19CB                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 18EE  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 002F  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 0017  
                      _Flash_Memory_Write 1002                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1BF0  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 26F0  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 187B                                  _RF_Count 0134  
                    __end_of_RF_RxDisable 273F                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1A64                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 27EE                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0023                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00D7                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00D8  
                            setSw_Main@sw 0035                               ??_Load_Main 0065  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 26D8  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1E2E  
                   _DlyOff_Initialization 260D         __size_of_getMain_All_LightsStatus 0013  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 2721  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1D98               setDimmerLights_OnOff@lights 00E5  
                _setDimmerIntr_Dimming_Sw 1D3E                                  _Fosc_Set 25F4  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 00E5  
                      __end_of_getLoad_AD 170C                        __end_of_getLoad_OK 263E  
                   _Switch_Initialization 2656         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 0AF9  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 19FD                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 0017                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 00E0                               ??_Temp_Main 006F  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 00E7             _getMain_All_Error_Status$3917 0021  
           _getMain_All_Error_Status$3918 0023                  __end_of_getDimmer_LoadGO 2646  
                     _Load_Initialization 25E5          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
               ??_setOverTemp_ADV_Restore 0020                              _setTemp_Main 0533  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0022  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0031  
                                ___awtoft 1C34                          ??_LedPointSelect 0020  
                                ___ftpack 12F2             __size_of_getMain_Lights_Count 0012  
                  getDimmer_LoadGO@loadgo 0020                         getTemp_AD@channel 0025  
                            ??_setRF_Main 00E8                      CC2500_WriteREG@value 0022  
                             _setLED_Main 1072                __end_of_setRF_DimmerLights 1482  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
           __end_of_getDimmer_Load_Status 264E                          setDelayOff_GO@sw 006C  
                         ___lwdiv@divisor 0020                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0027                                  __ptext10 1A9B  
                                __ptext11 25EE                                  __ptext20 2608  
                                __ptext12 1001                                  __ptext21 1918  
                                __ptext13 2691                                  __ptext30 1F0E  
                                __ptext22 2656                                  __ptext14 02B6  
                                __ptext31 1294                                  __ptext23 264E  
                                __ptext15 18DA                                  __ptext40 1AB7  
                                __ptext32 0853                                  __ptext24 25EB  
                                __ptext16 1CEC                                  __ptext41 1903  
                                __ptext33 1A64                                  __ptext25 06E1  
                                __ptext17 1B2F                                  __ptext50 25FC  
                                __ptext42 2604                                  __ptext34 2783  
                                __ptext26 1482                                  __ptext18 19B4  
                                __ptext51 1A4A                                  __ptext43 10F4  
                                __ptext35 2772                                  __ptext27 1DFA  
                                __ptext19 192D                                  __ptext60 1A30  
                                __ptext52 25F8                                  __ptext44 1D14  
                                __ptext36 2730                                  __ptext28 18B4  
                                __ptext61 267B                                  __ptext53 18EE  
                                __ptext45 1B10                                  __ptext37 15BF  
                                __ptext29 0AF9                                  __ptext70 1E2E  
                                __ptext62 25F4                                  __ptext54 19FD  
                                __ptext46 1C56                                  __ptext38 1554  
                                __ptext71 25E5                                  __ptext63 261F  
                                __ptext55 25E8                                  __ptext47 2708  
                                __ptext39 1C79                                  __ptext80 26CC  
                                __ptext72 1A7F                                  __ptext64 0053  
                                __ptext56 2686                                  __ptext48 1C9E  
                                __ptext81 0E62                                  __ptext73 26E4  
                                __ptext65 27CA                                  __ptext57 27DC  
                                __ptext49 2600                                  __ptext90 0F2C  
                                __ptext82 26C0                                  __ptext74 1072  
                                __ptext66 2646                                  __ptext58 26FC  
                                __ptext91 0800                                  __ptext83 1002  
                                __ptext75 26D8                                  __ptext67 263E  
                                __ptext59 26F0                                  __ptext92 1B4E  
                                __ptext84 2667                                  __ptext76 27B8  
                                __ptext68 1BCF                                  __ptext93 26B4  
                                __ptext85 1A16                                  __ptext77 1031  
                                __ptext69 1AF2                                  __ptext94 1D98  
                                __ptext86 060A                                  __ptext78 2761  
                                __ptext95 199D                                  __ptext87 18A1  
                                __ptext79 08D3                                  __ptext96 1D69  
                                __ptext88 1CC4                                  __ptext97 09E0  
                                __ptext89 14E9                                  __ptext98 27A6  
                                __ptext99 19E4                                  __product 024E  
                 ??_setLED_Initialization 0024                  ??_getDimmerLights_Status 0022  
            __end_of_getDimmerLights_Line 18B4              __end_of_setDimmerLights_Main 1554  
            __end_of_setDimmerLights_Line 1AF2                        _DimmerLights_IOC_1 1F48  
                      _DimmerLights_IOC_2 1F85              __end_of_setDimmerLights_SwOn 1780  
                            ??_setSw_Main 0033                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 18DA  
      __size_of_DimmerIntr_Initialization 00B4                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 1E65                        _DimmerLights_TMR_2 1E9D  
                __end_of_CC2500_SIDLEMode 2608                setDimmerLights_Main@lights 00E6  
             __end_of_DelayOffPointSelect 196F                  setOverTemp_ADV_Restore@i 0021  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1AB7  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1B10  
                __end_of_setMemory_Modify 187B      _getAll_DimmerIntr_Dimming_Sw_RF$2387 0021  
    _getAll_DimmerIntr_Dimming_Sw_RF$2388 0022                       ?_DimmerLights_IOC_1 0070  
                     ?_DimmerLights_IOC_2 0070                        __end_of_setRF_Main 07B6  
                             ??_getBuz_GO 0022                       ?_DimmerLights_TMR_1 0070  
                     ?_DimmerLights_TMR_2 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 006E  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1903  
             Flash_Memory_Main@key_Status 0027                  _getAll_Sw_KeyStatus$6891 0022  
                                main@argc 00EA                                  main@argv 00EC  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6887 0021  
                    _getSw_KeyStatus$6888 0022       getDimmerLights_ValueToPercent@value 005E  
                         _CC2500_PowerRST 10F4                  __size_of_getSw_KeyStatus 001F  
            setDimmerLights_Dimming@value 006C        __end_of_setDimmerIntr_DimmingValue 19B4  
              _setDimmerIntr_DimmingValue 199D               __end_of_Flash_Memory_Modify 0959  
            __size_of_getAll_Sw_KeyStatus 0011                               _setLog_Code 1DFA  
             __end_of_Flash_Memory_Unlock 2670                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1C56                        __end_of_setSw_Main 043D  
                   ??_Load_Initialization 0022                      ??_DimmerLights_IOC_1 007A  
                    ??_DimmerLights_IOC_2 007A           getDimmerLights_PercentToValue@i 005F  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 03E8  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                    ??_DimmerLights_TMR_2 0070                            Division@result 0029  
         __end_of_setOverTemp_ADV_Restore 1AB7                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 1001   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1000                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 25E8  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 26CC  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00DF  
                 __size_of_Exception_Main 00D7                             Division@value 0028  
         __end_of_DelayOff_Initialization 262E                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 2636                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 09E0  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 009D  
        __size_of_setDimmerLights_Dimming 0054               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                                i1_Division 2714  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 1CC4  
              ??_getDimmerIntr_Dimming_Sw 0020                   __end_of_CC2500_ReadByte 1AD4  
            __end_of_setSw_Initialization 2656                           _Timeout_Counter 1918  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 005F  
                            _RF_RxDisable 2730          Flash_Memory_Initialization@value 0025  
              __end_of_LED_Initialization 26E4            __end_of_setTemp_Initialization 1002  
                             Division@num 0025                   setMemory_Modify@command 0021  
               __end_of_RF_Initialization 25EB                 __size_of_setRF_AdjControl 003A  
                   __end_of_CC2500_RxData 15BF                     __end_of_CC2500_TxData 162B  
                   _setLoad_AH_AL_Restore 1A7F                   __end_of_CC2500_PowerRST 1138  
