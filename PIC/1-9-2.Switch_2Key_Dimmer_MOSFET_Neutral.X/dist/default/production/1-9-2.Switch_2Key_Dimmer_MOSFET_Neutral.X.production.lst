

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Dec 24 17:10:17 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK5,global,class=BANK5,space=1,delta=1
    19                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2
    27                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text15,local,class=CODE,merge=1,delta=2
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	text20,local,class=CODE,merge=1,delta=2
    45                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text27,local,class=CODE,merge=1,delta=2
    52                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text30,local,class=CODE,merge=1,delta=2
    55                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text33,local,class=CODE,merge=1,delta=2
    58                           	psect	text34,local,class=CODE,merge=1,delta=2
    59                           	psect	text35,local,class=CODE,merge=1,delta=2
    60                           	psect	text36,local,class=CODE,merge=1,delta=2
    61                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text38,local,class=CODE,merge=1,delta=2
    63                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text40,local,class=CODE,merge=1,delta=2
    65                           	psect	text41,local,class=CODE,merge=1,delta=2
    66                           	psect	text42,local,class=CODE,merge=1,delta=2
    67                           	psect	text43,local,class=CODE,merge=1,delta=2
    68                           	psect	text44,local,class=CODE,merge=1,delta=2
    69                           	psect	text45,local,class=CODE,merge=1,delta=2
    70                           	psect	text46,local,class=CODE,merge=1,delta=2
    71                           	psect	text47,local,class=CODE,merge=1,delta=2
    72                           	psect	text48,local,class=CODE,merge=1,delta=2
    73                           	psect	text49,local,class=CODE,merge=1,delta=2
    74                           	psect	text50,local,class=CODE,merge=1,delta=2
    75                           	psect	text51,local,class=CODE,merge=1,delta=2
    76                           	psect	text52,local,class=CODE,merge=1,delta=2
    77                           	psect	text53,local,class=CODE,merge=1,delta=2
    78                           	psect	text54,local,class=CODE,merge=1,delta=2
    79                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text57,local,class=CODE,merge=1,delta=2
    82                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text60,local,class=CODE,merge=1,delta=2
    85                           	psect	text61,local,class=CODE,merge=1,delta=2
    86                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text63,local,class=CODE,merge=1,delta=2
    88                           	psect	text64,local,class=CODE,merge=1,delta=2
    89                           	psect	text65,local,class=CODE,merge=1,delta=2
    90                           	psect	text66,local,class=CODE,merge=1,delta=2
    91                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text68,local,class=CODE,merge=1,delta=2
    93                           	psect	text69,local,class=CODE,merge=1,delta=2
    94                           	psect	text70,local,class=CODE,merge=1,delta=2
    95                           	psect	text71,local,class=CODE,merge=1,delta=2
    96                           	psect	text72,local,class=CODE,merge=1,delta=2
    97                           	psect	text73,local,class=CODE,merge=1,delta=2
    98                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text75,local,class=CODE,merge=1,delta=2
   100                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
   101                           	psect	text77,local,class=CODE,merge=1,delta=2
   102                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
   103                           	psect	text79,local,class=CODE,merge=1,delta=2
   104                           	psect	text80,local,class=CODE,merge=1,delta=2
   105                           	psect	text81,local,class=CODE,merge=1,delta=2
   106                           	psect	text82,local,class=CODE,merge=1,delta=2
   107                           	psect	text83,local,class=CODE,merge=1,delta=2
   108                           	psect	text84,local,class=CODE,merge=1,delta=2
   109                           	psect	text85,local,class=CODE,merge=1,delta=2
   110                           	psect	text86,local,class=CODE,merge=1,delta=2
   111                           	psect	text87,local,class=CODE,merge=1,delta=2
   112                           	psect	text88,local,class=CODE,merge=1,delta=2
   113                           	psect	text89,local,class=CODE,merge=1,delta=2
   114                           	psect	text90,local,class=CODE,merge=1,delta=2
   115                           	psect	text91,local,class=CODE,merge=1,delta=2
   116                           	psect	text92,local,class=CODE,merge=1,delta=2
   117                           	psect	text93,local,class=CODE,merge=1,delta=2
   118                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text96,local,class=CODE,merge=1,delta=2
   121                           	psect	text97,local,class=CODE,merge=1,delta=2
   122                           	psect	text98,local,class=CODE,merge=1,delta=2
   123                           	psect	text99,local,class=CODE,merge=1,delta=2
   124                           	psect	text100,local,class=CODE,merge=1,delta=2
   125                           	psect	text101,local,class=CODE,merge=1,delta=2
   126                           	psect	text102,local,class=CODE,merge=1,delta=2
   127                           	psect	text103,local,class=CODE,merge=1,delta=2
   128                           	psect	text104,local,class=CODE,merge=1,delta=2
   129                           	psect	text105,local,class=CODE,merge=1,delta=2
   130                           	psect	text106,local,class=CODE,merge=1,delta=2
   131                           	psect	text107,local,class=CODE,merge=1,delta=2
   132                           	psect	text108,local,class=CODE,merge=1,delta=2
   133                           	psect	text109,local,class=CODE,merge=1,delta=2
   134                           	psect	text110,local,class=CODE,merge=1,delta=2
   135                           	psect	text111,local,class=CODE,merge=1,delta=2
   136                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text113,local,class=CODE,merge=1,delta=2
   138                           	psect	text114,local,class=CODE,merge=1,delta=2
   139                           	psect	text115,local,class=CODE,merge=1,delta=2
   140                           	psect	text116,local,class=CODE,merge=1,delta=2
   141                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text118,local,class=CODE,merge=1,delta=2
   143                           	psect	text119,local,class=CODE,merge=1,delta=2
   144                           	psect	text120,local,class=CODE,merge=1,delta=2
   145                           	psect	text121,local,class=CODE,merge=1,delta=2
   146                           	psect	text122,local,class=CODE,merge=1,delta=2
   147                           	psect	text123,local,class=CODE,merge=1,delta=2
   148                           	psect	text124,local,class=CODE,merge=1,delta=2
   149                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text126,local,class=CODE,merge=1,delta=2
   151                           	psect	text127,local,class=CODE,merge=1,delta=2
   152                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	intentry,global,class=CODE,delta=2
   155                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   161                           	dabs	1,0x7E,2
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000D                     	;# 
   176  000E                     	;# 
   177  0010                     	;# 
   178  0011                     	;# 
   179  0012                     	;# 
   180  0015                     	;# 
   181  0016                     	;# 
   182  0016                     	;# 
   183  0017                     	;# 
   184  0018                     	;# 
   185  0019                     	;# 
   186  001A                     	;# 
   187  001B                     	;# 
   188  001C                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0099                     	;# 
   199  009A                     	;# 
   200  009B                     	;# 
   201  009B                     	;# 
   202  009C                     	;# 
   203  009D                     	;# 
   204  009E                     	;# 
   205  010C                     	;# 
   206  010D                     	;# 
   207  010E                     	;# 
   208  0116                     	;# 
   209  0117                     	;# 
   210  011D                     	;# 
   211  018C                     	;# 
   212  018D                     	;# 
   213  018E                     	;# 
   214  0191                     	;# 
   215  0191                     	;# 
   216  0192                     	;# 
   217  0193                     	;# 
   218  0193                     	;# 
   219  0194                     	;# 
   220  0195                     	;# 
   221  0196                     	;# 
   222  0197                     	;# 
   223  0199                     	;# 
   224  019A                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019C                     	;# 
   230  019C                     	;# 
   231  019D                     	;# 
   232  019E                     	;# 
   233  019F                     	;# 
   234  020D                     	;# 
   235  0210                     	;# 
   236  0211                     	;# 
   237  0211                     	;# 
   238  0212                     	;# 
   239  0212                     	;# 
   240  0213                     	;# 
   241  0213                     	;# 
   242  0214                     	;# 
   243  0214                     	;# 
   244  0215                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0216                     	;# 
   248  0216                     	;# 
   249  0217                     	;# 
   250  0217                     	;# 
   251  0291                     	;# 
   252  0291                     	;# 
   253  0292                     	;# 
   254  0293                     	;# 
   255  0298                     	;# 
   256  0298                     	;# 
   257  0299                     	;# 
   258  029A                     	;# 
   259  0394                     	;# 
   260  0395                     	;# 
   261  0396                     	;# 
   262  0FE4                     	;# 
   263  0FE5                     	;# 
   264  0FE6                     	;# 
   265  0FE7                     	;# 
   266  0FE8                     	;# 
   267  0FE9                     	;# 
   268  0FEA                     	;# 
   269  0FEB                     	;# 
   270  0FED                     	;# 
   271  0FEE                     	;# 
   272  0FEF                     	;# 
   273  0000                     	;# 
   274  0001                     	;# 
   275  0002                     	;# 
   276  0003                     	;# 
   277  0004                     	;# 
   278  0005                     	;# 
   279  0006                     	;# 
   280  0007                     	;# 
   281  0008                     	;# 
   282  0009                     	;# 
   283  000A                     	;# 
   284  000B                     	;# 
   285  000C                     	;# 
   286  000D                     	;# 
   287  000E                     	;# 
   288  0010                     	;# 
   289  0011                     	;# 
   290  0012                     	;# 
   291  0015                     	;# 
   292  0016                     	;# 
   293  0016                     	;# 
   294  0017                     	;# 
   295  0018                     	;# 
   296  0019                     	;# 
   297  001A                     	;# 
   298  001B                     	;# 
   299  001C                     	;# 
   300  008C                     	;# 
   301  008D                     	;# 
   302  008E                     	;# 
   303  0090                     	;# 
   304  0091                     	;# 
   305  0092                     	;# 
   306  0095                     	;# 
   307  0096                     	;# 
   308  0097                     	;# 
   309  0099                     	;# 
   310  009A                     	;# 
   311  009B                     	;# 
   312  009B                     	;# 
   313  009C                     	;# 
   314  009D                     	;# 
   315  009E                     	;# 
   316  010C                     	;# 
   317  010D                     	;# 
   318  010E                     	;# 
   319  0116                     	;# 
   320  0117                     	;# 
   321  011D                     	;# 
   322  018C                     	;# 
   323  018D                     	;# 
   324  018E                     	;# 
   325  0191                     	;# 
   326  0191                     	;# 
   327  0192                     	;# 
   328  0193                     	;# 
   329  0193                     	;# 
   330  0194                     	;# 
   331  0195                     	;# 
   332  0196                     	;# 
   333  0197                     	;# 
   334  0199                     	;# 
   335  019A                     	;# 
   336  019B                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019C                     	;# 
   341  019C                     	;# 
   342  019D                     	;# 
   343  019E                     	;# 
   344  019F                     	;# 
   345  020D                     	;# 
   346  0210                     	;# 
   347  0211                     	;# 
   348  0211                     	;# 
   349  0212                     	;# 
   350  0212                     	;# 
   351  0213                     	;# 
   352  0213                     	;# 
   353  0214                     	;# 
   354  0214                     	;# 
   355  0215                     	;# 
   356  0215                     	;# 
   357  0215                     	;# 
   358  0216                     	;# 
   359  0216                     	;# 
   360  0217                     	;# 
   361  0217                     	;# 
   362  0291                     	;# 
   363  0291                     	;# 
   364  0292                     	;# 
   365  0293                     	;# 
   366  0298                     	;# 
   367  0298                     	;# 
   368  0299                     	;# 
   369  029A                     	;# 
   370  0394                     	;# 
   371  0395                     	;# 
   372  0396                     	;# 
   373  0FE4                     	;# 
   374  0FE5                     	;# 
   375  0FE6                     	;# 
   376  0FE7                     	;# 
   377  0FE8                     	;# 
   378  0FE9                     	;# 
   379  0FEA                     	;# 
   380  0FEB                     	;# 
   381  0FED                     	;# 
   382  0FEE                     	;# 
   383  0FEF                     	;# 
   384  0000                     	;# 
   385  0001                     	;# 
   386  0002                     	;# 
   387  0003                     	;# 
   388  0004                     	;# 
   389  0005                     	;# 
   390  0006                     	;# 
   391  0007                     	;# 
   392  0008                     	;# 
   393  0009                     	;# 
   394  000A                     	;# 
   395  000B                     	;# 
   396  000C                     	;# 
   397  000D                     	;# 
   398  000E                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0015                     	;# 
   403  0016                     	;# 
   404  0016                     	;# 
   405  0017                     	;# 
   406  0018                     	;# 
   407  0019                     	;# 
   408  001A                     	;# 
   409  001B                     	;# 
   410  001C                     	;# 
   411  008C                     	;# 
   412  008D                     	;# 
   413  008E                     	;# 
   414  0090                     	;# 
   415  0091                     	;# 
   416  0092                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0097                     	;# 
   420  0099                     	;# 
   421  009A                     	;# 
   422  009B                     	;# 
   423  009B                     	;# 
   424  009C                     	;# 
   425  009D                     	;# 
   426  009E                     	;# 
   427  010C                     	;# 
   428  010D                     	;# 
   429  010E                     	;# 
   430  0116                     	;# 
   431  0117                     	;# 
   432  011D                     	;# 
   433  018C                     	;# 
   434  018D                     	;# 
   435  018E                     	;# 
   436  0191                     	;# 
   437  0191                     	;# 
   438  0192                     	;# 
   439  0193                     	;# 
   440  0193                     	;# 
   441  0194                     	;# 
   442  0195                     	;# 
   443  0196                     	;# 
   444  0197                     	;# 
   445  0199                     	;# 
   446  019A                     	;# 
   447  019B                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019C                     	;# 
   452  019C                     	;# 
   453  019D                     	;# 
   454  019E                     	;# 
   455  019F                     	;# 
   456  020D                     	;# 
   457  0210                     	;# 
   458  0211                     	;# 
   459  0211                     	;# 
   460  0212                     	;# 
   461  0212                     	;# 
   462  0213                     	;# 
   463  0213                     	;# 
   464  0214                     	;# 
   465  0214                     	;# 
   466  0215                     	;# 
   467  0215                     	;# 
   468  0215                     	;# 
   469  0216                     	;# 
   470  0216                     	;# 
   471  0217                     	;# 
   472  0217                     	;# 
   473  0291                     	;# 
   474  0291                     	;# 
   475  0292                     	;# 
   476  0293                     	;# 
   477  0298                     	;# 
   478  0298                     	;# 
   479  0299                     	;# 
   480  029A                     	;# 
   481  0394                     	;# 
   482  0395                     	;# 
   483  0396                     	;# 
   484  0FE4                     	;# 
   485  0FE5                     	;# 
   486  0FE6                     	;# 
   487  0FE7                     	;# 
   488  0FE8                     	;# 
   489  0FE9                     	;# 
   490  0FEA                     	;# 
   491  0FEB                     	;# 
   492  0FED                     	;# 
   493  0FEE                     	;# 
   494  0FEF                     	;# 
   495  0000                     	;# 
   496  0001                     	;# 
   497  0002                     	;# 
   498  0003                     	;# 
   499  0004                     	;# 
   500  0005                     	;# 
   501  0006                     	;# 
   502  0007                     	;# 
   503  0008                     	;# 
   504  0009                     	;# 
   505  000A                     	;# 
   506  000B                     	;# 
   507  000C                     	;# 
   508  000D                     	;# 
   509  000E                     	;# 
   510  0010                     	;# 
   511  0011                     	;# 
   512  0012                     	;# 
   513  0015                     	;# 
   514  0016                     	;# 
   515  0016                     	;# 
   516  0017                     	;# 
   517  0018                     	;# 
   518  0019                     	;# 
   519  001A                     	;# 
   520  001B                     	;# 
   521  001C                     	;# 
   522  008C                     	;# 
   523  008D                     	;# 
   524  008E                     	;# 
   525  0090                     	;# 
   526  0091                     	;# 
   527  0092                     	;# 
   528  0095                     	;# 
   529  0096                     	;# 
   530  0097                     	;# 
   531  0099                     	;# 
   532  009A                     	;# 
   533  009B                     	;# 
   534  009B                     	;# 
   535  009C                     	;# 
   536  009D                     	;# 
   537  009E                     	;# 
   538  010C                     	;# 
   539  010D                     	;# 
   540  010E                     	;# 
   541  0116                     	;# 
   542  0117                     	;# 
   543  011D                     	;# 
   544  018C                     	;# 
   545  018D                     	;# 
   546  018E                     	;# 
   547  0191                     	;# 
   548  0191                     	;# 
   549  0192                     	;# 
   550  0193                     	;# 
   551  0193                     	;# 
   552  0194                     	;# 
   553  0195                     	;# 
   554  0196                     	;# 
   555  0197                     	;# 
   556  0199                     	;# 
   557  019A                     	;# 
   558  019B                     	;# 
   559  019B                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019C                     	;# 
   563  019C                     	;# 
   564  019D                     	;# 
   565  019E                     	;# 
   566  019F                     	;# 
   567  020D                     	;# 
   568  0210                     	;# 
   569  0211                     	;# 
   570  0211                     	;# 
   571  0212                     	;# 
   572  0212                     	;# 
   573  0213                     	;# 
   574  0213                     	;# 
   575  0214                     	;# 
   576  0214                     	;# 
   577  0215                     	;# 
   578  0215                     	;# 
   579  0215                     	;# 
   580  0216                     	;# 
   581  0216                     	;# 
   582  0217                     	;# 
   583  0217                     	;# 
   584  0291                     	;# 
   585  0291                     	;# 
   586  0292                     	;# 
   587  0293                     	;# 
   588  0298                     	;# 
   589  0298                     	;# 
   590  0299                     	;# 
   591  029A                     	;# 
   592  0394                     	;# 
   593  0395                     	;# 
   594  0396                     	;# 
   595  0FE4                     	;# 
   596  0FE5                     	;# 
   597  0FE6                     	;# 
   598  0FE7                     	;# 
   599  0FE8                     	;# 
   600  0FE9                     	;# 
   601  0FEA                     	;# 
   602  0FEB                     	;# 
   603  0FED                     	;# 
   604  0FEE                     	;# 
   605  0FEF                     	;# 
   606  0000                     	;# 
   607  0001                     	;# 
   608  0002                     	;# 
   609  0003                     	;# 
   610  0004                     	;# 
   611  0005                     	;# 
   612  0006                     	;# 
   613  0007                     	;# 
   614  0008                     	;# 
   615  0009                     	;# 
   616  000A                     	;# 
   617  000B                     	;# 
   618  000C                     	;# 
   619  000D                     	;# 
   620  000E                     	;# 
   621  0010                     	;# 
   622  0011                     	;# 
   623  0012                     	;# 
   624  0015                     	;# 
   625  0016                     	;# 
   626  0016                     	;# 
   627  0017                     	;# 
   628  0018                     	;# 
   629  0019                     	;# 
   630  001A                     	;# 
   631  001B                     	;# 
   632  001C                     	;# 
   633  008C                     	;# 
   634  008D                     	;# 
   635  008E                     	;# 
   636  0090                     	;# 
   637  0091                     	;# 
   638  0092                     	;# 
   639  0095                     	;# 
   640  0096                     	;# 
   641  0097                     	;# 
   642  0099                     	;# 
   643  009A                     	;# 
   644  009B                     	;# 
   645  009B                     	;# 
   646  009C                     	;# 
   647  009D                     	;# 
   648  009E                     	;# 
   649  010C                     	;# 
   650  010D                     	;# 
   651  010E                     	;# 
   652  0116                     	;# 
   653  0117                     	;# 
   654  011D                     	;# 
   655  018C                     	;# 
   656  018D                     	;# 
   657  018E                     	;# 
   658  0191                     	;# 
   659  0191                     	;# 
   660  0192                     	;# 
   661  0193                     	;# 
   662  0193                     	;# 
   663  0194                     	;# 
   664  0195                     	;# 
   665  0196                     	;# 
   666  0197                     	;# 
   667  0199                     	;# 
   668  019A                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019C                     	;# 
   674  019C                     	;# 
   675  019D                     	;# 
   676  019E                     	;# 
   677  019F                     	;# 
   678  020D                     	;# 
   679  0210                     	;# 
   680  0211                     	;# 
   681  0211                     	;# 
   682  0212                     	;# 
   683  0212                     	;# 
   684  0213                     	;# 
   685  0213                     	;# 
   686  0214                     	;# 
   687  0214                     	;# 
   688  0215                     	;# 
   689  0215                     	;# 
   690  0215                     	;# 
   691  0216                     	;# 
   692  0216                     	;# 
   693  0217                     	;# 
   694  0217                     	;# 
   695  0291                     	;# 
   696  0291                     	;# 
   697  0292                     	;# 
   698  0293                     	;# 
   699  0298                     	;# 
   700  0298                     	;# 
   701  0299                     	;# 
   702  029A                     	;# 
   703  0394                     	;# 
   704  0395                     	;# 
   705  0396                     	;# 
   706  0FE4                     	;# 
   707  0FE5                     	;# 
   708  0FE6                     	;# 
   709  0FE7                     	;# 
   710  0FE8                     	;# 
   711  0FE9                     	;# 
   712  0FEA                     	;# 
   713  0FEB                     	;# 
   714  0FED                     	;# 
   715  0FEE                     	;# 
   716  0FEF                     	;# 
   717  0000                     	;# 
   718  0001                     	;# 
   719  0002                     	;# 
   720  0003                     	;# 
   721  0004                     	;# 
   722  0005                     	;# 
   723  0006                     	;# 
   724  0007                     	;# 
   725  0008                     	;# 
   726  0009                     	;# 
   727  000A                     	;# 
   728  000B                     	;# 
   729  000C                     	;# 
   730  000D                     	;# 
   731  000E                     	;# 
   732  0010                     	;# 
   733  0011                     	;# 
   734  0012                     	;# 
   735  0015                     	;# 
   736  0016                     	;# 
   737  0016                     	;# 
   738  0017                     	;# 
   739  0018                     	;# 
   740  0019                     	;# 
   741  001A                     	;# 
   742  001B                     	;# 
   743  001C                     	;# 
   744  008C                     	;# 
   745  008D                     	;# 
   746  008E                     	;# 
   747  0090                     	;# 
   748  0091                     	;# 
   749  0092                     	;# 
   750  0095                     	;# 
   751  0096                     	;# 
   752  0097                     	;# 
   753  0099                     	;# 
   754  009A                     	;# 
   755  009B                     	;# 
   756  009B                     	;# 
   757  009C                     	;# 
   758  009D                     	;# 
   759  009E                     	;# 
   760  010C                     	;# 
   761  010D                     	;# 
   762  010E                     	;# 
   763  0116                     	;# 
   764  0117                     	;# 
   765  011D                     	;# 
   766  018C                     	;# 
   767  018D                     	;# 
   768  018E                     	;# 
   769  0191                     	;# 
   770  0191                     	;# 
   771  0192                     	;# 
   772  0193                     	;# 
   773  0193                     	;# 
   774  0194                     	;# 
   775  0195                     	;# 
   776  0196                     	;# 
   777  0197                     	;# 
   778  0199                     	;# 
   779  019A                     	;# 
   780  019B                     	;# 
   781  019B                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019C                     	;# 
   785  019C                     	;# 
   786  019D                     	;# 
   787  019E                     	;# 
   788  019F                     	;# 
   789  020D                     	;# 
   790  0210                     	;# 
   791  0211                     	;# 
   792  0211                     	;# 
   793  0212                     	;# 
   794  0212                     	;# 
   795  0213                     	;# 
   796  0213                     	;# 
   797  0214                     	;# 
   798  0214                     	;# 
   799  0215                     	;# 
   800  0215                     	;# 
   801  0215                     	;# 
   802  0216                     	;# 
   803  0216                     	;# 
   804  0217                     	;# 
   805  0217                     	;# 
   806  0291                     	;# 
   807  0291                     	;# 
   808  0292                     	;# 
   809  0293                     	;# 
   810  0298                     	;# 
   811  0298                     	;# 
   812  0299                     	;# 
   813  029A                     	;# 
   814  0394                     	;# 
   815  0395                     	;# 
   816  0396                     	;# 
   817  0FE4                     	;# 
   818  0FE5                     	;# 
   819  0FE6                     	;# 
   820  0FE7                     	;# 
   821  0FE8                     	;# 
   822  0FE9                     	;# 
   823  0FEA                     	;# 
   824  0FEB                     	;# 
   825  0FED                     	;# 
   826  0FEE                     	;# 
   827  0FEF                     	;# 
   828  0000                     	;# 
   829  0001                     	;# 
   830  0002                     	;# 
   831  0003                     	;# 
   832  0004                     	;# 
   833  0005                     	;# 
   834  0006                     	;# 
   835  0007                     	;# 
   836  0008                     	;# 
   837  0009                     	;# 
   838  000A                     	;# 
   839  000B                     	;# 
   840  000C                     	;# 
   841  000D                     	;# 
   842  000E                     	;# 
   843  0010                     	;# 
   844  0011                     	;# 
   845  0012                     	;# 
   846  0015                     	;# 
   847  0016                     	;# 
   848  0016                     	;# 
   849  0017                     	;# 
   850  0018                     	;# 
   851  0019                     	;# 
   852  001A                     	;# 
   853  001B                     	;# 
   854  001C                     	;# 
   855  008C                     	;# 
   856  008D                     	;# 
   857  008E                     	;# 
   858  0090                     	;# 
   859  0091                     	;# 
   860  0092                     	;# 
   861  0095                     	;# 
   862  0096                     	;# 
   863  0097                     	;# 
   864  0099                     	;# 
   865  009A                     	;# 
   866  009B                     	;# 
   867  009B                     	;# 
   868  009C                     	;# 
   869  009D                     	;# 
   870  009E                     	;# 
   871  010C                     	;# 
   872  010D                     	;# 
   873  010E                     	;# 
   874  0116                     	;# 
   875  0117                     	;# 
   876  011D                     	;# 
   877  018C                     	;# 
   878  018D                     	;# 
   879  018E                     	;# 
   880  0191                     	;# 
   881  0191                     	;# 
   882  0192                     	;# 
   883  0193                     	;# 
   884  0193                     	;# 
   885  0194                     	;# 
   886  0195                     	;# 
   887  0196                     	;# 
   888  0197                     	;# 
   889  0199                     	;# 
   890  019A                     	;# 
   891  019B                     	;# 
   892  019B                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019C                     	;# 
   896  019C                     	;# 
   897  019D                     	;# 
   898  019E                     	;# 
   899  019F                     	;# 
   900  020D                     	;# 
   901  0210                     	;# 
   902  0211                     	;# 
   903  0211                     	;# 
   904  0212                     	;# 
   905  0212                     	;# 
   906  0213                     	;# 
   907  0213                     	;# 
   908  0214                     	;# 
   909  0214                     	;# 
   910  0215                     	;# 
   911  0215                     	;# 
   912  0215                     	;# 
   913  0216                     	;# 
   914  0216                     	;# 
   915  0217                     	;# 
   916  0217                     	;# 
   917  0291                     	;# 
   918  0291                     	;# 
   919  0292                     	;# 
   920  0293                     	;# 
   921  0298                     	;# 
   922  0298                     	;# 
   923  0299                     	;# 
   924  029A                     	;# 
   925  0394                     	;# 
   926  0395                     	;# 
   927  0396                     	;# 
   928  0FE4                     	;# 
   929  0FE5                     	;# 
   930  0FE6                     	;# 
   931  0FE7                     	;# 
   932  0FE8                     	;# 
   933  0FE9                     	;# 
   934  0FEA                     	;# 
   935  0FEB                     	;# 
   936  0FED                     	;# 
   937  0FEE                     	;# 
   938  0FEF                     	;# 
   939  0000                     	;# 
   940  0001                     	;# 
   941  0002                     	;# 
   942  0003                     	;# 
   943  0004                     	;# 
   944  0005                     	;# 
   945  0006                     	;# 
   946  0007                     	;# 
   947  0008                     	;# 
   948  0009                     	;# 
   949  000A                     	;# 
   950  000B                     	;# 
   951  000C                     	;# 
   952  000D                     	;# 
   953  000E                     	;# 
   954  0010                     	;# 
   955  0011                     	;# 
   956  0012                     	;# 
   957  0015                     	;# 
   958  0016                     	;# 
   959  0016                     	;# 
   960  0017                     	;# 
   961  0018                     	;# 
   962  0019                     	;# 
   963  001A                     	;# 
   964  001B                     	;# 
   965  001C                     	;# 
   966  008C                     	;# 
   967  008D                     	;# 
   968  008E                     	;# 
   969  0090                     	;# 
   970  0091                     	;# 
   971  0092                     	;# 
   972  0095                     	;# 
   973  0096                     	;# 
   974  0097                     	;# 
   975  0099                     	;# 
   976  009A                     	;# 
   977  009B                     	;# 
   978  009B                     	;# 
   979  009C                     	;# 
   980  009D                     	;# 
   981  009E                     	;# 
   982  010C                     	;# 
   983  010D                     	;# 
   984  010E                     	;# 
   985  0116                     	;# 
   986  0117                     	;# 
   987  011D                     	;# 
   988  018C                     	;# 
   989  018D                     	;# 
   990  018E                     	;# 
   991  0191                     	;# 
   992  0191                     	;# 
   993  0192                     	;# 
   994  0193                     	;# 
   995  0193                     	;# 
   996  0194                     	;# 
   997  0195                     	;# 
   998  0196                     	;# 
   999  0197                     	;# 
  1000  0199                     	;# 
  1001  019A                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019C                     	;# 
  1007  019C                     	;# 
  1008  019D                     	;# 
  1009  019E                     	;# 
  1010  019F                     	;# 
  1011  020D                     	;# 
  1012  0210                     	;# 
  1013  0211                     	;# 
  1014  0211                     	;# 
  1015  0212                     	;# 
  1016  0212                     	;# 
  1017  0213                     	;# 
  1018  0213                     	;# 
  1019  0214                     	;# 
  1020  0214                     	;# 
  1021  0215                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0216                     	;# 
  1025  0216                     	;# 
  1026  0217                     	;# 
  1027  0217                     	;# 
  1028  0291                     	;# 
  1029  0291                     	;# 
  1030  0292                     	;# 
  1031  0293                     	;# 
  1032  0298                     	;# 
  1033  0298                     	;# 
  1034  0299                     	;# 
  1035  029A                     	;# 
  1036  0394                     	;# 
  1037  0395                     	;# 
  1038  0396                     	;# 
  1039  0FE4                     	;# 
  1040  0FE5                     	;# 
  1041  0FE6                     	;# 
  1042  0FE7                     	;# 
  1043  0FE8                     	;# 
  1044  0FE9                     	;# 
  1045  0FEA                     	;# 
  1046  0FEB                     	;# 
  1047  0FED                     	;# 
  1048  0FEE                     	;# 
  1049  0FEF                     	;# 
  1050  0000                     	;# 
  1051  0001                     	;# 
  1052  0002                     	;# 
  1053  0003                     	;# 
  1054  0004                     	;# 
  1055  0005                     	;# 
  1056  0006                     	;# 
  1057  0007                     	;# 
  1058  0008                     	;# 
  1059  0009                     	;# 
  1060  000A                     	;# 
  1061  000B                     	;# 
  1062  000C                     	;# 
  1063  000D                     	;# 
  1064  000E                     	;# 
  1065  0010                     	;# 
  1066  0011                     	;# 
  1067  0012                     	;# 
  1068  0015                     	;# 
  1069  0016                     	;# 
  1070  0016                     	;# 
  1071  0017                     	;# 
  1072  0018                     	;# 
  1073  0019                     	;# 
  1074  001A                     	;# 
  1075  001B                     	;# 
  1076  001C                     	;# 
  1077  008C                     	;# 
  1078  008D                     	;# 
  1079  008E                     	;# 
  1080  0090                     	;# 
  1081  0091                     	;# 
  1082  0092                     	;# 
  1083  0095                     	;# 
  1084  0096                     	;# 
  1085  0097                     	;# 
  1086  0099                     	;# 
  1087  009A                     	;# 
  1088  009B                     	;# 
  1089  009B                     	;# 
  1090  009C                     	;# 
  1091  009D                     	;# 
  1092  009E                     	;# 
  1093  010C                     	;# 
  1094  010D                     	;# 
  1095  010E                     	;# 
  1096  0116                     	;# 
  1097  0117                     	;# 
  1098  011D                     	;# 
  1099  018C                     	;# 
  1100  018D                     	;# 
  1101  018E                     	;# 
  1102  0191                     	;# 
  1103  0191                     	;# 
  1104  0192                     	;# 
  1105  0193                     	;# 
  1106  0193                     	;# 
  1107  0194                     	;# 
  1108  0195                     	;# 
  1109  0196                     	;# 
  1110  0197                     	;# 
  1111  0199                     	;# 
  1112  019A                     	;# 
  1113  019B                     	;# 
  1114  019B                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019C                     	;# 
  1118  019C                     	;# 
  1119  019D                     	;# 
  1120  019E                     	;# 
  1121  019F                     	;# 
  1122  020D                     	;# 
  1123  0210                     	;# 
  1124  0211                     	;# 
  1125  0211                     	;# 
  1126  0212                     	;# 
  1127  0212                     	;# 
  1128  0213                     	;# 
  1129  0213                     	;# 
  1130  0214                     	;# 
  1131  0214                     	;# 
  1132  0215                     	;# 
  1133  0215                     	;# 
  1134  0215                     	;# 
  1135  0216                     	;# 
  1136  0216                     	;# 
  1137  0217                     	;# 
  1138  0217                     	;# 
  1139  0291                     	;# 
  1140  0291                     	;# 
  1141  0292                     	;# 
  1142  0293                     	;# 
  1143  0298                     	;# 
  1144  0298                     	;# 
  1145  0299                     	;# 
  1146  029A                     	;# 
  1147  0394                     	;# 
  1148  0395                     	;# 
  1149  0396                     	;# 
  1150  0FE4                     	;# 
  1151  0FE5                     	;# 
  1152  0FE6                     	;# 
  1153  0FE7                     	;# 
  1154  0FE8                     	;# 
  1155  0FE9                     	;# 
  1156  0FEA                     	;# 
  1157  0FEB                     	;# 
  1158  0FED                     	;# 
  1159  0FEE                     	;# 
  1160  0FEF                     	;# 
  1161  0000                     	;# 
  1162  0001                     	;# 
  1163  0002                     	;# 
  1164  0003                     	;# 
  1165  0004                     	;# 
  1166  0005                     	;# 
  1167  0006                     	;# 
  1168  0007                     	;# 
  1169  0008                     	;# 
  1170  0009                     	;# 
  1171  000A                     	;# 
  1172  000B                     	;# 
  1173  000C                     	;# 
  1174  000D                     	;# 
  1175  000E                     	;# 
  1176  0010                     	;# 
  1177  0011                     	;# 
  1178  0012                     	;# 
  1179  0015                     	;# 
  1180  0016                     	;# 
  1181  0016                     	;# 
  1182  0017                     	;# 
  1183  0018                     	;# 
  1184  0019                     	;# 
  1185  001A                     	;# 
  1186  001B                     	;# 
  1187  001C                     	;# 
  1188  008C                     	;# 
  1189  008D                     	;# 
  1190  008E                     	;# 
  1191  0090                     	;# 
  1192  0091                     	;# 
  1193  0092                     	;# 
  1194  0095                     	;# 
  1195  0096                     	;# 
  1196  0097                     	;# 
  1197  0099                     	;# 
  1198  009A                     	;# 
  1199  009B                     	;# 
  1200  009B                     	;# 
  1201  009C                     	;# 
  1202  009D                     	;# 
  1203  009E                     	;# 
  1204  010C                     	;# 
  1205  010D                     	;# 
  1206  010E                     	;# 
  1207  0116                     	;# 
  1208  0117                     	;# 
  1209  011D                     	;# 
  1210  018C                     	;# 
  1211  018D                     	;# 
  1212  018E                     	;# 
  1213  0191                     	;# 
  1214  0191                     	;# 
  1215  0192                     	;# 
  1216  0193                     	;# 
  1217  0193                     	;# 
  1218  0194                     	;# 
  1219  0195                     	;# 
  1220  0196                     	;# 
  1221  0197                     	;# 
  1222  0199                     	;# 
  1223  019A                     	;# 
  1224  019B                     	;# 
  1225  019B                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019C                     	;# 
  1229  019C                     	;# 
  1230  019D                     	;# 
  1231  019E                     	;# 
  1232  019F                     	;# 
  1233  020D                     	;# 
  1234  0210                     	;# 
  1235  0211                     	;# 
  1236  0211                     	;# 
  1237  0212                     	;# 
  1238  0212                     	;# 
  1239  0213                     	;# 
  1240  0213                     	;# 
  1241  0214                     	;# 
  1242  0214                     	;# 
  1243  0215                     	;# 
  1244  0215                     	;# 
  1245  0215                     	;# 
  1246  0216                     	;# 
  1247  0216                     	;# 
  1248  0217                     	;# 
  1249  0217                     	;# 
  1250  0291                     	;# 
  1251  0291                     	;# 
  1252  0292                     	;# 
  1253  0293                     	;# 
  1254  0298                     	;# 
  1255  0298                     	;# 
  1256  0299                     	;# 
  1257  029A                     	;# 
  1258  0394                     	;# 
  1259  0395                     	;# 
  1260  0396                     	;# 
  1261  0FE4                     	;# 
  1262  0FE5                     	;# 
  1263  0FE6                     	;# 
  1264  0FE7                     	;# 
  1265  0FE8                     	;# 
  1266  0FE9                     	;# 
  1267  0FEA                     	;# 
  1268  0FEB                     	;# 
  1269  0FED                     	;# 
  1270  0FEE                     	;# 
  1271  0FEF                     	;# 
  1272  0000                     	;# 
  1273  0001                     	;# 
  1274  0002                     	;# 
  1275  0003                     	;# 
  1276  0004                     	;# 
  1277  0005                     	;# 
  1278  0006                     	;# 
  1279  0007                     	;# 
  1280  0008                     	;# 
  1281  0009                     	;# 
  1282  000A                     	;# 
  1283  000B                     	;# 
  1284  000C                     	;# 
  1285  000D                     	;# 
  1286  000E                     	;# 
  1287  0010                     	;# 
  1288  0011                     	;# 
  1289  0012                     	;# 
  1290  0015                     	;# 
  1291  0016                     	;# 
  1292  0016                     	;# 
  1293  0017                     	;# 
  1294  0018                     	;# 
  1295  0019                     	;# 
  1296  001A                     	;# 
  1297  001B                     	;# 
  1298  001C                     	;# 
  1299  008C                     	;# 
  1300  008D                     	;# 
  1301  008E                     	;# 
  1302  0090                     	;# 
  1303  0091                     	;# 
  1304  0092                     	;# 
  1305  0095                     	;# 
  1306  0096                     	;# 
  1307  0097                     	;# 
  1308  0099                     	;# 
  1309  009A                     	;# 
  1310  009B                     	;# 
  1311  009B                     	;# 
  1312  009C                     	;# 
  1313  009D                     	;# 
  1314  009E                     	;# 
  1315  010C                     	;# 
  1316  010D                     	;# 
  1317  010E                     	;# 
  1318  0116                     	;# 
  1319  0117                     	;# 
  1320  011D                     	;# 
  1321  018C                     	;# 
  1322  018D                     	;# 
  1323  018E                     	;# 
  1324  0191                     	;# 
  1325  0191                     	;# 
  1326  0192                     	;# 
  1327  0193                     	;# 
  1328  0193                     	;# 
  1329  0194                     	;# 
  1330  0195                     	;# 
  1331  0196                     	;# 
  1332  0197                     	;# 
  1333  0199                     	;# 
  1334  019A                     	;# 
  1335  019B                     	;# 
  1336  019B                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019C                     	;# 
  1340  019C                     	;# 
  1341  019D                     	;# 
  1342  019E                     	;# 
  1343  019F                     	;# 
  1344  020D                     	;# 
  1345  0210                     	;# 
  1346  0211                     	;# 
  1347  0211                     	;# 
  1348  0212                     	;# 
  1349  0212                     	;# 
  1350  0213                     	;# 
  1351  0213                     	;# 
  1352  0214                     	;# 
  1353  0214                     	;# 
  1354  0215                     	;# 
  1355  0215                     	;# 
  1356  0215                     	;# 
  1357  0216                     	;# 
  1358  0216                     	;# 
  1359  0217                     	;# 
  1360  0217                     	;# 
  1361  0291                     	;# 
  1362  0291                     	;# 
  1363  0292                     	;# 
  1364  0293                     	;# 
  1365  0298                     	;# 
  1366  0298                     	;# 
  1367  0299                     	;# 
  1368  029A                     	;# 
  1369  0394                     	;# 
  1370  0395                     	;# 
  1371  0396                     	;# 
  1372  0FE4                     	;# 
  1373  0FE5                     	;# 
  1374  0FE6                     	;# 
  1375  0FE7                     	;# 
  1376  0FE8                     	;# 
  1377  0FE9                     	;# 
  1378  0FEA                     	;# 
  1379  0FEB                     	;# 
  1380  0FED                     	;# 
  1381  0FEE                     	;# 
  1382  0FEF                     	;# 
  1383  0000                     	;# 
  1384  0001                     	;# 
  1385  0002                     	;# 
  1386  0003                     	;# 
  1387  0004                     	;# 
  1388  0005                     	;# 
  1389  0006                     	;# 
  1390  0007                     	;# 
  1391  0008                     	;# 
  1392  0009                     	;# 
  1393  000A                     	;# 
  1394  000B                     	;# 
  1395  000C                     	;# 
  1396  000D                     	;# 
  1397  000E                     	;# 
  1398  0010                     	;# 
  1399  0011                     	;# 
  1400  0012                     	;# 
  1401  0015                     	;# 
  1402  0016                     	;# 
  1403  0016                     	;# 
  1404  0017                     	;# 
  1405  0018                     	;# 
  1406  0019                     	;# 
  1407  001A                     	;# 
  1408  001B                     	;# 
  1409  001C                     	;# 
  1410  008C                     	;# 
  1411  008D                     	;# 
  1412  008E                     	;# 
  1413  0090                     	;# 
  1414  0091                     	;# 
  1415  0092                     	;# 
  1416  0095                     	;# 
  1417  0096                     	;# 
  1418  0097                     	;# 
  1419  0099                     	;# 
  1420  009A                     	;# 
  1421  009B                     	;# 
  1422  009B                     	;# 
  1423  009C                     	;# 
  1424  009D                     	;# 
  1425  009E                     	;# 
  1426  010C                     	;# 
  1427  010D                     	;# 
  1428  010E                     	;# 
  1429  0116                     	;# 
  1430  0117                     	;# 
  1431  011D                     	;# 
  1432  018C                     	;# 
  1433  018D                     	;# 
  1434  018E                     	;# 
  1435  0191                     	;# 
  1436  0191                     	;# 
  1437  0192                     	;# 
  1438  0193                     	;# 
  1439  0193                     	;# 
  1440  0194                     	;# 
  1441  0195                     	;# 
  1442  0196                     	;# 
  1443  0197                     	;# 
  1444  0199                     	;# 
  1445  019A                     	;# 
  1446  019B                     	;# 
  1447  019B                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019C                     	;# 
  1451  019C                     	;# 
  1452  019D                     	;# 
  1453  019E                     	;# 
  1454  019F                     	;# 
  1455  020D                     	;# 
  1456  0210                     	;# 
  1457  0211                     	;# 
  1458  0211                     	;# 
  1459  0212                     	;# 
  1460  0212                     	;# 
  1461  0213                     	;# 
  1462  0213                     	;# 
  1463  0214                     	;# 
  1464  0214                     	;# 
  1465  0215                     	;# 
  1466  0215                     	;# 
  1467  0215                     	;# 
  1468  0216                     	;# 
  1469  0216                     	;# 
  1470  0217                     	;# 
  1471  0217                     	;# 
  1472  0291                     	;# 
  1473  0291                     	;# 
  1474  0292                     	;# 
  1475  0293                     	;# 
  1476  0298                     	;# 
  1477  0298                     	;# 
  1478  0299                     	;# 
  1479  029A                     	;# 
  1480  0394                     	;# 
  1481  0395                     	;# 
  1482  0396                     	;# 
  1483  0FE4                     	;# 
  1484  0FE5                     	;# 
  1485  0FE6                     	;# 
  1486  0FE7                     	;# 
  1487  0FE8                     	;# 
  1488  0FE9                     	;# 
  1489  0FEA                     	;# 
  1490  0FEB                     	;# 
  1491  0FED                     	;# 
  1492  0FEE                     	;# 
  1493  0FEF                     	;# 
  1494  0000                     	;# 
  1495  0001                     	;# 
  1496  0002                     	;# 
  1497  0003                     	;# 
  1498  0004                     	;# 
  1499  0005                     	;# 
  1500  0006                     	;# 
  1501  0007                     	;# 
  1502  0008                     	;# 
  1503  0009                     	;# 
  1504  000A                     	;# 
  1505  000B                     	;# 
  1506  000C                     	;# 
  1507  000D                     	;# 
  1508  000E                     	;# 
  1509  0010                     	;# 
  1510  0011                     	;# 
  1511  0012                     	;# 
  1512  0015                     	;# 
  1513  0016                     	;# 
  1514  0016                     	;# 
  1515  0017                     	;# 
  1516  0018                     	;# 
  1517  0019                     	;# 
  1518  001A                     	;# 
  1519  001B                     	;# 
  1520  001C                     	;# 
  1521  008C                     	;# 
  1522  008D                     	;# 
  1523  008E                     	;# 
  1524  0090                     	;# 
  1525  0091                     	;# 
  1526  0092                     	;# 
  1527  0095                     	;# 
  1528  0096                     	;# 
  1529  0097                     	;# 
  1530  0099                     	;# 
  1531  009A                     	;# 
  1532  009B                     	;# 
  1533  009B                     	;# 
  1534  009C                     	;# 
  1535  009D                     	;# 
  1536  009E                     	;# 
  1537  010C                     	;# 
  1538  010D                     	;# 
  1539  010E                     	;# 
  1540  0116                     	;# 
  1541  0117                     	;# 
  1542  011D                     	;# 
  1543  018C                     	;# 
  1544  018D                     	;# 
  1545  018E                     	;# 
  1546  0191                     	;# 
  1547  0191                     	;# 
  1548  0192                     	;# 
  1549  0193                     	;# 
  1550  0193                     	;# 
  1551  0194                     	;# 
  1552  0195                     	;# 
  1553  0196                     	;# 
  1554  0197                     	;# 
  1555  0199                     	;# 
  1556  019A                     	;# 
  1557  019B                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019C                     	;# 
  1562  019C                     	;# 
  1563  019D                     	;# 
  1564  019E                     	;# 
  1565  019F                     	;# 
  1566  020D                     	;# 
  1567  0210                     	;# 
  1568  0211                     	;# 
  1569  0211                     	;# 
  1570  0212                     	;# 
  1571  0212                     	;# 
  1572  0213                     	;# 
  1573  0213                     	;# 
  1574  0214                     	;# 
  1575  0214                     	;# 
  1576  0215                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0216                     	;# 
  1580  0216                     	;# 
  1581  0217                     	;# 
  1582  0217                     	;# 
  1583  0291                     	;# 
  1584  0291                     	;# 
  1585  0292                     	;# 
  1586  0293                     	;# 
  1587  0298                     	;# 
  1588  0298                     	;# 
  1589  0299                     	;# 
  1590  029A                     	;# 
  1591  0394                     	;# 
  1592  0395                     	;# 
  1593  0396                     	;# 
  1594  0FE4                     	;# 
  1595  0FE5                     	;# 
  1596  0FE6                     	;# 
  1597  0FE7                     	;# 
  1598  0FE8                     	;# 
  1599  0FE9                     	;# 
  1600  0FEA                     	;# 
  1601  0FEB                     	;# 
  1602  0FED                     	;# 
  1603  0FEE                     	;# 
  1604  0FEF                     	;# 
  1605  0000                     	;# 
  1606  0001                     	;# 
  1607  0002                     	;# 
  1608  0003                     	;# 
  1609  0004                     	;# 
  1610  0005                     	;# 
  1611  0006                     	;# 
  1612  0007                     	;# 
  1613  0008                     	;# 
  1614  0009                     	;# 
  1615  000A                     	;# 
  1616  000B                     	;# 
  1617  000C                     	;# 
  1618  000D                     	;# 
  1619  000E                     	;# 
  1620  0010                     	;# 
  1621  0011                     	;# 
  1622  0012                     	;# 
  1623  0015                     	;# 
  1624  0016                     	;# 
  1625  0016                     	;# 
  1626  0017                     	;# 
  1627  0018                     	;# 
  1628  0019                     	;# 
  1629  001A                     	;# 
  1630  001B                     	;# 
  1631  001C                     	;# 
  1632  008C                     	;# 
  1633  008D                     	;# 
  1634  008E                     	;# 
  1635  0090                     	;# 
  1636  0091                     	;# 
  1637  0092                     	;# 
  1638  0095                     	;# 
  1639  0096                     	;# 
  1640  0097                     	;# 
  1641  0099                     	;# 
  1642  009A                     	;# 
  1643  009B                     	;# 
  1644  009B                     	;# 
  1645  009C                     	;# 
  1646  009D                     	;# 
  1647  009E                     	;# 
  1648  010C                     	;# 
  1649  010D                     	;# 
  1650  010E                     	;# 
  1651  0116                     	;# 
  1652  0117                     	;# 
  1653  011D                     	;# 
  1654  018C                     	;# 
  1655  018D                     	;# 
  1656  018E                     	;# 
  1657  0191                     	;# 
  1658  0191                     	;# 
  1659  0192                     	;# 
  1660  0193                     	;# 
  1661  0193                     	;# 
  1662  0194                     	;# 
  1663  0195                     	;# 
  1664  0196                     	;# 
  1665  0197                     	;# 
  1666  0199                     	;# 
  1667  019A                     	;# 
  1668  019B                     	;# 
  1669  019B                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019C                     	;# 
  1673  019C                     	;# 
  1674  019D                     	;# 
  1675  019E                     	;# 
  1676  019F                     	;# 
  1677  020D                     	;# 
  1678  0210                     	;# 
  1679  0211                     	;# 
  1680  0211                     	;# 
  1681  0212                     	;# 
  1682  0212                     	;# 
  1683  0213                     	;# 
  1684  0213                     	;# 
  1685  0214                     	;# 
  1686  0214                     	;# 
  1687  0215                     	;# 
  1688  0215                     	;# 
  1689  0215                     	;# 
  1690  0216                     	;# 
  1691  0216                     	;# 
  1692  0217                     	;# 
  1693  0217                     	;# 
  1694  0291                     	;# 
  1695  0291                     	;# 
  1696  0292                     	;# 
  1697  0293                     	;# 
  1698  0298                     	;# 
  1699  0298                     	;# 
  1700  0299                     	;# 
  1701  029A                     	;# 
  1702  0394                     	;# 
  1703  0395                     	;# 
  1704  0396                     	;# 
  1705  0FE4                     	;# 
  1706  0FE5                     	;# 
  1707  0FE6                     	;# 
  1708  0FE7                     	;# 
  1709  0FE8                     	;# 
  1710  0FE9                     	;# 
  1711  0FEA                     	;# 
  1712  0FEB                     	;# 
  1713  0FED                     	;# 
  1714  0FEE                     	;# 
  1715  0FEF                     	;# 
  1716  0000                     	;# 
  1717  0001                     	;# 
  1718  0002                     	;# 
  1719  0003                     	;# 
  1720  0004                     	;# 
  1721  0005                     	;# 
  1722  0006                     	;# 
  1723  0007                     	;# 
  1724  0008                     	;# 
  1725  0009                     	;# 
  1726  000A                     	;# 
  1727  000B                     	;# 
  1728  000C                     	;# 
  1729  000D                     	;# 
  1730  000E                     	;# 
  1731  0010                     	;# 
  1732  0011                     	;# 
  1733  0012                     	;# 
  1734  0015                     	;# 
  1735  0016                     	;# 
  1736  0016                     	;# 
  1737  0017                     	;# 
  1738  0018                     	;# 
  1739  0019                     	;# 
  1740  001A                     	;# 
  1741  001B                     	;# 
  1742  001C                     	;# 
  1743  008C                     	;# 
  1744  008D                     	;# 
  1745  008E                     	;# 
  1746  0090                     	;# 
  1747  0091                     	;# 
  1748  0092                     	;# 
  1749  0095                     	;# 
  1750  0096                     	;# 
  1751  0097                     	;# 
  1752  0099                     	;# 
  1753  009A                     	;# 
  1754  009B                     	;# 
  1755  009B                     	;# 
  1756  009C                     	;# 
  1757  009D                     	;# 
  1758  009E                     	;# 
  1759  010C                     	;# 
  1760  010D                     	;# 
  1761  010E                     	;# 
  1762  0116                     	;# 
  1763  0117                     	;# 
  1764  011D                     	;# 
  1765  018C                     	;# 
  1766  018D                     	;# 
  1767  018E                     	;# 
  1768  0191                     	;# 
  1769  0191                     	;# 
  1770  0192                     	;# 
  1771  0193                     	;# 
  1772  0193                     	;# 
  1773  0194                     	;# 
  1774  0195                     	;# 
  1775  0196                     	;# 
  1776  0197                     	;# 
  1777  0199                     	;# 
  1778  019A                     	;# 
  1779  019B                     	;# 
  1780  019B                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019C                     	;# 
  1784  019C                     	;# 
  1785  019D                     	;# 
  1786  019E                     	;# 
  1787  019F                     	;# 
  1788  020D                     	;# 
  1789  0210                     	;# 
  1790  0211                     	;# 
  1791  0211                     	;# 
  1792  0212                     	;# 
  1793  0212                     	;# 
  1794  0213                     	;# 
  1795  0213                     	;# 
  1796  0214                     	;# 
  1797  0214                     	;# 
  1798  0215                     	;# 
  1799  0215                     	;# 
  1800  0215                     	;# 
  1801  0216                     	;# 
  1802  0216                     	;# 
  1803  0217                     	;# 
  1804  0217                     	;# 
  1805  0291                     	;# 
  1806  0291                     	;# 
  1807  0292                     	;# 
  1808  0293                     	;# 
  1809  0298                     	;# 
  1810  0298                     	;# 
  1811  0299                     	;# 
  1812  029A                     	;# 
  1813  0394                     	;# 
  1814  0395                     	;# 
  1815  0396                     	;# 
  1816  0FE4                     	;# 
  1817  0FE5                     	;# 
  1818  0FE6                     	;# 
  1819  0FE7                     	;# 
  1820  0FE8                     	;# 
  1821  0FE9                     	;# 
  1822  0FEA                     	;# 
  1823  0FEB                     	;# 
  1824  0FED                     	;# 
  1825  0FEE                     	;# 
  1826  0FEF                     	;# 
  1827  0000                     	;# 
  1828  0001                     	;# 
  1829  0002                     	;# 
  1830  0003                     	;# 
  1831  0004                     	;# 
  1832  0005                     	;# 
  1833  0006                     	;# 
  1834  0007                     	;# 
  1835  0008                     	;# 
  1836  0009                     	;# 
  1837  000A                     	;# 
  1838  000B                     	;# 
  1839  000C                     	;# 
  1840  000D                     	;# 
  1841  000E                     	;# 
  1842  0010                     	;# 
  1843  0011                     	;# 
  1844  0012                     	;# 
  1845  0015                     	;# 
  1846  0016                     	;# 
  1847  0016                     	;# 
  1848  0017                     	;# 
  1849  0018                     	;# 
  1850  0019                     	;# 
  1851  001A                     	;# 
  1852  001B                     	;# 
  1853  001C                     	;# 
  1854  008C                     	;# 
  1855  008D                     	;# 
  1856  008E                     	;# 
  1857  0090                     	;# 
  1858  0091                     	;# 
  1859  0092                     	;# 
  1860  0095                     	;# 
  1861  0096                     	;# 
  1862  0097                     	;# 
  1863  0099                     	;# 
  1864  009A                     	;# 
  1865  009B                     	;# 
  1866  009B                     	;# 
  1867  009C                     	;# 
  1868  009D                     	;# 
  1869  009E                     	;# 
  1870  010C                     	;# 
  1871  010D                     	;# 
  1872  010E                     	;# 
  1873  0116                     	;# 
  1874  0117                     	;# 
  1875  011D                     	;# 
  1876  018C                     	;# 
  1877  018D                     	;# 
  1878  018E                     	;# 
  1879  0191                     	;# 
  1880  0191                     	;# 
  1881  0192                     	;# 
  1882  0193                     	;# 
  1883  0193                     	;# 
  1884  0194                     	;# 
  1885  0195                     	;# 
  1886  0196                     	;# 
  1887  0197                     	;# 
  1888  0199                     	;# 
  1889  019A                     	;# 
  1890  019B                     	;# 
  1891  019B                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019C                     	;# 
  1895  019C                     	;# 
  1896  019D                     	;# 
  1897  019E                     	;# 
  1898  019F                     	;# 
  1899  020D                     	;# 
  1900  0210                     	;# 
  1901  0211                     	;# 
  1902  0211                     	;# 
  1903  0212                     	;# 
  1904  0212                     	;# 
  1905  0213                     	;# 
  1906  0213                     	;# 
  1907  0214                     	;# 
  1908  0214                     	;# 
  1909  0215                     	;# 
  1910  0215                     	;# 
  1911  0215                     	;# 
  1912  0216                     	;# 
  1913  0216                     	;# 
  1914  0217                     	;# 
  1915  0217                     	;# 
  1916  0291                     	;# 
  1917  0291                     	;# 
  1918  0292                     	;# 
  1919  0293                     	;# 
  1920  0298                     	;# 
  1921  0298                     	;# 
  1922  0299                     	;# 
  1923  029A                     	;# 
  1924  0394                     	;# 
  1925  0395                     	;# 
  1926  0396                     	;# 
  1927  0FE4                     	;# 
  1928  0FE5                     	;# 
  1929  0FE6                     	;# 
  1930  0FE7                     	;# 
  1931  0FE8                     	;# 
  1932  0FE9                     	;# 
  1933  0FEA                     	;# 
  1934  0FEB                     	;# 
  1935  0FED                     	;# 
  1936  0FEE                     	;# 
  1937  0FEF                     	;# 
  1938  0000                     	;# 
  1939  0001                     	;# 
  1940  0002                     	;# 
  1941  0003                     	;# 
  1942  0004                     	;# 
  1943  0005                     	;# 
  1944  0006                     	;# 
  1945  0007                     	;# 
  1946  0008                     	;# 
  1947  0009                     	;# 
  1948  000A                     	;# 
  1949  000B                     	;# 
  1950  000C                     	;# 
  1951  000D                     	;# 
  1952  000E                     	;# 
  1953  0010                     	;# 
  1954  0011                     	;# 
  1955  0012                     	;# 
  1956  0015                     	;# 
  1957  0016                     	;# 
  1958  0016                     	;# 
  1959  0017                     	;# 
  1960  0018                     	;# 
  1961  0019                     	;# 
  1962  001A                     	;# 
  1963  001B                     	;# 
  1964  001C                     	;# 
  1965  008C                     	;# 
  1966  008D                     	;# 
  1967  008E                     	;# 
  1968  0090                     	;# 
  1969  0091                     	;# 
  1970  0092                     	;# 
  1971  0095                     	;# 
  1972  0096                     	;# 
  1973  0097                     	;# 
  1974  0099                     	;# 
  1975  009A                     	;# 
  1976  009B                     	;# 
  1977  009B                     	;# 
  1978  009C                     	;# 
  1979  009D                     	;# 
  1980  009E                     	;# 
  1981  010C                     	;# 
  1982  010D                     	;# 
  1983  010E                     	;# 
  1984  0116                     	;# 
  1985  0117                     	;# 
  1986  011D                     	;# 
  1987  018C                     	;# 
  1988  018D                     	;# 
  1989  018E                     	;# 
  1990  0191                     	;# 
  1991  0191                     	;# 
  1992  0192                     	;# 
  1993  0193                     	;# 
  1994  0193                     	;# 
  1995  0194                     	;# 
  1996  0195                     	;# 
  1997  0196                     	;# 
  1998  0197                     	;# 
  1999  0199                     	;# 
  2000  019A                     	;# 
  2001  019B                     	;# 
  2002  019B                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019C                     	;# 
  2006  019C                     	;# 
  2007  019D                     	;# 
  2008  019E                     	;# 
  2009  019F                     	;# 
  2010  020D                     	;# 
  2011  0210                     	;# 
  2012  0211                     	;# 
  2013  0211                     	;# 
  2014  0212                     	;# 
  2015  0212                     	;# 
  2016  0213                     	;# 
  2017  0213                     	;# 
  2018  0214                     	;# 
  2019  0214                     	;# 
  2020  0215                     	;# 
  2021  0215                     	;# 
  2022  0215                     	;# 
  2023  0216                     	;# 
  2024  0216                     	;# 
  2025  0217                     	;# 
  2026  0217                     	;# 
  2027  0291                     	;# 
  2028  0291                     	;# 
  2029  0292                     	;# 
  2030  0293                     	;# 
  2031  0298                     	;# 
  2032  0298                     	;# 
  2033  0299                     	;# 
  2034  029A                     	;# 
  2035  0394                     	;# 
  2036  0395                     	;# 
  2037  0396                     	;# 
  2038  0FE4                     	;# 
  2039  0FE5                     	;# 
  2040  0FE6                     	;# 
  2041  0FE7                     	;# 
  2042  0FE8                     	;# 
  2043  0FE9                     	;# 
  2044  0FEA                     	;# 
  2045  0FEB                     	;# 
  2046  0FED                     	;# 
  2047  0FEE                     	;# 
  2048  0FEF                     	;# 
  2049  0000                     	;# 
  2050  0001                     	;# 
  2051  0002                     	;# 
  2052  0003                     	;# 
  2053  0004                     	;# 
  2054  0005                     	;# 
  2055  0006                     	;# 
  2056  0007                     	;# 
  2057  0008                     	;# 
  2058  0009                     	;# 
  2059  000A                     	;# 
  2060  000B                     	;# 
  2061  000C                     	;# 
  2062  000D                     	;# 
  2063  000E                     	;# 
  2064  0010                     	;# 
  2065  0011                     	;# 
  2066  0012                     	;# 
  2067  0015                     	;# 
  2068  0016                     	;# 
  2069  0016                     	;# 
  2070  0017                     	;# 
  2071  0018                     	;# 
  2072  0019                     	;# 
  2073  001A                     	;# 
  2074  001B                     	;# 
  2075  001C                     	;# 
  2076  008C                     	;# 
  2077  008D                     	;# 
  2078  008E                     	;# 
  2079  0090                     	;# 
  2080  0091                     	;# 
  2081  0092                     	;# 
  2082  0095                     	;# 
  2083  0096                     	;# 
  2084  0097                     	;# 
  2085  0099                     	;# 
  2086  009A                     	;# 
  2087  009B                     	;# 
  2088  009B                     	;# 
  2089  009C                     	;# 
  2090  009D                     	;# 
  2091  009E                     	;# 
  2092  010C                     	;# 
  2093  010D                     	;# 
  2094  010E                     	;# 
  2095  0116                     	;# 
  2096  0117                     	;# 
  2097  011D                     	;# 
  2098  018C                     	;# 
  2099  018D                     	;# 
  2100  018E                     	;# 
  2101  0191                     	;# 
  2102  0191                     	;# 
  2103  0192                     	;# 
  2104  0193                     	;# 
  2105  0193                     	;# 
  2106  0194                     	;# 
  2107  0195                     	;# 
  2108  0196                     	;# 
  2109  0197                     	;# 
  2110  0199                     	;# 
  2111  019A                     	;# 
  2112  019B                     	;# 
  2113  019B                     	;# 
  2114  019B                     	;# 
  2115  019B                     	;# 
  2116  019C                     	;# 
  2117  019C                     	;# 
  2118  019D                     	;# 
  2119  019E                     	;# 
  2120  019F                     	;# 
  2121  020D                     	;# 
  2122  0210                     	;# 
  2123  0211                     	;# 
  2124  0211                     	;# 
  2125  0212                     	;# 
  2126  0212                     	;# 
  2127  0213                     	;# 
  2128  0213                     	;# 
  2129  0214                     	;# 
  2130  0214                     	;# 
  2131  0215                     	;# 
  2132  0215                     	;# 
  2133  0215                     	;# 
  2134  0216                     	;# 
  2135  0216                     	;# 
  2136  0217                     	;# 
  2137  0217                     	;# 
  2138  0291                     	;# 
  2139  0291                     	;# 
  2140  0292                     	;# 
  2141  0293                     	;# 
  2142  0298                     	;# 
  2143  0298                     	;# 
  2144  0299                     	;# 
  2145  029A                     	;# 
  2146  0394                     	;# 
  2147  0395                     	;# 
  2148  0396                     	;# 
  2149  0FE4                     	;# 
  2150  0FE5                     	;# 
  2151  0FE6                     	;# 
  2152  0FE7                     	;# 
  2153  0FE8                     	;# 
  2154  0FE9                     	;# 
  2155  0FEA                     	;# 
  2156  0FEB                     	;# 
  2157  0FED                     	;# 
  2158  0FEE                     	;# 
  2159  0FEF                     	;# 
  2160                           
  2161                           	psect	idataBANK4
  2162  1F03                     __pidataBANK4:	
  2163                           
  2164                           ;initializer for __product
  2165  1F03  3463               	retlw	99
  2166  1F04  3402               	retlw	2
  2167  1F05  3400               	retlw	0
  2168  1F06  3400               	retlw	0
  2169  1F07  3400               	retlw	0
  2170  1F08  3400               	retlw	0
  2171  1F09  3400               	retlw	0
  2172  1F0A  3400               	retlw	0
  2173  1F0B  3400               	retlw	0
  2174  1F0C  3400               	retlw	0
  2175  1F0D  3400               	retlw	0
  2176  1F0E  3400               	retlw	0
  2177  1F0F  34FF               	retlw	255
  2178  1F10  34FF               	retlw	255
  2179  1F11  34FF               	retlw	255
  2180  1F12  3400               	retlw	0
  2181  1F13  3400               	retlw	0
  2182  1F14  3400               	retlw	0
  2183  1F15  3400               	retlw	0
  2184  1F16  3400               	retlw	0
  2185  1F17  3400               	retlw	0
  2186  1F18  3400               	retlw	0
  2187  1F19  3400               	retlw	0
  2188  1F1A  3400               	retlw	0
  2189  1F1B  3400               	retlw	0
  2190  1F1C  3400               	retlw	0
  2191  1F1D  3400               	retlw	0
  2192  1F1E  3400               	retlw	0
  2193  1F1F  3400               	retlw	0
  2194  1F20  3400               	retlw	0
  2195  1F21  3400               	retlw	0
  2196  1F22  3400               	retlw	0
  2197                           
  2198                           	psect	stringtext
  2199  1000                     __pstringtext:	
  2200  1000                     _CC2500_registers_address:	
  2201  1000  3403               	retlw	3
  2202  1001  3416               	retlw	22
  2203  1002  3417               	retlw	23
  2204  1003  341E               	retlw	30
  2205  1004  341F               	retlw	31
  2206  1005  3420               	retlw	32
  2207  1006  342A               	retlw	42
  2208  1007  342B               	retlw	43
  2209  1008  340B               	retlw	11
  2210  1009  340C               	retlw	12
  2211  100A  340D               	retlw	13
  2212  100B  340E               	retlw	14
  2213  100C  340F               	retlw	15
  2214  100D  3410               	retlw	16
  2215  100E  3411               	retlw	17
  2216  100F  3412               	retlw	18
  2217  1010  3413               	retlw	19
  2218  1011  3414               	retlw	20
  2219  1012  340A               	retlw	10
  2220  1013  3415               	retlw	21
  2221  1014  3421               	retlw	33
  2222  1015  3422               	retlw	34
  2223  1016  3418               	retlw	24
  2224  1017  3419               	retlw	25
  2225  1018  341A               	retlw	26
  2226  1019  341B               	retlw	27
  2227  101A  341C               	retlw	28
  2228  101B  341D               	retlw	29
  2229  101C  3423               	retlw	35
  2230  101D  3424               	retlw	36
  2231  101E  3425               	retlw	37
  2232  101F  3426               	retlw	38
  2233  1020  3429               	retlw	41
  2234  1021  342C               	retlw	44
  2235  1022  342D               	retlw	45
  2236  1023  342E               	retlw	46
  2237  1024  3400               	retlw	0
  2238  1025  3401               	retlw	1
  2239  1026  3402               	retlw	2
  2240  1027  3407               	retlw	7
  2241  1028  3408               	retlw	8
  2242  1029  3409               	retlw	9
  2243  102A  3406               	retlw	6
  2244  102B  3404               	retlw	4
  2245  102C  3405               	retlw	5
  2246  102D  3427               	retlw	39
  2247  102E  3428               	retlw	40
  2248  102F                     __end_of_CC2500_registers_address:	
  2249  102F                     _CC2500_rfSettings:	
  2250  102F  3407               	retlw	7
  2251  1030  3407               	retlw	7
  2252  1031  3430               	retlw	48
  2253  1032  3487               	retlw	135
  2254  1033  346B               	retlw	107
  2255  1034  34F8               	retlw	248
  2256  1035  347F               	retlw	127
  2257  1036  343F               	retlw	63
  2258  1037  3409               	retlw	9
  2259  1038  3400               	retlw	0
  2260  1039  345C               	retlw	92
  2261  103A  34A7               	retlw	167
  2262  103B  3462               	retlw	98
  2263  103C  3486               	retlw	134
  2264  103D  3483               	retlw	131
  2265  103E  3403               	retlw	3
  2266  103F  3422               	retlw	34
  2267  1040  34F8               	retlw	248
  2268  1041  3400               	retlw	0
  2269  1042  3444               	retlw	68
  2270  1043  34B6               	retlw	182
  2271  1044  3410               	retlw	16
  2272  1045  3418               	retlw	24
  2273  1046  341D               	retlw	29
  2274  1047  341C               	retlw	28
  2275  1048  34C7               	retlw	199
  2276  1049  3400               	retlw	0
  2277  104A  34B2               	retlw	178
  2278  104B  34EA               	retlw	234
  2279  104C  340A               	retlw	10
  2280  104D  3400               	retlw	0
  2281  104E  3411               	retlw	17
  2282  104F  3459               	retlw	89
  2283  1050  3488               	retlw	136
  2284  1051  3431               	retlw	49
  2285  1052  340B               	retlw	11
  2286  1053  342F               	retlw	47
  2287  1054  342E               	retlw	46
  2288  1055  3406               	retlw	6
  2289  1056  3404               	retlw	4
  2290  1057  3405               	retlw	5
  2291  1058  3400               	retlw	0
  2292  1059  3430               	retlw	48
  2293  105A  34D3               	retlw	211
  2294  105B  3491               	retlw	145
  2295  105C  3441               	retlw	65
  2296  105D  3400               	retlw	0
  2297  105E                     __end_of_CC2500_rfSettings:	
  2298  105E                     _CC2500_patable_vaule:	
  2299  105E  34FE               	retlw	254
  2300  105F  34FE               	retlw	254
  2301  1060  34FE               	retlw	254
  2302  1061  34FE               	retlw	254
  2303  1062  34FE               	retlw	254
  2304  1063  34FE               	retlw	254
  2305  1064  34FE               	retlw	254
  2306  1065  34FE               	retlw	254
  2307  1066                     __end_of_CC2500_patable_vaule:	
  2308                           
  2309                           	psect	nvCOMMON
  2310  007A                     __pnvCOMMON:	
  2311  007A                     _product:	
  2312  007A                     	ds	1
  2313  000C                     _PORTA	set	12
  2314  000D                     _PORTB	set	13
  2315  000E                     _PORTC	set	14
  2316  0018                     _T1CON	set	24
  2317  0017                     _TMR1H	set	23
  2318  0016                     _TMR1L	set	22
  2319  005F                     _GIE	set	95
  2320  005B                     _IOCIE	set	91
  2321  0058                     _IOCIF	set	88
  2322  005E                     _PEIE	set	94
  2323  0060                     _RA0	set	96
  2324  0063                     _RA3	set	99
  2325  0064                     _RA4	set	100
  2326  0066                     _RA6	set	102
  2327  0067                     _RA7	set	103
  2328  0068                     _RB0	set	104
  2329  0069                     _RB1	set	105
  2330  006A                     _RB2	set	106
  2331  006B                     _RB3	set	107
  2332  006C                     _RB4	set	108
  2333  006D                     _RB5	set	109
  2334  0070                     _RC0	set	112
  2335  0071                     _RC1	set	113
  2336  0072                     _RC2	set	114
  2337  0074                     _RC4	set	116
  2338  0075                     _RC5	set	117
  2339  0077                     _RC7	set	119
  2340  0088                     _TMR1IF	set	136
  2341  009D                     _ADCON0	set	157
  2342  009E                     _ADCON1	set	158
  2343  009C                     _ADRESH	set	156
  2344  009B                     _ADRESL	set	155
  2345  0099                     _OSCCON	set	153
  2346  008C                     _TRISA	set	140
  2347  008D                     _TRISB	set	141
  2348  008E                     _TRISC	set	142
  2349  0097                     _WDTCON	set	151
  2350  04E9                     _GO_nDONE	set	1257
  2351  0488                     _TMR1IE	set	1160
  2352  0117                     _FVRCON	set	279
  2353  010C                     _LATA	set	268
  2354  010D                     _LATB	set	269
  2355  010E                     _LATC	set	270
  2356  018C                     _ANSELA	set	396
  2357  018D                     _ANSELB	set	397
  2358  018E                     _ANSELC	set	398
  2359  0192                     _PMADRH	set	402
  2360  0191                     _PMADRL	set	401
  2361  0196                     _PMCON2	set	406
  2362  0194                     _PMDATH	set	404
  2363  0193                     _PMDATL	set	403
  2364  0CAE                     _CFGS	set	3246
  2365  0CAC                     _FREE	set	3244
  2366  0CAD                     _LWLO	set	3245
  2367  0CA8                     _RD	set	3240
  2368  0CA9                     _WR	set	3241
  2369  0CAA                     _WREN	set	3242
  2370  020D                     _WPUB	set	525
  2371  1069                     _WPUB1	set	4201
  2372  106A                     _WPUB2	set	4202
  2373  0396                     _IOCBF	set	918
  2374  0395                     _IOCBN	set	917
  2375  0394                     _IOCBP	set	916
  2376  1CB2                     _IOCBF2	set	7346
  2377                           
  2378                           ; #config settings
  2379  0000                     
  2380                           	psect	cinit
  2381  0015                     start_initialization:	
  2382  0015                     __initialization:	
  2383                           
  2384                           ; Clear objects allocated to BITCOMMON
  2385  0015  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2386                           
  2387                           ; Clear objects allocated to COMMON
  2388  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2389  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2390  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2391  0019  01F8               	clrf	(__pbssCOMMON+3)& (0+127)
  2392                           
  2393                           ; Clear objects allocated to BANK0
  2394  001A  01EF               	clrf	__pbssBANK0& (0+127)
  2395                           
  2396                           ; Clear objects allocated to BANK1
  2397  001B  30A0               	movlw	low __pbssBANK1
  2398  001C  0084               	movwf	4
  2399  001D  3000               	movlw	high __pbssBANK1
  2400  001E  0085               	movwf	5
  2401  001F  304A               	movlw	74
  2402  0020  319A  22E6  3180   	fcall	clear_ram0
  2403                           
  2404                           ; Clear objects allocated to BANK2
  2405  0023  3020               	movlw	low __pbssBANK2
  2406  0024  0084               	movwf	4
  2407  0025  3001               	movlw	high __pbssBANK2
  2408  0026  0085               	movwf	5
  2409  0027  304B               	movlw	75
  2410  0028  319A  22E6  3180   	fcall	clear_ram0
  2411                           
  2412                           ; Clear objects allocated to BANK3
  2413  002B  30A0               	movlw	low __pbssBANK3
  2414  002C  0084               	movwf	4
  2415  002D  3001               	movlw	high __pbssBANK3
  2416  002E  0085               	movwf	5
  2417  002F  3049               	movlw	73
  2418  0030  319A  22E6  3180   	fcall	clear_ram0
  2419                           
  2420                           ; Clear objects allocated to BANK4
  2421  0033  3020               	movlw	low __pbssBANK4
  2422  0034  0084               	movwf	4
  2423  0035  3002               	movlw	high __pbssBANK4
  2424  0036  0085               	movwf	5
  2425  0037  302E               	movlw	46
  2426  0038  319A  22E6  3180   	fcall	clear_ram0
  2427                           
  2428                           ; Initialize objects allocated to BANK4
  2429  003B  3003               	movlw	low __pidataBANK4
  2430  003C  0084               	movwf	4
  2431  003D  309F               	movlw	(high __pidataBANK4)| (0+128)
  2432  003E  0085               	movwf	5
  2433  003F  304E               	movlw	low __pdataBANK4
  2434  0040  0086               	movwf	6
  2435  0041  3002               	movlw	high __pdataBANK4
  2436  0042  0087               	movwf	7
  2437  0043  3020               	movlw	32
  2438  0044  319A  22E0         	fcall	init_ram
  2439  0046                     end_of_initialization:	
  2440                           ;End of C runtime variable initialization code
  2441                           
  2442  0046                     __end_of__initialization:	
  2443  0046  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2444  0047  0020               	movlb	0
  2445  0048  3197  2FA5         	ljmp	_main	;jump to C main() function
  2446                           
  2447                           	psect	bitbssCOMMON
  2448  03C8                     __pbitbssCOMMON:	
  2449  03C8                     _Receive_OK:	
  2450  03C8                     	ds	1
  2451  03C9                     _Transceive_OK:	
  2452  03C9                     	ds	1
  2453                           
  2454                           	psect	bssCOMMON
  2455  0075                     __pbssCOMMON:	
  2456  0075                     _Sw:	
  2457  0075                     	ds	2
  2458  0077                     _DelayOff:	
  2459  0077                     	ds	1
  2460  0078                     _DimmerLightsIntr:	
  2461  0078                     	ds	1
  2462                           
  2463                           	psect	bssBANK0
  2464  006F                     __pbssBANK0:	
  2465  006F                     _DimmerLights:	
  2466  006F                     	ds	1
  2467                           
  2468                           	psect	bssBANK1
  2469  00A0                     __pbssBANK1:	
  2470  00A0                     _RF1:	
  2471  00A0                     	ds	14
  2472  00AE                     _myMain:	
  2473  00AE                     	ds	14
  2474  00BC                     _Buz1:	
  2475  00BC                     	ds	12
  2476  00C8                     _Dimmer:	
  2477  00C8                     	ds	3
  2478  00CB                     _CRC:	
  2479  00CB                     	ds	1
  2480  00CC                     _DimmerLights11:	
  2481  00CC                     	ds	1
  2482  00CD                     _DimmerLights22:	
  2483  00CD                     	ds	1
  2484  00CE                     _DimmerLightsIntrIOC:	
  2485  00CE                     	ds	1
  2486  00CF                     _LED:	
  2487  00CF                     	ds	1
  2488  00D0                     _RSSI:	
  2489  00D0                     	ds	1
  2490  00D1                     _Rx_Length:	
  2491  00D1                     	ds	1
  2492  00D2                     _SPI0Buffer:	
  2493  00D2                     	ds	1
  2494  00D3                     _SwDetect:	
  2495  00D3                     	ds	1
  2496  00D4                     _Tx_Length:	
  2497  00D4                     	ds	1
  2498  00D5                     _r_address:	
  2499  00D5                     	ds	1
  2500  00D6                     _r_data:	
  2501  00D6                     	ds	1
  2502  00D7                     _s_data:	
  2503  00D7                     	ds	1
  2504  00D8                     _Temp:	
  2505  00D8                     	ds	18
  2506                           
  2507                           	psect	bssBANK2
  2508  0120                     __pbssBANK2:	
  2509  0120                     _Timer1:	
  2510  0120                     	ds	3
  2511  0123                     _RF_Count:	
  2512  0123                     	ds	2
  2513  0125                     _WDT:	
  2514  0125                     	ds	2
  2515  0127                     _Load:	
  2516  0127                     	ds	46
  2517  0155                     _DlySw1:	
  2518  0155                     	ds	5
  2519  015A                     _DlySw2:	
  2520  015A                     	ds	5
  2521  015F                     _VarErrLED:	
  2522  015F                     	ds	4
  2523  0163                     _VarLED1:	
  2524  0163                     	ds	4
  2525  0167                     _VarLED2:	
  2526  0167                     	ds	4
  2527                           
  2528                           	psect	bssBANK3
  2529  01A0                     __pbssBANK3:	
  2530  01A0                     _RF_Data:	
  2531  01A0                     	ds	30
  2532  01BE                     _DimmerLights1:	
  2533  01BE                     	ds	17
  2534  01CF                     _DimmerLights2:	
  2535  01CF                     	ds	17
  2536  01E0                     _Sw1:	
  2537  01E0                     	ds	9
  2538                           
  2539                           	psect	bssBANK4
  2540  0220                     __pbssBANK4:	
  2541  0220                     _Memory:	
  2542  0220                     	ds	37
  2543  0245                     _Sw2:	
  2544  0245                     	ds	9
  2545                           
  2546                           	psect	dataBANK4
  2547  024E                     __pdataBANK4:	
  2548  024E                     __product:	
  2549  024E                     	ds	32
  2550                           
  2551                           	psect	clrtext
  2552  1AE6                     clear_ram0:	
  2553                           ;	Called with FSR0 containing the base address, and
  2554                           ;	WREG with the size to clear
  2555                           
  2556  1AE6  0064               	clrwdt	;clear the watchdog before getting into this loop
  2557  1AE7                     clrloop0:	
  2558  1AE7  0180               	clrf	0	;clear RAM location pointed to by FSR
  2559  1AE8  3101               	addfsr 0,1
  2560  1AE9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2561  1AEA  2AE7               	goto	clrloop0	;have we reached the end yet?
  2562  1AEB  3400               	retlw	0	;all done for this memory range, return
  2563                           
  2564                           	psect	inittext
  2565  1AE0                     init_ram:	
  2566  1AE0  00FE               	movwf	126
  2567  1AE1                     initloop:	
  2568  1AE1  0012               	moviw fsr0++
  2569  1AE2  001E               	movwi fsr1++
  2570  1AE3  0BFE               	decfsz	126,f
  2571  1AE4  2AE1               	goto	initloop
  2572  1AE5  3400               	retlw	0
  2573                           
  2574                           	psect	cstackBANK5
  2575  02A0                     __pcstackBANK5:	
  2576  02A0                     ?_main:	
  2577  02A0                     main@argc:	
  2578                           ; 2 bytes @ 0x0
  2579                           
  2580                           
  2581                           ; 2 bytes @ 0x0
  2582  02A0                     	ds	2
  2583  02A2                     main@argv:	
  2584                           
  2585                           ; 2 bytes @ 0x2
  2586  02A2                     	ds	2
  2587                           
  2588                           	psect	cstackBANK3
  2589  01E9                     __pcstackBANK3:	
  2590  01E9                     Exception_Main@count:	
  2591                           
  2592                           ; 1 bytes @ 0x0
  2593  01E9                     	ds	1
  2594  01EA                     Exception_Main@error:	
  2595                           
  2596                           ; 1 bytes @ 0x1
  2597  01EA                     	ds	1
  2598  01EB                     Exception_Main@i:	
  2599                           
  2600                           ; 2 bytes @ 0x2
  2601  01EB                     	ds	2
  2602  01ED                     Exception_Main@i_3638:	
  2603                           
  2604                           ; 2 bytes @ 0x4
  2605  01ED                     	ds	2
  2606  01EF                     Exception_Main@lights:	
  2607                           
  2608                           ; 1 bytes @ 0x6
  2609  01EF                     	ds	1
  2610                           
  2611                           	psect	cstackBANK2
  2612  016B                     __pcstackBANK2:	
  2613  016B                     setRF_Main@loop_f:	
  2614                           
  2615                           ; 1 bytes @ 0x0
  2616  016B                     	ds	1
  2617  016C                     setRF_Main@error:	
  2618                           
  2619                           ; 1 bytes @ 0x1
  2620  016C                     	ds	1
  2621                           
  2622                           	psect	cstackBANK1
  2623  00EA                     __pcstackBANK1:	
  2624  00EA                     setDimmerLights_ErrorClose@count:	
  2625                           
  2626                           ; 1 bytes @ 0x0
  2627  00EA                     	ds	1
  2628  00EB                     setDimmerLights_ErrorClose@lights:	
  2629                           
  2630                           ; 1 bytes @ 0x1
  2631  00EB                     	ds	1
  2632  00EC                     setDimmerLights_ErrorClose@i:	
  2633                           
  2634                           ; 2 bytes @ 0x2
  2635  00EC                     	ds	2
  2636  00EE                     getRxData@error:	
  2637                           
  2638                           ; 1 bytes @ 0x4
  2639  00EE                     	ds	1
  2640  00EF                     ??_setRF_Main:	
  2641                           
  2642                           ; 0 bytes @ 0x5
  2643  00EF                     	ds	1
  2644                           
  2645                           	psect	cstackCOMMON
  2646  0070                     __pcstackCOMMON:	
  2647  0070                     ?_CC2500_WriteCommand:	
  2648  0070                     ?_RF_Timeout_Counter:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setRF_TimeoutCleared:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_CC2500_WriteByte:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_CC2500_ReadStatus:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_CC2500_ReadByte:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_CC2500_PowerRST:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_CC2500_InitSetREG:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_CC2500_InitPATable:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_CC2500_ClearTXFIFO:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_CC2500_ClearRXFIFO:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_CC2500_FrequencyCabr:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_CC2500_SIDLEMode:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_DlyOff_Initialization:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_DlyOff_Main:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_setDimmerLights_ErrorClose:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_setDimmerLights_Initialization:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_setDimmerLights_Main:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_setDimmerLights_Line:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_setTxData:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_setLED_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_setLED_Main:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_Fosc_Set:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_IO_Set:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_TMR1_Set:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_ADC_Set:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_IOC_Set:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_WDT_Set:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_IOC_ISR:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_TMR1_ISR:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_Timeout_Counter:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_set_TimeoutCleared:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_Flash_Memory_Write:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_Flash_Memory_Modify:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_WDT_Clearing:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_myMain_Initialization:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_Temp_Initialization:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_Load_Initialization:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_Switch_Initialization:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_RF_Initialization:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_getLoad_AD:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_getTemp_AD:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_my_MainTimer:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_Temp_Main:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_Load_Main:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_Switch_Main:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_RF_Main:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_Exception_Main:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_setLoad_AH_AL_Restore:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_setTemp_Initialization:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_setTemp_Main:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_setRF_Initialization:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_setRF_Main:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_RF_RxDisable:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_getRxData:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_setLog_Code:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_setControl_Lights_Table:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_setRFSW_Control:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_setRFSW_AdjControl:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_setRF_DimmerValue:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_setSw_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_setSw_Main:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_Buzzer_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_Buzzer_Main:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_CC2500_TxData:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_CC2500_RxData:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_CC2500_PowerOnInitial:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_DelayOffPointSelect:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_DelayOff_Initialization:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_DelayOff_Main:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_DimmerIntrIOCPointSelect:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ??_DimmerIntrIOCPointSelect:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_DimmerIntrPointSelect:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ??_DimmerIntrPointSelect:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_setDimmerLights_IntrControl:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_DimmerLightsPointSelect:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_DimmerLights_Initialization:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ?_setDimmerLights_SwOn:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ?_setDimmerLights_SwOff:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?_setDimmerLights_AdjOn:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0070                     ?_DimmerLights_Main:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0070                     ?_setDimmerLights_AdjRF:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0070                     ?_LedPointSelect:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0070                     ?_LED_Initialization:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0070                     ?_LED_Main:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0070                     ?_Mcu_Initialization:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0070                     ?_ISR:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0070                     ?_Flash_Memory_Initialization:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0070                     ?_Flash_Memory_Main:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0070                     ?_Flash_Memory_Unlock:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0070                     ?_Flash_Memory_Erasing:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0070                     ?_setMemory_Modify:	
  2922                           ; 0 bytes @ 0x0
  2923                           
  2924  0070                     ?_setMemory_LoopSave:	
  2925                           ; 0 bytes @ 0x0
  2926                           
  2927  0070                     ?_WDT_Main:	
  2928                           ; 0 bytes @ 0x0
  2929                           
  2930  0070                     ?_setRF_Learn:	
  2931                           ; 0 bytes @ 0x0
  2932                           
  2933  0070                     ?_TouchPower:	
  2934                           ; 0 bytes @ 0x0
  2935                           
  2936  0070                     ?_SwPointSelect:	
  2937                           ; 0 bytes @ 0x0
  2938                           
  2939  0070                     ?_DelayTimejudge:	
  2940                           ; 0 bytes @ 0x0
  2941                           
  2942  0070                     ?_getLoad_OK:	
  2943                           ; 1 bytes @ 0x0
  2944                           
  2945  0070                     ?_getMain_All_Error_Status:	
  2946                           ; 1 bytes @ 0x0
  2947                           
  2948  0070                     ?_getMain_LightsStatus:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0070                     ?_getDimmerLights_Allow_Condition:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0070                     ?_setPercentValue:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0070                     ?_getPercentValue:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0070                     ?_Flash_Memory_Read:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0070                     ?_getRF_KeyStatus:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0070                     ?_getSw_KeyStatus:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0070                     ?_getDelayOff_GO:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0070                     ?_getDimmer_LoadGO:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0070                     ?_getDimmerLights_Line:	
  2976                           ; 1 bytes @ 0x0
  2977                           
  2978  0070                     ?_getDimmerLights_Status:	
  2979                           ; 1 bytes @ 0x0
  2980                           
  2981  0070                     ?_getAll_DimmerLights_AdjSw:	
  2982                           ; 1 bytes @ 0x0
  2983                           
  2984  0070                     ?_getDimmer_Load_Status:	
  2985                           ; 1 bytes @ 0x0
  2986                           
  2987  0070                     ?_getMain_Lights_Count:	
  2988                           ; 1 bytes @ 0x0
  2989                           
  2990                           
  2991                           ; 1 bytes @ 0x0
  2992  0070                     	ds	1
  2993  0071                     DimmerIntrIOCPointSelect@lights:	
  2994  0071                     DimmerIntrPointSelect@lights:	
  2995                           ; 1 bytes @ 0x1
  2996                           
  2997                           
  2998                           ; 1 bytes @ 0x1
  2999  0071                     	ds	1
  3000  0072                     ??_setDimmerLights_IntrIOC_GO:	
  3001  0072                     ??_setDimmerLights_IntrControl:	
  3002                           ; 0 bytes @ 0x2
  3003                           
  3004  0072                     setDimmerLights_IntrIOC_GO@lights:	
  3005                           ; 0 bytes @ 0x2
  3006                           
  3007                           
  3008                           ; 1 bytes @ 0x2
  3009  0072                     	ds	1
  3010  0073                     ??_IOC_ISR:	
  3011  0073                     setDimmerLights_IntrControl@lights:	
  3012                           ; 0 bytes @ 0x3
  3013                           
  3014                           
  3015                           ; 1 bytes @ 0x3
  3016  0073                     	ds	1
  3017  0074                     ??_TMR1_ISR:	
  3018  0074                     ??_ISR:	
  3019                           ; 0 bytes @ 0x4
  3020                           
  3021                           
  3022                           ; 0 bytes @ 0x4
  3023  0074                     	ds	1
  3024                           
  3025                           	psect	cstackBANK0
  3026  0020                     __pcstackBANK0:	
  3027  0020                     ??_RF_Timeout_Counter:	
  3028  0020                     ??_setRF_TimeoutCleared:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ??_CC2500_WriteByte:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_CC2500_ReadByte:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ?_DelayTime_1us:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_getLoad_OK:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_getMain_All_Error_Status:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_getMain_LightsStatus:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_setDimmerLights_Line:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_setTxData:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_Fosc_Set:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_IO_Set:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_TMR1_Set:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_ADC_Set:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_IOC_Set:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_WDT_Set:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_Timeout_Counter:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_set_TimeoutCleared:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_Flash_Memory_Read:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ?_setMemory_Data:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_Flash_Memory_Write:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ??_WDT_Clearing:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ??_myMain_Initialization:	
  3092                           ; 0 bytes @ 0x0
  3093                           
  3094  0020                     ??_Temp_Initialization:	
  3095                           ; 0 bytes @ 0x0
  3096                           
  3097  0020                     ??_setLoad_AH_AL_Restore:	
  3098                           ; 0 bytes @ 0x0
  3099                           
  3100  0020                     ??_setTemp_Initialization:	
  3101                           ; 0 bytes @ 0x0
  3102                           
  3103  0020                     ??_setRF_Initialization:	
  3104                           ; 0 bytes @ 0x0
  3105                           
  3106  0020                     ??_getRF_KeyStatus:	
  3107                           ; 0 bytes @ 0x0
  3108                           
  3109  0020                     ??_getSw_KeyStatus:	
  3110                           ; 0 bytes @ 0x0
  3111                           
  3112  0020                     ??_Buzzer_Initialization:	
  3113                           ; 0 bytes @ 0x0
  3114                           
  3115  0020                     ??_Buzzer_Main:	
  3116                           ; 0 bytes @ 0x0
  3117                           
  3118  0020                     ??_DelayOffPointSelect:	
  3119                           ; 0 bytes @ 0x0
  3120                           
  3121  0020                     ??_DimmerLightsPointSelect:	
  3122                           ; 0 bytes @ 0x0
  3123                           
  3124  0020                     ??_getDimmer_LoadGO:	
  3125                           ; 0 bytes @ 0x0
  3126                           
  3127  0020                     ??_getDimmerLights_Line:	
  3128                           ; 0 bytes @ 0x0
  3129                           
  3130  0020                     ??_getDimmer_Load_Status:	
  3131                           ; 0 bytes @ 0x0
  3132                           
  3133  0020                     ??_LedPointSelect:	
  3134                           ; 0 bytes @ 0x0
  3135                           
  3136  0020                     ??_Flash_Memory_Unlock:	
  3137                           ; 0 bytes @ 0x0
  3138                           
  3139  0020                     ??_Flash_Memory_Erasing:	
  3140                           ; 0 bytes @ 0x0
  3141                           
  3142  0020                     ??_setMemory_Modify:	
  3143                           ; 0 bytes @ 0x0
  3144                           
  3145  0020                     ??_setMemory_LoopSave:	
  3146                           ; 0 bytes @ 0x0
  3147                           
  3148  0020                     ??_WDT_Main:	
  3149                           ; 0 bytes @ 0x0
  3150                           
  3151  0020                     ??_getMain_Lights_Count:	
  3152                           ; 0 bytes @ 0x0
  3153                           
  3154  0020                     ??_setRF_Learn:	
  3155                           ; 0 bytes @ 0x0
  3156                           
  3157  0020                     ??_TouchPower:	
  3158                           ; 0 bytes @ 0x0
  3159                           
  3160  0020                     ??_SwPointSelect:	
  3161                           ; 0 bytes @ 0x0
  3162                           
  3163  0020                     ?___bmul:	
  3164                           ; 0 bytes @ 0x0
  3165                           
  3166  0020                     ?_getBuz_GO:	
  3167                           ; 1 bytes @ 0x0
  3168                           
  3169  0020                     ?_getAD:	
  3170                           ; 2 bytes @ 0x0
  3171                           
  3172  0020                     ?___wmul:	
  3173                           ; 2 bytes @ 0x0
  3174                           
  3175  0020                     ?___awdiv:	
  3176                           ; 2 bytes @ 0x0
  3177                           
  3178  0020                     ?___lwdiv:	
  3179                           ; 2 bytes @ 0x0
  3180                           
  3181  0020                     ?___ftpack:	
  3182                           ; 2 bytes @ 0x0
  3183                           
  3184  0020                     getDimmer_LoadGO@loadgo:	
  3185                           ; 3 bytes @ 0x0
  3186                           
  3187  0020                     setDimmerLights_Line@lights:	
  3188                           ; 1 bytes @ 0x0
  3189                           
  3190  0020                     getDimmer_Load_Status@status:	
  3191                           ; 1 bytes @ 0x0
  3192                           
  3193  0020                     getAD@adcon1:	
  3194                           ; 1 bytes @ 0x0
  3195                           
  3196  0020                     setMemory_Data@data:	
  3197                           ; 1 bytes @ 0x0
  3198                           
  3199  0020                     getMain_LightsStatus@status:	
  3200                           ; 1 bytes @ 0x0
  3201                           
  3202  0020                     getMain_Lights_Count@count:	
  3203                           ; 1 bytes @ 0x0
  3204                           
  3205  0020                     getLoad_OK@ok:	
  3206                           ; 1 bytes @ 0x0
  3207                           
  3208  0020                     SwPointSelect@sw:	
  3209                           ; 1 bytes @ 0x0
  3210                           
  3211  0020                     ___bmul@multiplicand:	
  3212                           ; 1 bytes @ 0x0
  3213                           
  3214  0020                     DelayTime_1us@count:	
  3215                           ; 1 bytes @ 0x0
  3216                           
  3217  0020                     ___wmul@multiplier:	
  3218                           ; 2 bytes @ 0x0
  3219                           
  3220  0020                     ___awdiv@divisor:	
  3221                           ; 2 bytes @ 0x0
  3222                           
  3223  0020                     ___lwdiv@divisor:	
  3224                           ; 2 bytes @ 0x0
  3225                           
  3226  0020                     ___ftpack@arg:	
  3227                           ; 2 bytes @ 0x0
  3228                           
  3229                           
  3230                           ; 3 bytes @ 0x0
  3231  0020                     	ds	1
  3232  0021                     ??_getDimmerLights_Allow_Condition:	
  3233  0021                     ??_setMemory_Data:	
  3234                           ; 0 bytes @ 0x1
  3235                           
  3236  0021                     ??_RF_Initialization:	
  3237                           ; 0 bytes @ 0x1
  3238                           
  3239  0021                     ??_Mcu_Initialization:	
  3240                           ; 0 bytes @ 0x1
  3241                           
  3242  0021                     ??___bmul:	
  3243                           ; 0 bytes @ 0x1
  3244                           
  3245  0021                     CC2500_WriteByte@loop_a:	
  3246                           ; 0 bytes @ 0x1
  3247                           
  3248  0021                     CC2500_ReadByte@loop_b:	
  3249                           ; 1 bytes @ 0x1
  3250                           
  3251  0021                     DelayOffPointSelect@sw:	
  3252                           ; 1 bytes @ 0x1
  3253                           
  3254  0021                     DimmerLightsPointSelect@lights:	
  3255                           ; 1 bytes @ 0x1
  3256                           
  3257  0021                     getDimmerLights_Line@line:	
  3258                           ; 1 bytes @ 0x1
  3259                           
  3260  0021                     LedPointSelect@led:	
  3261                           ; 1 bytes @ 0x1
  3262                           
  3263  0021                     Flash_Memory_Read@i:	
  3264                           ; 1 bytes @ 0x1
  3265                           
  3266  0021                     Flash_Memory_Write@i:	
  3267                           ; 1 bytes @ 0x1
  3268                           
  3269  0021                     setMemory_Modify@command:	
  3270                           ; 1 bytes @ 0x1
  3271                           
  3272  0021                     setMemory_LoopSave@command:	
  3273                           ; 1 bytes @ 0x1
  3274                           
  3275  0021                     getMain_Lights_Count@status1:	
  3276                           ; 1 bytes @ 0x1
  3277                           
  3278  0021                     setLoad_AH_AL_Restore@i:	
  3279                           ; 1 bytes @ 0x1
  3280                           
  3281  0021                     setRF_Learn@command:	
  3282                           ; 1 bytes @ 0x1
  3283                           
  3284  0021                     getRF_KeyStatus@key:	
  3285                           ; 1 bytes @ 0x1
  3286                           
  3287  0021                     _getSw_KeyStatus$6297:	
  3288                           ; 1 bytes @ 0x1
  3289                           
  3290  0021                     _getMain_All_Error_Status$3623:	
  3291                           ; 1 bytes @ 0x1
  3292                           
  3293                           
  3294                           ; 2 bytes @ 0x1
  3295  0021                     	ds	1
  3296  0022                     ??_CC2500_WriteCommand:	
  3297  0022                     ??_CC2500_ReadStatus:	
  3298                           ; 0 bytes @ 0x2
  3299                           
  3300  0022                     ??_DelayTime_1us:	
  3301                           ; 0 bytes @ 0x2
  3302                           
  3303  0022                     ?_CC2500_WriteREG:	
  3304                           ; 0 bytes @ 0x2
  3305                           
  3306  0022                     ??_DlyOff_Initialization:	
  3307                           ; 0 bytes @ 0x2
  3308                           
  3309  0022                     ??_setDimmerLights_Initialization:	
  3310                           ; 0 bytes @ 0x2
  3311                           
  3312  0022                     ?_setLED:	
  3313                           ; 0 bytes @ 0x2
  3314                           
  3315  0022                     ??_setLED_Main:	
  3316                           ; 0 bytes @ 0x2
  3317                           
  3318  0022                     ??_Load_Initialization:	
  3319                           ; 0 bytes @ 0x2
  3320                           
  3321  0022                     ??_getBuz_GO:	
  3322                           ; 0 bytes @ 0x2
  3323                           
  3324  0022                     ??_getDelayOff_GO:	
  3325                           ; 0 bytes @ 0x2
  3326                           
  3327  0022                     ??_setDimmerLights_AdjOn:	
  3328                           ; 0 bytes @ 0x2
  3329                           
  3330  0022                     ??_getDimmerLights_Status:	
  3331                           ; 0 bytes @ 0x2
  3332                           
  3333  0022                     ??_getAll_DimmerLights_AdjSw:	
  3334                           ; 0 bytes @ 0x2
  3335                           
  3336  0022                     CC2500_WriteREG@value:	
  3337                           ; 0 bytes @ 0x2
  3338                           
  3339  0022                     DlyOff_Initialization@sw:	
  3340                           ; 1 bytes @ 0x2
  3341                           
  3342  0022                     getDelayOff_GO@sw:	
  3343                           ; 1 bytes @ 0x2
  3344                           
  3345  0022                     setDimmerLights_AdjOn@sw:	
  3346                           ; 1 bytes @ 0x2
  3347                           
  3348  0022                     _getDimmerLights_Allow_Condition$2341:	
  3349                           ; 1 bytes @ 0x2
  3350                           
  3351  0022                     getDimmerLights_Status@lights:	
  3352                           ; 1 bytes @ 0x2
  3353                           
  3354  0022                     setLED@command:	
  3355                           ; 1 bytes @ 0x2
  3356                           
  3357  0022                     Flash_Memory_Read@address:	
  3358                           ; 1 bytes @ 0x2
  3359                           
  3360  0022                     setMemory_Data@address:	
  3361                           ; 1 bytes @ 0x2
  3362                           
  3363  0022                     getMain_Lights_Count@status2:	
  3364                           ; 1 bytes @ 0x2
  3365                           
  3366  0022                     _getRF_KeyStatus$5304:	
  3367                           ; 1 bytes @ 0x2
  3368                           
  3369  0022                     _getSw_KeyStatus$6298:	
  3370                           ; 1 bytes @ 0x2
  3371                           
  3372  0022                     ___bmul@product:	
  3373                           ; 1 bytes @ 0x2
  3374                           
  3375  0022                     DelayTime_1us@i:	
  3376                           ; 1 bytes @ 0x2
  3377                           
  3378  0022                     ___wmul@multiplicand:	
  3379                           ; 2 bytes @ 0x2
  3380                           
  3381  0022                     ___awdiv@dividend:	
  3382                           ; 2 bytes @ 0x2
  3383                           
  3384  0022                     ___lwdiv@dividend:	
  3385                           ; 2 bytes @ 0x2
  3386                           
  3387                           
  3388                           ; 2 bytes @ 0x2
  3389  0022                     	ds	1
  3390  0023                     ??_CC2500_WriteREG:	
  3391  0023                     ??_setLED:	
  3392                           ; 0 bytes @ 0x3
  3393                           
  3394  0023                     ??_DelayOff_Initialization:	
  3395                           ; 0 bytes @ 0x3
  3396                           
  3397  0023                     ??_getAD:	
  3398                           ; 0 bytes @ 0x3
  3399                           
  3400  0023                     CC2500_WriteCommand@command:	
  3401                           ; 0 bytes @ 0x3
  3402                           
  3403  0023                     CC2500_ReadStatus@status_addr:	
  3404                           ; 1 bytes @ 0x3
  3405                           
  3406  0023                     getDelayOff_GO@go:	
  3407                           ; 1 bytes @ 0x3
  3408                           
  3409  0023                     setDimmerLights_Initialization@lights:	
  3410                           ; 1 bytes @ 0x3
  3411                           
  3412  0023                     _getDimmerLights_Allow_Condition$2342:	
  3413                           ; 1 bytes @ 0x3
  3414                           
  3415  0023                     getDimmerLights_Status@status:	
  3416                           ; 1 bytes @ 0x3
  3417                           
  3418  0023                     getAll_DimmerLights_AdjSw@count:	
  3419                           ; 1 bytes @ 0x3
  3420                           
  3421  0023                     setLED@led:	
  3422                           ; 1 bytes @ 0x3
  3423                           
  3424  0023                     getAD@adcon0:	
  3425                           ; 1 bytes @ 0x3
  3426                           
  3427  0023                     Flash_Memory_Read@ret:	
  3428                           ; 1 bytes @ 0x3
  3429                           
  3430  0023                     getSw_KeyStatus@status:	
  3431                           ; 1 bytes @ 0x3
  3432                           
  3433  0023                     ___bmul@multiplier:	
  3434                           ; 1 bytes @ 0x3
  3435                           
  3436  0023                     ___ftpack@exp:	
  3437                           ; 1 bytes @ 0x3
  3438                           
  3439  0023                     _getMain_All_Error_Status$3624:	
  3440                           ; 1 bytes @ 0x3
  3441                           
  3442                           
  3443                           ; 2 bytes @ 0x3
  3444  0023                     	ds	1
  3445  0024                     ??_CC2500_ClearTXFIFO:	
  3446  0024                     ??_CC2500_ClearRXFIFO:	
  3447                           ; 0 bytes @ 0x4
  3448                           
  3449  0024                     ??_CC2500_SIDLEMode:	
  3450                           ; 0 bytes @ 0x4
  3451                           
  3452  0024                     ??_DelayTimejudge:	
  3453                           ; 0 bytes @ 0x4
  3454                           
  3455  0024                     ??_setLED_Initialization:	
  3456                           ; 0 bytes @ 0x4
  3457                           
  3458  0024                     ??_Flash_Memory_Modify:	
  3459                           ; 0 bytes @ 0x4
  3460                           
  3461  0024                     ??_getLoad_AD:	
  3462                           ; 0 bytes @ 0x4
  3463                           
  3464  0024                     ??_getTemp_AD:	
  3465                           ; 0 bytes @ 0x4
  3466                           
  3467  0024                     ??_RF_RxDisable:	
  3468                           ; 0 bytes @ 0x4
  3469                           
  3470  0024                     ??_setSw_Initialization:	
  3471                           ; 0 bytes @ 0x4
  3472                           
  3473  0024                     ??_CC2500_TxData:	
  3474                           ; 0 bytes @ 0x4
  3475                           
  3476  0024                     ??_CC2500_RxData:	
  3477                           ; 0 bytes @ 0x4
  3478                           
  3479  0024                     ??_DimmerLights_Initialization:	
  3480                           ; 0 bytes @ 0x4
  3481                           
  3482  0024                     ??___wmul:	
  3483                           ; 0 bytes @ 0x4
  3484                           
  3485  0024                     ??___awdiv:	
  3486                           ; 0 bytes @ 0x4
  3487                           
  3488  0024                     ??___lwdiv:	
  3489                           ; 0 bytes @ 0x4
  3490                           
  3491  0024                     CC2500_WriteREG@w_addr:	
  3492                           ; 0 bytes @ 0x4
  3493                           
  3494  0024                     _getDimmerLights_Allow_Condition$2343:	
  3495                           ; 1 bytes @ 0x4
  3496                           
  3497  0024                     setLED_Initialization@led:	
  3498                           ; 1 bytes @ 0x4
  3499                           
  3500  0024                     setLED_Main@led:	
  3501                           ; 1 bytes @ 0x4
  3502                           
  3503  0024                     setSw_Initialization@sw:	
  3504                           ; 1 bytes @ 0x4
  3505                           
  3506  0024                     getSw_KeyStatus@sw:	
  3507                           ; 1 bytes @ 0x4
  3508                           
  3509  0024                     ___ftpack@sign:	
  3510                           ; 1 bytes @ 0x4
  3511                           
  3512  0024                     getBuz_GO@i:	
  3513                           ; 1 bytes @ 0x4
  3514                           
  3515  0024                     DelayTime_1us@j:	
  3516                           ; 2 bytes @ 0x4
  3517                           
  3518  0024                     getAll_DimmerLights_AdjSw@i:	
  3519                           ; 2 bytes @ 0x4
  3520                           
  3521  0024                     ___wmul@product:	
  3522                           ; 2 bytes @ 0x4
  3523                           
  3524                           
  3525                           ; 2 bytes @ 0x4
  3526  0024                     	ds	1
  3527  0025                     ??_CC2500_InitSetREG:	
  3528  0025                     ??_CC2500_InitPATable:	
  3529                           ; 0 bytes @ 0x5
  3530                           
  3531  0025                     ??_Switch_Initialization:	
  3532                           ; 0 bytes @ 0x5
  3533                           
  3534  0025                     ??___ftpack:	
  3535                           ; 0 bytes @ 0x5
  3536                           
  3537  0025                     ??_LED_Initialization:	
  3538                           ; 0 bytes @ 0x5
  3539                           
  3540  0025                     ??_LED_Main:	
  3541                           ; 0 bytes @ 0x5
  3542                           
  3543  0025                     CC2500_TxData@loop_e:	
  3544                           ; 0 bytes @ 0x5
  3545                           
  3546  0025                     CC2500_RxData@loop_f:	
  3547                           ; 1 bytes @ 0x5
  3548                           
  3549  0025                     getDimmerLights_Allow_Condition@lights:	
  3550                           ; 1 bytes @ 0x5
  3551                           
  3552  0025                     Flash_Memory_Modify@i:	
  3553                           ; 1 bytes @ 0x5
  3554                           
  3555  0025                     getMain_All_Error_Status@command:	
  3556                           ; 1 bytes @ 0x5
  3557                           
  3558  0025                     getTemp_AD@channel:	
  3559                           ; 1 bytes @ 0x5
  3560                           
  3561  0025                     ___awdiv@counter:	
  3562                           ; 1 bytes @ 0x5
  3563                           
  3564  0025                     ___lwdiv@counter:	
  3565                           ; 1 bytes @ 0x5
  3566                           
  3567                           
  3568                           ; 1 bytes @ 0x5
  3569  0025                     	ds	1
  3570  0026                     ??_CC2500_PowerRST:	
  3571  0026                     ??_CC2500_FrequencyCabr:	
  3572                           ; 0 bytes @ 0x6
  3573                           
  3574  0026                     ??_Flash_Memory_Main:	
  3575                           ; 0 bytes @ 0x6
  3576                           
  3577  0026                     CC2500_InitSetREG@temp1:	
  3578                           ; 0 bytes @ 0x6
  3579                           
  3580  0026                     CC2500_InitPATable@temp:	
  3581                           ; 1 bytes @ 0x6
  3582                           
  3583  0026                     DelayTimejudge@i:	
  3584                           ; 1 bytes @ 0x6
  3585                           
  3586  0026                     getDimmerLights_Allow_Condition@allow:	
  3587                           ; 1 bytes @ 0x6
  3588                           
  3589  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3590                           ; 1 bytes @ 0x6
  3591                           
  3592  0026                     getMain_All_Error_Status@status:	
  3593                           ; 1 bytes @ 0x6
  3594                           
  3595  0026                     getLoad_AD@channel:	
  3596                           ; 1 bytes @ 0x6
  3597                           
  3598  0026                     ___awdiv@sign:	
  3599                           ; 1 bytes @ 0x6
  3600                           
  3601  0026                     ___lwdiv@quotient:	
  3602                           ; 1 bytes @ 0x6
  3603                           
  3604                           
  3605                           ; 2 bytes @ 0x6
  3606  0026                     	ds	1
  3607  0027                     CC2500_InitSetREG@temp2:	
  3608  0027                     CC2500_InitPATable@loop_d:	
  3609                           ; 1 bytes @ 0x7
  3610                           
  3611  0027                     DelayTimejudge@j:	
  3612                           ; 1 bytes @ 0x7
  3613                           
  3614  0027                     getLoad_AD@k:	
  3615                           ; 1 bytes @ 0x7
  3616                           
  3617  0027                     ___awdiv@quotient:	
  3618                           ; 1 bytes @ 0x7
  3619                           
  3620                           
  3621                           ; 2 bytes @ 0x7
  3622  0027                     	ds	1
  3623  0028                     ??_Load_Main:	
  3624  0028                     ?___awtoft:	
  3625                           ; 0 bytes @ 0x8
  3626                           
  3627  0028                     CC2500_InitSetREG@loop_c:	
  3628                           ; 3 bytes @ 0x8
  3629                           
  3630  0028                     DelayTimejudge@k:	
  3631                           ; 1 bytes @ 0x8
  3632                           
  3633  0028                     getLoad_AD@j:	
  3634                           ; 1 bytes @ 0x8
  3635                           
  3636  0028                     ___awtoft@c:	
  3637                           ; 1 bytes @ 0x8
  3638                           
  3639                           
  3640                           ; 2 bytes @ 0x8
  3641  0028                     	ds	1
  3642  0029                     ?_setBuz:	
  3643  0029                     ??_CC2500_PowerOnInitial:	
  3644                           ; 0 bytes @ 0x9
  3645                           
  3646  0029                     DelayTimejudge@value:	
  3647                           ; 0 bytes @ 0x9
  3648                           
  3649  0029                     getLoad_AD@i:	
  3650                           ; 1 bytes @ 0x9
  3651                           
  3652  0029                     setBuz@time:	
  3653                           ; 1 bytes @ 0x9
  3654                           
  3655                           
  3656                           ; 2 bytes @ 0x9
  3657  0029                     	ds	1
  3658  002A                     Load_Main@error:	
  3659                           
  3660                           ; 1 bytes @ 0xA
  3661  002A                     	ds	1
  3662  002B                     ??_setBuz:	
  3663  002B                     ??___awtoft:	
  3664                           ; 0 bytes @ 0xB
  3665                           
  3666  002B                     Load_Main@Load_Status:	
  3667                           ; 0 bytes @ 0xB
  3668                           
  3669                           
  3670                           ; 1 bytes @ 0xB
  3671  002B                     	ds	1
  3672  002C                     setBuz@count:	
  3673  002C                     Load_Main@i:	
  3674                           ; 1 bytes @ 0xC
  3675                           
  3676                           
  3677                           ; 2 bytes @ 0xC
  3678  002C                     	ds	1
  3679  002D                     ??_my_MainTimer:	
  3680  002D                     ??_setDimmerLights_SwOn:	
  3681                           ; 0 bytes @ 0xD
  3682                           
  3683  002D                     ___awtoft@sign:	
  3684                           ; 0 bytes @ 0xD
  3685                           
  3686                           
  3687                           ; 1 bytes @ 0xD
  3688  002D                     	ds	1
  3689  002E                     ?___ftdiv:	
  3690  002E                     ?___ftmul:	
  3691                           ; 3 bytes @ 0xE
  3692                           
  3693  002E                     _setDimmerLights_SwOn$2322:	
  3694                           ; 3 bytes @ 0xE
  3695                           
  3696  002E                     ___ftdiv@f2:	
  3697                           ; 1 bytes @ 0xE
  3698                           
  3699  002E                     ___ftmul@f1:	
  3700                           ; 3 bytes @ 0xE
  3701                           
  3702                           
  3703                           ; 3 bytes @ 0xE
  3704  002E                     	ds	1
  3705  002F                     _setDimmerLights_SwOn$2323:	
  3706                           
  3707                           ; 1 bytes @ 0xF
  3708  002F                     	ds	1
  3709  0030                     setDimmerLights_SwOn@idle:	
  3710                           
  3711                           ; 1 bytes @ 0x10
  3712  0030                     	ds	1
  3713  0031                     setDimmerLights_SwOn@sw:	
  3714  0031                     ___ftdiv@f1:	
  3715                           ; 1 bytes @ 0x11
  3716                           
  3717  0031                     ___ftmul@f2:	
  3718                           ; 3 bytes @ 0x11
  3719                           
  3720                           
  3721                           ; 3 bytes @ 0x11
  3722  0031                     	ds	3
  3723  0034                     ??___ftdiv:	
  3724  0034                     ??___ftmul:	
  3725                           ; 0 bytes @ 0x14
  3726                           
  3727                           
  3728                           ; 0 bytes @ 0x14
  3729  0034                     	ds	4
  3730  0038                     ___ftdiv@cntr:	
  3731  0038                     ___ftmul@exp:	
  3732                           ; 1 bytes @ 0x18
  3733                           
  3734                           
  3735                           ; 1 bytes @ 0x18
  3736  0038                     	ds	1
  3737  0039                     ___ftdiv@f3:	
  3738  0039                     ___ftmul@f3_as_product:	
  3739                           ; 3 bytes @ 0x19
  3740                           
  3741                           
  3742                           ; 3 bytes @ 0x19
  3743  0039                     	ds	3
  3744  003C                     ___ftdiv@exp:	
  3745  003C                     ___ftmul@cntr:	
  3746                           ; 1 bytes @ 0x1C
  3747                           
  3748                           
  3749                           ; 1 bytes @ 0x1C
  3750  003C                     	ds	1
  3751  003D                     ___ftdiv@sign:	
  3752  003D                     ___ftmul@sign:	
  3753                           ; 1 bytes @ 0x1D
  3754                           
  3755                           
  3756                           ; 1 bytes @ 0x1D
  3757  003D                     	ds	1
  3758  003E                     ?___ftneg:	
  3759  003E                     ___ftneg@f1:	
  3760                           ; 3 bytes @ 0x1E
  3761                           
  3762                           
  3763                           ; 3 bytes @ 0x1E
  3764  003E                     	ds	3
  3765  0041                     ??___ftneg:	
  3766  0041                     ?___ftadd:	
  3767                           ; 0 bytes @ 0x21
  3768                           
  3769  0041                     ___ftadd@f1:	
  3770                           ; 3 bytes @ 0x21
  3771                           
  3772                           
  3773                           ; 3 bytes @ 0x21
  3774  0041                     	ds	3
  3775  0044                     ___ftadd@f2:	
  3776                           
  3777                           ; 3 bytes @ 0x24
  3778  0044                     	ds	3
  3779  0047                     ??___ftadd:	
  3780                           
  3781                           ; 0 bytes @ 0x27
  3782  0047                     	ds	4
  3783  004B                     ___ftadd@sign:	
  3784                           
  3785                           ; 1 bytes @ 0x2B
  3786  004B                     	ds	1
  3787  004C                     ___ftadd@exp2:	
  3788                           
  3789                           ; 1 bytes @ 0x2C
  3790  004C                     	ds	1
  3791  004D                     ___ftadd@exp1:	
  3792                           
  3793                           ; 1 bytes @ 0x2D
  3794  004D                     	ds	1
  3795  004E                     ?___fttol:	
  3796  004E                     ___fttol@f1:	
  3797                           ; 4 bytes @ 0x2E
  3798                           
  3799                           
  3800                           ; 3 bytes @ 0x2E
  3801  004E                     	ds	4
  3802  0052                     ??___fttol:	
  3803                           
  3804                           ; 0 bytes @ 0x32
  3805  0052                     	ds	4
  3806  0056                     ___fttol@sign1:	
  3807                           
  3808                           ; 1 bytes @ 0x36
  3809  0056                     	ds	1
  3810  0057                     ___fttol@lval:	
  3811                           
  3812                           ; 4 bytes @ 0x37
  3813  0057                     	ds	4
  3814  005B                     ___fttol@exp1:	
  3815                           
  3816                           ; 1 bytes @ 0x3B
  3817  005B                     	ds	1
  3818  005C                     ??_setPercentValue:	
  3819  005C                     ??_getPercentValue:	
  3820                           ; 0 bytes @ 0x3C
  3821                           
  3822                           
  3823                           ; 0 bytes @ 0x3C
  3824  005C                     	ds	2
  3825  005E                     getPercentValue@value:	
  3826  005E                     setPercentValue@value:	
  3827                           ; 1 bytes @ 0x3E
  3828                           
  3829                           
  3830                           ; 1 bytes @ 0x3E
  3831  005E                     	ds	1
  3832  005F                     getPercentValue@i:	
  3833  005F                     setPercentValue@i:	
  3834                           ; 3 bytes @ 0x3F
  3835                           
  3836                           
  3837                           ; 3 bytes @ 0x3F
  3838  005F                     	ds	3
  3839  0062                     ?_setProductData:	
  3840  0062                     ??_setDimmerLights_AdjRF:	
  3841                           ; 0 bytes @ 0x42
  3842                           
  3843  0062                     ??_Flash_Memory_Initialization:	
  3844                           ; 0 bytes @ 0x42
  3845                           
  3846  0062                     setProductData@value:	
  3847                           ; 0 bytes @ 0x42
  3848                           
  3849                           
  3850                           ; 1 bytes @ 0x42
  3851  0062                     	ds	1
  3852  0063                     ??_setProductData:	
  3853  0063                     setDimmerLights_AdjRF@lights:	
  3854                           ; 0 bytes @ 0x43
  3855                           
  3856  0063                     Flash_Memory_Initialization@i:	
  3857                           ; 1 bytes @ 0x43
  3858                           
  3859                           
  3860                           ; 1 bytes @ 0x43
  3861  0063                     	ds	2
  3862  0065                     setProductData@address:	
  3863                           
  3864                           ; 1 bytes @ 0x45
  3865  0065                     	ds	1
  3866  0066                     ?_setRF_DimmerLights:	
  3867  0066                     ??_setTemp_Main:	
  3868                           ; 0 bytes @ 0x46
  3869                           
  3870  0066                     ??_setLog_Code:	
  3871                           ; 0 bytes @ 0x46
  3872                           
  3873  0066                     ??_setRF_DimmerValue:	
  3874                           ; 0 bytes @ 0x46
  3875                           
  3876  0066                     ?_setDelayOff_GO:	
  3877                           ; 0 bytes @ 0x46
  3878                           
  3879  0066                     setDelayOff_GO@command:	
  3880                           ; 0 bytes @ 0x46
  3881                           
  3882  0066                     setRF_DimmerLights@on:	
  3883                           ; 1 bytes @ 0x46
  3884                           
  3885                           
  3886                           ; 1 bytes @ 0x46
  3887  0066                     	ds	1
  3888  0067                     ??_setRF_DimmerLights:	
  3889  0067                     setDelayOff_GO@value:	
  3890                           ; 0 bytes @ 0x47
  3891                           
  3892  0067                     setRF_DimmerValue@lights:	
  3893                           ; 1 bytes @ 0x47
  3894                           
  3895                           
  3896                           ; 1 bytes @ 0x47
  3897  0067                     	ds	1
  3898  0068                     ??_setRFSW_AdjControl:	
  3899  0068                     ??_setDelayOff_GO:	
  3900                           ; 0 bytes @ 0x48
  3901                           
  3902  0068                     setTemp_Main@error:	
  3903                           ; 0 bytes @ 0x48
  3904                           
  3905                           
  3906                           ; 1 bytes @ 0x48
  3907  0068                     	ds	1
  3908  0069                     ??_Temp_Main:	
  3909  0069                     setDelayOff_GO@sw:	
  3910                           ; 0 bytes @ 0x49
  3911                           
  3912  0069                     setRF_DimmerLights@status:	
  3913                           ; 1 bytes @ 0x49
  3914                           
  3915                           
  3916                           ; 1 bytes @ 0x49
  3917  0069                     	ds	1
  3918  006A                     ??_setDimmerLights_SwOff:	
  3919  006A                     setDimmerLights_SwOff@sw:	
  3920                           ; 0 bytes @ 0x4A
  3921                           
  3922  006A                     setRFSW_AdjControl@status:	
  3923                           ; 1 bytes @ 0x4A
  3924                           
  3925  006A                     setRF_DimmerLights@lights:	
  3926                           ; 1 bytes @ 0x4A
  3927                           
  3928                           
  3929                           ; 1 bytes @ 0x4A
  3930  006A                     	ds	1
  3931  006B                     ??_setDimmerLights_ErrorClose:	
  3932  006B                     ?_setDimmerLights:	
  3933                           ; 0 bytes @ 0x4B
  3934                           
  3935  006B                     ?_setDimmerLights_Adj:	
  3936                           ; 0 bytes @ 0x4B
  3937                           
  3938  006B                     ??_Exception_Main:	
  3939                           ; 0 bytes @ 0x4B
  3940                           
  3941  006B                     ??_setRFSW_Control:	
  3942                           ; 0 bytes @ 0x4B
  3943                           
  3944  006B                     ??_setSw_Main:	
  3945                           ; 0 bytes @ 0x4B
  3946                           
  3947  006B                     setDimmerLights@status:	
  3948                           ; 0 bytes @ 0x4B
  3949                           
  3950  006B                     setDimmerLights_Adj@status:	
  3951                           ; 1 bytes @ 0x4B
  3952                           
  3953  006B                     setRFSW_AdjControl@sw:	
  3954                           ; 1 bytes @ 0x4B
  3955                           
  3956                           
  3957                           ; 1 bytes @ 0x4B
  3958  006B                     	ds	1
  3959  006C                     ??_DlyOff_Main:	
  3960  006C                     ??_setDimmerLights:	
  3961                           ; 0 bytes @ 0x4C
  3962                           
  3963  006C                     ??_setDimmerLights_Adj:	
  3964                           ; 0 bytes @ 0x4C
  3965                           
  3966  006C                     setRFSW_Control@status:	
  3967                           ; 0 bytes @ 0x4C
  3968                           
  3969                           
  3970                           ; 1 bytes @ 0x4C
  3971  006C                     	ds	1
  3972  006D                     setDimmerLights@lights:	
  3973  006D                     setDimmerLights_Adj@lights:	
  3974                           ; 1 bytes @ 0x4D
  3975                           
  3976  006D                     setRFSW_Control@sw:	
  3977                           ; 1 bytes @ 0x4D
  3978                           
  3979  006D                     setSw_Main@sw:	
  3980                           ; 1 bytes @ 0x4D
  3981                           
  3982                           
  3983                           ; 1 bytes @ 0x4D
  3984  006D                     	ds	1
  3985  006E                     ??_setDimmerLights_Main:	
  3986  006E                     ??_Switch_Main:	
  3987                           ; 0 bytes @ 0x4E
  3988                           
  3989  006E                     ??_getRxData:	
  3990                           ; 0 bytes @ 0x4E
  3991                           
  3992  006E                     ??_setControl_Lights_Table:	
  3993                           ; 0 bytes @ 0x4E
  3994                           
  3995  006E                     DlyOff_Main@sw:	
  3996                           ; 0 bytes @ 0x4E
  3997                           
  3998  006E                     setDimmerLights_Main@lights:	
  3999                           ; 1 bytes @ 0x4E
  4000                           
  4001                           
  4002                           ; 1 bytes @ 0x4E
  4003  006E                     	ds	1
  4004  006F                     ??_RF_Main:	
  4005  006F                     ??_DelayOff_Main:	
  4006                           ; 0 bytes @ 0x4F
  4007                           
  4008  006F                     ??_DimmerLights_Main:	
  4009                           ; 0 bytes @ 0x4F
  4010                           
  4011  006F                     ??_main:	
  4012                           ; 0 bytes @ 0x4F
  4013                           
  4014                           
  4015                           	psect	maintext
  4016  17A5                     __pmaintext:	
  4017                           ; 0 bytes @ 0x4F
  4018 ;;
  4019 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4020 ;;
  4021 ;; *************** function _main *****************
  4022 ;; Defined at:
  4023 ;;		line 7 in file "../src/Main_B1.c"
  4024 ;; Parameters:    Size  Location     Type
  4025 ;;  argc            2    0[BANK5 ] int 
  4026 ;;  argv            2    2[BANK5 ] PTR PTR unsigned char 
  4027 ;; Auto vars:     Size  Location     Type
  4028 ;;		None
  4029 ;; Return value:  Size  Location     Type
  4030 ;;                  2    0[BANK5 ] int 
  4031 ;; Registers used:
  4032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4033 ;; Tracked objects:
  4034 ;;		On entry : 17F/0
  4035 ;;		On exit  : 0/0
  4036 ;;		Unchanged: 0/0
  4037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4038 ;;      Params:         0       0       0       0       0       0       4       0       0       0       0       0       
      +0       0
  4039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4041 ;;      Totals:         0       0       0       0       0       0       4       0       0       0       0       0       
      +0       0
  4042 ;;Total ram usage:        4 bytes
  4043 ;; Hardware stack levels required when called:   14
  4044 ;; This function calls:
  4045 ;;		_Buzzer_Initialization
  4046 ;;		_Buzzer_Main
  4047 ;;		_CC2500_PowerOnInitial
  4048 ;;		_DelayOff_Initialization
  4049 ;;		_DelayOff_Main
  4050 ;;		_DimmerLights_Initialization
  4051 ;;		_DimmerLights_Main
  4052 ;;		_Exception_Main
  4053 ;;		_Flash_Memory_Initialization
  4054 ;;		_Flash_Memory_Main
  4055 ;;		_LED_Initialization
  4056 ;;		_LED_Main
  4057 ;;		_Load_Initialization
  4058 ;;		_Load_Main
  4059 ;;		_Mcu_Initialization
  4060 ;;		_RF_Initialization
  4061 ;;		_RF_Main
  4062 ;;		_Switch_Initialization
  4063 ;;		_Switch_Main
  4064 ;;		_Temp_Initialization
  4065 ;;		_Temp_Main
  4066 ;;		_WDT_Main
  4067 ;;		_getLoad_AD
  4068 ;;		_getTemp_AD
  4069 ;;		_myMain_Initialization
  4070 ;;		_my_MainTimer
  4071 ;; This function is called by:
  4072 ;;		Startup code after reset
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           
  4077                           ;psect for function _main
  4078  17A5                     _main:	
  4079                           
  4080                           ;Main_B1.c: 8: myMain_Initialization();
  4081                           
  4082                           ;incstack = 0
  4083                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4084  17A5  319B  23D5  3197   	fcall	_myMain_Initialization
  4085                           
  4086                           ;Main_B1.c: 9: Mcu_Initialization();
  4087  17A8  319C  244B  3197   	fcall	_Mcu_Initialization
  4088                           
  4089                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4090  17AB  3186  2643  3197   	fcall	_Flash_Memory_Initialization
  4091                           
  4092                           ;Main_B1.c: 11: LED_Initialization();
  4093  17AE  319B  2363  3197   	fcall	_LED_Initialization
  4094                           
  4095                           ;Main_B1.c: 12: Buzzer_Initialization();
  4096  17B1  319A  22AF  3197   	fcall	_Buzzer_Initialization
  4097                           
  4098                           ;Main_B1.c: 14: ;;
  4099                           ;Main_B1.c: 15: Temp_Initialization();
  4100  17B4  319A  22BB  3197   	fcall	_Temp_Initialization
  4101                           
  4102                           ;Main_B1.c: 16: Load_Initialization();
  4103  17B7  319A  22B2  3197   	fcall	_Load_Initialization
  4104                           
  4105                           ;Main_B1.c: 17: ;;
  4106                           ;Main_B1.c: 18: DelayOff_Initialization();
  4107  17BA  319A  22F3  3197   	fcall	_DelayOff_Initialization
  4108                           
  4109                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4110  17BD  319D  2509  3197   	fcall	_DimmerLights_Initialization
  4111                           
  4112                           ;Main_B1.c: 21: ;;
  4113                           ;Main_B1.c: 22: ;;
  4114                           ;Main_B1.c: 23: ;;
  4115                           ;Main_B1.c: 24: Switch_Initialization();
  4116  17C0  319B  23AB  3197   	fcall	_Switch_Initialization
  4117                           
  4118                           ;Main_B1.c: 25: RF_Initialization();
  4119  17C3  319A  22B5  3197   	fcall	_RF_Initialization
  4120                           
  4121                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4122  17C6  319D  2583  3197   	fcall	_CC2500_PowerOnInitial
  4123  17C9                     l10961:	
  4124                           ;Main_B1.c: 27: ;;
  4125                           ;Main_B1.c: 28: ;;
  4126                           ;Main_B1.c: 30: while (1) {
  4127                           
  4128                           
  4129                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4130  17C9  0021               	movlb	1	; select bank1
  4131  17CA  1C2E               	btfss	_myMain^(0+128),0
  4132  17CB  2FD4               	goto	l10965
  4133                           
  4134                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4135  17CC  3005               	movlw	5
  4136  17CD  318C  2482  3197   	fcall	_getLoad_AD
  4137                           
  4138                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4139  17D0  3009               	movlw	9
  4140  17D1  3193  2356  3197   	fcall	_getTemp_AD
  4141  17D4                     l10965:	
  4142                           
  4143                           ;Main_B1.c: 57: }
  4144                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4145  17D4  0022               	movlb	2	; select bank2
  4146  17D5  1C20               	btfss	_Timer1^(0+256),0
  4147  17D6  2FC9               	goto	l10961
  4148                           
  4149                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4150  17D7  1020               	bcf	_Timer1^(0+256),0
  4151                           
  4152                           ;Main_B1.c: 96: my_MainTimer();
  4153  17D8  3192  22DC  3197   	fcall	_my_MainTimer
  4154                           
  4155                           ;Main_B1.c: 97: WDT_Main();
  4156  17DB  319C  245D  3197   	fcall	_WDT_Main
  4157                           
  4158                           ;Main_B1.c: 98: ;;
  4159                           ;Main_B1.c: 99: ;;
  4160                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4161  17DE  0021               	movlb	1	; select bank1
  4162  17DF  1C2E               	btfss	_myMain^(0+128),0
  4163  17E0  2FC9               	goto	l10961
  4164                           
  4165                           ;Main_B1.c: 101: Flash_Memory_Main();
  4166  17E1  3191  21FA  3197   	fcall	_Flash_Memory_Main
  4167                           
  4168                           ;Main_B1.c: 103: LED_Main();
  4169  17E4  319B  236F  3197   	fcall	_LED_Main
  4170                           
  4171                           ;Main_B1.c: 104: Buzzer_Main();
  4172  17E7  3194  2419  3197   	fcall	_Buzzer_Main
  4173                           
  4174                           ;Main_B1.c: 106: ;;
  4175                           ;Main_B1.c: 107: Temp_Main();
  4176  17EA  319A  22BE  3197   	fcall	_Temp_Main
  4177                           
  4178                           ;Main_B1.c: 108: Load_Main();
  4179  17ED  3180  204A  3197   	fcall	_Load_Main
  4180                           
  4181                           ;Main_B1.c: 109: ;;
  4182                           ;Main_B1.c: 111: ;;
  4183                           ;Main_B1.c: 112: DimmerLights_Main();
  4184  17F0  319E  26C3  3197   	fcall	_DimmerLights_Main
  4185                           
  4186                           ;Main_B1.c: 113: Switch_Main();
  4187  17F3  319B  2340  3197   	fcall	_Switch_Main
  4188                           
  4189                           ;Main_B1.c: 114: ;;
  4190                           ;Main_B1.c: 115: ;;
  4191                           ;Main_B1.c: 117: RF_Main();
  4192  17F6  319A  22B8  3197   	fcall	_RF_Main
  4193                           
  4194                           ;Main_B1.c: 118: DelayOff_Main();
  4195  17F9  319A  22FB  3197   	fcall	_DelayOff_Main
  4196                           
  4197                           ;Main_B1.c: 119: ;;
  4198                           ;Main_B1.c: 120: ;;
  4199                           ;Main_B1.c: 121: Exception_Main();
  4200  17FC  3185  255F  3197   	fcall	_Exception_Main
  4201  17FF  2FC9               	goto	l10961
  4202  1800                     __end_of_main:	
  4203                           ;Main_B1.c: 128: }
  4204                           ;Main_B1.c: 129: }
  4205                           ;Main_B1.c: 163: }
  4206                           ;Main_B1.c: 164: return (0);
  4207                           ;	Return value of _main is never used
  4208                           
  4209                           
  4210                           	psect	text1
  4211  12DC                     __ptext1:	
  4212 ;; *************** function _my_MainTimer *****************
  4213 ;; Defined at:
  4214 ;;		line 185 in file "../src/Main_B1.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;		None
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;		None
  4219 ;; Return value:  Size  Location     Type
  4220 ;;		None               void
  4221 ;; Registers used:
  4222 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4230 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4231 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4232 ;;Total ram usage:        1 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    6
  4235 ;; This function calls:
  4236 ;;		_setBuz
  4237 ;; This function is called by:
  4238 ;;		_main
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           
  4243                           ;psect for function _my_MainTimer
  4244  12DC                     _my_MainTimer:	
  4245                           
  4246                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4247                           
  4248                           ;incstack = 0
  4249                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4250  12DC  0021               	movlb	1	; select bank1
  4251  12DD  182E               	btfsc	_myMain^(0+128),0
  4252  12DE  2AF6               	goto	l10669
  4253                           
  4254                           ;Main_B1.c: 189: myMain.PowerCount++;
  4255  12DF  3001               	movlw	1
  4256  12E0  0020               	movlb	0	; select bank0
  4257  12E1  00AD               	movwf	??_my_MainTimer
  4258  12E2  082D               	movf	??_my_MainTimer,w
  4259  12E3  0021               	movlb	1	; select bank1
  4260  12E4  07AF               	addwf	(_myMain^(0+128)+1),f
  4261                           
  4262                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4263  12E5  082F               	movf	(_myMain^(0+128)+1),w
  4264  12E6  3A96               	xorlw	150
  4265  12E7  1D03               	skipz
  4266  12E8  0008               	return
  4267                           
  4268                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4269  12E9  01AF               	clrf	(_myMain^(0+128)+1)
  4270                           
  4271                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4272  12EA  142E               	bsf	_myMain^(0+128),0
  4273                           
  4274                           ;Main_B1.c: 197: setBuz(3, 50);
  4275  12EB  3032               	movlw	50
  4276  12EC  0020               	movlb	0	; select bank0
  4277  12ED  00A9               	movwf	setBuz@time
  4278  12EE  3000               	movlw	0
  4279  12EF  00AA               	movwf	setBuz@time+1
  4280  12F0  3003               	movlw	3
  4281  12F1  3196  26F3         	fcall	_setBuz
  4282                           
  4283                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4284  12F3  0021               	movlb	1	; select bank1
  4285  12F4  162E               	bsf	_myMain^(0+128),4
  4286                           
  4287                           ;Main_B1.c: 207: }
  4288                           ;Main_B1.c: 208: } else {
  4289  12F5  0008               	return
  4290  12F6                     l10669:	
  4291                           
  4292                           ;Main_B1.c: 209: myMain.PowerCount++;
  4293  12F6  3001               	movlw	1
  4294  12F7  0020               	movlb	0	; select bank0
  4295  12F8  00AD               	movwf	??_my_MainTimer
  4296  12F9  082D               	movf	??_my_MainTimer,w
  4297  12FA  0021               	movlb	1	; select bank1
  4298  12FB  07AF               	addwf	(_myMain^(0+128)+1),f
  4299                           
  4300                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4301  12FC  082F               	movf	(_myMain^(0+128)+1),w
  4302  12FD  3A64               	xorlw	100
  4303  12FE  1903               	btfsc	3,2
  4304                           
  4305                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4306  12FF  01AF               	clrf	(_myMain^(0+128)+1)
  4307                           
  4308                           ;Main_B1.c: 226: }
  4309                           ;Main_B1.c: 228: myMain.Count1++;
  4310  1300  3001               	movlw	1
  4311  1301  07B2               	addwf	(_myMain^(0+128)+4),f
  4312  1302  3000               	movlw	0
  4313  1303  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4314                           
  4315                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4316  1304  3004               	movlw	4
  4317  1305  3EAE               	addlw	_myMain& (0+255)
  4318  1306  0086               	movwf	6
  4319  1307  0187               	clrf	7
  4320  1308  3F40               	moviw [0]fsr1
  4321  1309  3A64               	xorlw	100
  4322  130A  1D03               	skipz
  4323  130B  2B0E               	goto	u12255
  4324  130C  3F41               	moviw [1]fsr1
  4325  130D  3A00               	xorlw	0
  4326  130E                     u12255:	
  4327  130E  1D03               	skipz
  4328  130F  0008               	return
  4329                           
  4330                           ;Main_B1.c: 230: {
  4331                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4332  1310  01B2               	clrf	(_myMain^(0+128)+4)
  4333  1311  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4334                           
  4335                           ;Main_B1.c: 243: if (myMain.Flag) {
  4336  1312  1CAE               	btfss	_myMain^(0+128),1
  4337  1313  2B16               	goto	l1547
  4338                           
  4339                           ;Main_B1.c: 244: myMain.Flag = 0;
  4340  1314  10AE               	bcf	_myMain^(0+128),1
  4341                           
  4342                           ;Main_B1.c: 253: } else {
  4343  1315  0008               	return
  4344  1316                     l1547:	
  4345                           
  4346                           ;Main_B1.c: 254: myMain.Flag = 1;
  4347  1316  14AE               	bsf	_myMain^(0+128),1
  4348  1317  0008               	return
  4349  1318                     __end_of_my_MainTimer:	
  4350                           
  4351                           	psect	text2
  4352  1BD5                     __ptext2:	
  4353 ;; *************** function _myMain_Initialization *****************
  4354 ;; Defined at:
  4355 ;;		line 170 in file "../src/Main_B1.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;		None               void
  4362 ;; Registers used:
  4363 ;;		wreg, fsr1l, fsr1h
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;Total ram usage:        1 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    4
  4376 ;; This function calls:
  4377 ;;		Nothing
  4378 ;; This function is called by:
  4379 ;;		_main
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           
  4384                           ;psect for function _myMain_Initialization
  4385  1BD5                     _myMain_Initialization:	
  4386                           
  4387                           ;Main_B1.c: 173: product = &_product;
  4388                           
  4389                           ;incstack = 0
  4390                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4391  1BD5  304E               	movlw	__product& (0+255)
  4392  1BD6  0020               	movlb	0	; select bank0
  4393  1BD7  00A0               	movwf	??_myMain_Initialization
  4394  1BD8  0820               	movf	??_myMain_Initialization,w
  4395  1BD9  00FA               	movwf	_product
  4396                           
  4397                           ;Main_B1.c: 174: product->Data[20] = 210;
  4398  1BDA  30D2               	movlw	210
  4399  1BDB  00A0               	movwf	??_myMain_Initialization
  4400  1BDC  087A               	movf	_product,w
  4401  1BDD  3E14               	addlw	20
  4402  1BDE  0086               	movwf	6
  4403  1BDF  3002               	movlw	2	; select bank4/5
  4404  1BE0  0087               	movwf	7
  4405  1BE1  0820               	movf	??_myMain_Initialization,w
  4406  1BE2  0081               	movwf	1
  4407  1BE3  0008               	return
  4408  1BE4                     __end_of_myMain_Initialization:	
  4409                           
  4410                           	psect	text3
  4411  1356                     __ptext3:	
  4412 ;; *************** function _getTemp_AD *****************
  4413 ;; Defined at:
  4414 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;  channel         1    wreg     unsigned char 
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;  channel         1    5[BANK0 ] unsigned char 
  4419 ;; Return value:  Size  Location     Type
  4420 ;;		None               void
  4421 ;; Registers used:
  4422 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4431 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;Total ram usage:        2 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    6
  4435 ;; This function calls:
  4436 ;;		_getAD
  4437 ;; This function is called by:
  4438 ;;		_main
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           
  4443                           ;psect for function _getTemp_AD
  4444  1356                     _getTemp_AD:	
  4445                           
  4446                           ;incstack = 0
  4447                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4448                           ;getTemp_AD@channel stored from wreg
  4449  1356  0020               	movlb	0	; select bank0
  4450  1357  00A5               	movwf	getTemp_AD@channel
  4451                           
  4452                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4453  1358  0021               	movlb	1	; select bank1
  4454  1359  1D58               	btfss	_Temp^(0+128),2
  4455  135A  0008               	return
  4456                           
  4457                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4458  135B  30F0               	movlw	240
  4459  135C  0020               	movlb	0	; select bank0
  4460  135D  00A4               	movwf	??_getTemp_AD
  4461  135E  0824               	movf	??_getTemp_AD,w
  4462  135F  00A0               	movwf	getAD@adcon1
  4463  1360  0825               	movf	getTemp_AD@channel,w
  4464  1361  319E  26E3  3193   	fcall	_getAD
  4465  1364  0020               	movlb	0	; select bank0
  4466  1365  0821               	movf	?_getAD+1,w
  4467  1366  0021               	movlb	1	; select bank1
  4468  1367  01E5               	clrf	((_Temp+1)^(0+128)+12)
  4469  1368  07E5               	addwf	((_Temp+1)^(0+128)+12),f
  4470  1369  0020               	movlb	0	; select bank0
  4471  136A  0820               	movf	?_getAD,w
  4472  136B  0021               	movlb	1	; select bank1
  4473  136C  01E4               	clrf	(_Temp^(0+128)+12)
  4474  136D  07E4               	addwf	(_Temp^(0+128)+12),f
  4475                           
  4476                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4477  136E  300C               	movlw	12
  4478  136F  3ED8               	addlw	_Temp& (0+255)
  4479  1370  0086               	movwf	6
  4480  1371  0187               	clrf	7
  4481  1372  0016               	moviw fsr1++
  4482  1373  0401               	iorwf	1,w
  4483  1374  1903               	skipnz
  4484  1375  0008               	return
  4485                           
  4486                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4487  1376  0865               	movf	((_Temp+1)^(0+128)+12),w
  4488  1377  0261               	subwf	((_Temp+1)^(0+128)+8),w
  4489  1378  1D03               	skipz
  4490  1379  2B7C               	goto	u12205
  4491  137A  0864               	movf	(_Temp^(0+128)+12),w
  4492  137B  0260               	subwf	(_Temp^(0+128)+8),w
  4493  137C                     u12205:	
  4494  137C  1803               	skipnc
  4495  137D  2B85               	goto	l10651
  4496                           
  4497                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4498  137E  0865               	movf	((_Temp+1)^(0+128)+12),w
  4499  137F  01E1               	clrf	((_Temp+1)^(0+128)+8)
  4500  1380  07E1               	addwf	((_Temp+1)^(0+128)+8),f
  4501  1381  0864               	movf	(_Temp^(0+128)+12),w
  4502  1382  01E0               	clrf	(_Temp^(0+128)+8)
  4503  1383  07E0               	addwf	(_Temp^(0+128)+8),f
  4504                           
  4505                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4506  1384  0008               	return
  4507  1385                     l10651:	
  4508  1385  0865               	movf	((_Temp+1)^(0+128)+12),w
  4509  1386  0263               	subwf	((_Temp+1)^(0+128)+10),w
  4510  1387  1D03               	skipz
  4511  1388  2B8B               	goto	u12215
  4512  1389  0864               	movf	(_Temp^(0+128)+12),w
  4513  138A  0262               	subwf	(_Temp^(0+128)+10),w
  4514  138B                     u12215:	
  4515  138B  1803               	skipnc
  4516  138C  0008               	return
  4517                           
  4518                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4519  138D  0865               	movf	((_Temp+1)^(0+128)+12),w
  4520  138E  01E3               	clrf	((_Temp+1)^(0+128)+10)
  4521  138F  07E3               	addwf	((_Temp+1)^(0+128)+10),f
  4522  1390  0864               	movf	(_Temp^(0+128)+12),w
  4523  1391  01E2               	clrf	(_Temp^(0+128)+10)
  4524  1392  07E2               	addwf	(_Temp^(0+128)+10),f
  4525  1393  0008               	return
  4526  1394                     __end_of_getTemp_AD:	
  4527                           
  4528                           	psect	text4
  4529  0C82                     __ptext4:	
  4530 ;; *************** function _getLoad_AD *****************
  4531 ;; Defined at:
  4532 ;;		line 15 in file "../src/OverLoad_B1.c"
  4533 ;; Parameters:    Size  Location     Type
  4534 ;;  channel         1    wreg     unsigned char 
  4535 ;; Auto vars:     Size  Location     Type
  4536 ;;  channel         1    6[BANK0 ] unsigned char 
  4537 ;;  i               1    9[BANK0 ] unsigned char 
  4538 ;;  j               1    8[BANK0 ] unsigned char 
  4539 ;;  k               1    7[BANK0 ] unsigned char 
  4540 ;; Return value:  Size  Location     Type
  4541 ;;		None               void
  4542 ;; Registers used:
  4543 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4544 ;; Tracked objects:
  4545 ;;		On entry : 0/0
  4546 ;;		On exit  : 0/0
  4547 ;;		Unchanged: 0/0
  4548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4550 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4551 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4552 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4553 ;;Total ram usage:        6 bytes
  4554 ;; Hardware stack levels used:    1
  4555 ;; Hardware stack levels required when called:    6
  4556 ;; This function calls:
  4557 ;;		_getAD
  4558 ;; This function is called by:
  4559 ;;		_main
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           
  4564                           ;psect for function _getLoad_AD
  4565  0C82                     _getLoad_AD:	
  4566                           
  4567                           ;incstack = 0
  4568                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4569                           ;getLoad_AD@channel stored from wreg
  4570  0C82  0020               	movlb	0	; select bank0
  4571  0C83  00A6               	movwf	getLoad_AD@channel
  4572                           
  4573                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4574  0C84  01A9               	clrf	getLoad_AD@i
  4575  0C85  01A8               	clrf	getLoad_AD@j
  4576  0C86  01A7               	clrf	getLoad_AD@k
  4577                           
  4578                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4579  0C87  0022               	movlb	2	; select bank2
  4580  0C88  1E27               	btfss	_Load^(0+256),4
  4581  0C89  0008               	return
  4582                           
  4583                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4584  0C8A  30F3               	movlw	243
  4585  0C8B  0020               	movlb	0	; select bank0
  4586  0C8C  00A4               	movwf	??_getLoad_AD
  4587  0C8D  0824               	movf	??_getLoad_AD,w
  4588  0C8E  00A0               	movwf	getAD@adcon1
  4589  0C8F  0826               	movf	getLoad_AD@channel,w
  4590  0C90  319E  26E3  318C   	fcall	_getAD
  4591  0C93  0020               	movlb	0	; select bank0
  4592  0C94  0821               	movf	?_getAD+1,w
  4593  0C95  0022               	movlb	2	; select bank2
  4594  0C96  01C9               	clrf	((_Load+1)^(0+256)+33)
  4595  0C97  07C9               	addwf	((_Load+1)^(0+256)+33),f
  4596  0C98  0020               	movlb	0	; select bank0
  4597  0C99  0820               	movf	?_getAD,w
  4598  0C9A  0022               	movlb	2	; select bank2
  4599  0C9B  01C8               	clrf	(_Load^(0+256)+33)
  4600  0C9C  07C8               	addwf	(_Load^(0+256)+33),f
  4601                           
  4602                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4603  0C9D  0020               	movlb	0	; select bank0
  4604  0C9E  01A9               	clrf	getLoad_AD@i
  4605  0C9F  3004               	movlw	4
  4606  0CA0  0229               	subwf	getLoad_AD@i,w
  4607  0CA1  1803               	btfsc	3,0
  4608  0CA2  2CD0               	goto	l10621
  4609  0CA3                     l10609:	
  4610                           
  4611                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4612  0CA3  3529               	lslf	getLoad_AD@i,w
  4613  0CA4  3E32               	addlw	(_Load+11)& (0+255)
  4614  0CA5  0086               	movwf	6
  4615  0CA6  3001               	movlw	1	; select bank2/3
  4616  0CA7  0087               	movwf	7
  4617  0CA8  3F40               	moviw [0]fsr1
  4618  0CA9  00A4               	movwf	??_getLoad_AD
  4619  0CAA  3F41               	moviw [1]fsr1
  4620  0CAB  00A5               	movwf	??_getLoad_AD+1
  4621  0CAC  0022               	movlb	2	; select bank2
  4622  0CAD  0849               	movf	((_Load+1)^(0+256)+33),w
  4623  0CAE  0020               	movlb	0	; select bank0
  4624  0CAF  0225               	subwf	??_getLoad_AD+1,w
  4625  0CB0  1D03               	skipz
  4626  0CB1  2CB6               	goto	u12105
  4627  0CB2  0022               	movlb	2	; select bank2
  4628  0CB3  0848               	movf	(_Load^(0+256)+33),w
  4629  0CB4  0020               	movlb	0	; select bank0
  4630  0CB5  0224               	subwf	??_getLoad_AD,w
  4631  0CB6                     u12105:	
  4632  0CB6  1803               	skipnc
  4633  0CB7  2CC8               	goto	l10617
  4634  0CB8  08A8               	movf	getLoad_AD@j,f
  4635  0CB9  1D03               	skipz
  4636  0CBA  2CC8               	goto	l10617
  4637                           
  4638                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4639  0CBB  3529               	lslf	getLoad_AD@i,w
  4640  0CBC  3E32               	addlw	(_Load+11)& (0+255)
  4641  0CBD  0086               	movwf	6
  4642  0CBE  3001               	movlw	1	; select bank2/3
  4643  0CBF  0087               	movwf	7
  4644  0CC0  0022               	movlb	2	; select bank2
  4645  0CC1  0848               	movf	(_Load^(0+256)+33),w
  4646  0CC2  3FC0               	movwi [0]fsr1
  4647  0CC3  0849               	movf	((_Load+1)^(0+256)+33),w
  4648  0CC4  3FC1               	movwi [1]fsr1
  4649                           
  4650                           ;OverLoad_B1.c: 24: j = 1;
  4651  0CC5  0020               	movlb	0	; select bank0
  4652  0CC6  01A8               	clrf	getLoad_AD@j
  4653  0CC7  0AA8               	incf	getLoad_AD@j,f
  4654  0CC8                     l10617:	
  4655  0CC8  3001               	movlw	1
  4656  0CC9  00A4               	movwf	??_getLoad_AD
  4657  0CCA  0824               	movf	??_getLoad_AD,w
  4658  0CCB  07A9               	addwf	getLoad_AD@i,f
  4659  0CCC  3004               	movlw	4
  4660  0CCD  0229               	subwf	getLoad_AD@i,w
  4661  0CCE  1C03               	skipc
  4662  0CCF  2CA3               	goto	l10609
  4663  0CD0                     l10621:	
  4664                           
  4665                           ;OverLoad_B1.c: 25: }
  4666                           ;OverLoad_B1.c: 26: }
  4667                           ;OverLoad_B1.c: 27: if (j == 0) {
  4668  0CD0  08A8               	movf	getLoad_AD@j,f
  4669  0CD1  1D03               	skipz
  4670  0CD2  0008               	return
  4671                           
  4672                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4673  0CD3  01A9               	clrf	getLoad_AD@i
  4674  0CD4                     L1:	
  4675  0CD4  3004               	movlw	4
  4676  0CD5  0229               	subwf	getLoad_AD@i,w
  4677  0CD6  1803               	btfsc	3,0
  4678  0CD7  0008               	return
  4679                           
  4680                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4681  0CD8  3529               	lslf	getLoad_AD@i,w
  4682  0CD9  3E3C               	addlw	(_Load+21)& (0+255)
  4683  0CDA  0086               	movwf	6
  4684  0CDB  3001               	movlw	1	; select bank2/3
  4685  0CDC  0087               	movwf	7
  4686  0CDD  3F40               	moviw [0]fsr1
  4687  0CDE  00A4               	movwf	??_getLoad_AD
  4688  0CDF  3F41               	moviw [1]fsr1
  4689  0CE0  00A5               	movwf	??_getLoad_AD+1
  4690  0CE1  0825               	movf	??_getLoad_AD+1,w
  4691  0CE2  0022               	movlb	2	; select bank2
  4692  0CE3  0249               	subwf	((_Load+1)^(0+256)+33),w
  4693  0CE4  1D03               	skipz
  4694  0CE5  2CEA               	goto	u12155
  4695  0CE6  0020               	movlb	0	; select bank0
  4696  0CE7  0824               	movf	??_getLoad_AD,w
  4697  0CE8  0022               	movlb	2	; select bank2
  4698  0CE9  0248               	subwf	(_Load^(0+256)+33),w
  4699  0CEA                     u12155:	
  4700  0CEA  1803               	skipnc
  4701  0CEB  2CFD               	goto	l10637
  4702  0CEC  0020               	movlb	0	; select bank0
  4703  0CED  08A7               	movf	getLoad_AD@k,f
  4704  0CEE  1D03               	skipz
  4705  0CEF  2CFD               	goto	l10637
  4706                           
  4707                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4708  0CF0  3529               	lslf	getLoad_AD@i,w
  4709  0CF1  3E3C               	addlw	(_Load+21)& (0+255)
  4710  0CF2  0086               	movwf	6
  4711  0CF3  3001               	movlw	1	; select bank2/3
  4712  0CF4  0087               	movwf	7
  4713  0CF5  0022               	movlb	2	; select bank2
  4714  0CF6  0848               	movf	(_Load^(0+256)+33),w
  4715  0CF7  3FC0               	movwi [0]fsr1
  4716  0CF8  0849               	movf	((_Load+1)^(0+256)+33),w
  4717  0CF9  3FC1               	movwi [1]fsr1
  4718                           
  4719                           ;OverLoad_B1.c: 31: k = 1;
  4720  0CFA  0020               	movlb	0	; select bank0
  4721  0CFB  01A7               	clrf	getLoad_AD@k
  4722  0CFC  0AA7               	incf	getLoad_AD@k,f
  4723  0CFD                     l10637:	
  4724  0CFD  3001               	movlw	1
  4725  0CFE  0020               	movlb	0	; select bank0
  4726  0CFF  00A4               	movwf	??_getLoad_AD
  4727  0D00  0824               	movf	??_getLoad_AD,w
  4728  0D01  07A9               	addwf	getLoad_AD@i,f
  4729  0D02  2CD4               	goto	L1
  4730  0D03                     __end_of_getLoad_AD:	
  4731                           
  4732                           	psect	text5
  4733  1EE3                     __ptext5:	
  4734 ;; *************** function _getAD *****************
  4735 ;; Defined at:
  4736 ;;		line 447 in file "../src/MCU_B1.c"
  4737 ;; Parameters:    Size  Location     Type
  4738 ;;  adcon0          1    wreg     unsigned char 
  4739 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4742 ;; Return value:  Size  Location     Type
  4743 ;;                  2    0[BANK0 ] int 
  4744 ;; Registers used:
  4745 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4746 ;; Tracked objects:
  4747 ;;		On entry : 0/0
  4748 ;;		On exit  : 0/0
  4749 ;;		Unchanged: 0/0
  4750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4751 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4752 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4754 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4755 ;;Total ram usage:        4 bytes
  4756 ;; Hardware stack levels used:    1
  4757 ;; Hardware stack levels required when called:    5
  4758 ;; This function calls:
  4759 ;;		_Timeout_Counter
  4760 ;;		_set_TimeoutCleared
  4761 ;; This function is called by:
  4762 ;;		_getLoad_AD
  4763 ;;		_getTemp_AD
  4764 ;; This function uses a non-reentrant model
  4765 ;;
  4766                           
  4767                           
  4768                           ;psect for function _getAD
  4769  1EE3                     _getAD:	
  4770                           
  4771                           ;incstack = 0
  4772                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4773                           ;getAD@adcon0 stored from wreg
  4774  1EE3  0020               	movlb	0	; select bank0
  4775  1EE4  00A3               	movwf	getAD@adcon0
  4776                           
  4777                           ;MCU_B1.c: 448: ADCON0 = adcon0;
  4778  1EE5  0823               	movf	getAD@adcon0,w
  4779  1EE6  0021               	movlb	1	; select bank1
  4780  1EE7  009D               	movwf	29	;volatile
  4781                           
  4782                           ;MCU_B1.c: 449: ADCON1 = adcon1;
  4783  1EE8  0020               	movlb	0	; select bank0
  4784  1EE9  0820               	movf	getAD@adcon1,w
  4785  1EEA  0021               	movlb	1	; select bank1
  4786  1EEB  009E               	movwf	30	;volatile
  4787                           
  4788                           ;MCU_B1.c: 450: GO_nDONE = 1;
  4789  1EEC  149D               	bsf	29,1	;volatile
  4790                           
  4791                           ;MCU_B1.c: 451: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4792  1EED  2EF1               	goto	l10109
  4793  1EEE                     l10107:	
  4794                           
  4795                           ;MCU_B1.c: 452: Timeout_Counter();
  4796  1EEE  319D  2598  319E   	fcall	_Timeout_Counter
  4797  1EF1                     l10109:	
  4798  1EF1  0021               	movlb	1	; select bank1
  4799  1EF2  1C9D               	btfss	29,1	;volatile
  4800  1EF3  2EF6               	goto	l10113
  4801  1EF4  1D39               	btfss	(_myMain^(0+128)+11),2
  4802  1EF5  2EEE               	goto	l10107
  4803  1EF6                     l10113:	
  4804                           
  4805                           ;MCU_B1.c: 453: };
  4806                           ;MCU_B1.c: 454: set_TimeoutCleared();
  4807  1EF6  319A  22D5         	fcall	_set_TimeoutCleared
  4808                           
  4809                           ;MCU_B1.c: 455: return ((ADRESH*256)+ADRESL);
  4810  1EF8  0021               	movlb	1	; select bank1
  4811  1EF9  081C               	movf	28,w	;volatile
  4812  1EFA  0020               	movlb	0	; select bank0
  4813  1EFB  01A1               	clrf	?_getAD+1
  4814  1EFC  07A1               	addwf	?_getAD+1,f
  4815  1EFD  0021               	movlb	1	; select bank1
  4816  1EFE  081B               	movf	27,w	;volatile
  4817  1EFF  0020               	movlb	0	; select bank0
  4818  1F00  01A0               	clrf	?_getAD
  4819  1F01  07A0               	addwf	?_getAD,f
  4820  1F02  0008               	return
  4821  1F03                     __end_of_getAD:	
  4822                           
  4823                           	psect	text6
  4824  1C5D                     __ptext6:	
  4825 ;; *************** function _WDT_Main *****************
  4826 ;; Defined at:
  4827 ;;		line 1091 in file "../src/MCU_B1.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;		None
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;		None
  4832 ;; Return value:  Size  Location     Type
  4833 ;;		None               void
  4834 ;; Registers used:
  4835 ;;		wreg, status,2, status,0, pclath, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4845 ;;Total ram usage:        1 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    5
  4848 ;; This function calls:
  4849 ;;		_WDT_Clearing
  4850 ;; This function is called by:
  4851 ;;		_main
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           
  4856                           ;psect for function _WDT_Main
  4857  1C5D                     _WDT_Main:	
  4858                           
  4859                           ;MCU_B1.c: 1092: if (WDT.Enable == 1) {
  4860                           
  4861                           ;incstack = 0
  4862                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4863  1C5D  0022               	movlb	2	; select bank2
  4864  1C5E  1C25               	btfss	_WDT^(0+256),0
  4865  1C5F  0008               	return
  4866                           
  4867                           ;MCU_B1.c: 1093: if (WDT.Timer-- > 0) {
  4868  1C60  3001               	movlw	1
  4869  1C61  02A6               	subwf	(_WDT^(0+256)+1),f
  4870  1C62  0826               	movf	(_WDT^(0+256)+1),w
  4871  1C63  3AFF               	xorlw	255
  4872  1C64  1903               	skipnz
  4873  1C65  0008               	return
  4874                           
  4875                           ;MCU_B1.c: 1094: WDT.Timer = 100;
  4876  1C66  3064               	movlw	100
  4877  1C67  0020               	movlb	0	; select bank0
  4878  1C68  00A0               	movwf	??_WDT_Main
  4879  1C69  0820               	movf	??_WDT_Main,w
  4880  1C6A  0022               	movlb	2	; select bank2
  4881  1C6B  00A6               	movwf	(_WDT^(0+256)+1)
  4882                           
  4883                           ;MCU_B1.c: 1095: WDT_Clearing();
  4884  1C6C  3180  2002         	fcall	_WDT_Clearing
  4885  1C6E  0008               	return
  4886  1C6F                     __end_of_WDT_Main:	
  4887                           
  4888                           	psect	text7
  4889  0002                     __ptext7:	
  4890 ;; *************** function _WDT_Clearing *****************
  4891 ;; Defined at:
  4892 ;;		line 1101 in file "../src/MCU_B1.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;		None
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;		None
  4897 ;; Return value:  Size  Location     Type
  4898 ;;		None               void
  4899 ;; Registers used:
  4900 ;;		None
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;Total ram usage:        0 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; Hardware stack levels required when called:    4
  4913 ;; This function calls:
  4914 ;;		Nothing
  4915 ;; This function is called by:
  4916 ;;		_WDT_Main
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           
  4921                           ;psect for function _WDT_Clearing
  4922  0002                     _WDT_Clearing:	
  4923                           
  4924                           ;incstack = 0
  4925                           ; Regs used in _WDT_Clearing: []
  4926  0002  0064               	clrwdt	;# 
  4927  0003  0008               	return
  4928  0004                     __end_of_WDT_Clearing:	
  4929                           
  4930                           	psect	text8
  4931  1ABE                     __ptext8:	
  4932 ;; *************** function _Temp_Main *****************
  4933 ;; Defined at:
  4934 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;		None
  4939 ;; Return value:  Size  Location     Type
  4940 ;;		None               void
  4941 ;; Registers used:
  4942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;Total ram usage:        0 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    7
  4955 ;; This function calls:
  4956 ;;		_setTemp_Main
  4957 ;; This function is called by:
  4958 ;;		_main
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           
  4963                           ;psect for function _Temp_Main
  4964  1ABE                     _Temp_Main:	
  4965                           
  4966                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4967                           
  4968                           ;incstack = 0
  4969                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4970  1ABE  318F  2750         	fcall	_setTemp_Main
  4971  1AC0  0008               	return
  4972  1AC1                     __end_of_Temp_Main:	
  4973                           
  4974                           	psect	text9
  4975  0F50                     __ptext9:	
  4976 ;; *************** function _setTemp_Main *****************
  4977 ;; Defined at:
  4978 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;  error           1   72[BANK0 ] unsigned char 
  4983 ;; Return value:  Size  Location     Type
  4984 ;;		None               void
  4985 ;; Registers used:
  4986 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;Total ram usage:        3 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    6
  4999 ;; This function calls:
  5000 ;;		_getMain_All_Error_Status
  5001 ;;		_setBuz
  5002 ;;		_setProductData
  5003 ;; This function is called by:
  5004 ;;		_Temp_Main
  5005 ;; This function uses a non-reentrant model
  5006 ;;
  5007                           
  5008                           
  5009                           ;psect for function _setTemp_Main
  5010  0F50                     _setTemp_Main:	
  5011                           
  5012                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  5013                           
  5014                           ;incstack = 0
  5015                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5016  0F50  3000               	movlw	0
  5017  0F51  3191  2193  318F   	fcall	_getMain_All_Error_Status
  5018  0F54  0020               	movlb	0	; select bank0
  5019  0F55  00E6               	movwf	??_setTemp_Main
  5020  0F56  0866               	movf	??_setTemp_Main,w
  5021  0F57  00E8               	movwf	setTemp_Main@error
  5022                           
  5023                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5024  0F58  0021               	movlb	1	; select bank1
  5025  0F59  1C58               	btfss	_Temp^(0+128),0
  5026  0F5A  2FFC               	goto	l1897
  5027                           
  5028                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5029  0F5B  1958               	btfsc	_Temp^(0+128),2
  5030  0F5C  2F6C               	goto	l10179
  5031                           
  5032                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5033  0F5D  3001               	movlw	1
  5034  0F5E  07D9               	addwf	(_Temp^(0+128)+1),f
  5035  0F5F  3000               	movlw	0
  5036  0F60  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  5037                           
  5038                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  5039  0F61  3001               	movlw	1
  5040  0F62  025A               	subwf	((_Temp+1)^(0+128)+1),w
  5041  0F63  30F4               	movlw	244
  5042  0F64  1903               	skipnz
  5043  0F65  0259               	subwf	(_Temp^(0+128)+1),w
  5044  0F66  1C03               	skipc
  5045  0F67  0008               	return
  5046                           
  5047                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5048  0F68  01D9               	clrf	(_Temp^(0+128)+1)
  5049  0F69  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5050                           
  5051                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5052  0F6A  1558               	bsf	_Temp^(0+128),2
  5053                           
  5054                           ;OverTemperature_B1.c: 70: }
  5055                           ;OverTemperature_B1.c: 71: } else {
  5056  0F6B  0008               	return
  5057  0F6C                     l10179:	
  5058                           
  5059                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5060  0F6C  3001               	movlw	1
  5061  0F6D  07D9               	addwf	(_Temp^(0+128)+1),f
  5062  0F6E  3000               	movlw	0
  5063  0F6F  3DDA               	addwfc	((_Temp+1)^(0+128)+1),f
  5064                           
  5065                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5066  0F70  3000               	movlw	0
  5067  0F71  025A               	subwf	((_Temp+1)^(0+128)+1),w
  5068  0F72  3005               	movlw	5
  5069  0F73  1903               	skipnz
  5070  0F74  0259               	subwf	(_Temp^(0+128)+1),w
  5071  0F75  1C03               	skipc
  5072  0F76  0008               	return
  5073                           
  5074                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5075  0F77  01D9               	clrf	(_Temp^(0+128)+1)
  5076  0F78  01DA               	clrf	((_Temp+1)^(0+128)+1)
  5077                           
  5078                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5079  0F79  3008               	movlw	8
  5080  0F7A  3ED8               	addlw	_Temp& (0+255)
  5081  0F7B  0086               	movwf	6
  5082  0F7C  0187               	clrf	7
  5083  0F7D  0016               	moviw fsr1++
  5084  0F7E  0401               	iorwf	1,w
  5085  0F7F  1903               	skipnz
  5086  0F80  2FF6               	goto	l1902
  5087  0F81  300A               	movlw	10
  5088  0F82  3ED8               	addlw	_Temp& (0+255)
  5089  0F83  0086               	movwf	6
  5090  0F84  0187               	clrf	7
  5091  0F85  0016               	moviw fsr1++
  5092  0F86  0401               	iorwf	1,w
  5093  0F87  1903               	skipnz
  5094  0F88  2FF6               	goto	l1902
  5095                           
  5096                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5097  0F89  1158               	bcf	_Temp^(0+128),2
  5098                           
  5099                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5100  0F8A  300A               	movlw	10
  5101  0F8B  3ED8               	addlw	_Temp& (0+255)
  5102  0F8C  0086               	movwf	6
  5103  0F8D  0187               	clrf	7
  5104  0F8E  3008               	movlw	8
  5105  0F8F  3ED8               	addlw	_Temp& (0+255)
  5106  0F90  0084               	movwf	4
  5107  0F91  0185               	clrf	5
  5108  0F92  3F40               	moviw [0]fsr1
  5109  0F93  0700               	addwf	0,w
  5110  0F94  0020               	movlb	0	; select bank0
  5111  0F95  00E6               	movwf	??_setTemp_Main
  5112  0F96  3101               	addfsr 0,1
  5113  0F97  3F41               	moviw [1]fsr1
  5114  0F98  3D00               	addwfc	0,w
  5115  0F99  00E7               	movwf	??_setTemp_Main+1
  5116  0F9A  36E7               	lsrf	??_setTemp_Main+1,f
  5117  0F9B  0CE6               	rrf	??_setTemp_Main,f
  5118  0F9C  0866               	movf	??_setTemp_Main,w
  5119  0F9D  0021               	movlb	1	; select bank1
  5120  0F9E  00DE               	movwf	(_Temp^(0+128)+6)
  5121  0F9F  0020               	movlb	0	; select bank0
  5122  0FA0  0867               	movf	??_setTemp_Main+1,w
  5123  0FA1  0021               	movlb	1	; select bank1
  5124  0FA2  00DF               	movwf	((_Temp+1)^(0+128)+6)
  5125                           
  5126                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5127  0FA3  30C7               	movlw	199
  5128  0FA4  00E6               	movwf	(_Temp^(0+128)+14)
  5129  0FA5  3001               	movlw	1
  5130  0FA6  00E7               	movwf	(_Temp^(0+128)+15)
  5131                           
  5132                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5133  0FA7  309F               	movlw	159
  5134  0FA8  00E8               	movwf	(_Temp^(0+128)+16)
  5135  0FA9  3001               	movlw	1
  5136  0FAA  00E9               	movwf	(_Temp^(0+128)+17)
  5137                           
  5138                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5139  0FAB  1CD8               	btfss	_Temp^(0+128),1
  5140  0FAC  2FCD               	goto	l10211
  5141                           
  5142                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5143  0FAD  0867               	movf	((_Temp+1)^(0+128)+14),w
  5144  0FAE  025F               	subwf	((_Temp+1)^(0+128)+6),w
  5145  0FAF  1D03               	skipz
  5146  0FB0  2FB3               	goto	u11395
  5147  0FB1  0866               	movf	(_Temp^(0+128)+14),w
  5148  0FB2  025E               	subwf	(_Temp^(0+128)+6),w
  5149  0FB3                     u11395:	
  5150  0FB3  1C03               	skipc
  5151  0FB4  2FCB               	goto	l10209
  5152                           
  5153                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5154  0FB5  3001               	movlw	1
  5155  0FB6  0020               	movlb	0	; select bank0
  5156  0FB7  00E6               	movwf	??_setTemp_Main
  5157  0FB8  0866               	movf	??_setTemp_Main,w
  5158  0FB9  0021               	movlb	1	; select bank1
  5159  0FBA  07DB               	addwf	(_Temp^(0+128)+3),f
  5160                           
  5161                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5162  0FBB  3003               	movlw	3
  5163  0FBC  025B               	subwf	(_Temp^(0+128)+3),w
  5164  0FBD  1C03               	skipc
  5165  0FBE  2FE3               	goto	l10223
  5166                           
  5167                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5168  0FBF  01DB               	clrf	(_Temp^(0+128)+3)
  5169                           
  5170                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5171  0FC0  10D8               	bcf	_Temp^(0+128),1
  5172                           
  5173                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5174  0FC1  3064               	movlw	100
  5175  0FC2  0020               	movlb	0	; select bank0
  5176  0FC3  00A9               	movwf	setBuz@time
  5177  0FC4  3000               	movlw	0
  5178  0FC5  00AA               	movwf	setBuz@time+1
  5179  0FC6  3002               	movlw	2
  5180  0FC7  3196  26F3  318F   	fcall	_setBuz
  5181                           
  5182                           ;OverTemperature_B1.c: 103: }
  5183                           ;OverTemperature_B1.c: 104: } else {
  5184  0FCA  2FE3               	goto	l10223
  5185  0FCB                     l10209:	
  5186                           
  5187                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5188  0FCB  0021               	movlb	1	; select bank1
  5189  0FCC  2FE2               	goto	l10221
  5190  0FCD                     l10211:	
  5191                           ;OverTemperature_B1.c: 106: }
  5192                           ;OverTemperature_B1.c: 107: } else {
  5193                           
  5194                           
  5195                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5196  0FCD  085F               	movf	((_Temp+1)^(0+128)+6),w
  5197  0FCE  0269               	subwf	((_Temp+1)^(0+128)+16),w
  5198  0FCF  1D03               	skipz
  5199  0FD0  2FD3               	goto	u11415
  5200  0FD1  085E               	movf	(_Temp^(0+128)+6),w
  5201  0FD2  0268               	subwf	(_Temp^(0+128)+16),w
  5202  0FD3                     u11415:	
  5203  0FD3  1C03               	skipc
  5204  0FD4  2FE2               	goto	l10221
  5205                           
  5206                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5207  0FD5  3001               	movlw	1
  5208  0FD6  0020               	movlb	0	; select bank0
  5209  0FD7  00E6               	movwf	??_setTemp_Main
  5210  0FD8  0866               	movf	??_setTemp_Main,w
  5211  0FD9  0021               	movlb	1	; select bank1
  5212  0FDA  07DB               	addwf	(_Temp^(0+128)+3),f
  5213                           
  5214                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5215  0FDB  3003               	movlw	3
  5216  0FDC  025B               	subwf	(_Temp^(0+128)+3),w
  5217  0FDD  1C03               	skipc
  5218  0FDE  2FE3               	goto	l10223
  5219                           
  5220                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5221  0FDF  01DB               	clrf	(_Temp^(0+128)+3)
  5222                           
  5223                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5224  0FE0  14D8               	bsf	_Temp^(0+128),1
  5225                           
  5226                           ;OverTemperature_B1.c: 113: }
  5227                           ;OverTemperature_B1.c: 114: } else {
  5228  0FE1  2FE3               	goto	l10223
  5229  0FE2                     l10221:	
  5230                           
  5231                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5232  0FE2  01DB               	clrf	(_Temp^(0+128)+3)
  5233  0FE3                     l10223:	
  5234                           
  5235                           ;OverTemperature_B1.c: 116: }
  5236                           ;OverTemperature_B1.c: 117: }
  5237                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5238  0FE3  0021               	movlb	1	; select bank1
  5239  0FE4  085F               	movf	((_Temp+1)^(0+128)+6),w
  5240  0FE5  0020               	movlb	0	; select bank0
  5241  0FE6  00E6               	movwf	??_setTemp_Main
  5242  0FE7  0866               	movf	??_setTemp_Main,w
  5243  0FE8  00E2               	movwf	setProductData@value
  5244  0FE9  3018               	movlw	24
  5245  0FEA  319B  23B8  318F   	fcall	_setProductData
  5246                           
  5247                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5248  0FED  0021               	movlb	1	; select bank1
  5249  0FEE  085E               	movf	(_Temp^(0+128)+6),w
  5250  0FEF  0020               	movlb	0	; select bank0
  5251  0FF0  00E6               	movwf	??_setTemp_Main
  5252  0FF1  0866               	movf	??_setTemp_Main,w
  5253  0FF2  00E2               	movwf	setProductData@value
  5254  0FF3  3019               	movlw	25
  5255  0FF4  319B  23B8         	fcall	_setProductData
  5256  0FF6                     l1902:	
  5257                           
  5258                           ;OverTemperature_B1.c: 135: }
  5259                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5260  0FF6  0021               	movlb	1	; select bank1
  5261  0FF7  01E0               	clrf	(_Temp^(0+128)+8)
  5262  0FF8  01E1               	clrf	((_Temp+1)^(0+128)+8)
  5263                           
  5264                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5265  0FF9  01E2               	clrf	(_Temp^(0+128)+10)
  5266  0FFA  01E3               	clrf	((_Temp+1)^(0+128)+10)
  5267                           
  5268                           ;OverTemperature_B1.c: 138: }
  5269                           ;OverTemperature_B1.c: 139: }
  5270                           ;OverTemperature_B1.c: 141: } else {
  5271  0FFB  0008               	return
  5272  0FFC                     l1897:	
  5273                           
  5274                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5275  0FFC  1C2E               	btfss	_myMain^(0+128),0
  5276  0FFD  0008               	return
  5277                           
  5278                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5279  0FFE  1458               	bsf	_Temp^(0+128),0
  5280  0FFF  0008               	return
  5281  1000                     __end_of_setTemp_Main:	
  5282                           
  5283                           	psect	text10
  5284  1ABB                     __ptext10:	
  5285 ;; *************** function _Temp_Initialization *****************
  5286 ;; Defined at:
  5287 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;		None
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;		None
  5292 ;; Return value:  Size  Location     Type
  5293 ;;		None               void
  5294 ;; Registers used:
  5295 ;;		status,2, status,0, pclath, cstack
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;Total ram usage:        0 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:    5
  5308 ;; This function calls:
  5309 ;;		_setTemp_Initialization
  5310 ;; This function is called by:
  5311 ;;		_main
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           
  5316                           ;psect for function _Temp_Initialization
  5317  1ABB                     _Temp_Initialization:	
  5318                           
  5319                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5320                           
  5321                           ;incstack = 0
  5322                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5323  1ABB  319A  22AE         	fcall	_setTemp_Initialization
  5324  1ABD  0008               	return
  5325  1ABE                     __end_of_Temp_Initialization:	
  5326                           
  5327                           	psect	text11
  5328  1AAE                     __ptext11:	
  5329 ;; *************** function _setTemp_Initialization *****************
  5330 ;; Defined at:
  5331 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;		None
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;		None
  5336 ;; Return value:  Size  Location     Type
  5337 ;;		None               void
  5338 ;; Registers used:
  5339 ;;		None
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5349 ;;Total ram usage:        0 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:    4
  5352 ;; This function calls:
  5353 ;;		Nothing
  5354 ;; This function is called by:
  5355 ;;		_Temp_Initialization
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           
  5360                           ;psect for function _setTemp_Initialization
  5361  1AAE                     _setTemp_Initialization:	
  5362                           
  5363                           ;incstack = 0
  5364                           ; Regs used in _setTemp_Initialization: []
  5365  1AAE  0008               	return
  5366  1AAF                     __end_of_setTemp_Initialization:	
  5367                           
  5368                           	psect	text12
  5369  1B40                     __ptext12:	
  5370 ;; *************** function _Switch_Main *****************
  5371 ;; Defined at:
  5372 ;;		line 72 in file "../src/Switch_B1.c"
  5373 ;; Parameters:    Size  Location     Type
  5374 ;;		None
  5375 ;; Auto vars:     Size  Location     Type
  5376 ;;		None
  5377 ;; Return value:  Size  Location     Type
  5378 ;;		None               void
  5379 ;; Registers used:
  5380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5381 ;; Tracked objects:
  5382 ;;		On entry : 0/0
  5383 ;;		On exit  : 0/0
  5384 ;;		Unchanged: 0/0
  5385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5390 ;;Total ram usage:        0 bytes
  5391 ;; Hardware stack levels used:    1
  5392 ;; Hardware stack levels required when called:    9
  5393 ;; This function calls:
  5394 ;;		_TouchPower
  5395 ;;		_setSw_Main
  5396 ;; This function is called by:
  5397 ;;		_main
  5398 ;; This function uses a non-reentrant model
  5399 ;;
  5400                           
  5401                           
  5402                           ;psect for function _Switch_Main
  5403  1B40                     _Switch_Main:	
  5404                           
  5405                           ;Switch_B1.c: 75: setSw_Main(1);
  5406                           
  5407                           ;incstack = 0
  5408                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5409  1B40  3001               	movlw	1
  5410  1B41  3181  21F6  319B   	fcall	_setSw_Main
  5411                           
  5412                           ;Switch_B1.c: 79: setSw_Main(2);
  5413  1B44  3002               	movlw	2
  5414  1B45  3181  21F6  319B   	fcall	_setSw_Main
  5415                           
  5416                           ;Switch_B1.c: 87: TouchPower();
  5417  1B48  319D  25AD         	fcall	_TouchPower
  5418  1B4A  0008               	return
  5419  1B4B                     __end_of_Switch_Main:	
  5420                           
  5421                           	psect	text13
  5422  01F6                     __ptext13:	
  5423 ;; *************** function _setSw_Main *****************
  5424 ;; Defined at:
  5425 ;;		line 121 in file "../src/Switch_B1.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;  sw              1    wreg     unsigned char 
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;  sw              1   77[BANK0 ] unsigned char 
  5430 ;; Return value:  Size  Location     Type
  5431 ;;		None               void
  5432 ;; Registers used:
  5433 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5441 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;Total ram usage:        3 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:    8
  5446 ;; This function calls:
  5447 ;;		_SwPointSelect
  5448 ;;		_getMain_All_Error_Status
  5449 ;;		_getSw_KeyStatus
  5450 ;;		_setBuz
  5451 ;;		_setDimmerLights_AdjOn
  5452 ;;		_setDimmerLights_SwOff
  5453 ;;		_setDimmerLights_SwOn
  5454 ;;		_setRF_Learn
  5455 ;; This function is called by:
  5456 ;;		_Switch_Main
  5457 ;; This function uses a non-reentrant model
  5458 ;;
  5459                           
  5460                           
  5461                           ;psect for function _setSw_Main
  5462  01F6                     _setSw_Main:	
  5463                           
  5464                           ;incstack = 0
  5465                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5466                           ;setSw_Main@sw stored from wreg
  5467  01F6  0020               	movlb	0	; select bank0
  5468  01F7  00ED               	movwf	setSw_Main@sw
  5469                           
  5470                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5471  01F8  086D               	movf	setSw_Main@sw,w
  5472  01F9  319D  2531  3181   	fcall	_SwPointSelect
  5473                           
  5474                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5475  01FC  0875               	movf	_Sw,w
  5476  01FD  0086               	movwf	6
  5477  01FE  0876               	movf	_Sw+1,w
  5478  01FF  0087               	movwf	7
  5479  0200  1C01               	btfss	1,0
  5480  0201  2B5F               	goto	l2670
  5481                           
  5482                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5483  0202  3000               	movlw	0
  5484  0203  3191  2193  3181   	fcall	_getMain_All_Error_Status
  5485  0206  3800               	iorlw	0
  5486  0207  1D03               	skipz
  5487  0208  2A25               	goto	l10325
  5488                           
  5489                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5490  0209  0875               	movf	_Sw,w
  5491  020A  0086               	movwf	6
  5492  020B  0876               	movf	_Sw+1,w
  5493  020C  0087               	movwf	7
  5494  020D  3141               	addfsr 1,1
  5495  020E  1081               	bcf	1,1
  5496                           
  5497                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5498  020F  0020               	movlb	0	; select bank0
  5499  0210  086D               	movf	setSw_Main@sw,w
  5500  0211  319E  2684  3181   	fcall	_getSw_KeyStatus
  5501  0214  3A01               	xorlw	1
  5502  0215  3000               	movlw	0
  5503  0216  1903               	skipnz
  5504  0217  3001               	movlw	1
  5505  0218  0020               	movlb	0	; select bank0
  5506  0219  00EB               	movwf	??_setSw_Main
  5507  021A  0875               	movf	_Sw,w
  5508  021B  0086               	movwf	6
  5509  021C  0876               	movf	_Sw+1,w
  5510  021D  0087               	movwf	7
  5511  021E  0DEB               	rlf	??_setSw_Main,f
  5512  021F  0801               	movf	1,w
  5513  0220  066B               	xorwf	??_setSw_Main,w
  5514  0221  39FD               	andlw	-3
  5515  0222  066B               	xorwf	??_setSw_Main,w
  5516  0223  0081               	movwf	1
  5517                           
  5518                           ;Switch_B1.c: 128: } else {
  5519  0224  2A3C               	goto	l2672
  5520  0225                     l10325:	
  5521                           
  5522                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5523  0225  0875               	movf	_Sw,w
  5524  0226  0086               	movwf	6
  5525  0227  0876               	movf	_Sw+1,w
  5526  0228  0087               	movwf	7
  5527  0229  3141               	addfsr 1,1
  5528  022A  1881               	btfsc	1,1
  5529  022B  2A3C               	goto	l2672
  5530                           
  5531                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5532  022C  0875               	movf	_Sw,w
  5533  022D  0086               	movwf	6
  5534  022E  0876               	movf	_Sw+1,w
  5535  022F  0087               	movwf	7
  5536  0230  3141               	addfsr 1,1
  5537  0231  1481               	bsf	1,1
  5538                           
  5539                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5540  0232  0875               	movf	_Sw,w
  5541  0233  0086               	movwf	6
  5542  0234  0876               	movf	_Sw+1,w
  5543  0235  0087               	movwf	7
  5544  0236  1081               	bcf	1,1
  5545                           
  5546                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5547  0237  0875               	movf	_Sw,w
  5548  0238  0086               	movwf	6
  5549  0239  0876               	movf	_Sw+1,w
  5550  023A  0087               	movwf	7
  5551  023B  1501               	bsf	1,2
  5552  023C                     l2672:	
  5553                           
  5554                           ;Switch_B1.c: 134: }
  5555                           ;Switch_B1.c: 135: }
  5556                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5557  023C  0875               	movf	_Sw,w
  5558  023D  0086               	movwf	6
  5559  023E  0876               	movf	_Sw+1,w
  5560  023F  0087               	movwf	7
  5561  0240  1C81               	btfss	1,1
  5562  0241  2B0C               	goto	l10375
  5563                           
  5564                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5565  0242  0875               	movf	_Sw,w
  5566  0243  0086               	movwf	6
  5567  0244  0876               	movf	_Sw+1,w
  5568  0245  0087               	movwf	7
  5569  0246  1901               	btfsc	1,2
  5570  0247  2A6A               	goto	l10341
  5571                           
  5572                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5573  0248  3001               	movlw	1
  5574  0249  0020               	movlb	0	; select bank0
  5575  024A  00EB               	movwf	??_setSw_Main
  5576  024B  0875               	movf	_Sw,w
  5577  024C  0086               	movwf	6
  5578  024D  0876               	movf	_Sw+1,w
  5579  024E  0087               	movwf	7
  5580  024F  3142               	addfsr 1,2
  5581  0250  086B               	movf	??_setSw_Main,w
  5582  0251  0781               	addwf	1,f
  5583                           
  5584                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  5585  0252  0875               	movf	_Sw,w
  5586  0253  0086               	movwf	6
  5587  0254  0876               	movf	_Sw+1,w
  5588  0255  0087               	movwf	7
  5589  0256  3142               	addfsr 1,2
  5590  0257  3005               	movlw	5
  5591  0258  0201               	subwf	1,w
  5592  0259  1C03               	skipc
  5593  025A  0008               	return
  5594                           
  5595                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5596  025B  0875               	movf	_Sw,w
  5597  025C  0086               	movwf	6
  5598  025D  0876               	movf	_Sw+1,w
  5599  025E  0087               	movwf	7
  5600  025F  3142               	addfsr 1,2
  5601  0260  0181               	clrf	1
  5602                           
  5603                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5604  0261  0875               	movf	_Sw,w
  5605  0262  0086               	movwf	6
  5606  0263  0876               	movf	_Sw+1,w
  5607  0264  0087               	movwf	7
  5608  0265  1501               	bsf	1,2
  5609                           
  5610                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5611  0266  086D               	movf	setSw_Main@sw,w
  5612  0267  3188  2017         	fcall	_setDimmerLights_SwOn
  5613                           
  5614                           ;Switch_B1.c: 148: }
  5615                           ;Switch_B1.c: 149: } else {
  5616  0269  0008               	return
  5617  026A                     l10341:	
  5618                           
  5619                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5620  026A  0875               	movf	_Sw,w
  5621  026B  0086               	movwf	6
  5622  026C  0876               	movf	_Sw+1,w
  5623  026D  0087               	movwf	7
  5624  026E  1981               	btfsc	1,3
  5625  026F  2A9C               	goto	l10351
  5626                           
  5627                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5628  0270  0875               	movf	_Sw,w
  5629  0271  0086               	movwf	6
  5630  0272  0876               	movf	_Sw+1,w
  5631  0273  0087               	movwf	7
  5632  0274  3143               	addfsr 1,3
  5633  0275  3001               	movlw	1
  5634  0276  0781               	addwf	1,f
  5635  0277  3141               	addfsr 1,1
  5636  0278  1803               	skipnc
  5637  0279  0A81               	incf	1,f
  5638                           
  5639                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  5640  027A  0875               	movf	_Sw,w
  5641  027B  0086               	movwf	6
  5642  027C  0876               	movf	_Sw+1,w
  5643  027D  0087               	movwf	7
  5644  027E  3143               	addfsr 1,3
  5645  027F  3F40               	moviw [0]fsr1
  5646  0280  0020               	movlb	0	; select bank0
  5647  0281  00EB               	movwf	??_setSw_Main
  5648  0282  3F41               	moviw [1]fsr1
  5649  0283  00EC               	movwf	??_setSw_Main+1
  5650  0284  3000               	movlw	0
  5651  0285  026C               	subwf	??_setSw_Main+1,w
  5652  0286  3096               	movlw	150
  5653  0287  1903               	skipnz
  5654  0288  026B               	subwf	??_setSw_Main,w
  5655  0289  1C03               	skipc
  5656  028A  0008               	return
  5657                           
  5658                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5659  028B  0875               	movf	_Sw,w
  5660  028C  0086               	movwf	6
  5661  028D  0876               	movf	_Sw+1,w
  5662  028E  0087               	movwf	7
  5663  028F  3143               	addfsr 1,3
  5664  0290  3000               	movlw	0
  5665  0291  3FC0               	movwi [0]fsr1
  5666  0292  3FC1               	movwi [1]fsr1
  5667                           
  5668                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5669  0293  0875               	movf	_Sw,w
  5670  0294  0086               	movwf	6
  5671  0295  0876               	movf	_Sw+1,w
  5672  0296  0087               	movwf	7
  5673  0297  1581               	bsf	1,3
  5674                           
  5675                           ;Switch_B1.c: 157: setDimmerLights_AdjOn(sw);
  5676  0298  086D               	movf	setSw_Main@sw,w
  5677  0299  3190  20D6         	fcall	_setDimmerLights_AdjOn
  5678                           
  5679                           ;Switch_B1.c: 160: }
  5680                           ;Switch_B1.c: 161: } else {
  5681  029B  0008               	return
  5682  029C                     l10351:	
  5683                           
  5684                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5685  029C  0875               	movf	_Sw,w
  5686  029D  0086               	movwf	6
  5687  029E  0876               	movf	_Sw+1,w
  5688  029F  0087               	movwf	7
  5689  02A0  1A01               	btfsc	1,4
  5690  02A1  2ADA               	goto	l10365
  5691                           
  5692                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5693  02A2  0875               	movf	_Sw,w
  5694  02A3  0086               	movwf	6
  5695  02A4  0876               	movf	_Sw+1,w
  5696  02A5  0087               	movwf	7
  5697  02A6  3145               	addfsr 1,5
  5698  02A7  3001               	movlw	1
  5699  02A8  0781               	addwf	1,f
  5700  02A9  3141               	addfsr 1,1
  5701  02AA  1803               	skipnc
  5702  02AB  0A81               	incf	1,f
  5703                           
  5704                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5705  02AC  0875               	movf	_Sw,w
  5706  02AD  0086               	movwf	6
  5707  02AE  0876               	movf	_Sw+1,w
  5708  02AF  0087               	movwf	7
  5709  02B0  3145               	addfsr 1,5
  5710  02B1  3F40               	moviw [0]fsr1
  5711  02B2  0020               	movlb	0	; select bank0
  5712  02B3  00EB               	movwf	??_setSw_Main
  5713  02B4  3F41               	moviw [1]fsr1
  5714  02B5  00EC               	movwf	??_setSw_Main+1
  5715  02B6  3000               	movlw	0
  5716  02B7  026C               	subwf	??_setSw_Main+1,w
  5717  02B8  3096               	movlw	150
  5718  02B9  1903               	skipnz
  5719  02BA  026B               	subwf	??_setSw_Main,w
  5720  02BB  1C03               	skipc
  5721  02BC  0008               	return
  5722                           
  5723                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5724  02BD  0875               	movf	_Sw,w
  5725  02BE  0086               	movwf	6
  5726  02BF  0876               	movf	_Sw+1,w
  5727  02C0  0087               	movwf	7
  5728  02C1  3145               	addfsr 1,5
  5729  02C2  3000               	movlw	0
  5730  02C3  3FC0               	movwi [0]fsr1
  5731  02C4  3FC1               	movwi [1]fsr1
  5732                           
  5733                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5734  02C5  0875               	movf	_Sw,w
  5735  02C6  0086               	movwf	6
  5736  02C7  0876               	movf	_Sw+1,w
  5737  02C8  0087               	movwf	7
  5738  02C9  1601               	bsf	1,4
  5739                           
  5740                           ;Switch_B1.c: 169: setRF_Learn(1);
  5741  02CA  3001               	movlw	1
  5742  02CB  319D  2545  3181   	fcall	_setRF_Learn
  5743                           
  5744                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  5745  02CE  0021               	movlb	1	; select bank1
  5746  02CF  1EAE               	btfss	_myMain^(0+128),5
  5747  02D0  0008               	return
  5748                           
  5749                           ;Switch_B1.c: 172: setBuz(2, 100);
  5750  02D1  3064               	movlw	100
  5751  02D2  0020               	movlb	0	; select bank0
  5752  02D3  00A9               	movwf	setBuz@time
  5753  02D4  3000               	movlw	0
  5754  02D5  00AA               	movwf	setBuz@time+1
  5755  02D6  3002               	movlw	2
  5756  02D7  3196  26F3         	fcall	_setBuz
  5757                           
  5758                           ;Switch_B1.c: 173: }
  5759                           ;Switch_B1.c: 175: }
  5760                           ;Switch_B1.c: 176: } else {
  5761  02D9  0008               	return
  5762  02DA                     l10365:	
  5763                           
  5764                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  5765  02DA  0875               	movf	_Sw,w
  5766  02DB  0086               	movwf	6
  5767  02DC  0876               	movf	_Sw+1,w
  5768  02DD  0087               	movwf	7
  5769  02DE  1A81               	btfsc	1,5
  5770  02DF  0008               	return
  5771                           
  5772                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  5773  02E0  0875               	movf	_Sw,w
  5774  02E1  0086               	movwf	6
  5775  02E2  0876               	movf	_Sw+1,w
  5776  02E3  0087               	movwf	7
  5777  02E4  3147               	addfsr 1,7
  5778  02E5  3001               	movlw	1
  5779  02E6  0781               	addwf	1,f
  5780  02E7  3141               	addfsr 1,1
  5781  02E8  1803               	skipnc
  5782  02E9  0A81               	incf	1,f
  5783                           
  5784                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  5785  02EA  0875               	movf	_Sw,w
  5786  02EB  0086               	movwf	6
  5787  02EC  0876               	movf	_Sw+1,w
  5788  02ED  0087               	movwf	7
  5789  02EE  3147               	addfsr 1,7
  5790  02EF  3F40               	moviw [0]fsr1
  5791  02F0  0020               	movlb	0	; select bank0
  5792  02F1  00EB               	movwf	??_setSw_Main
  5793  02F2  3F41               	moviw [1]fsr1
  5794  02F3  00EC               	movwf	??_setSw_Main+1
  5795  02F4  3001               	movlw	1
  5796  02F5  026C               	subwf	??_setSw_Main+1,w
  5797  02F6  302C               	movlw	44
  5798  02F7  1903               	skipnz
  5799  02F8  026B               	subwf	??_setSw_Main,w
  5800  02F9  1C03               	skipc
  5801  02FA  0008               	return
  5802                           
  5803                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  5804  02FB  0875               	movf	_Sw,w
  5805  02FC  0086               	movwf	6
  5806  02FD  0876               	movf	_Sw+1,w
  5807  02FE  0087               	movwf	7
  5808  02FF  3147               	addfsr 1,7
  5809  0300  3000               	movlw	0
  5810  0301  3FC0               	movwi [0]fsr1
  5811  0302  3FC1               	movwi [1]fsr1
  5812                           
  5813                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  5814  0303  0875               	movf	_Sw,w
  5815  0304  0086               	movwf	6
  5816  0305  0876               	movf	_Sw+1,w
  5817  0306  0087               	movwf	7
  5818  0307  1681               	bsf	1,5
  5819                           
  5820                           ;Switch_B1.c: 184: setRF_Learn(0);
  5821  0308  3000               	movlw	0
  5822  0309  319D  2545         	fcall	_setRF_Learn
  5823                           
  5824                           ;Switch_B1.c: 187: }
  5825                           ;Switch_B1.c: 188: }
  5826                           ;Switch_B1.c: 189: }
  5827                           ;Switch_B1.c: 190: }
  5828                           ;Switch_B1.c: 191: }
  5829                           ;Switch_B1.c: 192: } else {
  5830  030B  0008               	return
  5831  030C                     l10375:	
  5832                           
  5833                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  5834  030C  0875               	movf	_Sw,w
  5835  030D  0086               	movwf	6
  5836  030E  0876               	movf	_Sw+1,w
  5837  030F  0087               	movwf	7
  5838  0310  1D01               	btfss	1,2
  5839  0311  0008               	return
  5840                           
  5841                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  5842  0312  3001               	movlw	1
  5843  0313  0020               	movlb	0	; select bank0
  5844  0314  00EB               	movwf	??_setSw_Main
  5845  0315  0875               	movf	_Sw,w
  5846  0316  0086               	movwf	6
  5847  0317  0876               	movf	_Sw+1,w
  5848  0318  0087               	movwf	7
  5849  0319  3142               	addfsr 1,2
  5850  031A  086B               	movf	??_setSw_Main,w
  5851  031B  0781               	addwf	1,f
  5852                           
  5853                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  5854  031C  0875               	movf	_Sw,w
  5855  031D  0086               	movwf	6
  5856  031E  0876               	movf	_Sw+1,w
  5857  031F  0087               	movwf	7
  5858  0320  3142               	addfsr 1,2
  5859  0321  3005               	movlw	5
  5860  0322  0201               	subwf	1,w
  5861  0323  1C03               	skipc
  5862  0324  0008               	return
  5863                           
  5864                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  5865  0325  0875               	movf	_Sw,w
  5866  0326  0086               	movwf	6
  5867  0327  0876               	movf	_Sw+1,w
  5868  0328  0087               	movwf	7
  5869  0329  3142               	addfsr 1,2
  5870  032A  0181               	clrf	1
  5871                           
  5872                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  5873  032B  0875               	movf	_Sw,w
  5874  032C  0086               	movwf	6
  5875  032D  0876               	movf	_Sw+1,w
  5876  032E  0087               	movwf	7
  5877  032F  1101               	bcf	1,2
  5878                           
  5879                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  5880  0330  0875               	movf	_Sw,w
  5881  0331  0086               	movwf	6
  5882  0332  0876               	movf	_Sw+1,w
  5883  0333  0087               	movwf	7
  5884  0334  3143               	addfsr 1,3
  5885  0335  3000               	movlw	0
  5886  0336  3FC0               	movwi [0]fsr1
  5887  0337  3FC1               	movwi [1]fsr1
  5888                           
  5889                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  5890  0338  0875               	movf	_Sw,w
  5891  0339  0086               	movwf	6
  5892  033A  0876               	movf	_Sw+1,w
  5893  033B  0087               	movwf	7
  5894  033C  1181               	bcf	1,3
  5895                           
  5896                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  5897  033D  0875               	movf	_Sw,w
  5898  033E  0086               	movwf	6
  5899  033F  0876               	movf	_Sw+1,w
  5900  0340  0087               	movwf	7
  5901  0341  3145               	addfsr 1,5
  5902  0342  3000               	movlw	0
  5903  0343  3FC0               	movwi [0]fsr1
  5904  0344  3FC1               	movwi [1]fsr1
  5905                           
  5906                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  5907  0345  0875               	movf	_Sw,w
  5908  0346  0086               	movwf	6
  5909  0347  0876               	movf	_Sw+1,w
  5910  0348  0087               	movwf	7
  5911  0349  1201               	bcf	1,4
  5912                           
  5913                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  5914  034A  0875               	movf	_Sw,w
  5915  034B  0086               	movwf	6
  5916  034C  0876               	movf	_Sw+1,w
  5917  034D  0087               	movwf	7
  5918  034E  3147               	addfsr 1,7
  5919  034F  3000               	movlw	0
  5920  0350  3FC0               	movwi [0]fsr1
  5921  0351  3FC1               	movwi [1]fsr1
  5922                           
  5923                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  5924  0352  0875               	movf	_Sw,w
  5925  0353  0086               	movwf	6
  5926  0354  0876               	movf	_Sw+1,w
  5927  0355  0087               	movwf	7
  5928  0356  1281               	bcf	1,5
  5929                           
  5930                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5931  0357  086D               	movf	setSw_Main@sw,w
  5932  0358  3194  24B1  3181   	fcall	_setDimmerLights_SwOff
  5933                           
  5934                           ;Switch_B1.c: 209: setRF_Learn(0);
  5935  035B  3000               	movlw	0
  5936  035C  319D  2545         	fcall	_setRF_Learn
  5937                           
  5938                           ;Switch_B1.c: 211: }
  5939                           ;Switch_B1.c: 212: }
  5940                           ;Switch_B1.c: 213: }
  5941                           ;Switch_B1.c: 214: } else {
  5942  035E  0008               	return
  5943  035F                     l2670:	
  5944                           
  5945                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5946  035F  0021               	movlb	1	; select bank1
  5947  0360  1C2E               	btfss	_myMain^(0+128),0
  5948  0361  0008               	return
  5949                           
  5950                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5951  0362  0875               	movf	_Sw,w
  5952  0363  0086               	movwf	6
  5953  0364  0876               	movf	_Sw+1,w
  5954  0365  0087               	movwf	7
  5955  0366  1401               	bsf	1,0
  5956  0367  0008               	return
  5957  0368                     __end_of_setSw_Main:	
  5958                           
  5959                           	psect	text14
  5960  1D45                     __ptext14:	
  5961 ;; *************** function _setRF_Learn *****************
  5962 ;; Defined at:
  5963 ;;		line 23 in file "../src/RF_Control_B1.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;  command         1    wreg     unsigned char 
  5966 ;; Auto vars:     Size  Location     Type
  5967 ;;  command         1    1[BANK0 ] unsigned char 
  5968 ;; Return value:  Size  Location     Type
  5969 ;;		None               void
  5970 ;; Registers used:
  5971 ;;		wreg, status,2, status,0
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;Total ram usage:        2 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:    4
  5984 ;; This function calls:
  5985 ;;		Nothing
  5986 ;; This function is called by:
  5987 ;;		_setSw_Main
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           
  5992                           ;psect for function _setRF_Learn
  5993  1D45                     _setRF_Learn:	
  5994                           
  5995                           ;incstack = 0
  5996                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5997                           ;setRF_Learn@command stored from wreg
  5998  1D45  0020               	movlb	0	; select bank0
  5999  1D46  00A1               	movwf	setRF_Learn@command
  6000                           
  6001                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  6002  1D47  0821               	movf	setRF_Learn@command,w
  6003  1D48  3A01               	xorlw	1
  6004  1D49  3000               	movlw	0
  6005  1D4A  1903               	skipnz
  6006  1D4B  3001               	movlw	1
  6007  1D4C  00A0               	movwf	??_setRF_Learn
  6008  1D4D  0EA0               	swapf	??_setRF_Learn,f
  6009  1D4E  0DA0               	rlf	??_setRF_Learn,f
  6010  1D4F  0DA0               	rlf	??_setRF_Learn,f
  6011  1D50  0021               	movlb	1	; select bank1
  6012  1D51  0820               	movf	_RF1^(0+128),w
  6013  1D52  0020               	movlb	0	; select bank0
  6014  1D53  0620               	xorwf	??_setRF_Learn,w
  6015  1D54  39BF               	andlw	-65
  6016  1D55  0620               	xorwf	??_setRF_Learn,w
  6017  1D56  0021               	movlb	1	; select bank1
  6018  1D57  00A0               	movwf	_RF1^(0+128)
  6019  1D58  0008               	return
  6020  1D59                     __end_of_setRF_Learn:	
  6021                           
  6022                           	psect	text15
  6023  10D6                     __ptext15:	
  6024 ;; *************** function _setDimmerLights_AdjOn *****************
  6025 ;; Defined at:
  6026 ;;		line 497 in file "../src/Dimmer_B1.c"
  6027 ;; Parameters:    Size  Location     Type
  6028 ;;  sw              1    wreg     unsigned char 
  6029 ;; Auto vars:     Size  Location     Type
  6030 ;;  sw              1    2[BANK0 ] unsigned char 
  6031 ;; Return value:  Size  Location     Type
  6032 ;;		None               void
  6033 ;; Registers used:
  6034 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6035 ;; Tracked objects:
  6036 ;;		On entry : 0/0
  6037 ;;		On exit  : 0/0
  6038 ;;		Unchanged: 0/0
  6039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6043 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6044 ;;Total ram usage:        1 bytes
  6045 ;; Hardware stack levels used:    1
  6046 ;; Hardware stack levels required when called:    5
  6047 ;; This function calls:
  6048 ;;		_DimmerLightsPointSelect
  6049 ;; This function is called by:
  6050 ;;		_setSw_Main
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           
  6055                           ;psect for function _setDimmerLights_AdjOn
  6056  10D6                     _setDimmerLights_AdjOn:	
  6057                           
  6058                           ;incstack = 0
  6059                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6060                           ;setDimmerLights_AdjOn@sw stored from wreg
  6061  10D6  0020               	movlb	0	; select bank0
  6062  10D7  00A2               	movwf	setDimmerLights_AdjOn@sw
  6063                           
  6064                           ;Dimmer_B1.c: 498: DimmerLightsPointSelect(sw);
  6065  10D8  0822               	movf	setDimmerLights_AdjOn@sw,w
  6066  10D9  319C  2482  3190   	fcall	_DimmerLightsPointSelect
  6067                           
  6068                           ;Dimmer_B1.c: 508: if (DimmerLights->Trigger == 0) {
  6069  10DC  0020               	movlb	0	; select bank0
  6070  10DD  086F               	movf	_DimmerLights,w
  6071  10DE  3E0A               	addlw	10
  6072  10DF  0086               	movwf	6
  6073  10E0  3001               	movlw	1	; select bank2/3
  6074  10E1  0087               	movwf	7
  6075  10E2  1881               	btfsc	1,1
  6076  10E3  0008               	return
  6077                           
  6078                           ;Dimmer_B1.c: 509: if (DimmerLights->SwFlag == 1) {
  6079  10E4  086F               	movf	_DimmerLights,w
  6080  10E5  3E0B               	addlw	11
  6081  10E6  0086               	movwf	6
  6082  10E7  3001               	movlw	1	; select bank2/3
  6083  10E8  0087               	movwf	7
  6084  10E9  1C81               	btfss	1,1
  6085  10EA  0008               	return
  6086                           
  6087                           ;Dimmer_B1.c: 510: DimmerLights->SwAdj = 1;
  6088  10EB  086F               	movf	_DimmerLights,w
  6089  10EC  3E0B               	addlw	11
  6090  10ED  0086               	movwf	6
  6091  10EE  3001               	movlw	1	; select bank2/3
  6092  10EF  0087               	movwf	7
  6093  10F0  1501               	bsf	1,2
  6094                           
  6095                           ;Dimmer_B1.c: 511: DimmerLights->Status = 1;
  6096  10F1  086F               	movf	_DimmerLights,w
  6097  10F2  3E02               	addlw	2
  6098  10F3  0086               	movwf	6
  6099  10F4  3001               	movlw	1	; select bank2/3
  6100  10F5  0087               	movwf	7
  6101  10F6  1481               	bsf	1,1
  6102                           
  6103                           ;Dimmer_B1.c: 513: DimmerLights->TriggerAdj = 1;
  6104  10F7  086F               	movf	_DimmerLights,w
  6105  10F8  3E0A               	addlw	10
  6106  10F9  0086               	movwf	6
  6107  10FA  3001               	movlw	1	; select bank2/3
  6108  10FB  0087               	movwf	7
  6109  10FC  1581               	bsf	1,3
  6110                           
  6111                           ;Dimmer_B1.c: 514: DimmerLights->SwitchAdj = 1;
  6112  10FD  086F               	movf	_DimmerLights,w
  6113  10FE  3E0A               	addlw	10
  6114  10FF  0086               	movwf	6
  6115  1100  3001               	movlw	1	; select bank2/3
  6116  1101  0087               	movwf	7
  6117  1102  1501               	bsf	1,2
  6118  1103  0008               	return
  6119  1104                     __end_of_setDimmerLights_AdjOn:	
  6120                           
  6121                           	psect	text16
  6122  1E84                     __ptext16:	
  6123 ;; *************** function _getSw_KeyStatus *****************
  6124 ;; Defined at:
  6125 ;;		line 222 in file "../src/Switch_B1.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;  sw              1    wreg     unsigned char 
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;  sw              1    4[BANK0 ] unsigned char 
  6130 ;;  status          1    3[BANK0 ] unsigned char 
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      unsigned char 
  6133 ;; Registers used:
  6134 ;;		wreg, status,2
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6141 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6143 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6144 ;;Total ram usage:        5 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    4
  6147 ;; This function calls:
  6148 ;;		Nothing
  6149 ;; This function is called by:
  6150 ;;		_setSw_Main
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           
  6155                           ;psect for function _getSw_KeyStatus
  6156  1E84                     _getSw_KeyStatus:	
  6157                           
  6158                           ;incstack = 0
  6159                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6160                           ;getSw_KeyStatus@sw stored from wreg
  6161  1E84  0020               	movlb	0	; select bank0
  6162  1E85  00A4               	movwf	getSw_KeyStatus@sw
  6163                           
  6164                           ;Switch_B1.c: 223: char status = 0;
  6165  1E86  01A3               	clrf	getSw_KeyStatus@status
  6166                           
  6167                           ;Switch_B1.c: 235: if (sw == 1) {
  6168  1E87  0824               	movf	getSw_KeyStatus@sw,w
  6169  1E88  3A01               	xorlw	1
  6170  1E89  1D03               	skipz
  6171  1E8A  2E93               	goto	l9911
  6172                           
  6173                           ;Switch_B1.c: 236: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6174  1E8B  01A1               	clrf	_getSw_KeyStatus$6297
  6175  1E8C  0AA1               	incf	_getSw_KeyStatus$6297,f
  6176  1E8D  1F0C               	btfss	12,6	;volatile
  6177  1E8E  1A0C               	btfsc	12,4	;volatile
  6178  1E8F  2E91               	goto	l9909
  6179  1E90  01A1               	clrf	_getSw_KeyStatus$6297
  6180  1E91                     l9909:	
  6181  1E91  0821               	movf	_getSw_KeyStatus$6297,w
  6182  1E92  2E9E               	goto	L2
  6183  1E93                     l9911:	
  6184                           ;Switch_B1.c: 237: } else if (sw == 2) {
  6185                           
  6186  1E93  0824               	movf	getSw_KeyStatus@sw,w
  6187  1E94  3A02               	xorlw	2
  6188  1E95  1D03               	skipz
  6189  1E96  2EA1               	goto	l9921
  6190                           
  6191                           ;Switch_B1.c: 238: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6192  1E97  01A2               	clrf	_getSw_KeyStatus$6298
  6193  1E98  0AA2               	incf	_getSw_KeyStatus$6298,f
  6194  1E99  1C0C               	btfss	12,0	;volatile
  6195  1E9A  188D               	btfsc	13,1	;volatile
  6196  1E9B  2E9D               	goto	l9919
  6197  1E9C  01A2               	clrf	_getSw_KeyStatus$6298
  6198  1E9D                     l9919:	
  6199  1E9D  0822               	movf	_getSw_KeyStatus$6298,w
  6200  1E9E                     L2:	
  6201  1E9E  00A0               	movwf	??_getSw_KeyStatus
  6202  1E9F  0820               	movf	??_getSw_KeyStatus,w
  6203  1EA0  00A3               	movwf	getSw_KeyStatus@status
  6204  1EA1                     l9921:	
  6205                           
  6206                           ;Switch_B1.c: 239: }
  6207                           ;Switch_B1.c: 246: return status;
  6208  1EA1  0823               	movf	getSw_KeyStatus@status,w
  6209  1EA2  0008               	return
  6210  1EA3                     __end_of_getSw_KeyStatus:	
  6211                           
  6212                           	psect	text17
  6213  1D31                     __ptext17:	
  6214 ;; *************** function _SwPointSelect *****************
  6215 ;; Defined at:
  6216 ;;		line 25 in file "../src/Switch_B1.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;  sw              1    wreg     unsigned char 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  sw              1    0[BANK0 ] unsigned char 
  6221 ;; Return value:  Size  Location     Type
  6222 ;;		None               void
  6223 ;; Registers used:
  6224 ;;		wreg, status,2, status,0
  6225 ;; Tracked objects:
  6226 ;;		On entry : 0/0
  6227 ;;		On exit  : 0/0
  6228 ;;		Unchanged: 0/0
  6229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;Total ram usage:        1 bytes
  6235 ;; Hardware stack levels used:    1
  6236 ;; Hardware stack levels required when called:    4
  6237 ;; This function calls:
  6238 ;;		Nothing
  6239 ;; This function is called by:
  6240 ;;		_setSw_Main
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           
  6245                           ;psect for function _SwPointSelect
  6246  1D31                     _SwPointSelect:	
  6247                           
  6248                           ;incstack = 0
  6249                           ; Regs used in _SwPointSelect: [wreg+status,2+status,0]
  6250                           ;SwPointSelect@sw stored from wreg
  6251  1D31  0020               	movlb	0	; select bank0
  6252  1D32  00A0               	movwf	SwPointSelect@sw
  6253                           
  6254                           ;Switch_B1.c: 28: if (sw == 1) {
  6255  1D33  0820               	movf	SwPointSelect@sw,w
  6256  1D34  3A01               	xorlw	1
  6257  1D35  1D03               	skipz
  6258  1D36  2D3C               	goto	l9895
  6259                           
  6260                           ;Switch_B1.c: 29: Sw = &Sw1;
  6261  1D37  30E0               	movlw	low _Sw1
  6262  1D38  00F5               	movwf	_Sw
  6263  1D39  3001               	movlw	high _Sw1
  6264  1D3A  00F6               	movwf	_Sw+1
  6265                           
  6266                           ;Switch_B1.c: 30: }
  6267  1D3B  0008               	return
  6268  1D3C                     l9895:	
  6269                           
  6270                           ;Switch_B1.c: 33: else if (sw == 2) {
  6271  1D3C  0820               	movf	SwPointSelect@sw,w
  6272  1D3D  3A02               	xorlw	2
  6273  1D3E  1D03               	skipz
  6274  1D3F  0008               	return
  6275                           
  6276                           ;Switch_B1.c: 34: Sw = &Sw2;
  6277  1D40  3045               	movlw	low _Sw2
  6278  1D41  00F5               	movwf	_Sw
  6279  1D42  3002               	movlw	high _Sw2
  6280  1D43  00F6               	movwf	_Sw+1
  6281  1D44  0008               	return
  6282  1D45                     __end_of_SwPointSelect:	
  6283                           
  6284                           	psect	text18
  6285  1BAB                     __ptext18:	
  6286 ;; *************** function _Switch_Initialization *****************
  6287 ;; Defined at:
  6288 ;;		line 46 in file "../src/Switch_B1.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;		None
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;		None
  6293 ;; Return value:  Size  Location     Type
  6294 ;;		None               void
  6295 ;; Registers used:
  6296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6297 ;; Tracked objects:
  6298 ;;		On entry : 0/0
  6299 ;;		On exit  : 0/0
  6300 ;;		Unchanged: 0/0
  6301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;Total ram usage:        0 bytes
  6307 ;; Hardware stack levels used:    1
  6308 ;; Hardware stack levels required when called:    7
  6309 ;; This function calls:
  6310 ;;		_TouchPower
  6311 ;;		_setSw_Initialization
  6312 ;; This function is called by:
  6313 ;;		_main
  6314 ;; This function uses a non-reentrant model
  6315 ;;
  6316                           
  6317                           
  6318                           ;psect for function _Switch_Initialization
  6319  1BAB                     _Switch_Initialization:	
  6320                           
  6321                           ;Switch_B1.c: 47: TouchPower();
  6322                           
  6323                           ;incstack = 0
  6324                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6325  1BAB  319D  25AD  319B   	fcall	_TouchPower
  6326                           
  6327                           ;Switch_B1.c: 49: WPUB1 = 0;
  6328  1BAE  0024               	movlb	4	; select bank4
  6329  1BAF  108D               	bcf	13,1	;volatile
  6330                           
  6331                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6332  1BB0  3001               	movlw	1
  6333  1BB1  319B  231B  319B   	fcall	_setSw_Initialization
  6334                           
  6335                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6336  1BB4  3002               	movlw	2
  6337  1BB5  319B  231B         	fcall	_setSw_Initialization
  6338  1BB7  0008               	return
  6339  1BB8                     __end_of_Switch_Initialization:	
  6340                           
  6341                           	psect	text19
  6342  1B1B                     __ptext19:	
  6343 ;; *************** function _setSw_Initialization *****************
  6344 ;; Defined at:
  6345 ;;		line 93 in file "../src/Switch_B1.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;  sw              1    wreg     unsigned char 
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;  sw              1    4[BANK0 ] unsigned char 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;		None               void
  6352 ;; Registers used:
  6353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;Total ram usage:        1 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    6
  6366 ;; This function calls:
  6367 ;;		_setLED
  6368 ;; This function is called by:
  6369 ;;		_Switch_Initialization
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           
  6374                           ;psect for function _setSw_Initialization
  6375  1B1B                     _setSw_Initialization:	
  6376                           
  6377                           ;incstack = 0
  6378                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6379                           ;setSw_Initialization@sw stored from wreg
  6380  1B1B  0020               	movlb	0	; select bank0
  6381  1B1C  00A4               	movwf	setSw_Initialization@sw
  6382                           
  6383                           ;Switch_B1.c: 94: setLED(sw, 1);
  6384  1B1D  01A2               	clrf	setLED@command
  6385  1B1E  0AA2               	incf	setLED@command,f
  6386  1B1F  0824               	movf	setSw_Initialization@sw,w
  6387  1B20  3195  25F4         	fcall	_setLED
  6388  1B22  0008               	return
  6389  1B23                     __end_of_setSw_Initialization:	
  6390                           
  6391                           	psect	text20
  6392  1DAD                     __ptext20:	
  6393 ;; *************** function _TouchPower *****************
  6394 ;; Defined at:
  6395 ;;		line 10 in file "../src/Switch_B1.c"
  6396 ;; Parameters:    Size  Location     Type
  6397 ;;		None
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;		None
  6400 ;; Return value:  Size  Location     Type
  6401 ;;		None               void
  6402 ;; Registers used:
  6403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6413 ;;Total ram usage:        0 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    5
  6416 ;; This function calls:
  6417 ;;		_Timeout_Counter
  6418 ;;		_set_TimeoutCleared
  6419 ;; This function is called by:
  6420 ;;		_Switch_Initialization
  6421 ;;		_Switch_Main
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           
  6426                           ;psect for function _TouchPower
  6427  1DAD                     _TouchPower:	
  6428                           
  6429                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6430                           
  6431                           ;incstack = 0
  6432                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6433  1DAD  0021               	movlb	1	; select bank1
  6434  1DAE  1C2E               	btfss	_myMain^(0+128),0
  6435  1DAF  0008               	return
  6436                           
  6437                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6438  1DB0  0020               	movlb	0	; select bank0
  6439  1DB1  1A8E               	btfsc	14,5	;volatile
  6440  1DB2  0008               	return
  6441  1DB3  2DB9               	goto	l10307
  6442  1DB4                     l2648:	
  6443                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6444                           
  6445                           
  6446                           ;Switch_B1.c: 14: RC5 = 1;
  6447  1DB4  0020               	movlb	0	; select bank0
  6448  1DB5  168E               	bsf	14,5	;volatile
  6449                           
  6450                           ;Switch_B1.c: 15: Timeout_Counter();
  6451  1DB6  319D  2598  319D   	fcall	_Timeout_Counter
  6452  1DB9                     l10307:	
  6453  1DB9  0020               	movlb	0	; select bank0
  6454  1DBA  1A8E               	btfsc	14,5	;volatile
  6455  1DBB  2DBF               	goto	l10311
  6456  1DBC  0021               	movlb	1	; select bank1
  6457  1DBD  1D39               	btfss	(_myMain^(0+128)+11),2
  6458  1DBE  2DB4               	goto	l2648
  6459  1DBF                     l10311:	
  6460                           
  6461                           ;Switch_B1.c: 16: }
  6462                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6463  1DBF  319A  22D5         	fcall	_set_TimeoutCleared
  6464  1DC1  0008               	return
  6465  1DC2                     __end_of_TouchPower:	
  6466                           
  6467                           	psect	text21
  6468  1AD5                     __ptext21:	
  6469 ;; *************** function _set_TimeoutCleared *****************
  6470 ;; Defined at:
  6471 ;;		line 283 in file "../src/Main_B1.c"
  6472 ;; Parameters:    Size  Location     Type
  6473 ;;		None
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;		None
  6476 ;; Return value:  Size  Location     Type
  6477 ;;		None               void
  6478 ;; Registers used:
  6479 ;;		status,2
  6480 ;; Tracked objects:
  6481 ;;		On entry : 0/0
  6482 ;;		On exit  : 0/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;Total ram usage:        0 bytes
  6490 ;; Hardware stack levels used:    1
  6491 ;; Hardware stack levels required when called:    4
  6492 ;; This function calls:
  6493 ;;		Nothing
  6494 ;; This function is called by:
  6495 ;;		_getAD
  6496 ;;		_TouchPower
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           
  6501                           ;psect for function _set_TimeoutCleared
  6502  1AD5                     _set_TimeoutCleared:	
  6503                           
  6504                           ;Main_B1.c: 284: myMain.Timeout = 0;
  6505                           
  6506                           ;incstack = 0
  6507                           ; Regs used in _set_TimeoutCleared: [status,2]
  6508  1AD5  0021               	movlb	1	; select bank1
  6509  1AD6  1139               	bcf	(_myMain^(0+128)+11),2
  6510                           
  6511                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
  6512  1AD7  01BA               	clrf	(_myMain^(0+128)+12)
  6513  1AD8  01BB               	clrf	((_myMain+1)^(0+128)+12)
  6514  1AD9  0008               	return
  6515  1ADA                     __end_of_set_TimeoutCleared:	
  6516                           
  6517                           	psect	text22
  6518  1D98                     __ptext22:	
  6519 ;; *************** function _Timeout_Counter *****************
  6520 ;; Defined at:
  6521 ;;		line 274 in file "../src/Main_B1.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;		None
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;		None
  6526 ;; Return value:  Size  Location     Type
  6527 ;;		None               void
  6528 ;; Registers used:
  6529 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;Total ram usage:        0 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:    4
  6542 ;; This function calls:
  6543 ;;		Nothing
  6544 ;; This function is called by:
  6545 ;;		_getAD
  6546 ;;		_TouchPower
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           
  6551                           ;psect for function _Timeout_Counter
  6552  1D98                     _Timeout_Counter:	
  6553                           
  6554                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
  6555                           
  6556                           ;incstack = 0
  6557                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6558  1D98  3001               	movlw	1
  6559  1D99  0021               	movlb	1	; select bank1
  6560  1D9A  07BA               	addwf	(_myMain^(0+128)+12),f
  6561  1D9B  3000               	movlw	0
  6562  1D9C  3DBB               	addwfc	((_myMain+1)^(0+128)+12),f
  6563                           
  6564                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 25000) {
  6565  1D9D  300C               	movlw	12
  6566  1D9E  3EAE               	addlw	_myMain& (0+255)
  6567  1D9F  0086               	movwf	6
  6568  1DA0  0187               	clrf	7
  6569  1DA1  3F40               	moviw [0]fsr1
  6570  1DA2  3AA8               	xorlw	168
  6571  1DA3  1D03               	skipz
  6572  1DA4  2DA7               	goto	u10705
  6573  1DA5  3F41               	moviw [1]fsr1
  6574  1DA6  3A61               	xorlw	97
  6575  1DA7                     u10705:	
  6576  1DA7  1D03               	skipz
  6577  1DA8  0008               	return
  6578                           
  6579                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
  6580  1DA9  01BA               	clrf	(_myMain^(0+128)+12)
  6581  1DAA  01BB               	clrf	((_myMain+1)^(0+128)+12)
  6582                           
  6583                           ;Main_B1.c: 278: myMain.Timeout = 1;
  6584  1DAB  1539               	bsf	(_myMain^(0+128)+11),2
  6585  1DAC  0008               	return
  6586  1DAD                     __end_of_Timeout_Counter:	
  6587                           
  6588                           	psect	text23
  6589  1AB8                     __ptext23:	
  6590 ;; *************** function _RF_Main *****************
  6591 ;; Defined at:
  6592 ;;		line 16 in file "../src/RF_Control_B1.c"
  6593 ;; Parameters:    Size  Location     Type
  6594 ;;		None
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;		None
  6597 ;; Return value:  Size  Location     Type
  6598 ;;		None               void
  6599 ;; Registers used:
  6600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6601 ;; Tracked objects:
  6602 ;;		On entry : 0/0
  6603 ;;		On exit  : 0/0
  6604 ;;		Unchanged: 0/0
  6605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;Total ram usage:        0 bytes
  6611 ;; Hardware stack levels used:    1
  6612 ;; Hardware stack levels required when called:   13
  6613 ;; This function calls:
  6614 ;;		_setRF_Main
  6615 ;; This function is called by:
  6616 ;;		_main
  6617 ;; This function uses a non-reentrant model
  6618 ;;
  6619                           
  6620                           
  6621                           ;psect for function _RF_Main
  6622  1AB8                     _RF_Main:	
  6623                           
  6624                           ;RF_Control_B1.c: 18: setRF_Main();
  6625                           
  6626                           ;incstack = 0
  6627                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6628  1AB8  318D  2503         	fcall	_setRF_Main
  6629  1ABA  0008               	return
  6630  1ABB                     __end_of_RF_Main:	
  6631                           
  6632                           	psect	text24
  6633  0D03                     __ptext24:	
  6634 ;; *************** function _setRF_Main *****************
  6635 ;; Defined at:
  6636 ;;		line 53 in file "../src/RF_Control_B1.c"
  6637 ;; Parameters:    Size  Location     Type
  6638 ;;		None
  6639 ;; Auto vars:     Size  Location     Type
  6640 ;;  error           1    1[BANK2 ] unsigned char 
  6641 ;;  loop_f          1    0[BANK2 ] unsigned char 
  6642 ;; Return value:  Size  Location     Type
  6643 ;;		None               void
  6644 ;; Registers used:
  6645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6646 ;; Tracked objects:
  6647 ;;		On entry : 0/0
  6648 ;;		On exit  : 0/0
  6649 ;;		Unchanged: 0/0
  6650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6652 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  6653 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6654 ;;      Totals:         0       0       1       2       0       0       0       0       0       0       0       0       
      +0       0
  6655 ;;Total ram usage:        3 bytes
  6656 ;; Hardware stack levels used:    1
  6657 ;; Hardware stack levels required when called:   12
  6658 ;; This function calls:
  6659 ;;		_CC2500_PowerOnInitial
  6660 ;;		_CC2500_RxData
  6661 ;;		_CC2500_TxData
  6662 ;;		_CC2500_WriteCommand
  6663 ;;		_RF_RxDisable
  6664 ;;		_getBuz_GO
  6665 ;;		_getRF_KeyStatus
  6666 ;;		_getRxData
  6667 ;; This function is called by:
  6668 ;;		_RF_Main
  6669 ;; This function uses a non-reentrant model
  6670 ;;
  6671                           
  6672                           
  6673                           ;psect for function _setRF_Main
  6674  0D03                     _setRF_Main:	
  6675                           
  6676                           ;RF_Control_B1.c: 54: char loop_f = 0, error = 0;
  6677                           
  6678                           ;incstack = 0
  6679                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6680  0D03  0022               	movlb	2	; select bank2
  6681  0D04  01EB               	clrf	setRF_Main@loop_f^(0+256)
  6682  0D05  01EC               	clrf	setRF_Main@error^(0+256)
  6683                           
  6684                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6685  0D06  0021               	movlb	1	; select bank1
  6686  0D07  1C20               	btfss	_RF1^(0+128),0
  6687  0D08  2D85               	goto	l2255
  6688                           
  6689                           ;RF_Control_B1.c: 57: if (getBuz_GO() == 0) {
  6690  0D09  319C  2405  318D   	fcall	_getBuz_GO
  6691  0D0C  0020               	movlb	0	; select bank0
  6692  0D0D  0821               	movf	?_getBuz_GO+1,w
  6693  0D0E  0420               	iorwf	?_getBuz_GO,w
  6694  0D0F  1D03               	skipz
  6695  0D10  2D64               	goto	l10275
  6696                           
  6697                           ;RF_Control_B1.c: 60: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6698  0D11  319C  2416  318D   	fcall	_getRF_KeyStatus
  6699  0D14  3A01               	xorlw	1
  6700  0D15  3000               	movlw	0
  6701  0D16  1903               	skipnz
  6702  0D17  3001               	movlw	1
  6703  0D18  0021               	movlb	1	; select bank1
  6704  0D19  00EF               	movwf	??_setRF_Main^(0+128)
  6705  0D1A  0CEF               	rrf	??_setRF_Main^(0+128),f
  6706  0D1B  0CEF               	rrf	??_setRF_Main^(0+128),f
  6707  0D1C  0820               	movf	_RF1^(0+128),w
  6708  0D1D  066F               	xorwf	??_setRF_Main^(0+128),w
  6709  0D1E  397F               	andlw	-129
  6710  0D1F  066F               	xorwf	??_setRF_Main^(0+128),w
  6711  0D20  00A0               	movwf	_RF1^(0+128)
  6712                           
  6713                           ;RF_Control_B1.c: 65: if (RF1.Key == 0 || RF1.Learn == 1) {
  6714  0D21  1FA0               	btfss	_RF1^(0+128),7
  6715  0D22  2D25               	goto	l2259
  6716  0D23  1F20               	btfss	_RF1^(0+128),6
  6717  0D24  2D64               	goto	l10275
  6718  0D25                     l2259:	
  6719                           
  6720                           ;RF_Control_B1.c: 67: if (RF1.TransceiveGO == 1) {
  6721  0D25  1D20               	btfss	_RF1^(0+128),2
  6722  0D26  2D35               	goto	l2260
  6723                           
  6724                           ;RF_Control_B1.c: 68: RF1.TransceiveGO = 0;
  6725  0D27  1120               	bcf	_RF1^(0+128),2
  6726                           
  6727                           ;RF_Control_B1.c: 69: if (RF1.Learn == 0) {
  6728  0D28  1B20               	btfsc	_RF1^(0+128),6
  6729  0D29  2D64               	goto	l10275
  6730                           
  6731                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  6732  0D2A  01A2               	clrf	(_RF1^(0+128)+2)
  6733  0D2B  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6734                           
  6735                           ;RF_Control_B1.c: 71: RF1.CorrectionCounter = 0;
  6736  0D2C  01AA               	clrf	(_RF1^(0+128)+10)
  6737  0D2D  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6738                           
  6739                           ;RF_Control_B1.c: 72: RF_RxDisable();
  6740  0D2E  319B  23C6  318D   	fcall	_RF_RxDisable
  6741                           
  6742                           ;RF_Control_B1.c: 73: CC2500_TxData();
  6743  0D31  318B  232F  318D   	fcall	_CC2500_TxData
  6744                           
  6745                           ;RF_Control_B1.c: 75: }
  6746                           ;RF_Control_B1.c: 76: } else {
  6747  0D34  2D64               	goto	l10275
  6748  0D35                     l2260:	
  6749                           
  6750                           ;RF_Control_B1.c: 77: if (RF1.RxStatus == 1) {
  6751  0D35  1DA0               	btfss	_RF1^(0+128),3
  6752  0D36  2D44               	goto	l10261
  6753                           
  6754                           ;RF_Control_B1.c: 79: CC2500_RxData();
  6755  0D37  318A  22C4  318D   	fcall	_CC2500_RxData
  6756                           
  6757                           ;RF_Control_B1.c: 81: if (RF1.ReceiveGO == 1) {
  6758  0D3A  0021               	movlb	1	; select bank1
  6759  0D3B  1CA0               	btfss	_RF1^(0+128),1
  6760  0D3C  2D64               	goto	l10275
  6761                           
  6762                           ;RF_Control_B1.c: 82: RF1.ReceiveGO = 0;
  6763  0D3D  10A0               	bcf	_RF1^(0+128),1
  6764                           
  6765                           ;RF_Control_B1.c: 83: RF1.CorrectionCounter = 0;
  6766  0D3E  01AA               	clrf	(_RF1^(0+128)+10)
  6767  0D3F  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6768                           
  6769                           ;RF_Control_B1.c: 91: getRxData();
  6770  0D40  318C  2408  318D   	fcall	_getRxData
  6771                           
  6772                           ;RF_Control_B1.c: 94: }
  6773                           ;RF_Control_B1.c: 95: } else {
  6774  0D43  2D64               	goto	l10275
  6775  0D44                     l10261:	
  6776                           
  6777                           ;RF_Control_B1.c: 96: RF1.Count++;
  6778  0D44  3001               	movlw	1
  6779  0D45  0021               	movlb	1	; select bank1
  6780  0D46  07A2               	addwf	(_RF1^(0+128)+2),f
  6781  0D47  3000               	movlw	0
  6782  0D48  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6783                           
  6784                           ;RF_Control_B1.c: 97: if (RF1.Count == RF1.RunTime) {
  6785  0D49  3002               	movlw	2
  6786  0D4A  3EA0               	addlw	_RF1& (0+255)
  6787  0D4B  0086               	movwf	6
  6788  0D4C  0187               	clrf	7
  6789  0D4D  3F40               	moviw [0]fsr1
  6790  0D4E  0627               	xorwf	(_RF1^(0+128)+7),w
  6791  0D4F  1D03               	skipz
  6792  0D50  2D53               	goto	u11525
  6793  0D51  3F41               	moviw [1]fsr1
  6794  0D52  0628               	xorwf	((_RF1+1)^(0+128)+7),w
  6795  0D53                     u11525:	
  6796  0D53  1D03               	skipz
  6797  0D54  2D64               	goto	l10275
  6798                           
  6799                           ;RF_Control_B1.c: 98: RF1.Count = 0;
  6800  0D55  01A2               	clrf	(_RF1^(0+128)+2)
  6801  0D56  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6802                           
  6803                           ;RF_Control_B1.c: 100: RF1.RxStatus = 1;
  6804  0D57  15A0               	bsf	_RF1^(0+128),3
  6805                           
  6806                           ;RF_Control_B1.c: 101: CC2500_WriteCommand(0x36);
  6807  0D58  3036               	movlw	54
  6808  0D59  319D  25F5  318D   	fcall	_CC2500_WriteCommand
  6809                           
  6810                           ;RF_Control_B1.c: 102: CC2500_WriteCommand(0x3A);
  6811  0D5C  303A               	movlw	58
  6812  0D5D  319D  25F5  318D   	fcall	_CC2500_WriteCommand
  6813                           
  6814                           ;RF_Control_B1.c: 103: CC2500_WriteCommand(0x34);
  6815  0D60  3034               	movlw	52
  6816  0D61  319D  25F5  318D   	fcall	_CC2500_WriteCommand
  6817  0D64                     l10275:	
  6818                           
  6819                           ;RF_Control_B1.c: 105: }
  6820                           ;RF_Control_B1.c: 106: }
  6821                           ;RF_Control_B1.c: 107: }
  6822                           ;RF_Control_B1.c: 108: }
  6823                           ;RF_Control_B1.c: 109: }
  6824                           ;RF_Control_B1.c: 111: RF1.CorrectionCounter++;
  6825  0D64  3001               	movlw	1
  6826  0D65  0021               	movlb	1	; select bank1
  6827  0D66  07AA               	addwf	(_RF1^(0+128)+10),f
  6828  0D67  3000               	movlw	0
  6829  0D68  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6830                           
  6831                           ;RF_Control_B1.c: 112: if (RF1.CorrectionCounter > 6000) {
  6832  0D69  3017               	movlw	23
  6833  0D6A  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6834  0D6B  3071               	movlw	113
  6835  0D6C  1903               	skipnz
  6836  0D6D  022A               	subwf	(_RF1^(0+128)+10),w
  6837  0D6E  1C03               	skipc
  6838  0D6F  2D7C               	goto	l10289
  6839                           
  6840                           ;RF_Control_B1.c: 113: RF1.CorrectionCounter = 0;
  6841  0D70  01AA               	clrf	(_RF1^(0+128)+10)
  6842  0D71  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6843                           
  6844                           ;RF_Control_B1.c: 115: RF1.RxStatus = 0;
  6845  0D72  11A0               	bcf	_RF1^(0+128),3
  6846                           
  6847                           ;RF_Control_B1.c: 116: RF1.ReceiveGO = 0;
  6848  0D73  10A0               	bcf	_RF1^(0+128),1
  6849                           
  6850                           ;RF_Control_B1.c: 117: CC2500_WriteCommand(0x36);
  6851  0D74  3036               	movlw	54
  6852  0D75  319D  25F5  318D   	fcall	_CC2500_WriteCommand
  6853                           
  6854                           ;RF_Control_B1.c: 118: CC2500_WriteCommand(0x3A);
  6855  0D78  303A               	movlw	58
  6856  0D79  319D  25F5  318D   	fcall	_CC2500_WriteCommand
  6857  0D7C                     l10289:	
  6858                           
  6859                           ;RF_Control_B1.c: 119: }
  6860                           ;RF_Control_B1.c: 121: if (RF1.Timeout == 1) {
  6861  0D7C  0021               	movlb	1	; select bank1
  6862  0D7D  1F21               	btfss	(_RF1^(0+128)+1),6
  6863  0D7E  0008               	return
  6864                           
  6865                           ;RF_Control_B1.c: 122: RF1.Timeout = 0;
  6866  0D7F  1321               	bcf	(_RF1^(0+128)+1),6
  6867                           
  6868                           ;RF_Control_B1.c: 123: CC2500_PowerOnInitial();
  6869  0D80  319D  2583         	fcall	_CC2500_PowerOnInitial
  6870                           
  6871                           ;RF_Control_B1.c: 124: RB5 = 0;
  6872  0D82  0020               	movlb	0	; select bank0
  6873  0D83  128D               	bcf	13,5	;volatile
  6874                           
  6875                           ;RF_Control_B1.c: 125: }
  6876                           ;RF_Control_B1.c: 127: } else {
  6877  0D84  0008               	return
  6878  0D85                     l2255:	
  6879                           
  6880                           ;RF_Control_B1.c: 128: if (myMain.PowerON == 1) {
  6881  0D85  1C2E               	btfss	_myMain^(0+128),0
  6882  0D86  0008               	return
  6883                           
  6884                           ;RF_Control_B1.c: 129: RF1.Enable = 1;
  6885  0D87  1420               	bsf	_RF1^(0+128),0
  6886  0D88  0008               	return
  6887  0D89                     __end_of_setRF_Main:	
  6888                           
  6889                           	psect	text25
  6890  0C08                     __ptext25:	
  6891 ;; *************** function _getRxData *****************
  6892 ;; Defined at:
  6893 ;;		line 235 in file "../src/RF_Control_B1.c"
  6894 ;; Parameters:    Size  Location     Type
  6895 ;;		None
  6896 ;; Auto vars:     Size  Location     Type
  6897 ;;  error           1    4[BANK1 ] unsigned char 
  6898 ;; Return value:  Size  Location     Type
  6899 ;;		None               void
  6900 ;; Registers used:
  6901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6902 ;; Tracked objects:
  6903 ;;		On entry : 0/0
  6904 ;;		On exit  : 0/0
  6905 ;;		Unchanged: 0/0
  6906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6910 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6911 ;;Total ram usage:        2 bytes
  6912 ;; Hardware stack levels used:    1
  6913 ;; Hardware stack levels required when called:   11
  6914 ;; This function calls:
  6915 ;;		_getMain_All_Error_Status
  6916 ;;		_setControl_Lights_Table
  6917 ;;		_setLog_Code
  6918 ;;		_setTxData
  6919 ;; This function is called by:
  6920 ;;		_setRF_Main
  6921 ;; This function uses a non-reentrant model
  6922 ;;
  6923                           
  6924                           
  6925                           ;psect for function _getRxData
  6926  0C08                     _getRxData:	
  6927                           
  6928                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  6929                           
  6930                           ;incstack = 0
  6931                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6932  0C08  3000               	movlw	0
  6933  0C09  3191  2193  318C   	fcall	_getMain_All_Error_Status
  6934  0C0C  0020               	movlb	0	; select bank0
  6935  0C0D  00EE               	movwf	??_getRxData
  6936  0C0E  086E               	movf	??_getRxData,w
  6937  0C0F  0021               	movlb	1	; select bank1
  6938  0C10  00EE               	movwf	getRxData@error^(0+128)
  6939                           
  6940                           ;RF_Control_B1.c: 237: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6941  0C11  0023               	movlb	3	; select bank3
  6942  0C12  0820               	movf	_RF_Data^(0+384),w
  6943  0C13  3AAA               	xorlw	170
  6944  0C14  1D03               	skipz
  6945  0C15  2C27               	goto	l9849
  6946  0C16  0821               	movf	(_RF_Data^(0+384)+1),w
  6947  0C17  3A01               	xorlw	1
  6948  0C18  1D03               	skipz
  6949  0C19  2C27               	goto	l9849
  6950                           
  6951                           ;RF_Control_B1.c: 239: product->Data[2] = 0x55;
  6952  0C1A  3055               	movlw	85
  6953  0C1B  0020               	movlb	0	; select bank0
  6954  0C1C  00EE               	movwf	??_getRxData
  6955  0C1D  087A               	movf	_product,w
  6956  0C1E  3E02               	addlw	2
  6957  0C1F  0086               	movwf	6
  6958  0C20  3002               	movlw	2	; select bank4/5
  6959  0C21  0087               	movwf	7
  6960  0C22  086E               	movf	??_getRxData,w
  6961  0C23  0081               	movwf	1
  6962                           
  6963                           ;RF_Control_B1.c: 240: setTxData();
  6964  0C24  318E  2610         	fcall	_setTxData
  6965                           
  6966                           ;RF_Control_B1.c: 246: } else {
  6967  0C26  0008               	return
  6968  0C27                     l9849:	
  6969                           
  6970                           ;RF_Control_B1.c: 248: if (error == 0) {
  6971  0C27  0021               	movlb	1	; select bank1
  6972  0C28  08EE               	movf	getRxData@error^(0+128),f
  6973  0C29  1D03               	skipz
  6974  0C2A  0008               	return
  6975                           
  6976                           ;RF_Control_B1.c: 249: if (RF1.Learn == 1) {
  6977  0C2B  1F20               	btfss	_RF1^(0+128),6
  6978  0C2C  2C38               	goto	l9859
  6979                           
  6980                           ;RF_Control_B1.c: 250: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6981  0C2D  0023               	movlb	3	; select bank3
  6982  0C2E  08A0               	movf	_RF_Data^(0+384),f
  6983  0C2F  1D03               	skipz
  6984  0C30  0008               	return
  6985  0C31  0821               	movf	(_RF_Data^(0+384)+1),w
  6986  0C32  3A64               	xorlw	100
  6987  0C33  1D03               	skipz
  6988  0C34  0008               	return
  6989                           
  6990                           ;RF_Control_B1.c: 251: setLog_Code();
  6991  0C35  3191  21C6         	fcall	_setLog_Code
  6992                           
  6993                           ;RF_Control_B1.c: 252: }
  6994                           ;RF_Control_B1.c: 253: } else {
  6995  0C37  0008               	return
  6996  0C38                     l9859:	
  6997                           
  6998                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6999  0C38  0023               	movlb	3	; select bank3
  7000  0C39  08A0               	movf	_RF_Data^(0+384),f
  7001  0C3A  1D03               	skipz
  7002  0C3B  2C6D               	goto	l9879
  7003  0C3C  0821               	movf	(_RF_Data^(0+384)+1),w
  7004  0C3D  3A02               	xorlw	2
  7005  0C3E  1D03               	skipz
  7006  0C3F  2C6D               	goto	l9879
  7007                           
  7008                           ;RF_Control_B1.c: 256: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7009  0C40  082C               	movf	(_RF_Data^(0+384)+12),w
  7010  0C41  3AFF               	xorlw	255
  7011  0C42  1D03               	skipz
  7012  0C43  2C4E               	goto	l9871
  7013  0C44  082D               	movf	(_RF_Data^(0+384)+13),w
  7014  0C45  3AFF               	xorlw	255
  7015  0C46  1D03               	skipz
  7016  0C47  2C4E               	goto	l9871
  7017  0C48  082E               	movf	(_RF_Data^(0+384)+14),w
  7018  0C49  3AFF               	xorlw	255
  7019  0C4A  1D03               	skipz
  7020  0C4B  2C4E               	goto	l9871
  7021                           
  7022                           ;RF_Control_B1.c: 257: __nop();
  7023  0C4C  0000               	nop
  7024                           
  7025                           ;RF_Control_B1.c: 258: } else {
  7026  0C4D  0008               	return
  7027  0C4E                     l9871:	
  7028                           
  7029                           ;RF_Control_B1.c: 259: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7030  0C4E  087A               	movf	_product,w
  7031  0C4F  3E0C               	addlw	12
  7032  0C50  0086               	movwf	6
  7033  0C51  3002               	movlw	2	; select bank4/5
  7034  0C52  0087               	movwf	7
  7035  0C53  0023               	movlb	3	; select bank3
  7036  0C54  082C               	movf	(_RF_Data^(0+384)+12),w
  7037  0C55  0601               	xorwf	1,w
  7038  0C56  1D03               	skipz
  7039  0C57  0008               	return
  7040  0C58  087A               	movf	_product,w
  7041  0C59  3E0D               	addlw	13
  7042  0C5A  0086               	movwf	6
  7043  0C5B  3002               	movlw	2	; select bank4/5
  7044  0C5C  0087               	movwf	7
  7045  0C5D  082D               	movf	(_RF_Data^(0+384)+13),w
  7046  0C5E  0601               	xorwf	1,w
  7047  0C5F  1D03               	skipz
  7048  0C60  0008               	return
  7049  0C61  087A               	movf	_product,w
  7050  0C62  3E0E               	addlw	14
  7051  0C63  0086               	movwf	6
  7052  0C64  3002               	movlw	2	; select bank4/5
  7053  0C65  0087               	movwf	7
  7054  0C66  082E               	movf	(_RF_Data^(0+384)+14),w
  7055  0C67  0601               	xorwf	1,w
  7056  0C68  1D03               	skipz
  7057  0C69  0008               	return
  7058                           
  7059                           ;RF_Control_B1.c: 260: setControl_Lights_Table();
  7060  0C6A  318A  225D         	fcall	_setControl_Lights_Table
  7061                           
  7062                           ;RF_Control_B1.c: 261: }
  7063                           ;RF_Control_B1.c: 262: }
  7064                           ;RF_Control_B1.c: 263: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7065  0C6C  0008               	return
  7066  0C6D                     l9879:	
  7067  0C6D  0023               	movlb	3	; select bank3
  7068  0C6E  0820               	movf	_RF_Data^(0+384),w
  7069  0C6F  3AFF               	xorlw	255
  7070  0C70  1D03               	skipz
  7071  0C71  2C78               	goto	l9885
  7072  0C72  0821               	movf	(_RF_Data^(0+384)+1),w
  7073  0C73  3A02               	xorlw	2
  7074  0C74  1D03               	skipz
  7075  0C75  2C78               	goto	l9885
  7076                           
  7077                           ;RF_Control_B1.c: 264: __nop();
  7078  0C76  0000               	nop
  7079                           
  7080                           ;RF_Control_B1.c: 265: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7081  0C77  0008               	return
  7082  0C78                     l9885:	
  7083  0C78  0023               	movlb	3	; select bank3
  7084  0C79  08A0               	movf	_RF_Data^(0+384),f
  7085  0C7A  1D03               	skipz
  7086  0C7B  0008               	return
  7087  0C7C  0821               	movf	(_RF_Data^(0+384)+1),w
  7088  0C7D  3A65               	xorlw	101
  7089  0C7E  1D03               	skipz
  7090  0C7F  0008               	return
  7091                           
  7092                           ;RF_Control_B1.c: 266: __nop();
  7093  0C80  0000               	nop
  7094                           
  7095                           ;RF_Control_B1.c: 273: ;
  7096                           
  7097                           ;RF_Control_B1.c: 267: }
  7098                           ;RF_Control_B1.c: 271: }
  7099                           ;RF_Control_B1.c: 272: } else {
  7100  0C81  0008               	return
  7101  0C82                     __end_of_getRxData:	
  7102                           
  7103                           	psect	text26
  7104  11C6                     __ptext26:	
  7105 ;; *************** function _setLog_Code *****************
  7106 ;; Defined at:
  7107 ;;		line 279 in file "../src/RF_Control_B1.c"
  7108 ;; Parameters:    Size  Location     Type
  7109 ;;		None
  7110 ;; Auto vars:     Size  Location     Type
  7111 ;;		None
  7112 ;; Return value:  Size  Location     Type
  7113 ;;		None               void
  7114 ;; Registers used:
  7115 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7116 ;; Tracked objects:
  7117 ;;		On entry : 0/0
  7118 ;;		On exit  : 0/0
  7119 ;;		Unchanged: 0/0
  7120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7123 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7124 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;Total ram usage:        1 bytes
  7126 ;; Hardware stack levels used:    1
  7127 ;; Hardware stack levels required when called:    6
  7128 ;; This function calls:
  7129 ;;		_setBuz
  7130 ;;		_setMemory_LoopSave
  7131 ;;		_setMemory_Modify
  7132 ;;		_setProductData
  7133 ;; This function is called by:
  7134 ;;		_getRxData
  7135 ;; This function uses a non-reentrant model
  7136 ;;
  7137                           
  7138                           
  7139                           ;psect for function _setLog_Code
  7140  11C6                     _setLog_Code:	
  7141                           
  7142                           ;RF_Control_B1.c: 280: RF1.Learn = 0;
  7143                           
  7144                           ;incstack = 0
  7145                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7146  11C6  0021               	movlb	1	; select bank1
  7147  11C7  1320               	bcf	_RF1^(0+128),6
  7148                           
  7149                           ;RF_Control_B1.c: 281: setProductData(12, RF_Data[12]);
  7150  11C8  0023               	movlb	3	; select bank3
  7151  11C9  082C               	movf	(_RF_Data^(0+384)+12),w
  7152  11CA  0020               	movlb	0	; select bank0
  7153  11CB  00E6               	movwf	??_setLog_Code
  7154  11CC  0866               	movf	??_setLog_Code,w
  7155  11CD  00E2               	movwf	setProductData@value
  7156  11CE  300C               	movlw	12
  7157  11CF  319B  23B8  3191   	fcall	_setProductData
  7158                           
  7159                           ;RF_Control_B1.c: 282: setProductData(13, RF_Data[13]);
  7160  11D2  0023               	movlb	3	; select bank3
  7161  11D3  082D               	movf	(_RF_Data^(0+384)+13),w
  7162  11D4  0020               	movlb	0	; select bank0
  7163  11D5  00E6               	movwf	??_setLog_Code
  7164  11D6  0866               	movf	??_setLog_Code,w
  7165  11D7  00E2               	movwf	setProductData@value
  7166  11D8  300D               	movlw	13
  7167  11D9  319B  23B8  3191   	fcall	_setProductData
  7168                           
  7169                           ;RF_Control_B1.c: 283: setProductData(14, RF_Data[14]);
  7170  11DC  0023               	movlb	3	; select bank3
  7171  11DD  082E               	movf	(_RF_Data^(0+384)+14),w
  7172  11DE  0020               	movlb	0	; select bank0
  7173  11DF  00E6               	movwf	??_setLog_Code
  7174  11E0  0866               	movf	??_setLog_Code,w
  7175  11E1  00E2               	movwf	setProductData@value
  7176  11E2  300E               	movlw	14
  7177  11E3  319B  23B8  3191   	fcall	_setProductData
  7178                           
  7179                           ;RF_Control_B1.c: 284: setBuz(1, 100);
  7180  11E6  3064               	movlw	100
  7181  11E7  0020               	movlb	0	; select bank0
  7182  11E8  00A9               	movwf	setBuz@time
  7183  11E9  3000               	movlw	0
  7184  11EA  00AA               	movwf	setBuz@time+1
  7185  11EB  3001               	movlw	1
  7186  11EC  3196  26F3  3191   	fcall	_setBuz
  7187                           
  7188                           ;RF_Control_B1.c: 285: if (myMain.First == 1) {
  7189  11EF  0021               	movlb	1	; select bank1
  7190  11F0  1EAE               	btfss	_myMain^(0+128),5
  7191  11F1  29F6               	goto	l2318
  7192                           
  7193                           ;RF_Control_B1.c: 286: setMemory_LoopSave(1);
  7194  11F2  3001               	movlw	1
  7195  11F3  319C  24CE  3191   	fcall	_setMemory_LoopSave
  7196  11F6                     l2318:	
  7197                           
  7198                           ;RF_Control_B1.c: 287: }
  7199                           ;RF_Control_B1.c: 288: setMemory_Modify(1);
  7200  11F6  3001               	movlw	1
  7201  11F7  319C  24BB         	fcall	_setMemory_Modify
  7202  11F9  0008               	return
  7203  11FA                     __end_of_setLog_Code:	
  7204                           
  7205                           	psect	text27
  7206  1CCE                     __ptext27:	
  7207 ;; *************** function _setMemory_LoopSave *****************
  7208 ;; Defined at:
  7209 ;;		line 1064 in file "../src/MCU_B1.c"
  7210 ;; Parameters:    Size  Location     Type
  7211 ;;  command         1    wreg     unsigned char 
  7212 ;; Auto vars:     Size  Location     Type
  7213 ;;  command         1    1[BANK0 ] unsigned char 
  7214 ;; Return value:  Size  Location     Type
  7215 ;;		None               void
  7216 ;; Registers used:
  7217 ;;		wreg, status,2, status,0
  7218 ;; Tracked objects:
  7219 ;;		On entry : 0/0
  7220 ;;		On exit  : 0/0
  7221 ;;		Unchanged: 0/0
  7222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7224 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7226 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7227 ;;Total ram usage:        2 bytes
  7228 ;; Hardware stack levels used:    1
  7229 ;; Hardware stack levels required when called:    4
  7230 ;; This function calls:
  7231 ;;		Nothing
  7232 ;; This function is called by:
  7233 ;;		_setLog_Code
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           
  7238                           ;psect for function _setMemory_LoopSave
  7239  1CCE                     _setMemory_LoopSave:	
  7240                           
  7241                           ;incstack = 0
  7242                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7243                           ;setMemory_LoopSave@command stored from wreg
  7244  1CCE  0020               	movlb	0	; select bank0
  7245  1CCF  00A1               	movwf	setMemory_LoopSave@command
  7246                           
  7247                           ;MCU_B1.c: 1065: Memory.LoopSave = command == 1 ? 1 : 0;
  7248  1CD0  0821               	movf	setMemory_LoopSave@command,w
  7249  1CD1  3A01               	xorlw	1
  7250  1CD2  3000               	movlw	0
  7251  1CD3  1903               	skipnz
  7252  1CD4  3001               	movlw	1
  7253  1CD5  00A0               	movwf	??_setMemory_LoopSave
  7254  1CD6  0DA0               	rlf	??_setMemory_LoopSave,f
  7255  1CD7  0DA0               	rlf	??_setMemory_LoopSave,f
  7256  1CD8  0024               	movlb	4	; select bank4
  7257  1CD9  0844               	movf	(_Memory^(0+512)+36),w
  7258  1CDA  0020               	movlb	0	; select bank0
  7259  1CDB  0620               	xorwf	??_setMemory_LoopSave,w
  7260  1CDC  39FB               	andlw	-5
  7261  1CDD  0620               	xorwf	??_setMemory_LoopSave,w
  7262  1CDE  0024               	movlb	4	; select bank4
  7263  1CDF  00C4               	movwf	(_Memory^(0+512)+36)
  7264  1CE0  0008               	return
  7265  1CE1                     __end_of_setMemory_LoopSave:	
  7266                           
  7267                           	psect	text28
  7268  0A5D                     __ptext28:	
  7269 ;; *************** function _setControl_Lights_Table *****************
  7270 ;; Defined at:
  7271 ;;		line 292 in file "../src/RF_Control_B1.c"
  7272 ;; Parameters:    Size  Location     Type
  7273 ;;		None
  7274 ;; Auto vars:     Size  Location     Type
  7275 ;;		None
  7276 ;; Return value:  Size  Location     Type
  7277 ;;		None               void
  7278 ;; Registers used:
  7279 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7280 ;; Tracked objects:
  7281 ;;		On entry : 0/0
  7282 ;;		On exit  : 0/0
  7283 ;;		Unchanged: 0/0
  7284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7289 ;;Total ram usage:        0 bytes
  7290 ;; Hardware stack levels used:    1
  7291 ;; Hardware stack levels required when called:   10
  7292 ;; This function calls:
  7293 ;;		_setBuz
  7294 ;;		_setDimmerLights_ErrorClose
  7295 ;;		_setProductData
  7296 ;;		_setRFSW_AdjControl
  7297 ;;		_setRFSW_Control
  7298 ;;		_setTxData
  7299 ;; This function is called by:
  7300 ;;		_getRxData
  7301 ;; This function uses a non-reentrant model
  7302 ;;
  7303                           
  7304                           
  7305                           ;psect for function _setControl_Lights_Table
  7306  0A5D                     _setControl_Lights_Table:	
  7307                           
  7308                           ;RF_Control_B1.c: 293: switch (RF_Data[15]) {
  7309                           
  7310                           ;incstack = 0
  7311                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7312  0A5D  2AA8               	goto	l9509
  7313  0A5E                     l9493:	
  7314                           ;RF_Control_B1.c: 294: case 0x00:
  7315                           
  7316                           
  7317                           ;RF_Control_B1.c: 296: setDimmerLights_ErrorClose(255);
  7318  0A5E  30FF               	movlw	255
  7319  0A5F  3189  2131  318A   	fcall	_setDimmerLights_ErrorClose
  7320                           
  7321                           ;RF_Control_B1.c: 298: setProductData(9, 0);
  7322  0A62  0020               	movlb	0	; select bank0
  7323  0A63  01E2               	clrf	setProductData@value
  7324  0A64  3009               	movlw	9
  7325  0A65  319B  23B8  318A   	fcall	_setProductData
  7326                           
  7327                           ;RF_Control_B1.c: 299: setProductData(11, 0);
  7328  0A68  0020               	movlb	0	; select bank0
  7329  0A69  01E2               	clrf	setProductData@value
  7330  0A6A  300B               	movlw	11
  7331  0A6B  319B  23B8  318A   	fcall	_setProductData
  7332                           
  7333                           ;RF_Control_B1.c: 300: setProductData(15, 0);
  7334  0A6E  0020               	movlb	0	; select bank0
  7335  0A6F  01E2               	clrf	setProductData@value
  7336  0A70  300F               	movlw	15
  7337  0A71  319B  23B8  318A   	fcall	_setProductData
  7338                           
  7339                           ;RF_Control_B1.c: 301: setProductData(17, 0);
  7340  0A74  0020               	movlb	0	; select bank0
  7341  0A75  01E2               	clrf	setProductData@value
  7342  0A76  3011               	movlw	17
  7343  0A77  319B  23B8  318A   	fcall	_setProductData
  7344                           
  7345                           ;RF_Control_B1.c: 302: setBuz(1, 100);
  7346  0A7A  3064               	movlw	100
  7347  0A7B  0020               	movlb	0	; select bank0
  7348  0A7C  00A9               	movwf	setBuz@time
  7349  0A7D  3000               	movlw	0
  7350  0A7E  00AA               	movwf	setBuz@time+1
  7351  0A7F  3001               	movlw	1
  7352  0A80  3196  26F3         	fcall	_setBuz
  7353                           
  7354                           ;RF_Control_B1.c: 304: break;
  7355  0A82  0008               	return
  7356  0A83                     l9497:	
  7357                           ;RF_Control_B1.c: 305: case 0x20:
  7358                           
  7359                           
  7360                           ;RF_Control_B1.c: 306: setProductData(9, 0);
  7361  0A83  0020               	movlb	0	; select bank0
  7362  0A84  01E2               	clrf	setProductData@value
  7363  0A85  3009               	movlw	9
  7364  0A86  319B  23B8  318A   	fcall	_setProductData
  7365                           
  7366                           ;RF_Control_B1.c: 307: setProductData(11, 0);
  7367  0A89  0020               	movlb	0	; select bank0
  7368  0A8A  01E2               	clrf	setProductData@value
  7369  0A8B  300B               	movlw	11
  7370  0A8C  319B  23B8  318A   	fcall	_setProductData
  7371                           
  7372                           ;RF_Control_B1.c: 308: setProductData(17, 0);
  7373  0A8F  0020               	movlb	0	; select bank0
  7374  0A90  01E2               	clrf	setProductData@value
  7375  0A91  3011               	movlw	17
  7376  0A92  319B  23B8  318A   	fcall	_setProductData
  7377                           
  7378                           ;RF_Control_B1.c: 309: setTxData();
  7379  0A95  318E  2610         	fcall	_setTxData
  7380                           
  7381                           ;RF_Control_B1.c: 310: break;
  7382  0A97  0008               	return
  7383  0A98                     l9499:	
  7384                           ;RF_Control_B1.c: 311: case 0x01:
  7385                           
  7386                           
  7387                           ;RF_Control_B1.c: 313: setRFSW_Control(1);
  7388  0A98  3001               	movlw	1
  7389  0A99  3195  2500         	fcall	_setRFSW_Control
  7390                           
  7391                           ;RF_Control_B1.c: 315: break;
  7392  0A9B  0008               	return
  7393  0A9C                     l9501:	
  7394                           ;RF_Control_B1.c: 316: case 0x02:
  7395                           
  7396                           
  7397                           ;RF_Control_B1.c: 318: setRFSW_Control(2);
  7398  0A9C  3002               	movlw	2
  7399  0A9D  3195  2500         	fcall	_setRFSW_Control
  7400                           
  7401                           ;RF_Control_B1.c: 325: break;
  7402                           
  7403                           ;RF_Control_B1.c: 321: case 0x03:
  7404                           
  7405                           ;RF_Control_B1.c: 320: break;
  7406  0A9F  0008               	return
  7407  0AA0                     l9503:	
  7408                           ;RF_Control_B1.c: 326: case 0x11:
  7409                           
  7410                           
  7411                           ;RF_Control_B1.c: 329: setRFSW_AdjControl(1);
  7412  0AA0  3001               	movlw	1
  7413  0AA1  3193  2318         	fcall	_setRFSW_AdjControl
  7414                           
  7415                           ;RF_Control_B1.c: 332: break;
  7416  0AA3  0008               	return
  7417  0AA4                     l9505:	
  7418                           ;RF_Control_B1.c: 333: case 0x21:
  7419                           
  7420                           
  7421                           ;RF_Control_B1.c: 336: setRFSW_AdjControl(2);
  7422  0AA4  3002               	movlw	2
  7423  0AA5  3193  2318         	fcall	_setRFSW_AdjControl
  7424                           
  7425                           ;RF_Control_B1.c: 347: }
  7426                           
  7427                           ;RF_Control_B1.c: 346: break;
  7428                           
  7429                           ;RF_Control_B1.c: 340: case 0x31:
  7430                           
  7431                           ;RF_Control_B1.c: 339: break;
  7432  0AA7  0008               	return
  7433  0AA8                     l9509:	
  7434  0AA8  0023               	movlb	3	; select bank3
  7435  0AA9  082F               	movf	(_RF_Data^(0+384)+15),w
  7436                           
  7437                           ; Switch size 1, requested type "space"
  7438                           ; Number of cases is 8, Range of values is 0 to 49
  7439                           ; switch strategies available:
  7440                           ; Name         Instructions Cycles
  7441                           ; simple_byte           25    13 (average)
  7442                           ; direct_byte          106     6 (fixed)
  7443                           ; jumptable            260     6 (fixed)
  7444                           ;	Chosen strategy is simple_byte
  7445  0AAA  3A00               	xorlw	0	; case 0
  7446  0AAB  1903               	skipnz
  7447  0AAC  2A5E               	goto	l9493
  7448  0AAD  3A01               	xorlw	1	; case 1
  7449  0AAE  1903               	skipnz
  7450  0AAF  2A98               	goto	l9499
  7451  0AB0  3A03               	xorlw	3	; case 2
  7452  0AB1  1903               	skipnz
  7453  0AB2  2A9C               	goto	l9501
  7454  0AB3  3A01               	xorlw	1	; case 3
  7455  0AB4  1903               	skipnz
  7456  0AB5  2AC3               	goto	l2332
  7457  0AB6  3A12               	xorlw	18	; case 17
  7458  0AB7  1903               	skipnz
  7459  0AB8  2AA0               	goto	l9503
  7460  0AB9  3A31               	xorlw	49	; case 32
  7461  0ABA  1903               	skipnz
  7462  0ABB  2A83               	goto	l9497
  7463  0ABC  3A01               	xorlw	1	; case 33
  7464  0ABD  1903               	skipnz
  7465  0ABE  2AA4               	goto	l9505
  7466  0ABF  3A10               	xorlw	16	; case 49
  7467  0AC0  1903               	skipnz
  7468  0AC1  2AC3               	goto	l2332
  7469  0AC2  2AC3               	goto	l2332
  7470  0AC3                     l2332:	
  7471  0AC3  0008               	return
  7472  0AC4                     __end_of_setControl_Lights_Table:	
  7473                           
  7474                           	psect	text29
  7475  1500                     __ptext29:	
  7476 ;; *************** function _setRFSW_Control *****************
  7477 ;; Defined at:
  7478 ;;		line 374 in file "../src/RF_Control_B1.c"
  7479 ;; Parameters:    Size  Location     Type
  7480 ;;  sw              1    wreg     unsigned char 
  7481 ;; Auto vars:     Size  Location     Type
  7482 ;;  sw              1   77[BANK0 ] unsigned char 
  7483 ;;  status          1   76[BANK0 ] unsigned char 
  7484 ;; Return value:  Size  Location     Type
  7485 ;;		None               void
  7486 ;; Registers used:
  7487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7488 ;; Tracked objects:
  7489 ;;		On entry : 0/0
  7490 ;;		On exit  : 0/0
  7491 ;;		Unchanged: 0/0
  7492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7494 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7496 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7497 ;;Total ram usage:        3 bytes
  7498 ;; Hardware stack levels used:    1
  7499 ;; Hardware stack levels required when called:    8
  7500 ;; This function calls:
  7501 ;;		_getDelayOff_GO
  7502 ;;		_getDimmerLights_Status
  7503 ;;		_setBuz
  7504 ;;		_setDelayOff_GO
  7505 ;;		_setDimmerLights_SwOff
  7506 ;;		_setDimmerLights_SwOn
  7507 ;;		_setRF_DimmerLights
  7508 ;;		_setTxData
  7509 ;; This function is called by:
  7510 ;;		_setControl_Lights_Table
  7511 ;; This function uses a non-reentrant model
  7512 ;;
  7513                           
  7514                           
  7515                           ;psect for function _setRFSW_Control
  7516  1500                     _setRFSW_Control:	
  7517                           
  7518                           ;incstack = 0
  7519                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7520                           ;setRFSW_Control@sw stored from wreg
  7521  1500  0020               	movlb	0	; select bank0
  7522  1501  00ED               	movwf	setRFSW_Control@sw
  7523                           
  7524                           ;RF_Control_B1.c: 375: char status = 0;
  7525  1502  01EC               	clrf	setRFSW_Control@status
  7526                           
  7527                           ;RF_Control_B1.c: 378: if (RF_Data[16] == 0x80) {
  7528  1503  0023               	movlb	3	; select bank3
  7529  1504  0830               	movf	(_RF_Data^(0+384)+16),w
  7530  1505  3A80               	xorlw	128
  7531  1506  1D03               	skipz
  7532  1507  2D33               	goto	l9263
  7533                           
  7534                           ;RF_Control_B1.c: 379: setDelayOff_GO(sw, 1, RF_Data[17]);
  7535  1508  0020               	movlb	0	; select bank0
  7536  1509  01E6               	clrf	setDelayOff_GO@command
  7537  150A  0AE6               	incf	setDelayOff_GO@command,f
  7538  150B  0023               	movlb	3	; select bank3
  7539  150C  0831               	movf	(_RF_Data^(0+384)+17),w
  7540  150D  0020               	movlb	0	; select bank0
  7541  150E  00EB               	movwf	??_setRFSW_Control
  7542  150F  086B               	movf	??_setRFSW_Control,w
  7543  1510  00E7               	movwf	setDelayOff_GO@value
  7544  1511  086D               	movf	setRFSW_Control@sw,w
  7545  1512  3195  25A1  3195   	fcall	_setDelayOff_GO
  7546                           
  7547                           ;RF_Control_B1.c: 380: if (getDimmerLights_Status(sw) == 1) {
  7548  1515  0020               	movlb	0	; select bank0
  7549  1516  086D               	movf	setRFSW_Control@sw,w
  7550  1517  319B  23F4  3195   	fcall	_getDimmerLights_Status
  7551  151A  3A01               	xorlw	1
  7552  151B  1D03               	skipz
  7553  151C  2D42               	goto	l9267
  7554                           
  7555                           ;RF_Control_B1.c: 381: setBuz(1, 100);
  7556  151D  3064               	movlw	100
  7557  151E  0020               	movlb	0	; select bank0
  7558  151F  00A9               	movwf	setBuz@time
  7559  1520  3000               	movlw	0
  7560  1521  00AA               	movwf	setBuz@time+1
  7561  1522  3001               	movlw	1
  7562  1523  3196  26F3  3195   	fcall	_setBuz
  7563                           
  7564                           ;RF_Control_B1.c: 382: status = 1;
  7565  1526  0020               	movlb	0	; select bank0
  7566  1527  01EC               	clrf	setRFSW_Control@status
  7567  1528  0AEC               	incf	setRFSW_Control@status,f
  7568                           
  7569                           ;RF_Control_B1.c: 383: setRF_DimmerLights(sw, 1);
  7570  1529  01E6               	clrf	setRF_DimmerLights@on
  7571  152A  0AE6               	incf	setRF_DimmerLights@on,f
  7572  152B  086D               	movf	setRFSW_Control@sw,w
  7573  152C  3197  274C  3195   	fcall	_setRF_DimmerLights
  7574                           
  7575                           ;RF_Control_B1.c: 384: setTxData();
  7576  152F  318E  2610  3195   	fcall	_setTxData
  7577                           
  7578                           ;RF_Control_B1.c: 385: }
  7579                           ;RF_Control_B1.c: 386: } else {
  7580  1532  2D42               	goto	l9267
  7581  1533                     l9263:	
  7582                           
  7583                           ;RF_Control_B1.c: 388: if (getDelayOff_GO(sw) == 1) {
  7584  1533  0020               	movlb	0	; select bank0
  7585  1534  086D               	movf	setRFSW_Control@sw,w
  7586  1535  319B  23E4  3195   	fcall	_getDelayOff_GO
  7587  1538  3A01               	xorlw	1
  7588  1539  1D03               	skipz
  7589  153A  2D42               	goto	l9267
  7590                           
  7591                           ;RF_Control_B1.c: 389: setDelayOff_GO(sw, 0, 0);
  7592  153B  0020               	movlb	0	; select bank0
  7593  153C  01E6               	clrf	setDelayOff_GO@command
  7594  153D  01E7               	clrf	setDelayOff_GO@value
  7595  153E  086D               	movf	setRFSW_Control@sw,w
  7596  153F  3195  25A1  3195   	fcall	_setDelayOff_GO
  7597  1542                     l9267:	
  7598                           
  7599                           ;RF_Control_B1.c: 390: }
  7600                           ;RF_Control_B1.c: 392: }
  7601                           ;RF_Control_B1.c: 393: if (status == 0) {
  7602  1542  0020               	movlb	0	; select bank0
  7603  1543  08EC               	movf	setRFSW_Control@status,f
  7604  1544  1D03               	skipz
  7605  1545  0008               	return
  7606                           
  7607                           ;RF_Control_B1.c: 395: setDimmerLights_SwOn(sw);
  7608  1546  086D               	movf	setRFSW_Control@sw,w
  7609  1547  3188  2017  3195   	fcall	_setDimmerLights_SwOn
  7610                           
  7611                           ;RF_Control_B1.c: 396: setDimmerLights_SwOff(sw);
  7612  154A  0020               	movlb	0	; select bank0
  7613  154B  086D               	movf	setRFSW_Control@sw,w
  7614  154C  3194  24B1         	fcall	_setDimmerLights_SwOff
  7615  154E  0008               	return
  7616  154F                     __end_of_setRFSW_Control:	
  7617                           
  7618                           	psect	text30
  7619  0817                     __ptext30:	
  7620 ;; *************** function _setDimmerLights_SwOn *****************
  7621 ;; Defined at:
  7622 ;;		line 425 in file "../src/Dimmer_B1.c"
  7623 ;; Parameters:    Size  Location     Type
  7624 ;;  sw              1    wreg     unsigned char 
  7625 ;; Auto vars:     Size  Location     Type
  7626 ;;  sw              1   17[BANK0 ] unsigned char 
  7627 ;;  idle            1   16[BANK0 ] unsigned char 
  7628 ;; Return value:  Size  Location     Type
  7629 ;;		None               void
  7630 ;; Registers used:
  7631 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7632 ;; Tracked objects:
  7633 ;;		On entry : 0/0
  7634 ;;		On exit  : 0/0
  7635 ;;		Unchanged: 0/0
  7636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;Total ram usage:        5 bytes
  7642 ;; Hardware stack levels used:    1
  7643 ;; Hardware stack levels required when called:    6
  7644 ;; This function calls:
  7645 ;;		_DimmerLightsPointSelect
  7646 ;;		_setBuz
  7647 ;; This function is called by:
  7648 ;;		_setRFSW_Control
  7649 ;;		_setSw_Main
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           
  7654                           ;psect for function _setDimmerLights_SwOn
  7655  0817                     _setDimmerLights_SwOn:	
  7656                           
  7657                           ;incstack = 0
  7658                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7659                           ;setDimmerLights_SwOn@sw stored from wreg
  7660  0817  0020               	movlb	0	; select bank0
  7661  0818  00B1               	movwf	setDimmerLights_SwOn@sw
  7662                           
  7663                           ;Dimmer_B1.c: 426: DimmerLightsPointSelect(sw);
  7664  0819  0831               	movf	setDimmerLights_SwOn@sw,w
  7665  081A  319C  2482  3188   	fcall	_DimmerLightsPointSelect
  7666                           
  7667                           ;Dimmer_B1.c: 427: char idle = 0;
  7668  081D  0020               	movlb	0	; select bank0
  7669  081E  01B0               	clrf	setDimmerLights_SwOn@idle
  7670                           
  7671                           ;Dimmer_B1.c: 430: if (idle == 0) {
  7672  081F  08B0               	movf	setDimmerLights_SwOn@idle,f
  7673  0820  1D03               	skipz
  7674  0821  2842               	goto	l9039
  7675                           
  7676                           ;Dimmer_B1.c: 431: if (sw == 1) {
  7677  0822  0831               	movf	setDimmerLights_SwOn@sw,w
  7678  0823  3A01               	xorlw	1
  7679  0824  1D03               	skipz
  7680  0825  2831               	goto	l9029
  7681                           
  7682                           ;Dimmer_B1.c: 432: idle = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1 
      +                          : 0;
  7683  0826  01AE               	clrf	_setDimmerLights_SwOn$2322
  7684  0827  0AAE               	incf	_setDimmerLights_SwOn$2322,f
  7685  0828  0023               	movlb	3	; select bank3
  7686  0829  1DD9               	btfss	(_DimmerLights2^(0+384)+10),3
  7687  082A  1B50               	btfsc	(_DimmerLights2^(0+384)+1),6
  7688  082B  282E               	goto	l9027
  7689  082C  0020               	movlb	0	; select bank0
  7690  082D  01AE               	clrf	_setDimmerLights_SwOn$2322
  7691  082E                     l9027:	
  7692  082E  0020               	movlb	0	; select bank0
  7693  082F  082E               	movf	_setDimmerLights_SwOn$2322,w
  7694  0830  283F               	goto	L3
  7695  0831                     l9029:	
  7696                           ;Dimmer_B1.c: 433: } else if (sw == 2) {
  7697                           
  7698  0831  0831               	movf	setDimmerLights_SwOn@sw,w
  7699  0832  3A02               	xorlw	2
  7700  0833  1D03               	skipz
  7701  0834  2842               	goto	l9039
  7702                           
  7703                           ;Dimmer_B1.c: 434: idle = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1 
      +                          : 0;
  7704  0835  01AF               	clrf	_setDimmerLights_SwOn$2323
  7705  0836  0AAF               	incf	_setDimmerLights_SwOn$2323,f
  7706  0837  0023               	movlb	3	; select bank3
  7707  0838  1DC8               	btfss	(_DimmerLights1^(0+384)+10),3
  7708  0839  1B3F               	btfsc	(_DimmerLights1^(0+384)+1),6
  7709  083A  283D               	goto	l9037
  7710  083B  0020               	movlb	0	; select bank0
  7711  083C  01AF               	clrf	_setDimmerLights_SwOn$2323
  7712  083D                     l9037:	
  7713  083D  0020               	movlb	0	; select bank0
  7714  083E  082F               	movf	_setDimmerLights_SwOn$2323,w
  7715  083F                     L3:	
  7716  083F  00AD               	movwf	??_setDimmerLights_SwOn
  7717  0840  082D               	movf	??_setDimmerLights_SwOn,w
  7718  0841  00B0               	movwf	setDimmerLights_SwOn@idle
  7719  0842                     l9039:	
  7720                           
  7721                           ;Dimmer_B1.c: 435: }
  7722                           ;Dimmer_B1.c: 436: }
  7723                           ;Dimmer_B1.c: 456: if (idle == 0) {
  7724  0842  08B0               	movf	setDimmerLights_SwOn@idle,f
  7725  0843  1D03               	skipz
  7726  0844  0008               	return
  7727                           
  7728                           ;Dimmer_B1.c: 457: DimmerLights->SwFlag = 1;
  7729  0845  086F               	movf	_DimmerLights,w
  7730  0846  3E0B               	addlw	11
  7731  0847  0086               	movwf	6
  7732  0848  3001               	movlw	1	; select bank2/3
  7733  0849  0087               	movwf	7
  7734  084A  1481               	bsf	1,1
  7735                           
  7736                           ;Dimmer_B1.c: 458: if (DimmerLights->Status == 0) {
  7737  084B  086F               	movf	_DimmerLights,w
  7738  084C  3E02               	addlw	2
  7739  084D  0086               	movwf	6
  7740  084E  3001               	movlw	1	; select bank2/3
  7741  084F  0087               	movwf	7
  7742  0850  1881               	btfsc	1,1
  7743  0851  2865               	goto	l9045
  7744                           
  7745                           ;Dimmer_B1.c: 459: DimmerLights->Status = 1;
  7746  0852  086F               	movf	_DimmerLights,w
  7747  0853  3E02               	addlw	2
  7748  0854  0086               	movwf	6
  7749  0855  3001               	movlw	1	; select bank2/3
  7750  0856  0087               	movwf	7
  7751  0857  1481               	bsf	1,1
  7752                           
  7753                           ;Dimmer_B1.c: 460: DimmerLights->Trigger = 1;
  7754  0858  086F               	movf	_DimmerLights,w
  7755  0859  3E0A               	addlw	10
  7756  085A  0086               	movwf	6
  7757  085B  3001               	movlw	1	; select bank2/3
  7758  085C  0087               	movwf	7
  7759  085D  1481               	bsf	1,1
  7760                           
  7761                           ;Dimmer_B1.c: 461: DimmerLights->Switch = 1;
  7762  085E  086F               	movf	_DimmerLights,w
  7763  085F  3E0A               	addlw	10
  7764  0860  0086               	movwf	6
  7765  0861  3001               	movlw	1	; select bank2/3
  7766  0862  0087               	movwf	7
  7767  0863  1401               	bsf	1,0
  7768                           
  7769                           ;Dimmer_B1.c: 462: } else {
  7770  0864  286B               	goto	l9047
  7771  0865                     l9045:	
  7772                           
  7773                           ;Dimmer_B1.c: 463: DimmerLights->Status = 0;
  7774  0865  086F               	movf	_DimmerLights,w
  7775  0866  3E02               	addlw	2
  7776  0867  0086               	movwf	6
  7777  0868  3001               	movlw	1	; select bank2/3
  7778  0869  0087               	movwf	7
  7779  086A  1081               	bcf	1,1
  7780  086B                     l9047:	
  7781                           
  7782                           ;Dimmer_B1.c: 464: }
  7783                           ;Dimmer_B1.c: 465: setBuz(1, 100);
  7784  086B  3064               	movlw	100
  7785  086C  00A9               	movwf	setBuz@time
  7786  086D  3000               	movlw	0
  7787  086E  00AA               	movwf	setBuz@time+1
  7788  086F  3001               	movlw	1
  7789  0870  3196  26F3         	fcall	_setBuz
  7790  0872  0008               	return
  7791  0873                     __end_of_setDimmerLights_SwOn:	
  7792                           
  7793                           	psect	text31
  7794  1318                     __ptext31:	
  7795 ;; *************** function _setRFSW_AdjControl *****************
  7796 ;; Defined at:
  7797 ;;		line 402 in file "../src/RF_Control_B1.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;  sw              1    wreg     unsigned char 
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;  sw              1   75[BANK0 ] unsigned char 
  7802 ;;  status          1   74[BANK0 ] unsigned char 
  7803 ;; Return value:  Size  Location     Type
  7804 ;;		None               void
  7805 ;; Registers used:
  7806 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7807 ;; Tracked objects:
  7808 ;;		On entry : 0/0
  7809 ;;		On exit  : 0/0
  7810 ;;		Unchanged: 0/0
  7811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7813 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7814 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7816 ;;Total ram usage:        4 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    9
  7819 ;; This function calls:
  7820 ;;		_getDimmerLights_Status
  7821 ;;		_setMemory_Modify
  7822 ;;		_setProductData
  7823 ;;		_setRF_DimmerValue
  7824 ;;		_setTxData
  7825 ;; This function is called by:
  7826 ;;		_setControl_Lights_Table
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           
  7831                           ;psect for function _setRFSW_AdjControl
  7832  1318                     _setRFSW_AdjControl:	
  7833                           
  7834                           ;incstack = 0
  7835                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7836                           ;setRFSW_AdjControl@sw stored from wreg
  7837  1318  0020               	movlb	0	; select bank0
  7838  1319  00EB               	movwf	setRFSW_AdjControl@sw
  7839                           
  7840                           ;RF_Control_B1.c: 403: char status = 0;
  7841  131A  01EA               	clrf	setRFSW_AdjControl@status
  7842                           
  7843                           ;RF_Control_B1.c: 405: status = getDimmerLights_Status(sw);
  7844  131B  086B               	movf	setRFSW_AdjControl@sw,w
  7845  131C  319B  23F4  3193   	fcall	_getDimmerLights_Status
  7846  131F  0020               	movlb	0	; select bank0
  7847  1320  00E8               	movwf	??_setRFSW_AdjControl
  7848  1321  0868               	movf	??_setRFSW_AdjControl,w
  7849  1322  00EA               	movwf	setRFSW_AdjControl@status
  7850                           
  7851                           ;RF_Control_B1.c: 408: if (status == 1) {
  7852  1323  086A               	movf	setRFSW_AdjControl@status,w
  7853  1324  3A01               	xorlw	1
  7854  1325  1D03               	skipz
  7855  1326  2B31               	goto	l9281
  7856                           
  7857                           ;RF_Control_B1.c: 409: setMemory_Modify(1);
  7858  1327  3001               	movlw	1
  7859  1328  319C  24BB  3193   	fcall	_setMemory_Modify
  7860                           
  7861                           ;RF_Control_B1.c: 410: setRF_DimmerValue(sw);
  7862  132B  0020               	movlb	0	; select bank0
  7863  132C  086B               	movf	setRFSW_AdjControl@sw,w
  7864  132D  3191  2133  3193   	fcall	_setRF_DimmerValue
  7865                           
  7866                           ;RF_Control_B1.c: 411: } else {
  7867  1330  2B42               	goto	l2344
  7868  1331                     l9281:	
  7869                           
  7870                           ;RF_Control_B1.c: 412: setProductData(9, product->Data[20 + sw]);
  7871  1331  0020               	movlb	0	; select bank0
  7872  1332  086B               	movf	setRFSW_AdjControl@sw,w
  7873  1333  3E14               	addlw	20
  7874  1334  077A               	addwf	_product,w
  7875  1335  00E8               	movwf	??_setRFSW_AdjControl
  7876  1336  0868               	movf	??_setRFSW_AdjControl,w
  7877  1337  0086               	movwf	6
  7878  1338  3002               	movlw	2	; select bank4/5
  7879  1339  0087               	movwf	7
  7880  133A  0801               	movf	1,w
  7881  133B  00E9               	movwf	??_setRFSW_AdjControl+1
  7882  133C  0869               	movf	??_setRFSW_AdjControl+1,w
  7883  133D  00E2               	movwf	setProductData@value
  7884  133E  3009               	movlw	9
  7885  133F  319B  23B8  3193   	fcall	_setProductData
  7886  1342                     l2344:	
  7887                           
  7888                           ;RF_Control_B1.c: 413: }
  7889                           ;RF_Control_B1.c: 414: setProductData(17, product->Data[26 + sw]);
  7890  1342  0020               	movlb	0	; select bank0
  7891  1343  086B               	movf	setRFSW_AdjControl@sw,w
  7892  1344  3E1A               	addlw	26
  7893  1345  077A               	addwf	_product,w
  7894  1346  00E8               	movwf	??_setRFSW_AdjControl
  7895  1347  0868               	movf	??_setRFSW_AdjControl,w
  7896  1348  0086               	movwf	6
  7897  1349  3002               	movlw	2	; select bank4/5
  7898  134A  0087               	movwf	7
  7899  134B  0801               	movf	1,w
  7900  134C  00E9               	movwf	??_setRFSW_AdjControl+1
  7901  134D  0869               	movf	??_setRFSW_AdjControl+1,w
  7902  134E  00E2               	movwf	setProductData@value
  7903  134F  3011               	movlw	17
  7904  1350  319B  23B8  3193   	fcall	_setProductData
  7905                           
  7906                           ;RF_Control_B1.c: 415: setTxData();
  7907  1353  318E  2610         	fcall	_setTxData
  7908  1355  0008               	return
  7909  1356                     __end_of_setRFSW_AdjControl:	
  7910                           
  7911                           	psect	text32
  7912  1133                     __ptext32:	
  7913 ;; *************** function _setRF_DimmerValue *****************
  7914 ;; Defined at:
  7915 ;;		line 420 in file "../src/RF_Control_B1.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;  lights          1    wreg     unsigned char 
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;  lights          1   71[BANK0 ] unsigned char 
  7920 ;; Return value:  Size  Location     Type
  7921 ;;		None               void
  7922 ;; Registers used:
  7923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7931 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7932 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7933 ;;Total ram usage:        2 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    8
  7936 ;; This function calls:
  7937 ;;		_setDimmerLights_AdjRF
  7938 ;;		_setProductData
  7939 ;; This function is called by:
  7940 ;;		_setRFSW_AdjControl
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           
  7945                           ;psect for function _setRF_DimmerValue
  7946  1133                     _setRF_DimmerValue:	
  7947                           
  7948                           ;incstack = 0
  7949                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7950                           ;setRF_DimmerValue@lights stored from wreg
  7951  1133  0020               	movlb	0	; select bank0
  7952  1134  00E7               	movwf	setRF_DimmerValue@lights
  7953                           
  7954                           ;RF_Control_B1.c: 421: if (RF_Data[9] > 0x64) {
  7955  1135  3065               	movlw	101
  7956  1136  0023               	movlb	3	; select bank3
  7957  1137  0229               	subwf	(_RF_Data^(0+384)+9),w
  7958  1138  1C03               	skipc
  7959  1139  2940               	goto	l9141
  7960                           
  7961                           ;RF_Control_B1.c: 422: RF_Data[9] = 0x64;
  7962  113A  3064               	movlw	100
  7963  113B  0020               	movlb	0	; select bank0
  7964  113C  00E6               	movwf	??_setRF_DimmerValue
  7965  113D  0866               	movf	??_setRF_DimmerValue,w
  7966  113E  0023               	movlb	3	; select bank3
  7967  113F  00A9               	movwf	(_RF_Data^(0+384)+9)
  7968  1140                     l9141:	
  7969                           
  7970                           ;RF_Control_B1.c: 423: }
  7971                           ;RF_Control_B1.c: 424: setProductData(9, RF_Data[9]);
  7972  1140  0829               	movf	(_RF_Data^(0+384)+9),w
  7973  1141  0020               	movlb	0	; select bank0
  7974  1142  00E6               	movwf	??_setRF_DimmerValue
  7975  1143  0866               	movf	??_setRF_DimmerValue,w
  7976  1144  00E2               	movwf	setProductData@value
  7977  1145  3009               	movlw	9
  7978  1146  319B  23B8  3191   	fcall	_setProductData
  7979                           
  7980                           ;RF_Control_B1.c: 425: setProductData(11, lights);
  7981  1149  0020               	movlb	0	; select bank0
  7982  114A  0867               	movf	setRF_DimmerValue@lights,w
  7983  114B  00E6               	movwf	??_setRF_DimmerValue
  7984  114C  0866               	movf	??_setRF_DimmerValue,w
  7985  114D  00E2               	movwf	setProductData@value
  7986  114E  300B               	movlw	11
  7987  114F  319B  23B8  3191   	fcall	_setProductData
  7988                           
  7989                           ;RF_Control_B1.c: 426: setProductData((20 + lights), RF_Data[9]);
  7990  1152  0023               	movlb	3	; select bank3
  7991  1153  0829               	movf	(_RF_Data^(0+384)+9),w
  7992  1154  0020               	movlb	0	; select bank0
  7993  1155  00E6               	movwf	??_setRF_DimmerValue
  7994  1156  0866               	movf	??_setRF_DimmerValue,w
  7995  1157  00E2               	movwf	setProductData@value
  7996  1158  0867               	movf	setRF_DimmerValue@lights,w
  7997  1159  3E14               	addlw	20
  7998  115A  319B  23B8  3191   	fcall	_setProductData
  7999                           
  8000                           ;RF_Control_B1.c: 427: setDimmerLights_AdjRF(lights);
  8001  115D  0020               	movlb	0	; select bank0
  8002  115E  0867               	movf	setRF_DimmerValue@lights,w
  8003  115F  319F  2768         	fcall	_setDimmerLights_AdjRF
  8004  1161  0008               	return
  8005  1162                     __end_of_setRF_DimmerValue:	
  8006                           
  8007                           	psect	text33
  8008  1F68                     __ptext33:	
  8009 ;; *************** function _setDimmerLights_AdjRF *****************
  8010 ;; Defined at:
  8011 ;;		line 931 in file "../src/Dimmer_B1.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;  lights          1    wreg     unsigned char 
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;  lights          1   67[BANK0 ] unsigned char 
  8016 ;; Return value:  Size  Location     Type
  8017 ;;		None               void
  8018 ;; Registers used:
  8019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8026 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8027 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;Total ram usage:        2 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; Hardware stack levels required when called:    7
  8032 ;; This function calls:
  8033 ;;		_DimmerLightsPointSelect
  8034 ;;		_getPercentValue
  8035 ;; This function is called by:
  8036 ;;		_setRF_DimmerValue
  8037 ;; This function uses a non-reentrant model
  8038 ;;
  8039                           
  8040                           
  8041                           ;psect for function _setDimmerLights_AdjRF
  8042  1F68                     _setDimmerLights_AdjRF:	
  8043                           
  8044                           ;incstack = 0
  8045                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8046                           ;setDimmerLights_AdjRF@lights stored from wreg
  8047  1F68  0020               	movlb	0	; select bank0
  8048  1F69  00E3               	movwf	setDimmerLights_AdjRF@lights
  8049                           
  8050                           ;Dimmer_B1.c: 933: DimmerLightsPointSelect(lights);
  8051  1F6A  0863               	movf	setDimmerLights_AdjRF@lights,w
  8052  1F6B  319C  2482  319F   	fcall	_DimmerLightsPointSelect
  8053                           
  8054                           ;Dimmer_B1.c: 934: DimmerLights->AdjRF = 1;
  8055  1F6E  0020               	movlb	0	; select bank0
  8056  1F6F  086F               	movf	_DimmerLights,w
  8057  1F70  3E02               	addlw	2
  8058  1F71  0086               	movwf	6
  8059  1F72  3001               	movlw	1	; select bank2/3
  8060  1F73  0087               	movwf	7
  8061  1F74  1401               	bsf	1,0
  8062                           
  8063                           ;Dimmer_B1.c: 935: DimmerLights->Signal = 1;
  8064  1F75  0A6F               	incf	_DimmerLights,w
  8065  1F76  0086               	movwf	6
  8066  1F77  3001               	movlw	1	; select bank2/3
  8067  1F78  0087               	movwf	7
  8068  1F79  1681               	bsf	1,5
  8069                           
  8070                           ;Dimmer_B1.c: 936: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8071  1F7A  087A               	movf	_product,w
  8072  1F7B  3E09               	addlw	9
  8073  1F7C  0086               	movwf	6
  8074  1F7D  3002               	movlw	2	; select bank4/5
  8075  1F7E  0087               	movwf	7
  8076  1F7F  0801               	movf	1,w
  8077  1F80  3189  21F8         	fcall	_getPercentValue
  8078  1F82  0020               	movlb	0	; select bank0
  8079  1F83  00E2               	movwf	??_setDimmerLights_AdjRF
  8080  1F84  086F               	movf	_DimmerLights,w
  8081  1F85  3E06               	addlw	6
  8082  1F86  0086               	movwf	6
  8083  1F87  3001               	movlw	1	; select bank2/3
  8084  1F88  0087               	movwf	7
  8085  1F89  0862               	movf	??_setDimmerLights_AdjRF,w
  8086  1F8A  0081               	movwf	1
  8087  1F8B  0008               	return
  8088  1F8C                     __end_of_setDimmerLights_AdjRF:	
  8089                           
  8090                           	psect	text34
  8091  09F8                     __ptext34:	
  8092 ;; *************** function _getPercentValue *****************
  8093 ;; Defined at:
  8094 ;;		line 1046 in file "../src/Dimmer_B1.c"
  8095 ;; Parameters:    Size  Location     Type
  8096 ;;  value           1    wreg     unsigned char 
  8097 ;; Auto vars:     Size  Location     Type
  8098 ;;  value           1   62[BANK0 ] unsigned char 
  8099 ;;  i               3   63[BANK0 ] float 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  1    wreg      unsigned char 
  8102 ;; Registers used:
  8103 ;;		wreg, status,2, status,0, pclath, cstack
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;Total ram usage:        6 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    6
  8116 ;; This function calls:
  8117 ;;		___awtoft
  8118 ;;		___ftadd
  8119 ;;		___ftdiv
  8120 ;;		___ftmul
  8121 ;;		___ftneg
  8122 ;;		___fttol
  8123 ;; This function is called by:
  8124 ;;		_setDimmerLights_AdjRF
  8125 ;; This function uses a non-reentrant model
  8126 ;;
  8127                           
  8128                           
  8129                           ;psect for function _getPercentValue
  8130  09F8                     _getPercentValue:	
  8131                           
  8132                           ;incstack = 0
  8133                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8134                           ;getPercentValue@value stored from wreg
  8135  09F8  0020               	movlb	0	; select bank0
  8136  09F9  00DE               	movwf	getPercentValue@value
  8137                           
  8138                           ;Dimmer_B1.c: 1054: float i = ((char)(70*0.8)) - ((char)(15*0.8));
  8139  09FA  3000               	movlw	0
  8140  09FB  00DF               	movwf	getPercentValue@i
  8141  09FC  3030               	movlw	48
  8142  09FD  00E0               	movwf	getPercentValue@i+1
  8143  09FE  3042               	movlw	66
  8144  09FF  00E1               	movwf	getPercentValue@i+2
  8145                           
  8146                           ;Dimmer_B1.c: 1055: i /= 100;
  8147  0A00  3000               	movlw	0
  8148  0A01  00AE               	movwf	___ftdiv@f2
  8149  0A02  30C8               	movlw	200
  8150  0A03  00AF               	movwf	___ftdiv@f2+1
  8151  0A04  3042               	movlw	66
  8152  0A05  00B0               	movwf	___ftdiv@f2+2
  8153  0A06  085F               	movf	getPercentValue@i,w
  8154  0A07  00B1               	movwf	___ftdiv@f1
  8155  0A08  0860               	movf	getPercentValue@i+1,w
  8156  0A09  00B2               	movwf	___ftdiv@f1+1
  8157  0A0A  0861               	movf	getPercentValue@i+2,w
  8158  0A0B  00B3               	movwf	___ftdiv@f1+2
  8159  0A0C  318E  26A7  3189   	fcall	___ftdiv
  8160  0A0F  0020               	movlb	0	; select bank0
  8161  0A10  082E               	movf	?___ftdiv,w
  8162  0A11  00DF               	movwf	getPercentValue@i
  8163  0A12  082F               	movf	?___ftdiv+1,w
  8164  0A13  00E0               	movwf	getPercentValue@i+1
  8165  0A14  0830               	movf	?___ftdiv+2,w
  8166  0A15  00E1               	movwf	getPercentValue@i+2
  8167                           
  8168                           ;Dimmer_B1.c: 1057: return (char) (((char)(70*0.8)) - ((100 - value) * i));
  8169  0A16  085E               	movf	getPercentValue@value,w
  8170  0A17  00DC               	movwf	??_getPercentValue
  8171  0A18  01DD               	clrf	??_getPercentValue+1
  8172  0A19  09DC               	comf	??_getPercentValue,f
  8173  0A1A  09DD               	comf	??_getPercentValue+1,f
  8174  0A1B  0ADC               	incf	??_getPercentValue,f
  8175  0A1C  1903               	skipnz
  8176  0A1D  0ADD               	incf	??_getPercentValue+1,f
  8177  0A1E  085C               	movf	??_getPercentValue,w
  8178  0A1F  3E64               	addlw	100
  8179  0A20  00A8               	movwf	___awtoft@c
  8180  0A21  3000               	movlw	0
  8181  0A22  3D5D               	addwfc	??_getPercentValue+1,w
  8182  0A23  00A9               	movwf	___awtoft@c+1
  8183  0A24  319F  2723  3189   	fcall	___awtoft
  8184  0A27  0020               	movlb	0	; select bank0
  8185  0A28  0828               	movf	?___awtoft,w
  8186  0A29  00B1               	movwf	___ftmul@f2
  8187  0A2A  0829               	movf	?___awtoft+1,w
  8188  0A2B  00B2               	movwf	___ftmul@f2+1
  8189  0A2C  082A               	movf	?___awtoft+2,w
  8190  0A2D  00B3               	movwf	___ftmul@f2+2
  8191  0A2E  085F               	movf	getPercentValue@i,w
  8192  0A2F  00AE               	movwf	___ftmul@f1
  8193  0A30  0860               	movf	getPercentValue@i+1,w
  8194  0A31  00AF               	movwf	___ftmul@f1+1
  8195  0A32  0861               	movf	getPercentValue@i+2,w
  8196  0A33  00B0               	movwf	___ftmul@f1+2
  8197  0A34  3187  271F  3189   	fcall	___ftmul
  8198  0A37  0020               	movlb	0	; select bank0
  8199  0A38  082E               	movf	?___ftmul,w
  8200  0A39  00BE               	movwf	___ftneg@f1
  8201  0A3A  082F               	movf	?___ftmul+1,w
  8202  0A3B  00BF               	movwf	___ftneg@f1+1
  8203  0A3C  0830               	movf	?___ftmul+2,w
  8204  0A3D  00C0               	movwf	___ftneg@f1+2
  8205  0A3E  319B  2323  3189   	fcall	___ftneg
  8206  0A41  0020               	movlb	0	; select bank0
  8207  0A42  083E               	movf	?___ftneg,w
  8208  0A43  00C4               	movwf	___ftadd@f2
  8209  0A44  083F               	movf	?___ftneg+1,w
  8210  0A45  00C5               	movwf	___ftadd@f2+1
  8211  0A46  0840               	movf	?___ftneg+2,w
  8212  0A47  00C6               	movwf	___ftadd@f2+2
  8213  0A48  3000               	movlw	0
  8214  0A49  00C1               	movwf	___ftadd@f1
  8215  0A4A  3060               	movlw	96
  8216  0A4B  00C2               	movwf	___ftadd@f1+1
  8217  0A4C  3042               	movlw	66
  8218  0A4D  00C3               	movwf	___ftadd@f1+2
  8219  0A4E  3184  2469  3189   	fcall	___ftadd
  8220  0A51  0020               	movlb	0	; select bank0
  8221  0A52  0841               	movf	?___ftadd,w
  8222  0A53  00CE               	movwf	___fttol@f1
  8223  0A54  0842               	movf	?___ftadd+1,w
  8224  0A55  00CF               	movwf	___fttol@f1+1
  8225  0A56  0843               	movf	?___ftadd+2,w
  8226  0A57  00D0               	movwf	___fttol@f1+2
  8227  0A58  318D  2589         	fcall	___fttol
  8228  0A5A  0020               	movlb	0	; select bank0
  8229  0A5B  084E               	movf	?___fttol,w
  8230  0A5C  0008               	return
  8231  0A5D                     __end_of_getPercentValue:	
  8232                           
  8233                           	psect	text35
  8234  071F                     __ptext35:	
  8235 ;; *************** function ___ftmul *****************
  8236 ;; Defined at:
  8237 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8238 ;; Parameters:    Size  Location     Type
  8239 ;;  f1              3   14[BANK0 ] float 
  8240 ;;  f2              3   17[BANK0 ] float 
  8241 ;; Auto vars:     Size  Location     Type
  8242 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8243 ;;  sign            1   29[BANK0 ] unsigned char 
  8244 ;;  cntr            1   28[BANK0 ] unsigned char 
  8245 ;;  exp             1   24[BANK0 ] unsigned char 
  8246 ;; Return value:  Size  Location     Type
  8247 ;;                  3   14[BANK0 ] float 
  8248 ;; Registers used:
  8249 ;;		wreg, status,2, status,0, pclath, cstack
  8250 ;; Tracked objects:
  8251 ;;		On entry : 0/0
  8252 ;;		On exit  : 0/0
  8253 ;;		Unchanged: 0/0
  8254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8255 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8256 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8257 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;Total ram usage:       16 bytes
  8260 ;; Hardware stack levels used:    1
  8261 ;; Hardware stack levels required when called:    5
  8262 ;; This function calls:
  8263 ;;		___ftpack
  8264 ;; This function is called by:
  8265 ;;		_getPercentValue
  8266 ;; This function uses a non-reentrant model
  8267 ;;
  8268                           
  8269                           
  8270                           ;psect for function ___ftmul
  8271  071F                     ___ftmul:	
  8272                           
  8273                           ;incstack = 0
  8274                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8275  071F  0020               	movlb	0	; select bank0
  8276  0720  082E               	movf	___ftmul@f1,w
  8277  0721  00B4               	movwf	??___ftmul
  8278  0722  082F               	movf	___ftmul@f1+1,w
  8279  0723  00B5               	movwf	??___ftmul+1
  8280  0724  0830               	movf	___ftmul@f1+2,w
  8281  0725  00B6               	movwf	??___ftmul+2
  8282  0726  1003               	clrc
  8283  0727  0D35               	rlf	??___ftmul+1,w
  8284  0728  0D36               	rlf	??___ftmul+2,w
  8285  0729  00B7               	movwf	??___ftmul+3
  8286  072A  0837               	movf	??___ftmul+3,w
  8287  072B  00B8               	movwf	___ftmul@exp
  8288  072C  08B8               	movf	___ftmul@exp,f
  8289  072D  1D03               	skipz
  8290  072E  2F36               	goto	l8739
  8291  072F  3000               	movlw	0
  8292  0730  00AE               	movwf	?___ftmul
  8293  0731  3000               	movlw	0
  8294  0732  00AF               	movwf	?___ftmul+1
  8295  0733  3000               	movlw	0
  8296  0734  00B0               	movwf	?___ftmul+2
  8297  0735  0008               	return
  8298  0736                     l8739:	
  8299  0736  0831               	movf	___ftmul@f2,w
  8300  0737  00B4               	movwf	??___ftmul
  8301  0738  0832               	movf	___ftmul@f2+1,w
  8302  0739  00B5               	movwf	??___ftmul+1
  8303  073A  0833               	movf	___ftmul@f2+2,w
  8304  073B  00B6               	movwf	??___ftmul+2
  8305  073C  1003               	clrc
  8306  073D  0D35               	rlf	??___ftmul+1,w
  8307  073E  0D36               	rlf	??___ftmul+2,w
  8308  073F  00B7               	movwf	??___ftmul+3
  8309  0740  0837               	movf	??___ftmul+3,w
  8310  0741  00BD               	movwf	___ftmul@sign
  8311  0742  08BD               	movf	___ftmul@sign,f
  8312  0743  1D03               	skipz
  8313  0744  2F4C               	goto	l8745
  8314  0745  3000               	movlw	0
  8315  0746  00AE               	movwf	?___ftmul
  8316  0747  3000               	movlw	0
  8317  0748  00AF               	movwf	?___ftmul+1
  8318  0749  3000               	movlw	0
  8319  074A  00B0               	movwf	?___ftmul+2
  8320  074B  0008               	return
  8321  074C                     l8745:	
  8322  074C  083D               	movf	___ftmul@sign,w
  8323  074D  3E7B               	addlw	123
  8324  074E  00B4               	movwf	??___ftmul
  8325  074F  0834               	movf	??___ftmul,w
  8326  0750  07B8               	addwf	___ftmul@exp,f
  8327  0751  082E               	movf	___ftmul@f1,w
  8328  0752  00B4               	movwf	??___ftmul
  8329  0753  082F               	movf	___ftmul@f1+1,w
  8330  0754  00B5               	movwf	??___ftmul+1
  8331  0755  0830               	movf	___ftmul@f1+2,w
  8332  0756  00B6               	movwf	??___ftmul+2
  8333  0757  3010               	movlw	16
  8334  0758                     u9205:	
  8335  0758  36B6               	lsrf	??___ftmul+2,f
  8336  0759  0CB5               	rrf	??___ftmul+1,f
  8337  075A  0CB4               	rrf	??___ftmul,f
  8338  075B  0B89               	decfsz	9,f
  8339  075C  2F58               	goto	u9205
  8340  075D  0834               	movf	??___ftmul,w
  8341  075E  00B7               	movwf	??___ftmul+3
  8342  075F  0837               	movf	??___ftmul+3,w
  8343  0760  00BD               	movwf	___ftmul@sign
  8344  0761  0831               	movf	___ftmul@f2,w
  8345  0762  00B4               	movwf	??___ftmul
  8346  0763  0832               	movf	___ftmul@f2+1,w
  8347  0764  00B5               	movwf	??___ftmul+1
  8348  0765  0833               	movf	___ftmul@f2+2,w
  8349  0766  00B6               	movwf	??___ftmul+2
  8350  0767  3010               	movlw	16
  8351  0768                     u9215:	
  8352  0768  36B6               	lsrf	??___ftmul+2,f
  8353  0769  0CB5               	rrf	??___ftmul+1,f
  8354  076A  0CB4               	rrf	??___ftmul,f
  8355  076B  0B89               	decfsz	9,f
  8356  076C  2F68               	goto	u9215
  8357  076D  0834               	movf	??___ftmul,w
  8358  076E  00B7               	movwf	??___ftmul+3
  8359  076F  0837               	movf	??___ftmul+3,w
  8360  0770  06BD               	xorwf	___ftmul@sign,f
  8361  0771  3080               	movlw	128
  8362  0772  00B4               	movwf	??___ftmul
  8363  0773  0834               	movf	??___ftmul,w
  8364  0774  05BD               	andwf	___ftmul@sign,f
  8365  0775  17AF               	bsf	___ftmul@f1+1,7
  8366  0776  17B2               	bsf	___ftmul@f2+1,7
  8367  0777  30FF               	movlw	255
  8368  0778  05B1               	andwf	___ftmul@f2,f
  8369  0779  30FF               	movlw	255
  8370  077A  05B2               	andwf	___ftmul@f2+1,f
  8371  077B  3000               	movlw	0
  8372  077C  05B3               	andwf	___ftmul@f2+2,f
  8373  077D  3000               	movlw	0
  8374  077E  00B9               	movwf	___ftmul@f3_as_product
  8375  077F  3000               	movlw	0
  8376  0780  00BA               	movwf	___ftmul@f3_as_product+1
  8377  0781  3000               	movlw	0
  8378  0782  00BB               	movwf	___ftmul@f3_as_product+2
  8379  0783  3007               	movlw	7
  8380  0784  00B4               	movwf	??___ftmul
  8381  0785  0834               	movf	??___ftmul,w
  8382  0786  00BC               	movwf	___ftmul@cntr
  8383  0787                     l8757:	
  8384  0787  1C2E               	btfss	___ftmul@f1,0
  8385  0788  2F8F               	goto	l8761
  8386  0789  0831               	movf	___ftmul@f2,w
  8387  078A  07B9               	addwf	___ftmul@f3_as_product,f
  8388  078B  0832               	movf	___ftmul@f2+1,w
  8389  078C  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8390  078D  0833               	movf	___ftmul@f2+2,w
  8391  078E  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8392  078F                     l8761:	
  8393  078F  3001               	movlw	1
  8394  0790                     u9235:	
  8395  0790  36B0               	lsrf	___ftmul@f1+2,f
  8396  0791  0CAF               	rrf	___ftmul@f1+1,f
  8397  0792  0CAE               	rrf	___ftmul@f1,f
  8398  0793  0B89               	decfsz	9,f
  8399  0794  2F90               	goto	u9235
  8400  0795  3001               	movlw	1
  8401  0796                     u9245:	
  8402  0796  35B1               	lslf	___ftmul@f2,f
  8403  0797  0DB2               	rlf	___ftmul@f2+1,f
  8404  0798  0DB3               	rlf	___ftmul@f2+2,f
  8405  0799  0B89               	decfsz	9,f
  8406  079A  2F96               	goto	u9245
  8407  079B  3001               	movlw	1
  8408  079C  02BC               	subwf	___ftmul@cntr,f
  8409  079D  1D03               	btfss	3,2
  8410  079E  2F87               	goto	l8757
  8411  079F  3009               	movlw	9
  8412  07A0  00B4               	movwf	??___ftmul
  8413  07A1  0834               	movf	??___ftmul,w
  8414  07A2  00BC               	movwf	___ftmul@cntr
  8415  07A3                     l8769:	
  8416  07A3  1C2E               	btfss	___ftmul@f1,0
  8417  07A4  2FAB               	goto	l8773
  8418  07A5  0831               	movf	___ftmul@f2,w
  8419  07A6  07B9               	addwf	___ftmul@f3_as_product,f
  8420  07A7  0832               	movf	___ftmul@f2+1,w
  8421  07A8  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8422  07A9  0833               	movf	___ftmul@f2+2,w
  8423  07AA  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8424  07AB                     l8773:	
  8425  07AB  3001               	movlw	1
  8426  07AC                     u9275:	
  8427  07AC  36B0               	lsrf	___ftmul@f1+2,f
  8428  07AD  0CAF               	rrf	___ftmul@f1+1,f
  8429  07AE  0CAE               	rrf	___ftmul@f1,f
  8430  07AF  0B89               	decfsz	9,f
  8431  07B0  2FAC               	goto	u9275
  8432  07B1  3001               	movlw	1
  8433  07B2                     u9285:	
  8434  07B2  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8435  07B3  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8436  07B4  0CB9               	rrf	___ftmul@f3_as_product,f
  8437  07B5  0B89               	decfsz	9,f
  8438  07B6  2FB2               	goto	u9285
  8439  07B7  3001               	movlw	1
  8440  07B8  02BC               	subwf	___ftmul@cntr,f
  8441  07B9  1D03               	btfss	3,2
  8442  07BA  2FA3               	goto	l8769
  8443  07BB  0839               	movf	___ftmul@f3_as_product,w
  8444  07BC  00A0               	movwf	___ftpack@arg
  8445  07BD  083A               	movf	___ftmul@f3_as_product+1,w
  8446  07BE  00A1               	movwf	___ftpack@arg+1
  8447  07BF  083B               	movf	___ftmul@f3_as_product+2,w
  8448  07C0  00A2               	movwf	___ftpack@arg+2
  8449  07C1  0838               	movf	___ftmul@exp,w
  8450  07C2  00B4               	movwf	??___ftmul
  8451  07C3  0834               	movf	??___ftmul,w
  8452  07C4  00A3               	movwf	___ftpack@exp
  8453  07C5  083D               	movf	___ftmul@sign,w
  8454  07C6  00B5               	movwf	??___ftmul+1
  8455  07C7  0835               	movf	??___ftmul+1,w
  8456  07C8  00A4               	movwf	___ftpack@sign
  8457  07C9  3188  20D0         	fcall	___ftpack
  8458  07CB  0020               	movlb	0	; select bank0
  8459  07CC  0820               	movf	?___ftpack,w
  8460  07CD  00AE               	movwf	?___ftmul
  8461  07CE  0821               	movf	?___ftpack+1,w
  8462  07CF  00AF               	movwf	?___ftmul+1
  8463  07D0  0822               	movf	?___ftpack+2,w
  8464  07D1  00B0               	movwf	?___ftmul+2
  8465  07D2  0008               	return
  8466  07D3                     __end_of___ftmul:	
  8467                           
  8468                           	psect	text36
  8469  1CBB                     __ptext36:	
  8470 ;; *************** function _setMemory_Modify *****************
  8471 ;; Defined at:
  8472 ;;		line 1058 in file "../src/MCU_B1.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;  command         1    wreg     unsigned char 
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;  command         1    1[BANK0 ] unsigned char 
  8477 ;; Return value:  Size  Location     Type
  8478 ;;		None               void
  8479 ;; Registers used:
  8480 ;;		wreg, status,2, status,0
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;Total ram usage:        2 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; Hardware stack levels required when called:    4
  8493 ;; This function calls:
  8494 ;;		Nothing
  8495 ;; This function is called by:
  8496 ;;		_setLog_Code
  8497 ;;		_setRFSW_AdjControl
  8498 ;; This function uses a non-reentrant model
  8499 ;;
  8500                           
  8501                           
  8502                           ;psect for function _setMemory_Modify
  8503  1CBB                     _setMemory_Modify:	
  8504                           
  8505                           ;incstack = 0
  8506                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8507                           ;setMemory_Modify@command stored from wreg
  8508  1CBB  0020               	movlb	0	; select bank0
  8509  1CBC  00A1               	movwf	setMemory_Modify@command
  8510                           
  8511                           ;MCU_B1.c: 1059: Memory.Modify = command == 1 ? 1 : 0;
  8512  1CBD  0821               	movf	setMemory_Modify@command,w
  8513  1CBE  3A01               	xorlw	1
  8514  1CBF  3000               	movlw	0
  8515  1CC0  1903               	skipnz
  8516  1CC1  3001               	movlw	1
  8517  1CC2  00A0               	movwf	??_setMemory_Modify
  8518  1CC3  0024               	movlb	4	; select bank4
  8519  1CC4  0844               	movf	(_Memory^(0+512)+36),w
  8520  1CC5  0020               	movlb	0	; select bank0
  8521  1CC6  0620               	xorwf	??_setMemory_Modify,w
  8522  1CC7  39FE               	andlw	-2
  8523  1CC8  0620               	xorwf	??_setMemory_Modify,w
  8524  1CC9  0024               	movlb	4	; select bank4
  8525  1CCA  00C4               	movwf	(_Memory^(0+512)+36)
  8526                           
  8527                           ;MCU_B1.c: 1060: Memory.Time = 0;
  8528  1CCB  01C2               	clrf	(_Memory^(0+512)+34)
  8529  1CCC  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8530  1CCD  0008               	return
  8531  1CCE                     __end_of_setMemory_Modify:	
  8532                           
  8533                           	psect	text37
  8534  1C16                     __ptext37:	
  8535 ;; *************** function _getRF_KeyStatus *****************
  8536 ;; Defined at:
  8537 ;;		line 150 in file "../src/RF_Control_B1.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;		None
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;  key             1    1[BANK0 ] unsigned char 
  8542 ;; Return value:  Size  Location     Type
  8543 ;;                  1    wreg      unsigned char 
  8544 ;; Registers used:
  8545 ;;		wreg, status,2
  8546 ;; Tracked objects:
  8547 ;;		On entry : 0/0
  8548 ;;		On exit  : 0/0
  8549 ;;		Unchanged: 0/0
  8550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;Total ram usage:        3 bytes
  8556 ;; Hardware stack levels used:    1
  8557 ;; Hardware stack levels required when called:    4
  8558 ;; This function calls:
  8559 ;;		Nothing
  8560 ;; This function is called by:
  8561 ;;		_setRF_Main
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           
  8566                           ;psect for function _getRF_KeyStatus
  8567  1C16                     _getRF_KeyStatus:	
  8568                           
  8569                           ;RF_Control_B1.c: 151: char key = 0;
  8570                           
  8571                           ;incstack = 0
  8572                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8573  1C16  0020               	movlb	0	; select bank0
  8574  1C17  01A1               	clrf	getRF_KeyStatus@key
  8575                           
  8576                           ;RF_Control_B1.c: 157: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8577  1C18  01A2               	clrf	_getRF_KeyStatus$5304
  8578  1C19  0AA2               	incf	_getRF_KeyStatus$5304,f
  8579  1C1A  1F0C               	btfss	12,6	;volatile
  8580  1C1B  1A0C               	btfsc	12,4	;volatile
  8581  1C1C  2C21               	goto	l9827
  8582  1C1D  1C0C               	btfss	12,0	;volatile
  8583  1C1E  188D               	btfsc	13,1	;volatile
  8584  1C1F  2C21               	goto	l9827
  8585  1C20  01A2               	clrf	_getRF_KeyStatus$5304
  8586  1C21                     l9827:	
  8587  1C21  0822               	movf	_getRF_KeyStatus$5304,w
  8588  1C22  00A0               	movwf	??_getRF_KeyStatus
  8589  1C23  0820               	movf	??_getRF_KeyStatus,w
  8590  1C24  00A1               	movwf	getRF_KeyStatus@key
  8591                           
  8592                           ;RF_Control_B1.c: 163: return key;
  8593  1C25  0821               	movf	getRF_KeyStatus@key,w
  8594  1C26  0008               	return
  8595  1C27                     __end_of_getRF_KeyStatus:	
  8596                           
  8597                           	psect	text38
  8598  1C05                     __ptext38:	
  8599 ;; *************** function _getBuz_GO *****************
  8600 ;; Defined at:
  8601 ;;		line 82 in file "../src/Buzzer_B1.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;		None
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;  i               2    4[BANK0 ] int 
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  2    0[BANK0 ] int 
  8608 ;; Registers used:
  8609 ;;		wreg, status,2, status,0
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8615 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;Total ram usage:        6 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    4
  8622 ;; This function calls:
  8623 ;;		Nothing
  8624 ;; This function is called by:
  8625 ;;		_setRF_Main
  8626 ;; This function uses a non-reentrant model
  8627 ;;
  8628                           
  8629                           
  8630                           ;psect for function _getBuz_GO
  8631  1C05                     _getBuz_GO:	
  8632                           
  8633                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8634                           
  8635                           ;incstack = 0
  8636                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8637  1C05  0021               	movlb	1	; select bank1
  8638  1C06  0C3C               	rrf	_Buz1^(0+128),w
  8639  1C07  3901               	andlw	1
  8640  1C08  0020               	movlb	0	; select bank0
  8641  1C09  00A2               	movwf	??_getBuz_GO
  8642  1C0A  01A3               	clrf	??_getBuz_GO+1
  8643  1C0B  0822               	movf	??_getBuz_GO,w
  8644  1C0C  00A4               	movwf	getBuz_GO@i
  8645  1C0D  0823               	movf	??_getBuz_GO+1,w
  8646  1C0E  00A5               	movwf	getBuz_GO@i+1
  8647                           
  8648                           ;Buzzer_B1.c: 84: return i;
  8649  1C0F  0825               	movf	getBuz_GO@i+1,w
  8650  1C10  01A1               	clrf	?_getBuz_GO+1
  8651  1C11  07A1               	addwf	?_getBuz_GO+1,f
  8652  1C12  0824               	movf	getBuz_GO@i,w
  8653  1C13  01A0               	clrf	?_getBuz_GO
  8654  1C14  07A0               	addwf	?_getBuz_GO,f
  8655  1C15  0008               	return
  8656  1C16                     __end_of_getBuz_GO:	
  8657                           
  8658                           	psect	text39
  8659  1BC6                     __ptext39:	
  8660 ;; *************** function _RF_RxDisable *****************
  8661 ;; Defined at:
  8662 ;;		line 223 in file "../src/RF_Control_B1.c"
  8663 ;; Parameters:    Size  Location     Type
  8664 ;;		None
  8665 ;; Auto vars:     Size  Location     Type
  8666 ;;		None
  8667 ;; Return value:  Size  Location     Type
  8668 ;;		None               void
  8669 ;; Registers used:
  8670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8671 ;; Tracked objects:
  8672 ;;		On entry : 0/0
  8673 ;;		On exit  : 0/0
  8674 ;;		Unchanged: 0/0
  8675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8680 ;;Total ram usage:        0 bytes
  8681 ;; Hardware stack levels used:    1
  8682 ;; Hardware stack levels required when called:    6
  8683 ;; This function calls:
  8684 ;;		_CC2500_WriteCommand
  8685 ;; This function is called by:
  8686 ;;		_setRF_Main
  8687 ;; This function uses a non-reentrant model
  8688 ;;
  8689                           
  8690                           
  8691                           ;psect for function _RF_RxDisable
  8692  1BC6                     _RF_RxDisable:	
  8693                           
  8694                           ;RF_Control_B1.c: 224: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8695                           
  8696                           ;incstack = 0
  8697                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8698  1BC6  0021               	movlb	1	; select bank1
  8699  1BC7  18A0               	btfsc	_RF1^(0+128),1
  8700  1BC8  2BCB               	goto	l2296
  8701  1BC9  1DA0               	btfss	_RF1^(0+128),3
  8702  1BCA  0008               	return
  8703  1BCB                     l2296:	
  8704                           
  8705                           ;RF_Control_B1.c: 225: RF1.RxStatus = 0;
  8706  1BCB  11A0               	bcf	_RF1^(0+128),3
  8707                           
  8708                           ;RF_Control_B1.c: 226: RF1.ReceiveGO = 0;
  8709  1BCC  10A0               	bcf	_RF1^(0+128),1
  8710                           
  8711                           ;RF_Control_B1.c: 227: CC2500_WriteCommand(0x36);
  8712  1BCD  3036               	movlw	54
  8713  1BCE  319D  25F5  319B   	fcall	_CC2500_WriteCommand
  8714                           
  8715                           ;RF_Control_B1.c: 228: CC2500_WriteCommand(0x3A);
  8716  1BD1  303A               	movlw	58
  8717  1BD2  319D  25F5         	fcall	_CC2500_WriteCommand
  8718  1BD4  0008               	return
  8719  1BD5                     __end_of_RF_RxDisable:	
  8720                           
  8721                           	psect	text40
  8722  0B2F                     __ptext40:	
  8723 ;; *************** function _CC2500_TxData *****************
  8724 ;; Defined at:
  8725 ;;		line 32 in file "../src/CC2500_B1.c"
  8726 ;; Parameters:    Size  Location     Type
  8727 ;;		None
  8728 ;; Auto vars:     Size  Location     Type
  8729 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8730 ;; Return value:  Size  Location     Type
  8731 ;;		None               void
  8732 ;; Registers used:
  8733 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8734 ;; Tracked objects:
  8735 ;;		On entry : 0/0
  8736 ;;		On exit  : 0/0
  8737 ;;		Unchanged: 0/0
  8738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;Total ram usage:        2 bytes
  8744 ;; Hardware stack levels used:    1
  8745 ;; Hardware stack levels required when called:    6
  8746 ;; This function calls:
  8747 ;;		_CC2500_WriteByte
  8748 ;;		_CC2500_WriteCommand
  8749 ;;		_RF_Timeout_Counter
  8750 ;;		_setRF_TimeoutCleared
  8751 ;; This function is called by:
  8752 ;;		_setRF_Main
  8753 ;; This function uses a non-reentrant model
  8754 ;;
  8755                           
  8756                           
  8757                           ;psect for function _CC2500_TxData
  8758  0B2F                     _CC2500_TxData:	
  8759                           
  8760                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8761                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8762                           
  8763                           ;incstack = 0
  8764                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8765  0B2F  3036               	movlw	54
  8766  0B30  319D  25F5  318B   	fcall	_CC2500_WriteCommand
  8767                           
  8768                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8769  0B33  303B               	movlw	59
  8770  0B34  319D  25F5  318B   	fcall	_CC2500_WriteCommand
  8771                           
  8772                           ;CC2500_B1.c: 38: RC4 = 0;
  8773  0B37  0020               	movlb	0	; select bank0
  8774  0B38  120E               	bcf	14,4	;volatile
  8775                           
  8776                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8777  0B39  307F               	movlw	127
  8778  0B3A  00A4               	movwf	??_CC2500_TxData
  8779  0B3B  0824               	movf	??_CC2500_TxData,w
  8780  0B3C  0021               	movlb	1	; select bank1
  8781  0B3D  00D2               	movwf	_SPI0Buffer^(0+128)
  8782                           
  8783                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8784  0B3E  2B42               	goto	l9523
  8785  0B3F                     l9521:	
  8786                           
  8787                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8788  0B3F  319D  256E  318B   	fcall	_RF_Timeout_Counter
  8789  0B42                     l9523:	
  8790  0B42  0020               	movlb	0	; select bank0
  8791  0B43  1D0E               	btfss	14,2	;volatile
  8792  0B44  2B48               	goto	l9527
  8793  0B45  0021               	movlb	1	; select bank1
  8794  0B46  1F21               	btfss	(_RF1^(0+128)+1),6
  8795  0B47  2B3F               	goto	l9521
  8796  0B48                     l9527:	
  8797                           
  8798                           ;CC2500_B1.c: 42: };
  8799                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8800  0B48  319A  22C5  318B   	fcall	_setRF_TimeoutCleared
  8801                           
  8802                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8803  0B4B  319D  25C2  318B   	fcall	_CC2500_WriteByte
  8804                           
  8805                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8806  0B4E  0021               	movlb	1	; select bank1
  8807  0B4F  0854               	movf	_Tx_Length^(0+128),w
  8808  0B50  0020               	movlb	0	; select bank0
  8809  0B51  00A4               	movwf	??_CC2500_TxData
  8810  0B52  0824               	movf	??_CC2500_TxData,w
  8811  0B53  0021               	movlb	1	; select bank1
  8812  0B54  00D2               	movwf	_SPI0Buffer^(0+128)
  8813                           
  8814                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8815  0B55  319D  25C2  318B   	fcall	_CC2500_WriteByte
  8816                           
  8817                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8818  0B58  0020               	movlb	0	; select bank0
  8819  0B59  01A5               	clrf	CC2500_TxData@loop_e
  8820  0B5A                     l9541:	
  8821  0B5A  0021               	movlb	1	; select bank1
  8822  0B5B  0854               	movf	_Tx_Length^(0+128),w
  8823  0B5C  0020               	movlb	0	; select bank0
  8824  0B5D  0225               	subwf	CC2500_TxData@loop_e,w
  8825  0B5E  1803               	btfsc	3,0
  8826  0B5F  2B73               	goto	l255
  8827                           
  8828                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8829  0B60  0825               	movf	CC2500_TxData@loop_e,w
  8830  0B61  3EA0               	addlw	_RF_Data& (0+255)
  8831  0B62  0086               	movwf	6
  8832  0B63  3001               	movlw	1	; select bank3/4
  8833  0B64  0087               	movwf	7
  8834  0B65  0801               	movf	1,w
  8835  0B66  00A4               	movwf	??_CC2500_TxData
  8836  0B67  0824               	movf	??_CC2500_TxData,w
  8837  0B68  0021               	movlb	1	; select bank1
  8838  0B69  00D2               	movwf	_SPI0Buffer^(0+128)
  8839                           
  8840                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8841  0B6A  319D  25C2  318B   	fcall	_CC2500_WriteByte
  8842  0B6D  3001               	movlw	1
  8843  0B6E  0020               	movlb	0	; select bank0
  8844  0B6F  00A4               	movwf	??_CC2500_TxData
  8845  0B70  0824               	movf	??_CC2500_TxData,w
  8846  0B71  07A5               	addwf	CC2500_TxData@loop_e,f
  8847  0B72  2B5A               	goto	l9541
  8848  0B73                     l255:	
  8849                           
  8850                           ;CC2500_B1.c: 51: }
  8851                           ;CC2500_B1.c: 52: RC4 = 1;
  8852  0B73  160E               	bsf	14,4	;volatile
  8853                           
  8854                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8855  0B74  3035               	movlw	53
  8856  0B75  319D  25F5  318B   	fcall	_CC2500_WriteCommand
  8857                           
  8858                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8859  0B78  2B7C               	goto	l9547
  8860  0B79                     l9545:	
  8861                           
  8862                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8863  0B79  319D  256E  318B   	fcall	_RF_Timeout_Counter
  8864  0B7C                     l9547:	
  8865  0B7C  0020               	movlb	0	; select bank0
  8866  0B7D  180D               	btfsc	13,0	;volatile
  8867  0B7E  2B82               	goto	l9551
  8868  0B7F  0021               	movlb	1	; select bank1
  8869  0B80  1F21               	btfss	(_RF1^(0+128)+1),6
  8870  0B81  2B79               	goto	l9545
  8871  0B82                     l9551:	
  8872                           
  8873                           ;CC2500_B1.c: 56: };
  8874                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8875  0B82  319A  22C5  318B   	fcall	_setRF_TimeoutCleared
  8876                           
  8877                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8878  0B85  2B89               	goto	l9555
  8879  0B86                     l9553:	
  8880                           
  8881                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8882  0B86  319D  256E  318B   	fcall	_RF_Timeout_Counter
  8883  0B89                     l9555:	
  8884  0B89  0020               	movlb	0	; select bank0
  8885  0B8A  1C0D               	btfss	13,0	;volatile
  8886  0B8B  2B8F               	goto	l9559
  8887  0B8C  0021               	movlb	1	; select bank1
  8888  0B8D  1F21               	btfss	(_RF1^(0+128)+1),6
  8889  0B8E  2B86               	goto	l9553
  8890  0B8F                     l9559:	
  8891                           
  8892                           ;CC2500_B1.c: 61: };
  8893                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8894  0B8F  319A  22C5  318B   	fcall	_setRF_TimeoutCleared
  8895                           
  8896                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8897  0B92  3036               	movlw	54
  8898  0B93  319D  25F5  318B   	fcall	_CC2500_WriteCommand
  8899                           
  8900                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8901  0B96  303B               	movlw	59
  8902  0B97  319D  25F5         	fcall	_CC2500_WriteCommand
  8903                           
  8904                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8905  0B99  14F9               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8906  0B9A  0008               	return
  8907  0B9B                     __end_of_CC2500_TxData:	
  8908                           
  8909                           	psect	text41
  8910  0AC4                     __ptext41:	
  8911 ;; *************** function _CC2500_RxData *****************
  8912 ;; Defined at:
  8913 ;;		line 73 in file "../src/CC2500_B1.c"
  8914 ;; Parameters:    Size  Location     Type
  8915 ;;		None
  8916 ;; Auto vars:     Size  Location     Type
  8917 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8918 ;; Return value:  Size  Location     Type
  8919 ;;		None               void
  8920 ;; Registers used:
  8921 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8922 ;; Tracked objects:
  8923 ;;		On entry : 0/0
  8924 ;;		On exit  : 0/0
  8925 ;;		Unchanged: 0/0
  8926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;Total ram usage:        2 bytes
  8932 ;; Hardware stack levels used:    1
  8933 ;; Hardware stack levels required when called:    6
  8934 ;; This function calls:
  8935 ;;		_CC2500_ReadByte
  8936 ;;		_CC2500_ReadStatus
  8937 ;;		_CC2500_WriteByte
  8938 ;;		_CC2500_WriteCommand
  8939 ;;		_RF_Timeout_Counter
  8940 ;;		_setRF_TimeoutCleared
  8941 ;; This function is called by:
  8942 ;;		_setRF_Main
  8943 ;; This function uses a non-reentrant model
  8944 ;;
  8945                           
  8946                           
  8947                           ;psect for function _CC2500_RxData
  8948  0AC4                     _CC2500_RxData:	
  8949                           
  8950                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8951                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8952                           
  8953                           ;incstack = 0
  8954                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8955  0AC4  0020               	movlb	0	; select bank0
  8956  0AC5  180D               	btfsc	13,0	;volatile
  8957  0AC6  0008               	return
  8958                           
  8959                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8960  0AC7  303B               	movlw	59
  8961  0AC8  319F  278C  318A   	fcall	_CC2500_ReadStatus
  8962                           
  8963                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8964  0ACB  0021               	movlb	1	; select bank1
  8965  0ACC  0857               	movf	_s_data^(0+128),w
  8966  0ACD  1903               	btfsc	3,2
  8967  0ACE  0008               	return
  8968                           
  8969                           ;CC2500_B1.c: 90: RC4 = 0;
  8970  0ACF  0020               	movlb	0	; select bank0
  8971  0AD0  120E               	bcf	14,4	;volatile
  8972                           
  8973                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8974  0AD1  30FF               	movlw	255
  8975  0AD2  00A4               	movwf	??_CC2500_RxData
  8976  0AD3  0824               	movf	??_CC2500_RxData,w
  8977  0AD4  0021               	movlb	1	; select bank1
  8978  0AD5  00D2               	movwf	_SPI0Buffer^(0+128)
  8979                           
  8980                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8981  0AD6  2ADA               	goto	l9579
  8982  0AD7                     l9577:	
  8983                           
  8984                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8985  0AD7  319D  256E  318A   	fcall	_RF_Timeout_Counter
  8986  0ADA                     l9579:	
  8987  0ADA  0020               	movlb	0	; select bank0
  8988  0ADB  1D0E               	btfss	14,2	;volatile
  8989  0ADC  2AE0               	goto	l9583
  8990  0ADD  0021               	movlb	1	; select bank1
  8991  0ADE  1F21               	btfss	(_RF1^(0+128)+1),6
  8992  0ADF  2AD7               	goto	l9577
  8993  0AE0                     l9583:	
  8994                           
  8995                           ;CC2500_B1.c: 95: };
  8996                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8997  0AE0  319A  22C5  318A   	fcall	_setRF_TimeoutCleared
  8998                           
  8999                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  9000  0AE3  319D  25C2  318A   	fcall	_CC2500_WriteByte
  9001                           
  9002                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  9003  0AE6  319E  262A  318A   	fcall	_CC2500_ReadByte
  9004                           
  9005                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  9006  0AE9  0021               	movlb	1	; select bank1
  9007  0AEA  0852               	movf	_SPI0Buffer^(0+128),w
  9008  0AEB  0020               	movlb	0	; select bank0
  9009  0AEC  00A4               	movwf	??_CC2500_RxData
  9010  0AED  0824               	movf	??_CC2500_RxData,w
  9011  0AEE  0021               	movlb	1	; select bank1
  9012  0AEF  00D1               	movwf	_Rx_Length^(0+128)
  9013                           
  9014                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9015  0AF0  0020               	movlb	0	; select bank0
  9016  0AF1  01A5               	clrf	CC2500_RxData@loop_f
  9017  0AF2                     l9599:	
  9018  0AF2  0021               	movlb	1	; select bank1
  9019  0AF3  0851               	movf	_Rx_Length^(0+128),w
  9020  0AF4  0020               	movlb	0	; select bank0
  9021  0AF5  0225               	subwf	CC2500_RxData@loop_f,w
  9022  0AF6  1803               	btfsc	3,0
  9023  0AF7  2B0B               	goto	l9601
  9024                           
  9025                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9026  0AF8  319E  262A  318A   	fcall	_CC2500_ReadByte
  9027                           
  9028                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  9029  0AFB  0021               	movlb	1	; select bank1
  9030  0AFC  0852               	movf	_SPI0Buffer^(0+128),w
  9031  0AFD  0020               	movlb	0	; select bank0
  9032  0AFE  00A4               	movwf	??_CC2500_RxData
  9033  0AFF  0825               	movf	CC2500_RxData@loop_f,w
  9034  0B00  3EA0               	addlw	_RF_Data& (0+255)
  9035  0B01  0086               	movwf	6
  9036  0B02  3001               	movlw	1	; select bank3/4
  9037  0B03  0087               	movwf	7
  9038  0B04  0824               	movf	??_CC2500_RxData,w
  9039  0B05  0081               	movwf	1
  9040  0B06  3001               	movlw	1
  9041  0B07  00A4               	movwf	??_CC2500_RxData
  9042  0B08  0824               	movf	??_CC2500_RxData,w
  9043  0B09  07A5               	addwf	CC2500_RxData@loop_f,f
  9044  0B0A  2AF2               	goto	l9599
  9045  0B0B                     l9601:	
  9046                           
  9047                           ;CC2500_B1.c: 104: }
  9048                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  9049  0B0B  319E  262A  318A   	fcall	_CC2500_ReadByte
  9050                           
  9051                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  9052  0B0E  0021               	movlb	1	; select bank1
  9053  0B0F  0852               	movf	_SPI0Buffer^(0+128),w
  9054  0B10  0020               	movlb	0	; select bank0
  9055  0B11  00A4               	movwf	??_CC2500_RxData
  9056  0B12  0824               	movf	??_CC2500_RxData,w
  9057  0B13  0021               	movlb	1	; select bank1
  9058  0B14  00D0               	movwf	_RSSI^(0+128)
  9059                           
  9060                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  9061  0B15  319E  262A  318A   	fcall	_CC2500_ReadByte
  9062                           
  9063                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  9064  0B18  0021               	movlb	1	; select bank1
  9065  0B19  0852               	movf	_SPI0Buffer^(0+128),w
  9066  0B1A  0020               	movlb	0	; select bank0
  9067  0B1B  00A4               	movwf	??_CC2500_RxData
  9068  0B1C  0824               	movf	??_CC2500_RxData,w
  9069  0B1D  0021               	movlb	1	; select bank1
  9070  0B1E  00CB               	movwf	_CRC^(0+128)
  9071                           
  9072                           ;CC2500_B1.c: 109: RC4 = 1;
  9073  0B1F  0020               	movlb	0	; select bank0
  9074  0B20  160E               	bsf	14,4	;volatile
  9075                           
  9076                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  9077  0B21  0021               	movlb	1	; select bank1
  9078  0B22  1BCB               	btfsc	_CRC^(0+128),7
  9079                           
  9080                           ;CC2500_B1.c: 111: Receive_OK = 1;
  9081  0B23  1479               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9082                           
  9083                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  9084  0B24  11A0               	bcf	_RF1^(0+128),3
  9085                           
  9086                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  9087  0B25  14A0               	bsf	_RF1^(0+128),1
  9088                           
  9089                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  9090  0B26  3036               	movlw	54
  9091  0B27  319D  25F5  318A   	fcall	_CC2500_WriteCommand
  9092                           
  9093                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  9094  0B2A  303A               	movlw	58
  9095  0B2B  319D  25F5         	fcall	_CC2500_WriteCommand
  9096  0B2D  0021               	movlb	1	; select bank1
  9097  0B2E  0008               	return
  9098  0B2F                     __end_of_CC2500_RxData:	
  9099                           
  9100                           	psect	text42
  9101  1F8C                     __ptext42:	
  9102 ;; *************** function _CC2500_ReadStatus *****************
  9103 ;; Defined at:
  9104 ;;		line 308 in file "../src/CC2500_B1.c"
  9105 ;; Parameters:    Size  Location     Type
  9106 ;;  status_addr     1    wreg     unsigned char 
  9107 ;; Auto vars:     Size  Location     Type
  9108 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9109 ;; Return value:  Size  Location     Type
  9110 ;;		None               void
  9111 ;; Registers used:
  9112 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9113 ;; Tracked objects:
  9114 ;;		On entry : 0/0
  9115 ;;		On exit  : 0/0
  9116 ;;		Unchanged: 0/0
  9117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9119 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9120 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9121 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9122 ;;Total ram usage:        2 bytes
  9123 ;; Hardware stack levels used:    1
  9124 ;; Hardware stack levels required when called:    5
  9125 ;; This function calls:
  9126 ;;		_CC2500_ReadByte
  9127 ;;		_CC2500_WriteByte
  9128 ;;		_RF_Timeout_Counter
  9129 ;;		_setRF_TimeoutCleared
  9130 ;; This function is called by:
  9131 ;;		_CC2500_RxData
  9132 ;; This function uses a non-reentrant model
  9133 ;;
  9134                           
  9135                           
  9136                           ;psect for function _CC2500_ReadStatus
  9137  1F8C                     _CC2500_ReadStatus:	
  9138                           
  9139                           ;incstack = 0
  9140                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9141                           ;CC2500_ReadStatus@status_addr stored from wreg
  9142  1F8C  0020               	movlb	0	; select bank0
  9143  1F8D  00A3               	movwf	CC2500_ReadStatus@status_addr
  9144                           
  9145                           ;CC2500_B1.c: 309: RC4 = 0;
  9146  1F8E  120E               	bcf	14,4	;volatile
  9147                           
  9148                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9149  1F8F  0823               	movf	CC2500_ReadStatus@status_addr,w
  9150  1F90  3EC0               	addlw	192
  9151  1F91  00A2               	movwf	??_CC2500_ReadStatus
  9152  1F92  0822               	movf	??_CC2500_ReadStatus,w
  9153  1F93  0021               	movlb	1	; select bank1
  9154  1F94  00D2               	movwf	_SPI0Buffer^(0+128)
  9155                           
  9156                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  9157  1F95  2F99               	goto	l9289
  9158  1F96                     l9287:	
  9159                           
  9160                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9161  1F96  319D  256E  319F   	fcall	_RF_Timeout_Counter
  9162  1F99                     l9289:	
  9163  1F99  0020               	movlb	0	; select bank0
  9164  1F9A  1D0E               	btfss	14,2	;volatile
  9165  1F9B  2F9F               	goto	l9293
  9166  1F9C  0021               	movlb	1	; select bank1
  9167  1F9D  1F21               	btfss	(_RF1^(0+128)+1),6
  9168  1F9E  2F96               	goto	l9287
  9169  1F9F                     l9293:	
  9170                           
  9171                           ;CC2500_B1.c: 314: };
  9172                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9173  1F9F  319A  22C5  319F   	fcall	_setRF_TimeoutCleared
  9174                           
  9175                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9176  1FA2  319D  25C2  319F   	fcall	_CC2500_WriteByte
  9177                           
  9178                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9179  1FA5  319E  262A         	fcall	_CC2500_ReadByte
  9180                           
  9181                           ;CC2500_B1.c: 319: RC4 = 1;
  9182  1FA7  0020               	movlb	0	; select bank0
  9183  1FA8  160E               	bsf	14,4	;volatile
  9184                           
  9185                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9186  1FA9  0021               	movlb	1	; select bank1
  9187  1FAA  0852               	movf	_SPI0Buffer^(0+128),w
  9188  1FAB  0020               	movlb	0	; select bank0
  9189  1FAC  00A2               	movwf	??_CC2500_ReadStatus
  9190  1FAD  0822               	movf	??_CC2500_ReadStatus,w
  9191  1FAE  0021               	movlb	1	; select bank1
  9192  1FAF  00D7               	movwf	_s_data^(0+128)
  9193  1FB0  0008               	return
  9194  1FB1                     __end_of_CC2500_ReadStatus:	
  9195                           
  9196                           	psect	text43
  9197  1E2A                     __ptext43:	
  9198 ;; *************** function _CC2500_ReadByte *****************
  9199 ;; Defined at:
  9200 ;;		line 242 in file "../src/CC2500_B1.c"
  9201 ;; Parameters:    Size  Location     Type
  9202 ;;		None
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9205 ;; Return value:  Size  Location     Type
  9206 ;;		None               void
  9207 ;; Registers used:
  9208 ;;		wreg, status,2, status,0
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;Total ram usage:        2 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    4
  9221 ;; This function calls:
  9222 ;;		Nothing
  9223 ;; This function is called by:
  9224 ;;		_CC2500_RxData
  9225 ;;		_CC2500_ReadStatus
  9226 ;;		_CC2500_ReadREG
  9227 ;; This function uses a non-reentrant model
  9228 ;;
  9229                           
  9230                           
  9231                           ;psect for function _CC2500_ReadByte
  9232  1E2A                     _CC2500_ReadByte:	
  9233                           
  9234                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9235                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9236                           
  9237                           ;incstack = 0
  9238                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9239  1E2A  0020               	movlb	0	; select bank0
  9240  1E2B  01A1               	clrf	CC2500_ReadByte@loop_b
  9241  1E2C                     L4:	
  9242  1E2C  3008               	movlw	8
  9243  1E2D  0221               	subwf	CC2500_ReadByte@loop_b,w
  9244  1E2E  1803               	btfsc	3,0
  9245  1E2F  0008               	return
  9246                           
  9247                           ;CC2500_B1.c: 245: RC1 = 1;
  9248  1E30  148E               	bsf	14,1	;volatile
  9249                           
  9250                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9251  1E31  1003               	clrc
  9252  1E32  0021               	movlb	1	; select bank1
  9253  1E33  0DD2               	rlf	_SPI0Buffer^(0+128),f
  9254                           
  9255                           ;CC2500_B1.c: 247: if (RC2 == 1)
  9256  1E34  0020               	movlb	0	; select bank0
  9257  1E35  1D0E               	btfss	14,2	;volatile
  9258  1E36  2E3A               	goto	l9177
  9259                           
  9260                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9261  1E37  0021               	movlb	1	; select bank1
  9262  1E38  1452               	bsf	_SPI0Buffer^(0+128),0
  9263  1E39  2E40               	goto	l9179
  9264  1E3A                     l9177:	
  9265                           
  9266                           ;CC2500_B1.c: 249: else
  9267                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9268  1E3A  30FE               	movlw	254
  9269  1E3B  0020               	movlb	0	; select bank0
  9270  1E3C  00A0               	movwf	??_CC2500_ReadByte
  9271  1E3D  0820               	movf	??_CC2500_ReadByte,w
  9272  1E3E  0021               	movlb	1	; select bank1
  9273  1E3F  05D2               	andwf	_SPI0Buffer^(0+128),f
  9274  1E40                     l9179:	
  9275                           
  9276                           ;CC2500_B1.c: 251: RC1 = 0;
  9277  1E40  0020               	movlb	0	; select bank0
  9278  1E41  108E               	bcf	14,1	;volatile
  9279  1E42  3001               	movlw	1
  9280  1E43  00A0               	movwf	??_CC2500_ReadByte
  9281  1E44  0820               	movf	??_CC2500_ReadByte,w
  9282  1E45  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9283  1E46  2E2C               	goto	L4
  9284  1E47                     __end_of_CC2500_ReadByte:	
  9285                           
  9286                           	psect	text44
  9287  1D83                     __ptext44:	
  9288 ;; *************** function _CC2500_PowerOnInitial *****************
  9289 ;; Defined at:
  9290 ;;		line 126 in file "../src/CC2500_B1.c"
  9291 ;; Parameters:    Size  Location     Type
  9292 ;;		None
  9293 ;; Auto vars:     Size  Location     Type
  9294 ;;		None
  9295 ;; Return value:  Size  Location     Type
  9296 ;;		None               void
  9297 ;; Registers used:
  9298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9299 ;; Tracked objects:
  9300 ;;		On entry : 0/0
  9301 ;;		On exit  : 0/0
  9302 ;;		Unchanged: 0/0
  9303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;Total ram usage:        0 bytes
  9309 ;; Hardware stack levels used:    1
  9310 ;; Hardware stack levels required when called:    7
  9311 ;; This function calls:
  9312 ;;		_CC2500_ClearRXFIFO
  9313 ;;		_CC2500_ClearTXFIFO
  9314 ;;		_CC2500_FrequencyCabr
  9315 ;;		_CC2500_InitPATable
  9316 ;;		_CC2500_InitSetREG
  9317 ;;		_CC2500_PowerRST
  9318 ;;		_CC2500_SIDLEMode
  9319 ;; This function is called by:
  9320 ;;		_main
  9321 ;;		_setRF_Main
  9322 ;; This function uses a non-reentrant model
  9323 ;;
  9324                           
  9325                           
  9326                           ;psect for function _CC2500_PowerOnInitial
  9327  1D83                     _CC2500_PowerOnInitial:	
  9328                           
  9329                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9330                           
  9331                           ;incstack = 0
  9332                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9333  1D83  3193  23D5  319D   	fcall	_CC2500_PowerRST
  9334                           
  9335                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9336  1D86  3190  20AC  319D   	fcall	_CC2500_InitSetREG
  9337                           
  9338                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9339  1D89  319E  2665  319D   	fcall	_CC2500_InitPATable
  9340                           
  9341                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9342  1D8C  319A  22CD  319D   	fcall	_CC2500_ClearTXFIFO
  9343                           
  9344                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9345  1D8F  319A  22C9  319D   	fcall	_CC2500_ClearRXFIFO
  9346                           
  9347                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9348  1D92  319B  239F  319D   	fcall	_CC2500_FrequencyCabr
  9349                           
  9350                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9351  1D95  319A  22D1         	fcall	_CC2500_SIDLEMode
  9352  1D97  0008               	return
  9353  1D98                     __end_of_CC2500_PowerOnInitial:	
  9354                           
  9355                           	psect	text45
  9356  1AD1                     __ptext45:	
  9357 ;; *************** function _CC2500_SIDLEMode *****************
  9358 ;; Defined at:
  9359 ;;		line 216 in file "../src/CC2500_B1.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;		None
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;		None
  9364 ;; Return value:  Size  Location     Type
  9365 ;;		None               void
  9366 ;; Registers used:
  9367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9368 ;; Tracked objects:
  9369 ;;		On entry : 0/0
  9370 ;;		On exit  : 0/0
  9371 ;;		Unchanged: 0/0
  9372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9377 ;;Total ram usage:        0 bytes
  9378 ;; Hardware stack levels used:    1
  9379 ;; Hardware stack levels required when called:    6
  9380 ;; This function calls:
  9381 ;;		_CC2500_WriteCommand
  9382 ;; This function is called by:
  9383 ;;		_CC2500_PowerOnInitial
  9384 ;; This function uses a non-reentrant model
  9385 ;;
  9386                           
  9387                           
  9388                           ;psect for function _CC2500_SIDLEMode
  9389  1AD1                     _CC2500_SIDLEMode:	
  9390                           
  9391                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9392                           
  9393                           ;incstack = 0
  9394                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9395  1AD1  3036               	movlw	54
  9396  1AD2  319D  25F5         	fcall	_CC2500_WriteCommand
  9397  1AD4  0008               	return
  9398  1AD5                     __end_of_CC2500_SIDLEMode:	
  9399                           
  9400                           	psect	text46
  9401  13D5                     __ptext46:	
  9402 ;; *************** function _CC2500_PowerRST *****************
  9403 ;; Defined at:
  9404 ;;		line 139 in file "../src/CC2500_B1.c"
  9405 ;; Parameters:    Size  Location     Type
  9406 ;;		None
  9407 ;; Auto vars:     Size  Location     Type
  9408 ;;		None
  9409 ;; Return value:  Size  Location     Type
  9410 ;;		None               void
  9411 ;; Registers used:
  9412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9413 ;; Tracked objects:
  9414 ;;		On entry : 0/0
  9415 ;;		On exit  : 0/0
  9416 ;;		Unchanged: 0/0
  9417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;Total ram usage:        1 bytes
  9423 ;; Hardware stack levels used:    1
  9424 ;; Hardware stack levels required when called:    5
  9425 ;; This function calls:
  9426 ;;		_CC2500_WriteByte
  9427 ;;		_DelayTime_1us
  9428 ;;		_RF_Timeout_Counter
  9429 ;;		_setRF_TimeoutCleared
  9430 ;; This function is called by:
  9431 ;;		_CC2500_PowerOnInitial
  9432 ;; This function uses a non-reentrant model
  9433 ;;
  9434                           
  9435                           
  9436                           ;psect for function _CC2500_PowerRST
  9437  13D5                     _CC2500_PowerRST:	
  9438                           
  9439                           ;CC2500_B1.c: 140: RC1 = 0;
  9440                           
  9441                           ;incstack = 0
  9442                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9443  13D5  0020               	movlb	0	; select bank0
  9444  13D6  108E               	bcf	14,1	;volatile
  9445                           
  9446                           ;CC2500_B1.c: 141: RC0 = 0;
  9447  13D7  100E               	bcf	14,0	;volatile
  9448                           
  9449                           ;CC2500_B1.c: 142: RC4 = 1;
  9450  13D8  160E               	bsf	14,4	;volatile
  9451                           
  9452                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9453  13D9  300A               	movlw	10
  9454  13DA  00A0               	movwf	DelayTime_1us@count
  9455  13DB  3000               	movlw	0
  9456  13DC  00A1               	movwf	DelayTime_1us@count+1
  9457  13DD  319F  27B1  3193   	fcall	_DelayTime_1us
  9458                           
  9459                           ;CC2500_B1.c: 144: RC4 = 0;
  9460  13E0  0020               	movlb	0	; select bank0
  9461  13E1  120E               	bcf	14,4	;volatile
  9462                           
  9463                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9464  13E2  300A               	movlw	10
  9465  13E3  00A0               	movwf	DelayTime_1us@count
  9466  13E4  3000               	movlw	0
  9467  13E5  00A1               	movwf	DelayTime_1us@count+1
  9468  13E6  319F  27B1  3193   	fcall	_DelayTime_1us
  9469                           
  9470                           ;CC2500_B1.c: 146: RC4 = 1;
  9471  13E9  0020               	movlb	0	; select bank0
  9472  13EA  160E               	bsf	14,4	;volatile
  9473                           
  9474                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9475  13EB  3028               	movlw	40
  9476  13EC  00A0               	movwf	DelayTime_1us@count
  9477  13ED  3000               	movlw	0
  9478  13EE  00A1               	movwf	DelayTime_1us@count+1
  9479  13EF  319F  27B1  3193   	fcall	_DelayTime_1us
  9480                           
  9481                           ;CC2500_B1.c: 148: RC4 = 0;
  9482  13F2  0020               	movlb	0	; select bank0
  9483  13F3  120E               	bcf	14,4	;volatile
  9484                           
  9485                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9486  13F4  3030               	movlw	48
  9487  13F5  00A6               	movwf	??_CC2500_PowerRST
  9488  13F6  0826               	movf	??_CC2500_PowerRST,w
  9489  13F7  0021               	movlb	1	; select bank1
  9490  13F8  00D2               	movwf	_SPI0Buffer^(0+128)
  9491                           
  9492                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9493  13F9  2BFD               	goto	l9317
  9494  13FA                     l9315:	
  9495                           
  9496                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9497  13FA  319D  256E  3193   	fcall	_RF_Timeout_Counter
  9498  13FD                     l9317:	
  9499  13FD  0020               	movlb	0	; select bank0
  9500  13FE  1D0E               	btfss	14,2	;volatile
  9501  13FF  2C03               	goto	l9321
  9502  1400  0021               	movlb	1	; select bank1
  9503  1401  1F21               	btfss	(_RF1^(0+128)+1),6
  9504  1402  2BFA               	goto	l9315
  9505  1403                     l9321:	
  9506                           
  9507                           ;CC2500_B1.c: 152: };
  9508                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9509  1403  319A  22C5  3193   	fcall	_setRF_TimeoutCleared
  9510                           
  9511                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9512  1406  319D  25C2  3193   	fcall	_CC2500_WriteByte
  9513                           
  9514                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9515  1409  2C0D               	goto	l9327
  9516  140A                     l9325:	
  9517                           
  9518                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9519  140A  319D  256E  3193   	fcall	_RF_Timeout_Counter
  9520  140D                     l9327:	
  9521  140D  0020               	movlb	0	; select bank0
  9522  140E  1D0E               	btfss	14,2	;volatile
  9523  140F  2C13               	goto	l9331
  9524  1410  0021               	movlb	1	; select bank1
  9525  1411  1F21               	btfss	(_RF1^(0+128)+1),6
  9526  1412  2C0A               	goto	l9325
  9527  1413                     l9331:	
  9528                           
  9529                           ;CC2500_B1.c: 157: };
  9530                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9531  1413  319A  22C5         	fcall	_setRF_TimeoutCleared
  9532                           
  9533                           ;CC2500_B1.c: 159: RC0 = 0;
  9534  1415  0020               	movlb	0	; select bank0
  9535  1416  100E               	bcf	14,0	;volatile
  9536                           
  9537                           ;CC2500_B1.c: 160: RC4 = 1;
  9538  1417  160E               	bsf	14,4	;volatile
  9539  1418  0008               	return
  9540  1419                     __end_of_CC2500_PowerRST:	
  9541                           
  9542                           	psect	text47
  9543  10AC                     __ptext47:	
  9544 ;; *************** function _CC2500_InitSetREG *****************
  9545 ;; Defined at:
  9546 ;;		line 166 in file "../src/CC2500_B1.c"
  9547 ;; Parameters:    Size  Location     Type
  9548 ;;		None
  9549 ;; Auto vars:     Size  Location     Type
  9550 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9551 ;;  temp2           1    7[BANK0 ] unsigned char 
  9552 ;;  temp1           1    6[BANK0 ] unsigned char 
  9553 ;; Return value:  Size  Location     Type
  9554 ;;		None               void
  9555 ;; Registers used:
  9556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9557 ;; Tracked objects:
  9558 ;;		On entry : 0/0
  9559 ;;		On exit  : 0/0
  9560 ;;		Unchanged: 0/0
  9561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;Total ram usage:        4 bytes
  9567 ;; Hardware stack levels used:    1
  9568 ;; Hardware stack levels required when called:    6
  9569 ;; This function calls:
  9570 ;;		_CC2500_WriteREG
  9571 ;; This function is called by:
  9572 ;;		_CC2500_PowerOnInitial
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           
  9577                           ;psect for function _CC2500_InitSetREG
  9578  10AC                     _CC2500_InitSetREG:	
  9579                           
  9580                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9581                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9582                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9583                           
  9584                           ;incstack = 0
  9585                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9586  10AC  0020               	movlb	0	; select bank0
  9587  10AD  01A8               	clrf	CC2500_InitSetREG@loop_c
  9588  10AE                     L5:	
  9589  10AE  302F               	movlw	47
  9590  10AF  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9591  10B0  1803               	btfsc	3,0
  9592  10B1  0008               	return
  9593                           
  9594                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9595  10B2  0828               	movf	CC2500_InitSetREG@loop_c,w
  9596  10B3  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9597  10B4  0084               	movwf	4
  9598  10B5  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9599  10B6  1803               	skipnc
  9600  10B7  3E01               	addlw	1
  9601  10B8  0085               	movwf	5
  9602  10B9  0800               	movf	0,w	;code access
  9603  10BA  00A5               	movwf	??_CC2500_InitSetREG
  9604  10BB  0825               	movf	??_CC2500_InitSetREG,w
  9605  10BC  00A6               	movwf	CC2500_InitSetREG@temp1
  9606                           
  9607                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9608  10BD  0828               	movf	CC2500_InitSetREG@loop_c,w
  9609  10BE  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9610  10BF  0084               	movwf	4
  9611  10C0  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9612  10C1  1803               	skipnc
  9613  10C2  3E01               	addlw	1
  9614  10C3  0085               	movwf	5
  9615  10C4  0800               	movf	0,w	;code access
  9616  10C5  00A5               	movwf	??_CC2500_InitSetREG
  9617  10C6  0825               	movf	??_CC2500_InitSetREG,w
  9618  10C7  00A7               	movwf	CC2500_InitSetREG@temp2
  9619                           
  9620                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9621  10C8  0827               	movf	CC2500_InitSetREG@temp2,w
  9622  10C9  00A5               	movwf	??_CC2500_InitSetREG
  9623  10CA  0825               	movf	??_CC2500_InitSetREG,w
  9624  10CB  00A2               	movwf	CC2500_WriteREG@value
  9625  10CC  0826               	movf	CC2500_InitSetREG@temp1,w
  9626  10CD  319F  2745  3190   	fcall	_CC2500_WriteREG
  9627  10D0  3001               	movlw	1
  9628  10D1  0020               	movlb	0	; select bank0
  9629  10D2  00A5               	movwf	??_CC2500_InitSetREG
  9630  10D3  0825               	movf	??_CC2500_InitSetREG,w
  9631  10D4  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9632  10D5  28AE               	goto	L5
  9633  10D6                     __end_of_CC2500_InitSetREG:	
  9634                           
  9635                           	psect	text48
  9636  1E65                     __ptext48:	
  9637 ;; *************** function _CC2500_InitPATable *****************
  9638 ;; Defined at:
  9639 ;;		line 181 in file "../src/CC2500_B1.c"
  9640 ;; Parameters:    Size  Location     Type
  9641 ;;		None
  9642 ;; Auto vars:     Size  Location     Type
  9643 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9644 ;;  temp            1    6[BANK0 ] unsigned char 
  9645 ;; Return value:  Size  Location     Type
  9646 ;;		None               void
  9647 ;; Registers used:
  9648 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9649 ;; Tracked objects:
  9650 ;;		On entry : 0/0
  9651 ;;		On exit  : 0/0
  9652 ;;		Unchanged: 0/0
  9653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9658 ;;Total ram usage:        3 bytes
  9659 ;; Hardware stack levels used:    1
  9660 ;; Hardware stack levels required when called:    6
  9661 ;; This function calls:
  9662 ;;		_CC2500_WriteREG
  9663 ;; This function is called by:
  9664 ;;		_CC2500_PowerOnInitial
  9665 ;; This function uses a non-reentrant model
  9666 ;;
  9667                           
  9668                           
  9669                           ;psect for function _CC2500_InitPATable
  9670  1E65                     _CC2500_InitPATable:	
  9671                           
  9672                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9673                           ;CC2500_B1.c: 183: unsigned char temp;
  9674                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9675                           
  9676                           ;incstack = 0
  9677                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9678  1E65  0020               	movlb	0	; select bank0
  9679  1E66  01A7               	clrf	CC2500_InitPATable@loop_d
  9680  1E67                     L6:	
  9681  1E67  3008               	movlw	8
  9682  1E68  0227               	subwf	CC2500_InitPATable@loop_d,w
  9683  1E69  1803               	btfsc	3,0
  9684  1E6A  0008               	return
  9685                           
  9686                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9687  1E6B  0827               	movf	CC2500_InitPATable@loop_d,w
  9688  1E6C  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9689  1E6D  0084               	movwf	4
  9690  1E6E  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9691  1E6F  1803               	skipnc
  9692  1E70  3E01               	addlw	1
  9693  1E71  0085               	movwf	5
  9694  1E72  0800               	movf	0,w	;code access
  9695  1E73  00A5               	movwf	??_CC2500_InitPATable
  9696  1E74  0825               	movf	??_CC2500_InitPATable,w
  9697  1E75  00A6               	movwf	CC2500_InitPATable@temp
  9698                           
  9699                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9700  1E76  0826               	movf	CC2500_InitPATable@temp,w
  9701  1E77  00A5               	movwf	??_CC2500_InitPATable
  9702  1E78  0825               	movf	??_CC2500_InitPATable,w
  9703  1E79  00A2               	movwf	CC2500_WriteREG@value
  9704  1E7A  303E               	movlw	62
  9705  1E7B  319F  2745  319E   	fcall	_CC2500_WriteREG
  9706  1E7E  3001               	movlw	1
  9707  1E7F  0020               	movlb	0	; select bank0
  9708  1E80  00A5               	movwf	??_CC2500_InitPATable
  9709  1E81  0825               	movf	??_CC2500_InitPATable,w
  9710  1E82  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9711  1E83  2E67               	goto	L6
  9712  1E84                     __end_of_CC2500_InitPATable:	
  9713                           
  9714                           	psect	text49
  9715  1F45                     __ptext49:	
  9716 ;; *************** function _CC2500_WriteREG *****************
  9717 ;; Defined at:
  9718 ;;		line 258 in file "../src/CC2500_B1.c"
  9719 ;; Parameters:    Size  Location     Type
  9720 ;;  w_addr          1    wreg     unsigned char 
  9721 ;;  value           1    2[BANK0 ] unsigned char 
  9722 ;; Auto vars:     Size  Location     Type
  9723 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9724 ;; Return value:  Size  Location     Type
  9725 ;;		None               void
  9726 ;; Registers used:
  9727 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9728 ;; Tracked objects:
  9729 ;;		On entry : 0/0
  9730 ;;		On exit  : 0/0
  9731 ;;		Unchanged: 0/0
  9732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9733 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9737 ;;Total ram usage:        3 bytes
  9738 ;; Hardware stack levels used:    1
  9739 ;; Hardware stack levels required when called:    5
  9740 ;; This function calls:
  9741 ;;		_CC2500_WriteByte
  9742 ;;		_RF_Timeout_Counter
  9743 ;;		_setRF_TimeoutCleared
  9744 ;; This function is called by:
  9745 ;;		_CC2500_InitSetREG
  9746 ;;		_CC2500_InitPATable
  9747 ;; This function uses a non-reentrant model
  9748 ;;
  9749                           
  9750                           
  9751                           ;psect for function _CC2500_WriteREG
  9752  1F45                     _CC2500_WriteREG:	
  9753                           
  9754                           ;incstack = 0
  9755                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9756                           ;CC2500_WriteREG@w_addr stored from wreg
  9757  1F45  0020               	movlb	0	; select bank0
  9758  1F46  00A4               	movwf	CC2500_WriteREG@w_addr
  9759                           
  9760                           ;CC2500_B1.c: 259: RC4 = 0;
  9761  1F47  120E               	bcf	14,4	;volatile
  9762                           
  9763                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9764  1F48  0824               	movf	CC2500_WriteREG@w_addr,w
  9765  1F49  00A3               	movwf	??_CC2500_WriteREG
  9766  1F4A  0823               	movf	??_CC2500_WriteREG,w
  9767  1F4B  0021               	movlb	1	; select bank1
  9768  1F4C  00D2               	movwf	_SPI0Buffer^(0+128)
  9769                           
  9770                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9771  1F4D  2F51               	goto	l9201
  9772  1F4E                     l9199:	
  9773                           
  9774                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9775  1F4E  319D  256E  319F   	fcall	_RF_Timeout_Counter
  9776  1F51                     l9201:	
  9777  1F51  0020               	movlb	0	; select bank0
  9778  1F52  1D0E               	btfss	14,2	;volatile
  9779  1F53  2F57               	goto	l9205
  9780  1F54  0021               	movlb	1	; select bank1
  9781  1F55  1F21               	btfss	(_RF1^(0+128)+1),6
  9782  1F56  2F4E               	goto	l9199
  9783  1F57                     l9205:	
  9784                           
  9785                           ;CC2500_B1.c: 263: };
  9786                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9787  1F57  319A  22C5  319F   	fcall	_setRF_TimeoutCleared
  9788                           
  9789                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9790  1F5A  319D  25C2  319F   	fcall	_CC2500_WriteByte
  9791                           
  9792                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9793  1F5D  0020               	movlb	0	; select bank0
  9794  1F5E  0822               	movf	CC2500_WriteREG@value,w
  9795  1F5F  00A3               	movwf	??_CC2500_WriteREG
  9796  1F60  0823               	movf	??_CC2500_WriteREG,w
  9797  1F61  0021               	movlb	1	; select bank1
  9798  1F62  00D2               	movwf	_SPI0Buffer^(0+128)
  9799                           
  9800                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9801  1F63  319D  25C2         	fcall	_CC2500_WriteByte
  9802                           
  9803                           ;CC2500_B1.c: 269: RC4 = 1;
  9804  1F65  0020               	movlb	0	; select bank0
  9805  1F66  160E               	bsf	14,4	;volatile
  9806  1F67  0008               	return
  9807  1F68                     __end_of_CC2500_WriteREG:	
  9808                           
  9809                           	psect	text50
  9810  1B9F                     __ptext50:	
  9811 ;; *************** function _CC2500_FrequencyCabr *****************
  9812 ;; Defined at:
  9813 ;;		line 208 in file "../src/CC2500_B1.c"
  9814 ;; Parameters:    Size  Location     Type
  9815 ;;		None
  9816 ;; Auto vars:     Size  Location     Type
  9817 ;;		None
  9818 ;; Return value:  Size  Location     Type
  9819 ;;		None               void
  9820 ;; Registers used:
  9821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9822 ;; Tracked objects:
  9823 ;;		On entry : 0/0
  9824 ;;		On exit  : 0/0
  9825 ;;		Unchanged: 0/0
  9826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;Total ram usage:        0 bytes
  9832 ;; Hardware stack levels used:    1
  9833 ;; Hardware stack levels required when called:    6
  9834 ;; This function calls:
  9835 ;;		_CC2500_WriteCommand
  9836 ;;		_DelayTime_1us
  9837 ;; This function is called by:
  9838 ;;		_CC2500_PowerOnInitial
  9839 ;; This function uses a non-reentrant model
  9840 ;;
  9841                           
  9842                           
  9843                           ;psect for function _CC2500_FrequencyCabr
  9844  1B9F                     _CC2500_FrequencyCabr:	
  9845                           
  9846                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9847                           
  9848                           ;incstack = 0
  9849                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9850  1B9F  3033               	movlw	51
  9851  1BA0  319D  25F5  319B   	fcall	_CC2500_WriteCommand
  9852                           
  9853                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9854  1BA3  30E8               	movlw	232
  9855  1BA4  0020               	movlb	0	; select bank0
  9856  1BA5  00A0               	movwf	DelayTime_1us@count
  9857  1BA6  3003               	movlw	3
  9858  1BA7  00A1               	movwf	DelayTime_1us@count+1
  9859  1BA8  319F  27B1         	fcall	_DelayTime_1us
  9860  1BAA  0008               	return
  9861  1BAB                     __end_of_CC2500_FrequencyCabr:	
  9862                           
  9863                           	psect	text51
  9864  1FB1                     __ptext51:	
  9865 ;; *************** function _DelayTime_1us *****************
  9866 ;; Defined at:
  9867 ;;		line 327 in file "../src/CC2500_B1.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;  count           2    0[BANK0 ] int 
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;  j               2    4[BANK0 ] unsigned int 
  9872 ;;  i               2    2[BANK0 ] unsigned int 
  9873 ;; Return value:  Size  Location     Type
  9874 ;;		None               void
  9875 ;; Registers used:
  9876 ;;		wreg, status,2
  9877 ;; Tracked objects:
  9878 ;;		On entry : 0/0
  9879 ;;		On exit  : 0/0
  9880 ;;		Unchanged: 0/0
  9881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9882 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;Total ram usage:        6 bytes
  9887 ;; Hardware stack levels used:    1
  9888 ;; Hardware stack levels required when called:    4
  9889 ;; This function calls:
  9890 ;;		Nothing
  9891 ;; This function is called by:
  9892 ;;		_CC2500_PowerRST
  9893 ;;		_CC2500_FrequencyCabr
  9894 ;; This function uses a non-reentrant model
  9895 ;;
  9896                           
  9897                           
  9898                           ;psect for function _DelayTime_1us
  9899  1FB1                     _DelayTime_1us:	
  9900                           
  9901                           ;CC2500_B1.c: 328: unsigned int i, j;
  9902                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9903                           
  9904                           ;incstack = 0
  9905                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9906  1FB1  3001               	movlw	1
  9907  1FB2  0020               	movlb	0	; select bank0
  9908  1FB3  00A2               	movwf	DelayTime_1us@i
  9909  1FB4  3000               	movlw	0
  9910  1FB5  00A3               	movwf	DelayTime_1us@i+1
  9911  1FB6                     l367:	
  9912  1FB6  0821               	movf	DelayTime_1us@count+1,w
  9913  1FB7  0223               	subwf	DelayTime_1us@i+1,w
  9914  1FB8  1D03               	skipz
  9915  1FB9  2FBC               	goto	u9945
  9916  1FBA  0820               	movf	DelayTime_1us@count,w
  9917  1FBB  0222               	subwf	DelayTime_1us@i,w
  9918  1FBC                     u9945:	
  9919  1FBC  1803               	btfsc	3,0
  9920  1FBD  0008               	return
  9921                           
  9922                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9923  1FBE  01A4               	clrf	DelayTime_1us@j
  9924  1FBF  01A5               	clrf	DelayTime_1us@j+1
  9925  1FC0  3000               	movlw	0
  9926  1FC1  0225               	subwf	DelayTime_1us@j+1,w
  9927  1FC2  3002               	movlw	2
  9928  1FC3  1903               	skipnz
  9929  1FC4  0224               	subwf	DelayTime_1us@j,w
  9930  1FC5  1803               	btfsc	3,0
  9931  1FC6  2FD2               	goto	l9193
  9932  1FC7                     l9191:	
  9933  1FC7  3001               	movlw	1
  9934  1FC8  07A4               	addwf	DelayTime_1us@j,f
  9935  1FC9  3000               	movlw	0
  9936  1FCA  3DA5               	addwfc	DelayTime_1us@j+1,f
  9937  1FCB  3000               	movlw	0
  9938  1FCC  0225               	subwf	DelayTime_1us@j+1,w
  9939  1FCD  3002               	movlw	2
  9940  1FCE  1903               	skipnz
  9941  1FCF  0224               	subwf	DelayTime_1us@j,w
  9942  1FD0  1C03               	skipc
  9943  1FD1  2FC7               	goto	l9191
  9944  1FD2                     l9193:	
  9945  1FD2  3001               	movlw	1
  9946  1FD3  07A2               	addwf	DelayTime_1us@i,f
  9947  1FD4  3000               	movlw	0
  9948  1FD5  3DA3               	addwfc	DelayTime_1us@i+1,f
  9949  1FD6  2FB6               	goto	l367
  9950  1FD7                     __end_of_DelayTime_1us:	
  9951                           
  9952                           	psect	text52
  9953  1ACD                     __ptext52:	
  9954 ;; *************** function _CC2500_ClearTXFIFO *****************
  9955 ;; Defined at:
  9956 ;;		line 194 in file "../src/CC2500_B1.c"
  9957 ;; Parameters:    Size  Location     Type
  9958 ;;		None
  9959 ;; Auto vars:     Size  Location     Type
  9960 ;;		None
  9961 ;; Return value:  Size  Location     Type
  9962 ;;		None               void
  9963 ;; Registers used:
  9964 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9965 ;; Tracked objects:
  9966 ;;		On entry : 0/0
  9967 ;;		On exit  : 0/0
  9968 ;;		Unchanged: 0/0
  9969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;Total ram usage:        0 bytes
  9975 ;; Hardware stack levels used:    1
  9976 ;; Hardware stack levels required when called:    6
  9977 ;; This function calls:
  9978 ;;		_CC2500_WriteCommand
  9979 ;; This function is called by:
  9980 ;;		_CC2500_PowerOnInitial
  9981 ;; This function uses a non-reentrant model
  9982 ;;
  9983                           
  9984                           
  9985                           ;psect for function _CC2500_ClearTXFIFO
  9986  1ACD                     _CC2500_ClearTXFIFO:	
  9987                           
  9988                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9989                           
  9990                           ;incstack = 0
  9991                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9992  1ACD  303B               	movlw	59
  9993  1ACE  319D  25F5         	fcall	_CC2500_WriteCommand
  9994  1AD0  0008               	return
  9995  1AD1                     __end_of_CC2500_ClearTXFIFO:	
  9996                           
  9997                           	psect	text53
  9998  1AC9                     __ptext53:	
  9999 ;; *************** function _CC2500_ClearRXFIFO *****************
 10000 ;; Defined at:
 10001 ;;		line 201 in file "../src/CC2500_B1.c"
 10002 ;; Parameters:    Size  Location     Type
 10003 ;;		None
 10004 ;; Auto vars:     Size  Location     Type
 10005 ;;		None
 10006 ;; Return value:  Size  Location     Type
 10007 ;;		None               void
 10008 ;; Registers used:
 10009 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10010 ;; Tracked objects:
 10011 ;;		On entry : 0/0
 10012 ;;		On exit  : 0/0
 10013 ;;		Unchanged: 0/0
 10014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;Total ram usage:        0 bytes
 10020 ;; Hardware stack levels used:    1
 10021 ;; Hardware stack levels required when called:    6
 10022 ;; This function calls:
 10023 ;;		_CC2500_WriteCommand
 10024 ;; This function is called by:
 10025 ;;		_CC2500_PowerOnInitial
 10026 ;; This function uses a non-reentrant model
 10027 ;;
 10028                           
 10029                           
 10030                           ;psect for function _CC2500_ClearRXFIFO
 10031  1AC9                     _CC2500_ClearRXFIFO:	
 10032                           
 10033                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
 10034                           
 10035                           ;incstack = 0
 10036                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10037  1AC9  303A               	movlw	58
 10038  1ACA  319D  25F5         	fcall	_CC2500_WriteCommand
 10039  1ACC  0008               	return
 10040  1ACD                     __end_of_CC2500_ClearRXFIFO:	
 10041                           
 10042                           	psect	text54
 10043  1DF5                     __ptext54:	
 10044 ;; *************** function _CC2500_WriteCommand *****************
 10045 ;; Defined at:
 10046 ;;		line 292 in file "../src/CC2500_B1.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  command         1    wreg     unsigned char 
 10049 ;; Auto vars:     Size  Location     Type
 10050 ;;  command         1    3[BANK0 ] unsigned char 
 10051 ;; Return value:  Size  Location     Type
 10052 ;;		None               void
 10053 ;; Registers used:
 10054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10055 ;; Tracked objects:
 10056 ;;		On entry : 0/0
 10057 ;;		On exit  : 0/0
 10058 ;;		Unchanged: 0/0
 10059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10061 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;Total ram usage:        2 bytes
 10065 ;; Hardware stack levels used:    1
 10066 ;; Hardware stack levels required when called:    5
 10067 ;; This function calls:
 10068 ;;		_CC2500_WriteByte
 10069 ;;		_RF_Timeout_Counter
 10070 ;;		_setRF_TimeoutCleared
 10071 ;; This function is called by:
 10072 ;;		_CC2500_TxData
 10073 ;;		_CC2500_RxData
 10074 ;;		_CC2500_ClearTXFIFO
 10075 ;;		_CC2500_ClearRXFIFO
 10076 ;;		_CC2500_FrequencyCabr
 10077 ;;		_CC2500_SIDLEMode
 10078 ;;		_setRF_Main
 10079 ;;		_RF_RxDisable
 10080 ;; This function uses a non-reentrant model
 10081 ;;
 10082                           
 10083                           
 10084                           ;psect for function _CC2500_WriteCommand
 10085  1DF5                     _CC2500_WriteCommand:	
 10086                           
 10087                           ;incstack = 0
 10088                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10089                           ;CC2500_WriteCommand@command stored from wreg
 10090  1DF5  0020               	movlb	0	; select bank0
 10091  1DF6  00A3               	movwf	CC2500_WriteCommand@command
 10092                           
 10093                           ;CC2500_B1.c: 293: RC4 = 0;
 10094  1DF7  120E               	bcf	14,4	;volatile
 10095                           
 10096                           ;CC2500_B1.c: 294: SPI0Buffer = command;
 10097  1DF8  0823               	movf	CC2500_WriteCommand@command,w
 10098  1DF9  00A2               	movwf	??_CC2500_WriteCommand
 10099  1DFA  0822               	movf	??_CC2500_WriteCommand,w
 10100  1DFB  0021               	movlb	1	; select bank1
 10101  1DFC  00D2               	movwf	_SPI0Buffer^(0+128)
 10102                           
 10103                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
 10104  1DFD  2E01               	goto	l9155
 10105  1DFE                     l9153:	
 10106                           
 10107                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
 10108  1DFE  319D  256E  319D   	fcall	_RF_Timeout_Counter
 10109  1E01                     l9155:	
 10110  1E01  0020               	movlb	0	; select bank0
 10111  1E02  1D0E               	btfss	14,2	;volatile
 10112  1E03  2E07               	goto	l9159
 10113  1E04  0021               	movlb	1	; select bank1
 10114  1E05  1F21               	btfss	(_RF1^(0+128)+1),6
 10115  1E06  2DFE               	goto	l9153
 10116  1E07                     l9159:	
 10117                           
 10118                           ;CC2500_B1.c: 298: };
 10119                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
 10120  1E07  319A  22C5  319D   	fcall	_setRF_TimeoutCleared
 10121                           
 10122                           ;CC2500_B1.c: 301: CC2500_WriteByte();
 10123  1E0A  319D  25C2         	fcall	_CC2500_WriteByte
 10124                           
 10125                           ;CC2500_B1.c: 302: RC4 = 1;
 10126  1E0C  0020               	movlb	0	; select bank0
 10127  1E0D  160E               	bsf	14,4	;volatile
 10128  1E0E  0008               	return
 10129  1E0F                     __end_of_CC2500_WriteCommand:	
 10130                           
 10131                           	psect	text55
 10132  1AC5                     __ptext55:	
 10133 ;; *************** function _setRF_TimeoutCleared *****************
 10134 ;; Defined at:
 10135 ;;		line 144 in file "../src/RF_Control_B1.c"
 10136 ;; Parameters:    Size  Location     Type
 10137 ;;		None
 10138 ;; Auto vars:     Size  Location     Type
 10139 ;;		None
 10140 ;; Return value:  Size  Location     Type
 10141 ;;		None               void
 10142 ;; Registers used:
 10143 ;;		status,2
 10144 ;; Tracked objects:
 10145 ;;		On entry : 0/0
 10146 ;;		On exit  : 0/0
 10147 ;;		Unchanged: 0/0
 10148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;Total ram usage:        0 bytes
 10154 ;; Hardware stack levels used:    1
 10155 ;; Hardware stack levels required when called:    4
 10156 ;; This function calls:
 10157 ;;		Nothing
 10158 ;; This function is called by:
 10159 ;;		_CC2500_TxData
 10160 ;;		_CC2500_RxData
 10161 ;;		_CC2500_PowerRST
 10162 ;;		_CC2500_WriteREG
 10163 ;;		_CC2500_WriteCommand
 10164 ;;		_CC2500_ReadStatus
 10165 ;;		_CC2500_ReadREG
 10166 ;; This function uses a non-reentrant model
 10167 ;;
 10168                           
 10169                           
 10170                           ;psect for function _setRF_TimeoutCleared
 10171  1AC5                     _setRF_TimeoutCleared:	
 10172                           
 10173                           ;RF_Control_B1.c: 145: RF1.TimeoutCount = 0;
 10174                           
 10175                           ;incstack = 0
 10176                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10177  1AC5  0021               	movlb	1	; select bank1
 10178  1AC6  01AC               	clrf	(_RF1^(0+128)+12)
 10179  1AC7  01AD               	clrf	((_RF1+1)^(0+128)+12)
 10180  1AC8  0008               	return
 10181  1AC9                     __end_of_setRF_TimeoutCleared:	
 10182                           
 10183                           	psect	text56
 10184  1D6E                     __ptext56:	
 10185 ;; *************** function _RF_Timeout_Counter *****************
 10186 ;; Defined at:
 10187 ;;		line 136 in file "../src/RF_Control_B1.c"
 10188 ;; Parameters:    Size  Location     Type
 10189 ;;		None
 10190 ;; Auto vars:     Size  Location     Type
 10191 ;;		None
 10192 ;; Return value:  Size  Location     Type
 10193 ;;		None               void
 10194 ;; Registers used:
 10195 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10196 ;; Tracked objects:
 10197 ;;		On entry : 0/0
 10198 ;;		On exit  : 0/0
 10199 ;;		Unchanged: 0/0
 10200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;Total ram usage:        0 bytes
 10206 ;; Hardware stack levels used:    1
 10207 ;; Hardware stack levels required when called:    4
 10208 ;; This function calls:
 10209 ;;		Nothing
 10210 ;; This function is called by:
 10211 ;;		_CC2500_TxData
 10212 ;;		_CC2500_RxData
 10213 ;;		_CC2500_PowerRST
 10214 ;;		_CC2500_WriteREG
 10215 ;;		_CC2500_WriteCommand
 10216 ;;		_CC2500_ReadStatus
 10217 ;;		_CC2500_ReadREG
 10218 ;; This function uses a non-reentrant model
 10219 ;;
 10220                           
 10221                           
 10222                           ;psect for function _RF_Timeout_Counter
 10223  1D6E                     _RF_Timeout_Counter:	
 10224                           
 10225                           ;RF_Control_B1.c: 137: RF1.TimeoutCount++;
 10226                           
 10227                           ;incstack = 0
 10228                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10229  1D6E  3001               	movlw	1
 10230  1D6F  0021               	movlb	1	; select bank1
 10231  1D70  07AC               	addwf	(_RF1^(0+128)+12),f
 10232  1D71  3000               	movlw	0
 10233  1D72  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
 10234                           
 10235                           ;RF_Control_B1.c: 138: if (RF1.TimeoutCount == 25000) {
 10236  1D73  300C               	movlw	12
 10237  1D74  3EA0               	addlw	_RF1& (0+255)
 10238  1D75  0086               	movwf	6
 10239  1D76  0187               	clrf	7
 10240  1D77  3F40               	moviw [0]fsr1
 10241  1D78  3AA8               	xorlw	168
 10242  1D79  1D03               	skipz
 10243  1D7A  2D7D               	goto	u9655
 10244  1D7B  3F41               	moviw [1]fsr1
 10245  1D7C  3A61               	xorlw	97
 10246  1D7D                     u9655:	
 10247  1D7D  1D03               	skipz
 10248  1D7E  0008               	return
 10249                           
 10250                           ;RF_Control_B1.c: 139: RF1.TimeoutCount = 0;
 10251  1D7F  01AC               	clrf	(_RF1^(0+128)+12)
 10252  1D80  01AD               	clrf	((_RF1+1)^(0+128)+12)
 10253                           
 10254                           ;RF_Control_B1.c: 140: RF1.Timeout = 1;
 10255  1D81  1721               	bsf	(_RF1^(0+128)+1),6
 10256  1D82  0008               	return
 10257  1D83                     __end_of_RF_Timeout_Counter:	
 10258                           
 10259                           	psect	text57
 10260  1DC2                     __ptext57:	
 10261 ;; *************** function _CC2500_WriteByte *****************
 10262 ;; Defined at:
 10263 ;;		line 226 in file "../src/CC2500_B1.c"
 10264 ;; Parameters:    Size  Location     Type
 10265 ;;		None
 10266 ;; Auto vars:     Size  Location     Type
 10267 ;;  loop_a          1    1[BANK0 ] unsigned char 
 10268 ;; Return value:  Size  Location     Type
 10269 ;;		None               void
 10270 ;; Registers used:
 10271 ;;		wreg, status,2, status,0
 10272 ;; Tracked objects:
 10273 ;;		On entry : 0/0
 10274 ;;		On exit  : 0/0
 10275 ;;		Unchanged: 0/0
 10276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10280 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10281 ;;Total ram usage:        2 bytes
 10282 ;; Hardware stack levels used:    1
 10283 ;; Hardware stack levels required when called:    4
 10284 ;; This function calls:
 10285 ;;		Nothing
 10286 ;; This function is called by:
 10287 ;;		_CC2500_TxData
 10288 ;;		_CC2500_RxData
 10289 ;;		_CC2500_PowerRST
 10290 ;;		_CC2500_WriteREG
 10291 ;;		_CC2500_WriteCommand
 10292 ;;		_CC2500_ReadStatus
 10293 ;;		_CC2500_ReadREG
 10294 ;; This function uses a non-reentrant model
 10295 ;;
 10296                           
 10297                           
 10298                           ;psect for function _CC2500_WriteByte
 10299  1DC2                     _CC2500_WriteByte:	
 10300                           
 10301                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10302                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10303                           
 10304                           ;incstack = 0
 10305                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10306  1DC2  0020               	movlb	0	; select bank0
 10307  1DC3  01A1               	clrf	CC2500_WriteByte@loop_a
 10308  1DC4                     L7:	
 10309  1DC4  3008               	movlw	8
 10310  1DC5  0221               	subwf	CC2500_WriteByte@loop_a,w
 10311  1DC6  1803               	btfsc	3,0
 10312  1DC7  0008               	return
 10313                           
 10314                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10315  1DC8  0021               	movlb	1	; select bank1
 10316  1DC9  1FD2               	btfss	_SPI0Buffer^(0+128),7
 10317  1DCA  2DCE               	goto	l323
 10318                           
 10319                           ;CC2500_B1.c: 230: RC0 = 1;
 10320  1DCB  0020               	movlb	0	; select bank0
 10321  1DCC  140E               	bsf	14,0	;volatile
 10322  1DCD  2DD0               	goto	l324
 10323  1DCE                     l323:	
 10324                           
 10325                           ;CC2500_B1.c: 231: else
 10326                           ;CC2500_B1.c: 232: RC0 = 0;
 10327  1DCE  0020               	movlb	0	; select bank0
 10328  1DCF  100E               	bcf	14,0	;volatile
 10329  1DD0                     l324:	
 10330                           
 10331                           ;CC2500_B1.c: 233: RC1 = 1;
 10332  1DD0  148E               	bsf	14,1	;volatile
 10333                           
 10334                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10335  1DD1  1003               	clrc
 10336  1DD2  0021               	movlb	1	; select bank1
 10337  1DD3  0DD2               	rlf	_SPI0Buffer^(0+128),f
 10338                           
 10339                           ;CC2500_B1.c: 235: RC1 = 0;
 10340  1DD4  0020               	movlb	0	; select bank0
 10341  1DD5  108E               	bcf	14,1	;volatile
 10342  1DD6  3001               	movlw	1
 10343  1DD7  00A0               	movwf	??_CC2500_WriteByte
 10344  1DD8  0820               	movf	??_CC2500_WriteByte,w
 10345  1DD9  07A1               	addwf	CC2500_WriteByte@loop_a,f
 10346  1DDA  2DC4               	goto	L7
 10347  1DDB                     __end_of_CC2500_WriteByte:	
 10348                           
 10349                           	psect	text58
 10350  1AB5                     __ptext58:	
 10351 ;; *************** function _RF_Initialization *****************
 10352 ;; Defined at:
 10353 ;;		line 9 in file "../src/RF_Control_B1.c"
 10354 ;; Parameters:    Size  Location     Type
 10355 ;;		None
 10356 ;; Auto vars:     Size  Location     Type
 10357 ;;		None
 10358 ;; Return value:  Size  Location     Type
 10359 ;;		None               void
 10360 ;; Registers used:
 10361 ;;		wreg, status,2, status,0, pclath, cstack
 10362 ;; Tracked objects:
 10363 ;;		On entry : 0/0
 10364 ;;		On exit  : 0/0
 10365 ;;		Unchanged: 0/0
 10366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10371 ;;Total ram usage:        0 bytes
 10372 ;; Hardware stack levels used:    1
 10373 ;; Hardware stack levels required when called:    5
 10374 ;; This function calls:
 10375 ;;		_setRF_Initialization
 10376 ;; This function is called by:
 10377 ;;		_main
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           
 10382                           ;psect for function _RF_Initialization
 10383  1AB5                     _RF_Initialization:	
 10384                           
 10385                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10386                           
 10387                           ;incstack = 0
 10388                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10389  1AB5  319B  2335         	fcall	_setRF_Initialization
 10390  1AB7  0008               	return
 10391  1AB8                     __end_of_RF_Initialization:	
 10392                           
 10393                           	psect	text59
 10394  1B35                     __ptext59:	
 10395 ;; *************** function _setRF_Initialization *****************
 10396 ;; Defined at:
 10397 ;;		line 43 in file "../src/RF_Control_B1.c"
 10398 ;; Parameters:    Size  Location     Type
 10399 ;;		None
 10400 ;; Auto vars:     Size  Location     Type
 10401 ;;		None
 10402 ;; Return value:  Size  Location     Type
 10403 ;;		None               void
 10404 ;; Registers used:
 10405 ;;		wreg
 10406 ;; Tracked objects:
 10407 ;;		On entry : 0/0
 10408 ;;		On exit  : 0/0
 10409 ;;		Unchanged: 0/0
 10410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10414 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10415 ;;Total ram usage:        1 bytes
 10416 ;; Hardware stack levels used:    1
 10417 ;; Hardware stack levels required when called:    4
 10418 ;; This function calls:
 10419 ;;		Nothing
 10420 ;; This function is called by:
 10421 ;;		_RF_Initialization
 10422 ;; This function uses a non-reentrant model
 10423 ;;
 10424                           
 10425                           
 10426                           ;psect for function _setRF_Initialization
 10427  1B35                     _setRF_Initialization:	
 10428                           
 10429                           ;RF_Control_B1.c: 45: Tx_Length = 21;
 10430                           
 10431                           ;incstack = 0
 10432                           ; Regs used in _setRF_Initialization: [wreg]
 10433  1B35  3015               	movlw	21
 10434  1B36  0020               	movlb	0	; select bank0
 10435  1B37  00A0               	movwf	??_setRF_Initialization
 10436  1B38  0820               	movf	??_setRF_Initialization,w
 10437  1B39  0021               	movlb	1	; select bank1
 10438  1B3A  00D4               	movwf	_Tx_Length^(0+128)
 10439                           
 10440                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
 10441  1B3B  3014               	movlw	20
 10442  1B3C  00A7               	movwf	(_RF1^(0+128)+7)
 10443  1B3D  3000               	movlw	0
 10444  1B3E  00A8               	movwf	(_RF1^(0+128)+8)
 10445  1B3F  0008               	return
 10446  1B40                     __end_of_setRF_Initialization:	
 10447                           
 10448                           	psect	text60
 10449  1C4B                     __ptext60:	
 10450 ;; *************** function _Mcu_Initialization *****************
 10451 ;; Defined at:
 10452 ;;		line 30 in file "../src/MCU_B1.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;		None
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;		None
 10457 ;; Return value:  Size  Location     Type
 10458 ;;		None               void
 10459 ;; Registers used:
 10460 ;;		wreg, status,2, status,0, pclath, cstack
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;Total ram usage:        0 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; Hardware stack levels required when called:    5
 10473 ;; This function calls:
 10474 ;;		_ADC_Set
 10475 ;;		_Fosc_Set
 10476 ;;		_IOC_Set
 10477 ;;		_IO_Set
 10478 ;;		_TMR1_Set
 10479 ;;		_WDT_Set
 10480 ;; This function is called by:
 10481 ;;		_main
 10482 ;; This function uses a non-reentrant model
 10483 ;;
 10484                           
 10485                           
 10486                           ;psect for function _Mcu_Initialization
 10487  1C4B                     _Mcu_Initialization:	
 10488                           
 10489                           ;MCU_B1.c: 32: Fosc_Set();
 10490                           
 10491                           ;incstack = 0
 10492                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10493  1C4B  319A  22C1  319C   	fcall	_Fosc_Set
 10494                           
 10495                           ;MCU_B1.c: 34: IO_Set();
 10496  1C4E  319E  260F  319C   	fcall	_IO_Set
 10497                           
 10498                           ;MCU_B1.c: 36: ;;
 10499                           ;MCU_B1.c: 38: TMR1_Set();
 10500  1C51  319B  2387  319C   	fcall	_TMR1_Set
 10501                           
 10502                           ;MCU_B1.c: 40: ADC_Set();
 10503  1C54  319A  22EC  319C   	fcall	_ADC_Set
 10504                           
 10505                           ;MCU_B1.c: 42: ;;
 10506                           ;MCU_B1.c: 44: ;;
 10507                           ;MCU_B1.c: 46: IOC_Set();
 10508  1C57  319B  237B  319C   	fcall	_IOC_Set
 10509                           
 10510                           ;MCU_B1.c: 48: ;;
 10511                           ;MCU_B1.c: 50: ;;
 10512                           ;MCU_B1.c: 52: WDT_Set();
 10513  1C5A  319B  2393         	fcall	_WDT_Set
 10514  1C5C  0008               	return
 10515  1C5D                     __end_of_Mcu_Initialization:	
 10516                           
 10517                           	psect	text61
 10518  1B93                     __ptext61:	
 10519 ;; *************** function _WDT_Set *****************
 10520 ;; Defined at:
 10521 ;;		line 1077 in file "../src/MCU_B1.c"
 10522 ;; Parameters:    Size  Location     Type
 10523 ;;		None
 10524 ;; Auto vars:     Size  Location     Type
 10525 ;;		None
 10526 ;; Return value:  Size  Location     Type
 10527 ;;		None               void
 10528 ;; Registers used:
 10529 ;;		wreg
 10530 ;; Tracked objects:
 10531 ;;		On entry : 0/0
 10532 ;;		On exit  : 0/0
 10533 ;;		Unchanged: 0/0
 10534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10538 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10539 ;;Total ram usage:        1 bytes
 10540 ;; Hardware stack levels used:    1
 10541 ;; Hardware stack levels required when called:    4
 10542 ;; This function calls:
 10543 ;;		Nothing
 10544 ;; This function is called by:
 10545 ;;		_Mcu_Initialization
 10546 ;; This function uses a non-reentrant model
 10547 ;;
 10548                           
 10549                           
 10550                           ;psect for function _WDT_Set
 10551  1B93                     _WDT_Set:	
 10552                           
 10553                           ;MCU_B1.c: 1084: WDTCON = 0b00010111;;
 10554                           
 10555                           ;incstack = 0
 10556                           ; Regs used in _WDT_Set: [wreg]
 10557  1B93  3017               	movlw	23
 10558  1B94  0021               	movlb	1	; select bank1
 10559  1B95  0097               	movwf	23	;volatile
 10560                           
 10561                           ;MCU_B1.c: 1086: WDT.Enable = 1;
 10562  1B96  0022               	movlb	2	; select bank2
 10563  1B97  1425               	bsf	_WDT^(0+256),0
 10564                           
 10565                           ;MCU_B1.c: 1087: WDT.Timer = 10;
 10566  1B98  300A               	movlw	10
 10567  1B99  0020               	movlb	0	; select bank0
 10568  1B9A  00A0               	movwf	??_WDT_Set
 10569  1B9B  0820               	movf	??_WDT_Set,w
 10570  1B9C  0022               	movlb	2	; select bank2
 10571  1B9D  00A6               	movwf	(_WDT^(0+256)+1)
 10572  1B9E  0008               	return
 10573  1B9F                     __end_of_WDT_Set:	
 10574                           
 10575                           	psect	text62
 10576  1B87                     __ptext62:	
 10577 ;; *************** function _TMR1_Set *****************
 10578 ;; Defined at:
 10579 ;;		line 200 in file "../src/MCU_B1.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;		None
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;		None
 10584 ;; Return value:  Size  Location     Type
 10585 ;;		None               void
 10586 ;; Registers used:
 10587 ;;		wreg
 10588 ;; Tracked objects:
 10589 ;;		On entry : 0/0
 10590 ;;		On exit  : 0/0
 10591 ;;		Unchanged: 0/0
 10592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10597 ;;Total ram usage:        0 bytes
 10598 ;; Hardware stack levels used:    1
 10599 ;; Hardware stack levels required when called:    4
 10600 ;; This function calls:
 10601 ;;		Nothing
 10602 ;; This function is called by:
 10603 ;;		_Mcu_Initialization
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           
 10608                           ;psect for function _TMR1_Set
 10609  1B87                     _TMR1_Set:	
 10610                           
 10611                           ;MCU_B1.c: 201: T1CON = (0x40 | 0x00 | 0x01);
 10612                           
 10613                           ;incstack = 0
 10614                           ; Regs used in _TMR1_Set: [wreg]
 10615  1B87  3041               	movlw	65
 10616  1B88  0020               	movlb	0	; select bank0
 10617  1B89  0098               	movwf	24	;volatile
 10618                           
 10619                           ;MCU_B1.c: 202: TMR1H = (int)((65536-1480)/256);
 10620  1B8A  30FA               	movlw	250
 10621  1B8B  0097               	movwf	23	;volatile
 10622                           
 10623                           ;MCU_B1.c: 203: TMR1L = (int)((65536-1480)%256);
 10624  1B8C  3038               	movlw	56
 10625  1B8D  0096               	movwf	22	;volatile
 10626                           
 10627                           ;MCU_B1.c: 204: TMR1IE = 1;
 10628  1B8E  0021               	movlb	1	; select bank1
 10629  1B8F  1411               	bsf	17,0	;volatile
 10630                           
 10631                           ;MCU_B1.c: 205: PEIE = 1;
 10632  1B90  170B               	bsf	11,6	;volatile
 10633                           
 10634                           ;MCU_B1.c: 206: GIE = 1;
 10635  1B91  178B               	bsf	11,7	;volatile
 10636  1B92  0008               	return
 10637  1B93                     __end_of_TMR1_Set:	
 10638                           
 10639                           	psect	text63
 10640  1E0F                     __ptext63:	
 10641 ;; *************** function _IO_Set *****************
 10642 ;; Defined at:
 10643 ;;		line 60 in file "../src/MCU_B1.c"
 10644 ;; Parameters:    Size  Location     Type
 10645 ;;		None
 10646 ;; Auto vars:     Size  Location     Type
 10647 ;;		None
 10648 ;; Return value:  Size  Location     Type
 10649 ;;		None               void
 10650 ;; Registers used:
 10651 ;;		wreg, status,2
 10652 ;; Tracked objects:
 10653 ;;		On entry : 0/0
 10654 ;;		On exit  : 0/0
 10655 ;;		Unchanged: 0/0
 10656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10661 ;;Total ram usage:        0 bytes
 10662 ;; Hardware stack levels used:    1
 10663 ;; Hardware stack levels required when called:    4
 10664 ;; This function calls:
 10665 ;;		Nothing
 10666 ;; This function is called by:
 10667 ;;		_Mcu_Initialization
 10668 ;; This function uses a non-reentrant model
 10669 ;;
 10670                           
 10671                           
 10672                           ;psect for function _IO_Set
 10673  1E0F                     _IO_Set:	
 10674                           
 10675                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10676                           
 10677                           ;incstack = 0
 10678                           ; Regs used in _IO_Set: [wreg+status,2]
 10679  1E0F  3077               	movlw	119
 10680  1E10  0021               	movlb	1	; select bank1
 10681  1E11  008C               	movwf	12	;volatile
 10682                           
 10683                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10684  1E12  3007               	movlw	7
 10685  1E13  008D               	movwf	13	;volatile
 10686                           
 10687                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10688  1E14  300C               	movlw	12
 10689  1E15  008E               	movwf	14	;volatile
 10690                           
 10691                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10692  1E16  0022               	movlb	2	; select bank2
 10693  1E17  018C               	clrf	12	;volatile
 10694                           
 10695                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10696  1E18  3002               	movlw	2
 10697  1E19  008D               	movwf	13	;volatile
 10698                           
 10699                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10700  1E1A  018E               	clrf	14	;volatile
 10701                           
 10702                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10703  1E1B  3022               	movlw	34
 10704  1E1C  0023               	movlb	3	; select bank3
 10705  1E1D  008C               	movwf	12	;volatile
 10706                           
 10707                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10708  1E1E  018D               	clrf	13	;volatile
 10709                           
 10710                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10711  1E1F  018E               	clrf	14	;volatile
 10712                           
 10713                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10714  1E20  3077               	movlw	119
 10715  1E21  0020               	movlb	0	; select bank0
 10716  1E22  008C               	movwf	12	;volatile
 10717                           
 10718                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10719  1E23  3007               	movlw	7
 10720  1E24  008D               	movwf	13	;volatile
 10721                           
 10722                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10723  1E25  300C               	movlw	12
 10724  1E26  008E               	movwf	14	;volatile
 10725                           
 10726                           ;MCU_B1.c: 100: WPUB = 0b00000000;;
 10727  1E27  0024               	movlb	4	; select bank4
 10728  1E28  018D               	clrf	13	;volatile
 10729  1E29  0008               	return
 10730  1E2A                     __end_of_IO_Set:	
 10731                           
 10732                           	psect	text64
 10733  1B7B                     __ptext64:	
 10734 ;; *************** function _IOC_Set *****************
 10735 ;; Defined at:
 10736 ;;		line 346 in file "../src/MCU_B1.c"
 10737 ;; Parameters:    Size  Location     Type
 10738 ;;		None
 10739 ;; Auto vars:     Size  Location     Type
 10740 ;;		None
 10741 ;; Return value:  Size  Location     Type
 10742 ;;		None               void
 10743 ;; Registers used:
 10744 ;;		wreg, status,2
 10745 ;; Tracked objects:
 10746 ;;		On entry : 0/0
 10747 ;;		On exit  : 0/0
 10748 ;;		Unchanged: 0/0
 10749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;Total ram usage:        0 bytes
 10755 ;; Hardware stack levels used:    1
 10756 ;; Hardware stack levels required when called:    4
 10757 ;; This function calls:
 10758 ;;		Nothing
 10759 ;; This function is called by:
 10760 ;;		_Mcu_Initialization
 10761 ;; This function uses a non-reentrant model
 10762 ;;
 10763                           
 10764                           
 10765                           ;psect for function _IOC_Set
 10766  1B7B                     _IOC_Set:	
 10767                           
 10768                           ;MCU_B1.c: 347: WPUB2 = 0;
 10769                           
 10770                           ;incstack = 0
 10771                           ; Regs used in _IOC_Set: [wreg+status,2]
 10772  1B7B  0024               	movlb	4	; select bank4
 10773  1B7C  110D               	bcf	13,2	;volatile
 10774                           
 10775                           ;MCU_B1.c: 367: IOCBP = 0b00000100;
 10776  1B7D  3004               	movlw	4
 10777  1B7E  0027               	movlb	7	; select bank7
 10778  1B7F  0094               	movwf	20	;volatile
 10779                           
 10780                           ;MCU_B1.c: 368: IOCBN = 0b00000000;
 10781  1B80  0195               	clrf	21	;volatile
 10782                           
 10783                           ;MCU_B1.c: 372: IOCBF = 0b00000000;
 10784  1B81  0196               	clrf	22	;volatile
 10785                           
 10786                           ;MCU_B1.c: 374: IOCIE = 1;
 10787  1B82  158B               	bsf	11,3	;volatile
 10788                           
 10789                           ;MCU_B1.c: 375: IOCIF = 0;
 10790  1B83  100B               	bcf	11,0	;volatile
 10791                           
 10792                           ;MCU_B1.c: 376: PEIE = 1;
 10793  1B84  170B               	bsf	11,6	;volatile
 10794                           
 10795                           ;MCU_B1.c: 377: GIE = 1;
 10796  1B85  178B               	bsf	11,7	;volatile
 10797  1B86  0008               	return
 10798  1B87                     __end_of_IOC_Set:	
 10799                           
 10800                           	psect	text65
 10801  1AC1                     __ptext65:	
 10802 ;; *************** function _Fosc_Set *****************
 10803 ;; Defined at:
 10804 ;;		line 56 in file "../src/MCU_B1.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;		None
 10807 ;; Auto vars:     Size  Location     Type
 10808 ;;		None
 10809 ;; Return value:  Size  Location     Type
 10810 ;;		None               void
 10811 ;; Registers used:
 10812 ;;		wreg
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;Total ram usage:        0 bytes
 10823 ;; Hardware stack levels used:    1
 10824 ;; Hardware stack levels required when called:    4
 10825 ;; This function calls:
 10826 ;;		Nothing
 10827 ;; This function is called by:
 10828 ;;		_Mcu_Initialization
 10829 ;; This function uses a non-reentrant model
 10830 ;;
 10831                           
 10832                           
 10833                           ;psect for function _Fosc_Set
 10834  1AC1                     _Fosc_Set:	
 10835                           
 10836                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10837                           
 10838                           ;incstack = 0
 10839                           ; Regs used in _Fosc_Set: [wreg]
 10840  1AC1  3078               	movlw	120
 10841  1AC2  0021               	movlb	1	; select bank1
 10842  1AC3  0099               	movwf	25	;volatile
 10843  1AC4  0008               	return
 10844  1AC5                     __end_of_Fosc_Set:	
 10845                           
 10846                           	psect	text66
 10847  1AEC                     __ptext66:	
 10848 ;; *************** function _ADC_Set *****************
 10849 ;; Defined at:
 10850 ;;		line 413 in file "../src/MCU_B1.c"
 10851 ;; Parameters:    Size  Location     Type
 10852 ;;		None
 10853 ;; Auto vars:     Size  Location     Type
 10854 ;;		None
 10855 ;; Return value:  Size  Location     Type
 10856 ;;		None               void
 10857 ;; Registers used:
 10858 ;;		wreg
 10859 ;; Tracked objects:
 10860 ;;		On entry : 0/0
 10861 ;;		On exit  : 0/0
 10862 ;;		Unchanged: 0/0
 10863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;Total ram usage:        0 bytes
 10869 ;; Hardware stack levels used:    1
 10870 ;; Hardware stack levels required when called:    4
 10871 ;; This function calls:
 10872 ;;		Nothing
 10873 ;; This function is called by:
 10874 ;;		_Mcu_Initialization
 10875 ;; This function uses a non-reentrant model
 10876 ;;
 10877                           
 10878                           
 10879                           ;psect for function _ADC_Set
 10880  1AEC                     _ADC_Set:	
 10881                           
 10882                           ;MCU_B1.c: 414: ADCON1 = 0xf3;
 10883                           
 10884                           ;incstack = 0
 10885                           ; Regs used in _ADC_Set: [wreg]
 10886  1AEC  30F3               	movlw	243
 10887  1AED  0021               	movlb	1	; select bank1
 10888  1AEE  009E               	movwf	30	;volatile
 10889                           
 10890                           ;MCU_B1.c: 415: FVRCON = 0xc1;
 10891  1AEF  30C1               	movlw	193
 10892  1AF0  0022               	movlb	2	; select bank2
 10893  1AF1  0097               	movwf	23	;volatile
 10894  1AF2  0008               	return
 10895  1AF3                     __end_of_ADC_Set:	
 10896                           
 10897                           	psect	text67
 10898  004A                     __ptext67:	
 10899 ;; *************** function _Load_Main *****************
 10900 ;; Defined at:
 10901 ;;		line 39 in file "../src/OverLoad_B1.c"
 10902 ;; Parameters:    Size  Location     Type
 10903 ;;		None
 10904 ;; Auto vars:     Size  Location     Type
 10905 ;;  i               2   12[BANK0 ] int 
 10906 ;;  Load_Status     1   11[BANK0 ] unsigned char 
 10907 ;;  error           1   10[BANK0 ] unsigned char 
 10908 ;; Return value:  Size  Location     Type
 10909 ;;		None               void
 10910 ;; Registers used:
 10911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10912 ;; Tracked objects:
 10913 ;;		On entry : 0/0
 10914 ;;		On exit  : 0/0
 10915 ;;		Unchanged: 0/0
 10916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10919 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10920 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10921 ;;Total ram usage:        6 bytes
 10922 ;; Hardware stack levels used:    1
 10923 ;; Hardware stack levels required when called:    6
 10924 ;; This function calls:
 10925 ;;		___lwdiv
 10926 ;;		___wmul
 10927 ;;		_getAll_DimmerLights_AdjSw
 10928 ;;		_getDimmer_LoadGO
 10929 ;;		_getDimmer_Load_Status
 10930 ;;		_getMain_All_Error_Status
 10931 ;;		_getMain_LightsStatus
 10932 ;;		_getMain_Lights_Count
 10933 ;;		_setLoad_AH_AL_Restore
 10934 ;; This function is called by:
 10935 ;;		_main
 10936 ;; This function uses a non-reentrant model
 10937 ;;
 10938                           
 10939                           
 10940                           ;psect for function _Load_Main
 10941  004A                     _Load_Main:	
 10942                           
 10943                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10944                           
 10945                           ;incstack = 0
 10946                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10947  004A  3000               	movlw	0
 10948  004B  3191  2193  3180   	fcall	_getMain_All_Error_Status
 10949  004E  0020               	movlb	0	; select bank0
 10950  004F  00A8               	movwf	??_Load_Main
 10951  0050  0828               	movf	??_Load_Main,w
 10952  0051  00AA               	movwf	Load_Main@error
 10953                           
 10954                           ;OverLoad_B1.c: 41: char Load_Status = 0;
 10955  0052  01AB               	clrf	Load_Main@Load_Status
 10956                           
 10957                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10958  0053  0022               	movlb	2	; select bank2
 10959  0054  1C27               	btfss	_Load^(0+256),0
 10960  0055  29F0               	goto	l1729
 10961                           
 10962                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
 10963  0056  319C  2495  3180   	fcall	_getMain_LightsStatus
 10964  0059  3800               	iorlw	0
 10965  005A  1D03               	skipz
 10966  005B  285E               	goto	l10697
 10967                           
 10968                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10969  005C  0022               	movlb	2	; select bank2
 10970  005D  287F               	goto	l10715
 10971  005E                     l10697:	
 10972                           ;OverLoad_B1.c: 66: } else {
 10973                           
 10974                           
 10975                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
 10976  005E  0020               	movlb	0	; select bank0
 10977  005F  08AA               	movf	Load_Main@error,f
 10978  0060  1D03               	skipz
 10979  0061  287C               	goto	l1732
 10980  0062  3187  27D3  3180   	fcall	_getAll_DimmerLights_AdjSw
 10981  0065  3800               	iorlw	0
 10982  0066  1D03               	skipz
 10983  0067  287C               	goto	l1732
 10984                           
 10985                           ;OverLoad_B1.c: 70: Load.GO = 1;
 10986  0068  0022               	movlb	2	; select bank2
 10987  0069  14A7               	bsf	_Load^(0+256),1
 10988                           
 10989                           ;OverLoad_B1.c: 72: if (getDimmer_LoadGO() == 1) {
 10990  006A  319B  230B  3180   	fcall	_getDimmer_LoadGO
 10991  006D  3A01               	xorlw	1
 10992  006E  1D03               	skipz
 10993  006F  2877               	goto	l1733
 10994                           
 10995                           ;OverLoad_B1.c: 73: if (Load.Run == 0 && Load.OK == 0) {
 10996  0070  0022               	movlb	2	; select bank2
 10997  0071  1DA7               	btfss	_Load^(0+256),3
 10998  0072  1BA7               	btfsc	_Load^(0+256),7
 10999  0073  2880               	goto	l1731
 11000                           
 11001                           ;OverLoad_B1.c: 74: Load.Run = 1;
 11002  0074  15A7               	bsf	_Load^(0+256),3
 11003                           
 11004                           ;OverLoad_B1.c: 75: Load.Count = 0;
 11005  0075  01D0               	clrf	(_Load^(0+256)+41)
 11006                           
 11007                           ;OverLoad_B1.c: 76: }
 11008                           ;OverLoad_B1.c: 77: } else {
 11009  0076  2880               	goto	l1731
 11010  0077                     l1733:	
 11011                           
 11012                           ;OverLoad_B1.c: 78: if (Load.OK == 1) {
 11013  0077  0022               	movlb	2	; select bank2
 11014  0078  1FA7               	btfss	_Load^(0+256),7
 11015  0079  2880               	goto	l1731
 11016                           
 11017                           ;OverLoad_B1.c: 79: Load.OK = 0;
 11018  007A  13A7               	bcf	_Load^(0+256),7
 11019                           
 11020                           ;OverLoad_B1.c: 80: }
 11021                           ;OverLoad_B1.c: 81: }
 11022                           ;OverLoad_B1.c: 82: } else {
 11023  007B  2880               	goto	l1731
 11024  007C                     l1732:	
 11025                           
 11026                           ;OverLoad_B1.c: 83: if (Load.GO == 1) {
 11027  007C  0022               	movlb	2	; select bank2
 11028  007D  1CA7               	btfss	_Load^(0+256),1
 11029  007E  2880               	goto	l1731
 11030  007F                     l10715:	
 11031                           
 11032                           ;OverLoad_B1.c: 84: Load.GO = 0;
 11033  007F  10A7               	bcf	_Load^(0+256),1
 11034  0080                     l1731:	
 11035                           
 11036                           ;OverLoad_B1.c: 85: }
 11037                           ;OverLoad_B1.c: 86: }
 11038                           ;OverLoad_B1.c: 88: }
 11039                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 11040  0080  1CA7               	btfss	_Load^(0+256),1
 11041  0081  29CC               	goto	l1739
 11042                           
 11043                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 11044  0082  1527               	bsf	_Load^(0+256),2
 11045                           
 11046                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 11047  0083  1E27               	btfss	_Load^(0+256),4
 11048  0084  29CA               	goto	l1740
 11049                           
 11050                           ;OverLoad_B1.c: 95: Load.Time++;
 11051  0085  3001               	movlw	1
 11052  0086  07A8               	addwf	(_Load^(0+256)+1),f
 11053  0087  3000               	movlw	0
 11054  0088  3DA9               	addwfc	((_Load+1)^(0+256)+1),f
 11055                           
 11056                           ;OverLoad_B1.c: 96: if (Load.Time >= 5) {
 11057  0089  3000               	movlw	0
 11058  008A  0229               	subwf	((_Load+1)^(0+256)+1),w
 11059  008B  3005               	movlw	5
 11060  008C  1903               	skipnz
 11061  008D  0228               	subwf	(_Load^(0+256)+1),w
 11062  008E  1C03               	skipc
 11063  008F  0008               	return
 11064                           
 11065                           ;OverLoad_B1.c: 97: Load.Time = 0;
 11066  0090  01A8               	clrf	(_Load^(0+256)+1)
 11067  0091  01A9               	clrf	((_Load+1)^(0+256)+1)
 11068                           
 11069                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 11070  0092  1227               	bcf	_Load^(0+256),4
 11071                           
 11072                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 11073  0093  3001               	movlw	1
 11074  0094  0020               	movlb	0	; select bank0
 11075  0095  00AC               	movwf	Load_Main@i
 11076  0096  3000               	movlw	0
 11077  0097  00AD               	movwf	Load_Main@i+1
 11078  0098  082D               	movf	Load_Main@i+1,w
 11079  0099  3A80               	xorlw	128
 11080  009A  00A8               	movwf	??_Load_Main
 11081  009B  3080               	movlw	128
 11082  009C  0228               	subwf	??_Load_Main,w
 11083  009D  1D03               	skipz
 11084  009E  28A1               	goto	u12395
 11085  009F  3004               	movlw	4
 11086  00A0  022C               	subwf	Load_Main@i,w
 11087  00A1                     u12395:	
 11088  00A1  1803               	btfsc	3,0
 11089  00A2  28D5               	goto	l10737
 11090  00A3                     l10731:	
 11091                           
 11092                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 11093  00A3  0020               	movlb	0	; select bank0
 11094  00A4  352C               	lslf	Load_Main@i,w
 11095  00A5  3E32               	addlw	(_Load+11)& (0+255)
 11096  00A6  0086               	movwf	6
 11097  00A7  3001               	movlw	1	; select bank2/3
 11098  00A8  0087               	movwf	7
 11099  00A9  3F40               	moviw [0]fsr1
 11100  00AA  00A8               	movwf	??_Load_Main
 11101  00AB  3F41               	moviw [1]fsr1
 11102  00AC  00A9               	movwf	??_Load_Main+1
 11103  00AD  0828               	movf	??_Load_Main,w
 11104  00AE  0022               	movlb	2	; select bank2
 11105  00AF  07AC               	addwf	(_Load^(0+256)+5),f
 11106  00B0  0020               	movlb	0	; select bank0
 11107  00B1  0829               	movf	??_Load_Main+1,w
 11108  00B2  0022               	movlb	2	; select bank2
 11109  00B3  3DAD               	addwfc	((_Load+1)^(0+256)+5),f
 11110                           
 11111                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 11112  00B4  0020               	movlb	0	; select bank0
 11113  00B5  352C               	lslf	Load_Main@i,w
 11114  00B6  3E3C               	addlw	(_Load+21)& (0+255)
 11115  00B7  0086               	movwf	6
 11116  00B8  3001               	movlw	1	; select bank2/3
 11117  00B9  0087               	movwf	7
 11118  00BA  3F40               	moviw [0]fsr1
 11119  00BB  00A8               	movwf	??_Load_Main
 11120  00BC  3F41               	moviw [1]fsr1
 11121  00BD  00A9               	movwf	??_Load_Main+1
 11122  00BE  0828               	movf	??_Load_Main,w
 11123  00BF  0022               	movlb	2	; select bank2
 11124  00C0  07AE               	addwf	(_Load^(0+256)+7),f
 11125  00C1  0020               	movlb	0	; select bank0
 11126  00C2  0829               	movf	??_Load_Main+1,w
 11127  00C3  0022               	movlb	2	; select bank2
 11128  00C4  3DAF               	addwfc	((_Load+1)^(0+256)+7),f
 11129  00C5  3001               	movlw	1
 11130  00C6  0020               	movlb	0	; select bank0
 11131  00C7  07AC               	addwf	Load_Main@i,f
 11132  00C8  3000               	movlw	0
 11133  00C9  3DAD               	addwfc	Load_Main@i+1,f
 11134  00CA  082D               	movf	Load_Main@i+1,w
 11135  00CB  3A80               	xorlw	128
 11136  00CC  00A8               	movwf	??_Load_Main
 11137  00CD  3080               	movlw	128
 11138  00CE  0228               	subwf	??_Load_Main,w
 11139  00CF  1D03               	skipz
 11140  00D0  28D3               	goto	u12405
 11141  00D1  3004               	movlw	4
 11142  00D2  022C               	subwf	Load_Main@i,w
 11143  00D3                     u12405:	
 11144  00D3  1C03               	skipc
 11145  00D4  28A3               	goto	l10731
 11146  00D5                     l10737:	
 11147                           
 11148                           ;OverLoad_B1.c: 103: }
 11149                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 11150  00D5  3003               	movlw	3
 11151  00D6  0020               	movlb	0	; select bank0
 11152  00D7  00A0               	movwf	___lwdiv@divisor
 11153  00D8  3000               	movlw	0
 11154  00D9  00A1               	movwf	___lwdiv@divisor+1
 11155  00DA  0022               	movlb	2	; select bank2
 11156  00DB  082D               	movf	((_Load+1)^(0+256)+5),w
 11157  00DC  0020               	movlb	0	; select bank0
 11158  00DD  01A3               	clrf	___lwdiv@dividend+1
 11159  00DE  07A3               	addwf	___lwdiv@dividend+1,f
 11160  00DF  0022               	movlb	2	; select bank2
 11161  00E0  082C               	movf	(_Load^(0+256)+5),w
 11162  00E1  0020               	movlb	0	; select bank0
 11163  00E2  01A2               	clrf	___lwdiv@dividend
 11164  00E3  07A2               	addwf	___lwdiv@dividend,f
 11165  00E4  3192  2230  3180   	fcall	___lwdiv
 11166  00E7  0020               	movlb	0	; select bank0
 11167  00E8  0821               	movf	?___lwdiv+1,w
 11168  00E9  0022               	movlb	2	; select bank2
 11169  00EA  01AD               	clrf	((_Load+1)^(0+256)+5)
 11170  00EB  07AD               	addwf	((_Load+1)^(0+256)+5),f
 11171  00EC  0020               	movlb	0	; select bank0
 11172  00ED  0820               	movf	?___lwdiv,w
 11173  00EE  0022               	movlb	2	; select bank2
 11174  00EF  01AC               	clrf	(_Load^(0+256)+5)
 11175  00F0  07AC               	addwf	(_Load^(0+256)+5),f
 11176                           
 11177                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 11178  00F1  3003               	movlw	3
 11179  00F2  0020               	movlb	0	; select bank0
 11180  00F3  00A0               	movwf	___lwdiv@divisor
 11181  00F4  3000               	movlw	0
 11182  00F5  00A1               	movwf	___lwdiv@divisor+1
 11183  00F6  0022               	movlb	2	; select bank2
 11184  00F7  082F               	movf	((_Load+1)^(0+256)+7),w
 11185  00F8  0020               	movlb	0	; select bank0
 11186  00F9  01A3               	clrf	___lwdiv@dividend+1
 11187  00FA  07A3               	addwf	___lwdiv@dividend+1,f
 11188  00FB  0022               	movlb	2	; select bank2
 11189  00FC  082E               	movf	(_Load^(0+256)+7),w
 11190  00FD  0020               	movlb	0	; select bank0
 11191  00FE  01A2               	clrf	___lwdiv@dividend
 11192  00FF  07A2               	addwf	___lwdiv@dividend,f
 11193  0100  3192  2230  3180   	fcall	___lwdiv
 11194  0103  0020               	movlb	0	; select bank0
 11195  0104  0821               	movf	?___lwdiv+1,w
 11196  0105  0022               	movlb	2	; select bank2
 11197  0106  01AF               	clrf	((_Load+1)^(0+256)+7)
 11198  0107  07AF               	addwf	((_Load+1)^(0+256)+7),f
 11199  0108  0020               	movlb	0	; select bank0
 11200  0109  0820               	movf	?___lwdiv,w
 11201  010A  0022               	movlb	2	; select bank2
 11202  010B  01AE               	clrf	(_Load^(0+256)+7)
 11203  010C  07AE               	addwf	(_Load^(0+256)+7),f
 11204                           
 11205                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 11206  010D  3190  2066  3180   	fcall	_setLoad_AH_AL_Restore
 11207                           
 11208                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 11209  0110  0022               	movlb	2	; select bank2
 11210  0111  082F               	movf	((_Load+1)^(0+256)+7),w
 11211  0112  022D               	subwf	((_Load+1)^(0+256)+5),w
 11212  0113  1D03               	skipz
 11213  0114  2917               	goto	u12415
 11214  0115  082E               	movf	(_Load^(0+256)+7),w
 11215  0116  022C               	subwf	(_Load^(0+256)+5),w
 11216  0117                     u12415:	
 11217  0117  1C03               	skipc
 11218  0118  0008               	return
 11219                           
 11220                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 11221  0119  3005               	movlw	5
 11222  011A  3E27               	addlw	_Load& (0+255)
 11223  011B  0086               	movwf	6
 11224  011C  3001               	movlw	1	; select bank2/3
 11225  011D  0087               	movwf	7
 11226  011E  092E               	comf	(_Load^(0+256)+7),w
 11227  011F  0020               	movlb	0	; select bank0
 11228  0120  00A8               	movwf	??_Load_Main
 11229  0121  0022               	movlb	2	; select bank2
 11230  0122  092F               	comf	((_Load+1)^(0+256)+7),w
 11231  0123  0020               	movlb	0	; select bank0
 11232  0124  00A9               	movwf	??_Load_Main+1
 11233  0125  0AA8               	incf	??_Load_Main,f
 11234  0126  1903               	skipnz
 11235  0127  0AA9               	incf	??_Load_Main+1,f
 11236  0128  3F40               	moviw [0]fsr1
 11237  0129  0728               	addwf	??_Load_Main,w
 11238  012A  0022               	movlb	2	; select bank2
 11239  012B  00C6               	movwf	(_Load^(0+256)+31)
 11240  012C  3F41               	moviw [1]fsr1
 11241  012D  0020               	movlb	0	; select bank0
 11242  012E  3D29               	addwfc	??_Load_Main+1,w
 11243  012F  0022               	movlb	2	; select bank2
 11244  0130  00C7               	movwf	(_Load^(0+256)+32)
 11245                           
 11246                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 11247  0131  01AC               	clrf	(_Load^(0+256)+5)
 11248  0132  01AD               	clrf	((_Load+1)^(0+256)+5)
 11249                           
 11250                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 11251  0133  01AE               	clrf	(_Load^(0+256)+7)
 11252  0134  01AF               	clrf	((_Load+1)^(0+256)+7)
 11253                           
 11254                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 11255  0135  1DA7               	btfss	_Load^(0+256),3
 11256  0136  2996               	goto	l10777
 11257                           
 11258                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 11259  0137  3002               	movlw	2
 11260  0138  0250               	subwf	(_Load^(0+256)+41),w
 11261  0139  1803               	skipnc
 11262  013A  2996               	goto	l10777
 11263                           
 11264                           ;OverLoad_B1.c: 115: Load.Count++;
 11265  013B  3001               	movlw	1
 11266  013C  0020               	movlb	0	; select bank0
 11267  013D  00A8               	movwf	??_Load_Main
 11268  013E  0828               	movf	??_Load_Main,w
 11269  013F  0022               	movlb	2	; select bank2
 11270  0140  07D0               	addwf	(_Load^(0+256)+41),f
 11271                           
 11272                           ;OverLoad_B1.c: 116: Load_Status = getDimmer_Load_Status();
 11273  0141  319B  2313  3180   	fcall	_getDimmer_Load_Status
 11274  0144  0020               	movlb	0	; select bank0
 11275  0145  00A8               	movwf	??_Load_Main
 11276  0146  0828               	movf	??_Load_Main,w
 11277  0147  00AB               	movwf	Load_Main@Load_Status
 11278                           
 11279                           ;OverLoad_B1.c: 117: Load.LightsCount = getMain_Lights_Count();
 11280  0148  319D  251D  3180   	fcall	_getMain_Lights_Count
 11281  014B  0020               	movlb	0	; select bank0
 11282  014C  00A8               	movwf	??_Load_Main
 11283  014D  0828               	movf	??_Load_Main,w
 11284  014E  0022               	movlb	2	; select bank2
 11285  014F  00D3               	movwf	(_Load^(0+256)+44)
 11286                           
 11287                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
 11288  0150  0850               	movf	(_Load^(0+256)+41),w
 11289  0151  3A01               	xorlw	1
 11290  0152  1D03               	skipz
 11291  0153  295E               	goto	l10763
 11292                           
 11293                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
 11294  0154  3002               	movlw	2
 11295  0155  0020               	movlb	0	; select bank0
 11296  0156  00A8               	movwf	??_Load_Main
 11297  0157  0828               	movf	??_Load_Main,w
 11298  0158  0022               	movlb	2	; select bank2
 11299  0159  00D2               	movwf	(_Load^(0+256)+43)
 11300                           
 11301                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*50);
 11302  015A  30E8               	movlw	232
 11303  015B  00CC               	movwf	(_Load^(0+256)+37)
 11304  015C  3003               	movlw	3
 11305  015D  2969               	goto	L8
 11306  015E                     l10763:	
 11307                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
 11308                           
 11309  015E  0850               	movf	(_Load^(0+256)+41),w
 11310  015F  3A02               	xorlw	2
 11311  0160  1D03               	skipz
 11312  0161  2996               	goto	l10777
 11313                           
 11314                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
 11315  0162  0853               	movf	(_Load^(0+256)+44),w
 11316  0163  3A01               	xorlw	1
 11317  0164  1D03               	skipz
 11318  0165  296B               	goto	l10769
 11319                           
 11320                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.1*50);
 11321  0166  3037               	movlw	55
 11322  0167  00CC               	movwf	(_Load^(0+256)+37)
 11323  0168  3000               	movlw	0
 11324  0169                     L8:	
 11325  0169  00CD               	movwf	(_Load^(0+256)+38)
 11326                           
 11327                           ;OverLoad_B1.c: 124: } else {
 11328  016A  2996               	goto	l10777
 11329  016B                     l10769:	
 11330                           
 11331                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 11332  016B  0020               	movlb	0	; select bank0
 11333  016C  08AB               	movf	Load_Main@Load_Status,f
 11334  016D  1D03               	skipz
 11335  016E  298A               	goto	l10773
 11336                           
 11337                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 11338  016F  0022               	movlb	2	; select bank2
 11339  0170  0853               	movf	(_Load^(0+256)+44),w
 11340  0171  0020               	movlb	0	; select bank0
 11341  0172  00A8               	movwf	??_Load_Main
 11342  0173  01A9               	clrf	??_Load_Main+1
 11343  0174  0828               	movf	??_Load_Main,w
 11344  0175  00A0               	movwf	___wmul@multiplier
 11345  0176  0829               	movf	??_Load_Main+1,w
 11346  0177  00A1               	movwf	___wmul@multiplier+1
 11347  0178  3037               	movlw	55
 11348  0179  00A2               	movwf	___wmul@multiplicand
 11349  017A  3000               	movlw	0
 11350  017B  00A3               	movwf	___wmul@multiplicand+1
 11351  017C  319E  2647  3180   	fcall	___wmul
 11352  017F  0020               	movlb	0	; select bank0
 11353  0180  0821               	movf	?___wmul+1,w
 11354  0181  0022               	movlb	2	; select bank2
 11355  0182  01CD               	clrf	((_Load+1)^(0+256)+37)
 11356  0183  07CD               	addwf	((_Load+1)^(0+256)+37),f
 11357  0184  0020               	movlb	0	; select bank0
 11358  0185  0820               	movf	?___wmul,w
 11359  0186  0022               	movlb	2	; select bank2
 11360  0187  01CC               	clrf	(_Load^(0+256)+37)
 11361  0188  07CC               	addwf	(_Load^(0+256)+37),f
 11362                           
 11363                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 11364  0189  2996               	goto	l10777
 11365  018A                     l10773:	
 11366  018A  0020               	movlb	0	; select bank0
 11367  018B  082B               	movf	Load_Main@Load_Status,w
 11368  018C  3A01               	xorlw	1
 11369  018D  1D03               	skipz
 11370  018E  2996               	goto	l10777
 11371                           
 11372                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 11373  018F  0022               	movlb	2	; select bank2
 11374  0190  0830               	movf	(_Load^(0+256)+9),w
 11375  0191  3E37               	addlw	55
 11376  0192  00CC               	movwf	(_Load^(0+256)+37)
 11377  0193  3000               	movlw	0
 11378  0194  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 11379  0195  00CD               	movwf	((_Load+1)^(0+256)+37)
 11380  0196                     l10777:	
 11381                           
 11382                           ;OverLoad_B1.c: 129: }
 11383                           ;OverLoad_B1.c: 130: }
 11384                           ;OverLoad_B1.c: 131: }
 11385                           ;OverLoad_B1.c: 132: }
 11386                           ;OverLoad_B1.c: 133: }
 11387                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 11388  0196  0022               	movlb	2	; select bank2
 11389  0197  084D               	movf	((_Load+1)^(0+256)+37),w
 11390  0198  0247               	subwf	((_Load+1)^(0+256)+31),w
 11391  0199  1D03               	skipz
 11392  019A  299D               	goto	u12495
 11393  019B  084C               	movf	(_Load^(0+256)+37),w
 11394  019C  0246               	subwf	(_Load^(0+256)+31),w
 11395  019D                     u12495:	
 11396  019D  1C03               	skipc
 11397  019E  29AC               	goto	l10787
 11398                           
 11399                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 11400  019F  3001               	movlw	1
 11401  01A0  0020               	movlb	0	; select bank0
 11402  01A1  00A8               	movwf	??_Load_Main
 11403  01A2  0828               	movf	??_Load_Main,w
 11404  01A3  0022               	movlb	2	; select bank2
 11405  01A4  07D1               	addwf	(_Load^(0+256)+42),f
 11406                           
 11407                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 11408  01A5  0851               	movf	(_Load^(0+256)+42),w
 11409  01A6  0252               	subwf	(_Load^(0+256)+43),w
 11410  01A7  1803               	skipnc
 11411  01A8  0008               	return
 11412                           
 11413                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 11414  01A9  01D1               	clrf	(_Load^(0+256)+42)
 11415                           
 11416                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 11417  01AA  16A7               	bsf	_Load^(0+256),5
 11418                           
 11419                           ;OverLoad_B1.c: 161: }
 11420                           ;OverLoad_B1.c: 162: } else {
 11421  01AB  0008               	return
 11422  01AC                     l10787:	
 11423                           
 11424                           ;OverLoad_B1.c: 163: Load.ErrorCount = 0;
 11425  01AC  01D1               	clrf	(_Load^(0+256)+42)
 11426                           
 11427                           ;OverLoad_B1.c: 164: if (Load.Run == 1) {
 11428  01AD  1DA7               	btfss	_Load^(0+256),3
 11429  01AE  0008               	return
 11430                           
 11431                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 11432  01AF  3001               	movlw	1
 11433  01B0  0020               	movlb	0	; select bank0
 11434  01B1  00A8               	movwf	??_Load_Main
 11435  01B2  0828               	movf	??_Load_Main,w
 11436  01B3  0022               	movlb	2	; select bank2
 11437  01B4  07D4               	addwf	(_Load^(0+256)+45),f
 11438                           
 11439                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 11440  01B5  3003               	movlw	3
 11441  01B6  0254               	subwf	(_Load^(0+256)+45),w
 11442  01B7  1C03               	skipc
 11443  01B8  0008               	return
 11444                           
 11445                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 11446  01B9  01D4               	clrf	(_Load^(0+256)+45)
 11447                           
 11448                           ;OverLoad_B1.c: 168: Load.OK = 1;
 11449  01BA  17A7               	bsf	_Load^(0+256),7
 11450                           
 11451                           ;OverLoad_B1.c: 169: Load.Run = 0;
 11452  01BB  11A7               	bcf	_Load^(0+256),3
 11453                           
 11454                           ;OverLoad_B1.c: 170: Load.Count = 0;
 11455  01BC  01D0               	clrf	(_Load^(0+256)+41)
 11456                           
 11457                           ;OverLoad_B1.c: 171: Load.TotalLoad = Load.AD;
 11458  01BD  0847               	movf	((_Load+1)^(0+256)+31),w
 11459  01BE  01B1               	clrf	((_Load+1)^(0+256)+9)
 11460  01BF  07B1               	addwf	((_Load+1)^(0+256)+9),f
 11461  01C0  0846               	movf	(_Load^(0+256)+31),w
 11462  01C1  01B0               	clrf	(_Load^(0+256)+9)
 11463  01C2  07B0               	addwf	(_Load^(0+256)+9),f
 11464                           
 11465                           ;OverLoad_B1.c: 172: Load.ErrorCountValue = 3;
 11466  01C3  3003               	movlw	3
 11467  01C4  0020               	movlb	0	; select bank0
 11468  01C5  00A8               	movwf	??_Load_Main
 11469  01C6  0828               	movf	??_Load_Main,w
 11470  01C7  0022               	movlb	2	; select bank2
 11471  01C8  00D2               	movwf	(_Load^(0+256)+43)
 11472                           
 11473                           ;OverLoad_B1.c: 175: }
 11474                           ;OverLoad_B1.c: 176: }
 11475                           ;OverLoad_B1.c: 199: }
 11476                           ;OverLoad_B1.c: 200: }
 11477                           ;OverLoad_B1.c: 201: }
 11478                           ;OverLoad_B1.c: 202: } else {
 11479  01C9  0008               	return
 11480  01CA                     l1740:	
 11481                           
 11482                           ;OverLoad_B1.c: 203: Load.ADtoGO = 1;
 11483  01CA  1627               	bsf	_Load^(0+256),4
 11484                           
 11485                           ;OverLoad_B1.c: 204: }
 11486                           ;OverLoad_B1.c: 205: } else {
 11487  01CB  0008               	return
 11488  01CC                     l1739:	
 11489                           
 11490                           ;OverLoad_B1.c: 207: if (Load.LightsON == 1) {
 11491  01CC  1D27               	btfss	_Load^(0+256),2
 11492  01CD  29DF               	goto	l10825
 11493                           
 11494                           ;OverLoad_B1.c: 208: Load.LightsON = 0;
 11495  01CE  1127               	bcf	_Load^(0+256),2
 11496                           
 11497                           ;OverLoad_B1.c: 210: Load.ADtoGO = 0;
 11498  01CF  1227               	bcf	_Load^(0+256),4
 11499                           
 11500                           ;OverLoad_B1.c: 211: Load.Time = 0;
 11501  01D0  01A8               	clrf	(_Load^(0+256)+1)
 11502  01D1  01A9               	clrf	((_Load+1)^(0+256)+1)
 11503                           
 11504                           ;OverLoad_B1.c: 212: setLoad_AH_AL_Restore();
 11505  01D2  3190  2066  3180   	fcall	_setLoad_AH_AL_Restore
 11506                           
 11507                           ;OverLoad_B1.c: 214: Load.ErrorCount = 0;
 11508  01D5  0022               	movlb	2	; select bank2
 11509  01D6  01D1               	clrf	(_Load^(0+256)+42)
 11510                           
 11511                           ;OverLoad_B1.c: 215: Load.SafeCount = 0;
 11512  01D7  01D4               	clrf	(_Load^(0+256)+45)
 11513                           
 11514                           ;OverLoad_B1.c: 217: Load.ADH = 0;
 11515  01D8  01AC               	clrf	(_Load^(0+256)+5)
 11516  01D9  01AD               	clrf	((_Load+1)^(0+256)+5)
 11517                           
 11518                           ;OverLoad_B1.c: 218: Load.ADL = 0;
 11519  01DA  01AE               	clrf	(_Load^(0+256)+7)
 11520  01DB  01AF               	clrf	((_Load+1)^(0+256)+7)
 11521                           
 11522                           ;OverLoad_B1.c: 224: Load.Run = 0;
 11523  01DC  11A7               	bcf	_Load^(0+256),3
 11524                           
 11525                           ;OverLoad_B1.c: 225: Load.Count = 0;
 11526  01DD  01D0               	clrf	(_Load^(0+256)+41)
 11527                           
 11528                           ;OverLoad_B1.c: 226: Load.OK = 0;
 11529  01DE  13A7               	bcf	_Load^(0+256),7
 11530  01DF                     l10825:	
 11531                           
 11532                           ;OverLoad_B1.c: 248: }
 11533                           ;OverLoad_B1.c: 249: if (Load.ERROR == 1) {
 11534  01DF  1EA7               	btfss	_Load^(0+256),5
 11535  01E0  0008               	return
 11536                           
 11537                           ;OverLoad_B1.c: 250: Load.ErrorTime++;
 11538  01E1  3001               	movlw	1
 11539  01E2  07AA               	addwf	(_Load^(0+256)+3),f
 11540  01E3  3000               	movlw	0
 11541  01E4  3DAB               	addwfc	((_Load+1)^(0+256)+3),f
 11542                           
 11543                           ;OverLoad_B1.c: 251: if (Load.ErrorTime >= 1000) {
 11544  01E5  3003               	movlw	3
 11545  01E6  022B               	subwf	((_Load+1)^(0+256)+3),w
 11546  01E7  30E8               	movlw	232
 11547  01E8  1903               	skipnz
 11548  01E9  022A               	subwf	(_Load^(0+256)+3),w
 11549  01EA  1C03               	skipc
 11550  01EB  0008               	return
 11551                           
 11552                           ;OverLoad_B1.c: 252: Load.ErrorTime = 0;
 11553  01EC  01AA               	clrf	(_Load^(0+256)+3)
 11554  01ED  01AB               	clrf	((_Load+1)^(0+256)+3)
 11555                           
 11556                           ;OverLoad_B1.c: 253: Load.ERROR = 0;
 11557  01EE  12A7               	bcf	_Load^(0+256),5
 11558                           
 11559                           ;OverLoad_B1.c: 254: }
 11560                           ;OverLoad_B1.c: 255: }
 11561                           ;OverLoad_B1.c: 256: }
 11562                           ;OverLoad_B1.c: 257: } else {
 11563  01EF  0008               	return
 11564  01F0                     l1729:	
 11565                           
 11566                           ;OverLoad_B1.c: 258: if (myMain.PowerON == 1) {
 11567  01F0  0021               	movlb	1	; select bank1
 11568  01F1  1C2E               	btfss	_myMain^(0+128),0
 11569  01F2  0008               	return
 11570                           
 11571                           ;OverLoad_B1.c: 259: Load.Enable = 1;
 11572  01F3  0022               	movlb	2	; select bank2
 11573  01F4  1427               	bsf	_Load^(0+256),0
 11574  01F5  0008               	return
 11575  01F6                     __end_of_Load_Main:	
 11576                           
 11577                           	psect	text68
 11578  1D1D                     __ptext68:	
 11579 ;; *************** function _getMain_Lights_Count *****************
 11580 ;; Defined at:
 11581 ;;		line 467 in file "../src/Main_B1.c"
 11582 ;; Parameters:    Size  Location     Type
 11583 ;;		None
 11584 ;; Auto vars:     Size  Location     Type
 11585 ;;  status2         1    2[BANK0 ] unsigned char 
 11586 ;;  status1         1    1[BANK0 ] unsigned char 
 11587 ;;  count           1    0[BANK0 ] unsigned char 
 11588 ;; Return value:  Size  Location     Type
 11589 ;;                  1    wreg      unsigned char 
 11590 ;; Registers used:
 11591 ;;		wreg, status,2, status,0
 11592 ;; Tracked objects:
 11593 ;;		On entry : 0/0
 11594 ;;		On exit  : 0/0
 11595 ;;		Unchanged: 0/0
 11596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11598 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11600 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11601 ;;Total ram usage:        3 bytes
 11602 ;; Hardware stack levels used:    1
 11603 ;; Hardware stack levels required when called:    4
 11604 ;; This function calls:
 11605 ;;		Nothing
 11606 ;; This function is called by:
 11607 ;;		_Load_Main
 11608 ;; This function uses a non-reentrant model
 11609 ;;
 11610                           
 11611                           
 11612                           ;psect for function _getMain_Lights_Count
 11613  1D1D                     _getMain_Lights_Count:	
 11614                           
 11615                           ;Main_B1.c: 468: char count = 0;
 11616                           
 11617                           ;incstack = 0
 11618                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11619  1D1D  0020               	movlb	0	; select bank0
 11620  1D1E  01A0               	clrf	getMain_Lights_Count@count
 11621                           
 11622                           ;Main_B1.c: 472: char status1 = 0;
 11623  1D1F  01A1               	clrf	getMain_Lights_Count@status1
 11624                           
 11625                           ;Main_B1.c: 473: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 11626  1D20  3000               	movlw	0
 11627  1D21  0023               	movlb	3	; select bank3
 11628  1D22  193F               	btfsc	(_DimmerLights1^(0+384)+1),2
 11629  1D23  3001               	movlw	1
 11630  1D24  0020               	movlb	0	; select bank0
 11631  1D25  00A1               	movwf	getMain_Lights_Count@status1
 11632                           
 11633                           ;Main_B1.c: 476: char status2 = 0;
 11634  1D26  01A2               	clrf	getMain_Lights_Count@status2
 11635                           
 11636                           ;Main_B1.c: 477: status2 = DimmerLights2.StatusFlag == 1 ? 1 : 0;
 11637  1D27  3000               	movlw	0
 11638  1D28  0023               	movlb	3	; select bank3
 11639  1D29  1950               	btfsc	(_DimmerLights2^(0+384)+1),2
 11640  1D2A  3001               	movlw	1
 11641  1D2B  0020               	movlb	0	; select bank0
 11642  1D2C  00A2               	movwf	getMain_Lights_Count@status2
 11643                           
 11644                           ;Main_B1.c: 501: return count = (status1 + status2);
 11645  1D2D  0821               	movf	getMain_Lights_Count@status1,w
 11646  1D2E  0722               	addwf	getMain_Lights_Count@status2,w
 11647  1D2F  00A0               	movwf	getMain_Lights_Count@count
 11648  1D30  0008               	return
 11649  1D31                     __end_of_getMain_Lights_Count:	
 11650                           
 11651                           	psect	text69
 11652  1B13                     __ptext69:	
 11653 ;; *************** function _getDimmer_Load_Status *****************
 11654 ;; Defined at:
 11655 ;;		line 916 in file "../src/Dimmer_B1.c"
 11656 ;; Parameters:    Size  Location     Type
 11657 ;;		None
 11658 ;; Auto vars:     Size  Location     Type
 11659 ;;  status          1    0[BANK0 ] unsigned char 
 11660 ;; Return value:  Size  Location     Type
 11661 ;;                  1    wreg      unsigned char 
 11662 ;; Registers used:
 11663 ;;		wreg, status,2
 11664 ;; Tracked objects:
 11665 ;;		On entry : 0/0
 11666 ;;		On exit  : 0/0
 11667 ;;		Unchanged: 0/0
 11668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11672 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11673 ;;Total ram usage:        1 bytes
 11674 ;; Hardware stack levels used:    1
 11675 ;; Hardware stack levels required when called:    4
 11676 ;; This function calls:
 11677 ;;		Nothing
 11678 ;; This function is called by:
 11679 ;;		_Load_Main
 11680 ;; This function uses a non-reentrant model
 11681 ;;
 11682                           
 11683                           
 11684                           ;psect for function _getDimmer_Load_Status
 11685  1B13                     _getDimmer_Load_Status:	
 11686                           
 11687                           ;Dimmer_B1.c: 917: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11688                           
 11689                           ;incstack = 0
 11690                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11691  1B13  3000               	movlw	0
 11692  1B14  0021               	movlb	1	; select bank1
 11693  1B15  19C8               	btfsc	_Dimmer^(0+128),3	;volatile
 11694  1B16  3001               	movlw	1
 11695  1B17  0020               	movlb	0	; select bank0
 11696  1B18  00A0               	movwf	getDimmer_Load_Status@status
 11697                           
 11698                           ;Dimmer_B1.c: 918: return status;
 11699  1B19  0820               	movf	getDimmer_Load_Status@status,w
 11700  1B1A  0008               	return
 11701  1B1B                     __end_of_getDimmer_Load_Status:	
 11702                           
 11703                           	psect	text70
 11704  1B0B                     __ptext70:	
 11705 ;; *************** function _getDimmer_LoadGO *****************
 11706 ;; Defined at:
 11707 ;;		line 651 in file "../src/Dimmer_B1.c"
 11708 ;; Parameters:    Size  Location     Type
 11709 ;;		None
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11712 ;; Return value:  Size  Location     Type
 11713 ;;                  1    wreg      unsigned char 
 11714 ;; Registers used:
 11715 ;;		wreg, status,2
 11716 ;; Tracked objects:
 11717 ;;		On entry : 0/0
 11718 ;;		On exit  : 0/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;Total ram usage:        1 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    4
 11728 ;; This function calls:
 11729 ;;		Nothing
 11730 ;; This function is called by:
 11731 ;;		_Load_Main
 11732 ;; This function uses a non-reentrant model
 11733 ;;
 11734                           
 11735                           
 11736                           ;psect for function _getDimmer_LoadGO
 11737  1B0B                     _getDimmer_LoadGO:	
 11738                           
 11739                           ;Dimmer_B1.c: 652: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11740                           
 11741                           ;incstack = 0
 11742                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11743  1B0B  3000               	movlw	0
 11744  1B0C  0021               	movlb	1	; select bank1
 11745  1B0D  1948               	btfsc	_Dimmer^(0+128),2	;volatile
 11746  1B0E  3001               	movlw	1
 11747  1B0F  0020               	movlb	0	; select bank0
 11748  1B10  00A0               	movwf	getDimmer_LoadGO@loadgo
 11749                           
 11750                           ;Dimmer_B1.c: 653: return loadgo;
 11751  1B11  0820               	movf	getDimmer_LoadGO@loadgo,w
 11752  1B12  0008               	return
 11753  1B13                     __end_of_getDimmer_LoadGO:	
 11754                           
 11755                           	psect	text71
 11756  07D3                     __ptext71:	
 11757 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 11758 ;; Defined at:
 11759 ;;		line 860 in file "../src/Dimmer_B1.c"
 11760 ;; Parameters:    Size  Location     Type
 11761 ;;		None
 11762 ;; Auto vars:     Size  Location     Type
 11763 ;;  i               2    4[BANK0 ] int 
 11764 ;;  adjsw           1    6[BANK0 ] unsigned char 
 11765 ;;  count           1    3[BANK0 ] unsigned char 
 11766 ;; Return value:  Size  Location     Type
 11767 ;;                  1    wreg      unsigned char 
 11768 ;; Registers used:
 11769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11770 ;; Tracked objects:
 11771 ;;		On entry : 0/0
 11772 ;;		On exit  : 0/0
 11773 ;;		Unchanged: 0/0
 11774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;Total ram usage:        5 bytes
 11780 ;; Hardware stack levels used:    1
 11781 ;; Hardware stack levels required when called:    5
 11782 ;; This function calls:
 11783 ;;		_DimmerLightsPointSelect
 11784 ;; This function is called by:
 11785 ;;		_Load_Main
 11786 ;; This function uses a non-reentrant model
 11787 ;;
 11788                           
 11789                           
 11790                           ;psect for function _getAll_DimmerLights_AdjSw
 11791  07D3                     _getAll_DimmerLights_AdjSw:	
 11792                           
 11793                           ;Dimmer_B1.c: 861: char count = 2;
 11794                           
 11795                           ;incstack = 0
 11796                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 11797  07D3  3002               	movlw	2
 11798  07D4  0020               	movlb	0	; select bank0
 11799  07D5  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 11800  07D6  0822               	movf	??_getAll_DimmerLights_AdjSw,w
 11801  07D7  00A3               	movwf	getAll_DimmerLights_AdjSw@count
 11802                           
 11803                           ;Dimmer_B1.c: 862: char adjsw = 0;
 11804  07D8  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 11805                           
 11806                           ;Dimmer_B1.c: 864: for (int i = 0; i < count; i++) {
 11807  07D9  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 11808  07DA  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 11809  07DB                     l10017:	
 11810  07DB  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 11811  07DC  3A80               	xorlw	128
 11812  07DD  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 11813  07DE  3080               	movlw	128
 11814  07DF  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 11815  07E0  1D03               	skipz
 11816  07E1  2FE4               	goto	u11195
 11817  07E2  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 11818  07E3  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 11819  07E4                     u11195:	
 11820  07E4  1803               	btfsc	3,0
 11821  07E5  2FFD               	goto	l10019
 11822                           
 11823                           ;Dimmer_B1.c: 865: DimmerLightsPointSelect(i + 1);
 11824  07E6  0020               	movlb	0	; select bank0
 11825  07E7  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 11826  07E8  3E01               	addlw	1
 11827  07E9  319C  2482  3187   	fcall	_DimmerLightsPointSelect
 11828                           
 11829                           ;Dimmer_B1.c: 866: if (adjsw == 0) {
 11830  07EC  0020               	movlb	0	; select bank0
 11831  07ED  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 11832  07EE  1D03               	skipz
 11833  07EF  2FF8               	goto	l10015
 11834                           
 11835                           ;Dimmer_B1.c: 867: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 11836  07F0  0A6F               	incf	_DimmerLights,w
 11837  07F1  0086               	movwf	6
 11838  07F2  3001               	movlw	1	; select bank2/3
 11839  07F3  0087               	movwf	7
 11840  07F4  3000               	movlw	0
 11841  07F5  1B01               	btfsc	1,6
 11842  07F6  3001               	movlw	1
 11843  07F7  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 11844  07F8                     l10015:	
 11845  07F8  3001               	movlw	1
 11846  07F9  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 11847  07FA  3000               	movlw	0
 11848  07FB  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 11849  07FC  2FDB               	goto	l10017
 11850  07FD                     l10019:	
 11851                           
 11852                           ;Dimmer_B1.c: 868: }
 11853                           ;Dimmer_B1.c: 869: }
 11854                           ;Dimmer_B1.c: 870: return adjsw;
 11855  07FD  0020               	movlb	0	; select bank0
 11856  07FE  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 11857  07FF  0008               	return
 11858  0800                     __end_of_getAll_DimmerLights_AdjSw:	
 11859                           
 11860                           	psect	text72
 11861  1E47                     __ptext72:	
 11862 ;; *************** function ___wmul *****************
 11863 ;; Defined at:
 11864 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11865 ;; Parameters:    Size  Location     Type
 11866 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11867 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11868 ;; Auto vars:     Size  Location     Type
 11869 ;;  product         2    4[BANK0 ] unsigned int 
 11870 ;; Return value:  Size  Location     Type
 11871 ;;                  2    0[BANK0 ] unsigned int 
 11872 ;; Registers used:
 11873 ;;		wreg, status,2, status,0
 11874 ;; Tracked objects:
 11875 ;;		On entry : 0/0
 11876 ;;		On exit  : 0/0
 11877 ;;		Unchanged: 0/0
 11878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11879 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11880 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11882 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;Total ram usage:        6 bytes
 11884 ;; Hardware stack levels used:    1
 11885 ;; Hardware stack levels required when called:    4
 11886 ;; This function calls:
 11887 ;;		Nothing
 11888 ;; This function is called by:
 11889 ;;		_Load_Main
 11890 ;; This function uses a non-reentrant model
 11891 ;;
 11892                           
 11893                           
 11894                           ;psect for function ___wmul
 11895  1E47                     ___wmul:	
 11896                           
 11897                           ;incstack = 0
 11898                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11899  1E47  0020               	movlb	0	; select bank0
 11900  1E48  01A4               	clrf	___wmul@product
 11901  1E49  01A5               	clrf	___wmul@product+1
 11902  1E4A                     l10405:	
 11903  1E4A  1C20               	btfss	___wmul@multiplier,0
 11904  1E4B  2E50               	goto	l2874
 11905  1E4C  0822               	movf	___wmul@multiplicand,w
 11906  1E4D  07A4               	addwf	___wmul@product,f
 11907  1E4E  0823               	movf	___wmul@multiplicand+1,w
 11908  1E4F  3DA5               	addwfc	___wmul@product+1,f
 11909  1E50                     l2874:	
 11910  1E50  3001               	movlw	1
 11911  1E51                     u11775:	
 11912  1E51  35A2               	lslf	___wmul@multiplicand,f
 11913  1E52  0DA3               	rlf	___wmul@multiplicand+1,f
 11914  1E53  0B89               	decfsz	9,f
 11915  1E54  2E51               	goto	u11775
 11916  1E55  3001               	movlw	1
 11917  1E56                     u11785:	
 11918  1E56  36A1               	lsrf	___wmul@multiplier+1,f
 11919  1E57  0CA0               	rrf	___wmul@multiplier,f
 11920  1E58  0B89               	decfsz	9,f
 11921  1E59  2E56               	goto	u11785
 11922  1E5A  0821               	movf	___wmul@multiplier+1,w
 11923  1E5B  0420               	iorwf	___wmul@multiplier,w
 11924  1E5C  1D03               	skipz
 11925  1E5D  2E4A               	goto	l10405
 11926  1E5E  0825               	movf	___wmul@product+1,w
 11927  1E5F  01A1               	clrf	?___wmul+1
 11928  1E60  07A1               	addwf	?___wmul+1,f
 11929  1E61  0824               	movf	___wmul@product,w
 11930  1E62  01A0               	clrf	?___wmul
 11931  1E63  07A0               	addwf	?___wmul,f
 11932  1E64  0008               	return
 11933  1E65                     __end_of___wmul:	
 11934                           
 11935                           	psect	text73
 11936  1230                     __ptext73:	
 11937 ;; *************** function ___lwdiv *****************
 11938 ;; Defined at:
 11939 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11940 ;; Parameters:    Size  Location     Type
 11941 ;;  divisor         2    0[BANK0 ] unsigned int 
 11942 ;;  dividend        2    2[BANK0 ] unsigned int 
 11943 ;; Auto vars:     Size  Location     Type
 11944 ;;  quotient        2    6[BANK0 ] unsigned int 
 11945 ;;  counter         1    5[BANK0 ] unsigned char 
 11946 ;; Return value:  Size  Location     Type
 11947 ;;                  2    0[BANK0 ] unsigned int 
 11948 ;; Registers used:
 11949 ;;		wreg, status,2, status,0
 11950 ;; Tracked objects:
 11951 ;;		On entry : 0/0
 11952 ;;		On exit  : 0/0
 11953 ;;		Unchanged: 0/0
 11954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11955 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;Total ram usage:        8 bytes
 11960 ;; Hardware stack levels used:    1
 11961 ;; Hardware stack levels required when called:    4
 11962 ;; This function calls:
 11963 ;;		Nothing
 11964 ;; This function is called by:
 11965 ;;		_Load_Main
 11966 ;; This function uses a non-reentrant model
 11967 ;;
 11968                           
 11969                           
 11970                           ;psect for function ___lwdiv
 11971  1230                     ___lwdiv:	
 11972                           
 11973                           ;incstack = 0
 11974                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11975  1230  0020               	movlb	0	; select bank0
 11976  1231  01A6               	clrf	___lwdiv@quotient
 11977  1232  01A7               	clrf	___lwdiv@quotient+1
 11978  1233  0821               	movf	___lwdiv@divisor+1,w
 11979  1234  0420               	iorwf	___lwdiv@divisor,w
 11980  1235  1903               	skipnz
 11981  1236  2A60               	goto	l10437
 11982  1237  01A5               	clrf	___lwdiv@counter
 11983  1238  0AA5               	incf	___lwdiv@counter,f
 11984  1239                     l10425:	
 11985  1239  1BA1               	btfsc	___lwdiv@divisor+1,7
 11986  123A  2A45               	goto	l10427
 11987  123B  3001               	movlw	1
 11988  123C                     u11815:	
 11989  123C  35A0               	lslf	___lwdiv@divisor,f
 11990  123D  0DA1               	rlf	___lwdiv@divisor+1,f
 11991  123E  0B89               	decfsz	9,f
 11992  123F  2A3C               	goto	u11815
 11993  1240  3001               	movlw	1
 11994  1241  00A4               	movwf	??___lwdiv
 11995  1242  0824               	movf	??___lwdiv,w
 11996  1243  07A5               	addwf	___lwdiv@counter,f
 11997  1244  2A39               	goto	l10425
 11998  1245                     l10427:	
 11999  1245  3001               	movlw	1
 12000  1246                     u11835:	
 12001  1246  35A6               	lslf	___lwdiv@quotient,f
 12002  1247  0DA7               	rlf	___lwdiv@quotient+1,f
 12003  1248  0B89               	decfsz	9,f
 12004  1249  2A46               	goto	u11835
 12005  124A  0821               	movf	___lwdiv@divisor+1,w
 12006  124B  0223               	subwf	___lwdiv@dividend+1,w
 12007  124C  1D03               	skipz
 12008  124D  2A50               	goto	u11845
 12009  124E  0820               	movf	___lwdiv@divisor,w
 12010  124F  0222               	subwf	___lwdiv@dividend,w
 12011  1250                     u11845:	
 12012  1250  1C03               	skipc
 12013  1251  2A57               	goto	l10433
 12014  1252  0820               	movf	___lwdiv@divisor,w
 12015  1253  02A2               	subwf	___lwdiv@dividend,f
 12016  1254  0821               	movf	___lwdiv@divisor+1,w
 12017  1255  3BA3               	subwfb	___lwdiv@dividend+1,f
 12018  1256  1426               	bsf	___lwdiv@quotient,0
 12019  1257                     l10433:	
 12020  1257  3001               	movlw	1
 12021  1258                     u11855:	
 12022  1258  36A1               	lsrf	___lwdiv@divisor+1,f
 12023  1259  0CA0               	rrf	___lwdiv@divisor,f
 12024  125A  0B89               	decfsz	9,f
 12025  125B  2A58               	goto	u11855
 12026  125C  3001               	movlw	1
 12027  125D  02A5               	subwf	___lwdiv@counter,f
 12028  125E  1D03               	btfss	3,2
 12029  125F  2A45               	goto	l10427
 12030  1260                     l10437:	
 12031  1260  0827               	movf	___lwdiv@quotient+1,w
 12032  1261  01A1               	clrf	?___lwdiv+1
 12033  1262  07A1               	addwf	?___lwdiv+1,f
 12034  1263  0826               	movf	___lwdiv@quotient,w
 12035  1264  01A0               	clrf	?___lwdiv
 12036  1265  07A0               	addwf	?___lwdiv,f
 12037  1266  0008               	return
 12038  1267                     __end_of___lwdiv:	
 12039                           
 12040                           	psect	text74
 12041  1AB2                     __ptext74:	
 12042 ;; *************** function _Load_Initialization *****************
 12043 ;; Defined at:
 12044 ;;		line 9 in file "../src/OverLoad_B1.c"
 12045 ;; Parameters:    Size  Location     Type
 12046 ;;		None
 12047 ;; Auto vars:     Size  Location     Type
 12048 ;;		None
 12049 ;; Return value:  Size  Location     Type
 12050 ;;		None               void
 12051 ;; Registers used:
 12052 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12053 ;; Tracked objects:
 12054 ;;		On entry : 0/0
 12055 ;;		On exit  : 0/0
 12056 ;;		Unchanged: 0/0
 12057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12062 ;;Total ram usage:        0 bytes
 12063 ;; Hardware stack levels used:    1
 12064 ;; Hardware stack levels required when called:    5
 12065 ;; This function calls:
 12066 ;;		_setLoad_AH_AL_Restore
 12067 ;; This function is called by:
 12068 ;;		_main
 12069 ;; This function uses a non-reentrant model
 12070 ;;
 12071                           
 12072                           
 12073                           ;psect for function _Load_Initialization
 12074  1AB2                     _Load_Initialization:	
 12075                           
 12076                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12077                           
 12078                           ;incstack = 0
 12079                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12080  1AB2  3190  2066         	fcall	_setLoad_AH_AL_Restore
 12081  1AB4  0008               	return
 12082  1AB5                     __end_of_Load_Initialization:	
 12083                           
 12084                           	psect	text75
 12085  1066                     __ptext75:	
 12086 ;; *************** function _setLoad_AH_AL_Restore *****************
 12087 ;; Defined at:
 12088 ;;		line 285 in file "../src/OverLoad_B1.c"
 12089 ;; Parameters:    Size  Location     Type
 12090 ;;		None
 12091 ;; Auto vars:     Size  Location     Type
 12092 ;;  i               1    1[BANK0 ] unsigned char 
 12093 ;; Return value:  Size  Location     Type
 12094 ;;		None               void
 12095 ;; Registers used:
 12096 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12097 ;; Tracked objects:
 12098 ;;		On entry : 0/0
 12099 ;;		On exit  : 0/0
 12100 ;;		Unchanged: 0/0
 12101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12103 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12104 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12105 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12106 ;;Total ram usage:        2 bytes
 12107 ;; Hardware stack levels used:    1
 12108 ;; Hardware stack levels required when called:    4
 12109 ;; This function calls:
 12110 ;;		Nothing
 12111 ;; This function is called by:
 12112 ;;		_Load_Initialization
 12113 ;;		_Load_Main
 12114 ;; This function uses a non-reentrant model
 12115 ;;
 12116                           
 12117                           
 12118                           ;psect for function _setLoad_AH_AL_Restore
 12119  1066                     _setLoad_AH_AL_Restore:	
 12120                           
 12121                           ;OverLoad_B1.c: 286: char i;
 12122                           ;OverLoad_B1.c: 287: for (i = 0; i < 5; i++) {
 12123                           
 12124                           ;incstack = 0
 12125                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12126  1066  0020               	movlb	0	; select bank0
 12127  1067  01A1               	clrf	setLoad_AH_AL_Restore@i
 12128  1068                     L9:	
 12129  1068  3005               	movlw	5
 12130  1069  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12131  106A  1803               	btfsc	3,0
 12132  106B  0008               	return
 12133                           
 12134                           ;OverLoad_B1.c: 288: Load.AH[i] = 0;
 12135  106C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12136  106D  3E32               	addlw	(_Load+11)& (0+255)
 12137  106E  0086               	movwf	6
 12138  106F  3001               	movlw	1	; select bank2/3
 12139  1070  0087               	movwf	7
 12140  1071  3000               	movlw	0
 12141  1072  3FC0               	movwi [0]fsr1
 12142  1073  3FC1               	movwi [1]fsr1
 12143                           
 12144                           ;OverLoad_B1.c: 289: Load.AL[i] = 0xffff;
 12145  1074  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12146  1075  3E3C               	addlw	(_Load+21)& (0+255)
 12147  1076  0086               	movwf	6
 12148  1077  3001               	movlw	1	; select bank2/3
 12149  1078  0087               	movwf	7
 12150  1079  30FF               	movlw	255
 12151  107A  3FC0               	movwi [0]fsr1
 12152  107B  30FF               	movlw	255
 12153  107C  3FC1               	movwi [1]fsr1
 12154  107D  3001               	movlw	1
 12155  107E  00A0               	movwf	??_setLoad_AH_AL_Restore
 12156  107F  0820               	movf	??_setLoad_AH_AL_Restore,w
 12157  1080  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12158  1081  2868               	goto	L9
 12159  1082                     __end_of_setLoad_AH_AL_Restore:	
 12160                           
 12161                           	psect	text76
 12162  1B6F                     __ptext76:	
 12163 ;; *************** function _LED_Main *****************
 12164 ;; Defined at:
 12165 ;;		line 47 in file "../src/LED_B1.c"
 12166 ;; Parameters:    Size  Location     Type
 12167 ;;		None
 12168 ;; Auto vars:     Size  Location     Type
 12169 ;;		None
 12170 ;; Return value:  Size  Location     Type
 12171 ;;		None               void
 12172 ;; Registers used:
 12173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12174 ;; Tracked objects:
 12175 ;;		On entry : 0/0
 12176 ;;		On exit  : 0/0
 12177 ;;		Unchanged: 0/0
 12178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12183 ;;Total ram usage:        0 bytes
 12184 ;; Hardware stack levels used:    1
 12185 ;; Hardware stack levels required when called:    6
 12186 ;; This function calls:
 12187 ;;		_setLED_Main
 12188 ;; This function is called by:
 12189 ;;		_main
 12190 ;; This function uses a non-reentrant model
 12191 ;;
 12192                           
 12193                           
 12194                           ;psect for function _LED_Main
 12195  1B6F                     _LED_Main:	
 12196                           
 12197                           ;LED_B1.c: 53: setLED_Main(1);
 12198                           
 12199                           ;incstack = 0
 12200                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12201  1B6F  3001               	movlw	1
 12202  1B70  3193  2394  319B   	fcall	_setLED_Main
 12203                           
 12204                           ;LED_B1.c: 56: setLED_Main(2);
 12205  1B73  3002               	movlw	2
 12206  1B74  3193  2394  319B   	fcall	_setLED_Main
 12207                           
 12208                           ;LED_B1.c: 62: setLED_Main(99);
 12209  1B77  3063               	movlw	99
 12210  1B78  3193  2394         	fcall	_setLED_Main
 12211  1B7A  0008               	return
 12212  1B7B                     __end_of_LED_Main:	
 12213                           
 12214                           	psect	text77
 12215  1394                     __ptext77:	
 12216 ;; *************** function _setLED_Main *****************
 12217 ;; Defined at:
 12218 ;;		line 221 in file "../src/LED_B1.c"
 12219 ;; Parameters:    Size  Location     Type
 12220 ;;  led             1    wreg     unsigned char 
 12221 ;; Auto vars:     Size  Location     Type
 12222 ;;  led             1    4[BANK0 ] unsigned char 
 12223 ;; Return value:  Size  Location     Type
 12224 ;;		None               void
 12225 ;; Registers used:
 12226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12227 ;; Tracked objects:
 12228 ;;		On entry : 0/0
 12229 ;;		On exit  : 0/0
 12230 ;;		Unchanged: 0/0
 12231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12235 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12236 ;;Total ram usage:        3 bytes
 12237 ;; Hardware stack levels used:    1
 12238 ;; Hardware stack levels required when called:    5
 12239 ;; This function calls:
 12240 ;;		_LedPointSelect
 12241 ;; This function is called by:
 12242 ;;		_LED_Main
 12243 ;; This function uses a non-reentrant model
 12244 ;;
 12245                           
 12246                           
 12247                           ;psect for function _setLED_Main
 12248  1394                     _setLED_Main:	
 12249                           
 12250                           ;incstack = 0
 12251                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12252                           ;setLED_Main@led stored from wreg
 12253  1394  0020               	movlb	0	; select bank0
 12254  1395  00A4               	movwf	setLED_Main@led
 12255                           
 12256                           ;LED_B1.c: 222: LedPointSelect(led);
 12257  1396  0824               	movf	setLED_Main@led,w
 12258  1397  319E  26A3  3193   	fcall	_LedPointSelect
 12259                           
 12260                           ;LED_B1.c: 223: if (LED->GO == 1) {
 12261  139A  0021               	movlb	1	; select bank1
 12262  139B  084F               	movf	_LED^(0+128),w
 12263  139C  0086               	movwf	6
 12264  139D  3001               	movlw	1	; select bank2/3
 12265  139E  0087               	movwf	7
 12266  139F  1C81               	btfss	1,1
 12267  13A0  0008               	return
 12268                           
 12269                           ;LED_B1.c: 224: LED->Time++;
 12270  13A1  0A4F               	incf	_LED^(0+128),w
 12271  13A2  0086               	movwf	6
 12272  13A3  3001               	movlw	1	; select bank2/3
 12273  13A4  0087               	movwf	7
 12274  13A5  3001               	movlw	1
 12275  13A6  0781               	addwf	1,f
 12276  13A7  3141               	addfsr 1,1
 12277  13A8  1803               	skipnc
 12278  13A9  0A81               	incf	1,f
 12279                           
 12280                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 12281  13AA  0A4F               	incf	_LED^(0+128),w
 12282  13AB  0086               	movwf	6
 12283  13AC  3001               	movlw	1	; select bank2/3
 12284  13AD  0087               	movwf	7
 12285  13AE  3F40               	moviw [0]fsr1
 12286  13AF  0020               	movlb	0	; select bank0
 12287  13B0  00A2               	movwf	??_setLED_Main
 12288  13B1  3F41               	moviw [1]fsr1
 12289  13B2  00A3               	movwf	??_setLED_Main+1
 12290  13B3  3000               	movlw	0
 12291  13B4  0223               	subwf	??_setLED_Main+1,w
 12292  13B5  3032               	movlw	50
 12293  13B6  1903               	skipnz
 12294  13B7  0222               	subwf	??_setLED_Main,w
 12295  13B8  1C03               	skipc
 12296  13B9  0008               	return
 12297                           
 12298                           ;LED_B1.c: 226: LED->Time = 0;
 12299  13BA  0021               	movlb	1	; select bank1
 12300  13BB  0A4F               	incf	_LED^(0+128),w
 12301  13BC  0086               	movwf	6
 12302  13BD  3001               	movlw	1	; select bank2/3
 12303  13BE  0087               	movwf	7
 12304  13BF  3000               	movlw	0
 12305  13C0  3FC0               	movwi [0]fsr1
 12306  13C1  3FC1               	movwi [1]fsr1
 12307                           
 12308                           ;LED_B1.c: 228: if (led == 1) {
 12309  13C2  0020               	movlb	0	; select bank0
 12310  13C3  0824               	movf	setLED_Main@led,w
 12311  13C4  3A01               	xorlw	1
 12312                           
 12313                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 12314  13C5  3008               	movlw	8
 12315  13C6  1903               	btfsc	3,2
 12316  13C7  068C               	xorwf	12,f
 12317                           
 12318                           ;LED_B1.c: 230: }
 12319                           ;LED_B1.c: 233: if (led == 2) {
 12320  13C8  0824               	movf	setLED_Main@led,w
 12321  13C9  3A02               	xorlw	2
 12322  13CA  1D03               	skipz
 12323  13CB  2BCE               	goto	l1068
 12324                           
 12325                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 12326  13CC  3080               	movlw	128
 12327  13CD  068E               	xorwf	14,f
 12328  13CE                     l1068:	
 12329                           
 12330                           ;LED_B1.c: 235: }
 12331                           ;LED_B1.c: 243: if (led == 99) {
 12332  13CE  0824               	movf	setLED_Main@led,w
 12333  13CF  3A63               	xorlw	99
 12334  13D0  1D03               	skipz
 12335  13D1  0008               	return
 12336                           
 12337                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 12338  13D2  3020               	movlw	32
 12339  13D3  068D               	xorwf	13,f
 12340  13D4  0008               	return
 12341  13D5                     __end_of_setLED_Main:	
 12342                           
 12343                           	psect	text78
 12344  1B63                     __ptext78:	
 12345 ;; *************** function _LED_Initialization *****************
 12346 ;; Defined at:
 12347 ;;		line 31 in file "../src/LED_B1.c"
 12348 ;; Parameters:    Size  Location     Type
 12349 ;;		None
 12350 ;; Auto vars:     Size  Location     Type
 12351 ;;		None
 12352 ;; Return value:  Size  Location     Type
 12353 ;;		None               void
 12354 ;; Registers used:
 12355 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12356 ;; Tracked objects:
 12357 ;;		On entry : 0/0
 12358 ;;		On exit  : 0/0
 12359 ;;		Unchanged: 0/0
 12360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12365 ;;Total ram usage:        0 bytes
 12366 ;; Hardware stack levels used:    1
 12367 ;; Hardware stack levels required when called:    7
 12368 ;; This function calls:
 12369 ;;		_setLED_Initialization
 12370 ;; This function is called by:
 12371 ;;		_main
 12372 ;; This function uses a non-reentrant model
 12373 ;;
 12374                           
 12375                           
 12376                           ;psect for function _LED_Initialization
 12377  1B63                     _LED_Initialization:	
 12378                           
 12379                           ;LED_B1.c: 33: setLED_Initialization(1);
 12380                           
 12381                           ;incstack = 0
 12382                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12383  1B63  3001               	movlw	1
 12384  1B64  319C  2439  319B   	fcall	_setLED_Initialization
 12385                           
 12386                           ;LED_B1.c: 36: setLED_Initialization(2);
 12387  1B67  3002               	movlw	2
 12388  1B68  319C  2439  319B   	fcall	_setLED_Initialization
 12389                           
 12390                           ;LED_B1.c: 42: setLED_Initialization(99);
 12391  1B6B  3063               	movlw	99
 12392  1B6C  319C  2439         	fcall	_setLED_Initialization
 12393  1B6E  0008               	return
 12394  1B6F                     __end_of_LED_Initialization:	
 12395                           
 12396                           	psect	text79
 12397  1C39                     __ptext79:	
 12398 ;; *************** function _setLED_Initialization *****************
 12399 ;; Defined at:
 12400 ;;		line 69 in file "../src/LED_B1.c"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;  led             1    wreg     unsigned char 
 12403 ;; Auto vars:     Size  Location     Type
 12404 ;;  led             1    4[BANK0 ] unsigned char 
 12405 ;; Return value:  Size  Location     Type
 12406 ;;		None               void
 12407 ;; Registers used:
 12408 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12409 ;; Tracked objects:
 12410 ;;		On entry : 0/0
 12411 ;;		On exit  : 0/0
 12412 ;;		Unchanged: 0/0
 12413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12417 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12418 ;;Total ram usage:        1 bytes
 12419 ;; Hardware stack levels used:    1
 12420 ;; Hardware stack levels required when called:    6
 12421 ;; This function calls:
 12422 ;;		_LedPointSelect
 12423 ;;		_setLED
 12424 ;; This function is called by:
 12425 ;;		_LED_Initialization
 12426 ;; This function uses a non-reentrant model
 12427 ;;
 12428                           
 12429                           
 12430                           ;psect for function _setLED_Initialization
 12431  1C39                     _setLED_Initialization:	
 12432                           
 12433                           ;incstack = 0
 12434                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12435                           ;setLED_Initialization@led stored from wreg
 12436  1C39  0020               	movlb	0	; select bank0
 12437  1C3A  00A4               	movwf	setLED_Initialization@led
 12438                           
 12439                           ;LED_B1.c: 70: LedPointSelect(led);
 12440  1C3B  0824               	movf	setLED_Initialization@led,w
 12441  1C3C  319E  26A3  319C   	fcall	_LedPointSelect
 12442                           
 12443                           ;LED_B1.c: 71: LED->Enable = 1;
 12444  1C3F  0021               	movlb	1	; select bank1
 12445  1C40  084F               	movf	_LED^(0+128),w
 12446  1C41  0086               	movwf	6
 12447  1C42  3001               	movlw	1	; select bank2/3
 12448  1C43  0087               	movwf	7
 12449  1C44  1401               	bsf	1,0
 12450                           
 12451                           ;LED_B1.c: 72: setLED(led, 0);
 12452  1C45  0020               	movlb	0	; select bank0
 12453  1C46  01A2               	clrf	setLED@command
 12454  1C47  0824               	movf	setLED_Initialization@led,w
 12455  1C48  3195  25F4         	fcall	_setLED
 12456  1C4A  0008               	return
 12457  1C4B                     __end_of_setLED_Initialization:	
 12458                           
 12459                           	psect	text80
 12460  11FA                     __ptext80:	
 12461 ;; *************** function _Flash_Memory_Main *****************
 12462 ;; Defined at:
 12463 ;;		line 959 in file "../src/MCU_B1.c"
 12464 ;; Parameters:    Size  Location     Type
 12465 ;;		None
 12466 ;; Auto vars:     Size  Location     Type
 12467 ;;		None
 12468 ;; Return value:  Size  Location     Type
 12469 ;;		None               void
 12470 ;; Registers used:
 12471 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12472 ;; Tracked objects:
 12473 ;;		On entry : 0/0
 12474 ;;		On exit  : 0/0
 12475 ;;		Unchanged: 0/0
 12476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12480 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12481 ;;Total ram usage:        1 bytes
 12482 ;; Hardware stack levels used:    1
 12483 ;; Hardware stack levels required when called:    7
 12484 ;; This function calls:
 12485 ;;		_Flash_Memory_Modify
 12486 ;;		_getMain_LightsStatus
 12487 ;; This function is called by:
 12488 ;;		_main
 12489 ;; This function uses a non-reentrant model
 12490 ;;
 12491                           
 12492                           
 12493                           ;psect for function _Flash_Memory_Main
 12494  11FA                     _Flash_Memory_Main:	
 12495                           
 12496                           ;MCU_B1.c: 960: if (Memory.Modify == 1) {
 12497                           
 12498                           ;incstack = 0
 12499                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12500  11FA  0024               	movlb	4	; select bank4
 12501  11FB  1C44               	btfss	(_Memory^(0+512)+36),0
 12502  11FC  0008               	return
 12503                           
 12504                           ;MCU_B1.c: 961: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 12505  11FD  319C  2495  3191   	fcall	_getMain_LightsStatus
 12506  1200  3A00               	xorlw	0
 12507  1201  3000               	movlw	0
 12508  1202  1903               	skipnz
 12509  1203  3001               	movlw	1
 12510  1204  0020               	movlb	0	; select bank0
 12511  1205  00A6               	movwf	??_Flash_Memory_Main
 12512  1206  0DA6               	rlf	??_Flash_Memory_Main,f
 12513  1207  0024               	movlb	4	; select bank4
 12514  1208  0844               	movf	(_Memory^(0+512)+36),w
 12515  1209  0020               	movlb	0	; select bank0
 12516  120A  0626               	xorwf	??_Flash_Memory_Main,w
 12517  120B  39FD               	andlw	-3
 12518  120C  0626               	xorwf	??_Flash_Memory_Main,w
 12519  120D  0024               	movlb	4	; select bank4
 12520  120E  00C4               	movwf	(_Memory^(0+512)+36)
 12521                           
 12522                           ;MCU_B1.c: 962: if (Memory.GO == 1) {
 12523  120F  1CC4               	btfss	(_Memory^(0+512)+36),1
 12524  1210  2A2A               	goto	l1335
 12525                           
 12526                           ;MCU_B1.c: 963: Memory.Runtime = 1;
 12527  1211  15C4               	bsf	(_Memory^(0+512)+36),3
 12528                           
 12529                           ;MCU_B1.c: 964: Memory.Time++;
 12530  1212  3001               	movlw	1
 12531  1213  07C2               	addwf	(_Memory^(0+512)+34),f
 12532  1214  3000               	movlw	0
 12533  1215  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12534                           
 12535                           ;MCU_B1.c: 965: if (Memory.Time == 25) {
 12536  1216  3022               	movlw	34
 12537  1217  3E20               	addlw	_Memory& (0+255)
 12538  1218  0086               	movwf	6
 12539  1219  3002               	movlw	2	; select bank4/5
 12540  121A  0087               	movwf	7
 12541  121B  3F40               	moviw [0]fsr1
 12542  121C  3A19               	xorlw	25
 12543  121D  1D03               	skipz
 12544  121E  2A21               	goto	u12045
 12545  121F  3F41               	moviw [1]fsr1
 12546  1220  3A00               	xorlw	0
 12547  1221                     u12045:	
 12548  1221  1D03               	skipz
 12549  1222  0008               	return
 12550                           
 12551                           ;MCU_B1.c: 966: Memory.Time = 0;
 12552  1223  01C2               	clrf	(_Memory^(0+512)+34)
 12553  1224  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12554                           
 12555                           ;MCU_B1.c: 967: Memory.Modify = 0;
 12556  1225  1044               	bcf	(_Memory^(0+512)+36),0
 12557                           
 12558                           ;MCU_B1.c: 968: Memory.GO = 0;
 12559  1226  10C4               	bcf	(_Memory^(0+512)+36),1
 12560                           
 12561                           ;MCU_B1.c: 969: Flash_Memory_Modify();
 12562  1227  3194  2463         	fcall	_Flash_Memory_Modify
 12563                           
 12564                           ;MCU_B1.c: 970: }
 12565                           ;MCU_B1.c: 971: } else {
 12566  1229  0008               	return
 12567  122A                     l1335:	
 12568                           
 12569                           ;MCU_B1.c: 972: if (Memory.Runtime == 1) {
 12570  122A  1DC4               	btfss	(_Memory^(0+512)+36),3
 12571  122B  0008               	return
 12572                           
 12573                           ;MCU_B1.c: 973: Memory.Runtime = 0;
 12574  122C  11C4               	bcf	(_Memory^(0+512)+36),3
 12575                           
 12576                           ;MCU_B1.c: 974: Memory.Time = 0;
 12577  122D  01C2               	clrf	(_Memory^(0+512)+34)
 12578  122E  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12579  122F  0008               	return
 12580  1230                     __end_of_Flash_Memory_Main:	
 12581                           
 12582                           	psect	text81
 12583  1463                     __ptext81:	
 12584 ;; *************** function _Flash_Memory_Modify *****************
 12585 ;; Defined at:
 12586 ;;		line 1032 in file "../src/MCU_B1.c"
 12587 ;; Parameters:    Size  Location     Type
 12588 ;;		None
 12589 ;; Auto vars:     Size  Location     Type
 12590 ;;  i               1    5[BANK0 ] unsigned char 
 12591 ;; Return value:  Size  Location     Type
 12592 ;;		None               void
 12593 ;; Registers used:
 12594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12595 ;; Tracked objects:
 12596 ;;		On entry : 0/0
 12597 ;;		On exit  : 0/0
 12598 ;;		Unchanged: 0/0
 12599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12602 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12603 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12604 ;;Total ram usage:        2 bytes
 12605 ;; Hardware stack levels used:    1
 12606 ;; Hardware stack levels required when called:    6
 12607 ;; This function calls:
 12608 ;;		_Flash_Memory_Erasing
 12609 ;;		_Flash_Memory_Read
 12610 ;;		_Flash_Memory_Write
 12611 ;;		_setMemory_Data
 12612 ;; This function is called by:
 12613 ;;		_Flash_Memory_Main
 12614 ;; This function uses a non-reentrant model
 12615 ;;
 12616                           
 12617                           
 12618                           ;psect for function _Flash_Memory_Modify
 12619  1463                     _Flash_Memory_Modify:	
 12620                           
 12621                           ;MCU_B1.c: 1033: char i = 0;
 12622                           
 12623                           ;incstack = 0
 12624                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12625  1463  0020               	movlb	0	; select bank0
 12626  1464  01A5               	clrf	Flash_Memory_Modify@i
 12627                           
 12628                           ;MCU_B1.c: 1034: for (i = 0; i < 32; i++) {
 12629  1465  01A5               	clrf	Flash_Memory_Modify@i
 12630  1466  3020               	movlw	32
 12631  1467  0225               	subwf	Flash_Memory_Modify@i,w
 12632  1468  1803               	btfsc	3,0
 12633  1469  2C7F               	goto	l10131
 12634  146A                     l10125:	
 12635                           
 12636                           ;MCU_B1.c: 1035: Memory.Data[i] = Flash_Memory_Read(i);
 12637  146A  0825               	movf	Flash_Memory_Modify@i,w
 12638  146B  319D  25DB  3194   	fcall	_Flash_Memory_Read
 12639  146E  0020               	movlb	0	; select bank0
 12640  146F  00A4               	movwf	??_Flash_Memory_Modify
 12641  1470  0825               	movf	Flash_Memory_Modify@i,w
 12642  1471  3E20               	addlw	_Memory& (0+255)
 12643  1472  0086               	movwf	6
 12644  1473  3002               	movlw	2	; select bank4/5
 12645  1474  0087               	movwf	7
 12646  1475  0824               	movf	??_Flash_Memory_Modify,w
 12647  1476  0081               	movwf	1
 12648  1477  3001               	movlw	1
 12649  1478  00A4               	movwf	??_Flash_Memory_Modify
 12650  1479  0824               	movf	??_Flash_Memory_Modify,w
 12651  147A  07A5               	addwf	Flash_Memory_Modify@i,f
 12652  147B  3020               	movlw	32
 12653  147C  0225               	subwf	Flash_Memory_Modify@i,w
 12654  147D  1C03               	skipc
 12655  147E  2C6A               	goto	l10125
 12656  147F                     l10131:	
 12657                           
 12658                           ;MCU_B1.c: 1036: }
 12659                           ;MCU_B1.c: 1037: setMemory_Data(0, product->Data[12]);
 12660  147F  087A               	movf	_product,w
 12661  1480  0086               	movwf	6
 12662  1481  3002               	movlw	2	; select bank4/5
 12663  1482  0087               	movwf	7
 12664  1483  3002               	movlw	2	; select bank4/5
 12665  1484  3F4C               	moviw [12]fsr1
 12666  1485  00A0               	movwf	setMemory_Data@data
 12667  1486  3000               	movlw	0
 12668  1487  319B  234B  3194   	fcall	_setMemory_Data
 12669                           
 12670                           ;MCU_B1.c: 1038: setMemory_Data(1, product->Data[13]);
 12671  148A  087A               	movf	_product,w
 12672  148B  0086               	movwf	6
 12673  148C  3002               	movlw	2	; select bank4/5
 12674  148D  0087               	movwf	7
 12675  148E  3002               	movlw	2	; select bank4/5
 12676  148F  3F4D               	moviw [13]fsr1
 12677  1490  0020               	movlb	0	; select bank0
 12678  1491  00A0               	movwf	setMemory_Data@data
 12679  1492  3001               	movlw	1
 12680  1493  319B  234B  3194   	fcall	_setMemory_Data
 12681                           
 12682                           ;MCU_B1.c: 1039: setMemory_Data(2, product->Data[14]);
 12683  1496  087A               	movf	_product,w
 12684  1497  0086               	movwf	6
 12685  1498  3002               	movlw	2	; select bank4/5
 12686  1499  0087               	movwf	7
 12687  149A  3002               	movlw	2	; select bank4/5
 12688  149B  3F4E               	moviw [14]fsr1
 12689  149C  0020               	movlb	0	; select bank0
 12690  149D  00A0               	movwf	setMemory_Data@data
 12691  149E  3002               	movlw	2
 12692  149F  319B  234B  3194   	fcall	_setMemory_Data
 12693                           
 12694                           ;MCU_B1.c: 1045: if (Memory.LoopSave == 1) {
 12695  14A2  0024               	movlb	4	; select bank4
 12696  14A3  1D44               	btfss	(_Memory^(0+512)+36),2
 12697  14A4  2CA9               	goto	l1358
 12698                           
 12699                           ;MCU_B1.c: 1046: Memory.LoopSave = 0;
 12700  14A5  1144               	bcf	(_Memory^(0+512)+36),2
 12701                           
 12702                           ;MCU_B1.c: 1047: myMain.FirstOpen = 0;
 12703  14A6  0021               	movlb	1	; select bank1
 12704  14A7  11AE               	bcf	_myMain^(0+128),3
 12705                           
 12706                           ;MCU_B1.c: 1048: myMain.First = 0;
 12707  14A8  12AE               	bcf	_myMain^(0+128),5
 12708  14A9                     l1358:	
 12709                           
 12710                           ;MCU_B1.c: 1050: }
 12711                           ;MCU_B1.c: 1051: GIE = 0;
 12712  14A9  138B               	bcf	11,7	;volatile
 12713                           
 12714                           ;MCU_B1.c: 1052: Flash_Memory_Erasing();
 12715  14AA  319B  2357  3194   	fcall	_Flash_Memory_Erasing
 12716                           
 12717                           ;MCU_B1.c: 1053: Flash_Memory_Write();
 12718  14AD  3191  2104         	fcall	_Flash_Memory_Write
 12719                           
 12720                           ;MCU_B1.c: 1054: GIE = 1;
 12721  14AF  178B               	bsf	11,7	;volatile
 12722  14B0  0008               	return
 12723  14B1                     __end_of_Flash_Memory_Modify:	
 12724                           
 12725                           	psect	text82
 12726  1B57                     __ptext82:	
 12727 ;; *************** function _Flash_Memory_Erasing *****************
 12728 ;; Defined at:
 12729 ;;		line 1021 in file "../src/MCU_B1.c"
 12730 ;; Parameters:    Size  Location     Type
 12731 ;;		None
 12732 ;; Auto vars:     Size  Location     Type
 12733 ;;		None
 12734 ;; Return value:  Size  Location     Type
 12735 ;;		None               void
 12736 ;; Registers used:
 12737 ;;		wreg, status,2, status,0, pclath, cstack
 12738 ;; Tracked objects:
 12739 ;;		On entry : 0/0
 12740 ;;		On exit  : 0/0
 12741 ;;		Unchanged: 0/0
 12742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;Total ram usage:        0 bytes
 12748 ;; Hardware stack levels used:    1
 12749 ;; Hardware stack levels required when called:    5
 12750 ;; This function calls:
 12751 ;;		_Flash_Memory_Unlock
 12752 ;; This function is called by:
 12753 ;;		_Flash_Memory_Modify
 12754 ;; This function uses a non-reentrant model
 12755 ;;
 12756                           
 12757                           
 12758                           ;psect for function _Flash_Memory_Erasing
 12759  1B57                     _Flash_Memory_Erasing:	
 12760                           
 12761                           ;MCU_B1.c: 1022: CFGS = 0;
 12762                           
 12763                           ;incstack = 0
 12764                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12765  1B57  0023               	movlb	3	; select bank3
 12766  1B58  1315               	bcf	21,6	;volatile
 12767                           
 12768                           ;MCU_B1.c: 1023: PMADRH = 0x30;
 12769  1B59  3030               	movlw	48
 12770  1B5A  0092               	movwf	18	;volatile
 12771                           
 12772                           ;MCU_B1.c: 1024: PMADRL = 0x00;
 12773  1B5B  0191               	clrf	17	;volatile
 12774                           
 12775                           ;MCU_B1.c: 1025: FREE = 1;
 12776  1B5C  1615               	bsf	21,4	;volatile
 12777                           
 12778                           ;MCU_B1.c: 1026: WREN = 1;
 12779  1B5D  1515               	bsf	21,2	;volatile
 12780                           
 12781                           ;MCU_B1.c: 1027: Flash_Memory_Unlock();
 12782  1B5E  319B  232C         	fcall	_Flash_Memory_Unlock
 12783                           
 12784                           ;MCU_B1.c: 1028: WREN = 0;
 12785  1B60  0023               	movlb	3	; select bank3
 12786  1B61  1115               	bcf	21,2	;volatile
 12787  1B62  0008               	return
 12788  1B63                     __end_of_Flash_Memory_Erasing:	
 12789                           
 12790                           	psect	text83
 12791  0643                     __ptext83:	
 12792 ;; *************** function _Flash_Memory_Initialization *****************
 12793 ;; Defined at:
 12794 ;;		line 918 in file "../src/MCU_B1.c"
 12795 ;; Parameters:    Size  Location     Type
 12796 ;;		None
 12797 ;; Auto vars:     Size  Location     Type
 12798 ;;  i               1   67[BANK0 ] unsigned char 
 12799 ;; Return value:  Size  Location     Type
 12800 ;;		None               void
 12801 ;; Registers used:
 12802 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12803 ;; Tracked objects:
 12804 ;;		On entry : 0/0
 12805 ;;		On exit  : 0/0
 12806 ;;		Unchanged: 0/0
 12807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12810 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12811 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12812 ;;Total ram usage:        2 bytes
 12813 ;; Hardware stack levels used:    1
 12814 ;; Hardware stack levels required when called:    7
 12815 ;; This function calls:
 12816 ;;		_Flash_Memory_Read
 12817 ;;		_Flash_Memory_Write
 12818 ;;		_setMemory_Data
 12819 ;;		_setPercentValue
 12820 ;; This function is called by:
 12821 ;;		_main
 12822 ;; This function uses a non-reentrant model
 12823 ;;
 12824                           
 12825                           
 12826                           ;psect for function _Flash_Memory_Initialization
 12827  0643                     _Flash_Memory_Initialization:	
 12828                           
 12829                           ;MCU_B1.c: 919: char i = 0;
 12830                           
 12831                           ;incstack = 0
 12832                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12833  0643  0020               	movlb	0	; select bank0
 12834  0644  01E3               	clrf	Flash_Memory_Initialization@i
 12835                           
 12836                           ;MCU_B1.c: 920: if (Flash_Memory_Read(31) == 0xaa) {
 12837  0645  301F               	movlw	31
 12838  0646  319D  25DB  3186   	fcall	_Flash_Memory_Read
 12839  0649  3AAA               	xorlw	170
 12840  064A  1D03               	skipz
 12841  064B  2EB5               	goto	l10519
 12842                           
 12843                           ;MCU_B1.c: 921: product->Data[12] = Flash_Memory_Read(0);
 12844  064C  3000               	movlw	0
 12845  064D  319D  25DB  3186   	fcall	_Flash_Memory_Read
 12846  0650  0020               	movlb	0	; select bank0
 12847  0651  00E2               	movwf	??_Flash_Memory_Initialization
 12848  0652  087A               	movf	_product,w
 12849  0653  3E0C               	addlw	12
 12850  0654  0086               	movwf	6
 12851  0655  3002               	movlw	2	; select bank4/5
 12852  0656  0087               	movwf	7
 12853  0657  0862               	movf	??_Flash_Memory_Initialization,w
 12854  0658  0081               	movwf	1
 12855                           
 12856                           ;MCU_B1.c: 922: product->Data[13] = Flash_Memory_Read(1);
 12857  0659  3001               	movlw	1
 12858  065A  319D  25DB  3186   	fcall	_Flash_Memory_Read
 12859  065D  0020               	movlb	0	; select bank0
 12860  065E  00E2               	movwf	??_Flash_Memory_Initialization
 12861  065F  087A               	movf	_product,w
 12862  0660  3E0D               	addlw	13
 12863  0661  0086               	movwf	6
 12864  0662  3002               	movlw	2	; select bank4/5
 12865  0663  0087               	movwf	7
 12866  0664  0862               	movf	??_Flash_Memory_Initialization,w
 12867  0665  0081               	movwf	1
 12868                           
 12869                           ;MCU_B1.c: 923: product->Data[14] = Flash_Memory_Read(2);
 12870  0666  3002               	movlw	2
 12871  0667  319D  25DB  3186   	fcall	_Flash_Memory_Read
 12872  066A  0020               	movlb	0	; select bank0
 12873  066B  00E2               	movwf	??_Flash_Memory_Initialization
 12874  066C  087A               	movf	_product,w
 12875  066D  3E0E               	addlw	14
 12876  066E  0086               	movwf	6
 12877  066F  3002               	movlw	2	; select bank4/5
 12878  0670  0087               	movwf	7
 12879  0671  0862               	movf	??_Flash_Memory_Initialization,w
 12880  0672  0081               	movwf	1
 12881                           
 12882                           ;MCU_B1.c: 929: i = setPercentValue(((char)(70*0.8)));
 12883  0673  3038               	movlw	56
 12884  0674  3189  2193  3186   	fcall	_setPercentValue
 12885  0677  0020               	movlb	0	; select bank0
 12886  0678  00E2               	movwf	??_Flash_Memory_Initialization
 12887  0679  0862               	movf	??_Flash_Memory_Initialization,w
 12888  067A  00E3               	movwf	Flash_Memory_Initialization@i
 12889                           
 12890                           ;MCU_B1.c: 930: product->Data[21] = i;
 12891  067B  0863               	movf	Flash_Memory_Initialization@i,w
 12892  067C  00E2               	movwf	??_Flash_Memory_Initialization
 12893  067D  087A               	movf	_product,w
 12894  067E  3E15               	addlw	21
 12895  067F  0086               	movwf	6
 12896  0680  3002               	movlw	2	; select bank4/5
 12897  0681  0087               	movwf	7
 12898  0682  0862               	movf	??_Flash_Memory_Initialization,w
 12899  0683  0081               	movwf	1
 12900                           
 12901                           ;MCU_B1.c: 931: product->Data[22] = i;
 12902  0684  0863               	movf	Flash_Memory_Initialization@i,w
 12903  0685  00E2               	movwf	??_Flash_Memory_Initialization
 12904  0686  087A               	movf	_product,w
 12905  0687  3E16               	addlw	22
 12906  0688  0086               	movwf	6
 12907  0689  3002               	movlw	2	; select bank4/5
 12908  068A  0087               	movwf	7
 12909  068B  0862               	movf	??_Flash_Memory_Initialization,w
 12910  068C  0081               	movwf	1
 12911                           
 12912                           ;MCU_B1.c: 932: product->Data[23] = i;
 12913  068D  0863               	movf	Flash_Memory_Initialization@i,w
 12914  068E  00E2               	movwf	??_Flash_Memory_Initialization
 12915  068F  087A               	movf	_product,w
 12916  0690  3E17               	addlw	23
 12917  0691  0086               	movwf	6
 12918  0692  3002               	movlw	2	; select bank4/5
 12919  0693  0087               	movwf	7
 12920  0694  0862               	movf	??_Flash_Memory_Initialization,w
 12921  0695  0081               	movwf	1
 12922                           
 12923                           ;MCU_B1.c: 934: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12924  0696  087A               	movf	_product,w
 12925  0697  3E0C               	addlw	12
 12926  0698  0086               	movwf	6
 12927  0699  3002               	movlw	2	; select bank4/5
 12928  069A  0087               	movwf	7
 12929  069B  0801               	movf	1,w
 12930  069C  3AFF               	xorlw	255
 12931  069D  1D03               	skipz
 12932  069E  0008               	return
 12933  069F  087A               	movf	_product,w
 12934  06A0  3E0D               	addlw	13
 12935  06A1  0086               	movwf	6
 12936  06A2  3002               	movlw	2	; select bank4/5
 12937  06A3  0087               	movwf	7
 12938  06A4  0801               	movf	1,w
 12939  06A5  3AFF               	xorlw	255
 12940  06A6  1D03               	skipz
 12941  06A7  0008               	return
 12942  06A8  087A               	movf	_product,w
 12943  06A9  3E0E               	addlw	14
 12944  06AA  0086               	movwf	6
 12945  06AB  3002               	movlw	2	; select bank4/5
 12946  06AC  0087               	movwf	7
 12947  06AD  0801               	movf	1,w
 12948  06AE  3AFF               	xorlw	255
 12949  06AF  1D03               	skipz
 12950  06B0  0008               	return
 12951                           
 12952                           ;MCU_B1.c: 935: myMain.FirstOpen = 1;
 12953  06B1  0021               	movlb	1	; select bank1
 12954  06B2  15AE               	bsf	_myMain^(0+128),3
 12955                           
 12956                           ;MCU_B1.c: 936: myMain.First = 1;
 12957  06B3  16AE               	bsf	_myMain^(0+128),5
 12958                           
 12959                           ;MCU_B1.c: 937: }
 12960                           ;MCU_B1.c: 938: } else {
 12961  06B4  0008               	return
 12962  06B5                     l10519:	
 12963                           
 12964                           ;MCU_B1.c: 939: i = setPercentValue(((char)(70*0.8)));
 12965  06B5  3038               	movlw	56
 12966  06B6  3189  2193  3186   	fcall	_setPercentValue
 12967  06B9  0020               	movlb	0	; select bank0
 12968  06BA  00E2               	movwf	??_Flash_Memory_Initialization
 12969  06BB  0862               	movf	??_Flash_Memory_Initialization,w
 12970  06BC  00E3               	movwf	Flash_Memory_Initialization@i
 12971                           
 12972                           ;MCU_B1.c: 940: setMemory_Data(0, 0xff);
 12973  06BD  30FF               	movlw	255
 12974  06BE  00E2               	movwf	??_Flash_Memory_Initialization
 12975  06BF  0862               	movf	??_Flash_Memory_Initialization,w
 12976  06C0  00A0               	movwf	setMemory_Data@data
 12977  06C1  3000               	movlw	0
 12978  06C2  319B  234B  3186   	fcall	_setMemory_Data
 12979                           
 12980                           ;MCU_B1.c: 941: setMemory_Data(1, 0xff);
 12981  06C5  30FF               	movlw	255
 12982  06C6  0020               	movlb	0	; select bank0
 12983  06C7  00E2               	movwf	??_Flash_Memory_Initialization
 12984  06C8  0862               	movf	??_Flash_Memory_Initialization,w
 12985  06C9  00A0               	movwf	setMemory_Data@data
 12986  06CA  3001               	movlw	1
 12987  06CB  319B  234B  3186   	fcall	_setMemory_Data
 12988                           
 12989                           ;MCU_B1.c: 942: setMemory_Data(2, 0xff);
 12990  06CE  30FF               	movlw	255
 12991  06CF  0020               	movlb	0	; select bank0
 12992  06D0  00E2               	movwf	??_Flash_Memory_Initialization
 12993  06D1  0862               	movf	??_Flash_Memory_Initialization,w
 12994  06D2  00A0               	movwf	setMemory_Data@data
 12995  06D3  3002               	movlw	2
 12996  06D4  319B  234B  3186   	fcall	_setMemory_Data
 12997                           
 12998                           ;MCU_B1.c: 943: setMemory_Data(3, 0xff);
 12999  06D7  30FF               	movlw	255
 13000  06D8  0020               	movlb	0	; select bank0
 13001  06D9  00E2               	movwf	??_Flash_Memory_Initialization
 13002  06DA  0862               	movf	??_Flash_Memory_Initialization,w
 13003  06DB  00A0               	movwf	setMemory_Data@data
 13004  06DC  3003               	movlw	3
 13005  06DD  319B  234B  3186   	fcall	_setMemory_Data
 13006                           
 13007                           ;MCU_B1.c: 944: setMemory_Data(4, 0xff);
 13008  06E0  30FF               	movlw	255
 13009  06E1  0020               	movlb	0	; select bank0
 13010  06E2  00E2               	movwf	??_Flash_Memory_Initialization
 13011  06E3  0862               	movf	??_Flash_Memory_Initialization,w
 13012  06E4  00A0               	movwf	setMemory_Data@data
 13013  06E5  3004               	movlw	4
 13014  06E6  319B  234B  3186   	fcall	_setMemory_Data
 13015                           
 13016                           ;MCU_B1.c: 945: setMemory_Data(5, 0xff);
 13017  06E9  30FF               	movlw	255
 13018  06EA  0020               	movlb	0	; select bank0
 13019  06EB  00E2               	movwf	??_Flash_Memory_Initialization
 13020  06EC  0862               	movf	??_Flash_Memory_Initialization,w
 13021  06ED  00A0               	movwf	setMemory_Data@data
 13022  06EE  3005               	movlw	5
 13023  06EF  319B  234B  3186   	fcall	_setMemory_Data
 13024                           
 13025                           ;MCU_B1.c: 946: setMemory_Data(31, 0xaa);
 13026  06F2  30AA               	movlw	170
 13027  06F3  0020               	movlb	0	; select bank0
 13028  06F4  00E2               	movwf	??_Flash_Memory_Initialization
 13029  06F5  0862               	movf	??_Flash_Memory_Initialization,w
 13030  06F6  00A0               	movwf	setMemory_Data@data
 13031  06F7  301F               	movlw	31
 13032  06F8  319B  234B  3186   	fcall	_setMemory_Data
 13033                           
 13034                           ;MCU_B1.c: 947: product->Data[21] = i;
 13035  06FB  0020               	movlb	0	; select bank0
 13036  06FC  0863               	movf	Flash_Memory_Initialization@i,w
 13037  06FD  00E2               	movwf	??_Flash_Memory_Initialization
 13038  06FE  087A               	movf	_product,w
 13039  06FF  3E15               	addlw	21
 13040  0700  0086               	movwf	6
 13041  0701  3002               	movlw	2	; select bank4/5
 13042  0702  0087               	movwf	7
 13043  0703  0862               	movf	??_Flash_Memory_Initialization,w
 13044  0704  0081               	movwf	1
 13045                           
 13046                           ;MCU_B1.c: 948: product->Data[22] = i;
 13047  0705  0863               	movf	Flash_Memory_Initialization@i,w
 13048  0706  00E2               	movwf	??_Flash_Memory_Initialization
 13049  0707  087A               	movf	_product,w
 13050  0708  3E16               	addlw	22
 13051  0709  0086               	movwf	6
 13052  070A  3002               	movlw	2	; select bank4/5
 13053  070B  0087               	movwf	7
 13054  070C  0862               	movf	??_Flash_Memory_Initialization,w
 13055  070D  0081               	movwf	1
 13056                           
 13057                           ;MCU_B1.c: 949: product->Data[23] = i;
 13058  070E  0863               	movf	Flash_Memory_Initialization@i,w
 13059  070F  00E2               	movwf	??_Flash_Memory_Initialization
 13060  0710  087A               	movf	_product,w
 13061  0711  3E17               	addlw	23
 13062  0712  0086               	movwf	6
 13063  0713  3002               	movlw	2	; select bank4/5
 13064  0714  0087               	movwf	7
 13065  0715  0862               	movf	??_Flash_Memory_Initialization,w
 13066  0716  0081               	movwf	1
 13067                           
 13068                           ;MCU_B1.c: 950: GIE = 0;
 13069  0717  138B               	bcf	11,7	;volatile
 13070                           
 13071                           ;MCU_B1.c: 951: Flash_Memory_Write();
 13072  0718  3191  2104         	fcall	_Flash_Memory_Write
 13073                           
 13074                           ;MCU_B1.c: 952: GIE = 1;
 13075  071A  178B               	bsf	11,7	;volatile
 13076                           
 13077                           ;MCU_B1.c: 953: myMain.FirstOpen = 1;
 13078  071B  0021               	movlb	1	; select bank1
 13079  071C  15AE               	bsf	_myMain^(0+128),3
 13080                           
 13081                           ;MCU_B1.c: 954: myMain.First = 1;
 13082  071D  16AE               	bsf	_myMain^(0+128),5
 13083  071E  0008               	return
 13084  071F                     __end_of_Flash_Memory_Initialization:	
 13085                           
 13086                           	psect	text84
 13087  1B4B                     __ptext84:	
 13088 ;; *************** function _setMemory_Data *****************
 13089 ;; Defined at:
 13090 ;;		line 1069 in file "../src/MCU_B1.c"
 13091 ;; Parameters:    Size  Location     Type
 13092 ;;  address         1    wreg     unsigned char 
 13093 ;;  data            1    0[BANK0 ] unsigned char 
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;  address         1    2[BANK0 ] unsigned char 
 13096 ;; Return value:  Size  Location     Type
 13097 ;;		None               void
 13098 ;; Registers used:
 13099 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13105 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13109 ;;Total ram usage:        3 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; Hardware stack levels required when called:    4
 13112 ;; This function calls:
 13113 ;;		Nothing
 13114 ;; This function is called by:
 13115 ;;		_Flash_Memory_Initialization
 13116 ;;		_Flash_Memory_Modify
 13117 ;; This function uses a non-reentrant model
 13118 ;;
 13119                           
 13120                           
 13121                           ;psect for function _setMemory_Data
 13122  1B4B                     _setMemory_Data:	
 13123                           
 13124                           ;incstack = 0
 13125                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13126                           ;setMemory_Data@address stored from wreg
 13127  1B4B  0020               	movlb	0	; select bank0
 13128  1B4C  00A2               	movwf	setMemory_Data@address
 13129                           
 13130                           ;MCU_B1.c: 1070: Memory.Data[address] = data;
 13131  1B4D  0820               	movf	setMemory_Data@data,w
 13132  1B4E  00A1               	movwf	??_setMemory_Data
 13133  1B4F  0822               	movf	setMemory_Data@address,w
 13134  1B50  3E20               	addlw	_Memory& (0+255)
 13135  1B51  0086               	movwf	6
 13136  1B52  3002               	movlw	2	; select bank4/5
 13137  1B53  0087               	movwf	7
 13138  1B54  0821               	movf	??_setMemory_Data,w
 13139  1B55  0081               	movwf	1
 13140  1B56  0008               	return
 13141  1B57                     __end_of_setMemory_Data:	
 13142                           
 13143                           	psect	text85
 13144  1104                     __ptext85:	
 13145 ;; *************** function _Flash_Memory_Write *****************
 13146 ;; Defined at:
 13147 ;;		line 1002 in file "../src/MCU_B1.c"
 13148 ;; Parameters:    Size  Location     Type
 13149 ;;		None
 13150 ;; Auto vars:     Size  Location     Type
 13151 ;;  i               1    1[BANK0 ] unsigned char 
 13152 ;; Return value:  Size  Location     Type
 13153 ;;		None               void
 13154 ;; Registers used:
 13155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13156 ;; Tracked objects:
 13157 ;;		On entry : 0/0
 13158 ;;		On exit  : 0/0
 13159 ;;		Unchanged: 0/0
 13160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13164 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13165 ;;Total ram usage:        2 bytes
 13166 ;; Hardware stack levels used:    1
 13167 ;; Hardware stack levels required when called:    5
 13168 ;; This function calls:
 13169 ;;		_Flash_Memory_Unlock
 13170 ;; This function is called by:
 13171 ;;		_Flash_Memory_Initialization
 13172 ;;		_Flash_Memory_Modify
 13173 ;; This function uses a non-reentrant model
 13174 ;;
 13175                           
 13176                           
 13177                           ;psect for function _Flash_Memory_Write
 13178  1104                     _Flash_Memory_Write:	
 13179                           
 13180                           ;MCU_B1.c: 1003: char i = 0;
 13181                           
 13182                           ;incstack = 0
 13183                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13184  1104  0020               	movlb	0	; select bank0
 13185  1105  01A1               	clrf	Flash_Memory_Write@i
 13186                           
 13187                           ;MCU_B1.c: 1004: CFGS = 0;
 13188  1106  0023               	movlb	3	; select bank3
 13189  1107  1315               	bcf	21,6	;volatile
 13190                           
 13191                           ;MCU_B1.c: 1005: PMADRH = 0x30;
 13192  1108  3030               	movlw	48
 13193  1109  0092               	movwf	18	;volatile
 13194                           
 13195                           ;MCU_B1.c: 1006: PMDATH = 0;
 13196  110A  0194               	clrf	20	;volatile
 13197                           
 13198                           ;MCU_B1.c: 1007: FREE = 0;
 13199  110B  1215               	bcf	21,4	;volatile
 13200                           
 13201                           ;MCU_B1.c: 1008: LWLO = 1;
 13202  110C  1695               	bsf	21,5	;volatile
 13203                           
 13204                           ;MCU_B1.c: 1009: WREN = 1;
 13205  110D  1515               	bsf	21,2	;volatile
 13206                           
 13207                           ;MCU_B1.c: 1010: for (i = 0; i < 32; i++) {
 13208  110E  0020               	movlb	0	; select bank0
 13209  110F  01A1               	clrf	Flash_Memory_Write@i
 13210  1110  3020               	movlw	32
 13211  1111  0221               	subwf	Flash_Memory_Write@i,w
 13212  1112  1803               	btfsc	3,0
 13213  1113  292C               	goto	l1349
 13214  1114                     l9783:	
 13215                           
 13216                           ;MCU_B1.c: 1011: PMADRL = i;
 13217  1114  0821               	movf	Flash_Memory_Write@i,w
 13218  1115  0023               	movlb	3	; select bank3
 13219  1116  0091               	movwf	17	;volatile
 13220                           
 13221                           ;MCU_B1.c: 1012: PMDATL = Memory.Data[i];
 13222  1117  0020               	movlb	0	; select bank0
 13223  1118  0821               	movf	Flash_Memory_Write@i,w
 13224  1119  3E20               	addlw	_Memory& (0+255)
 13225  111A  0086               	movwf	6
 13226  111B  3002               	movlw	2	; select bank4/5
 13227  111C  0087               	movwf	7
 13228  111D  0801               	movf	1,w
 13229  111E  0023               	movlb	3	; select bank3
 13230  111F  0093               	movwf	19	;volatile
 13231                           
 13232                           ;MCU_B1.c: 1013: Flash_Memory_Unlock();
 13233  1120  319B  232C  3191   	fcall	_Flash_Memory_Unlock
 13234  1123  3001               	movlw	1
 13235  1124  0020               	movlb	0	; select bank0
 13236  1125  00A0               	movwf	??_Flash_Memory_Write
 13237  1126  0820               	movf	??_Flash_Memory_Write,w
 13238  1127  07A1               	addwf	Flash_Memory_Write@i,f
 13239  1128  3020               	movlw	32
 13240  1129  0221               	subwf	Flash_Memory_Write@i,w
 13241  112A  1C03               	skipc
 13242  112B  2914               	goto	l9783
 13243  112C                     l1349:	
 13244                           
 13245                           ;MCU_B1.c: 1014: }
 13246                           ;MCU_B1.c: 1015: LWLO = 0;
 13247  112C  0023               	movlb	3	; select bank3
 13248  112D  1295               	bcf	21,5	;volatile
 13249                           
 13250                           ;MCU_B1.c: 1016: Flash_Memory_Unlock();
 13251  112E  319B  232C         	fcall	_Flash_Memory_Unlock
 13252                           
 13253                           ;MCU_B1.c: 1017: WREN = 0;
 13254  1130  0023               	movlb	3	; select bank3
 13255  1131  1115               	bcf	21,2	;volatile
 13256  1132  0008               	return
 13257  1133                     __end_of_Flash_Memory_Write:	
 13258                           
 13259                           	psect	text86
 13260  1B2C                     __ptext86:	
 13261 ;; *************** function _Flash_Memory_Unlock *****************
 13262 ;; Defined at:
 13263 ;;		line 981 in file "../src/MCU_B1.c"
 13264 ;; Parameters:    Size  Location     Type
 13265 ;;		None
 13266 ;; Auto vars:     Size  Location     Type
 13267 ;;		None
 13268 ;; Return value:  Size  Location     Type
 13269 ;;		None               void
 13270 ;; Registers used:
 13271 ;;		wreg
 13272 ;; Tracked objects:
 13273 ;;		On entry : 0/0
 13274 ;;		On exit  : 0/0
 13275 ;;		Unchanged: 0/0
 13276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13280 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13281 ;;Total ram usage:        0 bytes
 13282 ;; Hardware stack levels used:    1
 13283 ;; Hardware stack levels required when called:    4
 13284 ;; This function calls:
 13285 ;;		Nothing
 13286 ;; This function is called by:
 13287 ;;		_Flash_Memory_Write
 13288 ;;		_Flash_Memory_Erasing
 13289 ;; This function uses a non-reentrant model
 13290 ;;
 13291                           
 13292                           
 13293                           ;psect for function _Flash_Memory_Unlock
 13294  1B2C                     _Flash_Memory_Unlock:	
 13295                           
 13296                           ;MCU_B1.c: 982: PMCON2 = 0x55;
 13297                           
 13298                           ;incstack = 0
 13299                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13300  1B2C  3055               	movlw	85
 13301  1B2D  0023               	movlb	3	; select bank3
 13302  1B2E  0096               	movwf	22	;volatile
 13303                           
 13304                           ;MCU_B1.c: 983: PMCON2 = 0xaa;
 13305  1B2F  30AA               	movlw	170
 13306  1B30  0096               	movwf	22	;volatile
 13307                           
 13308                           ;MCU_B1.c: 984: WR = 1;
 13309  1B31  1495               	bsf	21,1	;volatile
 13310                           
 13311                           ;MCU_B1.c: 985: __nop();
 13312  1B32  0000               	nop
 13313                           
 13314                           ;MCU_B1.c: 986: __nop();
 13315  1B33  0000               	nop
 13316  1B34  0008               	return
 13317  1B35                     __end_of_Flash_Memory_Unlock:	
 13318                           
 13319                           	psect	text87
 13320  1DDB                     __ptext87:	
 13321 ;; *************** function _Flash_Memory_Read *****************
 13322 ;; Defined at:
 13323 ;;		line 990 in file "../src/MCU_B1.c"
 13324 ;; Parameters:    Size  Location     Type
 13325 ;;  address         1    wreg     unsigned char 
 13326 ;; Auto vars:     Size  Location     Type
 13327 ;;  address         1    2[BANK0 ] unsigned char 
 13328 ;;  ret             1    3[BANK0 ] unsigned char 
 13329 ;;  i               1    1[BANK0 ] unsigned char 
 13330 ;; Return value:  Size  Location     Type
 13331 ;;                  1    wreg      unsigned char 
 13332 ;; Registers used:
 13333 ;;		wreg, status,2
 13334 ;; Tracked objects:
 13335 ;;		On entry : 0/0
 13336 ;;		On exit  : 0/0
 13337 ;;		Unchanged: 0/0
 13338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13340 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13342 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13343 ;;Total ram usage:        4 bytes
 13344 ;; Hardware stack levels used:    1
 13345 ;; Hardware stack levels required when called:    4
 13346 ;; This function calls:
 13347 ;;		Nothing
 13348 ;; This function is called by:
 13349 ;;		_Flash_Memory_Initialization
 13350 ;;		_Flash_Memory_Modify
 13351 ;; This function uses a non-reentrant model
 13352 ;;
 13353                           
 13354                           
 13355                           ;psect for function _Flash_Memory_Read
 13356  1DDB                     _Flash_Memory_Read:	
 13357                           
 13358                           ;incstack = 0
 13359                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13360                           ;Flash_Memory_Read@address stored from wreg
 13361  1DDB  0020               	movlb	0	; select bank0
 13362  1DDC  00A2               	movwf	Flash_Memory_Read@address
 13363                           
 13364                           ;MCU_B1.c: 991: char i = 0, ret = 0;
 13365  1DDD  01A1               	clrf	Flash_Memory_Read@i
 13366  1DDE  01A3               	clrf	Flash_Memory_Read@ret
 13367                           
 13368                           ;MCU_B1.c: 992: PMADRH = 0x30;
 13369  1DDF  3030               	movlw	48
 13370  1DE0  0023               	movlb	3	; select bank3
 13371  1DE1  0092               	movwf	18	;volatile
 13372                           
 13373                           ;MCU_B1.c: 993: PMADRL = address;
 13374  1DE2  0020               	movlb	0	; select bank0
 13375  1DE3  0822               	movf	Flash_Memory_Read@address,w
 13376  1DE4  0023               	movlb	3	; select bank3
 13377  1DE5  0091               	movwf	17	;volatile
 13378                           
 13379                           ;MCU_B1.c: 994: CFGS = 0;
 13380  1DE6  1315               	bcf	21,6	;volatile
 13381                           
 13382                           ;MCU_B1.c: 995: RD = 1;
 13383  1DE7  1415               	bsf	21,0	;volatile
 13384                           
 13385                           ;MCU_B1.c: 996: i = PMDATH;
 13386  1DE8  0814               	movf	20,w	;volatile
 13387  1DE9  0020               	movlb	0	; select bank0
 13388  1DEA  00A0               	movwf	??_Flash_Memory_Read
 13389  1DEB  0820               	movf	??_Flash_Memory_Read,w
 13390  1DEC  00A1               	movwf	Flash_Memory_Read@i
 13391                           
 13392                           ;MCU_B1.c: 997: ret = PMDATL;
 13393  1DED  0023               	movlb	3	; select bank3
 13394  1DEE  0813               	movf	19,w	;volatile
 13395  1DEF  0020               	movlb	0	; select bank0
 13396  1DF0  00A0               	movwf	??_Flash_Memory_Read
 13397  1DF1  0820               	movf	??_Flash_Memory_Read,w
 13398  1DF2  00A3               	movwf	Flash_Memory_Read@ret
 13399                           
 13400                           ;MCU_B1.c: 998: return ret;
 13401  1DF3  0823               	movf	Flash_Memory_Read@ret,w
 13402  1DF4  0008               	return
 13403  1DF5                     __end_of_Flash_Memory_Read:	
 13404                           
 13405                           	psect	text88
 13406  055F                     __ptext88:	
 13407 ;; *************** function _Exception_Main *****************
 13408 ;; Defined at:
 13409 ;;		line 523 in file "../src/Main_B1.c"
 13410 ;; Parameters:    Size  Location     Type
 13411 ;;		None
 13412 ;; Auto vars:     Size  Location     Type
 13413 ;;  i               2    4[BANK3 ] int 
 13414 ;;  i               2    2[BANK3 ] int 
 13415 ;;  lights          1    6[BANK3 ] unsigned char 
 13416 ;;  error           1    1[BANK3 ] unsigned char 
 13417 ;;  count           1    0[BANK3 ] unsigned char 
 13418 ;; Return value:  Size  Location     Type
 13419 ;;		None               void
 13420 ;; Registers used:
 13421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13422 ;; Tracked objects:
 13423 ;;		On entry : 0/0
 13424 ;;		On exit  : 0/0
 13425 ;;		Unchanged: 0/0
 13426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13428 ;;      Locals:         0       0       0       0       7       0       0       0       0       0       0       0       
      +0       0
 13429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13430 ;;      Totals:         0       1       0       0       7       0       0       0       0       0       0       0       
      +0       0
 13431 ;;Total ram usage:        8 bytes
 13432 ;; Hardware stack levels used:    1
 13433 ;; Hardware stack levels required when called:    8
 13434 ;; This function calls:
 13435 ;;		_getDimmerLights_Line
 13436 ;;		_getDimmerLights_Status
 13437 ;;		_getMain_All_Error_Status
 13438 ;;		_getMain_LightsStatus
 13439 ;;		_setBuz
 13440 ;;		_setDimmerLights_SwOff
 13441 ;;		_setLED
 13442 ;; This function is called by:
 13443 ;;		_main
 13444 ;; This function uses a non-reentrant model
 13445 ;;
 13446                           
 13447                           
 13448                           ;psect for function _Exception_Main
 13449  055F                     _Exception_Main:	
 13450                           
 13451                           ;Main_B1.c: 524: char error = getMain_All_Error_Status(0);
 13452                           
 13453                           ;incstack = 0
 13454                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13455  055F  3000               	movlw	0
 13456  0560  3191  2193  3185   	fcall	_getMain_All_Error_Status
 13457  0563  0020               	movlb	0	; select bank0
 13458  0564  00EB               	movwf	??_Exception_Main
 13459  0565  086B               	movf	??_Exception_Main,w
 13460  0566  0023               	movlb	3	; select bank3
 13461  0567  00EA               	movwf	Exception_Main@error^(0+384)
 13462                           
 13463                           ;Main_B1.c: 525: char lights = 0, count = 2;
 13464  0568  01EF               	clrf	Exception_Main@lights^(0+384)
 13465  0569  3002               	movlw	2
 13466  056A  0020               	movlb	0	; select bank0
 13467  056B  00EB               	movwf	??_Exception_Main
 13468  056C  086B               	movf	??_Exception_Main,w
 13469  056D  0023               	movlb	3	; select bank3
 13470  056E  00E9               	movwf	Exception_Main@count^(0+384)
 13471                           
 13472                           ;Main_B1.c: 526: if (myMain.Error_Run == 1) {
 13473  056F  0021               	movlb	1	; select bank1
 13474  0570  1DB9               	btfss	(_myMain^(0+128)+11),3
 13475  0571  2D81               	goto	l10853
 13476                           
 13477                           ;Main_B1.c: 527: if (error == 0) {
 13478  0572  0023               	movlb	3	; select bank3
 13479  0573  08EA               	movf	Exception_Main@error^(0+384),f
 13480  0574  1D03               	skipz
 13481  0575  0008               	return
 13482                           
 13483                           ;Main_B1.c: 528: myMain.Error_Run = 0;
 13484  0576  0021               	movlb	1	; select bank1
 13485  0577  11B9               	bcf	(_myMain^(0+128)+11),3
 13486                           
 13487                           ;Main_B1.c: 533: setLED(99, 10);
 13488  0578  300A               	movlw	10
 13489  0579  0020               	movlb	0	; select bank0
 13490  057A  00EB               	movwf	??_Exception_Main
 13491  057B  086B               	movf	??_Exception_Main,w
 13492  057C  00A2               	movwf	setLED@command
 13493  057D  3063               	movlw	99
 13494  057E  3195  25F4         	fcall	_setLED
 13495                           
 13496                           ;Main_B1.c: 535: }
 13497                           ;Main_B1.c: 536: } else {
 13498  0580  0008               	return
 13499  0581                     l10853:	
 13500                           
 13501                           ;Main_B1.c: 537: if (error != 0) {
 13502  0581  0023               	movlb	3	; select bank3
 13503  0582  086A               	movf	Exception_Main@error^(0+384),w
 13504  0583  1903               	btfsc	3,2
 13505  0584  0008               	return
 13506                           
 13507                           ;Main_B1.c: 538: myMain.Error_Run = 1;
 13508  0585  0021               	movlb	1	; select bank1
 13509  0586  15B9               	bsf	(_myMain^(0+128)+11),3
 13510                           
 13511                           ;Main_B1.c: 541: setLED(99, 11);
 13512  0587  300B               	movlw	11
 13513  0588  0020               	movlb	0	; select bank0
 13514  0589  00EB               	movwf	??_Exception_Main
 13515  058A  086B               	movf	??_Exception_Main,w
 13516  058B  00A2               	movwf	setLED@command
 13517  058C  3063               	movlw	99
 13518  058D  3195  25F4  3185   	fcall	_setLED
 13519                           
 13520                           ;Main_B1.c: 543: switch (error) {
 13521  0590  2E38               	goto	l10901
 13522  0591                     l10859:	
 13523                           ;Main_B1.c: 544: case 2:
 13524                           
 13525                           
 13526                           ;Main_B1.c: 545: if (getMain_LightsStatus() == 1) {
 13527  0591  319C  2495  3185   	fcall	_getMain_LightsStatus
 13528  0594  3A01               	xorlw	1
 13529  0595  1D03               	skipz
 13530  0596  2DA0               	goto	l10863
 13531                           
 13532                           ;Main_B1.c: 546: setBuz(10, 300);
 13533  0597  302C               	movlw	44
 13534  0598  0020               	movlb	0	; select bank0
 13535  0599  00A9               	movwf	setBuz@time
 13536  059A  3001               	movlw	1
 13537  059B  00AA               	movwf	setBuz@time+1
 13538  059C  300A               	movlw	10
 13539  059D  3196  26F3  3185   	fcall	_setBuz
 13540  05A0                     l10863:	
 13541                           
 13542                           ;Main_B1.c: 547: }
 13543                           ;Main_B1.c: 549: for (int i = 0; i < count; i++) {
 13544  05A0  0023               	movlb	3	; select bank3
 13545  05A1  01EB               	clrf	Exception_Main@i^(0+384)
 13546  05A2  01EC               	clrf	(Exception_Main@i+1)^(0+384)
 13547  05A3                     l10873:	
 13548  05A3  086C               	movf	(Exception_Main@i+1)^(0+384),w
 13549  05A4  3A80               	xorlw	128
 13550  05A5  0020               	movlb	0	; select bank0
 13551  05A6  00EB               	movwf	??_Exception_Main
 13552  05A7  3080               	movlw	128
 13553  05A8  026B               	subwf	??_Exception_Main,w
 13554  05A9  1D03               	skipz
 13555  05AA  2DAE               	goto	u12625
 13556  05AB  0023               	movlb	3	; select bank3
 13557  05AC  0869               	movf	Exception_Main@count^(0+384),w
 13558  05AD  026B               	subwf	Exception_Main@i^(0+384),w
 13559  05AE                     u12625:	
 13560  05AE  1803               	btfsc	3,0
 13561  05AF  2DD2               	goto	u12620
 13562                           
 13563                           ;Main_B1.c: 551: if (getDimmerLights_Status(i + 1) == 1) {
 13564  05B0  0023               	movlb	3	; select bank3
 13565  05B1  086B               	movf	Exception_Main@i^(0+384),w
 13566  05B2  3E01               	addlw	1
 13567  05B3  319B  23F4  3185   	fcall	_getDimmerLights_Status
 13568  05B6  3A01               	xorlw	1
 13569  05B7  1D03               	skipz
 13570  05B8  2DCC               	goto	l10871
 13571                           
 13572                           ;Main_B1.c: 552: DimmerLights->SwFlag = 1;
 13573  05B9  0020               	movlb	0	; select bank0
 13574  05BA  086F               	movf	_DimmerLights,w
 13575  05BB  3E0B               	addlw	11
 13576  05BC  0086               	movwf	6
 13577  05BD  3001               	movlw	1	; select bank2/3
 13578  05BE  0087               	movwf	7
 13579  05BF  1481               	bsf	1,1
 13580                           
 13581                           ;Main_B1.c: 553: DimmerLights->Status = 0;
 13582  05C0  086F               	movf	_DimmerLights,w
 13583  05C1  3E02               	addlw	2
 13584  05C2  0086               	movwf	6
 13585  05C3  3001               	movlw	1	; select bank2/3
 13586  05C4  0087               	movwf	7
 13587  05C5  1081               	bcf	1,1
 13588                           
 13589                           ;Main_B1.c: 554: setDimmerLights_SwOff(i + 1);
 13590  05C6  0023               	movlb	3	; select bank3
 13591  05C7  086B               	movf	Exception_Main@i^(0+384),w
 13592  05C8  3E01               	addlw	1
 13593  05C9  3194  24B1  3185   	fcall	_setDimmerLights_SwOff
 13594  05CC                     l10871:	
 13595  05CC  3001               	movlw	1
 13596  05CD  0023               	movlb	3	; select bank3
 13597  05CE  07EB               	addwf	Exception_Main@i^(0+384),f
 13598  05CF  3000               	movlw	0
 13599  05D0  3DEC               	addwfc	(Exception_Main@i+1)^(0+384),f
 13600  05D1  2DA3               	goto	l10873
 13601  05D2                     u12620:	
 13602  05D2  0023               	movlb	3	; select bank3
 13603  05D3  0008               	return
 13604  05D4                     l10875:	
 13605                           ;Main_B1.c: 558: case 3:
 13606                           
 13607                           ;Main_B1.c: 555: }
 13608                           ;Main_B1.c: 556: }
 13609                           ;Main_B1.c: 557: break;
 13610                           
 13611                           
 13612                           ;Main_B1.c: 560: setBuz(5, 300);
 13613  05D4  302C               	movlw	44
 13614  05D5  0020               	movlb	0	; select bank0
 13615  05D6  00A9               	movwf	setBuz@time
 13616  05D7  3001               	movlw	1
 13617  05D8  00AA               	movwf	setBuz@time+1
 13618  05D9  3005               	movlw	5
 13619  05DA  3196  26F3  3185   	fcall	_setBuz
 13620                           
 13621                           ;Main_B1.c: 561: lights = getDimmerLights_Line();
 13622  05DD  319C  24A8  3185   	fcall	_getDimmerLights_Line
 13623  05E0  0020               	movlb	0	; select bank0
 13624  05E1  00EB               	movwf	??_Exception_Main
 13625  05E2  086B               	movf	??_Exception_Main,w
 13626  05E3  0023               	movlb	3	; select bank3
 13627  05E4  00EF               	movwf	Exception_Main@lights^(0+384)
 13628                           
 13629                           ;Main_B1.c: 562: if (lights == 0) {
 13630  05E5  08EF               	movf	Exception_Main@lights^(0+384),f
 13631  05E6  1D03               	skipz
 13632  05E7  2E1B               	goto	l10893
 13633                           
 13634                           ;Main_B1.c: 564: for (int i = 0; i < count; i++) {
 13635  05E8  01ED               	clrf	Exception_Main@i_3638^(0+384)
 13636  05E9  01EE               	clrf	(Exception_Main@i_3638+1)^(0+384)
 13637  05EA                     l10891:	
 13638  05EA  086E               	movf	(Exception_Main@i_3638+1)^(0+384),w
 13639  05EB  3A80               	xorlw	128
 13640  05EC  0020               	movlb	0	; select bank0
 13641  05ED  00EB               	movwf	??_Exception_Main
 13642  05EE  3080               	movlw	128
 13643  05EF  026B               	subwf	??_Exception_Main,w
 13644  05F0  1D03               	skipz
 13645  05F1  2DF5               	goto	u12655
 13646  05F2  0023               	movlb	3	; select bank3
 13647  05F3  0869               	movf	Exception_Main@count^(0+384),w
 13648  05F4  026D               	subwf	Exception_Main@i_3638^(0+384),w
 13649  05F5                     u12655:	
 13650  05F5  1803               	btfsc	3,0
 13651  05F6  2E19               	goto	u12650
 13652                           
 13653                           ;Main_B1.c: 566: if (getDimmerLights_Status(i + 1) == 1) {
 13654  05F7  0023               	movlb	3	; select bank3
 13655  05F8  086D               	movf	Exception_Main@i_3638^(0+384),w
 13656  05F9  3E01               	addlw	1
 13657  05FA  319B  23F4  3185   	fcall	_getDimmerLights_Status
 13658  05FD  3A01               	xorlw	1
 13659  05FE  1D03               	skipz
 13660  05FF  2E13               	goto	l10889
 13661                           
 13662                           ;Main_B1.c: 567: DimmerLights->SwFlag = 1;
 13663  0600  0020               	movlb	0	; select bank0
 13664  0601  086F               	movf	_DimmerLights,w
 13665  0602  3E0B               	addlw	11
 13666  0603  0086               	movwf	6
 13667  0604  3001               	movlw	1	; select bank2/3
 13668  0605  0087               	movwf	7
 13669  0606  1481               	bsf	1,1
 13670                           
 13671                           ;Main_B1.c: 568: DimmerLights->Status = 0;
 13672  0607  086F               	movf	_DimmerLights,w
 13673  0608  3E02               	addlw	2
 13674  0609  0086               	movwf	6
 13675  060A  3001               	movlw	1	; select bank2/3
 13676  060B  0087               	movwf	7
 13677  060C  1081               	bcf	1,1
 13678                           
 13679                           ;Main_B1.c: 569: setDimmerLights_SwOff(i + 1);
 13680  060D  0023               	movlb	3	; select bank3
 13681  060E  086D               	movf	Exception_Main@i_3638^(0+384),w
 13682  060F  3E01               	addlw	1
 13683  0610  3194  24B1  3185   	fcall	_setDimmerLights_SwOff
 13684  0613                     l10889:	
 13685  0613  3001               	movlw	1
 13686  0614  0023               	movlb	3	; select bank3
 13687  0615  07ED               	addwf	Exception_Main@i_3638^(0+384),f
 13688  0616  3000               	movlw	0
 13689  0617  3DEE               	addwfc	(Exception_Main@i_3638+1)^(0+384),f
 13690  0618  2DEA               	goto	l10891
 13691  0619                     u12650:	
 13692  0619  0023               	movlb	3	; select bank3
 13693  061A  0008               	return
 13694  061B                     l10893:	
 13695                           ;Main_B1.c: 570: }
 13696                           ;Main_B1.c: 571: }
 13697                           ;Main_B1.c: 572: } else {
 13698                           
 13699                           
 13700                           ;Main_B1.c: 574: if (getDimmerLights_Status(lights) == 1) {
 13701  061B  0023               	movlb	3	; select bank3
 13702  061C  086F               	movf	Exception_Main@lights^(0+384),w
 13703  061D  319B  23F4  3185   	fcall	_getDimmerLights_Status
 13704  0620  3A01               	xorlw	1
 13705  0621  1903               	btfsc	3,2
 13706  0622  2E25               	goto	l10895
 13707  0623  0023               	movlb	3	; select bank3
 13708  0624  0008               	return
 13709  0625                     l10895:	
 13710                           
 13711                           ;Main_B1.c: 576: DimmerLights->SwFlag = 1;
 13712  0625  0020               	movlb	0	; select bank0
 13713  0626  086F               	movf	_DimmerLights,w
 13714  0627  3E0B               	addlw	11
 13715  0628  0086               	movwf	6
 13716  0629  3001               	movlw	1	; select bank2/3
 13717  062A  0087               	movwf	7
 13718  062B  1481               	bsf	1,1
 13719                           
 13720                           ;Main_B1.c: 577: DimmerLights->Status = 0;
 13721  062C  086F               	movf	_DimmerLights,w
 13722  062D  3E02               	addlw	2
 13723  062E  0086               	movwf	6
 13724  062F  3001               	movlw	1	; select bank2/3
 13725  0630  0087               	movwf	7
 13726  0631  1081               	bcf	1,1
 13727                           
 13728                           ;Main_B1.c: 578: setDimmerLights_SwOff(lights);
 13729  0632  0023               	movlb	3	; select bank3
 13730  0633  086F               	movf	Exception_Main@lights^(0+384),w
 13731  0634  3194  24B1         	fcall	_setDimmerLights_SwOff
 13732  0636  0023               	movlb	3	; select bank3
 13733  0637  0008               	return
 13734  0638                     l10901:	
 13735                           ;Main_B1.c: 582: }
 13736                           
 13737                           ;Main_B1.c: 579: }
 13738                           ;Main_B1.c: 580: }
 13739                           ;Main_B1.c: 581: break;
 13740                           
 13741  0638  0023               	movlb	3	; select bank3
 13742  0639  086A               	movf	Exception_Main@error^(0+384),w
 13743                           
 13744                           ; Switch size 1, requested type "space"
 13745                           ; Number of cases is 2, Range of values is 2 to 3
 13746                           ; switch strategies available:
 13747                           ; Name         Instructions Cycles
 13748                           ; simple_byte            7     4 (average)
 13749                           ; direct_byte           13     9 (fixed)
 13750                           ; jumptable            263     9 (fixed)
 13751                           ;	Chosen strategy is simple_byte
 13752  063A  3A02               	xorlw	2	; case 2
 13753  063B  1903               	skipnz
 13754  063C  2D91               	goto	l10859
 13755  063D  3A01               	xorlw	1	; case 3
 13756  063E  1903               	skipnz
 13757  063F  2DD4               	goto	l10875
 13758  0640  2E42               	goto	l1609
 13759  0641  0008               	return
 13760  0642                     l1609:	
 13761  0642  0008               	return
 13762  0643                     __end_of_Exception_Main:	
 13763                           
 13764                           	psect	text89
 13765  1CA8                     __ptext89:	
 13766 ;; *************** function _getDimmerLights_Line *****************
 13767 ;; Defined at:
 13768 ;;		line 764 in file "../src/Dimmer_B1.c"
 13769 ;; Parameters:    Size  Location     Type
 13770 ;;		None
 13771 ;; Auto vars:     Size  Location     Type
 13772 ;;  line            1    1[BANK0 ] unsigned char 
 13773 ;; Return value:  Size  Location     Type
 13774 ;;                  1    wreg      unsigned char 
 13775 ;; Registers used:
 13776 ;;		wreg, status,2
 13777 ;; Tracked objects:
 13778 ;;		On entry : 0/0
 13779 ;;		On exit  : 0/0
 13780 ;;		Unchanged: 0/0
 13781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13784 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13785 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13786 ;;Total ram usage:        2 bytes
 13787 ;; Hardware stack levels used:    1
 13788 ;; Hardware stack levels required when called:    4
 13789 ;; This function calls:
 13790 ;;		Nothing
 13791 ;; This function is called by:
 13792 ;;		_Exception_Main
 13793 ;; This function uses a non-reentrant model
 13794 ;;
 13795                           
 13796                           
 13797                           ;psect for function _getDimmerLights_Line
 13798  1CA8                     _getDimmerLights_Line:	
 13799                           
 13800                           ;Dimmer_B1.c: 765: char line = 0;
 13801                           
 13802                           ;incstack = 0
 13803                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13804  1CA8  0020               	movlb	0	; select bank0
 13805  1CA9  01A1               	clrf	getDimmerLights_Line@line
 13806                           
 13807                           ;Dimmer_B1.c: 767: if (DimmerLights1.Line == 1) {
 13808  1CAA  0023               	movlb	3	; select bank3
 13809  1CAB  1F48               	btfss	(_DimmerLights1^(0+384)+10),6
 13810  1CAC  2CB1               	goto	l864
 13811                           
 13812                           ;Dimmer_B1.c: 768: line = 1;
 13813  1CAD  0020               	movlb	0	; select bank0
 13814  1CAE  01A1               	clrf	getDimmerLights_Line@line
 13815  1CAF  0AA1               	incf	getDimmerLights_Line@line,f
 13816                           
 13817                           ;Dimmer_B1.c: 769: }
 13818  1CB0  2CB8               	goto	l865
 13819  1CB1                     l864:	
 13820                           
 13821                           ;Dimmer_B1.c: 772: else if (DimmerLights2.Line == 1) {
 13822  1CB1  1F59               	btfss	(_DimmerLights2^(0+384)+10),6
 13823  1CB2  2CB8               	goto	l865
 13824                           
 13825                           ;Dimmer_B1.c: 773: line = 2;
 13826  1CB3  3002               	movlw	2
 13827  1CB4  0020               	movlb	0	; select bank0
 13828  1CB5  00A0               	movwf	??_getDimmerLights_Line
 13829  1CB6  0820               	movf	??_getDimmerLights_Line,w
 13830  1CB7  00A1               	movwf	getDimmerLights_Line@line
 13831  1CB8                     l865:	
 13832                           
 13833                           ;Dimmer_B1.c: 774: }
 13834                           ;Dimmer_B1.c: 781: return line;
 13835  1CB8  0020               	movlb	0	; select bank0
 13836  1CB9  0821               	movf	getDimmerLights_Line@line,w
 13837  1CBA  0008               	return
 13838  1CBB                     __end_of_getDimmerLights_Line:	
 13839                           
 13840                           	psect	text90
 13841  1EC3                     __ptext90:	
 13842 ;; *************** function _DimmerLights_Main *****************
 13843 ;; Defined at:
 13844 ;;		line 522 in file "../src/Dimmer_B1.c"
 13845 ;; Parameters:    Size  Location     Type
 13846 ;;		None
 13847 ;; Auto vars:     Size  Location     Type
 13848 ;;		None
 13849 ;; Return value:  Size  Location     Type
 13850 ;;		None               void
 13851 ;; Registers used:
 13852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13853 ;; Tracked objects:
 13854 ;;		On entry : 0/0
 13855 ;;		On exit  : 0/0
 13856 ;;		Unchanged: 0/0
 13857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13862 ;;Total ram usage:        0 bytes
 13863 ;; Hardware stack levels used:    1
 13864 ;; Hardware stack levels required when called:    9
 13865 ;; This function calls:
 13866 ;;		_getLoad_OK
 13867 ;;		_getMain_All_Error_Status
 13868 ;;		_getMain_LightsStatus
 13869 ;;		_setDimmerLights_Main
 13870 ;; This function is called by:
 13871 ;;		_main
 13872 ;; This function uses a non-reentrant model
 13873 ;;
 13874                           
 13875                           
 13876                           ;psect for function _DimmerLights_Main
 13877  1EC3                     _DimmerLights_Main:	
 13878                           
 13879                           ;Dimmer_B1.c: 534: if (Dimmer.LoadGO == 1) {
 13880                           
 13881                           ;incstack = 0
 13882                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13883  1EC3  0021               	movlb	1	; select bank1
 13884  1EC4  1D48               	btfss	_Dimmer^(0+128),2	;volatile
 13885  1EC5  2EDB               	goto	l10489
 13886                           
 13887                           ;Dimmer_B1.c: 535: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 13888  1EC6  319B  2303  319E   	fcall	_getLoad_OK
 13889  1EC9  3A01               	xorlw	1
 13890  1ECA  1903               	skipnz
 13891  1ECB  2ED9               	goto	l811
 13892  1ECC  3000               	movlw	0
 13893  1ECD  3191  2193  319E   	fcall	_getMain_All_Error_Status
 13894  1ED0  3800               	iorlw	0
 13895  1ED1  1D03               	skipz
 13896  1ED2  2ED9               	goto	l811
 13897  1ED3  319C  2495  319E   	fcall	_getMain_LightsStatus
 13898  1ED6  3800               	iorlw	0
 13899  1ED7  1D03               	skipz
 13900  1ED8  2EDB               	goto	l10489
 13901  1ED9                     l811:	
 13902                           
 13903                           ;Dimmer_B1.c: 536: Dimmer.LoadGO = 0;
 13904  1ED9  0021               	movlb	1	; select bank1
 13905  1EDA  1148               	bcf	_Dimmer^(0+128),2	;volatile
 13906  1EDB                     l10489:	
 13907                           
 13908                           ;Dimmer_B1.c: 537: }
 13909                           ;Dimmer_B1.c: 538: }
 13910                           ;Dimmer_B1.c: 542: setDimmerLights_Main(1);
 13911  1EDB  3001               	movlw	1
 13912  1EDC  318B  239B  319E   	fcall	_setDimmerLights_Main
 13913                           
 13914                           ;Dimmer_B1.c: 546: setDimmerLights_Main(2);
 13915  1EDF  3002               	movlw	2
 13916  1EE0  318B  239B         	fcall	_setDimmerLights_Main
 13917  1EE2  0008               	return
 13918  1EE3                     __end_of_DimmerLights_Main:	
 13919                           
 13920                           	psect	text91
 13921  0B9B                     __ptext91:	
 13922 ;; *************** function _setDimmerLights_Main *****************
 13923 ;; Defined at:
 13924 ;;		line 556 in file "../src/Dimmer_B1.c"
 13925 ;; Parameters:    Size  Location     Type
 13926 ;;  lights          1    wreg     unsigned char 
 13927 ;; Auto vars:     Size  Location     Type
 13928 ;;  lights          1   78[BANK0 ] unsigned char 
 13929 ;; Return value:  Size  Location     Type
 13930 ;;		None               void
 13931 ;; Registers used:
 13932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13933 ;; Tracked objects:
 13934 ;;		On entry : 0/0
 13935 ;;		On exit  : 0/0
 13936 ;;		Unchanged: 0/0
 13937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;Total ram usage:        1 bytes
 13943 ;; Hardware stack levels used:    1
 13944 ;; Hardware stack levels required when called:    8
 13945 ;; This function calls:
 13946 ;;		_DimmerLightsPointSelect
 13947 ;;		_getDimmerLights_Allow_Condition
 13948 ;;		_getMain_LightsStatus
 13949 ;;		_setDimmerLights
 13950 ;;		_setDimmerLights_Adj
 13951 ;; This function is called by:
 13952 ;;		_DimmerLights_Main
 13953 ;; This function uses a non-reentrant model
 13954 ;;
 13955                           
 13956                           
 13957                           ;psect for function _setDimmerLights_Main
 13958  0B9B                     _setDimmerLights_Main:	
 13959                           
 13960                           ;incstack = 0
 13961                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13962                           ;setDimmerLights_Main@lights stored from wreg
 13963  0B9B  0020               	movlb	0	; select bank0
 13964  0B9C  00EE               	movwf	setDimmerLights_Main@lights
 13965                           
 13966                           ;Dimmer_B1.c: 557: DimmerLightsPointSelect(lights);
 13967  0B9D  086E               	movf	setDimmerLights_Main@lights,w
 13968  0B9E  319C  2482  318B   	fcall	_DimmerLightsPointSelect
 13969                           
 13970                           ;Dimmer_B1.c: 559: if (DimmerLights->Trigger == 1) {
 13971  0BA1  0020               	movlb	0	; select bank0
 13972  0BA2  086F               	movf	_DimmerLights,w
 13973  0BA3  3E0A               	addlw	10
 13974  0BA4  0086               	movwf	6
 13975  0BA5  3001               	movlw	1	; select bank2/3
 13976  0BA6  0087               	movwf	7
 13977  0BA7  1C81               	btfss	1,1
 13978  0BA8  2BCA               	goto	l9971
 13979                           
 13980                           ;Dimmer_B1.c: 560: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13981  0BA9  086E               	movf	setDimmerLights_Main@lights,w
 13982  0BAA  3192  2267  318B   	fcall	_getDimmerLights_Allow_Condition
 13983  0BAD  3800               	iorlw	0
 13984  0BAE  1D03               	skipz
 13985  0BAF  0008               	return
 13986                           
 13987                           ;Dimmer_B1.c: 561: DimmerLights->Trigger = 0;
 13988  0BB0  0020               	movlb	0	; select bank0
 13989  0BB1  086F               	movf	_DimmerLights,w
 13990  0BB2  3E0A               	addlw	10
 13991  0BB3  0086               	movwf	6
 13992  0BB4  3001               	movlw	1	; select bank2/3
 13993  0BB5  0087               	movwf	7
 13994  0BB6  1081               	bcf	1,1
 13995                           
 13996                           ;Dimmer_B1.c: 562: if (DimmerLights->Switch == 1) {
 13997  0BB7  086F               	movf	_DimmerLights,w
 13998  0BB8  3E0A               	addlw	10
 13999  0BB9  0086               	movwf	6
 14000  0BBA  3001               	movlw	1	; select bank2/3
 14001  0BBB  0087               	movwf	7
 14002  0BBC  1C01               	btfss	1,0
 14003  0BBD  2BC4               	goto	l9969
 14004                           
 14005                           ;Dimmer_B1.c: 563: setDimmerLights(lights, 1);
 14006  0BBE  01EB               	clrf	setDimmerLights@status
 14007  0BBF  0AEB               	incf	setDimmerLights@status,f
 14008  0BC0  086E               	movf	setDimmerLights_Main@lights,w
 14009  0BC1  3195  254F         	fcall	_setDimmerLights
 14010                           
 14011                           ;Dimmer_B1.c: 564: } else {
 14012  0BC3  0008               	return
 14013  0BC4                     l9969:	
 14014                           
 14015                           ;Dimmer_B1.c: 565: setDimmerLights(lights, 0);
 14016  0BC4  0020               	movlb	0	; select bank0
 14017  0BC5  01EB               	clrf	setDimmerLights@status
 14018  0BC6  086E               	movf	setDimmerLights_Main@lights,w
 14019  0BC7  3195  254F         	fcall	_setDimmerLights
 14020                           
 14021                           ;Dimmer_B1.c: 566: }
 14022                           ;Dimmer_B1.c: 567: }
 14023                           ;Dimmer_B1.c: 568: } else {
 14024  0BC9  0008               	return
 14025  0BCA                     l9971:	
 14026                           
 14027                           ;Dimmer_B1.c: 569: if (getMain_LightsStatus() == 1) {
 14028  0BCA  319C  2495  318B   	fcall	_getMain_LightsStatus
 14029  0BCD  3A01               	xorlw	1
 14030  0BCE  1D03               	skipz
 14031  0BCF  2BF9               	goto	l9983
 14032                           
 14033                           ;Dimmer_B1.c: 570: if (DimmerLights->TriggerAdj == 1) {
 14034  0BD0  0020               	movlb	0	; select bank0
 14035  0BD1  086F               	movf	_DimmerLights,w
 14036  0BD2  3E0A               	addlw	10
 14037  0BD3  0086               	movwf	6
 14038  0BD4  3001               	movlw	1	; select bank2/3
 14039  0BD5  0087               	movwf	7
 14040  0BD6  1D81               	btfss	1,3
 14041  0BD7  0008               	return
 14042                           
 14043                           ;Dimmer_B1.c: 571: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14044  0BD8  086E               	movf	setDimmerLights_Main@lights,w
 14045  0BD9  3192  2267  318B   	fcall	_getDimmerLights_Allow_Condition
 14046  0BDC  3800               	iorlw	0
 14047  0BDD  1D03               	skipz
 14048  0BDE  0008               	return
 14049                           
 14050                           ;Dimmer_B1.c: 572: DimmerLights->TriggerAdj = 0;
 14051  0BDF  0020               	movlb	0	; select bank0
 14052  0BE0  086F               	movf	_DimmerLights,w
 14053  0BE1  3E0A               	addlw	10
 14054  0BE2  0086               	movwf	6
 14055  0BE3  3001               	movlw	1	; select bank2/3
 14056  0BE4  0087               	movwf	7
 14057  0BE5  1181               	bcf	1,3
 14058                           
 14059                           ;Dimmer_B1.c: 573: if (DimmerLights->SwitchAdj == 1) {
 14060  0BE6  086F               	movf	_DimmerLights,w
 14061  0BE7  3E0A               	addlw	10
 14062  0BE8  0086               	movwf	6
 14063  0BE9  3001               	movlw	1	; select bank2/3
 14064  0BEA  0087               	movwf	7
 14065  0BEB  1D01               	btfss	1,2
 14066  0BEC  2BF3               	goto	l9981
 14067                           
 14068                           ;Dimmer_B1.c: 574: setDimmerLights_Adj(lights, 1);
 14069  0BED  01EB               	clrf	setDimmerLights_Adj@status
 14070  0BEE  0AEB               	incf	setDimmerLights_Adj@status,f
 14071  0BEF  086E               	movf	setDimmerLights_Main@lights,w
 14072  0BF0  3196  269B         	fcall	_setDimmerLights_Adj
 14073                           
 14074                           ;Dimmer_B1.c: 575: } else {
 14075  0BF2  0008               	return
 14076  0BF3                     l9981:	
 14077                           
 14078                           ;Dimmer_B1.c: 576: setDimmerLights_Adj(lights, 0);
 14079  0BF3  0020               	movlb	0	; select bank0
 14080  0BF4  01EB               	clrf	setDimmerLights_Adj@status
 14081  0BF5  086E               	movf	setDimmerLights_Main@lights,w
 14082  0BF6  3196  269B         	fcall	_setDimmerLights_Adj
 14083                           
 14084                           ;Dimmer_B1.c: 577: }
 14085                           ;Dimmer_B1.c: 578: }
 14086                           ;Dimmer_B1.c: 579: }
 14087                           ;Dimmer_B1.c: 580: } else {
 14088  0BF8  0008               	return
 14089  0BF9                     l9983:	
 14090                           
 14091                           ;Dimmer_B1.c: 581: if (DimmerLights->TriggerAdj == 1) {
 14092  0BF9  0020               	movlb	0	; select bank0
 14093  0BFA  086F               	movf	_DimmerLights,w
 14094  0BFB  3E0A               	addlw	10
 14095  0BFC  0086               	movwf	6
 14096  0BFD  3001               	movlw	1	; select bank2/3
 14097  0BFE  0087               	movwf	7
 14098  0BFF  1D81               	btfss	1,3
 14099  0C00  0008               	return
 14100                           
 14101                           ;Dimmer_B1.c: 582: DimmerLights->TriggerAdj = 0;
 14102  0C01  086F               	movf	_DimmerLights,w
 14103  0C02  3E0A               	addlw	10
 14104  0C03  0086               	movwf	6
 14105  0C04  3001               	movlw	1	; select bank2/3
 14106  0C05  0087               	movwf	7
 14107  0C06  1181               	bcf	1,3
 14108  0C07  0008               	return
 14109  0C08                     __end_of_setDimmerLights_Main:	
 14110                           
 14111                           	psect	text92
 14112  169B                     __ptext92:	
 14113 ;; *************** function _setDimmerLights_Adj *****************
 14114 ;; Defined at:
 14115 ;;		line 700 in file "../src/Dimmer_B1.c"
 14116 ;; Parameters:    Size  Location     Type
 14117 ;;  lights          1    wreg     unsigned char 
 14118 ;;  status          1   75[BANK0 ] unsigned char 
 14119 ;; Auto vars:     Size  Location     Type
 14120 ;;  lights          1   77[BANK0 ] unsigned char 
 14121 ;; Return value:  Size  Location     Type
 14122 ;;		None               void
 14123 ;; Registers used:
 14124 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14125 ;; Tracked objects:
 14126 ;;		On entry : 0/0
 14127 ;;		On exit  : 0/0
 14128 ;;		Unchanged: 0/0
 14129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14130 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14133 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14134 ;;Total ram usage:        3 bytes
 14135 ;; Hardware stack levels used:    1
 14136 ;; Hardware stack levels required when called:    7
 14137 ;; This function calls:
 14138 ;;		_setBuz
 14139 ;;		_setDimmerLights_Line
 14140 ;;		_setPercentValue
 14141 ;;		_setProductData
 14142 ;;		_setRF_DimmerLights
 14143 ;;		_setTxData
 14144 ;; This function is called by:
 14145 ;;		_setDimmerLights_Main
 14146 ;; This function uses a non-reentrant model
 14147 ;;
 14148                           
 14149                           
 14150                           ;psect for function _setDimmerLights_Adj
 14151  169B                     _setDimmerLights_Adj:	
 14152                           
 14153                           ;incstack = 0
 14154                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14155                           ;setDimmerLights_Adj@lights stored from wreg
 14156  169B  0020               	movlb	0	; select bank0
 14157  169C  00ED               	movwf	setDimmerLights_Adj@lights
 14158                           
 14159                           ;Dimmer_B1.c: 702: if (status == 1) {
 14160  169D  086B               	movf	setDimmerLights_Adj@status,w
 14161  169E  3A01               	xorlw	1
 14162  169F  1D03               	skipz
 14163  16A0  2EB3               	goto	l9713
 14164                           
 14165                           ;Dimmer_B1.c: 703: DimmerLights->AdjSw = 1;
 14166  16A1  0A6F               	incf	_DimmerLights,w
 14167  16A2  0086               	movwf	6
 14168  16A3  3001               	movlw	1	; select bank2/3
 14169  16A4  0087               	movwf	7
 14170  16A5  1701               	bsf	1,6
 14171                           
 14172                           ;Dimmer_B1.c: 704: DimmerLights->Signal = 1;
 14173  16A6  0A6F               	incf	_DimmerLights,w
 14174  16A7  0086               	movwf	6
 14175  16A8  3001               	movlw	1	; select bank2/3
 14176  16A9  0087               	movwf	7
 14177  16AA  1681               	bsf	1,5
 14178                           
 14179                           ;Dimmer_B1.c: 705: setBuz(1, 100);
 14180  16AB  3064               	movlw	100
 14181  16AC  00A9               	movwf	setBuz@time
 14182  16AD  3000               	movlw	0
 14183  16AE  00AA               	movwf	setBuz@time+1
 14184  16AF  3001               	movlw	1
 14185  16B0  3196  26F3         	fcall	_setBuz
 14186                           
 14187                           ;Dimmer_B1.c: 706: } else if (status == 0) {
 14188  16B2  0008               	return
 14189  16B3                     l9713:	
 14190  16B3  0020               	movlb	0	; select bank0
 14191  16B4  08EB               	movf	setDimmerLights_Adj@status,f
 14192  16B5  1D03               	skipz
 14193  16B6  0008               	return
 14194                           
 14195                           ;Dimmer_B1.c: 707: Dimmer.Load_Status = 0;
 14196  16B7  0021               	movlb	1	; select bank1
 14197  16B8  11C8               	bcf	_Dimmer^(0+128),3	;volatile
 14198                           
 14199                           ;Dimmer_B1.c: 708: setDimmerLights_Line(lights);
 14200  16B9  0020               	movlb	0	; select bank0
 14201  16BA  086D               	movf	setDimmerLights_Adj@lights,w
 14202  16BB  3188  2000  3196   	fcall	_setDimmerLights_Line
 14203                           
 14204                           ;Dimmer_B1.c: 709: DimmerLights->AdjSw = 0;
 14205  16BE  0020               	movlb	0	; select bank0
 14206  16BF  0A6F               	incf	_DimmerLights,w
 14207  16C0  0086               	movwf	6
 14208  16C1  3001               	movlw	1	; select bank2/3
 14209  16C2  0087               	movwf	7
 14210  16C3  1301               	bcf	1,6
 14211                           
 14212                           ;Dimmer_B1.c: 710: DimmerLights->Signal = 0;
 14213  16C4  0A6F               	incf	_DimmerLights,w
 14214  16C5  0086               	movwf	6
 14215  16C6  3001               	movlw	1	; select bank2/3
 14216  16C7  0087               	movwf	7
 14217  16C8  1281               	bcf	1,5
 14218                           
 14219                           ;Dimmer_B1.c: 712: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 14220  16C9  086F               	movf	_DimmerLights,w
 14221  16CA  3E04               	addlw	4
 14222  16CB  0086               	movwf	6
 14223  16CC  3001               	movlw	1	; select bank2/3
 14224  16CD  0087               	movwf	7
 14225  16CE  0801               	movf	1,w
 14226  16CF  00EC               	movwf	??_setDimmerLights_Adj
 14227  16D0  086F               	movf	_DimmerLights,w
 14228  16D1  3E06               	addlw	6
 14229  16D2  0086               	movwf	6
 14230  16D3  3001               	movlw	1	; select bank2/3
 14231  16D4  0087               	movwf	7
 14232  16D5  086C               	movf	??_setDimmerLights_Adj,w
 14233  16D6  0081               	movwf	1
 14234                           
 14235                           ;Dimmer_B1.c: 713: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 14236  16D7  086F               	movf	_DimmerLights,w
 14237  16D8  3E04               	addlw	4
 14238  16D9  0086               	movwf	6
 14239  16DA  3001               	movlw	1	; select bank2/3
 14240  16DB  0087               	movwf	7
 14241  16DC  0801               	movf	1,w
 14242  16DD  3189  2193  3196   	fcall	_setPercentValue
 14243  16E0  0020               	movlb	0	; select bank0
 14244  16E1  00EC               	movwf	??_setDimmerLights_Adj
 14245  16E2  086C               	movf	??_setDimmerLights_Adj,w
 14246  16E3  00E2               	movwf	setProductData@value
 14247  16E4  086D               	movf	setDimmerLights_Adj@lights,w
 14248  16E5  3E14               	addlw	20
 14249  16E6  319B  23B8  3196   	fcall	_setProductData
 14250                           
 14251                           ;Dimmer_B1.c: 728: setRF_DimmerLights(lights, 1);
 14252  16E9  0020               	movlb	0	; select bank0
 14253  16EA  01E6               	clrf	setRF_DimmerLights@on
 14254  16EB  0AE6               	incf	setRF_DimmerLights@on,f
 14255  16EC  086D               	movf	setDimmerLights_Adj@lights,w
 14256  16ED  3197  274C  3196   	fcall	_setRF_DimmerLights
 14257                           
 14258                           ;Dimmer_B1.c: 729: setTxData();
 14259  16F0  318E  2610         	fcall	_setTxData
 14260  16F2  0008               	return
 14261  16F3                     __end_of_setDimmerLights_Adj:	
 14262                           
 14263                           	psect	text93
 14264  154F                     __ptext93:	
 14265 ;; *************** function _setDimmerLights *****************
 14266 ;; Defined at:
 14267 ;;		line 658 in file "../src/Dimmer_B1.c"
 14268 ;; Parameters:    Size  Location     Type
 14269 ;;  lights          1    wreg     unsigned char 
 14270 ;;  status          1   75[BANK0 ] unsigned char 
 14271 ;; Auto vars:     Size  Location     Type
 14272 ;;  lights          1   77[BANK0 ] unsigned char 
 14273 ;; Return value:  Size  Location     Type
 14274 ;;		None               void
 14275 ;; Registers used:
 14276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14277 ;; Tracked objects:
 14278 ;;		On entry : 0/0
 14279 ;;		On exit  : 0/0
 14280 ;;		Unchanged: 0/0
 14281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14282 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14284 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14285 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14286 ;;Total ram usage:        3 bytes
 14287 ;; Hardware stack levels used:    1
 14288 ;; Hardware stack levels required when called:    7
 14289 ;; This function calls:
 14290 ;;		_setDimmerLights_Line
 14291 ;;		_setLED
 14292 ;;		_setPercentValue
 14293 ;;		_setProductData
 14294 ;;		_setRF_DimmerLights
 14295 ;;		_setTxData
 14296 ;; This function is called by:
 14297 ;;		_setDimmerLights_Main
 14298 ;; This function uses a non-reentrant model
 14299 ;;
 14300                           
 14301                           
 14302                           ;psect for function _setDimmerLights
 14303  154F                     _setDimmerLights:	
 14304                           
 14305                           ;incstack = 0
 14306                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14307                           ;setDimmerLights@lights stored from wreg
 14308  154F  0020               	movlb	0	; select bank0
 14309  1550  00ED               	movwf	setDimmerLights@lights
 14310                           
 14311                           ;Dimmer_B1.c: 666: if (status == 1) {
 14312  1551  086B               	movf	setDimmerLights@status,w
 14313  1552  3A01               	xorlw	1
 14314  1553  1D03               	skipz
 14315  1554  2D7F               	goto	l9693
 14316                           
 14317                           ;Dimmer_B1.c: 667: DimmerLights->StatusFlag = 1;
 14318  1555  0A6F               	incf	_DimmerLights,w
 14319  1556  0086               	movwf	6
 14320  1557  3001               	movlw	1	; select bank2/3
 14321  1558  0087               	movwf	7
 14322  1559  1501               	bsf	1,2
 14323                           
 14324                           ;Dimmer_B1.c: 670: Dimmer.Load_Status = 1;
 14325  155A  0021               	movlb	1	; select bank1
 14326  155B  15C8               	bsf	_Dimmer^(0+128),3	;volatile
 14327                           
 14328                           ;Dimmer_B1.c: 671: setDimmerLights_Line(lights);
 14329  155C  0020               	movlb	0	; select bank0
 14330  155D  086D               	movf	setDimmerLights@lights,w
 14331  155E  3188  2000  3195   	fcall	_setDimmerLights_Line
 14332                           
 14333                           ;Dimmer_B1.c: 673: setLED(lights, 0);
 14334  1561  0020               	movlb	0	; select bank0
 14335  1562  01A2               	clrf	setLED@command
 14336  1563  086D               	movf	setDimmerLights@lights,w
 14337  1564  3195  25F4  3195   	fcall	_setLED
 14338                           
 14339                           ;Dimmer_B1.c: 678: DimmerLights->DimmingValue = ((char)(70*0.8));
 14340  1567  3038               	movlw	56
 14341  1568  0020               	movlb	0	; select bank0
 14342  1569  00EC               	movwf	??_setDimmerLights
 14343  156A  086F               	movf	_DimmerLights,w
 14344  156B  3E04               	addlw	4
 14345  156C  0086               	movwf	6
 14346  156D  3001               	movlw	1	; select bank2/3
 14347  156E  0087               	movwf	7
 14348  156F  086C               	movf	??_setDimmerLights,w
 14349  1570  0081               	movwf	1
 14350                           
 14351                           ;Dimmer_B1.c: 680: setProductData((20 + lights), setPercentValue(((char)(70*0.8))));
 14352  1571  3038               	movlw	56
 14353  1572  3189  2193  3195   	fcall	_setPercentValue
 14354  1575  0020               	movlb	0	; select bank0
 14355  1576  00EC               	movwf	??_setDimmerLights
 14356  1577  086C               	movf	??_setDimmerLights,w
 14357  1578  00E2               	movwf	setProductData@value
 14358  1579  086D               	movf	setDimmerLights@lights,w
 14359  157A  3E14               	addlw	20
 14360  157B  319B  23B8  3195   	fcall	_setProductData
 14361                           
 14362                           ;Dimmer_B1.c: 682: } else if (status == 0) {
 14363  157E  2D95               	goto	l9703
 14364  157F                     l9693:	
 14365  157F  0020               	movlb	0	; select bank0
 14366  1580  08EB               	movf	setDimmerLights@status,f
 14367  1581  1D03               	skipz
 14368  1582  2D95               	goto	l9703
 14369                           
 14370                           ;Dimmer_B1.c: 683: DimmerLights->StatusFlag = 0;
 14371  1583  0A6F               	incf	_DimmerLights,w
 14372  1584  0086               	movwf	6
 14373  1585  3001               	movlw	1	; select bank2/3
 14374  1586  0087               	movwf	7
 14375  1587  1101               	bcf	1,2
 14376                           
 14377                           ;Dimmer_B1.c: 686: Dimmer.Load_Status = 0;
 14378  1588  0021               	movlb	1	; select bank1
 14379  1589  11C8               	bcf	_Dimmer^(0+128),3	;volatile
 14380                           
 14381                           ;Dimmer_B1.c: 687: setDimmerLights_Line(0);
 14382  158A  3000               	movlw	0
 14383  158B  3188  2000  3195   	fcall	_setDimmerLights_Line
 14384                           
 14385                           ;Dimmer_B1.c: 689: setLED(lights, 1);
 14386  158E  0020               	movlb	0	; select bank0
 14387  158F  01A2               	clrf	setLED@command
 14388  1590  0AA2               	incf	setLED@command,f
 14389  1591  086D               	movf	setDimmerLights@lights,w
 14390  1592  3195  25F4  3195   	fcall	_setLED
 14391  1595                     l9703:	
 14392                           
 14393                           ;Dimmer_B1.c: 691: }
 14394                           ;Dimmer_B1.c: 694: setRF_DimmerLights(lights, status);
 14395  1595  0020               	movlb	0	; select bank0
 14396  1596  086B               	movf	setDimmerLights@status,w
 14397  1597  00EC               	movwf	??_setDimmerLights
 14398  1598  086C               	movf	??_setDimmerLights,w
 14399  1599  00E6               	movwf	setRF_DimmerLights@on
 14400  159A  086D               	movf	setDimmerLights@lights,w
 14401  159B  3197  274C  3195   	fcall	_setRF_DimmerLights
 14402                           
 14403                           ;Dimmer_B1.c: 695: setTxData();
 14404  159E  318E  2610         	fcall	_setTxData
 14405  15A0  0008               	return
 14406  15A1                     __end_of_setDimmerLights:	
 14407                           
 14408                           	psect	text94
 14409  0E10                     __ptext94:	
 14410 ;; *************** function _setTxData *****************
 14411 ;; Defined at:
 14412 ;;		line 167 in file "../src/RF_Control_B1.c"
 14413 ;; Parameters:    Size  Location     Type
 14414 ;;		None
 14415 ;; Auto vars:     Size  Location     Type
 14416 ;;  i               1    0        unsigned char 
 14417 ;; Return value:  Size  Location     Type
 14418 ;;		None               void
 14419 ;; Registers used:
 14420 ;;		wreg, fsr1l, fsr1h
 14421 ;; Tracked objects:
 14422 ;;		On entry : 0/0
 14423 ;;		On exit  : 0/0
 14424 ;;		Unchanged: 0/0
 14425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14429 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14430 ;;Total ram usage:        1 bytes
 14431 ;; Hardware stack levels used:    1
 14432 ;; Hardware stack levels required when called:    4
 14433 ;; This function calls:
 14434 ;;		Nothing
 14435 ;; This function is called by:
 14436 ;;		_setDimmerLights
 14437 ;;		_setDimmerLights_Adj
 14438 ;;		_getRxData
 14439 ;;		_setControl_Lights_Table
 14440 ;;		_setRFSW_Control
 14441 ;;		_setRFSW_AdjControl
 14442 ;; This function uses a non-reentrant model
 14443 ;;
 14444                           
 14445                           
 14446                           ;psect for function _setTxData
 14447  0E10                     _setTxData:	
 14448                           
 14449                           ;RF_Control_B1.c: 168: char i;
 14450                           ;RF_Control_B1.c: 169: if (RF1.Enable == 1) {
 14451                           
 14452                           ;incstack = 0
 14453                           ; Regs used in _setTxData: [wregfsr1]
 14454  0E10  0021               	movlb	1	; select bank1
 14455  0E11  1C20               	btfss	_RF1^(0+128),0
 14456  0E12  0008               	return
 14457                           
 14458                           ;RF_Control_B1.c: 171: if (RF1.TransceiveGO == 0) {
 14459  0E13  1920               	btfsc	_RF1^(0+128),2
 14460  0E14  0008               	return
 14461                           
 14462                           ;RF_Control_B1.c: 172: RF1.TransceiveGO = 1;
 14463  0E15  1520               	bsf	_RF1^(0+128),2
 14464                           
 14465                           ;RF_Control_B1.c: 184: RF_Data[0] = 0x63;
 14466  0E16  3063               	movlw	99
 14467  0E17  0020               	movlb	0	; select bank0
 14468  0E18  00A0               	movwf	??_setTxData
 14469  0E19  0820               	movf	??_setTxData,w
 14470  0E1A  0023               	movlb	3	; select bank3
 14471  0E1B  00A0               	movwf	_RF_Data^(0+384)
 14472                           
 14473                           ;RF_Control_B1.c: 185: RF_Data[1] = 0x02;
 14474  0E1C  3002               	movlw	2
 14475  0E1D  0020               	movlb	0	; select bank0
 14476  0E1E  00A0               	movwf	??_setTxData
 14477  0E1F  0820               	movf	??_setTxData,w
 14478  0E20  0023               	movlb	3	; select bank3
 14479  0E21  00A1               	movwf	(_RF_Data^(0+384)+1)
 14480                           
 14481                           ;RF_Control_B1.c: 187: RF_Data[2] = product->Data[2];
 14482  0E22  087A               	movf	_product,w
 14483  0E23  0086               	movwf	6
 14484  0E24  3002               	movlw	2	; select bank4/5
 14485  0E25  0087               	movwf	7
 14486  0E26  3002               	movlw	2	; select bank4/5
 14487  0E27  3F42               	moviw [2]fsr1
 14488  0E28  00A2               	movwf	(_RF_Data^(0+384)+2)
 14489                           
 14490                           ;RF_Control_B1.c: 188: RF_Data[3] = product->Data[3];
 14491  0E29  087A               	movf	_product,w
 14492  0E2A  0086               	movwf	6
 14493  0E2B  3002               	movlw	2	; select bank4/5
 14494  0E2C  0087               	movwf	7
 14495  0E2D  3002               	movlw	2	; select bank4/5
 14496  0E2E  3F43               	moviw [3]fsr1
 14497  0E2F  00A3               	movwf	(_RF_Data^(0+384)+3)
 14498                           
 14499                           ;RF_Control_B1.c: 189: RF_Data[4] = product->Data[4];
 14500  0E30  087A               	movf	_product,w
 14501  0E31  0086               	movwf	6
 14502  0E32  3002               	movlw	2	; select bank4/5
 14503  0E33  0087               	movwf	7
 14504  0E34  3002               	movlw	2	; select bank4/5
 14505  0E35  3F44               	moviw [4]fsr1
 14506  0E36  00A4               	movwf	(_RF_Data^(0+384)+4)
 14507                           
 14508                           ;RF_Control_B1.c: 190: RF_Data[5] = product->Data[5];
 14509  0E37  087A               	movf	_product,w
 14510  0E38  0086               	movwf	6
 14511  0E39  3002               	movlw	2	; select bank4/5
 14512  0E3A  0087               	movwf	7
 14513  0E3B  3002               	movlw	2	; select bank4/5
 14514  0E3C  3F45               	moviw [5]fsr1
 14515  0E3D  00A5               	movwf	(_RF_Data^(0+384)+5)
 14516                           
 14517                           ;RF_Control_B1.c: 191: RF_Data[6] = product->Data[6];
 14518  0E3E  087A               	movf	_product,w
 14519  0E3F  0086               	movwf	6
 14520  0E40  3002               	movlw	2	; select bank4/5
 14521  0E41  0087               	movwf	7
 14522  0E42  3002               	movlw	2	; select bank4/5
 14523  0E43  3F46               	moviw [6]fsr1
 14524  0E44  00A6               	movwf	(_RF_Data^(0+384)+6)
 14525                           
 14526                           ;RF_Control_B1.c: 192: RF_Data[7] = product->Data[7];
 14527  0E45  087A               	movf	_product,w
 14528  0E46  0086               	movwf	6
 14529  0E47  3002               	movlw	2	; select bank4/5
 14530  0E48  0087               	movwf	7
 14531  0E49  3002               	movlw	2	; select bank4/5
 14532  0E4A  3F47               	moviw [7]fsr1
 14533  0E4B  00A7               	movwf	(_RF_Data^(0+384)+7)
 14534                           
 14535                           ;RF_Control_B1.c: 193: RF_Data[8] = product->Data[8];
 14536  0E4C  087A               	movf	_product,w
 14537  0E4D  0086               	movwf	6
 14538  0E4E  3002               	movlw	2	; select bank4/5
 14539  0E4F  0087               	movwf	7
 14540  0E50  3002               	movlw	2	; select bank4/5
 14541  0E51  3F48               	moviw [8]fsr1
 14542  0E52  00A8               	movwf	(_RF_Data^(0+384)+8)
 14543                           
 14544                           ;RF_Control_B1.c: 194: RF_Data[9] = product->Data[9];
 14545  0E53  087A               	movf	_product,w
 14546  0E54  0086               	movwf	6
 14547  0E55  3002               	movlw	2	; select bank4/5
 14548  0E56  0087               	movwf	7
 14549  0E57  3002               	movlw	2	; select bank4/5
 14550  0E58  3F49               	moviw [9]fsr1
 14551  0E59  00A9               	movwf	(_RF_Data^(0+384)+9)
 14552                           
 14553                           ;RF_Control_B1.c: 195: RF_Data[10] = product->Data[10];
 14554  0E5A  087A               	movf	_product,w
 14555  0E5B  0086               	movwf	6
 14556  0E5C  3002               	movlw	2	; select bank4/5
 14557  0E5D  0087               	movwf	7
 14558  0E5E  3002               	movlw	2	; select bank4/5
 14559  0E5F  3F4A               	moviw [10]fsr1
 14560  0E60  00AA               	movwf	(_RF_Data^(0+384)+10)
 14561                           
 14562                           ;RF_Control_B1.c: 196: RF_Data[11] = product->Data[11];
 14563  0E61  087A               	movf	_product,w
 14564  0E62  0086               	movwf	6
 14565  0E63  3002               	movlw	2	; select bank4/5
 14566  0E64  0087               	movwf	7
 14567  0E65  3002               	movlw	2	; select bank4/5
 14568  0E66  3F4B               	moviw [11]fsr1
 14569  0E67  00AB               	movwf	(_RF_Data^(0+384)+11)
 14570                           
 14571                           ;RF_Control_B1.c: 197: RF_Data[12] = product->Data[12];
 14572  0E68  087A               	movf	_product,w
 14573  0E69  0086               	movwf	6
 14574  0E6A  3002               	movlw	2	; select bank4/5
 14575  0E6B  0087               	movwf	7
 14576  0E6C  3002               	movlw	2	; select bank4/5
 14577  0E6D  3F4C               	moviw [12]fsr1
 14578  0E6E  00AC               	movwf	(_RF_Data^(0+384)+12)
 14579                           
 14580                           ;RF_Control_B1.c: 198: RF_Data[13] = product->Data[13];
 14581  0E6F  087A               	movf	_product,w
 14582  0E70  0086               	movwf	6
 14583  0E71  3002               	movlw	2	; select bank4/5
 14584  0E72  0087               	movwf	7
 14585  0E73  3002               	movlw	2	; select bank4/5
 14586  0E74  3F4D               	moviw [13]fsr1
 14587  0E75  00AD               	movwf	(_RF_Data^(0+384)+13)
 14588                           
 14589                           ;RF_Control_B1.c: 199: RF_Data[14] = product->Data[14];
 14590  0E76  087A               	movf	_product,w
 14591  0E77  0086               	movwf	6
 14592  0E78  3002               	movlw	2	; select bank4/5
 14593  0E79  0087               	movwf	7
 14594  0E7A  3002               	movlw	2	; select bank4/5
 14595  0E7B  3F4E               	moviw [14]fsr1
 14596  0E7C  00AE               	movwf	(_RF_Data^(0+384)+14)
 14597                           
 14598                           ;RF_Control_B1.c: 200: RF_Data[15] = product->Data[15];
 14599  0E7D  087A               	movf	_product,w
 14600  0E7E  0086               	movwf	6
 14601  0E7F  3002               	movlw	2	; select bank4/5
 14602  0E80  0087               	movwf	7
 14603  0E81  3002               	movlw	2	; select bank4/5
 14604  0E82  3F4F               	moviw [15]fsr1
 14605  0E83  00AF               	movwf	(_RF_Data^(0+384)+15)
 14606                           
 14607                           ;RF_Control_B1.c: 201: RF_Data[16] = product->Data[16];
 14608  0E84  087A               	movf	_product,w
 14609  0E85  0086               	movwf	6
 14610  0E86  3002               	movlw	2	; select bank4/5
 14611  0E87  0087               	movwf	7
 14612  0E88  3002               	movlw	2	; select bank4/5
 14613  0E89  3F50               	moviw [16]fsr1
 14614  0E8A  00B0               	movwf	(_RF_Data^(0+384)+16)
 14615                           
 14616                           ;RF_Control_B1.c: 202: RF_Data[17] = product->Data[17];
 14617  0E8B  087A               	movf	_product,w
 14618  0E8C  0086               	movwf	6
 14619  0E8D  3002               	movlw	2	; select bank4/5
 14620  0E8E  0087               	movwf	7
 14621  0E8F  3002               	movlw	2	; select bank4/5
 14622  0E90  3F51               	moviw [17]fsr1
 14623  0E91  00B1               	movwf	(_RF_Data^(0+384)+17)
 14624                           
 14625                           ;RF_Control_B1.c: 203: RF_Data[18] = product->Data[18];
 14626  0E92  087A               	movf	_product,w
 14627  0E93  0086               	movwf	6
 14628  0E94  3002               	movlw	2	; select bank4/5
 14629  0E95  0087               	movwf	7
 14630  0E96  3002               	movlw	2	; select bank4/5
 14631  0E97  3F52               	moviw [18]fsr1
 14632  0E98  00B2               	movwf	(_RF_Data^(0+384)+18)
 14633                           
 14634                           ;RF_Control_B1.c: 204: RF_Data[19] = product->Data[19];
 14635  0E99  087A               	movf	_product,w
 14636  0E9A  0086               	movwf	6
 14637  0E9B  3002               	movlw	2	; select bank4/5
 14638  0E9C  0087               	movwf	7
 14639  0E9D  3002               	movlw	2	; select bank4/5
 14640  0E9E  3F53               	moviw [19]fsr1
 14641  0E9F  00B3               	movwf	(_RF_Data^(0+384)+19)
 14642                           
 14643                           ;RF_Control_B1.c: 205: RF_Data[20] = 210;
 14644  0EA0  30D2               	movlw	210
 14645  0EA1  0020               	movlb	0	; select bank0
 14646  0EA2  00A0               	movwf	??_setTxData
 14647  0EA3  0820               	movf	??_setTxData,w
 14648  0EA4  0023               	movlb	3	; select bank3
 14649  0EA5  00B4               	movwf	(_RF_Data^(0+384)+20)
 14650  0EA6  0008               	return
 14651  0EA7                     __end_of_setTxData:	
 14652                           
 14653                           	psect	text95
 14654  174C                     __ptext95:	
 14655 ;; *************** function _setRF_DimmerLights *****************
 14656 ;; Defined at:
 14657 ;;		line 431 in file "../src/RF_Control_B1.c"
 14658 ;; Parameters:    Size  Location     Type
 14659 ;;  lights          1    wreg     unsigned char 
 14660 ;;  on              1   70[BANK0 ] unsigned char 
 14661 ;; Auto vars:     Size  Location     Type
 14662 ;;  lights          1   74[BANK0 ] unsigned char 
 14663 ;;  status          1   73[BANK0 ] unsigned char 
 14664 ;; Return value:  Size  Location     Type
 14665 ;;		None               void
 14666 ;; Registers used:
 14667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14668 ;; Tracked objects:
 14669 ;;		On entry : 0/0
 14670 ;;		On exit  : 0/0
 14671 ;;		Unchanged: 0/0
 14672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14673 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14674 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14675 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14676 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;Total ram usage:        5 bytes
 14678 ;; Hardware stack levels used:    1
 14679 ;; Hardware stack levels required when called:    5
 14680 ;; This function calls:
 14681 ;;		_setProductData
 14682 ;; This function is called by:
 14683 ;;		_setDimmerLights
 14684 ;;		_setDimmerLights_Adj
 14685 ;;		_setRFSW_Control
 14686 ;; This function uses a non-reentrant model
 14687 ;;
 14688                           
 14689                           
 14690                           ;psect for function _setRF_DimmerLights
 14691  174C                     _setRF_DimmerLights:	
 14692                           
 14693                           ;incstack = 0
 14694                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14695                           ;setRF_DimmerLights@lights stored from wreg
 14696  174C  0020               	movlb	0	; select bank0
 14697  174D  00EA               	movwf	setRF_DimmerLights@lights
 14698                           
 14699                           ;RF_Control_B1.c: 432: char status = 1;
 14700  174E  01E9               	clrf	setRF_DimmerLights@status
 14701  174F  0AE9               	incf	setRF_DimmerLights@status,f
 14702                           
 14703                           ;RF_Control_B1.c: 433: status <<= (lights - 1);
 14704  1750  086A               	movf	setRF_DimmerLights@lights,w
 14705  1751  3EFF               	addlw	-1
 14706  1752  0A89               	incf	9,f
 14707  1753  2F56               	goto	u9820
 14708  1754                     u9825:	
 14709  1754  1003               	clrc
 14710  1755  0DE9               	rlf	setRF_DimmerLights@status,f
 14711  1756                     u9820:	
 14712  1756  3EFF               	addlw	-1
 14713  1757  1D03               	skipz
 14714  1758  2F54               	goto	u9825
 14715                           
 14716                           ;RF_Control_B1.c: 434: setProductData(11, lights);
 14717  1759  086A               	movf	setRF_DimmerLights@lights,w
 14718  175A  00E7               	movwf	??_setRF_DimmerLights
 14719  175B  0867               	movf	??_setRF_DimmerLights,w
 14720  175C  00E2               	movwf	setProductData@value
 14721  175D  300B               	movlw	11
 14722  175E  319B  23B8  3197   	fcall	_setProductData
 14723                           
 14724                           ;RF_Control_B1.c: 442: setProductData(9, product->Data[20 + lights]);
 14725  1761  0020               	movlb	0	; select bank0
 14726  1762  086A               	movf	setRF_DimmerLights@lights,w
 14727  1763  3E14               	addlw	20
 14728  1764  077A               	addwf	_product,w
 14729  1765  00E7               	movwf	??_setRF_DimmerLights
 14730  1766  0867               	movf	??_setRF_DimmerLights,w
 14731  1767  0086               	movwf	6
 14732  1768  3002               	movlw	2	; select bank4/5
 14733  1769  0087               	movwf	7
 14734  176A  0801               	movf	1,w
 14735  176B  00E8               	movwf	??_setRF_DimmerLights+1
 14736  176C  0868               	movf	??_setRF_DimmerLights+1,w
 14737  176D  00E2               	movwf	setProductData@value
 14738  176E  3009               	movlw	9
 14739  176F  319B  23B8  3197   	fcall	_setProductData
 14740                           
 14741                           ;RF_Control_B1.c: 443: setProductData(17, product->Data[26 + lights]);
 14742  1772  0020               	movlb	0	; select bank0
 14743  1773  086A               	movf	setRF_DimmerLights@lights,w
 14744  1774  3E1A               	addlw	26
 14745  1775  077A               	addwf	_product,w
 14746  1776  00E7               	movwf	??_setRF_DimmerLights
 14747  1777  0867               	movf	??_setRF_DimmerLights,w
 14748  1778  0086               	movwf	6
 14749  1779  3002               	movlw	2	; select bank4/5
 14750  177A  0087               	movwf	7
 14751  177B  0801               	movf	1,w
 14752  177C  00E8               	movwf	??_setRF_DimmerLights+1
 14753  177D  0868               	movf	??_setRF_DimmerLights+1,w
 14754  177E  00E2               	movwf	setProductData@value
 14755  177F  3011               	movlw	17
 14756  1780  319B  23B8  3197   	fcall	_setProductData
 14757                           
 14758                           ;RF_Control_B1.c: 444: if (on == 1) {
 14759  1783  0020               	movlb	0	; select bank0
 14760  1784  0866               	movf	setRF_DimmerLights@on,w
 14761  1785  3A01               	xorlw	1
 14762  1786  1D03               	skipz
 14763  1787  2F96               	goto	l9079
 14764                           
 14765                           ;RF_Control_B1.c: 445: setProductData(15, (product->Data[15] | status));
 14766  1788  087A               	movf	_product,w
 14767  1789  3E0F               	addlw	15
 14768  178A  0086               	movwf	6
 14769  178B  3002               	movlw	2	; select bank4/5
 14770  178C  0087               	movwf	7
 14771  178D  0801               	movf	1,w
 14772  178E  0469               	iorwf	setRF_DimmerLights@status,w
 14773  178F  00E7               	movwf	??_setRF_DimmerLights
 14774  1790  0867               	movf	??_setRF_DimmerLights,w
 14775  1791  00E2               	movwf	setProductData@value
 14776  1792  300F               	movlw	15
 14777  1793  319B  23B8         	fcall	_setProductData
 14778                           
 14779                           ;RF_Control_B1.c: 446: } else {
 14780  1795  0008               	return
 14781  1796                     l9079:	
 14782                           
 14783                           ;RF_Control_B1.c: 447: setProductData(15, (product->Data[15]&(~status)));
 14784  1796  087A               	movf	_product,w
 14785  1797  3E0F               	addlw	15
 14786  1798  0086               	movwf	6
 14787  1799  3002               	movlw	2	; select bank4/5
 14788  179A  0087               	movwf	7
 14789  179B  0020               	movlb	0	; select bank0
 14790  179C  0969               	comf	setRF_DimmerLights@status,w
 14791  179D  0501               	andwf	1,w
 14792  179E  00E7               	movwf	??_setRF_DimmerLights
 14793  179F  0867               	movf	??_setRF_DimmerLights,w
 14794  17A0  00E2               	movwf	setProductData@value
 14795  17A1  300F               	movlw	15
 14796  17A2  319B  23B8         	fcall	_setProductData
 14797  17A4  0008               	return
 14798  17A5                     __end_of_setRF_DimmerLights:	
 14799                           
 14800                           	psect	text96
 14801  0993                     __ptext96:	
 14802 ;; *************** function _setPercentValue *****************
 14803 ;; Defined at:
 14804 ;;		line 1062 in file "../src/Dimmer_B1.c"
 14805 ;; Parameters:    Size  Location     Type
 14806 ;;  value           1    wreg     unsigned char 
 14807 ;; Auto vars:     Size  Location     Type
 14808 ;;  value           1   62[BANK0 ] unsigned char 
 14809 ;;  i               3   63[BANK0 ] float 
 14810 ;; Return value:  Size  Location     Type
 14811 ;;                  1    wreg      unsigned char 
 14812 ;; Registers used:
 14813 ;;		wreg, status,2, status,0, pclath, cstack
 14814 ;; Tracked objects:
 14815 ;;		On entry : 0/0
 14816 ;;		On exit  : 0/0
 14817 ;;		Unchanged: 0/0
 14818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14820 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14821 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14822 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14823 ;;Total ram usage:        6 bytes
 14824 ;; Hardware stack levels used:    1
 14825 ;; Hardware stack levels required when called:    6
 14826 ;; This function calls:
 14827 ;;		___awtoft
 14828 ;;		___ftadd
 14829 ;;		___ftdiv
 14830 ;;		___ftneg
 14831 ;;		___fttol
 14832 ;; This function is called by:
 14833 ;;		_setDimmerLights
 14834 ;;		_setDimmerLights_Adj
 14835 ;;		_Flash_Memory_Initialization
 14836 ;; This function uses a non-reentrant model
 14837 ;;
 14838                           
 14839                           
 14840                           ;psect for function _setPercentValue
 14841  0993                     _setPercentValue:	
 14842                           
 14843                           ;incstack = 0
 14844                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14845                           ;setPercentValue@value stored from wreg
 14846  0993  0020               	movlb	0	; select bank0
 14847  0994  00DE               	movwf	setPercentValue@value
 14848                           
 14849                           ;Dimmer_B1.c: 1070: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 14850  0995  3000               	movlw	0
 14851  0996  00DF               	movwf	setPercentValue@i
 14852  0997  3030               	movlw	48
 14853  0998  00E0               	movwf	setPercentValue@i+1
 14854  0999  3042               	movlw	66
 14855  099A  00E1               	movwf	setPercentValue@i+2
 14856                           
 14857                           ;Dimmer_B1.c: 1071: i /= 100;
 14858  099B  3000               	movlw	0
 14859  099C  00AE               	movwf	___ftdiv@f2
 14860  099D  30C8               	movlw	200
 14861  099E  00AF               	movwf	___ftdiv@f2+1
 14862  099F  3042               	movlw	66
 14863  09A0  00B0               	movwf	___ftdiv@f2+2
 14864  09A1  085F               	movf	setPercentValue@i,w
 14865  09A2  00B1               	movwf	___ftdiv@f1
 14866  09A3  0860               	movf	setPercentValue@i+1,w
 14867  09A4  00B2               	movwf	___ftdiv@f1+1
 14868  09A5  0861               	movf	setPercentValue@i+2,w
 14869  09A6  00B3               	movwf	___ftdiv@f1+2
 14870  09A7  318E  26A7  3189   	fcall	___ftdiv
 14871  09AA  0020               	movlb	0	; select bank0
 14872  09AB  082E               	movf	?___ftdiv,w
 14873  09AC  00DF               	movwf	setPercentValue@i
 14874  09AD  082F               	movf	?___ftdiv+1,w
 14875  09AE  00E0               	movwf	setPercentValue@i+1
 14876  09AF  0830               	movf	?___ftdiv+2,w
 14877  09B0  00E1               	movwf	setPercentValue@i+2
 14878                           
 14879                           ;Dimmer_B1.c: 1073: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 14880  09B1  085E               	movf	setPercentValue@value,w
 14881  09B2  00DC               	movwf	??_setPercentValue
 14882  09B3  01DD               	clrf	??_setPercentValue+1
 14883  09B4  09DC               	comf	??_setPercentValue,f
 14884  09B5  09DD               	comf	??_setPercentValue+1,f
 14885  09B6  0ADC               	incf	??_setPercentValue,f
 14886  09B7  1903               	skipnz
 14887  09B8  0ADD               	incf	??_setPercentValue+1,f
 14888  09B9  085C               	movf	??_setPercentValue,w
 14889  09BA  3E38               	addlw	56
 14890  09BB  00A8               	movwf	___awtoft@c
 14891  09BC  3000               	movlw	0
 14892  09BD  3D5D               	addwfc	??_setPercentValue+1,w
 14893  09BE  00A9               	movwf	___awtoft@c+1
 14894  09BF  319F  2723  3189   	fcall	___awtoft
 14895  09C2  0020               	movlb	0	; select bank0
 14896  09C3  0828               	movf	?___awtoft,w
 14897  09C4  00B1               	movwf	___ftdiv@f1
 14898  09C5  0829               	movf	?___awtoft+1,w
 14899  09C6  00B2               	movwf	___ftdiv@f1+1
 14900  09C7  082A               	movf	?___awtoft+2,w
 14901  09C8  00B3               	movwf	___ftdiv@f1+2
 14902  09C9  085F               	movf	setPercentValue@i,w
 14903  09CA  00AE               	movwf	___ftdiv@f2
 14904  09CB  0860               	movf	setPercentValue@i+1,w
 14905  09CC  00AF               	movwf	___ftdiv@f2+1
 14906  09CD  0861               	movf	setPercentValue@i+2,w
 14907  09CE  00B0               	movwf	___ftdiv@f2+2
 14908  09CF  318E  26A7  3189   	fcall	___ftdiv
 14909  09D2  0020               	movlb	0	; select bank0
 14910  09D3  082E               	movf	?___ftdiv,w
 14911  09D4  00BE               	movwf	___ftneg@f1
 14912  09D5  082F               	movf	?___ftdiv+1,w
 14913  09D6  00BF               	movwf	___ftneg@f1+1
 14914  09D7  0830               	movf	?___ftdiv+2,w
 14915  09D8  00C0               	movwf	___ftneg@f1+2
 14916  09D9  319B  2323  3189   	fcall	___ftneg
 14917  09DC  0020               	movlb	0	; select bank0
 14918  09DD  083E               	movf	?___ftneg,w
 14919  09DE  00C4               	movwf	___ftadd@f2
 14920  09DF  083F               	movf	?___ftneg+1,w
 14921  09E0  00C5               	movwf	___ftadd@f2+1
 14922  09E1  0840               	movf	?___ftneg+2,w
 14923  09E2  00C6               	movwf	___ftadd@f2+2
 14924  09E3  3000               	movlw	0
 14925  09E4  00C1               	movwf	___ftadd@f1
 14926  09E5  30C8               	movlw	200
 14927  09E6  00C2               	movwf	___ftadd@f1+1
 14928  09E7  3042               	movlw	66
 14929  09E8  00C3               	movwf	___ftadd@f1+2
 14930  09E9  3184  2469  3189   	fcall	___ftadd
 14931  09EC  0020               	movlb	0	; select bank0
 14932  09ED  0841               	movf	?___ftadd,w
 14933  09EE  00CE               	movwf	___fttol@f1
 14934  09EF  0842               	movf	?___ftadd+1,w
 14935  09F0  00CF               	movwf	___fttol@f1+1
 14936  09F1  0843               	movf	?___ftadd+2,w
 14937  09F2  00D0               	movwf	___fttol@f1+2
 14938  09F3  318D  2589         	fcall	___fttol
 14939  09F5  0020               	movlb	0	; select bank0
 14940  09F6  084E               	movf	?___fttol,w
 14941  09F7  0008               	return
 14942  09F8                     __end_of_setPercentValue:	
 14943                           
 14944                           	psect	text97
 14945  0D89                     __ptext97:	
 14946 ;; *************** function ___fttol *****************
 14947 ;; Defined at:
 14948 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14949 ;; Parameters:    Size  Location     Type
 14950 ;;  f1              3   46[BANK0 ] float 
 14951 ;; Auto vars:     Size  Location     Type
 14952 ;;  lval            4   55[BANK0 ] unsigned long 
 14953 ;;  exp1            1   59[BANK0 ] unsigned char 
 14954 ;;  sign1           1   54[BANK0 ] unsigned char 
 14955 ;; Return value:  Size  Location     Type
 14956 ;;                  4   46[BANK0 ] long 
 14957 ;; Registers used:
 14958 ;;		wreg, status,2, status,0
 14959 ;; Tracked objects:
 14960 ;;		On entry : 0/0
 14961 ;;		On exit  : 0/0
 14962 ;;		Unchanged: 0/0
 14963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14964 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14965 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14966 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14967 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14968 ;;Total ram usage:       14 bytes
 14969 ;; Hardware stack levels used:    1
 14970 ;; Hardware stack levels required when called:    4
 14971 ;; This function calls:
 14972 ;;		Nothing
 14973 ;; This function is called by:
 14974 ;;		_getPercentValue
 14975 ;;		_setPercentValue
 14976 ;; This function uses a non-reentrant model
 14977 ;;
 14978                           
 14979                           
 14980                           ;psect for function ___fttol
 14981  0D89                     ___fttol:	
 14982                           
 14983                           ;incstack = 0
 14984                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14985  0D89  0020               	movlb	0	; select bank0
 14986  0D8A  084E               	movf	___fttol@f1,w
 14987  0D8B  00D2               	movwf	??___fttol
 14988  0D8C  084F               	movf	___fttol@f1+1,w
 14989  0D8D  00D3               	movwf	??___fttol+1
 14990  0D8E  0850               	movf	___fttol@f1+2,w
 14991  0D8F  00D4               	movwf	??___fttol+2
 14992  0D90  1003               	clrc
 14993  0D91  0D53               	rlf	??___fttol+1,w
 14994  0D92  0D54               	rlf	??___fttol+2,w
 14995  0D93  00D5               	movwf	??___fttol+3
 14996  0D94  0855               	movf	??___fttol+3,w
 14997  0D95  00DB               	movwf	___fttol@exp1
 14998  0D96  08DB               	movf	___fttol@exp1,f
 14999  0D97  1D03               	skipz
 15000  0D98  2DA2               	goto	l8797
 15001  0D99  3000               	movlw	0
 15002  0D9A  00D1               	movwf	?___fttol+3
 15003  0D9B  3000               	movlw	0
 15004  0D9C  00D0               	movwf	?___fttol+2
 15005  0D9D  3000               	movlw	0
 15006  0D9E  00CF               	movwf	?___fttol+1
 15007  0D9F  3000               	movlw	0
 15008  0DA0  00CE               	movwf	?___fttol
 15009  0DA1  0008               	return
 15010  0DA2                     l8797:	
 15011  0DA2  084E               	movf	___fttol@f1,w
 15012  0DA3  00D2               	movwf	??___fttol
 15013  0DA4  084F               	movf	___fttol@f1+1,w
 15014  0DA5  00D3               	movwf	??___fttol+1
 15015  0DA6  0850               	movf	___fttol@f1+2,w
 15016  0DA7  00D4               	movwf	??___fttol+2
 15017  0DA8  3017               	movlw	23
 15018  0DA9                     u9325:	
 15019  0DA9  36D4               	lsrf	??___fttol+2,f
 15020  0DAA  0CD3               	rrf	??___fttol+1,f
 15021  0DAB  0CD2               	rrf	??___fttol,f
 15022  0DAC  0B89               	decfsz	9,f
 15023  0DAD  2DA9               	goto	u9325
 15024  0DAE  0852               	movf	??___fttol,w
 15025  0DAF  00D5               	movwf	??___fttol+3
 15026  0DB0  0855               	movf	??___fttol+3,w
 15027  0DB1  00D6               	movwf	___fttol@sign1
 15028  0DB2  17CF               	bsf	___fttol@f1+1,7
 15029  0DB3  30FF               	movlw	255
 15030  0DB4  05CE               	andwf	___fttol@f1,f
 15031  0DB5  30FF               	movlw	255
 15032  0DB6  05CF               	andwf	___fttol@f1+1,f
 15033  0DB7  3000               	movlw	0
 15034  0DB8  05D0               	andwf	___fttol@f1+2,f
 15035  0DB9  084E               	movf	___fttol@f1,w
 15036  0DBA  00D7               	movwf	___fttol@lval
 15037  0DBB  084F               	movf	___fttol@f1+1,w
 15038  0DBC  00D8               	movwf	___fttol@lval+1
 15039  0DBD  0850               	movf	___fttol@f1+2,w
 15040  0DBE  00D9               	movwf	___fttol@lval+2
 15041  0DBF  01DA               	clrf	___fttol@lval+3
 15042  0DC0  308E               	movlw	142
 15043  0DC1  02DB               	subwf	___fttol@exp1,f
 15044  0DC2  1FDB               	btfss	___fttol@exp1,7
 15045  0DC3  2DE0               	goto	l8817
 15046  0DC4  085B               	movf	___fttol@exp1,w
 15047  0DC5  3A80               	xorlw	128
 15048  0DC6  3E8F               	addlw	143
 15049  0DC7  1803               	skipnc
 15050  0DC8  2DD2               	goto	l8815
 15051  0DC9  3000               	movlw	0
 15052  0DCA  00D1               	movwf	?___fttol+3
 15053  0DCB  3000               	movlw	0
 15054  0DCC  00D0               	movwf	?___fttol+2
 15055  0DCD  3000               	movlw	0
 15056  0DCE  00CF               	movwf	?___fttol+1
 15057  0DCF  3000               	movlw	0
 15058  0DD0  00CE               	movwf	?___fttol
 15059  0DD1  0008               	return
 15060  0DD2                     l8815:	
 15061  0DD2  3001               	movlw	1
 15062  0DD3                     u9355:	
 15063  0DD3  36DA               	lsrf	___fttol@lval+3,f
 15064  0DD4  0CD9               	rrf	___fttol@lval+2,f
 15065  0DD5  0CD8               	rrf	___fttol@lval+1,f
 15066  0DD6  0CD7               	rrf	___fttol@lval,f
 15067  0DD7  0B89               	decfsz	9,f
 15068  0DD8  2DD3               	goto	u9355
 15069  0DD9  3001               	movlw	1
 15070  0DDA  00D2               	movwf	??___fttol
 15071  0DDB  0852               	movf	??___fttol,w
 15072  0DDC  07DB               	addwf	___fttol@exp1,f
 15073  0DDD  1903               	btfsc	3,2
 15074  0DDE  2DF9               	goto	l8827
 15075  0DDF  2DD2               	goto	l8815
 15076  0DE0                     l8817:	
 15077  0DE0  3018               	movlw	24
 15078  0DE1  025B               	subwf	___fttol@exp1,w
 15079  0DE2  1C03               	skipc
 15080  0DE3  2DF6               	goto	l8825
 15081  0DE4  3000               	movlw	0
 15082  0DE5  00D1               	movwf	?___fttol+3
 15083  0DE6  3000               	movlw	0
 15084  0DE7  00D0               	movwf	?___fttol+2
 15085  0DE8  3000               	movlw	0
 15086  0DE9  00CF               	movwf	?___fttol+1
 15087  0DEA  3000               	movlw	0
 15088  0DEB  00CE               	movwf	?___fttol
 15089  0DEC  0008               	return
 15090  0DED                     l8823:	
 15091  0DED  3001               	movlw	1
 15092  0DEE                     u9385:	
 15093  0DEE  35D7               	lslf	___fttol@lval,f
 15094  0DEF  0DD8               	rlf	___fttol@lval+1,f
 15095  0DF0  0DD9               	rlf	___fttol@lval+2,f
 15096  0DF1  0DDA               	rlf	___fttol@lval+3,f
 15097  0DF2  0B89               	decfsz	9,f
 15098  0DF3  2DEE               	goto	u9385
 15099  0DF4  3001               	movlw	1
 15100  0DF5  02DB               	subwf	___fttol@exp1,f
 15101  0DF6                     l8825:	
 15102  0DF6  08DB               	movf	___fttol@exp1,f
 15103  0DF7  1D03               	skipz
 15104  0DF8  2DED               	goto	l8823
 15105  0DF9                     l8827:	
 15106  0DF9  0856               	movf	___fttol@sign1,w
 15107  0DFA  1903               	btfsc	3,2
 15108  0DFB  2E07               	goto	l8831
 15109  0DFC  09D7               	comf	___fttol@lval,f
 15110  0DFD  09D8               	comf	___fttol@lval+1,f
 15111  0DFE  09D9               	comf	___fttol@lval+2,f
 15112  0DFF  09DA               	comf	___fttol@lval+3,f
 15113  0E00  0AD7               	incf	___fttol@lval,f
 15114  0E01  1903               	skipnz
 15115  0E02  0AD8               	incf	___fttol@lval+1,f
 15116  0E03  1903               	skipnz
 15117  0E04  0AD9               	incf	___fttol@lval+2,f
 15118  0E05  1903               	skipnz
 15119  0E06  0ADA               	incf	___fttol@lval+3,f
 15120  0E07                     l8831:	
 15121  0E07  085A               	movf	___fttol@lval+3,w
 15122  0E08  00D1               	movwf	?___fttol+3
 15123  0E09  0859               	movf	___fttol@lval+2,w
 15124  0E0A  00D0               	movwf	?___fttol+2
 15125  0E0B  0858               	movf	___fttol@lval+1,w
 15126  0E0C  00CF               	movwf	?___fttol+1
 15127  0E0D  0857               	movf	___fttol@lval,w
 15128  0E0E  00CE               	movwf	?___fttol
 15129  0E0F  0008               	return
 15130  0E10                     __end_of___fttol:	
 15131                           
 15132                           	psect	text98
 15133  1B23                     __ptext98:	
 15134 ;; *************** function ___ftneg *****************
 15135 ;; Defined at:
 15136 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 15137 ;; Parameters:    Size  Location     Type
 15138 ;;  f1              3   30[BANK0 ] float 
 15139 ;; Auto vars:     Size  Location     Type
 15140 ;;		None
 15141 ;; Return value:  Size  Location     Type
 15142 ;;                  3   30[BANK0 ] float 
 15143 ;; Registers used:
 15144 ;;		wreg
 15145 ;; Tracked objects:
 15146 ;;		On entry : 0/0
 15147 ;;		On exit  : 0/0
 15148 ;;		Unchanged: 0/0
 15149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15150 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15153 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;Total ram usage:        3 bytes
 15155 ;; Hardware stack levels used:    1
 15156 ;; Hardware stack levels required when called:    4
 15157 ;; This function calls:
 15158 ;;		Nothing
 15159 ;; This function is called by:
 15160 ;;		_getPercentValue
 15161 ;;		_setPercentValue
 15162 ;; This function uses a non-reentrant model
 15163 ;;
 15164                           
 15165                           
 15166                           ;psect for function ___ftneg
 15167  1B23                     ___ftneg:	
 15168                           
 15169                           ;incstack = 0
 15170                           ; Regs used in ___ftneg: [wreg]
 15171  1B23  0020               	movlb	0	; select bank0
 15172  1B24  0840               	movf	___ftneg@f1+2,w
 15173  1B25  043F               	iorwf	___ftneg@f1+1,w
 15174  1B26  043E               	iorwf	___ftneg@f1,w
 15175  1B27  1903               	skipnz
 15176  1B28  0008               	return
 15177  1B29  3080               	movlw	128
 15178  1B2A  06C0               	xorwf	___ftneg@f1+2,f
 15179  1B2B  0008               	return
 15180  1B2C                     __end_of___ftneg:	
 15181                           
 15182                           	psect	text99
 15183  0EA7                     __ptext99:	
 15184 ;; *************** function ___ftdiv *****************
 15185 ;; Defined at:
 15186 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15187 ;; Parameters:    Size  Location     Type
 15188 ;;  f2              3   14[BANK0 ] float 
 15189 ;;  f1              3   17[BANK0 ] float 
 15190 ;; Auto vars:     Size  Location     Type
 15191 ;;  f3              3   25[BANK0 ] float 
 15192 ;;  sign            1   29[BANK0 ] unsigned char 
 15193 ;;  exp             1   28[BANK0 ] unsigned char 
 15194 ;;  cntr            1   24[BANK0 ] unsigned char 
 15195 ;; Return value:  Size  Location     Type
 15196 ;;                  3   14[BANK0 ] float 
 15197 ;; Registers used:
 15198 ;;		wreg, status,2, status,0, pclath, cstack
 15199 ;; Tracked objects:
 15200 ;;		On entry : 0/0
 15201 ;;		On exit  : 0/0
 15202 ;;		Unchanged: 0/0
 15203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15204 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15205 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15207 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15208 ;;Total ram usage:       16 bytes
 15209 ;; Hardware stack levels used:    1
 15210 ;; Hardware stack levels required when called:    5
 15211 ;; This function calls:
 15212 ;;		___ftpack
 15213 ;; This function is called by:
 15214 ;;		_getPercentValue
 15215 ;;		_setPercentValue
 15216 ;; This function uses a non-reentrant model
 15217 ;;
 15218                           
 15219                           
 15220                           ;psect for function ___ftdiv
 15221  0EA7                     ___ftdiv:	
 15222                           
 15223                           ;incstack = 0
 15224                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15225  0EA7  0020               	movlb	0	; select bank0
 15226  0EA8  0831               	movf	___ftdiv@f1,w
 15227  0EA9  00B4               	movwf	??___ftdiv
 15228  0EAA  0832               	movf	___ftdiv@f1+1,w
 15229  0EAB  00B5               	movwf	??___ftdiv+1
 15230  0EAC  0833               	movf	___ftdiv@f1+2,w
 15231  0EAD  00B6               	movwf	??___ftdiv+2
 15232  0EAE  1003               	clrc
 15233  0EAF  0D35               	rlf	??___ftdiv+1,w
 15234  0EB0  0D36               	rlf	??___ftdiv+2,w
 15235  0EB1  00B7               	movwf	??___ftdiv+3
 15236  0EB2  0837               	movf	??___ftdiv+3,w
 15237  0EB3  00BC               	movwf	___ftdiv@exp
 15238  0EB4  08BC               	movf	___ftdiv@exp,f
 15239  0EB5  1D03               	skipz
 15240  0EB6  2EBE               	goto	l8697
 15241  0EB7  3000               	movlw	0
 15242  0EB8  00AE               	movwf	?___ftdiv
 15243  0EB9  3000               	movlw	0
 15244  0EBA  00AF               	movwf	?___ftdiv+1
 15245  0EBB  3000               	movlw	0
 15246  0EBC  00B0               	movwf	?___ftdiv+2
 15247  0EBD  0008               	return
 15248  0EBE                     l8697:	
 15249  0EBE  082E               	movf	___ftdiv@f2,w
 15250  0EBF  00B4               	movwf	??___ftdiv
 15251  0EC0  082F               	movf	___ftdiv@f2+1,w
 15252  0EC1  00B5               	movwf	??___ftdiv+1
 15253  0EC2  0830               	movf	___ftdiv@f2+2,w
 15254  0EC3  00B6               	movwf	??___ftdiv+2
 15255  0EC4  1003               	clrc
 15256  0EC5  0D35               	rlf	??___ftdiv+1,w
 15257  0EC6  0D36               	rlf	??___ftdiv+2,w
 15258  0EC7  00B7               	movwf	??___ftdiv+3
 15259  0EC8  0837               	movf	??___ftdiv+3,w
 15260  0EC9  00BD               	movwf	___ftdiv@sign
 15261  0ECA  08BD               	movf	___ftdiv@sign,f
 15262  0ECB  1D03               	skipz
 15263  0ECC  2ED4               	goto	l8703
 15264  0ECD  3000               	movlw	0
 15265  0ECE  00AE               	movwf	?___ftdiv
 15266  0ECF  3000               	movlw	0
 15267  0ED0  00AF               	movwf	?___ftdiv+1
 15268  0ED1  3000               	movlw	0
 15269  0ED2  00B0               	movwf	?___ftdiv+2
 15270  0ED3  0008               	return
 15271  0ED4                     l8703:	
 15272  0ED4  3000               	movlw	0
 15273  0ED5  00B9               	movwf	___ftdiv@f3
 15274  0ED6  3000               	movlw	0
 15275  0ED7  00BA               	movwf	___ftdiv@f3+1
 15276  0ED8  3000               	movlw	0
 15277  0ED9  00BB               	movwf	___ftdiv@f3+2
 15278  0EDA  3089               	movlw	137
 15279  0EDB  073D               	addwf	___ftdiv@sign,w
 15280  0EDC  00B4               	movwf	??___ftdiv
 15281  0EDD  0834               	movf	??___ftdiv,w
 15282  0EDE  02BC               	subwf	___ftdiv@exp,f
 15283  0EDF  0831               	movf	___ftdiv@f1,w
 15284  0EE0  00B4               	movwf	??___ftdiv
 15285  0EE1  0832               	movf	___ftdiv@f1+1,w
 15286  0EE2  00B5               	movwf	??___ftdiv+1
 15287  0EE3  0833               	movf	___ftdiv@f1+2,w
 15288  0EE4  00B6               	movwf	??___ftdiv+2
 15289  0EE5  3010               	movlw	16
 15290  0EE6                     u9125:	
 15291  0EE6  36B6               	lsrf	??___ftdiv+2,f
 15292  0EE7  0CB5               	rrf	??___ftdiv+1,f
 15293  0EE8  0CB4               	rrf	??___ftdiv,f
 15294  0EE9  0B89               	decfsz	9,f
 15295  0EEA  2EE6               	goto	u9125
 15296  0EEB  0834               	movf	??___ftdiv,w
 15297  0EEC  00B7               	movwf	??___ftdiv+3
 15298  0EED  0837               	movf	??___ftdiv+3,w
 15299  0EEE  00BD               	movwf	___ftdiv@sign
 15300  0EEF  082E               	movf	___ftdiv@f2,w
 15301  0EF0  00B4               	movwf	??___ftdiv
 15302  0EF1  082F               	movf	___ftdiv@f2+1,w
 15303  0EF2  00B5               	movwf	??___ftdiv+1
 15304  0EF3  0830               	movf	___ftdiv@f2+2,w
 15305  0EF4  00B6               	movwf	??___ftdiv+2
 15306  0EF5  3010               	movlw	16
 15307  0EF6                     u9135:	
 15308  0EF6  36B6               	lsrf	??___ftdiv+2,f
 15309  0EF7  0CB5               	rrf	??___ftdiv+1,f
 15310  0EF8  0CB4               	rrf	??___ftdiv,f
 15311  0EF9  0B89               	decfsz	9,f
 15312  0EFA  2EF6               	goto	u9135
 15313  0EFB  0834               	movf	??___ftdiv,w
 15314  0EFC  00B7               	movwf	??___ftdiv+3
 15315  0EFD  0837               	movf	??___ftdiv+3,w
 15316  0EFE  06BD               	xorwf	___ftdiv@sign,f
 15317  0EFF  3080               	movlw	128
 15318  0F00  00B4               	movwf	??___ftdiv
 15319  0F01  0834               	movf	??___ftdiv,w
 15320  0F02  05BD               	andwf	___ftdiv@sign,f
 15321  0F03  17B2               	bsf	___ftdiv@f1+1,7
 15322  0F04  30FF               	movlw	255
 15323  0F05  05B1               	andwf	___ftdiv@f1,f
 15324  0F06  30FF               	movlw	255
 15325  0F07  05B2               	andwf	___ftdiv@f1+1,f
 15326  0F08  3000               	movlw	0
 15327  0F09  05B3               	andwf	___ftdiv@f1+2,f
 15328  0F0A  17AF               	bsf	___ftdiv@f2+1,7
 15329  0F0B  30FF               	movlw	255
 15330  0F0C  05AE               	andwf	___ftdiv@f2,f
 15331  0F0D  30FF               	movlw	255
 15332  0F0E  05AF               	andwf	___ftdiv@f2+1,f
 15333  0F0F  3000               	movlw	0
 15334  0F10  05B0               	andwf	___ftdiv@f2+2,f
 15335  0F11  3018               	movlw	24
 15336  0F12  00B4               	movwf	??___ftdiv
 15337  0F13  0834               	movf	??___ftdiv,w
 15338  0F14  00B8               	movwf	___ftdiv@cntr
 15339  0F15                     l8717:	
 15340  0F15  3001               	movlw	1
 15341  0F16                     u9145:	
 15342  0F16  35B9               	lslf	___ftdiv@f3,f
 15343  0F17  0DBA               	rlf	___ftdiv@f3+1,f
 15344  0F18  0DBB               	rlf	___ftdiv@f3+2,f
 15345  0F19  0B89               	decfsz	9,f
 15346  0F1A  2F16               	goto	u9145
 15347  0F1B  0830               	movf	___ftdiv@f2+2,w
 15348  0F1C  0233               	subwf	___ftdiv@f1+2,w
 15349  0F1D  1D03               	skipz
 15350  0F1E  2F25               	goto	u9155
 15351  0F1F  082F               	movf	___ftdiv@f2+1,w
 15352  0F20  0232               	subwf	___ftdiv@f1+1,w
 15353  0F21  1D03               	skipz
 15354  0F22  2F25               	goto	u9155
 15355  0F23  082E               	movf	___ftdiv@f2,w
 15356  0F24  0231               	subwf	___ftdiv@f1,w
 15357  0F25                     u9155:	
 15358  0F25  1C03               	skipc
 15359  0F26  2F2E               	goto	l8725
 15360  0F27  082E               	movf	___ftdiv@f2,w
 15361  0F28  02B1               	subwf	___ftdiv@f1,f
 15362  0F29  082F               	movf	___ftdiv@f2+1,w
 15363  0F2A  3BB2               	subwfb	___ftdiv@f1+1,f
 15364  0F2B  0830               	movf	___ftdiv@f2+2,w
 15365  0F2C  3BB3               	subwfb	___ftdiv@f1+2,f
 15366  0F2D  1439               	bsf	___ftdiv@f3,0
 15367  0F2E                     l8725:	
 15368  0F2E  3001               	movlw	1
 15369  0F2F                     u9165:	
 15370  0F2F  35B1               	lslf	___ftdiv@f1,f
 15371  0F30  0DB2               	rlf	___ftdiv@f1+1,f
 15372  0F31  0DB3               	rlf	___ftdiv@f1+2,f
 15373  0F32  0B89               	decfsz	9,f
 15374  0F33  2F2F               	goto	u9165
 15375  0F34  3001               	movlw	1
 15376  0F35  02B8               	subwf	___ftdiv@cntr,f
 15377  0F36  1D03               	btfss	3,2
 15378  0F37  2F15               	goto	l8717
 15379  0F38  0839               	movf	___ftdiv@f3,w
 15380  0F39  00A0               	movwf	___ftpack@arg
 15381  0F3A  083A               	movf	___ftdiv@f3+1,w
 15382  0F3B  00A1               	movwf	___ftpack@arg+1
 15383  0F3C  083B               	movf	___ftdiv@f3+2,w
 15384  0F3D  00A2               	movwf	___ftpack@arg+2
 15385  0F3E  083C               	movf	___ftdiv@exp,w
 15386  0F3F  00B4               	movwf	??___ftdiv
 15387  0F40  0834               	movf	??___ftdiv,w
 15388  0F41  00A3               	movwf	___ftpack@exp
 15389  0F42  083D               	movf	___ftdiv@sign,w
 15390  0F43  00B5               	movwf	??___ftdiv+1
 15391  0F44  0835               	movf	??___ftdiv+1,w
 15392  0F45  00A4               	movwf	___ftpack@sign
 15393  0F46  3188  20D0         	fcall	___ftpack
 15394  0F48  0020               	movlb	0	; select bank0
 15395  0F49  0820               	movf	?___ftpack,w
 15396  0F4A  00AE               	movwf	?___ftdiv
 15397  0F4B  0821               	movf	?___ftpack+1,w
 15398  0F4C  00AF               	movwf	?___ftdiv+1
 15399  0F4D  0822               	movf	?___ftpack+2,w
 15400  0F4E  00B0               	movwf	?___ftdiv+2
 15401  0F4F  0008               	return
 15402  0F50                     __end_of___ftdiv:	
 15403                           
 15404                           	psect	text100
 15405  0469                     __ptext100:	
 15406 ;; *************** function ___ftadd *****************
 15407 ;; Defined at:
 15408 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 15409 ;; Parameters:    Size  Location     Type
 15410 ;;  f1              3   33[BANK0 ] float 
 15411 ;;  f2              3   36[BANK0 ] float 
 15412 ;; Auto vars:     Size  Location     Type
 15413 ;;  exp1            1   45[BANK0 ] unsigned char 
 15414 ;;  exp2            1   44[BANK0 ] unsigned char 
 15415 ;;  sign            1   43[BANK0 ] unsigned char 
 15416 ;; Return value:  Size  Location     Type
 15417 ;;                  3   33[BANK0 ] float 
 15418 ;; Registers used:
 15419 ;;		wreg, status,2, status,0, pclath, cstack
 15420 ;; Tracked objects:
 15421 ;;		On entry : 0/0
 15422 ;;		On exit  : 0/0
 15423 ;;		Unchanged: 0/0
 15424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15425 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15426 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15427 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15428 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15429 ;;Total ram usage:       13 bytes
 15430 ;; Hardware stack levels used:    1
 15431 ;; Hardware stack levels required when called:    5
 15432 ;; This function calls:
 15433 ;;		___ftpack
 15434 ;; This function is called by:
 15435 ;;		_getPercentValue
 15436 ;;		_setPercentValue
 15437 ;; This function uses a non-reentrant model
 15438 ;;
 15439                           
 15440                           
 15441                           ;psect for function ___ftadd
 15442  0469                     ___ftadd:	
 15443                           
 15444                           ;incstack = 0
 15445                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 15446  0469  0020               	movlb	0	; select bank0
 15447  046A  0841               	movf	___ftadd@f1,w
 15448  046B  00C7               	movwf	??___ftadd
 15449  046C  0842               	movf	___ftadd@f1+1,w
 15450  046D  00C8               	movwf	??___ftadd+1
 15451  046E  0843               	movf	___ftadd@f1+2,w
 15452  046F  00C9               	movwf	??___ftadd+2
 15453  0470  1003               	clrc
 15454  0471  0D48               	rlf	??___ftadd+1,w
 15455  0472  0D49               	rlf	??___ftadd+2,w
 15456  0473  00CA               	movwf	??___ftadd+3
 15457  0474  084A               	movf	??___ftadd+3,w
 15458  0475  00CD               	movwf	___ftadd@exp1
 15459  0476  0844               	movf	___ftadd@f2,w
 15460  0477  00C7               	movwf	??___ftadd
 15461  0478  0845               	movf	___ftadd@f2+1,w
 15462  0479  00C8               	movwf	??___ftadd+1
 15463  047A  0846               	movf	___ftadd@f2+2,w
 15464  047B  00C9               	movwf	??___ftadd+2
 15465  047C  1003               	clrc
 15466  047D  0D48               	rlf	??___ftadd+1,w
 15467  047E  0D49               	rlf	??___ftadd+2,w
 15468  047F  00CA               	movwf	??___ftadd+3
 15469  0480  084A               	movf	??___ftadd+3,w
 15470  0481  00CC               	movwf	___ftadd@exp2
 15471  0482  084D               	movf	___ftadd@exp1,w
 15472  0483  1903               	btfsc	3,2
 15473  0484  2C91               	goto	l8627
 15474  0485  084C               	movf	___ftadd@exp2,w
 15475  0486  024D               	subwf	___ftadd@exp1,w
 15476  0487  1803               	skipnc
 15477  0488  2C98               	goto	l8631
 15478  0489  034D               	decf	___ftadd@exp1,w
 15479  048A  3AFF               	xorlw	255
 15480  048B  074C               	addwf	___ftadd@exp2,w
 15481  048C  00C7               	movwf	??___ftadd
 15482  048D  3019               	movlw	25
 15483  048E  0247               	subwf	??___ftadd,w
 15484  048F  1C03               	skipc
 15485  0490  2C98               	goto	l8631
 15486  0491                     l8627:	
 15487  0491  0844               	movf	___ftadd@f2,w
 15488  0492  00C1               	movwf	?___ftadd
 15489  0493  0845               	movf	___ftadd@f2+1,w
 15490  0494  00C2               	movwf	?___ftadd+1
 15491  0495  0846               	movf	___ftadd@f2+2,w
 15492  0496  00C3               	movwf	?___ftadd+2
 15493  0497  0008               	return
 15494  0498                     l8631:	
 15495  0498  084C               	movf	___ftadd@exp2,w
 15496  0499  1903               	btfsc	3,2
 15497  049A  0008               	return
 15498  049B  084D               	movf	___ftadd@exp1,w
 15499  049C  024C               	subwf	___ftadd@exp2,w
 15500  049D  1803               	skipnc
 15501  049E  2CA7               	goto	l8637
 15502  049F  034C               	decf	___ftadd@exp2,w
 15503  04A0  3AFF               	xorlw	255
 15504  04A1  074D               	addwf	___ftadd@exp1,w
 15505  04A2  00C7               	movwf	??___ftadd
 15506  04A3  3019               	movlw	25
 15507  04A4  0247               	subwf	??___ftadd,w
 15508  04A5  1803               	btfsc	3,0
 15509  04A6  0008               	return
 15510  04A7                     l8637:	
 15511  04A7  3006               	movlw	6
 15512  04A8  00C7               	movwf	??___ftadd
 15513  04A9  0847               	movf	??___ftadd,w
 15514  04AA  00CB               	movwf	___ftadd@sign
 15515  04AB  1BC3               	btfsc	___ftadd@f1+2,7
 15516  04AC  17CB               	bsf	___ftadd@sign,7
 15517  04AD  1BC6               	btfsc	___ftadd@f2+2,7
 15518  04AE  174B               	bsf	___ftadd@sign,6
 15519  04AF  17C2               	bsf	___ftadd@f1+1,7
 15520  04B0  30FF               	movlw	255
 15521  04B1  05C1               	andwf	___ftadd@f1,f
 15522  04B2  30FF               	movlw	255
 15523  04B3  05C2               	andwf	___ftadd@f1+1,f
 15524  04B4  3000               	movlw	0
 15525  04B5  05C3               	andwf	___ftadd@f1+2,f
 15526  04B6  17C5               	bsf	___ftadd@f2+1,7
 15527  04B7  30FF               	movlw	255
 15528  04B8  05C4               	andwf	___ftadd@f2,f
 15529  04B9  30FF               	movlw	255
 15530  04BA  05C5               	andwf	___ftadd@f2+1,f
 15531  04BB  3000               	movlw	0
 15532  04BC  05C6               	andwf	___ftadd@f2+2,f
 15533  04BD  084C               	movf	___ftadd@exp2,w
 15534  04BE  024D               	subwf	___ftadd@exp1,w
 15535  04BF  1803               	skipnc
 15536  04C0  2CE3               	goto	l8659
 15537  04C1                     l8649:	
 15538  04C1  3001               	movlw	1
 15539  04C2                     u8965:	
 15540  04C2  35C4               	lslf	___ftadd@f2,f
 15541  04C3  0DC5               	rlf	___ftadd@f2+1,f
 15542  04C4  0DC6               	rlf	___ftadd@f2+2,f
 15543  04C5  0B89               	decfsz	9,f
 15544  04C6  2CC2               	goto	u8965
 15545  04C7  3001               	movlw	1
 15546  04C8  02CC               	subwf	___ftadd@exp2,f
 15547  04C9  084C               	movf	___ftadd@exp2,w
 15548  04CA  064D               	xorwf	___ftadd@exp1,w
 15549  04CB  1903               	skipnz
 15550  04CC  2CDE               	goto	l8657
 15551  04CD  3001               	movlw	1
 15552  04CE  02CB               	subwf	___ftadd@sign,f
 15553  04CF  084B               	movf	___ftadd@sign,w
 15554  04D0  3907               	andlw	7
 15555  04D1  1903               	btfsc	3,2
 15556  04D2  2CDE               	goto	l8657
 15557  04D3  2CC1               	goto	l8649
 15558  04D4                     l8655:	
 15559  04D4  3001               	movlw	1
 15560  04D5                     u8995:	
 15561  04D5  36C3               	lsrf	___ftadd@f1+2,f
 15562  04D6  0CC2               	rrf	___ftadd@f1+1,f
 15563  04D7  0CC1               	rrf	___ftadd@f1,f
 15564  04D8  0B89               	decfsz	9,f
 15565  04D9  2CD5               	goto	u8995
 15566  04DA  3001               	movlw	1
 15567  04DB  00C7               	movwf	??___ftadd
 15568  04DC  0847               	movf	??___ftadd,w
 15569  04DD  07CD               	addwf	___ftadd@exp1,f
 15570  04DE                     l8657:	
 15571  04DE  084D               	movf	___ftadd@exp1,w
 15572  04DF  064C               	xorwf	___ftadd@exp2,w
 15573  04E0  1903               	btfsc	3,2
 15574  04E1  2D08               	goto	l3064
 15575  04E2  2CD4               	goto	l8655
 15576  04E3                     l8659:	
 15577  04E3  084D               	movf	___ftadd@exp1,w
 15578  04E4  024C               	subwf	___ftadd@exp2,w
 15579  04E5  1803               	skipnc
 15580  04E6  2D08               	goto	l3064
 15581  04E7                     l8661:	
 15582  04E7  3001               	movlw	1
 15583  04E8                     u9025:	
 15584  04E8  35C1               	lslf	___ftadd@f1,f
 15585  04E9  0DC2               	rlf	___ftadd@f1+1,f
 15586  04EA  0DC3               	rlf	___ftadd@f1+2,f
 15587  04EB  0B89               	decfsz	9,f
 15588  04EC  2CE8               	goto	u9025
 15589  04ED  3001               	movlw	1
 15590  04EE  02CD               	subwf	___ftadd@exp1,f
 15591  04EF  084C               	movf	___ftadd@exp2,w
 15592  04F0  064D               	xorwf	___ftadd@exp1,w
 15593  04F1  1903               	skipnz
 15594  04F2  2D04               	goto	l8669
 15595  04F3  3001               	movlw	1
 15596  04F4  02CB               	subwf	___ftadd@sign,f
 15597  04F5  084B               	movf	___ftadd@sign,w
 15598  04F6  3907               	andlw	7
 15599  04F7  1903               	btfsc	3,2
 15600  04F8  2D04               	goto	l8669
 15601  04F9  2CE7               	goto	l8661
 15602  04FA                     l8667:	
 15603  04FA  3001               	movlw	1
 15604  04FB                     u9055:	
 15605  04FB  36C6               	lsrf	___ftadd@f2+2,f
 15606  04FC  0CC5               	rrf	___ftadd@f2+1,f
 15607  04FD  0CC4               	rrf	___ftadd@f2,f
 15608  04FE  0B89               	decfsz	9,f
 15609  04FF  2CFB               	goto	u9055
 15610  0500  3001               	movlw	1
 15611  0501  00C7               	movwf	??___ftadd
 15612  0502  0847               	movf	??___ftadd,w
 15613  0503  07CC               	addwf	___ftadd@exp2,f
 15614  0504                     l8669:	
 15615  0504  084D               	movf	___ftadd@exp1,w
 15616  0505  064C               	xorwf	___ftadd@exp2,w
 15617  0506  1D03               	skipz
 15618  0507  2CFA               	goto	l8667
 15619  0508                     l3064:	
 15620  0508  1FCB               	btfss	___ftadd@sign,7
 15621  0509  2D1A               	goto	l8673
 15622  050A  30FF               	movlw	255
 15623  050B  06C1               	xorwf	___ftadd@f1,f
 15624  050C  30FF               	movlw	255
 15625  050D  06C2               	xorwf	___ftadd@f1+1,f
 15626  050E  30FF               	movlw	255
 15627  050F  06C3               	xorwf	___ftadd@f1+2,f
 15628  0510  3001               	movlw	1
 15629  0511  07C1               	addwf	___ftadd@f1,f
 15630  0512  3000               	movlw	0
 15631  0513  1803               	skipnc
 15632  0514  3001               	movlw	1
 15633  0515  07C2               	addwf	___ftadd@f1+1,f
 15634  0516  3000               	movlw	0
 15635  0517  1803               	skipnc
 15636  0518  3001               	movlw	1
 15637  0519  07C3               	addwf	___ftadd@f1+2,f
 15638  051A                     l8673:	
 15639  051A  1F4B               	btfss	___ftadd@sign,6
 15640  051B  2D2C               	goto	l8677
 15641  051C  30FF               	movlw	255
 15642  051D  06C4               	xorwf	___ftadd@f2,f
 15643  051E  30FF               	movlw	255
 15644  051F  06C5               	xorwf	___ftadd@f2+1,f
 15645  0520  30FF               	movlw	255
 15646  0521  06C6               	xorwf	___ftadd@f2+2,f
 15647  0522  3001               	movlw	1
 15648  0523  07C4               	addwf	___ftadd@f2,f
 15649  0524  3000               	movlw	0
 15650  0525  1803               	skipnc
 15651  0526  3001               	movlw	1
 15652  0527  07C5               	addwf	___ftadd@f2+1,f
 15653  0528  3000               	movlw	0
 15654  0529  1803               	skipnc
 15655  052A  3001               	movlw	1
 15656  052B  07C6               	addwf	___ftadd@f2+2,f
 15657  052C                     l8677:	
 15658  052C  01CB               	clrf	___ftadd@sign
 15659  052D  0841               	movf	___ftadd@f1,w
 15660  052E  07C4               	addwf	___ftadd@f2,f
 15661  052F  0842               	movf	___ftadd@f1+1,w
 15662  0530  3DC5               	addwfc	___ftadd@f2+1,f
 15663  0531  0843               	movf	___ftadd@f1+2,w
 15664  0532  3DC6               	addwfc	___ftadd@f2+2,f
 15665  0533  1FC6               	btfss	___ftadd@f2+2,7
 15666  0534  2D47               	goto	l8687
 15667  0535  30FF               	movlw	255
 15668  0536  06C4               	xorwf	___ftadd@f2,f
 15669  0537  30FF               	movlw	255
 15670  0538  06C5               	xorwf	___ftadd@f2+1,f
 15671  0539  30FF               	movlw	255
 15672  053A  06C6               	xorwf	___ftadd@f2+2,f
 15673  053B  3001               	movlw	1
 15674  053C  07C4               	addwf	___ftadd@f2,f
 15675  053D  3000               	movlw	0
 15676  053E  1803               	skipnc
 15677  053F  3001               	movlw	1
 15678  0540  07C5               	addwf	___ftadd@f2+1,f
 15679  0541  3000               	movlw	0
 15680  0542  1803               	skipnc
 15681  0543  3001               	movlw	1
 15682  0544  07C6               	addwf	___ftadd@f2+2,f
 15683  0545  01CB               	clrf	___ftadd@sign
 15684  0546  0ACB               	incf	___ftadd@sign,f
 15685  0547                     l8687:	
 15686  0547  0844               	movf	___ftadd@f2,w
 15687  0548  00A0               	movwf	___ftpack@arg
 15688  0549  0845               	movf	___ftadd@f2+1,w
 15689  054A  00A1               	movwf	___ftpack@arg+1
 15690  054B  0846               	movf	___ftadd@f2+2,w
 15691  054C  00A2               	movwf	___ftpack@arg+2
 15692  054D  084D               	movf	___ftadd@exp1,w
 15693  054E  00C7               	movwf	??___ftadd
 15694  054F  0847               	movf	??___ftadd,w
 15695  0550  00A3               	movwf	___ftpack@exp
 15696  0551  084B               	movf	___ftadd@sign,w
 15697  0552  00C8               	movwf	??___ftadd+1
 15698  0553  0848               	movf	??___ftadd+1,w
 15699  0554  00A4               	movwf	___ftpack@sign
 15700  0555  3188  20D0         	fcall	___ftpack
 15701  0557  0020               	movlb	0	; select bank0
 15702  0558  0820               	movf	?___ftpack,w
 15703  0559  00C1               	movwf	?___ftadd
 15704  055A  0821               	movf	?___ftpack+1,w
 15705  055B  00C2               	movwf	?___ftadd+1
 15706  055C  0822               	movf	?___ftpack+2,w
 15707  055D  00C3               	movwf	?___ftadd+2
 15708  055E  0008               	return
 15709  055F                     __end_of___ftadd:	
 15710                           
 15711                           	psect	text101
 15712  1F23                     __ptext101:	
 15713 ;; *************** function ___awtoft *****************
 15714 ;; Defined at:
 15715 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15716 ;; Parameters:    Size  Location     Type
 15717 ;;  c               2    8[BANK0 ] int 
 15718 ;; Auto vars:     Size  Location     Type
 15719 ;;  sign            1   13[BANK0 ] unsigned char 
 15720 ;; Return value:  Size  Location     Type
 15721 ;;                  3    8[BANK0 ] float 
 15722 ;; Registers used:
 15723 ;;		wreg, status,2, status,0, pclath, cstack
 15724 ;; Tracked objects:
 15725 ;;		On entry : 0/0
 15726 ;;		On exit  : 0/0
 15727 ;;		Unchanged: 0/0
 15728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15729 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15731 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15732 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15733 ;;Total ram usage:        6 bytes
 15734 ;; Hardware stack levels used:    1
 15735 ;; Hardware stack levels required when called:    5
 15736 ;; This function calls:
 15737 ;;		___ftpack
 15738 ;; This function is called by:
 15739 ;;		_getPercentValue
 15740 ;;		_setPercentValue
 15741 ;; This function uses a non-reentrant model
 15742 ;;
 15743                           
 15744                           
 15745                           ;psect for function ___awtoft
 15746  1F23                     ___awtoft:	
 15747                           
 15748                           ;incstack = 0
 15749                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15750  1F23  0020               	movlb	0	; select bank0
 15751  1F24  01AD               	clrf	___awtoft@sign
 15752  1F25  1FA9               	btfss	___awtoft@c+1,7
 15753  1F26  2F2E               	goto	l8615
 15754  1F27  09A8               	comf	___awtoft@c,f
 15755  1F28  09A9               	comf	___awtoft@c+1,f
 15756  1F29  0AA8               	incf	___awtoft@c,f
 15757  1F2A  1903               	skipnz
 15758  1F2B  0AA9               	incf	___awtoft@c+1,f
 15759  1F2C  01AD               	clrf	___awtoft@sign
 15760  1F2D  0AAD               	incf	___awtoft@sign,f
 15761  1F2E                     l8615:	
 15762  1F2E  0828               	movf	___awtoft@c,w
 15763  1F2F  00A0               	movwf	___ftpack@arg
 15764  1F30  0829               	movf	___awtoft@c+1,w
 15765  1F31  00A1               	movwf	___ftpack@arg+1
 15766  1F32  01A2               	clrf	___ftpack@arg+2
 15767  1F33  308E               	movlw	142
 15768  1F34  00AB               	movwf	??___awtoft
 15769  1F35  082B               	movf	??___awtoft,w
 15770  1F36  00A3               	movwf	___ftpack@exp
 15771  1F37  082D               	movf	___awtoft@sign,w
 15772  1F38  00AC               	movwf	??___awtoft+1
 15773  1F39  082C               	movf	??___awtoft+1,w
 15774  1F3A  00A4               	movwf	___ftpack@sign
 15775  1F3B  3188  20D0         	fcall	___ftpack
 15776  1F3D  0020               	movlb	0	; select bank0
 15777  1F3E  0820               	movf	?___ftpack,w
 15778  1F3F  00A8               	movwf	?___awtoft
 15779  1F40  0821               	movf	?___ftpack+1,w
 15780  1F41  00A9               	movwf	?___awtoft+1
 15781  1F42  0822               	movf	?___ftpack+2,w
 15782  1F43  00AA               	movwf	?___awtoft+2
 15783  1F44  0008               	return
 15784  1F45                     __end_of___awtoft:	
 15785                           
 15786                           	psect	text102
 15787  08D0                     __ptext102:	
 15788 ;; *************** function ___ftpack *****************
 15789 ;; Defined at:
 15790 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15791 ;; Parameters:    Size  Location     Type
 15792 ;;  arg             3    0[BANK0 ] unsigned um
 15793 ;;  exp             1    3[BANK0 ] unsigned char 
 15794 ;;  sign            1    4[BANK0 ] unsigned char 
 15795 ;; Auto vars:     Size  Location     Type
 15796 ;;		None
 15797 ;; Return value:  Size  Location     Type
 15798 ;;                  3    0[BANK0 ] float 
 15799 ;; Registers used:
 15800 ;;		wreg, status,2, status,0
 15801 ;; Tracked objects:
 15802 ;;		On entry : 0/0
 15803 ;;		On exit  : 0/0
 15804 ;;		Unchanged: 0/0
 15805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15806 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15808 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15809 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15810 ;;Total ram usage:        8 bytes
 15811 ;; Hardware stack levels used:    1
 15812 ;; Hardware stack levels required when called:    4
 15813 ;; This function calls:
 15814 ;;		Nothing
 15815 ;; This function is called by:
 15816 ;;		___awtoft
 15817 ;;		___ftadd
 15818 ;;		___ftdiv
 15819 ;;		___ftmul
 15820 ;; This function uses a non-reentrant model
 15821 ;;
 15822                           
 15823                           
 15824                           ;psect for function ___ftpack
 15825  08D0                     ___ftpack:	
 15826                           
 15827                           ;incstack = 0
 15828                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15829  08D0  0020               	movlb	0	; select bank0
 15830  08D1  0823               	movf	___ftpack@exp,w
 15831  08D2  1903               	btfsc	3,2
 15832  08D3  28D9               	goto	l8565
 15833  08D4  0822               	movf	___ftpack@arg+2,w
 15834  08D5  0421               	iorwf	___ftpack@arg+1,w
 15835  08D6  0420               	iorwf	___ftpack@arg,w
 15836  08D7  1D03               	skipz
 15837  08D8  28EA               	goto	l8571
 15838  08D9                     l8565:	
 15839  08D9  3000               	movlw	0
 15840  08DA  00A0               	movwf	?___ftpack
 15841  08DB  3000               	movlw	0
 15842  08DC  00A1               	movwf	?___ftpack+1
 15843  08DD  3000               	movlw	0
 15844  08DE  00A2               	movwf	?___ftpack+2
 15845  08DF  0008               	return
 15846  08E0                     l8569:	
 15847  08E0  3001               	movlw	1
 15848  08E1  00A5               	movwf	??___ftpack
 15849  08E2  0825               	movf	??___ftpack,w
 15850  08E3  07A3               	addwf	___ftpack@exp,f
 15851  08E4  3001               	movlw	1
 15852  08E5                     u8755:	
 15853  08E5  36A2               	lsrf	___ftpack@arg+2,f
 15854  08E6  0CA1               	rrf	___ftpack@arg+1,f
 15855  08E7  0CA0               	rrf	___ftpack@arg,f
 15856  08E8  0B89               	decfsz	9,f
 15857  08E9  28E5               	goto	u8755
 15858  08EA                     l8571:	
 15859  08EA  30FE               	movlw	254
 15860  08EB  0522               	andwf	___ftpack@arg+2,w
 15861  08EC  1903               	btfsc	3,2
 15862  08ED  2903               	goto	l3035
 15863  08EE  28E0               	goto	l8569
 15864  08EF                     l8573:	
 15865  08EF  3001               	movlw	1
 15866  08F0  00A5               	movwf	??___ftpack
 15867  08F1  0825               	movf	??___ftpack,w
 15868  08F2  07A3               	addwf	___ftpack@exp,f
 15869  08F3  3001               	movlw	1
 15870  08F4  07A0               	addwf	___ftpack@arg,f
 15871  08F5  3000               	movlw	0
 15872  08F6  1803               	skipnc
 15873  08F7  3001               	movlw	1
 15874  08F8  07A1               	addwf	___ftpack@arg+1,f
 15875  08F9  3000               	movlw	0
 15876  08FA  1803               	skipnc
 15877  08FB  3001               	movlw	1
 15878  08FC  07A2               	addwf	___ftpack@arg+2,f
 15879  08FD  3001               	movlw	1
 15880  08FE                     u8775:	
 15881  08FE  36A2               	lsrf	___ftpack@arg+2,f
 15882  08FF  0CA1               	rrf	___ftpack@arg+1,f
 15883  0900  0CA0               	rrf	___ftpack@arg,f
 15884  0901  0B89               	decfsz	9,f
 15885  0902  28FE               	goto	u8775
 15886  0903                     l3035:	
 15887  0903  30FF               	movlw	255
 15888  0904  0522               	andwf	___ftpack@arg+2,w
 15889  0905  1903               	btfsc	3,2
 15890  0906  2910               	goto	l8581
 15891  0907  28EF               	goto	l8573
 15892  0908                     l8579:	
 15893  0908  3001               	movlw	1
 15894  0909  02A3               	subwf	___ftpack@exp,f
 15895  090A  3001               	movlw	1
 15896  090B                     u8795:	
 15897  090B  35A0               	lslf	___ftpack@arg,f
 15898  090C  0DA1               	rlf	___ftpack@arg+1,f
 15899  090D  0DA2               	rlf	___ftpack@arg+2,f
 15900  090E  0B89               	decfsz	9,f
 15901  090F  290B               	goto	u8795
 15902  0910                     l8581:	
 15903  0910  1FA1               	btfss	___ftpack@arg+1,7
 15904  0911  2908               	goto	l8579
 15905  0912  1823               	btfsc	___ftpack@exp,0
 15906  0913  291A               	goto	l3041
 15907  0914  30FF               	movlw	255
 15908  0915  05A0               	andwf	___ftpack@arg,f
 15909  0916  307F               	movlw	127
 15910  0917  05A1               	andwf	___ftpack@arg+1,f
 15911  0918  30FF               	movlw	255
 15912  0919  05A2               	andwf	___ftpack@arg+2,f
 15913  091A                     l3041:	
 15914  091A  1003               	clrc
 15915  091B  0CA3               	rrf	___ftpack@exp,f
 15916  091C  0823               	movf	___ftpack@exp,w
 15917  091D  00A5               	movwf	??___ftpack
 15918  091E  01A6               	clrf	??___ftpack+1
 15919  091F  01A7               	clrf	??___ftpack+2
 15920  0920  3010               	movlw	16
 15921  0921                     u8825:	
 15922  0921  35A5               	lslf	??___ftpack,f
 15923  0922  0DA6               	rlf	??___ftpack+1,f
 15924  0923  0DA7               	rlf	??___ftpack+2,f
 15925  0924  0B89               	decfsz	9,f
 15926  0925  2921               	goto	u8825
 15927  0926  0825               	movf	??___ftpack,w
 15928  0927  04A0               	iorwf	___ftpack@arg,f
 15929  0928  0826               	movf	??___ftpack+1,w
 15930  0929  04A1               	iorwf	___ftpack@arg+1,f
 15931  092A  0827               	movf	??___ftpack+2,w
 15932  092B  04A2               	iorwf	___ftpack@arg+2,f
 15933  092C  0824               	movf	___ftpack@sign,w
 15934  092D  1903               	btfsc	3,2
 15935  092E  0008               	return
 15936  092F  17A2               	bsf	___ftpack@arg+2,7
 15937  0930  0008               	return
 15938  0931                     __end_of___ftpack:	
 15939                           
 15940                           	psect	text103
 15941  15F4                     __ptext103:	
 15942 ;; *************** function _setLED *****************
 15943 ;; Defined at:
 15944 ;;		line 76 in file "../src/LED_B1.c"
 15945 ;; Parameters:    Size  Location     Type
 15946 ;;  led             1    wreg     unsigned char 
 15947 ;;  command         1    2[BANK0 ] unsigned char 
 15948 ;; Auto vars:     Size  Location     Type
 15949 ;;  led             1    3[BANK0 ] unsigned char 
 15950 ;; Return value:  Size  Location     Type
 15951 ;;		None               void
 15952 ;; Registers used:
 15953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15954 ;; Tracked objects:
 15955 ;;		On entry : 0/0
 15956 ;;		On exit  : 0/0
 15957 ;;		Unchanged: 0/0
 15958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15959 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15960 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15962 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15963 ;;Total ram usage:        2 bytes
 15964 ;; Hardware stack levels used:    1
 15965 ;; Hardware stack levels required when called:    5
 15966 ;; This function calls:
 15967 ;;		_LedPointSelect
 15968 ;; This function is called by:
 15969 ;;		_setDimmerLights
 15970 ;;		_setLED_Initialization
 15971 ;;		_Exception_Main
 15972 ;;		_setSw_Initialization
 15973 ;; This function uses a non-reentrant model
 15974 ;;
 15975                           
 15976                           
 15977                           ;psect for function _setLED
 15978  15F4                     _setLED:	
 15979                           
 15980                           ;incstack = 0
 15981                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15982                           ;setLED@led stored from wreg
 15983  15F4  0020               	movlb	0	; select bank0
 15984  15F5  00A3               	movwf	setLED@led
 15985                           
 15986                           ;LED_B1.c: 77: LedPointSelect(led);
 15987  15F6  0823               	movf	setLED@led,w
 15988  15F7  319E  26A3  3195   	fcall	_LedPointSelect
 15989                           
 15990                           ;LED_B1.c: 78: if (command == 0) {
 15991  15FA  0020               	movlb	0	; select bank0
 15992  15FB  08A2               	movf	setLED@command,f
 15993  15FC  1D03               	skipz
 15994  15FD  2E0B               	goto	l9431
 15995                           
 15996                           ;LED_B1.c: 80: if (led == 1) {
 15997  15FE  0823               	movf	setLED@led,w
 15998  15FF  3A01               	xorlw	1
 15999  1600  1D03               	skipz
 16000  1601  2E03               	goto	l9423
 16001                           
 16002                           ;LED_B1.c: 84: RA3 = 1;
 16003  1602  158C               	bsf	12,3	;volatile
 16004  1603                     l9423:	
 16005                           
 16006                           ;LED_B1.c: 86: }
 16007                           ;LED_B1.c: 89: if (led == 2) {
 16008  1603  0823               	movf	setLED@led,w
 16009  1604  3A02               	xorlw	2
 16010  1605  1903               	btfsc	3,2
 16011                           
 16012                           ;LED_B1.c: 93: RC7 = 1;
 16013  1606  178E               	bsf	14,7	;volatile
 16014                           
 16015                           ;LED_B1.c: 95: }
 16016                           ;LED_B1.c: 107: if (led == 99) {
 16017  1607  0823               	movf	setLED@led,w
 16018  1608  3A63               	xorlw	99
 16019  1609  1903               	btfsc	3,2
 16020                           
 16021                           ;LED_B1.c: 111: RB5 = 1;
 16022  160A  168D               	bsf	13,5	;volatile
 16023  160B                     l9431:	
 16024                           
 16025                           ;LED_B1.c: 113: }
 16026                           ;LED_B1.c: 115: }
 16027                           ;LED_B1.c: 116: if (command == 1) {
 16028  160B  0822               	movf	setLED@command,w
 16029  160C  3A01               	xorlw	1
 16030  160D  1D03               	skipz
 16031  160E  2E1C               	goto	l9445
 16032                           
 16033                           ;LED_B1.c: 118: if (led == 1) {
 16034  160F  0823               	movf	setLED@led,w
 16035  1610  3A01               	xorlw	1
 16036  1611  1D03               	skipz
 16037  1612  2E14               	goto	l9437
 16038                           
 16039                           ;LED_B1.c: 122: RA3 = 0;
 16040  1613  118C               	bcf	12,3	;volatile
 16041  1614                     l9437:	
 16042                           
 16043                           ;LED_B1.c: 124: }
 16044                           ;LED_B1.c: 127: if (led == 2) {
 16045  1614  0823               	movf	setLED@led,w
 16046  1615  3A02               	xorlw	2
 16047  1616  1903               	btfsc	3,2
 16048                           
 16049                           ;LED_B1.c: 131: RC7 = 0;
 16050  1617  138E               	bcf	14,7	;volatile
 16051                           
 16052                           ;LED_B1.c: 133: }
 16053                           ;LED_B1.c: 145: if (led == 99) {
 16054  1618  0823               	movf	setLED@led,w
 16055  1619  3A63               	xorlw	99
 16056  161A  1903               	btfsc	3,2
 16057                           
 16058                           ;LED_B1.c: 149: RB5 = 0;
 16059  161B  128D               	bcf	13,5	;volatile
 16060  161C                     l9445:	
 16061                           
 16062                           ;LED_B1.c: 151: }
 16063                           ;LED_B1.c: 153: }
 16064                           ;LED_B1.c: 154: if (command == 10) {
 16065  161C  0822               	movf	setLED@command,w
 16066  161D  3A0A               	xorlw	10
 16067  161E  1D03               	skipz
 16068  161F  2E3C               	goto	l9461
 16069                           
 16070                           ;LED_B1.c: 155: LED->GO = 0;
 16071  1620  0021               	movlb	1	; select bank1
 16072  1621  084F               	movf	_LED^(0+128),w
 16073  1622  0086               	movwf	6
 16074  1623  3001               	movlw	1	; select bank2/3
 16075  1624  0087               	movwf	7
 16076  1625  1081               	bcf	1,1
 16077                           
 16078                           ;LED_B1.c: 156: LED->Time = 0;
 16079  1626  0A4F               	incf	_LED^(0+128),w
 16080  1627  0086               	movwf	6
 16081  1628  3001               	movlw	1	; select bank2/3
 16082  1629  0087               	movwf	7
 16083  162A  3000               	movlw	0
 16084  162B  3FC0               	movwi [0]fsr1
 16085  162C  3FC1               	movwi [1]fsr1
 16086                           
 16087                           ;LED_B1.c: 158: if (led == 1) {
 16088  162D  0020               	movlb	0	; select bank0
 16089  162E  0823               	movf	setLED@led,w
 16090  162F  3A01               	xorlw	1
 16091  1630  1D03               	skipz
 16092  1631  2E34               	goto	l9453
 16093                           
 16094                           ;LED_B1.c: 162: RA3 = 1;
 16095  1632  158C               	bsf	12,3	;volatile
 16096                           
 16097                           ;LED_B1.c: 164: }
 16098  1633  2E38               	goto	l9457
 16099  1634                     l9453:	
 16100                           
 16101                           ;LED_B1.c: 167: else if (led == 2) {
 16102  1634  0823               	movf	setLED@led,w
 16103  1635  3A02               	xorlw	2
 16104  1636  1903               	btfsc	3,2
 16105                           
 16106                           ;LED_B1.c: 171: RC7 = 1;
 16107  1637  178E               	bsf	14,7	;volatile
 16108  1638                     l9457:	
 16109                           
 16110                           ;LED_B1.c: 173: }
 16111                           ;LED_B1.c: 185: if (led == 99) {
 16112  1638  0823               	movf	setLED@led,w
 16113  1639  3A63               	xorlw	99
 16114  163A  1903               	btfsc	3,2
 16115                           
 16116                           ;LED_B1.c: 189: RB5 = 1;
 16117  163B  168D               	bsf	13,5	;volatile
 16118  163C                     l9461:	
 16119                           
 16120                           ;LED_B1.c: 191: }
 16121                           ;LED_B1.c: 193: }
 16122                           ;LED_B1.c: 194: if (command == 11) {
 16123  163C  0822               	movf	setLED@command,w
 16124  163D  3A0B               	xorlw	11
 16125  163E  1D03               	skipz
 16126  163F  0008               	return
 16127                           
 16128                           ;LED_B1.c: 195: LED->GO = 1;
 16129  1640  0021               	movlb	1	; select bank1
 16130  1641  084F               	movf	_LED^(0+128),w
 16131  1642  0086               	movwf	6
 16132  1643  3001               	movlw	1	; select bank2/3
 16133  1644  0087               	movwf	7
 16134  1645  1481               	bsf	1,1
 16135  1646  0008               	return
 16136  1647                     __end_of_setLED:	
 16137                           
 16138                           	psect	text104
 16139  1EA3                     __ptext104:	
 16140 ;; *************** function _LedPointSelect *****************
 16141 ;; Defined at:
 16142 ;;		line 7 in file "../src/LED_B1.c"
 16143 ;; Parameters:    Size  Location     Type
 16144 ;;  led             1    wreg     unsigned char 
 16145 ;; Auto vars:     Size  Location     Type
 16146 ;;  led             1    1[BANK0 ] unsigned char 
 16147 ;; Return value:  Size  Location     Type
 16148 ;;		None               void
 16149 ;; Registers used:
 16150 ;;		wreg
 16151 ;; Tracked objects:
 16152 ;;		On entry : 0/0
 16153 ;;		On exit  : 0/0
 16154 ;;		Unchanged: 0/0
 16155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16159 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16160 ;;Total ram usage:        2 bytes
 16161 ;; Hardware stack levels used:    1
 16162 ;; Hardware stack levels required when called:    4
 16163 ;; This function calls:
 16164 ;;		Nothing
 16165 ;; This function is called by:
 16166 ;;		_setLED_Initialization
 16167 ;;		_setLED
 16168 ;;		_setLED_Main
 16169 ;; This function uses a non-reentrant model
 16170 ;;
 16171                           
 16172                           
 16173                           ;psect for function _LedPointSelect
 16174  1EA3                     _LedPointSelect:	
 16175                           
 16176                           ;incstack = 0
 16177                           ; Regs used in _LedPointSelect: [wreg]
 16178                           ;LedPointSelect@led stored from wreg
 16179  1EA3  0020               	movlb	0	; select bank0
 16180  1EA4  00A1               	movwf	LedPointSelect@led
 16181                           
 16182                           ;LED_B1.c: 9: if (led == 1) {
 16183  1EA5  0821               	movf	LedPointSelect@led,w
 16184  1EA6  3A01               	xorlw	1
 16185  1EA7  1D03               	skipz
 16186  1EA8  2EAE               	goto	l1033
 16187                           
 16188                           ;LED_B1.c: 10: LED = &VarLED1;
 16189  1EA9  3063               	movlw	_VarLED1& (0+255)
 16190  1EAA  00A0               	movwf	??_LedPointSelect
 16191  1EAB  0820               	movf	??_LedPointSelect,w
 16192  1EAC  0021               	movlb	1	; select bank1
 16193  1EAD  00CF               	movwf	_LED^(0+128)
 16194  1EAE                     l1033:	
 16195                           
 16196                           ;LED_B1.c: 11: }
 16197                           ;LED_B1.c: 14: if (led == 2) {
 16198  1EAE  0020               	movlb	0	; select bank0
 16199  1EAF  0821               	movf	LedPointSelect@led,w
 16200  1EB0  3A02               	xorlw	2
 16201  1EB1  1D03               	skipz
 16202  1EB2  2EB8               	goto	l1034
 16203                           
 16204                           ;LED_B1.c: 15: LED = &VarLED2;
 16205  1EB3  3067               	movlw	_VarLED2& (0+255)
 16206  1EB4  00A0               	movwf	??_LedPointSelect
 16207  1EB5  0820               	movf	??_LedPointSelect,w
 16208  1EB6  0021               	movlb	1	; select bank1
 16209  1EB7  00CF               	movwf	_LED^(0+128)
 16210  1EB8                     l1034:	
 16211                           
 16212                           ;LED_B1.c: 16: }
 16213                           ;LED_B1.c: 24: if (led == 99) {
 16214  1EB8  0020               	movlb	0	; select bank0
 16215  1EB9  0821               	movf	LedPointSelect@led,w
 16216  1EBA  3A63               	xorlw	99
 16217  1EBB  1D03               	skipz
 16218  1EBC  0008               	return
 16219                           
 16220                           ;LED_B1.c: 25: LED = &VarErrLED;
 16221  1EBD  305F               	movlw	_VarErrLED& (0+255)
 16222  1EBE  00A0               	movwf	??_LedPointSelect
 16223  1EBF  0820               	movf	??_LedPointSelect,w
 16224  1EC0  0021               	movlb	1	; select bank1
 16225  1EC1  00CF               	movwf	_LED^(0+128)
 16226  1EC2  0008               	return
 16227  1EC3                     __end_of_LedPointSelect:	
 16228                           
 16229                           	psect	text105
 16230  0800                     __ptext105:	
 16231 ;; *************** function _setDimmerLights_Line *****************
 16232 ;; Defined at:
 16233 ;;		line 734 in file "../src/Dimmer_B1.c"
 16234 ;; Parameters:    Size  Location     Type
 16235 ;;  lights          1    wreg     unsigned char 
 16236 ;; Auto vars:     Size  Location     Type
 16237 ;;  lights          1    0[BANK0 ] unsigned char 
 16238 ;; Return value:  Size  Location     Type
 16239 ;;		None               void
 16240 ;; Registers used:
 16241 ;;		wreg
 16242 ;; Tracked objects:
 16243 ;;		On entry : 0/0
 16244 ;;		On exit  : 0/0
 16245 ;;		Unchanged: 0/0
 16246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16248 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16250 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16251 ;;Total ram usage:        1 bytes
 16252 ;; Hardware stack levels used:    1
 16253 ;; Hardware stack levels required when called:    4
 16254 ;; This function calls:
 16255 ;;		Nothing
 16256 ;; This function is called by:
 16257 ;;		_setDimmerLights
 16258 ;;		_setDimmerLights_Adj
 16259 ;; This function uses a non-reentrant model
 16260 ;;
 16261                           
 16262                           
 16263                           ;psect for function _setDimmerLights_Line
 16264  0800                     _setDimmerLights_Line:	
 16265                           
 16266                           ;incstack = 0
 16267                           ; Regs used in _setDimmerLights_Line: [wreg]
 16268                           ;setDimmerLights_Line@lights stored from wreg
 16269  0800  0020               	movlb	0	; select bank0
 16270  0801  00A0               	movwf	setDimmerLights_Line@lights
 16271                           
 16272                           ;Dimmer_B1.c: 735: Dimmer.LoadGO = 1;
 16273  0802  0021               	movlb	1	; select bank1
 16274  0803  1548               	bsf	_Dimmer^(0+128),2	;volatile
 16275                           
 16276                           ;Dimmer_B1.c: 737: DimmerLights1.Line = 0;
 16277  0804  0023               	movlb	3	; select bank3
 16278  0805  1348               	bcf	(_DimmerLights1^(0+384)+10),6
 16279                           
 16280                           ;Dimmer_B1.c: 740: DimmerLights2.Line = 0;
 16281  0806  1359               	bcf	(_DimmerLights2^(0+384)+10),6
 16282                           
 16283                           ;Dimmer_B1.c: 746: if (lights == 1) {
 16284  0807  0020               	movlb	0	; select bank0
 16285  0808  0820               	movf	setDimmerLights_Line@lights,w
 16286  0809  3A01               	xorlw	1
 16287  080A  1D03               	skipz
 16288  080B  280F               	goto	l9411
 16289                           
 16290                           ;Dimmer_B1.c: 747: DimmerLights1.Line = 1;
 16291  080C  0023               	movlb	3	; select bank3
 16292  080D  1748               	bsf	(_DimmerLights1^(0+384)+10),6
 16293                           
 16294                           ;Dimmer_B1.c: 748: }
 16295  080E  0008               	return
 16296  080F                     l9411:	
 16297                           
 16298                           ;Dimmer_B1.c: 751: else if (lights == 2) {
 16299  080F  0020               	movlb	0	; select bank0
 16300  0810  0820               	movf	setDimmerLights_Line@lights,w
 16301  0811  3A02               	xorlw	2
 16302  0812  1D03               	skipz
 16303  0813  0008               	return
 16304                           
 16305                           ;Dimmer_B1.c: 752: DimmerLights2.Line = 1;
 16306  0814  0023               	movlb	3	; select bank3
 16307  0815  1759               	bsf	(_DimmerLights2^(0+384)+10),6
 16308  0816  0008               	return
 16309  0817                     __end_of_setDimmerLights_Line:	
 16310                           
 16311                           	psect	text106
 16312  1C95                     __ptext106:	
 16313 ;; *************** function _getMain_LightsStatus *****************
 16314 ;; Defined at:
 16315 ;;		line 375 in file "../src/Main_B1.c"
 16316 ;; Parameters:    Size  Location     Type
 16317 ;;		None
 16318 ;; Auto vars:     Size  Location     Type
 16319 ;;  status          1    0[BANK0 ] unsigned char 
 16320 ;; Return value:  Size  Location     Type
 16321 ;;                  1    wreg      unsigned char 
 16322 ;; Registers used:
 16323 ;;		wreg, status,2, status,0
 16324 ;; Tracked objects:
 16325 ;;		On entry : 0/0
 16326 ;;		On exit  : 0/0
 16327 ;;		Unchanged: 0/0
 16328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16332 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16333 ;;Total ram usage:        1 bytes
 16334 ;; Hardware stack levels used:    1
 16335 ;; Hardware stack levels required when called:    4
 16336 ;; This function calls:
 16337 ;;		Nothing
 16338 ;; This function is called by:
 16339 ;;		_DimmerLights_Main
 16340 ;;		_setDimmerLights_Main
 16341 ;;		_Flash_Memory_Main
 16342 ;;		_Exception_Main
 16343 ;;		_Load_Main
 16344 ;; This function uses a non-reentrant model
 16345 ;;
 16346                           
 16347                           
 16348                           ;psect for function _getMain_LightsStatus
 16349  1C95                     _getMain_LightsStatus:	
 16350                           
 16351                           ;Main_B1.c: 376: char status = 0;
 16352                           
 16353                           ;incstack = 0
 16354                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 16355  1C95  0020               	movlb	0	; select bank0
 16356  1C96  01A0               	clrf	getMain_LightsStatus@status
 16357                           
 16358                           ;Main_B1.c: 395: status = DimmerLights1.Status == 1 ? 1 : 0;
 16359  1C97  3000               	movlw	0
 16360  1C98  0023               	movlb	3	; select bank3
 16361  1C99  18C0               	btfsc	(_DimmerLights1^(0+384)+2),1
 16362  1C9A  3001               	movlw	1
 16363  1C9B  0020               	movlb	0	; select bank0
 16364  1C9C  00A0               	movwf	getMain_LightsStatus@status
 16365                           
 16366                           ;Main_B1.c: 396: if (status == 0) {
 16367  1C9D  08A0               	movf	getMain_LightsStatus@status,f
 16368  1C9E  1D03               	skipz
 16369  1C9F  2CA6               	goto	l9637
 16370                           
 16371                           ;Main_B1.c: 397: status = DimmerLights2.Status == 1 ? 1 : 0;
 16372  1CA0  3000               	movlw	0
 16373  1CA1  0023               	movlb	3	; select bank3
 16374  1CA2  18D1               	btfsc	(_DimmerLights2^(0+384)+2),1
 16375  1CA3  3001               	movlw	1
 16376  1CA4  0020               	movlb	0	; select bank0
 16377  1CA5  00A0               	movwf	getMain_LightsStatus@status
 16378  1CA6                     l9637:	
 16379                           
 16380                           ;Main_B1.c: 398: }
 16381                           ;Main_B1.c: 422: return status;
 16382  1CA6  0820               	movf	getMain_LightsStatus@status,w
 16383  1CA7  0008               	return
 16384  1CA8                     __end_of_getMain_LightsStatus:	
 16385                           
 16386                           	psect	text107
 16387  1267                     __ptext107:	
 16388 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16389 ;; Defined at:
 16390 ;;		line 614 in file "../src/Dimmer_B1.c"
 16391 ;; Parameters:    Size  Location     Type
 16392 ;;  lights          1    wreg     unsigned char 
 16393 ;; Auto vars:     Size  Location     Type
 16394 ;;  lights          1    5[BANK0 ] unsigned char 
 16395 ;;  allow           1    6[BANK0 ] unsigned char 
 16396 ;; Return value:  Size  Location     Type
 16397 ;;                  1    wreg      unsigned char 
 16398 ;; Registers used:
 16399 ;;		wreg, status,2, status,0, pclath, cstack
 16400 ;; Tracked objects:
 16401 ;;		On entry : 0/0
 16402 ;;		On exit  : 0/0
 16403 ;;		Unchanged: 0/0
 16404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16406 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16407 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16408 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16409 ;;Total ram usage:        6 bytes
 16410 ;; Hardware stack levels used:    1
 16411 ;; Hardware stack levels required when called:    5
 16412 ;; This function calls:
 16413 ;;		_getLoad_OK
 16414 ;; This function is called by:
 16415 ;;		_setDimmerLights_Main
 16416 ;; This function uses a non-reentrant model
 16417 ;;
 16418                           
 16419                           
 16420                           ;psect for function _getDimmerLights_Allow_Condition
 16421  1267                     _getDimmerLights_Allow_Condition:	
 16422                           
 16423                           ;incstack = 0
 16424                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16425                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16426  1267  0020               	movlb	0	; select bank0
 16427  1268  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 16428                           
 16429                           ;Dimmer_B1.c: 615: char allow = 0;
 16430  1269  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 16431                           
 16432                           ;Dimmer_B1.c: 622: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16433  126A  01A2               	clrf	_getDimmerLights_Allow_Condition$2341
 16434  126B  0AA2               	incf	_getDimmerLights_Allow_Condition$2341,f
 16435  126C  319B  2303  3192   	fcall	_getLoad_OK
 16436  126F  3800               	iorlw	0
 16437  1270  1D03               	skipz
 16438  1271  2A77               	goto	l9651
 16439  1272  0021               	movlb	1	; select bank1
 16440  1273  1948               	btfsc	_Dimmer^(0+128),2	;volatile
 16441  1274  2A77               	goto	l9651
 16442  1275  0020               	movlb	0	; select bank0
 16443  1276  01A2               	clrf	_getDimmerLights_Allow_Condition$2341
 16444  1277                     l9651:	
 16445  1277  0020               	movlb	0	; select bank0
 16446  1278  0822               	movf	_getDimmerLights_Allow_Condition$2341,w
 16447  1279  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16448  127A  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16449  127B  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16450                           
 16451                           ;Dimmer_B1.c: 627: if (allow == 0) {
 16452  127C  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 16453  127D  1D03               	skipz
 16454  127E  2A9F               	goto	l9675
 16455                           
 16456                           ;Dimmer_B1.c: 628: if (lights == 1) {
 16457  127F  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16458  1280  3A01               	xorlw	1
 16459  1281  1D03               	skipz
 16460  1282  2A8E               	goto	l9665
 16461                           
 16462                           ;Dimmer_B1.c: 629: allow = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1
      +                           : 0;
 16463  1283  01A3               	clrf	_getDimmerLights_Allow_Condition$2342
 16464  1284  0AA3               	incf	_getDimmerLights_Allow_Condition$2342,f
 16465  1285  0023               	movlb	3	; select bank3
 16466  1286  1DD9               	btfss	(_DimmerLights2^(0+384)+10),3
 16467  1287  1B50               	btfsc	(_DimmerLights2^(0+384)+1),6
 16468  1288  2A8B               	goto	l9663
 16469  1289  0020               	movlb	0	; select bank0
 16470  128A  01A3               	clrf	_getDimmerLights_Allow_Condition$2342
 16471  128B                     l9663:	
 16472  128B  0020               	movlb	0	; select bank0
 16473  128C  0823               	movf	_getDimmerLights_Allow_Condition$2342,w
 16474  128D  2A9C               	goto	L10
 16475  128E                     l9665:	
 16476                           ;Dimmer_B1.c: 630: } else if (lights == 2) {
 16477                           
 16478  128E  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16479  128F  3A02               	xorlw	2
 16480  1290  1D03               	skipz
 16481  1291  2A9F               	goto	l9675
 16482                           
 16483                           ;Dimmer_B1.c: 631: allow = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1
      +                           : 0;
 16484  1292  01A4               	clrf	_getDimmerLights_Allow_Condition$2343
 16485  1293  0AA4               	incf	_getDimmerLights_Allow_Condition$2343,f
 16486  1294  0023               	movlb	3	; select bank3
 16487  1295  1DC8               	btfss	(_DimmerLights1^(0+384)+10),3
 16488  1296  1B3F               	btfsc	(_DimmerLights1^(0+384)+1),6
 16489  1297  2A9A               	goto	l9673
 16490  1298  0020               	movlb	0	; select bank0
 16491  1299  01A4               	clrf	_getDimmerLights_Allow_Condition$2343
 16492  129A                     l9673:	
 16493  129A  0020               	movlb	0	; select bank0
 16494  129B  0824               	movf	_getDimmerLights_Allow_Condition$2343,w
 16495  129C                     L10:	
 16496  129C  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16497  129D  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16498  129E  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16499  129F                     l9675:	
 16500                           
 16501                           ;Dimmer_B1.c: 632: }
 16502                           ;Dimmer_B1.c: 633: }
 16503                           ;Dimmer_B1.c: 647: return allow;
 16504  129F  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 16505  12A0  0008               	return
 16506  12A1                     __end_of_getDimmerLights_Allow_Condition:	
 16507                           
 16508                           	psect	text108
 16509  1B03                     __ptext108:	
 16510 ;; *************** function _getLoad_OK *****************
 16511 ;; Defined at:
 16512 ;;		line 265 in file "../src/OverLoad_B1.c"
 16513 ;; Parameters:    Size  Location     Type
 16514 ;;		None
 16515 ;; Auto vars:     Size  Location     Type
 16516 ;;  ok              1    0[BANK0 ] unsigned char 
 16517 ;; Return value:  Size  Location     Type
 16518 ;;                  1    wreg      unsigned char 
 16519 ;; Registers used:
 16520 ;;		wreg, status,2
 16521 ;; Tracked objects:
 16522 ;;		On entry : 0/0
 16523 ;;		On exit  : 0/0
 16524 ;;		Unchanged: 0/0
 16525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16527 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16529 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16530 ;;Total ram usage:        1 bytes
 16531 ;; Hardware stack levels used:    1
 16532 ;; Hardware stack levels required when called:    4
 16533 ;; This function calls:
 16534 ;;		Nothing
 16535 ;; This function is called by:
 16536 ;;		_DimmerLights_Main
 16537 ;;		_getDimmerLights_Allow_Condition
 16538 ;; This function uses a non-reentrant model
 16539 ;;
 16540                           
 16541                           
 16542                           ;psect for function _getLoad_OK
 16543  1B03                     _getLoad_OK:	
 16544                           
 16545                           ;OverLoad_B1.c: 266: char ok = Load.OK == 1 ? 1 : 0;
 16546                           
 16547                           ;incstack = 0
 16548                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16549  1B03  3000               	movlw	0
 16550  1B04  0022               	movlb	2	; select bank2
 16551  1B05  1BA7               	btfsc	_Load^(0+256),7
 16552  1B06  3001               	movlw	1
 16553  1B07  0020               	movlb	0	; select bank0
 16554  1B08  00A0               	movwf	getLoad_OK@ok
 16555                           
 16556                           ;OverLoad_B1.c: 267: return ok;
 16557  1B09  0820               	movf	getLoad_OK@ok,w
 16558  1B0A  0008               	return
 16559  1B0B                     __end_of_getLoad_OK:	
 16560                           
 16561                           	psect	text109
 16562  1193                     __ptext109:	
 16563 ;; *************** function _getMain_All_Error_Status *****************
 16564 ;; Defined at:
 16565 ;;		line 426 in file "../src/Main_B1.c"
 16566 ;; Parameters:    Size  Location     Type
 16567 ;;  command         1    wreg     unsigned char 
 16568 ;; Auto vars:     Size  Location     Type
 16569 ;;  command         1    5[BANK0 ] unsigned char 
 16570 ;;  status          1    6[BANK0 ] unsigned char 
 16571 ;; Return value:  Size  Location     Type
 16572 ;;                  1    wreg      unsigned char 
 16573 ;; Registers used:
 16574 ;;		wreg, status,2, status,0
 16575 ;; Tracked objects:
 16576 ;;		On entry : 0/0
 16577 ;;		On exit  : 0/0
 16578 ;;		Unchanged: 0/0
 16579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16581 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16582 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16583 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16584 ;;Total ram usage:        7 bytes
 16585 ;; Hardware stack levels used:    1
 16586 ;; Hardware stack levels required when called:    4
 16587 ;; This function calls:
 16588 ;;		Nothing
 16589 ;; This function is called by:
 16590 ;;		_DimmerLights_Main
 16591 ;;		_Exception_Main
 16592 ;;		_Load_Main
 16593 ;;		_setTemp_Main
 16594 ;;		_getRxData
 16595 ;;		_setSw_Main
 16596 ;; This function uses a non-reentrant model
 16597 ;;
 16598                           
 16599                           
 16600                           ;psect for function _getMain_All_Error_Status
 16601  1193                     _getMain_All_Error_Status:	
 16602                           
 16603                           ;incstack = 0
 16604                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16605                           ;getMain_All_Error_Status@command stored from wreg
 16606  1193  0020               	movlb	0	; select bank0
 16607  1194  00A5               	movwf	getMain_All_Error_Status@command
 16608                           
 16609                           ;Main_B1.c: 427: char status = 0;
 16610  1195  01A6               	clrf	getMain_All_Error_Status@status
 16611                           
 16612                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 16613  1196  08A6               	movf	getMain_All_Error_Status@status,f
 16614  1197  1D03               	skipz
 16615  1198  29AD               	goto	l9393
 16616  1199  0825               	movf	getMain_All_Error_Status@command,w
 16617  119A  3A02               	xorlw	2
 16618  119B  1903               	skipnz
 16619  119C  29AD               	goto	l9393
 16620                           
 16621                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 16622  119D  0021               	movlb	1	; select bank1
 16623  119E  18D8               	btfsc	_Temp^(0+128),1
 16624  119F  29A4               	goto	l9391
 16625  11A0  0020               	movlb	0	; select bank0
 16626  11A1  01A1               	clrf	_getMain_All_Error_Status$3623
 16627  11A2  01A2               	clrf	_getMain_All_Error_Status$3623+1
 16628  11A3  29A9               	goto	l1574
 16629  11A4                     l9391:	
 16630  11A4  3002               	movlw	2
 16631  11A5  0020               	movlb	0	; select bank0
 16632  11A6  00A1               	movwf	_getMain_All_Error_Status$3623
 16633  11A7  3000               	movlw	0
 16634  11A8  00A2               	movwf	_getMain_All_Error_Status$3623+1
 16635  11A9                     l1574:	
 16636  11A9  0821               	movf	_getMain_All_Error_Status$3623,w
 16637  11AA  00A0               	movwf	??_getMain_All_Error_Status
 16638  11AB  0820               	movf	??_getMain_All_Error_Status,w
 16639  11AC  00A6               	movwf	getMain_All_Error_Status@status
 16640  11AD                     l9393:	
 16641                           
 16642                           ;Main_B1.c: 440: }
 16643                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 16644  11AD  08A6               	movf	getMain_All_Error_Status@status,f
 16645  11AE  1D03               	skipz
 16646  11AF  29C4               	goto	l1575
 16647  11B0  0825               	movf	getMain_All_Error_Status@command,w
 16648  11B1  3A03               	xorlw	3
 16649  11B2  1903               	skipnz
 16650  11B3  29C4               	goto	l1575
 16651                           
 16652                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 16653  11B4  0022               	movlb	2	; select bank2
 16654  11B5  1AA7               	btfsc	_Load^(0+256),5
 16655  11B6  29BB               	goto	l9401
 16656  11B7  0020               	movlb	0	; select bank0
 16657  11B8  01A3               	clrf	_getMain_All_Error_Status$3624
 16658  11B9  01A4               	clrf	_getMain_All_Error_Status$3624+1
 16659  11BA  29C0               	goto	l1579
 16660  11BB                     l9401:	
 16661  11BB  3003               	movlw	3
 16662  11BC  0020               	movlb	0	; select bank0
 16663  11BD  00A3               	movwf	_getMain_All_Error_Status$3624
 16664  11BE  3000               	movlw	0
 16665  11BF  00A4               	movwf	_getMain_All_Error_Status$3624+1
 16666  11C0                     l1579:	
 16667  11C0  0823               	movf	_getMain_All_Error_Status$3624,w
 16668  11C1  00A0               	movwf	??_getMain_All_Error_Status
 16669  11C2  0820               	movf	??_getMain_All_Error_Status,w
 16670  11C3  00A6               	movwf	getMain_All_Error_Status@status
 16671  11C4                     l1575:	
 16672                           
 16673                           ;Main_B1.c: 447: }
 16674                           ;Main_B1.c: 463: return status;
 16675  11C4  0826               	movf	getMain_All_Error_Status@status,w
 16676  11C5  0008               	return
 16677  11C6                     __end_of_getMain_All_Error_Status:	
 16678                           
 16679                           	psect	text110
 16680  1D09                     __ptext110:	
 16681 ;; *************** function _DimmerLights_Initialization *****************
 16682 ;; Defined at:
 16683 ;;		line 361 in file "../src/Dimmer_B1.c"
 16684 ;; Parameters:    Size  Location     Type
 16685 ;;		None
 16686 ;; Auto vars:     Size  Location     Type
 16687 ;;		None
 16688 ;; Return value:  Size  Location     Type
 16689 ;;		None               void
 16690 ;; Registers used:
 16691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16692 ;; Tracked objects:
 16693 ;;		On entry : 0/0
 16694 ;;		On exit  : 0/0
 16695 ;;		Unchanged: 0/0
 16696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16699 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16700 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16701 ;;Total ram usage:        1 bytes
 16702 ;; Hardware stack levels used:    1
 16703 ;; Hardware stack levels required when called:    6
 16704 ;; This function calls:
 16705 ;;		_setDimmerLights_Initialization
 16706 ;; This function is called by:
 16707 ;;		_main
 16708 ;; This function uses a non-reentrant model
 16709 ;;
 16710                           
 16711                           
 16712                           ;psect for function _DimmerLights_Initialization
 16713  1D09                     _DimmerLights_Initialization:	
 16714                           
 16715                           ;Dimmer_B1.c: 364: DimmerLights11 = &DimmerLights1;
 16716                           
 16717                           ;incstack = 0
 16718                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16719  1D09  30BE               	movlw	_DimmerLights1& (0+255)
 16720  1D0A  0020               	movlb	0	; select bank0
 16721  1D0B  00A4               	movwf	??_DimmerLights_Initialization
 16722  1D0C  0824               	movf	??_DimmerLights_Initialization,w
 16723  1D0D  0021               	movlb	1	; select bank1
 16724  1D0E  00CC               	movwf	_DimmerLights11^(0+128)
 16725                           
 16726                           ;Dimmer_B1.c: 365: setDimmerLights_Initialization(1);
 16727  1D0F  3001               	movlw	1
 16728  1D10  3191  2162  319D   	fcall	_setDimmerLights_Initialization
 16729                           
 16730                           ;Dimmer_B1.c: 369: DimmerLights22 = &DimmerLights2;
 16731  1D13  30CF               	movlw	_DimmerLights2& (0+255)
 16732  1D14  0020               	movlb	0	; select bank0
 16733  1D15  00A4               	movwf	??_DimmerLights_Initialization
 16734  1D16  0824               	movf	??_DimmerLights_Initialization,w
 16735  1D17  0021               	movlb	1	; select bank1
 16736  1D18  00CD               	movwf	_DimmerLights22^(0+128)
 16737                           
 16738                           ;Dimmer_B1.c: 370: setDimmerLights_Initialization(2);
 16739  1D19  3002               	movlw	2
 16740  1D1A  3191  2162         	fcall	_setDimmerLights_Initialization
 16741  1D1C  0008               	return
 16742  1D1D                     __end_of_DimmerLights_Initialization:	
 16743                           
 16744                           	psect	text111
 16745  1162                     __ptext111:	
 16746 ;; *************** function _setDimmerLights_Initialization *****************
 16747 ;; Defined at:
 16748 ;;		line 385 in file "../src/Dimmer_B1.c"
 16749 ;; Parameters:    Size  Location     Type
 16750 ;;  lights          1    wreg     unsigned char 
 16751 ;; Auto vars:     Size  Location     Type
 16752 ;;  lights          1    3[BANK0 ] unsigned char 
 16753 ;; Return value:  Size  Location     Type
 16754 ;;		None               void
 16755 ;; Registers used:
 16756 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16757 ;; Tracked objects:
 16758 ;;		On entry : 0/0
 16759 ;;		On exit  : 0/0
 16760 ;;		Unchanged: 0/0
 16761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16763 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16764 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16766 ;;Total ram usage:        2 bytes
 16767 ;; Hardware stack levels used:    1
 16768 ;; Hardware stack levels required when called:    5
 16769 ;; This function calls:
 16770 ;;		_DimmerLightsPointSelect
 16771 ;; This function is called by:
 16772 ;;		_DimmerLights_Initialization
 16773 ;; This function uses a non-reentrant model
 16774 ;;
 16775                           
 16776                           
 16777                           ;psect for function _setDimmerLights_Initialization
 16778  1162                     _setDimmerLights_Initialization:	
 16779                           
 16780                           ;incstack = 0
 16781                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16782                           ;setDimmerLights_Initialization@lights stored from wreg
 16783  1162  0020               	movlb	0	; select bank0
 16784  1163  00A3               	movwf	setDimmerLights_Initialization@lights
 16785                           
 16786                           ;Dimmer_B1.c: 387: DimmerLightsPointSelect(lights);
 16787  1164  0823               	movf	setDimmerLights_Initialization@lights,w
 16788  1165  319C  2482  3191   	fcall	_DimmerLightsPointSelect
 16789                           
 16790                           ;Dimmer_B1.c: 389: DimmerLights->DimmingTimeValue = 7;
 16791  1168  3007               	movlw	7
 16792  1169  0020               	movlb	0	; select bank0
 16793  116A  00A2               	movwf	??_setDimmerLights_Initialization
 16794  116B  086F               	movf	_DimmerLights,w
 16795  116C  3E08               	addlw	8
 16796  116D  0086               	movwf	6
 16797  116E  3001               	movlw	1	; select bank2/3
 16798  116F  0087               	movwf	7
 16799  1170  0822               	movf	??_setDimmerLights_Initialization,w
 16800  1171  0081               	movwf	1
 16801                           
 16802                           ;Dimmer_B1.c: 394: DimmerLights->MaxmumValue = ((char)(70*0.8));
 16803  1172  3038               	movlw	56
 16804  1173  00A2               	movwf	??_setDimmerLights_Initialization
 16805  1174  086F               	movf	_DimmerLights,w
 16806  1175  3E06               	addlw	6
 16807  1176  0086               	movwf	6
 16808  1177  3001               	movlw	1	; select bank2/3
 16809  1178  0087               	movwf	7
 16810  1179  0822               	movf	??_setDimmerLights_Initialization,w
 16811  117A  0081               	movwf	1
 16812                           
 16813                           ;Dimmer_B1.c: 395: DimmerLights->MinimumValue = ((char)(15*0.8));
 16814  117B  300C               	movlw	12
 16815  117C  00A2               	movwf	??_setDimmerLights_Initialization
 16816  117D  086F               	movf	_DimmerLights,w
 16817  117E  3E09               	addlw	9
 16818  117F  0086               	movwf	6
 16819  1180  3001               	movlw	1	; select bank2/3
 16820  1181  0087               	movwf	7
 16821  1182  0822               	movf	??_setDimmerLights_Initialization,w
 16822  1183  0081               	movwf	1
 16823                           
 16824                           ;Dimmer_B1.c: 409: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 16825  1184  086F               	movf	_DimmerLights,w
 16826  1185  3E06               	addlw	6
 16827  1186  0086               	movwf	6
 16828  1187  3001               	movlw	1	; select bank2/3
 16829  1188  0087               	movwf	7
 16830  1189  0801               	movf	1,w
 16831  118A  00A2               	movwf	??_setDimmerLights_Initialization
 16832  118B  086F               	movf	_DimmerLights,w
 16833  118C  3E04               	addlw	4
 16834  118D  0086               	movwf	6
 16835  118E  3001               	movlw	1	; select bank2/3
 16836  118F  0087               	movwf	7
 16837  1190  0822               	movf	??_setDimmerLights_Initialization,w
 16838  1191  0081               	movwf	1
 16839  1192  0008               	return
 16840  1193                     __end_of_setDimmerLights_Initialization:	
 16841                           
 16842                           	psect	text112
 16843  1AFB                     __ptext112:	
 16844 ;; *************** function _DelayOff_Main *****************
 16845 ;; Defined at:
 16846 ;;		line 41 in file "../src/DelayOff_B1.c"
 16847 ;; Parameters:    Size  Location     Type
 16848 ;;		None
 16849 ;; Auto vars:     Size  Location     Type
 16850 ;;		None
 16851 ;; Return value:  Size  Location     Type
 16852 ;;		None               void
 16853 ;; Registers used:
 16854 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16855 ;; Tracked objects:
 16856 ;;		On entry : 0/0
 16857 ;;		On exit  : 0/0
 16858 ;;		Unchanged: 0/0
 16859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16864 ;;Total ram usage:        0 bytes
 16865 ;; Hardware stack levels used:    1
 16866 ;; Hardware stack levels required when called:   10
 16867 ;; This function calls:
 16868 ;;		_DlyOff_Main
 16869 ;; This function is called by:
 16870 ;;		_main
 16871 ;; This function uses a non-reentrant model
 16872 ;;
 16873                           
 16874                           
 16875                           ;psect for function _DelayOff_Main
 16876  1AFB                     _DelayOff_Main:	
 16877                           
 16878                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 16879                           
 16880                           ;incstack = 0
 16881                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16882  1AFB  3001               	movlw	1
 16883  1AFC  3188  2073  319A   	fcall	_DlyOff_Main
 16884                           
 16885                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 16886  1AFF  3002               	movlw	2
 16887  1B00  3188  2073         	fcall	_DlyOff_Main
 16888  1B02  0008               	return
 16889  1B03                     __end_of_DelayOff_Main:	
 16890                           
 16891                           	psect	text113
 16892  0873                     __ptext113:	
 16893 ;; *************** function _DlyOff_Main *****************
 16894 ;; Defined at:
 16895 ;;		line 61 in file "../src/DelayOff_B1.c"
 16896 ;; Parameters:    Size  Location     Type
 16897 ;;  sw              1    wreg     unsigned char 
 16898 ;; Auto vars:     Size  Location     Type
 16899 ;;  sw              1   78[BANK0 ] unsigned char 
 16900 ;; Return value:  Size  Location     Type
 16901 ;;		None               void
 16902 ;; Registers used:
 16903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16904 ;; Tracked objects:
 16905 ;;		On entry : 0/0
 16906 ;;		On exit  : 0/0
 16907 ;;		Unchanged: 0/0
 16908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16910 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16911 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16912 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16913 ;;Total ram usage:        3 bytes
 16914 ;; Hardware stack levels used:    1
 16915 ;; Hardware stack levels required when called:    9
 16916 ;; This function calls:
 16917 ;;		_DelayOffPointSelect
 16918 ;;		_setBuz
 16919 ;;		_setDimmerLights_ErrorClose
 16920 ;; This function is called by:
 16921 ;;		_DelayOff_Main
 16922 ;; This function uses a non-reentrant model
 16923 ;;
 16924                           
 16925                           
 16926                           ;psect for function _DlyOff_Main
 16927  0873                     _DlyOff_Main:	
 16928                           
 16929                           ;incstack = 0
 16930                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16931                           ;DlyOff_Main@sw stored from wreg
 16932  0873  0020               	movlb	0	; select bank0
 16933  0874  00EE               	movwf	DlyOff_Main@sw
 16934                           
 16935                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 16936  0875  086E               	movf	DlyOff_Main@sw,w
 16937  0876  319C  24F5  3188   	fcall	_DelayOffPointSelect
 16938                           
 16939                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 16940  0879  0877               	movf	_DelayOff,w
 16941  087A  0086               	movwf	6
 16942  087B  3001               	movlw	1	; select bank2/3
 16943  087C  0087               	movwf	7
 16944  087D  1C81               	btfss	1,1
 16945  087E  0008               	return
 16946                           
 16947                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 16948  087F  0877               	movf	_DelayOff,w
 16949  0880  3E02               	addlw	2
 16950  0881  0086               	movwf	6
 16951  0882  3001               	movlw	1	; select bank2/3
 16952  0883  0087               	movwf	7
 16953  0884  3001               	movlw	1
 16954  0885  0781               	addwf	1,f
 16955  0886  3141               	addfsr 1,1
 16956  0887  1803               	skipnc
 16957  0888  0A81               	incf	1,f
 16958                           
 16959                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 16960  0889  0877               	movf	_DelayOff,w
 16961  088A  3E02               	addlw	2
 16962  088B  0086               	movwf	6
 16963  088C  3001               	movlw	1	; select bank2/3
 16964  088D  0087               	movwf	7
 16965  088E  3F40               	moviw [0]fsr1
 16966  088F  0020               	movlb	0	; select bank0
 16967  0890  00EC               	movwf	??_DlyOff_Main
 16968  0891  3F41               	moviw [1]fsr1
 16969  0892  00ED               	movwf	??_DlyOff_Main+1
 16970  0893  3017               	movlw	23
 16971  0894  026D               	subwf	??_DlyOff_Main+1,w
 16972  0895  3070               	movlw	112
 16973  0896  1903               	skipnz
 16974  0897  026C               	subwf	??_DlyOff_Main,w
 16975  0898  1C03               	skipc
 16976  0899  0008               	return
 16977                           
 16978                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 16979  089A  0877               	movf	_DelayOff,w
 16980  089B  3E02               	addlw	2
 16981  089C  0086               	movwf	6
 16982  089D  3001               	movlw	1	; select bank2/3
 16983  089E  0087               	movwf	7
 16984  089F  3000               	movlw	0
 16985  08A0  3FC0               	movwi [0]fsr1
 16986  08A1  3FC1               	movwi [1]fsr1
 16987                           
 16988                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 16989  08A2  3001               	movlw	1
 16990  08A3  00EC               	movwf	??_DlyOff_Main
 16991  08A4  0877               	movf	_DelayOff,w
 16992  08A5  3E04               	addlw	4
 16993  08A6  0086               	movwf	6
 16994  08A7  3001               	movlw	1	; select bank2/3
 16995  08A8  0087               	movwf	7
 16996  08A9  086C               	movf	??_DlyOff_Main,w
 16997  08AA  0781               	addwf	1,f
 16998                           
 16999                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 17000  08AB  0877               	movf	_DelayOff,w
 17001  08AC  3E04               	addlw	4
 17002  08AD  0086               	movwf	6
 17003  08AE  3001               	movlw	1	; select bank2/3
 17004  08AF  0087               	movwf	7
 17005  08B0  0A77               	incf	_DelayOff,w
 17006  08B1  0084               	movwf	4
 17007  08B2  3001               	movlw	1	; select bank2/3
 17008  08B3  0085               	movwf	5
 17009  08B4  0800               	movf	0,w
 17010  08B5  0201               	subwf	1,w
 17011  08B6  1C03               	skipc
 17012  08B7  0008               	return
 17013                           
 17014                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 17015  08B8  0877               	movf	_DelayOff,w
 17016  08B9  3E04               	addlw	4
 17017  08BA  0086               	movwf	6
 17018  08BB  3001               	movlw	1	; select bank2/3
 17019  08BC  0087               	movwf	7
 17020  08BD  0181               	clrf	1
 17021                           
 17022                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 17023  08BE  0877               	movf	_DelayOff,w
 17024  08BF  0086               	movwf	6
 17025  08C0  3001               	movlw	1	; select bank2/3
 17026  08C1  0087               	movwf	7
 17027  08C2  1081               	bcf	1,1
 17028                           
 17029                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 17030  08C3  3064               	movlw	100
 17031  08C4  00A9               	movwf	setBuz@time
 17032  08C5  3000               	movlw	0
 17033  08C6  00AA               	movwf	setBuz@time+1
 17034  08C7  3001               	movlw	1
 17035  08C8  3196  26F3  3188   	fcall	_setBuz
 17036                           
 17037                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 17038  08CB  0020               	movlb	0	; select bank0
 17039  08CC  086E               	movf	DlyOff_Main@sw,w
 17040  08CD  3189  2131         	fcall	_setDimmerLights_ErrorClose
 17041  08CF  0008               	return
 17042  08D0                     __end_of_DlyOff_Main:	
 17043                           
 17044                           	psect	text114
 17045  0931                     __ptext114:	
 17046 ;; *************** function _setDimmerLights_ErrorClose *****************
 17047 ;; Defined at:
 17048 ;;		line 874 in file "../src/Dimmer_B1.c"
 17049 ;; Parameters:    Size  Location     Type
 17050 ;;  lights          1    wreg     unsigned char 
 17051 ;; Auto vars:     Size  Location     Type
 17052 ;;  lights          1    1[BANK1 ] unsigned char 
 17053 ;;  i               2    2[BANK1 ] int 
 17054 ;;  count           1    0[BANK1 ] unsigned char 
 17055 ;; Return value:  Size  Location     Type
 17056 ;;		None               void
 17057 ;; Registers used:
 17058 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17059 ;; Tracked objects:
 17060 ;;		On entry : 0/0
 17061 ;;		On exit  : 0/0
 17062 ;;		Unchanged: 0/0
 17063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17065 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 17066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17067 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 17068 ;;Total ram usage:        5 bytes
 17069 ;; Hardware stack levels used:    1
 17070 ;; Hardware stack levels required when called:    8
 17071 ;; This function calls:
 17072 ;;		_DimmerLightsPointSelect
 17073 ;;		_getDimmerLights_Status
 17074 ;;		_setDimmerLights_SwOff
 17075 ;; This function is called by:
 17076 ;;		_DlyOff_Main
 17077 ;;		_setControl_Lights_Table
 17078 ;; This function uses a non-reentrant model
 17079 ;;
 17080                           
 17081                           
 17082                           ;psect for function _setDimmerLights_ErrorClose
 17083  0931                     _setDimmerLights_ErrorClose:	
 17084                           
 17085                           ;incstack = 0
 17086                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17087                           ;setDimmerLights_ErrorClose@lights stored from wreg
 17088  0931  0021               	movlb	1	; select bank1
 17089  0932  00EB               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 17090                           
 17091                           ;Dimmer_B1.c: 875: if (lights == 255) {
 17092  0933  086B               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 17093  0934  3AFF               	xorlw	255
 17094  0935  1D03               	skipz
 17095  0936  2974               	goto	l9231
 17096                           
 17097                           ;Dimmer_B1.c: 880: char count = 2;
 17098  0937  3002               	movlw	2
 17099  0938  0020               	movlb	0	; select bank0
 17100  0939  00EB               	movwf	??_setDimmerLights_ErrorClose
 17101  093A  086B               	movf	??_setDimmerLights_ErrorClose,w
 17102  093B  0021               	movlb	1	; select bank1
 17103  093C  00EA               	movwf	setDimmerLights_ErrorClose@count^(0+128)
 17104                           
 17105                           ;Dimmer_B1.c: 885: for (int i = 0; i < count; i++) {
 17106  093D  01EC               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 17107  093E  01ED               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 17108  093F                     l9229:	
 17109  093F  086D               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 17110  0940  3A80               	xorlw	128
 17111  0941  0020               	movlb	0	; select bank0
 17112  0942  00EB               	movwf	??_setDimmerLights_ErrorClose
 17113  0943  3080               	movlw	128
 17114  0944  026B               	subwf	??_setDimmerLights_ErrorClose,w
 17115  0945  1D03               	skipz
 17116  0946  294A               	goto	u9995
 17117  0947  0021               	movlb	1	; select bank1
 17118  0948  086A               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 17119  0949  026C               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 17120  094A                     u9995:	
 17121  094A  1803               	btfsc	3,0
 17122  094B  0008               	return
 17123                           
 17124                           ;Dimmer_B1.c: 886: DimmerLightsPointSelect(i + 1);
 17125  094C  0021               	movlb	1	; select bank1
 17126  094D  086C               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 17127  094E  3E01               	addlw	1
 17128  094F  319C  2482  3189   	fcall	_DimmerLightsPointSelect
 17129                           
 17130                           ;Dimmer_B1.c: 887: if (getDimmerLights_Status(i + 1) == 1) {
 17131  0952  0021               	movlb	1	; select bank1
 17132  0953  086C               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 17133  0954  3E01               	addlw	1
 17134  0955  319B  23F4  3189   	fcall	_getDimmerLights_Status
 17135  0958  3A01               	xorlw	1
 17136  0959  1D03               	skipz
 17137  095A  296E               	goto	l9227
 17138                           
 17139                           ;Dimmer_B1.c: 888: DimmerLights->SwFlag = 1;
 17140  095B  0020               	movlb	0	; select bank0
 17141  095C  086F               	movf	_DimmerLights,w
 17142  095D  3E0B               	addlw	11
 17143  095E  0086               	movwf	6
 17144  095F  3001               	movlw	1	; select bank2/3
 17145  0960  0087               	movwf	7
 17146  0961  1481               	bsf	1,1
 17147                           
 17148                           ;Dimmer_B1.c: 889: DimmerLights->Status = 0;
 17149  0962  086F               	movf	_DimmerLights,w
 17150  0963  3E02               	addlw	2
 17151  0964  0086               	movwf	6
 17152  0965  3001               	movlw	1	; select bank2/3
 17153  0966  0087               	movwf	7
 17154  0967  1081               	bcf	1,1
 17155                           
 17156                           ;Dimmer_B1.c: 890: setDimmerLights_SwOff(i + 1);
 17157  0968  0021               	movlb	1	; select bank1
 17158  0969  086C               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 17159  096A  3E01               	addlw	1
 17160  096B  3194  24B1  3189   	fcall	_setDimmerLights_SwOff
 17161  096E                     l9227:	
 17162  096E  3001               	movlw	1
 17163  096F  0021               	movlb	1	; select bank1
 17164  0970  07EC               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 17165  0971  3000               	movlw	0
 17166  0972  3DED               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 17167  0973  293F               	goto	l9229
 17168  0974                     l9231:	
 17169                           ;Dimmer_B1.c: 891: }
 17170                           ;Dimmer_B1.c: 892: }
 17171                           ;Dimmer_B1.c: 893: } else {
 17172                           
 17173                           
 17174                           ;Dimmer_B1.c: 894: DimmerLightsPointSelect(lights);
 17175  0974  0021               	movlb	1	; select bank1
 17176  0975  086B               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 17177  0976  319C  2482  3189   	fcall	_DimmerLightsPointSelect
 17178                           
 17179                           ;Dimmer_B1.c: 895: if (getDimmerLights_Status(lights) == 1) {
 17180  0979  0021               	movlb	1	; select bank1
 17181  097A  086B               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 17182  097B  319B  23F4  3189   	fcall	_getDimmerLights_Status
 17183  097E  3A01               	xorlw	1
 17184  097F  1D03               	skipz
 17185  0980  0008               	return
 17186                           
 17187                           ;Dimmer_B1.c: 896: DimmerLights->SwFlag = 1;
 17188  0981  0020               	movlb	0	; select bank0
 17189  0982  086F               	movf	_DimmerLights,w
 17190  0983  3E0B               	addlw	11
 17191  0984  0086               	movwf	6
 17192  0985  3001               	movlw	1	; select bank2/3
 17193  0986  0087               	movwf	7
 17194  0987  1481               	bsf	1,1
 17195                           
 17196                           ;Dimmer_B1.c: 897: DimmerLights->Status = 0;
 17197  0988  086F               	movf	_DimmerLights,w
 17198  0989  3E02               	addlw	2
 17199  098A  0086               	movwf	6
 17200  098B  3001               	movlw	1	; select bank2/3
 17201  098C  0087               	movwf	7
 17202  098D  1081               	bcf	1,1
 17203                           
 17204                           ;Dimmer_B1.c: 898: setDimmerLights_SwOff(lights);
 17205  098E  0021               	movlb	1	; select bank1
 17206  098F  086B               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 17207  0990  3194  24B1         	fcall	_setDimmerLights_SwOff
 17208  0992  0008               	return
 17209  0993                     __end_of_setDimmerLights_ErrorClose:	
 17210                           
 17211                           	psect	text115
 17212  14B1                     __ptext115:	
 17213 ;; *************** function _setDimmerLights_SwOff *****************
 17214 ;; Defined at:
 17215 ;;		line 470 in file "../src/Dimmer_B1.c"
 17216 ;; Parameters:    Size  Location     Type
 17217 ;;  sw              1    wreg     unsigned char 
 17218 ;; Auto vars:     Size  Location     Type
 17219 ;;  sw              1   74[BANK0 ] unsigned char 
 17220 ;; Return value:  Size  Location     Type
 17221 ;;		None               void
 17222 ;; Registers used:
 17223 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17224 ;; Tracked objects:
 17225 ;;		On entry : 0/0
 17226 ;;		On exit  : 0/0
 17227 ;;		Unchanged: 0/0
 17228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17230 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17232 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17233 ;;Total ram usage:        1 bytes
 17234 ;; Hardware stack levels used:    1
 17235 ;; Hardware stack levels required when called:    7
 17236 ;; This function calls:
 17237 ;;		_DimmerLightsPointSelect
 17238 ;;		_getDelayOff_GO
 17239 ;;		_setDelayOff_GO
 17240 ;; This function is called by:
 17241 ;;		_setDimmerLights_ErrorClose
 17242 ;;		_Exception_Main
 17243 ;;		_setRFSW_Control
 17244 ;;		_setSw_Main
 17245 ;; This function uses a non-reentrant model
 17246 ;;
 17247                           
 17248                           
 17249                           ;psect for function _setDimmerLights_SwOff
 17250  14B1                     _setDimmerLights_SwOff:	
 17251                           
 17252                           ;incstack = 0
 17253                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17254                           ;setDimmerLights_SwOff@sw stored from wreg
 17255  14B1  0020               	movlb	0	; select bank0
 17256  14B2  00EA               	movwf	setDimmerLights_SwOff@sw
 17257                           
 17258                           ;Dimmer_B1.c: 471: DimmerLightsPointSelect(sw);
 17259  14B3  086A               	movf	setDimmerLights_SwOff@sw,w
 17260  14B4  319C  2482  3194   	fcall	_DimmerLightsPointSelect
 17261                           
 17262                           ;Dimmer_B1.c: 473: if (DimmerLights->SwFlag == 1) {
 17263  14B7  0020               	movlb	0	; select bank0
 17264  14B8  086F               	movf	_DimmerLights,w
 17265  14B9  3E0B               	addlw	11
 17266  14BA  0086               	movwf	6
 17267  14BB  3001               	movlw	1	; select bank2/3
 17268  14BC  0087               	movwf	7
 17269  14BD  1C81               	btfss	1,1
 17270  14BE  0008               	return
 17271                           
 17272                           ;Dimmer_B1.c: 474: DimmerLights->SwFlag = 0;
 17273  14BF  086F               	movf	_DimmerLights,w
 17274  14C0  3E0B               	addlw	11
 17275  14C1  0086               	movwf	6
 17276  14C2  3001               	movlw	1	; select bank2/3
 17277  14C3  0087               	movwf	7
 17278  14C4  1081               	bcf	1,1
 17279                           
 17280                           ;Dimmer_B1.c: 475: if (DimmerLights->Status == 1) {
 17281  14C5  086F               	movf	_DimmerLights,w
 17282  14C6  3E02               	addlw	2
 17283  14C7  0086               	movwf	6
 17284  14C8  3001               	movlw	1	; select bank2/3
 17285  14C9  0087               	movwf	7
 17286  14CA  1C81               	btfss	1,1
 17287  14CB  2CE6               	goto	l9059
 17288                           
 17289                           ;Dimmer_B1.c: 477: if (DimmerLights->SwAdj == 1) {
 17290  14CC  086F               	movf	_DimmerLights,w
 17291  14CD  3E0B               	addlw	11
 17292  14CE  0086               	movwf	6
 17293  14CF  3001               	movlw	1	; select bank2/3
 17294  14D0  0087               	movwf	7
 17295  14D1  1D01               	btfss	1,2
 17296  14D2  0008               	return
 17297                           
 17298                           ;Dimmer_B1.c: 478: DimmerLights->SwAdj = 0;
 17299  14D3  086F               	movf	_DimmerLights,w
 17300  14D4  3E0B               	addlw	11
 17301  14D5  0086               	movwf	6
 17302  14D6  3001               	movlw	1	; select bank2/3
 17303  14D7  0087               	movwf	7
 17304  14D8  1101               	bcf	1,2
 17305                           
 17306                           ;Dimmer_B1.c: 480: DimmerLights->TriggerAdj = 1;
 17307  14D9  086F               	movf	_DimmerLights,w
 17308  14DA  3E0A               	addlw	10
 17309  14DB  0086               	movwf	6
 17310  14DC  3001               	movlw	1	; select bank2/3
 17311  14DD  0087               	movwf	7
 17312  14DE  1581               	bsf	1,3
 17313                           
 17314                           ;Dimmer_B1.c: 481: DimmerLights->SwitchAdj = 0;
 17315  14DF  086F               	movf	_DimmerLights,w
 17316  14E0  3E0A               	addlw	10
 17317  14E1  0086               	movwf	6
 17318  14E2  3001               	movlw	1	; select bank2/3
 17319  14E3  0087               	movwf	7
 17320  14E4  1101               	bcf	1,2
 17321                           
 17322                           ;Dimmer_B1.c: 482: }
 17323                           ;Dimmer_B1.c: 483: } else {
 17324  14E5  0008               	return
 17325  14E6                     l9059:	
 17326                           
 17327                           ;Dimmer_B1.c: 484: DimmerLights->Trigger = 1;
 17328  14E6  086F               	movf	_DimmerLights,w
 17329  14E7  3E0A               	addlw	10
 17330  14E8  0086               	movwf	6
 17331  14E9  3001               	movlw	1	; select bank2/3
 17332  14EA  0087               	movwf	7
 17333  14EB  1481               	bsf	1,1
 17334                           
 17335                           ;Dimmer_B1.c: 485: DimmerLights->Switch = 0;
 17336  14EC  086F               	movf	_DimmerLights,w
 17337  14ED  3E0A               	addlw	10
 17338  14EE  0086               	movwf	6
 17339  14EF  3001               	movlw	1	; select bank2/3
 17340  14F0  0087               	movwf	7
 17341  14F1  1001               	bcf	1,0
 17342                           
 17343                           ;Dimmer_B1.c: 488: if (getDelayOff_GO(sw) == 1) {
 17344  14F2  086A               	movf	setDimmerLights_SwOff@sw,w
 17345  14F3  319B  23E4  3194   	fcall	_getDelayOff_GO
 17346  14F6  3A01               	xorlw	1
 17347  14F7  1D03               	skipz
 17348  14F8  0008               	return
 17349                           
 17350                           ;Dimmer_B1.c: 489: setDelayOff_GO(sw, 0, 0);
 17351  14F9  0020               	movlb	0	; select bank0
 17352  14FA  01E6               	clrf	setDelayOff_GO@command
 17353  14FB  01E7               	clrf	setDelayOff_GO@value
 17354  14FC  086A               	movf	setDimmerLights_SwOff@sw,w
 17355  14FD  3195  25A1         	fcall	_setDelayOff_GO
 17356  14FF  0008               	return
 17357  1500                     __end_of_setDimmerLights_SwOff:	
 17358                           
 17359                           	psect	text116
 17360  15A1                     __ptext116:	
 17361 ;; *************** function _setDelayOff_GO *****************
 17362 ;; Defined at:
 17363 ;;		line 83 in file "../src/DelayOff_B1.c"
 17364 ;; Parameters:    Size  Location     Type
 17365 ;;  sw              1    wreg     unsigned char 
 17366 ;;  command         1   70[BANK0 ] unsigned char 
 17367 ;;  value           1   71[BANK0 ] unsigned char 
 17368 ;; Auto vars:     Size  Location     Type
 17369 ;;  sw              1   73[BANK0 ] unsigned char 
 17370 ;; Return value:  Size  Location     Type
 17371 ;;		None               void
 17372 ;; Registers used:
 17373 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17374 ;; Tracked objects:
 17375 ;;		On entry : 0/0
 17376 ;;		On exit  : 0/0
 17377 ;;		Unchanged: 0/0
 17378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17379 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17381 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17382 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17383 ;;Total ram usage:        4 bytes
 17384 ;; Hardware stack levels used:    1
 17385 ;; Hardware stack levels required when called:    6
 17386 ;; This function calls:
 17387 ;;		_DelayOffPointSelect
 17388 ;;		_DelayTimejudge
 17389 ;;		_setProductData
 17390 ;; This function is called by:
 17391 ;;		_setDimmerLights_SwOff
 17392 ;;		_setRFSW_Control
 17393 ;; This function uses a non-reentrant model
 17394 ;;
 17395                           
 17396                           
 17397                           ;psect for function _setDelayOff_GO
 17398  15A1                     _setDelayOff_GO:	
 17399                           
 17400                           ;incstack = 0
 17401                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17402                           ;setDelayOff_GO@sw stored from wreg
 17403  15A1  0020               	movlb	0	; select bank0
 17404  15A2  00E9               	movwf	setDelayOff_GO@sw
 17405                           
 17406                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 17407  15A3  0869               	movf	setDelayOff_GO@sw,w
 17408  15A4  319C  24F5  3195   	fcall	_DelayOffPointSelect
 17409                           
 17410                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 17411  15A7  0020               	movlb	0	; select bank0
 17412  15A8  0866               	movf	setDelayOff_GO@command,w
 17413  15A9  3A01               	xorlw	1
 17414  15AA  3000               	movlw	0
 17415  15AB  1903               	skipnz
 17416  15AC  3001               	movlw	1
 17417  15AD  00E8               	movwf	??_setDelayOff_GO
 17418  15AE  0877               	movf	_DelayOff,w
 17419  15AF  0086               	movwf	6
 17420  15B0  3001               	movlw	1	; select bank2/3
 17421  15B1  0087               	movwf	7
 17422  15B2  0DE8               	rlf	??_setDelayOff_GO,f
 17423  15B3  0801               	movf	1,w
 17424  15B4  0668               	xorwf	??_setDelayOff_GO,w
 17425  15B5  39FD               	andlw	-3
 17426  15B6  0668               	xorwf	??_setDelayOff_GO,w
 17427  15B7  0081               	movwf	1
 17428                           
 17429                           ;DelayOff_B1.c: 89: if (command == 1) {
 17430  15B8  0866               	movf	setDelayOff_GO@command,w
 17431  15B9  3A01               	xorlw	1
 17432  15BA  1D03               	skipz
 17433  15BB  2DDF               	goto	l8965
 17434                           
 17435                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 17436  15BC  0867               	movf	setDelayOff_GO@value,w
 17437  15BD  3190  2082  3195   	fcall	_DelayTimejudge
 17438  15C0  0020               	movlb	0	; select bank0
 17439  15C1  00E8               	movwf	??_setDelayOff_GO
 17440  15C2  0A77               	incf	_DelayOff,w
 17441  15C3  0086               	movwf	6
 17442  15C4  3001               	movlw	1	; select bank2/3
 17443  15C5  0087               	movwf	7
 17444  15C6  0868               	movf	??_setDelayOff_GO,w
 17445  15C7  0081               	movwf	1
 17446                           
 17447                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 17448  15C8  300F               	movlw	15
 17449  15C9  0567               	andwf	setDelayOff_GO@value,w
 17450  15CA  00E8               	movwf	??_setDelayOff_GO
 17451  15CB  0868               	movf	??_setDelayOff_GO,w
 17452  15CC  3A05               	xorlw	5
 17453  15CD  1903               	skipnz
 17454  15CE  2DD3               	goto	l8959
 17455  15CF  0867               	movf	setDelayOff_GO@value,w
 17456  15D0  390F               	andlw	15
 17457  15D1  1D03               	btfss	3,2
 17458  15D2  2DD9               	goto	l8963
 17459  15D3                     l8959:	
 17460  15D3  3026               	movlw	38
 17461  15D4  0267               	subwf	setDelayOff_GO@value,w
 17462  15D5  1803               	skipnc
 17463  15D6  2DD9               	goto	l8963
 17464                           
 17465                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 17466  15D7  0867               	movf	setDelayOff_GO@value,w
 17467  15D8  2DDB               	goto	L12
 17468  15D9                     l8963:	
 17469                           ;DelayOff_B1.c: 93: } else {
 17470                           
 17471                           
 17472                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 17473  15D9  3005               	movlw	5
 17474  15DA  0020               	movlb	0	; select bank0
 17475  15DB                     L12:	
 17476  15DB  00E8               	movwf	??_setDelayOff_GO
 17477  15DC  0868               	movf	??_setDelayOff_GO,w
 17478  15DD  00E2               	movwf	setProductData@value
 17479  15DE  2DE1               	goto	L11
 17480  15DF                     l8965:	
 17481                           ;DelayOff_B1.c: 95: }
 17482                           ;DelayOff_B1.c: 96: } else {
 17483                           
 17484                           
 17485                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 17486  15DF  0020               	movlb	0	; select bank0
 17487  15E0  01E2               	clrf	setProductData@value
 17488  15E1                     L11:	
 17489  15E1  0869               	movf	setDelayOff_GO@sw,w
 17490  15E2  3E1A               	addlw	26
 17491  15E3  319B  23B8         	fcall	_setProductData
 17492                           
 17493                           ;DelayOff_B1.c: 98: }
 17494                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 17495  15E5  0877               	movf	_DelayOff,w
 17496  15E6  3E02               	addlw	2
 17497  15E7  0086               	movwf	6
 17498  15E8  3001               	movlw	1	; select bank2/3
 17499  15E9  0087               	movwf	7
 17500  15EA  3000               	movlw	0
 17501  15EB  3FC0               	movwi [0]fsr1
 17502  15EC  3FC1               	movwi [1]fsr1
 17503                           
 17504                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 17505  15ED  0877               	movf	_DelayOff,w
 17506  15EE  3E04               	addlw	4
 17507  15EF  0086               	movwf	6
 17508  15F0  3001               	movlw	1	; select bank2/3
 17509  15F1  0087               	movwf	7
 17510  15F2  0181               	clrf	1
 17511  15F3  0008               	return
 17512  15F4                     __end_of_setDelayOff_GO:	
 17513                           
 17514                           	psect	text117
 17515  1BB8                     __ptext117:	
 17516 ;; *************** function _setProductData *****************
 17517 ;; Defined at:
 17518 ;;		line 605 in file "../src/Main_B1.c"
 17519 ;; Parameters:    Size  Location     Type
 17520 ;;  address         1    wreg     unsigned char 
 17521 ;;  value           1   66[BANK0 ] unsigned char 
 17522 ;; Auto vars:     Size  Location     Type
 17523 ;;  address         1   69[BANK0 ] unsigned char 
 17524 ;; Return value:  Size  Location     Type
 17525 ;;		None               void
 17526 ;; Registers used:
 17527 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17528 ;; Tracked objects:
 17529 ;;		On entry : 0/0
 17530 ;;		On exit  : 0/0
 17531 ;;		Unchanged: 0/0
 17532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17533 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17534 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17535 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17536 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17537 ;;Total ram usage:        4 bytes
 17538 ;; Hardware stack levels used:    1
 17539 ;; Hardware stack levels required when called:    4
 17540 ;; This function calls:
 17541 ;;		Nothing
 17542 ;; This function is called by:
 17543 ;;		_setDelayOff_GO
 17544 ;;		_setDimmerLights
 17545 ;;		_setDimmerLights_Adj
 17546 ;;		_setTemp_Main
 17547 ;;		_setLog_Code
 17548 ;;		_setControl_Lights_Table
 17549 ;;		_setRFSW_AdjControl
 17550 ;;		_setRF_DimmerValue
 17551 ;;		_setRF_DimmerLights
 17552 ;; This function uses a non-reentrant model
 17553 ;;
 17554                           
 17555                           
 17556                           ;psect for function _setProductData
 17557  1BB8                     _setProductData:	
 17558                           
 17559                           ;incstack = 0
 17560                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 17561                           ;setProductData@address stored from wreg
 17562  1BB8  0020               	movlb	0	; select bank0
 17563  1BB9  00E5               	movwf	setProductData@address
 17564                           
 17565                           ;Main_B1.c: 606: product->Data[address] = value;
 17566  1BBA  0862               	movf	setProductData@value,w
 17567  1BBB  00E3               	movwf	??_setProductData
 17568  1BBC  0865               	movf	setProductData@address,w
 17569  1BBD  077A               	addwf	_product,w
 17570  1BBE  00E4               	movwf	??_setProductData+1
 17571  1BBF  0864               	movf	??_setProductData+1,w
 17572  1BC0  0086               	movwf	6
 17573  1BC1  3002               	movlw	2	; select bank4/5
 17574  1BC2  0087               	movwf	7
 17575  1BC3  0863               	movf	??_setProductData,w
 17576  1BC4  0081               	movwf	1
 17577  1BC5  0008               	return
 17578  1BC6                     __end_of_setProductData:	
 17579                           
 17580                           	psect	text118
 17581  1082                     __ptext118:	
 17582 ;; *************** function _DelayTimejudge *****************
 17583 ;; Defined at:
 17584 ;;		line 112 in file "../src/DelayOff_B1.c"
 17585 ;; Parameters:    Size  Location     Type
 17586 ;;  value           1    wreg     unsigned char 
 17587 ;; Auto vars:     Size  Location     Type
 17588 ;;  value           1    9[BANK0 ] unsigned char 
 17589 ;;  k               1    8[BANK0 ] unsigned char 
 17590 ;;  j               1    7[BANK0 ] unsigned char 
 17591 ;;  i               1    6[BANK0 ] unsigned char 
 17592 ;; Return value:  Size  Location     Type
 17593 ;;                  1    wreg      unsigned char 
 17594 ;; Registers used:
 17595 ;;		wreg, status,2, status,0, pclath, cstack
 17596 ;; Tracked objects:
 17597 ;;		On entry : 0/0
 17598 ;;		On exit  : 0/0
 17599 ;;		Unchanged: 0/0
 17600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17602 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17603 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17604 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17605 ;;Total ram usage:        6 bytes
 17606 ;; Hardware stack levels used:    1
 17607 ;; Hardware stack levels required when called:    5
 17608 ;; This function calls:
 17609 ;;		___bmul
 17610 ;; This function is called by:
 17611 ;;		_setDelayOff_GO
 17612 ;; This function uses a non-reentrant model
 17613 ;;
 17614                           
 17615                           
 17616                           ;psect for function _DelayTimejudge
 17617  1082                     _DelayTimejudge:	
 17618                           
 17619                           ;incstack = 0
 17620                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 17621                           ;DelayTimejudge@value stored from wreg
 17622  1082  0020               	movlb	0	; select bank0
 17623  1083  00A9               	movwf	DelayTimejudge@value
 17624                           
 17625                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 17626  1084  3005               	movlw	5
 17627  1085  00A4               	movwf	??_DelayTimejudge
 17628  1086  0824               	movf	??_DelayTimejudge,w
 17629  1087  00A6               	movwf	DelayTimejudge@i
 17630  1088  01A7               	clrf	DelayTimejudge@j
 17631  1089  01A8               	clrf	DelayTimejudge@k
 17632                           
 17633                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 17634  108A  3031               	movlw	49
 17635  108B  0229               	subwf	DelayTimejudge@value,w
 17636  108C  1803               	skipnc
 17637  108D  28AA               	goto	l8855
 17638                           
 17639                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 17640  108E  0829               	movf	DelayTimejudge@value,w
 17641  108F  390F               	andlw	15
 17642  1090  00A4               	movwf	??_DelayTimejudge
 17643  1091  0824               	movf	??_DelayTimejudge,w
 17644  1092  00A7               	movwf	DelayTimejudge@j
 17645                           
 17646                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 17647  1093  0829               	movf	DelayTimejudge@value,w
 17648  1094  00A4               	movwf	??_DelayTimejudge
 17649  1095  3004               	movlw	4
 17650  1096                     u9445:	
 17651  1096  36A4               	lsrf	??_DelayTimejudge,f
 17652  1097  0B89               	decfsz	9,f
 17653  1098  2896               	goto	u9445
 17654  1099  0824               	movf	??_DelayTimejudge,w
 17655  109A  390F               	andlw	15
 17656  109B  00A5               	movwf	??_DelayTimejudge+1
 17657  109C  0825               	movf	??_DelayTimejudge+1,w
 17658  109D  00A8               	movwf	DelayTimejudge@k
 17659                           
 17660                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 17661  109E  300A               	movlw	10
 17662  109F  00A4               	movwf	??_DelayTimejudge
 17663  10A0  0824               	movf	??_DelayTimejudge,w
 17664  10A1  00A0               	movwf	___bmul@multiplicand
 17665  10A2  0828               	movf	DelayTimejudge@k,w
 17666  10A3  319C  2427         	fcall	___bmul
 17667  10A5  0020               	movlb	0	; select bank0
 17668  10A6  0727               	addwf	DelayTimejudge@j,w
 17669  10A7  00A5               	movwf	??_DelayTimejudge+1
 17670  10A8  0825               	movf	??_DelayTimejudge+1,w
 17671  10A9  00A6               	movwf	DelayTimejudge@i
 17672  10AA                     l8855:	
 17673                           
 17674                           ;DelayOff_B1.c: 118: }
 17675                           ;DelayOff_B1.c: 139: return i;
 17676  10AA  0826               	movf	DelayTimejudge@i,w
 17677  10AB  0008               	return
 17678  10AC                     __end_of_DelayTimejudge:	
 17679                           
 17680                           	psect	text119
 17681  1C27                     __ptext119:	
 17682 ;; *************** function ___bmul *****************
 17683 ;; Defined at:
 17684 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 17685 ;; Parameters:    Size  Location     Type
 17686 ;;  multiplier      1    wreg     unsigned char 
 17687 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 17688 ;; Auto vars:     Size  Location     Type
 17689 ;;  multiplier      1    3[BANK0 ] unsigned char 
 17690 ;;  product         1    2[BANK0 ] unsigned char 
 17691 ;; Return value:  Size  Location     Type
 17692 ;;                  1    wreg      unsigned char 
 17693 ;; Registers used:
 17694 ;;		wreg, status,2, status,0
 17695 ;; Tracked objects:
 17696 ;;		On entry : 0/0
 17697 ;;		On exit  : 0/0
 17698 ;;		Unchanged: 0/0
 17699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17700 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17701 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17703 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17704 ;;Total ram usage:        4 bytes
 17705 ;; Hardware stack levels used:    1
 17706 ;; Hardware stack levels required when called:    4
 17707 ;; This function calls:
 17708 ;;		Nothing
 17709 ;; This function is called by:
 17710 ;;		_DelayTimejudge
 17711 ;; This function uses a non-reentrant model
 17712 ;;
 17713                           
 17714                           
 17715                           ;psect for function ___bmul
 17716  1C27                     ___bmul:	
 17717                           
 17718                           ;incstack = 0
 17719                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 17720                           ;___bmul@multiplier stored from wreg
 17721  1C27  0020               	movlb	0	; select bank0
 17722  1C28  00A3               	movwf	___bmul@multiplier
 17723  1C29  01A2               	clrf	___bmul@product
 17724  1C2A                     l8593:	
 17725  1C2A  1C23               	btfss	___bmul@multiplier,0
 17726  1C2B  2C30               	goto	l8597
 17727  1C2C  0820               	movf	___bmul@multiplicand,w
 17728  1C2D  00A1               	movwf	??___bmul
 17729  1C2E  0821               	movf	??___bmul,w
 17730  1C2F  07A2               	addwf	___bmul@product,f
 17731  1C30                     l8597:	
 17732  1C30  1003               	clrc
 17733  1C31  0DA0               	rlf	___bmul@multiplicand,f
 17734  1C32  1003               	clrc
 17735  1C33  0CA3               	rrf	___bmul@multiplier,f
 17736  1C34  08A3               	movf	___bmul@multiplier,f
 17737  1C35  1D03               	skipz
 17738  1C36  2C2A               	goto	l8593
 17739  1C37  0822               	movf	___bmul@product,w
 17740  1C38  0008               	return
 17741  1C39                     __end_of___bmul:	
 17742                           
 17743                           	psect	text120
 17744  1BE4                     __ptext120:	
 17745 ;; *************** function _getDelayOff_GO *****************
 17746 ;; Defined at:
 17747 ;;		line 105 in file "../src/DelayOff_B1.c"
 17748 ;; Parameters:    Size  Location     Type
 17749 ;;  sw              1    wreg     unsigned char 
 17750 ;; Auto vars:     Size  Location     Type
 17751 ;;  sw              1    2[BANK0 ] unsigned char 
 17752 ;;  go              1    3[BANK0 ] unsigned char 
 17753 ;; Return value:  Size  Location     Type
 17754 ;;                  1    wreg      unsigned char 
 17755 ;; Registers used:
 17756 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17757 ;; Tracked objects:
 17758 ;;		On entry : 0/0
 17759 ;;		On exit  : 0/0
 17760 ;;		Unchanged: 0/0
 17761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17763 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17765 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17766 ;;Total ram usage:        2 bytes
 17767 ;; Hardware stack levels used:    1
 17768 ;; Hardware stack levels required when called:    5
 17769 ;; This function calls:
 17770 ;;		_DelayOffPointSelect
 17771 ;; This function is called by:
 17772 ;;		_setDimmerLights_SwOff
 17773 ;;		_setRFSW_Control
 17774 ;; This function uses a non-reentrant model
 17775 ;;
 17776                           
 17777                           
 17778                           ;psect for function _getDelayOff_GO
 17779  1BE4                     _getDelayOff_GO:	
 17780                           
 17781                           ;incstack = 0
 17782                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17783                           ;getDelayOff_GO@sw stored from wreg
 17784  1BE4  0020               	movlb	0	; select bank0
 17785  1BE5  00A2               	movwf	getDelayOff_GO@sw
 17786                           
 17787                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 17788  1BE6  0822               	movf	getDelayOff_GO@sw,w
 17789  1BE7  319C  24F5         	fcall	_DelayOffPointSelect
 17790                           
 17791                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 17792  1BE9  0877               	movf	_DelayOff,w
 17793  1BEA  0086               	movwf	6
 17794  1BEB  3001               	movlw	1	; select bank2/3
 17795  1BEC  0087               	movwf	7
 17796  1BED  3000               	movlw	0
 17797  1BEE  1881               	btfsc	1,1
 17798  1BEF  3001               	movlw	1
 17799  1BF0  0020               	movlb	0	; select bank0
 17800  1BF1  00A3               	movwf	getDelayOff_GO@go
 17801                           
 17802                           ;DelayOff_B1.c: 108: return go;
 17803  1BF2  0823               	movf	getDelayOff_GO@go,w
 17804  1BF3  0008               	return
 17805  1BF4                     __end_of_getDelayOff_GO:	
 17806                           
 17807                           	psect	text121
 17808  1BF4                     __ptext121:	
 17809 ;; *************** function _getDimmerLights_Status *****************
 17810 ;; Defined at:
 17811 ;;		line 785 in file "../src/Dimmer_B1.c"
 17812 ;; Parameters:    Size  Location     Type
 17813 ;;  lights          1    wreg     unsigned char 
 17814 ;; Auto vars:     Size  Location     Type
 17815 ;;  lights          1    2[BANK0 ] unsigned char 
 17816 ;;  status          1    3[BANK0 ] unsigned char 
 17817 ;; Return value:  Size  Location     Type
 17818 ;;                  1    wreg      unsigned char 
 17819 ;; Registers used:
 17820 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17821 ;; Tracked objects:
 17822 ;;		On entry : 0/0
 17823 ;;		On exit  : 0/0
 17824 ;;		Unchanged: 0/0
 17825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17827 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17830 ;;Total ram usage:        2 bytes
 17831 ;; Hardware stack levels used:    1
 17832 ;; Hardware stack levels required when called:    5
 17833 ;; This function calls:
 17834 ;;		_DimmerLightsPointSelect
 17835 ;; This function is called by:
 17836 ;;		_setDimmerLights_ErrorClose
 17837 ;;		_Exception_Main
 17838 ;;		_setRFSW_Control
 17839 ;;		_setRFSW_AdjControl
 17840 ;; This function uses a non-reentrant model
 17841 ;;
 17842                           
 17843                           
 17844                           ;psect for function _getDimmerLights_Status
 17845  1BF4                     _getDimmerLights_Status:	
 17846                           
 17847                           ;incstack = 0
 17848                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 17849                           ;getDimmerLights_Status@lights stored from wreg
 17850  1BF4  0020               	movlb	0	; select bank0
 17851  1BF5  00A2               	movwf	getDimmerLights_Status@lights
 17852                           
 17853                           ;Dimmer_B1.c: 786: DimmerLightsPointSelect(lights);
 17854  1BF6  0822               	movf	getDimmerLights_Status@lights,w
 17855  1BF7  319C  2482         	fcall	_DimmerLightsPointSelect
 17856                           
 17857                           ;Dimmer_B1.c: 787: char status = DimmerLights->Status == 1 ? 1 : 0;
 17858  1BF9  0020               	movlb	0	; select bank0
 17859  1BFA  086F               	movf	_DimmerLights,w
 17860  1BFB  3E02               	addlw	2
 17861  1BFC  0086               	movwf	6
 17862  1BFD  3001               	movlw	1	; select bank2/3
 17863  1BFE  0087               	movwf	7
 17864  1BFF  3000               	movlw	0
 17865  1C00  1881               	btfsc	1,1
 17866  1C01  3001               	movlw	1
 17867  1C02  00A3               	movwf	getDimmerLights_Status@status
 17868                           
 17869                           ;Dimmer_B1.c: 788: return status;
 17870  1C03  0823               	movf	getDimmerLights_Status@status,w
 17871  1C04  0008               	return
 17872  1C05                     __end_of_getDimmerLights_Status:	
 17873                           
 17874                           	psect	text122
 17875  1C82                     __ptext122:	
 17876 ;; *************** function _DimmerLightsPointSelect *****************
 17877 ;; Defined at:
 17878 ;;		line 341 in file "../src/Dimmer_B1.c"
 17879 ;; Parameters:    Size  Location     Type
 17880 ;;  lights          1    wreg     unsigned char 
 17881 ;; Auto vars:     Size  Location     Type
 17882 ;;  lights          1    1[BANK0 ] unsigned char 
 17883 ;; Return value:  Size  Location     Type
 17884 ;;		None               void
 17885 ;; Registers used:
 17886 ;;		wreg
 17887 ;; Tracked objects:
 17888 ;;		On entry : 0/0
 17889 ;;		On exit  : 0/0
 17890 ;;		Unchanged: 0/0
 17891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17894 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17895 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17896 ;;Total ram usage:        2 bytes
 17897 ;; Hardware stack levels used:    1
 17898 ;; Hardware stack levels required when called:    4
 17899 ;; This function calls:
 17900 ;;		Nothing
 17901 ;; This function is called by:
 17902 ;;		_setDimmerLights_Initialization
 17903 ;;		_setDimmerLights_SwOn
 17904 ;;		_setDimmerLights_SwOff
 17905 ;;		_setDimmerLights_AdjOn
 17906 ;;		_setDimmerLights_Main
 17907 ;;		_getDimmerLights_Status
 17908 ;;		_getAll_DimmerLights_AdjSw
 17909 ;;		_setDimmerLights_ErrorClose
 17910 ;;		_setDimmerLights_AdjRF
 17911 ;;		_setDimmerLights_Status
 17912 ;;		_setDimmerLights_GO
 17913 ;;		_setDimmerLights_MaxmumValue
 17914 ;;		_setDimmerLights_Trigger
 17915 ;; This function uses a non-reentrant model
 17916 ;;
 17917                           
 17918                           
 17919                           ;psect for function _DimmerLightsPointSelect
 17920  1C82                     _DimmerLightsPointSelect:	
 17921                           
 17922                           ;incstack = 0
 17923                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 17924                           ;DimmerLightsPointSelect@lights stored from wreg
 17925  1C82  0020               	movlb	0	; select bank0
 17926  1C83  00A1               	movwf	DimmerLightsPointSelect@lights
 17927                           
 17928                           ;Dimmer_B1.c: 343: if (lights == 1) {
 17929  1C84  0821               	movf	DimmerLightsPointSelect@lights,w
 17930  1C85  3A01               	xorlw	1
 17931  1C86  1D03               	skipz
 17932  1C87  2C8C               	goto	l770
 17933                           
 17934                           ;Dimmer_B1.c: 344: DimmerLights = &DimmerLights1;
 17935  1C88  30BE               	movlw	_DimmerLights1& (0+255)
 17936  1C89  00A0               	movwf	??_DimmerLightsPointSelect
 17937  1C8A  0820               	movf	??_DimmerLightsPointSelect,w
 17938  1C8B  00EF               	movwf	_DimmerLights
 17939  1C8C                     l770:	
 17940                           
 17941                           ;Dimmer_B1.c: 345: }
 17942                           ;Dimmer_B1.c: 348: if (lights == 2) {
 17943  1C8C  0821               	movf	DimmerLightsPointSelect@lights,w
 17944  1C8D  3A02               	xorlw	2
 17945  1C8E  1D03               	skipz
 17946  1C8F  0008               	return
 17947                           
 17948                           ;Dimmer_B1.c: 349: DimmerLights = &DimmerLights2;
 17949  1C90  30CF               	movlw	_DimmerLights2& (0+255)
 17950  1C91  00A0               	movwf	??_DimmerLightsPointSelect
 17951  1C92  0820               	movf	??_DimmerLightsPointSelect,w
 17952  1C93  00EF               	movwf	_DimmerLights
 17953  1C94  0008               	return
 17954  1C95                     __end_of_DimmerLightsPointSelect:	
 17955                           
 17956                           	psect	text123
 17957  16F3                     __ptext123:	
 17958 ;; *************** function _setBuz *****************
 17959 ;; Defined at:
 17960 ;;		line 22 in file "../src/Buzzer_B1.c"
 17961 ;; Parameters:    Size  Location     Type
 17962 ;;  count           1    wreg     unsigned char 
 17963 ;;  time            2    9[BANK0 ] int 
 17964 ;; Auto vars:     Size  Location     Type
 17965 ;;  count           1   12[BANK0 ] unsigned char 
 17966 ;; Return value:  Size  Location     Type
 17967 ;;		None               void
 17968 ;; Registers used:
 17969 ;;		wreg, status,2, status,0, pclath, cstack
 17970 ;; Tracked objects:
 17971 ;;		On entry : 0/0
 17972 ;;		On exit  : 0/0
 17973 ;;		Unchanged: 0/0
 17974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17975 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17978 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17979 ;;Total ram usage:        4 bytes
 17980 ;; Hardware stack levels used:    1
 17981 ;; Hardware stack levels required when called:    5
 17982 ;; This function calls:
 17983 ;;		___awdiv
 17984 ;; This function is called by:
 17985 ;;		_DlyOff_Main
 17986 ;;		_setDimmerLights_SwOn
 17987 ;;		_setDimmerLights_Adj
 17988 ;;		_my_MainTimer
 17989 ;;		_Exception_Main
 17990 ;;		_setTemp_Main
 17991 ;;		_setLog_Code
 17992 ;;		_setControl_Lights_Table
 17993 ;;		_setRFSW_Control
 17994 ;;		_setSw_Main
 17995 ;; This function uses a non-reentrant model
 17996 ;;
 17997                           
 17998                           
 17999                           ;psect for function _setBuz
 18000  16F3                     _setBuz:	
 18001                           
 18002                           ;incstack = 0
 18003                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18004                           ;setBuz@count stored from wreg
 18005  16F3  0020               	movlb	0	; select bank0
 18006  16F4  00AC               	movwf	setBuz@count
 18007                           
 18008                           ;Buzzer_B1.c: 23: time /= 10;
 18009  16F5  300A               	movlw	10
 18010  16F6  00A0               	movwf	___awdiv@divisor
 18011  16F7  3000               	movlw	0
 18012  16F8  00A1               	movwf	___awdiv@divisor+1
 18013  16F9  082A               	movf	setBuz@time+1,w
 18014  16FA  01A3               	clrf	___awdiv@dividend+1
 18015  16FB  07A3               	addwf	___awdiv@dividend+1,f
 18016  16FC  0829               	movf	setBuz@time,w
 18017  16FD  01A2               	clrf	___awdiv@dividend
 18018  16FE  07A2               	addwf	___awdiv@dividend,f
 18019  16FF  3196  2647  3196   	fcall	___awdiv
 18020  1702  0020               	movlb	0	; select bank0
 18021  1703  0821               	movf	?___awdiv+1,w
 18022  1704  01AA               	clrf	setBuz@time+1
 18023  1705  07AA               	addwf	setBuz@time+1,f
 18024  1706  0820               	movf	?___awdiv,w
 18025  1707  01A9               	clrf	setBuz@time
 18026  1708  07A9               	addwf	setBuz@time,f
 18027                           
 18028                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18029  1709  0021               	movlb	1	; select bank1
 18030  170A  1C3C               	btfss	_Buz1^(0+128),0
 18031  170B  0008               	return
 18032                           
 18033                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18034  170C  18BC               	btfsc	_Buz1^(0+128),1
 18035  170D  2F24               	goto	l96
 18036                           
 18037                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18038  170E  14BC               	bsf	_Buz1^(0+128),1
 18039                           
 18040                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18041  170F  01BD               	clrf	(_Buz1^(0+128)+1)
 18042  1710  01BE               	clrf	((_Buz1+1)^(0+128)+1)
 18043                           
 18044                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18045  1711  0020               	movlb	0	; select bank0
 18046  1712  082C               	movf	setBuz@count,w
 18047  1713  00AB               	movwf	??_setBuz
 18048  1714  082B               	movf	??_setBuz,w
 18049  1715  0021               	movlb	1	; select bank1
 18050  1716  00BF               	movwf	(_Buz1^(0+128)+3)
 18051                           
 18052                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18053  1717  0020               	movlb	0	; select bank0
 18054  1718  082A               	movf	setBuz@time+1,w
 18055  1719  0021               	movlb	1	; select bank1
 18056  171A  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 18057  171B  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 18058  171C  0020               	movlb	0	; select bank0
 18059  171D  0829               	movf	setBuz@time,w
 18060  171E  0021               	movlb	1	; select bank1
 18061  171F  01C2               	clrf	(_Buz1^(0+128)+6)
 18062  1720  07C2               	addwf	(_Buz1^(0+128)+6),f
 18063                           
 18064                           ;Buzzer_B1.c: 30: RB3 = 1;
 18065  1721  0020               	movlb	0	; select bank0
 18066  1722  158D               	bsf	13,3	;volatile
 18067                           
 18068                           ;Buzzer_B1.c: 31: } else {
 18069  1723  0008               	return
 18070  1724                     l96:	
 18071                           
 18072                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18073  1724  19BC               	btfsc	_Buz1^(0+128),3
 18074  1725  2F38               	goto	l98
 18075                           
 18076                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18077  1726  15BC               	bsf	_Buz1^(0+128),3
 18078                           
 18079                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18080  1727  0020               	movlb	0	; select bank0
 18081  1728  082C               	movf	setBuz@count,w
 18082  1729  00AB               	movwf	??_setBuz
 18083  172A  082B               	movf	??_setBuz,w
 18084  172B  0021               	movlb	1	; select bank1
 18085  172C  00C0               	movwf	(_Buz1^(0+128)+4)
 18086                           
 18087                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18088  172D  0020               	movlb	0	; select bank0
 18089  172E  082A               	movf	setBuz@time+1,w
 18090  172F  0021               	movlb	1	; select bank1
 18091  1730  01C5               	clrf	((_Buz1+1)^(0+128)+8)
 18092  1731  07C5               	addwf	((_Buz1+1)^(0+128)+8),f
 18093  1732  0020               	movlb	0	; select bank0
 18094  1733  0829               	movf	setBuz@time,w
 18095  1734  0021               	movlb	1	; select bank1
 18096  1735  01C4               	clrf	(_Buz1^(0+128)+8)
 18097  1736  07C4               	addwf	(_Buz1^(0+128)+8),f
 18098                           
 18099                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18100  1737  0008               	return
 18101  1738                     l98:	
 18102  1738  1A3C               	btfsc	_Buz1^(0+128),4
 18103  1739  0008               	return
 18104                           
 18105                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18106  173A  163C               	bsf	_Buz1^(0+128),4
 18107                           
 18108                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18109  173B  0020               	movlb	0	; select bank0
 18110  173C  082C               	movf	setBuz@count,w
 18111  173D  00AB               	movwf	??_setBuz
 18112  173E  082B               	movf	??_setBuz,w
 18113  173F  0021               	movlb	1	; select bank1
 18114  1740  00C1               	movwf	(_Buz1^(0+128)+5)
 18115                           
 18116                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18117  1741  0020               	movlb	0	; select bank0
 18118  1742  082A               	movf	setBuz@time+1,w
 18119  1743  0021               	movlb	1	; select bank1
 18120  1744  01C7               	clrf	((_Buz1+1)^(0+128)+10)
 18121  1745  07C7               	addwf	((_Buz1+1)^(0+128)+10),f
 18122  1746  0020               	movlb	0	; select bank0
 18123  1747  0829               	movf	setBuz@time,w
 18124  1748  0021               	movlb	1	; select bank1
 18125  1749  01C6               	clrf	(_Buz1^(0+128)+10)
 18126  174A  07C6               	addwf	(_Buz1^(0+128)+10),f
 18127  174B  0008               	return
 18128  174C                     __end_of_setBuz:	
 18129                           
 18130                           	psect	text124
 18131  1647                     __ptext124:	
 18132 ;; *************** function ___awdiv *****************
 18133 ;; Defined at:
 18134 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18135 ;; Parameters:    Size  Location     Type
 18136 ;;  divisor         2    0[BANK0 ] int 
 18137 ;;  dividend        2    2[BANK0 ] int 
 18138 ;; Auto vars:     Size  Location     Type
 18139 ;;  quotient        2    7[BANK0 ] int 
 18140 ;;  sign            1    6[BANK0 ] unsigned char 
 18141 ;;  counter         1    5[BANK0 ] unsigned char 
 18142 ;; Return value:  Size  Location     Type
 18143 ;;                  2    0[BANK0 ] int 
 18144 ;; Registers used:
 18145 ;;		wreg, status,2, status,0
 18146 ;; Tracked objects:
 18147 ;;		On entry : 0/0
 18148 ;;		On exit  : 0/0
 18149 ;;		Unchanged: 0/0
 18150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18151 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18152 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18154 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18155 ;;Total ram usage:        9 bytes
 18156 ;; Hardware stack levels used:    1
 18157 ;; Hardware stack levels required when called:    4
 18158 ;; This function calls:
 18159 ;;		Nothing
 18160 ;; This function is called by:
 18161 ;;		_setBuz
 18162 ;; This function uses a non-reentrant model
 18163 ;;
 18164                           
 18165                           
 18166                           ;psect for function ___awdiv
 18167  1647                     ___awdiv:	
 18168                           
 18169                           ;incstack = 0
 18170                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18171  1647  0020               	movlb	0	; select bank0
 18172  1648  01A6               	clrf	___awdiv@sign
 18173  1649  1FA1               	btfss	___awdiv@divisor+1,7
 18174  164A  2E52               	goto	l8883
 18175  164B  09A0               	comf	___awdiv@divisor,f
 18176  164C  09A1               	comf	___awdiv@divisor+1,f
 18177  164D  0AA0               	incf	___awdiv@divisor,f
 18178  164E  1903               	skipnz
 18179  164F  0AA1               	incf	___awdiv@divisor+1,f
 18180  1650  01A6               	clrf	___awdiv@sign
 18181  1651  0AA6               	incf	___awdiv@sign,f
 18182  1652                     l8883:	
 18183  1652  1FA3               	btfss	___awdiv@dividend+1,7
 18184  1653  2E5D               	goto	l8889
 18185  1654  09A2               	comf	___awdiv@dividend,f
 18186  1655  09A3               	comf	___awdiv@dividend+1,f
 18187  1656  0AA2               	incf	___awdiv@dividend,f
 18188  1657  1903               	skipnz
 18189  1658  0AA3               	incf	___awdiv@dividend+1,f
 18190  1659  3001               	movlw	1
 18191  165A  00A4               	movwf	??___awdiv
 18192  165B  0824               	movf	??___awdiv,w
 18193  165C  06A6               	xorwf	___awdiv@sign,f
 18194  165D                     l8889:	
 18195  165D  01A7               	clrf	___awdiv@quotient
 18196  165E  01A8               	clrf	___awdiv@quotient+1
 18197  165F  0821               	movf	___awdiv@divisor+1,w
 18198  1660  0420               	iorwf	___awdiv@divisor,w
 18199  1661  1903               	skipnz
 18200  1662  2E8C               	goto	l8911
 18201  1663  01A5               	clrf	___awdiv@counter
 18202  1664  0AA5               	incf	___awdiv@counter,f
 18203  1665                     l8899:	
 18204  1665  1BA1               	btfsc	___awdiv@divisor+1,7
 18205  1666  2E71               	goto	l8901
 18206  1667  3001               	movlw	1
 18207  1668                     u9505:	
 18208  1668  35A0               	lslf	___awdiv@divisor,f
 18209  1669  0DA1               	rlf	___awdiv@divisor+1,f
 18210  166A  0B89               	decfsz	9,f
 18211  166B  2E68               	goto	u9505
 18212  166C  3001               	movlw	1
 18213  166D  00A4               	movwf	??___awdiv
 18214  166E  0824               	movf	??___awdiv,w
 18215  166F  07A5               	addwf	___awdiv@counter,f
 18216  1670  2E65               	goto	l8899
 18217  1671                     l8901:	
 18218  1671  3001               	movlw	1
 18219  1672                     u9525:	
 18220  1672  35A7               	lslf	___awdiv@quotient,f
 18221  1673  0DA8               	rlf	___awdiv@quotient+1,f
 18222  1674  0B89               	decfsz	9,f
 18223  1675  2E72               	goto	u9525
 18224  1676  0821               	movf	___awdiv@divisor+1,w
 18225  1677  0223               	subwf	___awdiv@dividend+1,w
 18226  1678  1D03               	skipz
 18227  1679  2E7C               	goto	u9535
 18228  167A  0820               	movf	___awdiv@divisor,w
 18229  167B  0222               	subwf	___awdiv@dividend,w
 18230  167C                     u9535:	
 18231  167C  1C03               	skipc
 18232  167D  2E83               	goto	l8907
 18233  167E  0820               	movf	___awdiv@divisor,w
 18234  167F  02A2               	subwf	___awdiv@dividend,f
 18235  1680  0821               	movf	___awdiv@divisor+1,w
 18236  1681  3BA3               	subwfb	___awdiv@dividend+1,f
 18237  1682  1427               	bsf	___awdiv@quotient,0
 18238  1683                     l8907:	
 18239  1683  3001               	movlw	1
 18240  1684                     u9545:	
 18241  1684  36A1               	lsrf	___awdiv@divisor+1,f
 18242  1685  0CA0               	rrf	___awdiv@divisor,f
 18243  1686  0B89               	decfsz	9,f
 18244  1687  2E84               	goto	u9545
 18245  1688  3001               	movlw	1
 18246  1689  02A5               	subwf	___awdiv@counter,f
 18247  168A  1D03               	btfss	3,2
 18248  168B  2E71               	goto	l8901
 18249  168C                     l8911:	
 18250  168C  0826               	movf	___awdiv@sign,w
 18251  168D  1903               	btfsc	3,2
 18252  168E  2E94               	goto	l8915
 18253  168F  09A7               	comf	___awdiv@quotient,f
 18254  1690  09A8               	comf	___awdiv@quotient+1,f
 18255  1691  0AA7               	incf	___awdiv@quotient,f
 18256  1692  1903               	skipnz
 18257  1693  0AA8               	incf	___awdiv@quotient+1,f
 18258  1694                     l8915:	
 18259  1694  0828               	movf	___awdiv@quotient+1,w
 18260  1695  01A1               	clrf	?___awdiv+1
 18261  1696  07A1               	addwf	?___awdiv+1,f
 18262  1697  0827               	movf	___awdiv@quotient,w
 18263  1698  01A0               	clrf	?___awdiv
 18264  1699  07A0               	addwf	?___awdiv,f
 18265  169A  0008               	return
 18266  169B                     __end_of___awdiv:	
 18267                           
 18268                           	psect	text125
 18269  1AF3                     __ptext125:	
 18270 ;; *************** function _DelayOff_Initialization *****************
 18271 ;; Defined at:
 18272 ;;		line 26 in file "../src/DelayOff_B1.c"
 18273 ;; Parameters:    Size  Location     Type
 18274 ;;		None
 18275 ;; Auto vars:     Size  Location     Type
 18276 ;;		None
 18277 ;; Return value:  Size  Location     Type
 18278 ;;		None               void
 18279 ;; Registers used:
 18280 ;;		wreg, status,2, status,0, pclath, cstack
 18281 ;; Tracked objects:
 18282 ;;		On entry : 0/0
 18283 ;;		On exit  : 0/0
 18284 ;;		Unchanged: 0/0
 18285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18290 ;;Total ram usage:        0 bytes
 18291 ;; Hardware stack levels used:    1
 18292 ;; Hardware stack levels required when called:    6
 18293 ;; This function calls:
 18294 ;;		_DlyOff_Initialization
 18295 ;; This function is called by:
 18296 ;;		_main
 18297 ;; This function uses a non-reentrant model
 18298 ;;
 18299                           
 18300                           
 18301                           ;psect for function _DelayOff_Initialization
 18302  1AF3                     _DelayOff_Initialization:	
 18303                           
 18304                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18305                           
 18306                           ;incstack = 0
 18307                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18308  1AF3  3001               	movlw	1
 18309  1AF4  319A  22DA  319A   	fcall	_DlyOff_Initialization
 18310                           
 18311                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 18312  1AF7  3002               	movlw	2
 18313  1AF8  319A  22DA         	fcall	_DlyOff_Initialization
 18314  1AFA  0008               	return
 18315  1AFB                     __end_of_DelayOff_Initialization:	
 18316                           
 18317                           	psect	text126
 18318  1ADA                     __ptext126:	
 18319 ;; *************** function _DlyOff_Initialization *****************
 18320 ;; Defined at:
 18321 ;;		line 56 in file "../src/DelayOff_B1.c"
 18322 ;; Parameters:    Size  Location     Type
 18323 ;;  sw              1    wreg     unsigned char 
 18324 ;; Auto vars:     Size  Location     Type
 18325 ;;  sw              1    2[BANK0 ] unsigned char 
 18326 ;; Return value:  Size  Location     Type
 18327 ;;		None               void
 18328 ;; Registers used:
 18329 ;;		wreg, status,2, status,0, pclath, cstack
 18330 ;; Tracked objects:
 18331 ;;		On entry : 0/0
 18332 ;;		On exit  : 0/0
 18333 ;;		Unchanged: 0/0
 18334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18336 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18338 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18339 ;;Total ram usage:        1 bytes
 18340 ;; Hardware stack levels used:    1
 18341 ;; Hardware stack levels required when called:    5
 18342 ;; This function calls:
 18343 ;;		_DelayOffPointSelect
 18344 ;; This function is called by:
 18345 ;;		_DelayOff_Initialization
 18346 ;; This function uses a non-reentrant model
 18347 ;;
 18348                           
 18349                           
 18350                           ;psect for function _DlyOff_Initialization
 18351  1ADA                     _DlyOff_Initialization:	
 18352                           
 18353                           ;incstack = 0
 18354                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18355                           ;DlyOff_Initialization@sw stored from wreg
 18356  1ADA  0020               	movlb	0	; select bank0
 18357  1ADB  00A2               	movwf	DlyOff_Initialization@sw
 18358                           
 18359                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18360  1ADC  0822               	movf	DlyOff_Initialization@sw,w
 18361  1ADD  319C  24F5         	fcall	_DelayOffPointSelect
 18362  1ADF  0008               	return
 18363  1AE0                     __end_of_DlyOff_Initialization:	
 18364                           
 18365                           	psect	text127
 18366  1CF5                     __ptext127:	
 18367 ;; *************** function _DelayOffPointSelect *****************
 18368 ;; Defined at:
 18369 ;;		line 7 in file "../src/DelayOff_B1.c"
 18370 ;; Parameters:    Size  Location     Type
 18371 ;;  sw              1    wreg     unsigned char 
 18372 ;; Auto vars:     Size  Location     Type
 18373 ;;  sw              1    1[BANK0 ] unsigned char 
 18374 ;; Return value:  Size  Location     Type
 18375 ;;		None               void
 18376 ;; Registers used:
 18377 ;;		wreg
 18378 ;; Tracked objects:
 18379 ;;		On entry : 0/0
 18380 ;;		On exit  : 0/0
 18381 ;;		Unchanged: 0/0
 18382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18385 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18386 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18387 ;;Total ram usage:        2 bytes
 18388 ;; Hardware stack levels used:    1
 18389 ;; Hardware stack levels required when called:    4
 18390 ;; This function calls:
 18391 ;;		Nothing
 18392 ;; This function is called by:
 18393 ;;		_DlyOff_Initialization
 18394 ;;		_DlyOff_Main
 18395 ;;		_setDelayOff_GO
 18396 ;;		_getDelayOff_GO
 18397 ;; This function uses a non-reentrant model
 18398 ;;
 18399                           
 18400                           
 18401                           ;psect for function _DelayOffPointSelect
 18402  1CF5                     _DelayOffPointSelect:	
 18403                           
 18404                           ;incstack = 0
 18405                           ; Regs used in _DelayOffPointSelect: [wreg]
 18406                           ;DelayOffPointSelect@sw stored from wreg
 18407  1CF5  0020               	movlb	0	; select bank0
 18408  1CF6  00A1               	movwf	DelayOffPointSelect@sw
 18409                           
 18410                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18411  1CF7  0821               	movf	DelayOffPointSelect@sw,w
 18412  1CF8  3A01               	xorlw	1
 18413  1CF9  1D03               	skipz
 18414  1CFA  2D00               	goto	l8839
 18415                           
 18416                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18417  1CFB  3055               	movlw	_DlySw1& (0+255)
 18418  1CFC  00A0               	movwf	??_DelayOffPointSelect
 18419  1CFD  0820               	movf	??_DelayOffPointSelect,w
 18420  1CFE  00F7               	movwf	_DelayOff
 18421                           
 18422                           ;DelayOff_B1.c: 11: }
 18423  1CFF  0008               	return
 18424  1D00                     l8839:	
 18425                           
 18426                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 18427  1D00  0821               	movf	DelayOffPointSelect@sw,w
 18428  1D01  3A02               	xorlw	2
 18429  1D02  1D03               	skipz
 18430  1D03  0008               	return
 18431                           
 18432                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 18433  1D04  305A               	movlw	_DlySw2& (0+255)
 18434  1D05  00A0               	movwf	??_DelayOffPointSelect
 18435  1D06  0820               	movf	??_DelayOffPointSelect,w
 18436  1D07  00F7               	movwf	_DelayOff
 18437  1D08  0008               	return
 18438  1D09                     __end_of_DelayOffPointSelect:	
 18439                           
 18440                           	psect	text128
 18441  1419                     __ptext128:	
 18442 ;; *************** function _Buzzer_Main *****************
 18443 ;; Defined at:
 18444 ;;		line 46 in file "../src/Buzzer_B1.c"
 18445 ;; Parameters:    Size  Location     Type
 18446 ;;		None
 18447 ;; Auto vars:     Size  Location     Type
 18448 ;;		None
 18449 ;; Return value:  Size  Location     Type
 18450 ;;		None               void
 18451 ;; Registers used:
 18452 ;;		wreg, status,2, status,0
 18453 ;; Tracked objects:
 18454 ;;		On entry : 0/0
 18455 ;;		On exit  : 0/0
 18456 ;;		Unchanged: 0/0
 18457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18460 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18461 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18462 ;;Total ram usage:        1 bytes
 18463 ;; Hardware stack levels used:    1
 18464 ;; Hardware stack levels required when called:    4
 18465 ;; This function calls:
 18466 ;;		Nothing
 18467 ;; This function is called by:
 18468 ;;		_main
 18469 ;; This function uses a non-reentrant model
 18470 ;;
 18471                           
 18472                           
 18473                           ;psect for function _Buzzer_Main
 18474  1419                     _Buzzer_Main:	
 18475                           
 18476                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18477                           
 18478                           ;incstack = 0
 18479                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18480  1419  0021               	movlb	1	; select bank1
 18481  141A  1CBC               	btfss	_Buz1^(0+128),1
 18482  141B  0008               	return
 18483                           
 18484                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18485  141C  3001               	movlw	1
 18486  141D  07BD               	addwf	(_Buz1^(0+128)+1),f
 18487  141E  3000               	movlw	0
 18488  141F  3DBE               	addwfc	((_Buz1+1)^(0+128)+1),f
 18489                           
 18490                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18491  1420  0843               	movf	((_Buz1+1)^(0+128)+6),w
 18492  1421  023E               	subwf	((_Buz1+1)^(0+128)+1),w
 18493  1422  1D03               	skipz
 18494  1423  2C26               	goto	u11885
 18495  1424  0842               	movf	(_Buz1^(0+128)+6),w
 18496  1425  023D               	subwf	(_Buz1^(0+128)+1),w
 18497  1426                     u11885:	
 18498  1426  1C03               	skipc
 18499  1427  0008               	return
 18500                           
 18501                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18502  1428  01BD               	clrf	(_Buz1^(0+128)+1)
 18503  1429  01BE               	clrf	((_Buz1+1)^(0+128)+1)
 18504                           
 18505                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18506  142A  12BC               	bcf	_Buz1^(0+128),5
 18507  142B  0020               	movlb	0	; select bank0
 18508  142C  1D8D               	btfss	13,3	;volatile
 18509  142D  2C30               	goto	l10451
 18510  142E  0021               	movlb	1	; select bank1
 18511  142F  16BC               	bsf	_Buz1^(0+128),5
 18512  1430                     l10451:	
 18513                           
 18514                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18515  1430  0021               	movlb	1	; select bank1
 18516  1431  1ABC               	btfsc	_Buz1^(0+128),5
 18517  1432  2C5C               	goto	l106
 18518                           
 18519                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18520  1433  08BF               	movf	(_Buz1^(0+128)+3),f
 18521  1434  1D03               	skipz
 18522  1435  2C58               	goto	l107
 18523                           
 18524                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18525  1436  1DBC               	btfss	_Buz1^(0+128),3
 18526  1437  2C46               	goto	l108
 18527                           
 18528                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18529  1438  11BC               	bcf	_Buz1^(0+128),3
 18530                           
 18531                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18532  1439  0840               	movf	(_Buz1^(0+128)+4),w
 18533  143A  0020               	movlb	0	; select bank0
 18534  143B  00A0               	movwf	??_Buzzer_Main
 18535  143C  0820               	movf	??_Buzzer_Main,w
 18536  143D  0021               	movlb	1	; select bank1
 18537  143E  00BF               	movwf	(_Buz1^(0+128)+3)
 18538                           
 18539                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18540  143F  0845               	movf	((_Buz1+1)^(0+128)+8),w
 18541  1440  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 18542  1441  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 18543  1442  0844               	movf	(_Buz1^(0+128)+8),w
 18544  1443  01C2               	clrf	(_Buz1^(0+128)+6)
 18545  1444  07C2               	addwf	(_Buz1^(0+128)+6),f
 18546                           
 18547                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18548  1445  0008               	return
 18549  1446                     l108:	
 18550  1446  1E3C               	btfss	_Buz1^(0+128),4
 18551  1447  2C56               	goto	l110
 18552                           
 18553                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18554  1448  123C               	bcf	_Buz1^(0+128),4
 18555                           
 18556                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18557  1449  0841               	movf	(_Buz1^(0+128)+5),w
 18558  144A  0020               	movlb	0	; select bank0
 18559  144B  00A0               	movwf	??_Buzzer_Main
 18560  144C  0820               	movf	??_Buzzer_Main,w
 18561  144D  0021               	movlb	1	; select bank1
 18562  144E  00BF               	movwf	(_Buz1^(0+128)+3)
 18563                           
 18564                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18565  144F  0847               	movf	((_Buz1+1)^(0+128)+10),w
 18566  1450  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 18567  1451  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 18568  1452  0846               	movf	(_Buz1^(0+128)+10),w
 18569  1453  01C2               	clrf	(_Buz1^(0+128)+6)
 18570  1454  07C2               	addwf	(_Buz1^(0+128)+6),f
 18571                           
 18572                           ;Buzzer_B1.c: 62: } else {
 18573  1455  0008               	return
 18574  1456                     l110:	
 18575                           
 18576                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18577  1456  10BC               	bcf	_Buz1^(0+128),1
 18578                           
 18579                           ;Buzzer_B1.c: 64: }
 18580                           ;Buzzer_B1.c: 65: } else {
 18581  1457  0008               	return
 18582  1458                     l107:	
 18583                           
 18584                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18585  1458  16BC               	bsf	_Buz1^(0+128),5
 18586                           
 18587                           ;Buzzer_B1.c: 68: RB3 = 1;
 18588  1459  0020               	movlb	0	; select bank0
 18589  145A  158D               	bsf	13,3	;volatile
 18590                           
 18591                           ;Buzzer_B1.c: 69: }
 18592                           ;Buzzer_B1.c: 70: } else {
 18593  145B  0008               	return
 18594  145C                     l106:	
 18595                           
 18596                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18597  145C  12BC               	bcf	_Buz1^(0+128),5
 18598                           
 18599                           ;Buzzer_B1.c: 73: RB3 = 0;
 18600  145D  0020               	movlb	0	; select bank0
 18601  145E  118D               	bcf	13,3	;volatile
 18602                           
 18603                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18604  145F  3001               	movlw	1
 18605  1460  0021               	movlb	1	; select bank1
 18606  1461  02BF               	subwf	(_Buz1^(0+128)+3),f
 18607  1462  0008               	return
 18608  1463                     __end_of_Buzzer_Main:	
 18609                           
 18610                           	psect	text129
 18611  1AAF                     __ptext129:	
 18612 ;; *************** function _Buzzer_Initialization *****************
 18613 ;; Defined at:
 18614 ;;		line 11 in file "../src/Buzzer_B1.c"
 18615 ;; Parameters:    Size  Location     Type
 18616 ;;		None
 18617 ;; Auto vars:     Size  Location     Type
 18618 ;;		None
 18619 ;; Return value:  Size  Location     Type
 18620 ;;		None               void
 18621 ;; Registers used:
 18622 ;;		None
 18623 ;; Tracked objects:
 18624 ;;		On entry : 0/0
 18625 ;;		On exit  : 0/0
 18626 ;;		Unchanged: 0/0
 18627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18632 ;;Total ram usage:        0 bytes
 18633 ;; Hardware stack levels used:    1
 18634 ;; Hardware stack levels required when called:    4
 18635 ;; This function calls:
 18636 ;;		Nothing
 18637 ;; This function is called by:
 18638 ;;		_main
 18639 ;; This function uses a non-reentrant model
 18640 ;;
 18641                           
 18642                           
 18643                           ;psect for function _Buzzer_Initialization
 18644  1AAF                     _Buzzer_Initialization:	
 18645                           
 18646                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18647                           
 18648                           ;incstack = 0
 18649                           ; Regs used in _Buzzer_Initialization: []
 18650  1AAF  0021               	movlb	1	; select bank1
 18651  1AB0  143C               	bsf	_Buz1^(0+128),0
 18652  1AB1  0008               	return
 18653  1AB2                     __end_of_Buzzer_Initialization:	
 18654                           
 18655                           	psect	intentry
 18656  0004                     __pintentry:	
 18657 ;; *************** function _ISR *****************
 18658 ;; Defined at:
 18659 ;;		line 108 in file "../src/MCU_B1.c"
 18660 ;; Parameters:    Size  Location     Type
 18661 ;;		None
 18662 ;; Auto vars:     Size  Location     Type
 18663 ;;		None
 18664 ;; Return value:  Size  Location     Type
 18665 ;;		None               void
 18666 ;; Registers used:
 18667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18668 ;; Tracked objects:
 18669 ;;		On entry : 0/0
 18670 ;;		On exit  : 0/0
 18671 ;;		Unchanged: 0/0
 18672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18675 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18676 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18677 ;;Total ram usage:        1 bytes
 18678 ;; Hardware stack levels used:    1
 18679 ;; Hardware stack levels required when called:    3
 18680 ;; This function calls:
 18681 ;;		_IOC_ISR
 18682 ;;		_TMR1_ISR
 18683 ;; This function is called by:
 18684 ;;		Interrupt level 1
 18685 ;; This function uses a non-reentrant model
 18686 ;;
 18687                           
 18688  0004                     _ISR:	
 18689                           
 18690                           ;incstack = 0
 18691                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18692  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18693  0005  3180               	pagesel	$
 18694  0006  0020               	movlb	0	; select bank0
 18695  0007  087F               	movf	127,w
 18696  0008  00F4               	movwf	??_ISR
 18697                           
 18698                           ;MCU_B1.c: 110: IOC_ISR();
 18699  0009  319C  24E1  3180   	fcall	_IOC_ISR
 18700                           
 18701                           ;MCU_B1.c: 112: ;;
 18702                           ;MCU_B1.c: 114: TMR1_ISR();
 18703  000C  319F  27D7         	fcall	_TMR1_ISR
 18704  000E  0874               	movf	??_ISR,w
 18705  000F  0020               	movlb	0	; select bank0
 18706  0010  00FF               	movwf	127
 18707  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18708  0012  0009               	retfie
 18709  0013                     __end_of_ISR:	
 18710                           
 18711                           	psect	text131
 18712  1FD7                     __ptext131:	
 18713 ;; *************** function _TMR1_ISR *****************
 18714 ;; Defined at:
 18715 ;;		line 210 in file "../src/MCU_B1.c"
 18716 ;; Parameters:    Size  Location     Type
 18717 ;;		None
 18718 ;; Auto vars:     Size  Location     Type
 18719 ;;		None
 18720 ;; Return value:  Size  Location     Type
 18721 ;;		None               void
 18722 ;; Registers used:
 18723 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18724 ;; Tracked objects:
 18725 ;;		On entry : 0/0
 18726 ;;		On exit  : 0/0
 18727 ;;		Unchanged: 0/0
 18728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18733 ;;Total ram usage:        0 bytes
 18734 ;; Hardware stack levels used:    1
 18735 ;; Hardware stack levels required when called:    2
 18736 ;; This function calls:
 18737 ;;		_setDimmerLights_IntrControl
 18738 ;; This function is called by:
 18739 ;;		_ISR
 18740 ;; This function uses a non-reentrant model
 18741 ;;
 18742                           
 18743                           
 18744                           ;psect for function _TMR1_ISR
 18745  1FD7                     _TMR1_ISR:	
 18746                           
 18747                           ;MCU_B1.c: 212: if (TMR1IE == 1 && TMR1IF == 1) {
 18748                           
 18749                           ;incstack = 0
 18750                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18751  1FD7  0021               	movlb	1	; select bank1
 18752  1FD8  1C11               	btfss	17,0	;volatile
 18753  1FD9  0008               	return
 18754  1FDA  0020               	movlb	0	; select bank0
 18755  1FDB  1C11               	btfss	17,0	;volatile
 18756  1FDC  0008               	return
 18757                           
 18758                           ;MCU_B1.c: 213: TMR1H = (int)((65536-1480)/256);
 18759  1FDD  30FA               	movlw	250
 18760  1FDE  0097               	movwf	23	;volatile
 18761                           
 18762                           ;MCU_B1.c: 214: TMR1L = (int)((65536-1480)%256);
 18763  1FDF  3038               	movlw	56
 18764  1FE0  0096               	movwf	22	;volatile
 18765                           
 18766                           ;MCU_B1.c: 215: TMR1IF = 0;
 18767  1FE1  1011               	bcf	17,0	;volatile
 18768                           
 18769                           ;MCU_B1.c: 220: setDimmerLights_IntrControl(1);
 18770  1FE2  3001               	movlw	1
 18771  1FE3  3183  2368  319F   	fcall	_setDimmerLights_IntrControl
 18772                           
 18773                           ;MCU_B1.c: 225: setDimmerLights_IntrControl(2);
 18774  1FE6  3002               	movlw	2
 18775  1FE7  3183  2368  319F   	fcall	_setDimmerLights_IntrControl
 18776                           
 18777                           ;MCU_B1.c: 236: Timer1.Count++;
 18778  1FEA  3001               	movlw	1
 18779  1FEB  0022               	movlb	2	; select bank2
 18780  1FEC  07A1               	addwf	(_Timer1^(0+256)+1),f
 18781  1FED  3000               	movlw	0
 18782  1FEE  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18783                           
 18784                           ;MCU_B1.c: 237: if (Timer1.Count == 100) {
 18785  1FEF  3001               	movlw	1
 18786  1FF0  3E20               	addlw	_Timer1& (0+255)
 18787  1FF1  0086               	movwf	6
 18788  1FF2  3001               	movlw	1	; select bank2/3
 18789  1FF3  0087               	movwf	7
 18790  1FF4  3F40               	moviw [0]fsr1
 18791  1FF5  3A64               	xorlw	100
 18792  1FF6  1D03               	skipz
 18793  1FF7  2FFA               	goto	u793_25
 18794  1FF8  3F41               	moviw [1]fsr1
 18795  1FF9  3A00               	xorlw	0
 18796  1FFA                     u793_25:	
 18797  1FFA  1D03               	skipz
 18798  1FFB  0008               	return
 18799                           
 18800                           ;MCU_B1.c: 238: Timer1.Count = 0;
 18801  1FFC  01A1               	clrf	(_Timer1^(0+256)+1)
 18802  1FFD  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18803                           
 18804                           ;MCU_B1.c: 239: Timer1.Timeout = 1;
 18805  1FFE  1420               	bsf	_Timer1^(0+256),0
 18806                           
 18807                           ;MCU_B1.c: 240: }
 18808                           ;MCU_B1.c: 241: return;
 18809  1FFF  0008               	return
 18810  2000                     __end_of_TMR1_ISR:	
 18811                           
 18812                           	psect	text132
 18813  0368                     __ptext132:	
 18814 ;; *************** function _setDimmerLights_IntrControl *****************
 18815 ;; Defined at:
 18816 ;;		line 116 in file "../src/Dimmer_B1.c"
 18817 ;; Parameters:    Size  Location     Type
 18818 ;;  lights          1    wreg     unsigned char 
 18819 ;; Auto vars:     Size  Location     Type
 18820 ;;  lights          1    3[COMMON] unsigned char 
 18821 ;; Return value:  Size  Location     Type
 18822 ;;		None               void
 18823 ;; Registers used:
 18824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18825 ;; Tracked objects:
 18826 ;;		On entry : 0/0
 18827 ;;		On exit  : 0/0
 18828 ;;		Unchanged: 0/0
 18829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18831 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18832 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18833 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18834 ;;Total ram usage:        2 bytes
 18835 ;; Hardware stack levels used:    1
 18836 ;; Hardware stack levels required when called:    1
 18837 ;; This function calls:
 18838 ;;		_DimmerIntrPointSelect
 18839 ;; This function is called by:
 18840 ;;		_TMR1_ISR
 18841 ;; This function uses a non-reentrant model
 18842 ;;
 18843                           
 18844                           
 18845                           ;psect for function _setDimmerLights_IntrControl
 18846  0368                     _setDimmerLights_IntrControl:	
 18847                           
 18848                           ;incstack = 0
 18849                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18850                           ;setDimmerLights_IntrControl@lights stored from wreg
 18851  0368  00F3               	movwf	setDimmerLights_IntrControl@lights
 18852                           
 18853                           ;Dimmer_B1.c: 254: DimmerIntrPointSelect(lights);
 18854  0369  0873               	movf	setDimmerLights_IntrControl@lights,w
 18855  036A  319C  246F  3183   	fcall	_DimmerIntrPointSelect
 18856                           
 18857                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->IntrStart == 1) {
 18858  036D  0878               	movf	_DimmerLightsIntr,w
 18859  036E  3E02               	addlw	2
 18860  036F  0086               	movwf	6
 18861  0370  3001               	movlw	1	; select bank2/3
 18862  0371  0087               	movwf	7
 18863  0372  1D01               	btfss	1,2
 18864  0373  2B92               	goto	i1l7347
 18865                           
 18866                           ;Dimmer_B1.c: 257: DimmerLightsIntr->Count++;
 18867  0374  3001               	movlw	1
 18868  0375  00F2               	movwf	??_setDimmerLights_IntrControl
 18869  0376  0878               	movf	_DimmerLightsIntr,w
 18870  0377  3E03               	addlw	3
 18871  0378  0086               	movwf	6
 18872  0379  3001               	movlw	1	; select bank2/3
 18873  037A  0087               	movwf	7
 18874  037B  0872               	movf	??_setDimmerLights_IntrControl,w
 18875  037C  0781               	addwf	1,f
 18876                           
 18877                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->Count >= ((char)(70*0.8)) + 1) {
 18878  037D  0878               	movf	_DimmerLightsIntr,w
 18879  037E  3E03               	addlw	3
 18880  037F  0086               	movwf	6
 18881  0380  3001               	movlw	1	; select bank2/3
 18882  0381  0087               	movwf	7
 18883  0382  3039               	movlw	57
 18884  0383  0201               	subwf	1,w
 18885  0384  1C03               	skipc
 18886  0385  2B92               	goto	i1l7347
 18887                           
 18888                           ;Dimmer_B1.c: 259: DimmerLightsIntr->Count = 0;
 18889  0386  0878               	movf	_DimmerLightsIntr,w
 18890  0387  3E03               	addlw	3
 18891  0388  0086               	movwf	6
 18892  0389  3001               	movlw	1	; select bank2/3
 18893  038A  0087               	movwf	7
 18894  038B  0181               	clrf	1
 18895                           
 18896                           ;Dimmer_B1.c: 260: DimmerLightsIntr->IntrStart = 0;
 18897  038C  0878               	movf	_DimmerLightsIntr,w
 18898  038D  3E02               	addlw	2
 18899  038E  0086               	movwf	6
 18900  038F  3001               	movlw	1	; select bank2/3
 18901  0390  0087               	movwf	7
 18902  0391  1101               	bcf	1,2
 18903  0392                     i1l7347:	
 18904                           
 18905                           ;Dimmer_B1.c: 261: }
 18906                           ;Dimmer_B1.c: 262: }
 18907                           ;Dimmer_B1.c: 264: if (DimmerLightsIntr->GO == 1) {
 18908  0392  0A78               	incf	_DimmerLightsIntr,w
 18909  0393  0086               	movwf	6
 18910  0394  3001               	movlw	1	; select bank2/3
 18911  0395  0087               	movwf	7
 18912  0396  1C01               	btfss	1,0
 18913  0397  2BC9               	goto	i1l7363
 18914                           
 18915                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 18916  0398  0878               	movf	_DimmerLightsIntr,w
 18917  0399  3E03               	addlw	3
 18918  039A  0086               	movwf	6
 18919  039B  3001               	movlw	1	; select bank2/3
 18920  039C  0087               	movwf	7
 18921  039D  0878               	movf	_DimmerLightsIntr,w
 18922  039E  3E04               	addlw	4
 18923  039F  0084               	movwf	4
 18924  03A0  3001               	movlw	1	; select bank2/3
 18925  03A1  0085               	movwf	5
 18926  03A2  0800               	movf	0,w
 18927  03A3  0201               	subwf	1,w
 18928  03A4  1C03               	skipc
 18929  03A5  0008               	return
 18930                           
 18931                           ;Dimmer_B1.c: 266: DimmerLightsIntr->GO = 0;
 18932  03A6  0A78               	incf	_DimmerLightsIntr,w
 18933  03A7  0086               	movwf	6
 18934  03A8  3001               	movlw	1	; select bank2/3
 18935  03A9  0087               	movwf	7
 18936  03AA  1001               	bcf	1,0
 18937                           
 18938                           ;Dimmer_B1.c: 267: DimmerLightsIntr->Flag = 1;
 18939  03AB  0A78               	incf	_DimmerLightsIntr,w
 18940  03AC  0086               	movwf	6
 18941  03AD  3001               	movlw	1	; select bank2/3
 18942  03AE  0087               	movwf	7
 18943  03AF  1581               	bsf	1,3
 18944                           
 18945                           ;Dimmer_B1.c: 269: if (DimmerLightsIntr->MOSFET == 1) {
 18946  03B0  0878               	movf	_DimmerLightsIntr,w
 18947  03B1  0086               	movwf	6
 18948  03B2  3001               	movlw	1	; select bank2/3
 18949  03B3  0087               	movwf	7
 18950  03B4  1C01               	btfss	1,0
 18951  03B5  0008               	return
 18952                           
 18953                           ;Dimmer_B1.c: 270: DimmerLightsIntr->MOSFET = 0;
 18954  03B6  0878               	movf	_DimmerLightsIntr,w
 18955  03B7  0086               	movwf	6
 18956  03B8  3001               	movlw	1	; select bank2/3
 18957  03B9  0087               	movwf	7
 18958  03BA  1001               	bcf	1,0
 18959                           
 18960                           ;Dimmer_B1.c: 272: if (lights == 1) {
 18961  03BB  0873               	movf	setDimmerLights_IntrControl@lights,w
 18962  03BC  3A01               	xorlw	1
 18963  03BD  1D03               	skipz
 18964  03BE  2BC2               	goto	i1l7359
 18965                           
 18966                           ;Dimmer_B1.c: 273: RA7 = 0;
 18967  03BF  0020               	movlb	0	; select bank0
 18968  03C0  138C               	bcf	12,7	;volatile
 18969                           
 18970                           ;Dimmer_B1.c: 275: }
 18971  03C1  0008               	return
 18972  03C2                     i1l7359:	
 18973                           
 18974                           ;Dimmer_B1.c: 278: else if (lights == 2) {
 18975  03C2  0873               	movf	setDimmerLights_IntrControl@lights,w
 18976  03C3  3A02               	xorlw	2
 18977  03C4  1D03               	skipz
 18978  03C5  0008               	return
 18979                           
 18980                           ;Dimmer_B1.c: 279: RB4 = 0;
 18981  03C6  0020               	movlb	0	; select bank0
 18982  03C7  120D               	bcf	13,4	;volatile
 18983                           
 18984                           ;Dimmer_B1.c: 280: }
 18985                           ;Dimmer_B1.c: 282: }
 18986                           ;Dimmer_B1.c: 283: }
 18987                           ;Dimmer_B1.c: 284: } else {
 18988  03C8  0008               	return
 18989  03C9                     i1l7363:	
 18990                           
 18991                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->Flag == 1) {
 18992  03C9  0A78               	incf	_DimmerLightsIntr,w
 18993  03CA  0086               	movwf	6
 18994  03CB  3001               	movlw	1	; select bank2/3
 18995  03CC  0087               	movwf	7
 18996  03CD  1D81               	btfss	1,3
 18997  03CE  0008               	return
 18998                           
 18999                           ;Dimmer_B1.c: 286: DimmerLightsIntr->Flag = 0;
 19000  03CF  0A78               	incf	_DimmerLightsIntr,w
 19001  03D0  0086               	movwf	6
 19002  03D1  3001               	movlw	1	; select bank2/3
 19003  03D2  0087               	movwf	7
 19004  03D3  1181               	bcf	1,3
 19005                           
 19006                           ;Dimmer_B1.c: 287: DimmerLightsIntr->DimmingTime++;
 19007  03D4  3001               	movlw	1
 19008  03D5  00F2               	movwf	??_setDimmerLights_IntrControl
 19009  03D6  0878               	movf	_DimmerLightsIntr,w
 19010  03D7  3E05               	addlw	5
 19011  03D8  0086               	movwf	6
 19012  03D9  3001               	movlw	1	; select bank2/3
 19013  03DA  0087               	movwf	7
 19014  03DB  0872               	movf	??_setDimmerLights_IntrControl,w
 19015  03DC  0781               	addwf	1,f
 19016                           
 19017                           ;Dimmer_B1.c: 288: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 19018  03DD  0878               	movf	_DimmerLightsIntr,w
 19019  03DE  3E05               	addlw	5
 19020  03DF  0086               	movwf	6
 19021  03E0  3001               	movlw	1	; select bank2/3
 19022  03E1  0087               	movwf	7
 19023  03E2  0878               	movf	_DimmerLightsIntr,w
 19024  03E3  3E08               	addlw	8
 19025  03E4  0084               	movwf	4
 19026  03E5  3001               	movlw	1	; select bank2/3
 19027  03E6  0085               	movwf	5
 19028  03E7  0800               	movf	0,w
 19029  03E8  0201               	subwf	1,w
 19030  03E9  1C03               	skipc
 19031  03EA  2C2D               	goto	i1l7389
 19032                           
 19033                           ;Dimmer_B1.c: 289: DimmerLightsIntr->DimmingTime = 0;
 19034  03EB  0878               	movf	_DimmerLightsIntr,w
 19035  03EC  3E05               	addlw	5
 19036  03ED  0086               	movwf	6
 19037  03EE  3001               	movlw	1	; select bank2/3
 19038  03EF  0087               	movwf	7
 19039  03F0  0181               	clrf	1
 19040                           
 19041                           ;Dimmer_B1.c: 290: if (DimmerLightsIntr->AdjSw == 1) {
 19042  03F1  0A78               	incf	_DimmerLightsIntr,w
 19043  03F2  0086               	movwf	6
 19044  03F3  3001               	movlw	1	; select bank2/3
 19045  03F4  0087               	movwf	7
 19046  03F5  1F01               	btfss	1,6
 19047  03F6  0008               	return
 19048                           
 19049                           ;Dimmer_B1.c: 291: if (DimmerLightsIntr->AdjStatus == 0) {
 19050  03F7  0A78               	incf	_DimmerLightsIntr,w
 19051  03F8  0086               	movwf	6
 19052  03F9  3001               	movlw	1	; select bank2/3
 19053  03FA  0087               	movwf	7
 19054  03FB  1B81               	btfsc	1,7
 19055  03FC  2C16               	goto	i1l7383
 19056                           
 19057                           ;Dimmer_B1.c: 292: if (DimmerLightsIntr->DimmingValue < ((char)(70*0.8))) {
 19058  03FD  0878               	movf	_DimmerLightsIntr,w
 19059  03FE  3E04               	addlw	4
 19060  03FF  0086               	movwf	6
 19061  0400  3001               	movlw	1	; select bank2/3
 19062  0401  0087               	movwf	7
 19063  0402  3038               	movlw	56
 19064  0403  0201               	subwf	1,w
 19065  0404  1803               	skipnc
 19066  0405  2C10               	goto	i1l7381
 19067                           
 19068                           ;Dimmer_B1.c: 293: DimmerLightsIntr->DimmingValue++;
 19069  0406  3001               	movlw	1
 19070  0407  00F2               	movwf	??_setDimmerLights_IntrControl
 19071  0408  0878               	movf	_DimmerLightsIntr,w
 19072  0409  3E04               	addlw	4
 19073  040A  0086               	movwf	6
 19074  040B  3001               	movlw	1	; select bank2/3
 19075  040C  0087               	movwf	7
 19076  040D  0872               	movf	??_setDimmerLights_IntrControl,w
 19077  040E  0781               	addwf	1,f
 19078                           
 19079                           ;Dimmer_B1.c: 294: } else {
 19080  040F  0008               	return
 19081  0410                     i1l7381:	
 19082                           
 19083                           ;Dimmer_B1.c: 295: DimmerLightsIntr->AdjStatus = 1;
 19084  0410  0A78               	incf	_DimmerLightsIntr,w
 19085  0411  0086               	movwf	6
 19086  0412  3001               	movlw	1	; select bank2/3
 19087  0413  0087               	movwf	7
 19088  0414  1781               	bsf	1,7
 19089                           
 19090                           ;Dimmer_B1.c: 296: }
 19091                           ;Dimmer_B1.c: 297: } else {
 19092  0415  0008               	return
 19093  0416                     i1l7383:	
 19094                           
 19095                           ;Dimmer_B1.c: 298: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 19096  0416  0878               	movf	_DimmerLightsIntr,w
 19097  0417  3E04               	addlw	4
 19098  0418  0086               	movwf	6
 19099  0419  3001               	movlw	1	; select bank2/3
 19100  041A  0087               	movwf	7
 19101  041B  300D               	movlw	13
 19102  041C  0201               	subwf	1,w
 19103  041D  1C03               	skipc
 19104  041E  2C27               	goto	i1l7387
 19105                           
 19106                           ;Dimmer_B1.c: 299: DimmerLightsIntr->DimmingValue--;
 19107  041F  0878               	movf	_DimmerLightsIntr,w
 19108  0420  3E04               	addlw	4
 19109  0421  0086               	movwf	6
 19110  0422  3001               	movlw	1	; select bank2/3
 19111  0423  0087               	movwf	7
 19112  0424  3001               	movlw	1
 19113  0425  0281               	subwf	1,f
 19114                           
 19115                           ;Dimmer_B1.c: 300: } else
 19116  0426  0008               	return
 19117  0427                     i1l7387:	
 19118                           
 19119                           ;Dimmer_B1.c: 301: DimmerLightsIntr->AdjStatus = 0;
 19120  0427  0A78               	incf	_DimmerLightsIntr,w
 19121  0428  0086               	movwf	6
 19122  0429  3001               	movlw	1	; select bank2/3
 19123  042A  0087               	movwf	7
 19124  042B  1381               	bcf	1,7
 19125                           
 19126                           ;Dimmer_B1.c: 302: }
 19127                           ;Dimmer_B1.c: 303: }
 19128                           ;Dimmer_B1.c: 304: } else if (DimmerLightsIntr->AdjRF == 1) {
 19129  042C  0008               	return
 19130  042D                     i1l7389:	
 19131  042D  0878               	movf	_DimmerLightsIntr,w
 19132  042E  3E02               	addlw	2
 19133  042F  0086               	movwf	6
 19134  0430  3001               	movlw	1	; select bank2/3
 19135  0431  0087               	movwf	7
 19136  0432  1C01               	btfss	1,0
 19137  0433  0008               	return
 19138                           
 19139                           ;Dimmer_B1.c: 305: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 19140  0434  0878               	movf	_DimmerLightsIntr,w
 19141  0435  3E04               	addlw	4
 19142  0436  0086               	movwf	6
 19143  0437  3001               	movlw	1	; select bank2/3
 19144  0438  0087               	movwf	7
 19145  0439  0878               	movf	_DimmerLightsIntr,w
 19146  043A  3E06               	addlw	6
 19147  043B  0084               	movwf	4
 19148  043C  3001               	movlw	1	; select bank2/3
 19149  043D  0085               	movwf	5
 19150  043E  0800               	movf	0,w
 19151  043F  0201               	subwf	1,w
 19152  0440  1803               	skipnc
 19153  0441  2C4C               	goto	i1l7395
 19154                           
 19155                           ;Dimmer_B1.c: 306: DimmerLightsIntr->DimmingValue++;
 19156  0442  3001               	movlw	1
 19157  0443  00F2               	movwf	??_setDimmerLights_IntrControl
 19158  0444  0878               	movf	_DimmerLightsIntr,w
 19159  0445  3E04               	addlw	4
 19160  0446  0086               	movwf	6
 19161  0447  3001               	movlw	1	; select bank2/3
 19162  0448  0087               	movwf	7
 19163  0449  0872               	movf	??_setDimmerLights_IntrControl,w
 19164  044A  0781               	addwf	1,f
 19165                           
 19166                           ;Dimmer_B1.c: 307: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 19167  044B  0008               	return
 19168  044C                     i1l7395:	
 19169  044C  0878               	movf	_DimmerLightsIntr,w
 19170  044D  3E06               	addlw	6
 19171  044E  0086               	movwf	6
 19172  044F  3001               	movlw	1	; select bank2/3
 19173  0450  0087               	movwf	7
 19174  0451  0878               	movf	_DimmerLightsIntr,w
 19175  0452  3E04               	addlw	4
 19176  0453  0084               	movwf	4
 19177  0454  3001               	movlw	1	; select bank2/3
 19178  0455  0085               	movwf	5
 19179  0456  0800               	movf	0,w
 19180  0457  0201               	subwf	1,w
 19181  0458  1803               	skipnc
 19182  0459  2C62               	goto	i1l7399
 19183                           
 19184                           ;Dimmer_B1.c: 308: DimmerLightsIntr->DimmingValue--;
 19185  045A  0878               	movf	_DimmerLightsIntr,w
 19186  045B  3E04               	addlw	4
 19187  045C  0086               	movwf	6
 19188  045D  3001               	movlw	1	; select bank2/3
 19189  045E  0087               	movwf	7
 19190  045F  3001               	movlw	1
 19191  0460  0281               	subwf	1,f
 19192                           
 19193                           ;Dimmer_B1.c: 309: } else {
 19194  0461  0008               	return
 19195  0462                     i1l7399:	
 19196                           
 19197                           ;Dimmer_B1.c: 310: DimmerLightsIntr->AdjRF = 0;
 19198  0462  0878               	movf	_DimmerLightsIntr,w
 19199  0463  3E02               	addlw	2
 19200  0464  0086               	movwf	6
 19201  0465  3001               	movlw	1	; select bank2/3
 19202  0466  0087               	movwf	7
 19203  0467  1001               	bcf	1,0
 19204  0468  0008               	return
 19205  0469                     __end_of_setDimmerLights_IntrControl:	
 19206                           
 19207                           	psect	text133
 19208  1C6F                     __ptext133:	
 19209 ;; *************** function _DimmerIntrPointSelect *****************
 19210 ;; Defined at:
 19211 ;;		line 94 in file "../src/Dimmer_B1.c"
 19212 ;; Parameters:    Size  Location     Type
 19213 ;;  lights          1    wreg     unsigned char 
 19214 ;; Auto vars:     Size  Location     Type
 19215 ;;  lights          1    1[COMMON] unsigned char 
 19216 ;; Return value:  Size  Location     Type
 19217 ;;		None               void
 19218 ;; Registers used:
 19219 ;;		wreg
 19220 ;; Tracked objects:
 19221 ;;		On entry : 0/0
 19222 ;;		On exit  : 0/0
 19223 ;;		Unchanged: 0/0
 19224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19227 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19228 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19229 ;;Total ram usage:        2 bytes
 19230 ;; Hardware stack levels used:    1
 19231 ;; This function calls:
 19232 ;;		Nothing
 19233 ;; This function is called by:
 19234 ;;		_setDimmerLights_IntrControl
 19235 ;; This function uses a non-reentrant model
 19236 ;;
 19237                           
 19238                           
 19239                           ;psect for function _DimmerIntrPointSelect
 19240  1C6F                     _DimmerIntrPointSelect:	
 19241                           
 19242                           ;incstack = 0
 19243                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19244                           ;DimmerIntrPointSelect@lights stored from wreg
 19245  1C6F  00F1               	movwf	DimmerIntrPointSelect@lights
 19246                           
 19247                           ;Dimmer_B1.c: 96: if (lights == 1) {
 19248  1C70  0871               	movf	DimmerIntrPointSelect@lights,w
 19249  1C71  3A01               	xorlw	1
 19250  1C72  1D03               	skipz
 19251  1C73  2C79               	goto	i1l6981
 19252                           
 19253                           ;Dimmer_B1.c: 97: DimmerLightsIntr = &DimmerLights1;
 19254  1C74  30BE               	movlw	_DimmerLights1& (0+255)
 19255  1C75  00F0               	movwf	??_DimmerIntrPointSelect
 19256  1C76  0870               	movf	??_DimmerIntrPointSelect,w
 19257  1C77  00F8               	movwf	_DimmerLightsIntr
 19258                           
 19259                           ;Dimmer_B1.c: 98: }
 19260  1C78  0008               	return
 19261  1C79                     i1l6981:	
 19262                           
 19263                           ;Dimmer_B1.c: 101: else if (lights == 2) {
 19264  1C79  0871               	movf	DimmerIntrPointSelect@lights,w
 19265  1C7A  3A02               	xorlw	2
 19266  1C7B  1D03               	skipz
 19267  1C7C  0008               	return
 19268                           
 19269                           ;Dimmer_B1.c: 102: DimmerLightsIntr = &DimmerLights2;
 19270  1C7D  30CF               	movlw	_DimmerLights2& (0+255)
 19271  1C7E  00F0               	movwf	??_DimmerIntrPointSelect
 19272  1C7F  0870               	movf	??_DimmerIntrPointSelect,w
 19273  1C80  00F8               	movwf	_DimmerLightsIntr
 19274  1C81  0008               	return
 19275  1C82                     __end_of_DimmerIntrPointSelect:	
 19276                           
 19277                           	psect	text134
 19278  1CE1                     __ptext134:	
 19279 ;; *************** function _IOC_ISR *****************
 19280 ;; Defined at:
 19281 ;;		line 381 in file "../src/MCU_B1.c"
 19282 ;; Parameters:    Size  Location     Type
 19283 ;;		None
 19284 ;; Auto vars:     Size  Location     Type
 19285 ;;		None
 19286 ;; Return value:  Size  Location     Type
 19287 ;;		None               void
 19288 ;; Registers used:
 19289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19290 ;; Tracked objects:
 19291 ;;		On entry : 0/0
 19292 ;;		On exit  : 0/0
 19293 ;;		Unchanged: 0/0
 19294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19299 ;;Total ram usage:        0 bytes
 19300 ;; Hardware stack levels used:    1
 19301 ;; Hardware stack levels required when called:    2
 19302 ;; This function calls:
 19303 ;;		_setDimmerLights_IntrIOC_GO
 19304 ;; This function is called by:
 19305 ;;		_ISR
 19306 ;; This function uses a non-reentrant model
 19307 ;;
 19308                           
 19309                           
 19310                           ;psect for function _IOC_ISR
 19311  1CE1                     _IOC_ISR:	
 19312                           
 19313                           ;MCU_B1.c: 382: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19314                           
 19315                           ;incstack = 0
 19316                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19317  1CE1  1D8B               	btfss	11,3	;volatile
 19318  1CE2  0008               	return
 19319  1CE3  1C0B               	btfss	11,0	;volatile
 19320  1CE4  0008               	return
 19321  1CE5  0027               	movlb	7	; select bank7
 19322  1CE6  1D16               	btfss	22,2	;volatile
 19323  1CE7  0008               	return
 19324                           
 19325                           ;MCU_B1.c: 383: IOCBF2 = 0;
 19326  1CE8  1116               	bcf	22,2	;volatile
 19327                           
 19328                           ;MCU_B1.c: 384: IOCIF = 0;
 19329  1CE9  100B               	bcf	11,0	;volatile
 19330                           
 19331                           ;MCU_B1.c: 385: if (myMain.PowerON == 1) {
 19332  1CEA  0021               	movlb	1	; select bank1
 19333  1CEB  1C2E               	btfss	_myMain^(0+128),0
 19334  1CEC  0008               	return
 19335                           
 19336                           ;MCU_B1.c: 390: setDimmerLights_IntrIOC_GO(1);
 19337  1CED  3001               	movlw	1
 19338  1CEE  3192  22A1  319C   	fcall	_setDimmerLights_IntrIOC_GO
 19339                           
 19340                           ;MCU_B1.c: 394: setDimmerLights_IntrIOC_GO(2);
 19341  1CF1  3002               	movlw	2
 19342  1CF2  3192  22A1         	fcall	_setDimmerLights_IntrIOC_GO
 19343                           
 19344                           ;MCU_B1.c: 402: }
 19345                           ;MCU_B1.c: 403: return;
 19346  1CF4  0008               	return
 19347  1CF5                     __end_of_IOC_ISR:	
 19348                           
 19349                           	psect	text135
 19350  12A1                     __ptext135:	
 19351 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19352 ;; Defined at:
 19353 ;;		line 48 in file "../src/Dimmer_B1.c"
 19354 ;; Parameters:    Size  Location     Type
 19355 ;;  lights          1    wreg     unsigned char 
 19356 ;; Auto vars:     Size  Location     Type
 19357 ;;  lights          1    2[COMMON] unsigned char 
 19358 ;; Return value:  Size  Location     Type
 19359 ;;		None               void
 19360 ;; Registers used:
 19361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19362 ;; Tracked objects:
 19363 ;;		On entry : 0/0
 19364 ;;		On exit  : 0/0
 19365 ;;		Unchanged: 0/0
 19366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19368 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19370 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19371 ;;Total ram usage:        1 bytes
 19372 ;; Hardware stack levels used:    1
 19373 ;; Hardware stack levels required when called:    1
 19374 ;; This function calls:
 19375 ;;		_DimmerIntrIOCPointSelect
 19376 ;; This function is called by:
 19377 ;;		_IOC_ISR
 19378 ;;		_setDimmerLights_IOC_Main
 19379 ;; This function uses a non-reentrant model
 19380 ;;
 19381                           
 19382                           
 19383                           ;psect for function _setDimmerLights_IntrIOC_GO
 19384  12A1                     _setDimmerLights_IntrIOC_GO:	
 19385                           
 19386                           ;incstack = 0
 19387                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19388                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19389  12A1  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19390                           
 19391                           ;Dimmer_B1.c: 49: DimmerIntrIOCPointSelect(lights);
 19392  12A2  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19393  12A3  319D  2559  3192   	fcall	_DimmerIntrIOCPointSelect
 19394                           
 19395                           ;Dimmer_B1.c: 66: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 1) {
 19396  12A6  0021               	movlb	1	; select bank1
 19397  12A7  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19398  12A8  3E02               	addlw	2
 19399  12A9  0086               	movwf	6
 19400  12AA  3001               	movlw	1	; select bank2/3
 19401  12AB  0087               	movwf	7
 19402  12AC  1901               	btfsc	1,2
 19403  12AD  0008               	return
 19404  12AE  0020               	movlb	0	; select bank0
 19405  12AF  1D0D               	btfss	13,2	;volatile
 19406  12B0  0008               	return
 19407                           
 19408                           ;Dimmer_B1.c: 67: DimmerLightsIntrIOC->IntrStart = 1;
 19409  12B1  0021               	movlb	1	; select bank1
 19410  12B2  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19411  12B3  3E02               	addlw	2
 19412  12B4  0086               	movwf	6
 19413  12B5  3001               	movlw	1	; select bank2/3
 19414  12B6  0087               	movwf	7
 19415  12B7  1501               	bsf	1,2
 19416                           
 19417                           ;Dimmer_B1.c: 68: DimmerLightsIntrIOC->GO = 1;
 19418  12B8  0A4E               	incf	_DimmerLightsIntrIOC^(0+128),w
 19419  12B9  0086               	movwf	6
 19420  12BA  3001               	movlw	1	; select bank2/3
 19421  12BB  0087               	movwf	7
 19422  12BC  1401               	bsf	1,0
 19423                           
 19424                           ;Dimmer_B1.c: 69: DimmerLightsIntrIOC->MosfetSignal = 1;
 19425  12BD  0A4E               	incf	_DimmerLightsIntrIOC^(0+128),w
 19426  12BE  0086               	movwf	6
 19427  12BF  3001               	movlw	1	; select bank2/3
 19428  12C0  0087               	movwf	7
 19429  12C1  1481               	bsf	1,1
 19430                           
 19431                           ;Dimmer_B1.c: 70: Dimmer.Correction = 0;
 19432  12C2  01CA               	clrf	(_Dimmer^(0+128)+2)	;volatile
 19433                           
 19434                           ;Dimmer_B1.c: 72: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19435  12C3  0A4E               	incf	_DimmerLightsIntrIOC^(0+128),w
 19436  12C4  0086               	movwf	6
 19437  12C5  3001               	movlw	1	; select bank2/3
 19438  12C6  0087               	movwf	7
 19439  12C7  1D01               	btfss	1,2
 19440  12C8  0008               	return
 19441                           
 19442                           ;Dimmer_B1.c: 73: DimmerLightsIntrIOC->MOSFET = 1;
 19443  12C9  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19444  12CA  0086               	movwf	6
 19445  12CB  3001               	movlw	1	; select bank2/3
 19446  12CC  0087               	movwf	7
 19447  12CD  1401               	bsf	1,0
 19448                           
 19449                           ;Dimmer_B1.c: 75: if (lights == 1) {
 19450  12CE  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19451  12CF  3A01               	xorlw	1
 19452  12D0  1D03               	skipz
 19453  12D1  2AD5               	goto	i1l7331
 19454                           
 19455                           ;Dimmer_B1.c: 76: RA7 = 1;
 19456  12D2  0020               	movlb	0	; select bank0
 19457  12D3  178C               	bsf	12,7	;volatile
 19458                           
 19459                           ;Dimmer_B1.c: 78: }
 19460  12D4  0008               	return
 19461  12D5                     i1l7331:	
 19462                           
 19463                           ;Dimmer_B1.c: 81: else if (lights == 2) {
 19464  12D5  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19465  12D6  3A02               	xorlw	2
 19466  12D7  1D03               	skipz
 19467  12D8  0008               	return
 19468                           
 19469                           ;Dimmer_B1.c: 82: RB4 = 1;
 19470  12D9  0020               	movlb	0	; select bank0
 19471  12DA  160D               	bsf	13,4	;volatile
 19472  12DB  0008               	return
 19473  12DC                     __end_of_setDimmerLights_IntrIOC_GO:	
 19474                           
 19475                           	psect	text136
 19476  1D59                     __ptext136:	
 19477 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19478 ;; Defined at:
 19479 ;;		line 8 in file "../src/Dimmer_B1.c"
 19480 ;; Parameters:    Size  Location     Type
 19481 ;;  lights          1    wreg     unsigned char 
 19482 ;; Auto vars:     Size  Location     Type
 19483 ;;  lights          1    1[COMMON] unsigned char 
 19484 ;; Return value:  Size  Location     Type
 19485 ;;		None               void
 19486 ;; Registers used:
 19487 ;;		wreg
 19488 ;; Tracked objects:
 19489 ;;		On entry : 0/0
 19490 ;;		On exit  : 0/0
 19491 ;;		Unchanged: 0/0
 19492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19494 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19495 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19496 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19497 ;;Total ram usage:        2 bytes
 19498 ;; Hardware stack levels used:    1
 19499 ;; This function calls:
 19500 ;;		Nothing
 19501 ;; This function is called by:
 19502 ;;		_setDimmerLights_IntrIOC_GO
 19503 ;; This function uses a non-reentrant model
 19504 ;;
 19505                           
 19506                           
 19507                           ;psect for function _DimmerIntrIOCPointSelect
 19508  1D59                     _DimmerIntrIOCPointSelect:	
 19509                           
 19510                           ;incstack = 0
 19511                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19512                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19513  1D59  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19514                           
 19515                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19516  1D5A  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19517  1D5B  3A01               	xorlw	1
 19518  1D5C  1D03               	skipz
 19519  1D5D  2D64               	goto	i1l6973
 19520                           
 19521                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19522  1D5E  30BE               	movlw	_DimmerLights1& (0+255)
 19523  1D5F  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19524  1D60  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19525  1D61  0021               	movlb	1	; select bank1
 19526  1D62  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19527                           
 19528                           ;Dimmer_B1.c: 12: }
 19529  1D63  0008               	return
 19530  1D64                     i1l6973:	
 19531                           
 19532                           ;Dimmer_B1.c: 15: else if (lights == 2) {
 19533  1D64  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19534  1D65  3A02               	xorlw	2
 19535  1D66  1D03               	skipz
 19536  1D67  0008               	return
 19537                           
 19538                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19539  1D68  30CF               	movlw	_DimmerLights2& (0+255)
 19540  1D69  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19541  1D6A  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19542  1D6B  0021               	movlb	1	; select bank1
 19543  1D6C  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19544  1D6D  0008               	return
 19545  1D6E                     __end_of_DimmerIntrIOCPointSelect:	
 19546  007E                     btemp	set	126	;btemp
 19547  007E                     pic14e$flags	set	126
 19548  007E                     wtemp	set	126
 19549  007E                     wtemp0	set	126
 19550  0080                     wtemp1	set	128
 19551  0082                     wtemp2	set	130
 19552  0084                     wtemp3	set	132
 19553  0086                     wtemp4	set	134
 19554  0088                     wtemp5	set	136
 19555  007F                     wtemp6	set	127
 19556  007E                     ttemp	set	126
 19557  007E                     ttemp0	set	126
 19558  0081                     ttemp1	set	129
 19559  0084                     ttemp2	set	132
 19560  0087                     ttemp3	set	135
 19561  007F                     ttemp4	set	127
 19562  007E                     ltemp	set	126
 19563  007E                     ltemp0	set	126
 19564  0082                     ltemp1	set	130
 19565  0086                     ltemp2	set	134
 19566  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         273
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      11
    BANK0            80     79      80
    BANK1            80      6      80
    BANK2            80      2      77
    BANK3            80      7      80
    BANK4            80      0      78
    BANK5            80      4       4
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(2) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK4[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK3[17]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK3[17]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK3[17]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK3[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _IOC_ISR->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_Exception_Main

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  132140
                                              0 BANK5      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4048
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4048
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    8092
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    8092
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0      93
                                              2 BANK0      1     1      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   48081
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   48081
                                              5 BANK1      1     1      0
                                              0 BANK2      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   44813
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3869
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40672
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   13863
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1966
                                             13 BANK0      5     5      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18820
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16360
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14126
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1890
                                              8 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      80
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     232
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1243
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    7294
                                             75 BANK0      1     1      0
                                              0 BANK3      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35852
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   35509
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
               _getMain_LightsStatus
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17731
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   17147
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     989
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      71
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     281
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5972
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5972
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4182
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3705
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3423
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0     110
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_LightsStatus
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerLights_IntrIOC_GO
       _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      6      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      2      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      7      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      4E      13       97.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      4       4      15        5.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     19A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     19A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Dec 24 17:10:17 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l96 1724  
                                      l98 1738                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1F68                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0075  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1CA8  
                  __end_of_setDelayOff_GO 15F4                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0B9B  
                    _setDimmerLights_Line 0800                              ___ftadd@sign 004B  
                                     l110 1456                                       l106 145C  
                                     l107 1458                                       l108 1446  
                                     l323 1DCE                      _setDimmerLights_SwOn 0817  
                                     l324 1DD0                                       l255 0B73  
                                     l367 1FB6                                       l811 1ED9  
                                     l770 1C8C                                       l864 1CB1  
                                     l865 1CB8                                       _GIE 005F  
                                     _CRC 00CB                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0014  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CF  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 0125              getDimmerLights_Status@lights 0022  
                                     _Sw1 01E0                                       _Sw2 0245  
               setDimmerLights_Adj@status 006B                  __end_of_CC2500_WriteByte 1DDB  
                   _Buzzer_Initialization 1AAF                           __end_of_ADC_Set 1AF3  
                         ?_DelayTimejudge 0070                                       wreg 0009  
    setDimmerLights_Initialization@lights 0023              getDimmerLights_Status@status 0023  
                         _setDimmerLights 154F                         ??_getSw_KeyStatus 0020  
                   _setDimmerLights_AdjRF 1F68                     _setDimmerLights_AdjOn 10D6  
                                    ?_ISR 0070           setDimmerLights_ErrorClose@count 00EA  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1CF5  
                              Load_Main@i 002C                              ___ftdiv@sign 003D  
                                    l1033 1EAE                                      l1034 1EB8  
                                    l1068 13CE                                      l1335 122A  
                                    l3041 091A                  ?_DimmerLightsPointSelect 0070  
                                    l3035 0903                                      l2332 0AC3  
                                    l2260 0D35                                      l1349 112C  
                                    l1358 14A9                                      l2318 11F6  
                                    l2255 0D85                                      l3064 0508  
                                    l2344 1342                                      l1609 0642  
                                    l1731 0080                                      l2259 0D25  
                                    l1547 1316                                      l1740 01CA  
                                    l1732 007C                                      l1733 0077  
                         __end_of_IOC_Set 1B87                                      l1574 11A9  
                                    l1902 0FF6                                      l1575 11C4  
                                    l2296 1BCB                                      l1729 01F0  
                                    l1579 11C0                                      l1739 01CC  
                                    l2670 035F                                      l2648 1DB4  
                                    l2672 023C                                      l1897 0FFC  
                                    l2874 1E50                     _setDimmerLights_SwOff 14B1  
                                    l9201 1F51                                      l9027 082E  
                                    l9205 1F57                                      l9141 1140  
                                    l9045 0865                                      l9037 083D  
                                    l9029 0831                                      l9231 0974  
                                    l9047 086B                                      l9039 0842  
                                    l9401 11BB                                      l9153 1DFE  
                                    l9321 1403                                      l9059 14E6  
                                    l9227 096E                                      l9411 080F  
                                    l9155 1E01                                      l9331 1413  
                                    l9315 13FA                                      l9229 093F  
                                    l9325 140A                                      l9317 13FD  
                                    l9501 0A9C                                      l9423 1603  
                                    l9431 160B                                      l8615 1F2E  
                                    l8631 0498                                      l8703 0ED4  
                                    l9079 1796                                      l9159 1E07  
                                    l9191 1FC7                                      l9327 140D  
                                    l9263 1533                                      l9503 0AA0  
                                    l9193 1FD2                                      l9177 1E3A  
                                    l9601 0B0B                                      l9521 0B3F  
                                    l9281 1331                                      l9505 0AA4  
                                    l8571 08EA                                      l8627 0491  
                                    l9179 1E40                                      l9523 0B42  
                                    l9267 1542                                      l8901 1671  
                                    l9453 1634                                      l9461 163C  
                                    l9437 1614                                      l9445 161C  
                                    l8581 0910                                      l8573 08EF  
                                    l8565 08D9                                      l8661 04E7  
                                    l8637 04A7                                      l8725 0F2E  
                                    l8717 0F15                                      l9293 1F9F  
                                    l9541 0B5A                                      l9509 0AA8  
                   _myMain_Initialization 1BD5                                      l8911 168C  
                                    l9391 11A4                                      l8655 04D4  
                                    l8831 0E07                                      l8823 0DED  
                                    l8815 0DD2                                      l9703 1595  
                                    l9199 1F4E                                      l9287 1F96  
                                    l9551 0B82                                      l9527 0B48  
                                    l8593 1C2A                                      l9393 11AD  
                                    l9457 1638                                      l8569 08E0  
                                    l8673 051A                                      l8657 04DE  
                                    l8649 04C1                                      l8825 0DF6  
                                    l8817 0DE0                                      l9713 16B3  
                                    l9289 1F99                                      l9553 0B86  
                                    l9545 0B79                                      l8761 078F  
                                    l8745 074C                                      l8915 1694  
                                    l8907 1683                                      l9651 1277  
                                    l8579 0908                                      l8667 04FA  
                                    l8659 04E3                                      l8827 0DF9  
                                    l9555 0B89                                      l9547 0B7C  
                                    l8739 0736                                      l8597 1C30  
                                    l9637 1CA6                                      l8677 052C  
                                    l8669 0504                                      l8773 07AB  
                                    l8757 0787                                      l9493 0A5E  
                                    l8839 1D00                                      l8855 10AA  
                                    l9663 128B                                      l8687 0547  
                                    l9583 0AE0                                      l9559 0B8F  
                                    l9911 1E93                                      l9673 129A  
                                    l9665 128E                                      l8697 0EBE  
                                    l9577 0AD7                                      l8769 07A3  
                                    l9497 0A83                                      l9921 1EA1  
                                    _CFGS 0CAE                                      l8883 1652  
                                    l8963 15D9                                      l9675 129F  
                                    l9579 0ADA                                      l9827 1C21  
                                    l9499 0A98                                      l8965 15DF  
                                    l8797 0DA2                                      l9693 157F  
                                    l9909 1E91                                      l8959 15D3  
                                    l9783 1114                                      l9599 0AF2  
                                    l9871 0C4E                                      l9919 1E9D  
                            __CFG_WDTE$ON 0000                                      l8889 165D  
                                    l9849 0C27                                      l8899 1665  
                                    l9971 0BCA                                      l9859 0C38  
                                    l9981 0BF3                                      l9885 0C78  
                                    l9983 0BF9                                      l9879 0C6D  
                                    l9895 1D3C                                      l9969 0BC4  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u9025 04E8  
                                    u9125 0EE6                                      u9205 0758  
                                    u9055 04FB                                      u9135 0EF6  
                                    u9215 0768                                      u9145 0F16  
                                    u9155 0F25                                      u9235 0790  
                                    u9165 0F2F                                      u9325 0DA9  
                                    u9245 0796                                      u9505 1668  
                                    u9355 0DD3                                      u9275 07AC  
                                    u9525 1672                                      u9445 1096  
                                    u9285 07B2                                      u9535 167C  
                                    u9545 1684                                      u8825 0921  
                                    u9385 0DEE                                      u8755 08E5  
                                    u9820 1756                                      u8775 08FE  
                                    u9655 1D7D                                      u9825 1754  
                                    u8795 090B                                      _LWLO 0CAD  
                                    u8965 04C2                                      u9945 1FBC  
                                    u8995 04D5                                      u9995 094A  
                                    _RSSI 00D0                                      _WREN 0CAA  
                                    _WPUB 020D                                      _Buz1 00BC  
                                    _Load 0127                                      _Temp 00D8  
                                    _main 17A5                              ___ftpack@arg 0020  
                     __end_of_DlyOff_Main 08D0                           __end_of_RF_Main 1ABB  
                            ___ftpack@exp 0023                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1B9F                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 0013  
                                    ttemp 007E                                      wtemp 007E  
                     DelayTimejudge@value 0029                __end_of_setRFSW_AdjControl 1356  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D            getAll_DimmerLights_AdjSw@adjsw 0026  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2341 0022  
    _getDimmerLights_Allow_Condition$2342 0023      _getDimmerLights_Allow_Condition$2343 0024  
                       ?_getDimmer_LoadGO 0070            getAll_DimmerLights_AdjSw@count 0023  
                                   ??_ISR 0074                              ___fttol@exp1 005B  
                            ___fttol@lval 0057   __end_of_getDimmerLights_Allow_Condition 12A1  
__size_of_getDimmerLights_Allow_Condition 003A         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1267  
                  _getDimmerLights_Status 1BF4                        ??_getDimmer_LoadGO 0020  
          __size_of_DimmerIntrPointSelect 0013                          __end_of_LED_Main 1B7B  
        setDimmerLights_ErrorClose@lights 00EB             __end_of_DimmerIntrPointSelect 1C82  
                   ?_getDimmerLights_Line 0070                                     l10015 07F8  
                                   l10017 07DB                                     l10113 1EF6  
                                   l10131 147F                                     l10019 07FD  
                                   l10211 0FCD                                     l10107 1EEE  
                                   l10125 146A                                     l10221 0FE2  
                                   l10109 1EF1                                     l10311 1DBF  
                                   l10223 0FE3                                     l10209 0FCB  
                                   l10307 1DB9                                     l10405 1E4A  
                                   l10261 0D44                                     l10341 026A  
                                   l10325 0225                                     l10351 029C  
                                   l10433 1257                                     l10425 1239  
                                   l10451 1430                                     l10427 1245  
                                   l10275 0D64                                     l10179 0F6C  
                                   l10437 1260                                     l10365 02DA  
                                   l10621 0CD0                                     l10519 06B5  
                                   l10375 030C                                     l10289 0D7C  
                                   l10617 0CC8                                     l10609 0CA3  
                                   l10731 00A3                                     l10715 007F  
                                   l10651 1385                                     l10901 0638  
                                   l10637 0CFD                     ?_setDimmerLights_Main 0070  
                                   l10489 1EDB                                     l10825 01DF  
                                   l10737 00D5                                     l10763 015E  
                                   l10853 0581                                     l10773 018A  
                                   l10669 12F6                                     l10871 05CC  
                                   l10863 05A0                                     l10873 05A3  
                                   l10769 016B                                     l10777 0196  
                                   l10697 005E                                     l10961 17C9  
                                   l10891 05EA                                     l10875 05D4  
                                   l10859 0591                                     l10787 01AC  
                                   l10893 061B                                     l10965 17D4  
                                   l10895 0625                                     l10889 0613  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0066  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 02A0  
                         __end_of___awdiv 169B                           __end_of___ftadd 055F  
                         __end_of___ftdiv 0F50                           __end_of___ftneg 1B2C  
                         __end_of___ftmul 07D3                                     u12105 0CB6  
                         ___awdiv@divisor 0020                                     u12045 1221  
                                   u12205 137C                                     u11415 0FD3  
                                   u12215 138B                                     _T1CON 0018  
                                   u10705 1DA7                                     u11195 07E4  
                                   u12155 0CEA                           __end_of___fttol 0E10  
                                   u12405 00D3                                     u11525 0D53  
                                   u12415 0117                                     u12255 130E  
                                   u11395 0FB3                                     u12620 05D2  
                                   u11815 123C                                     u12625 05AE  
                                   u12650 0619                                     u11835 1246  
                                   u12395 00A1                                     u11845 1250  
                                   u12655 05F5                                     u11855 1258  
                                   u11775 1E51                                     u12495 019D  
                                   u11785 1E56                                     u11885 1426  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 1267  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                                     _WPUB2 106A  
                 __end_of_Timeout_Counter 1DAD                             __CFG_WRT$HALF 0000  
      __end_of_setDimmerLights_IntrIOC_GO 12DC                _setDimmerLights_IntrIOC_GO 12A1  
                        __end_of_TMR1_ISR 2000                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A        __end_of_setDimmerLights_ErrorClose 0993  
              _setDimmerLights_ErrorClose 0931                          __end_of_TMR1_Set 1B93  
                                   _getAD 1EE3                             ___awtoft@sign 002D  
             DimmerIntrPointSelect@lights 0071                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1C6F               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __pbitbssCOMMON 03C8  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1D31  
                      Flash_Memory_Read@i 0021                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012              __end_of_getMain_LightsStatus 1CA8  
           __end_of_setLED_Initialization 1C4B                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 174C  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0068  
                  ??_Flash_Memory_Erasing 0020                           _getPercentValue 09F8  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0015  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 0010                         ??_setPercentValue 005C  
                            __end_of_main 1800                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 1AC5                        ??_setMemory_Modify 0020  
                          _Exception_Main 055F                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                   __end_of_setDimmerLights 15A1  
                    _setSw_Initialization 1B1B                                    ??_main 006F  
                           ___fttol@sign1 0056                              ?_setLog_Code 0070  
                 _setControl_Lights_Table 0A5D                            _setMemory_Data 1B4B  
                  ?_Buzzer_Initialization 0070         __size_of_DimmerIntrIOCPointSelect 0015  
                 ??_DlyOff_Initialization 0022                                _Receive_OK 03C8  
               ?_DimmerIntrIOCPointSelect 0070                                 ??_IOC_ISR 0073  
                               ??_IOC_Set 0020           __end_of_DimmerLightsPointSelect 1C95  
                  ?_setDimmerLights_AdjRF 0070                    ?_setDimmerLights_AdjOn 0070  
                __size_of_setRFSW_Control 004F                        _RF_Timeout_Counter 1D6E  
                 ??_Switch_Initialization 0025                      ??_setRF_DimmerLights 0067  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0873  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 006F  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1B13  
                               ??_WDT_Set 0020                          __end_of___awtoft 1F45  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 0931  
                _getMain_All_Error_Status 1193                                    _IOCBF2 1CB2  
                                  i1l7331 12D5                                    i1l7363 03C9  
                                  i1l7347 0392                                    i1l7381 0410  
                                  i1l7383 0416                                    i1l7359 03C2  
                                  i1l7395 044C                                    i1l7387 0427  
                                  i1l7389 042D                                    i1l7399 0462  
                                  i1l6973 1D64                                    i1l6981 1C79  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0026  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01AC  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1E0F                                    u793_25 1FFA  
                                  _WDTCON 0097                        DelayTime_1us@count 0020  
                    Exception_Main@i_3638 01ED            __size_of_CC2500_PowerOnInitial 0015  
           __end_of_CC2500_PowerOnInitial 1D98                                    _Dimmer 00C8  
                                  _DlySw1 0155                                    _DlySw2 015A  
           __size_of_setRF_TimeoutCleared 0004                __end_of_Mcu_Initialization 1C5D  
                     __end_of_Buzzer_Main 1463                                    _Memory 0220  
                                  _Timer1 0120                                    ___bmul 1C27  
                  __end_of_Exception_Main 0643                      Load_Main@Load_Status 002B  
                    Exception_Main@lights 01EF                                    ___wmul 1E47  
                               ??___awdiv 0024                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 0014                                 ??___ftdiv 0034  
                               ??___ftneg 0041                     setDimmerLights@lights 006D  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024               setDimmerLights_AdjRF@lights 0063  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D6                                    _s_data 00D7  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 15F4  
                                  _myMain 00AE                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 1B57                          _DimmerLightsIntr 0078  
                   ?_setSw_Initialization 0070                     setDimmerLights@status 006B  
                        ___awdiv@quotient 0027                                    _setBuz 16F3  
                      __size_of_Temp_Main 0003               __end_of_Load_Initialization 1AB5  
        ??_setDimmerLights_Initialization 0022           ?_setDimmerLights_Initialization 0070  
                   ___ftmul@f3_as_product 0039       __end_of_setDimmerLights_IntrControl 0469  
             _setDimmerLights_IntrControl 0368                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1CE1  
             getMain_Lights_Count@status1 0021               getMain_Lights_Count@status2 0022  
                   __end_of_SwPointSelect 1D45              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 0020  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0020                                _TouchPower 1DAD  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
              ?_getAll_DimmerLights_AdjSw 0070                   __end_of_getPercentValue 0A5D  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0046  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5304 0022  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2322 002E  
               _setDimmerLights_SwOn$2323 002F                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
          DimmerIntrIOCPointSelect@lights 0071                           ?_Exception_Main 0070  
                            __pidataBANK4 1F03                             __end_of_getAD 1F03  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0058                        _LED_Initialization 1B63  
                         _getSw_KeyStatus 1E84                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 0062  
                        ?_setDimmerLights 006B                      _getMain_Lights_Count 1D1D  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01F6  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1C95  
              __end_of_set_TimeoutCleared 1ADA                        __size_of_getRxData 007A  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1BB8                            _DimmerLights11 00CC  
                          _DimmerLights22 00CD                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 1ABB                        ??_CC2500_WriteByte 0020  
                              __pbssBANK0 006F                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 1419                         ??_setRFSW_Control 006B  
                       __end_of_Temp_Main 1AC1                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1AF3  
                              __pnvCOMMON 007A                             ??_Switch_Main 006E  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 006F  
                       LedPointSelect@led 0021                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 17A5  
                          _getDelayOff_GO 1BE4                       _CC2500_WriteCommand 1DF5  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
        __size_of_DimmerLightsPointSelect 0013                          ??_setDelayOff_GO 0068  
           ??_DimmerLights_Initialization 0024                                   ?___wmul 0020  
                              ??_TMR1_ISR 0074                             ?_setTemp_Main 0070  
                              _getLoad_AD 0C82                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 1B03                        __size_of_setTxData 0097  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1AEC  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 1356  
                              ??_WDT_Main 0020                     ?_getMain_LightsStatus 0070  
            __end_of_setRF_Initialization 1B40                        _setRFSW_AdjControl 1318  
                  __end_of_setProductData 1BC6                                   _IOC_ISR 1CE1  
                                 _IOC_Set 1B7B                      __size_of_setLog_Code 0034  
   getDimmerLights_Allow_Condition@lights 0025                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 11FA                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1DDB                getAll_DimmerLights_AdjSw@i 0024  
             ?_setDimmerLights_IntrIOC_GO 0070                    __size_of_CC2500_RxData 006B  
                  __size_of_CC2500_TxData 006C               ?_setDimmerLights_ErrorClose 0070  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1AB8                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1B93  
         __end_of_setControl_Lights_Table 0AC4                           setRF_Main@error 016C  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
                         _setPercentValue 0993                   ??_setLoad_AH_AL_Restore 0020  
                        ?_getPercentValue 0070              __end_of_CC2500_FrequencyCabr 1BAB  
                         __size_of_IO_Set 001B                         __end_of_getBuz_GO 1C16  
                     ??_Flash_Memory_Main 0026                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 1BF4                                   _VarLED1 0163  
                                 _VarLED2 0167            __end_of_getDimmerLights_Status 1C05  
                       __end_of_getRxData 0C82                   __end_of_getSw_KeyStatus 1EA3  
                _CC2500_registers_address 1000          __end_of_DimmerIntrIOCPointSelect 1D6E  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0068  
                          ??_setTemp_Main 0066                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 1647  
                                 ___ftadd 0469                                   ___ftdiv 0EA7  
                                 ___ftneg 1B23                           __size_of___wmul 001E  
                                 ___ftmul 071F                                   ___fttol 0D89  
                     __end_of_Switch_Main 1B4B                                   ___lwdiv 1230  
                 ??_Buzzer_Initialization 0020                           _getRF_KeyStatus 1C16  
                              ??___awtoft 002B                                ??___ftpack 0025  
                         __size_of_setLED 0053                      setRFSW_AdjControl@sw 006B  
                         __size_of_setBuz 0059                                   __ptext1 12DC  
                                 __ptext2 1BD5                                   __ptext3 1356  
                                 __ptext4 0C82                                   __ptext5 1EE3  
                                 __ptext6 1C5D                                   __ptext7 0002  
                                 __ptext8 1ABE                                   __ptext9 0F50  
                 ??_setDimmerLights_AdjRF 0062                   ??_setDimmerLights_AdjOn 0022  
               __size_of_CC2500_SIDLEMode 0004                     _DimmerIntrPointSelect 1C6F  
                            __size_of_ISR 000F                ??_getMain_All_Error_Status 0020  
                         ?_setProductData 0062                 __end_of_Flash_Memory_Main 1230  
               __end_of_Flash_Memory_Read 1DF5                   ??_setDimmerLights_SwOff 006A  
                              _setRF_Main 0D03                   ??_myMain_Initialization 0020  
                           _DelayOff_Main 1AFB                         _DimmerLights_Main 1EC3  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 1AE0  
              __end_of_CC2500_ClearRXFIFO 1ACD                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 1AD1             DimmerLightsPointSelect@lights 0021  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 007A                            _LedPointSelect 1EA3  
                     _DelayOffPointSelect 1CF5                                   clrloop0 1AE7  
          __size_of_Switch_Initialization 000D             __end_of_Switch_Initialization 1BB8  
                    end_of_initialization 0046                 ??_DelayOff_Initialization 0023  
                       _CC2500_InitSetREG 10AC                             _DelayTime_1us 1FB1  
                       __end_of_setTxData 0EA7                __end_of_Flash_Memory_Write 1133  
                                 init_ram 1AE0                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 006F                      Flash_Memory_Read@ret 0023  
                                 initloop 1AE1                                _setSw_Main 01F6  
                   CC2500_ReadByte@loop_b 0021                    setDimmerLights_SwOn@sw 0031  
                       _CC2500_ReadStatus 1F8C                      Flash_Memory_Modify@i 0025  
                   _setLED_Initialization 1C39                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0024                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 0AC4  
                           _CC2500_TxData 0B2F                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 1463                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1000                       _Flash_Memory_Unlock 1B2C  
                     ??_CC2500_ReadStatus 0022                    ??_getMain_LightsStatus 0020  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1EE3  
                      _Mcu_Initialization 1C4B                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 1AC9                      __end_of_my_MainTimer 1318  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1EC3                   __end_of_setPercentValue 09F8  
                __size_of_CC2500_WriteREG 0023                 __end_of_CC2500_InitSetREG 10D6  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0020  
                     _setDimmerLights_Adj 169B                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 1FB1                             ?_RF_RxDisable 0070  
         getMain_All_Error_Status@command 0025               ??_getAll_DimmerLights_AdjSw 0022  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006B  
                          __end_of_IO_Set 1E2A                      _setRF_Initialization 1B35  
                      _setMemory_LoopSave 1CCE                               _Switch_Main 1B40  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1C82                   __end_of_getRF_KeyStatus 1C27  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1D83                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 006B  
                          __end_of___bmul 1C39                      setRF_DimmerLights@on 0066  
                _DimmerIntrIOCPointSelect 1D59                            __end_of___wmul 1E65  
                       getSw_KeyStatus@sw 0024               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 0029             __size_of_getDimmerLights_Line 0013  
                  ?_DimmerIntrPointSelect 0070                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006D                            __end_of_setLED 1647  
           __size_of_setDimmerLights_Line 0017             __size_of_setDimmerLights_SwOn 005C  
                          __end_of_setBuz 174C                      _CC2500_FrequencyCabr 1B9F  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0036  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 1500                         __size_of_WDT_Main 0012  
                     start_initialization 0015                         _setRF_DimmerValue 1133  
                         ?_LedPointSelect 0070                                 _Load_Main 004A  
                             __end_of_ISR 0013                          _getDimmer_LoadGO 1B0B  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
                      ?_setRF_DimmerValue 0070                __end_of_CC2500_InitPATable 1E84  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 1000  
                          ??_RF_RxDisable 0024                       __size_of_getLoad_AD 0081  
                            ?_Buzzer_Main 0070                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1AD5                                  ??_IO_Set 0020  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 015F  
                             ?_setSw_Main 0070                       ??_setRF_DimmerValue 0066  
                     __size_of_getTemp_AD 003E                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 1ABE  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 00D1                     setProductData@address 0065  
                     Exception_Main@count 01E9                   setRF_DimmerValue@lights 0067  
                     Exception_Main@error 01EA                                  ??___bmul 0021  
                   ??_setDimmerLights_Adj 006C                                  ??___wmul 0024  
                  __size_of_SwPointSelect 0014                                 _Tx_Length 00D4  
                             __pdataBANK4 024E                                  ??_setLED 0023  
               _getAll_DimmerLights_AdjSw 07D3                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 006F  
                       ??_CC2500_ReadByte 0020          __end_of_getMain_All_Error_Status 11C6  
                        _CC2500_SIDLEMode 1AD1                __size_of_DimmerLights_Main 0020  
               __end_of_setRF_DimmerValue 1162                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                               __pbssCOMMON 0075  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1CBB                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00EA  
                           __pcstackBANK2 016B                             __pcstackBANK3 01E9  
                           __pcstackBANK5 02A0                      ??_set_TimeoutCleared 0020  
                        ?_setPercentValue 0070                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                  __size_of_setDimmerLights 0052  
                           DlyOff_Main@sw 006E                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 005D  
              __size_of_CC2500_ReadStatus 0025                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 01BE  
                           _DimmerLights2 01CF                     CC2500_WriteREG@w_addr 0024  
                   setDelayOff_GO@command 0066                 ??_DimmerLightsPointSelect 0020  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1082                  setRFSW_AdjControl@status 006A  
                         ??_CC2500_TxData 0024                            getRxData@error 00EE  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 1AC5  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 01EB  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 0086  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                              setBuz@time 0029                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002A                    _setTemp_Initialization 1AAE  
                               _getBuz_GO 1C05       __end_of_Flash_Memory_Initialization 071F  
             _Flash_Memory_Initialization 0643                                  ?___awdiv 0020  
                               __ptext100 0469                                 __ptext101 1F23  
                               __ptext110 1D09                                 __ptext102 08D0  
                               __ptext111 1162                                 __ptext103 15F4  
                               __ptext120 1BE4                                 __ptext112 1AFB  
                               __ptext104 1EA3                                 __ptext121 1BF4  
                               __ptext113 0873                                 __ptext105 0800  
                               __ptext122 1C82                                 __ptext114 0931  
                               __ptext106 1C95                                 __ptext131 1FD7  
                               __ptext123 16F3                                 __ptext115 14B1  
                               __ptext107 1267                                 __ptext132 0368  
                               __ptext124 1647                                 __ptext116 15A1  
                               __ptext108 1B03                                 __ptext133 1C6F  
                               __ptext125 1AF3                                 __ptext117 1BB8  
                               __ptext109 1193                                  ?___ftadd 0041  
                               __ptext134 1CE1                                 __ptext126 1ADA  
                               __ptext118 1082                                 __ptext135 12A1  
                               __ptext127 1CF5                                 __ptext119 1C27  
                               __ptext136 1D59                                 __ptext128 1419  
                               __ptext129 1AAF                                 _getRxData 0C08  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 154F                          ??_setProductData 0063  
           __size_of_setSw_Initialization 0008            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1AB2                          getPercentValue@i 005F  
                        setPercentValue@i 005F                             ??_setLog_Code 0066  
                getDimmerLights_Line@line 0021                        __end_of_TouchPower 1DC2  
                         DelayTimejudge@i 0026                           DelayTimejudge@j 0027  
                         DelayTimejudge@k 0028                       __size_of_setSw_Main 0172  
            CC2500_ReadStatus@status_addr 0023            __size_of_setDimmerLights_AdjRF 0024  
          __size_of_setDimmerLights_AdjOn 002E             __end_of_setDimmerLights_AdjRF 1F8C  
           __end_of_setDimmerLights_AdjOn 1104                    CC2500_WriteByte@loop_a 0021  
                               _r_address 00D5            __size_of_setDimmerLights_SwOff 004F  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 1500  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1BE4  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0026  
                 __size_of_DelayTimejudge 002A                             _SwPointSelect 1D31  
                     __end_of_setLED_Main 13D5                          ??_getDelayOff_GO 0022  
                     _DimmerLightsIntrIOC 00CE                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 1ABE                         _CC2500_rfSettings 102F  
                          ___wmul@product 0024                                  _LED_Main 1B6F  
                         SwPointSelect@sw 0020                                 clear_ram0 1AE6  
                CC2500_InitPATable@loop_d 0027                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 12DC                                 _setTxData 0E10  
     __end_of_DimmerLights_Initialization 1D1D               _DimmerLights_Initialization 1D09  
                      _CC2500_ClearRXFIFO 1AC9                        _CC2500_ClearTXFIFO 1ACD  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1D59                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0069               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 1104                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1FD7  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1B87  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                                _RF_Count 0123                      __end_of_RF_RxDisable 1BD5  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1E0F  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1C5D  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0023  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 016B                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0053                                  _DelayOff 0077  
                            setSw_Main@sw 006D          setDimmerLights_IntrIOC_GO@lights 0072  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 0014  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1B63  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 11FA  
                   _DlyOff_Initialization 1ADA                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 1AC1  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006C  
                      __end_of_getLoad_AD 0D03                        __end_of_getLoad_OK 1B0B  
                   _Switch_Initialization 1BAB         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 006C  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 1394                                ?_setTxData 0070  
                            ?_Switch_Main 0070                ??_DimmerIntrIOCPointSelect 0070  
                        _CC2500_WriteByte 1DC2                         getLoad_AD@channel 0026  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00D3  
                             ??_Temp_Main 0069                         setRFSW_Control@sw 006D  
           _getMain_All_Error_Status$3623 0021             _getMain_All_Error_Status$3624 0023  
                __end_of_getDimmer_LoadGO 1B13                       _Load_Initialization 1AB2  
                               setLED@led 0023                   ??_DimmerIntrPointSelect 0070  
                            _setTemp_Main 0F50                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0030  
                                ___awtoft 1F23                          ??_LedPointSelect 0020  
                                ___ftpack 08D0             __size_of_getMain_Lights_Count 0014  
                  getDimmer_LoadGO@loadgo 0020             __size_of_getMain_LightsStatus 0013  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00EF  
                    CC2500_WriteREG@value 0022                               _setLED_Main 1394  
              __end_of_setRF_DimmerLights 17A5            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1B1B  
                        setDelayOff_GO@sw 0069                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070        __size_of_getAll_DimmerLights_AdjSw 002D  
                         ___lwdiv@counter 0025                                  __ptext10 1ABB  
                                __ptext11 1AAE                                  __ptext20 1DAD  
                                __ptext12 1B40                                  __ptext21 1AD5  
                                __ptext13 01F6                                  __ptext30 0817  
                                __ptext22 1D98                                  __ptext14 1D45  
                                __ptext31 1318                                  __ptext23 1AB8  
                                __ptext15 10D6                                  __ptext40 0B2F  
                                __ptext32 1133                                  __ptext24 0D03  
                                __ptext16 1E84                                  __ptext41 0AC4  
                                __ptext33 1F68                                  __ptext25 0C08  
                                __ptext17 1D31                                  __ptext50 1B9F  
                                __ptext42 1F8C                                  __ptext34 09F8  
                                __ptext26 11C6                                  __ptext18 1BAB  
                                __ptext51 1FB1                                  __ptext43 1E2A  
                                __ptext35 071F                                  __ptext27 1CCE  
                                __ptext19 1B1B                                  __ptext60 1C4B  
                                __ptext52 1ACD                                  __ptext44 1D83  
                                __ptext36 1CBB                                  __ptext28 0A5D  
                                __ptext61 1B93                                  __ptext53 1AC9  
                                __ptext45 1AD1                                  __ptext37 1C16  
                                __ptext29 1500                                  __ptext70 1B0B  
                                __ptext62 1B87                                  __ptext54 1DF5  
                                __ptext46 13D5                                  __ptext38 1C05  
                                __ptext71 07D3                                  __ptext63 1E0F  
                                __ptext55 1AC5                                  __ptext47 10AC  
                                __ptext39 1BC6                                  __ptext80 11FA  
                                __ptext72 1E47                                  __ptext64 1B7B  
                                __ptext56 1D6E                                  __ptext48 1E65  
                                __ptext81 1463                                  __ptext73 1230  
                                __ptext65 1AC1                                  __ptext57 1DC2  
                                __ptext49 1F45                                  __ptext90 1EC3  
                                __ptext82 1B57                                  __ptext74 1AB2  
                                __ptext66 1AEC                                  __ptext58 1AB5  
                                __ptext91 0B9B                                  __ptext83 0643  
                                __ptext75 1066                                  __ptext67 004A  
                                __ptext59 1B35                                  __ptext92 169B  
                                __ptext84 1B4B                                  __ptext76 1B6F  
                                __ptext68 1D1D                                  __ptext93 154F  
                                __ptext85 1104                                  __ptext77 1394  
                                __ptext69 1B13                                  __ptext94 0E10  
                                __ptext86 1B2C                                  __ptext78 1B63  
                                __ptext95 174C                                  __ptext87 1DDB  
                                __ptext79 1C39                                  __ptext96 0993  
                                __ptext88 055F                                  __ptext97 0D89  
                                __ptext89 1CA8                                  __ptext98 1B23  
                                __ptext99 0EA7                                  __product 024E  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1CBB  
            __end_of_setDimmerLights_Main 0C08              __end_of_setDimmerLights_Line 0817  
            __end_of_setDimmerLights_SwOn 0873                              ??_setSw_Main 006B  
                  ??_setRF_TimeoutCleared 0020                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1D45  
                __end_of_CC2500_SIDLEMode 1AD5                setDimmerLights_Main@lights 006E  
             __end_of_DelayOffPointSelect 1D09                CC2500_WriteCommand@command 0023  
                 setDimmerLights_AdjOn@sw 0022                           _CC2500_ReadByte 1E2A  
                      _CC2500_InitPATable 1E65                  __end_of_setMemory_Modify 1CCE  
                      __end_of_setRF_Main 0D89                               ??_getBuz_GO 0022  
             __size_of_Mcu_Initialization 0012               setDimmerLights_ErrorClose@i 00EC  
                    _CC2500_patable_vaule 105E                               ??_getRxData 006E  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1D83  
                                main@argc 02A0                                  main@argv 02A2  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6297 0021  
                    _getSw_KeyStatus$6298 0022                           _CC2500_PowerRST 13D5  
                __size_of_getSw_KeyStatus 001F               __end_of_Flash_Memory_Modify 14B1  
                       ??_getPercentValue 005C                               _setLog_Code 11C6  
             __end_of_Flash_Memory_Unlock 1B35                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1F45                        __end_of_setSw_Main 0368  
                   ??_Load_Initialization 0022                             _Transceive_OK 03C9  
                  ?_DlyOff_Initialization 0070                            _DelayTimejudge 1082  
                             pic14e$flags 007E              ??_setDimmerLights_IntrIOC_GO 0072  
              setDimmerLights_Line@lights 0020              ??_setDimmerLights_ErrorClose 006B  
                 setDimmerLights_SwOff@sw 006A               __size_of_setMemory_LoopSave 0013  
       __end_of_getAll_DimmerLights_AdjSw 0800                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0025                    ?_Switch_Initialization 0070  
                 ??_CC2500_PowerOnInitial 0029    __end_of_setDimmerLights_Initialization 1193  
 __size_of_setDimmerLights_Initialization 0031            _setDimmerLights_Initialization 1162  
             __end_of_setDimmerLights_Adj 16F3                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0020                    CC2500_InitPATable@temp 0026  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1AB5  
    __size_of_setDimmerLights_IntrControl 0101                               getLoad_AD@i 0029  
                             getLoad_AD@j 0028                               getLoad_AD@k 0027  
                    _Flash_Memory_Erasing 1B57                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D2                   __size_of_Exception_Main 00E4  
         __end_of_DelayOff_Initialization 1AFB       __size_of_setDimmerLights_IntrIOC_GO 003B  
     __size_of_setDimmerLights_ErrorClose 0062                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B03                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 15A1  
        __size_of_setControl_Lights_Table 0067                    __end_of_DelayTimejudge 10AC  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00DC  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 006C  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 1FD7  
                 __end_of_CC2500_ReadByte 1E47              __end_of_setSw_Initialization 1B23  
                         _Timeout_Counter 1D98           __size_of_getDimmerLights_Status 0011  
                    getPercentValue@value 005E                              _RF_RxDisable 1BC6  
              __end_of_LED_Initialization 1B6F            __end_of_setTemp_Initialization 1AAF  
                __size_of_setPercentValue 0065                   setMemory_Modify@command 0021  
                    setPercentValue@value 005E                 __end_of_RF_Initialization 1AB8  
                   __end_of_CC2500_RxData 0B2F                     __end_of_CC2500_TxData 0B9B  
                   _setLoad_AH_AL_Restore 1066                   __end_of_CC2500_PowerRST 1419  
