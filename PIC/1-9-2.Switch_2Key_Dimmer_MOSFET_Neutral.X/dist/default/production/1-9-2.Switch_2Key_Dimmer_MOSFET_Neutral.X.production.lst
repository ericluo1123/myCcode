

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Fri Dec 26 16:32:30 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	intentry,global,class=CODE,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   159                           	dabs	1,0x7E,2
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0008                     	;# 
   169  0009                     	;# 
   170  000A                     	;# 
   171  000B                     	;# 
   172  000C                     	;# 
   173  000D                     	;# 
   174  000E                     	;# 
   175  0010                     	;# 
   176  0011                     	;# 
   177  0012                     	;# 
   178  0015                     	;# 
   179  0016                     	;# 
   180  0016                     	;# 
   181  0017                     	;# 
   182  0018                     	;# 
   183  0019                     	;# 
   184  001A                     	;# 
   185  001B                     	;# 
   186  001C                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0095                     	;# 
   194  0096                     	;# 
   195  0097                     	;# 
   196  0099                     	;# 
   197  009A                     	;# 
   198  009B                     	;# 
   199  009B                     	;# 
   200  009C                     	;# 
   201  009D                     	;# 
   202  009E                     	;# 
   203  010C                     	;# 
   204  010D                     	;# 
   205  010E                     	;# 
   206  0116                     	;# 
   207  0117                     	;# 
   208  011D                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211  018E                     	;# 
   212  0191                     	;# 
   213  0191                     	;# 
   214  0192                     	;# 
   215  0193                     	;# 
   216  0193                     	;# 
   217  0194                     	;# 
   218  0195                     	;# 
   219  0196                     	;# 
   220  0197                     	;# 
   221  0199                     	;# 
   222  019A                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019C                     	;# 
   228  019C                     	;# 
   229  019D                     	;# 
   230  019E                     	;# 
   231  019F                     	;# 
   232  020D                     	;# 
   233  0210                     	;# 
   234  0211                     	;# 
   235  0211                     	;# 
   236  0212                     	;# 
   237  0212                     	;# 
   238  0213                     	;# 
   239  0213                     	;# 
   240  0214                     	;# 
   241  0214                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0215                     	;# 
   245  0216                     	;# 
   246  0216                     	;# 
   247  0217                     	;# 
   248  0217                     	;# 
   249  0291                     	;# 
   250  0291                     	;# 
   251  0292                     	;# 
   252  0293                     	;# 
   253  0298                     	;# 
   254  0298                     	;# 
   255  0299                     	;# 
   256  029A                     	;# 
   257  0394                     	;# 
   258  0395                     	;# 
   259  0396                     	;# 
   260  0FE4                     	;# 
   261  0FE5                     	;# 
   262  0FE6                     	;# 
   263  0FE7                     	;# 
   264  0FE8                     	;# 
   265  0FE9                     	;# 
   266  0FEA                     	;# 
   267  0FEB                     	;# 
   268  0FED                     	;# 
   269  0FEE                     	;# 
   270  0FEF                     	;# 
   271  0000                     	;# 
   272  0001                     	;# 
   273  0002                     	;# 
   274  0003                     	;# 
   275  0004                     	;# 
   276  0005                     	;# 
   277  0006                     	;# 
   278  0007                     	;# 
   279  0008                     	;# 
   280  0009                     	;# 
   281  000A                     	;# 
   282  000B                     	;# 
   283  000C                     	;# 
   284  000D                     	;# 
   285  000E                     	;# 
   286  0010                     	;# 
   287  0011                     	;# 
   288  0012                     	;# 
   289  0015                     	;# 
   290  0016                     	;# 
   291  0016                     	;# 
   292  0017                     	;# 
   293  0018                     	;# 
   294  0019                     	;# 
   295  001A                     	;# 
   296  001B                     	;# 
   297  001C                     	;# 
   298  008C                     	;# 
   299  008D                     	;# 
   300  008E                     	;# 
   301  0090                     	;# 
   302  0091                     	;# 
   303  0092                     	;# 
   304  0095                     	;# 
   305  0096                     	;# 
   306  0097                     	;# 
   307  0099                     	;# 
   308  009A                     	;# 
   309  009B                     	;# 
   310  009B                     	;# 
   311  009C                     	;# 
   312  009D                     	;# 
   313  009E                     	;# 
   314  010C                     	;# 
   315  010D                     	;# 
   316  010E                     	;# 
   317  0116                     	;# 
   318  0117                     	;# 
   319  011D                     	;# 
   320  018C                     	;# 
   321  018D                     	;# 
   322  018E                     	;# 
   323  0191                     	;# 
   324  0191                     	;# 
   325  0192                     	;# 
   326  0193                     	;# 
   327  0193                     	;# 
   328  0194                     	;# 
   329  0195                     	;# 
   330  0196                     	;# 
   331  0197                     	;# 
   332  0199                     	;# 
   333  019A                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019B                     	;# 
   338  019C                     	;# 
   339  019C                     	;# 
   340  019D                     	;# 
   341  019E                     	;# 
   342  019F                     	;# 
   343  020D                     	;# 
   344  0210                     	;# 
   345  0211                     	;# 
   346  0211                     	;# 
   347  0212                     	;# 
   348  0212                     	;# 
   349  0213                     	;# 
   350  0213                     	;# 
   351  0214                     	;# 
   352  0214                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0215                     	;# 
   356  0216                     	;# 
   357  0216                     	;# 
   358  0217                     	;# 
   359  0217                     	;# 
   360  0291                     	;# 
   361  0291                     	;# 
   362  0292                     	;# 
   363  0293                     	;# 
   364  0298                     	;# 
   365  0298                     	;# 
   366  0299                     	;# 
   367  029A                     	;# 
   368  0394                     	;# 
   369  0395                     	;# 
   370  0396                     	;# 
   371  0FE4                     	;# 
   372  0FE5                     	;# 
   373  0FE6                     	;# 
   374  0FE7                     	;# 
   375  0FE8                     	;# 
   376  0FE9                     	;# 
   377  0FEA                     	;# 
   378  0FEB                     	;# 
   379  0FED                     	;# 
   380  0FEE                     	;# 
   381  0FEF                     	;# 
   382  0000                     	;# 
   383  0001                     	;# 
   384  0002                     	;# 
   385  0003                     	;# 
   386  0004                     	;# 
   387  0005                     	;# 
   388  0006                     	;# 
   389  0007                     	;# 
   390  0008                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  0010                     	;# 
   398  0011                     	;# 
   399  0012                     	;# 
   400  0015                     	;# 
   401  0016                     	;# 
   402  0016                     	;# 
   403  0017                     	;# 
   404  0018                     	;# 
   405  0019                     	;# 
   406  001A                     	;# 
   407  001B                     	;# 
   408  001C                     	;# 
   409  008C                     	;# 
   410  008D                     	;# 
   411  008E                     	;# 
   412  0090                     	;# 
   413  0091                     	;# 
   414  0092                     	;# 
   415  0095                     	;# 
   416  0096                     	;# 
   417  0097                     	;# 
   418  0099                     	;# 
   419  009A                     	;# 
   420  009B                     	;# 
   421  009B                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009E                     	;# 
   425  010C                     	;# 
   426  010D                     	;# 
   427  010E                     	;# 
   428  0116                     	;# 
   429  0117                     	;# 
   430  011D                     	;# 
   431  018C                     	;# 
   432  018D                     	;# 
   433  018E                     	;# 
   434  0191                     	;# 
   435  0191                     	;# 
   436  0192                     	;# 
   437  0193                     	;# 
   438  0193                     	;# 
   439  0194                     	;# 
   440  0195                     	;# 
   441  0196                     	;# 
   442  0197                     	;# 
   443  0199                     	;# 
   444  019A                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019B                     	;# 
   449  019C                     	;# 
   450  019C                     	;# 
   451  019D                     	;# 
   452  019E                     	;# 
   453  019F                     	;# 
   454  020D                     	;# 
   455  0210                     	;# 
   456  0211                     	;# 
   457  0211                     	;# 
   458  0212                     	;# 
   459  0212                     	;# 
   460  0213                     	;# 
   461  0213                     	;# 
   462  0214                     	;# 
   463  0214                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0215                     	;# 
   467  0216                     	;# 
   468  0216                     	;# 
   469  0217                     	;# 
   470  0217                     	;# 
   471  0291                     	;# 
   472  0291                     	;# 
   473  0292                     	;# 
   474  0293                     	;# 
   475  0298                     	;# 
   476  0298                     	;# 
   477  0299                     	;# 
   478  029A                     	;# 
   479  0394                     	;# 
   480  0395                     	;# 
   481  0396                     	;# 
   482  0FE4                     	;# 
   483  0FE5                     	;# 
   484  0FE6                     	;# 
   485  0FE7                     	;# 
   486  0FE8                     	;# 
   487  0FE9                     	;# 
   488  0FEA                     	;# 
   489  0FEB                     	;# 
   490  0FED                     	;# 
   491  0FEE                     	;# 
   492  0FEF                     	;# 
   493  0000                     	;# 
   494  0001                     	;# 
   495  0002                     	;# 
   496  0003                     	;# 
   497  0004                     	;# 
   498  0005                     	;# 
   499  0006                     	;# 
   500  0007                     	;# 
   501  0008                     	;# 
   502  0009                     	;# 
   503  000A                     	;# 
   504  000B                     	;# 
   505  000C                     	;# 
   506  000D                     	;# 
   507  000E                     	;# 
   508  0010                     	;# 
   509  0011                     	;# 
   510  0012                     	;# 
   511  0015                     	;# 
   512  0016                     	;# 
   513  0016                     	;# 
   514  0017                     	;# 
   515  0018                     	;# 
   516  0019                     	;# 
   517  001A                     	;# 
   518  001B                     	;# 
   519  001C                     	;# 
   520  008C                     	;# 
   521  008D                     	;# 
   522  008E                     	;# 
   523  0090                     	;# 
   524  0091                     	;# 
   525  0092                     	;# 
   526  0095                     	;# 
   527  0096                     	;# 
   528  0097                     	;# 
   529  0099                     	;# 
   530  009A                     	;# 
   531  009B                     	;# 
   532  009B                     	;# 
   533  009C                     	;# 
   534  009D                     	;# 
   535  009E                     	;# 
   536  010C                     	;# 
   537  010D                     	;# 
   538  010E                     	;# 
   539  0116                     	;# 
   540  0117                     	;# 
   541  011D                     	;# 
   542  018C                     	;# 
   543  018D                     	;# 
   544  018E                     	;# 
   545  0191                     	;# 
   546  0191                     	;# 
   547  0192                     	;# 
   548  0193                     	;# 
   549  0193                     	;# 
   550  0194                     	;# 
   551  0195                     	;# 
   552  0196                     	;# 
   553  0197                     	;# 
   554  0199                     	;# 
   555  019A                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019B                     	;# 
   560  019C                     	;# 
   561  019C                     	;# 
   562  019D                     	;# 
   563  019E                     	;# 
   564  019F                     	;# 
   565  020D                     	;# 
   566  0210                     	;# 
   567  0211                     	;# 
   568  0211                     	;# 
   569  0212                     	;# 
   570  0212                     	;# 
   571  0213                     	;# 
   572  0213                     	;# 
   573  0214                     	;# 
   574  0214                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0215                     	;# 
   578  0216                     	;# 
   579  0216                     	;# 
   580  0217                     	;# 
   581  0217                     	;# 
   582  0291                     	;# 
   583  0291                     	;# 
   584  0292                     	;# 
   585  0293                     	;# 
   586  0298                     	;# 
   587  0298                     	;# 
   588  0299                     	;# 
   589  029A                     	;# 
   590  0394                     	;# 
   591  0395                     	;# 
   592  0396                     	;# 
   593  0FE4                     	;# 
   594  0FE5                     	;# 
   595  0FE6                     	;# 
   596  0FE7                     	;# 
   597  0FE8                     	;# 
   598  0FE9                     	;# 
   599  0FEA                     	;# 
   600  0FEB                     	;# 
   601  0FED                     	;# 
   602  0FEE                     	;# 
   603  0FEF                     	;# 
   604  0000                     	;# 
   605  0001                     	;# 
   606  0002                     	;# 
   607  0003                     	;# 
   608  0004                     	;# 
   609  0005                     	;# 
   610  0006                     	;# 
   611  0007                     	;# 
   612  0008                     	;# 
   613  0009                     	;# 
   614  000A                     	;# 
   615  000B                     	;# 
   616  000C                     	;# 
   617  000D                     	;# 
   618  000E                     	;# 
   619  0010                     	;# 
   620  0011                     	;# 
   621  0012                     	;# 
   622  0015                     	;# 
   623  0016                     	;# 
   624  0016                     	;# 
   625  0017                     	;# 
   626  0018                     	;# 
   627  0019                     	;# 
   628  001A                     	;# 
   629  001B                     	;# 
   630  001C                     	;# 
   631  008C                     	;# 
   632  008D                     	;# 
   633  008E                     	;# 
   634  0090                     	;# 
   635  0091                     	;# 
   636  0092                     	;# 
   637  0095                     	;# 
   638  0096                     	;# 
   639  0097                     	;# 
   640  0099                     	;# 
   641  009A                     	;# 
   642  009B                     	;# 
   643  009B                     	;# 
   644  009C                     	;# 
   645  009D                     	;# 
   646  009E                     	;# 
   647  010C                     	;# 
   648  010D                     	;# 
   649  010E                     	;# 
   650  0116                     	;# 
   651  0117                     	;# 
   652  011D                     	;# 
   653  018C                     	;# 
   654  018D                     	;# 
   655  018E                     	;# 
   656  0191                     	;# 
   657  0191                     	;# 
   658  0192                     	;# 
   659  0193                     	;# 
   660  0193                     	;# 
   661  0194                     	;# 
   662  0195                     	;# 
   663  0196                     	;# 
   664  0197                     	;# 
   665  0199                     	;# 
   666  019A                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019B                     	;# 
   671  019C                     	;# 
   672  019C                     	;# 
   673  019D                     	;# 
   674  019E                     	;# 
   675  019F                     	;# 
   676  020D                     	;# 
   677  0210                     	;# 
   678  0211                     	;# 
   679  0211                     	;# 
   680  0212                     	;# 
   681  0212                     	;# 
   682  0213                     	;# 
   683  0213                     	;# 
   684  0214                     	;# 
   685  0214                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0215                     	;# 
   689  0216                     	;# 
   690  0216                     	;# 
   691  0217                     	;# 
   692  0217                     	;# 
   693  0291                     	;# 
   694  0291                     	;# 
   695  0292                     	;# 
   696  0293                     	;# 
   697  0298                     	;# 
   698  0298                     	;# 
   699  0299                     	;# 
   700  029A                     	;# 
   701  0394                     	;# 
   702  0395                     	;# 
   703  0396                     	;# 
   704  0FE4                     	;# 
   705  0FE5                     	;# 
   706  0FE6                     	;# 
   707  0FE7                     	;# 
   708  0FE8                     	;# 
   709  0FE9                     	;# 
   710  0FEA                     	;# 
   711  0FEB                     	;# 
   712  0FED                     	;# 
   713  0FEE                     	;# 
   714  0FEF                     	;# 
   715  0000                     	;# 
   716  0001                     	;# 
   717  0002                     	;# 
   718  0003                     	;# 
   719  0004                     	;# 
   720  0005                     	;# 
   721  0006                     	;# 
   722  0007                     	;# 
   723  0008                     	;# 
   724  0009                     	;# 
   725  000A                     	;# 
   726  000B                     	;# 
   727  000C                     	;# 
   728  000D                     	;# 
   729  000E                     	;# 
   730  0010                     	;# 
   731  0011                     	;# 
   732  0012                     	;# 
   733  0015                     	;# 
   734  0016                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001C                     	;# 
   742  008C                     	;# 
   743  008D                     	;# 
   744  008E                     	;# 
   745  0090                     	;# 
   746  0091                     	;# 
   747  0092                     	;# 
   748  0095                     	;# 
   749  0096                     	;# 
   750  0097                     	;# 
   751  0099                     	;# 
   752  009A                     	;# 
   753  009B                     	;# 
   754  009B                     	;# 
   755  009C                     	;# 
   756  009D                     	;# 
   757  009E                     	;# 
   758  010C                     	;# 
   759  010D                     	;# 
   760  010E                     	;# 
   761  0116                     	;# 
   762  0117                     	;# 
   763  011D                     	;# 
   764  018C                     	;# 
   765  018D                     	;# 
   766  018E                     	;# 
   767  0191                     	;# 
   768  0191                     	;# 
   769  0192                     	;# 
   770  0193                     	;# 
   771  0193                     	;# 
   772  0194                     	;# 
   773  0195                     	;# 
   774  0196                     	;# 
   775  0197                     	;# 
   776  0199                     	;# 
   777  019A                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019B                     	;# 
   782  019C                     	;# 
   783  019C                     	;# 
   784  019D                     	;# 
   785  019E                     	;# 
   786  019F                     	;# 
   787  020D                     	;# 
   788  0210                     	;# 
   789  0211                     	;# 
   790  0211                     	;# 
   791  0212                     	;# 
   792  0212                     	;# 
   793  0213                     	;# 
   794  0213                     	;# 
   795  0214                     	;# 
   796  0214                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0215                     	;# 
   800  0216                     	;# 
   801  0216                     	;# 
   802  0217                     	;# 
   803  0217                     	;# 
   804  0291                     	;# 
   805  0291                     	;# 
   806  0292                     	;# 
   807  0293                     	;# 
   808  0298                     	;# 
   809  0298                     	;# 
   810  0299                     	;# 
   811  029A                     	;# 
   812  0394                     	;# 
   813  0395                     	;# 
   814  0396                     	;# 
   815  0FE4                     	;# 
   816  0FE5                     	;# 
   817  0FE6                     	;# 
   818  0FE7                     	;# 
   819  0FE8                     	;# 
   820  0FE9                     	;# 
   821  0FEA                     	;# 
   822  0FEB                     	;# 
   823  0FED                     	;# 
   824  0FEE                     	;# 
   825  0FEF                     	;# 
   826  0000                     	;# 
   827  0001                     	;# 
   828  0002                     	;# 
   829  0003                     	;# 
   830  0004                     	;# 
   831  0005                     	;# 
   832  0006                     	;# 
   833  0007                     	;# 
   834  0008                     	;# 
   835  0009                     	;# 
   836  000A                     	;# 
   837  000B                     	;# 
   838  000C                     	;# 
   839  000D                     	;# 
   840  000E                     	;# 
   841  0010                     	;# 
   842  0011                     	;# 
   843  0012                     	;# 
   844  0015                     	;# 
   845  0016                     	;# 
   846  0016                     	;# 
   847  0017                     	;# 
   848  0018                     	;# 
   849  0019                     	;# 
   850  001A                     	;# 
   851  001B                     	;# 
   852  001C                     	;# 
   853  008C                     	;# 
   854  008D                     	;# 
   855  008E                     	;# 
   856  0090                     	;# 
   857  0091                     	;# 
   858  0092                     	;# 
   859  0095                     	;# 
   860  0096                     	;# 
   861  0097                     	;# 
   862  0099                     	;# 
   863  009A                     	;# 
   864  009B                     	;# 
   865  009B                     	;# 
   866  009C                     	;# 
   867  009D                     	;# 
   868  009E                     	;# 
   869  010C                     	;# 
   870  010D                     	;# 
   871  010E                     	;# 
   872  0116                     	;# 
   873  0117                     	;# 
   874  011D                     	;# 
   875  018C                     	;# 
   876  018D                     	;# 
   877  018E                     	;# 
   878  0191                     	;# 
   879  0191                     	;# 
   880  0192                     	;# 
   881  0193                     	;# 
   882  0193                     	;# 
   883  0194                     	;# 
   884  0195                     	;# 
   885  0196                     	;# 
   886  0197                     	;# 
   887  0199                     	;# 
   888  019A                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019B                     	;# 
   893  019C                     	;# 
   894  019C                     	;# 
   895  019D                     	;# 
   896  019E                     	;# 
   897  019F                     	;# 
   898  020D                     	;# 
   899  0210                     	;# 
   900  0211                     	;# 
   901  0211                     	;# 
   902  0212                     	;# 
   903  0212                     	;# 
   904  0213                     	;# 
   905  0213                     	;# 
   906  0214                     	;# 
   907  0214                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0215                     	;# 
   911  0216                     	;# 
   912  0216                     	;# 
   913  0217                     	;# 
   914  0217                     	;# 
   915  0291                     	;# 
   916  0291                     	;# 
   917  0292                     	;# 
   918  0293                     	;# 
   919  0298                     	;# 
   920  0298                     	;# 
   921  0299                     	;# 
   922  029A                     	;# 
   923  0394                     	;# 
   924  0395                     	;# 
   925  0396                     	;# 
   926  0FE4                     	;# 
   927  0FE5                     	;# 
   928  0FE6                     	;# 
   929  0FE7                     	;# 
   930  0FE8                     	;# 
   931  0FE9                     	;# 
   932  0FEA                     	;# 
   933  0FEB                     	;# 
   934  0FED                     	;# 
   935  0FEE                     	;# 
   936  0FEF                     	;# 
   937  0000                     	;# 
   938  0001                     	;# 
   939  0002                     	;# 
   940  0003                     	;# 
   941  0004                     	;# 
   942  0005                     	;# 
   943  0006                     	;# 
   944  0007                     	;# 
   945  0008                     	;# 
   946  0009                     	;# 
   947  000A                     	;# 
   948  000B                     	;# 
   949  000C                     	;# 
   950  000D                     	;# 
   951  000E                     	;# 
   952  0010                     	;# 
   953  0011                     	;# 
   954  0012                     	;# 
   955  0015                     	;# 
   956  0016                     	;# 
   957  0016                     	;# 
   958  0017                     	;# 
   959  0018                     	;# 
   960  0019                     	;# 
   961  001A                     	;# 
   962  001B                     	;# 
   963  001C                     	;# 
   964  008C                     	;# 
   965  008D                     	;# 
   966  008E                     	;# 
   967  0090                     	;# 
   968  0091                     	;# 
   969  0092                     	;# 
   970  0095                     	;# 
   971  0096                     	;# 
   972  0097                     	;# 
   973  0099                     	;# 
   974  009A                     	;# 
   975  009B                     	;# 
   976  009B                     	;# 
   977  009C                     	;# 
   978  009D                     	;# 
   979  009E                     	;# 
   980  010C                     	;# 
   981  010D                     	;# 
   982  010E                     	;# 
   983  0116                     	;# 
   984  0117                     	;# 
   985  011D                     	;# 
   986  018C                     	;# 
   987  018D                     	;# 
   988  018E                     	;# 
   989  0191                     	;# 
   990  0191                     	;# 
   991  0192                     	;# 
   992  0193                     	;# 
   993  0193                     	;# 
   994  0194                     	;# 
   995  0195                     	;# 
   996  0196                     	;# 
   997  0197                     	;# 
   998  0199                     	;# 
   999  019A                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019B                     	;# 
  1004  019C                     	;# 
  1005  019C                     	;# 
  1006  019D                     	;# 
  1007  019E                     	;# 
  1008  019F                     	;# 
  1009  020D                     	;# 
  1010  0210                     	;# 
  1011  0211                     	;# 
  1012  0211                     	;# 
  1013  0212                     	;# 
  1014  0212                     	;# 
  1015  0213                     	;# 
  1016  0213                     	;# 
  1017  0214                     	;# 
  1018  0214                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0215                     	;# 
  1022  0216                     	;# 
  1023  0216                     	;# 
  1024  0217                     	;# 
  1025  0217                     	;# 
  1026  0291                     	;# 
  1027  0291                     	;# 
  1028  0292                     	;# 
  1029  0293                     	;# 
  1030  0298                     	;# 
  1031  0298                     	;# 
  1032  0299                     	;# 
  1033  029A                     	;# 
  1034  0394                     	;# 
  1035  0395                     	;# 
  1036  0396                     	;# 
  1037  0FE4                     	;# 
  1038  0FE5                     	;# 
  1039  0FE6                     	;# 
  1040  0FE7                     	;# 
  1041  0FE8                     	;# 
  1042  0FE9                     	;# 
  1043  0FEA                     	;# 
  1044  0FEB                     	;# 
  1045  0FED                     	;# 
  1046  0FEE                     	;# 
  1047  0FEF                     	;# 
  1048  0000                     	;# 
  1049  0001                     	;# 
  1050  0002                     	;# 
  1051  0003                     	;# 
  1052  0004                     	;# 
  1053  0005                     	;# 
  1054  0006                     	;# 
  1055  0007                     	;# 
  1056  0008                     	;# 
  1057  0009                     	;# 
  1058  000A                     	;# 
  1059  000B                     	;# 
  1060  000C                     	;# 
  1061  000D                     	;# 
  1062  000E                     	;# 
  1063  0010                     	;# 
  1064  0011                     	;# 
  1065  0012                     	;# 
  1066  0015                     	;# 
  1067  0016                     	;# 
  1068  0016                     	;# 
  1069  0017                     	;# 
  1070  0018                     	;# 
  1071  0019                     	;# 
  1072  001A                     	;# 
  1073  001B                     	;# 
  1074  001C                     	;# 
  1075  008C                     	;# 
  1076  008D                     	;# 
  1077  008E                     	;# 
  1078  0090                     	;# 
  1079  0091                     	;# 
  1080  0092                     	;# 
  1081  0095                     	;# 
  1082  0096                     	;# 
  1083  0097                     	;# 
  1084  0099                     	;# 
  1085  009A                     	;# 
  1086  009B                     	;# 
  1087  009B                     	;# 
  1088  009C                     	;# 
  1089  009D                     	;# 
  1090  009E                     	;# 
  1091  010C                     	;# 
  1092  010D                     	;# 
  1093  010E                     	;# 
  1094  0116                     	;# 
  1095  0117                     	;# 
  1096  011D                     	;# 
  1097  018C                     	;# 
  1098  018D                     	;# 
  1099  018E                     	;# 
  1100  0191                     	;# 
  1101  0191                     	;# 
  1102  0192                     	;# 
  1103  0193                     	;# 
  1104  0193                     	;# 
  1105  0194                     	;# 
  1106  0195                     	;# 
  1107  0196                     	;# 
  1108  0197                     	;# 
  1109  0199                     	;# 
  1110  019A                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019B                     	;# 
  1115  019C                     	;# 
  1116  019C                     	;# 
  1117  019D                     	;# 
  1118  019E                     	;# 
  1119  019F                     	;# 
  1120  020D                     	;# 
  1121  0210                     	;# 
  1122  0211                     	;# 
  1123  0211                     	;# 
  1124  0212                     	;# 
  1125  0212                     	;# 
  1126  0213                     	;# 
  1127  0213                     	;# 
  1128  0214                     	;# 
  1129  0214                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0215                     	;# 
  1133  0216                     	;# 
  1134  0216                     	;# 
  1135  0217                     	;# 
  1136  0217                     	;# 
  1137  0291                     	;# 
  1138  0291                     	;# 
  1139  0292                     	;# 
  1140  0293                     	;# 
  1141  0298                     	;# 
  1142  0298                     	;# 
  1143  0299                     	;# 
  1144  029A                     	;# 
  1145  0394                     	;# 
  1146  0395                     	;# 
  1147  0396                     	;# 
  1148  0FE4                     	;# 
  1149  0FE5                     	;# 
  1150  0FE6                     	;# 
  1151  0FE7                     	;# 
  1152  0FE8                     	;# 
  1153  0FE9                     	;# 
  1154  0FEA                     	;# 
  1155  0FEB                     	;# 
  1156  0FED                     	;# 
  1157  0FEE                     	;# 
  1158  0FEF                     	;# 
  1159  0000                     	;# 
  1160  0001                     	;# 
  1161  0002                     	;# 
  1162  0003                     	;# 
  1163  0004                     	;# 
  1164  0005                     	;# 
  1165  0006                     	;# 
  1166  0007                     	;# 
  1167  0008                     	;# 
  1168  0009                     	;# 
  1169  000A                     	;# 
  1170  000B                     	;# 
  1171  000C                     	;# 
  1172  000D                     	;# 
  1173  000E                     	;# 
  1174  0010                     	;# 
  1175  0011                     	;# 
  1176  0012                     	;# 
  1177  0015                     	;# 
  1178  0016                     	;# 
  1179  0016                     	;# 
  1180  0017                     	;# 
  1181  0018                     	;# 
  1182  0019                     	;# 
  1183  001A                     	;# 
  1184  001B                     	;# 
  1185  001C                     	;# 
  1186  008C                     	;# 
  1187  008D                     	;# 
  1188  008E                     	;# 
  1189  0090                     	;# 
  1190  0091                     	;# 
  1191  0092                     	;# 
  1192  0095                     	;# 
  1193  0096                     	;# 
  1194  0097                     	;# 
  1195  0099                     	;# 
  1196  009A                     	;# 
  1197  009B                     	;# 
  1198  009B                     	;# 
  1199  009C                     	;# 
  1200  009D                     	;# 
  1201  009E                     	;# 
  1202  010C                     	;# 
  1203  010D                     	;# 
  1204  010E                     	;# 
  1205  0116                     	;# 
  1206  0117                     	;# 
  1207  011D                     	;# 
  1208  018C                     	;# 
  1209  018D                     	;# 
  1210  018E                     	;# 
  1211  0191                     	;# 
  1212  0191                     	;# 
  1213  0192                     	;# 
  1214  0193                     	;# 
  1215  0193                     	;# 
  1216  0194                     	;# 
  1217  0195                     	;# 
  1218  0196                     	;# 
  1219  0197                     	;# 
  1220  0199                     	;# 
  1221  019A                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019B                     	;# 
  1226  019C                     	;# 
  1227  019C                     	;# 
  1228  019D                     	;# 
  1229  019E                     	;# 
  1230  019F                     	;# 
  1231  020D                     	;# 
  1232  0210                     	;# 
  1233  0211                     	;# 
  1234  0211                     	;# 
  1235  0212                     	;# 
  1236  0212                     	;# 
  1237  0213                     	;# 
  1238  0213                     	;# 
  1239  0214                     	;# 
  1240  0214                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0215                     	;# 
  1244  0216                     	;# 
  1245  0216                     	;# 
  1246  0217                     	;# 
  1247  0217                     	;# 
  1248  0291                     	;# 
  1249  0291                     	;# 
  1250  0292                     	;# 
  1251  0293                     	;# 
  1252  0298                     	;# 
  1253  0298                     	;# 
  1254  0299                     	;# 
  1255  029A                     	;# 
  1256  0394                     	;# 
  1257  0395                     	;# 
  1258  0396                     	;# 
  1259  0FE4                     	;# 
  1260  0FE5                     	;# 
  1261  0FE6                     	;# 
  1262  0FE7                     	;# 
  1263  0FE8                     	;# 
  1264  0FE9                     	;# 
  1265  0FEA                     	;# 
  1266  0FEB                     	;# 
  1267  0FED                     	;# 
  1268  0FEE                     	;# 
  1269  0FEF                     	;# 
  1270  0000                     	;# 
  1271  0001                     	;# 
  1272  0002                     	;# 
  1273  0003                     	;# 
  1274  0004                     	;# 
  1275  0005                     	;# 
  1276  0006                     	;# 
  1277  0007                     	;# 
  1278  0008                     	;# 
  1279  0009                     	;# 
  1280  000A                     	;# 
  1281  000B                     	;# 
  1282  000C                     	;# 
  1283  000D                     	;# 
  1284  000E                     	;# 
  1285  0010                     	;# 
  1286  0011                     	;# 
  1287  0012                     	;# 
  1288  0015                     	;# 
  1289  0016                     	;# 
  1290  0016                     	;# 
  1291  0017                     	;# 
  1292  0018                     	;# 
  1293  0019                     	;# 
  1294  001A                     	;# 
  1295  001B                     	;# 
  1296  001C                     	;# 
  1297  008C                     	;# 
  1298  008D                     	;# 
  1299  008E                     	;# 
  1300  0090                     	;# 
  1301  0091                     	;# 
  1302  0092                     	;# 
  1303  0095                     	;# 
  1304  0096                     	;# 
  1305  0097                     	;# 
  1306  0099                     	;# 
  1307  009A                     	;# 
  1308  009B                     	;# 
  1309  009B                     	;# 
  1310  009C                     	;# 
  1311  009D                     	;# 
  1312  009E                     	;# 
  1313  010C                     	;# 
  1314  010D                     	;# 
  1315  010E                     	;# 
  1316  0116                     	;# 
  1317  0117                     	;# 
  1318  011D                     	;# 
  1319  018C                     	;# 
  1320  018D                     	;# 
  1321  018E                     	;# 
  1322  0191                     	;# 
  1323  0191                     	;# 
  1324  0192                     	;# 
  1325  0193                     	;# 
  1326  0193                     	;# 
  1327  0194                     	;# 
  1328  0195                     	;# 
  1329  0196                     	;# 
  1330  0197                     	;# 
  1331  0199                     	;# 
  1332  019A                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019B                     	;# 
  1337  019C                     	;# 
  1338  019C                     	;# 
  1339  019D                     	;# 
  1340  019E                     	;# 
  1341  019F                     	;# 
  1342  020D                     	;# 
  1343  0210                     	;# 
  1344  0211                     	;# 
  1345  0211                     	;# 
  1346  0212                     	;# 
  1347  0212                     	;# 
  1348  0213                     	;# 
  1349  0213                     	;# 
  1350  0214                     	;# 
  1351  0214                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0215                     	;# 
  1355  0216                     	;# 
  1356  0216                     	;# 
  1357  0217                     	;# 
  1358  0217                     	;# 
  1359  0291                     	;# 
  1360  0291                     	;# 
  1361  0292                     	;# 
  1362  0293                     	;# 
  1363  0298                     	;# 
  1364  0298                     	;# 
  1365  0299                     	;# 
  1366  029A                     	;# 
  1367  0394                     	;# 
  1368  0395                     	;# 
  1369  0396                     	;# 
  1370  0FE4                     	;# 
  1371  0FE5                     	;# 
  1372  0FE6                     	;# 
  1373  0FE7                     	;# 
  1374  0FE8                     	;# 
  1375  0FE9                     	;# 
  1376  0FEA                     	;# 
  1377  0FEB                     	;# 
  1378  0FED                     	;# 
  1379  0FEE                     	;# 
  1380  0FEF                     	;# 
  1381  0000                     	;# 
  1382  0001                     	;# 
  1383  0002                     	;# 
  1384  0003                     	;# 
  1385  0004                     	;# 
  1386  0005                     	;# 
  1387  0006                     	;# 
  1388  0007                     	;# 
  1389  0008                     	;# 
  1390  0009                     	;# 
  1391  000A                     	;# 
  1392  000B                     	;# 
  1393  000C                     	;# 
  1394  000D                     	;# 
  1395  000E                     	;# 
  1396  0010                     	;# 
  1397  0011                     	;# 
  1398  0012                     	;# 
  1399  0015                     	;# 
  1400  0016                     	;# 
  1401  0016                     	;# 
  1402  0017                     	;# 
  1403  0018                     	;# 
  1404  0019                     	;# 
  1405  001A                     	;# 
  1406  001B                     	;# 
  1407  001C                     	;# 
  1408  008C                     	;# 
  1409  008D                     	;# 
  1410  008E                     	;# 
  1411  0090                     	;# 
  1412  0091                     	;# 
  1413  0092                     	;# 
  1414  0095                     	;# 
  1415  0096                     	;# 
  1416  0097                     	;# 
  1417  0099                     	;# 
  1418  009A                     	;# 
  1419  009B                     	;# 
  1420  009B                     	;# 
  1421  009C                     	;# 
  1422  009D                     	;# 
  1423  009E                     	;# 
  1424  010C                     	;# 
  1425  010D                     	;# 
  1426  010E                     	;# 
  1427  0116                     	;# 
  1428  0117                     	;# 
  1429  011D                     	;# 
  1430  018C                     	;# 
  1431  018D                     	;# 
  1432  018E                     	;# 
  1433  0191                     	;# 
  1434  0191                     	;# 
  1435  0192                     	;# 
  1436  0193                     	;# 
  1437  0193                     	;# 
  1438  0194                     	;# 
  1439  0195                     	;# 
  1440  0196                     	;# 
  1441  0197                     	;# 
  1442  0199                     	;# 
  1443  019A                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019B                     	;# 
  1448  019C                     	;# 
  1449  019C                     	;# 
  1450  019D                     	;# 
  1451  019E                     	;# 
  1452  019F                     	;# 
  1453  020D                     	;# 
  1454  0210                     	;# 
  1455  0211                     	;# 
  1456  0211                     	;# 
  1457  0212                     	;# 
  1458  0212                     	;# 
  1459  0213                     	;# 
  1460  0213                     	;# 
  1461  0214                     	;# 
  1462  0214                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0215                     	;# 
  1466  0216                     	;# 
  1467  0216                     	;# 
  1468  0217                     	;# 
  1469  0217                     	;# 
  1470  0291                     	;# 
  1471  0291                     	;# 
  1472  0292                     	;# 
  1473  0293                     	;# 
  1474  0298                     	;# 
  1475  0298                     	;# 
  1476  0299                     	;# 
  1477  029A                     	;# 
  1478  0394                     	;# 
  1479  0395                     	;# 
  1480  0396                     	;# 
  1481  0FE4                     	;# 
  1482  0FE5                     	;# 
  1483  0FE6                     	;# 
  1484  0FE7                     	;# 
  1485  0FE8                     	;# 
  1486  0FE9                     	;# 
  1487  0FEA                     	;# 
  1488  0FEB                     	;# 
  1489  0FED                     	;# 
  1490  0FEE                     	;# 
  1491  0FEF                     	;# 
  1492  0000                     	;# 
  1493  0001                     	;# 
  1494  0002                     	;# 
  1495  0003                     	;# 
  1496  0004                     	;# 
  1497  0005                     	;# 
  1498  0006                     	;# 
  1499  0007                     	;# 
  1500  0008                     	;# 
  1501  0009                     	;# 
  1502  000A                     	;# 
  1503  000B                     	;# 
  1504  000C                     	;# 
  1505  000D                     	;# 
  1506  000E                     	;# 
  1507  0010                     	;# 
  1508  0011                     	;# 
  1509  0012                     	;# 
  1510  0015                     	;# 
  1511  0016                     	;# 
  1512  0016                     	;# 
  1513  0017                     	;# 
  1514  0018                     	;# 
  1515  0019                     	;# 
  1516  001A                     	;# 
  1517  001B                     	;# 
  1518  001C                     	;# 
  1519  008C                     	;# 
  1520  008D                     	;# 
  1521  008E                     	;# 
  1522  0090                     	;# 
  1523  0091                     	;# 
  1524  0092                     	;# 
  1525  0095                     	;# 
  1526  0096                     	;# 
  1527  0097                     	;# 
  1528  0099                     	;# 
  1529  009A                     	;# 
  1530  009B                     	;# 
  1531  009B                     	;# 
  1532  009C                     	;# 
  1533  009D                     	;# 
  1534  009E                     	;# 
  1535  010C                     	;# 
  1536  010D                     	;# 
  1537  010E                     	;# 
  1538  0116                     	;# 
  1539  0117                     	;# 
  1540  011D                     	;# 
  1541  018C                     	;# 
  1542  018D                     	;# 
  1543  018E                     	;# 
  1544  0191                     	;# 
  1545  0191                     	;# 
  1546  0192                     	;# 
  1547  0193                     	;# 
  1548  0193                     	;# 
  1549  0194                     	;# 
  1550  0195                     	;# 
  1551  0196                     	;# 
  1552  0197                     	;# 
  1553  0199                     	;# 
  1554  019A                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019B                     	;# 
  1559  019C                     	;# 
  1560  019C                     	;# 
  1561  019D                     	;# 
  1562  019E                     	;# 
  1563  019F                     	;# 
  1564  020D                     	;# 
  1565  0210                     	;# 
  1566  0211                     	;# 
  1567  0211                     	;# 
  1568  0212                     	;# 
  1569  0212                     	;# 
  1570  0213                     	;# 
  1571  0213                     	;# 
  1572  0214                     	;# 
  1573  0214                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0215                     	;# 
  1577  0216                     	;# 
  1578  0216                     	;# 
  1579  0217                     	;# 
  1580  0217                     	;# 
  1581  0291                     	;# 
  1582  0291                     	;# 
  1583  0292                     	;# 
  1584  0293                     	;# 
  1585  0298                     	;# 
  1586  0298                     	;# 
  1587  0299                     	;# 
  1588  029A                     	;# 
  1589  0394                     	;# 
  1590  0395                     	;# 
  1591  0396                     	;# 
  1592  0FE4                     	;# 
  1593  0FE5                     	;# 
  1594  0FE6                     	;# 
  1595  0FE7                     	;# 
  1596  0FE8                     	;# 
  1597  0FE9                     	;# 
  1598  0FEA                     	;# 
  1599  0FEB                     	;# 
  1600  0FED                     	;# 
  1601  0FEE                     	;# 
  1602  0FEF                     	;# 
  1603  0000                     	;# 
  1604  0001                     	;# 
  1605  0002                     	;# 
  1606  0003                     	;# 
  1607  0004                     	;# 
  1608  0005                     	;# 
  1609  0006                     	;# 
  1610  0007                     	;# 
  1611  0008                     	;# 
  1612  0009                     	;# 
  1613  000A                     	;# 
  1614  000B                     	;# 
  1615  000C                     	;# 
  1616  000D                     	;# 
  1617  000E                     	;# 
  1618  0010                     	;# 
  1619  0011                     	;# 
  1620  0012                     	;# 
  1621  0015                     	;# 
  1622  0016                     	;# 
  1623  0016                     	;# 
  1624  0017                     	;# 
  1625  0018                     	;# 
  1626  0019                     	;# 
  1627  001A                     	;# 
  1628  001B                     	;# 
  1629  001C                     	;# 
  1630  008C                     	;# 
  1631  008D                     	;# 
  1632  008E                     	;# 
  1633  0090                     	;# 
  1634  0091                     	;# 
  1635  0092                     	;# 
  1636  0095                     	;# 
  1637  0096                     	;# 
  1638  0097                     	;# 
  1639  0099                     	;# 
  1640  009A                     	;# 
  1641  009B                     	;# 
  1642  009B                     	;# 
  1643  009C                     	;# 
  1644  009D                     	;# 
  1645  009E                     	;# 
  1646  010C                     	;# 
  1647  010D                     	;# 
  1648  010E                     	;# 
  1649  0116                     	;# 
  1650  0117                     	;# 
  1651  011D                     	;# 
  1652  018C                     	;# 
  1653  018D                     	;# 
  1654  018E                     	;# 
  1655  0191                     	;# 
  1656  0191                     	;# 
  1657  0192                     	;# 
  1658  0193                     	;# 
  1659  0193                     	;# 
  1660  0194                     	;# 
  1661  0195                     	;# 
  1662  0196                     	;# 
  1663  0197                     	;# 
  1664  0199                     	;# 
  1665  019A                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019B                     	;# 
  1670  019C                     	;# 
  1671  019C                     	;# 
  1672  019D                     	;# 
  1673  019E                     	;# 
  1674  019F                     	;# 
  1675  020D                     	;# 
  1676  0210                     	;# 
  1677  0211                     	;# 
  1678  0211                     	;# 
  1679  0212                     	;# 
  1680  0212                     	;# 
  1681  0213                     	;# 
  1682  0213                     	;# 
  1683  0214                     	;# 
  1684  0214                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0215                     	;# 
  1688  0216                     	;# 
  1689  0216                     	;# 
  1690  0217                     	;# 
  1691  0217                     	;# 
  1692  0291                     	;# 
  1693  0291                     	;# 
  1694  0292                     	;# 
  1695  0293                     	;# 
  1696  0298                     	;# 
  1697  0298                     	;# 
  1698  0299                     	;# 
  1699  029A                     	;# 
  1700  0394                     	;# 
  1701  0395                     	;# 
  1702  0396                     	;# 
  1703  0FE4                     	;# 
  1704  0FE5                     	;# 
  1705  0FE6                     	;# 
  1706  0FE7                     	;# 
  1707  0FE8                     	;# 
  1708  0FE9                     	;# 
  1709  0FEA                     	;# 
  1710  0FEB                     	;# 
  1711  0FED                     	;# 
  1712  0FEE                     	;# 
  1713  0FEF                     	;# 
  1714  0000                     	;# 
  1715  0001                     	;# 
  1716  0002                     	;# 
  1717  0003                     	;# 
  1718  0004                     	;# 
  1719  0005                     	;# 
  1720  0006                     	;# 
  1721  0007                     	;# 
  1722  0008                     	;# 
  1723  0009                     	;# 
  1724  000A                     	;# 
  1725  000B                     	;# 
  1726  000C                     	;# 
  1727  000D                     	;# 
  1728  000E                     	;# 
  1729  0010                     	;# 
  1730  0011                     	;# 
  1731  0012                     	;# 
  1732  0015                     	;# 
  1733  0016                     	;# 
  1734  0016                     	;# 
  1735  0017                     	;# 
  1736  0018                     	;# 
  1737  0019                     	;# 
  1738  001A                     	;# 
  1739  001B                     	;# 
  1740  001C                     	;# 
  1741  008C                     	;# 
  1742  008D                     	;# 
  1743  008E                     	;# 
  1744  0090                     	;# 
  1745  0091                     	;# 
  1746  0092                     	;# 
  1747  0095                     	;# 
  1748  0096                     	;# 
  1749  0097                     	;# 
  1750  0099                     	;# 
  1751  009A                     	;# 
  1752  009B                     	;# 
  1753  009B                     	;# 
  1754  009C                     	;# 
  1755  009D                     	;# 
  1756  009E                     	;# 
  1757  010C                     	;# 
  1758  010D                     	;# 
  1759  010E                     	;# 
  1760  0116                     	;# 
  1761  0117                     	;# 
  1762  011D                     	;# 
  1763  018C                     	;# 
  1764  018D                     	;# 
  1765  018E                     	;# 
  1766  0191                     	;# 
  1767  0191                     	;# 
  1768  0192                     	;# 
  1769  0193                     	;# 
  1770  0193                     	;# 
  1771  0194                     	;# 
  1772  0195                     	;# 
  1773  0196                     	;# 
  1774  0197                     	;# 
  1775  0199                     	;# 
  1776  019A                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019B                     	;# 
  1781  019C                     	;# 
  1782  019C                     	;# 
  1783  019D                     	;# 
  1784  019E                     	;# 
  1785  019F                     	;# 
  1786  020D                     	;# 
  1787  0210                     	;# 
  1788  0211                     	;# 
  1789  0211                     	;# 
  1790  0212                     	;# 
  1791  0212                     	;# 
  1792  0213                     	;# 
  1793  0213                     	;# 
  1794  0214                     	;# 
  1795  0214                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0215                     	;# 
  1799  0216                     	;# 
  1800  0216                     	;# 
  1801  0217                     	;# 
  1802  0217                     	;# 
  1803  0291                     	;# 
  1804  0291                     	;# 
  1805  0292                     	;# 
  1806  0293                     	;# 
  1807  0298                     	;# 
  1808  0298                     	;# 
  1809  0299                     	;# 
  1810  029A                     	;# 
  1811  0394                     	;# 
  1812  0395                     	;# 
  1813  0396                     	;# 
  1814  0FE4                     	;# 
  1815  0FE5                     	;# 
  1816  0FE6                     	;# 
  1817  0FE7                     	;# 
  1818  0FE8                     	;# 
  1819  0FE9                     	;# 
  1820  0FEA                     	;# 
  1821  0FEB                     	;# 
  1822  0FED                     	;# 
  1823  0FEE                     	;# 
  1824  0FEF                     	;# 
  1825  0000                     	;# 
  1826  0001                     	;# 
  1827  0002                     	;# 
  1828  0003                     	;# 
  1829  0004                     	;# 
  1830  0005                     	;# 
  1831  0006                     	;# 
  1832  0007                     	;# 
  1833  0008                     	;# 
  1834  0009                     	;# 
  1835  000A                     	;# 
  1836  000B                     	;# 
  1837  000C                     	;# 
  1838  000D                     	;# 
  1839  000E                     	;# 
  1840  0010                     	;# 
  1841  0011                     	;# 
  1842  0012                     	;# 
  1843  0015                     	;# 
  1844  0016                     	;# 
  1845  0016                     	;# 
  1846  0017                     	;# 
  1847  0018                     	;# 
  1848  0019                     	;# 
  1849  001A                     	;# 
  1850  001B                     	;# 
  1851  001C                     	;# 
  1852  008C                     	;# 
  1853  008D                     	;# 
  1854  008E                     	;# 
  1855  0090                     	;# 
  1856  0091                     	;# 
  1857  0092                     	;# 
  1858  0095                     	;# 
  1859  0096                     	;# 
  1860  0097                     	;# 
  1861  0099                     	;# 
  1862  009A                     	;# 
  1863  009B                     	;# 
  1864  009B                     	;# 
  1865  009C                     	;# 
  1866  009D                     	;# 
  1867  009E                     	;# 
  1868  010C                     	;# 
  1869  010D                     	;# 
  1870  010E                     	;# 
  1871  0116                     	;# 
  1872  0117                     	;# 
  1873  011D                     	;# 
  1874  018C                     	;# 
  1875  018D                     	;# 
  1876  018E                     	;# 
  1877  0191                     	;# 
  1878  0191                     	;# 
  1879  0192                     	;# 
  1880  0193                     	;# 
  1881  0193                     	;# 
  1882  0194                     	;# 
  1883  0195                     	;# 
  1884  0196                     	;# 
  1885  0197                     	;# 
  1886  0199                     	;# 
  1887  019A                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019B                     	;# 
  1892  019C                     	;# 
  1893  019C                     	;# 
  1894  019D                     	;# 
  1895  019E                     	;# 
  1896  019F                     	;# 
  1897  020D                     	;# 
  1898  0210                     	;# 
  1899  0211                     	;# 
  1900  0211                     	;# 
  1901  0212                     	;# 
  1902  0212                     	;# 
  1903  0213                     	;# 
  1904  0213                     	;# 
  1905  0214                     	;# 
  1906  0214                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0215                     	;# 
  1910  0216                     	;# 
  1911  0216                     	;# 
  1912  0217                     	;# 
  1913  0217                     	;# 
  1914  0291                     	;# 
  1915  0291                     	;# 
  1916  0292                     	;# 
  1917  0293                     	;# 
  1918  0298                     	;# 
  1919  0298                     	;# 
  1920  0299                     	;# 
  1921  029A                     	;# 
  1922  0394                     	;# 
  1923  0395                     	;# 
  1924  0396                     	;# 
  1925  0FE4                     	;# 
  1926  0FE5                     	;# 
  1927  0FE6                     	;# 
  1928  0FE7                     	;# 
  1929  0FE8                     	;# 
  1930  0FE9                     	;# 
  1931  0FEA                     	;# 
  1932  0FEB                     	;# 
  1933  0FED                     	;# 
  1934  0FEE                     	;# 
  1935  0FEF                     	;# 
  1936  0000                     	;# 
  1937  0001                     	;# 
  1938  0002                     	;# 
  1939  0003                     	;# 
  1940  0004                     	;# 
  1941  0005                     	;# 
  1942  0006                     	;# 
  1943  0007                     	;# 
  1944  0008                     	;# 
  1945  0009                     	;# 
  1946  000A                     	;# 
  1947  000B                     	;# 
  1948  000C                     	;# 
  1949  000D                     	;# 
  1950  000E                     	;# 
  1951  0010                     	;# 
  1952  0011                     	;# 
  1953  0012                     	;# 
  1954  0015                     	;# 
  1955  0016                     	;# 
  1956  0016                     	;# 
  1957  0017                     	;# 
  1958  0018                     	;# 
  1959  0019                     	;# 
  1960  001A                     	;# 
  1961  001B                     	;# 
  1962  001C                     	;# 
  1963  008C                     	;# 
  1964  008D                     	;# 
  1965  008E                     	;# 
  1966  0090                     	;# 
  1967  0091                     	;# 
  1968  0092                     	;# 
  1969  0095                     	;# 
  1970  0096                     	;# 
  1971  0097                     	;# 
  1972  0099                     	;# 
  1973  009A                     	;# 
  1974  009B                     	;# 
  1975  009B                     	;# 
  1976  009C                     	;# 
  1977  009D                     	;# 
  1978  009E                     	;# 
  1979  010C                     	;# 
  1980  010D                     	;# 
  1981  010E                     	;# 
  1982  0116                     	;# 
  1983  0117                     	;# 
  1984  011D                     	;# 
  1985  018C                     	;# 
  1986  018D                     	;# 
  1987  018E                     	;# 
  1988  0191                     	;# 
  1989  0191                     	;# 
  1990  0192                     	;# 
  1991  0193                     	;# 
  1992  0193                     	;# 
  1993  0194                     	;# 
  1994  0195                     	;# 
  1995  0196                     	;# 
  1996  0197                     	;# 
  1997  0199                     	;# 
  1998  019A                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019B                     	;# 
  2003  019C                     	;# 
  2004  019C                     	;# 
  2005  019D                     	;# 
  2006  019E                     	;# 
  2007  019F                     	;# 
  2008  020D                     	;# 
  2009  0210                     	;# 
  2010  0211                     	;# 
  2011  0211                     	;# 
  2012  0212                     	;# 
  2013  0212                     	;# 
  2014  0213                     	;# 
  2015  0213                     	;# 
  2016  0214                     	;# 
  2017  0214                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0215                     	;# 
  2021  0216                     	;# 
  2022  0216                     	;# 
  2023  0217                     	;# 
  2024  0217                     	;# 
  2025  0291                     	;# 
  2026  0291                     	;# 
  2027  0292                     	;# 
  2028  0293                     	;# 
  2029  0298                     	;# 
  2030  0298                     	;# 
  2031  0299                     	;# 
  2032  029A                     	;# 
  2033  0394                     	;# 
  2034  0395                     	;# 
  2035  0396                     	;# 
  2036  0FE4                     	;# 
  2037  0FE5                     	;# 
  2038  0FE6                     	;# 
  2039  0FE7                     	;# 
  2040  0FE8                     	;# 
  2041  0FE9                     	;# 
  2042  0FEA                     	;# 
  2043  0FEB                     	;# 
  2044  0FED                     	;# 
  2045  0FEE                     	;# 
  2046  0FEF                     	;# 
  2047  0000                     	;# 
  2048  0001                     	;# 
  2049  0002                     	;# 
  2050  0003                     	;# 
  2051  0004                     	;# 
  2052  0005                     	;# 
  2053  0006                     	;# 
  2054  0007                     	;# 
  2055  0008                     	;# 
  2056  0009                     	;# 
  2057  000A                     	;# 
  2058  000B                     	;# 
  2059  000C                     	;# 
  2060  000D                     	;# 
  2061  000E                     	;# 
  2062  0010                     	;# 
  2063  0011                     	;# 
  2064  0012                     	;# 
  2065  0015                     	;# 
  2066  0016                     	;# 
  2067  0016                     	;# 
  2068  0017                     	;# 
  2069  0018                     	;# 
  2070  0019                     	;# 
  2071  001A                     	;# 
  2072  001B                     	;# 
  2073  001C                     	;# 
  2074  008C                     	;# 
  2075  008D                     	;# 
  2076  008E                     	;# 
  2077  0090                     	;# 
  2078  0091                     	;# 
  2079  0092                     	;# 
  2080  0095                     	;# 
  2081  0096                     	;# 
  2082  0097                     	;# 
  2083  0099                     	;# 
  2084  009A                     	;# 
  2085  009B                     	;# 
  2086  009B                     	;# 
  2087  009C                     	;# 
  2088  009D                     	;# 
  2089  009E                     	;# 
  2090  010C                     	;# 
  2091  010D                     	;# 
  2092  010E                     	;# 
  2093  0116                     	;# 
  2094  0117                     	;# 
  2095  011D                     	;# 
  2096  018C                     	;# 
  2097  018D                     	;# 
  2098  018E                     	;# 
  2099  0191                     	;# 
  2100  0191                     	;# 
  2101  0192                     	;# 
  2102  0193                     	;# 
  2103  0193                     	;# 
  2104  0194                     	;# 
  2105  0195                     	;# 
  2106  0196                     	;# 
  2107  0197                     	;# 
  2108  0199                     	;# 
  2109  019A                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019B                     	;# 
  2114  019C                     	;# 
  2115  019C                     	;# 
  2116  019D                     	;# 
  2117  019E                     	;# 
  2118  019F                     	;# 
  2119  020D                     	;# 
  2120  0210                     	;# 
  2121  0211                     	;# 
  2122  0211                     	;# 
  2123  0212                     	;# 
  2124  0212                     	;# 
  2125  0213                     	;# 
  2126  0213                     	;# 
  2127  0214                     	;# 
  2128  0214                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0215                     	;# 
  2132  0216                     	;# 
  2133  0216                     	;# 
  2134  0217                     	;# 
  2135  0217                     	;# 
  2136  0291                     	;# 
  2137  0291                     	;# 
  2138  0292                     	;# 
  2139  0293                     	;# 
  2140  0298                     	;# 
  2141  0298                     	;# 
  2142  0299                     	;# 
  2143  029A                     	;# 
  2144  0394                     	;# 
  2145  0395                     	;# 
  2146  0396                     	;# 
  2147  0FE4                     	;# 
  2148  0FE5                     	;# 
  2149  0FE6                     	;# 
  2150  0FE7                     	;# 
  2151  0FE8                     	;# 
  2152  0FE9                     	;# 
  2153  0FEA                     	;# 
  2154  0FEB                     	;# 
  2155  0FED                     	;# 
  2156  0FEE                     	;# 
  2157  0FEF                     	;# 
  2158                           
  2159                           	psect	idataBANK4
  2160  10DB                     __pidataBANK4:	
  2161                           
  2162                           ;initializer for __product
  2163  10DB  3463               	retlw	99
  2164  10DC  3402               	retlw	2
  2165  10DD  3400               	retlw	0
  2166  10DE  3400               	retlw	0
  2167  10DF  3400               	retlw	0
  2168  10E0  3400               	retlw	0
  2169  10E1  3400               	retlw	0
  2170  10E2  3400               	retlw	0
  2171  10E3  3400               	retlw	0
  2172  10E4  3400               	retlw	0
  2173  10E5  3400               	retlw	0
  2174  10E6  3400               	retlw	0
  2175  10E7  34FF               	retlw	255
  2176  10E8  34FF               	retlw	255
  2177  10E9  34FF               	retlw	255
  2178  10EA  3400               	retlw	0
  2179  10EB  3400               	retlw	0
  2180  10EC  3400               	retlw	0
  2181  10ED  3400               	retlw	0
  2182  10EE  3400               	retlw	0
  2183  10EF  3400               	retlw	0
  2184  10F0  3400               	retlw	0
  2185  10F1  3400               	retlw	0
  2186  10F2  3400               	retlw	0
  2187  10F3  3400               	retlw	0
  2188  10F4  3400               	retlw	0
  2189  10F5  3400               	retlw	0
  2190  10F6  3400               	retlw	0
  2191  10F7  3400               	retlw	0
  2192  10F8  3400               	retlw	0
  2193  10F9  3400               	retlw	0
  2194  10FA  3400               	retlw	0
  2195                           
  2196                           	psect	stringtext
  2197  1000                     __pstringtext:	
  2198  1000                     _CC2500_registers_address:	
  2199  1000  3403               	retlw	3
  2200  1001  3416               	retlw	22
  2201  1002  3417               	retlw	23
  2202  1003  341E               	retlw	30
  2203  1004  341F               	retlw	31
  2204  1005  3420               	retlw	32
  2205  1006  342A               	retlw	42
  2206  1007  342B               	retlw	43
  2207  1008  340B               	retlw	11
  2208  1009  340C               	retlw	12
  2209  100A  340D               	retlw	13
  2210  100B  340E               	retlw	14
  2211  100C  340F               	retlw	15
  2212  100D  3410               	retlw	16
  2213  100E  3411               	retlw	17
  2214  100F  3412               	retlw	18
  2215  1010  3413               	retlw	19
  2216  1011  3414               	retlw	20
  2217  1012  340A               	retlw	10
  2218  1013  3415               	retlw	21
  2219  1014  3421               	retlw	33
  2220  1015  3422               	retlw	34
  2221  1016  3418               	retlw	24
  2222  1017  3419               	retlw	25
  2223  1018  341A               	retlw	26
  2224  1019  341B               	retlw	27
  2225  101A  341C               	retlw	28
  2226  101B  341D               	retlw	29
  2227  101C  3423               	retlw	35
  2228  101D  3424               	retlw	36
  2229  101E  3425               	retlw	37
  2230  101F  3426               	retlw	38
  2231  1020  3429               	retlw	41
  2232  1021  342C               	retlw	44
  2233  1022  342D               	retlw	45
  2234  1023  342E               	retlw	46
  2235  1024  3400               	retlw	0
  2236  1025  3401               	retlw	1
  2237  1026  3402               	retlw	2
  2238  1027  3407               	retlw	7
  2239  1028  3408               	retlw	8
  2240  1029  3409               	retlw	9
  2241  102A  3406               	retlw	6
  2242  102B  3404               	retlw	4
  2243  102C  3405               	retlw	5
  2244  102D  3427               	retlw	39
  2245  102E  3428               	retlw	40
  2246  102F                     __end_of_CC2500_registers_address:	
  2247  102F                     _CC2500_rfSettings:	
  2248  102F  3407               	retlw	7
  2249  1030  3407               	retlw	7
  2250  1031  3430               	retlw	48
  2251  1032  3487               	retlw	135
  2252  1033  346B               	retlw	107
  2253  1034  34F8               	retlw	248
  2254  1035  347F               	retlw	127
  2255  1036  343F               	retlw	63
  2256  1037  3409               	retlw	9
  2257  1038  3400               	retlw	0
  2258  1039  345C               	retlw	92
  2259  103A  34A7               	retlw	167
  2260  103B  3462               	retlw	98
  2261  103C  3486               	retlw	134
  2262  103D  3483               	retlw	131
  2263  103E  3403               	retlw	3
  2264  103F  3422               	retlw	34
  2265  1040  34F8               	retlw	248
  2266  1041  3400               	retlw	0
  2267  1042  3444               	retlw	68
  2268  1043  34B6               	retlw	182
  2269  1044  3410               	retlw	16
  2270  1045  3418               	retlw	24
  2271  1046  341D               	retlw	29
  2272  1047  341C               	retlw	28
  2273  1048  34C7               	retlw	199
  2274  1049  3400               	retlw	0
  2275  104A  34B2               	retlw	178
  2276  104B  34EA               	retlw	234
  2277  104C  340A               	retlw	10
  2278  104D  3400               	retlw	0
  2279  104E  3411               	retlw	17
  2280  104F  3459               	retlw	89
  2281  1050  3488               	retlw	136
  2282  1051  3431               	retlw	49
  2283  1052  340B               	retlw	11
  2284  1053  342F               	retlw	47
  2285  1054  342E               	retlw	46
  2286  1055  3406               	retlw	6
  2287  1056  3404               	retlw	4
  2288  1057  3405               	retlw	5
  2289  1058  3400               	retlw	0
  2290  1059  3430               	retlw	48
  2291  105A  34D3               	retlw	211
  2292  105B  3491               	retlw	145
  2293  105C  3441               	retlw	65
  2294  105D  3400               	retlw	0
  2295  105E                     __end_of_CC2500_rfSettings:	
  2296  105E                     _CC2500_patable_vaule:	
  2297  105E  34FE               	retlw	254
  2298  105F  34FE               	retlw	254
  2299  1060  34FE               	retlw	254
  2300  1061  34FE               	retlw	254
  2301  1062  34FE               	retlw	254
  2302  1063  34FE               	retlw	254
  2303  1064  34FE               	retlw	254
  2304  1065  34FE               	retlw	254
  2305  1066                     __end_of_CC2500_patable_vaule:	
  2306                           
  2307                           	psect	nvBANK0
  2308  006E                     __pnvBANK0:	
  2309  006E                     _product:	
  2310  006E                     	ds	1
  2311  000C                     _PORTA	set	12
  2312  000D                     _PORTB	set	13
  2313  000E                     _PORTC	set	14
  2314  0018                     _T1CON	set	24
  2315  0017                     _TMR1H	set	23
  2316  0016                     _TMR1L	set	22
  2317  005F                     _GIE	set	95
  2318  005B                     _IOCIE	set	91
  2319  0058                     _IOCIF	set	88
  2320  005E                     _PEIE	set	94
  2321  0060                     _RA0	set	96
  2322  0063                     _RA3	set	99
  2323  0064                     _RA4	set	100
  2324  0066                     _RA6	set	102
  2325  0067                     _RA7	set	103
  2326  0068                     _RB0	set	104
  2327  0069                     _RB1	set	105
  2328  006A                     _RB2	set	106
  2329  006B                     _RB3	set	107
  2330  006C                     _RB4	set	108
  2331  006D                     _RB5	set	109
  2332  0070                     _RC0	set	112
  2333  0071                     _RC1	set	113
  2334  0072                     _RC2	set	114
  2335  0074                     _RC4	set	116
  2336  0075                     _RC5	set	117
  2337  0077                     _RC7	set	119
  2338  0088                     _TMR1IF	set	136
  2339  009D                     _ADCON0	set	157
  2340  009E                     _ADCON1	set	158
  2341  009C                     _ADRESH	set	156
  2342  009B                     _ADRESL	set	155
  2343  0099                     _OSCCON	set	153
  2344  008C                     _TRISA	set	140
  2345  008D                     _TRISB	set	141
  2346  008E                     _TRISC	set	142
  2347  0097                     _WDTCON	set	151
  2348  04E9                     _GO_nDONE	set	1257
  2349  0488                     _TMR1IE	set	1160
  2350  0117                     _FVRCON	set	279
  2351  010C                     _LATA	set	268
  2352  010D                     _LATB	set	269
  2353  010E                     _LATC	set	270
  2354  018C                     _ANSELA	set	396
  2355  018D                     _ANSELB	set	397
  2356  018E                     _ANSELC	set	398
  2357  0192                     _PMADRH	set	402
  2358  0191                     _PMADRL	set	401
  2359  0196                     _PMCON2	set	406
  2360  0194                     _PMDATH	set	404
  2361  0193                     _PMDATL	set	403
  2362  0CAE                     _CFGS	set	3246
  2363  0CAC                     _FREE	set	3244
  2364  0CAD                     _LWLO	set	3245
  2365  0CA8                     _RD	set	3240
  2366  0CA9                     _WR	set	3241
  2367  0CAA                     _WREN	set	3242
  2368  020D                     _WPUB	set	525
  2369  1069                     _WPUB1	set	4201
  2370  106A                     _WPUB2	set	4202
  2371  0396                     _IOCBF	set	918
  2372  0395                     _IOCBN	set	917
  2373  0394                     _IOCBP	set	916
  2374  1CB2                     _IOCBF2	set	7346
  2375                           
  2376                           ; #config settings
  2377  0000                     
  2378                           	psect	cinit
  2379  0022                     start_initialization:	
  2380  0022                     __initialization:	
  2381                           
  2382                           ; Clear objects allocated to BITCOMMON
  2383  0022  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2384                           
  2385                           ; Clear objects allocated to COMMON
  2386  0023  01F9               	clrf	__pbssCOMMON& (0+127)
  2387  0024  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  2388                           
  2389                           ; Clear objects allocated to BANK1
  2390  0025  30A0               	movlw	low __pbssBANK1
  2391  0026  0084               	movwf	4
  2392  0027  3000               	movlw	high __pbssBANK1
  2393  0028  0085               	movwf	5
  2394  0029  3050               	movlw	80
  2395  002A  319C  2430  3180   	fcall	clear_ram0
  2396                           
  2397                           ; Clear objects allocated to BANK2
  2398  002D  3020               	movlw	low __pbssBANK2
  2399  002E  0084               	movwf	4
  2400  002F  3001               	movlw	high __pbssBANK2
  2401  0030  0085               	movwf	5
  2402  0031  304D               	movlw	77
  2403  0032  319C  2430  3180   	fcall	clear_ram0
  2404                           
  2405                           ; Clear objects allocated to BANK3
  2406  0035  30A0               	movlw	low __pbssBANK3
  2407  0036  0084               	movwf	4
  2408  0037  3001               	movlw	high __pbssBANK3
  2409  0038  0085               	movwf	5
  2410  0039  3047               	movlw	71
  2411  003A  319C  2430  3180   	fcall	clear_ram0
  2412                           
  2413                           ; Clear objects allocated to BANK4
  2414  003D  3020               	movlw	low __pbssBANK4
  2415  003E  0084               	movwf	4
  2416  003F  3002               	movlw	high __pbssBANK4
  2417  0040  0085               	movwf	5
  2418  0041  3025               	movlw	37
  2419  0042  319C  2430  3180   	fcall	clear_ram0
  2420                           
  2421                           ; Initialize objects allocated to BANK4
  2422  0045  30DB               	movlw	low __pidataBANK4
  2423  0046  0084               	movwf	4
  2424  0047  3090               	movlw	(high __pidataBANK4)| (0+128)
  2425  0048  0085               	movwf	5
  2426  0049  3045               	movlw	low __pdataBANK4
  2427  004A  0086               	movwf	6
  2428  004B  3002               	movlw	high __pdataBANK4
  2429  004C  0087               	movwf	7
  2430  004D  3020               	movlw	32
  2431  004E  319C  242A         	fcall	init_ram
  2432  0050                     end_of_initialization:	
  2433                           ;End of C runtime variable initialization code
  2434                           
  2435  0050                     __end_of__initialization:	
  2436  0050  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2437  0051  0020               	movlb	0
  2438  0052  3188  28A7         	ljmp	_main	;jump to C main() function
  2439                           
  2440                           	psect	bitbssCOMMON
  2441  03C0                     __pbitbssCOMMON:	
  2442  03C0                     _Receive_OK:	
  2443  03C0                     	ds	1
  2444  03C1                     _Transceive_OK:	
  2445  03C1                     	ds	1
  2446                           
  2447                           	psect	bssCOMMON
  2448  0079                     __pbssCOMMON:	
  2449  0079                     _DimmerLights:	
  2450  0079                     	ds	1
  2451  007A                     _Sw:	
  2452  007A                     	ds	1
  2453                           
  2454                           	psect	bssBANK1
  2455  00A0                     __pbssBANK1:	
  2456  00A0                     _RF1:	
  2457  00A0                     	ds	14
  2458  00AE                     _myMain:	
  2459  00AE                     	ds	14
  2460  00BC                     _Buz1:	
  2461  00BC                     	ds	12
  2462  00C8                     _Dimmer:	
  2463  00C8                     	ds	3
  2464  00CB                     _Timer1:	
  2465  00CB                     	ds	3
  2466  00CE                     _RF_Count:	
  2467  00CE                     	ds	2
  2468  00D0                     _WDT:	
  2469  00D0                     	ds	2
  2470  00D2                     _CRC:	
  2471  00D2                     	ds	1
  2472  00D3                     _DelayOff:	
  2473  00D3                     	ds	1
  2474  00D4                     _DimmerIntr:	
  2475  00D4                     	ds	1
  2476  00D5                     _LED:	
  2477  00D5                     	ds	1
  2478  00D6                     _RSSI:	
  2479  00D6                     	ds	1
  2480  00D7                     _Rx_Length:	
  2481  00D7                     	ds	1
  2482  00D8                     _SPI0Buffer:	
  2483  00D8                     	ds	1
  2484  00D9                     _SwDetect:	
  2485  00D9                     	ds	1
  2486  00DA                     _Tx_Length:	
  2487  00DA                     	ds	1
  2488  00DB                     _r_address:	
  2489  00DB                     	ds	1
  2490  00DC                     _r_data:	
  2491  00DC                     	ds	1
  2492  00DD                     _s_data:	
  2493  00DD                     	ds	1
  2494  00DE                     _Temp:	
  2495  00DE                     	ds	18
  2496                           
  2497                           	psect	bssBANK2
  2498  0120                     __pbssBANK2:	
  2499  0120                     _Load:	
  2500  0120                     	ds	46
  2501  014E                     _DimmerIntr1:	
  2502  014E                     	ds	7
  2503  0155                     _DimmerIntr2:	
  2504  0155                     	ds	7
  2505  015C                     _DlySw1:	
  2506  015C                     	ds	5
  2507  0161                     _VarErrLED:	
  2508  0161                     	ds	4
  2509  0165                     _VarLED1:	
  2510  0165                     	ds	4
  2511  0169                     _VarLED2:	
  2512  0169                     	ds	4
  2513                           
  2514                           	psect	bssBANK3
  2515  01A0                     __pbssBANK3:	
  2516  01A0                     _RF_Data:	
  2517  01A0                     	ds	30
  2518  01BE                     _DimmerLights1:	
  2519  01BE                     	ds	9
  2520  01C7                     _DimmerLights2:	
  2521  01C7                     	ds	9
  2522  01D0                     _Sw1:	
  2523  01D0                     	ds	9
  2524  01D9                     _Sw2:	
  2525  01D9                     	ds	9
  2526  01E2                     _DlySw2:	
  2527  01E2                     	ds	5
  2528                           
  2529                           	psect	bssBANK4
  2530  0220                     __pbssBANK4:	
  2531  0220                     _Memory:	
  2532  0220                     	ds	37
  2533                           
  2534                           	psect	dataBANK4
  2535  0245                     __pdataBANK4:	
  2536  0245                     __product:	
  2537  0245                     	ds	32
  2538                           
  2539                           	psect	clrtext
  2540  1C30                     clear_ram0:	
  2541                           ;	Called with FSR0 containing the base address, and
  2542                           ;	WREG with the size to clear
  2543                           
  2544  1C30  0064               	clrwdt	;clear the watchdog before getting into this loop
  2545  1C31                     clrloop0:	
  2546  1C31  0180               	clrf	0	;clear RAM location pointed to by FSR
  2547  1C32  3101               	addfsr 0,1
  2548  1C33  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2549  1C34  2C31               	goto	clrloop0	;have we reached the end yet?
  2550  1C35  3400               	retlw	0	;all done for this memory range, return
  2551                           
  2552                           	psect	inittext
  2553  1C2A                     init_ram:	
  2554  1C2A  00FE               	movwf	126
  2555  1C2B                     initloop:	
  2556  1C2B  0012               	moviw fsr0++
  2557  1C2C  001E               	movwi fsr1++
  2558  1C2D  0BFE               	decfsz	126,f
  2559  1C2E  2C2B               	goto	initloop
  2560  1C2F  3400               	retlw	0
  2561                           
  2562                           	psect	cstackBANK3
  2563  01E7                     __pcstackBANK3:	
  2564  01E7                     ?_main:	
  2565  01E7                     main@argc:	
  2566                           ; 2 bytes @ 0x0
  2567                           
  2568                           
  2569                           ; 2 bytes @ 0x0
  2570  01E7                     	ds	2
  2571  01E9                     main@argv:	
  2572                           
  2573                           ; 2 bytes @ 0x2
  2574  01E9                     	ds	2
  2575                           
  2576                           	psect	cstackCOMMON
  2577  0070                     __pcstackCOMMON:	
  2578  0070                     ?_CC2500_WriteCommand:	
  2579  0070                     ?_RF_Timeout_Counter:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_setRF_TimeoutCleared:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_CC2500_WriteByte:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_CC2500_ReadStatus:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_CC2500_ReadByte:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_CC2500_PowerRST:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_CC2500_InitSetREG:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_InitPATable:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_ClearTXFIFO:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_ClearRXFIFO:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_FrequencyCabr:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_CC2500_SIDLEMode:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_DlyOff_Initialization:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_DlyOff_Main:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_setDimmerLights_SwOn:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_setDimmerLights_SwOff:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_setDimmerLights_Initialization:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_setDimmerLights_Main:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_setDimmerLights_Line:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_setTxData:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setRF_TransceiveGO:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setLED_Initialization:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setLED_Main:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_Fosc_Set:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_IO_Set:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_TMR1_Set:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_ADC_Set:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_IOC_Set:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_WDT_Set:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_IOC_ISR:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_TMR1_ISR:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_Timeout_Counter:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_set_TimeoutCleared:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_Flash_Memory_Write:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Flash_Memory_Modify:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_WDT_Clearing:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_myMain_Initialization:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Temp_Initialization:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_Load_Initialization:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_Switch_Initialization:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_RF_Initialization:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_getLoad_AD:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_getTemp_AD:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_my_MainTimer:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Temp_Main:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_Load_Main:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_Switch_Main:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_RF_Main:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_Exception_Main:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_setLoad_AH_AL_Restore:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_setTemp_Initialization:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_setTemp_Main:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_setRF_Initialization:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setRF_Main:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_RF_RxDisable:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_getRxData:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_setLog_Code:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_setControl_Lights_Table:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_setRFSW_Control:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_setRFSW_AdjControl:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_setRF_DimmerValue:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_setSw_Initialization:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_setSw_Main:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_Buzzer_Initialization:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_Buzzer_Main:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_CC2500_TxData:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_CC2500_RxData:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_CC2500_PowerOnInitial:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_DelayOffPointSelect:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_DelayOff_Initialization:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_DelayOff_Main:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_DimmerIntr_Initialization:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_setDimmerIntr_IOC:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ??_setDimmerIntr_IOC:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_setDimmerIntr_TMR:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ??_setDimmerIntr_TMR:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_DimmerLights_SelectPointer:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_DimmerLights_Initialization:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_setDimmerLights_DimmingOn:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_DimmerLights_Main:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_LedPointSelect:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ?_LED_Initialization:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_LED_Main:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ?_Mcu_Initialization:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_ISR:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ?_Flash_Memory_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_Flash_Memory_Main:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ?_Flash_Memory_Unlock:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_Flash_Memory_Erasing:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_setMemory_Modify:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_setMemory_LoopSave:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_WDT_Main:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_setRF_Learn:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_TouchPower:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_SwPointSelect:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_getDimmerLights_Status:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_DelayTimejudge:	
  2868                           ; 1 bytes @ 0x0
  2869                           
  2870  0070                     ?_getLoad_OK:	
  2871                           ; 1 bytes @ 0x0
  2872                           
  2873  0070                     ?_getMain_All_Error_Status:	
  2874                           ; 1 bytes @ 0x0
  2875                           
  2876  0070                     ?_getMain_LightsStatus:	
  2877                           ; 1 bytes @ 0x0
  2878                           
  2879  0070                     ?_getDimmerLights_Allow_Condition:	
  2880                           ; 1 bytes @ 0x0
  2881                           
  2882  0070                     ?_setDimmerLights_PercentValue:	
  2883                           ; 1 bytes @ 0x0
  2884                           
  2885  0070                     ?_Flash_Memory_Read:	
  2886                           ; 1 bytes @ 0x0
  2887                           
  2888  0070                     ?_getRF_KeyStatus:	
  2889                           ; 1 bytes @ 0x0
  2890                           
  2891  0070                     ?_getSw_KeyStatus:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_getDelayOff_GO:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_getDimmerIntr_DimmingValue:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getDimmerLights_Line:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_getDimmer_LoadGO:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_getDimmer_Load_Status:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_getMain_Lights_Count:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     setDimmerLights_Initialization@lights:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918                           
  2919                           ; 1 bytes @ 0x0
  2920  0070                     	ds	1
  2921  0071                     setDimmerIntr_IOC@lights:	
  2922  0071                     setDimmerIntr_TMR@lights:	
  2923                           ; 1 bytes @ 0x1
  2924                           
  2925                           
  2926                           ; 1 bytes @ 0x1
  2927  0071                     	ds	1
  2928  0072                     ??_IOC_ISR:	
  2929  0072                     ??_TMR1_ISR:	
  2930                           ; 0 bytes @ 0x2
  2931                           
  2932  0072                     ??_ISR:	
  2933                           ; 0 bytes @ 0x2
  2934                           
  2935                           
  2936                           ; 0 bytes @ 0x2
  2937  0072                     	ds	1
  2938  0073                     ??_RF_Timeout_Counter:	
  2939  0073                     ??_setRF_TimeoutCleared:	
  2940                           ; 0 bytes @ 0x3
  2941                           
  2942  0073                     ??_CC2500_WriteByte:	
  2943                           ; 0 bytes @ 0x3
  2944                           
  2945  0073                     ??_CC2500_ReadByte:	
  2946                           ; 0 bytes @ 0x3
  2947                           
  2948  0073                     ?_DelayTime_1us:	
  2949                           ; 0 bytes @ 0x3
  2950                           
  2951  0073                     ??_setDimmerLights_Initialization:	
  2952                           ; 0 bytes @ 0x3
  2953                           
  2954  0073                     ??_getLoad_OK:	
  2955                           ; 0 bytes @ 0x3
  2956                           
  2957  0073                     ??_getMain_All_Error_Status:	
  2958                           ; 0 bytes @ 0x3
  2959                           
  2960  0073                     ??_getMain_LightsStatus:	
  2961                           ; 0 bytes @ 0x3
  2962                           
  2963  0073                     ??_setDimmerLights_Line:	
  2964                           ; 0 bytes @ 0x3
  2965                           
  2966  0073                     ??_setTxData:	
  2967                           ; 0 bytes @ 0x3
  2968                           
  2969  0073                     ??_setRF_TransceiveGO:	
  2970                           ; 0 bytes @ 0x3
  2971                           
  2972  0073                     ??_Fosc_Set:	
  2973                           ; 0 bytes @ 0x3
  2974                           
  2975  0073                     ??_IO_Set:	
  2976                           ; 0 bytes @ 0x3
  2977                           
  2978  0073                     ??_TMR1_Set:	
  2979                           ; 0 bytes @ 0x3
  2980                           
  2981  0073                     ??_ADC_Set:	
  2982                           ; 0 bytes @ 0x3
  2983                           
  2984  0073                     ??_IOC_Set:	
  2985                           ; 0 bytes @ 0x3
  2986                           
  2987  0073                     ??_WDT_Set:	
  2988                           ; 0 bytes @ 0x3
  2989                           
  2990  0073                     ??_Timeout_Counter:	
  2991                           ; 0 bytes @ 0x3
  2992                           
  2993  0073                     ??_set_TimeoutCleared:	
  2994                           ; 0 bytes @ 0x3
  2995                           
  2996  0073                     ??_Flash_Memory_Read:	
  2997                           ; 0 bytes @ 0x3
  2998                           
  2999  0073                     ?_setMemory_Data:	
  3000                           ; 0 bytes @ 0x3
  3001                           
  3002  0073                     ??_Flash_Memory_Write:	
  3003                           ; 0 bytes @ 0x3
  3004                           
  3005  0073                     ??_WDT_Clearing:	
  3006                           ; 0 bytes @ 0x3
  3007                           
  3008  0073                     ??_myMain_Initialization:	
  3009                           ; 0 bytes @ 0x3
  3010                           
  3011  0073                     ??_Temp_Initialization:	
  3012                           ; 0 bytes @ 0x3
  3013                           
  3014  0073                     ??_setLoad_AH_AL_Restore:	
  3015                           ; 0 bytes @ 0x3
  3016                           
  3017  0073                     ??_setTemp_Initialization:	
  3018                           ; 0 bytes @ 0x3
  3019                           
  3020  0073                     ??_setRF_Initialization:	
  3021                           ; 0 bytes @ 0x3
  3022                           
  3023  0073                     ??_getRF_KeyStatus:	
  3024                           ; 0 bytes @ 0x3
  3025                           
  3026  0073                     ??_getSw_KeyStatus:	
  3027                           ; 0 bytes @ 0x3
  3028                           
  3029  0073                     ??_Buzzer_Initialization:	
  3030                           ; 0 bytes @ 0x3
  3031                           
  3032  0073                     ??_Buzzer_Main:	
  3033                           ; 0 bytes @ 0x3
  3034                           
  3035  0073                     ??_DelayOffPointSelect:	
  3036                           ; 0 bytes @ 0x3
  3037                           
  3038  0073                     ??_DimmerIntr_Initialization:	
  3039                           ; 0 bytes @ 0x3
  3040                           
  3041  0073                     ?_setDimmerIntr_ControlStatus:	
  3042                           ; 0 bytes @ 0x3
  3043                           
  3044  0073                     ?_setDimmerIntr_DimmingValue:	
  3045                           ; 0 bytes @ 0x3
  3046                           
  3047  0073                     ??_getDimmerIntr_DimmingValue:	
  3048                           ; 0 bytes @ 0x3
  3049                           
  3050  0073                     ?_setDimmerIntr_Dimming_Sw:	
  3051                           ; 0 bytes @ 0x3
  3052                           
  3053  0073                     ?_setDimmerIntr_Dimming_RF:	
  3054                           ; 0 bytes @ 0x3
  3055                           
  3056  0073                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3057                           ; 0 bytes @ 0x3
  3058                           
  3059  0073                     ??_DimmerLights_SelectPointer:	
  3060                           ; 0 bytes @ 0x3
  3061                           
  3062  0073                     ??_getDimmerLights_Line:	
  3063                           ; 0 bytes @ 0x3
  3064                           
  3065  0073                     ??_getDimmer_LoadGO:	
  3066                           ; 0 bytes @ 0x3
  3067                           
  3068  0073                     ??_getDimmer_Load_Status:	
  3069                           ; 0 bytes @ 0x3
  3070                           
  3071  0073                     ??_LedPointSelect:	
  3072                           ; 0 bytes @ 0x3
  3073                           
  3074  0073                     ??_Flash_Memory_Unlock:	
  3075                           ; 0 bytes @ 0x3
  3076                           
  3077  0073                     ??_Flash_Memory_Erasing:	
  3078                           ; 0 bytes @ 0x3
  3079                           
  3080  0073                     ??_setMemory_Modify:	
  3081                           ; 0 bytes @ 0x3
  3082                           
  3083  0073                     ??_setMemory_LoopSave:	
  3084                           ; 0 bytes @ 0x3
  3085                           
  3086  0073                     ??_WDT_Main:	
  3087                           ; 0 bytes @ 0x3
  3088                           
  3089  0073                     ??_getMain_Lights_Count:	
  3090                           ; 0 bytes @ 0x3
  3091                           
  3092  0073                     ??_setRF_Learn:	
  3093                           ; 0 bytes @ 0x3
  3094                           
  3095  0073                     ??_TouchPower:	
  3096                           ; 0 bytes @ 0x3
  3097                           
  3098  0073                     ??_SwPointSelect:	
  3099                           ; 0 bytes @ 0x3
  3100                           
  3101  0073                     ?___bmul:	
  3102                           ; 0 bytes @ 0x3
  3103                           
  3104  0073                     ?_getBuz_GO:	
  3105                           ; 1 bytes @ 0x3
  3106                           
  3107  0073                     ?_getAD:	
  3108                           ; 2 bytes @ 0x3
  3109                           
  3110  0073                     ?___wmul:	
  3111                           ; 2 bytes @ 0x3
  3112                           
  3113  0073                     ?___awdiv:	
  3114                           ; 2 bytes @ 0x3
  3115                           
  3116  0073                     ?___lwdiv:	
  3117                           ; 2 bytes @ 0x3
  3118                           
  3119  0073                     ?___ftpack:	
  3120                           ; 2 bytes @ 0x3
  3121                           
  3122  0073                     setDimmerIntr_ControlStatus@command:	
  3123                           ; 3 bytes @ 0x3
  3124                           
  3125  0073                     setDimmerIntr_DimmingValue@value:	
  3126                           ; 1 bytes @ 0x3
  3127                           
  3128  0073                     setDimmerIntr_Dimming_Sw@command:	
  3129                           ; 1 bytes @ 0x3
  3130                           
  3131  0073                     setDimmerIntr_Dimming_RF@command:	
  3132                           ; 1 bytes @ 0x3
  3133                           
  3134  0073                     setDimmerLights_Line@lights:	
  3135                           ; 1 bytes @ 0x3
  3136                           
  3137  0073                     getDimmer_LoadGO@loadgo:	
  3138                           ; 1 bytes @ 0x3
  3139                           
  3140  0073                     getDimmer_Load_Status@status:	
  3141                           ; 1 bytes @ 0x3
  3142                           
  3143  0073                     getAD@adcon1:	
  3144                           ; 1 bytes @ 0x3
  3145                           
  3146  0073                     setMemory_Data@data:	
  3147                           ; 1 bytes @ 0x3
  3148                           
  3149  0073                     getMain_LightsStatus@status:	
  3150                           ; 1 bytes @ 0x3
  3151                           
  3152  0073                     getMain_Lights_Count@count:	
  3153                           ; 1 bytes @ 0x3
  3154                           
  3155  0073                     getLoad_OK@ok:	
  3156                           ; 1 bytes @ 0x3
  3157                           
  3158  0073                     ___bmul@multiplicand:	
  3159                           ; 1 bytes @ 0x3
  3160                           
  3161  0073                     DelayTime_1us@count:	
  3162                           ; 1 bytes @ 0x3
  3163                           
  3164  0073                     ___wmul@multiplier:	
  3165                           ; 2 bytes @ 0x3
  3166                           
  3167  0073                     ___awdiv@divisor:	
  3168                           ; 2 bytes @ 0x3
  3169                           
  3170  0073                     ___lwdiv@divisor:	
  3171                           ; 2 bytes @ 0x3
  3172                           
  3173  0073                     ___ftpack@arg:	
  3174                           ; 2 bytes @ 0x3
  3175                           
  3176                           
  3177                           ; 3 bytes @ 0x3
  3178  0073                     	ds	1
  3179  0074                     ??_getDimmerLights_Allow_Condition:	
  3180  0074                     ??_setMemory_Data:	
  3181                           ; 0 bytes @ 0x4
  3182                           
  3183  0074                     ??_RF_Initialization:	
  3184                           ; 0 bytes @ 0x4
  3185                           
  3186  0074                     ??_setDimmerIntr_ControlStatus:	
  3187                           ; 0 bytes @ 0x4
  3188                           
  3189  0074                     ??_setDimmerIntr_DimmingValue:	
  3190                           ; 0 bytes @ 0x4
  3191                           
  3192  0074                     ??_setDimmerIntr_Dimming_Sw:	
  3193                           ; 0 bytes @ 0x4
  3194                           
  3195  0074                     ??_setDimmerIntr_Dimming_RF:	
  3196                           ; 0 bytes @ 0x4
  3197                           
  3198  0074                     ??_DimmerLights_Initialization:	
  3199                           ; 0 bytes @ 0x4
  3200                           
  3201  0074                     ??_Mcu_Initialization:	
  3202                           ; 0 bytes @ 0x4
  3203                           
  3204  0074                     ??___bmul:	
  3205                           ; 0 bytes @ 0x4
  3206                           
  3207  0074                     CC2500_WriteByte@loop_a:	
  3208                           ; 0 bytes @ 0x4
  3209                           
  3210  0074                     CC2500_ReadByte@loop_b:	
  3211                           ; 1 bytes @ 0x4
  3212                           
  3213  0074                     DelayOffPointSelect@sw:	
  3214                           ; 1 bytes @ 0x4
  3215                           
  3216  0074                     getDimmerIntr_DimmingValue@value:	
  3217                           ; 1 bytes @ 0x4
  3218                           
  3219  0074                     _getAll_DimmerIntr_Dimming_Sw_RF$2117:	
  3220                           ; 1 bytes @ 0x4
  3221                           
  3222  0074                     DimmerLights_SelectPointer@lights:	
  3223                           ; 1 bytes @ 0x4
  3224                           
  3225  0074                     getDimmerLights_Line@line:	
  3226                           ; 1 bytes @ 0x4
  3227                           
  3228  0074                     LedPointSelect@led:	
  3229                           ; 1 bytes @ 0x4
  3230                           
  3231  0074                     Flash_Memory_Read@i:	
  3232                           ; 1 bytes @ 0x4
  3233                           
  3234  0074                     Flash_Memory_Write@i:	
  3235                           ; 1 bytes @ 0x4
  3236                           
  3237  0074                     setMemory_Modify@command:	
  3238                           ; 1 bytes @ 0x4
  3239                           
  3240  0074                     setMemory_LoopSave@command:	
  3241                           ; 1 bytes @ 0x4
  3242                           
  3243  0074                     getMain_Lights_Count@status1:	
  3244                           ; 1 bytes @ 0x4
  3245                           
  3246  0074                     setLoad_AH_AL_Restore@i:	
  3247                           ; 1 bytes @ 0x4
  3248                           
  3249  0074                     setRF_Learn@command:	
  3250                           ; 1 bytes @ 0x4
  3251                           
  3252  0074                     getRF_KeyStatus@key:	
  3253                           ; 1 bytes @ 0x4
  3254                           
  3255  0074                     setRF_TransceiveGO@command:	
  3256                           ; 1 bytes @ 0x4
  3257                           
  3258  0074                     SwPointSelect@sw:	
  3259                           ; 1 bytes @ 0x4
  3260                           
  3261  0074                     _getSw_KeyStatus$6137:	
  3262                           ; 1 bytes @ 0x4
  3263                           
  3264                           
  3265                           ; 1 bytes @ 0x4
  3266  0074                     	ds	1
  3267  0075                     ??_CC2500_WriteCommand:	
  3268  0075                     ??_CC2500_ReadStatus:	
  3269                           ; 0 bytes @ 0x5
  3270                           
  3271  0075                     ??_CC2500_PowerRST:	
  3272                           ; 0 bytes @ 0x5
  3273                           
  3274  0075                     ??_DelayTime_1us:	
  3275                           ; 0 bytes @ 0x5
  3276                           
  3277  0075                     ?_CC2500_WriteREG:	
  3278                           ; 0 bytes @ 0x5
  3279                           
  3280  0075                     ??_DlyOff_Initialization:	
  3281                           ; 0 bytes @ 0x5
  3282                           
  3283  0075                     ??_getDimmerLights_Status:	
  3284                           ; 0 bytes @ 0x5
  3285                           
  3286  0075                     ?_setLED:	
  3287                           ; 0 bytes @ 0x5
  3288                           
  3289  0075                     ??_setLED_Main:	
  3290                           ; 0 bytes @ 0x5
  3291                           
  3292  0075                     ??_Load_Initialization:	
  3293                           ; 0 bytes @ 0x5
  3294                           
  3295  0075                     ??_getBuz_GO:	
  3296                           ; 0 bytes @ 0x5
  3297                           
  3298  0075                     ??_getDelayOff_GO:	
  3299                           ; 0 bytes @ 0x5
  3300                           
  3301  0075                     ??_setDimmerLights_DimmingOn:	
  3302                           ; 0 bytes @ 0x5
  3303                           
  3304  0075                     CC2500_WriteREG@value:	
  3305                           ; 0 bytes @ 0x5
  3306                           
  3307  0075                     DlyOff_Initialization@sw:	
  3308                           ; 1 bytes @ 0x5
  3309                           
  3310  0075                     getDelayOff_GO@sw:	
  3311                           ; 1 bytes @ 0x5
  3312                           
  3313  0075                     setDimmerIntr_ControlStatus@lights:	
  3314                           ; 1 bytes @ 0x5
  3315                           
  3316  0075                     setDimmerIntr_DimmingValue@lights:	
  3317                           ; 1 bytes @ 0x5
  3318                           
  3319  0075                     getDimmerIntr_DimmingValue@lights:	
  3320                           ; 1 bytes @ 0x5
  3321                           
  3322  0075                     setDimmerIntr_Dimming_Sw@lights:	
  3323                           ; 1 bytes @ 0x5
  3324                           
  3325  0075                     setDimmerIntr_Dimming_RF@lights:	
  3326                           ; 1 bytes @ 0x5
  3327                           
  3328  0075                     _getAll_DimmerIntr_Dimming_Sw_RF$2118:	
  3329                           ; 1 bytes @ 0x5
  3330                           
  3331  0075                     setDimmerLights_DimmingOn@sw:	
  3332                           ; 1 bytes @ 0x5
  3333                           
  3334  0075                     getDimmerLights_Status@lights:	
  3335                           ; 1 bytes @ 0x5
  3336                           
  3337  0075                     setLED@command:	
  3338                           ; 1 bytes @ 0x5
  3339                           
  3340  0075                     Flash_Memory_Read@address:	
  3341                           ; 1 bytes @ 0x5
  3342                           
  3343  0075                     setMemory_Data@address:	
  3344                           ; 1 bytes @ 0x5
  3345                           
  3346  0075                     getMain_Lights_Count@status2:	
  3347                           ; 1 bytes @ 0x5
  3348                           
  3349  0075                     _getRF_KeyStatus$5151:	
  3350                           ; 1 bytes @ 0x5
  3351                           
  3352  0075                     _getSw_KeyStatus$6138:	
  3353                           ; 1 bytes @ 0x5
  3354                           
  3355  0075                     ___bmul@product:	
  3356                           ; 1 bytes @ 0x5
  3357                           
  3358  0075                     ___wmul@multiplicand:	
  3359                           ; 1 bytes @ 0x5
  3360                           
  3361  0075                     ___awdiv@dividend:	
  3362                           ; 2 bytes @ 0x5
  3363                           
  3364  0075                     ___lwdiv@dividend:	
  3365                           ; 2 bytes @ 0x5
  3366                           
  3367                           
  3368                           ; 2 bytes @ 0x5
  3369  0075                     	ds	1
  3370  0076                     ??_CC2500_WriteREG:	
  3371  0076                     ??_setLED:	
  3372                           ; 0 bytes @ 0x6
  3373                           
  3374  0076                     ??_DelayOff_Initialization:	
  3375                           ; 0 bytes @ 0x6
  3376                           
  3377  0076                     ?_setDimmerIntr_MaxmumValue:	
  3378                           ; 0 bytes @ 0x6
  3379                           
  3380  0076                     ??_getAD:	
  3381                           ; 0 bytes @ 0x6
  3382                           
  3383  0076                     CC2500_WriteCommand@command:	
  3384                           ; 0 bytes @ 0x6
  3385                           
  3386  0076                     CC2500_ReadStatus@status_addr:	
  3387                           ; 1 bytes @ 0x6
  3388                           
  3389  0076                     getDelayOff_GO@go:	
  3390                           ; 1 bytes @ 0x6
  3391                           
  3392  0076                     setDimmerIntr_MaxmumValue@value:	
  3393                           ; 1 bytes @ 0x6
  3394                           
  3395  0076                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3396                           ; 1 bytes @ 0x6
  3397                           
  3398  0076                     getDimmerLights_Status@status:	
  3399                           ; 1 bytes @ 0x6
  3400                           
  3401  0076                     setLED@led:	
  3402                           ; 1 bytes @ 0x6
  3403                           
  3404  0076                     getAD@adcon0:	
  3405                           ; 1 bytes @ 0x6
  3406                           
  3407  0076                     Flash_Memory_Read@ret:	
  3408                           ; 1 bytes @ 0x6
  3409                           
  3410  0076                     getSw_KeyStatus@status:	
  3411                           ; 1 bytes @ 0x6
  3412                           
  3413  0076                     ___bmul@multiplier:	
  3414                           ; 1 bytes @ 0x6
  3415                           
  3416  0076                     ___ftpack@exp:	
  3417                           ; 1 bytes @ 0x6
  3418                           
  3419                           
  3420                           ; 1 bytes @ 0x6
  3421  0076                     	ds	1
  3422  0077                     ??_CC2500_ClearTXFIFO:	
  3423  0077                     ??_CC2500_ClearRXFIFO:	
  3424                           ; 0 bytes @ 0x7
  3425                           
  3426  0077                     ??_CC2500_FrequencyCabr:	
  3427                           ; 0 bytes @ 0x7
  3428                           
  3429  0077                     ??_CC2500_SIDLEMode:	
  3430                           ; 0 bytes @ 0x7
  3431                           
  3432  0077                     ??_setLED_Initialization:	
  3433                           ; 0 bytes @ 0x7
  3434                           
  3435  0077                     ??_Flash_Memory_Modify:	
  3436                           ; 0 bytes @ 0x7
  3437                           
  3438  0077                     ??_getTemp_AD:	
  3439                           ; 0 bytes @ 0x7
  3440                           
  3441  0077                     ??_RF_RxDisable:	
  3442                           ; 0 bytes @ 0x7
  3443                           
  3444  0077                     ??_setSw_Initialization:	
  3445                           ; 0 bytes @ 0x7
  3446                           
  3447  0077                     ??_CC2500_TxData:	
  3448                           ; 0 bytes @ 0x7
  3449                           
  3450  0077                     ??_CC2500_RxData:	
  3451                           ; 0 bytes @ 0x7
  3452                           
  3453  0077                     ??_setDimmerIntr_MaxmumValue:	
  3454                           ; 0 bytes @ 0x7
  3455                           
  3456  0077                     ??___wmul:	
  3457                           ; 0 bytes @ 0x7
  3458                           
  3459  0077                     ??___awdiv:	
  3460                           ; 0 bytes @ 0x7
  3461                           
  3462  0077                     ??___lwdiv:	
  3463                           ; 0 bytes @ 0x7
  3464                           
  3465  0077                     CC2500_WriteREG@w_addr:	
  3466                           ; 0 bytes @ 0x7
  3467                           
  3468  0077                     setLED_Initialization@led:	
  3469                           ; 1 bytes @ 0x7
  3470                           
  3471  0077                     setLED_Main@led:	
  3472                           ; 1 bytes @ 0x7
  3473                           
  3474  0077                     setSw_Initialization@sw:	
  3475                           ; 1 bytes @ 0x7
  3476                           
  3477  0077                     getSw_KeyStatus@sw:	
  3478                           ; 1 bytes @ 0x7
  3479                           
  3480  0077                     ___ftpack@sign:	
  3481                           ; 1 bytes @ 0x7
  3482                           
  3483                           
  3484                           ; 1 bytes @ 0x7
  3485  0077                     	ds	1
  3486  0078                     ??_setDimmerLights_SwOff:	
  3487  0078                     ??_setDimmerLights_Main:	
  3488                           ; 0 bytes @ 0x8
  3489                           
  3490  0078                     ??_Switch_Initialization:	
  3491                           ; 0 bytes @ 0x8
  3492                           
  3493  0078                     ??_Temp_Main:	
  3494                           ; 0 bytes @ 0x8
  3495                           
  3496  0078                     ??_Switch_Main:	
  3497                           ; 0 bytes @ 0x8
  3498                           
  3499  0078                     ??_RF_Main:	
  3500                           ; 0 bytes @ 0x8
  3501                           
  3502  0078                     ??_setControl_Lights_Table:	
  3503                           ; 0 bytes @ 0x8
  3504                           
  3505  0078                     ??_CC2500_PowerOnInitial:	
  3506                           ; 0 bytes @ 0x8
  3507                           
  3508  0078                     ??_DelayOff_Main:	
  3509                           ; 0 bytes @ 0x8
  3510                           
  3511  0078                     ??_DimmerLights_Main:	
  3512                           ; 0 bytes @ 0x8
  3513                           
  3514  0078                     ??_LED_Initialization:	
  3515                           ; 0 bytes @ 0x8
  3516                           
  3517  0078                     ??_LED_Main:	
  3518                           ; 0 bytes @ 0x8
  3519                           
  3520  0078                     ??_main:	
  3521                           ; 0 bytes @ 0x8
  3522                           
  3523  0078                     ??___ftneg:	
  3524                           ; 0 bytes @ 0x8
  3525                           
  3526                           
  3527                           	psect	cstackBANK0
  3528  0020                     __pcstackBANK0:	
  3529                           ; 0 bytes @ 0x8
  3530                           
  3531  0020                     ??_CC2500_InitSetREG:	
  3532  0020                     ??_CC2500_InitPATable:	
  3533                           ; 0 bytes @ 0x0
  3534                           
  3535  0020                     ??_DelayTimejudge:	
  3536                           ; 0 bytes @ 0x0
  3537                           
  3538  0020                     ??_getLoad_AD:	
  3539                           ; 0 bytes @ 0x0
  3540                           
  3541  0020                     ??___ftpack:	
  3542                           ; 0 bytes @ 0x0
  3543                           
  3544  0020                     CC2500_TxData@loop_e:	
  3545                           ; 0 bytes @ 0x0
  3546                           
  3547  0020                     CC2500_RxData@loop_f:	
  3548                           ; 1 bytes @ 0x0
  3549                           
  3550  0020                     setDimmerIntr_MaxmumValue@lights:	
  3551                           ; 1 bytes @ 0x0
  3552                           
  3553  0020                     _getDimmerLights_Allow_Condition$2247:	
  3554                           ; 1 bytes @ 0x0
  3555                           
  3556  0020                     Flash_Memory_Modify@i:	
  3557                           ; 1 bytes @ 0x0
  3558                           
  3559  0020                     getTemp_AD@channel:	
  3560                           ; 1 bytes @ 0x0
  3561                           
  3562  0020                     ___awdiv@counter:	
  3563                           ; 1 bytes @ 0x0
  3564                           
  3565  0020                     ___lwdiv@counter:	
  3566                           ; 1 bytes @ 0x0
  3567                           
  3568  0020                     getBuz_GO@i:	
  3569                           ; 1 bytes @ 0x0
  3570                           
  3571  0020                     DelayTime_1us@i:	
  3572                           ; 2 bytes @ 0x0
  3573                           
  3574  0020                     _getMain_All_Error_Status$3490:	
  3575                           ; 2 bytes @ 0x0
  3576                           
  3577  0020                     ___wmul@product:	
  3578                           ; 2 bytes @ 0x0
  3579                           
  3580                           
  3581                           ; 2 bytes @ 0x0
  3582  0020                     	ds	1
  3583  0021                     ??_Flash_Memory_Main:	
  3584  0021                     CC2500_InitSetREG@temp1:	
  3585                           ; 0 bytes @ 0x1
  3586                           
  3587  0021                     CC2500_InitPATable@temp:	
  3588                           ; 1 bytes @ 0x1
  3589                           
  3590  0021                     _getDimmerLights_Allow_Condition$2248:	
  3591                           ; 1 bytes @ 0x1
  3592                           
  3593  0021                     ___awdiv@sign:	
  3594                           ; 1 bytes @ 0x1
  3595                           
  3596  0021                     ___lwdiv@quotient:	
  3597                           ; 1 bytes @ 0x1
  3598                           
  3599                           
  3600                           ; 2 bytes @ 0x1
  3601  0021                     	ds	1
  3602  0022                     CC2500_InitSetREG@temp2:	
  3603  0022                     CC2500_InitPATable@loop_d:	
  3604                           ; 1 bytes @ 0x2
  3605                           
  3606  0022                     DelayTimejudge@i:	
  3607                           ; 1 bytes @ 0x2
  3608                           
  3609  0022                     _getDimmerLights_Allow_Condition$2249:	
  3610                           ; 1 bytes @ 0x2
  3611                           
  3612  0022                     getLoad_AD@channel:	
  3613                           ; 1 bytes @ 0x2
  3614                           
  3615  0022                     DelayTime_1us@j:	
  3616                           ; 1 bytes @ 0x2
  3617                           
  3618  0022                     _getMain_All_Error_Status$3491:	
  3619                           ; 2 bytes @ 0x2
  3620                           
  3621  0022                     ___awdiv@quotient:	
  3622                           ; 2 bytes @ 0x2
  3623                           
  3624                           
  3625                           ; 2 bytes @ 0x2
  3626  0022                     	ds	1
  3627  0023                     ?___awtoft:	
  3628  0023                     CC2500_InitSetREG@loop_c:	
  3629                           ; 3 bytes @ 0x3
  3630                           
  3631  0023                     DelayTimejudge@j:	
  3632                           ; 1 bytes @ 0x3
  3633                           
  3634  0023                     getDimmerLights_Allow_Condition@lights:	
  3635                           ; 1 bytes @ 0x3
  3636                           
  3637  0023                     getLoad_AD@k:	
  3638                           ; 1 bytes @ 0x3
  3639                           
  3640  0023                     ___awtoft@c:	
  3641                           ; 1 bytes @ 0x3
  3642                           
  3643                           
  3644                           ; 2 bytes @ 0x3
  3645  0023                     	ds	1
  3646  0024                     ?_setBuz:	
  3647  0024                     DelayTimejudge@k:	
  3648                           ; 0 bytes @ 0x4
  3649                           
  3650  0024                     getDimmerLights_Allow_Condition@allow:	
  3651                           ; 1 bytes @ 0x4
  3652                           
  3653  0024                     getMain_All_Error_Status@command:	
  3654                           ; 1 bytes @ 0x4
  3655                           
  3656  0024                     getLoad_AD@j:	
  3657                           ; 1 bytes @ 0x4
  3658                           
  3659  0024                     setBuz@time:	
  3660                           ; 1 bytes @ 0x4
  3661                           
  3662                           
  3663                           ; 2 bytes @ 0x4
  3664  0024                     	ds	1
  3665  0025                     DelayTimejudge@value:	
  3666  0025                     getMain_All_Error_Status@status:	
  3667                           ; 1 bytes @ 0x5
  3668                           
  3669  0025                     getLoad_AD@i:	
  3670                           ; 1 bytes @ 0x5
  3671                           
  3672                           
  3673                           ; 1 bytes @ 0x5
  3674  0025                     	ds	1
  3675  0026                     ??_Load_Main:	
  3676  0026                     ??_setBuz:	
  3677                           ; 0 bytes @ 0x6
  3678                           
  3679  0026                     ??___awtoft:	
  3680                           ; 0 bytes @ 0x6
  3681                           
  3682                           
  3683                           ; 0 bytes @ 0x6
  3684  0026                     	ds	1
  3685  0027                     setBuz@count:	
  3686                           
  3687                           ; 1 bytes @ 0x7
  3688  0027                     	ds	1
  3689  0028                     ??_setDimmerLights_SwOn:	
  3690  0028                     ??_my_MainTimer:	
  3691                           ; 0 bytes @ 0x8
  3692                           
  3693  0028                     Load_Main@error:	
  3694                           ; 0 bytes @ 0x8
  3695                           
  3696  0028                     ___awtoft@sign:	
  3697                           ; 1 bytes @ 0x8
  3698                           
  3699                           
  3700                           ; 1 bytes @ 0x8
  3701  0028                     	ds	1
  3702  0029                     ?___ftdiv:	
  3703  0029                     _setDimmerLights_SwOn$2195:	
  3704                           ; 3 bytes @ 0x9
  3705                           
  3706  0029                     Load_Main@Load_Status:	
  3707                           ; 1 bytes @ 0x9
  3708                           
  3709  0029                     ___ftdiv@f2:	
  3710                           ; 1 bytes @ 0x9
  3711                           
  3712                           
  3713                           ; 3 bytes @ 0x9
  3714  0029                     	ds	1
  3715  002A                     _setDimmerLights_SwOn$2207:	
  3716  002A                     Load_Main@i:	
  3717                           ; 1 bytes @ 0xA
  3718                           
  3719                           
  3720                           ; 2 bytes @ 0xA
  3721  002A                     	ds	1
  3722  002B                     setDimmerLights_SwOn@idle:	
  3723                           
  3724                           ; 1 bytes @ 0xB
  3725  002B                     	ds	1
  3726  002C                     setDimmerLights_SwOn@sw:	
  3727  002C                     ___ftdiv@f1:	
  3728                           ; 1 bytes @ 0xC
  3729                           
  3730                           
  3731                           ; 3 bytes @ 0xC
  3732  002C                     	ds	3
  3733  002F                     ??___ftdiv:	
  3734                           
  3735                           ; 0 bytes @ 0xF
  3736  002F                     	ds	4
  3737  0033                     ___ftdiv@cntr:	
  3738                           
  3739                           ; 1 bytes @ 0x13
  3740  0033                     	ds	1
  3741  0034                     ___ftdiv@f3:	
  3742                           
  3743                           ; 3 bytes @ 0x14
  3744  0034                     	ds	3
  3745  0037                     ___ftdiv@exp:	
  3746                           
  3747                           ; 1 bytes @ 0x17
  3748  0037                     	ds	1
  3749  0038                     ___ftdiv@sign:	
  3750                           
  3751                           ; 1 bytes @ 0x18
  3752  0038                     	ds	1
  3753  0039                     ?___ftneg:	
  3754  0039                     ___ftneg@f1:	
  3755                           ; 3 bytes @ 0x19
  3756                           
  3757                           
  3758                           ; 3 bytes @ 0x19
  3759  0039                     	ds	3
  3760  003C                     ?___ftadd:	
  3761  003C                     ___ftadd@f1:	
  3762                           ; 3 bytes @ 0x1C
  3763                           
  3764                           
  3765                           ; 3 bytes @ 0x1C
  3766  003C                     	ds	3
  3767  003F                     ___ftadd@f2:	
  3768                           
  3769                           ; 3 bytes @ 0x1F
  3770  003F                     	ds	3
  3771  0042                     ??___ftadd:	
  3772                           
  3773                           ; 0 bytes @ 0x22
  3774  0042                     	ds	4
  3775  0046                     ___ftadd@sign:	
  3776                           
  3777                           ; 1 bytes @ 0x26
  3778  0046                     	ds	1
  3779  0047                     ___ftadd@exp2:	
  3780                           
  3781                           ; 1 bytes @ 0x27
  3782  0047                     	ds	1
  3783  0048                     ___ftadd@exp1:	
  3784                           
  3785                           ; 1 bytes @ 0x28
  3786  0048                     	ds	1
  3787  0049                     ?___fttol:	
  3788  0049                     ___fttol@f1:	
  3789                           ; 4 bytes @ 0x29
  3790                           
  3791                           
  3792                           ; 3 bytes @ 0x29
  3793  0049                     	ds	4
  3794  004D                     ??___fttol:	
  3795                           
  3796                           ; 0 bytes @ 0x2D
  3797  004D                     	ds	4
  3798  0051                     ___fttol@sign1:	
  3799                           
  3800                           ; 1 bytes @ 0x31
  3801  0051                     	ds	1
  3802  0052                     ___fttol@lval:	
  3803                           
  3804                           ; 4 bytes @ 0x32
  3805  0052                     	ds	4
  3806  0056                     ___fttol@exp1:	
  3807                           
  3808                           ; 1 bytes @ 0x36
  3809  0056                     	ds	1
  3810  0057                     ??_setDimmerLights_PercentValue:	
  3811                           
  3812                           ; 0 bytes @ 0x37
  3813  0057                     	ds	2
  3814  0059                     setDimmerLights_PercentValue@value:	
  3815                           
  3816                           ; 1 bytes @ 0x39
  3817  0059                     	ds	1
  3818  005A                     setDimmerLights_PercentValue@i:	
  3819                           
  3820                           ; 3 bytes @ 0x3A
  3821  005A                     	ds	3
  3822  005D                     ?_setProductData:	
  3823  005D                     ??_Flash_Memory_Initialization:	
  3824                           ; 0 bytes @ 0x3D
  3825                           
  3826  005D                     setProductData@value:	
  3827                           ; 0 bytes @ 0x3D
  3828                           
  3829                           
  3830                           ; 1 bytes @ 0x3D
  3831  005D                     	ds	1
  3832  005E                     ??_setProductData:	
  3833  005E                     Flash_Memory_Initialization@i:	
  3834                           ; 0 bytes @ 0x3E
  3835                           
  3836                           
  3837                           ; 1 bytes @ 0x3E
  3838  005E                     	ds	2
  3839  0060                     setProductData@address:	
  3840                           
  3841                           ; 1 bytes @ 0x40
  3842  0060                     	ds	1
  3843  0061                     ?_setRF_DimmerLights:	
  3844  0061                     ??_setTemp_Main:	
  3845                           ; 0 bytes @ 0x41
  3846                           
  3847  0061                     ??_setLog_Code:	
  3848                           ; 0 bytes @ 0x41
  3849                           
  3850  0061                     ??_setRF_DimmerValue:	
  3851                           ; 0 bytes @ 0x41
  3852                           
  3853  0061                     ?_setDelayOff_GO:	
  3854                           ; 0 bytes @ 0x41
  3855                           
  3856  0061                     setDelayOff_GO@command:	
  3857                           ; 0 bytes @ 0x41
  3858                           
  3859  0061                     setRF_DimmerLights@on:	
  3860                           ; 1 bytes @ 0x41
  3861                           
  3862                           
  3863                           ; 1 bytes @ 0x41
  3864  0061                     	ds	1
  3865  0062                     ??_setRF_DimmerLights:	
  3866  0062                     setDelayOff_GO@value:	
  3867                           ; 0 bytes @ 0x42
  3868                           
  3869  0062                     setRF_DimmerValue@lights:	
  3870                           ; 1 bytes @ 0x42
  3871                           
  3872                           
  3873                           ; 1 bytes @ 0x42
  3874  0062                     	ds	1
  3875  0063                     ??_setRFSW_AdjControl:	
  3876  0063                     ??_setDelayOff_GO:	
  3877                           ; 0 bytes @ 0x43
  3878                           
  3879  0063                     setTemp_Main@error:	
  3880                           ; 0 bytes @ 0x43
  3881                           
  3882                           
  3883                           ; 1 bytes @ 0x43
  3884  0063                     	ds	1
  3885  0064                     setDelayOff_GO@sw:	
  3886  0064                     setRF_DimmerLights@status:	
  3887                           ; 1 bytes @ 0x44
  3888                           
  3889                           
  3890                           ; 1 bytes @ 0x44
  3891  0064                     	ds	1
  3892  0065                     setDimmerLights_SwOff@sw:	
  3893  0065                     setRFSW_AdjControl@status:	
  3894                           ; 1 bytes @ 0x45
  3895                           
  3896  0065                     setRF_DimmerLights@lights:	
  3897                           ; 1 bytes @ 0x45
  3898                           
  3899                           
  3900                           ; 1 bytes @ 0x45
  3901  0065                     	ds	1
  3902  0066                     ??_DlyOff_Main:	
  3903  0066                     ?_setDimmerLights_OnOff:	
  3904                           ; 0 bytes @ 0x46
  3905                           
  3906  0066                     ?_setDimmerLights_Dimming:	
  3907                           ; 0 bytes @ 0x46
  3908                           
  3909  0066                     ??_Exception_Main:	
  3910                           ; 0 bytes @ 0x46
  3911                           
  3912  0066                     ??_setRFSW_Control:	
  3913                           ; 0 bytes @ 0x46
  3914                           
  3915  0066                     ??_setSw_Main:	
  3916                           ; 0 bytes @ 0x46
  3917                           
  3918  0066                     setDimmerLights_OnOff@command:	
  3919                           ; 0 bytes @ 0x46
  3920                           
  3921  0066                     setDimmerLights_Dimming@status:	
  3922                           ; 1 bytes @ 0x46
  3923                           
  3924  0066                     setRFSW_AdjControl@sw:	
  3925                           ; 1 bytes @ 0x46
  3926                           
  3927                           
  3928                           ; 1 bytes @ 0x46
  3929  0066                     	ds	1
  3930  0067                     ??_setDimmerLights_OnOff:	
  3931  0067                     ??_setDimmerLights_Dimming:	
  3932                           ; 0 bytes @ 0x47
  3933                           
  3934  0067                     Exception_Main@count:	
  3935                           ; 0 bytes @ 0x47
  3936                           
  3937  0067                     setRFSW_Control@status:	
  3938                           ; 1 bytes @ 0x47
  3939                           
  3940                           
  3941                           ; 1 bytes @ 0x47
  3942  0067                     	ds	1
  3943  0068                     DlyOff_Main@sw:	
  3944  0068                     setDimmerLights_OnOff@lights:	
  3945                           ; 1 bytes @ 0x48
  3946                           
  3947  0068                     setDimmerLights_Dimming@lights:	
  3948                           ; 1 bytes @ 0x48
  3949                           
  3950  0068                     Exception_Main@error:	
  3951                           ; 1 bytes @ 0x48
  3952                           
  3953  0068                     setRFSW_Control@sw:	
  3954                           ; 1 bytes @ 0x48
  3955                           
  3956  0068                     setSw_Main@sw:	
  3957                           ; 1 bytes @ 0x48
  3958                           
  3959                           
  3960                           ; 1 bytes @ 0x48
  3961  0068                     	ds	1
  3962  0069                     ??_getRxData:	
  3963  0069                     setDimmerLights_Main@lights:	
  3964                           ; 0 bytes @ 0x49
  3965                           
  3966  0069                     Exception_Main@i:	
  3967                           ; 1 bytes @ 0x49
  3968                           
  3969                           
  3970                           ; 2 bytes @ 0x49
  3971  0069                     	ds	1
  3972  006A                     getRxData@error:	
  3973                           
  3974                           ; 1 bytes @ 0x4A
  3975  006A                     	ds	1
  3976  006B                     ??_setRF_Main:	
  3977  006B                     Exception_Main@i_3502:	
  3978                           ; 0 bytes @ 0x4B
  3979                           
  3980                           
  3981                           ; 2 bytes @ 0x4B
  3982  006B                     	ds	1
  3983  006C                     setRF_Main@loop_f:	
  3984                           
  3985                           ; 1 bytes @ 0x4C
  3986  006C                     	ds	1
  3987  006D                     Exception_Main@lights:	
  3988  006D                     setRF_Main@error:	
  3989                           ; 1 bytes @ 0x4D
  3990                           
  3991                           
  3992                           ; 1 bytes @ 0x4D
  3993  006D                     	ds	1
  3994                           
  3995                           	psect	maintext
  3996  08A7                     __pmaintext:	
  3997 ;;
  3998 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3999 ;;
  4000 ;; *************** function _main *****************
  4001 ;; Defined at:
  4002 ;;		line 7 in file "../src/Main_B1.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;  argc            2    0[BANK3 ] int 
  4005 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;		None
  4008 ;; Return value:  Size  Location     Type
  4009 ;;                  2    0[BANK3 ] int 
  4010 ;; Registers used:
  4011 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4012 ;; Tracked objects:
  4013 ;;		On entry : 17F/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4017 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4020 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4021 ;;Total ram usage:        4 bytes
  4022 ;; Hardware stack levels required when called:   12
  4023 ;; This function calls:
  4024 ;;		_Buzzer_Initialization
  4025 ;;		_Buzzer_Main
  4026 ;;		_CC2500_PowerOnInitial
  4027 ;;		_DelayOff_Initialization
  4028 ;;		_DelayOff_Main
  4029 ;;		_DimmerLights_Initialization
  4030 ;;		_DimmerLights_Main
  4031 ;;		_Exception_Main
  4032 ;;		_Flash_Memory_Initialization
  4033 ;;		_Flash_Memory_Main
  4034 ;;		_LED_Initialization
  4035 ;;		_LED_Main
  4036 ;;		_Load_Initialization
  4037 ;;		_Load_Main
  4038 ;;		_Mcu_Initialization
  4039 ;;		_RF_Initialization
  4040 ;;		_RF_Main
  4041 ;;		_Switch_Initialization
  4042 ;;		_Switch_Main
  4043 ;;		_Temp_Initialization
  4044 ;;		_Temp_Main
  4045 ;;		_WDT_Main
  4046 ;;		_getLoad_AD
  4047 ;;		_getTemp_AD
  4048 ;;		_myMain_Initialization
  4049 ;;		_my_MainTimer
  4050 ;; This function is called by:
  4051 ;;		Startup code after reset
  4052 ;; This function uses a non-reentrant model
  4053 ;;
  4054                           
  4055                           
  4056                           ;psect for function _main
  4057  08A7                     _main:	
  4058                           
  4059                           ;Main_B1.c: 8: myMain_Initialization();
  4060                           
  4061                           ;incstack = 0
  4062                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4063  08A7  319D  2562  3188   	fcall	_myMain_Initialization
  4064                           
  4065                           ;Main_B1.c: 9: Mcu_Initialization();
  4066  08AA  319E  2627  3188   	fcall	_Mcu_Initialization
  4067                           
  4068                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4069  08AD  3185  2560  3188   	fcall	_Flash_Memory_Initialization
  4070                           
  4071                           ;Main_B1.c: 11: LED_Initialization();
  4072  08B0  319C  24BF  3188   	fcall	_LED_Initialization
  4073                           
  4074                           ;Main_B1.c: 12: Buzzer_Initialization();
  4075  08B3  319B  23FA  3188   	fcall	_Buzzer_Initialization
  4076                           
  4077                           ;Main_B1.c: 14: ;;
  4078                           ;Main_B1.c: 15: Temp_Initialization();
  4079  08B6  319C  2406  3188   	fcall	_Temp_Initialization
  4080                           
  4081                           ;Main_B1.c: 16: Load_Initialization();
  4082  08B9  319B  23FD  3188   	fcall	_Load_Initialization
  4083                           
  4084                           ;Main_B1.c: 17: ;;
  4085                           ;Main_B1.c: 18: DelayOff_Initialization();
  4086  08BC  319C  2452  3188   	fcall	_DelayOff_Initialization
  4087                           
  4088                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4089  08BF  319C  2487  3188   	fcall	_DimmerLights_Initialization
  4090                           
  4091                           ;Main_B1.c: 21: ;;
  4092                           ;Main_B1.c: 22: ;;
  4093                           ;Main_B1.c: 23: ;;
  4094                           ;Main_B1.c: 24: Switch_Initialization();
  4095  08C2  319C  24EF  3188   	fcall	_Switch_Initialization
  4096                           
  4097                           ;Main_B1.c: 25: RF_Initialization();
  4098  08C5  319C  2400  3188   	fcall	_RF_Initialization
  4099                           
  4100                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4101  08C8  319E  26B3  3188   	fcall	_CC2500_PowerOnInitial
  4102  08CB                     l10222:	
  4103                           ;Main_B1.c: 27: ;;
  4104                           ;Main_B1.c: 28: ;;
  4105                           ;Main_B1.c: 30: while (1) {
  4106                           
  4107                           
  4108                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4109  08CB  0021               	movlb	1	; select bank1
  4110  08CC  1C2E               	btfss	_myMain^(0+128),0
  4111  08CD  28D6               	goto	l10226
  4112                           
  4113                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4114  08CE  3005               	movlw	5
  4115  08CF  318C  2493  3188   	fcall	_getLoad_AD
  4116                           
  4117                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4118  08D2  3009               	movlw	9
  4119  08D3  3193  23ED  3188   	fcall	_getTemp_AD
  4120  08D6                     l10226:	
  4121                           
  4122                           ;Main_B1.c: 57: }
  4123                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4124  08D6  0021               	movlb	1	; select bank1
  4125  08D7  1C4B               	btfss	_Timer1^(0+128),0
  4126  08D8  28CB               	goto	l10222
  4127                           
  4128                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4129  08D9  104B               	bcf	_Timer1^(0+128),0
  4130                           
  4131                           ;Main_B1.c: 96: my_MainTimer();
  4132  08DA  3187  27C3  3188   	fcall	_my_MainTimer
  4133                           
  4134                           ;Main_B1.c: 97: WDT_Main();
  4135  08DD  319D  25C1  3188   	fcall	_WDT_Main
  4136                           
  4137                           ;Main_B1.c: 98: ;;
  4138                           ;Main_B1.c: 99: ;;
  4139                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4140  08E0  0021               	movlb	1	; select bank1
  4141  08E1  1C2E               	btfss	_myMain^(0+128),0
  4142  08E2  28CB               	goto	l10222
  4143                           
  4144                           ;Main_B1.c: 101: Flash_Memory_Main();
  4145  08E3  3193  2380  3188   	fcall	_Flash_Memory_Main
  4146                           
  4147                           ;Main_B1.c: 103: LED_Main();
  4148  08E6  319C  24CB  3188   	fcall	_LED_Main
  4149                           
  4150                           ;Main_B1.c: 104: Buzzer_Main();
  4151  08E9  3195  256E  3188   	fcall	_Buzzer_Main
  4152                           
  4153                           ;Main_B1.c: 106: ;;
  4154                           ;Main_B1.c: 107: Temp_Main();
  4155  08EC  319C  2409  3188   	fcall	_Temp_Main
  4156                           
  4157                           ;Main_B1.c: 108: Load_Main();
  4158  08EF  3180  2054  3188   	fcall	_Load_Main
  4159                           
  4160                           ;Main_B1.c: 109: ;;
  4161                           ;Main_B1.c: 111: ;;
  4162                           ;Main_B1.c: 112: DimmerLights_Main();
  4163  08F2  3190  207B  3188   	fcall	_DimmerLights_Main
  4164                           
  4165                           ;Main_B1.c: 113: Switch_Main();
  4166  08F5  319C  24A8  3188   	fcall	_Switch_Main
  4167                           
  4168                           ;Main_B1.c: 114: ;;
  4169                           ;Main_B1.c: 115: ;;
  4170                           ;Main_B1.c: 117: RF_Main();
  4171  08F8  319C  2403  3188   	fcall	_RF_Main
  4172                           
  4173                           ;Main_B1.c: 118: DelayOff_Main();
  4174  08FB  319C  245A  3188   	fcall	_DelayOff_Main
  4175                           
  4176                           ;Main_B1.c: 119: ;;
  4177                           ;Main_B1.c: 120: ;;
  4178                           ;Main_B1.c: 121: Exception_Main();
  4179  08FE  3186  263C  3188   	fcall	_Exception_Main
  4180  0901  28CB               	goto	l10222
  4181  0902                     __end_of_main:	
  4182                           ;Main_B1.c: 128: }
  4183                           ;Main_B1.c: 129: }
  4184                           ;Main_B1.c: 163: }
  4185                           ;Main_B1.c: 164: return (0);
  4186                           ;	Return value of _main is never used
  4187                           
  4188                           
  4189                           	psect	text1
  4190  07C3                     __ptext1:	
  4191 ;; *************** function _my_MainTimer *****************
  4192 ;; Defined at:
  4193 ;;		line 185 in file "../src/Main_B1.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;		None               void
  4200 ;; Registers used:
  4201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4209 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4210 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;Total ram usage:        1 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    5
  4214 ;; This function calls:
  4215 ;;		_setBuz
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           
  4222                           ;psect for function _my_MainTimer
  4223  07C3                     _my_MainTimer:	
  4224                           
  4225                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4226                           
  4227                           ;incstack = 0
  4228                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4229  07C3  0021               	movlb	1	; select bank1
  4230  07C4  182E               	btfsc	_myMain^(0+128),0
  4231  07C5  2FDD               	goto	l9940
  4232                           
  4233                           ;Main_B1.c: 189: myMain.PowerCount++;
  4234  07C6  3001               	movlw	1
  4235  07C7  0020               	movlb	0	; select bank0
  4236  07C8  00A8               	movwf	??_my_MainTimer
  4237  07C9  0828               	movf	??_my_MainTimer,w
  4238  07CA  0021               	movlb	1	; select bank1
  4239  07CB  07AF               	addwf	(_myMain^(0+128)+1),f
  4240                           
  4241                           ;Main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  4242  07CC  082F               	movf	(_myMain^(0+128)+1),w
  4243  07CD  3A4B               	xorlw	75
  4244  07CE  1D03               	skipz
  4245  07CF  0008               	return
  4246                           
  4247                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4248  07D0  01AF               	clrf	(_myMain^(0+128)+1)
  4249                           
  4250                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4251  07D1  142E               	bsf	_myMain^(0+128),0
  4252                           
  4253                           ;Main_B1.c: 197: setBuz(3, 50);
  4254  07D2  3032               	movlw	50
  4255  07D3  0020               	movlb	0	; select bank0
  4256  07D4  00A4               	movwf	setBuz@time
  4257  07D5  3000               	movlw	0
  4258  07D6  00A5               	movwf	setBuz@time+1
  4259  07D7  3003               	movlw	3
  4260  07D8  3197  274E         	fcall	_setBuz
  4261                           
  4262                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4263  07DA  0021               	movlb	1	; select bank1
  4264  07DB  162E               	bsf	_myMain^(0+128),4
  4265                           
  4266                           ;Main_B1.c: 207: }
  4267                           ;Main_B1.c: 208: } else {
  4268  07DC  0008               	return
  4269  07DD                     l9940:	
  4270                           
  4271                           ;Main_B1.c: 209: myMain.PowerCount++;
  4272  07DD  3001               	movlw	1
  4273  07DE  0020               	movlb	0	; select bank0
  4274  07DF  00A8               	movwf	??_my_MainTimer
  4275  07E0  0828               	movf	??_my_MainTimer,w
  4276  07E1  0021               	movlb	1	; select bank1
  4277  07E2  07AF               	addwf	(_myMain^(0+128)+1),f
  4278                           
  4279                           ;Main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  4280  07E3  082F               	movf	(_myMain^(0+128)+1),w
  4281  07E4  3A32               	xorlw	50
  4282  07E5  1903               	btfsc	3,2
  4283                           
  4284                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4285  07E6  01AF               	clrf	(_myMain^(0+128)+1)
  4286                           
  4287                           ;Main_B1.c: 226: }
  4288                           ;Main_B1.c: 228: myMain.Count1++;
  4289  07E7  3001               	movlw	1
  4290  07E8  07B2               	addwf	(_myMain^(0+128)+4),f
  4291  07E9  3000               	movlw	0
  4292  07EA  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4293                           
  4294                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4295  07EB  3004               	movlw	4
  4296  07EC  3EAE               	addlw	_myMain& (0+255)
  4297  07ED  0086               	movwf	6
  4298  07EE  0187               	clrf	7
  4299  07EF  3F40               	moviw [0]fsr1
  4300  07F0  3A32               	xorlw	50
  4301  07F1  1D03               	skipz
  4302  07F2  2FF5               	goto	u11465
  4303  07F3  3F41               	moviw [1]fsr1
  4304  07F4  3A00               	xorlw	0
  4305  07F5                     u11465:	
  4306  07F5  1D03               	skipz
  4307  07F6  0008               	return
  4308                           
  4309                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4310  07F7  01B2               	clrf	(_myMain^(0+128)+4)
  4311  07F8  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4312                           
  4313                           ;Main_B1.c: 242: if (myMain.Flag) {
  4314  07F9  1CAE               	btfss	_myMain^(0+128),1
  4315  07FA  2FFD               	goto	l1561
  4316                           
  4317                           ;Main_B1.c: 243: myMain.Flag = 0;
  4318  07FB  10AE               	bcf	_myMain^(0+128),1
  4319                           
  4320                           ;Main_B1.c: 252: } else {
  4321  07FC  0008               	return
  4322  07FD                     l1561:	
  4323                           
  4324                           ;Main_B1.c: 253: myMain.Flag = 1;
  4325  07FD  14AE               	bsf	_myMain^(0+128),1
  4326  07FE  0008               	return
  4327  07FF                     __end_of_my_MainTimer:	
  4328                           
  4329                           	psect	text2
  4330  1D62                     __ptext2:	
  4331 ;; *************** function _myMain_Initialization *****************
  4332 ;; Defined at:
  4333 ;;		line 170 in file "../src/Main_B1.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;		None
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;		None
  4338 ;; Return value:  Size  Location     Type
  4339 ;;		None               void
  4340 ;; Registers used:
  4341 ;;		wreg, fsr1l, fsr1h
  4342 ;; Tracked objects:
  4343 ;;		On entry : 0/0
  4344 ;;		On exit  : 0/0
  4345 ;;		Unchanged: 0/0
  4346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4349 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4350 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;Total ram usage:        1 bytes
  4352 ;; Hardware stack levels used:    1
  4353 ;; Hardware stack levels required when called:    3
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_main
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           
  4362                           ;psect for function _myMain_Initialization
  4363  1D62                     _myMain_Initialization:	
  4364                           
  4365                           ;Main_B1.c: 173: product = &_product;
  4366                           
  4367                           ;incstack = 0
  4368                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4369  1D62  3045               	movlw	__product& (0+255)
  4370  1D63  00F3               	movwf	??_myMain_Initialization
  4371  1D64  0873               	movf	??_myMain_Initialization,w
  4372  1D65  0020               	movlb	0	; select bank0
  4373  1D66  00EE               	movwf	_product
  4374                           
  4375                           ;Main_B1.c: 174: product->Data[20] = 210;
  4376  1D67  30D2               	movlw	210
  4377  1D68  00F3               	movwf	??_myMain_Initialization
  4378  1D69  086E               	movf	_product,w
  4379  1D6A  3E14               	addlw	20
  4380  1D6B  0086               	movwf	6
  4381  1D6C  3002               	movlw	2	; select bank4/5
  4382  1D6D  0087               	movwf	7
  4383  1D6E  0873               	movf	??_myMain_Initialization,w
  4384  1D6F  0081               	movwf	1
  4385  1D70  0008               	return
  4386  1D71                     __end_of_myMain_Initialization:	
  4387                           
  4388                           	psect	text3
  4389  13ED                     __ptext3:	
  4390 ;; *************** function _getTemp_AD *****************
  4391 ;; Defined at:
  4392 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  channel         1    wreg     unsigned char 
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;  channel         1    0[BANK0 ] unsigned char 
  4397 ;; Return value:  Size  Location     Type
  4398 ;;		None               void
  4399 ;; Registers used:
  4400 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4408 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4409 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;Total ram usage:        2 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    5
  4413 ;; This function calls:
  4414 ;;		_getAD
  4415 ;; This function is called by:
  4416 ;;		_main
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420                           
  4421                           ;psect for function _getTemp_AD
  4422  13ED                     _getTemp_AD:	
  4423                           
  4424                           ;incstack = 0
  4425                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4426                           ;getTemp_AD@channel stored from wreg
  4427  13ED  0020               	movlb	0	; select bank0
  4428  13EE  00A0               	movwf	getTemp_AD@channel
  4429                           
  4430                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4431  13EF  0021               	movlb	1	; select bank1
  4432  13F0  1D5E               	btfss	_Temp^(0+128),2
  4433  13F1  0008               	return
  4434                           
  4435                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4436  13F2  30F0               	movlw	240
  4437  13F3  00F7               	movwf	??_getTemp_AD
  4438  13F4  0877               	movf	??_getTemp_AD,w
  4439  13F5  00F3               	movwf	getAD@adcon1
  4440  13F6  0020               	movlb	0	; select bank0
  4441  13F7  0820               	movf	getTemp_AD@channel,w
  4442  13F8  319F  273D  3193   	fcall	_getAD
  4443  13FB  0874               	movf	?_getAD+1,w
  4444  13FC  0021               	movlb	1	; select bank1
  4445  13FD  01EB               	clrf	((_Temp+1)^(0+128)+12)
  4446  13FE  07EB               	addwf	((_Temp+1)^(0+128)+12),f
  4447  13FF  0873               	movf	?_getAD,w
  4448  1400  01EA               	clrf	(_Temp^(0+128)+12)
  4449  1401  07EA               	addwf	(_Temp^(0+128)+12),f
  4450                           
  4451                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4452  1402  300C               	movlw	12
  4453  1403  3EDE               	addlw	_Temp& (0+255)
  4454  1404  0086               	movwf	6
  4455  1405  0187               	clrf	7
  4456  1406  0016               	moviw fsr1++
  4457  1407  0401               	iorwf	1,w
  4458  1408  1903               	skipnz
  4459  1409  0008               	return
  4460                           
  4461                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4462  140A  086B               	movf	((_Temp+1)^(0+128)+12),w
  4463  140B  0267               	subwf	((_Temp+1)^(0+128)+8),w
  4464  140C  1D03               	skipz
  4465  140D  2C10               	goto	u11415
  4466  140E  086A               	movf	(_Temp^(0+128)+12),w
  4467  140F  0266               	subwf	(_Temp^(0+128)+8),w
  4468  1410                     u11415:	
  4469  1410  1803               	skipnc
  4470  1411  2C19               	goto	l9922
  4471                           
  4472                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4473  1412  086B               	movf	((_Temp+1)^(0+128)+12),w
  4474  1413  01E7               	clrf	((_Temp+1)^(0+128)+8)
  4475  1414  07E7               	addwf	((_Temp+1)^(0+128)+8),f
  4476  1415  086A               	movf	(_Temp^(0+128)+12),w
  4477  1416  01E6               	clrf	(_Temp^(0+128)+8)
  4478  1417  07E6               	addwf	(_Temp^(0+128)+8),f
  4479                           
  4480                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4481  1418  0008               	return
  4482  1419                     l9922:	
  4483  1419  086B               	movf	((_Temp+1)^(0+128)+12),w
  4484  141A  0269               	subwf	((_Temp+1)^(0+128)+10),w
  4485  141B  1D03               	skipz
  4486  141C  2C1F               	goto	u11425
  4487  141D  086A               	movf	(_Temp^(0+128)+12),w
  4488  141E  0268               	subwf	(_Temp^(0+128)+10),w
  4489  141F                     u11425:	
  4490  141F  1803               	skipnc
  4491  1420  0008               	return
  4492                           
  4493                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4494  1421  086B               	movf	((_Temp+1)^(0+128)+12),w
  4495  1422  01E9               	clrf	((_Temp+1)^(0+128)+10)
  4496  1423  07E9               	addwf	((_Temp+1)^(0+128)+10),f
  4497  1424  086A               	movf	(_Temp^(0+128)+12),w
  4498  1425  01E8               	clrf	(_Temp^(0+128)+10)
  4499  1426  07E8               	addwf	(_Temp^(0+128)+10),f
  4500  1427  0008               	return
  4501  1428                     __end_of_getTemp_AD:	
  4502                           
  4503                           	psect	text4
  4504  0C93                     __ptext4:	
  4505 ;; *************** function _getLoad_AD *****************
  4506 ;; Defined at:
  4507 ;;		line 15 in file "../src/OverLoad_B1.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;  channel         1    wreg     unsigned char 
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;  channel         1    2[BANK0 ] unsigned char 
  4512 ;;  i               1    5[BANK0 ] unsigned char 
  4513 ;;  j               1    4[BANK0 ] unsigned char 
  4514 ;;  k               1    3[BANK0 ] unsigned char 
  4515 ;; Return value:  Size  Location     Type
  4516 ;;		None               void
  4517 ;; Registers used:
  4518 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;Total ram usage:        6 bytes
  4529 ;; Hardware stack levels used:    1
  4530 ;; Hardware stack levels required when called:    5
  4531 ;; This function calls:
  4532 ;;		_getAD
  4533 ;; This function is called by:
  4534 ;;		_main
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           
  4539                           ;psect for function _getLoad_AD
  4540  0C93                     _getLoad_AD:	
  4541                           
  4542                           ;incstack = 0
  4543                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4544                           ;getLoad_AD@channel stored from wreg
  4545  0C93  0020               	movlb	0	; select bank0
  4546  0C94  00A2               	movwf	getLoad_AD@channel
  4547                           
  4548                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4549  0C95  01A5               	clrf	getLoad_AD@i
  4550  0C96  01A4               	clrf	getLoad_AD@j
  4551  0C97  01A3               	clrf	getLoad_AD@k
  4552                           
  4553                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4554  0C98  0022               	movlb	2	; select bank2
  4555  0C99  1E20               	btfss	_Load^(0+256),4
  4556  0C9A  0008               	return
  4557                           
  4558                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4559  0C9B  30F3               	movlw	243
  4560  0C9C  0020               	movlb	0	; select bank0
  4561  0C9D  00A0               	movwf	??_getLoad_AD
  4562  0C9E  0820               	movf	??_getLoad_AD,w
  4563  0C9F  00F3               	movwf	getAD@adcon1
  4564  0CA0  0822               	movf	getLoad_AD@channel,w
  4565  0CA1  319F  273D  318C   	fcall	_getAD
  4566  0CA4  0874               	movf	?_getAD+1,w
  4567  0CA5  0022               	movlb	2	; select bank2
  4568  0CA6  01C2               	clrf	((_Load+1)^(0+256)+33)
  4569  0CA7  07C2               	addwf	((_Load+1)^(0+256)+33),f
  4570  0CA8  0873               	movf	?_getAD,w
  4571  0CA9  01C1               	clrf	(_Load^(0+256)+33)
  4572  0CAA  07C1               	addwf	(_Load^(0+256)+33),f
  4573                           
  4574                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4575  0CAB  0020               	movlb	0	; select bank0
  4576  0CAC  01A5               	clrf	getLoad_AD@i
  4577  0CAD  3004               	movlw	4
  4578  0CAE  0225               	subwf	getLoad_AD@i,w
  4579  0CAF  1803               	btfsc	3,0
  4580  0CB0  2CDE               	goto	l9892
  4581  0CB1                     l9880:	
  4582                           
  4583                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4584  0CB1  3525               	lslf	getLoad_AD@i,w
  4585  0CB2  3E2B               	addlw	(_Load+11)& (0+255)
  4586  0CB3  0086               	movwf	6
  4587  0CB4  3001               	movlw	1	; select bank2/3
  4588  0CB5  0087               	movwf	7
  4589  0CB6  3F40               	moviw [0]fsr1
  4590  0CB7  00A0               	movwf	??_getLoad_AD
  4591  0CB8  3F41               	moviw [1]fsr1
  4592  0CB9  00A1               	movwf	??_getLoad_AD+1
  4593  0CBA  0022               	movlb	2	; select bank2
  4594  0CBB  0842               	movf	((_Load+1)^(0+256)+33),w
  4595  0CBC  0020               	movlb	0	; select bank0
  4596  0CBD  0221               	subwf	??_getLoad_AD+1,w
  4597  0CBE  1D03               	skipz
  4598  0CBF  2CC4               	goto	u11315
  4599  0CC0  0022               	movlb	2	; select bank2
  4600  0CC1  0841               	movf	(_Load^(0+256)+33),w
  4601  0CC2  0020               	movlb	0	; select bank0
  4602  0CC3  0220               	subwf	??_getLoad_AD,w
  4603  0CC4                     u11315:	
  4604  0CC4  1803               	skipnc
  4605  0CC5  2CD6               	goto	l9888
  4606  0CC6  08A4               	movf	getLoad_AD@j,f
  4607  0CC7  1D03               	skipz
  4608  0CC8  2CD6               	goto	l9888
  4609                           
  4610                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4611  0CC9  3525               	lslf	getLoad_AD@i,w
  4612  0CCA  3E2B               	addlw	(_Load+11)& (0+255)
  4613  0CCB  0086               	movwf	6
  4614  0CCC  3001               	movlw	1	; select bank2/3
  4615  0CCD  0087               	movwf	7
  4616  0CCE  0022               	movlb	2	; select bank2
  4617  0CCF  0841               	movf	(_Load^(0+256)+33),w
  4618  0CD0  3FC0               	movwi [0]fsr1
  4619  0CD1  0842               	movf	((_Load+1)^(0+256)+33),w
  4620  0CD2  3FC1               	movwi [1]fsr1
  4621                           
  4622                           ;OverLoad_B1.c: 24: j = 1;
  4623  0CD3  0020               	movlb	0	; select bank0
  4624  0CD4  01A4               	clrf	getLoad_AD@j
  4625  0CD5  0AA4               	incf	getLoad_AD@j,f
  4626  0CD6                     l9888:	
  4627  0CD6  3001               	movlw	1
  4628  0CD7  00A0               	movwf	??_getLoad_AD
  4629  0CD8  0820               	movf	??_getLoad_AD,w
  4630  0CD9  07A5               	addwf	getLoad_AD@i,f
  4631  0CDA  3004               	movlw	4
  4632  0CDB  0225               	subwf	getLoad_AD@i,w
  4633  0CDC  1C03               	skipc
  4634  0CDD  2CB1               	goto	l9880
  4635  0CDE                     l9892:	
  4636                           
  4637                           ;OverLoad_B1.c: 25: }
  4638                           ;OverLoad_B1.c: 26: }
  4639                           ;OverLoad_B1.c: 27: if (j == 0) {
  4640  0CDE  08A4               	movf	getLoad_AD@j,f
  4641  0CDF  1D03               	skipz
  4642  0CE0  0008               	return
  4643                           
  4644                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4645  0CE1  01A5               	clrf	getLoad_AD@i
  4646  0CE2                     L1:	
  4647  0CE2  3004               	movlw	4
  4648  0CE3  0225               	subwf	getLoad_AD@i,w
  4649  0CE4  1803               	btfsc	3,0
  4650  0CE5  0008               	return
  4651                           
  4652                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4653  0CE6  3525               	lslf	getLoad_AD@i,w
  4654  0CE7  3E35               	addlw	(_Load+21)& (0+255)
  4655  0CE8  0086               	movwf	6
  4656  0CE9  3001               	movlw	1	; select bank2/3
  4657  0CEA  0087               	movwf	7
  4658  0CEB  3F40               	moviw [0]fsr1
  4659  0CEC  00A0               	movwf	??_getLoad_AD
  4660  0CED  3F41               	moviw [1]fsr1
  4661  0CEE  00A1               	movwf	??_getLoad_AD+1
  4662  0CEF  0821               	movf	??_getLoad_AD+1,w
  4663  0CF0  0022               	movlb	2	; select bank2
  4664  0CF1  0242               	subwf	((_Load+1)^(0+256)+33),w
  4665  0CF2  1D03               	skipz
  4666  0CF3  2CF8               	goto	u11365
  4667  0CF4  0020               	movlb	0	; select bank0
  4668  0CF5  0820               	movf	??_getLoad_AD,w
  4669  0CF6  0022               	movlb	2	; select bank2
  4670  0CF7  0241               	subwf	(_Load^(0+256)+33),w
  4671  0CF8                     u11365:	
  4672  0CF8  1803               	skipnc
  4673  0CF9  2D0B               	goto	l9908
  4674  0CFA  0020               	movlb	0	; select bank0
  4675  0CFB  08A3               	movf	getLoad_AD@k,f
  4676  0CFC  1D03               	skipz
  4677  0CFD  2D0B               	goto	l9908
  4678                           
  4679                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4680  0CFE  3525               	lslf	getLoad_AD@i,w
  4681  0CFF  3E35               	addlw	(_Load+21)& (0+255)
  4682  0D00  0086               	movwf	6
  4683  0D01  3001               	movlw	1	; select bank2/3
  4684  0D02  0087               	movwf	7
  4685  0D03  0022               	movlb	2	; select bank2
  4686  0D04  0841               	movf	(_Load^(0+256)+33),w
  4687  0D05  3FC0               	movwi [0]fsr1
  4688  0D06  0842               	movf	((_Load+1)^(0+256)+33),w
  4689  0D07  3FC1               	movwi [1]fsr1
  4690                           
  4691                           ;OverLoad_B1.c: 31: k = 1;
  4692  0D08  0020               	movlb	0	; select bank0
  4693  0D09  01A3               	clrf	getLoad_AD@k
  4694  0D0A  0AA3               	incf	getLoad_AD@k,f
  4695  0D0B                     l9908:	
  4696  0D0B  3001               	movlw	1
  4697  0D0C  0020               	movlb	0	; select bank0
  4698  0D0D  00A0               	movwf	??_getLoad_AD
  4699  0D0E  0820               	movf	??_getLoad_AD,w
  4700  0D0F  07A5               	addwf	getLoad_AD@i,f
  4701  0D10  2CE2               	goto	L1
  4702  0D11                     __end_of_getLoad_AD:	
  4703                           
  4704                           	psect	text5
  4705  1F3D                     __ptext5:	
  4706 ;; *************** function _getAD *****************
  4707 ;; Defined at:
  4708 ;;		line 458 in file "../src/MCU_B1.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  adcon0          1    wreg     unsigned char 
  4711 ;;  adcon1          1    3[COMMON] unsigned char 
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;  adcon0          1    6[COMMON] unsigned char 
  4714 ;; Return value:  Size  Location     Type
  4715 ;;                  2    3[COMMON] int 
  4716 ;; Registers used:
  4717 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4723 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4727 ;;Total ram usage:        4 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    4
  4730 ;; This function calls:
  4731 ;;		_Timeout_Counter
  4732 ;;		_set_TimeoutCleared
  4733 ;; This function is called by:
  4734 ;;		_getLoad_AD
  4735 ;;		_getTemp_AD
  4736 ;; This function uses a non-reentrant model
  4737 ;;
  4738                           
  4739                           
  4740                           ;psect for function _getAD
  4741  1F3D                     _getAD:	
  4742                           
  4743                           ;incstack = 0
  4744                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4745                           ;getAD@adcon0 stored from wreg
  4746  1F3D  00F6               	movwf	getAD@adcon0
  4747                           
  4748                           ;MCU_B1.c: 459: ADCON0 = adcon0;
  4749  1F3E  0876               	movf	getAD@adcon0,w
  4750  1F3F  0021               	movlb	1	; select bank1
  4751  1F40  009D               	movwf	29	;volatile
  4752                           
  4753                           ;MCU_B1.c: 460: ADCON1 = adcon1;
  4754  1F41  0873               	movf	getAD@adcon1,w
  4755  1F42  009E               	movwf	30	;volatile
  4756                           
  4757                           ;MCU_B1.c: 461: GO_nDONE = 1;
  4758  1F43  149D               	bsf	29,1	;volatile
  4759                           
  4760                           ;MCU_B1.c: 462: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4761  1F44  2F48               	goto	l9498
  4762  1F45                     l9496:	
  4763                           
  4764                           ;MCU_B1.c: 463: Timeout_Counter();
  4765  1F45  319E  26C8  319F   	fcall	_Timeout_Counter
  4766  1F48                     l9498:	
  4767  1F48  0021               	movlb	1	; select bank1
  4768  1F49  1C9D               	btfss	29,1	;volatile
  4769  1F4A  2F4D               	goto	l9502
  4770  1F4B  1D39               	btfss	(_myMain^(0+128)+11),2
  4771  1F4C  2F45               	goto	l9496
  4772  1F4D                     l9502:	
  4773                           
  4774                           ;MCU_B1.c: 464: };
  4775                           ;MCU_B1.c: 465: set_TimeoutCleared();
  4776  1F4D  319C  2425         	fcall	_set_TimeoutCleared
  4777                           
  4778                           ;MCU_B1.c: 466: return ((ADRESH*256)+ADRESL);
  4779  1F4F  0021               	movlb	1	; select bank1
  4780  1F50  081C               	movf	28,w	;volatile
  4781  1F51  01F4               	clrf	?_getAD+1
  4782  1F52  07F4               	addwf	?_getAD+1,f
  4783  1F53  081B               	movf	27,w	;volatile
  4784  1F54  01F3               	clrf	?_getAD
  4785  1F55  07F3               	addwf	?_getAD,f
  4786  1F56  0008               	return
  4787  1F57                     __end_of_getAD:	
  4788                           
  4789                           	psect	text6
  4790  1DC1                     __ptext6:	
  4791 ;; *************** function _WDT_Main *****************
  4792 ;; Defined at:
  4793 ;;		line 1102 in file "../src/MCU_B1.c"
  4794 ;; Parameters:    Size  Location     Type
  4795 ;;		None
  4796 ;; Auto vars:     Size  Location     Type
  4797 ;;		None
  4798 ;; Return value:  Size  Location     Type
  4799 ;;		None               void
  4800 ;; Registers used:
  4801 ;;		wreg, status,2, status,0, pclath, cstack
  4802 ;; Tracked objects:
  4803 ;;		On entry : 0/0
  4804 ;;		On exit  : 0/0
  4805 ;;		Unchanged: 0/0
  4806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4809 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4810 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4811 ;;Total ram usage:        1 bytes
  4812 ;; Hardware stack levels used:    1
  4813 ;; Hardware stack levels required when called:    4
  4814 ;; This function calls:
  4815 ;;		_WDT_Clearing
  4816 ;; This function is called by:
  4817 ;;		_main
  4818 ;; This function uses a non-reentrant model
  4819 ;;
  4820                           
  4821                           
  4822                           ;psect for function _WDT_Main
  4823  1DC1                     _WDT_Main:	
  4824                           
  4825                           ;MCU_B1.c: 1103: if (WDT.Enable == 1) {
  4826                           
  4827                           ;incstack = 0
  4828                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4829  1DC1  0021               	movlb	1	; select bank1
  4830  1DC2  1C50               	btfss	_WDT^(0+128),0
  4831  1DC3  0008               	return
  4832                           
  4833                           ;MCU_B1.c: 1104: if (WDT.Timer-- > 0) {
  4834  1DC4  3001               	movlw	1
  4835  1DC5  02D1               	subwf	(_WDT^(0+128)+1),f
  4836  1DC6  0851               	movf	(_WDT^(0+128)+1),w
  4837  1DC7  3AFF               	xorlw	255
  4838  1DC8  1903               	skipnz
  4839  1DC9  0008               	return
  4840                           
  4841                           ;MCU_B1.c: 1105: WDT.Timer = 100;
  4842  1DCA  3064               	movlw	100
  4843  1DCB  00F3               	movwf	??_WDT_Main
  4844  1DCC  0873               	movf	??_WDT_Main,w
  4845  1DCD  00D1               	movwf	(_WDT^(0+128)+1)
  4846                           
  4847                           ;MCU_B1.c: 1106: WDT_Clearing();
  4848  1DCE  3180  2002         	fcall	_WDT_Clearing
  4849  1DD0  0008               	return
  4850  1DD1                     __end_of_WDT_Main:	
  4851                           
  4852                           	psect	text7
  4853  0002                     __ptext7:	
  4854 ;; *************** function _WDT_Clearing *****************
  4855 ;; Defined at:
  4856 ;;		line 1112 in file "../src/MCU_B1.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;		None
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;		None
  4861 ;; Return value:  Size  Location     Type
  4862 ;;		None               void
  4863 ;; Registers used:
  4864 ;;		None
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4874 ;;Total ram usage:        0 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; Hardware stack levels required when called:    3
  4877 ;; This function calls:
  4878 ;;		Nothing
  4879 ;; This function is called by:
  4880 ;;		_WDT_Main
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           
  4885                           ;psect for function _WDT_Clearing
  4886  0002                     _WDT_Clearing:	
  4887                           
  4888                           ;incstack = 0
  4889                           ; Regs used in _WDT_Clearing: []
  4890  0002  0064               	clrwdt	;# 
  4891  0003  0008               	return
  4892  0004                     __end_of_WDT_Clearing:	
  4893                           
  4894                           	psect	text8
  4895  1C09                     __ptext8:	
  4896 ;; *************** function _Temp_Main *****************
  4897 ;; Defined at:
  4898 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4899 ;; Parameters:    Size  Location     Type
  4900 ;;		None
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;		None
  4903 ;; Return value:  Size  Location     Type
  4904 ;;		None               void
  4905 ;; Registers used:
  4906 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4916 ;;Total ram usage:        0 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; Hardware stack levels required when called:    6
  4919 ;; This function calls:
  4920 ;;		_setTemp_Main
  4921 ;; This function is called by:
  4922 ;;		_main
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           
  4927                           ;psect for function _Temp_Main
  4928  1C09                     _Temp_Main:	
  4929                           
  4930                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4931                           
  4932                           ;incstack = 0
  4933                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4934  1C09  318F  2750         	fcall	_setTemp_Main
  4935  1C0B  0008               	return
  4936  1C0C                     __end_of_Temp_Main:	
  4937                           
  4938                           	psect	text9
  4939  0F50                     __ptext9:	
  4940 ;; *************** function _setTemp_Main *****************
  4941 ;; Defined at:
  4942 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4943 ;; Parameters:    Size  Location     Type
  4944 ;;		None
  4945 ;; Auto vars:     Size  Location     Type
  4946 ;;  error           1   67[BANK0 ] unsigned char 
  4947 ;; Return value:  Size  Location     Type
  4948 ;;		None               void
  4949 ;; Registers used:
  4950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4951 ;; Tracked objects:
  4952 ;;		On entry : 0/0
  4953 ;;		On exit  : 0/0
  4954 ;;		Unchanged: 0/0
  4955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4958 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4959 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4960 ;;Total ram usage:        3 bytes
  4961 ;; Hardware stack levels used:    1
  4962 ;; Hardware stack levels required when called:    5
  4963 ;; This function calls:
  4964 ;;		_getMain_All_Error_Status
  4965 ;;		_setBuz
  4966 ;;		_setProductData
  4967 ;; This function is called by:
  4968 ;;		_Temp_Main
  4969 ;; This function uses a non-reentrant model
  4970 ;;
  4971                           
  4972                           
  4973                           ;psect for function _setTemp_Main
  4974  0F50                     _setTemp_Main:	
  4975                           
  4976                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4977                           
  4978                           ;incstack = 0
  4979                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4980  0F50  3000               	movlw	0
  4981  0F51  3193  2319  318F   	fcall	_getMain_All_Error_Status
  4982  0F54  0020               	movlb	0	; select bank0
  4983  0F55  00E1               	movwf	??_setTemp_Main
  4984  0F56  0861               	movf	??_setTemp_Main,w
  4985  0F57  00E3               	movwf	setTemp_Main@error
  4986                           
  4987                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4988  0F58  0021               	movlb	1	; select bank1
  4989  0F59  1C5E               	btfss	_Temp^(0+128),0
  4990  0F5A  2FFC               	goto	l1904
  4991                           
  4992                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4993  0F5B  195E               	btfsc	_Temp^(0+128),2
  4994  0F5C  2F6C               	goto	l9544
  4995                           
  4996                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4997  0F5D  3001               	movlw	1
  4998  0F5E  07DF               	addwf	(_Temp^(0+128)+1),f
  4999  0F5F  3000               	movlw	0
  5000  0F60  3DE0               	addwfc	((_Temp+1)^(0+128)+1),f
  5001                           
  5002                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  5003  0F61  3000               	movlw	0
  5004  0F62  0260               	subwf	((_Temp+1)^(0+128)+1),w
  5005  0F63  30FA               	movlw	250
  5006  0F64  1903               	skipnz
  5007  0F65  025F               	subwf	(_Temp^(0+128)+1),w
  5008  0F66  1C03               	skipc
  5009  0F67  0008               	return
  5010                           
  5011                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5012  0F68  01DF               	clrf	(_Temp^(0+128)+1)
  5013  0F69  01E0               	clrf	((_Temp+1)^(0+128)+1)
  5014                           
  5015                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5016  0F6A  155E               	bsf	_Temp^(0+128),2
  5017                           
  5018                           ;OverTemperature_B1.c: 70: }
  5019                           ;OverTemperature_B1.c: 71: } else {
  5020  0F6B  0008               	return
  5021  0F6C                     l9544:	
  5022                           
  5023                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5024  0F6C  3001               	movlw	1
  5025  0F6D  07DF               	addwf	(_Temp^(0+128)+1),f
  5026  0F6E  3000               	movlw	0
  5027  0F6F  3DE0               	addwfc	((_Temp+1)^(0+128)+1),f
  5028                           
  5029                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  5030  0F70  3000               	movlw	0
  5031  0F71  0260               	subwf	((_Temp+1)^(0+128)+1),w
  5032  0F72  3002               	movlw	2
  5033  0F73  1903               	skipnz
  5034  0F74  025F               	subwf	(_Temp^(0+128)+1),w
  5035  0F75  1C03               	skipc
  5036  0F76  0008               	return
  5037                           
  5038                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5039  0F77  01DF               	clrf	(_Temp^(0+128)+1)
  5040  0F78  01E0               	clrf	((_Temp+1)^(0+128)+1)
  5041                           
  5042                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5043  0F79  3008               	movlw	8
  5044  0F7A  3EDE               	addlw	_Temp& (0+255)
  5045  0F7B  0086               	movwf	6
  5046  0F7C  0187               	clrf	7
  5047  0F7D  0016               	moviw fsr1++
  5048  0F7E  0401               	iorwf	1,w
  5049  0F7F  1903               	skipnz
  5050  0F80  2FF6               	goto	l1909
  5051  0F81  300A               	movlw	10
  5052  0F82  3EDE               	addlw	_Temp& (0+255)
  5053  0F83  0086               	movwf	6
  5054  0F84  0187               	clrf	7
  5055  0F85  0016               	moviw fsr1++
  5056  0F86  0401               	iorwf	1,w
  5057  0F87  1903               	skipnz
  5058  0F88  2FF6               	goto	l1909
  5059                           
  5060                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5061  0F89  115E               	bcf	_Temp^(0+128),2
  5062                           
  5063                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5064  0F8A  300A               	movlw	10
  5065  0F8B  3EDE               	addlw	_Temp& (0+255)
  5066  0F8C  0086               	movwf	6
  5067  0F8D  0187               	clrf	7
  5068  0F8E  3008               	movlw	8
  5069  0F8F  3EDE               	addlw	_Temp& (0+255)
  5070  0F90  0084               	movwf	4
  5071  0F91  0185               	clrf	5
  5072  0F92  3F40               	moviw [0]fsr1
  5073  0F93  0700               	addwf	0,w
  5074  0F94  0020               	movlb	0	; select bank0
  5075  0F95  00E1               	movwf	??_setTemp_Main
  5076  0F96  3101               	addfsr 0,1
  5077  0F97  3F41               	moviw [1]fsr1
  5078  0F98  3D00               	addwfc	0,w
  5079  0F99  00E2               	movwf	??_setTemp_Main+1
  5080  0F9A  36E2               	lsrf	??_setTemp_Main+1,f
  5081  0F9B  0CE1               	rrf	??_setTemp_Main,f
  5082  0F9C  0861               	movf	??_setTemp_Main,w
  5083  0F9D  0021               	movlb	1	; select bank1
  5084  0F9E  00E4               	movwf	(_Temp^(0+128)+6)
  5085  0F9F  0020               	movlb	0	; select bank0
  5086  0FA0  0862               	movf	??_setTemp_Main+1,w
  5087  0FA1  0021               	movlb	1	; select bank1
  5088  0FA2  00E5               	movwf	((_Temp+1)^(0+128)+6)
  5089                           
  5090                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5091  0FA3  30C7               	movlw	199
  5092  0FA4  00EC               	movwf	(_Temp^(0+128)+14)
  5093  0FA5  3001               	movlw	1
  5094  0FA6  00ED               	movwf	(_Temp^(0+128)+15)
  5095                           
  5096                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5097  0FA7  309F               	movlw	159
  5098  0FA8  00EE               	movwf	(_Temp^(0+128)+16)
  5099  0FA9  3001               	movlw	1
  5100  0FAA  00EF               	movwf	(_Temp^(0+128)+17)
  5101                           
  5102                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5103  0FAB  1CDE               	btfss	_Temp^(0+128),1
  5104  0FAC  2FCD               	goto	l9576
  5105                           
  5106                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5107  0FAD  086D               	movf	((_Temp+1)^(0+128)+14),w
  5108  0FAE  0265               	subwf	((_Temp+1)^(0+128)+6),w
  5109  0FAF  1D03               	skipz
  5110  0FB0  2FB3               	goto	u10765
  5111  0FB1  086C               	movf	(_Temp^(0+128)+14),w
  5112  0FB2  0264               	subwf	(_Temp^(0+128)+6),w
  5113  0FB3                     u10765:	
  5114  0FB3  1C03               	skipc
  5115  0FB4  2FCB               	goto	l9574
  5116                           
  5117                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5118  0FB5  3001               	movlw	1
  5119  0FB6  0020               	movlb	0	; select bank0
  5120  0FB7  00E1               	movwf	??_setTemp_Main
  5121  0FB8  0861               	movf	??_setTemp_Main,w
  5122  0FB9  0021               	movlb	1	; select bank1
  5123  0FBA  07E1               	addwf	(_Temp^(0+128)+3),f
  5124                           
  5125                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5126  0FBB  3003               	movlw	3
  5127  0FBC  0261               	subwf	(_Temp^(0+128)+3),w
  5128  0FBD  1C03               	skipc
  5129  0FBE  2FE3               	goto	l9588
  5130                           
  5131                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5132  0FBF  01E1               	clrf	(_Temp^(0+128)+3)
  5133                           
  5134                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5135  0FC0  10DE               	bcf	_Temp^(0+128),1
  5136                           
  5137                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5138  0FC1  3064               	movlw	100
  5139  0FC2  0020               	movlb	0	; select bank0
  5140  0FC3  00A4               	movwf	setBuz@time
  5141  0FC4  3000               	movlw	0
  5142  0FC5  00A5               	movwf	setBuz@time+1
  5143  0FC6  3002               	movlw	2
  5144  0FC7  3197  274E  318F   	fcall	_setBuz
  5145                           
  5146                           ;OverTemperature_B1.c: 103: }
  5147                           ;OverTemperature_B1.c: 104: } else {
  5148  0FCA  2FE3               	goto	l9588
  5149  0FCB                     l9574:	
  5150                           
  5151                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5152  0FCB  0021               	movlb	1	; select bank1
  5153  0FCC  2FE2               	goto	l9586
  5154  0FCD                     l9576:	
  5155                           ;OverTemperature_B1.c: 106: }
  5156                           ;OverTemperature_B1.c: 107: } else {
  5157                           
  5158                           
  5159                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5160  0FCD  0865               	movf	((_Temp+1)^(0+128)+6),w
  5161  0FCE  026F               	subwf	((_Temp+1)^(0+128)+16),w
  5162  0FCF  1D03               	skipz
  5163  0FD0  2FD3               	goto	u10785
  5164  0FD1  0864               	movf	(_Temp^(0+128)+6),w
  5165  0FD2  026E               	subwf	(_Temp^(0+128)+16),w
  5166  0FD3                     u10785:	
  5167  0FD3  1C03               	skipc
  5168  0FD4  2FE2               	goto	l9586
  5169                           
  5170                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5171  0FD5  3001               	movlw	1
  5172  0FD6  0020               	movlb	0	; select bank0
  5173  0FD7  00E1               	movwf	??_setTemp_Main
  5174  0FD8  0861               	movf	??_setTemp_Main,w
  5175  0FD9  0021               	movlb	1	; select bank1
  5176  0FDA  07E1               	addwf	(_Temp^(0+128)+3),f
  5177                           
  5178                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5179  0FDB  3003               	movlw	3
  5180  0FDC  0261               	subwf	(_Temp^(0+128)+3),w
  5181  0FDD  1C03               	skipc
  5182  0FDE  2FE3               	goto	l9588
  5183                           
  5184                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5185  0FDF  01E1               	clrf	(_Temp^(0+128)+3)
  5186                           
  5187                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5188  0FE0  14DE               	bsf	_Temp^(0+128),1
  5189                           
  5190                           ;OverTemperature_B1.c: 113: }
  5191                           ;OverTemperature_B1.c: 114: } else {
  5192  0FE1  2FE3               	goto	l9588
  5193  0FE2                     l9586:	
  5194                           
  5195                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5196  0FE2  01E1               	clrf	(_Temp^(0+128)+3)
  5197  0FE3                     l9588:	
  5198                           
  5199                           ;OverTemperature_B1.c: 116: }
  5200                           ;OverTemperature_B1.c: 117: }
  5201                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5202  0FE3  0021               	movlb	1	; select bank1
  5203  0FE4  0865               	movf	((_Temp+1)^(0+128)+6),w
  5204  0FE5  0020               	movlb	0	; select bank0
  5205  0FE6  00E1               	movwf	??_setTemp_Main
  5206  0FE7  0861               	movf	??_setTemp_Main,w
  5207  0FE8  00DD               	movwf	setProductData@value
  5208  0FE9  3018               	movlw	24
  5209  0FEA  319D  2518  318F   	fcall	_setProductData
  5210                           
  5211                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5212  0FED  0021               	movlb	1	; select bank1
  5213  0FEE  0864               	movf	(_Temp^(0+128)+6),w
  5214  0FEF  0020               	movlb	0	; select bank0
  5215  0FF0  00E1               	movwf	??_setTemp_Main
  5216  0FF1  0861               	movf	??_setTemp_Main,w
  5217  0FF2  00DD               	movwf	setProductData@value
  5218  0FF3  3019               	movlw	25
  5219  0FF4  319D  2518         	fcall	_setProductData
  5220  0FF6                     l1909:	
  5221                           
  5222                           ;OverTemperature_B1.c: 135: }
  5223                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5224  0FF6  0021               	movlb	1	; select bank1
  5225  0FF7  01E6               	clrf	(_Temp^(0+128)+8)
  5226  0FF8  01E7               	clrf	((_Temp+1)^(0+128)+8)
  5227                           
  5228                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5229  0FF9  01E8               	clrf	(_Temp^(0+128)+10)
  5230  0FFA  01E9               	clrf	((_Temp+1)^(0+128)+10)
  5231                           
  5232                           ;OverTemperature_B1.c: 138: }
  5233                           ;OverTemperature_B1.c: 139: }
  5234                           ;OverTemperature_B1.c: 141: } else {
  5235  0FFB  0008               	return
  5236  0FFC                     l1904:	
  5237                           
  5238                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5239  0FFC  1C2E               	btfss	_myMain^(0+128),0
  5240  0FFD  0008               	return
  5241                           
  5242                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5243  0FFE  145E               	bsf	_Temp^(0+128),0
  5244  0FFF  0008               	return
  5245  1000                     __end_of_setTemp_Main:	
  5246                           
  5247                           	psect	text10
  5248  1C06                     __ptext10:	
  5249 ;; *************** function _Temp_Initialization *****************
  5250 ;; Defined at:
  5251 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;		None
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;		None
  5256 ;; Return value:  Size  Location     Type
  5257 ;;		None               void
  5258 ;; Registers used:
  5259 ;;		status,2, status,0, pclath, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5269 ;;Total ram usage:        0 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    4
  5272 ;; This function calls:
  5273 ;;		_setTemp_Initialization
  5274 ;; This function is called by:
  5275 ;;		_main
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           
  5280                           ;psect for function _Temp_Initialization
  5281  1C06                     _Temp_Initialization:	
  5282                           
  5283                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5284                           
  5285                           ;incstack = 0
  5286                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5287  1C06  3187  27FF         	fcall	_setTemp_Initialization
  5288  1C08  0008               	return
  5289  1C09                     __end_of_Temp_Initialization:	
  5290                           
  5291                           	psect	text11
  5292  07FF                     __ptext11:	
  5293 ;; *************** function _setTemp_Initialization *****************
  5294 ;; Defined at:
  5295 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5296 ;; Parameters:    Size  Location     Type
  5297 ;;		None
  5298 ;; Auto vars:     Size  Location     Type
  5299 ;;		None
  5300 ;; Return value:  Size  Location     Type
  5301 ;;		None               void
  5302 ;; Registers used:
  5303 ;;		None
  5304 ;; Tracked objects:
  5305 ;;		On entry : 0/0
  5306 ;;		On exit  : 0/0
  5307 ;;		Unchanged: 0/0
  5308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5313 ;;Total ram usage:        0 bytes
  5314 ;; Hardware stack levels used:    1
  5315 ;; Hardware stack levels required when called:    3
  5316 ;; This function calls:
  5317 ;;		Nothing
  5318 ;; This function is called by:
  5319 ;;		_Temp_Initialization
  5320 ;; This function uses a non-reentrant model
  5321 ;;
  5322                           
  5323                           
  5324                           ;psect for function _setTemp_Initialization
  5325  07FF                     _setTemp_Initialization:	
  5326                           
  5327                           ;incstack = 0
  5328                           ; Regs used in _setTemp_Initialization: []
  5329  07FF  0008               	return
  5330  0800                     __end_of_setTemp_Initialization:	
  5331                           
  5332                           	psect	text12
  5333  1CA8                     __ptext12:	
  5334 ;; *************** function _Switch_Main *****************
  5335 ;; Defined at:
  5336 ;;		line 72 in file "../src/Switch_B1.c"
  5337 ;; Parameters:    Size  Location     Type
  5338 ;;		None
  5339 ;; Auto vars:     Size  Location     Type
  5340 ;;		None
  5341 ;; Return value:  Size  Location     Type
  5342 ;;		None               void
  5343 ;; Registers used:
  5344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;Total ram usage:        0 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:    8
  5357 ;; This function calls:
  5358 ;;		_TouchPower
  5359 ;;		_setSw_Main
  5360 ;; This function is called by:
  5361 ;;		_main
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           
  5366                           ;psect for function _Switch_Main
  5367  1CA8                     _Switch_Main:	
  5368                           
  5369                           ;Switch_B1.c: 75: setSw_Main(1);
  5370                           
  5371                           ;incstack = 0
  5372                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5373  1CA8  3001               	movlw	1
  5374  1CA9  3181  21EE  319C   	fcall	_setSw_Main
  5375                           
  5376                           ;Switch_B1.c: 79: setSw_Main(2);
  5377  1CAC  3002               	movlw	2
  5378  1CAD  3181  21EE  319C   	fcall	_setSw_Main
  5379                           
  5380                           ;Switch_B1.c: 87: TouchPower();
  5381  1CB0  3190  2066         	fcall	_TouchPower
  5382  1CB2  0008               	return
  5383  1CB3                     __end_of_Switch_Main:	
  5384                           
  5385                           	psect	text13
  5386  01EE                     __ptext13:	
  5387 ;; *************** function _setSw_Main *****************
  5388 ;; Defined at:
  5389 ;;		line 121 in file "../src/Switch_B1.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;  sw              1    wreg     unsigned char 
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  sw              1   72[BANK0 ] unsigned char 
  5394 ;; Return value:  Size  Location     Type
  5395 ;;		None               void
  5396 ;; Registers used:
  5397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5405 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5406 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5407 ;;Total ram usage:        3 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; Hardware stack levels required when called:    7
  5410 ;; This function calls:
  5411 ;;		_SwPointSelect
  5412 ;;		_getMain_All_Error_Status
  5413 ;;		_getSw_KeyStatus
  5414 ;;		_setBuz
  5415 ;;		_setDimmerLights_DimmingOn
  5416 ;;		_setDimmerLights_SwOff
  5417 ;;		_setDimmerLights_SwOn
  5418 ;;		_setRF_Learn
  5419 ;; This function is called by:
  5420 ;;		_Switch_Main
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           
  5425                           ;psect for function _setSw_Main
  5426  01EE                     _setSw_Main:	
  5427                           
  5428                           ;incstack = 0
  5429                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5430                           ;setSw_Main@sw stored from wreg
  5431  01EE  0020               	movlb	0	; select bank0
  5432  01EF  00E8               	movwf	setSw_Main@sw
  5433                           
  5434                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5435  01F0  0868               	movf	setSw_Main@sw,w
  5436  01F1  319E  2639  3181   	fcall	_SwPointSelect
  5437                           
  5438                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5439  01F4  087A               	movf	_Sw,w
  5440  01F5  0086               	movwf	6
  5441  01F6  3001               	movlw	1	; select bank2/3
  5442  01F7  0087               	movwf	7
  5443  01F8  1C01               	btfss	1,0
  5444  01F9  2B54               	goto	l2663
  5445                           
  5446                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5447  01FA  3000               	movlw	0
  5448  01FB  3193  2319  3181   	fcall	_getMain_All_Error_Status
  5449  01FE  3800               	iorlw	0
  5450  01FF  1D03               	skipz
  5451  0200  2A1C               	goto	l9684
  5452                           
  5453                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5454  0201  0A7A               	incf	_Sw,w
  5455  0202  0086               	movwf	6
  5456  0203  3001               	movlw	1	; select bank2/3
  5457  0204  0087               	movwf	7
  5458  0205  1081               	bcf	1,1
  5459                           
  5460                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5461  0206  0020               	movlb	0	; select bank0
  5462  0207  0868               	movf	setSw_Main@sw,w
  5463  0208  3190  20BB  3181   	fcall	_getSw_KeyStatus
  5464  020B  3A01               	xorlw	1
  5465  020C  3000               	movlw	0
  5466  020D  1903               	skipnz
  5467  020E  3001               	movlw	1
  5468  020F  0020               	movlb	0	; select bank0
  5469  0210  00E6               	movwf	??_setSw_Main
  5470  0211  087A               	movf	_Sw,w
  5471  0212  0086               	movwf	6
  5472  0213  3001               	movlw	1	; select bank2/3
  5473  0214  0087               	movwf	7
  5474  0215  0DE6               	rlf	??_setSw_Main,f
  5475  0216  0801               	movf	1,w
  5476  0217  0666               	xorwf	??_setSw_Main,w
  5477  0218  39FD               	andlw	-3
  5478  0219  0666               	xorwf	??_setSw_Main,w
  5479  021A  0081               	movwf	1
  5480                           
  5481                           ;Switch_B1.c: 128: } else {
  5482  021B  2A31               	goto	l2665
  5483  021C                     l9684:	
  5484                           
  5485                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5486  021C  0A7A               	incf	_Sw,w
  5487  021D  0086               	movwf	6
  5488  021E  3001               	movlw	1	; select bank2/3
  5489  021F  0087               	movwf	7
  5490  0220  1881               	btfsc	1,1
  5491  0221  2A31               	goto	l2665
  5492                           
  5493                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5494  0222  0A7A               	incf	_Sw,w
  5495  0223  0086               	movwf	6
  5496  0224  3001               	movlw	1	; select bank2/3
  5497  0225  0087               	movwf	7
  5498  0226  1481               	bsf	1,1
  5499                           
  5500                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5501  0227  087A               	movf	_Sw,w
  5502  0228  0086               	movwf	6
  5503  0229  3001               	movlw	1	; select bank2/3
  5504  022A  0087               	movwf	7
  5505  022B  1081               	bcf	1,1
  5506                           
  5507                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5508  022C  087A               	movf	_Sw,w
  5509  022D  0086               	movwf	6
  5510  022E  3001               	movlw	1	; select bank2/3
  5511  022F  0087               	movwf	7
  5512  0230  1501               	bsf	1,2
  5513  0231                     l2665:	
  5514                           
  5515                           ;Switch_B1.c: 134: }
  5516                           ;Switch_B1.c: 135: }
  5517                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5518  0231  087A               	movf	_Sw,w
  5519  0232  0086               	movwf	6
  5520  0233  3001               	movlw	1	; select bank2/3
  5521  0234  0087               	movwf	7
  5522  0235  1C81               	btfss	1,1
  5523  0236  2B01               	goto	l9734
  5524                           
  5525                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5526  0237  087A               	movf	_Sw,w
  5527  0238  0086               	movwf	6
  5528  0239  3001               	movlw	1	; select bank2/3
  5529  023A  0087               	movwf	7
  5530  023B  1901               	btfsc	1,2
  5531  023C  2A5F               	goto	l9700
  5532                           
  5533                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5534  023D  3001               	movlw	1
  5535  023E  0020               	movlb	0	; select bank0
  5536  023F  00E6               	movwf	??_setSw_Main
  5537  0240  087A               	movf	_Sw,w
  5538  0241  3E02               	addlw	2
  5539  0242  0086               	movwf	6
  5540  0243  3001               	movlw	1	; select bank2/3
  5541  0244  0087               	movwf	7
  5542  0245  0866               	movf	??_setSw_Main,w
  5543  0246  0781               	addwf	1,f
  5544                           
  5545                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= (60 / 20)) {
  5546  0247  087A               	movf	_Sw,w
  5547  0248  3E02               	addlw	2
  5548  0249  0086               	movwf	6
  5549  024A  3001               	movlw	1	; select bank2/3
  5550  024B  0087               	movwf	7
  5551  024C  3003               	movlw	3
  5552  024D  0201               	subwf	1,w
  5553  024E  1C03               	skipc
  5554  024F  0008               	return
  5555                           
  5556                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5557  0250  087A               	movf	_Sw,w
  5558  0251  3E02               	addlw	2
  5559  0252  0086               	movwf	6
  5560  0253  3001               	movlw	1	; select bank2/3
  5561  0254  0087               	movwf	7
  5562  0255  0181               	clrf	1
  5563                           
  5564                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5565  0256  087A               	movf	_Sw,w
  5566  0257  0086               	movwf	6
  5567  0258  3001               	movlw	1	; select bank2/3
  5568  0259  0087               	movwf	7
  5569  025A  1501               	bsf	1,2
  5570                           
  5571                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5572  025B  0868               	movf	setSw_Main@sw,w
  5573  025C  3188  204D         	fcall	_setDimmerLights_SwOn
  5574                           
  5575                           ;Switch_B1.c: 148: }
  5576                           ;Switch_B1.c: 149: } else {
  5577  025E  0008               	return
  5578  025F                     l9700:	
  5579                           
  5580                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5581  025F  087A               	movf	_Sw,w
  5582  0260  0086               	movwf	6
  5583  0261  3001               	movlw	1	; select bank2/3
  5584  0262  0087               	movwf	7
  5585  0263  1981               	btfsc	1,3
  5586  0264  2A91               	goto	l9710
  5587                           
  5588                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5589  0265  087A               	movf	_Sw,w
  5590  0266  3E03               	addlw	3
  5591  0267  0086               	movwf	6
  5592  0268  3001               	movlw	1	; select bank2/3
  5593  0269  0087               	movwf	7
  5594  026A  3001               	movlw	1
  5595  026B  0781               	addwf	1,f
  5596  026C  3141               	addfsr 1,1
  5597  026D  1803               	skipnc
  5598  026E  0A81               	incf	1,f
  5599                           
  5600                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= (1500 / 20)) {
  5601  026F  087A               	movf	_Sw,w
  5602  0270  3E03               	addlw	3
  5603  0271  0086               	movwf	6
  5604  0272  3001               	movlw	1	; select bank2/3
  5605  0273  0087               	movwf	7
  5606  0274  3F40               	moviw [0]fsr1
  5607  0275  0020               	movlb	0	; select bank0
  5608  0276  00E6               	movwf	??_setSw_Main
  5609  0277  3F41               	moviw [1]fsr1
  5610  0278  00E7               	movwf	??_setSw_Main+1
  5611  0279  3000               	movlw	0
  5612  027A  0267               	subwf	??_setSw_Main+1,w
  5613  027B  304B               	movlw	75
  5614  027C  1903               	skipnz
  5615  027D  0266               	subwf	??_setSw_Main,w
  5616  027E  1C03               	skipc
  5617  027F  0008               	return
  5618                           
  5619                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5620  0280  087A               	movf	_Sw,w
  5621  0281  3E03               	addlw	3
  5622  0282  0086               	movwf	6
  5623  0283  3001               	movlw	1	; select bank2/3
  5624  0284  0087               	movwf	7
  5625  0285  3000               	movlw	0
  5626  0286  3FC0               	movwi [0]fsr1
  5627  0287  3FC1               	movwi [1]fsr1
  5628                           
  5629                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5630  0288  087A               	movf	_Sw,w
  5631  0289  0086               	movwf	6
  5632  028A  3001               	movlw	1	; select bank2/3
  5633  028B  0087               	movwf	7
  5634  028C  1581               	bsf	1,3
  5635                           
  5636                           ;Switch_B1.c: 157: setDimmerLights_DimmingOn(sw);
  5637  028D  0868               	movf	setSw_Main@sw,w
  5638  028E  3191  21F2         	fcall	_setDimmerLights_DimmingOn
  5639                           
  5640                           ;Switch_B1.c: 160: }
  5641                           ;Switch_B1.c: 161: } else {
  5642  0290  0008               	return
  5643  0291                     l9710:	
  5644                           
  5645                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5646  0291  087A               	movf	_Sw,w
  5647  0292  0086               	movwf	6
  5648  0293  3001               	movlw	1	; select bank2/3
  5649  0294  0087               	movwf	7
  5650  0295  1A01               	btfsc	1,4
  5651  0296  2ACF               	goto	l9724
  5652                           
  5653                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5654  0297  087A               	movf	_Sw,w
  5655  0298  3E05               	addlw	5
  5656  0299  0086               	movwf	6
  5657  029A  3001               	movlw	1	; select bank2/3
  5658  029B  0087               	movwf	7
  5659  029C  3001               	movlw	1
  5660  029D  0781               	addwf	1,f
  5661  029E  3141               	addfsr 1,1
  5662  029F  1803               	skipnc
  5663  02A0  0A81               	incf	1,f
  5664                           
  5665                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= (1500 / 20)) {
  5666  02A1  087A               	movf	_Sw,w
  5667  02A2  3E05               	addlw	5
  5668  02A3  0086               	movwf	6
  5669  02A4  3001               	movlw	1	; select bank2/3
  5670  02A5  0087               	movwf	7
  5671  02A6  3F40               	moviw [0]fsr1
  5672  02A7  0020               	movlb	0	; select bank0
  5673  02A8  00E6               	movwf	??_setSw_Main
  5674  02A9  3F41               	moviw [1]fsr1
  5675  02AA  00E7               	movwf	??_setSw_Main+1
  5676  02AB  3000               	movlw	0
  5677  02AC  0267               	subwf	??_setSw_Main+1,w
  5678  02AD  304B               	movlw	75
  5679  02AE  1903               	skipnz
  5680  02AF  0266               	subwf	??_setSw_Main,w
  5681  02B0  1C03               	skipc
  5682  02B1  0008               	return
  5683                           
  5684                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5685  02B2  087A               	movf	_Sw,w
  5686  02B3  3E05               	addlw	5
  5687  02B4  0086               	movwf	6
  5688  02B5  3001               	movlw	1	; select bank2/3
  5689  02B6  0087               	movwf	7
  5690  02B7  3000               	movlw	0
  5691  02B8  3FC0               	movwi [0]fsr1
  5692  02B9  3FC1               	movwi [1]fsr1
  5693                           
  5694                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5695  02BA  087A               	movf	_Sw,w
  5696  02BB  0086               	movwf	6
  5697  02BC  3001               	movlw	1	; select bank2/3
  5698  02BD  0087               	movwf	7
  5699  02BE  1601               	bsf	1,4
  5700                           
  5701                           ;Switch_B1.c: 169: setRF_Learn(1);
  5702  02BF  3001               	movlw	1
  5703  02C0  319E  2604  3181   	fcall	_setRF_Learn
  5704                           
  5705                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5706  02C3  0021               	movlb	1	; select bank1
  5707  02C4  1EAE               	btfss	_myMain^(0+128),5
  5708  02C5  0008               	return
  5709                           
  5710                           ;Switch_B1.c: 171: setBuz(2, 100);
  5711  02C6  3064               	movlw	100
  5712  02C7  0020               	movlb	0	; select bank0
  5713  02C8  00A4               	movwf	setBuz@time
  5714  02C9  3000               	movlw	0
  5715  02CA  00A5               	movwf	setBuz@time+1
  5716  02CB  3002               	movlw	2
  5717  02CC  3197  274E         	fcall	_setBuz
  5718                           
  5719                           ;Switch_B1.c: 172: }
  5720                           ;Switch_B1.c: 176: }
  5721                           ;Switch_B1.c: 177: } else {
  5722  02CE  0008               	return
  5723  02CF                     l9724:	
  5724                           
  5725                           ;Switch_B1.c: 178: if (Sw->Hold3 == 0) {
  5726  02CF  087A               	movf	_Sw,w
  5727  02D0  0086               	movwf	6
  5728  02D1  3001               	movlw	1	; select bank2/3
  5729  02D2  0087               	movwf	7
  5730  02D3  1A81               	btfsc	1,5
  5731  02D4  0008               	return
  5732                           
  5733                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5734  02D5  087A               	movf	_Sw,w
  5735  02D6  3E07               	addlw	7
  5736  02D7  0086               	movwf	6
  5737  02D8  3001               	movlw	1	; select bank2/3
  5738  02D9  0087               	movwf	7
  5739  02DA  3001               	movlw	1
  5740  02DB  0781               	addwf	1,f
  5741  02DC  3141               	addfsr 1,1
  5742  02DD  1803               	skipnc
  5743  02DE  0A81               	incf	1,f
  5744                           
  5745                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= (3000/ 20)) {
  5746  02DF  087A               	movf	_Sw,w
  5747  02E0  3E07               	addlw	7
  5748  02E1  0086               	movwf	6
  5749  02E2  3001               	movlw	1	; select bank2/3
  5750  02E3  0087               	movwf	7
  5751  02E4  3F40               	moviw [0]fsr1
  5752  02E5  0020               	movlb	0	; select bank0
  5753  02E6  00E6               	movwf	??_setSw_Main
  5754  02E7  3F41               	moviw [1]fsr1
  5755  02E8  00E7               	movwf	??_setSw_Main+1
  5756  02E9  3000               	movlw	0
  5757  02EA  0267               	subwf	??_setSw_Main+1,w
  5758  02EB  3096               	movlw	150
  5759  02EC  1903               	skipnz
  5760  02ED  0266               	subwf	??_setSw_Main,w
  5761  02EE  1C03               	skipc
  5762  02EF  0008               	return
  5763                           
  5764                           ;Switch_B1.c: 181: Sw->Hold3Time = 0;
  5765  02F0  087A               	movf	_Sw,w
  5766  02F1  3E07               	addlw	7
  5767  02F2  0086               	movwf	6
  5768  02F3  3001               	movlw	1	; select bank2/3
  5769  02F4  0087               	movwf	7
  5770  02F5  3000               	movlw	0
  5771  02F6  3FC0               	movwi [0]fsr1
  5772  02F7  3FC1               	movwi [1]fsr1
  5773                           
  5774                           ;Switch_B1.c: 182: Sw->Hold3 = 1;
  5775  02F8  087A               	movf	_Sw,w
  5776  02F9  0086               	movwf	6
  5777  02FA  3001               	movlw	1	; select bank2/3
  5778  02FB  0087               	movwf	7
  5779  02FC  1681               	bsf	1,5
  5780                           
  5781                           ;Switch_B1.c: 185: setRF_Learn(0);
  5782  02FD  3000               	movlw	0
  5783  02FE  319E  2604         	fcall	_setRF_Learn
  5784                           
  5785                           ;Switch_B1.c: 188: }
  5786                           ;Switch_B1.c: 189: }
  5787                           ;Switch_B1.c: 190: }
  5788                           ;Switch_B1.c: 191: }
  5789                           ;Switch_B1.c: 192: }
  5790                           ;Switch_B1.c: 193: } else {
  5791  0300  0008               	return
  5792  0301                     l9734:	
  5793                           
  5794                           ;Switch_B1.c: 194: if (Sw->Debounce == 1) {
  5795  0301  087A               	movf	_Sw,w
  5796  0302  0086               	movwf	6
  5797  0303  3001               	movlw	1	; select bank2/3
  5798  0304  0087               	movwf	7
  5799  0305  1D01               	btfss	1,2
  5800  0306  0008               	return
  5801                           
  5802                           ;Switch_B1.c: 195: Sw->DebounceTime++;
  5803  0307  3001               	movlw	1
  5804  0308  0020               	movlb	0	; select bank0
  5805  0309  00E6               	movwf	??_setSw_Main
  5806  030A  087A               	movf	_Sw,w
  5807  030B  3E02               	addlw	2
  5808  030C  0086               	movwf	6
  5809  030D  3001               	movlw	1	; select bank2/3
  5810  030E  0087               	movwf	7
  5811  030F  0866               	movf	??_setSw_Main,w
  5812  0310  0781               	addwf	1,f
  5813                           
  5814                           ;Switch_B1.c: 196: if (Sw->DebounceTime >= (60 / 20)) {
  5815  0311  087A               	movf	_Sw,w
  5816  0312  3E02               	addlw	2
  5817  0313  0086               	movwf	6
  5818  0314  3001               	movlw	1	; select bank2/3
  5819  0315  0087               	movwf	7
  5820  0316  3003               	movlw	3
  5821  0317  0201               	subwf	1,w
  5822  0318  1C03               	skipc
  5823  0319  0008               	return
  5824                           
  5825                           ;Switch_B1.c: 197: Sw->DebounceTime = 0;
  5826  031A  087A               	movf	_Sw,w
  5827  031B  3E02               	addlw	2
  5828  031C  0086               	movwf	6
  5829  031D  3001               	movlw	1	; select bank2/3
  5830  031E  0087               	movwf	7
  5831  031F  0181               	clrf	1
  5832                           
  5833                           ;Switch_B1.c: 198: Sw->Debounce = 0;
  5834  0320  087A               	movf	_Sw,w
  5835  0321  0086               	movwf	6
  5836  0322  3001               	movlw	1	; select bank2/3
  5837  0323  0087               	movwf	7
  5838  0324  1101               	bcf	1,2
  5839                           
  5840                           ;Switch_B1.c: 199: Sw->Hold1Time = 0;
  5841  0325  087A               	movf	_Sw,w
  5842  0326  3E03               	addlw	3
  5843  0327  0086               	movwf	6
  5844  0328  3001               	movlw	1	; select bank2/3
  5845  0329  0087               	movwf	7
  5846  032A  3000               	movlw	0
  5847  032B  3FC0               	movwi [0]fsr1
  5848  032C  3FC1               	movwi [1]fsr1
  5849                           
  5850                           ;Switch_B1.c: 200: Sw->Hold1 = 0;
  5851  032D  087A               	movf	_Sw,w
  5852  032E  0086               	movwf	6
  5853  032F  3001               	movlw	1	; select bank2/3
  5854  0330  0087               	movwf	7
  5855  0331  1181               	bcf	1,3
  5856                           
  5857                           ;Switch_B1.c: 201: Sw->Hold2Time = 0;
  5858  0332  087A               	movf	_Sw,w
  5859  0333  3E05               	addlw	5
  5860  0334  0086               	movwf	6
  5861  0335  3001               	movlw	1	; select bank2/3
  5862  0336  0087               	movwf	7
  5863  0337  3000               	movlw	0
  5864  0338  3FC0               	movwi [0]fsr1
  5865  0339  3FC1               	movwi [1]fsr1
  5866                           
  5867                           ;Switch_B1.c: 202: Sw->Hold2 = 0;
  5868  033A  087A               	movf	_Sw,w
  5869  033B  0086               	movwf	6
  5870  033C  3001               	movlw	1	; select bank2/3
  5871  033D  0087               	movwf	7
  5872  033E  1201               	bcf	1,4
  5873                           
  5874                           ;Switch_B1.c: 203: Sw->Hold3Time = 0;
  5875  033F  087A               	movf	_Sw,w
  5876  0340  3E07               	addlw	7
  5877  0341  0086               	movwf	6
  5878  0342  3001               	movlw	1	; select bank2/3
  5879  0343  0087               	movwf	7
  5880  0344  3000               	movlw	0
  5881  0345  3FC0               	movwi [0]fsr1
  5882  0346  3FC1               	movwi [1]fsr1
  5883                           
  5884                           ;Switch_B1.c: 204: Sw->Hold3 = 0;
  5885  0347  087A               	movf	_Sw,w
  5886  0348  0086               	movwf	6
  5887  0349  3001               	movlw	1	; select bank2/3
  5888  034A  0087               	movwf	7
  5889  034B  1281               	bcf	1,5
  5890                           
  5891                           ;Switch_B1.c: 206: setDimmerLights_SwOff(sw);
  5892  034C  0868               	movf	setSw_Main@sw,w
  5893  034D  3188  2007  3181   	fcall	_setDimmerLights_SwOff
  5894                           
  5895                           ;Switch_B1.c: 210: setRF_Learn(0);
  5896  0350  3000               	movlw	0
  5897  0351  319E  2604         	fcall	_setRF_Learn
  5898                           
  5899                           ;Switch_B1.c: 212: }
  5900                           ;Switch_B1.c: 213: }
  5901                           ;Switch_B1.c: 214: }
  5902                           ;Switch_B1.c: 215: } else {
  5903  0353  0008               	return
  5904  0354                     l2663:	
  5905                           
  5906                           ;Switch_B1.c: 216: if (myMain.PowerON == 1) {
  5907  0354  0021               	movlb	1	; select bank1
  5908  0355  1C2E               	btfss	_myMain^(0+128),0
  5909  0356  0008               	return
  5910                           
  5911                           ;Switch_B1.c: 217: Sw->Enable = 1;
  5912  0357  087A               	movf	_Sw,w
  5913  0358  0086               	movwf	6
  5914  0359  3001               	movlw	1	; select bank2/3
  5915  035A  0087               	movwf	7
  5916  035B  1401               	bsf	1,0
  5917  035C  0008               	return
  5918  035D                     __end_of_setSw_Main:	
  5919                           
  5920                           	psect	text14
  5921  1E04                     __ptext14:	
  5922 ;; *************** function _setRF_Learn *****************
  5923 ;; Defined at:
  5924 ;;		line 23 in file "../src/RF_Control_B1.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;  command         1    wreg     unsigned char 
  5927 ;; Auto vars:     Size  Location     Type
  5928 ;;  command         1    4[COMMON] unsigned char 
  5929 ;; Return value:  Size  Location     Type
  5930 ;;		None               void
  5931 ;; Registers used:
  5932 ;;		wreg, status,2, status,0
  5933 ;; Tracked objects:
  5934 ;;		On entry : 0/0
  5935 ;;		On exit  : 0/0
  5936 ;;		Unchanged: 0/0
  5937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5939 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5940 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5941 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;Total ram usage:        2 bytes
  5943 ;; Hardware stack levels used:    1
  5944 ;; Hardware stack levels required when called:    3
  5945 ;; This function calls:
  5946 ;;		Nothing
  5947 ;; This function is called by:
  5948 ;;		_setSw_Main
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952                           
  5953                           ;psect for function _setRF_Learn
  5954  1E04                     _setRF_Learn:	
  5955                           
  5956                           ;incstack = 0
  5957                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5958                           ;setRF_Learn@command stored from wreg
  5959  1E04  00F4               	movwf	setRF_Learn@command
  5960                           
  5961                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5962  1E05  0874               	movf	setRF_Learn@command,w
  5963  1E06  3A01               	xorlw	1
  5964  1E07  3000               	movlw	0
  5965  1E08  1903               	skipnz
  5966  1E09  3001               	movlw	1
  5967  1E0A  00F3               	movwf	??_setRF_Learn
  5968  1E0B  0EF3               	swapf	??_setRF_Learn,f
  5969  1E0C  0DF3               	rlf	??_setRF_Learn,f
  5970  1E0D  0DF3               	rlf	??_setRF_Learn,f
  5971  1E0E  0021               	movlb	1	; select bank1
  5972  1E0F  0820               	movf	_RF1^(0+128),w
  5973  1E10  0673               	xorwf	??_setRF_Learn,w
  5974  1E11  39BF               	andlw	-65
  5975  1E12  0673               	xorwf	??_setRF_Learn,w
  5976  1E13  00A0               	movwf	_RF1^(0+128)
  5977  1E14  0008               	return
  5978  1E15                     __end_of_setRF_Learn:	
  5979                           
  5980                           	psect	text15
  5981  11F2                     __ptext15:	
  5982 ;; *************** function _setDimmerLights_DimmingOn *****************
  5983 ;; Defined at:
  5984 ;;		line 729 in file "../src/Dimmer_B1.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;  sw              1    wreg     unsigned char 
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;  sw              1    5[COMMON] unsigned char 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;		None               void
  5991 ;; Registers used:
  5992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;Total ram usage:        1 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    4
  6005 ;; This function calls:
  6006 ;;		_DimmerLights_SelectPointer
  6007 ;; This function is called by:
  6008 ;;		_setSw_Main
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function _setDimmerLights_DimmingOn
  6014  11F2                     _setDimmerLights_DimmingOn:	
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6018                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6019  11F2  00F5               	movwf	setDimmerLights_DimmingOn@sw
  6020                           
  6021                           ;Dimmer_B1.c: 735: DimmerLights_SelectPointer(sw);
  6022  11F3  0875               	movf	setDimmerLights_DimmingOn@sw,w
  6023  11F4  319E  26DD  3191   	fcall	_DimmerLights_SelectPointer
  6024                           
  6025                           ;Dimmer_B1.c: 736: if (DimmerLights->Trigger == 0) {
  6026  11F7  0879               	movf	_DimmerLights,w
  6027  11F8  0086               	movwf	6
  6028  11F9  3001               	movlw	1	; select bank2/3
  6029  11FA  0087               	movwf	7
  6030  11FB  1901               	btfsc	1,2
  6031  11FC  0008               	return
  6032                           
  6033                           ;Dimmer_B1.c: 737: if (DimmerLights->SwFlag == 1) {
  6034  11FD  0879               	movf	_DimmerLights,w
  6035  11FE  0086               	movwf	6
  6036  11FF  3001               	movlw	1	; select bank2/3
  6037  1200  0087               	movwf	7
  6038  1201  1C81               	btfss	1,1
  6039  1202  0008               	return
  6040                           
  6041                           ;Dimmer_B1.c: 738: DimmerLights->Status = 1;
  6042  1203  0879               	movf	_DimmerLights,w
  6043  1204  0086               	movwf	6
  6044  1205  3001               	movlw	1	; select bank2/3
  6045  1206  0087               	movwf	7
  6046  1207  1401               	bsf	1,0
  6047                           
  6048                           ;Dimmer_B1.c: 740: DimmerLights->DimmingSwFlag = 1;
  6049  1208  0879               	movf	_DimmerLights,w
  6050  1209  0086               	movwf	6
  6051  120A  3001               	movlw	1	; select bank2/3
  6052  120B  0087               	movwf	7
  6053  120C  1601               	bsf	1,4
  6054                           
  6055                           ;Dimmer_B1.c: 741: DimmerLights->DimmingTrigger = 1;
  6056  120D  0879               	movf	_DimmerLights,w
  6057  120E  0086               	movwf	6
  6058  120F  3001               	movlw	1	; select bank2/3
  6059  1210  0087               	movwf	7
  6060  1211  1681               	bsf	1,5
  6061                           
  6062                           ;Dimmer_B1.c: 742: DimmerLights->DimmingSwitch = 1;
  6063  1212  0879               	movf	_DimmerLights,w
  6064  1213  0086               	movwf	6
  6065  1214  3001               	movlw	1	; select bank2/3
  6066  1215  0087               	movwf	7
  6067  1216  1701               	bsf	1,6
  6068  1217  0008               	return
  6069  1218                     __end_of_setDimmerLights_DimmingOn:	
  6070                           
  6071                           	psect	text16
  6072  10BB                     __ptext16:	
  6073 ;; *************** function _getSw_KeyStatus *****************
  6074 ;; Defined at:
  6075 ;;		line 223 in file "../src/Switch_B1.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;  sw              1    wreg     unsigned char 
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;  sw              1    7[COMMON] unsigned char 
  6080 ;;  status          1    6[COMMON] unsigned char 
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  1    wreg      unsigned char 
  6083 ;; Registers used:
  6084 ;;		wreg, status,2
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6094 ;;Total ram usage:        5 bytes
  6095 ;; Hardware stack levels used:    1
  6096 ;; Hardware stack levels required when called:    3
  6097 ;; This function calls:
  6098 ;;		Nothing
  6099 ;; This function is called by:
  6100 ;;		_setSw_Main
  6101 ;; This function uses a non-reentrant model
  6102 ;;
  6103                           
  6104                           
  6105                           ;psect for function _getSw_KeyStatus
  6106  10BB                     _getSw_KeyStatus:	
  6107                           
  6108                           ;incstack = 0
  6109                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6110                           ;getSw_KeyStatus@sw stored from wreg
  6111  10BB  00F7               	movwf	getSw_KeyStatus@sw
  6112                           
  6113                           ;Switch_B1.c: 224: char status = 0;
  6114  10BC  01F6               	clrf	getSw_KeyStatus@status
  6115                           
  6116                           ;Switch_B1.c: 236: if (sw == 1) {
  6117  10BD  0877               	movf	getSw_KeyStatus@sw,w
  6118  10BE  3A01               	xorlw	1
  6119  10BF  1D03               	skipz
  6120  10C0  28CA               	goto	l7202
  6121                           
  6122                           ;Switch_B1.c: 237: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6123  10C1  01F4               	clrf	_getSw_KeyStatus$6137
  6124  10C2  0AF4               	incf	_getSw_KeyStatus$6137,f
  6125  10C3  0020               	movlb	0	; select bank0
  6126  10C4  1F0C               	btfss	12,6	;volatile
  6127  10C5  1A0C               	btfsc	12,4	;volatile
  6128  10C6  28C8               	goto	l7200
  6129  10C7  01F4               	clrf	_getSw_KeyStatus$6137
  6130  10C8                     l7200:	
  6131  10C8  0874               	movf	_getSw_KeyStatus$6137,w
  6132  10C9  28D6               	goto	L2
  6133  10CA                     l7202:	
  6134                           ;Switch_B1.c: 238: } else if (sw == 2) {
  6135                           
  6136  10CA  0877               	movf	getSw_KeyStatus@sw,w
  6137  10CB  3A02               	xorlw	2
  6138  10CC  1D03               	skipz
  6139  10CD  28D9               	goto	l7212
  6140                           
  6141                           ;Switch_B1.c: 239: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6142  10CE  01F5               	clrf	_getSw_KeyStatus$6138
  6143  10CF  0AF5               	incf	_getSw_KeyStatus$6138,f
  6144  10D0  0020               	movlb	0	; select bank0
  6145  10D1  1C0C               	btfss	12,0	;volatile
  6146  10D2  188D               	btfsc	13,1	;volatile
  6147  10D3  28D5               	goto	l7210
  6148  10D4  01F5               	clrf	_getSw_KeyStatus$6138
  6149  10D5                     l7210:	
  6150  10D5  0875               	movf	_getSw_KeyStatus$6138,w
  6151  10D6                     L2:	
  6152  10D6  00F3               	movwf	??_getSw_KeyStatus
  6153  10D7  0873               	movf	??_getSw_KeyStatus,w
  6154  10D8  00F6               	movwf	getSw_KeyStatus@status
  6155  10D9                     l7212:	
  6156                           
  6157                           ;Switch_B1.c: 240: }
  6158                           ;Switch_B1.c: 247: return status;
  6159  10D9  0876               	movf	getSw_KeyStatus@status,w
  6160  10DA  0008               	return
  6161  10DB                     __end_of_getSw_KeyStatus:	
  6162                           
  6163                           	psect	text17
  6164  1E39                     __ptext17:	
  6165 ;; *************** function _SwPointSelect *****************
  6166 ;; Defined at:
  6167 ;;		line 25 in file "../src/Switch_B1.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  sw              1    wreg     unsigned char 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  sw              1    4[COMMON] unsigned char 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;		None               void
  6174 ;; Registers used:
  6175 ;;		wreg
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6182 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6184 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6185 ;;Total ram usage:        2 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    3
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_setSw_Main
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           
  6196                           ;psect for function _SwPointSelect
  6197  1E39                     _SwPointSelect:	
  6198                           
  6199                           ;incstack = 0
  6200                           ; Regs used in _SwPointSelect: [wreg]
  6201                           ;SwPointSelect@sw stored from wreg
  6202  1E39  00F4               	movwf	SwPointSelect@sw
  6203                           
  6204                           ;Switch_B1.c: 28: if (sw == 1) {
  6205  1E3A  0874               	movf	SwPointSelect@sw,w
  6206  1E3B  3A01               	xorlw	1
  6207  1E3C  1D03               	skipz
  6208  1E3D  2E43               	goto	l7186
  6209                           
  6210                           ;Switch_B1.c: 29: Sw = &Sw1;
  6211  1E3E  30D0               	movlw	_Sw1& (0+255)
  6212  1E3F  00F3               	movwf	??_SwPointSelect
  6213  1E40  0873               	movf	??_SwPointSelect,w
  6214  1E41  00FA               	movwf	_Sw
  6215                           
  6216                           ;Switch_B1.c: 30: }
  6217  1E42  0008               	return
  6218  1E43                     l7186:	
  6219                           
  6220                           ;Switch_B1.c: 33: else if (sw == 2) {
  6221  1E43  0874               	movf	SwPointSelect@sw,w
  6222  1E44  3A02               	xorlw	2
  6223  1E45  1D03               	skipz
  6224  1E46  0008               	return
  6225                           
  6226                           ;Switch_B1.c: 34: Sw = &Sw2;
  6227  1E47  30D9               	movlw	_Sw2& (0+255)
  6228  1E48  00F3               	movwf	??_SwPointSelect
  6229  1E49  0873               	movf	??_SwPointSelect,w
  6230  1E4A  00FA               	movwf	_Sw
  6231  1E4B  0008               	return
  6232  1E4C                     __end_of_SwPointSelect:	
  6233                           
  6234                           	psect	text18
  6235  1CEF                     __ptext18:	
  6236 ;; *************** function _Switch_Initialization *****************
  6237 ;; Defined at:
  6238 ;;		line 46 in file "../src/Switch_B1.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;		None
  6241 ;; Auto vars:     Size  Location     Type
  6242 ;;		None
  6243 ;; Return value:  Size  Location     Type
  6244 ;;		None               void
  6245 ;; Registers used:
  6246 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6247 ;; Tracked objects:
  6248 ;;		On entry : 0/0
  6249 ;;		On exit  : 0/0
  6250 ;;		Unchanged: 0/0
  6251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6256 ;;Total ram usage:        0 bytes
  6257 ;; Hardware stack levels used:    1
  6258 ;; Hardware stack levels required when called:    6
  6259 ;; This function calls:
  6260 ;;		_TouchPower
  6261 ;;		_setSw_Initialization
  6262 ;; This function is called by:
  6263 ;;		_main
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           
  6268                           ;psect for function _Switch_Initialization
  6269  1CEF                     _Switch_Initialization:	
  6270                           
  6271                           ;Switch_B1.c: 47: TouchPower();
  6272                           
  6273                           ;incstack = 0
  6274                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6275  1CEF  3190  2066  319C   	fcall	_TouchPower
  6276                           
  6277                           ;Switch_B1.c: 49: WPUB1 = 0;
  6278  1CF2  0024               	movlb	4	; select bank4
  6279  1CF3  108D               	bcf	13,1	;volatile
  6280                           
  6281                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6282  1CF4  3001               	movlw	1
  6283  1CF5  3188  2000  319C   	fcall	_setSw_Initialization
  6284                           
  6285                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6286  1CF8  3002               	movlw	2
  6287  1CF9  3188  2000         	fcall	_setSw_Initialization
  6288  1CFB  0008               	return
  6289  1CFC                     __end_of_Switch_Initialization:	
  6290                           
  6291                           	psect	text19
  6292  0800                     __ptext19:	
  6293 ;; *************** function _setSw_Initialization *****************
  6294 ;; Defined at:
  6295 ;;		line 93 in file "../src/Switch_B1.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;  sw              1    wreg     unsigned char 
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;  sw              1    7[COMMON] unsigned char 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;		None               void
  6302 ;; Registers used:
  6303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;Total ram usage:        1 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    5
  6316 ;; This function calls:
  6317 ;;		_setLED
  6318 ;; This function is called by:
  6319 ;;		_Switch_Initialization
  6320 ;; This function uses a non-reentrant model
  6321 ;;
  6322                           
  6323                           
  6324                           ;psect for function _setSw_Initialization
  6325  0800                     _setSw_Initialization:	
  6326                           
  6327                           ;incstack = 0
  6328                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6329                           ;setSw_Initialization@sw stored from wreg
  6330  0800  00F7               	movwf	setSw_Initialization@sw
  6331                           
  6332                           ;Switch_B1.c: 94: setLED(sw, 1);
  6333  0801  01F5               	clrf	setLED@command
  6334  0802  0AF5               	incf	setLED@command,f
  6335  0803  0877               	movf	setSw_Initialization@sw,w
  6336  0804  3189  2102         	fcall	_setLED
  6337  0806  0008               	return
  6338  0807                     __end_of_setSw_Initialization:	
  6339                           
  6340                           	psect	text20
  6341  1066                     __ptext20:	
  6342 ;; *************** function _TouchPower *****************
  6343 ;; Defined at:
  6344 ;;		line 10 in file "../src/Switch_B1.c"
  6345 ;; Parameters:    Size  Location     Type
  6346 ;;		None
  6347 ;; Auto vars:     Size  Location     Type
  6348 ;;		None
  6349 ;; Return value:  Size  Location     Type
  6350 ;;		None               void
  6351 ;; Registers used:
  6352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6353 ;; Tracked objects:
  6354 ;;		On entry : 0/0
  6355 ;;		On exit  : 0/0
  6356 ;;		Unchanged: 0/0
  6357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;Total ram usage:        0 bytes
  6363 ;; Hardware stack levels used:    1
  6364 ;; Hardware stack levels required when called:    4
  6365 ;; This function calls:
  6366 ;;		_Timeout_Counter
  6367 ;;		_set_TimeoutCleared
  6368 ;; This function is called by:
  6369 ;;		_Switch_Initialization
  6370 ;;		_Switch_Main
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           
  6375                           ;psect for function _TouchPower
  6376  1066                     _TouchPower:	
  6377                           
  6378                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6379                           
  6380                           ;incstack = 0
  6381                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6382  1066  0021               	movlb	1	; select bank1
  6383  1067  1C2E               	btfss	_myMain^(0+128),0
  6384  1068  0008               	return
  6385                           
  6386                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6387  1069  0020               	movlb	0	; select bank0
  6388  106A  1A8E               	btfsc	14,5	;volatile
  6389  106B  0008               	return
  6390  106C  2872               	goto	l9668
  6391  106D                     l2641:	
  6392                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6393                           
  6394                           
  6395                           ;Switch_B1.c: 14: RC5 = 1;
  6396  106D  0020               	movlb	0	; select bank0
  6397  106E  168E               	bsf	14,5	;volatile
  6398                           
  6399                           ;Switch_B1.c: 15: Timeout_Counter();
  6400  106F  319E  26C8  3190   	fcall	_Timeout_Counter
  6401  1072                     l9668:	
  6402  1072  0020               	movlb	0	; select bank0
  6403  1073  1A8E               	btfsc	14,5	;volatile
  6404  1074  2878               	goto	l9672
  6405  1075  0021               	movlb	1	; select bank1
  6406  1076  1D39               	btfss	(_myMain^(0+128)+11),2
  6407  1077  286D               	goto	l2641
  6408  1078                     l9672:	
  6409                           
  6410                           ;Switch_B1.c: 16: }
  6411                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6412  1078  319C  2425         	fcall	_set_TimeoutCleared
  6413  107A  0008               	return
  6414  107B                     __end_of_TouchPower:	
  6415                           
  6416                           	psect	text21
  6417  1C25                     __ptext21:	
  6418 ;; *************** function _set_TimeoutCleared *****************
  6419 ;; Defined at:
  6420 ;;		line 282 in file "../src/Main_B1.c"
  6421 ;; Parameters:    Size  Location     Type
  6422 ;;		None
  6423 ;; Auto vars:     Size  Location     Type
  6424 ;;		None
  6425 ;; Return value:  Size  Location     Type
  6426 ;;		None               void
  6427 ;; Registers used:
  6428 ;;		status,2
  6429 ;; Tracked objects:
  6430 ;;		On entry : 0/0
  6431 ;;		On exit  : 0/0
  6432 ;;		Unchanged: 0/0
  6433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;Total ram usage:        0 bytes
  6439 ;; Hardware stack levels used:    1
  6440 ;; Hardware stack levels required when called:    3
  6441 ;; This function calls:
  6442 ;;		Nothing
  6443 ;; This function is called by:
  6444 ;;		_getAD
  6445 ;;		_TouchPower
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           
  6450                           ;psect for function _set_TimeoutCleared
  6451  1C25                     _set_TimeoutCleared:	
  6452                           
  6453                           ;Main_B1.c: 283: myMain.Timeout = 0;
  6454                           
  6455                           ;incstack = 0
  6456                           ; Regs used in _set_TimeoutCleared: [status,2]
  6457  1C25  0021               	movlb	1	; select bank1
  6458  1C26  1139               	bcf	(_myMain^(0+128)+11),2
  6459                           
  6460                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  6461  1C27  01BA               	clrf	(_myMain^(0+128)+12)
  6462  1C28  01BB               	clrf	((_myMain+1)^(0+128)+12)
  6463  1C29  0008               	return
  6464  1C2A                     __end_of_set_TimeoutCleared:	
  6465                           
  6466                           	psect	text22
  6467  1EC8                     __ptext22:	
  6468 ;; *************** function _Timeout_Counter *****************
  6469 ;; Defined at:
  6470 ;;		line 273 in file "../src/Main_B1.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;		None
  6473 ;; Auto vars:     Size  Location     Type
  6474 ;;		None
  6475 ;; Return value:  Size  Location     Type
  6476 ;;		None               void
  6477 ;; Registers used:
  6478 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6488 ;;Total ram usage:        0 bytes
  6489 ;; Hardware stack levels used:    1
  6490 ;; Hardware stack levels required when called:    3
  6491 ;; This function calls:
  6492 ;;		Nothing
  6493 ;; This function is called by:
  6494 ;;		_getAD
  6495 ;;		_TouchPower
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           
  6500                           ;psect for function _Timeout_Counter
  6501  1EC8                     _Timeout_Counter:	
  6502                           
  6503                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  6504                           
  6505                           ;incstack = 0
  6506                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6507  1EC8  3001               	movlw	1
  6508  1EC9  0021               	movlb	1	; select bank1
  6509  1ECA  07BA               	addwf	(_myMain^(0+128)+12),f
  6510  1ECB  3000               	movlw	0
  6511  1ECC  3DBB               	addwfc	((_myMain+1)^(0+128)+12),f
  6512                           
  6513                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  6514  1ECD  300C               	movlw	12
  6515  1ECE  3EAE               	addlw	_myMain& (0+255)
  6516  1ECF  0086               	movwf	6
  6517  1ED0  0187               	clrf	7
  6518  1ED1  3F40               	moviw [0]fsr1
  6519  1ED2  3AA8               	xorlw	168
  6520  1ED3  1D03               	skipz
  6521  1ED4  2ED7               	goto	u10225
  6522  1ED5  3F41               	moviw [1]fsr1
  6523  1ED6  3A61               	xorlw	97
  6524  1ED7                     u10225:	
  6525  1ED7  1D03               	skipz
  6526  1ED8  0008               	return
  6527                           
  6528                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  6529  1ED9  01BA               	clrf	(_myMain^(0+128)+12)
  6530  1EDA  01BB               	clrf	((_myMain+1)^(0+128)+12)
  6531                           
  6532                           ;Main_B1.c: 277: myMain.Timeout = 1;
  6533  1EDB  1539               	bsf	(_myMain^(0+128)+11),2
  6534  1EDC  0008               	return
  6535  1EDD                     __end_of_Timeout_Counter:	
  6536                           
  6537                           	psect	text23
  6538  1C03                     __ptext23:	
  6539 ;; *************** function _RF_Main *****************
  6540 ;; Defined at:
  6541 ;;		line 16 in file "../src/RF_Control_B1.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;		None
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;		None
  6546 ;; Return value:  Size  Location     Type
  6547 ;;		None               void
  6548 ;; Registers used:
  6549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6559 ;;Total ram usage:        0 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:   11
  6562 ;; This function calls:
  6563 ;;		_setRF_Main
  6564 ;; This function is called by:
  6565 ;;		_main
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           
  6570                           ;psect for function _RF_Main
  6571  1C03                     _RF_Main:	
  6572                           
  6573                           ;RF_Control_B1.c: 18: setRF_Main();
  6574                           
  6575                           ;incstack = 0
  6576                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6577  1C03  318E  2617         	fcall	_setRF_Main
  6578  1C05  0008               	return
  6579  1C06                     __end_of_RF_Main:	
  6580                           
  6581                           	psect	text24
  6582  0E17                     __ptext24:	
  6583 ;; *************** function _setRF_Main *****************
  6584 ;; Defined at:
  6585 ;;		line 53 in file "../src/RF_Control_B1.c"
  6586 ;; Parameters:    Size  Location     Type
  6587 ;;		None
  6588 ;; Auto vars:     Size  Location     Type
  6589 ;;  error           1   77[BANK0 ] unsigned char 
  6590 ;;  loop_f          1   76[BANK0 ] unsigned char 
  6591 ;; Return value:  Size  Location     Type
  6592 ;;		None               void
  6593 ;; Registers used:
  6594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6603 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6604 ;;Total ram usage:        3 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:   10
  6607 ;; This function calls:
  6608 ;;		_CC2500_PowerOnInitial
  6609 ;;		_CC2500_RxData
  6610 ;;		_CC2500_TxData
  6611 ;;		_CC2500_WriteCommand
  6612 ;;		_RF_RxDisable
  6613 ;;		___lwdiv
  6614 ;;		_getBuz_GO
  6615 ;;		_getRF_KeyStatus
  6616 ;;		_getRxData
  6617 ;; This function is called by:
  6618 ;;		_RF_Main
  6619 ;; This function uses a non-reentrant model
  6620 ;;
  6621                           
  6622                           
  6623                           ;psect for function _setRF_Main
  6624  0E17                     _setRF_Main:	
  6625                           
  6626                           ;RF_Control_B1.c: 54: char loop_f = 0, error = 0;
  6627                           
  6628                           ;incstack = 0
  6629                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6630  0E17  0020               	movlb	0	; select bank0
  6631  0E18  01EC               	clrf	setRF_Main@loop_f
  6632  0E19  01ED               	clrf	setRF_Main@error
  6633                           
  6634                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6635  0E1A  0021               	movlb	1	; select bank1
  6636  0E1B  1C20               	btfss	_RF1^(0+128),0
  6637  0E1C  2EA3               	goto	l2252
  6638                           
  6639                           ;RF_Control_B1.c: 57: if (getBuz_GO() == 0) {
  6640  0E1D  319D  25E2  318E   	fcall	_getBuz_GO
  6641  0E20  0874               	movf	?_getBuz_GO+1,w
  6642  0E21  0473               	iorwf	?_getBuz_GO,w
  6643  0E22  1D03               	skipz
  6644  0E23  2E84               	goto	l9638
  6645                           
  6646                           ;RF_Control_B1.c: 60: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6647  0E24  319D  25F3  318E   	fcall	_getRF_KeyStatus
  6648  0E27  3A01               	xorlw	1
  6649  0E28  3000               	movlw	0
  6650  0E29  1903               	skipnz
  6651  0E2A  3001               	movlw	1
  6652  0E2B  0020               	movlb	0	; select bank0
  6653  0E2C  00EB               	movwf	??_setRF_Main
  6654  0E2D  0CEB               	rrf	??_setRF_Main,f
  6655  0E2E  0CEB               	rrf	??_setRF_Main,f
  6656  0E2F  0021               	movlb	1	; select bank1
  6657  0E30  0820               	movf	_RF1^(0+128),w
  6658  0E31  0020               	movlb	0	; select bank0
  6659  0E32  066B               	xorwf	??_setRF_Main,w
  6660  0E33  397F               	andlw	-129
  6661  0E34  066B               	xorwf	??_setRF_Main,w
  6662  0E35  0021               	movlb	1	; select bank1
  6663  0E36  00A0               	movwf	_RF1^(0+128)
  6664                           
  6665                           ;RF_Control_B1.c: 65: if (RF1.Key == 0 || RF1.Learn == 1) {
  6666  0E37  1FA0               	btfss	_RF1^(0+128),7
  6667  0E38  2E3B               	goto	l2256
  6668  0E39  1F20               	btfss	_RF1^(0+128),6
  6669  0E3A  2E84               	goto	l9638
  6670  0E3B                     l2256:	
  6671                           
  6672                           ;RF_Control_B1.c: 67: if (RF1.TransceiveGO == 1) {
  6673  0E3B  1D20               	btfss	_RF1^(0+128),2
  6674  0E3C  2E4B               	goto	l2257
  6675                           
  6676                           ;RF_Control_B1.c: 68: RF1.TransceiveGO = 0;
  6677  0E3D  1120               	bcf	_RF1^(0+128),2
  6678                           
  6679                           ;RF_Control_B1.c: 69: if (RF1.Learn == 0) {
  6680  0E3E  1B20               	btfsc	_RF1^(0+128),6
  6681  0E3F  2E84               	goto	l9638
  6682                           
  6683                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  6684  0E40  01A2               	clrf	(_RF1^(0+128)+2)
  6685  0E41  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6686                           
  6687                           ;RF_Control_B1.c: 71: RF1.CorrectionCounter = 0;
  6688  0E42  01AA               	clrf	(_RF1^(0+128)+10)
  6689  0E43  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6690                           
  6691                           ;RF_Control_B1.c: 72: RF_RxDisable();
  6692  0E44  319D  2553  318E   	fcall	_RF_RxDisable
  6693                           
  6694                           ;RF_Control_B1.c: 73: CC2500_TxData();
  6695  0E47  318B  23B8  318E   	fcall	_CC2500_TxData
  6696                           
  6697                           ;RF_Control_B1.c: 75: }
  6698                           ;RF_Control_B1.c: 76: } else {
  6699  0E4A  2E84               	goto	l9638
  6700  0E4B                     l2257:	
  6701                           
  6702                           ;RF_Control_B1.c: 77: if (RF1.RxStatus == 1) {
  6703  0E4B  1DA0               	btfss	_RF1^(0+128),3
  6704  0E4C  2E5A               	goto	l9624
  6705                           
  6706                           ;RF_Control_B1.c: 79: CC2500_RxData();
  6707  0E4D  318B  2353  318E   	fcall	_CC2500_RxData
  6708                           
  6709                           ;RF_Control_B1.c: 81: if (RF1.ReceiveGO == 1) {
  6710  0E50  0021               	movlb	1	; select bank1
  6711  0E51  1CA0               	btfss	_RF1^(0+128),1
  6712  0E52  2E84               	goto	l9638
  6713                           
  6714                           ;RF_Control_B1.c: 82: RF1.ReceiveGO = 0;
  6715  0E53  10A0               	bcf	_RF1^(0+128),1
  6716                           
  6717                           ;RF_Control_B1.c: 83: RF1.CorrectionCounter = 0;
  6718  0E54  01AA               	clrf	(_RF1^(0+128)+10)
  6719  0E55  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6720                           
  6721                           ;RF_Control_B1.c: 91: getRxData();
  6722  0E56  318D  2511  318E   	fcall	_getRxData
  6723                           
  6724                           ;RF_Control_B1.c: 94: }
  6725                           ;RF_Control_B1.c: 95: } else {
  6726  0E59  2E84               	goto	l9638
  6727  0E5A                     l9624:	
  6728                           
  6729                           ;RF_Control_B1.c: 96: RF1.Count++;
  6730  0E5A  3001               	movlw	1
  6731  0E5B  0021               	movlb	1	; select bank1
  6732  0E5C  07A2               	addwf	(_RF1^(0+128)+2),f
  6733  0E5D  3000               	movlw	0
  6734  0E5E  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6735                           
  6736                           ;RF_Control_B1.c: 97: if (RF1.Count == (RF1.RunTime / 20)) {
  6737  0E5F  3014               	movlw	20
  6738  0E60  00F3               	movwf	___lwdiv@divisor
  6739  0E61  3000               	movlw	0
  6740  0E62  00F4               	movwf	___lwdiv@divisor+1
  6741  0E63  0828               	movf	((_RF1+1)^(0+128)+7),w
  6742  0E64  01F6               	clrf	___lwdiv@dividend+1
  6743  0E65  07F6               	addwf	___lwdiv@dividend+1,f
  6744  0E66  0827               	movf	(_RF1^(0+128)+7),w
  6745  0E67  01F5               	clrf	___lwdiv@dividend
  6746  0E68  07F5               	addwf	___lwdiv@dividend,f
  6747  0E69  3193  23B6  318E   	fcall	___lwdiv
  6748  0E6C  0021               	movlb	1	; select bank1
  6749  0E6D  0823               	movf	((_RF1+1)^(0+128)+2),w
  6750  0E6E  0674               	xorwf	?___lwdiv+1,w
  6751  0E6F  1D03               	skipz
  6752  0E70  2E73               	goto	u10895
  6753  0E71  0822               	movf	(_RF1^(0+128)+2),w
  6754  0E72  0673               	xorwf	?___lwdiv,w
  6755  0E73                     u10895:	
  6756  0E73  1D03               	skipz
  6757  0E74  2E84               	goto	l9638
  6758                           
  6759                           ;RF_Control_B1.c: 98: RF1.Count = 0;
  6760  0E75  01A2               	clrf	(_RF1^(0+128)+2)
  6761  0E76  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6762                           
  6763                           ;RF_Control_B1.c: 100: RF1.RxStatus = 1;
  6764  0E77  15A0               	bsf	_RF1^(0+128),3
  6765                           
  6766                           ;RF_Control_B1.c: 101: CC2500_WriteCommand(0x36);
  6767  0E78  3036               	movlw	54
  6768  0E79  319F  2723  318E   	fcall	_CC2500_WriteCommand
  6769                           
  6770                           ;RF_Control_B1.c: 102: CC2500_WriteCommand(0x3A);
  6771  0E7C  303A               	movlw	58
  6772  0E7D  319F  2723  318E   	fcall	_CC2500_WriteCommand
  6773                           
  6774                           ;RF_Control_B1.c: 103: CC2500_WriteCommand(0x34);
  6775  0E80  3034               	movlw	52
  6776  0E81  319F  2723  318E   	fcall	_CC2500_WriteCommand
  6777  0E84                     l9638:	
  6778                           
  6779                           ;RF_Control_B1.c: 105: }
  6780                           ;RF_Control_B1.c: 107: }
  6781                           ;RF_Control_B1.c: 108: }
  6782                           ;RF_Control_B1.c: 109: }
  6783                           ;RF_Control_B1.c: 110: }
  6784                           ;RF_Control_B1.c: 112: RF1.CorrectionCounter++;
  6785  0E84  3001               	movlw	1
  6786  0E85  0021               	movlb	1	; select bank1
  6787  0E86  07AA               	addwf	(_RF1^(0+128)+10),f
  6788  0E87  3000               	movlw	0
  6789  0E88  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6790                           
  6791                           ;RF_Control_B1.c: 113: if (RF1.CorrectionCounter > (60000 / 20)) {
  6792  0E89  300B               	movlw	11
  6793  0E8A  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6794  0E8B  30B9               	movlw	185
  6795  0E8C  1903               	skipnz
  6796  0E8D  022A               	subwf	(_RF1^(0+128)+10),w
  6797  0E8E  1C03               	skipc
  6798  0E8F  2E9C               	goto	l9652
  6799                           
  6800                           ;RF_Control_B1.c: 114: RF1.CorrectionCounter = 0;
  6801  0E90  01AA               	clrf	(_RF1^(0+128)+10)
  6802  0E91  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6803                           
  6804                           ;RF_Control_B1.c: 116: RF1.RxStatus = 0;
  6805  0E92  11A0               	bcf	_RF1^(0+128),3
  6806                           
  6807                           ;RF_Control_B1.c: 117: RF1.ReceiveGO = 0;
  6808  0E93  10A0               	bcf	_RF1^(0+128),1
  6809                           
  6810                           ;RF_Control_B1.c: 118: CC2500_WriteCommand(0x36);
  6811  0E94  3036               	movlw	54
  6812  0E95  319F  2723  318E   	fcall	_CC2500_WriteCommand
  6813                           
  6814                           ;RF_Control_B1.c: 119: CC2500_WriteCommand(0x3A);
  6815  0E98  303A               	movlw	58
  6816  0E99  319F  2723  318E   	fcall	_CC2500_WriteCommand
  6817  0E9C                     l9652:	
  6818                           
  6819                           ;RF_Control_B1.c: 120: }
  6820                           ;RF_Control_B1.c: 122: if (RF1.Timeout == 1) {
  6821  0E9C  0021               	movlb	1	; select bank1
  6822  0E9D  1F21               	btfss	(_RF1^(0+128)+1),6
  6823  0E9E  0008               	return
  6824                           
  6825                           ;RF_Control_B1.c: 123: RF1.Timeout = 0;
  6826  0E9F  1321               	bcf	(_RF1^(0+128)+1),6
  6827                           
  6828                           ;RF_Control_B1.c: 124: CC2500_PowerOnInitial();
  6829  0EA0  319E  26B3         	fcall	_CC2500_PowerOnInitial
  6830                           
  6831                           ;RF_Control_B1.c: 125: }
  6832                           ;RF_Control_B1.c: 127: } else {
  6833  0EA2  0008               	return
  6834  0EA3                     l2252:	
  6835                           
  6836                           ;RF_Control_B1.c: 128: if (myMain.PowerON == 1) {
  6837  0EA3  1C2E               	btfss	_myMain^(0+128),0
  6838  0EA4  0008               	return
  6839                           
  6840                           ;RF_Control_B1.c: 129: RF1.Enable = 1;
  6841  0EA5  1420               	bsf	_RF1^(0+128),0
  6842  0EA6  0008               	return
  6843  0EA7                     __end_of_setRF_Main:	
  6844                           
  6845                           	psect	text25
  6846  0D11                     __ptext25:	
  6847 ;; *************** function _getRxData *****************
  6848 ;; Defined at:
  6849 ;;		line 232 in file "../src/RF_Control_B1.c"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;		None
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;  error           1   74[BANK0 ] unsigned char 
  6854 ;; Return value:  Size  Location     Type
  6855 ;;		None               void
  6856 ;; Registers used:
  6857 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6858 ;; Tracked objects:
  6859 ;;		On entry : 0/0
  6860 ;;		On exit  : 0/0
  6861 ;;		Unchanged: 0/0
  6862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6864 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6865 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;Total ram usage:        2 bytes
  6868 ;; Hardware stack levels used:    1
  6869 ;; Hardware stack levels required when called:    9
  6870 ;; This function calls:
  6871 ;;		_getMain_All_Error_Status
  6872 ;;		_setControl_Lights_Table
  6873 ;;		_setLog_Code
  6874 ;;		_setTxData
  6875 ;; This function is called by:
  6876 ;;		_setRF_Main
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           
  6881                           ;psect for function _getRxData
  6882  0D11                     _getRxData:	
  6883                           
  6884                           ;RF_Control_B1.c: 233: char error = getMain_All_Error_Status(0);
  6885                           
  6886                           ;incstack = 0
  6887                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6888  0D11  3000               	movlw	0
  6889  0D12  3193  2319  318D   	fcall	_getMain_All_Error_Status
  6890  0D15  0020               	movlb	0	; select bank0
  6891  0D16  00E9               	movwf	??_getRxData
  6892  0D17  0869               	movf	??_getRxData,w
  6893  0D18  00EA               	movwf	getRxData@error
  6894                           
  6895                           ;RF_Control_B1.c: 234: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6896  0D19  0023               	movlb	3	; select bank3
  6897  0D1A  0820               	movf	_RF_Data^(0+384),w
  6898  0D1B  3AAA               	xorlw	170
  6899  0D1C  1D03               	skipz
  6900  0D1D  2D2F               	goto	l9372
  6901  0D1E  0821               	movf	(_RF_Data^(0+384)+1),w
  6902  0D1F  3A01               	xorlw	1
  6903  0D20  1D03               	skipz
  6904  0D21  2D2F               	goto	l9372
  6905                           
  6906                           ;RF_Control_B1.c: 236: product->Data[2] = 0x55;
  6907  0D22  3055               	movlw	85
  6908  0D23  0020               	movlb	0	; select bank0
  6909  0D24  00E9               	movwf	??_getRxData
  6910  0D25  086E               	movf	_product,w
  6911  0D26  3E02               	addlw	2
  6912  0D27  0086               	movwf	6
  6913  0D28  3002               	movlw	2	; select bank4/5
  6914  0D29  0087               	movwf	7
  6915  0D2A  0869               	movf	??_getRxData,w
  6916  0D2B  0081               	movwf	1
  6917                           
  6918                           ;RF_Control_B1.c: 237: setTxData();
  6919  0D2C  3187  270F         	fcall	_setTxData
  6920                           
  6921                           ;RF_Control_B1.c: 243: } else {
  6922  0D2E  0008               	return
  6923  0D2F                     l9372:	
  6924                           
  6925                           ;RF_Control_B1.c: 245: if (error == 0) {
  6926  0D2F  0020               	movlb	0	; select bank0
  6927  0D30  08EA               	movf	getRxData@error,f
  6928  0D31  1D03               	skipz
  6929  0D32  0008               	return
  6930                           
  6931                           ;RF_Control_B1.c: 246: if (RF1.Learn == 1) {
  6932  0D33  0021               	movlb	1	; select bank1
  6933  0D34  1F20               	btfss	_RF1^(0+128),6
  6934  0D35  2D41               	goto	l9382
  6935                           
  6936                           ;RF_Control_B1.c: 247: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6937  0D36  0023               	movlb	3	; select bank3
  6938  0D37  08A0               	movf	_RF_Data^(0+384),f
  6939  0D38  1D03               	skipz
  6940  0D39  0008               	return
  6941  0D3A  0821               	movf	(_RF_Data^(0+384)+1),w
  6942  0D3B  3A64               	xorlw	100
  6943  0D3C  1D03               	skipz
  6944  0D3D  0008               	return
  6945                           
  6946                           ;RF_Control_B1.c: 248: setLog_Code();
  6947  0D3E  3193  234C         	fcall	_setLog_Code
  6948                           
  6949                           ;RF_Control_B1.c: 249: }
  6950                           ;RF_Control_B1.c: 250: } else {
  6951  0D40  0008               	return
  6952  0D41                     l9382:	
  6953                           
  6954                           ;RF_Control_B1.c: 251: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6955  0D41  0023               	movlb	3	; select bank3
  6956  0D42  08A0               	movf	_RF_Data^(0+384),f
  6957  0D43  1D03               	skipz
  6958  0D44  2D7B               	goto	l9402
  6959  0D45  0821               	movf	(_RF_Data^(0+384)+1),w
  6960  0D46  3A02               	xorlw	2
  6961  0D47  1D03               	skipz
  6962  0D48  2D7B               	goto	l9402
  6963                           
  6964                           ;RF_Control_B1.c: 253: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6965  0D49  082C               	movf	(_RF_Data^(0+384)+12),w
  6966  0D4A  3AFF               	xorlw	255
  6967  0D4B  1D03               	skipz
  6968  0D4C  2D57               	goto	l9394
  6969  0D4D  082D               	movf	(_RF_Data^(0+384)+13),w
  6970  0D4E  3AFF               	xorlw	255
  6971  0D4F  1D03               	skipz
  6972  0D50  2D57               	goto	l9394
  6973  0D51  082E               	movf	(_RF_Data^(0+384)+14),w
  6974  0D52  3AFF               	xorlw	255
  6975  0D53  1D03               	skipz
  6976  0D54  2D57               	goto	l9394
  6977                           
  6978                           ;RF_Control_B1.c: 254: __nop();
  6979  0D55  0000               	nop
  6980                           
  6981                           ;RF_Control_B1.c: 255: } else {
  6982  0D56  0008               	return
  6983  0D57                     l9394:	
  6984                           
  6985                           ;RF_Control_B1.c: 256: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6986  0D57  0020               	movlb	0	; select bank0
  6987  0D58  086E               	movf	_product,w
  6988  0D59  3E0C               	addlw	12
  6989  0D5A  0086               	movwf	6
  6990  0D5B  3002               	movlw	2	; select bank4/5
  6991  0D5C  0087               	movwf	7
  6992  0D5D  0023               	movlb	3	; select bank3
  6993  0D5E  082C               	movf	(_RF_Data^(0+384)+12),w
  6994  0D5F  0601               	xorwf	1,w
  6995  0D60  1D03               	skipz
  6996  0D61  0008               	return
  6997  0D62  0020               	movlb	0	; select bank0
  6998  0D63  086E               	movf	_product,w
  6999  0D64  3E0D               	addlw	13
  7000  0D65  0086               	movwf	6
  7001  0D66  3002               	movlw	2	; select bank4/5
  7002  0D67  0087               	movwf	7
  7003  0D68  0023               	movlb	3	; select bank3
  7004  0D69  082D               	movf	(_RF_Data^(0+384)+13),w
  7005  0D6A  0601               	xorwf	1,w
  7006  0D6B  1D03               	skipz
  7007  0D6C  0008               	return
  7008  0D6D  0020               	movlb	0	; select bank0
  7009  0D6E  086E               	movf	_product,w
  7010  0D6F  3E0E               	addlw	14
  7011  0D70  0086               	movwf	6
  7012  0D71  3002               	movlw	2	; select bank4/5
  7013  0D72  0087               	movwf	7
  7014  0D73  0023               	movlb	3	; select bank3
  7015  0D74  082E               	movf	(_RF_Data^(0+384)+14),w
  7016  0D75  0601               	xorwf	1,w
  7017  0D76  1D03               	skipz
  7018  0D77  0008               	return
  7019                           
  7020                           ;RF_Control_B1.c: 257: setControl_Lights_Table();
  7021  0D78  318A  2227         	fcall	_setControl_Lights_Table
  7022                           
  7023                           ;RF_Control_B1.c: 258: }
  7024                           ;RF_Control_B1.c: 259: }
  7025                           ;RF_Control_B1.c: 260: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7026  0D7A  0008               	return
  7027  0D7B                     l9402:	
  7028  0D7B  0023               	movlb	3	; select bank3
  7029  0D7C  0820               	movf	_RF_Data^(0+384),w
  7030  0D7D  3AFF               	xorlw	255
  7031  0D7E  1D03               	skipz
  7032  0D7F  2D86               	goto	l9408
  7033  0D80  0821               	movf	(_RF_Data^(0+384)+1),w
  7034  0D81  3A02               	xorlw	2
  7035  0D82  1D03               	skipz
  7036  0D83  2D86               	goto	l9408
  7037                           
  7038                           ;RF_Control_B1.c: 261: __nop();
  7039  0D84  0000               	nop
  7040                           
  7041                           ;RF_Control_B1.c: 262: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7042  0D85  0008               	return
  7043  0D86                     l9408:	
  7044  0D86  0023               	movlb	3	; select bank3
  7045  0D87  08A0               	movf	_RF_Data^(0+384),f
  7046  0D88  1D03               	skipz
  7047  0D89  0008               	return
  7048  0D8A  0821               	movf	(_RF_Data^(0+384)+1),w
  7049  0D8B  3A65               	xorlw	101
  7050  0D8C  1D03               	skipz
  7051  0D8D  0008               	return
  7052                           
  7053                           ;RF_Control_B1.c: 263: __nop();
  7054  0D8E  0000               	nop
  7055                           
  7056                           ;RF_Control_B1.c: 270: ;
  7057                           
  7058                           ;RF_Control_B1.c: 264: }
  7059                           ;RF_Control_B1.c: 268: }
  7060                           ;RF_Control_B1.c: 269: } else {
  7061  0D8F  0008               	return
  7062  0D90                     __end_of_getRxData:	
  7063                           
  7064                           	psect	text26
  7065  134C                     __ptext26:	
  7066 ;; *************** function _setLog_Code *****************
  7067 ;; Defined at:
  7068 ;;		line 276 in file "../src/RF_Control_B1.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;		None
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;		None
  7073 ;; Return value:  Size  Location     Type
  7074 ;;		None               void
  7075 ;; Registers used:
  7076 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7084 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7085 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7086 ;;Total ram usage:        1 bytes
  7087 ;; Hardware stack levels used:    1
  7088 ;; Hardware stack levels required when called:    5
  7089 ;; This function calls:
  7090 ;;		_setBuz
  7091 ;;		_setMemory_LoopSave
  7092 ;;		_setMemory_Modify
  7093 ;;		_setProductData
  7094 ;; This function is called by:
  7095 ;;		_getRxData
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           
  7100                           ;psect for function _setLog_Code
  7101  134C                     _setLog_Code:	
  7102                           
  7103                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7104                           
  7105                           ;incstack = 0
  7106                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7107  134C  0021               	movlb	1	; select bank1
  7108  134D  1320               	bcf	_RF1^(0+128),6
  7109                           
  7110                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7111  134E  0023               	movlb	3	; select bank3
  7112  134F  082C               	movf	(_RF_Data^(0+384)+12),w
  7113  1350  0020               	movlb	0	; select bank0
  7114  1351  00E1               	movwf	??_setLog_Code
  7115  1352  0861               	movf	??_setLog_Code,w
  7116  1353  00DD               	movwf	setProductData@value
  7117  1354  300C               	movlw	12
  7118  1355  319D  2518  3193   	fcall	_setProductData
  7119                           
  7120                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7121  1358  0023               	movlb	3	; select bank3
  7122  1359  082D               	movf	(_RF_Data^(0+384)+13),w
  7123  135A  0020               	movlb	0	; select bank0
  7124  135B  00E1               	movwf	??_setLog_Code
  7125  135C  0861               	movf	??_setLog_Code,w
  7126  135D  00DD               	movwf	setProductData@value
  7127  135E  300D               	movlw	13
  7128  135F  319D  2518  3193   	fcall	_setProductData
  7129                           
  7130                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7131  1362  0023               	movlb	3	; select bank3
  7132  1363  082E               	movf	(_RF_Data^(0+384)+14),w
  7133  1364  0020               	movlb	0	; select bank0
  7134  1365  00E1               	movwf	??_setLog_Code
  7135  1366  0861               	movf	??_setLog_Code,w
  7136  1367  00DD               	movwf	setProductData@value
  7137  1368  300E               	movlw	14
  7138  1369  319D  2518  3193   	fcall	_setProductData
  7139                           
  7140                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7141  136C  3064               	movlw	100
  7142  136D  0020               	movlb	0	; select bank0
  7143  136E  00A4               	movwf	setBuz@time
  7144  136F  3000               	movlw	0
  7145  1370  00A5               	movwf	setBuz@time+1
  7146  1371  3001               	movlw	1
  7147  1372  3197  274E  3193   	fcall	_setBuz
  7148                           
  7149                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7150  1375  0021               	movlb	1	; select bank1
  7151  1376  1EAE               	btfss	_myMain^(0+128),5
  7152  1377  2B7C               	goto	l2314
  7153                           
  7154                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7155  1378  3001               	movlw	1
  7156  1379  319D  25B1  3193   	fcall	_setMemory_LoopSave
  7157  137C                     l2314:	
  7158                           
  7159                           ;RF_Control_B1.c: 284: }
  7160                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7161  137C  3001               	movlw	1
  7162  137D  319D  25A1         	fcall	_setMemory_Modify
  7163  137F  0008               	return
  7164  1380                     __end_of_setLog_Code:	
  7165                           
  7166                           	psect	text27
  7167  1DB1                     __ptext27:	
  7168 ;; *************** function _setMemory_LoopSave *****************
  7169 ;; Defined at:
  7170 ;;		line 1075 in file "../src/MCU_B1.c"
  7171 ;; Parameters:    Size  Location     Type
  7172 ;;  command         1    wreg     unsigned char 
  7173 ;; Auto vars:     Size  Location     Type
  7174 ;;  command         1    4[COMMON] unsigned char 
  7175 ;; Return value:  Size  Location     Type
  7176 ;;		None               void
  7177 ;; Registers used:
  7178 ;;		wreg, status,2, status,0
  7179 ;; Tracked objects:
  7180 ;;		On entry : 0/0
  7181 ;;		On exit  : 0/0
  7182 ;;		Unchanged: 0/0
  7183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7187 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7188 ;;Total ram usage:        2 bytes
  7189 ;; Hardware stack levels used:    1
  7190 ;; Hardware stack levels required when called:    3
  7191 ;; This function calls:
  7192 ;;		Nothing
  7193 ;; This function is called by:
  7194 ;;		_setLog_Code
  7195 ;; This function uses a non-reentrant model
  7196 ;;
  7197                           
  7198                           
  7199                           ;psect for function _setMemory_LoopSave
  7200  1DB1                     _setMemory_LoopSave:	
  7201                           
  7202                           ;incstack = 0
  7203                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7204                           ;setMemory_LoopSave@command stored from wreg
  7205  1DB1  00F4               	movwf	setMemory_LoopSave@command
  7206                           
  7207                           ;MCU_B1.c: 1076: Memory.LoopSave = command == 1 ? 1 : 0;
  7208  1DB2  0874               	movf	setMemory_LoopSave@command,w
  7209  1DB3  3A01               	xorlw	1
  7210  1DB4  3000               	movlw	0
  7211  1DB5  1903               	skipnz
  7212  1DB6  3001               	movlw	1
  7213  1DB7  00F3               	movwf	??_setMemory_LoopSave
  7214  1DB8  0DF3               	rlf	??_setMemory_LoopSave,f
  7215  1DB9  0DF3               	rlf	??_setMemory_LoopSave,f
  7216  1DBA  0024               	movlb	4	; select bank4
  7217  1DBB  0844               	movf	(_Memory^(0+512)+36),w
  7218  1DBC  0673               	xorwf	??_setMemory_LoopSave,w
  7219  1DBD  39FB               	andlw	-5
  7220  1DBE  0673               	xorwf	??_setMemory_LoopSave,w
  7221  1DBF  00C4               	movwf	(_Memory^(0+512)+36)
  7222  1DC0  0008               	return
  7223  1DC1                     __end_of_setMemory_LoopSave:	
  7224                           
  7225                           	psect	text28
  7226  0A27                     __ptext28:	
  7227 ;; *************** function _setControl_Lights_Table *****************
  7228 ;; Defined at:
  7229 ;;		line 289 in file "../src/RF_Control_B1.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;		None
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;		None
  7234 ;; Return value:  Size  Location     Type
  7235 ;;		None               void
  7236 ;; Registers used:
  7237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7238 ;; Tracked objects:
  7239 ;;		On entry : 0/0
  7240 ;;		On exit  : 0/0
  7241 ;;		Unchanged: 0/0
  7242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;Total ram usage:        0 bytes
  7248 ;; Hardware stack levels used:    1
  7249 ;; Hardware stack levels required when called:    8
  7250 ;; This function calls:
  7251 ;;		_setBuz
  7252 ;;		_setProductData
  7253 ;;		_setRFSW_AdjControl
  7254 ;;		_setRFSW_Control
  7255 ;;		_setTxData
  7256 ;; This function is called by:
  7257 ;;		_getRxData
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           
  7262                           ;psect for function _setControl_Lights_Table
  7263  0A27                     _setControl_Lights_Table:	
  7264                           
  7265                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7266                           
  7267                           ;incstack = 0
  7268                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7269  0A27  2A6E               	goto	l9076
  7270  0A28                     l9060:	
  7271                           ;RF_Control_B1.c: 291: case 0x00:
  7272                           
  7273                           
  7274                           ;RF_Control_B1.c: 296: setProductData(9, 0);
  7275  0A28  0020               	movlb	0	; select bank0
  7276  0A29  01DD               	clrf	setProductData@value
  7277  0A2A  3009               	movlw	9
  7278  0A2B  319D  2518  318A   	fcall	_setProductData
  7279                           
  7280                           ;RF_Control_B1.c: 297: setProductData(11, 0);
  7281  0A2E  0020               	movlb	0	; select bank0
  7282  0A2F  01DD               	clrf	setProductData@value
  7283  0A30  300B               	movlw	11
  7284  0A31  319D  2518  318A   	fcall	_setProductData
  7285                           
  7286                           ;RF_Control_B1.c: 298: setProductData(15, 0);
  7287  0A34  0020               	movlb	0	; select bank0
  7288  0A35  01DD               	clrf	setProductData@value
  7289  0A36  300F               	movlw	15
  7290  0A37  319D  2518  318A   	fcall	_setProductData
  7291                           
  7292                           ;RF_Control_B1.c: 299: setProductData(17, 0);
  7293  0A3A  0020               	movlb	0	; select bank0
  7294  0A3B  01DD               	clrf	setProductData@value
  7295  0A3C  3011               	movlw	17
  7296  0A3D  319D  2518  318A   	fcall	_setProductData
  7297                           
  7298                           ;RF_Control_B1.c: 300: setBuz(1, 100);
  7299  0A40  3064               	movlw	100
  7300  0A41  0020               	movlb	0	; select bank0
  7301  0A42  00A4               	movwf	setBuz@time
  7302  0A43  3000               	movlw	0
  7303  0A44  00A5               	movwf	setBuz@time+1
  7304  0A45  3001               	movlw	1
  7305  0A46  3197  274E         	fcall	_setBuz
  7306                           
  7307                           ;RF_Control_B1.c: 302: break;
  7308  0A48  0008               	return
  7309  0A49                     l9064:	
  7310                           ;RF_Control_B1.c: 303: case 0x20:
  7311                           
  7312                           
  7313                           ;RF_Control_B1.c: 304: setProductData(9, 0);
  7314  0A49  0020               	movlb	0	; select bank0
  7315  0A4A  01DD               	clrf	setProductData@value
  7316  0A4B  3009               	movlw	9
  7317  0A4C  319D  2518  318A   	fcall	_setProductData
  7318                           
  7319                           ;RF_Control_B1.c: 305: setProductData(11, 0);
  7320  0A4F  0020               	movlb	0	; select bank0
  7321  0A50  01DD               	clrf	setProductData@value
  7322  0A51  300B               	movlw	11
  7323  0A52  319D  2518  318A   	fcall	_setProductData
  7324                           
  7325                           ;RF_Control_B1.c: 306: setProductData(17, 0);
  7326  0A55  0020               	movlb	0	; select bank0
  7327  0A56  01DD               	clrf	setProductData@value
  7328  0A57  3011               	movlw	17
  7329  0A58  319D  2518  318A   	fcall	_setProductData
  7330                           
  7331                           ;RF_Control_B1.c: 307: setTxData();
  7332  0A5B  3187  270F         	fcall	_setTxData
  7333                           
  7334                           ;RF_Control_B1.c: 308: break;
  7335  0A5D  0008               	return
  7336  0A5E                     l9066:	
  7337                           ;RF_Control_B1.c: 309: case 0x01:
  7338                           
  7339                           
  7340                           ;RF_Control_B1.c: 311: setRFSW_Control(1);
  7341  0A5E  3001               	movlw	1
  7342  0A5F  3196  2602         	fcall	_setRFSW_Control
  7343                           
  7344                           ;RF_Control_B1.c: 313: break;
  7345  0A61  0008               	return
  7346  0A62                     l9068:	
  7347                           ;RF_Control_B1.c: 314: case 0x02:
  7348                           
  7349                           
  7350                           ;RF_Control_B1.c: 316: setRFSW_Control(2);
  7351  0A62  3002               	movlw	2
  7352  0A63  3196  2602         	fcall	_setRFSW_Control
  7353                           
  7354                           ;RF_Control_B1.c: 323: break;
  7355                           
  7356                           ;RF_Control_B1.c: 319: case 0x03:
  7357                           
  7358                           ;RF_Control_B1.c: 318: break;
  7359  0A65  0008               	return
  7360  0A66                     l9070:	
  7361                           ;RF_Control_B1.c: 324: case 0x11:
  7362                           
  7363                           
  7364                           ;RF_Control_B1.c: 327: setRFSW_AdjControl(1);
  7365  0A66  3001               	movlw	1
  7366  0A67  3194  2466         	fcall	_setRFSW_AdjControl
  7367                           
  7368                           ;RF_Control_B1.c: 330: break;
  7369  0A69  0008               	return
  7370  0A6A                     l9072:	
  7371                           ;RF_Control_B1.c: 331: case 0x21:
  7372                           
  7373                           
  7374                           ;RF_Control_B1.c: 334: setRFSW_AdjControl(2);
  7375  0A6A  3002               	movlw	2
  7376  0A6B  3194  2466         	fcall	_setRFSW_AdjControl
  7377                           
  7378                           ;RF_Control_B1.c: 345: }
  7379                           
  7380                           ;RF_Control_B1.c: 344: break;
  7381                           
  7382                           ;RF_Control_B1.c: 338: case 0x31:
  7383                           
  7384                           ;RF_Control_B1.c: 337: break;
  7385  0A6D  0008               	return
  7386  0A6E                     l9076:	
  7387  0A6E  0023               	movlb	3	; select bank3
  7388  0A6F  082F               	movf	(_RF_Data^(0+384)+15),w
  7389                           
  7390                           ; Switch size 1, requested type "space"
  7391                           ; Number of cases is 8, Range of values is 0 to 49
  7392                           ; switch strategies available:
  7393                           ; Name         Instructions Cycles
  7394                           ; simple_byte           25    13 (average)
  7395                           ; direct_byte          106     6 (fixed)
  7396                           ; jumptable            260     6 (fixed)
  7397                           ;	Chosen strategy is simple_byte
  7398  0A70  3A00               	xorlw	0	; case 0
  7399  0A71  1903               	skipnz
  7400  0A72  2A28               	goto	l9060
  7401  0A73  3A01               	xorlw	1	; case 1
  7402  0A74  1903               	skipnz
  7403  0A75  2A5E               	goto	l9066
  7404  0A76  3A03               	xorlw	3	; case 2
  7405  0A77  1903               	skipnz
  7406  0A78  2A62               	goto	l9068
  7407  0A79  3A01               	xorlw	1	; case 3
  7408  0A7A  1903               	skipnz
  7409  0A7B  2A89               	goto	l2328
  7410  0A7C  3A12               	xorlw	18	; case 17
  7411  0A7D  1903               	skipnz
  7412  0A7E  2A66               	goto	l9070
  7413  0A7F  3A31               	xorlw	49	; case 32
  7414  0A80  1903               	skipnz
  7415  0A81  2A49               	goto	l9064
  7416  0A82  3A01               	xorlw	1	; case 33
  7417  0A83  1903               	skipnz
  7418  0A84  2A6A               	goto	l9072
  7419  0A85  3A10               	xorlw	16	; case 49
  7420  0A86  1903               	skipnz
  7421  0A87  2A89               	goto	l2328
  7422  0A88  2A89               	goto	l2328
  7423  0A89                     l2328:	
  7424  0A89  0008               	return
  7425  0A8A                     __end_of_setControl_Lights_Table:	
  7426                           
  7427                           	psect	text29
  7428  1602                     __ptext29:	
  7429 ;; *************** function _setRFSW_Control *****************
  7430 ;; Defined at:
  7431 ;;		line 372 in file "../src/RF_Control_B1.c"
  7432 ;; Parameters:    Size  Location     Type
  7433 ;;  sw              1    wreg     unsigned char 
  7434 ;; Auto vars:     Size  Location     Type
  7435 ;;  sw              1   72[BANK0 ] unsigned char 
  7436 ;;  status          1   71[BANK0 ] unsigned char 
  7437 ;; Return value:  Size  Location     Type
  7438 ;;		None               void
  7439 ;; Registers used:
  7440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7441 ;; Tracked objects:
  7442 ;;		On entry : 0/0
  7443 ;;		On exit  : 0/0
  7444 ;;		Unchanged: 0/0
  7445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7447 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7448 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7449 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;Total ram usage:        3 bytes
  7451 ;; Hardware stack levels used:    1
  7452 ;; Hardware stack levels required when called:    7
  7453 ;; This function calls:
  7454 ;;		_getDelayOff_GO
  7455 ;;		_getDimmerLights_Status
  7456 ;;		_setBuz
  7457 ;;		_setDelayOff_GO
  7458 ;;		_setDimmerLights_SwOff
  7459 ;;		_setDimmerLights_SwOn
  7460 ;;		_setRF_DimmerLights
  7461 ;;		_setTxData
  7462 ;; This function is called by:
  7463 ;;		_setControl_Lights_Table
  7464 ;; This function uses a non-reentrant model
  7465 ;;
  7466                           
  7467                           
  7468                           ;psect for function _setRFSW_Control
  7469  1602                     _setRFSW_Control:	
  7470                           
  7471                           ;incstack = 0
  7472                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7473                           ;setRFSW_Control@sw stored from wreg
  7474  1602  0020               	movlb	0	; select bank0
  7475  1603  00E8               	movwf	setRFSW_Control@sw
  7476                           
  7477                           ;RF_Control_B1.c: 373: char status = 0;
  7478  1604  01E7               	clrf	setRFSW_Control@status
  7479                           
  7480                           ;RF_Control_B1.c: 376: if (RF_Data[16] == 0x80) {
  7481  1605  0023               	movlb	3	; select bank3
  7482  1606  0830               	movf	(_RF_Data^(0+384)+16),w
  7483  1607  3A80               	xorlw	128
  7484  1608  1D03               	skipz
  7485  1609  2E35               	goto	l8768
  7486                           
  7487                           ;RF_Control_B1.c: 377: setDelayOff_GO(sw, 1, RF_Data[17]);
  7488  160A  0020               	movlb	0	; select bank0
  7489  160B  01E1               	clrf	setDelayOff_GO@command
  7490  160C  0AE1               	incf	setDelayOff_GO@command,f
  7491  160D  0023               	movlb	3	; select bank3
  7492  160E  0831               	movf	(_RF_Data^(0+384)+17),w
  7493  160F  0020               	movlb	0	; select bank0
  7494  1610  00E6               	movwf	??_setRFSW_Control
  7495  1611  0866               	movf	??_setRFSW_Control,w
  7496  1612  00E2               	movwf	setDelayOff_GO@value
  7497  1613  0868               	movf	setRFSW_Control@sw,w
  7498  1614  3196  26F6  3196   	fcall	_setDelayOff_GO
  7499                           
  7500                           ;RF_Control_B1.c: 378: if (getDimmerLights_Status(sw) == 1) {
  7501  1617  0020               	movlb	0	; select bank0
  7502  1618  0868               	movf	setRFSW_Control@sw,w
  7503  1619  319D  250A  3196   	fcall	_getDimmerLights_Status
  7504  161C  3A01               	xorlw	1
  7505  161D  1D03               	skipz
  7506  161E  2E44               	goto	l8772
  7507                           
  7508                           ;RF_Control_B1.c: 379: setBuz(1, 100);
  7509  161F  3064               	movlw	100
  7510  1620  0020               	movlb	0	; select bank0
  7511  1621  00A4               	movwf	setBuz@time
  7512  1622  3000               	movlw	0
  7513  1623  00A5               	movwf	setBuz@time+1
  7514  1624  3001               	movlw	1
  7515  1625  3197  274E  3196   	fcall	_setBuz
  7516                           
  7517                           ;RF_Control_B1.c: 380: status = 1;
  7518  1628  0020               	movlb	0	; select bank0
  7519  1629  01E7               	clrf	setRFSW_Control@status
  7520  162A  0AE7               	incf	setRFSW_Control@status,f
  7521                           
  7522                           ;RF_Control_B1.c: 381: setRF_DimmerLights(sw, 1);
  7523  162B  01E1               	clrf	setRF_DimmerLights@on
  7524  162C  0AE1               	incf	setRF_DimmerLights@on,f
  7525  162D  0868               	movf	setRFSW_Control@sw,w
  7526  162E  3197  27A7  3196   	fcall	_setRF_DimmerLights
  7527                           
  7528                           ;RF_Control_B1.c: 382: setTxData();
  7529  1631  3187  270F  3196   	fcall	_setTxData
  7530                           
  7531                           ;RF_Control_B1.c: 383: }
  7532                           ;RF_Control_B1.c: 384: } else {
  7533  1634  2E44               	goto	l8772
  7534  1635                     l8768:	
  7535                           
  7536                           ;RF_Control_B1.c: 386: if (getDelayOff_GO(sw) == 1) {
  7537  1635  0020               	movlb	0	; select bank0
  7538  1636  0868               	movf	setRFSW_Control@sw,w
  7539  1637  319D  2526  3196   	fcall	_getDelayOff_GO
  7540  163A  3A01               	xorlw	1
  7541  163B  1D03               	skipz
  7542  163C  2E44               	goto	l8772
  7543                           
  7544                           ;RF_Control_B1.c: 387: setDelayOff_GO(sw, 0, 0);
  7545  163D  0020               	movlb	0	; select bank0
  7546  163E  01E1               	clrf	setDelayOff_GO@command
  7547  163F  01E2               	clrf	setDelayOff_GO@value
  7548  1640  0868               	movf	setRFSW_Control@sw,w
  7549  1641  3196  26F6  3196   	fcall	_setDelayOff_GO
  7550  1644                     l8772:	
  7551                           
  7552                           ;RF_Control_B1.c: 388: }
  7553                           ;RF_Control_B1.c: 390: }
  7554                           ;RF_Control_B1.c: 391: if (status == 0) {
  7555  1644  0020               	movlb	0	; select bank0
  7556  1645  08E7               	movf	setRFSW_Control@status,f
  7557  1646  1D03               	skipz
  7558  1647  0008               	return
  7559                           
  7560                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7561  1648  0868               	movf	setRFSW_Control@sw,w
  7562  1649  3188  204D  3196   	fcall	_setDimmerLights_SwOn
  7563                           
  7564                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7565  164C  0020               	movlb	0	; select bank0
  7566  164D  0868               	movf	setRFSW_Control@sw,w
  7567  164E  3188  2007         	fcall	_setDimmerLights_SwOff
  7568  1650  0008               	return
  7569  1651                     __end_of_setRFSW_Control:	
  7570                           
  7571                           	psect	text30
  7572  1466                     __ptext30:	
  7573 ;; *************** function _setRFSW_AdjControl *****************
  7574 ;; Defined at:
  7575 ;;		line 400 in file "../src/RF_Control_B1.c"
  7576 ;; Parameters:    Size  Location     Type
  7577 ;;  sw              1    wreg     unsigned char 
  7578 ;; Auto vars:     Size  Location     Type
  7579 ;;  sw              1   70[BANK0 ] unsigned char 
  7580 ;;  status          1   69[BANK0 ] unsigned char 
  7581 ;; Return value:  Size  Location     Type
  7582 ;;		None               void
  7583 ;; Registers used:
  7584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7585 ;; Tracked objects:
  7586 ;;		On entry : 0/0
  7587 ;;		On exit  : 0/0
  7588 ;;		Unchanged: 0/0
  7589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7591 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;Total ram usage:        4 bytes
  7595 ;; Hardware stack levels used:    1
  7596 ;; Hardware stack levels required when called:    5
  7597 ;; This function calls:
  7598 ;;		_getDimmerLights_Status
  7599 ;;		_setMemory_Modify
  7600 ;;		_setProductData
  7601 ;;		_setRF_DimmerValue
  7602 ;;		_setTxData
  7603 ;; This function is called by:
  7604 ;;		_setControl_Lights_Table
  7605 ;; This function uses a non-reentrant model
  7606 ;;
  7607                           
  7608                           
  7609                           ;psect for function _setRFSW_AdjControl
  7610  1466                     _setRFSW_AdjControl:	
  7611                           
  7612                           ;incstack = 0
  7613                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7614                           ;setRFSW_AdjControl@sw stored from wreg
  7615  1466  0020               	movlb	0	; select bank0
  7616  1467  00E6               	movwf	setRFSW_AdjControl@sw
  7617                           
  7618                           ;RF_Control_B1.c: 401: char status = 0;
  7619  1468  01E5               	clrf	setRFSW_AdjControl@status
  7620                           
  7621                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7622  1469  0866               	movf	setRFSW_AdjControl@sw,w
  7623  146A  319D  250A  3194   	fcall	_getDimmerLights_Status
  7624  146D  0020               	movlb	0	; select bank0
  7625  146E  00E3               	movwf	??_setRFSW_AdjControl
  7626  146F  0863               	movf	??_setRFSW_AdjControl,w
  7627  1470  00E5               	movwf	setRFSW_AdjControl@status
  7628                           
  7629                           ;RF_Control_B1.c: 406: if (status == 1) {
  7630  1471  0865               	movf	setRFSW_AdjControl@status,w
  7631  1472  3A01               	xorlw	1
  7632  1473  1D03               	skipz
  7633  1474  2C7F               	goto	l6350
  7634                           
  7635                           ;RF_Control_B1.c: 407: setMemory_Modify(1);
  7636  1475  3001               	movlw	1
  7637  1476  319D  25A1  3194   	fcall	_setMemory_Modify
  7638                           
  7639                           ;RF_Control_B1.c: 408: setRF_DimmerValue(sw);
  7640  1479  0020               	movlb	0	; select bank0
  7641  147A  0866               	movf	setRFSW_AdjControl@sw,w
  7642  147B  3192  22E8  3194   	fcall	_setRF_DimmerValue
  7643                           
  7644                           ;RF_Control_B1.c: 409: } else {
  7645  147E  2C90               	goto	l2340
  7646  147F                     l6350:	
  7647                           
  7648                           ;RF_Control_B1.c: 410: setProductData(9, product->Data[20 + sw]);
  7649  147F  0020               	movlb	0	; select bank0
  7650  1480  0866               	movf	setRFSW_AdjControl@sw,w
  7651  1481  3E14               	addlw	20
  7652  1482  076E               	addwf	_product,w
  7653  1483  00E3               	movwf	??_setRFSW_AdjControl
  7654  1484  0863               	movf	??_setRFSW_AdjControl,w
  7655  1485  0086               	movwf	6
  7656  1486  3002               	movlw	2	; select bank4/5
  7657  1487  0087               	movwf	7
  7658  1488  0801               	movf	1,w
  7659  1489  00E4               	movwf	??_setRFSW_AdjControl+1
  7660  148A  0864               	movf	??_setRFSW_AdjControl+1,w
  7661  148B  00DD               	movwf	setProductData@value
  7662  148C  3009               	movlw	9
  7663  148D  319D  2518  3194   	fcall	_setProductData
  7664  1490                     l2340:	
  7665                           
  7666                           ;RF_Control_B1.c: 411: }
  7667                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7668  1490  0020               	movlb	0	; select bank0
  7669  1491  0866               	movf	setRFSW_AdjControl@sw,w
  7670  1492  3E1A               	addlw	26
  7671  1493  076E               	addwf	_product,w
  7672  1494  00E3               	movwf	??_setRFSW_AdjControl
  7673  1495  0863               	movf	??_setRFSW_AdjControl,w
  7674  1496  0086               	movwf	6
  7675  1497  3002               	movlw	2	; select bank4/5
  7676  1498  0087               	movwf	7
  7677  1499  0801               	movf	1,w
  7678  149A  00E4               	movwf	??_setRFSW_AdjControl+1
  7679  149B  0864               	movf	??_setRFSW_AdjControl+1,w
  7680  149C  00DD               	movwf	setProductData@value
  7681  149D  3011               	movlw	17
  7682  149E  319D  2518  3194   	fcall	_setProductData
  7683                           
  7684                           ;RF_Control_B1.c: 413: setTxData();
  7685  14A1  3187  270F         	fcall	_setTxData
  7686  14A3  0008               	return
  7687  14A4                     __end_of_setRFSW_AdjControl:	
  7688                           
  7689                           	psect	text31
  7690  12E8                     __ptext31:	
  7691 ;; *************** function _setRF_DimmerValue *****************
  7692 ;; Defined at:
  7693 ;;		line 418 in file "../src/RF_Control_B1.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;  lights          1    wreg     unsigned char 
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;  lights          1   66[BANK0 ] unsigned char 
  7698 ;; Return value:  Size  Location     Type
  7699 ;;		None               void
  7700 ;; Registers used:
  7701 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7702 ;; Tracked objects:
  7703 ;;		On entry : 0/0
  7704 ;;		On exit  : 0/0
  7705 ;;		Unchanged: 0/0
  7706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7710 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7711 ;;Total ram usage:        2 bytes
  7712 ;; Hardware stack levels used:    1
  7713 ;; Hardware stack levels required when called:    4
  7714 ;; This function calls:
  7715 ;;		_setDimmerIntr_Dimming_RF
  7716 ;;		_setProductData
  7717 ;; This function is called by:
  7718 ;;		_setRFSW_AdjControl
  7719 ;; This function uses a non-reentrant model
  7720 ;;
  7721                           
  7722                           
  7723                           ;psect for function _setRF_DimmerValue
  7724  12E8                     _setRF_DimmerValue:	
  7725                           
  7726                           ;incstack = 0
  7727                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7728                           ;setRF_DimmerValue@lights stored from wreg
  7729  12E8  0020               	movlb	0	; select bank0
  7730  12E9  00E2               	movwf	setRF_DimmerValue@lights
  7731                           
  7732                           ;RF_Control_B1.c: 419: if (RF_Data[9] > 0x64) {
  7733  12EA  3065               	movlw	101
  7734  12EB  0023               	movlb	3	; select bank3
  7735  12EC  0229               	subwf	(_RF_Data^(0+384)+9),w
  7736  12ED  1C03               	skipc
  7737  12EE  2AF5               	goto	l6206
  7738                           
  7739                           ;RF_Control_B1.c: 420: RF_Data[9] = 0x64;
  7740  12EF  3064               	movlw	100
  7741  12F0  0020               	movlb	0	; select bank0
  7742  12F1  00E1               	movwf	??_setRF_DimmerValue
  7743  12F2  0861               	movf	??_setRF_DimmerValue,w
  7744  12F3  0023               	movlb	3	; select bank3
  7745  12F4  00A9               	movwf	(_RF_Data^(0+384)+9)
  7746  12F5                     l6206:	
  7747                           
  7748                           ;RF_Control_B1.c: 421: }
  7749                           ;RF_Control_B1.c: 422: setProductData(9, RF_Data[9]);
  7750  12F5  0829               	movf	(_RF_Data^(0+384)+9),w
  7751  12F6  0020               	movlb	0	; select bank0
  7752  12F7  00E1               	movwf	??_setRF_DimmerValue
  7753  12F8  0861               	movf	??_setRF_DimmerValue,w
  7754  12F9  00DD               	movwf	setProductData@value
  7755  12FA  3009               	movlw	9
  7756  12FB  319D  2518  3192   	fcall	_setProductData
  7757                           
  7758                           ;RF_Control_B1.c: 423: setProductData(11, lights);
  7759  12FE  0020               	movlb	0	; select bank0
  7760  12FF  0862               	movf	setRF_DimmerValue@lights,w
  7761  1300  00E1               	movwf	??_setRF_DimmerValue
  7762  1301  0861               	movf	??_setRF_DimmerValue,w
  7763  1302  00DD               	movwf	setProductData@value
  7764  1303  300B               	movlw	11
  7765  1304  319D  2518  3192   	fcall	_setProductData
  7766                           
  7767                           ;RF_Control_B1.c: 424: setProductData((20 + lights), RF_Data[9]);
  7768  1307  0023               	movlb	3	; select bank3
  7769  1308  0829               	movf	(_RF_Data^(0+384)+9),w
  7770  1309  0020               	movlb	0	; select bank0
  7771  130A  00E1               	movwf	??_setRF_DimmerValue
  7772  130B  0861               	movf	??_setRF_DimmerValue,w
  7773  130C  00DD               	movwf	setProductData@value
  7774  130D  0862               	movf	setRF_DimmerValue@lights,w
  7775  130E  3E14               	addlw	20
  7776  130F  319D  2518  3192   	fcall	_setProductData
  7777                           
  7778                           ;RF_Control_B1.c: 426: setDimmerIntr_Dimming_RF(lights,1);
  7779  1312  01F3               	clrf	setDimmerIntr_Dimming_RF@command
  7780  1313  0AF3               	incf	setDimmerIntr_Dimming_RF@command,f
  7781  1314  0020               	movlb	0	; select bank0
  7782  1315  0862               	movf	setRF_DimmerValue@lights,w
  7783  1316  3192  2241         	fcall	_setDimmerIntr_Dimming_RF
  7784  1318  0008               	return
  7785  1319                     __end_of_setRF_DimmerValue:	
  7786                           
  7787                           	psect	text32
  7788  1241                     __ptext32:	
  7789 ;; *************** function _setDimmerIntr_Dimming_RF *****************
  7790 ;; Defined at:
  7791 ;;		line 180 in file "../src/Dimmer_B1.c"
  7792 ;; Parameters:    Size  Location     Type
  7793 ;;  lights          1    wreg     unsigned char 
  7794 ;;  command         1    3[COMMON] unsigned char 
  7795 ;; Auto vars:     Size  Location     Type
  7796 ;;  lights          1    5[COMMON] unsigned char 
  7797 ;; Return value:  Size  Location     Type
  7798 ;;		None               void
  7799 ;; Registers used:
  7800 ;;		wreg, status,2, status,0
  7801 ;; Tracked objects:
  7802 ;;		On entry : 0/0
  7803 ;;		On exit  : 0/0
  7804 ;;		Unchanged: 0/0
  7805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7806 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7807 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7808 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7809 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7810 ;;Total ram usage:        3 bytes
  7811 ;; Hardware stack levels used:    1
  7812 ;; Hardware stack levels required when called:    3
  7813 ;; This function calls:
  7814 ;;		Nothing
  7815 ;; This function is called by:
  7816 ;;		_setRF_DimmerValue
  7817 ;; This function uses a non-reentrant model
  7818 ;;
  7819                           
  7820                           
  7821                           ;psect for function _setDimmerIntr_Dimming_RF
  7822  1241                     _setDimmerIntr_Dimming_RF:	
  7823                           
  7824                           ;incstack = 0
  7825                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
  7826                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
  7827  1241  00F5               	movwf	setDimmerIntr_Dimming_RF@lights
  7828                           
  7829                           ;Dimmer_B1.c: 182: if (lights == 1) {
  7830  1242  0875               	movf	setDimmerIntr_Dimming_RF@lights,w
  7831  1243  3A01               	xorlw	1
  7832  1244  1D03               	skipz
  7833  1245  2A56               	goto	l6034
  7834                           
  7835                           ;Dimmer_B1.c: 183: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
  7836  1246  0873               	movf	setDimmerIntr_Dimming_RF@command,w
  7837  1247  3A01               	xorlw	1
  7838  1248  3000               	movlw	0
  7839  1249  1903               	skipnz
  7840  124A  3001               	movlw	1
  7841  124B  00F4               	movwf	??_setDimmerIntr_Dimming_RF
  7842  124C  0EF4               	swapf	??_setDimmerIntr_Dimming_RF,f
  7843  124D  0DF4               	rlf	??_setDimmerIntr_Dimming_RF,f
  7844  124E  0DF4               	rlf	??_setDimmerIntr_Dimming_RF,f
  7845  124F  0022               	movlb	2	; select bank2
  7846  1250  084E               	movf	_DimmerIntr1^(0+256),w
  7847  1251  0674               	xorwf	??_setDimmerIntr_Dimming_RF,w
  7848  1252  39BF               	andlw	-65
  7849  1253  0674               	xorwf	??_setDimmerIntr_Dimming_RF,w
  7850  1254  00CE               	movwf	_DimmerIntr1^(0+256)
  7851                           
  7852                           ;Dimmer_B1.c: 184: }
  7853  1255  0008               	return
  7854  1256                     l6034:	
  7855                           
  7856                           ;Dimmer_B1.c: 187: else if (lights == 2) {
  7857  1256  0875               	movf	setDimmerIntr_Dimming_RF@lights,w
  7858  1257  3A02               	xorlw	2
  7859  1258  1D03               	skipz
  7860  1259  0008               	return
  7861                           
  7862                           ;Dimmer_B1.c: 188: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
  7863  125A  0873               	movf	setDimmerIntr_Dimming_RF@command,w
  7864  125B  3A01               	xorlw	1
  7865  125C  3000               	movlw	0
  7866  125D  1903               	skipnz
  7867  125E  3001               	movlw	1
  7868  125F  00F4               	movwf	??_setDimmerIntr_Dimming_RF
  7869  1260  0EF4               	swapf	??_setDimmerIntr_Dimming_RF,f
  7870  1261  0DF4               	rlf	??_setDimmerIntr_Dimming_RF,f
  7871  1262  0DF4               	rlf	??_setDimmerIntr_Dimming_RF,f
  7872  1263  0022               	movlb	2	; select bank2
  7873  1264  0855               	movf	_DimmerIntr2^(0+256),w
  7874  1265  0674               	xorwf	??_setDimmerIntr_Dimming_RF,w
  7875  1266  39BF               	andlw	-65
  7876  1267  0674               	xorwf	??_setDimmerIntr_Dimming_RF,w
  7877  1268  00D5               	movwf	_DimmerIntr2^(0+256)
  7878  1269  0008               	return
  7879  126A                     __end_of_setDimmerIntr_Dimming_RF:	
  7880                           
  7881                           	psect	text33
  7882  1DA1                     __ptext33:	
  7883 ;; *************** function _setMemory_Modify *****************
  7884 ;; Defined at:
  7885 ;;		line 1069 in file "../src/MCU_B1.c"
  7886 ;; Parameters:    Size  Location     Type
  7887 ;;  command         1    wreg     unsigned char 
  7888 ;; Auto vars:     Size  Location     Type
  7889 ;;  command         1    4[COMMON] unsigned char 
  7890 ;; Return value:  Size  Location     Type
  7891 ;;		None               void
  7892 ;; Registers used:
  7893 ;;		wreg, status,2, status,0
  7894 ;; Tracked objects:
  7895 ;;		On entry : 0/0
  7896 ;;		On exit  : 0/0
  7897 ;;		Unchanged: 0/0
  7898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7903 ;;Total ram usage:        2 bytes
  7904 ;; Hardware stack levels used:    1
  7905 ;; Hardware stack levels required when called:    3
  7906 ;; This function calls:
  7907 ;;		Nothing
  7908 ;; This function is called by:
  7909 ;;		_setLog_Code
  7910 ;;		_setRFSW_AdjControl
  7911 ;; This function uses a non-reentrant model
  7912 ;;
  7913                           
  7914                           
  7915                           ;psect for function _setMemory_Modify
  7916  1DA1                     _setMemory_Modify:	
  7917                           
  7918                           ;incstack = 0
  7919                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7920                           ;setMemory_Modify@command stored from wreg
  7921  1DA1  00F4               	movwf	setMemory_Modify@command
  7922                           
  7923                           ;MCU_B1.c: 1070: Memory.Modify = command == 1 ? 1 : 0;
  7924  1DA2  0874               	movf	setMemory_Modify@command,w
  7925  1DA3  3A01               	xorlw	1
  7926  1DA4  3000               	movlw	0
  7927  1DA5  1903               	skipnz
  7928  1DA6  3001               	movlw	1
  7929  1DA7  00F3               	movwf	??_setMemory_Modify
  7930  1DA8  0024               	movlb	4	; select bank4
  7931  1DA9  0844               	movf	(_Memory^(0+512)+36),w
  7932  1DAA  0673               	xorwf	??_setMemory_Modify,w
  7933  1DAB  39FE               	andlw	-2
  7934  1DAC  0673               	xorwf	??_setMemory_Modify,w
  7935  1DAD  00C4               	movwf	(_Memory^(0+512)+36)
  7936                           
  7937                           ;MCU_B1.c: 1071: Memory.Time = 0;
  7938  1DAE  01C2               	clrf	(_Memory^(0+512)+34)
  7939  1DAF  01C3               	clrf	((_Memory+1)^(0+512)+34)
  7940  1DB0  0008               	return
  7941  1DB1                     __end_of_setMemory_Modify:	
  7942                           
  7943                           	psect	text34
  7944  1DF3                     __ptext34:	
  7945 ;; *************** function _getRF_KeyStatus *****************
  7946 ;; Defined at:
  7947 ;;		line 150 in file "../src/RF_Control_B1.c"
  7948 ;; Parameters:    Size  Location     Type
  7949 ;;		None
  7950 ;; Auto vars:     Size  Location     Type
  7951 ;;  key             1    4[COMMON] unsigned char 
  7952 ;; Return value:  Size  Location     Type
  7953 ;;                  1    wreg      unsigned char 
  7954 ;; Registers used:
  7955 ;;		wreg, status,2
  7956 ;; Tracked objects:
  7957 ;;		On entry : 0/0
  7958 ;;		On exit  : 0/0
  7959 ;;		Unchanged: 0/0
  7960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7962 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7963 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7964 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7965 ;;Total ram usage:        3 bytes
  7966 ;; Hardware stack levels used:    1
  7967 ;; Hardware stack levels required when called:    3
  7968 ;; This function calls:
  7969 ;;		Nothing
  7970 ;; This function is called by:
  7971 ;;		_setRF_Main
  7972 ;; This function uses a non-reentrant model
  7973 ;;
  7974                           
  7975                           
  7976                           ;psect for function _getRF_KeyStatus
  7977  1DF3                     _getRF_KeyStatus:	
  7978                           
  7979                           ;RF_Control_B1.c: 151: char key = 0;
  7980                           
  7981                           ;incstack = 0
  7982                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  7983  1DF3  01F4               	clrf	getRF_KeyStatus@key
  7984                           
  7985                           ;RF_Control_B1.c: 157: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  7986  1DF4  01F5               	clrf	_getRF_KeyStatus$5151
  7987  1DF5  0AF5               	incf	_getRF_KeyStatus$5151,f
  7988  1DF6  0020               	movlb	0	; select bank0
  7989  1DF7  1F0C               	btfss	12,6	;volatile
  7990  1DF8  1A0C               	btfsc	12,4	;volatile
  7991  1DF9  2DFE               	goto	l7118
  7992  1DFA  1C0C               	btfss	12,0	;volatile
  7993  1DFB  188D               	btfsc	13,1	;volatile
  7994  1DFC  2DFE               	goto	l7118
  7995  1DFD  01F5               	clrf	_getRF_KeyStatus$5151
  7996  1DFE                     l7118:	
  7997  1DFE  0875               	movf	_getRF_KeyStatus$5151,w
  7998  1DFF  00F3               	movwf	??_getRF_KeyStatus
  7999  1E00  0873               	movf	??_getRF_KeyStatus,w
  8000  1E01  00F4               	movwf	getRF_KeyStatus@key
  8001                           
  8002                           ;RF_Control_B1.c: 163: return key;
  8003  1E02  0874               	movf	getRF_KeyStatus@key,w
  8004  1E03  0008               	return
  8005  1E04                     __end_of_getRF_KeyStatus:	
  8006                           
  8007                           	psect	text35
  8008  1DE2                     __ptext35:	
  8009 ;; *************** function _getBuz_GO *****************
  8010 ;; Defined at:
  8011 ;;		line 82 in file "../src/Buzzer_B1.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;		None
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;  i               2    0[BANK0 ] int 
  8016 ;; Return value:  Size  Location     Type
  8017 ;;                  2    3[COMMON] int 
  8018 ;; Registers used:
  8019 ;;		wreg, status,2, status,0
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8025 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8026 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8027 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;Total ram usage:        6 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; Hardware stack levels required when called:    3
  8032 ;; This function calls:
  8033 ;;		Nothing
  8034 ;; This function is called by:
  8035 ;;		_setRF_Main
  8036 ;; This function uses a non-reentrant model
  8037 ;;
  8038                           
  8039                           
  8040                           ;psect for function _getBuz_GO
  8041  1DE2                     _getBuz_GO:	
  8042                           
  8043                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8044                           
  8045                           ;incstack = 0
  8046                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8047  1DE2  0021               	movlb	1	; select bank1
  8048  1DE3  0C3C               	rrf	_Buz1^(0+128),w
  8049  1DE4  3901               	andlw	1
  8050  1DE5  00F5               	movwf	??_getBuz_GO
  8051  1DE6  01F6               	clrf	??_getBuz_GO+1
  8052  1DE7  0875               	movf	??_getBuz_GO,w
  8053  1DE8  0020               	movlb	0	; select bank0
  8054  1DE9  00A0               	movwf	getBuz_GO@i
  8055  1DEA  0876               	movf	??_getBuz_GO+1,w
  8056  1DEB  00A1               	movwf	getBuz_GO@i+1
  8057                           
  8058                           ;Buzzer_B1.c: 84: return i;
  8059  1DEC  0821               	movf	getBuz_GO@i+1,w
  8060  1DED  01F4               	clrf	?_getBuz_GO+1
  8061  1DEE  07F4               	addwf	?_getBuz_GO+1,f
  8062  1DEF  0820               	movf	getBuz_GO@i,w
  8063  1DF0  01F3               	clrf	?_getBuz_GO
  8064  1DF1  07F3               	addwf	?_getBuz_GO,f
  8065  1DF2  0008               	return
  8066  1DF3                     __end_of_getBuz_GO:	
  8067                           
  8068                           	psect	text36
  8069  1D53                     __ptext36:	
  8070 ;; *************** function _RF_RxDisable *****************
  8071 ;; Defined at:
  8072 ;;		line 220 in file "../src/RF_Control_B1.c"
  8073 ;; Parameters:    Size  Location     Type
  8074 ;;		None
  8075 ;; Auto vars:     Size  Location     Type
  8076 ;;		None
  8077 ;; Return value:  Size  Location     Type
  8078 ;;		None               void
  8079 ;; Registers used:
  8080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8081 ;; Tracked objects:
  8082 ;;		On entry : 0/0
  8083 ;;		On exit  : 0/0
  8084 ;;		Unchanged: 0/0
  8085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8090 ;;Total ram usage:        0 bytes
  8091 ;; Hardware stack levels used:    1
  8092 ;; Hardware stack levels required when called:    5
  8093 ;; This function calls:
  8094 ;;		_CC2500_WriteCommand
  8095 ;; This function is called by:
  8096 ;;		_setRF_Main
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           
  8101                           ;psect for function _RF_RxDisable
  8102  1D53                     _RF_RxDisable:	
  8103                           
  8104                           ;RF_Control_B1.c: 221: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8105                           
  8106                           ;incstack = 0
  8107                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8108  1D53  0021               	movlb	1	; select bank1
  8109  1D54  18A0               	btfsc	_RF1^(0+128),1
  8110  1D55  2D58               	goto	l2292
  8111  1D56  1DA0               	btfss	_RF1^(0+128),3
  8112  1D57  0008               	return
  8113  1D58                     l2292:	
  8114                           
  8115                           ;RF_Control_B1.c: 222: RF1.RxStatus = 0;
  8116  1D58  11A0               	bcf	_RF1^(0+128),3
  8117                           
  8118                           ;RF_Control_B1.c: 223: RF1.ReceiveGO = 0;
  8119  1D59  10A0               	bcf	_RF1^(0+128),1
  8120                           
  8121                           ;RF_Control_B1.c: 224: CC2500_WriteCommand(0x36);
  8122  1D5A  3036               	movlw	54
  8123  1D5B  319F  2723  319D   	fcall	_CC2500_WriteCommand
  8124                           
  8125                           ;RF_Control_B1.c: 225: CC2500_WriteCommand(0x3A);
  8126  1D5E  303A               	movlw	58
  8127  1D5F  319F  2723         	fcall	_CC2500_WriteCommand
  8128  1D61  0008               	return
  8129  1D62                     __end_of_RF_RxDisable:	
  8130                           
  8131                           	psect	text37
  8132  0BB8                     __ptext37:	
  8133 ;; *************** function _CC2500_TxData *****************
  8134 ;; Defined at:
  8135 ;;		line 32 in file "../src/CC2500_B1.c"
  8136 ;; Parameters:    Size  Location     Type
  8137 ;;		None
  8138 ;; Auto vars:     Size  Location     Type
  8139 ;;  loop_e          1    0[BANK0 ] unsigned char 
  8140 ;; Return value:  Size  Location     Type
  8141 ;;		None               void
  8142 ;; Registers used:
  8143 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8144 ;; Tracked objects:
  8145 ;;		On entry : 0/0
  8146 ;;		On exit  : 0/0
  8147 ;;		Unchanged: 0/0
  8148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8150 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8151 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8152 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8153 ;;Total ram usage:        2 bytes
  8154 ;; Hardware stack levels used:    1
  8155 ;; Hardware stack levels required when called:    5
  8156 ;; This function calls:
  8157 ;;		_CC2500_WriteByte
  8158 ;;		_CC2500_WriteCommand
  8159 ;;		_RF_Timeout_Counter
  8160 ;;		_setRF_TimeoutCleared
  8161 ;; This function is called by:
  8162 ;;		_setRF_Main
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           
  8167                           ;psect for function _CC2500_TxData
  8168  0BB8                     _CC2500_TxData:	
  8169                           
  8170                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8171                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8172                           
  8173                           ;incstack = 0
  8174                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8175  0BB8  3036               	movlw	54
  8176  0BB9  319F  2723  318B   	fcall	_CC2500_WriteCommand
  8177                           
  8178                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8179  0BBC  303B               	movlw	59
  8180  0BBD  319F  2723  318B   	fcall	_CC2500_WriteCommand
  8181                           
  8182                           ;CC2500_B1.c: 38: RC4 = 0;
  8183  0BC0  0020               	movlb	0	; select bank0
  8184  0BC1  120E               	bcf	14,4	;volatile
  8185                           
  8186                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8187  0BC2  307F               	movlw	127
  8188  0BC3  00F7               	movwf	??_CC2500_TxData
  8189  0BC4  0877               	movf	??_CC2500_TxData,w
  8190  0BC5  0021               	movlb	1	; select bank1
  8191  0BC6  00D8               	movwf	_SPI0Buffer^(0+128)
  8192                           
  8193                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8194  0BC7  2BCB               	goto	l9090
  8195  0BC8                     l9088:	
  8196                           
  8197                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8198  0BC8  319E  269E  318B   	fcall	_RF_Timeout_Counter
  8199  0BCB                     l9090:	
  8200  0BCB  0020               	movlb	0	; select bank0
  8201  0BCC  1D0E               	btfss	14,2	;volatile
  8202  0BCD  2BD1               	goto	l9094
  8203  0BCE  0021               	movlb	1	; select bank1
  8204  0BCF  1F21               	btfss	(_RF1^(0+128)+1),6
  8205  0BD0  2BC8               	goto	l9088
  8206  0BD1                     l9094:	
  8207                           
  8208                           ;CC2500_B1.c: 42: };
  8209                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8210  0BD1  319C  2410  318B   	fcall	_setRF_TimeoutCleared
  8211                           
  8212                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8213  0BD4  319F  270B  318B   	fcall	_CC2500_WriteByte
  8214                           
  8215                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8216  0BD7  0021               	movlb	1	; select bank1
  8217  0BD8  085A               	movf	_Tx_Length^(0+128),w
  8218  0BD9  00F7               	movwf	??_CC2500_TxData
  8219  0BDA  0877               	movf	??_CC2500_TxData,w
  8220  0BDB  00D8               	movwf	_SPI0Buffer^(0+128)
  8221                           
  8222                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8223  0BDC  319F  270B  318B   	fcall	_CC2500_WriteByte
  8224                           
  8225                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8226  0BDF  0020               	movlb	0	; select bank0
  8227  0BE0  01A0               	clrf	CC2500_TxData@loop_e
  8228  0BE1                     l9108:	
  8229  0BE1  0021               	movlb	1	; select bank1
  8230  0BE2  085A               	movf	_Tx_Length^(0+128),w
  8231  0BE3  0020               	movlb	0	; select bank0
  8232  0BE4  0220               	subwf	CC2500_TxData@loop_e,w
  8233  0BE5  1803               	btfsc	3,0
  8234  0BE6  2BFA               	goto	l251
  8235                           
  8236                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8237  0BE7  0820               	movf	CC2500_TxData@loop_e,w
  8238  0BE8  3EA0               	addlw	_RF_Data& (0+255)
  8239  0BE9  0086               	movwf	6
  8240  0BEA  3001               	movlw	1	; select bank3/4
  8241  0BEB  0087               	movwf	7
  8242  0BEC  0801               	movf	1,w
  8243  0BED  00F7               	movwf	??_CC2500_TxData
  8244  0BEE  0877               	movf	??_CC2500_TxData,w
  8245  0BEF  0021               	movlb	1	; select bank1
  8246  0BF0  00D8               	movwf	_SPI0Buffer^(0+128)
  8247                           
  8248                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8249  0BF1  319F  270B  318B   	fcall	_CC2500_WriteByte
  8250  0BF4  3001               	movlw	1
  8251  0BF5  00F7               	movwf	??_CC2500_TxData
  8252  0BF6  0877               	movf	??_CC2500_TxData,w
  8253  0BF7  0020               	movlb	0	; select bank0
  8254  0BF8  07A0               	addwf	CC2500_TxData@loop_e,f
  8255  0BF9  2BE1               	goto	l9108
  8256  0BFA                     l251:	
  8257                           
  8258                           ;CC2500_B1.c: 51: }
  8259                           ;CC2500_B1.c: 52: RC4 = 1;
  8260  0BFA  160E               	bsf	14,4	;volatile
  8261                           
  8262                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8263  0BFB  3035               	movlw	53
  8264  0BFC  319F  2723  318B   	fcall	_CC2500_WriteCommand
  8265                           
  8266                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8267  0BFF  2C03               	goto	l9114
  8268  0C00                     l9112:	
  8269                           
  8270                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8271  0C00  319E  269E  318B   	fcall	_RF_Timeout_Counter
  8272  0C03                     l9114:	
  8273  0C03  0020               	movlb	0	; select bank0
  8274  0C04  180D               	btfsc	13,0	;volatile
  8275  0C05  2C09               	goto	l9118
  8276  0C06  0021               	movlb	1	; select bank1
  8277  0C07  1F21               	btfss	(_RF1^(0+128)+1),6
  8278  0C08  2C00               	goto	l9112
  8279  0C09                     l9118:	
  8280                           
  8281                           ;CC2500_B1.c: 56: };
  8282                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8283  0C09  319C  2410  318B   	fcall	_setRF_TimeoutCleared
  8284                           
  8285                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8286  0C0C  2C10               	goto	l9122
  8287  0C0D                     l9120:	
  8288                           
  8289                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8290  0C0D  319E  269E  318B   	fcall	_RF_Timeout_Counter
  8291  0C10                     l9122:	
  8292  0C10  0020               	movlb	0	; select bank0
  8293  0C11  1C0D               	btfss	13,0	;volatile
  8294  0C12  2C16               	goto	l9126
  8295  0C13  0021               	movlb	1	; select bank1
  8296  0C14  1F21               	btfss	(_RF1^(0+128)+1),6
  8297  0C15  2C0D               	goto	l9120
  8298  0C16                     l9126:	
  8299                           
  8300                           ;CC2500_B1.c: 61: };
  8301                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8302  0C16  319C  2410  318B   	fcall	_setRF_TimeoutCleared
  8303                           
  8304                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8305  0C19  3036               	movlw	54
  8306  0C1A  319F  2723  318B   	fcall	_CC2500_WriteCommand
  8307                           
  8308                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8309  0C1D  303B               	movlw	59
  8310  0C1E  319F  2723         	fcall	_CC2500_WriteCommand
  8311                           
  8312                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8313  0C20  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8314  0C21  0008               	return
  8315  0C22                     __end_of_CC2500_TxData:	
  8316                           
  8317                           	psect	text38
  8318  0B53                     __ptext38:	
  8319 ;; *************** function _CC2500_RxData *****************
  8320 ;; Defined at:
  8321 ;;		line 73 in file "../src/CC2500_B1.c"
  8322 ;; Parameters:    Size  Location     Type
  8323 ;;		None
  8324 ;; Auto vars:     Size  Location     Type
  8325 ;;  loop_f          1    0[BANK0 ] unsigned char 
  8326 ;; Return value:  Size  Location     Type
  8327 ;;		None               void
  8328 ;; Registers used:
  8329 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8330 ;; Tracked objects:
  8331 ;;		On entry : 0/0
  8332 ;;		On exit  : 0/0
  8333 ;;		Unchanged: 0/0
  8334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8336 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;Total ram usage:        2 bytes
  8340 ;; Hardware stack levels used:    1
  8341 ;; Hardware stack levels required when called:    5
  8342 ;; This function calls:
  8343 ;;		_CC2500_ReadByte
  8344 ;;		_CC2500_ReadStatus
  8345 ;;		_CC2500_WriteByte
  8346 ;;		_CC2500_WriteCommand
  8347 ;;		_RF_Timeout_Counter
  8348 ;;		_setRF_TimeoutCleared
  8349 ;; This function is called by:
  8350 ;;		_setRF_Main
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           
  8355                           ;psect for function _CC2500_RxData
  8356  0B53                     _CC2500_RxData:	
  8357                           
  8358                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8359                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8360                           
  8361                           ;incstack = 0
  8362                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8363  0B53  0020               	movlb	0	; select bank0
  8364  0B54  180D               	btfsc	13,0	;volatile
  8365  0B55  0008               	return
  8366                           
  8367                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8368  0B56  303B               	movlw	59
  8369  0B57  3191  2184  318B   	fcall	_CC2500_ReadStatus
  8370                           
  8371                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8372  0B5A  0021               	movlb	1	; select bank1
  8373  0B5B  085D               	movf	_s_data^(0+128),w
  8374  0B5C  1903               	btfsc	3,2
  8375  0B5D  0008               	return
  8376                           
  8377                           ;CC2500_B1.c: 90: RC4 = 0;
  8378  0B5E  0020               	movlb	0	; select bank0
  8379  0B5F  120E               	bcf	14,4	;volatile
  8380                           
  8381                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8382  0B60  30FF               	movlw	255
  8383  0B61  00F7               	movwf	??_CC2500_RxData
  8384  0B62  0877               	movf	??_CC2500_RxData,w
  8385  0B63  0021               	movlb	1	; select bank1
  8386  0B64  00D8               	movwf	_SPI0Buffer^(0+128)
  8387                           
  8388                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8389  0B65  2B69               	goto	l9146
  8390  0B66                     l9144:	
  8391                           
  8392                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8393  0B66  319E  269E  318B   	fcall	_RF_Timeout_Counter
  8394  0B69                     l9146:	
  8395  0B69  0020               	movlb	0	; select bank0
  8396  0B6A  1D0E               	btfss	14,2	;volatile
  8397  0B6B  2B6F               	goto	l9150
  8398  0B6C  0021               	movlb	1	; select bank1
  8399  0B6D  1F21               	btfss	(_RF1^(0+128)+1),6
  8400  0B6E  2B66               	goto	l9144
  8401  0B6F                     l9150:	
  8402                           
  8403                           ;CC2500_B1.c: 95: };
  8404                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8405  0B6F  319C  2410  318B   	fcall	_setRF_TimeoutCleared
  8406                           
  8407                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8408  0B72  319F  270B  318B   	fcall	_CC2500_WriteByte
  8409                           
  8410                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8411  0B75  319F  27A8  318B   	fcall	_CC2500_ReadByte
  8412                           
  8413                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8414  0B78  0021               	movlb	1	; select bank1
  8415  0B79  0858               	movf	_SPI0Buffer^(0+128),w
  8416  0B7A  00F7               	movwf	??_CC2500_RxData
  8417  0B7B  0877               	movf	??_CC2500_RxData,w
  8418  0B7C  00D7               	movwf	_Rx_Length^(0+128)
  8419                           
  8420                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8421  0B7D  0020               	movlb	0	; select bank0
  8422  0B7E  01A0               	clrf	CC2500_RxData@loop_f
  8423  0B7F                     l9166:	
  8424  0B7F  0021               	movlb	1	; select bank1
  8425  0B80  0857               	movf	_Rx_Length^(0+128),w
  8426  0B81  0020               	movlb	0	; select bank0
  8427  0B82  0220               	subwf	CC2500_RxData@loop_f,w
  8428  0B83  1803               	btfsc	3,0
  8429  0B84  2B98               	goto	l9168
  8430                           
  8431                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8432  0B85  319F  27A8  318B   	fcall	_CC2500_ReadByte
  8433                           
  8434                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8435  0B88  0021               	movlb	1	; select bank1
  8436  0B89  0858               	movf	_SPI0Buffer^(0+128),w
  8437  0B8A  00F7               	movwf	??_CC2500_RxData
  8438  0B8B  0020               	movlb	0	; select bank0
  8439  0B8C  0820               	movf	CC2500_RxData@loop_f,w
  8440  0B8D  3EA0               	addlw	_RF_Data& (0+255)
  8441  0B8E  0086               	movwf	6
  8442  0B8F  3001               	movlw	1	; select bank3/4
  8443  0B90  0087               	movwf	7
  8444  0B91  0877               	movf	??_CC2500_RxData,w
  8445  0B92  0081               	movwf	1
  8446  0B93  3001               	movlw	1
  8447  0B94  00F7               	movwf	??_CC2500_RxData
  8448  0B95  0877               	movf	??_CC2500_RxData,w
  8449  0B96  07A0               	addwf	CC2500_RxData@loop_f,f
  8450  0B97  2B7F               	goto	l9166
  8451  0B98                     l9168:	
  8452                           
  8453                           ;CC2500_B1.c: 104: }
  8454                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8455  0B98  319F  27A8  318B   	fcall	_CC2500_ReadByte
  8456                           
  8457                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8458  0B9B  0021               	movlb	1	; select bank1
  8459  0B9C  0858               	movf	_SPI0Buffer^(0+128),w
  8460  0B9D  00F7               	movwf	??_CC2500_RxData
  8461  0B9E  0877               	movf	??_CC2500_RxData,w
  8462  0B9F  00D6               	movwf	_RSSI^(0+128)
  8463                           
  8464                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8465  0BA0  319F  27A8  318B   	fcall	_CC2500_ReadByte
  8466                           
  8467                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8468  0BA3  0021               	movlb	1	; select bank1
  8469  0BA4  0858               	movf	_SPI0Buffer^(0+128),w
  8470  0BA5  00F7               	movwf	??_CC2500_RxData
  8471  0BA6  0877               	movf	??_CC2500_RxData,w
  8472  0BA7  00D2               	movwf	_CRC^(0+128)
  8473                           
  8474                           ;CC2500_B1.c: 109: RC4 = 1;
  8475  0BA8  0020               	movlb	0	; select bank0
  8476  0BA9  160E               	bsf	14,4	;volatile
  8477                           
  8478                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8479  0BAA  0021               	movlb	1	; select bank1
  8480  0BAB  1BD2               	btfsc	_CRC^(0+128),7
  8481                           
  8482                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8483  0BAC  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8484                           
  8485                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8486  0BAD  11A0               	bcf	_RF1^(0+128),3
  8487                           
  8488                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8489  0BAE  14A0               	bsf	_RF1^(0+128),1
  8490                           
  8491                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8492  0BAF  3036               	movlw	54
  8493  0BB0  319F  2723  318B   	fcall	_CC2500_WriteCommand
  8494                           
  8495                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8496  0BB3  303A               	movlw	58
  8497  0BB4  319F  2723         	fcall	_CC2500_WriteCommand
  8498  0BB6  0021               	movlb	1	; select bank1
  8499  0BB7  0008               	return
  8500  0BB8                     __end_of_CC2500_RxData:	
  8501                           
  8502                           	psect	text39
  8503  1184                     __ptext39:	
  8504 ;; *************** function _CC2500_ReadStatus *****************
  8505 ;; Defined at:
  8506 ;;		line 308 in file "../src/CC2500_B1.c"
  8507 ;; Parameters:    Size  Location     Type
  8508 ;;  status_addr     1    wreg     unsigned char 
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;  status_addr     1    6[COMMON] unsigned char 
  8511 ;; Return value:  Size  Location     Type
  8512 ;;		None               void
  8513 ;; Registers used:
  8514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8523 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;Total ram usage:        2 bytes
  8525 ;; Hardware stack levels used:    1
  8526 ;; Hardware stack levels required when called:    4
  8527 ;; This function calls:
  8528 ;;		_CC2500_ReadByte
  8529 ;;		_CC2500_WriteByte
  8530 ;;		_RF_Timeout_Counter
  8531 ;;		_setRF_TimeoutCleared
  8532 ;; This function is called by:
  8533 ;;		_CC2500_RxData
  8534 ;; This function uses a non-reentrant model
  8535 ;;
  8536                           
  8537                           
  8538                           ;psect for function _CC2500_ReadStatus
  8539  1184                     _CC2500_ReadStatus:	
  8540                           
  8541                           ;incstack = 0
  8542                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8543                           ;CC2500_ReadStatus@status_addr stored from wreg
  8544  1184  00F6               	movwf	CC2500_ReadStatus@status_addr
  8545                           
  8546                           ;CC2500_B1.c: 309: RC4 = 0;
  8547  1185  0020               	movlb	0	; select bank0
  8548  1186  120E               	bcf	14,4	;volatile
  8549                           
  8550                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8551  1187  0876               	movf	CC2500_ReadStatus@status_addr,w
  8552  1188  3EC0               	addlw	192
  8553  1189  00F5               	movwf	??_CC2500_ReadStatus
  8554  118A  0875               	movf	??_CC2500_ReadStatus,w
  8555  118B  0021               	movlb	1	; select bank1
  8556  118C  00D8               	movwf	_SPI0Buffer^(0+128)
  8557                           
  8558                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8559  118D  2991               	goto	l8908
  8560  118E                     l8906:	
  8561                           
  8562                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8563  118E  319E  269E  3191   	fcall	_RF_Timeout_Counter
  8564  1191                     l8908:	
  8565  1191  0020               	movlb	0	; select bank0
  8566  1192  1D0E               	btfss	14,2	;volatile
  8567  1193  2997               	goto	l8912
  8568  1194  0021               	movlb	1	; select bank1
  8569  1195  1F21               	btfss	(_RF1^(0+128)+1),6
  8570  1196  298E               	goto	l8906
  8571  1197                     l8912:	
  8572                           
  8573                           ;CC2500_B1.c: 314: };
  8574                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8575  1197  319C  2410  3191   	fcall	_setRF_TimeoutCleared
  8576                           
  8577                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8578  119A  319F  270B  3191   	fcall	_CC2500_WriteByte
  8579                           
  8580                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8581  119D  319F  27A8         	fcall	_CC2500_ReadByte
  8582                           
  8583                           ;CC2500_B1.c: 319: RC4 = 1;
  8584  119F  0020               	movlb	0	; select bank0
  8585  11A0  160E               	bsf	14,4	;volatile
  8586                           
  8587                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8588  11A1  0021               	movlb	1	; select bank1
  8589  11A2  0858               	movf	_SPI0Buffer^(0+128),w
  8590  11A3  00F5               	movwf	??_CC2500_ReadStatus
  8591  11A4  0875               	movf	??_CC2500_ReadStatus,w
  8592  11A5  00DD               	movwf	_s_data^(0+128)
  8593  11A6  0008               	return
  8594  11A7                     __end_of_CC2500_ReadStatus:	
  8595                           
  8596                           	psect	text40
  8597  1FA8                     __ptext40:	
  8598 ;; *************** function _CC2500_ReadByte *****************
  8599 ;; Defined at:
  8600 ;;		line 242 in file "../src/CC2500_B1.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;		None
  8603 ;; Auto vars:     Size  Location     Type
  8604 ;;  loop_b          1    4[COMMON] unsigned char 
  8605 ;; Return value:  Size  Location     Type
  8606 ;;		None               void
  8607 ;; Registers used:
  8608 ;;		wreg, status,2, status,0
  8609 ;; Tracked objects:
  8610 ;;		On entry : 0/0
  8611 ;;		On exit  : 0/0
  8612 ;;		Unchanged: 0/0
  8613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8615 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;Total ram usage:        2 bytes
  8619 ;; Hardware stack levels used:    1
  8620 ;; Hardware stack levels required when called:    3
  8621 ;; This function calls:
  8622 ;;		Nothing
  8623 ;; This function is called by:
  8624 ;;		_CC2500_RxData
  8625 ;;		_CC2500_ReadStatus
  8626 ;;		_CC2500_ReadREG
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           
  8631                           ;psect for function _CC2500_ReadByte
  8632  1FA8                     _CC2500_ReadByte:	
  8633                           
  8634                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8635                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8636                           
  8637                           ;incstack = 0
  8638                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8639  1FA8  01F4               	clrf	CC2500_ReadByte@loop_b
  8640  1FA9                     L3:	
  8641  1FA9  3008               	movlw	8
  8642  1FAA  0274               	subwf	CC2500_ReadByte@loop_b,w
  8643  1FAB  1803               	btfsc	3,0
  8644  1FAC  0008               	return
  8645                           
  8646                           ;CC2500_B1.c: 245: RC1 = 1;
  8647  1FAD  0020               	movlb	0	; select bank0
  8648  1FAE  148E               	bsf	14,1	;volatile
  8649                           
  8650                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8651  1FAF  1003               	clrc
  8652  1FB0  0021               	movlb	1	; select bank1
  8653  1FB1  0DD8               	rlf	_SPI0Buffer^(0+128),f
  8654                           
  8655                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8656  1FB2  0020               	movlb	0	; select bank0
  8657  1FB3  1D0E               	btfss	14,2	;volatile
  8658  1FB4  2FB8               	goto	l8718
  8659                           
  8660                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8661  1FB5  0021               	movlb	1	; select bank1
  8662  1FB6  1458               	bsf	_SPI0Buffer^(0+128),0
  8663  1FB7  2FBD               	goto	l8720
  8664  1FB8                     l8718:	
  8665                           
  8666                           ;CC2500_B1.c: 249: else
  8667                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8668  1FB8  30FE               	movlw	254
  8669  1FB9  00F3               	movwf	??_CC2500_ReadByte
  8670  1FBA  0873               	movf	??_CC2500_ReadByte,w
  8671  1FBB  0021               	movlb	1	; select bank1
  8672  1FBC  05D8               	andwf	_SPI0Buffer^(0+128),f
  8673  1FBD                     l8720:	
  8674                           
  8675                           ;CC2500_B1.c: 251: RC1 = 0;
  8676  1FBD  0020               	movlb	0	; select bank0
  8677  1FBE  108E               	bcf	14,1	;volatile
  8678  1FBF  3001               	movlw	1
  8679  1FC0  00F3               	movwf	??_CC2500_ReadByte
  8680  1FC1  0873               	movf	??_CC2500_ReadByte,w
  8681  1FC2  07F4               	addwf	CC2500_ReadByte@loop_b,f
  8682  1FC3  2FA9               	goto	L3
  8683  1FC4                     __end_of_CC2500_ReadByte:	
  8684                           
  8685                           	psect	text41
  8686  1EB3                     __ptext41:	
  8687 ;; *************** function _CC2500_PowerOnInitial *****************
  8688 ;; Defined at:
  8689 ;;		line 126 in file "../src/CC2500_B1.c"
  8690 ;; Parameters:    Size  Location     Type
  8691 ;;		None
  8692 ;; Auto vars:     Size  Location     Type
  8693 ;;		None
  8694 ;; Return value:  Size  Location     Type
  8695 ;;		None               void
  8696 ;; Registers used:
  8697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8698 ;; Tracked objects:
  8699 ;;		On entry : 0/0
  8700 ;;		On exit  : 0/0
  8701 ;;		Unchanged: 0/0
  8702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;Total ram usage:        0 bytes
  8708 ;; Hardware stack levels used:    1
  8709 ;; Hardware stack levels required when called:    6
  8710 ;; This function calls:
  8711 ;;		_CC2500_ClearRXFIFO
  8712 ;;		_CC2500_ClearTXFIFO
  8713 ;;		_CC2500_FrequencyCabr
  8714 ;;		_CC2500_InitPATable
  8715 ;;		_CC2500_InitSetREG
  8716 ;;		_CC2500_PowerRST
  8717 ;;		_CC2500_SIDLEMode
  8718 ;; This function is called by:
  8719 ;;		_main
  8720 ;;		_setRF_Main
  8721 ;; This function uses a non-reentrant model
  8722 ;;
  8723                           
  8724                           
  8725                           ;psect for function _CC2500_PowerOnInitial
  8726  1EB3                     _CC2500_PowerOnInitial:	
  8727                           
  8728                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8729                           
  8730                           ;incstack = 0
  8731                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8732  1EB3  3194  24E5  319E   	fcall	_CC2500_PowerRST
  8733                           
  8734                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8735  1EB6  3192  22BE  319E   	fcall	_CC2500_InitSetREG
  8736                           
  8737                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8738  1EB9  319F  27E1  319E   	fcall	_CC2500_InitPATable
  8739                           
  8740                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8741  1EBC  319C  2418  319E   	fcall	_CC2500_ClearTXFIFO
  8742                           
  8743                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8744  1EBF  319C  2414  319E   	fcall	_CC2500_ClearRXFIFO
  8745                           
  8746                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8747  1EC2  319C  249D  319E   	fcall	_CC2500_FrequencyCabr
  8748                           
  8749                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8750  1EC5  319C  241C         	fcall	_CC2500_SIDLEMode
  8751  1EC7  0008               	return
  8752  1EC8                     __end_of_CC2500_PowerOnInitial:	
  8753                           
  8754                           	psect	text42
  8755  1C1C                     __ptext42:	
  8756 ;; *************** function _CC2500_SIDLEMode *****************
  8757 ;; Defined at:
  8758 ;;		line 216 in file "../src/CC2500_B1.c"
  8759 ;; Parameters:    Size  Location     Type
  8760 ;;		None
  8761 ;; Auto vars:     Size  Location     Type
  8762 ;;		None
  8763 ;; Return value:  Size  Location     Type
  8764 ;;		None               void
  8765 ;; Registers used:
  8766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8767 ;; Tracked objects:
  8768 ;;		On entry : 0/0
  8769 ;;		On exit  : 0/0
  8770 ;;		Unchanged: 0/0
  8771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;Total ram usage:        0 bytes
  8777 ;; Hardware stack levels used:    1
  8778 ;; Hardware stack levels required when called:    5
  8779 ;; This function calls:
  8780 ;;		_CC2500_WriteCommand
  8781 ;; This function is called by:
  8782 ;;		_CC2500_PowerOnInitial
  8783 ;; This function uses a non-reentrant model
  8784 ;;
  8785                           
  8786                           
  8787                           ;psect for function _CC2500_SIDLEMode
  8788  1C1C                     _CC2500_SIDLEMode:	
  8789                           
  8790                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8791                           
  8792                           ;incstack = 0
  8793                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8794  1C1C  3036               	movlw	54
  8795  1C1D  319F  2723         	fcall	_CC2500_WriteCommand
  8796  1C1F  0008               	return
  8797  1C20                     __end_of_CC2500_SIDLEMode:	
  8798                           
  8799                           	psect	text43
  8800  14E5                     __ptext43:	
  8801 ;; *************** function _CC2500_PowerRST *****************
  8802 ;; Defined at:
  8803 ;;		line 139 in file "../src/CC2500_B1.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;		None
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;		None
  8808 ;; Return value:  Size  Location     Type
  8809 ;;		None               void
  8810 ;; Registers used:
  8811 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8812 ;; Tracked objects:
  8813 ;;		On entry : 0/0
  8814 ;;		On exit  : 0/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;Total ram usage:        1 bytes
  8822 ;; Hardware stack levels used:    1
  8823 ;; Hardware stack levels required when called:    4
  8824 ;; This function calls:
  8825 ;;		_CC2500_WriteByte
  8826 ;;		_DelayTime_1us
  8827 ;;		_RF_Timeout_Counter
  8828 ;;		_setRF_TimeoutCleared
  8829 ;; This function is called by:
  8830 ;;		_CC2500_PowerOnInitial
  8831 ;; This function uses a non-reentrant model
  8832 ;;
  8833                           
  8834                           
  8835                           ;psect for function _CC2500_PowerRST
  8836  14E5                     _CC2500_PowerRST:	
  8837                           
  8838                           ;CC2500_B1.c: 140: RC1 = 0;
  8839                           
  8840                           ;incstack = 0
  8841                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8842  14E5  0020               	movlb	0	; select bank0
  8843  14E6  108E               	bcf	14,1	;volatile
  8844                           
  8845                           ;CC2500_B1.c: 141: RC0 = 0;
  8846  14E7  100E               	bcf	14,0	;volatile
  8847                           
  8848                           ;CC2500_B1.c: 142: RC4 = 1;
  8849  14E8  160E               	bsf	14,4	;volatile
  8850                           
  8851                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8852  14E9  300A               	movlw	10
  8853  14EA  00F3               	movwf	DelayTime_1us@count
  8854  14EB  3000               	movlw	0
  8855  14EC  00F4               	movwf	DelayTime_1us@count+1
  8856  14ED  3191  21CC  3194   	fcall	_DelayTime_1us
  8857                           
  8858                           ;CC2500_B1.c: 144: RC4 = 0;
  8859  14F0  0020               	movlb	0	; select bank0
  8860  14F1  120E               	bcf	14,4	;volatile
  8861                           
  8862                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8863  14F2  300A               	movlw	10
  8864  14F3  00F3               	movwf	DelayTime_1us@count
  8865  14F4  3000               	movlw	0
  8866  14F5  00F4               	movwf	DelayTime_1us@count+1
  8867  14F6  3191  21CC  3194   	fcall	_DelayTime_1us
  8868                           
  8869                           ;CC2500_B1.c: 146: RC4 = 1;
  8870  14F9  0020               	movlb	0	; select bank0
  8871  14FA  160E               	bsf	14,4	;volatile
  8872                           
  8873                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8874  14FB  3028               	movlw	40
  8875  14FC  00F3               	movwf	DelayTime_1us@count
  8876  14FD  3000               	movlw	0
  8877  14FE  00F4               	movwf	DelayTime_1us@count+1
  8878  14FF  3191  21CC  3194   	fcall	_DelayTime_1us
  8879                           
  8880                           ;CC2500_B1.c: 148: RC4 = 0;
  8881  1502  0020               	movlb	0	; select bank0
  8882  1503  120E               	bcf	14,4	;volatile
  8883                           
  8884                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8885  1504  3030               	movlw	48
  8886  1505  00F5               	movwf	??_CC2500_PowerRST
  8887  1506  0875               	movf	??_CC2500_PowerRST,w
  8888  1507  0021               	movlb	1	; select bank1
  8889  1508  00D8               	movwf	_SPI0Buffer^(0+128)
  8890                           
  8891                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  8892  1509  2D0D               	goto	l8936
  8893  150A                     l8934:	
  8894                           
  8895                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8896  150A  319E  269E  3194   	fcall	_RF_Timeout_Counter
  8897  150D                     l8936:	
  8898  150D  0020               	movlb	0	; select bank0
  8899  150E  1D0E               	btfss	14,2	;volatile
  8900  150F  2D13               	goto	l8940
  8901  1510  0021               	movlb	1	; select bank1
  8902  1511  1F21               	btfss	(_RF1^(0+128)+1),6
  8903  1512  2D0A               	goto	l8934
  8904  1513                     l8940:	
  8905                           
  8906                           ;CC2500_B1.c: 152: };
  8907                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8908  1513  319C  2410  3194   	fcall	_setRF_TimeoutCleared
  8909                           
  8910                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8911  1516  319F  270B  3194   	fcall	_CC2500_WriteByte
  8912                           
  8913                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  8914  1519  2D1D               	goto	l8946
  8915  151A                     l8944:	
  8916                           
  8917                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8918  151A  319E  269E  3194   	fcall	_RF_Timeout_Counter
  8919  151D                     l8946:	
  8920  151D  0020               	movlb	0	; select bank0
  8921  151E  1D0E               	btfss	14,2	;volatile
  8922  151F  2D23               	goto	l8950
  8923  1520  0021               	movlb	1	; select bank1
  8924  1521  1F21               	btfss	(_RF1^(0+128)+1),6
  8925  1522  2D1A               	goto	l8944
  8926  1523                     l8950:	
  8927                           
  8928                           ;CC2500_B1.c: 157: };
  8929                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  8930  1523  319C  2410         	fcall	_setRF_TimeoutCleared
  8931                           
  8932                           ;CC2500_B1.c: 159: RC0 = 0;
  8933  1525  0020               	movlb	0	; select bank0
  8934  1526  100E               	bcf	14,0	;volatile
  8935                           
  8936                           ;CC2500_B1.c: 160: RC4 = 1;
  8937  1527  160E               	bsf	14,4	;volatile
  8938  1528  0008               	return
  8939  1529                     __end_of_CC2500_PowerRST:	
  8940                           
  8941                           	psect	text44
  8942  12BE                     __ptext44:	
  8943 ;; *************** function _CC2500_InitSetREG *****************
  8944 ;; Defined at:
  8945 ;;		line 166 in file "../src/CC2500_B1.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;		None
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;  loop_c          1    3[BANK0 ] unsigned char 
  8950 ;;  temp2           1    2[BANK0 ] unsigned char 
  8951 ;;  temp1           1    1[BANK0 ] unsigned char 
  8952 ;; Return value:  Size  Location     Type
  8953 ;;		None               void
  8954 ;; Registers used:
  8955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;Total ram usage:        4 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:    5
  8968 ;; This function calls:
  8969 ;;		_CC2500_WriteREG
  8970 ;; This function is called by:
  8971 ;;		_CC2500_PowerOnInitial
  8972 ;; This function uses a non-reentrant model
  8973 ;;
  8974                           
  8975                           
  8976                           ;psect for function _CC2500_InitSetREG
  8977  12BE                     _CC2500_InitSetREG:	
  8978                           
  8979                           ;CC2500_B1.c: 167: unsigned char loop_c;
  8980                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  8981                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  8982                           
  8983                           ;incstack = 0
  8984                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8985  12BE  0020               	movlb	0	; select bank0
  8986  12BF  01A3               	clrf	CC2500_InitSetREG@loop_c
  8987  12C0                     L4:	
  8988  12C0  302F               	movlw	47
  8989  12C1  0223               	subwf	CC2500_InitSetREG@loop_c,w
  8990  12C2  1803               	btfsc	3,0
  8991  12C3  0008               	return
  8992                           
  8993                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  8994  12C4  0823               	movf	CC2500_InitSetREG@loop_c,w
  8995  12C5  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  8996  12C6  0084               	movwf	4
  8997  12C7  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  8998  12C8  1803               	skipnc
  8999  12C9  3E01               	addlw	1
  9000  12CA  0085               	movwf	5
  9001  12CB  0800               	movf	0,w	;code access
  9002  12CC  00A0               	movwf	??_CC2500_InitSetREG
  9003  12CD  0820               	movf	??_CC2500_InitSetREG,w
  9004  12CE  00A1               	movwf	CC2500_InitSetREG@temp1
  9005                           
  9006                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9007  12CF  0823               	movf	CC2500_InitSetREG@loop_c,w
  9008  12D0  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9009  12D1  0084               	movwf	4
  9010  12D2  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9011  12D3  1803               	skipnc
  9012  12D4  3E01               	addlw	1
  9013  12D5  0085               	movwf	5
  9014  12D6  0800               	movf	0,w	;code access
  9015  12D7  00A0               	movwf	??_CC2500_InitSetREG
  9016  12D8  0820               	movf	??_CC2500_InitSetREG,w
  9017  12D9  00A2               	movwf	CC2500_InitSetREG@temp2
  9018                           
  9019                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9020  12DA  0822               	movf	CC2500_InitSetREG@temp2,w
  9021  12DB  00A0               	movwf	??_CC2500_InitSetREG
  9022  12DC  0820               	movf	??_CC2500_InitSetREG,w
  9023  12DD  00F5               	movwf	CC2500_WriteREG@value
  9024  12DE  0821               	movf	CC2500_InitSetREG@temp1,w
  9025  12DF  3191  213F  3192   	fcall	_CC2500_WriteREG
  9026  12E2  3001               	movlw	1
  9027  12E3  0020               	movlb	0	; select bank0
  9028  12E4  00A0               	movwf	??_CC2500_InitSetREG
  9029  12E5  0820               	movf	??_CC2500_InitSetREG,w
  9030  12E6  07A3               	addwf	CC2500_InitSetREG@loop_c,f
  9031  12E7  2AC0               	goto	L4
  9032  12E8                     __end_of_CC2500_InitSetREG:	
  9033                           
  9034                           	psect	text45
  9035  1FE1                     __ptext45:	
  9036 ;; *************** function _CC2500_InitPATable *****************
  9037 ;; Defined at:
  9038 ;;		line 181 in file "../src/CC2500_B1.c"
  9039 ;; Parameters:    Size  Location     Type
  9040 ;;		None
  9041 ;; Auto vars:     Size  Location     Type
  9042 ;;  loop_d          1    2[BANK0 ] unsigned char 
  9043 ;;  temp            1    1[BANK0 ] unsigned char 
  9044 ;; Return value:  Size  Location     Type
  9045 ;;		None               void
  9046 ;; Registers used:
  9047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9048 ;; Tracked objects:
  9049 ;;		On entry : 0/0
  9050 ;;		On exit  : 0/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9054 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;Total ram usage:        3 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    5
  9060 ;; This function calls:
  9061 ;;		_CC2500_WriteREG
  9062 ;; This function is called by:
  9063 ;;		_CC2500_PowerOnInitial
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           
  9068                           ;psect for function _CC2500_InitPATable
  9069  1FE1                     _CC2500_InitPATable:	
  9070                           
  9071                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9072                           ;CC2500_B1.c: 183: unsigned char temp;
  9073                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9074                           
  9075                           ;incstack = 0
  9076                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9077  1FE1  0020               	movlb	0	; select bank0
  9078  1FE2  01A2               	clrf	CC2500_InitPATable@loop_d
  9079  1FE3                     L5:	
  9080  1FE3  3008               	movlw	8
  9081  1FE4  0222               	subwf	CC2500_InitPATable@loop_d,w
  9082  1FE5  1803               	btfsc	3,0
  9083  1FE6  0008               	return
  9084                           
  9085                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9086  1FE7  0822               	movf	CC2500_InitPATable@loop_d,w
  9087  1FE8  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9088  1FE9  0084               	movwf	4
  9089  1FEA  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9090  1FEB  1803               	skipnc
  9091  1FEC  3E01               	addlw	1
  9092  1FED  0085               	movwf	5
  9093  1FEE  0800               	movf	0,w	;code access
  9094  1FEF  00A0               	movwf	??_CC2500_InitPATable
  9095  1FF0  0820               	movf	??_CC2500_InitPATable,w
  9096  1FF1  00A1               	movwf	CC2500_InitPATable@temp
  9097                           
  9098                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9099  1FF2  0821               	movf	CC2500_InitPATable@temp,w
  9100  1FF3  00A0               	movwf	??_CC2500_InitPATable
  9101  1FF4  0820               	movf	??_CC2500_InitPATable,w
  9102  1FF5  00F5               	movwf	CC2500_WriteREG@value
  9103  1FF6  303E               	movlw	62
  9104  1FF7  3191  213F  319F   	fcall	_CC2500_WriteREG
  9105  1FFA  3001               	movlw	1
  9106  1FFB  0020               	movlb	0	; select bank0
  9107  1FFC  00A0               	movwf	??_CC2500_InitPATable
  9108  1FFD  0820               	movf	??_CC2500_InitPATable,w
  9109  1FFE  07A2               	addwf	CC2500_InitPATable@loop_d,f
  9110  1FFF  2FE3               	goto	L5
  9111  2000                     __end_of_CC2500_InitPATable:	
  9112                           
  9113                           	psect	text46
  9114  113F                     __ptext46:	
  9115 ;; *************** function _CC2500_WriteREG *****************
  9116 ;; Defined at:
  9117 ;;		line 258 in file "../src/CC2500_B1.c"
  9118 ;; Parameters:    Size  Location     Type
  9119 ;;  w_addr          1    wreg     unsigned char 
  9120 ;;  value           1    5[COMMON] unsigned char 
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;  w_addr          1    7[COMMON] unsigned char 
  9123 ;; Return value:  Size  Location     Type
  9124 ;;		None               void
  9125 ;; Registers used:
  9126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9127 ;; Tracked objects:
  9128 ;;		On entry : 0/0
  9129 ;;		On exit  : 0/0
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9132 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;Total ram usage:        3 bytes
  9137 ;; Hardware stack levels used:    1
  9138 ;; Hardware stack levels required when called:    4
  9139 ;; This function calls:
  9140 ;;		_CC2500_WriteByte
  9141 ;;		_RF_Timeout_Counter
  9142 ;;		_setRF_TimeoutCleared
  9143 ;; This function is called by:
  9144 ;;		_CC2500_InitSetREG
  9145 ;;		_CC2500_InitPATable
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           
  9150                           ;psect for function _CC2500_WriteREG
  9151  113F                     _CC2500_WriteREG:	
  9152                           
  9153                           ;incstack = 0
  9154                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9155                           ;CC2500_WriteREG@w_addr stored from wreg
  9156  113F  00F7               	movwf	CC2500_WriteREG@w_addr
  9157                           
  9158                           ;CC2500_B1.c: 259: RC4 = 0;
  9159  1140  0020               	movlb	0	; select bank0
  9160  1141  120E               	bcf	14,4	;volatile
  9161                           
  9162                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9163  1142  0877               	movf	CC2500_WriteREG@w_addr,w
  9164  1143  00F6               	movwf	??_CC2500_WriteREG
  9165  1144  0876               	movf	??_CC2500_WriteREG,w
  9166  1145  0021               	movlb	1	; select bank1
  9167  1146  00D8               	movwf	_SPI0Buffer^(0+128)
  9168                           
  9169                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9170  1147  294B               	goto	l8742
  9171  1148                     l8740:	
  9172                           
  9173                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9174  1148  319E  269E  3191   	fcall	_RF_Timeout_Counter
  9175  114B                     l8742:	
  9176  114B  0020               	movlb	0	; select bank0
  9177  114C  1D0E               	btfss	14,2	;volatile
  9178  114D  2951               	goto	l8746
  9179  114E  0021               	movlb	1	; select bank1
  9180  114F  1F21               	btfss	(_RF1^(0+128)+1),6
  9181  1150  2948               	goto	l8740
  9182  1151                     l8746:	
  9183                           
  9184                           ;CC2500_B1.c: 263: };
  9185                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9186  1151  319C  2410  3191   	fcall	_setRF_TimeoutCleared
  9187                           
  9188                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9189  1154  319F  270B  3191   	fcall	_CC2500_WriteByte
  9190                           
  9191                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9192  1157  0875               	movf	CC2500_WriteREG@value,w
  9193  1158  00F6               	movwf	??_CC2500_WriteREG
  9194  1159  0876               	movf	??_CC2500_WriteREG,w
  9195  115A  0021               	movlb	1	; select bank1
  9196  115B  00D8               	movwf	_SPI0Buffer^(0+128)
  9197                           
  9198                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9199  115C  319F  270B         	fcall	_CC2500_WriteByte
  9200                           
  9201                           ;CC2500_B1.c: 269: RC4 = 1;
  9202  115E  0020               	movlb	0	; select bank0
  9203  115F  160E               	bsf	14,4	;volatile
  9204  1160  0008               	return
  9205  1161                     __end_of_CC2500_WriteREG:	
  9206                           
  9207                           	psect	text47
  9208  1C9D                     __ptext47:	
  9209 ;; *************** function _CC2500_FrequencyCabr *****************
  9210 ;; Defined at:
  9211 ;;		line 208 in file "../src/CC2500_B1.c"
  9212 ;; Parameters:    Size  Location     Type
  9213 ;;		None
  9214 ;; Auto vars:     Size  Location     Type
  9215 ;;		None
  9216 ;; Return value:  Size  Location     Type
  9217 ;;		None               void
  9218 ;; Registers used:
  9219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9220 ;; Tracked objects:
  9221 ;;		On entry : 0/0
  9222 ;;		On exit  : 0/0
  9223 ;;		Unchanged: 0/0
  9224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;Total ram usage:        0 bytes
  9230 ;; Hardware stack levels used:    1
  9231 ;; Hardware stack levels required when called:    5
  9232 ;; This function calls:
  9233 ;;		_CC2500_WriteCommand
  9234 ;;		_DelayTime_1us
  9235 ;; This function is called by:
  9236 ;;		_CC2500_PowerOnInitial
  9237 ;; This function uses a non-reentrant model
  9238 ;;
  9239                           
  9240                           
  9241                           ;psect for function _CC2500_FrequencyCabr
  9242  1C9D                     _CC2500_FrequencyCabr:	
  9243                           
  9244                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9245                           
  9246                           ;incstack = 0
  9247                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9248  1C9D  3033               	movlw	51
  9249  1C9E  319F  2723  319C   	fcall	_CC2500_WriteCommand
  9250                           
  9251                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9252  1CA1  30E8               	movlw	232
  9253  1CA2  00F3               	movwf	DelayTime_1us@count
  9254  1CA3  3003               	movlw	3
  9255  1CA4  00F4               	movwf	DelayTime_1us@count+1
  9256  1CA5  3191  21CC         	fcall	_DelayTime_1us
  9257  1CA7  0008               	return
  9258  1CA8                     __end_of_CC2500_FrequencyCabr:	
  9259                           
  9260                           	psect	text48
  9261  11CC                     __ptext48:	
  9262 ;; *************** function _DelayTime_1us *****************
  9263 ;; Defined at:
  9264 ;;		line 327 in file "../src/CC2500_B1.c"
  9265 ;; Parameters:    Size  Location     Type
  9266 ;;  count           2    3[COMMON] int 
  9267 ;; Auto vars:     Size  Location     Type
  9268 ;;  j               2    2[BANK0 ] unsigned int 
  9269 ;;  i               2    0[BANK0 ] unsigned int 
  9270 ;; Return value:  Size  Location     Type
  9271 ;;		None               void
  9272 ;; Registers used:
  9273 ;;		wreg, status,2
  9274 ;; Tracked objects:
  9275 ;;		On entry : 0/0
  9276 ;;		On exit  : 0/0
  9277 ;;		Unchanged: 0/0
  9278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9279 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;Total ram usage:        6 bytes
  9284 ;; Hardware stack levels used:    1
  9285 ;; Hardware stack levels required when called:    3
  9286 ;; This function calls:
  9287 ;;		Nothing
  9288 ;; This function is called by:
  9289 ;;		_CC2500_PowerRST
  9290 ;;		_CC2500_FrequencyCabr
  9291 ;; This function uses a non-reentrant model
  9292 ;;
  9293                           
  9294                           
  9295                           ;psect for function _DelayTime_1us
  9296  11CC                     _DelayTime_1us:	
  9297                           
  9298                           ;CC2500_B1.c: 328: unsigned int i, j;
  9299                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9300                           
  9301                           ;incstack = 0
  9302                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9303  11CC  3001               	movlw	1
  9304  11CD  0020               	movlb	0	; select bank0
  9305  11CE  00A0               	movwf	DelayTime_1us@i
  9306  11CF  3000               	movlw	0
  9307  11D0  00A1               	movwf	DelayTime_1us@i+1
  9308  11D1                     l363:	
  9309  11D1  0874               	movf	DelayTime_1us@count+1,w
  9310  11D2  0221               	subwf	DelayTime_1us@i+1,w
  9311  11D3  1D03               	skipz
  9312  11D4  29D7               	goto	u9365
  9313  11D5  0873               	movf	DelayTime_1us@count,w
  9314  11D6  0220               	subwf	DelayTime_1us@i,w
  9315  11D7                     u9365:	
  9316  11D7  1803               	btfsc	3,0
  9317  11D8  0008               	return
  9318                           
  9319                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9320  11D9  01A2               	clrf	DelayTime_1us@j
  9321  11DA  01A3               	clrf	DelayTime_1us@j+1
  9322  11DB  3000               	movlw	0
  9323  11DC  0223               	subwf	DelayTime_1us@j+1,w
  9324  11DD  3002               	movlw	2
  9325  11DE  1903               	skipnz
  9326  11DF  0222               	subwf	DelayTime_1us@j,w
  9327  11E0  1803               	btfsc	3,0
  9328  11E1  29ED               	goto	l8734
  9329  11E2                     l8732:	
  9330  11E2  3001               	movlw	1
  9331  11E3  07A2               	addwf	DelayTime_1us@j,f
  9332  11E4  3000               	movlw	0
  9333  11E5  3DA3               	addwfc	DelayTime_1us@j+1,f
  9334  11E6  3000               	movlw	0
  9335  11E7  0223               	subwf	DelayTime_1us@j+1,w
  9336  11E8  3002               	movlw	2
  9337  11E9  1903               	skipnz
  9338  11EA  0222               	subwf	DelayTime_1us@j,w
  9339  11EB  1C03               	skipc
  9340  11EC  29E2               	goto	l8732
  9341  11ED                     l8734:	
  9342  11ED  3001               	movlw	1
  9343  11EE  07A0               	addwf	DelayTime_1us@i,f
  9344  11EF  3000               	movlw	0
  9345  11F0  3DA1               	addwfc	DelayTime_1us@i+1,f
  9346  11F1  29D1               	goto	l363
  9347  11F2                     __end_of_DelayTime_1us:	
  9348                           
  9349                           	psect	text49
  9350  1C18                     __ptext49:	
  9351 ;; *************** function _CC2500_ClearTXFIFO *****************
  9352 ;; Defined at:
  9353 ;;		line 194 in file "../src/CC2500_B1.c"
  9354 ;; Parameters:    Size  Location     Type
  9355 ;;		None
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;		None
  9358 ;; Return value:  Size  Location     Type
  9359 ;;		None               void
  9360 ;; Registers used:
  9361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9362 ;; Tracked objects:
  9363 ;;		On entry : 0/0
  9364 ;;		On exit  : 0/0
  9365 ;;		Unchanged: 0/0
  9366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;Total ram usage:        0 bytes
  9372 ;; Hardware stack levels used:    1
  9373 ;; Hardware stack levels required when called:    5
  9374 ;; This function calls:
  9375 ;;		_CC2500_WriteCommand
  9376 ;; This function is called by:
  9377 ;;		_CC2500_PowerOnInitial
  9378 ;; This function uses a non-reentrant model
  9379 ;;
  9380                           
  9381                           
  9382                           ;psect for function _CC2500_ClearTXFIFO
  9383  1C18                     _CC2500_ClearTXFIFO:	
  9384                           
  9385                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9386                           
  9387                           ;incstack = 0
  9388                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9389  1C18  303B               	movlw	59
  9390  1C19  319F  2723         	fcall	_CC2500_WriteCommand
  9391  1C1B  0008               	return
  9392  1C1C                     __end_of_CC2500_ClearTXFIFO:	
  9393                           
  9394                           	psect	text50
  9395  1C14                     __ptext50:	
  9396 ;; *************** function _CC2500_ClearRXFIFO *****************
  9397 ;; Defined at:
  9398 ;;		line 201 in file "../src/CC2500_B1.c"
  9399 ;; Parameters:    Size  Location     Type
  9400 ;;		None
  9401 ;; Auto vars:     Size  Location     Type
  9402 ;;		None
  9403 ;; Return value:  Size  Location     Type
  9404 ;;		None               void
  9405 ;; Registers used:
  9406 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9407 ;; Tracked objects:
  9408 ;;		On entry : 0/0
  9409 ;;		On exit  : 0/0
  9410 ;;		Unchanged: 0/0
  9411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;Total ram usage:        0 bytes
  9417 ;; Hardware stack levels used:    1
  9418 ;; Hardware stack levels required when called:    5
  9419 ;; This function calls:
  9420 ;;		_CC2500_WriteCommand
  9421 ;; This function is called by:
  9422 ;;		_CC2500_PowerOnInitial
  9423 ;; This function uses a non-reentrant model
  9424 ;;
  9425                           
  9426                           
  9427                           ;psect for function _CC2500_ClearRXFIFO
  9428  1C14                     _CC2500_ClearRXFIFO:	
  9429                           
  9430                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9431                           
  9432                           ;incstack = 0
  9433                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9434  1C14  303A               	movlw	58
  9435  1C15  319F  2723         	fcall	_CC2500_WriteCommand
  9436  1C17  0008               	return
  9437  1C18                     __end_of_CC2500_ClearRXFIFO:	
  9438                           
  9439                           	psect	text51
  9440  1F23                     __ptext51:	
  9441 ;; *************** function _CC2500_WriteCommand *****************
  9442 ;; Defined at:
  9443 ;;		line 292 in file "../src/CC2500_B1.c"
  9444 ;; Parameters:    Size  Location     Type
  9445 ;;  command         1    wreg     unsigned char 
  9446 ;; Auto vars:     Size  Location     Type
  9447 ;;  command         1    6[COMMON] unsigned char 
  9448 ;; Return value:  Size  Location     Type
  9449 ;;		None               void
  9450 ;; Registers used:
  9451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9452 ;; Tracked objects:
  9453 ;;		On entry : 0/0
  9454 ;;		On exit  : 0/0
  9455 ;;		Unchanged: 0/0
  9456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;Total ram usage:        2 bytes
  9462 ;; Hardware stack levels used:    1
  9463 ;; Hardware stack levels required when called:    4
  9464 ;; This function calls:
  9465 ;;		_CC2500_WriteByte
  9466 ;;		_RF_Timeout_Counter
  9467 ;;		_setRF_TimeoutCleared
  9468 ;; This function is called by:
  9469 ;;		_CC2500_TxData
  9470 ;;		_CC2500_RxData
  9471 ;;		_CC2500_ClearTXFIFO
  9472 ;;		_CC2500_ClearRXFIFO
  9473 ;;		_CC2500_FrequencyCabr
  9474 ;;		_CC2500_SIDLEMode
  9475 ;;		_setRF_Main
  9476 ;;		_RF_RxDisable
  9477 ;; This function uses a non-reentrant model
  9478 ;;
  9479                           
  9480                           
  9481                           ;psect for function _CC2500_WriteCommand
  9482  1F23                     _CC2500_WriteCommand:	
  9483                           
  9484                           ;incstack = 0
  9485                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9486                           ;CC2500_WriteCommand@command stored from wreg
  9487  1F23  00F6               	movwf	CC2500_WriteCommand@command
  9488                           
  9489                           ;CC2500_B1.c: 293: RC4 = 0;
  9490  1F24  0020               	movlb	0	; select bank0
  9491  1F25  120E               	bcf	14,4	;volatile
  9492                           
  9493                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9494  1F26  0876               	movf	CC2500_WriteCommand@command,w
  9495  1F27  00F5               	movwf	??_CC2500_WriteCommand
  9496  1F28  0875               	movf	??_CC2500_WriteCommand,w
  9497  1F29  0021               	movlb	1	; select bank1
  9498  1F2A  00D8               	movwf	_SPI0Buffer^(0+128)
  9499                           
  9500                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9501  1F2B  2F2F               	goto	l8696
  9502  1F2C                     l8694:	
  9503                           
  9504                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9505  1F2C  319E  269E  319F   	fcall	_RF_Timeout_Counter
  9506  1F2F                     l8696:	
  9507  1F2F  0020               	movlb	0	; select bank0
  9508  1F30  1D0E               	btfss	14,2	;volatile
  9509  1F31  2F35               	goto	l8700
  9510  1F32  0021               	movlb	1	; select bank1
  9511  1F33  1F21               	btfss	(_RF1^(0+128)+1),6
  9512  1F34  2F2C               	goto	l8694
  9513  1F35                     l8700:	
  9514                           
  9515                           ;CC2500_B1.c: 298: };
  9516                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9517  1F35  319C  2410  319F   	fcall	_setRF_TimeoutCleared
  9518                           
  9519                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9520  1F38  319F  270B         	fcall	_CC2500_WriteByte
  9521                           
  9522                           ;CC2500_B1.c: 302: RC4 = 1;
  9523  1F3A  0020               	movlb	0	; select bank0
  9524  1F3B  160E               	bsf	14,4	;volatile
  9525  1F3C  0008               	return
  9526  1F3D                     __end_of_CC2500_WriteCommand:	
  9527                           
  9528                           	psect	text52
  9529  1C10                     __ptext52:	
  9530 ;; *************** function _setRF_TimeoutCleared *****************
  9531 ;; Defined at:
  9532 ;;		line 144 in file "../src/RF_Control_B1.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;		None
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;		None
  9537 ;; Return value:  Size  Location     Type
  9538 ;;		None               void
  9539 ;; Registers used:
  9540 ;;		status,2
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;Total ram usage:        0 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    3
  9553 ;; This function calls:
  9554 ;;		Nothing
  9555 ;; This function is called by:
  9556 ;;		_CC2500_TxData
  9557 ;;		_CC2500_RxData
  9558 ;;		_CC2500_PowerRST
  9559 ;;		_CC2500_WriteREG
  9560 ;;		_CC2500_WriteCommand
  9561 ;;		_CC2500_ReadStatus
  9562 ;;		_CC2500_ReadREG
  9563 ;; This function uses a non-reentrant model
  9564 ;;
  9565                           
  9566                           
  9567                           ;psect for function _setRF_TimeoutCleared
  9568  1C10                     _setRF_TimeoutCleared:	
  9569                           
  9570                           ;RF_Control_B1.c: 145: RF1.TimeoutCount = 0;
  9571                           
  9572                           ;incstack = 0
  9573                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9574  1C10  0021               	movlb	1	; select bank1
  9575  1C11  01AC               	clrf	(_RF1^(0+128)+12)
  9576  1C12  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9577  1C13  0008               	return
  9578  1C14                     __end_of_setRF_TimeoutCleared:	
  9579                           
  9580                           	psect	text53
  9581  1E9E                     __ptext53:	
  9582 ;; *************** function _RF_Timeout_Counter *****************
  9583 ;; Defined at:
  9584 ;;		line 136 in file "../src/RF_Control_B1.c"
  9585 ;; Parameters:    Size  Location     Type
  9586 ;;		None
  9587 ;; Auto vars:     Size  Location     Type
  9588 ;;		None
  9589 ;; Return value:  Size  Location     Type
  9590 ;;		None               void
  9591 ;; Registers used:
  9592 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9593 ;; Tracked objects:
  9594 ;;		On entry : 0/0
  9595 ;;		On exit  : 0/0
  9596 ;;		Unchanged: 0/0
  9597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;Total ram usage:        0 bytes
  9603 ;; Hardware stack levels used:    1
  9604 ;; Hardware stack levels required when called:    3
  9605 ;; This function calls:
  9606 ;;		Nothing
  9607 ;; This function is called by:
  9608 ;;		_CC2500_TxData
  9609 ;;		_CC2500_RxData
  9610 ;;		_CC2500_PowerRST
  9611 ;;		_CC2500_WriteREG
  9612 ;;		_CC2500_WriteCommand
  9613 ;;		_CC2500_ReadStatus
  9614 ;;		_CC2500_ReadREG
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           
  9619                           ;psect for function _RF_Timeout_Counter
  9620  1E9E                     _RF_Timeout_Counter:	
  9621                           
  9622                           ;RF_Control_B1.c: 137: RF1.TimeoutCount++;
  9623                           
  9624                           ;incstack = 0
  9625                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9626  1E9E  3001               	movlw	1
  9627  1E9F  0021               	movlb	1	; select bank1
  9628  1EA0  07AC               	addwf	(_RF1^(0+128)+12),f
  9629  1EA1  3000               	movlw	0
  9630  1EA2  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9631                           
  9632                           ;RF_Control_B1.c: 138: if (RF1.TimeoutCount == 25000) {
  9633  1EA3  300C               	movlw	12
  9634  1EA4  3EA0               	addlw	_RF1& (0+255)
  9635  1EA5  0086               	movwf	6
  9636  1EA6  0187               	clrf	7
  9637  1EA7  3F40               	moviw [0]fsr1
  9638  1EA8  3AA8               	xorlw	168
  9639  1EA9  1D03               	skipz
  9640  1EAA  2EAD               	goto	u9015
  9641  1EAB  3F41               	moviw [1]fsr1
  9642  1EAC  3A61               	xorlw	97
  9643  1EAD                     u9015:	
  9644  1EAD  1D03               	skipz
  9645  1EAE  0008               	return
  9646                           
  9647                           ;RF_Control_B1.c: 139: RF1.TimeoutCount = 0;
  9648  1EAF  01AC               	clrf	(_RF1^(0+128)+12)
  9649  1EB0  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9650                           
  9651                           ;RF_Control_B1.c: 140: RF1.Timeout = 1;
  9652  1EB1  1721               	bsf	(_RF1^(0+128)+1),6
  9653  1EB2  0008               	return
  9654  1EB3                     __end_of_RF_Timeout_Counter:	
  9655                           
  9656                           	psect	text54
  9657  1F0B                     __ptext54:	
  9658 ;; *************** function _CC2500_WriteByte *****************
  9659 ;; Defined at:
  9660 ;;		line 226 in file "../src/CC2500_B1.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;		None
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  loop_a          1    4[COMMON] unsigned char 
  9665 ;; Return value:  Size  Location     Type
  9666 ;;		None               void
  9667 ;; Registers used:
  9668 ;;		wreg, status,2, status,0
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;Total ram usage:        2 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    3
  9681 ;; This function calls:
  9682 ;;		Nothing
  9683 ;; This function is called by:
  9684 ;;		_CC2500_TxData
  9685 ;;		_CC2500_RxData
  9686 ;;		_CC2500_PowerRST
  9687 ;;		_CC2500_WriteREG
  9688 ;;		_CC2500_WriteCommand
  9689 ;;		_CC2500_ReadStatus
  9690 ;;		_CC2500_ReadREG
  9691 ;; This function uses a non-reentrant model
  9692 ;;
  9693                           
  9694                           
  9695                           ;psect for function _CC2500_WriteByte
  9696  1F0B                     _CC2500_WriteByte:	
  9697                           
  9698                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9699                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9700                           
  9701                           ;incstack = 0
  9702                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9703  1F0B  01F4               	clrf	CC2500_WriteByte@loop_a
  9704  1F0C                     L6:	
  9705  1F0C  3008               	movlw	8
  9706  1F0D  0274               	subwf	CC2500_WriteByte@loop_a,w
  9707  1F0E  1803               	btfsc	3,0
  9708  1F0F  0008               	return
  9709                           
  9710                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9711  1F10  0021               	movlb	1	; select bank1
  9712  1F11  1FD8               	btfss	_SPI0Buffer^(0+128),7
  9713  1F12  2F16               	goto	l319
  9714                           
  9715                           ;CC2500_B1.c: 230: RC0 = 1;
  9716  1F13  0020               	movlb	0	; select bank0
  9717  1F14  140E               	bsf	14,0	;volatile
  9718  1F15  2F18               	goto	l320
  9719  1F16                     l319:	
  9720                           
  9721                           ;CC2500_B1.c: 231: else
  9722                           ;CC2500_B1.c: 232: RC0 = 0;
  9723  1F16  0020               	movlb	0	; select bank0
  9724  1F17  100E               	bcf	14,0	;volatile
  9725  1F18                     l320:	
  9726                           
  9727                           ;CC2500_B1.c: 233: RC1 = 1;
  9728  1F18  148E               	bsf	14,1	;volatile
  9729                           
  9730                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9731  1F19  1003               	clrc
  9732  1F1A  0021               	movlb	1	; select bank1
  9733  1F1B  0DD8               	rlf	_SPI0Buffer^(0+128),f
  9734                           
  9735                           ;CC2500_B1.c: 235: RC1 = 0;
  9736  1F1C  0020               	movlb	0	; select bank0
  9737  1F1D  108E               	bcf	14,1	;volatile
  9738  1F1E  3001               	movlw	1
  9739  1F1F  00F3               	movwf	??_CC2500_WriteByte
  9740  1F20  0873               	movf	??_CC2500_WriteByte,w
  9741  1F21  07F4               	addwf	CC2500_WriteByte@loop_a,f
  9742  1F22  2F0C               	goto	L6
  9743  1F23                     __end_of_CC2500_WriteByte:	
  9744                           
  9745                           	psect	text55
  9746  1C00                     __ptext55:	
  9747 ;; *************** function _RF_Initialization *****************
  9748 ;; Defined at:
  9749 ;;		line 9 in file "../src/RF_Control_B1.c"
  9750 ;; Parameters:    Size  Location     Type
  9751 ;;		None
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;		None
  9754 ;; Return value:  Size  Location     Type
  9755 ;;		None               void
  9756 ;; Registers used:
  9757 ;;		wreg, status,2, status,0, pclath, cstack
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;Total ram usage:        0 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; Hardware stack levels required when called:    4
  9770 ;; This function calls:
  9771 ;;		_setRF_Initialization
  9772 ;; This function is called by:
  9773 ;;		_main
  9774 ;; This function uses a non-reentrant model
  9775 ;;
  9776                           
  9777                           
  9778                           ;psect for function _RF_Initialization
  9779  1C00                     _RF_Initialization:	
  9780                           
  9781                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9782                           
  9783                           ;incstack = 0
  9784                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9785  1C00  319C  247D         	fcall	_setRF_Initialization
  9786  1C02  0008               	return
  9787  1C03                     __end_of_RF_Initialization:	
  9788                           
  9789                           	psect	text56
  9790  1C7D                     __ptext56:	
  9791 ;; *************** function _setRF_Initialization *****************
  9792 ;; Defined at:
  9793 ;;		line 43 in file "../src/RF_Control_B1.c"
  9794 ;; Parameters:    Size  Location     Type
  9795 ;;		None
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;		None
  9798 ;; Return value:  Size  Location     Type
  9799 ;;		None               void
  9800 ;; Registers used:
  9801 ;;		wreg
  9802 ;; Tracked objects:
  9803 ;;		On entry : 0/0
  9804 ;;		On exit  : 0/0
  9805 ;;		Unchanged: 0/0
  9806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;Total ram usage:        1 bytes
  9812 ;; Hardware stack levels used:    1
  9813 ;; Hardware stack levels required when called:    3
  9814 ;; This function calls:
  9815 ;;		Nothing
  9816 ;; This function is called by:
  9817 ;;		_RF_Initialization
  9818 ;; This function uses a non-reentrant model
  9819 ;;
  9820                           
  9821                           
  9822                           ;psect for function _setRF_Initialization
  9823  1C7D                     _setRF_Initialization:	
  9824                           
  9825                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9826                           
  9827                           ;incstack = 0
  9828                           ; Regs used in _setRF_Initialization: [wreg]
  9829  1C7D  3015               	movlw	21
  9830  1C7E  00F3               	movwf	??_setRF_Initialization
  9831  1C7F  0873               	movf	??_setRF_Initialization,w
  9832  1C80  0021               	movlb	1	; select bank1
  9833  1C81  00DA               	movwf	_Tx_Length^(0+128)
  9834                           
  9835                           ;RF_Control_B1.c: 46: RF1.RunTime = 100;
  9836  1C82  3064               	movlw	100
  9837  1C83  00A7               	movwf	(_RF1^(0+128)+7)
  9838  1C84  3000               	movlw	0
  9839  1C85  00A8               	movwf	(_RF1^(0+128)+8)
  9840  1C86  0008               	return
  9841  1C87                     __end_of_setRF_Initialization:	
  9842                           
  9843                           	psect	text57
  9844  1E27                     __ptext57:	
  9845 ;; *************** function _Mcu_Initialization *****************
  9846 ;; Defined at:
  9847 ;;		line 30 in file "../src/MCU_B1.c"
  9848 ;; Parameters:    Size  Location     Type
  9849 ;;		None
  9850 ;; Auto vars:     Size  Location     Type
  9851 ;;		None
  9852 ;; Return value:  Size  Location     Type
  9853 ;;		None               void
  9854 ;; Registers used:
  9855 ;;		wreg, status,2, status,0, pclath, cstack
  9856 ;; Tracked objects:
  9857 ;;		On entry : 0/0
  9858 ;;		On exit  : 0/0
  9859 ;;		Unchanged: 0/0
  9860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;Total ram usage:        0 bytes
  9866 ;; Hardware stack levels used:    1
  9867 ;; Hardware stack levels required when called:    4
  9868 ;; This function calls:
  9869 ;;		_ADC_Set
  9870 ;;		_Fosc_Set
  9871 ;;		_IOC_Set
  9872 ;;		_IO_Set
  9873 ;;		_TMR1_Set
  9874 ;;		_WDT_Set
  9875 ;; This function is called by:
  9876 ;;		_main
  9877 ;; This function uses a non-reentrant model
  9878 ;;
  9879                           
  9880                           
  9881                           ;psect for function _Mcu_Initialization
  9882  1E27                     _Mcu_Initialization:	
  9883                           
  9884                           ;MCU_B1.c: 32: Fosc_Set();
  9885                           
  9886                           ;incstack = 0
  9887                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9888  1E27  319C  240C  319E   	fcall	_Fosc_Set
  9889                           
  9890                           ;MCU_B1.c: 34: IO_Set();
  9891  1E2A  319F  278D  319E   	fcall	_IO_Set
  9892                           
  9893                           ;MCU_B1.c: 36: ;;
  9894                           ;MCU_B1.c: 38: TMR1_Set();
  9895  1E2D  319C  24E3  319E   	fcall	_TMR1_Set
  9896                           
  9897                           ;MCU_B1.c: 40: ADC_Set();
  9898  1E30  319C  244B  319E   	fcall	_ADC_Set
  9899                           
  9900                           ;MCU_B1.c: 42: ;;
  9901                           ;MCU_B1.c: 44: ;;
  9902                           ;MCU_B1.c: 46: IOC_Set();
  9903  1E33  319C  24D7  319E   	fcall	_IOC_Set
  9904                           
  9905                           ;MCU_B1.c: 48: ;;
  9906                           ;MCU_B1.c: 50: ;;
  9907                           ;MCU_B1.c: 52: WDT_Set();
  9908  1E36  319C  2474         	fcall	_WDT_Set
  9909  1E38  0008               	return
  9910  1E39                     __end_of_Mcu_Initialization:	
  9911                           
  9912                           	psect	text58
  9913  1C74                     __ptext58:	
  9914 ;; *************** function _WDT_Set *****************
  9915 ;; Defined at:
  9916 ;;		line 1088 in file "../src/MCU_B1.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;		None
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;		None
  9921 ;; Return value:  Size  Location     Type
  9922 ;;		None               void
  9923 ;; Registers used:
  9924 ;;		wreg
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;Total ram usage:        1 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:    3
  9937 ;; This function calls:
  9938 ;;		Nothing
  9939 ;; This function is called by:
  9940 ;;		_Mcu_Initialization
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           
  9945                           ;psect for function _WDT_Set
  9946  1C74                     _WDT_Set:	
  9947                           
  9948                           ;MCU_B1.c: 1095: WDTCON = 0b00010111;;
  9949                           
  9950                           ;incstack = 0
  9951                           ; Regs used in _WDT_Set: [wreg]
  9952  1C74  3017               	movlw	23
  9953  1C75  0021               	movlb	1	; select bank1
  9954  1C76  0097               	movwf	23	;volatile
  9955                           
  9956                           ;MCU_B1.c: 1097: WDT.Enable = 1;
  9957  1C77  1450               	bsf	_WDT^(0+128),0
  9958                           
  9959                           ;MCU_B1.c: 1098: WDT.Timer = 10;
  9960  1C78  300A               	movlw	10
  9961  1C79  00F3               	movwf	??_WDT_Set
  9962  1C7A  0873               	movf	??_WDT_Set,w
  9963  1C7B  00D1               	movwf	(_WDT^(0+128)+1)
  9964  1C7C  0008               	return
  9965  1C7D                     __end_of_WDT_Set:	
  9966                           
  9967                           	psect	text59
  9968  1CE3                     __ptext59:	
  9969 ;; *************** function _TMR1_Set *****************
  9970 ;; Defined at:
  9971 ;;		line 221 in file "../src/MCU_B1.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;		None
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;		None
  9976 ;; Return value:  Size  Location     Type
  9977 ;;		None               void
  9978 ;; Registers used:
  9979 ;;		wreg
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;Total ram usage:        0 bytes
  9990 ;; Hardware stack levels used:    1
  9991 ;; Hardware stack levels required when called:    3
  9992 ;; This function calls:
  9993 ;;		Nothing
  9994 ;; This function is called by:
  9995 ;;		_Mcu_Initialization
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           
 10000                           ;psect for function _TMR1_Set
 10001  1CE3                     _TMR1_Set:	
 10002                           
 10003                           ;MCU_B1.c: 222: T1CON = (0x40 | 0x00 | 0x01);
 10004                           
 10005                           ;incstack = 0
 10006                           ; Regs used in _TMR1_Set: [wreg]
 10007  1CE3  3041               	movlw	65
 10008  1CE4  0020               	movlb	0	; select bank0
 10009  1CE5  0098               	movwf	24	;volatile
 10010                           
 10011                           ;MCU_B1.c: 223: TMR1H = (int)((65536-1480)/256);
 10012  1CE6  30FA               	movlw	250
 10013  1CE7  0097               	movwf	23	;volatile
 10014                           
 10015                           ;MCU_B1.c: 224: TMR1L = (int)((65536-1480)%256);
 10016  1CE8  3038               	movlw	56
 10017  1CE9  0096               	movwf	22	;volatile
 10018                           
 10019                           ;MCU_B1.c: 225: TMR1IE = 1;
 10020  1CEA  0021               	movlb	1	; select bank1
 10021  1CEB  1411               	bsf	17,0	;volatile
 10022                           
 10023                           ;MCU_B1.c: 226: PEIE = 1;
 10024  1CEC  170B               	bsf	11,6	;volatile
 10025                           
 10026                           ;MCU_B1.c: 227: GIE = 1;
 10027  1CED  178B               	bsf	11,7	;volatile
 10028  1CEE  0008               	return
 10029  1CEF                     __end_of_TMR1_Set:	
 10030                           
 10031                           	psect	text60
 10032  1F8D                     __ptext60:	
 10033 ;; *************** function _IO_Set *****************
 10034 ;; Defined at:
 10035 ;;		line 60 in file "../src/MCU_B1.c"
 10036 ;; Parameters:    Size  Location     Type
 10037 ;;		None
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;		None
 10040 ;; Return value:  Size  Location     Type
 10041 ;;		None               void
 10042 ;; Registers used:
 10043 ;;		wreg, status,2
 10044 ;; Tracked objects:
 10045 ;;		On entry : 0/0
 10046 ;;		On exit  : 0/0
 10047 ;;		Unchanged: 0/0
 10048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;Total ram usage:        0 bytes
 10054 ;; Hardware stack levels used:    1
 10055 ;; Hardware stack levels required when called:    3
 10056 ;; This function calls:
 10057 ;;		Nothing
 10058 ;; This function is called by:
 10059 ;;		_Mcu_Initialization
 10060 ;; This function uses a non-reentrant model
 10061 ;;
 10062                           
 10063                           
 10064                           ;psect for function _IO_Set
 10065  1F8D                     _IO_Set:	
 10066                           
 10067                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10068                           
 10069                           ;incstack = 0
 10070                           ; Regs used in _IO_Set: [wreg+status,2]
 10071  1F8D  3077               	movlw	119
 10072  1F8E  0021               	movlb	1	; select bank1
 10073  1F8F  008C               	movwf	12	;volatile
 10074                           
 10075                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10076  1F90  3007               	movlw	7
 10077  1F91  008D               	movwf	13	;volatile
 10078                           
 10079                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10080  1F92  300C               	movlw	12
 10081  1F93  008E               	movwf	14	;volatile
 10082                           
 10083                           ;MCU_B1.c: 92: LATA = 0b00000000;;
 10084  1F94  0022               	movlb	2	; select bank2
 10085  1F95  018C               	clrf	12	;volatile
 10086                           
 10087                           ;MCU_B1.c: 93: LATB = 0b00000010;;
 10088  1F96  3002               	movlw	2
 10089  1F97  008D               	movwf	13	;volatile
 10090                           
 10091                           ;MCU_B1.c: 94: LATC = 0b00000000;;
 10092  1F98  018E               	clrf	14	;volatile
 10093                           
 10094                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10095  1F99  3022               	movlw	34
 10096  1F9A  0023               	movlb	3	; select bank3
 10097  1F9B  008C               	movwf	12	;volatile
 10098                           
 10099                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10100  1F9C  018D               	clrf	13	;volatile
 10101                           
 10102                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10103  1F9D  018E               	clrf	14	;volatile
 10104                           
 10105                           ;MCU_B1.c: 100: PORTA = 0b01110111;;
 10106  1F9E  3077               	movlw	119
 10107  1F9F  0020               	movlb	0	; select bank0
 10108  1FA0  008C               	movwf	12	;volatile
 10109                           
 10110                           ;MCU_B1.c: 101: PORTB = 0b00000111;;
 10111  1FA1  3007               	movlw	7
 10112  1FA2  008D               	movwf	13	;volatile
 10113                           
 10114                           ;MCU_B1.c: 102: PORTC = 0b00001100;;
 10115  1FA3  300C               	movlw	12
 10116  1FA4  008E               	movwf	14	;volatile
 10117                           
 10118                           ;MCU_B1.c: 104: WPUB = 0b00000000;;
 10119  1FA5  0024               	movlb	4	; select bank4
 10120  1FA6  018D               	clrf	13	;volatile
 10121  1FA7  0008               	return
 10122  1FA8                     __end_of_IO_Set:	
 10123                           
 10124                           	psect	text61
 10125  1CD7                     __ptext61:	
 10126 ;; *************** function _IOC_Set *****************
 10127 ;; Defined at:
 10128 ;;		line 360 in file "../src/MCU_B1.c"
 10129 ;; Parameters:    Size  Location     Type
 10130 ;;		None
 10131 ;; Auto vars:     Size  Location     Type
 10132 ;;		None
 10133 ;; Return value:  Size  Location     Type
 10134 ;;		None               void
 10135 ;; Registers used:
 10136 ;;		wreg, status,2
 10137 ;; Tracked objects:
 10138 ;;		On entry : 0/0
 10139 ;;		On exit  : 0/0
 10140 ;;		Unchanged: 0/0
 10141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;Total ram usage:        0 bytes
 10147 ;; Hardware stack levels used:    1
 10148 ;; Hardware stack levels required when called:    3
 10149 ;; This function calls:
 10150 ;;		Nothing
 10151 ;; This function is called by:
 10152 ;;		_Mcu_Initialization
 10153 ;; This function uses a non-reentrant model
 10154 ;;
 10155                           
 10156                           
 10157                           ;psect for function _IOC_Set
 10158  1CD7                     _IOC_Set:	
 10159                           
 10160                           ;MCU_B1.c: 361: WPUB2 = 0;
 10161                           
 10162                           ;incstack = 0
 10163                           ; Regs used in _IOC_Set: [wreg+status,2]
 10164  1CD7  0024               	movlb	4	; select bank4
 10165  1CD8  110D               	bcf	13,2	;volatile
 10166                           
 10167                           ;MCU_B1.c: 381: IOCBP = 0b00000100;
 10168  1CD9  3004               	movlw	4
 10169  1CDA  0027               	movlb	7	; select bank7
 10170  1CDB  0094               	movwf	20	;volatile
 10171                           
 10172                           ;MCU_B1.c: 382: IOCBN = 0b00000000;
 10173  1CDC  0195               	clrf	21	;volatile
 10174                           
 10175                           ;MCU_B1.c: 386: IOCBF = 0b00000000;
 10176  1CDD  0196               	clrf	22	;volatile
 10177                           
 10178                           ;MCU_B1.c: 388: IOCIE = 1;
 10179  1CDE  158B               	bsf	11,3	;volatile
 10180                           
 10181                           ;MCU_B1.c: 389: IOCIF = 0;
 10182  1CDF  100B               	bcf	11,0	;volatile
 10183                           
 10184                           ;MCU_B1.c: 390: PEIE = 1;
 10185  1CE0  170B               	bsf	11,6	;volatile
 10186                           
 10187                           ;MCU_B1.c: 391: GIE = 1;
 10188  1CE1  178B               	bsf	11,7	;volatile
 10189  1CE2  0008               	return
 10190  1CE3                     __end_of_IOC_Set:	
 10191                           
 10192                           	psect	text62
 10193  1C0C                     __ptext62:	
 10194 ;; *************** function _Fosc_Set *****************
 10195 ;; Defined at:
 10196 ;;		line 56 in file "../src/MCU_B1.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;		None
 10199 ;; Auto vars:     Size  Location     Type
 10200 ;;		None
 10201 ;; Return value:  Size  Location     Type
 10202 ;;		None               void
 10203 ;; Registers used:
 10204 ;;		wreg
 10205 ;; Tracked objects:
 10206 ;;		On entry : 0/0
 10207 ;;		On exit  : 0/0
 10208 ;;		Unchanged: 0/0
 10209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;Total ram usage:        0 bytes
 10215 ;; Hardware stack levels used:    1
 10216 ;; Hardware stack levels required when called:    3
 10217 ;; This function calls:
 10218 ;;		Nothing
 10219 ;; This function is called by:
 10220 ;;		_Mcu_Initialization
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224                           
 10225                           ;psect for function _Fosc_Set
 10226  1C0C                     _Fosc_Set:	
 10227                           
 10228                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10229                           
 10230                           ;incstack = 0
 10231                           ; Regs used in _Fosc_Set: [wreg]
 10232  1C0C  3078               	movlw	120
 10233  1C0D  0021               	movlb	1	; select bank1
 10234  1C0E  0099               	movwf	25	;volatile
 10235  1C0F  0008               	return
 10236  1C10                     __end_of_Fosc_Set:	
 10237                           
 10238                           	psect	text63
 10239  1C4B                     __ptext63:	
 10240 ;; *************** function _ADC_Set *****************
 10241 ;; Defined at:
 10242 ;;		line 424 in file "../src/MCU_B1.c"
 10243 ;; Parameters:    Size  Location     Type
 10244 ;;		None
 10245 ;; Auto vars:     Size  Location     Type
 10246 ;;		None
 10247 ;; Return value:  Size  Location     Type
 10248 ;;		None               void
 10249 ;; Registers used:
 10250 ;;		wreg
 10251 ;; Tracked objects:
 10252 ;;		On entry : 0/0
 10253 ;;		On exit  : 0/0
 10254 ;;		Unchanged: 0/0
 10255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10259 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10260 ;;Total ram usage:        0 bytes
 10261 ;; Hardware stack levels used:    1
 10262 ;; Hardware stack levels required when called:    3
 10263 ;; This function calls:
 10264 ;;		Nothing
 10265 ;; This function is called by:
 10266 ;;		_Mcu_Initialization
 10267 ;; This function uses a non-reentrant model
 10268 ;;
 10269                           
 10270                           
 10271                           ;psect for function _ADC_Set
 10272  1C4B                     _ADC_Set:	
 10273                           
 10274                           ;MCU_B1.c: 425: ADCON1 = 0xf3;
 10275                           
 10276                           ;incstack = 0
 10277                           ; Regs used in _ADC_Set: [wreg]
 10278  1C4B  30F3               	movlw	243
 10279  1C4C  0021               	movlb	1	; select bank1
 10280  1C4D  009E               	movwf	30	;volatile
 10281                           
 10282                           ;MCU_B1.c: 426: FVRCON = 0xc1;
 10283  1C4E  30C1               	movlw	193
 10284  1C4F  0022               	movlb	2	; select bank2
 10285  1C50  0097               	movwf	23	;volatile
 10286  1C51  0008               	return
 10287  1C52                     __end_of_ADC_Set:	
 10288                           
 10289                           	psect	text64
 10290  0054                     __ptext64:	
 10291 ;; *************** function _Load_Main *****************
 10292 ;; Defined at:
 10293 ;;		line 39 in file "../src/OverLoad_B1.c"
 10294 ;; Parameters:    Size  Location     Type
 10295 ;;		None
 10296 ;; Auto vars:     Size  Location     Type
 10297 ;;  i               2   10[BANK0 ] int 
 10298 ;;  Load_Status     1    9[BANK0 ] unsigned char 
 10299 ;;  error           1    8[BANK0 ] unsigned char 
 10300 ;; Return value:  Size  Location     Type
 10301 ;;		None               void
 10302 ;; Registers used:
 10303 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10304 ;; Tracked objects:
 10305 ;;		On entry : 0/0
 10306 ;;		On exit  : 0/0
 10307 ;;		Unchanged: 0/0
 10308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;Total ram usage:        6 bytes
 10314 ;; Hardware stack levels used:    1
 10315 ;; Hardware stack levels required when called:    4
 10316 ;; This function calls:
 10317 ;;		___lwdiv
 10318 ;;		___wmul
 10319 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10320 ;;		_getDimmer_LoadGO
 10321 ;;		_getDimmer_Load_Status
 10322 ;;		_getMain_All_Error_Status
 10323 ;;		_getMain_LightsStatus
 10324 ;;		_getMain_Lights_Count
 10325 ;;		_setLoad_AH_AL_Restore
 10326 ;; This function is called by:
 10327 ;;		_main
 10328 ;; This function uses a non-reentrant model
 10329 ;;
 10330                           
 10331                           
 10332                           ;psect for function _Load_Main
 10333  0054                     _Load_Main:	
 10334                           
 10335                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10336                           
 10337                           ;incstack = 0
 10338                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10339  0054  3000               	movlw	0
 10340  0055  3193  2319  3180   	fcall	_getMain_All_Error_Status
 10341  0058  0020               	movlb	0	; select bank0
 10342  0059  00A6               	movwf	??_Load_Main
 10343  005A  0826               	movf	??_Load_Main,w
 10344  005B  00A8               	movwf	Load_Main@error
 10345                           
 10346                           ;OverLoad_B1.c: 41: char Load_Status = 0;
 10347  005C  01A9               	clrf	Load_Main@Load_Status
 10348                           
 10349                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10350  005D  0022               	movlb	2	; select bank2
 10351  005E  1C20               	btfss	_Load^(0+256),0
 10352  005F  29E8               	goto	l1738
 10353                           
 10354                           ;OverLoad_B1.c: 45: if (getMain_LightsStatus() == 0) {
 10355  0060  319D  2535  3180   	fcall	_getMain_LightsStatus
 10356  0063  3800               	iorlw	0
 10357  0064  1D03               	skipz
 10358  0065  2868               	goto	l9968
 10359                           
 10360                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10361  0066  0022               	movlb	2	; select bank2
 10362  0067  2889               	goto	l9986
 10363  0068                     l9968:	
 10364                           ;OverLoad_B1.c: 47: } else {
 10365                           
 10366                           
 10367                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10368  0068  0020               	movlb	0	; select bank0
 10369  0069  08A8               	movf	Load_Main@error,f
 10370  006A  1D03               	skipz
 10371  006B  2886               	goto	l1741
 10372  006C  319F  2772  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10373  006F  3800               	iorlw	0
 10374  0070  1D03               	skipz
 10375  0071  2886               	goto	l1741
 10376                           
 10377                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10378  0072  0022               	movlb	2	; select bank2
 10379  0073  14A0               	bsf	_Load^(0+256),1
 10380                           
 10381                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10382  0074  319C  243D  3180   	fcall	_getDimmer_LoadGO
 10383  0077  3A01               	xorlw	1
 10384  0078  1D03               	skipz
 10385  0079  2881               	goto	l1742
 10386                           
 10387                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10388  007A  0022               	movlb	2	; select bank2
 10389  007B  1DA0               	btfss	_Load^(0+256),3
 10390  007C  1BA0               	btfsc	_Load^(0+256),7
 10391  007D  288A               	goto	l1740
 10392                           
 10393                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10394  007E  15A0               	bsf	_Load^(0+256),3
 10395                           
 10396                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10397  007F  01C9               	clrf	(_Load^(0+256)+41)
 10398                           
 10399                           ;OverLoad_B1.c: 57: }
 10400                           ;OverLoad_B1.c: 58: } else {
 10401  0080  288A               	goto	l1740
 10402  0081                     l1742:	
 10403                           
 10404                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10405  0081  0022               	movlb	2	; select bank2
 10406  0082  1FA0               	btfss	_Load^(0+256),7
 10407  0083  288A               	goto	l1740
 10408                           
 10409                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10410  0084  13A0               	bcf	_Load^(0+256),7
 10411                           
 10412                           ;OverLoad_B1.c: 61: }
 10413                           ;OverLoad_B1.c: 62: }
 10414                           ;OverLoad_B1.c: 63: } else {
 10415  0085  288A               	goto	l1740
 10416  0086                     l1741:	
 10417                           
 10418                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10419  0086  0022               	movlb	2	; select bank2
 10420  0087  1CA0               	btfss	_Load^(0+256),1
 10421  0088  288A               	goto	l1740
 10422  0089                     l9986:	
 10423                           
 10424                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10425  0089  10A0               	bcf	_Load^(0+256),1
 10426  008A                     l1740:	
 10427                           
 10428                           ;OverLoad_B1.c: 66: }
 10429                           ;OverLoad_B1.c: 67: }
 10430                           ;OverLoad_B1.c: 69: }
 10431                           ;OverLoad_B1.c: 72: if (Load.GO == 1) {
 10432  008A  1CA0               	btfss	_Load^(0+256),1
 10433  008B  29C4               	goto	l1748
 10434                           
 10435                           ;OverLoad_B1.c: 73: Load.LightsON = 1;
 10436  008C  1520               	bsf	_Load^(0+256),2
 10437                           
 10438                           ;OverLoad_B1.c: 75: if (Load.ADtoGO == 1) {
 10439  008D  1E20               	btfss	_Load^(0+256),4
 10440  008E  29C2               	goto	l1749
 10441                           
 10442                           ;OverLoad_B1.c: 76: Load.Time++;
 10443  008F  3001               	movlw	1
 10444  0090  07A1               	addwf	(_Load^(0+256)+1),f
 10445  0091  3000               	movlw	0
 10446  0092  3DA2               	addwfc	((_Load+1)^(0+256)+1),f
 10447                           
 10448                           ;OverLoad_B1.c: 77: if (Load.Time >= (40 / 20)) {
 10449  0093  3000               	movlw	0
 10450  0094  0222               	subwf	((_Load+1)^(0+256)+1),w
 10451  0095  3002               	movlw	2
 10452  0096  1903               	skipnz
 10453  0097  0221               	subwf	(_Load^(0+256)+1),w
 10454  0098  1C03               	skipc
 10455  0099  0008               	return
 10456                           
 10457                           ;OverLoad_B1.c: 78: Load.Time = 0;
 10458  009A  01A1               	clrf	(_Load^(0+256)+1)
 10459  009B  01A2               	clrf	((_Load+1)^(0+256)+1)
 10460                           
 10461                           ;OverLoad_B1.c: 79: Load.ADtoGO = 0;
 10462  009C  1220               	bcf	_Load^(0+256),4
 10463                           
 10464                           ;OverLoad_B1.c: 81: for (int i = 1; i < 4; i++) {
 10465  009D  3001               	movlw	1
 10466  009E  0020               	movlb	0	; select bank0
 10467  009F  00AA               	movwf	Load_Main@i
 10468  00A0  3000               	movlw	0
 10469  00A1  00AB               	movwf	Load_Main@i+1
 10470  00A2  082B               	movf	Load_Main@i+1,w
 10471  00A3  3A80               	xorlw	128
 10472  00A4  00A6               	movwf	??_Load_Main
 10473  00A5  3080               	movlw	128
 10474  00A6  0226               	subwf	??_Load_Main,w
 10475  00A7  1D03               	skipz
 10476  00A8  28AB               	goto	u11605
 10477  00A9  3004               	movlw	4
 10478  00AA  022A               	subwf	Load_Main@i,w
 10479  00AB                     u11605:	
 10480  00AB  1803               	btfsc	3,0
 10481  00AC  28DF               	goto	l10008
 10482  00AD                     l10002:	
 10483                           
 10484                           ;OverLoad_B1.c: 82: Load.ADH += Load.AH[i];
 10485  00AD  0020               	movlb	0	; select bank0
 10486  00AE  352A               	lslf	Load_Main@i,w
 10487  00AF  3E2B               	addlw	(_Load+11)& (0+255)
 10488  00B0  0086               	movwf	6
 10489  00B1  3001               	movlw	1	; select bank2/3
 10490  00B2  0087               	movwf	7
 10491  00B3  3F40               	moviw [0]fsr1
 10492  00B4  00A6               	movwf	??_Load_Main
 10493  00B5  3F41               	moviw [1]fsr1
 10494  00B6  00A7               	movwf	??_Load_Main+1
 10495  00B7  0826               	movf	??_Load_Main,w
 10496  00B8  0022               	movlb	2	; select bank2
 10497  00B9  07A5               	addwf	(_Load^(0+256)+5),f
 10498  00BA  0020               	movlb	0	; select bank0
 10499  00BB  0827               	movf	??_Load_Main+1,w
 10500  00BC  0022               	movlb	2	; select bank2
 10501  00BD  3DA6               	addwfc	((_Load+1)^(0+256)+5),f
 10502                           
 10503                           ;OverLoad_B1.c: 83: Load.ADL += Load.AL[i];
 10504  00BE  0020               	movlb	0	; select bank0
 10505  00BF  352A               	lslf	Load_Main@i,w
 10506  00C0  3E35               	addlw	(_Load+21)& (0+255)
 10507  00C1  0086               	movwf	6
 10508  00C2  3001               	movlw	1	; select bank2/3
 10509  00C3  0087               	movwf	7
 10510  00C4  3F40               	moviw [0]fsr1
 10511  00C5  00A6               	movwf	??_Load_Main
 10512  00C6  3F41               	moviw [1]fsr1
 10513  00C7  00A7               	movwf	??_Load_Main+1
 10514  00C8  0826               	movf	??_Load_Main,w
 10515  00C9  0022               	movlb	2	; select bank2
 10516  00CA  07A7               	addwf	(_Load^(0+256)+7),f
 10517  00CB  0020               	movlb	0	; select bank0
 10518  00CC  0827               	movf	??_Load_Main+1,w
 10519  00CD  0022               	movlb	2	; select bank2
 10520  00CE  3DA8               	addwfc	((_Load+1)^(0+256)+7),f
 10521  00CF  3001               	movlw	1
 10522  00D0  0020               	movlb	0	; select bank0
 10523  00D1  07AA               	addwf	Load_Main@i,f
 10524  00D2  3000               	movlw	0
 10525  00D3  3DAB               	addwfc	Load_Main@i+1,f
 10526  00D4  082B               	movf	Load_Main@i+1,w
 10527  00D5  3A80               	xorlw	128
 10528  00D6  00A6               	movwf	??_Load_Main
 10529  00D7  3080               	movlw	128
 10530  00D8  0226               	subwf	??_Load_Main,w
 10531  00D9  1D03               	skipz
 10532  00DA  28DD               	goto	u11615
 10533  00DB  3004               	movlw	4
 10534  00DC  022A               	subwf	Load_Main@i,w
 10535  00DD                     u11615:	
 10536  00DD  1C03               	skipc
 10537  00DE  28AD               	goto	l10002
 10538  00DF                     l10008:	
 10539                           
 10540                           ;OverLoad_B1.c: 84: }
 10541                           ;OverLoad_B1.c: 85: Load.ADH /= 3;
 10542  00DF  3003               	movlw	3
 10543  00E0  00F3               	movwf	___lwdiv@divisor
 10544  00E1  3000               	movlw	0
 10545  00E2  00F4               	movwf	___lwdiv@divisor+1
 10546  00E3  0022               	movlb	2	; select bank2
 10547  00E4  0826               	movf	((_Load+1)^(0+256)+5),w
 10548  00E5  01F6               	clrf	___lwdiv@dividend+1
 10549  00E6  07F6               	addwf	___lwdiv@dividend+1,f
 10550  00E7  0825               	movf	(_Load^(0+256)+5),w
 10551  00E8  01F5               	clrf	___lwdiv@dividend
 10552  00E9  07F5               	addwf	___lwdiv@dividend,f
 10553  00EA  3193  23B6  3180   	fcall	___lwdiv
 10554  00ED  0874               	movf	?___lwdiv+1,w
 10555  00EE  0022               	movlb	2	; select bank2
 10556  00EF  01A6               	clrf	((_Load+1)^(0+256)+5)
 10557  00F0  07A6               	addwf	((_Load+1)^(0+256)+5),f
 10558  00F1  0873               	movf	?___lwdiv,w
 10559  00F2  01A5               	clrf	(_Load^(0+256)+5)
 10560  00F3  07A5               	addwf	(_Load^(0+256)+5),f
 10561                           
 10562                           ;OverLoad_B1.c: 86: Load.ADL /= 3;
 10563  00F4  3003               	movlw	3
 10564  00F5  00F3               	movwf	___lwdiv@divisor
 10565  00F6  3000               	movlw	0
 10566  00F7  00F4               	movwf	___lwdiv@divisor+1
 10567  00F8  0828               	movf	((_Load+1)^(0+256)+7),w
 10568  00F9  01F6               	clrf	___lwdiv@dividend+1
 10569  00FA  07F6               	addwf	___lwdiv@dividend+1,f
 10570  00FB  0827               	movf	(_Load^(0+256)+7),w
 10571  00FC  01F5               	clrf	___lwdiv@dividend
 10572  00FD  07F5               	addwf	___lwdiv@dividend,f
 10573  00FE  3193  23B6  3180   	fcall	___lwdiv
 10574  0101  0874               	movf	?___lwdiv+1,w
 10575  0102  0022               	movlb	2	; select bank2
 10576  0103  01A8               	clrf	((_Load+1)^(0+256)+7)
 10577  0104  07A8               	addwf	((_Load+1)^(0+256)+7),f
 10578  0105  0873               	movf	?___lwdiv,w
 10579  0106  01A7               	clrf	(_Load^(0+256)+7)
 10580  0107  07A7               	addwf	(_Load^(0+256)+7),f
 10581                           
 10582                           ;OverLoad_B1.c: 87: setLoad_AH_AL_Restore();
 10583  0108  319F  2757  3180   	fcall	_setLoad_AH_AL_Restore
 10584                           
 10585                           ;OverLoad_B1.c: 89: if (Load.ADH >= Load.ADL) {
 10586  010B  0022               	movlb	2	; select bank2
 10587  010C  0828               	movf	((_Load+1)^(0+256)+7),w
 10588  010D  0226               	subwf	((_Load+1)^(0+256)+5),w
 10589  010E  1D03               	skipz
 10590  010F  2912               	goto	u11625
 10591  0110  0827               	movf	(_Load^(0+256)+7),w
 10592  0111  0225               	subwf	(_Load^(0+256)+5),w
 10593  0112                     u11625:	
 10594  0112  1C03               	skipc
 10595  0113  0008               	return
 10596                           
 10597                           ;OverLoad_B1.c: 90: Load.AD = Load.ADH - Load.ADL;
 10598  0114  3005               	movlw	5
 10599  0115  3E20               	addlw	_Load& (0+255)
 10600  0116  0086               	movwf	6
 10601  0117  3001               	movlw	1	; select bank2/3
 10602  0118  0087               	movwf	7
 10603  0119  0927               	comf	(_Load^(0+256)+7),w
 10604  011A  0020               	movlb	0	; select bank0
 10605  011B  00A6               	movwf	??_Load_Main
 10606  011C  0022               	movlb	2	; select bank2
 10607  011D  0928               	comf	((_Load+1)^(0+256)+7),w
 10608  011E  0020               	movlb	0	; select bank0
 10609  011F  00A7               	movwf	??_Load_Main+1
 10610  0120  0AA6               	incf	??_Load_Main,f
 10611  0121  1903               	skipnz
 10612  0122  0AA7               	incf	??_Load_Main+1,f
 10613  0123  3F40               	moviw [0]fsr1
 10614  0124  0726               	addwf	??_Load_Main,w
 10615  0125  0022               	movlb	2	; select bank2
 10616  0126  00BF               	movwf	(_Load^(0+256)+31)
 10617  0127  3F41               	moviw [1]fsr1
 10618  0128  0020               	movlb	0	; select bank0
 10619  0129  3D27               	addwfc	??_Load_Main+1,w
 10620  012A  0022               	movlb	2	; select bank2
 10621  012B  00C0               	movwf	(_Load^(0+256)+32)
 10622                           
 10623                           ;OverLoad_B1.c: 91: Load.ADH = 0;
 10624  012C  01A5               	clrf	(_Load^(0+256)+5)
 10625  012D  01A6               	clrf	((_Load+1)^(0+256)+5)
 10626                           
 10627                           ;OverLoad_B1.c: 92: Load.ADL = 0;
 10628  012E  01A7               	clrf	(_Load^(0+256)+7)
 10629  012F  01A8               	clrf	((_Load+1)^(0+256)+7)
 10630                           
 10631                           ;OverLoad_B1.c: 94: if (Load.Run == 1) {
 10632  0130  1DA0               	btfss	_Load^(0+256),3
 10633  0131  298E               	goto	l10048
 10634                           
 10635                           ;OverLoad_B1.c: 95: if (Load.Count < 2) {
 10636  0132  3002               	movlw	2
 10637  0133  0249               	subwf	(_Load^(0+256)+41),w
 10638  0134  1803               	skipnc
 10639  0135  298E               	goto	l10048
 10640                           
 10641                           ;OverLoad_B1.c: 96: Load.Count++;
 10642  0136  3001               	movlw	1
 10643  0137  0020               	movlb	0	; select bank0
 10644  0138  00A6               	movwf	??_Load_Main
 10645  0139  0826               	movf	??_Load_Main,w
 10646  013A  0022               	movlb	2	; select bank2
 10647  013B  07C9               	addwf	(_Load^(0+256)+41),f
 10648                           
 10649                           ;OverLoad_B1.c: 97: Load_Status = getDimmer_Load_Status();
 10650  013C  319C  2444  3180   	fcall	_getDimmer_Load_Status
 10651  013F  0020               	movlb	0	; select bank0
 10652  0140  00A6               	movwf	??_Load_Main
 10653  0141  0826               	movf	??_Load_Main,w
 10654  0142  00A9               	movwf	Load_Main@Load_Status
 10655                           
 10656                           ;OverLoad_B1.c: 98: Load.LightsCount = getMain_Lights_Count();
 10657  0143  319D  2591  3180   	fcall	_getMain_Lights_Count
 10658  0146  0020               	movlb	0	; select bank0
 10659  0147  00A6               	movwf	??_Load_Main
 10660  0148  0826               	movf	??_Load_Main,w
 10661  0149  0022               	movlb	2	; select bank2
 10662  014A  00CC               	movwf	(_Load^(0+256)+44)
 10663                           
 10664                           ;OverLoad_B1.c: 99: if (Load.Count == 1) {
 10665  014B  0849               	movf	(_Load^(0+256)+41),w
 10666  014C  3A01               	xorlw	1
 10667  014D  1D03               	skipz
 10668  014E  2959               	goto	l10034
 10669                           
 10670                           ;OverLoad_B1.c: 100: Load.ErrorCountValue = 2;
 10671  014F  3002               	movlw	2
 10672  0150  0020               	movlb	0	; select bank0
 10673  0151  00A6               	movwf	??_Load_Main
 10674  0152  0826               	movf	??_Load_Main,w
 10675  0153  0022               	movlb	2	; select bank2
 10676  0154  00CB               	movwf	(_Load^(0+256)+43)
 10677                           
 10678                           ;OverLoad_B1.c: 101: Load.JudgeValue = (20*50);
 10679  0155  30E8               	movlw	232
 10680  0156  00C5               	movwf	(_Load^(0+256)+37)
 10681  0157  3003               	movlw	3
 10682  0158  2964               	goto	L7
 10683  0159                     l10034:	
 10684                           ;OverLoad_B1.c: 102: } else if (Load.Count == 2) {
 10685                           
 10686  0159  0849               	movf	(_Load^(0+256)+41),w
 10687  015A  3A02               	xorlw	2
 10688  015B  1D03               	skipz
 10689  015C  298E               	goto	l10048
 10690                           
 10691                           ;OverLoad_B1.c: 103: if (Load.LightsCount == 1) {
 10692  015D  084C               	movf	(_Load^(0+256)+44),w
 10693  015E  3A01               	xorlw	1
 10694  015F  1D03               	skipz
 10695  0160  2966               	goto	l10040
 10696                           
 10697                           ;OverLoad_B1.c: 104: Load.JudgeValue = (int)(1.1*50);
 10698  0161  3037               	movlw	55
 10699  0162  00C5               	movwf	(_Load^(0+256)+37)
 10700  0163  3000               	movlw	0
 10701  0164                     L7:	
 10702  0164  00C6               	movwf	(_Load^(0+256)+38)
 10703                           
 10704                           ;OverLoad_B1.c: 105: } else {
 10705  0165  298E               	goto	l10048
 10706  0166                     l10040:	
 10707                           
 10708                           ;OverLoad_B1.c: 106: if (Load_Status == 0) {
 10709  0166  0020               	movlb	0	; select bank0
 10710  0167  08A9               	movf	Load_Main@Load_Status,f
 10711  0168  1D03               	skipz
 10712  0169  2982               	goto	l10044
 10713                           
 10714                           ;OverLoad_B1.c: 107: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 10715  016A  0022               	movlb	2	; select bank2
 10716  016B  084C               	movf	(_Load^(0+256)+44),w
 10717  016C  0020               	movlb	0	; select bank0
 10718  016D  00A6               	movwf	??_Load_Main
 10719  016E  01A7               	clrf	??_Load_Main+1
 10720  016F  0826               	movf	??_Load_Main,w
 10721  0170  00F3               	movwf	___wmul@multiplier
 10722  0171  0827               	movf	??_Load_Main+1,w
 10723  0172  00F4               	movwf	___wmul@multiplier+1
 10724  0173  3037               	movlw	55
 10725  0174  00F5               	movwf	___wmul@multiplicand
 10726  0175  3000               	movlw	0
 10727  0176  00F6               	movwf	___wmul@multiplicand+1
 10728  0177  3190  209B  3180   	fcall	___wmul
 10729  017A  0874               	movf	?___wmul+1,w
 10730  017B  0022               	movlb	2	; select bank2
 10731  017C  01C6               	clrf	((_Load+1)^(0+256)+37)
 10732  017D  07C6               	addwf	((_Load+1)^(0+256)+37),f
 10733  017E  0873               	movf	?___wmul,w
 10734  017F  01C5               	clrf	(_Load^(0+256)+37)
 10735  0180  07C5               	addwf	(_Load^(0+256)+37),f
 10736                           
 10737                           ;OverLoad_B1.c: 108: } else if (Load_Status == 1) {
 10738  0181  298E               	goto	l10048
 10739  0182                     l10044:	
 10740  0182  0020               	movlb	0	; select bank0
 10741  0183  0829               	movf	Load_Main@Load_Status,w
 10742  0184  3A01               	xorlw	1
 10743  0185  1D03               	skipz
 10744  0186  298E               	goto	l10048
 10745                           
 10746                           ;OverLoad_B1.c: 109: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10747  0187  0022               	movlb	2	; select bank2
 10748  0188  0829               	movf	(_Load^(0+256)+9),w
 10749  0189  3E37               	addlw	55
 10750  018A  00C5               	movwf	(_Load^(0+256)+37)
 10751  018B  3000               	movlw	0
 10752  018C  3D2A               	addwfc	((_Load+1)^(0+256)+9),w
 10753  018D  00C6               	movwf	((_Load+1)^(0+256)+37)
 10754  018E                     l10048:	
 10755                           
 10756                           ;OverLoad_B1.c: 110: }
 10757                           ;OverLoad_B1.c: 111: }
 10758                           ;OverLoad_B1.c: 112: }
 10759                           ;OverLoad_B1.c: 113: }
 10760                           ;OverLoad_B1.c: 114: }
 10761                           ;OverLoad_B1.c: 116: if (Load.AD >= Load.JudgeValue) {
 10762  018E  0022               	movlb	2	; select bank2
 10763  018F  0846               	movf	((_Load+1)^(0+256)+37),w
 10764  0190  0240               	subwf	((_Load+1)^(0+256)+31),w
 10765  0191  1D03               	skipz
 10766  0192  2995               	goto	u11705
 10767  0193  0845               	movf	(_Load^(0+256)+37),w
 10768  0194  023F               	subwf	(_Load^(0+256)+31),w
 10769  0195                     u11705:	
 10770  0195  1C03               	skipc
 10771  0196  29A4               	goto	l10058
 10772                           
 10773                           ;OverLoad_B1.c: 117: Load.ErrorCount++;
 10774  0197  3001               	movlw	1
 10775  0198  0020               	movlb	0	; select bank0
 10776  0199  00A6               	movwf	??_Load_Main
 10777  019A  0826               	movf	??_Load_Main,w
 10778  019B  0022               	movlb	2	; select bank2
 10779  019C  07CA               	addwf	(_Load^(0+256)+42),f
 10780                           
 10781                           ;OverLoad_B1.c: 118: if (Load.ErrorCount > Load.ErrorCountValue) {
 10782  019D  084A               	movf	(_Load^(0+256)+42),w
 10783  019E  024B               	subwf	(_Load^(0+256)+43),w
 10784  019F  1803               	skipnc
 10785  01A0  0008               	return
 10786                           
 10787                           ;OverLoad_B1.c: 119: Load.ErrorCount = 0;
 10788  01A1  01CA               	clrf	(_Load^(0+256)+42)
 10789                           
 10790                           ;OverLoad_B1.c: 120: Load.ERROR = 1;
 10791  01A2  16A0               	bsf	_Load^(0+256),5
 10792                           
 10793                           ;OverLoad_B1.c: 142: }
 10794                           ;OverLoad_B1.c: 143: } else {
 10795  01A3  0008               	return
 10796  01A4                     l10058:	
 10797                           
 10798                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10799  01A4  01CA               	clrf	(_Load^(0+256)+42)
 10800                           
 10801                           ;OverLoad_B1.c: 145: if (Load.Run == 1) {
 10802  01A5  1DA0               	btfss	_Load^(0+256),3
 10803  01A6  0008               	return
 10804                           
 10805                           ;OverLoad_B1.c: 146: Load.SafeCount++;
 10806  01A7  3001               	movlw	1
 10807  01A8  0020               	movlb	0	; select bank0
 10808  01A9  00A6               	movwf	??_Load_Main
 10809  01AA  0826               	movf	??_Load_Main,w
 10810  01AB  0022               	movlb	2	; select bank2
 10811  01AC  07CD               	addwf	(_Load^(0+256)+45),f
 10812                           
 10813                           ;OverLoad_B1.c: 147: if (Load.SafeCount >= 3) {
 10814  01AD  3003               	movlw	3
 10815  01AE  024D               	subwf	(_Load^(0+256)+45),w
 10816  01AF  1C03               	skipc
 10817  01B0  0008               	return
 10818                           
 10819                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10820  01B1  01CD               	clrf	(_Load^(0+256)+45)
 10821                           
 10822                           ;OverLoad_B1.c: 149: Load.OK = 1;
 10823  01B2  17A0               	bsf	_Load^(0+256),7
 10824                           
 10825                           ;OverLoad_B1.c: 150: Load.Run = 0;
 10826  01B3  11A0               	bcf	_Load^(0+256),3
 10827                           
 10828                           ;OverLoad_B1.c: 151: Load.Count = 0;
 10829  01B4  01C9               	clrf	(_Load^(0+256)+41)
 10830                           
 10831                           ;OverLoad_B1.c: 152: Load.TotalLoad = Load.AD;
 10832  01B5  0840               	movf	((_Load+1)^(0+256)+31),w
 10833  01B6  01AA               	clrf	((_Load+1)^(0+256)+9)
 10834  01B7  07AA               	addwf	((_Load+1)^(0+256)+9),f
 10835  01B8  083F               	movf	(_Load^(0+256)+31),w
 10836  01B9  01A9               	clrf	(_Load^(0+256)+9)
 10837  01BA  07A9               	addwf	(_Load^(0+256)+9),f
 10838                           
 10839                           ;OverLoad_B1.c: 153: Load.ErrorCountValue = 3;
 10840  01BB  3003               	movlw	3
 10841  01BC  0020               	movlb	0	; select bank0
 10842  01BD  00A6               	movwf	??_Load_Main
 10843  01BE  0826               	movf	??_Load_Main,w
 10844  01BF  0022               	movlb	2	; select bank2
 10845  01C0  00CB               	movwf	(_Load^(0+256)+43)
 10846                           
 10847                           ;OverLoad_B1.c: 156: }
 10848                           ;OverLoad_B1.c: 157: }
 10849                           ;OverLoad_B1.c: 180: }
 10850                           ;OverLoad_B1.c: 181: }
 10851                           ;OverLoad_B1.c: 182: }
 10852                           ;OverLoad_B1.c: 183: } else {
 10853  01C1  0008               	return
 10854  01C2                     l1749:	
 10855                           
 10856                           ;OverLoad_B1.c: 184: Load.ADtoGO = 1;
 10857  01C2  1620               	bsf	_Load^(0+256),4
 10858                           
 10859                           ;OverLoad_B1.c: 185: }
 10860                           ;OverLoad_B1.c: 186: } else {
 10861  01C3  0008               	return
 10862  01C4                     l1748:	
 10863                           
 10864                           ;OverLoad_B1.c: 188: if (Load.LightsON == 1) {
 10865  01C4  1D20               	btfss	_Load^(0+256),2
 10866  01C5  29D7               	goto	l10096
 10867                           
 10868                           ;OverLoad_B1.c: 189: Load.LightsON = 0;
 10869  01C6  1120               	bcf	_Load^(0+256),2
 10870                           
 10871                           ;OverLoad_B1.c: 191: Load.ADtoGO = 0;
 10872  01C7  1220               	bcf	_Load^(0+256),4
 10873                           
 10874                           ;OverLoad_B1.c: 192: Load.Time = 0;
 10875  01C8  01A1               	clrf	(_Load^(0+256)+1)
 10876  01C9  01A2               	clrf	((_Load+1)^(0+256)+1)
 10877                           
 10878                           ;OverLoad_B1.c: 193: setLoad_AH_AL_Restore();
 10879  01CA  319F  2757  3180   	fcall	_setLoad_AH_AL_Restore
 10880                           
 10881                           ;OverLoad_B1.c: 195: Load.ErrorCount = 0;
 10882  01CD  0022               	movlb	2	; select bank2
 10883  01CE  01CA               	clrf	(_Load^(0+256)+42)
 10884                           
 10885                           ;OverLoad_B1.c: 196: Load.SafeCount = 0;
 10886  01CF  01CD               	clrf	(_Load^(0+256)+45)
 10887                           
 10888                           ;OverLoad_B1.c: 198: Load.ADH = 0;
 10889  01D0  01A5               	clrf	(_Load^(0+256)+5)
 10890  01D1  01A6               	clrf	((_Load+1)^(0+256)+5)
 10891                           
 10892                           ;OverLoad_B1.c: 199: Load.ADL = 0;
 10893  01D2  01A7               	clrf	(_Load^(0+256)+7)
 10894  01D3  01A8               	clrf	((_Load+1)^(0+256)+7)
 10895                           
 10896                           ;OverLoad_B1.c: 205: Load.Run = 0;
 10897  01D4  11A0               	bcf	_Load^(0+256),3
 10898                           
 10899                           ;OverLoad_B1.c: 206: Load.Count = 0;
 10900  01D5  01C9               	clrf	(_Load^(0+256)+41)
 10901                           
 10902                           ;OverLoad_B1.c: 207: Load.OK = 0;
 10903  01D6  13A0               	bcf	_Load^(0+256),7
 10904  01D7                     l10096:	
 10905                           
 10906                           ;OverLoad_B1.c: 229: }
 10907                           ;OverLoad_B1.c: 230: if (Load.ERROR == 1) {
 10908  01D7  1EA0               	btfss	_Load^(0+256),5
 10909  01D8  0008               	return
 10910                           
 10911                           ;OverLoad_B1.c: 231: Load.ErrorTime++;
 10912  01D9  3001               	movlw	1
 10913  01DA  07A3               	addwf	(_Load^(0+256)+3),f
 10914  01DB  3000               	movlw	0
 10915  01DC  3DA4               	addwfc	((_Load+1)^(0+256)+3),f
 10916                           
 10917                           ;OverLoad_B1.c: 232: if (Load.ErrorTime >= (10000 / 20)) {
 10918  01DD  3001               	movlw	1
 10919  01DE  0224               	subwf	((_Load+1)^(0+256)+3),w
 10920  01DF  30F4               	movlw	244
 10921  01E0  1903               	skipnz
 10922  01E1  0223               	subwf	(_Load^(0+256)+3),w
 10923  01E2  1C03               	skipc
 10924  01E3  0008               	return
 10925                           
 10926                           ;OverLoad_B1.c: 233: Load.ErrorTime = 0;
 10927  01E4  01A3               	clrf	(_Load^(0+256)+3)
 10928  01E5  01A4               	clrf	((_Load+1)^(0+256)+3)
 10929                           
 10930                           ;OverLoad_B1.c: 234: Load.ERROR = 0;
 10931  01E6  12A0               	bcf	_Load^(0+256),5
 10932                           
 10933                           ;OverLoad_B1.c: 235: }
 10934                           ;OverLoad_B1.c: 236: }
 10935                           ;OverLoad_B1.c: 237: }
 10936                           ;OverLoad_B1.c: 238: } else {
 10937  01E7  0008               	return
 10938  01E8                     l1738:	
 10939                           
 10940                           ;OverLoad_B1.c: 239: if (myMain.PowerON == 1) {
 10941  01E8  0021               	movlb	1	; select bank1
 10942  01E9  1C2E               	btfss	_myMain^(0+128),0
 10943  01EA  0008               	return
 10944                           
 10945                           ;OverLoad_B1.c: 240: Load.Enable = 1;
 10946  01EB  0022               	movlb	2	; select bank2
 10947  01EC  1420               	bsf	_Load^(0+256),0
 10948  01ED  0008               	return
 10949  01EE                     __end_of_Load_Main:	
 10950                           
 10951                           	psect	text65
 10952  1D91                     __ptext65:	
 10953 ;; *************** function _getMain_Lights_Count *****************
 10954 ;; Defined at:
 10955 ;;		line 466 in file "../src/Main_B1.c"
 10956 ;; Parameters:    Size  Location     Type
 10957 ;;		None
 10958 ;; Auto vars:     Size  Location     Type
 10959 ;;  status2         1    5[COMMON] unsigned char 
 10960 ;;  status1         1    4[COMMON] unsigned char 
 10961 ;;  count           1    3[COMMON] unsigned char 
 10962 ;; Return value:  Size  Location     Type
 10963 ;;                  1    wreg      unsigned char 
 10964 ;; Registers used:
 10965 ;;		wreg, status,2, status,0
 10966 ;; Tracked objects:
 10967 ;;		On entry : 0/0
 10968 ;;		On exit  : 0/0
 10969 ;;		Unchanged: 0/0
 10970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10975 ;;Total ram usage:        3 bytes
 10976 ;; Hardware stack levels used:    1
 10977 ;; Hardware stack levels required when called:    3
 10978 ;; This function calls:
 10979 ;;		Nothing
 10980 ;; This function is called by:
 10981 ;;		_Load_Main
 10982 ;; This function uses a non-reentrant model
 10983 ;;
 10984                           
 10985                           
 10986                           ;psect for function _getMain_Lights_Count
 10987  1D91                     _getMain_Lights_Count:	
 10988                           
 10989                           ;Main_B1.c: 467: char count = 0;
 10990                           
 10991                           ;incstack = 0
 10992                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10993  1D91  01F3               	clrf	getMain_Lights_Count@count
 10994                           
 10995                           ;Main_B1.c: 471: char status1 = 0;
 10996  1D92  01F4               	clrf	getMain_Lights_Count@status1
 10997                           
 10998                           ;Main_B1.c: 472: status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 10999  1D93  3000               	movlw	0
 11000  1D94  0022               	movlb	2	; select bank2
 11001  1D95  19CE               	btfsc	_DimmerIntr1^(0+256),3
 11002  1D96  3001               	movlw	1
 11003  1D97  00F4               	movwf	getMain_Lights_Count@status1
 11004                           
 11005                           ;Main_B1.c: 475: char status2 = 0;
 11006  1D98  01F5               	clrf	getMain_Lights_Count@status2
 11007                           
 11008                           ;Main_B1.c: 476: status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11009  1D99  3000               	movlw	0
 11010  1D9A  19D5               	btfsc	_DimmerIntr2^(0+256),3
 11011  1D9B  3001               	movlw	1
 11012  1D9C  00F5               	movwf	getMain_Lights_Count@status2
 11013                           
 11014                           ;Main_B1.c: 500: return count = (status1 + status2);
 11015  1D9D  0874               	movf	getMain_Lights_Count@status1,w
 11016  1D9E  0775               	addwf	getMain_Lights_Count@status2,w
 11017  1D9F  00F3               	movwf	getMain_Lights_Count@count
 11018  1DA0  0008               	return
 11019  1DA1                     __end_of_getMain_Lights_Count:	
 11020                           
 11021                           	psect	text66
 11022  1C44                     __ptext66:	
 11023 ;; *************** function _getDimmer_Load_Status *****************
 11024 ;; Defined at:
 11025 ;;		line 1058 in file "../src/Dimmer_B1.c"
 11026 ;; Parameters:    Size  Location     Type
 11027 ;;		None
 11028 ;; Auto vars:     Size  Location     Type
 11029 ;;  status          1    3[COMMON] unsigned char 
 11030 ;; Return value:  Size  Location     Type
 11031 ;;                  1    wreg      unsigned char 
 11032 ;; Registers used:
 11033 ;;		wreg, status,2
 11034 ;; Tracked objects:
 11035 ;;		On entry : 0/0
 11036 ;;		On exit  : 0/0
 11037 ;;		Unchanged: 0/0
 11038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11043 ;;Total ram usage:        1 bytes
 11044 ;; Hardware stack levels used:    1
 11045 ;; Hardware stack levels required when called:    3
 11046 ;; This function calls:
 11047 ;;		Nothing
 11048 ;; This function is called by:
 11049 ;;		_Load_Main
 11050 ;; This function uses a non-reentrant model
 11051 ;;
 11052                           
 11053                           
 11054                           ;psect for function _getDimmer_Load_Status
 11055  1C44                     _getDimmer_Load_Status:	
 11056                           
 11057                           ;Dimmer_B1.c: 1059: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11058                           
 11059                           ;incstack = 0
 11060                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11061  1C44  3000               	movlw	0
 11062  1C45  0021               	movlb	1	; select bank1
 11063  1C46  1948               	btfsc	_Dimmer^(0+128),2	;volatile
 11064  1C47  3001               	movlw	1
 11065  1C48  00F3               	movwf	getDimmer_Load_Status@status
 11066                           
 11067                           ;Dimmer_B1.c: 1060: return status;
 11068  1C49  0873               	movf	getDimmer_Load_Status@status,w
 11069  1C4A  0008               	return
 11070  1C4B                     __end_of_getDimmer_Load_Status:	
 11071                           
 11072                           	psect	text67
 11073  1C3D                     __ptext67:	
 11074 ;; *************** function _getDimmer_LoadGO *****************
 11075 ;; Defined at:
 11076 ;;		line 1052 in file "../src/Dimmer_B1.c"
 11077 ;; Parameters:    Size  Location     Type
 11078 ;;		None
 11079 ;; Auto vars:     Size  Location     Type
 11080 ;;  loadgo          1    3[COMMON] unsigned char 
 11081 ;; Return value:  Size  Location     Type
 11082 ;;                  1    wreg      unsigned char 
 11083 ;; Registers used:
 11084 ;;		wreg, status,2
 11085 ;; Tracked objects:
 11086 ;;		On entry : 0/0
 11087 ;;		On exit  : 0/0
 11088 ;;		Unchanged: 0/0
 11089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;Total ram usage:        1 bytes
 11095 ;; Hardware stack levels used:    1
 11096 ;; Hardware stack levels required when called:    3
 11097 ;; This function calls:
 11098 ;;		Nothing
 11099 ;; This function is called by:
 11100 ;;		_Load_Main
 11101 ;; This function uses a non-reentrant model
 11102 ;;
 11103                           
 11104                           
 11105                           ;psect for function _getDimmer_LoadGO
 11106  1C3D                     _getDimmer_LoadGO:	
 11107                           
 11108                           ;Dimmer_B1.c: 1053: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11109                           
 11110                           ;incstack = 0
 11111                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11112  1C3D  3000               	movlw	0
 11113  1C3E  0021               	movlb	1	; select bank1
 11114  1C3F  18C8               	btfsc	_Dimmer^(0+128),1	;volatile
 11115  1C40  3001               	movlw	1
 11116  1C41  00F3               	movwf	getDimmer_LoadGO@loadgo
 11117                           
 11118                           ;Dimmer_B1.c: 1054: return loadgo;
 11119  1C42  0873               	movf	getDimmer_LoadGO@loadgo,w
 11120  1C43  0008               	return
 11121  1C44                     __end_of_getDimmer_LoadGO:	
 11122                           
 11123                           	psect	text68
 11124  1F72                     __ptext68:	
 11125 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11126 ;; Defined at:
 11127 ;;		line 238 in file "../src/Dimmer_B1.c"
 11128 ;; Parameters:    Size  Location     Type
 11129 ;;		None
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;  status          1    6[COMMON] unsigned char 
 11132 ;; Return value:  Size  Location     Type
 11133 ;;                  1    wreg      unsigned char 
 11134 ;; Registers used:
 11135 ;;		wreg, status,2, status,0
 11136 ;; Tracked objects:
 11137 ;;		On entry : 0/0
 11138 ;;		On exit  : 0/0
 11139 ;;		Unchanged: 0/0
 11140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;Total ram usage:        4 bytes
 11146 ;; Hardware stack levels used:    1
 11147 ;; Hardware stack levels required when called:    3
 11148 ;; This function calls:
 11149 ;;		Nothing
 11150 ;; This function is called by:
 11151 ;;		_Load_Main
 11152 ;; This function uses a non-reentrant model
 11153 ;;
 11154                           
 11155                           
 11156                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11157  1F72                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11158                           
 11159                           ;Dimmer_B1.c: 239: char status = 0;
 11160                           
 11161                           ;incstack = 0
 11162                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11163  1F72  01F6               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11164                           
 11165                           ;Dimmer_B1.c: 246: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11166  1F73  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2117
 11167  1F74  0AF4               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2117,f
 11168  1F75  0022               	movlb	2	; select bank2
 11169  1F76  1E4E               	btfss	_DimmerIntr1^(0+256),4
 11170  1F77  1A55               	btfsc	_DimmerIntr2^(0+256),4
 11171  1F78  2F7A               	goto	l7280
 11172  1F79  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2117
 11173  1F7A                     l7280:	
 11174  1F7A  0874               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2117,w
 11175  1F7B  00F3               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11176  1F7C  0873               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11177  1F7D  00F6               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11178                           
 11179                           ;Dimmer_B1.c: 254: if (status == 0) {
 11180  1F7E  08F6               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11181  1F7F  1D03               	skipz
 11182  1F80  2F8B               	goto	l7292
 11183                           
 11184                           ;Dimmer_B1.c: 260: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11185  1F81  01F5               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2118
 11186  1F82  0AF5               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2118,f
 11187  1F83  1F4E               	btfss	_DimmerIntr1^(0+256),6
 11188  1F84  1B55               	btfsc	_DimmerIntr2^(0+256),6
 11189  1F85  2F87               	goto	l7290
 11190  1F86  01F5               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2118
 11191  1F87                     l7290:	
 11192  1F87  0875               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2118,w
 11193  1F88  00F3               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11194  1F89  0873               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11195  1F8A  00F6               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11196  1F8B                     l7292:	
 11197                           
 11198                           ;Dimmer_B1.c: 266: }
 11199                           ;Dimmer_B1.c: 268: return status;
 11200  1F8B  0876               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11201  1F8C  0008               	return
 11202  1F8D                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11203                           
 11204                           	psect	text69
 11205  109B                     __ptext69:	
 11206 ;; *************** function ___wmul *****************
 11207 ;; Defined at:
 11208 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11209 ;; Parameters:    Size  Location     Type
 11210 ;;  multiplier      2    3[COMMON] unsigned int 
 11211 ;;  multiplicand    2    5[COMMON] unsigned int 
 11212 ;; Auto vars:     Size  Location     Type
 11213 ;;  product         2    0[BANK0 ] unsigned int 
 11214 ;; Return value:  Size  Location     Type
 11215 ;;                  2    3[COMMON] unsigned int 
 11216 ;; Registers used:
 11217 ;;		wreg, status,2, status,0
 11218 ;; Tracked objects:
 11219 ;;		On entry : 0/0
 11220 ;;		On exit  : 0/0
 11221 ;;		Unchanged: 0/0
 11222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11223 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;Total ram usage:        6 bytes
 11228 ;; Hardware stack levels used:    1
 11229 ;; Hardware stack levels required when called:    3
 11230 ;; This function calls:
 11231 ;;		Nothing
 11232 ;; This function is called by:
 11233 ;;		_Load_Main
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           
 11238                           ;psect for function ___wmul
 11239  109B                     ___wmul:	
 11240                           
 11241                           ;incstack = 0
 11242                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11243  109B  0020               	movlb	0	; select bank0
 11244  109C  01A0               	clrf	___wmul@product
 11245  109D  01A1               	clrf	___wmul@product+1
 11246  109E                     l9764:	
 11247  109E  1C73               	btfss	___wmul@multiplier,0
 11248  109F  28A5               	goto	l2863
 11249  10A0  0875               	movf	___wmul@multiplicand,w
 11250  10A1  0020               	movlb	0	; select bank0
 11251  10A2  07A0               	addwf	___wmul@product,f
 11252  10A3  0876               	movf	___wmul@multiplicand+1,w
 11253  10A4  3DA1               	addwfc	___wmul@product+1,f
 11254  10A5                     l2863:	
 11255  10A5  3001               	movlw	1
 11256  10A6                     u11145:	
 11257  10A6  35F5               	lslf	___wmul@multiplicand,f
 11258  10A7  0DF6               	rlf	___wmul@multiplicand+1,f
 11259  10A8  0B89               	decfsz	9,f
 11260  10A9  28A6               	goto	u11145
 11261  10AA  3001               	movlw	1
 11262  10AB                     u11155:	
 11263  10AB  36F4               	lsrf	___wmul@multiplier+1,f
 11264  10AC  0CF3               	rrf	___wmul@multiplier,f
 11265  10AD  0B89               	decfsz	9,f
 11266  10AE  28AB               	goto	u11155
 11267  10AF  0874               	movf	___wmul@multiplier+1,w
 11268  10B0  0473               	iorwf	___wmul@multiplier,w
 11269  10B1  1D03               	skipz
 11270  10B2  289E               	goto	l9764
 11271  10B3  0020               	movlb	0	; select bank0
 11272  10B4  0821               	movf	___wmul@product+1,w
 11273  10B5  01F4               	clrf	?___wmul+1
 11274  10B6  07F4               	addwf	?___wmul+1,f
 11275  10B7  0820               	movf	___wmul@product,w
 11276  10B8  01F3               	clrf	?___wmul
 11277  10B9  07F3               	addwf	?___wmul,f
 11278  10BA  0008               	return
 11279  10BB                     __end_of___wmul:	
 11280                           
 11281                           	psect	text70
 11282  13B6                     __ptext70:	
 11283 ;; *************** function ___lwdiv *****************
 11284 ;; Defined at:
 11285 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11286 ;; Parameters:    Size  Location     Type
 11287 ;;  divisor         2    3[COMMON] unsigned int 
 11288 ;;  dividend        2    5[COMMON] unsigned int 
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;  quotient        2    1[BANK0 ] unsigned int 
 11291 ;;  counter         1    0[BANK0 ] unsigned char 
 11292 ;; Return value:  Size  Location     Type
 11293 ;;                  2    3[COMMON] unsigned int 
 11294 ;; Registers used:
 11295 ;;		wreg, status,2, status,0
 11296 ;; Tracked objects:
 11297 ;;		On entry : 0/0
 11298 ;;		On exit  : 0/0
 11299 ;;		Unchanged: 0/0
 11300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11301 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11302 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11303 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;Total ram usage:        8 bytes
 11306 ;; Hardware stack levels used:    1
 11307 ;; Hardware stack levels required when called:    3
 11308 ;; This function calls:
 11309 ;;		Nothing
 11310 ;; This function is called by:
 11311 ;;		_Load_Main
 11312 ;;		_setRF_Main
 11313 ;; This function uses a non-reentrant model
 11314 ;;
 11315                           
 11316                           
 11317                           ;psect for function ___lwdiv
 11318  13B6                     ___lwdiv:	
 11319                           
 11320                           ;incstack = 0
 11321                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11322  13B6  0020               	movlb	0	; select bank0
 11323  13B7  01A1               	clrf	___lwdiv@quotient
 11324  13B8  01A2               	clrf	___lwdiv@quotient+1
 11325  13B9  0874               	movf	___lwdiv@divisor+1,w
 11326  13BA  0473               	iorwf	___lwdiv@divisor,w
 11327  13BB  1903               	skipnz
 11328  13BC  2BE6               	goto	l9436
 11329  13BD  01A0               	clrf	___lwdiv@counter
 11330  13BE  0AA0               	incf	___lwdiv@counter,f
 11331  13BF                     l9424:	
 11332  13BF  1BF4               	btfsc	___lwdiv@divisor+1,7
 11333  13C0  2BCB               	goto	l9426
 11334  13C1  3001               	movlw	1
 11335  13C2                     u10465:	
 11336  13C2  35F3               	lslf	___lwdiv@divisor,f
 11337  13C3  0DF4               	rlf	___lwdiv@divisor+1,f
 11338  13C4  0B89               	decfsz	9,f
 11339  13C5  2BC2               	goto	u10465
 11340  13C6  3001               	movlw	1
 11341  13C7  00F7               	movwf	??___lwdiv
 11342  13C8  0877               	movf	??___lwdiv,w
 11343  13C9  07A0               	addwf	___lwdiv@counter,f
 11344  13CA  2BBF               	goto	l9424
 11345  13CB                     l9426:	
 11346  13CB  3001               	movlw	1
 11347  13CC                     u10485:	
 11348  13CC  35A1               	lslf	___lwdiv@quotient,f
 11349  13CD  0DA2               	rlf	___lwdiv@quotient+1,f
 11350  13CE  0B89               	decfsz	9,f
 11351  13CF  2BCC               	goto	u10485
 11352  13D0  0874               	movf	___lwdiv@divisor+1,w
 11353  13D1  0276               	subwf	___lwdiv@dividend+1,w
 11354  13D2  1D03               	skipz
 11355  13D3  2BD6               	goto	u10495
 11356  13D4  0873               	movf	___lwdiv@divisor,w
 11357  13D5  0275               	subwf	___lwdiv@dividend,w
 11358  13D6                     u10495:	
 11359  13D6  1C03               	skipc
 11360  13D7  2BDD               	goto	l9432
 11361  13D8  0873               	movf	___lwdiv@divisor,w
 11362  13D9  02F5               	subwf	___lwdiv@dividend,f
 11363  13DA  0874               	movf	___lwdiv@divisor+1,w
 11364  13DB  3BF6               	subwfb	___lwdiv@dividend+1,f
 11365  13DC  1421               	bsf	___lwdiv@quotient,0
 11366  13DD                     l9432:	
 11367  13DD  3001               	movlw	1
 11368  13DE                     u10505:	
 11369  13DE  36F4               	lsrf	___lwdiv@divisor+1,f
 11370  13DF  0CF3               	rrf	___lwdiv@divisor,f
 11371  13E0  0B89               	decfsz	9,f
 11372  13E1  2BDE               	goto	u10505
 11373  13E2  3001               	movlw	1
 11374  13E3  02A0               	subwf	___lwdiv@counter,f
 11375  13E4  1D03               	btfss	3,2
 11376  13E5  2BCB               	goto	l9426
 11377  13E6                     l9436:	
 11378  13E6  0822               	movf	___lwdiv@quotient+1,w
 11379  13E7  01F4               	clrf	?___lwdiv+1
 11380  13E8  07F4               	addwf	?___lwdiv+1,f
 11381  13E9  0821               	movf	___lwdiv@quotient,w
 11382  13EA  01F3               	clrf	?___lwdiv
 11383  13EB  07F3               	addwf	?___lwdiv,f
 11384  13EC  0008               	return
 11385  13ED                     __end_of___lwdiv:	
 11386                           
 11387                           	psect	text71
 11388  1BFD                     __ptext71:	
 11389 ;; *************** function _Load_Initialization *****************
 11390 ;; Defined at:
 11391 ;;		line 9 in file "../src/OverLoad_B1.c"
 11392 ;; Parameters:    Size  Location     Type
 11393 ;;		None
 11394 ;; Auto vars:     Size  Location     Type
 11395 ;;		None
 11396 ;; Return value:  Size  Location     Type
 11397 ;;		None               void
 11398 ;; Registers used:
 11399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11400 ;; Tracked objects:
 11401 ;;		On entry : 0/0
 11402 ;;		On exit  : 0/0
 11403 ;;		Unchanged: 0/0
 11404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11409 ;;Total ram usage:        0 bytes
 11410 ;; Hardware stack levels used:    1
 11411 ;; Hardware stack levels required when called:    4
 11412 ;; This function calls:
 11413 ;;		_setLoad_AH_AL_Restore
 11414 ;; This function is called by:
 11415 ;;		_main
 11416 ;; This function uses a non-reentrant model
 11417 ;;
 11418                           
 11419                           
 11420                           ;psect for function _Load_Initialization
 11421  1BFD                     _Load_Initialization:	
 11422                           
 11423                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11424                           
 11425                           ;incstack = 0
 11426                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11427  1BFD  319F  2757         	fcall	_setLoad_AH_AL_Restore
 11428  1BFF  0008               	return
 11429  1C00                     __end_of_Load_Initialization:	
 11430                           
 11431                           	psect	text72
 11432  1F57                     __ptext72:	
 11433 ;; *************** function _setLoad_AH_AL_Restore *****************
 11434 ;; Defined at:
 11435 ;;		line 266 in file "../src/OverLoad_B1.c"
 11436 ;; Parameters:    Size  Location     Type
 11437 ;;		None
 11438 ;; Auto vars:     Size  Location     Type
 11439 ;;  i               1    4[COMMON] unsigned char 
 11440 ;; Return value:  Size  Location     Type
 11441 ;;		None               void
 11442 ;; Registers used:
 11443 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11444 ;; Tracked objects:
 11445 ;;		On entry : 0/0
 11446 ;;		On exit  : 0/0
 11447 ;;		Unchanged: 0/0
 11448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11452 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11453 ;;Total ram usage:        2 bytes
 11454 ;; Hardware stack levels used:    1
 11455 ;; Hardware stack levels required when called:    3
 11456 ;; This function calls:
 11457 ;;		Nothing
 11458 ;; This function is called by:
 11459 ;;		_Load_Initialization
 11460 ;;		_Load_Main
 11461 ;; This function uses a non-reentrant model
 11462 ;;
 11463                           
 11464                           
 11465                           ;psect for function _setLoad_AH_AL_Restore
 11466  1F57                     _setLoad_AH_AL_Restore:	
 11467                           
 11468                           ;OverLoad_B1.c: 267: char i;
 11469                           ;OverLoad_B1.c: 268: for (i = 0; i < 5; i++) {
 11470                           
 11471                           ;incstack = 0
 11472                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11473  1F57  01F4               	clrf	setLoad_AH_AL_Restore@i
 11474  1F58                     L8:	
 11475  1F58  3005               	movlw	5
 11476  1F59  0274               	subwf	setLoad_AH_AL_Restore@i,w
 11477  1F5A  1803               	btfsc	3,0
 11478  1F5B  0008               	return
 11479                           
 11480                           ;OverLoad_B1.c: 269: Load.AH[i] = 0;
 11481  1F5C  3574               	lslf	setLoad_AH_AL_Restore@i,w
 11482  1F5D  3E2B               	addlw	(_Load+11)& (0+255)
 11483  1F5E  0086               	movwf	6
 11484  1F5F  3001               	movlw	1	; select bank2/3
 11485  1F60  0087               	movwf	7
 11486  1F61  3000               	movlw	0
 11487  1F62  3FC0               	movwi [0]fsr1
 11488  1F63  3FC1               	movwi [1]fsr1
 11489                           
 11490                           ;OverLoad_B1.c: 270: Load.AL[i] = 0xffff;
 11491  1F64  3574               	lslf	setLoad_AH_AL_Restore@i,w
 11492  1F65  3E35               	addlw	(_Load+21)& (0+255)
 11493  1F66  0086               	movwf	6
 11494  1F67  3001               	movlw	1	; select bank2/3
 11495  1F68  0087               	movwf	7
 11496  1F69  30FF               	movlw	255
 11497  1F6A  3FC0               	movwi [0]fsr1
 11498  1F6B  30FF               	movlw	255
 11499  1F6C  3FC1               	movwi [1]fsr1
 11500  1F6D  3001               	movlw	1
 11501  1F6E  00F3               	movwf	??_setLoad_AH_AL_Restore
 11502  1F6F  0873               	movf	??_setLoad_AH_AL_Restore,w
 11503  1F70  07F4               	addwf	setLoad_AH_AL_Restore@i,f
 11504  1F71  2F58               	goto	L8
 11505  1F72                     __end_of_setLoad_AH_AL_Restore:	
 11506                           
 11507                           	psect	text73
 11508  1CCB                     __ptext73:	
 11509 ;; *************** function _LED_Main *****************
 11510 ;; Defined at:
 11511 ;;		line 47 in file "../src/LED_B1.c"
 11512 ;; Parameters:    Size  Location     Type
 11513 ;;		None
 11514 ;; Auto vars:     Size  Location     Type
 11515 ;;		None
 11516 ;; Return value:  Size  Location     Type
 11517 ;;		None               void
 11518 ;; Registers used:
 11519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11520 ;; Tracked objects:
 11521 ;;		On entry : 0/0
 11522 ;;		On exit  : 0/0
 11523 ;;		Unchanged: 0/0
 11524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;Total ram usage:        0 bytes
 11530 ;; Hardware stack levels used:    1
 11531 ;; Hardware stack levels required when called:    5
 11532 ;; This function calls:
 11533 ;;		_setLED_Main
 11534 ;; This function is called by:
 11535 ;;		_main
 11536 ;; This function uses a non-reentrant model
 11537 ;;
 11538                           
 11539                           
 11540                           ;psect for function _LED_Main
 11541  1CCB                     _LED_Main:	
 11542                           
 11543                           ;LED_B1.c: 53: setLED_Main(1);
 11544                           
 11545                           ;incstack = 0
 11546                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11547  1CCB  3001               	movlw	1
 11548  1CCC  3194  24A4  319C   	fcall	_setLED_Main
 11549                           
 11550                           ;LED_B1.c: 56: setLED_Main(2);
 11551  1CCF  3002               	movlw	2
 11552  1CD0  3194  24A4  319C   	fcall	_setLED_Main
 11553                           
 11554                           ;LED_B1.c: 62: setLED_Main(99);
 11555  1CD3  3063               	movlw	99
 11556  1CD4  3194  24A4         	fcall	_setLED_Main
 11557  1CD6  0008               	return
 11558  1CD7                     __end_of_LED_Main:	
 11559                           
 11560                           	psect	text74
 11561  14A4                     __ptext74:	
 11562 ;; *************** function _setLED_Main *****************
 11563 ;; Defined at:
 11564 ;;		line 221 in file "../src/LED_B1.c"
 11565 ;; Parameters:    Size  Location     Type
 11566 ;;  led             1    wreg     unsigned char 
 11567 ;; Auto vars:     Size  Location     Type
 11568 ;;  led             1    7[COMMON] unsigned char 
 11569 ;; Return value:  Size  Location     Type
 11570 ;;		None               void
 11571 ;; Registers used:
 11572 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11573 ;; Tracked objects:
 11574 ;;		On entry : 0/0
 11575 ;;		On exit  : 0/0
 11576 ;;		Unchanged: 0/0
 11577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11580 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11581 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11582 ;;Total ram usage:        3 bytes
 11583 ;; Hardware stack levels used:    1
 11584 ;; Hardware stack levels required when called:    4
 11585 ;; This function calls:
 11586 ;;		_LedPointSelect
 11587 ;; This function is called by:
 11588 ;;		_LED_Main
 11589 ;; This function uses a non-reentrant model
 11590 ;;
 11591                           
 11592                           
 11593                           ;psect for function _setLED_Main
 11594  14A4                     _setLED_Main:	
 11595                           
 11596                           ;incstack = 0
 11597                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11598                           ;setLED_Main@led stored from wreg
 11599  14A4  00F7               	movwf	setLED_Main@led
 11600                           
 11601                           ;LED_B1.c: 222: LedPointSelect(led);
 11602  14A5  0877               	movf	setLED_Main@led,w
 11603  14A6  319F  27C4  3194   	fcall	_LedPointSelect
 11604                           
 11605                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11606  14A9  0021               	movlb	1	; select bank1
 11607  14AA  0855               	movf	_LED^(0+128),w
 11608  14AB  0086               	movwf	6
 11609  14AC  3001               	movlw	1	; select bank2/3
 11610  14AD  0087               	movwf	7
 11611  14AE  1C81               	btfss	1,1
 11612  14AF  0008               	return
 11613                           
 11614                           ;LED_B1.c: 224: LED->Time++;
 11615  14B0  0A55               	incf	_LED^(0+128),w
 11616  14B1  0086               	movwf	6
 11617  14B2  3001               	movlw	1	; select bank2/3
 11618  14B3  0087               	movwf	7
 11619  14B4  3001               	movlw	1
 11620  14B5  0781               	addwf	1,f
 11621  14B6  3141               	addfsr 1,1
 11622  14B7  1803               	skipnc
 11623  14B8  0A81               	incf	1,f
 11624                           
 11625                           ;LED_B1.c: 225: if (LED->Time >= (500 / 20)) {
 11626  14B9  0A55               	incf	_LED^(0+128),w
 11627  14BA  0086               	movwf	6
 11628  14BB  3001               	movlw	1	; select bank2/3
 11629  14BC  0087               	movwf	7
 11630  14BD  3F40               	moviw [0]fsr1
 11631  14BE  00F5               	movwf	??_setLED_Main
 11632  14BF  3F41               	moviw [1]fsr1
 11633  14C0  00F6               	movwf	??_setLED_Main+1
 11634  14C1  3000               	movlw	0
 11635  14C2  0276               	subwf	??_setLED_Main+1,w
 11636  14C3  3019               	movlw	25
 11637  14C4  1903               	skipnz
 11638  14C5  0275               	subwf	??_setLED_Main,w
 11639  14C6  1C03               	skipc
 11640  14C7  0008               	return
 11641                           
 11642                           ;LED_B1.c: 226: LED->Time = 0;
 11643  14C8  0A55               	incf	_LED^(0+128),w
 11644  14C9  0086               	movwf	6
 11645  14CA  3001               	movlw	1	; select bank2/3
 11646  14CB  0087               	movwf	7
 11647  14CC  3000               	movlw	0
 11648  14CD  3FC0               	movwi [0]fsr1
 11649  14CE  3FC1               	movwi [1]fsr1
 11650                           
 11651                           ;LED_B1.c: 228: if (led == 1) {
 11652  14CF  0877               	movf	setLED_Main@led,w
 11653  14D0  3A01               	xorlw	1
 11654  14D1  1D03               	skipz
 11655  14D2  2CD6               	goto	l1086
 11656                           
 11657                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11658  14D3  3008               	movlw	8
 11659  14D4  0020               	movlb	0	; select bank0
 11660  14D5  068C               	xorwf	12,f
 11661  14D6                     l1086:	
 11662                           
 11663                           ;LED_B1.c: 230: }
 11664                           ;LED_B1.c: 233: if (led == 2) {
 11665  14D6  0877               	movf	setLED_Main@led,w
 11666  14D7  3A02               	xorlw	2
 11667  14D8  1D03               	skipz
 11668  14D9  2CDD               	goto	l1087
 11669                           
 11670                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11671  14DA  3080               	movlw	128
 11672  14DB  0020               	movlb	0	; select bank0
 11673  14DC  068E               	xorwf	14,f
 11674  14DD                     l1087:	
 11675                           
 11676                           ;LED_B1.c: 235: }
 11677                           ;LED_B1.c: 243: if (led == 99) {
 11678  14DD  0877               	movf	setLED_Main@led,w
 11679  14DE  3A63               	xorlw	99
 11680  14DF  1D03               	skipz
 11681  14E0  0008               	return
 11682                           
 11683                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11684  14E1  3020               	movlw	32
 11685  14E2  0020               	movlb	0	; select bank0
 11686  14E3  068D               	xorwf	13,f
 11687  14E4  0008               	return
 11688  14E5                     __end_of_setLED_Main:	
 11689                           
 11690                           	psect	text75
 11691  1CBF                     __ptext75:	
 11692 ;; *************** function _LED_Initialization *****************
 11693 ;; Defined at:
 11694 ;;		line 31 in file "../src/LED_B1.c"
 11695 ;; Parameters:    Size  Location     Type
 11696 ;;		None
 11697 ;; Auto vars:     Size  Location     Type
 11698 ;;		None
 11699 ;; Return value:  Size  Location     Type
 11700 ;;		None               void
 11701 ;; Registers used:
 11702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11703 ;; Tracked objects:
 11704 ;;		On entry : 0/0
 11705 ;;		On exit  : 0/0
 11706 ;;		Unchanged: 0/0
 11707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11712 ;;Total ram usage:        0 bytes
 11713 ;; Hardware stack levels used:    1
 11714 ;; Hardware stack levels required when called:    6
 11715 ;; This function calls:
 11716 ;;		_setLED_Initialization
 11717 ;; This function is called by:
 11718 ;;		_main
 11719 ;; This function uses a non-reentrant model
 11720 ;;
 11721                           
 11722                           
 11723                           ;psect for function _LED_Initialization
 11724  1CBF                     _LED_Initialization:	
 11725                           
 11726                           ;LED_B1.c: 33: setLED_Initialization(1);
 11727                           
 11728                           ;incstack = 0
 11729                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11730  1CBF  3001               	movlw	1
 11731  1CC0  319D  2581  319C   	fcall	_setLED_Initialization
 11732                           
 11733                           ;LED_B1.c: 36: setLED_Initialization(2);
 11734  1CC3  3002               	movlw	2
 11735  1CC4  319D  2581  319C   	fcall	_setLED_Initialization
 11736                           
 11737                           ;LED_B1.c: 42: setLED_Initialization(99);
 11738  1CC7  3063               	movlw	99
 11739  1CC8  319D  2581         	fcall	_setLED_Initialization
 11740  1CCA  0008               	return
 11741  1CCB                     __end_of_LED_Initialization:	
 11742                           
 11743                           	psect	text76
 11744  1D81                     __ptext76:	
 11745 ;; *************** function _setLED_Initialization *****************
 11746 ;; Defined at:
 11747 ;;		line 69 in file "../src/LED_B1.c"
 11748 ;; Parameters:    Size  Location     Type
 11749 ;;  led             1    wreg     unsigned char 
 11750 ;; Auto vars:     Size  Location     Type
 11751 ;;  led             1    7[COMMON] unsigned char 
 11752 ;; Return value:  Size  Location     Type
 11753 ;;		None               void
 11754 ;; Registers used:
 11755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11756 ;; Tracked objects:
 11757 ;;		On entry : 0/0
 11758 ;;		On exit  : 0/0
 11759 ;;		Unchanged: 0/0
 11760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11762 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11764 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11765 ;;Total ram usage:        1 bytes
 11766 ;; Hardware stack levels used:    1
 11767 ;; Hardware stack levels required when called:    5
 11768 ;; This function calls:
 11769 ;;		_LedPointSelect
 11770 ;;		_setLED
 11771 ;; This function is called by:
 11772 ;;		_LED_Initialization
 11773 ;; This function uses a non-reentrant model
 11774 ;;
 11775                           
 11776                           
 11777                           ;psect for function _setLED_Initialization
 11778  1D81                     _setLED_Initialization:	
 11779                           
 11780                           ;incstack = 0
 11781                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11782                           ;setLED_Initialization@led stored from wreg
 11783  1D81  00F7               	movwf	setLED_Initialization@led
 11784                           
 11785                           ;LED_B1.c: 70: LedPointSelect(led);
 11786  1D82  0877               	movf	setLED_Initialization@led,w
 11787  1D83  319F  27C4  319D   	fcall	_LedPointSelect
 11788                           
 11789                           ;LED_B1.c: 71: LED->Enable = 1;
 11790  1D86  0021               	movlb	1	; select bank1
 11791  1D87  0855               	movf	_LED^(0+128),w
 11792  1D88  0086               	movwf	6
 11793  1D89  3001               	movlw	1	; select bank2/3
 11794  1D8A  0087               	movwf	7
 11795  1D8B  1401               	bsf	1,0
 11796                           
 11797                           ;LED_B1.c: 72: setLED(led, 0);
 11798  1D8C  01F5               	clrf	setLED@command
 11799  1D8D  0877               	movf	setLED_Initialization@led,w
 11800  1D8E  3189  2102         	fcall	_setLED
 11801  1D90  0008               	return
 11802  1D91                     __end_of_setLED_Initialization:	
 11803                           
 11804                           	psect	text77
 11805  1380                     __ptext77:	
 11806 ;; *************** function _Flash_Memory_Main *****************
 11807 ;; Defined at:
 11808 ;;		line 970 in file "../src/MCU_B1.c"
 11809 ;; Parameters:    Size  Location     Type
 11810 ;;		None
 11811 ;; Auto vars:     Size  Location     Type
 11812 ;;		None
 11813 ;; Return value:  Size  Location     Type
 11814 ;;		None               void
 11815 ;; Registers used:
 11816 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11817 ;; Tracked objects:
 11818 ;;		On entry : 0/0
 11819 ;;		On exit  : 0/0
 11820 ;;		Unchanged: 0/0
 11821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11824 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11825 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;Total ram usage:        1 bytes
 11827 ;; Hardware stack levels used:    1
 11828 ;; Hardware stack levels required when called:    6
 11829 ;; This function calls:
 11830 ;;		_Flash_Memory_Modify
 11831 ;;		_getMain_LightsStatus
 11832 ;; This function is called by:
 11833 ;;		_main
 11834 ;; This function uses a non-reentrant model
 11835 ;;
 11836                           
 11837                           
 11838                           ;psect for function _Flash_Memory_Main
 11839  1380                     _Flash_Memory_Main:	
 11840                           
 11841                           ;MCU_B1.c: 971: if (Memory.Modify == 1) {
 11842                           
 11843                           ;incstack = 0
 11844                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11845  1380  0024               	movlb	4	; select bank4
 11846  1381  1C44               	btfss	(_Memory^(0+512)+36),0
 11847  1382  0008               	return
 11848                           
 11849                           ;MCU_B1.c: 972: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11850  1383  319D  2535  3193   	fcall	_getMain_LightsStatus
 11851  1386  3A00               	xorlw	0
 11852  1387  3000               	movlw	0
 11853  1388  1903               	skipnz
 11854  1389  3001               	movlw	1
 11855  138A  0020               	movlb	0	; select bank0
 11856  138B  00A1               	movwf	??_Flash_Memory_Main
 11857  138C  0DA1               	rlf	??_Flash_Memory_Main,f
 11858  138D  0024               	movlb	4	; select bank4
 11859  138E  0844               	movf	(_Memory^(0+512)+36),w
 11860  138F  0020               	movlb	0	; select bank0
 11861  1390  0621               	xorwf	??_Flash_Memory_Main,w
 11862  1391  39FD               	andlw	-3
 11863  1392  0621               	xorwf	??_Flash_Memory_Main,w
 11864  1393  0024               	movlb	4	; select bank4
 11865  1394  00C4               	movwf	(_Memory^(0+512)+36)
 11866                           
 11867                           ;MCU_B1.c: 973: if (Memory.GO == 1) {
 11868  1395  1CC4               	btfss	(_Memory^(0+512)+36),1
 11869  1396  2BB0               	goto	l1353
 11870                           
 11871                           ;MCU_B1.c: 974: Memory.Runtime = 1;
 11872  1397  15C4               	bsf	(_Memory^(0+512)+36),3
 11873                           
 11874                           ;MCU_B1.c: 975: Memory.Time++;
 11875  1398  3001               	movlw	1
 11876  1399  07C2               	addwf	(_Memory^(0+512)+34),f
 11877  139A  3000               	movlw	0
 11878  139B  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11879                           
 11880                           ;MCU_B1.c: 976: if (Memory.Time == 25) {
 11881  139C  3022               	movlw	34
 11882  139D  3E20               	addlw	_Memory& (0+255)
 11883  139E  0086               	movwf	6
 11884  139F  3002               	movlw	2	; select bank4/5
 11885  13A0  0087               	movwf	7
 11886  13A1  3F40               	moviw [0]fsr1
 11887  13A2  3A19               	xorlw	25
 11888  13A3  1D03               	skipz
 11889  13A4  2BA7               	goto	u11275
 11890  13A5  3F41               	moviw [1]fsr1
 11891  13A6  3A00               	xorlw	0
 11892  13A7                     u11275:	
 11893  13A7  1D03               	skipz
 11894  13A8  0008               	return
 11895                           
 11896                           ;MCU_B1.c: 977: Memory.Time = 0;
 11897  13A9  01C2               	clrf	(_Memory^(0+512)+34)
 11898  13AA  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11899                           
 11900                           ;MCU_B1.c: 978: Memory.Modify = 0;
 11901  13AB  1044               	bcf	(_Memory^(0+512)+36),0
 11902                           
 11903                           ;MCU_B1.c: 979: Memory.GO = 0;
 11904  13AC  10C4               	bcf	(_Memory^(0+512)+36),1
 11905                           
 11906                           ;MCU_B1.c: 980: Flash_Memory_Modify();
 11907  13AD  3195  25B4         	fcall	_Flash_Memory_Modify
 11908                           
 11909                           ;MCU_B1.c: 981: }
 11910                           ;MCU_B1.c: 982: } else {
 11911  13AF  0008               	return
 11912  13B0                     l1353:	
 11913                           
 11914                           ;MCU_B1.c: 983: if (Memory.Runtime == 1) {
 11915  13B0  1DC4               	btfss	(_Memory^(0+512)+36),3
 11916  13B1  0008               	return
 11917                           
 11918                           ;MCU_B1.c: 984: Memory.Runtime = 0;
 11919  13B2  11C4               	bcf	(_Memory^(0+512)+36),3
 11920                           
 11921                           ;MCU_B1.c: 985: Memory.Time = 0;
 11922  13B3  01C2               	clrf	(_Memory^(0+512)+34)
 11923  13B4  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11924  13B5  0008               	return
 11925  13B6                     __end_of_Flash_Memory_Main:	
 11926                           
 11927                           	psect	text78
 11928  15B4                     __ptext78:	
 11929 ;; *************** function _Flash_Memory_Modify *****************
 11930 ;; Defined at:
 11931 ;;		line 1043 in file "../src/MCU_B1.c"
 11932 ;; Parameters:    Size  Location     Type
 11933 ;;		None
 11934 ;; Auto vars:     Size  Location     Type
 11935 ;;  i               1    0[BANK0 ] unsigned char 
 11936 ;; Return value:  Size  Location     Type
 11937 ;;		None               void
 11938 ;; Registers used:
 11939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11940 ;; Tracked objects:
 11941 ;;		On entry : 0/0
 11942 ;;		On exit  : 0/0
 11943 ;;		Unchanged: 0/0
 11944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11946 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11948 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11949 ;;Total ram usage:        2 bytes
 11950 ;; Hardware stack levels used:    1
 11951 ;; Hardware stack levels required when called:    5
 11952 ;; This function calls:
 11953 ;;		_Flash_Memory_Erasing
 11954 ;;		_Flash_Memory_Read
 11955 ;;		_Flash_Memory_Write
 11956 ;;		_setMemory_Data
 11957 ;; This function is called by:
 11958 ;;		_Flash_Memory_Main
 11959 ;; This function uses a non-reentrant model
 11960 ;;
 11961                           
 11962                           
 11963                           ;psect for function _Flash_Memory_Modify
 11964  15B4                     _Flash_Memory_Modify:	
 11965                           
 11966                           ;MCU_B1.c: 1044: char i = 0;
 11967                           
 11968                           ;incstack = 0
 11969                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11970  15B4  0020               	movlb	0	; select bank0
 11971  15B5  01A0               	clrf	Flash_Memory_Modify@i
 11972                           
 11973                           ;MCU_B1.c: 1045: for (i = 0; i < 32; i++) {
 11974  15B6  01A0               	clrf	Flash_Memory_Modify@i
 11975  15B7  3020               	movlw	32
 11976  15B8  0220               	subwf	Flash_Memory_Modify@i,w
 11977  15B9  1803               	btfsc	3,0
 11978  15BA  2DD0               	goto	l9520
 11979  15BB                     l9514:	
 11980                           
 11981                           ;MCU_B1.c: 1046: Memory.Data[i] = Flash_Memory_Read(i);
 11982  15BB  0820               	movf	Flash_Memory_Modify@i,w
 11983  15BC  319E  2660  3195   	fcall	_Flash_Memory_Read
 11984  15BF  00F7               	movwf	??_Flash_Memory_Modify
 11985  15C0  0020               	movlb	0	; select bank0
 11986  15C1  0820               	movf	Flash_Memory_Modify@i,w
 11987  15C2  3E20               	addlw	_Memory& (0+255)
 11988  15C3  0086               	movwf	6
 11989  15C4  3002               	movlw	2	; select bank4/5
 11990  15C5  0087               	movwf	7
 11991  15C6  0877               	movf	??_Flash_Memory_Modify,w
 11992  15C7  0081               	movwf	1
 11993  15C8  3001               	movlw	1
 11994  15C9  00F7               	movwf	??_Flash_Memory_Modify
 11995  15CA  0877               	movf	??_Flash_Memory_Modify,w
 11996  15CB  07A0               	addwf	Flash_Memory_Modify@i,f
 11997  15CC  3020               	movlw	32
 11998  15CD  0220               	subwf	Flash_Memory_Modify@i,w
 11999  15CE  1C03               	skipc
 12000  15CF  2DBB               	goto	l9514
 12001  15D0                     l9520:	
 12002                           
 12003                           ;MCU_B1.c: 1047: }
 12004                           ;MCU_B1.c: 1048: setMemory_Data(0, product->Data[12]);
 12005  15D0  086E               	movf	_product,w
 12006  15D1  0086               	movwf	6
 12007  15D2  3002               	movlw	2	; select bank4/5
 12008  15D3  0087               	movwf	7
 12009  15D4  3002               	movlw	2	; select bank4/5
 12010  15D5  3F4C               	moviw [12]fsr1
 12011  15D6  00F3               	movwf	setMemory_Data@data
 12012  15D7  3000               	movlw	0
 12013  15D8  319C  2492  3195   	fcall	_setMemory_Data
 12014                           
 12015                           ;MCU_B1.c: 1049: setMemory_Data(1, product->Data[13]);
 12016  15DB  0020               	movlb	0	; select bank0
 12017  15DC  086E               	movf	_product,w
 12018  15DD  0086               	movwf	6
 12019  15DE  3002               	movlw	2	; select bank4/5
 12020  15DF  0087               	movwf	7
 12021  15E0  3002               	movlw	2	; select bank4/5
 12022  15E1  3F4D               	moviw [13]fsr1
 12023  15E2  00F3               	movwf	setMemory_Data@data
 12024  15E3  3001               	movlw	1
 12025  15E4  319C  2492  3195   	fcall	_setMemory_Data
 12026                           
 12027                           ;MCU_B1.c: 1050: setMemory_Data(2, product->Data[14]);
 12028  15E7  0020               	movlb	0	; select bank0
 12029  15E8  086E               	movf	_product,w
 12030  15E9  0086               	movwf	6
 12031  15EA  3002               	movlw	2	; select bank4/5
 12032  15EB  0087               	movwf	7
 12033  15EC  3002               	movlw	2	; select bank4/5
 12034  15ED  3F4E               	moviw [14]fsr1
 12035  15EE  00F3               	movwf	setMemory_Data@data
 12036  15EF  3002               	movlw	2
 12037  15F0  319C  2492  3195   	fcall	_setMemory_Data
 12038                           
 12039                           ;MCU_B1.c: 1056: if (Memory.LoopSave == 1) {
 12040  15F3  0024               	movlb	4	; select bank4
 12041  15F4  1D44               	btfss	(_Memory^(0+512)+36),2
 12042  15F5  2DFA               	goto	l1376
 12043                           
 12044                           ;MCU_B1.c: 1057: Memory.LoopSave = 0;
 12045  15F6  1144               	bcf	(_Memory^(0+512)+36),2
 12046                           
 12047                           ;MCU_B1.c: 1058: myMain.FirstOpen = 0;
 12048  15F7  0021               	movlb	1	; select bank1
 12049  15F8  11AE               	bcf	_myMain^(0+128),3
 12050                           
 12051                           ;MCU_B1.c: 1059: myMain.First = 0;
 12052  15F9  12AE               	bcf	_myMain^(0+128),5
 12053  15FA                     l1376:	
 12054                           
 12055                           ;MCU_B1.c: 1061: }
 12056                           ;MCU_B1.c: 1062: GIE = 0;
 12057  15FA  138B               	bcf	11,7	;volatile
 12058                           
 12059                           ;MCU_B1.c: 1063: Flash_Memory_Erasing();
 12060  15FB  319C  24B3  3195   	fcall	_Flash_Memory_Erasing
 12061                           
 12062                           ;MCU_B1.c: 1064: Flash_Memory_Write();
 12063  15FE  3192  2294         	fcall	_Flash_Memory_Write
 12064                           
 12065                           ;MCU_B1.c: 1065: GIE = 1;
 12066  1600  178B               	bsf	11,7	;volatile
 12067  1601  0008               	return
 12068  1602                     __end_of_Flash_Memory_Modify:	
 12069                           
 12070                           	psect	text79
 12071  1CB3                     __ptext79:	
 12072 ;; *************** function _Flash_Memory_Erasing *****************
 12073 ;; Defined at:
 12074 ;;		line 1032 in file "../src/MCU_B1.c"
 12075 ;; Parameters:    Size  Location     Type
 12076 ;;		None
 12077 ;; Auto vars:     Size  Location     Type
 12078 ;;		None
 12079 ;; Return value:  Size  Location     Type
 12080 ;;		None               void
 12081 ;; Registers used:
 12082 ;;		wreg, status,2, status,0, pclath, cstack
 12083 ;; Tracked objects:
 12084 ;;		On entry : 0/0
 12085 ;;		On exit  : 0/0
 12086 ;;		Unchanged: 0/0
 12087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12092 ;;Total ram usage:        0 bytes
 12093 ;; Hardware stack levels used:    1
 12094 ;; Hardware stack levels required when called:    4
 12095 ;; This function calls:
 12096 ;;		_Flash_Memory_Unlock
 12097 ;; This function is called by:
 12098 ;;		_Flash_Memory_Modify
 12099 ;; This function uses a non-reentrant model
 12100 ;;
 12101                           
 12102                           
 12103                           ;psect for function _Flash_Memory_Erasing
 12104  1CB3                     _Flash_Memory_Erasing:	
 12105                           
 12106                           ;MCU_B1.c: 1033: CFGS = 0;
 12107                           
 12108                           ;incstack = 0
 12109                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12110  1CB3  0023               	movlb	3	; select bank3
 12111  1CB4  1315               	bcf	21,6	;volatile
 12112                           
 12113                           ;MCU_B1.c: 1034: PMADRH = 0x30;
 12114  1CB5  3030               	movlw	48
 12115  1CB6  0092               	movwf	18	;volatile
 12116                           
 12117                           ;MCU_B1.c: 1035: PMADRL = 0x00;
 12118  1CB7  0191               	clrf	17	;volatile
 12119                           
 12120                           ;MCU_B1.c: 1036: FREE = 1;
 12121  1CB8  1615               	bsf	21,4	;volatile
 12122                           
 12123                           ;MCU_B1.c: 1037: WREN = 1;
 12124  1CB9  1515               	bsf	21,2	;volatile
 12125                           
 12126                           ;MCU_B1.c: 1038: Flash_Memory_Unlock();
 12127  1CBA  319C  246B         	fcall	_Flash_Memory_Unlock
 12128                           
 12129                           ;MCU_B1.c: 1039: WREN = 0;
 12130  1CBC  0023               	movlb	3	; select bank3
 12131  1CBD  1115               	bcf	21,2	;volatile
 12132  1CBE  0008               	return
 12133  1CBF                     __end_of_Flash_Memory_Erasing:	
 12134                           
 12135                           	psect	text80
 12136  0560                     __ptext80:	
 12137 ;; *************** function _Flash_Memory_Initialization *****************
 12138 ;; Defined at:
 12139 ;;		line 929 in file "../src/MCU_B1.c"
 12140 ;; Parameters:    Size  Location     Type
 12141 ;;		None
 12142 ;; Auto vars:     Size  Location     Type
 12143 ;;  i               1   62[BANK0 ] unsigned char 
 12144 ;; Return value:  Size  Location     Type
 12145 ;;		None               void
 12146 ;; Registers used:
 12147 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12148 ;; Tracked objects:
 12149 ;;		On entry : 0/0
 12150 ;;		On exit  : 0/0
 12151 ;;		Unchanged: 0/0
 12152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;Total ram usage:        2 bytes
 12158 ;; Hardware stack levels used:    1
 12159 ;; Hardware stack levels required when called:    6
 12160 ;; This function calls:
 12161 ;;		_Flash_Memory_Read
 12162 ;;		_Flash_Memory_Write
 12163 ;;		_setDimmerLights_PercentValue
 12164 ;;		_setMemory_Data
 12165 ;; This function is called by:
 12166 ;;		_main
 12167 ;; This function uses a non-reentrant model
 12168 ;;
 12169                           
 12170                           
 12171                           ;psect for function _Flash_Memory_Initialization
 12172  0560                     _Flash_Memory_Initialization:	
 12173                           
 12174                           ;MCU_B1.c: 930: char i = 0;
 12175                           
 12176                           ;incstack = 0
 12177                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12178  0560  0020               	movlb	0	; select bank0
 12179  0561  01DE               	clrf	Flash_Memory_Initialization@i
 12180                           
 12181                           ;MCU_B1.c: 931: if (Flash_Memory_Read(31) == 0xaa) {
 12182  0562  301F               	movlw	31
 12183  0563  319E  2660  3185   	fcall	_Flash_Memory_Read
 12184  0566  3AAA               	xorlw	170
 12185  0567  1D03               	skipz
 12186  0568  2DD2               	goto	l9808
 12187                           
 12188                           ;MCU_B1.c: 932: product->Data[12] = Flash_Memory_Read(0);
 12189  0569  3000               	movlw	0
 12190  056A  319E  2660  3185   	fcall	_Flash_Memory_Read
 12191  056D  0020               	movlb	0	; select bank0
 12192  056E  00DD               	movwf	??_Flash_Memory_Initialization
 12193  056F  086E               	movf	_product,w
 12194  0570  3E0C               	addlw	12
 12195  0571  0086               	movwf	6
 12196  0572  3002               	movlw	2	; select bank4/5
 12197  0573  0087               	movwf	7
 12198  0574  085D               	movf	??_Flash_Memory_Initialization,w
 12199  0575  0081               	movwf	1
 12200                           
 12201                           ;MCU_B1.c: 933: product->Data[13] = Flash_Memory_Read(1);
 12202  0576  3001               	movlw	1
 12203  0577  319E  2660  3185   	fcall	_Flash_Memory_Read
 12204  057A  0020               	movlb	0	; select bank0
 12205  057B  00DD               	movwf	??_Flash_Memory_Initialization
 12206  057C  086E               	movf	_product,w
 12207  057D  3E0D               	addlw	13
 12208  057E  0086               	movwf	6
 12209  057F  3002               	movlw	2	; select bank4/5
 12210  0580  0087               	movwf	7
 12211  0581  085D               	movf	??_Flash_Memory_Initialization,w
 12212  0582  0081               	movwf	1
 12213                           
 12214                           ;MCU_B1.c: 934: product->Data[14] = Flash_Memory_Read(2);
 12215  0583  3002               	movlw	2
 12216  0584  319E  2660  3185   	fcall	_Flash_Memory_Read
 12217  0587  0020               	movlb	0	; select bank0
 12218  0588  00DD               	movwf	??_Flash_Memory_Initialization
 12219  0589  086E               	movf	_product,w
 12220  058A  3E0E               	addlw	14
 12221  058B  0086               	movwf	6
 12222  058C  3002               	movlw	2	; select bank4/5
 12223  058D  0087               	movwf	7
 12224  058E  085D               	movf	??_Flash_Memory_Initialization,w
 12225  058F  0081               	movwf	1
 12226                           
 12227                           ;MCU_B1.c: 940: i = setDimmerLights_PercentValue(((char)(70*0.8)));
 12228  0590  3038               	movlw	56
 12229  0591  318A  22EE  3185   	fcall	_setDimmerLights_PercentValue
 12230  0594  0020               	movlb	0	; select bank0
 12231  0595  00DD               	movwf	??_Flash_Memory_Initialization
 12232  0596  085D               	movf	??_Flash_Memory_Initialization,w
 12233  0597  00DE               	movwf	Flash_Memory_Initialization@i
 12234                           
 12235                           ;MCU_B1.c: 941: product->Data[21] = i;
 12236  0598  085E               	movf	Flash_Memory_Initialization@i,w
 12237  0599  00DD               	movwf	??_Flash_Memory_Initialization
 12238  059A  086E               	movf	_product,w
 12239  059B  3E15               	addlw	21
 12240  059C  0086               	movwf	6
 12241  059D  3002               	movlw	2	; select bank4/5
 12242  059E  0087               	movwf	7
 12243  059F  085D               	movf	??_Flash_Memory_Initialization,w
 12244  05A0  0081               	movwf	1
 12245                           
 12246                           ;MCU_B1.c: 942: product->Data[22] = i;
 12247  05A1  085E               	movf	Flash_Memory_Initialization@i,w
 12248  05A2  00DD               	movwf	??_Flash_Memory_Initialization
 12249  05A3  086E               	movf	_product,w
 12250  05A4  3E16               	addlw	22
 12251  05A5  0086               	movwf	6
 12252  05A6  3002               	movlw	2	; select bank4/5
 12253  05A7  0087               	movwf	7
 12254  05A8  085D               	movf	??_Flash_Memory_Initialization,w
 12255  05A9  0081               	movwf	1
 12256                           
 12257                           ;MCU_B1.c: 943: product->Data[23] = i;
 12258  05AA  085E               	movf	Flash_Memory_Initialization@i,w
 12259  05AB  00DD               	movwf	??_Flash_Memory_Initialization
 12260  05AC  086E               	movf	_product,w
 12261  05AD  3E17               	addlw	23
 12262  05AE  0086               	movwf	6
 12263  05AF  3002               	movlw	2	; select bank4/5
 12264  05B0  0087               	movwf	7
 12265  05B1  085D               	movf	??_Flash_Memory_Initialization,w
 12266  05B2  0081               	movwf	1
 12267                           
 12268                           ;MCU_B1.c: 945: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12269  05B3  086E               	movf	_product,w
 12270  05B4  3E0C               	addlw	12
 12271  05B5  0086               	movwf	6
 12272  05B6  3002               	movlw	2	; select bank4/5
 12273  05B7  0087               	movwf	7
 12274  05B8  0801               	movf	1,w
 12275  05B9  3AFF               	xorlw	255
 12276  05BA  1D03               	skipz
 12277  05BB  0008               	return
 12278  05BC  086E               	movf	_product,w
 12279  05BD  3E0D               	addlw	13
 12280  05BE  0086               	movwf	6
 12281  05BF  3002               	movlw	2	; select bank4/5
 12282  05C0  0087               	movwf	7
 12283  05C1  0801               	movf	1,w
 12284  05C2  3AFF               	xorlw	255
 12285  05C3  1D03               	skipz
 12286  05C4  0008               	return
 12287  05C5  086E               	movf	_product,w
 12288  05C6  3E0E               	addlw	14
 12289  05C7  0086               	movwf	6
 12290  05C8  3002               	movlw	2	; select bank4/5
 12291  05C9  0087               	movwf	7
 12292  05CA  0801               	movf	1,w
 12293  05CB  3AFF               	xorlw	255
 12294  05CC  1D03               	skipz
 12295  05CD  0008               	return
 12296                           
 12297                           ;MCU_B1.c: 946: myMain.FirstOpen = 1;
 12298  05CE  0021               	movlb	1	; select bank1
 12299  05CF  15AE               	bsf	_myMain^(0+128),3
 12300                           
 12301                           ;MCU_B1.c: 947: myMain.First = 1;
 12302  05D0  16AE               	bsf	_myMain^(0+128),5
 12303                           
 12304                           ;MCU_B1.c: 948: }
 12305                           ;MCU_B1.c: 949: } else {
 12306  05D1  0008               	return
 12307  05D2                     l9808:	
 12308                           
 12309                           ;MCU_B1.c: 950: i = setDimmerLights_PercentValue(((char)(70*0.8)));
 12310  05D2  3038               	movlw	56
 12311  05D3  318A  22EE  3185   	fcall	_setDimmerLights_PercentValue
 12312  05D6  0020               	movlb	0	; select bank0
 12313  05D7  00DD               	movwf	??_Flash_Memory_Initialization
 12314  05D8  085D               	movf	??_Flash_Memory_Initialization,w
 12315  05D9  00DE               	movwf	Flash_Memory_Initialization@i
 12316                           
 12317                           ;MCU_B1.c: 951: setMemory_Data(0, 0xff);
 12318  05DA  30FF               	movlw	255
 12319  05DB  00DD               	movwf	??_Flash_Memory_Initialization
 12320  05DC  085D               	movf	??_Flash_Memory_Initialization,w
 12321  05DD  00F3               	movwf	setMemory_Data@data
 12322  05DE  3000               	movlw	0
 12323  05DF  319C  2492  3185   	fcall	_setMemory_Data
 12324                           
 12325                           ;MCU_B1.c: 952: setMemory_Data(1, 0xff);
 12326  05E2  30FF               	movlw	255
 12327  05E3  0020               	movlb	0	; select bank0
 12328  05E4  00DD               	movwf	??_Flash_Memory_Initialization
 12329  05E5  085D               	movf	??_Flash_Memory_Initialization,w
 12330  05E6  00F3               	movwf	setMemory_Data@data
 12331  05E7  3001               	movlw	1
 12332  05E8  319C  2492  3185   	fcall	_setMemory_Data
 12333                           
 12334                           ;MCU_B1.c: 953: setMemory_Data(2, 0xff);
 12335  05EB  30FF               	movlw	255
 12336  05EC  0020               	movlb	0	; select bank0
 12337  05ED  00DD               	movwf	??_Flash_Memory_Initialization
 12338  05EE  085D               	movf	??_Flash_Memory_Initialization,w
 12339  05EF  00F3               	movwf	setMemory_Data@data
 12340  05F0  3002               	movlw	2
 12341  05F1  319C  2492  3185   	fcall	_setMemory_Data
 12342                           
 12343                           ;MCU_B1.c: 954: setMemory_Data(3, 0xff);
 12344  05F4  30FF               	movlw	255
 12345  05F5  0020               	movlb	0	; select bank0
 12346  05F6  00DD               	movwf	??_Flash_Memory_Initialization
 12347  05F7  085D               	movf	??_Flash_Memory_Initialization,w
 12348  05F8  00F3               	movwf	setMemory_Data@data
 12349  05F9  3003               	movlw	3
 12350  05FA  319C  2492  3185   	fcall	_setMemory_Data
 12351                           
 12352                           ;MCU_B1.c: 955: setMemory_Data(4, 0xff);
 12353  05FD  30FF               	movlw	255
 12354  05FE  0020               	movlb	0	; select bank0
 12355  05FF  00DD               	movwf	??_Flash_Memory_Initialization
 12356  0600  085D               	movf	??_Flash_Memory_Initialization,w
 12357  0601  00F3               	movwf	setMemory_Data@data
 12358  0602  3004               	movlw	4
 12359  0603  319C  2492  3185   	fcall	_setMemory_Data
 12360                           
 12361                           ;MCU_B1.c: 956: setMemory_Data(5, 0xff);
 12362  0606  30FF               	movlw	255
 12363  0607  0020               	movlb	0	; select bank0
 12364  0608  00DD               	movwf	??_Flash_Memory_Initialization
 12365  0609  085D               	movf	??_Flash_Memory_Initialization,w
 12366  060A  00F3               	movwf	setMemory_Data@data
 12367  060B  3005               	movlw	5
 12368  060C  319C  2492  3185   	fcall	_setMemory_Data
 12369                           
 12370                           ;MCU_B1.c: 957: setMemory_Data(31, 0xaa);
 12371  060F  30AA               	movlw	170
 12372  0610  0020               	movlb	0	; select bank0
 12373  0611  00DD               	movwf	??_Flash_Memory_Initialization
 12374  0612  085D               	movf	??_Flash_Memory_Initialization,w
 12375  0613  00F3               	movwf	setMemory_Data@data
 12376  0614  301F               	movlw	31
 12377  0615  319C  2492  3185   	fcall	_setMemory_Data
 12378                           
 12379                           ;MCU_B1.c: 958: product->Data[21] = i;
 12380  0618  0020               	movlb	0	; select bank0
 12381  0619  085E               	movf	Flash_Memory_Initialization@i,w
 12382  061A  00DD               	movwf	??_Flash_Memory_Initialization
 12383  061B  086E               	movf	_product,w
 12384  061C  3E15               	addlw	21
 12385  061D  0086               	movwf	6
 12386  061E  3002               	movlw	2	; select bank4/5
 12387  061F  0087               	movwf	7
 12388  0620  085D               	movf	??_Flash_Memory_Initialization,w
 12389  0621  0081               	movwf	1
 12390                           
 12391                           ;MCU_B1.c: 959: product->Data[22] = i;
 12392  0622  085E               	movf	Flash_Memory_Initialization@i,w
 12393  0623  00DD               	movwf	??_Flash_Memory_Initialization
 12394  0624  086E               	movf	_product,w
 12395  0625  3E16               	addlw	22
 12396  0626  0086               	movwf	6
 12397  0627  3002               	movlw	2	; select bank4/5
 12398  0628  0087               	movwf	7
 12399  0629  085D               	movf	??_Flash_Memory_Initialization,w
 12400  062A  0081               	movwf	1
 12401                           
 12402                           ;MCU_B1.c: 960: product->Data[23] = i;
 12403  062B  085E               	movf	Flash_Memory_Initialization@i,w
 12404  062C  00DD               	movwf	??_Flash_Memory_Initialization
 12405  062D  086E               	movf	_product,w
 12406  062E  3E17               	addlw	23
 12407  062F  0086               	movwf	6
 12408  0630  3002               	movlw	2	; select bank4/5
 12409  0631  0087               	movwf	7
 12410  0632  085D               	movf	??_Flash_Memory_Initialization,w
 12411  0633  0081               	movwf	1
 12412                           
 12413                           ;MCU_B1.c: 961: GIE = 0;
 12414  0634  138B               	bcf	11,7	;volatile
 12415                           
 12416                           ;MCU_B1.c: 962: Flash_Memory_Write();
 12417  0635  3192  2294         	fcall	_Flash_Memory_Write
 12418                           
 12419                           ;MCU_B1.c: 963: GIE = 1;
 12420  0637  178B               	bsf	11,7	;volatile
 12421                           
 12422                           ;MCU_B1.c: 964: myMain.FirstOpen = 1;
 12423  0638  0021               	movlb	1	; select bank1
 12424  0639  15AE               	bsf	_myMain^(0+128),3
 12425                           
 12426                           ;MCU_B1.c: 965: myMain.First = 1;
 12427  063A  16AE               	bsf	_myMain^(0+128),5
 12428  063B  0008               	return
 12429  063C                     __end_of_Flash_Memory_Initialization:	
 12430                           
 12431                           	psect	text81
 12432  1C92                     __ptext81:	
 12433 ;; *************** function _setMemory_Data *****************
 12434 ;; Defined at:
 12435 ;;		line 1080 in file "../src/MCU_B1.c"
 12436 ;; Parameters:    Size  Location     Type
 12437 ;;  address         1    wreg     unsigned char 
 12438 ;;  data            1    3[COMMON] unsigned char 
 12439 ;; Auto vars:     Size  Location     Type
 12440 ;;  address         1    5[COMMON] unsigned char 
 12441 ;; Return value:  Size  Location     Type
 12442 ;;		None               void
 12443 ;; Registers used:
 12444 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12445 ;; Tracked objects:
 12446 ;;		On entry : 0/0
 12447 ;;		On exit  : 0/0
 12448 ;;		Unchanged: 0/0
 12449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12450 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12451 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12452 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;Total ram usage:        3 bytes
 12455 ;; Hardware stack levels used:    1
 12456 ;; Hardware stack levels required when called:    3
 12457 ;; This function calls:
 12458 ;;		Nothing
 12459 ;; This function is called by:
 12460 ;;		_Flash_Memory_Initialization
 12461 ;;		_Flash_Memory_Modify
 12462 ;; This function uses a non-reentrant model
 12463 ;;
 12464                           
 12465                           
 12466                           ;psect for function _setMemory_Data
 12467  1C92                     _setMemory_Data:	
 12468                           
 12469                           ;incstack = 0
 12470                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12471                           ;setMemory_Data@address stored from wreg
 12472  1C92  00F5               	movwf	setMemory_Data@address
 12473                           
 12474                           ;MCU_B1.c: 1081: Memory.Data[address] = data;
 12475  1C93  0873               	movf	setMemory_Data@data,w
 12476  1C94  00F4               	movwf	??_setMemory_Data
 12477  1C95  0875               	movf	setMemory_Data@address,w
 12478  1C96  3E20               	addlw	_Memory& (0+255)
 12479  1C97  0086               	movwf	6
 12480  1C98  3002               	movlw	2	; select bank4/5
 12481  1C99  0087               	movwf	7
 12482  1C9A  0874               	movf	??_setMemory_Data,w
 12483  1C9B  0081               	movwf	1
 12484  1C9C  0008               	return
 12485  1C9D                     __end_of_setMemory_Data:	
 12486                           
 12487                           	psect	text82
 12488  1294                     __ptext82:	
 12489 ;; *************** function _Flash_Memory_Write *****************
 12490 ;; Defined at:
 12491 ;;		line 1013 in file "../src/MCU_B1.c"
 12492 ;; Parameters:    Size  Location     Type
 12493 ;;		None
 12494 ;; Auto vars:     Size  Location     Type
 12495 ;;  i               1    4[COMMON] unsigned char 
 12496 ;; Return value:  Size  Location     Type
 12497 ;;		None               void
 12498 ;; Registers used:
 12499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12500 ;; Tracked objects:
 12501 ;;		On entry : 0/0
 12502 ;;		On exit  : 0/0
 12503 ;;		Unchanged: 0/0
 12504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;Total ram usage:        2 bytes
 12510 ;; Hardware stack levels used:    1
 12511 ;; Hardware stack levels required when called:    4
 12512 ;; This function calls:
 12513 ;;		_Flash_Memory_Unlock
 12514 ;; This function is called by:
 12515 ;;		_Flash_Memory_Initialization
 12516 ;;		_Flash_Memory_Modify
 12517 ;; This function uses a non-reentrant model
 12518 ;;
 12519                           
 12520                           
 12521                           ;psect for function _Flash_Memory_Write
 12522  1294                     _Flash_Memory_Write:	
 12523                           
 12524                           ;MCU_B1.c: 1014: char i = 0;
 12525                           
 12526                           ;incstack = 0
 12527                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12528  1294  01F4               	clrf	Flash_Memory_Write@i
 12529                           
 12530                           ;MCU_B1.c: 1015: CFGS = 0;
 12531  1295  0023               	movlb	3	; select bank3
 12532  1296  1315               	bcf	21,6	;volatile
 12533                           
 12534                           ;MCU_B1.c: 1016: PMADRH = 0x30;
 12535  1297  3030               	movlw	48
 12536  1298  0092               	movwf	18	;volatile
 12537                           
 12538                           ;MCU_B1.c: 1017: PMDATH = 0;
 12539  1299  0194               	clrf	20	;volatile
 12540                           
 12541                           ;MCU_B1.c: 1018: FREE = 0;
 12542  129A  1215               	bcf	21,4	;volatile
 12543                           
 12544                           ;MCU_B1.c: 1019: LWLO = 1;
 12545  129B  1695               	bsf	21,5	;volatile
 12546                           
 12547                           ;MCU_B1.c: 1020: WREN = 1;
 12548  129C  1515               	bsf	21,2	;volatile
 12549                           
 12550                           ;MCU_B1.c: 1021: for (i = 0; i < 32; i++) {
 12551  129D  01F4               	clrf	Flash_Memory_Write@i
 12552  129E  3020               	movlw	32
 12553  129F  0274               	subwf	Flash_Memory_Write@i,w
 12554  12A0  1803               	btfsc	3,0
 12555  12A1  2AB7               	goto	l1367
 12556  12A2                     l9328:	
 12557                           
 12558                           ;MCU_B1.c: 1022: PMADRL = i;
 12559  12A2  0874               	movf	Flash_Memory_Write@i,w
 12560  12A3  0023               	movlb	3	; select bank3
 12561  12A4  0091               	movwf	17	;volatile
 12562                           
 12563                           ;MCU_B1.c: 1023: PMDATL = Memory.Data[i];
 12564  12A5  0874               	movf	Flash_Memory_Write@i,w
 12565  12A6  3E20               	addlw	_Memory& (0+255)
 12566  12A7  0086               	movwf	6
 12567  12A8  3002               	movlw	2	; select bank4/5
 12568  12A9  0087               	movwf	7
 12569  12AA  0801               	movf	1,w
 12570  12AB  0093               	movwf	19	;volatile
 12571                           
 12572                           ;MCU_B1.c: 1024: Flash_Memory_Unlock();
 12573  12AC  319C  246B  3192   	fcall	_Flash_Memory_Unlock
 12574  12AF  3001               	movlw	1
 12575  12B0  00F3               	movwf	??_Flash_Memory_Write
 12576  12B1  0873               	movf	??_Flash_Memory_Write,w
 12577  12B2  07F4               	addwf	Flash_Memory_Write@i,f
 12578  12B3  3020               	movlw	32
 12579  12B4  0274               	subwf	Flash_Memory_Write@i,w
 12580  12B5  1C03               	skipc
 12581  12B6  2AA2               	goto	l9328
 12582  12B7                     l1367:	
 12583                           
 12584                           ;MCU_B1.c: 1025: }
 12585                           ;MCU_B1.c: 1026: LWLO = 0;
 12586  12B7  0023               	movlb	3	; select bank3
 12587  12B8  1295               	bcf	21,5	;volatile
 12588                           
 12589                           ;MCU_B1.c: 1027: Flash_Memory_Unlock();
 12590  12B9  319C  246B         	fcall	_Flash_Memory_Unlock
 12591                           
 12592                           ;MCU_B1.c: 1028: WREN = 0;
 12593  12BB  0023               	movlb	3	; select bank3
 12594  12BC  1115               	bcf	21,2	;volatile
 12595  12BD  0008               	return
 12596  12BE                     __end_of_Flash_Memory_Write:	
 12597                           
 12598                           	psect	text83
 12599  1C6B                     __ptext83:	
 12600 ;; *************** function _Flash_Memory_Unlock *****************
 12601 ;; Defined at:
 12602 ;;		line 992 in file "../src/MCU_B1.c"
 12603 ;; Parameters:    Size  Location     Type
 12604 ;;		None
 12605 ;; Auto vars:     Size  Location     Type
 12606 ;;		None
 12607 ;; Return value:  Size  Location     Type
 12608 ;;		None               void
 12609 ;; Registers used:
 12610 ;;		wreg
 12611 ;; Tracked objects:
 12612 ;;		On entry : 0/0
 12613 ;;		On exit  : 0/0
 12614 ;;		Unchanged: 0/0
 12615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12620 ;;Total ram usage:        0 bytes
 12621 ;; Hardware stack levels used:    1
 12622 ;; Hardware stack levels required when called:    3
 12623 ;; This function calls:
 12624 ;;		Nothing
 12625 ;; This function is called by:
 12626 ;;		_Flash_Memory_Write
 12627 ;;		_Flash_Memory_Erasing
 12628 ;; This function uses a non-reentrant model
 12629 ;;
 12630                           
 12631                           
 12632                           ;psect for function _Flash_Memory_Unlock
 12633  1C6B                     _Flash_Memory_Unlock:	
 12634                           
 12635                           ;MCU_B1.c: 993: PMCON2 = 0x55;
 12636                           
 12637                           ;incstack = 0
 12638                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12639  1C6B  3055               	movlw	85
 12640  1C6C  0023               	movlb	3	; select bank3
 12641  1C6D  0096               	movwf	22	;volatile
 12642                           
 12643                           ;MCU_B1.c: 994: PMCON2 = 0xaa;
 12644  1C6E  30AA               	movlw	170
 12645  1C6F  0096               	movwf	22	;volatile
 12646                           
 12647                           ;MCU_B1.c: 995: WR = 1;
 12648  1C70  1495               	bsf	21,1	;volatile
 12649                           
 12650                           ;MCU_B1.c: 996: __nop();
 12651  1C71  0000               	nop
 12652                           
 12653                           ;MCU_B1.c: 997: __nop();
 12654  1C72  0000               	nop
 12655  1C73  0008               	return
 12656  1C74                     __end_of_Flash_Memory_Unlock:	
 12657                           
 12658                           	psect	text84
 12659  1E60                     __ptext84:	
 12660 ;; *************** function _Flash_Memory_Read *****************
 12661 ;; Defined at:
 12662 ;;		line 1001 in file "../src/MCU_B1.c"
 12663 ;; Parameters:    Size  Location     Type
 12664 ;;  address         1    wreg     unsigned char 
 12665 ;; Auto vars:     Size  Location     Type
 12666 ;;  address         1    5[COMMON] unsigned char 
 12667 ;;  ret             1    6[COMMON] unsigned char 
 12668 ;;  i               1    4[COMMON] unsigned char 
 12669 ;; Return value:  Size  Location     Type
 12670 ;;                  1    wreg      unsigned char 
 12671 ;; Registers used:
 12672 ;;		wreg, status,2
 12673 ;; Tracked objects:
 12674 ;;		On entry : 0/0
 12675 ;;		On exit  : 0/0
 12676 ;;		Unchanged: 0/0
 12677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;Total ram usage:        4 bytes
 12683 ;; Hardware stack levels used:    1
 12684 ;; Hardware stack levels required when called:    3
 12685 ;; This function calls:
 12686 ;;		Nothing
 12687 ;; This function is called by:
 12688 ;;		_Flash_Memory_Initialization
 12689 ;;		_Flash_Memory_Modify
 12690 ;; This function uses a non-reentrant model
 12691 ;;
 12692                           
 12693                           
 12694                           ;psect for function _Flash_Memory_Read
 12695  1E60                     _Flash_Memory_Read:	
 12696                           
 12697                           ;incstack = 0
 12698                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12699                           ;Flash_Memory_Read@address stored from wreg
 12700  1E60  00F5               	movwf	Flash_Memory_Read@address
 12701                           
 12702                           ;MCU_B1.c: 1002: char i = 0, ret = 0;
 12703  1E61  01F4               	clrf	Flash_Memory_Read@i
 12704  1E62  01F6               	clrf	Flash_Memory_Read@ret
 12705                           
 12706                           ;MCU_B1.c: 1003: PMADRH = 0x30;
 12707  1E63  3030               	movlw	48
 12708  1E64  0023               	movlb	3	; select bank3
 12709  1E65  0092               	movwf	18	;volatile
 12710                           
 12711                           ;MCU_B1.c: 1004: PMADRL = address;
 12712  1E66  0875               	movf	Flash_Memory_Read@address,w
 12713  1E67  0091               	movwf	17	;volatile
 12714                           
 12715                           ;MCU_B1.c: 1005: CFGS = 0;
 12716  1E68  1315               	bcf	21,6	;volatile
 12717                           
 12718                           ;MCU_B1.c: 1006: RD = 1;
 12719  1E69  1415               	bsf	21,0	;volatile
 12720                           
 12721                           ;MCU_B1.c: 1007: i = PMDATH;
 12722  1E6A  0814               	movf	20,w	;volatile
 12723  1E6B  00F3               	movwf	??_Flash_Memory_Read
 12724  1E6C  0873               	movf	??_Flash_Memory_Read,w
 12725  1E6D  00F4               	movwf	Flash_Memory_Read@i
 12726                           
 12727                           ;MCU_B1.c: 1008: ret = PMDATL;
 12728  1E6E  0813               	movf	19,w	;volatile
 12729  1E6F  00F3               	movwf	??_Flash_Memory_Read
 12730  1E70  0873               	movf	??_Flash_Memory_Read,w
 12731  1E71  00F6               	movwf	Flash_Memory_Read@ret
 12732                           
 12733                           ;MCU_B1.c: 1009: return ret;
 12734  1E72  0876               	movf	Flash_Memory_Read@ret,w
 12735  1E73  0008               	return
 12736  1E74                     __end_of_Flash_Memory_Read:	
 12737                           
 12738                           	psect	text85
 12739  063C                     __ptext85:	
 12740 ;; *************** function _Exception_Main *****************
 12741 ;; Defined at:
 12742 ;;		line 509 in file "../src/Main_B1.c"
 12743 ;; Parameters:    Size  Location     Type
 12744 ;;		None
 12745 ;; Auto vars:     Size  Location     Type
 12746 ;;  i               2   75[BANK0 ] int 
 12747 ;;  i               2   73[BANK0 ] int 
 12748 ;;  lights          1   77[BANK0 ] unsigned char 
 12749 ;;  error           1   72[BANK0 ] unsigned char 
 12750 ;;  count           1   71[BANK0 ] unsigned char 
 12751 ;; Return value:  Size  Location     Type
 12752 ;;		None               void
 12753 ;; Registers used:
 12754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12755 ;; Tracked objects:
 12756 ;;		On entry : 0/0
 12757 ;;		On exit  : 0/0
 12758 ;;		Unchanged: 0/0
 12759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12761 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12762 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12763 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12764 ;;Total ram usage:        8 bytes
 12765 ;; Hardware stack levels used:    1
 12766 ;; Hardware stack levels required when called:    7
 12767 ;; This function calls:
 12768 ;;		_getDimmerLights_Line
 12769 ;;		_getDimmerLights_Status
 12770 ;;		_getMain_All_Error_Status
 12771 ;;		_getMain_LightsStatus
 12772 ;;		_setBuz
 12773 ;;		_setDimmerLights_SwOff
 12774 ;;		_setLED
 12775 ;; This function is called by:
 12776 ;;		_main
 12777 ;; This function uses a non-reentrant model
 12778 ;;
 12779                           
 12780                           
 12781                           ;psect for function _Exception_Main
 12782  063C                     _Exception_Main:	
 12783                           
 12784                           ;Main_B1.c: 510: char error = getMain_All_Error_Status(0);
 12785                           
 12786                           ;incstack = 0
 12787                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12788  063C  3000               	movlw	0
 12789  063D  3193  2319  3186   	fcall	_getMain_All_Error_Status
 12790  0640  0020               	movlb	0	; select bank0
 12791  0641  00E6               	movwf	??_Exception_Main
 12792  0642  0866               	movf	??_Exception_Main,w
 12793  0643  00E8               	movwf	Exception_Main@error
 12794                           
 12795                           ;Main_B1.c: 511: char lights = 0, count = 2;
 12796  0644  01ED               	clrf	Exception_Main@lights
 12797  0645  3002               	movlw	2
 12798  0646  00E6               	movwf	??_Exception_Main
 12799  0647  0866               	movf	??_Exception_Main,w
 12800  0648  00E7               	movwf	Exception_Main@count
 12801                           
 12802                           ;Main_B1.c: 512: if (myMain.Error_Run == 1) {
 12803  0649  0021               	movlb	1	; select bank1
 12804  064A  1DB9               	btfss	(_myMain^(0+128)+11),3
 12805  064B  2E5B               	goto	l10124
 12806                           
 12807                           ;Main_B1.c: 513: if (error == 0) {
 12808  064C  0020               	movlb	0	; select bank0
 12809  064D  08E8               	movf	Exception_Main@error,f
 12810  064E  1D03               	skipz
 12811  064F  0008               	return
 12812                           
 12813                           ;Main_B1.c: 514: myMain.Error_Run = 0;
 12814  0650  0021               	movlb	1	; select bank1
 12815  0651  11B9               	bcf	(_myMain^(0+128)+11),3
 12816                           
 12817                           ;Main_B1.c: 519: setLED(99, 10);
 12818  0652  300A               	movlw	10
 12819  0653  0020               	movlb	0	; select bank0
 12820  0654  00E6               	movwf	??_Exception_Main
 12821  0655  0866               	movf	??_Exception_Main,w
 12822  0656  00F5               	movwf	setLED@command
 12823  0657  3063               	movlw	99
 12824  0658  3189  2102         	fcall	_setLED
 12825                           
 12826                           ;Main_B1.c: 521: }
 12827                           ;Main_B1.c: 522: } else {
 12828  065A  0008               	return
 12829  065B                     l10124:	
 12830                           
 12831                           ;Main_B1.c: 523: if (error != 0) {
 12832  065B  0020               	movlb	0	; select bank0
 12833  065C  0868               	movf	Exception_Main@error,w
 12834  065D  1903               	btfsc	3,2
 12835  065E  0008               	return
 12836                           
 12837                           ;Main_B1.c: 524: myMain.Error_Run = 1;
 12838  065F  0021               	movlb	1	; select bank1
 12839  0660  15B9               	bsf	(_myMain^(0+128)+11),3
 12840                           
 12841                           ;Main_B1.c: 527: setLED(99, 11);
 12842  0661  300B               	movlw	11
 12843  0662  0020               	movlb	0	; select bank0
 12844  0663  00E6               	movwf	??_Exception_Main
 12845  0664  0866               	movf	??_Exception_Main,w
 12846  0665  00F5               	movwf	setLED@command
 12847  0666  3063               	movlw	99
 12848  0667  3189  2102  3186   	fcall	_setLED
 12849                           
 12850                           ;Main_B1.c: 529: switch (error) {
 12851  066A  2F04               	goto	l10172
 12852  066B                     l10130:	
 12853                           ;Main_B1.c: 530: case 2:
 12854                           
 12855                           
 12856                           ;Main_B1.c: 531: if (getMain_LightsStatus() == 1) {
 12857  066B  319D  2535  3186   	fcall	_getMain_LightsStatus
 12858  066E  3A01               	xorlw	1
 12859  066F  1D03               	skipz
 12860  0670  2E7A               	goto	l10134
 12861                           
 12862                           ;Main_B1.c: 532: setBuz(10, 300);
 12863  0671  302C               	movlw	44
 12864  0672  0020               	movlb	0	; select bank0
 12865  0673  00A4               	movwf	setBuz@time
 12866  0674  3001               	movlw	1
 12867  0675  00A5               	movwf	setBuz@time+1
 12868  0676  300A               	movlw	10
 12869  0677  3197  274E  3186   	fcall	_setBuz
 12870  067A                     l10134:	
 12871                           
 12872                           ;Main_B1.c: 533: }
 12873                           ;Main_B1.c: 535: for (int i = 0; i < count; i++) {
 12874  067A  0020               	movlb	0	; select bank0
 12875  067B  01E9               	clrf	Exception_Main@i
 12876  067C  01EA               	clrf	Exception_Main@i+1
 12877  067D                     l10144:	
 12878  067D  086A               	movf	Exception_Main@i+1,w
 12879  067E  3A80               	xorlw	128
 12880  067F  00E6               	movwf	??_Exception_Main
 12881  0680  3080               	movlw	128
 12882  0681  0266               	subwf	??_Exception_Main,w
 12883  0682  1D03               	skipz
 12884  0683  2E86               	goto	u11835
 12885  0684  0867               	movf	Exception_Main@count,w
 12886  0685  0269               	subwf	Exception_Main@i,w
 12887  0686                     u11835:	
 12888  0686  1803               	btfsc	3,0
 12889  0687  2EA7               	goto	u11830
 12890                           
 12891                           ;Main_B1.c: 537: if (getDimmerLights_Status(i + 1) == 1) {
 12892  0688  0020               	movlb	0	; select bank0
 12893  0689  0869               	movf	Exception_Main@i,w
 12894  068A  3E01               	addlw	1
 12895  068B  319D  250A  3186   	fcall	_getDimmerLights_Status
 12896  068E  3A01               	xorlw	1
 12897  068F  1D03               	skipz
 12898  0690  2EA1               	goto	l10142
 12899                           
 12900                           ;Main_B1.c: 538: DimmerLights->SwFlag = 1;
 12901  0691  0879               	movf	_DimmerLights,w
 12902  0692  0086               	movwf	6
 12903  0693  3001               	movlw	1	; select bank2/3
 12904  0694  0087               	movwf	7
 12905  0695  1481               	bsf	1,1
 12906                           
 12907                           ;Main_B1.c: 539: DimmerLights->Status = 0;
 12908  0696  0879               	movf	_DimmerLights,w
 12909  0697  0086               	movwf	6
 12910  0698  3001               	movlw	1	; select bank2/3
 12911  0699  0087               	movwf	7
 12912  069A  1001               	bcf	1,0
 12913                           
 12914                           ;Main_B1.c: 540: setDimmerLights_SwOff(i + 1);
 12915  069B  0020               	movlb	0	; select bank0
 12916  069C  0869               	movf	Exception_Main@i,w
 12917  069D  3E01               	addlw	1
 12918  069E  3188  2007  3186   	fcall	_setDimmerLights_SwOff
 12919  06A1                     l10142:	
 12920  06A1  3001               	movlw	1
 12921  06A2  0020               	movlb	0	; select bank0
 12922  06A3  07E9               	addwf	Exception_Main@i,f
 12923  06A4  3000               	movlw	0
 12924  06A5  3DEA               	addwfc	Exception_Main@i+1,f
 12925  06A6  2E7D               	goto	l10144
 12926  06A7                     u11830:	
 12927  06A7  0020               	movlb	0	; select bank0
 12928  06A8  0008               	return
 12929  06A9                     l10146:	
 12930                           ;Main_B1.c: 544: case 3:
 12931                           
 12932                           ;Main_B1.c: 541: }
 12933                           ;Main_B1.c: 542: }
 12934                           ;Main_B1.c: 543: break;
 12935                           
 12936                           
 12937                           ;Main_B1.c: 546: setBuz(5, 300);
 12938  06A9  302C               	movlw	44
 12939  06AA  0020               	movlb	0	; select bank0
 12940  06AB  00A4               	movwf	setBuz@time
 12941  06AC  3001               	movlw	1
 12942  06AD  00A5               	movwf	setBuz@time+1
 12943  06AE  3005               	movlw	5
 12944  06AF  3197  274E  3186   	fcall	_setBuz
 12945                           
 12946                           ;Main_B1.c: 547: lights = getDimmerLights_Line();
 12947  06B2  319D  2544  3186   	fcall	_getDimmerLights_Line
 12948  06B5  0020               	movlb	0	; select bank0
 12949  06B6  00E6               	movwf	??_Exception_Main
 12950  06B7  0866               	movf	??_Exception_Main,w
 12951  06B8  00ED               	movwf	Exception_Main@lights
 12952                           
 12953                           ;Main_B1.c: 548: if (lights == 0) {
 12954  06B9  08ED               	movf	Exception_Main@lights,f
 12955  06BA  1D03               	skipz
 12956  06BB  2EEA               	goto	l10164
 12957                           
 12958                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 12959  06BC  01EB               	clrf	Exception_Main@i_3502
 12960  06BD  01EC               	clrf	Exception_Main@i_3502+1
 12961  06BE                     l10162:	
 12962  06BE  086C               	movf	Exception_Main@i_3502+1,w
 12963  06BF  3A80               	xorlw	128
 12964  06C0  00E6               	movwf	??_Exception_Main
 12965  06C1  3080               	movlw	128
 12966  06C2  0266               	subwf	??_Exception_Main,w
 12967  06C3  1D03               	skipz
 12968  06C4  2EC7               	goto	u11865
 12969  06C5  0867               	movf	Exception_Main@count,w
 12970  06C6  026B               	subwf	Exception_Main@i_3502,w
 12971  06C7                     u11865:	
 12972  06C7  1803               	btfsc	3,0
 12973  06C8  2EE8               	goto	u11860
 12974                           
 12975                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 12976  06C9  0020               	movlb	0	; select bank0
 12977  06CA  086B               	movf	Exception_Main@i_3502,w
 12978  06CB  3E01               	addlw	1
 12979  06CC  319D  250A  3186   	fcall	_getDimmerLights_Status
 12980  06CF  3A01               	xorlw	1
 12981  06D0  1D03               	skipz
 12982  06D1  2EE2               	goto	l10160
 12983                           
 12984                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 12985  06D2  0879               	movf	_DimmerLights,w
 12986  06D3  0086               	movwf	6
 12987  06D4  3001               	movlw	1	; select bank2/3
 12988  06D5  0087               	movwf	7
 12989  06D6  1481               	bsf	1,1
 12990                           
 12991                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 12992  06D7  0879               	movf	_DimmerLights,w
 12993  06D8  0086               	movwf	6
 12994  06D9  3001               	movlw	1	; select bank2/3
 12995  06DA  0087               	movwf	7
 12996  06DB  1001               	bcf	1,0
 12997                           
 12998                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 12999  06DC  0020               	movlb	0	; select bank0
 13000  06DD  086B               	movf	Exception_Main@i_3502,w
 13001  06DE  3E01               	addlw	1
 13002  06DF  3188  2007  3186   	fcall	_setDimmerLights_SwOff
 13003  06E2                     l10160:	
 13004  06E2  3001               	movlw	1
 13005  06E3  0020               	movlb	0	; select bank0
 13006  06E4  07EB               	addwf	Exception_Main@i_3502,f
 13007  06E5  3000               	movlw	0
 13008  06E6  3DEC               	addwfc	Exception_Main@i_3502+1,f
 13009  06E7  2EBE               	goto	l10162
 13010  06E8                     u11860:	
 13011  06E8  0020               	movlb	0	; select bank0
 13012  06E9  0008               	return
 13013  06EA                     l10164:	
 13014                           ;Main_B1.c: 556: }
 13015                           ;Main_B1.c: 557: }
 13016                           ;Main_B1.c: 558: } else {
 13017                           
 13018                           
 13019                           ;Main_B1.c: 560: if (getDimmerLights_Status(lights) == 1) {
 13020  06EA  0020               	movlb	0	; select bank0
 13021  06EB  086D               	movf	Exception_Main@lights,w
 13022  06EC  319D  250A  3186   	fcall	_getDimmerLights_Status
 13023  06EF  3A01               	xorlw	1
 13024  06F0  1903               	btfsc	3,2
 13025  06F1  2EF4               	goto	l10166
 13026  06F2  0020               	movlb	0	; select bank0
 13027  06F3  0008               	return
 13028  06F4                     l10166:	
 13029                           
 13030                           ;Main_B1.c: 562: DimmerLights->SwFlag = 1;
 13031  06F4  0879               	movf	_DimmerLights,w
 13032  06F5  0086               	movwf	6
 13033  06F6  3001               	movlw	1	; select bank2/3
 13034  06F7  0087               	movwf	7
 13035  06F8  1481               	bsf	1,1
 13036                           
 13037                           ;Main_B1.c: 563: DimmerLights->Status = 0;
 13038  06F9  0879               	movf	_DimmerLights,w
 13039  06FA  0086               	movwf	6
 13040  06FB  3001               	movlw	1	; select bank2/3
 13041  06FC  0087               	movwf	7
 13042  06FD  1001               	bcf	1,0
 13043                           
 13044                           ;Main_B1.c: 564: setDimmerLights_SwOff(lights);
 13045  06FE  0020               	movlb	0	; select bank0
 13046  06FF  086D               	movf	Exception_Main@lights,w
 13047  0700  3188  2007         	fcall	_setDimmerLights_SwOff
 13048  0702  0020               	movlb	0	; select bank0
 13049  0703  0008               	return
 13050  0704                     l10172:	
 13051                           ;Main_B1.c: 568: }
 13052                           
 13053                           ;Main_B1.c: 565: }
 13054                           ;Main_B1.c: 566: }
 13055                           ;Main_B1.c: 567: break;
 13056                           
 13057  0704  0020               	movlb	0	; select bank0
 13058  0705  0868               	movf	Exception_Main@error,w
 13059                           
 13060                           ; Switch size 1, requested type "space"
 13061                           ; Number of cases is 2, Range of values is 2 to 3
 13062                           ; switch strategies available:
 13063                           ; Name         Instructions Cycles
 13064                           ; simple_byte            7     4 (average)
 13065                           ; direct_byte           13     9 (fixed)
 13066                           ; jumptable            263     9 (fixed)
 13067                           ;	Chosen strategy is simple_byte
 13068  0706  3A02               	xorlw	2	; case 2
 13069  0707  1903               	skipnz
 13070  0708  2E6B               	goto	l10130
 13071  0709  3A01               	xorlw	1	; case 3
 13072  070A  1903               	skipnz
 13073  070B  2EA9               	goto	l10146
 13074  070C  2F0E               	goto	l1620
 13075  070D  0008               	return
 13076  070E                     l1620:	
 13077  070E  0008               	return
 13078  070F                     __end_of_Exception_Main:	
 13079                           
 13080                           	psect	text86
 13081  1D44                     __ptext86:	
 13082 ;; *************** function _getDimmerLights_Line *****************
 13083 ;; Defined at:
 13084 ;;		line 959 in file "../src/Dimmer_B1.c"
 13085 ;; Parameters:    Size  Location     Type
 13086 ;;		None
 13087 ;; Auto vars:     Size  Location     Type
 13088 ;;  line            1    4[COMMON] unsigned char 
 13089 ;; Return value:  Size  Location     Type
 13090 ;;                  1    wreg      unsigned char 
 13091 ;; Registers used:
 13092 ;;		wreg, status,2
 13093 ;; Tracked objects:
 13094 ;;		On entry : 0/0
 13095 ;;		On exit  : 0/0
 13096 ;;		Unchanged: 0/0
 13097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13099 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13100 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13101 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13102 ;;Total ram usage:        2 bytes
 13103 ;; Hardware stack levels used:    1
 13104 ;; Hardware stack levels required when called:    3
 13105 ;; This function calls:
 13106 ;;		Nothing
 13107 ;; This function is called by:
 13108 ;;		_Exception_Main
 13109 ;; This function uses a non-reentrant model
 13110 ;;
 13111                           
 13112                           
 13113                           ;psect for function _getDimmerLights_Line
 13114  1D44                     _getDimmerLights_Line:	
 13115                           
 13116                           ;Dimmer_B1.c: 960: char line = 0;
 13117                           
 13118                           ;incstack = 0
 13119                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13120  1D44  01F4               	clrf	getDimmerLights_Line@line
 13121                           
 13122                           ;Dimmer_B1.c: 962: if (DimmerLights1.Line == 1) {
 13123  1D45  0023               	movlb	3	; select bank3
 13124  1D46  1D40               	btfss	(_DimmerLights1^(0+384)+2),2
 13125  1D47  2D4B               	goto	l926
 13126                           
 13127                           ;Dimmer_B1.c: 963: line = 1;
 13128  1D48  01F4               	clrf	getDimmerLights_Line@line
 13129  1D49  0AF4               	incf	getDimmerLights_Line@line,f
 13130                           
 13131                           ;Dimmer_B1.c: 964: }
 13132  1D4A  2D51               	goto	l927
 13133  1D4B                     l926:	
 13134                           
 13135                           ;Dimmer_B1.c: 967: else if (DimmerLights2.Line == 1) {
 13136  1D4B  1D49               	btfss	(_DimmerLights2^(0+384)+2),2
 13137  1D4C  2D51               	goto	l927
 13138                           
 13139                           ;Dimmer_B1.c: 968: line = 2;
 13140  1D4D  3002               	movlw	2
 13141  1D4E  00F3               	movwf	??_getDimmerLights_Line
 13142  1D4F  0873               	movf	??_getDimmerLights_Line,w
 13143  1D50  00F4               	movwf	getDimmerLights_Line@line
 13144  1D51                     l927:	
 13145                           
 13146                           ;Dimmer_B1.c: 969: }
 13147                           ;Dimmer_B1.c: 976: return line;
 13148  1D51  0874               	movf	getDimmerLights_Line@line,w
 13149  1D52  0008               	return
 13150  1D53                     __end_of_getDimmerLights_Line:	
 13151                           
 13152                           	psect	text87
 13153  107B                     __ptext87:	
 13154 ;; *************** function _DimmerLights_Main *****************
 13155 ;; Defined at:
 13156 ;;		line 750 in file "../src/Dimmer_B1.c"
 13157 ;; Parameters:    Size  Location     Type
 13158 ;;		None
 13159 ;; Auto vars:     Size  Location     Type
 13160 ;;		None
 13161 ;; Return value:  Size  Location     Type
 13162 ;;		None               void
 13163 ;; Registers used:
 13164 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13165 ;; Tracked objects:
 13166 ;;		On entry : 0/0
 13167 ;;		On exit  : 0/0
 13168 ;;		Unchanged: 0/0
 13169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13174 ;;Total ram usage:        0 bytes
 13175 ;; Hardware stack levels used:    1
 13176 ;; Hardware stack levels required when called:    8
 13177 ;; This function calls:
 13178 ;;		_getLoad_OK
 13179 ;;		_getMain_All_Error_Status
 13180 ;;		_getMain_LightsStatus
 13181 ;;		_setDimmerLights_Main
 13182 ;; This function is called by:
 13183 ;;		_main
 13184 ;; This function uses a non-reentrant model
 13185 ;;
 13186                           
 13187                           
 13188                           ;psect for function _DimmerLights_Main
 13189  107B                     _DimmerLights_Main:	
 13190                           
 13191                           ;Dimmer_B1.c: 753: if (Dimmer.LoadGO == 1) {
 13192                           
 13193                           ;incstack = 0
 13194                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13195  107B  0021               	movlb	1	; select bank1
 13196  107C  1CC8               	btfss	_Dimmer^(0+128),1	;volatile
 13197  107D  2893               	goto	l9784
 13198                           
 13199                           ;Dimmer_B1.c: 754: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 13200  107E  319C  2436  3190   	fcall	_getLoad_OK
 13201  1081  3A01               	xorlw	1
 13202  1082  1903               	skipnz
 13203  1083  2891               	goto	l873
 13204  1084  3000               	movlw	0
 13205  1085  3193  2319  3190   	fcall	_getMain_All_Error_Status
 13206  1088  3800               	iorlw	0
 13207  1089  1D03               	skipz
 13208  108A  2891               	goto	l873
 13209  108B  319D  2535  3190   	fcall	_getMain_LightsStatus
 13210  108E  3800               	iorlw	0
 13211  108F  1D03               	skipz
 13212  1090  2893               	goto	l9784
 13213  1091                     l873:	
 13214                           
 13215                           ;Dimmer_B1.c: 755: Dimmer.LoadGO = 0;
 13216  1091  0021               	movlb	1	; select bank1
 13217  1092  10C8               	bcf	_Dimmer^(0+128),1	;volatile
 13218  1093                     l9784:	
 13219                           
 13220                           ;Dimmer_B1.c: 756: }
 13221                           ;Dimmer_B1.c: 757: }
 13222                           ;Dimmer_B1.c: 761: setDimmerLights_Main(1);
 13223  1093  3001               	movlw	1
 13224  1094  318A  228A  3190   	fcall	_setDimmerLights_Main
 13225                           
 13226                           ;Dimmer_B1.c: 765: setDimmerLights_Main(2);
 13227  1097  3002               	movlw	2
 13228  1098  318A  228A         	fcall	_setDimmerLights_Main
 13229  109A  0008               	return
 13230  109B                     __end_of_DimmerLights_Main:	
 13231                           
 13232                           	psect	text88
 13233  0A8A                     __ptext88:	
 13234 ;; *************** function _setDimmerLights_Main *****************
 13235 ;; Defined at:
 13236 ;;		line 775 in file "../src/Dimmer_B1.c"
 13237 ;; Parameters:    Size  Location     Type
 13238 ;;  lights          1    wreg     unsigned char 
 13239 ;; Auto vars:     Size  Location     Type
 13240 ;;  lights          1   73[BANK0 ] unsigned char 
 13241 ;; Return value:  Size  Location     Type
 13242 ;;		None               void
 13243 ;; Registers used:
 13244 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13245 ;; Tracked objects:
 13246 ;;		On entry : 0/0
 13247 ;;		On exit  : 0/0
 13248 ;;		Unchanged: 0/0
 13249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13253 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13254 ;;Total ram usage:        1 bytes
 13255 ;; Hardware stack levels used:    1
 13256 ;; Hardware stack levels required when called:    7
 13257 ;; This function calls:
 13258 ;;		_DimmerLights_SelectPointer
 13259 ;;		_getDimmerLights_Allow_Condition
 13260 ;;		_getMain_LightsStatus
 13261 ;;		_setDimmerLights_Dimming
 13262 ;;		_setDimmerLights_OnOff
 13263 ;; This function is called by:
 13264 ;;		_DimmerLights_Main
 13265 ;; This function uses a non-reentrant model
 13266 ;;
 13267                           
 13268                           
 13269                           ;psect for function _setDimmerLights_Main
 13270  0A8A                     _setDimmerLights_Main:	
 13271                           
 13272                           ;incstack = 0
 13273                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13274                           ;setDimmerLights_Main@lights stored from wreg
 13275  0A8A  0020               	movlb	0	; select bank0
 13276  0A8B  00E9               	movwf	setDimmerLights_Main@lights
 13277                           
 13278                           ;Dimmer_B1.c: 777: DimmerLights_SelectPointer(lights);
 13279  0A8C  0869               	movf	setDimmerLights_Main@lights,w
 13280  0A8D  319E  26DD  318A   	fcall	_DimmerLights_SelectPointer
 13281                           
 13282                           ;Dimmer_B1.c: 778: if (DimmerLights->Trigger == 1) {
 13283  0A90  0879               	movf	_DimmerLights,w
 13284  0A91  0086               	movwf	6
 13285  0A92  3001               	movlw	1	; select bank2/3
 13286  0A93  0087               	movwf	7
 13287  0A94  1D01               	btfss	1,2
 13288  0A95  2AB6               	goto	l9476
 13289                           
 13290                           ;Dimmer_B1.c: 779: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13291  0A96  0020               	movlb	0	; select bank0
 13292  0A97  0869               	movf	setDimmerLights_Main@lights,w
 13293  0A98  3194  2428  318A   	fcall	_getDimmerLights_Allow_Condition
 13294  0A9B  3800               	iorlw	0
 13295  0A9C  1D03               	skipz
 13296  0A9D  0008               	return
 13297                           
 13298                           ;Dimmer_B1.c: 780: DimmerLights->Trigger = 0;
 13299  0A9E  0879               	movf	_DimmerLights,w
 13300  0A9F  0086               	movwf	6
 13301  0AA0  3001               	movlw	1	; select bank2/3
 13302  0AA1  0087               	movwf	7
 13303  0AA2  1101               	bcf	1,2
 13304                           
 13305                           ;Dimmer_B1.c: 781: if (DimmerLights->Switch == 1) {
 13306  0AA3  0879               	movf	_DimmerLights,w
 13307  0AA4  0086               	movwf	6
 13308  0AA5  3001               	movlw	1	; select bank2/3
 13309  0AA6  0087               	movwf	7
 13310  0AA7  1D81               	btfss	1,3
 13311  0AA8  2AB0               	goto	l9474
 13312                           
 13313                           ;Dimmer_B1.c: 782: setDimmerLights_OnOff(lights, 1);
 13314  0AA9  0020               	movlb	0	; select bank0
 13315  0AAA  01E6               	clrf	setDimmerLights_OnOff@command
 13316  0AAB  0AE6               	incf	setDimmerLights_OnOff@command,f
 13317  0AAC  0869               	movf	setDimmerLights_Main@lights,w
 13318  0AAD  3189  21C4         	fcall	_setDimmerLights_OnOff
 13319                           
 13320                           ;Dimmer_B1.c: 783: } else {
 13321  0AAF  0008               	return
 13322  0AB0                     l9474:	
 13323                           
 13324                           ;Dimmer_B1.c: 784: setDimmerLights_OnOff(lights, 0);
 13325  0AB0  0020               	movlb	0	; select bank0
 13326  0AB1  01E6               	clrf	setDimmerLights_OnOff@command
 13327  0AB2  0869               	movf	setDimmerLights_Main@lights,w
 13328  0AB3  3189  21C4         	fcall	_setDimmerLights_OnOff
 13329                           
 13330                           ;Dimmer_B1.c: 785: }
 13331                           ;Dimmer_B1.c: 786: }
 13332                           ;Dimmer_B1.c: 787: } else {
 13333  0AB5  0008               	return
 13334  0AB6                     l9476:	
 13335                           
 13336                           ;Dimmer_B1.c: 788: if (getMain_LightsStatus() == 1) {
 13337  0AB6  319D  2535  318A   	fcall	_getMain_LightsStatus
 13338  0AB9  3A01               	xorlw	1
 13339  0ABA  1D03               	skipz
 13340  0ABB  2AE2               	goto	l9488
 13341                           
 13342                           ;Dimmer_B1.c: 789: if (DimmerLights->DimmingTrigger == 1) {
 13343  0ABC  0879               	movf	_DimmerLights,w
 13344  0ABD  0086               	movwf	6
 13345  0ABE  3001               	movlw	1	; select bank2/3
 13346  0ABF  0087               	movwf	7
 13347  0AC0  1E81               	btfss	1,5
 13348  0AC1  0008               	return
 13349                           
 13350                           ;Dimmer_B1.c: 790: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13351  0AC2  0020               	movlb	0	; select bank0
 13352  0AC3  0869               	movf	setDimmerLights_Main@lights,w
 13353  0AC4  3194  2428  318A   	fcall	_getDimmerLights_Allow_Condition
 13354  0AC7  3800               	iorlw	0
 13355  0AC8  1D03               	skipz
 13356  0AC9  0008               	return
 13357                           
 13358                           ;Dimmer_B1.c: 791: DimmerLights->DimmingTrigger = 0;
 13359  0ACA  0879               	movf	_DimmerLights,w
 13360  0ACB  0086               	movwf	6
 13361  0ACC  3001               	movlw	1	; select bank2/3
 13362  0ACD  0087               	movwf	7
 13363  0ACE  1281               	bcf	1,5
 13364                           
 13365                           ;Dimmer_B1.c: 792: if (DimmerLights->DimmingSwitch == 1) {
 13366  0ACF  0879               	movf	_DimmerLights,w
 13367  0AD0  0086               	movwf	6
 13368  0AD1  3001               	movlw	1	; select bank2/3
 13369  0AD2  0087               	movwf	7
 13370  0AD3  1F01               	btfss	1,6
 13371  0AD4  2ADC               	goto	l9486
 13372                           
 13373                           ;Dimmer_B1.c: 793: setDimmerLights_Dimming(lights, 1);
 13374  0AD5  0020               	movlb	0	; select bank0
 13375  0AD6  01E6               	clrf	setDimmerLights_Dimming@status
 13376  0AD7  0AE6               	incf	setDimmerLights_Dimming@status,f
 13377  0AD8  0869               	movf	setDimmerLights_Main@lights,w
 13378  0AD9  3196  2651         	fcall	_setDimmerLights_Dimming
 13379                           
 13380                           ;Dimmer_B1.c: 794: } else {
 13381  0ADB  0008               	return
 13382  0ADC                     l9486:	
 13383                           
 13384                           ;Dimmer_B1.c: 795: setDimmerLights_Dimming(lights, 0);
 13385  0ADC  0020               	movlb	0	; select bank0
 13386  0ADD  01E6               	clrf	setDimmerLights_Dimming@status
 13387  0ADE  0869               	movf	setDimmerLights_Main@lights,w
 13388  0ADF  3196  2651         	fcall	_setDimmerLights_Dimming
 13389                           
 13390                           ;Dimmer_B1.c: 796: }
 13391                           ;Dimmer_B1.c: 797: }
 13392                           ;Dimmer_B1.c: 798: }
 13393                           ;Dimmer_B1.c: 799: } else {
 13394  0AE1  0008               	return
 13395  0AE2                     l9488:	
 13396                           
 13397                           ;Dimmer_B1.c: 800: if (DimmerLights->DimmingTrigger == 1) {
 13398  0AE2  0879               	movf	_DimmerLights,w
 13399  0AE3  0086               	movwf	6
 13400  0AE4  3001               	movlw	1	; select bank2/3
 13401  0AE5  0087               	movwf	7
 13402  0AE6  1E81               	btfss	1,5
 13403  0AE7  0008               	return
 13404                           
 13405                           ;Dimmer_B1.c: 801: DimmerLights->DimmingTrigger = 0;
 13406  0AE8  0879               	movf	_DimmerLights,w
 13407  0AE9  0086               	movwf	6
 13408  0AEA  3001               	movlw	1	; select bank2/3
 13409  0AEB  0087               	movwf	7
 13410  0AEC  1281               	bcf	1,5
 13411  0AED  0008               	return
 13412  0AEE                     __end_of_setDimmerLights_Main:	
 13413                           
 13414                           	psect	text89
 13415  09C4                     __ptext89:	
 13416 ;; *************** function _setDimmerLights_OnOff *****************
 13417 ;; Defined at:
 13418 ;;		line 809 in file "../src/Dimmer_B1.c"
 13419 ;; Parameters:    Size  Location     Type
 13420 ;;  lights          1    wreg     unsigned char 
 13421 ;;  command         1   70[BANK0 ] unsigned char 
 13422 ;; Auto vars:     Size  Location     Type
 13423 ;;  lights          1   72[BANK0 ] unsigned char 
 13424 ;; Return value:  Size  Location     Type
 13425 ;;		None               void
 13426 ;; Registers used:
 13427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13428 ;; Tracked objects:
 13429 ;;		On entry : 0/0
 13430 ;;		On exit  : 0/0
 13431 ;;		Unchanged: 0/0
 13432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13433 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13435 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13437 ;;Total ram usage:        3 bytes
 13438 ;; Hardware stack levels used:    1
 13439 ;; Hardware stack levels required when called:    6
 13440 ;; This function calls:
 13441 ;;		_setDimmerIntr_ControlStatus
 13442 ;;		_setDimmerIntr_DimmingValue
 13443 ;;		_setDimmerLights_Line
 13444 ;;		_setDimmerLights_PercentValue
 13445 ;;		_setLED
 13446 ;;		_setProductData
 13447 ;;		_setRF_DimmerLights
 13448 ;;		_setTxData
 13449 ;; This function is called by:
 13450 ;;		_setDimmerLights_Main
 13451 ;; This function uses a non-reentrant model
 13452 ;;
 13453                           
 13454                           
 13455                           ;psect for function _setDimmerLights_OnOff
 13456  09C4                     _setDimmerLights_OnOff:	
 13457                           
 13458                           ;incstack = 0
 13459                           ; Regs used in _setDimmerLights_OnOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13460                           ;setDimmerLights_OnOff@lights stored from wreg
 13461  09C4  0020               	movlb	0	; select bank0
 13462  09C5  00E8               	movwf	setDimmerLights_OnOff@lights
 13463                           
 13464                           ;Dimmer_B1.c: 811: if (command == 1) {
 13465  09C6  0866               	movf	setDimmerLights_OnOff@command,w
 13466  09C7  3A01               	xorlw	1
 13467  09C8  1D03               	skipz
 13468  09C9  29F4               	goto	l9240
 13469                           
 13470                           ;Dimmer_B1.c: 812: setDimmerIntr_ControlStatus(lights, 1);
 13471  09CA  01F3               	clrf	setDimmerIntr_ControlStatus@command
 13472  09CB  0AF3               	incf	setDimmerIntr_ControlStatus@command,f
 13473  09CC  0868               	movf	setDimmerLights_OnOff@lights,w
 13474  09CD  3192  2218  3189   	fcall	_setDimmerIntr_ControlStatus
 13475                           
 13476                           ;Dimmer_B1.c: 813: setLED(lights, 0);
 13477  09D0  01F5               	clrf	setLED@command
 13478  09D1  0020               	movlb	0	; select bank0
 13479  09D2  0868               	movf	setDimmerLights_OnOff@lights,w
 13480  09D3  3189  2102  3189   	fcall	_setLED
 13481                           
 13482                           ;Dimmer_B1.c: 817: Dimmer.Load_Status = 1;
 13483  09D6  0021               	movlb	1	; select bank1
 13484  09D7  1548               	bsf	_Dimmer^(0+128),2	;volatile
 13485                           
 13486                           ;Dimmer_B1.c: 818: setDimmerLights_Line(lights);
 13487  09D8  0020               	movlb	0	; select bank0
 13488  09D9  0868               	movf	setDimmerLights_OnOff@lights,w
 13489  09DA  319E  2615  3189   	fcall	_setDimmerLights_Line
 13490                           
 13491                           ;Dimmer_B1.c: 822: setDimmerIntr_DimmingValue(lights, ((char)(70*0.8)));
 13492  09DD  3038               	movlw	56
 13493  09DE  0020               	movlb	0	; select bank0
 13494  09DF  00E7               	movwf	??_setDimmerLights_OnOff
 13495  09E0  0867               	movf	??_setDimmerLights_OnOff,w
 13496  09E1  00F3               	movwf	setDimmerIntr_DimmingValue@value
 13497  09E2  0868               	movf	setDimmerLights_OnOff@lights,w
 13498  09E3  319E  2689  3189   	fcall	_setDimmerIntr_DimmingValue
 13499                           
 13500                           ;Dimmer_B1.c: 823: setProductData((20 + lights), setDimmerLights_PercentValue(((char)(70
      +                          *0.8))));
 13501  09E6  3038               	movlw	56
 13502  09E7  318A  22EE  3189   	fcall	_setDimmerLights_PercentValue
 13503  09EA  0020               	movlb	0	; select bank0
 13504  09EB  00E7               	movwf	??_setDimmerLights_OnOff
 13505  09EC  0867               	movf	??_setDimmerLights_OnOff,w
 13506  09ED  00DD               	movwf	setProductData@value
 13507  09EE  0868               	movf	setDimmerLights_OnOff@lights,w
 13508  09EF  3E14               	addlw	20
 13509  09F0  319D  2518  3189   	fcall	_setProductData
 13510                           
 13511                           ;Dimmer_B1.c: 825: } else if (command == 0) {
 13512  09F3  2A1B               	goto	l9256
 13513  09F4                     l9240:	
 13514  09F4  0020               	movlb	0	; select bank0
 13515  09F5  08E6               	movf	setDimmerLights_OnOff@command,f
 13516  09F6  1D03               	skipz
 13517  09F7  2A1B               	goto	l9256
 13518                           
 13519                           ;Dimmer_B1.c: 826: setDimmerIntr_ControlStatus(lights, 0);
 13520  09F8  01F3               	clrf	setDimmerIntr_ControlStatus@command
 13521  09F9  0868               	movf	setDimmerLights_OnOff@lights,w
 13522  09FA  3192  2218  3189   	fcall	_setDimmerIntr_ControlStatus
 13523                           
 13524                           ;Dimmer_B1.c: 827: setLED(lights, 1);
 13525  09FD  01F5               	clrf	setLED@command
 13526  09FE  0AF5               	incf	setLED@command,f
 13527  09FF  0020               	movlb	0	; select bank0
 13528  0A00  0868               	movf	setDimmerLights_OnOff@lights,w
 13529  0A01  3189  2102  3189   	fcall	_setLED
 13530                           
 13531                           ;Dimmer_B1.c: 832: if (lights == 1) {
 13532  0A04  0020               	movlb	0	; select bank0
 13533  0A05  0868               	movf	setDimmerLights_OnOff@lights,w
 13534  0A06  3A01               	xorlw	1
 13535  0A07  1D03               	skipz
 13536  0A08  2A0D               	goto	l9250
 13537                           
 13538                           ;Dimmer_B1.c: 833: RA7 = 0;
 13539  0A09  138C               	bcf	12,7	;volatile
 13540                           
 13541                           ;Dimmer_B1.c: 834: __nop();
 13542  0A0A  0000               	nop
 13543                           
 13544                           ;Dimmer_B1.c: 835: __nop();
 13545  0A0B  0000               	nop
 13546                           
 13547                           ;Dimmer_B1.c: 837: }
 13548  0A0C  2A15               	goto	l896
 13549  0A0D                     l9250:	
 13550                           
 13551                           ;Dimmer_B1.c: 840: else if (lights == 2) {
 13552  0A0D  0020               	movlb	0	; select bank0
 13553  0A0E  0868               	movf	setDimmerLights_OnOff@lights,w
 13554  0A0F  3A02               	xorlw	2
 13555  0A10  1D03               	skipz
 13556  0A11  2A15               	goto	l896
 13557                           
 13558                           ;Dimmer_B1.c: 841: RB4 = 0;
 13559  0A12  120D               	bcf	13,4	;volatile
 13560                           
 13561                           ;Dimmer_B1.c: 842: __nop();
 13562  0A13  0000               	nop
 13563                           
 13564                           ;Dimmer_B1.c: 843: __nop();
 13565  0A14  0000               	nop
 13566  0A15                     l896:	
 13567                           
 13568                           ;Dimmer_B1.c: 844: }
 13569                           ;Dimmer_B1.c: 849: Dimmer.Load_Status = 0;
 13570  0A15  0021               	movlb	1	; select bank1
 13571  0A16  1148               	bcf	_Dimmer^(0+128),2	;volatile
 13572                           
 13573                           ;Dimmer_B1.c: 850: setDimmerLights_Line(0);
 13574  0A17  3000               	movlw	0
 13575  0A18  319E  2615  3189   	fcall	_setDimmerLights_Line
 13576  0A1B                     l9256:	
 13577                           
 13578                           ;Dimmer_B1.c: 852: }
 13579                           ;Dimmer_B1.c: 855: setRF_DimmerLights(lights, command);
 13580  0A1B  0020               	movlb	0	; select bank0
 13581  0A1C  0866               	movf	setDimmerLights_OnOff@command,w
 13582  0A1D  00E7               	movwf	??_setDimmerLights_OnOff
 13583  0A1E  0867               	movf	??_setDimmerLights_OnOff,w
 13584  0A1F  00E1               	movwf	setRF_DimmerLights@on
 13585  0A20  0868               	movf	setDimmerLights_OnOff@lights,w
 13586  0A21  3197  27A7  3189   	fcall	_setRF_DimmerLights
 13587                           
 13588                           ;Dimmer_B1.c: 856: setTxData();
 13589  0A24  3187  270F         	fcall	_setTxData
 13590  0A26  0008               	return
 13591  0A27                     __end_of_setDimmerLights_OnOff:	
 13592                           
 13593                           	psect	text90
 13594  0902                     __ptext90:	
 13595 ;; *************** function _setLED *****************
 13596 ;; Defined at:
 13597 ;;		line 76 in file "../src/LED_B1.c"
 13598 ;; Parameters:    Size  Location     Type
 13599 ;;  led             1    wreg     unsigned char 
 13600 ;;  command         1    5[COMMON] unsigned char 
 13601 ;; Auto vars:     Size  Location     Type
 13602 ;;  led             1    6[COMMON] unsigned char 
 13603 ;; Return value:  Size  Location     Type
 13604 ;;		None               void
 13605 ;; Registers used:
 13606 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13607 ;; Tracked objects:
 13608 ;;		On entry : 0/0
 13609 ;;		On exit  : 0/0
 13610 ;;		Unchanged: 0/0
 13611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13612 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13615 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13616 ;;Total ram usage:        2 bytes
 13617 ;; Hardware stack levels used:    1
 13618 ;; Hardware stack levels required when called:    4
 13619 ;; This function calls:
 13620 ;;		_LedPointSelect
 13621 ;; This function is called by:
 13622 ;;		_setDimmerLights_OnOff
 13623 ;;		_setLED_Initialization
 13624 ;;		_Exception_Main
 13625 ;;		_setSw_Initialization
 13626 ;; This function uses a non-reentrant model
 13627 ;;
 13628                           
 13629                           
 13630                           ;psect for function _setLED
 13631  0902                     _setLED:	
 13632                           
 13633                           ;incstack = 0
 13634                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13635                           ;setLED@led stored from wreg
 13636  0902  00F6               	movwf	setLED@led
 13637                           
 13638                           ;LED_B1.c: 77: LedPointSelect(led);
 13639  0903  0876               	movf	setLED@led,w
 13640  0904  319F  27C4  3189   	fcall	_LedPointSelect
 13641                           
 13642                           ;LED_B1.c: 78: if (command == 0) {
 13643  0907  08F5               	movf	setLED@command,f
 13644  0908  1D03               	skipz
 13645  0909  291C               	goto	l6712
 13646                           
 13647                           ;LED_B1.c: 80: if (led == 1) {
 13648  090A  0876               	movf	setLED@led,w
 13649  090B  3A01               	xorlw	1
 13650  090C  1D03               	skipz
 13651  090D  2910               	goto	l6704
 13652                           
 13653                           ;LED_B1.c: 84: RA3 = 1;
 13654  090E  0020               	movlb	0	; select bank0
 13655  090F  158C               	bsf	12,3	;volatile
 13656  0910                     l6704:	
 13657                           
 13658                           ;LED_B1.c: 86: }
 13659                           ;LED_B1.c: 89: if (led == 2) {
 13660  0910  0876               	movf	setLED@led,w
 13661  0911  3A02               	xorlw	2
 13662  0912  1D03               	skipz
 13663  0913  2916               	goto	l6708
 13664                           
 13665                           ;LED_B1.c: 93: RC7 = 1;
 13666  0914  0020               	movlb	0	; select bank0
 13667  0915  178E               	bsf	14,7	;volatile
 13668  0916                     l6708:	
 13669                           
 13670                           ;LED_B1.c: 95: }
 13671                           ;LED_B1.c: 107: if (led == 99) {
 13672  0916  0876               	movf	setLED@led,w
 13673  0917  3A63               	xorlw	99
 13674  0918  1D03               	skipz
 13675  0919  291C               	goto	l6712
 13676                           
 13677                           ;LED_B1.c: 111: RB5 = 1;
 13678  091A  0020               	movlb	0	; select bank0
 13679  091B  168D               	bsf	13,5	;volatile
 13680  091C                     l6712:	
 13681                           
 13682                           ;LED_B1.c: 113: }
 13683                           ;LED_B1.c: 115: }
 13684                           ;LED_B1.c: 116: if (command == 1) {
 13685  091C  0875               	movf	setLED@command,w
 13686  091D  3A01               	xorlw	1
 13687  091E  1D03               	skipz
 13688  091F  2932               	goto	l6726
 13689                           
 13690                           ;LED_B1.c: 118: if (led == 1) {
 13691  0920  0876               	movf	setLED@led,w
 13692  0921  3A01               	xorlw	1
 13693  0922  1D03               	skipz
 13694  0923  2926               	goto	l6718
 13695                           
 13696                           ;LED_B1.c: 122: RA3 = 0;
 13697  0924  0020               	movlb	0	; select bank0
 13698  0925  118C               	bcf	12,3	;volatile
 13699  0926                     l6718:	
 13700                           
 13701                           ;LED_B1.c: 124: }
 13702                           ;LED_B1.c: 127: if (led == 2) {
 13703  0926  0876               	movf	setLED@led,w
 13704  0927  3A02               	xorlw	2
 13705  0928  1D03               	skipz
 13706  0929  292C               	goto	l6722
 13707                           
 13708                           ;LED_B1.c: 131: RC7 = 0;
 13709  092A  0020               	movlb	0	; select bank0
 13710  092B  138E               	bcf	14,7	;volatile
 13711  092C                     l6722:	
 13712                           
 13713                           ;LED_B1.c: 133: }
 13714                           ;LED_B1.c: 145: if (led == 99) {
 13715  092C  0876               	movf	setLED@led,w
 13716  092D  3A63               	xorlw	99
 13717  092E  1D03               	skipz
 13718  092F  2932               	goto	l6726
 13719                           
 13720                           ;LED_B1.c: 149: RB5 = 0;
 13721  0930  0020               	movlb	0	; select bank0
 13722  0931  128D               	bcf	13,5	;volatile
 13723  0932                     l6726:	
 13724                           
 13725                           ;LED_B1.c: 151: }
 13726                           ;LED_B1.c: 153: }
 13727                           ;LED_B1.c: 154: if (command == 10) {
 13728  0932  0875               	movf	setLED@command,w
 13729  0933  3A0A               	xorlw	10
 13730  0934  1D03               	skipz
 13731  0935  2956               	goto	l6742
 13732                           
 13733                           ;LED_B1.c: 155: LED->GO = 0;
 13734  0936  0021               	movlb	1	; select bank1
 13735  0937  0855               	movf	_LED^(0+128),w
 13736  0938  0086               	movwf	6
 13737  0939  3001               	movlw	1	; select bank2/3
 13738  093A  0087               	movwf	7
 13739  093B  1081               	bcf	1,1
 13740                           
 13741                           ;LED_B1.c: 156: LED->Time = 0;
 13742  093C  0A55               	incf	_LED^(0+128),w
 13743  093D  0086               	movwf	6
 13744  093E  3001               	movlw	1	; select bank2/3
 13745  093F  0087               	movwf	7
 13746  0940  3000               	movlw	0
 13747  0941  3FC0               	movwi [0]fsr1
 13748  0942  3FC1               	movwi [1]fsr1
 13749                           
 13750                           ;LED_B1.c: 158: if (led == 1) {
 13751  0943  0876               	movf	setLED@led,w
 13752  0944  3A01               	xorlw	1
 13753  0945  1D03               	skipz
 13754  0946  294A               	goto	l6734
 13755                           
 13756                           ;LED_B1.c: 162: RA3 = 1;
 13757  0947  0020               	movlb	0	; select bank0
 13758  0948  158C               	bsf	12,3	;volatile
 13759                           
 13760                           ;LED_B1.c: 164: }
 13761  0949  2950               	goto	l6738
 13762  094A                     l6734:	
 13763                           
 13764                           ;LED_B1.c: 167: else if (led == 2) {
 13765  094A  0876               	movf	setLED@led,w
 13766  094B  3A02               	xorlw	2
 13767  094C  1D03               	skipz
 13768  094D  2950               	goto	l6738
 13769                           
 13770                           ;LED_B1.c: 171: RC7 = 1;
 13771  094E  0020               	movlb	0	; select bank0
 13772  094F  178E               	bsf	14,7	;volatile
 13773  0950                     l6738:	
 13774                           
 13775                           ;LED_B1.c: 173: }
 13776                           ;LED_B1.c: 185: if (led == 99) {
 13777  0950  0876               	movf	setLED@led,w
 13778  0951  3A63               	xorlw	99
 13779  0952  1D03               	skipz
 13780  0953  2956               	goto	l6742
 13781                           
 13782                           ;LED_B1.c: 189: RB5 = 1;
 13783  0954  0020               	movlb	0	; select bank0
 13784  0955  168D               	bsf	13,5	;volatile
 13785  0956                     l6742:	
 13786                           
 13787                           ;LED_B1.c: 191: }
 13788                           ;LED_B1.c: 193: }
 13789                           ;LED_B1.c: 194: if (command == 11) {
 13790  0956  0875               	movf	setLED@command,w
 13791  0957  3A0B               	xorlw	11
 13792  0958  1D03               	skipz
 13793  0959  0008               	return
 13794                           
 13795                           ;LED_B1.c: 195: LED->GO = 1;
 13796  095A  0021               	movlb	1	; select bank1
 13797  095B  0855               	movf	_LED^(0+128),w
 13798  095C  0086               	movwf	6
 13799  095D  3001               	movlw	1	; select bank2/3
 13800  095E  0087               	movwf	7
 13801  095F  1481               	bsf	1,1
 13802  0960  0008               	return
 13803  0961                     __end_of_setLED:	
 13804                           
 13805                           	psect	text91
 13806  1FC4                     __ptext91:	
 13807 ;; *************** function _LedPointSelect *****************
 13808 ;; Defined at:
 13809 ;;		line 7 in file "../src/LED_B1.c"
 13810 ;; Parameters:    Size  Location     Type
 13811 ;;  led             1    wreg     unsigned char 
 13812 ;; Auto vars:     Size  Location     Type
 13813 ;;  led             1    4[COMMON] unsigned char 
 13814 ;; Return value:  Size  Location     Type
 13815 ;;		None               void
 13816 ;; Registers used:
 13817 ;;		wreg
 13818 ;; Tracked objects:
 13819 ;;		On entry : 0/0
 13820 ;;		On exit  : 0/0
 13821 ;;		Unchanged: 0/0
 13822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;Total ram usage:        2 bytes
 13828 ;; Hardware stack levels used:    1
 13829 ;; Hardware stack levels required when called:    3
 13830 ;; This function calls:
 13831 ;;		Nothing
 13832 ;; This function is called by:
 13833 ;;		_setLED_Initialization
 13834 ;;		_setLED
 13835 ;;		_setLED_Main
 13836 ;; This function uses a non-reentrant model
 13837 ;;
 13838                           
 13839                           
 13840                           ;psect for function _LedPointSelect
 13841  1FC4                     _LedPointSelect:	
 13842                           
 13843                           ;incstack = 0
 13844                           ; Regs used in _LedPointSelect: [wreg]
 13845                           ;LedPointSelect@led stored from wreg
 13846  1FC4  00F4               	movwf	LedPointSelect@led
 13847                           
 13848                           ;LED_B1.c: 9: if (led == 1) {
 13849  1FC5  0874               	movf	LedPointSelect@led,w
 13850  1FC6  3A01               	xorlw	1
 13851  1FC7  1D03               	skipz
 13852  1FC8  2FCE               	goto	l1052
 13853                           
 13854                           ;LED_B1.c: 10: LED = &VarLED1;
 13855  1FC9  3065               	movlw	_VarLED1& (0+255)
 13856  1FCA  00F3               	movwf	??_LedPointSelect
 13857  1FCB  0873               	movf	??_LedPointSelect,w
 13858  1FCC  0021               	movlb	1	; select bank1
 13859  1FCD  00D5               	movwf	_LED^(0+128)
 13860  1FCE                     l1052:	
 13861                           
 13862                           ;LED_B1.c: 11: }
 13863                           ;LED_B1.c: 14: if (led == 2) {
 13864  1FCE  0874               	movf	LedPointSelect@led,w
 13865  1FCF  3A02               	xorlw	2
 13866  1FD0  1D03               	skipz
 13867  1FD1  2FD7               	goto	l1053
 13868                           
 13869                           ;LED_B1.c: 15: LED = &VarLED2;
 13870  1FD2  3069               	movlw	_VarLED2& (0+255)
 13871  1FD3  00F3               	movwf	??_LedPointSelect
 13872  1FD4  0873               	movf	??_LedPointSelect,w
 13873  1FD5  0021               	movlb	1	; select bank1
 13874  1FD6  00D5               	movwf	_LED^(0+128)
 13875  1FD7                     l1053:	
 13876                           
 13877                           ;LED_B1.c: 16: }
 13878                           ;LED_B1.c: 24: if (led == 99) {
 13879  1FD7  0874               	movf	LedPointSelect@led,w
 13880  1FD8  3A63               	xorlw	99
 13881  1FD9  1D03               	skipz
 13882  1FDA  0008               	return
 13883                           
 13884                           ;LED_B1.c: 25: LED = &VarErrLED;
 13885  1FDB  3061               	movlw	_VarErrLED& (0+255)
 13886  1FDC  00F3               	movwf	??_LedPointSelect
 13887  1FDD  0873               	movf	??_LedPointSelect,w
 13888  1FDE  0021               	movlb	1	; select bank1
 13889  1FDF  00D5               	movwf	_LED^(0+128)
 13890  1FE0  0008               	return
 13891  1FE1                     __end_of_LedPointSelect:	
 13892                           
 13893                           	psect	text92
 13894  1E89                     __ptext92:	
 13895 ;; *************** function _setDimmerIntr_DimmingValue *****************
 13896 ;; Defined at:
 13897 ;;		line 48 in file "../src/Dimmer_B1.c"
 13898 ;; Parameters:    Size  Location     Type
 13899 ;;  lights          1    wreg     unsigned char 
 13900 ;;  value           1    3[COMMON] unsigned char 
 13901 ;; Auto vars:     Size  Location     Type
 13902 ;;  lights          1    5[COMMON] unsigned char 
 13903 ;; Return value:  Size  Location     Type
 13904 ;;		None               void
 13905 ;; Registers used:
 13906 ;;		wreg
 13907 ;; Tracked objects:
 13908 ;;		On entry : 0/0
 13909 ;;		On exit  : 0/0
 13910 ;;		Unchanged: 0/0
 13911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13912 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13913 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13915 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13916 ;;Total ram usage:        3 bytes
 13917 ;; Hardware stack levels used:    1
 13918 ;; Hardware stack levels required when called:    3
 13919 ;; This function calls:
 13920 ;;		Nothing
 13921 ;; This function is called by:
 13922 ;;		_setDimmerLights_OnOff
 13923 ;; This function uses a non-reentrant model
 13924 ;;
 13925                           
 13926                           
 13927                           ;psect for function _setDimmerIntr_DimmingValue
 13928  1E89                     _setDimmerIntr_DimmingValue:	
 13929                           
 13930                           ;incstack = 0
 13931                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 13932                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 13933  1E89  00F5               	movwf	setDimmerIntr_DimmingValue@lights
 13934                           
 13935                           ;Dimmer_B1.c: 50: if (lights == 1) {
 13936  1E8A  0875               	movf	setDimmerIntr_DimmingValue@lights,w
 13937  1E8B  3A01               	xorlw	1
 13938  1E8C  1D03               	skipz
 13939  1E8D  2E94               	goto	l6634
 13940                           
 13941                           ;Dimmer_B1.c: 51: DimmerIntr1.DimmingValue = value;
 13942  1E8E  0873               	movf	setDimmerIntr_DimmingValue@value,w
 13943  1E8F  00F4               	movwf	??_setDimmerIntr_DimmingValue
 13944  1E90  0874               	movf	??_setDimmerIntr_DimmingValue,w
 13945  1E91  0022               	movlb	2	; select bank2
 13946  1E92  00D2               	movwf	(_DimmerIntr1^(0+256)+4)
 13947                           
 13948                           ;Dimmer_B1.c: 52: }
 13949  1E93  0008               	return
 13950  1E94                     l6634:	
 13951                           
 13952                           ;Dimmer_B1.c: 55: else if (lights == 2) {
 13953  1E94  0875               	movf	setDimmerIntr_DimmingValue@lights,w
 13954  1E95  3A02               	xorlw	2
 13955  1E96  1D03               	skipz
 13956  1E97  0008               	return
 13957                           
 13958                           ;Dimmer_B1.c: 56: DimmerIntr2.DimmingValue = value;
 13959  1E98  0873               	movf	setDimmerIntr_DimmingValue@value,w
 13960  1E99  00F4               	movwf	??_setDimmerIntr_DimmingValue
 13961  1E9A  0874               	movf	??_setDimmerIntr_DimmingValue,w
 13962  1E9B  0022               	movlb	2	; select bank2
 13963  1E9C  00D9               	movwf	(_DimmerIntr2^(0+256)+4)
 13964  1E9D  0008               	return
 13965  1E9E                     __end_of_setDimmerIntr_DimmingValue:	
 13966                           
 13967                           	psect	text93
 13968  1218                     __ptext93:	
 13969 ;; *************** function _setDimmerIntr_ControlStatus *****************
 13970 ;; Defined at:
 13971 ;;		line 30 in file "../src/Dimmer_B1.c"
 13972 ;; Parameters:    Size  Location     Type
 13973 ;;  lights          1    wreg     unsigned char 
 13974 ;;  command         1    3[COMMON] unsigned char 
 13975 ;; Auto vars:     Size  Location     Type
 13976 ;;  lights          1    5[COMMON] unsigned char 
 13977 ;; Return value:  Size  Location     Type
 13978 ;;		None               void
 13979 ;; Registers used:
 13980 ;;		wreg, status,2, status,0
 13981 ;; Tracked objects:
 13982 ;;		On entry : 0/0
 13983 ;;		On exit  : 0/0
 13984 ;;		Unchanged: 0/0
 13985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13986 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13987 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13988 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13989 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13990 ;;Total ram usage:        3 bytes
 13991 ;; Hardware stack levels used:    1
 13992 ;; Hardware stack levels required when called:    3
 13993 ;; This function calls:
 13994 ;;		Nothing
 13995 ;; This function is called by:
 13996 ;;		_setDimmerLights_OnOff
 13997 ;; This function uses a non-reentrant model
 13998 ;;
 13999                           
 14000                           
 14001                           ;psect for function _setDimmerIntr_ControlStatus
 14002  1218                     _setDimmerIntr_ControlStatus:	
 14003                           
 14004                           ;incstack = 0
 14005                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14006                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14007  1218  00F5               	movwf	setDimmerIntr_ControlStatus@lights
 14008                           
 14009                           ;Dimmer_B1.c: 32: if (lights == 1) {
 14010  1219  0875               	movf	setDimmerIntr_ControlStatus@lights,w
 14011  121A  3A01               	xorlw	1
 14012  121B  1D03               	skipz
 14013  121C  2A2D               	goto	l6626
 14014                           
 14015                           ;Dimmer_B1.c: 33: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14016  121D  0873               	movf	setDimmerIntr_ControlStatus@command,w
 14017  121E  3A01               	xorlw	1
 14018  121F  3000               	movlw	0
 14019  1220  1903               	skipnz
 14020  1221  3001               	movlw	1
 14021  1222  00F4               	movwf	??_setDimmerIntr_ControlStatus
 14022  1223  0DF4               	rlf	??_setDimmerIntr_ControlStatus,f
 14023  1224  0DF4               	rlf	??_setDimmerIntr_ControlStatus,f
 14024  1225  0DF4               	rlf	??_setDimmerIntr_ControlStatus,f
 14025  1226  0022               	movlb	2	; select bank2
 14026  1227  084E               	movf	_DimmerIntr1^(0+256),w
 14027  1228  0674               	xorwf	??_setDimmerIntr_ControlStatus,w
 14028  1229  39F7               	andlw	-9
 14029  122A  0674               	xorwf	??_setDimmerIntr_ControlStatus,w
 14030  122B  00CE               	movwf	_DimmerIntr1^(0+256)
 14031                           
 14032                           ;Dimmer_B1.c: 34: }
 14033  122C  0008               	return
 14034  122D                     l6626:	
 14035                           
 14036                           ;Dimmer_B1.c: 37: else if (lights == 2) {
 14037  122D  0875               	movf	setDimmerIntr_ControlStatus@lights,w
 14038  122E  3A02               	xorlw	2
 14039  122F  1D03               	skipz
 14040  1230  0008               	return
 14041                           
 14042                           ;Dimmer_B1.c: 38: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14043  1231  0873               	movf	setDimmerIntr_ControlStatus@command,w
 14044  1232  3A01               	xorlw	1
 14045  1233  3000               	movlw	0
 14046  1234  1903               	skipnz
 14047  1235  3001               	movlw	1
 14048  1236  00F4               	movwf	??_setDimmerIntr_ControlStatus
 14049  1237  0DF4               	rlf	??_setDimmerIntr_ControlStatus,f
 14050  1238  0DF4               	rlf	??_setDimmerIntr_ControlStatus,f
 14051  1239  0DF4               	rlf	??_setDimmerIntr_ControlStatus,f
 14052  123A  0022               	movlb	2	; select bank2
 14053  123B  0855               	movf	_DimmerIntr2^(0+256),w
 14054  123C  0674               	xorwf	??_setDimmerIntr_ControlStatus,w
 14055  123D  39F7               	andlw	-9
 14056  123E  0674               	xorwf	??_setDimmerIntr_ControlStatus,w
 14057  123F  00D5               	movwf	_DimmerIntr2^(0+256)
 14058  1240  0008               	return
 14059  1241                     __end_of_setDimmerIntr_ControlStatus:	
 14060                           
 14061                           	psect	text94
 14062  1651                     __ptext94:	
 14063 ;; *************** function _setDimmerLights_Dimming *****************
 14064 ;; Defined at:
 14065 ;;		line 861 in file "../src/Dimmer_B1.c"
 14066 ;; Parameters:    Size  Location     Type
 14067 ;;  lights          1    wreg     unsigned char 
 14068 ;;  status          1   70[BANK0 ] unsigned char 
 14069 ;; Auto vars:     Size  Location     Type
 14070 ;;  lights          1   72[BANK0 ] unsigned char 
 14071 ;; Return value:  Size  Location     Type
 14072 ;;		None               void
 14073 ;; Registers used:
 14074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14075 ;; Tracked objects:
 14076 ;;		On entry : 0/0
 14077 ;;		On exit  : 0/0
 14078 ;;		Unchanged: 0/0
 14079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14080 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14083 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14084 ;;Total ram usage:        3 bytes
 14085 ;; Hardware stack levels used:    1
 14086 ;; Hardware stack levels required when called:    6
 14087 ;; This function calls:
 14088 ;;		_getDimmerIntr_DimmingValue
 14089 ;;		_setBuz
 14090 ;;		_setDimmerIntr_Dimming_Sw
 14091 ;;		_setDimmerIntr_MaxmumValue
 14092 ;;		_setDimmerLights_Line
 14093 ;;		_setDimmerLights_PercentValue
 14094 ;;		_setProductData
 14095 ;;		_setRF_DimmerLights
 14096 ;;		_setRF_TransceiveGO
 14097 ;;		_setTxData
 14098 ;; This function is called by:
 14099 ;;		_setDimmerLights_Main
 14100 ;; This function uses a non-reentrant model
 14101 ;;
 14102                           
 14103                           
 14104                           ;psect for function _setDimmerLights_Dimming
 14105  1651                     _setDimmerLights_Dimming:	
 14106                           
 14107                           ;incstack = 0
 14108                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14109                           ;setDimmerLights_Dimming@lights stored from wreg
 14110  1651  0020               	movlb	0	; select bank0
 14111  1652  00E8               	movwf	setDimmerLights_Dimming@lights
 14112                           
 14113                           ;Dimmer_B1.c: 862: if (status == 1) {
 14114  1653  0866               	movf	setDimmerLights_Dimming@status,w
 14115  1654  3A01               	xorlw	1
 14116  1655  1D03               	skipz
 14117  1656  2E6A               	goto	l9264
 14118                           
 14119                           ;Dimmer_B1.c: 863: setDimmerIntr_Dimming_Sw(lights, 1);
 14120  1657  01F3               	clrf	setDimmerIntr_Dimming_Sw@command
 14121  1658  0AF3               	incf	setDimmerIntr_Dimming_Sw@command,f
 14122  1659  0868               	movf	setDimmerLights_Dimming@lights,w
 14123  165A  3191  21A7  3196   	fcall	_setDimmerIntr_Dimming_Sw
 14124                           
 14125                           ;Dimmer_B1.c: 865: setRF_TransceiveGO(0);
 14126  165D  3000               	movlw	0
 14127  165E  319D  2571  3196   	fcall	_setRF_TransceiveGO
 14128                           
 14129                           ;Dimmer_B1.c: 866: setBuz(1, 100);
 14130  1661  3064               	movlw	100
 14131  1662  0020               	movlb	0	; select bank0
 14132  1663  00A4               	movwf	setBuz@time
 14133  1664  3000               	movlw	0
 14134  1665  00A5               	movwf	setBuz@time+1
 14135  1666  3001               	movlw	1
 14136  1667  3197  274E         	fcall	_setBuz
 14137                           
 14138                           ;Dimmer_B1.c: 867: } else if (status == 0) {
 14139  1669  0008               	return
 14140  166A                     l9264:	
 14141  166A  0020               	movlb	0	; select bank0
 14142  166B  08E6               	movf	setDimmerLights_Dimming@status,f
 14143  166C  1D03               	skipz
 14144  166D  0008               	return
 14145                           
 14146                           ;Dimmer_B1.c: 868: setDimmerIntr_Dimming_Sw(lights, 0);
 14147  166E  01F3               	clrf	setDimmerIntr_Dimming_Sw@command
 14148  166F  0868               	movf	setDimmerLights_Dimming@lights,w
 14149  1670  3191  21A7  3196   	fcall	_setDimmerIntr_Dimming_Sw
 14150                           
 14151                           ;Dimmer_B1.c: 870: Dimmer.Load_Status = 0;
 14152  1673  0021               	movlb	1	; select bank1
 14153  1674  1148               	bcf	_Dimmer^(0+128),2	;volatile
 14154                           
 14155                           ;Dimmer_B1.c: 871: setDimmerLights_Line(lights);
 14156  1675  0020               	movlb	0	; select bank0
 14157  1676  0868               	movf	setDimmerLights_Dimming@lights,w
 14158  1677  319E  2615  3196   	fcall	_setDimmerLights_Line
 14159                           
 14160                           ;Dimmer_B1.c: 873: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 14161  167A  0020               	movlb	0	; select bank0
 14162  167B  0868               	movf	setDimmerLights_Dimming@lights,w
 14163  167C  319E  264C  3196   	fcall	_getDimmerIntr_DimmingValue
 14164  167F  0020               	movlb	0	; select bank0
 14165  1680  00E7               	movwf	??_setDimmerLights_Dimming
 14166  1681  0867               	movf	??_setDimmerLights_Dimming,w
 14167  1682  00F6               	movwf	setDimmerIntr_MaxmumValue@value
 14168  1683  0868               	movf	setDimmerLights_Dimming@lights,w
 14169  1684  319E  26F4  3196   	fcall	_setDimmerIntr_MaxmumValue
 14170                           
 14171                           ;Dimmer_B1.c: 874: setProductData((20 + lights), setDimmerLights_PercentValue(getDimmerI
      +                          ntr_DimmingValue(lights)));
 14172  1687  0020               	movlb	0	; select bank0
 14173  1688  0868               	movf	setDimmerLights_Dimming@lights,w
 14174  1689  319E  264C  3196   	fcall	_getDimmerIntr_DimmingValue
 14175  168C  318A  22EE  3196   	fcall	_setDimmerLights_PercentValue
 14176  168F  0020               	movlb	0	; select bank0
 14177  1690  00E7               	movwf	??_setDimmerLights_Dimming
 14178  1691  0867               	movf	??_setDimmerLights_Dimming,w
 14179  1692  00DD               	movwf	setProductData@value
 14180  1693  0868               	movf	setDimmerLights_Dimming@lights,w
 14181  1694  3E14               	addlw	20
 14182  1695  319D  2518  3196   	fcall	_setProductData
 14183                           
 14184                           ;Dimmer_B1.c: 884: setRF_DimmerLights(lights, 1);
 14185  1698  0020               	movlb	0	; select bank0
 14186  1699  01E1               	clrf	setRF_DimmerLights@on
 14187  169A  0AE1               	incf	setRF_DimmerLights@on,f
 14188  169B  0868               	movf	setDimmerLights_Dimming@lights,w
 14189  169C  3197  27A7  3196   	fcall	_setRF_DimmerLights
 14190                           
 14191                           ;Dimmer_B1.c: 885: setTxData();
 14192  169F  3187  270F         	fcall	_setTxData
 14193  16A1  0008               	return
 14194  16A2                     __end_of_setDimmerLights_Dimming:	
 14195                           
 14196                           	psect	text95
 14197  070F                     __ptext95:	
 14198 ;; *************** function _setTxData *****************
 14199 ;; Defined at:
 14200 ;;		line 167 in file "../src/RF_Control_B1.c"
 14201 ;; Parameters:    Size  Location     Type
 14202 ;;		None
 14203 ;; Auto vars:     Size  Location     Type
 14204 ;;  i               1    0        unsigned char 
 14205 ;; Return value:  Size  Location     Type
 14206 ;;		None               void
 14207 ;; Registers used:
 14208 ;;		wreg, fsr1l, fsr1h
 14209 ;; Tracked objects:
 14210 ;;		On entry : 0/0
 14211 ;;		On exit  : 0/0
 14212 ;;		Unchanged: 0/0
 14213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14216 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14217 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14218 ;;Total ram usage:        1 bytes
 14219 ;; Hardware stack levels used:    1
 14220 ;; Hardware stack levels required when called:    3
 14221 ;; This function calls:
 14222 ;;		Nothing
 14223 ;; This function is called by:
 14224 ;;		_setDimmerLights_OnOff
 14225 ;;		_setDimmerLights_Dimming
 14226 ;;		_getRxData
 14227 ;;		_setControl_Lights_Table
 14228 ;;		_setRFSW_Control
 14229 ;;		_setRFSW_AdjControl
 14230 ;; This function uses a non-reentrant model
 14231 ;;
 14232                           
 14233                           
 14234                           ;psect for function _setTxData
 14235  070F                     _setTxData:	
 14236                           
 14237                           ;RF_Control_B1.c: 168: char i;
 14238                           ;RF_Control_B1.c: 169: if (RF1.Enable == 1) {
 14239                           
 14240                           ;incstack = 0
 14241                           ; Regs used in _setTxData: [wregfsr1]
 14242  070F  0021               	movlb	1	; select bank1
 14243  0710  1C20               	btfss	_RF1^(0+128),0
 14244  0711  0008               	return
 14245                           
 14246                           ;RF_Control_B1.c: 171: RF1.TransceiveGO = 1;
 14247  0712  1520               	bsf	_RF1^(0+128),2
 14248                           
 14249                           ;RF_Control_B1.c: 183: RF_Data[0] = 0x63;
 14250  0713  3063               	movlw	99
 14251  0714  00F3               	movwf	??_setTxData
 14252  0715  0873               	movf	??_setTxData,w
 14253  0716  0023               	movlb	3	; select bank3
 14254  0717  00A0               	movwf	_RF_Data^(0+384)
 14255                           
 14256                           ;RF_Control_B1.c: 184: RF_Data[1] = 0x02;
 14257  0718  3002               	movlw	2
 14258  0719  00F3               	movwf	??_setTxData
 14259  071A  0873               	movf	??_setTxData,w
 14260  071B  00A1               	movwf	(_RF_Data^(0+384)+1)
 14261                           
 14262                           ;RF_Control_B1.c: 186: RF_Data[2] = product->Data[2];
 14263  071C  0020               	movlb	0	; select bank0
 14264  071D  086E               	movf	_product,w
 14265  071E  0086               	movwf	6
 14266  071F  3002               	movlw	2	; select bank4/5
 14267  0720  0087               	movwf	7
 14268  0721  3002               	movlw	2	; select bank4/5
 14269  0722  3F42               	moviw [2]fsr1
 14270  0723  0023               	movlb	3	; select bank3
 14271  0724  00A2               	movwf	(_RF_Data^(0+384)+2)
 14272                           
 14273                           ;RF_Control_B1.c: 187: RF_Data[3] = product->Data[3];
 14274  0725  0020               	movlb	0	; select bank0
 14275  0726  086E               	movf	_product,w
 14276  0727  0086               	movwf	6
 14277  0728  3002               	movlw	2	; select bank4/5
 14278  0729  0087               	movwf	7
 14279  072A  3002               	movlw	2	; select bank4/5
 14280  072B  3F43               	moviw [3]fsr1
 14281  072C  0023               	movlb	3	; select bank3
 14282  072D  00A3               	movwf	(_RF_Data^(0+384)+3)
 14283                           
 14284                           ;RF_Control_B1.c: 188: RF_Data[4] = product->Data[4];
 14285  072E  0020               	movlb	0	; select bank0
 14286  072F  086E               	movf	_product,w
 14287  0730  0086               	movwf	6
 14288  0731  3002               	movlw	2	; select bank4/5
 14289  0732  0087               	movwf	7
 14290  0733  3002               	movlw	2	; select bank4/5
 14291  0734  3F44               	moviw [4]fsr1
 14292  0735  0023               	movlb	3	; select bank3
 14293  0736  00A4               	movwf	(_RF_Data^(0+384)+4)
 14294                           
 14295                           ;RF_Control_B1.c: 189: RF_Data[5] = product->Data[5];
 14296  0737  0020               	movlb	0	; select bank0
 14297  0738  086E               	movf	_product,w
 14298  0739  0086               	movwf	6
 14299  073A  3002               	movlw	2	; select bank4/5
 14300  073B  0087               	movwf	7
 14301  073C  3002               	movlw	2	; select bank4/5
 14302  073D  3F45               	moviw [5]fsr1
 14303  073E  0023               	movlb	3	; select bank3
 14304  073F  00A5               	movwf	(_RF_Data^(0+384)+5)
 14305                           
 14306                           ;RF_Control_B1.c: 190: RF_Data[6] = product->Data[6];
 14307  0740  0020               	movlb	0	; select bank0
 14308  0741  086E               	movf	_product,w
 14309  0742  0086               	movwf	6
 14310  0743  3002               	movlw	2	; select bank4/5
 14311  0744  0087               	movwf	7
 14312  0745  3002               	movlw	2	; select bank4/5
 14313  0746  3F46               	moviw [6]fsr1
 14314  0747  0023               	movlb	3	; select bank3
 14315  0748  00A6               	movwf	(_RF_Data^(0+384)+6)
 14316                           
 14317                           ;RF_Control_B1.c: 191: RF_Data[7] = product->Data[7];
 14318  0749  0020               	movlb	0	; select bank0
 14319  074A  086E               	movf	_product,w
 14320  074B  0086               	movwf	6
 14321  074C  3002               	movlw	2	; select bank4/5
 14322  074D  0087               	movwf	7
 14323  074E  3002               	movlw	2	; select bank4/5
 14324  074F  3F47               	moviw [7]fsr1
 14325  0750  0023               	movlb	3	; select bank3
 14326  0751  00A7               	movwf	(_RF_Data^(0+384)+7)
 14327                           
 14328                           ;RF_Control_B1.c: 192: RF_Data[8] = product->Data[8];
 14329  0752  0020               	movlb	0	; select bank0
 14330  0753  086E               	movf	_product,w
 14331  0754  0086               	movwf	6
 14332  0755  3002               	movlw	2	; select bank4/5
 14333  0756  0087               	movwf	7
 14334  0757  3002               	movlw	2	; select bank4/5
 14335  0758  3F48               	moviw [8]fsr1
 14336  0759  0023               	movlb	3	; select bank3
 14337  075A  00A8               	movwf	(_RF_Data^(0+384)+8)
 14338                           
 14339                           ;RF_Control_B1.c: 193: RF_Data[9] = product->Data[9];
 14340  075B  0020               	movlb	0	; select bank0
 14341  075C  086E               	movf	_product,w
 14342  075D  0086               	movwf	6
 14343  075E  3002               	movlw	2	; select bank4/5
 14344  075F  0087               	movwf	7
 14345  0760  3002               	movlw	2	; select bank4/5
 14346  0761  3F49               	moviw [9]fsr1
 14347  0762  0023               	movlb	3	; select bank3
 14348  0763  00A9               	movwf	(_RF_Data^(0+384)+9)
 14349                           
 14350                           ;RF_Control_B1.c: 194: RF_Data[10] = product->Data[10];
 14351  0764  0020               	movlb	0	; select bank0
 14352  0765  086E               	movf	_product,w
 14353  0766  0086               	movwf	6
 14354  0767  3002               	movlw	2	; select bank4/5
 14355  0768  0087               	movwf	7
 14356  0769  3002               	movlw	2	; select bank4/5
 14357  076A  3F4A               	moviw [10]fsr1
 14358  076B  0023               	movlb	3	; select bank3
 14359  076C  00AA               	movwf	(_RF_Data^(0+384)+10)
 14360                           
 14361                           ;RF_Control_B1.c: 195: RF_Data[11] = product->Data[11];
 14362  076D  0020               	movlb	0	; select bank0
 14363  076E  086E               	movf	_product,w
 14364  076F  0086               	movwf	6
 14365  0770  3002               	movlw	2	; select bank4/5
 14366  0771  0087               	movwf	7
 14367  0772  3002               	movlw	2	; select bank4/5
 14368  0773  3F4B               	moviw [11]fsr1
 14369  0774  0023               	movlb	3	; select bank3
 14370  0775  00AB               	movwf	(_RF_Data^(0+384)+11)
 14371                           
 14372                           ;RF_Control_B1.c: 196: RF_Data[12] = product->Data[12];
 14373  0776  0020               	movlb	0	; select bank0
 14374  0777  086E               	movf	_product,w
 14375  0778  0086               	movwf	6
 14376  0779  3002               	movlw	2	; select bank4/5
 14377  077A  0087               	movwf	7
 14378  077B  3002               	movlw	2	; select bank4/5
 14379  077C  3F4C               	moviw [12]fsr1
 14380  077D  0023               	movlb	3	; select bank3
 14381  077E  00AC               	movwf	(_RF_Data^(0+384)+12)
 14382                           
 14383                           ;RF_Control_B1.c: 197: RF_Data[13] = product->Data[13];
 14384  077F  0020               	movlb	0	; select bank0
 14385  0780  086E               	movf	_product,w
 14386  0781  0086               	movwf	6
 14387  0782  3002               	movlw	2	; select bank4/5
 14388  0783  0087               	movwf	7
 14389  0784  3002               	movlw	2	; select bank4/5
 14390  0785  3F4D               	moviw [13]fsr1
 14391  0786  0023               	movlb	3	; select bank3
 14392  0787  00AD               	movwf	(_RF_Data^(0+384)+13)
 14393                           
 14394                           ;RF_Control_B1.c: 198: RF_Data[14] = product->Data[14];
 14395  0788  0020               	movlb	0	; select bank0
 14396  0789  086E               	movf	_product,w
 14397  078A  0086               	movwf	6
 14398  078B  3002               	movlw	2	; select bank4/5
 14399  078C  0087               	movwf	7
 14400  078D  3002               	movlw	2	; select bank4/5
 14401  078E  3F4E               	moviw [14]fsr1
 14402  078F  0023               	movlb	3	; select bank3
 14403  0790  00AE               	movwf	(_RF_Data^(0+384)+14)
 14404                           
 14405                           ;RF_Control_B1.c: 199: RF_Data[15] = product->Data[15];
 14406  0791  0020               	movlb	0	; select bank0
 14407  0792  086E               	movf	_product,w
 14408  0793  0086               	movwf	6
 14409  0794  3002               	movlw	2	; select bank4/5
 14410  0795  0087               	movwf	7
 14411  0796  3002               	movlw	2	; select bank4/5
 14412  0797  3F4F               	moviw [15]fsr1
 14413  0798  0023               	movlb	3	; select bank3
 14414  0799  00AF               	movwf	(_RF_Data^(0+384)+15)
 14415                           
 14416                           ;RF_Control_B1.c: 200: RF_Data[16] = product->Data[16];
 14417  079A  0020               	movlb	0	; select bank0
 14418  079B  086E               	movf	_product,w
 14419  079C  0086               	movwf	6
 14420  079D  3002               	movlw	2	; select bank4/5
 14421  079E  0087               	movwf	7
 14422  079F  3002               	movlw	2	; select bank4/5
 14423  07A0  3F50               	moviw [16]fsr1
 14424  07A1  0023               	movlb	3	; select bank3
 14425  07A2  00B0               	movwf	(_RF_Data^(0+384)+16)
 14426                           
 14427                           ;RF_Control_B1.c: 201: RF_Data[17] = product->Data[17];
 14428  07A3  0020               	movlb	0	; select bank0
 14429  07A4  086E               	movf	_product,w
 14430  07A5  0086               	movwf	6
 14431  07A6  3002               	movlw	2	; select bank4/5
 14432  07A7  0087               	movwf	7
 14433  07A8  3002               	movlw	2	; select bank4/5
 14434  07A9  3F51               	moviw [17]fsr1
 14435  07AA  0023               	movlb	3	; select bank3
 14436  07AB  00B1               	movwf	(_RF_Data^(0+384)+17)
 14437                           
 14438                           ;RF_Control_B1.c: 202: RF_Data[18] = product->Data[18];
 14439  07AC  0020               	movlb	0	; select bank0
 14440  07AD  086E               	movf	_product,w
 14441  07AE  0086               	movwf	6
 14442  07AF  3002               	movlw	2	; select bank4/5
 14443  07B0  0087               	movwf	7
 14444  07B1  3002               	movlw	2	; select bank4/5
 14445  07B2  3F52               	moviw [18]fsr1
 14446  07B3  0023               	movlb	3	; select bank3
 14447  07B4  00B2               	movwf	(_RF_Data^(0+384)+18)
 14448                           
 14449                           ;RF_Control_B1.c: 203: RF_Data[19] = product->Data[19];
 14450  07B5  0020               	movlb	0	; select bank0
 14451  07B6  086E               	movf	_product,w
 14452  07B7  0086               	movwf	6
 14453  07B8  3002               	movlw	2	; select bank4/5
 14454  07B9  0087               	movwf	7
 14455  07BA  3002               	movlw	2	; select bank4/5
 14456  07BB  3F53               	moviw [19]fsr1
 14457  07BC  0023               	movlb	3	; select bank3
 14458  07BD  00B3               	movwf	(_RF_Data^(0+384)+19)
 14459                           
 14460                           ;RF_Control_B1.c: 204: RF_Data[20] = 210;
 14461  07BE  30D2               	movlw	210
 14462  07BF  00F3               	movwf	??_setTxData
 14463  07C0  0873               	movf	??_setTxData,w
 14464  07C1  00B4               	movwf	(_RF_Data^(0+384)+20)
 14465  07C2  0008               	return
 14466  07C3                     __end_of_setTxData:	
 14467                           
 14468                           	psect	text96
 14469  1D71                     __ptext96:	
 14470 ;; *************** function _setRF_TransceiveGO *****************
 14471 ;; Defined at:
 14472 ;;		line 452 in file "../src/RF_Control_B1.c"
 14473 ;; Parameters:    Size  Location     Type
 14474 ;;  command         1    wreg     unsigned char 
 14475 ;; Auto vars:     Size  Location     Type
 14476 ;;  command         1    4[COMMON] unsigned char 
 14477 ;; Return value:  Size  Location     Type
 14478 ;;		None               void
 14479 ;; Registers used:
 14480 ;;		wreg, status,2, status,0
 14481 ;; Tracked objects:
 14482 ;;		On entry : 0/0
 14483 ;;		On exit  : 0/0
 14484 ;;		Unchanged: 0/0
 14485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14487 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14488 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;Total ram usage:        2 bytes
 14491 ;; Hardware stack levels used:    1
 14492 ;; Hardware stack levels required when called:    3
 14493 ;; This function calls:
 14494 ;;		Nothing
 14495 ;; This function is called by:
 14496 ;;		_setDimmerLights_Dimming
 14497 ;; This function uses a non-reentrant model
 14498 ;;
 14499                           
 14500                           
 14501                           ;psect for function _setRF_TransceiveGO
 14502  1D71                     _setRF_TransceiveGO:	
 14503                           
 14504                           ;incstack = 0
 14505                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 14506                           ;setRF_TransceiveGO@command stored from wreg
 14507  1D71  00F4               	movwf	setRF_TransceiveGO@command
 14508                           
 14509                           ;RF_Control_B1.c: 453: RF1.TransceiveGO = command == 1 ? 1 : 0;
 14510  1D72  0874               	movf	setRF_TransceiveGO@command,w
 14511  1D73  3A01               	xorlw	1
 14512  1D74  3000               	movlw	0
 14513  1D75  1903               	skipnz
 14514  1D76  3001               	movlw	1
 14515  1D77  00F3               	movwf	??_setRF_TransceiveGO
 14516  1D78  0DF3               	rlf	??_setRF_TransceiveGO,f
 14517  1D79  0DF3               	rlf	??_setRF_TransceiveGO,f
 14518  1D7A  0021               	movlb	1	; select bank1
 14519  1D7B  0820               	movf	_RF1^(0+128),w
 14520  1D7C  0673               	xorwf	??_setRF_TransceiveGO,w
 14521  1D7D  39FB               	andlw	-5
 14522  1D7E  0673               	xorwf	??_setRF_TransceiveGO,w
 14523  1D7F  00A0               	movwf	_RF1^(0+128)
 14524  1D80  0008               	return
 14525  1D81                     __end_of_setRF_TransceiveGO:	
 14526                           
 14527                           	psect	text97
 14528  17A7                     __ptext97:	
 14529 ;; *************** function _setRF_DimmerLights *****************
 14530 ;; Defined at:
 14531 ;;		line 431 in file "../src/RF_Control_B1.c"
 14532 ;; Parameters:    Size  Location     Type
 14533 ;;  lights          1    wreg     unsigned char 
 14534 ;;  on              1   65[BANK0 ] unsigned char 
 14535 ;; Auto vars:     Size  Location     Type
 14536 ;;  lights          1   69[BANK0 ] unsigned char 
 14537 ;;  status          1   68[BANK0 ] unsigned char 
 14538 ;; Return value:  Size  Location     Type
 14539 ;;		None               void
 14540 ;; Registers used:
 14541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14542 ;; Tracked objects:
 14543 ;;		On entry : 0/0
 14544 ;;		On exit  : 0/0
 14545 ;;		Unchanged: 0/0
 14546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14547 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14548 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14549 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14550 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14551 ;;Total ram usage:        5 bytes
 14552 ;; Hardware stack levels used:    1
 14553 ;; Hardware stack levels required when called:    4
 14554 ;; This function calls:
 14555 ;;		_setProductData
 14556 ;; This function is called by:
 14557 ;;		_setDimmerLights_OnOff
 14558 ;;		_setDimmerLights_Dimming
 14559 ;;		_setRFSW_Control
 14560 ;; This function uses a non-reentrant model
 14561 ;;
 14562                           
 14563                           
 14564                           ;psect for function _setRF_DimmerLights
 14565  17A7                     _setRF_DimmerLights:	
 14566                           
 14567                           ;incstack = 0
 14568                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14569                           ;setRF_DimmerLights@lights stored from wreg
 14570  17A7  0020               	movlb	0	; select bank0
 14571  17A8  00E5               	movwf	setRF_DimmerLights@lights
 14572                           
 14573                           ;RF_Control_B1.c: 432: char status = 1;
 14574  17A9  01E4               	clrf	setRF_DimmerLights@status
 14575  17AA  0AE4               	incf	setRF_DimmerLights@status,f
 14576                           
 14577                           ;RF_Control_B1.c: 433: status <<= (lights - 1);
 14578  17AB  0865               	movf	setRF_DimmerLights@lights,w
 14579  17AC  3EFF               	addlw	-1
 14580  17AD  0A89               	incf	9,f
 14581  17AE  2FB1               	goto	u4910
 14582  17AF                     u4915:	
 14583  17AF  1003               	clrc
 14584  17B0  0DE4               	rlf	setRF_DimmerLights@status,f
 14585  17B1                     u4910:	
 14586  17B1  3EFF               	addlw	-1
 14587  17B2  1D03               	skipz
 14588  17B3  2FAF               	goto	u4915
 14589                           
 14590                           ;RF_Control_B1.c: 434: setProductData(11, lights);
 14591  17B4  0865               	movf	setRF_DimmerLights@lights,w
 14592  17B5  00E2               	movwf	??_setRF_DimmerLights
 14593  17B6  0862               	movf	??_setRF_DimmerLights,w
 14594  17B7  00DD               	movwf	setProductData@value
 14595  17B8  300B               	movlw	11
 14596  17B9  319D  2518  3197   	fcall	_setProductData
 14597                           
 14598                           ;RF_Control_B1.c: 436: setProductData(9, product->Data[20 + lights]);
 14599  17BC  0020               	movlb	0	; select bank0
 14600  17BD  0865               	movf	setRF_DimmerLights@lights,w
 14601  17BE  3E14               	addlw	20
 14602  17BF  076E               	addwf	_product,w
 14603  17C0  00E2               	movwf	??_setRF_DimmerLights
 14604  17C1  0862               	movf	??_setRF_DimmerLights,w
 14605  17C2  0086               	movwf	6
 14606  17C3  3002               	movlw	2	; select bank4/5
 14607  17C4  0087               	movwf	7
 14608  17C5  0801               	movf	1,w
 14609  17C6  00E3               	movwf	??_setRF_DimmerLights+1
 14610  17C7  0863               	movf	??_setRF_DimmerLights+1,w
 14611  17C8  00DD               	movwf	setProductData@value
 14612  17C9  3009               	movlw	9
 14613  17CA  319D  2518  3197   	fcall	_setProductData
 14614                           
 14615                           ;RF_Control_B1.c: 437: setProductData(17, product->Data[26 + lights]);
 14616  17CD  0020               	movlb	0	; select bank0
 14617  17CE  0865               	movf	setRF_DimmerLights@lights,w
 14618  17CF  3E1A               	addlw	26
 14619  17D0  076E               	addwf	_product,w
 14620  17D1  00E2               	movwf	??_setRF_DimmerLights
 14621  17D2  0862               	movf	??_setRF_DimmerLights,w
 14622  17D3  0086               	movwf	6
 14623  17D4  3002               	movlw	2	; select bank4/5
 14624  17D5  0087               	movwf	7
 14625  17D6  0801               	movf	1,w
 14626  17D7  00E3               	movwf	??_setRF_DimmerLights+1
 14627  17D8  0863               	movf	??_setRF_DimmerLights+1,w
 14628  17D9  00DD               	movwf	setProductData@value
 14629  17DA  3011               	movlw	17
 14630  17DB  319D  2518  3197   	fcall	_setProductData
 14631                           
 14632                           ;RF_Control_B1.c: 438: if (on == 1) {
 14633  17DE  0020               	movlb	0	; select bank0
 14634  17DF  0861               	movf	setRF_DimmerLights@on,w
 14635  17E0  3A01               	xorlw	1
 14636  17E1  1D03               	skipz
 14637  17E2  2FF1               	goto	l6154
 14638                           
 14639                           ;RF_Control_B1.c: 439: setProductData(15, (product->Data[15] | status));
 14640  17E3  086E               	movf	_product,w
 14641  17E4  3E0F               	addlw	15
 14642  17E5  0086               	movwf	6
 14643  17E6  3002               	movlw	2	; select bank4/5
 14644  17E7  0087               	movwf	7
 14645  17E8  0801               	movf	1,w
 14646  17E9  0464               	iorwf	setRF_DimmerLights@status,w
 14647  17EA  00E2               	movwf	??_setRF_DimmerLights
 14648  17EB  0862               	movf	??_setRF_DimmerLights,w
 14649  17EC  00DD               	movwf	setProductData@value
 14650  17ED  300F               	movlw	15
 14651  17EE  319D  2518         	fcall	_setProductData
 14652                           
 14653                           ;RF_Control_B1.c: 440: } else {
 14654  17F0  0008               	return
 14655  17F1                     l6154:	
 14656                           
 14657                           ;RF_Control_B1.c: 441: setProductData(15, (product->Data[15]&(~status)));
 14658  17F1  0020               	movlb	0	; select bank0
 14659  17F2  086E               	movf	_product,w
 14660  17F3  3E0F               	addlw	15
 14661  17F4  0086               	movwf	6
 14662  17F5  3002               	movlw	2	; select bank4/5
 14663  17F6  0087               	movwf	7
 14664  17F7  0964               	comf	setRF_DimmerLights@status,w
 14665  17F8  0501               	andwf	1,w
 14666  17F9  00E2               	movwf	??_setRF_DimmerLights
 14667  17FA  0862               	movf	??_setRF_DimmerLights,w
 14668  17FB  00DD               	movwf	setProductData@value
 14669  17FC  300F               	movlw	15
 14670  17FD  319D  2518         	fcall	_setProductData
 14671  17FF  0008               	return
 14672  1800                     __end_of_setRF_DimmerLights:	
 14673                           
 14674                           	psect	text98
 14675  0AEE                     __ptext98:	
 14676 ;; *************** function _setDimmerLights_PercentValue *****************
 14677 ;; Defined at:
 14678 ;;		line 1031 in file "../src/Dimmer_B1.c"
 14679 ;; Parameters:    Size  Location     Type
 14680 ;;  value           1    wreg     unsigned char 
 14681 ;; Auto vars:     Size  Location     Type
 14682 ;;  value           1   57[BANK0 ] unsigned char 
 14683 ;;  i               3   58[BANK0 ] float 
 14684 ;; Return value:  Size  Location     Type
 14685 ;;                  1    wreg      unsigned char 
 14686 ;; Registers used:
 14687 ;;		wreg, status,2, status,0, pclath, cstack
 14688 ;; Tracked objects:
 14689 ;;		On entry : 0/0
 14690 ;;		On exit  : 0/0
 14691 ;;		Unchanged: 0/0
 14692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14694 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14695 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14696 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14697 ;;Total ram usage:        6 bytes
 14698 ;; Hardware stack levels used:    1
 14699 ;; Hardware stack levels required when called:    5
 14700 ;; This function calls:
 14701 ;;		___awtoft
 14702 ;;		___ftadd
 14703 ;;		___ftdiv
 14704 ;;		___ftneg
 14705 ;;		___fttol
 14706 ;; This function is called by:
 14707 ;;		_setDimmerLights_OnOff
 14708 ;;		_setDimmerLights_Dimming
 14709 ;;		_Flash_Memory_Initialization
 14710 ;; This function uses a non-reentrant model
 14711 ;;
 14712                           
 14713                           
 14714                           ;psect for function _setDimmerLights_PercentValue
 14715  0AEE                     _setDimmerLights_PercentValue:	
 14716                           
 14717                           ;incstack = 0
 14718                           ; Regs used in _setDimmerLights_PercentValue: [wreg+status,2+status,0+pclath+cstack]
 14719                           ;setDimmerLights_PercentValue@value stored from wreg
 14720  0AEE  0020               	movlb	0	; select bank0
 14721  0AEF  00D9               	movwf	setDimmerLights_PercentValue@value
 14722                           
 14723                           ;Dimmer_B1.c: 1039: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 14724  0AF0  3000               	movlw	0
 14725  0AF1  00DA               	movwf	setDimmerLights_PercentValue@i
 14726  0AF2  3030               	movlw	48
 14727  0AF3  00DB               	movwf	setDimmerLights_PercentValue@i+1
 14728  0AF4  3042               	movlw	66
 14729  0AF5  00DC               	movwf	setDimmerLights_PercentValue@i+2
 14730                           
 14731                           ;Dimmer_B1.c: 1040: i /= 100;
 14732  0AF6  3000               	movlw	0
 14733  0AF7  00A9               	movwf	___ftdiv@f2
 14734  0AF8  30C8               	movlw	200
 14735  0AF9  00AA               	movwf	___ftdiv@f2+1
 14736  0AFA  3042               	movlw	66
 14737  0AFB  00AB               	movwf	___ftdiv@f2+2
 14738  0AFC  085A               	movf	setDimmerLights_PercentValue@i,w
 14739  0AFD  00AC               	movwf	___ftdiv@f1
 14740  0AFE  085B               	movf	setDimmerLights_PercentValue@i+1,w
 14741  0AFF  00AD               	movwf	___ftdiv@f1+1
 14742  0B00  085C               	movf	setDimmerLights_PercentValue@i+2,w
 14743  0B01  00AE               	movwf	___ftdiv@f1+2
 14744  0B02  318E  26A7  318A   	fcall	___ftdiv
 14745  0B05  0020               	movlb	0	; select bank0
 14746  0B06  0829               	movf	?___ftdiv,w
 14747  0B07  00DA               	movwf	setDimmerLights_PercentValue@i
 14748  0B08  082A               	movf	?___ftdiv+1,w
 14749  0B09  00DB               	movwf	setDimmerLights_PercentValue@i+1
 14750  0B0A  082B               	movf	?___ftdiv+2,w
 14751  0B0B  00DC               	movwf	setDimmerLights_PercentValue@i+2
 14752                           
 14753                           ;Dimmer_B1.c: 1042: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 14754  0B0C  0859               	movf	setDimmerLights_PercentValue@value,w
 14755  0B0D  00D7               	movwf	??_setDimmerLights_PercentValue
 14756  0B0E  01D8               	clrf	??_setDimmerLights_PercentValue+1
 14757  0B0F  09D7               	comf	??_setDimmerLights_PercentValue,f
 14758  0B10  09D8               	comf	??_setDimmerLights_PercentValue+1,f
 14759  0B11  0AD7               	incf	??_setDimmerLights_PercentValue,f
 14760  0B12  1903               	skipnz
 14761  0B13  0AD8               	incf	??_setDimmerLights_PercentValue+1,f
 14762  0B14  0857               	movf	??_setDimmerLights_PercentValue,w
 14763  0B15  3E38               	addlw	56
 14764  0B16  00A3               	movwf	___awtoft@c
 14765  0B17  3000               	movlw	0
 14766  0B18  3D58               	addwfc	??_setDimmerLights_PercentValue+1,w
 14767  0B19  00A4               	movwf	___awtoft@c+1
 14768  0B1A  3191  211D  318A   	fcall	___awtoft
 14769  0B1D  0020               	movlb	0	; select bank0
 14770  0B1E  0823               	movf	?___awtoft,w
 14771  0B1F  00AC               	movwf	___ftdiv@f1
 14772  0B20  0824               	movf	?___awtoft+1,w
 14773  0B21  00AD               	movwf	___ftdiv@f1+1
 14774  0B22  0825               	movf	?___awtoft+2,w
 14775  0B23  00AE               	movwf	___ftdiv@f1+2
 14776  0B24  085A               	movf	setDimmerLights_PercentValue@i,w
 14777  0B25  00A9               	movwf	___ftdiv@f2
 14778  0B26  085B               	movf	setDimmerLights_PercentValue@i+1,w
 14779  0B27  00AA               	movwf	___ftdiv@f2+1
 14780  0B28  085C               	movf	setDimmerLights_PercentValue@i+2,w
 14781  0B29  00AB               	movwf	___ftdiv@f2+2
 14782  0B2A  318E  26A7  318A   	fcall	___ftdiv
 14783  0B2D  0020               	movlb	0	; select bank0
 14784  0B2E  0829               	movf	?___ftdiv,w
 14785  0B2F  00B9               	movwf	___ftneg@f1
 14786  0B30  082A               	movf	?___ftdiv+1,w
 14787  0B31  00BA               	movwf	___ftneg@f1+1
 14788  0B32  082B               	movf	?___ftdiv+2,w
 14789  0B33  00BB               	movwf	___ftneg@f1+2
 14790  0B34  319C  2462  318A   	fcall	___ftneg
 14791  0B37  0020               	movlb	0	; select bank0
 14792  0B38  0839               	movf	?___ftneg,w
 14793  0B39  00BF               	movwf	___ftadd@f2
 14794  0B3A  083A               	movf	?___ftneg+1,w
 14795  0B3B  00C0               	movwf	___ftadd@f2+1
 14796  0B3C  083B               	movf	?___ftneg+2,w
 14797  0B3D  00C1               	movwf	___ftadd@f2+2
 14798  0B3E  3000               	movlw	0
 14799  0B3F  00BC               	movwf	___ftadd@f1
 14800  0B40  30C8               	movlw	200
 14801  0B41  00BD               	movwf	___ftadd@f1+1
 14802  0B42  3042               	movlw	66
 14803  0B43  00BE               	movwf	___ftadd@f1+2
 14804  0B44  3184  246A  318A   	fcall	___ftadd
 14805  0B47  0020               	movlb	0	; select bank0
 14806  0B48  083C               	movf	?___ftadd,w
 14807  0B49  00C9               	movwf	___fttol@f1
 14808  0B4A  083D               	movf	?___ftadd+1,w
 14809  0B4B  00CA               	movwf	___fttol@f1+1
 14810  0B4C  083E               	movf	?___ftadd+2,w
 14811  0B4D  00CB               	movwf	___fttol@f1+2
 14812  0B4E  318D  2590         	fcall	___fttol
 14813  0B50  0020               	movlb	0	; select bank0
 14814  0B51  0849               	movf	?___fttol,w
 14815  0B52  0008               	return
 14816  0B53                     __end_of_setDimmerLights_PercentValue:	
 14817                           
 14818                           	psect	text99
 14819  0D90                     __ptext99:	
 14820 ;; *************** function ___fttol *****************
 14821 ;; Defined at:
 14822 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14823 ;; Parameters:    Size  Location     Type
 14824 ;;  f1              3   41[BANK0 ] float 
 14825 ;; Auto vars:     Size  Location     Type
 14826 ;;  lval            4   50[BANK0 ] unsigned long 
 14827 ;;  exp1            1   54[BANK0 ] unsigned char 
 14828 ;;  sign1           1   49[BANK0 ] unsigned char 
 14829 ;; Return value:  Size  Location     Type
 14830 ;;                  4   41[BANK0 ] long 
 14831 ;; Registers used:
 14832 ;;		wreg, status,2, status,0
 14833 ;; Tracked objects:
 14834 ;;		On entry : 0/0
 14835 ;;		On exit  : 0/0
 14836 ;;		Unchanged: 0/0
 14837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14838 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14839 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14840 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14841 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14842 ;;Total ram usage:       14 bytes
 14843 ;; Hardware stack levels used:    1
 14844 ;; Hardware stack levels required when called:    3
 14845 ;; This function calls:
 14846 ;;		Nothing
 14847 ;; This function is called by:
 14848 ;;		_setDimmerLights_PercentValue
 14849 ;; This function uses a non-reentrant model
 14850 ;;
 14851                           
 14852                           
 14853                           ;psect for function ___fttol
 14854  0D90                     ___fttol:	
 14855                           
 14856                           ;incstack = 0
 14857                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14858  0D90  0020               	movlb	0	; select bank0
 14859  0D91  0849               	movf	___fttol@f1,w
 14860  0D92  00CD               	movwf	??___fttol
 14861  0D93  084A               	movf	___fttol@f1+1,w
 14862  0D94  00CE               	movwf	??___fttol+1
 14863  0D95  084B               	movf	___fttol@f1+2,w
 14864  0D96  00CF               	movwf	??___fttol+2
 14865  0D97  1003               	clrc
 14866  0D98  0D4E               	rlf	??___fttol+1,w
 14867  0D99  0D4F               	rlf	??___fttol+2,w
 14868  0D9A  00D0               	movwf	??___fttol+3
 14869  0D9B  0850               	movf	??___fttol+3,w
 14870  0D9C  00D6               	movwf	___fttol@exp1
 14871  0D9D  08D6               	movf	___fttol@exp1,f
 14872  0D9E  1D03               	skipz
 14873  0D9F  2DA9               	goto	l6492
 14874  0DA0  3000               	movlw	0
 14875  0DA1  00CC               	movwf	?___fttol+3
 14876  0DA2  3000               	movlw	0
 14877  0DA3  00CB               	movwf	?___fttol+2
 14878  0DA4  3000               	movlw	0
 14879  0DA5  00CA               	movwf	?___fttol+1
 14880  0DA6  3000               	movlw	0
 14881  0DA7  00C9               	movwf	?___fttol
 14882  0DA8  0008               	return
 14883  0DA9                     l6492:	
 14884  0DA9  0849               	movf	___fttol@f1,w
 14885  0DAA  00CD               	movwf	??___fttol
 14886  0DAB  084A               	movf	___fttol@f1+1,w
 14887  0DAC  00CE               	movwf	??___fttol+1
 14888  0DAD  084B               	movf	___fttol@f1+2,w
 14889  0DAE  00CF               	movwf	??___fttol+2
 14890  0DAF  3017               	movlw	23
 14891  0DB0                     u5585:	
 14892  0DB0  36CF               	lsrf	??___fttol+2,f
 14893  0DB1  0CCE               	rrf	??___fttol+1,f
 14894  0DB2  0CCD               	rrf	??___fttol,f
 14895  0DB3  0B89               	decfsz	9,f
 14896  0DB4  2DB0               	goto	u5585
 14897  0DB5  084D               	movf	??___fttol,w
 14898  0DB6  00D0               	movwf	??___fttol+3
 14899  0DB7  0850               	movf	??___fttol+3,w
 14900  0DB8  00D1               	movwf	___fttol@sign1
 14901  0DB9  17CA               	bsf	___fttol@f1+1,7
 14902  0DBA  30FF               	movlw	255
 14903  0DBB  05C9               	andwf	___fttol@f1,f
 14904  0DBC  30FF               	movlw	255
 14905  0DBD  05CA               	andwf	___fttol@f1+1,f
 14906  0DBE  3000               	movlw	0
 14907  0DBF  05CB               	andwf	___fttol@f1+2,f
 14908  0DC0  0849               	movf	___fttol@f1,w
 14909  0DC1  00D2               	movwf	___fttol@lval
 14910  0DC2  084A               	movf	___fttol@f1+1,w
 14911  0DC3  00D3               	movwf	___fttol@lval+1
 14912  0DC4  084B               	movf	___fttol@f1+2,w
 14913  0DC5  00D4               	movwf	___fttol@lval+2
 14914  0DC6  01D5               	clrf	___fttol@lval+3
 14915  0DC7  308E               	movlw	142
 14916  0DC8  02D6               	subwf	___fttol@exp1,f
 14917  0DC9  1FD6               	btfss	___fttol@exp1,7
 14918  0DCA  2DE7               	goto	l6512
 14919  0DCB  0856               	movf	___fttol@exp1,w
 14920  0DCC  3A80               	xorlw	128
 14921  0DCD  3E8F               	addlw	143
 14922  0DCE  1803               	skipnc
 14923  0DCF  2DD9               	goto	l6510
 14924  0DD0  3000               	movlw	0
 14925  0DD1  00CC               	movwf	?___fttol+3
 14926  0DD2  3000               	movlw	0
 14927  0DD3  00CB               	movwf	?___fttol+2
 14928  0DD4  3000               	movlw	0
 14929  0DD5  00CA               	movwf	?___fttol+1
 14930  0DD6  3000               	movlw	0
 14931  0DD7  00C9               	movwf	?___fttol
 14932  0DD8  0008               	return
 14933  0DD9                     l6510:	
 14934  0DD9  3001               	movlw	1
 14935  0DDA                     u5615:	
 14936  0DDA  36D5               	lsrf	___fttol@lval+3,f
 14937  0DDB  0CD4               	rrf	___fttol@lval+2,f
 14938  0DDC  0CD3               	rrf	___fttol@lval+1,f
 14939  0DDD  0CD2               	rrf	___fttol@lval,f
 14940  0DDE  0B89               	decfsz	9,f
 14941  0DDF  2DDA               	goto	u5615
 14942  0DE0  3001               	movlw	1
 14943  0DE1  00CD               	movwf	??___fttol
 14944  0DE2  084D               	movf	??___fttol,w
 14945  0DE3  07D6               	addwf	___fttol@exp1,f
 14946  0DE4  1903               	btfsc	3,2
 14947  0DE5  2E00               	goto	l6522
 14948  0DE6  2DD9               	goto	l6510
 14949  0DE7                     l6512:	
 14950  0DE7  3018               	movlw	24
 14951  0DE8  0256               	subwf	___fttol@exp1,w
 14952  0DE9  1C03               	skipc
 14953  0DEA  2DFD               	goto	l6520
 14954  0DEB  3000               	movlw	0
 14955  0DEC  00CC               	movwf	?___fttol+3
 14956  0DED  3000               	movlw	0
 14957  0DEE  00CB               	movwf	?___fttol+2
 14958  0DEF  3000               	movlw	0
 14959  0DF0  00CA               	movwf	?___fttol+1
 14960  0DF1  3000               	movlw	0
 14961  0DF2  00C9               	movwf	?___fttol
 14962  0DF3  0008               	return
 14963  0DF4                     l6518:	
 14964  0DF4  3001               	movlw	1
 14965  0DF5                     u5645:	
 14966  0DF5  35D2               	lslf	___fttol@lval,f
 14967  0DF6  0DD3               	rlf	___fttol@lval+1,f
 14968  0DF7  0DD4               	rlf	___fttol@lval+2,f
 14969  0DF8  0DD5               	rlf	___fttol@lval+3,f
 14970  0DF9  0B89               	decfsz	9,f
 14971  0DFA  2DF5               	goto	u5645
 14972  0DFB  3001               	movlw	1
 14973  0DFC  02D6               	subwf	___fttol@exp1,f
 14974  0DFD                     l6520:	
 14975  0DFD  08D6               	movf	___fttol@exp1,f
 14976  0DFE  1D03               	skipz
 14977  0DFF  2DF4               	goto	l6518
 14978  0E00                     l6522:	
 14979  0E00  0851               	movf	___fttol@sign1,w
 14980  0E01  1903               	btfsc	3,2
 14981  0E02  2E0E               	goto	l6526
 14982  0E03  09D2               	comf	___fttol@lval,f
 14983  0E04  09D3               	comf	___fttol@lval+1,f
 14984  0E05  09D4               	comf	___fttol@lval+2,f
 14985  0E06  09D5               	comf	___fttol@lval+3,f
 14986  0E07  0AD2               	incf	___fttol@lval,f
 14987  0E08  1903               	skipnz
 14988  0E09  0AD3               	incf	___fttol@lval+1,f
 14989  0E0A  1903               	skipnz
 14990  0E0B  0AD4               	incf	___fttol@lval+2,f
 14991  0E0C  1903               	skipnz
 14992  0E0D  0AD5               	incf	___fttol@lval+3,f
 14993  0E0E                     l6526:	
 14994  0E0E  0855               	movf	___fttol@lval+3,w
 14995  0E0F  00CC               	movwf	?___fttol+3
 14996  0E10  0854               	movf	___fttol@lval+2,w
 14997  0E11  00CB               	movwf	?___fttol+2
 14998  0E12  0853               	movf	___fttol@lval+1,w
 14999  0E13  00CA               	movwf	?___fttol+1
 15000  0E14  0852               	movf	___fttol@lval,w
 15001  0E15  00C9               	movwf	?___fttol
 15002  0E16  0008               	return
 15003  0E17                     __end_of___fttol:	
 15004                           
 15005                           	psect	text100
 15006  1C62                     __ptext100:	
 15007 ;; *************** function ___ftneg *****************
 15008 ;; Defined at:
 15009 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 15010 ;; Parameters:    Size  Location     Type
 15011 ;;  f1              3   25[BANK0 ] float 
 15012 ;; Auto vars:     Size  Location     Type
 15013 ;;		None
 15014 ;; Return value:  Size  Location     Type
 15015 ;;                  3   25[BANK0 ] float 
 15016 ;; Registers used:
 15017 ;;		wreg
 15018 ;; Tracked objects:
 15019 ;;		On entry : 0/0
 15020 ;;		On exit  : 0/0
 15021 ;;		Unchanged: 0/0
 15022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15023 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15026 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15027 ;;Total ram usage:        3 bytes
 15028 ;; Hardware stack levels used:    1
 15029 ;; Hardware stack levels required when called:    3
 15030 ;; This function calls:
 15031 ;;		Nothing
 15032 ;; This function is called by:
 15033 ;;		_setDimmerLights_PercentValue
 15034 ;; This function uses a non-reentrant model
 15035 ;;
 15036                           
 15037                           
 15038                           ;psect for function ___ftneg
 15039  1C62                     ___ftneg:	
 15040                           
 15041                           ;incstack = 0
 15042                           ; Regs used in ___ftneg: [wreg]
 15043  1C62  0020               	movlb	0	; select bank0
 15044  1C63  083B               	movf	___ftneg@f1+2,w
 15045  1C64  043A               	iorwf	___ftneg@f1+1,w
 15046  1C65  0439               	iorwf	___ftneg@f1,w
 15047  1C66  1903               	skipnz
 15048  1C67  0008               	return
 15049  1C68  3080               	movlw	128
 15050  1C69  06BB               	xorwf	___ftneg@f1+2,f
 15051  1C6A  0008               	return
 15052  1C6B                     __end_of___ftneg:	
 15053                           
 15054                           	psect	text101
 15055  0EA7                     __ptext101:	
 15056 ;; *************** function ___ftdiv *****************
 15057 ;; Defined at:
 15058 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15059 ;; Parameters:    Size  Location     Type
 15060 ;;  f2              3    9[BANK0 ] float 
 15061 ;;  f1              3   12[BANK0 ] float 
 15062 ;; Auto vars:     Size  Location     Type
 15063 ;;  f3              3   20[BANK0 ] float 
 15064 ;;  sign            1   24[BANK0 ] unsigned char 
 15065 ;;  exp             1   23[BANK0 ] unsigned char 
 15066 ;;  cntr            1   19[BANK0 ] unsigned char 
 15067 ;; Return value:  Size  Location     Type
 15068 ;;                  3    9[BANK0 ] float 
 15069 ;; Registers used:
 15070 ;;		wreg, status,2, status,0, pclath, cstack
 15071 ;; Tracked objects:
 15072 ;;		On entry : 0/0
 15073 ;;		On exit  : 0/0
 15074 ;;		Unchanged: 0/0
 15075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15076 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15077 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15078 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;Total ram usage:       16 bytes
 15081 ;; Hardware stack levels used:    1
 15082 ;; Hardware stack levels required when called:    4
 15083 ;; This function calls:
 15084 ;;		___ftpack
 15085 ;; This function is called by:
 15086 ;;		_setDimmerLights_PercentValue
 15087 ;;		_getDimmerLights_PercentValue
 15088 ;; This function uses a non-reentrant model
 15089 ;;
 15090                           
 15091                           
 15092                           ;psect for function ___ftdiv
 15093  0EA7                     ___ftdiv:	
 15094                           
 15095                           ;incstack = 0
 15096                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15097  0EA7  0020               	movlb	0	; select bank0
 15098  0EA8  082C               	movf	___ftdiv@f1,w
 15099  0EA9  00AF               	movwf	??___ftdiv
 15100  0EAA  082D               	movf	___ftdiv@f1+1,w
 15101  0EAB  00B0               	movwf	??___ftdiv+1
 15102  0EAC  082E               	movf	___ftdiv@f1+2,w
 15103  0EAD  00B1               	movwf	??___ftdiv+2
 15104  0EAE  1003               	clrc
 15105  0EAF  0D30               	rlf	??___ftdiv+1,w
 15106  0EB0  0D31               	rlf	??___ftdiv+2,w
 15107  0EB1  00B2               	movwf	??___ftdiv+3
 15108  0EB2  0832               	movf	??___ftdiv+3,w
 15109  0EB3  00B7               	movwf	___ftdiv@exp
 15110  0EB4  08B7               	movf	___ftdiv@exp,f
 15111  0EB5  1D03               	skipz
 15112  0EB6  2EBE               	goto	l8866
 15113  0EB7  3000               	movlw	0
 15114  0EB8  00A9               	movwf	?___ftdiv
 15115  0EB9  3000               	movlw	0
 15116  0EBA  00AA               	movwf	?___ftdiv+1
 15117  0EBB  3000               	movlw	0
 15118  0EBC  00AB               	movwf	?___ftdiv+2
 15119  0EBD  0008               	return
 15120  0EBE                     l8866:	
 15121  0EBE  0829               	movf	___ftdiv@f2,w
 15122  0EBF  00AF               	movwf	??___ftdiv
 15123  0EC0  082A               	movf	___ftdiv@f2+1,w
 15124  0EC1  00B0               	movwf	??___ftdiv+1
 15125  0EC2  082B               	movf	___ftdiv@f2+2,w
 15126  0EC3  00B1               	movwf	??___ftdiv+2
 15127  0EC4  1003               	clrc
 15128  0EC5  0D30               	rlf	??___ftdiv+1,w
 15129  0EC6  0D31               	rlf	??___ftdiv+2,w
 15130  0EC7  00B2               	movwf	??___ftdiv+3
 15131  0EC8  0832               	movf	??___ftdiv+3,w
 15132  0EC9  00B8               	movwf	___ftdiv@sign
 15133  0ECA  08B8               	movf	___ftdiv@sign,f
 15134  0ECB  1D03               	skipz
 15135  0ECC  2ED4               	goto	l8872
 15136  0ECD  3000               	movlw	0
 15137  0ECE  00A9               	movwf	?___ftdiv
 15138  0ECF  3000               	movlw	0
 15139  0ED0  00AA               	movwf	?___ftdiv+1
 15140  0ED1  3000               	movlw	0
 15141  0ED2  00AB               	movwf	?___ftdiv+2
 15142  0ED3  0008               	return
 15143  0ED4                     l8872:	
 15144  0ED4  3000               	movlw	0
 15145  0ED5  00B4               	movwf	___ftdiv@f3
 15146  0ED6  3000               	movlw	0
 15147  0ED7  00B5               	movwf	___ftdiv@f3+1
 15148  0ED8  3000               	movlw	0
 15149  0ED9  00B6               	movwf	___ftdiv@f3+2
 15150  0EDA  3089               	movlw	137
 15151  0EDB  0738               	addwf	___ftdiv@sign,w
 15152  0EDC  00AF               	movwf	??___ftdiv
 15153  0EDD  082F               	movf	??___ftdiv,w
 15154  0EDE  02B7               	subwf	___ftdiv@exp,f
 15155  0EDF  082C               	movf	___ftdiv@f1,w
 15156  0EE0  00AF               	movwf	??___ftdiv
 15157  0EE1  082D               	movf	___ftdiv@f1+1,w
 15158  0EE2  00B0               	movwf	??___ftdiv+1
 15159  0EE3  082E               	movf	___ftdiv@f1+2,w
 15160  0EE4  00B1               	movwf	??___ftdiv+2
 15161  0EE5  3010               	movlw	16
 15162  0EE6                     u9695:	
 15163  0EE6  36B1               	lsrf	??___ftdiv+2,f
 15164  0EE7  0CB0               	rrf	??___ftdiv+1,f
 15165  0EE8  0CAF               	rrf	??___ftdiv,f
 15166  0EE9  0B89               	decfsz	9,f
 15167  0EEA  2EE6               	goto	u9695
 15168  0EEB  082F               	movf	??___ftdiv,w
 15169  0EEC  00B2               	movwf	??___ftdiv+3
 15170  0EED  0832               	movf	??___ftdiv+3,w
 15171  0EEE  00B8               	movwf	___ftdiv@sign
 15172  0EEF  0829               	movf	___ftdiv@f2,w
 15173  0EF0  00AF               	movwf	??___ftdiv
 15174  0EF1  082A               	movf	___ftdiv@f2+1,w
 15175  0EF2  00B0               	movwf	??___ftdiv+1
 15176  0EF3  082B               	movf	___ftdiv@f2+2,w
 15177  0EF4  00B1               	movwf	??___ftdiv+2
 15178  0EF5  3010               	movlw	16
 15179  0EF6                     u9705:	
 15180  0EF6  36B1               	lsrf	??___ftdiv+2,f
 15181  0EF7  0CB0               	rrf	??___ftdiv+1,f
 15182  0EF8  0CAF               	rrf	??___ftdiv,f
 15183  0EF9  0B89               	decfsz	9,f
 15184  0EFA  2EF6               	goto	u9705
 15185  0EFB  082F               	movf	??___ftdiv,w
 15186  0EFC  00B2               	movwf	??___ftdiv+3
 15187  0EFD  0832               	movf	??___ftdiv+3,w
 15188  0EFE  06B8               	xorwf	___ftdiv@sign,f
 15189  0EFF  3080               	movlw	128
 15190  0F00  00AF               	movwf	??___ftdiv
 15191  0F01  082F               	movf	??___ftdiv,w
 15192  0F02  05B8               	andwf	___ftdiv@sign,f
 15193  0F03  17AD               	bsf	___ftdiv@f1+1,7
 15194  0F04  30FF               	movlw	255
 15195  0F05  05AC               	andwf	___ftdiv@f1,f
 15196  0F06  30FF               	movlw	255
 15197  0F07  05AD               	andwf	___ftdiv@f1+1,f
 15198  0F08  3000               	movlw	0
 15199  0F09  05AE               	andwf	___ftdiv@f1+2,f
 15200  0F0A  17AA               	bsf	___ftdiv@f2+1,7
 15201  0F0B  30FF               	movlw	255
 15202  0F0C  05A9               	andwf	___ftdiv@f2,f
 15203  0F0D  30FF               	movlw	255
 15204  0F0E  05AA               	andwf	___ftdiv@f2+1,f
 15205  0F0F  3000               	movlw	0
 15206  0F10  05AB               	andwf	___ftdiv@f2+2,f
 15207  0F11  3018               	movlw	24
 15208  0F12  00AF               	movwf	??___ftdiv
 15209  0F13  082F               	movf	??___ftdiv,w
 15210  0F14  00B3               	movwf	___ftdiv@cntr
 15211  0F15                     l8886:	
 15212  0F15  3001               	movlw	1
 15213  0F16                     u9715:	
 15214  0F16  35B4               	lslf	___ftdiv@f3,f
 15215  0F17  0DB5               	rlf	___ftdiv@f3+1,f
 15216  0F18  0DB6               	rlf	___ftdiv@f3+2,f
 15217  0F19  0B89               	decfsz	9,f
 15218  0F1A  2F16               	goto	u9715
 15219  0F1B  082B               	movf	___ftdiv@f2+2,w
 15220  0F1C  022E               	subwf	___ftdiv@f1+2,w
 15221  0F1D  1D03               	skipz
 15222  0F1E  2F25               	goto	u9725
 15223  0F1F  082A               	movf	___ftdiv@f2+1,w
 15224  0F20  022D               	subwf	___ftdiv@f1+1,w
 15225  0F21  1D03               	skipz
 15226  0F22  2F25               	goto	u9725
 15227  0F23  0829               	movf	___ftdiv@f2,w
 15228  0F24  022C               	subwf	___ftdiv@f1,w
 15229  0F25                     u9725:	
 15230  0F25  1C03               	skipc
 15231  0F26  2F2E               	goto	l8894
 15232  0F27  0829               	movf	___ftdiv@f2,w
 15233  0F28  02AC               	subwf	___ftdiv@f1,f
 15234  0F29  082A               	movf	___ftdiv@f2+1,w
 15235  0F2A  3BAD               	subwfb	___ftdiv@f1+1,f
 15236  0F2B  082B               	movf	___ftdiv@f2+2,w
 15237  0F2C  3BAE               	subwfb	___ftdiv@f1+2,f
 15238  0F2D  1434               	bsf	___ftdiv@f3,0
 15239  0F2E                     l8894:	
 15240  0F2E  3001               	movlw	1
 15241  0F2F                     u9735:	
 15242  0F2F  35AC               	lslf	___ftdiv@f1,f
 15243  0F30  0DAD               	rlf	___ftdiv@f1+1,f
 15244  0F31  0DAE               	rlf	___ftdiv@f1+2,f
 15245  0F32  0B89               	decfsz	9,f
 15246  0F33  2F2F               	goto	u9735
 15247  0F34  3001               	movlw	1
 15248  0F35  02B3               	subwf	___ftdiv@cntr,f
 15249  0F36  1D03               	btfss	3,2
 15250  0F37  2F15               	goto	l8886
 15251  0F38  0834               	movf	___ftdiv@f3,w
 15252  0F39  00F3               	movwf	___ftpack@arg
 15253  0F3A  0835               	movf	___ftdiv@f3+1,w
 15254  0F3B  00F4               	movwf	___ftpack@arg+1
 15255  0F3C  0836               	movf	___ftdiv@f3+2,w
 15256  0F3D  00F5               	movwf	___ftpack@arg+2
 15257  0F3E  0837               	movf	___ftdiv@exp,w
 15258  0F3F  00AF               	movwf	??___ftdiv
 15259  0F40  082F               	movf	??___ftdiv,w
 15260  0F41  00F6               	movwf	___ftpack@exp
 15261  0F42  0838               	movf	___ftdiv@sign,w
 15262  0F43  00B0               	movwf	??___ftdiv+1
 15263  0F44  0830               	movf	??___ftdiv+1,w
 15264  0F45  00F7               	movwf	___ftpack@sign
 15265  0F46  3189  2161         	fcall	___ftpack
 15266  0F48  0873               	movf	?___ftpack,w
 15267  0F49  0020               	movlb	0	; select bank0
 15268  0F4A  00A9               	movwf	?___ftdiv
 15269  0F4B  0874               	movf	?___ftpack+1,w
 15270  0F4C  00AA               	movwf	?___ftdiv+1
 15271  0F4D  0875               	movf	?___ftpack+2,w
 15272  0F4E  00AB               	movwf	?___ftdiv+2
 15273  0F4F  0008               	return
 15274  0F50                     __end_of___ftdiv:	
 15275                           
 15276                           	psect	text102
 15277  046A                     __ptext102:	
 15278 ;; *************** function ___ftadd *****************
 15279 ;; Defined at:
 15280 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 15281 ;; Parameters:    Size  Location     Type
 15282 ;;  f1              3   28[BANK0 ] float 
 15283 ;;  f2              3   31[BANK0 ] float 
 15284 ;; Auto vars:     Size  Location     Type
 15285 ;;  exp1            1   40[BANK0 ] unsigned char 
 15286 ;;  exp2            1   39[BANK0 ] unsigned char 
 15287 ;;  sign            1   38[BANK0 ] unsigned char 
 15288 ;; Return value:  Size  Location     Type
 15289 ;;                  3   28[BANK0 ] float 
 15290 ;; Registers used:
 15291 ;;		wreg, status,2, status,0, pclath, cstack
 15292 ;; Tracked objects:
 15293 ;;		On entry : 0/0
 15294 ;;		On exit  : 0/0
 15295 ;;		Unchanged: 0/0
 15296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15297 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15298 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15299 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15300 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15301 ;;Total ram usage:       13 bytes
 15302 ;; Hardware stack levels used:    1
 15303 ;; Hardware stack levels required when called:    4
 15304 ;; This function calls:
 15305 ;;		___ftpack
 15306 ;; This function is called by:
 15307 ;;		_setDimmerLights_PercentValue
 15308 ;; This function uses a non-reentrant model
 15309 ;;
 15310                           
 15311                           
 15312                           ;psect for function ___ftadd
 15313  046A                     ___ftadd:	
 15314                           
 15315                           ;incstack = 0
 15316                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 15317  046A  0020               	movlb	0	; select bank0
 15318  046B  083C               	movf	___ftadd@f1,w
 15319  046C  00C2               	movwf	??___ftadd
 15320  046D  083D               	movf	___ftadd@f1+1,w
 15321  046E  00C3               	movwf	??___ftadd+1
 15322  046F  083E               	movf	___ftadd@f1+2,w
 15323  0470  00C4               	movwf	??___ftadd+2
 15324  0471  1003               	clrc
 15325  0472  0D43               	rlf	??___ftadd+1,w
 15326  0473  0D44               	rlf	??___ftadd+2,w
 15327  0474  00C5               	movwf	??___ftadd+3
 15328  0475  0845               	movf	??___ftadd+3,w
 15329  0476  00C8               	movwf	___ftadd@exp1
 15330  0477  083F               	movf	___ftadd@f2,w
 15331  0478  00C2               	movwf	??___ftadd
 15332  0479  0840               	movf	___ftadd@f2+1,w
 15333  047A  00C3               	movwf	??___ftadd+1
 15334  047B  0841               	movf	___ftadd@f2+2,w
 15335  047C  00C4               	movwf	??___ftadd+2
 15336  047D  1003               	clrc
 15337  047E  0D43               	rlf	??___ftadd+1,w
 15338  047F  0D44               	rlf	??___ftadd+2,w
 15339  0480  00C5               	movwf	??___ftadd+3
 15340  0481  0845               	movf	??___ftadd+3,w
 15341  0482  00C7               	movwf	___ftadd@exp2
 15342  0483  0848               	movf	___ftadd@exp1,w
 15343  0484  1903               	btfsc	3,2
 15344  0485  2C92               	goto	l8796
 15345  0486  0847               	movf	___ftadd@exp2,w
 15346  0487  0248               	subwf	___ftadd@exp1,w
 15347  0488  1803               	skipnc
 15348  0489  2C99               	goto	l8800
 15349  048A  0348               	decf	___ftadd@exp1,w
 15350  048B  3AFF               	xorlw	255
 15351  048C  0747               	addwf	___ftadd@exp2,w
 15352  048D  00C2               	movwf	??___ftadd
 15353  048E  3019               	movlw	25
 15354  048F  0242               	subwf	??___ftadd,w
 15355  0490  1C03               	skipc
 15356  0491  2C99               	goto	l8800
 15357  0492                     l8796:	
 15358  0492  083F               	movf	___ftadd@f2,w
 15359  0493  00BC               	movwf	?___ftadd
 15360  0494  0840               	movf	___ftadd@f2+1,w
 15361  0495  00BD               	movwf	?___ftadd+1
 15362  0496  0841               	movf	___ftadd@f2+2,w
 15363  0497  00BE               	movwf	?___ftadd+2
 15364  0498  0008               	return
 15365  0499                     l8800:	
 15366  0499  0847               	movf	___ftadd@exp2,w
 15367  049A  1903               	btfsc	3,2
 15368  049B  0008               	return
 15369  049C  0848               	movf	___ftadd@exp1,w
 15370  049D  0247               	subwf	___ftadd@exp2,w
 15371  049E  1803               	skipnc
 15372  049F  2CA8               	goto	l8806
 15373  04A0  0347               	decf	___ftadd@exp2,w
 15374  04A1  3AFF               	xorlw	255
 15375  04A2  0748               	addwf	___ftadd@exp1,w
 15376  04A3  00C2               	movwf	??___ftadd
 15377  04A4  3019               	movlw	25
 15378  04A5  0242               	subwf	??___ftadd,w
 15379  04A6  1803               	btfsc	3,0
 15380  04A7  0008               	return
 15381  04A8                     l8806:	
 15382  04A8  3006               	movlw	6
 15383  04A9  00C2               	movwf	??___ftadd
 15384  04AA  0842               	movf	??___ftadd,w
 15385  04AB  00C6               	movwf	___ftadd@sign
 15386  04AC  1BBE               	btfsc	___ftadd@f1+2,7
 15387  04AD  17C6               	bsf	___ftadd@sign,7
 15388  04AE  1BC1               	btfsc	___ftadd@f2+2,7
 15389  04AF  1746               	bsf	___ftadd@sign,6
 15390  04B0  17BD               	bsf	___ftadd@f1+1,7
 15391  04B1  30FF               	movlw	255
 15392  04B2  05BC               	andwf	___ftadd@f1,f
 15393  04B3  30FF               	movlw	255
 15394  04B4  05BD               	andwf	___ftadd@f1+1,f
 15395  04B5  3000               	movlw	0
 15396  04B6  05BE               	andwf	___ftadd@f1+2,f
 15397  04B7  17C0               	bsf	___ftadd@f2+1,7
 15398  04B8  30FF               	movlw	255
 15399  04B9  05BF               	andwf	___ftadd@f2,f
 15400  04BA  30FF               	movlw	255
 15401  04BB  05C0               	andwf	___ftadd@f2+1,f
 15402  04BC  3000               	movlw	0
 15403  04BD  05C1               	andwf	___ftadd@f2+2,f
 15404  04BE  0847               	movf	___ftadd@exp2,w
 15405  04BF  0248               	subwf	___ftadd@exp1,w
 15406  04C0  1803               	skipnc
 15407  04C1  2CE4               	goto	l8828
 15408  04C2                     l8818:	
 15409  04C2  3001               	movlw	1
 15410  04C3                     u9535:	
 15411  04C3  35BF               	lslf	___ftadd@f2,f
 15412  04C4  0DC0               	rlf	___ftadd@f2+1,f
 15413  04C5  0DC1               	rlf	___ftadd@f2+2,f
 15414  04C6  0B89               	decfsz	9,f
 15415  04C7  2CC3               	goto	u9535
 15416  04C8  3001               	movlw	1
 15417  04C9  02C7               	subwf	___ftadd@exp2,f
 15418  04CA  0847               	movf	___ftadd@exp2,w
 15419  04CB  0648               	xorwf	___ftadd@exp1,w
 15420  04CC  1903               	skipnz
 15421  04CD  2CDF               	goto	l8826
 15422  04CE  3001               	movlw	1
 15423  04CF  02C6               	subwf	___ftadd@sign,f
 15424  04D0  0846               	movf	___ftadd@sign,w
 15425  04D1  3907               	andlw	7
 15426  04D2  1903               	btfsc	3,2
 15427  04D3  2CDF               	goto	l8826
 15428  04D4  2CC2               	goto	l8818
 15429  04D5                     l8824:	
 15430  04D5  3001               	movlw	1
 15431  04D6                     u9565:	
 15432  04D6  36BE               	lsrf	___ftadd@f1+2,f
 15433  04D7  0CBD               	rrf	___ftadd@f1+1,f
 15434  04D8  0CBC               	rrf	___ftadd@f1,f
 15435  04D9  0B89               	decfsz	9,f
 15436  04DA  2CD6               	goto	u9565
 15437  04DB  3001               	movlw	1
 15438  04DC  00C2               	movwf	??___ftadd
 15439  04DD  0842               	movf	??___ftadd,w
 15440  04DE  07C8               	addwf	___ftadd@exp1,f
 15441  04DF                     l8826:	
 15442  04DF  0848               	movf	___ftadd@exp1,w
 15443  04E0  0647               	xorwf	___ftadd@exp2,w
 15444  04E1  1903               	btfsc	3,2
 15445  04E2  2D09               	goto	l3053
 15446  04E3  2CD5               	goto	l8824
 15447  04E4                     l8828:	
 15448  04E4  0848               	movf	___ftadd@exp1,w
 15449  04E5  0247               	subwf	___ftadd@exp2,w
 15450  04E6  1803               	skipnc
 15451  04E7  2D09               	goto	l3053
 15452  04E8                     l8830:	
 15453  04E8  3001               	movlw	1
 15454  04E9                     u9595:	
 15455  04E9  35BC               	lslf	___ftadd@f1,f
 15456  04EA  0DBD               	rlf	___ftadd@f1+1,f
 15457  04EB  0DBE               	rlf	___ftadd@f1+2,f
 15458  04EC  0B89               	decfsz	9,f
 15459  04ED  2CE9               	goto	u9595
 15460  04EE  3001               	movlw	1
 15461  04EF  02C8               	subwf	___ftadd@exp1,f
 15462  04F0  0847               	movf	___ftadd@exp2,w
 15463  04F1  0648               	xorwf	___ftadd@exp1,w
 15464  04F2  1903               	skipnz
 15465  04F3  2D05               	goto	l8838
 15466  04F4  3001               	movlw	1
 15467  04F5  02C6               	subwf	___ftadd@sign,f
 15468  04F6  0846               	movf	___ftadd@sign,w
 15469  04F7  3907               	andlw	7
 15470  04F8  1903               	btfsc	3,2
 15471  04F9  2D05               	goto	l8838
 15472  04FA  2CE8               	goto	l8830
 15473  04FB                     l8836:	
 15474  04FB  3001               	movlw	1
 15475  04FC                     u9625:	
 15476  04FC  36C1               	lsrf	___ftadd@f2+2,f
 15477  04FD  0CC0               	rrf	___ftadd@f2+1,f
 15478  04FE  0CBF               	rrf	___ftadd@f2,f
 15479  04FF  0B89               	decfsz	9,f
 15480  0500  2CFC               	goto	u9625
 15481  0501  3001               	movlw	1
 15482  0502  00C2               	movwf	??___ftadd
 15483  0503  0842               	movf	??___ftadd,w
 15484  0504  07C7               	addwf	___ftadd@exp2,f
 15485  0505                     l8838:	
 15486  0505  0848               	movf	___ftadd@exp1,w
 15487  0506  0647               	xorwf	___ftadd@exp2,w
 15488  0507  1D03               	skipz
 15489  0508  2CFB               	goto	l8836
 15490  0509                     l3053:	
 15491  0509  1FC6               	btfss	___ftadd@sign,7
 15492  050A  2D1B               	goto	l8842
 15493  050B  30FF               	movlw	255
 15494  050C  06BC               	xorwf	___ftadd@f1,f
 15495  050D  30FF               	movlw	255
 15496  050E  06BD               	xorwf	___ftadd@f1+1,f
 15497  050F  30FF               	movlw	255
 15498  0510  06BE               	xorwf	___ftadd@f1+2,f
 15499  0511  3001               	movlw	1
 15500  0512  07BC               	addwf	___ftadd@f1,f
 15501  0513  3000               	movlw	0
 15502  0514  1803               	skipnc
 15503  0515  3001               	movlw	1
 15504  0516  07BD               	addwf	___ftadd@f1+1,f
 15505  0517  3000               	movlw	0
 15506  0518  1803               	skipnc
 15507  0519  3001               	movlw	1
 15508  051A  07BE               	addwf	___ftadd@f1+2,f
 15509  051B                     l8842:	
 15510  051B  1F46               	btfss	___ftadd@sign,6
 15511  051C  2D2D               	goto	l8846
 15512  051D  30FF               	movlw	255
 15513  051E  06BF               	xorwf	___ftadd@f2,f
 15514  051F  30FF               	movlw	255
 15515  0520  06C0               	xorwf	___ftadd@f2+1,f
 15516  0521  30FF               	movlw	255
 15517  0522  06C1               	xorwf	___ftadd@f2+2,f
 15518  0523  3001               	movlw	1
 15519  0524  07BF               	addwf	___ftadd@f2,f
 15520  0525  3000               	movlw	0
 15521  0526  1803               	skipnc
 15522  0527  3001               	movlw	1
 15523  0528  07C0               	addwf	___ftadd@f2+1,f
 15524  0529  3000               	movlw	0
 15525  052A  1803               	skipnc
 15526  052B  3001               	movlw	1
 15527  052C  07C1               	addwf	___ftadd@f2+2,f
 15528  052D                     l8846:	
 15529  052D  01C6               	clrf	___ftadd@sign
 15530  052E  083C               	movf	___ftadd@f1,w
 15531  052F  07BF               	addwf	___ftadd@f2,f
 15532  0530  083D               	movf	___ftadd@f1+1,w
 15533  0531  3DC0               	addwfc	___ftadd@f2+1,f
 15534  0532  083E               	movf	___ftadd@f1+2,w
 15535  0533  3DC1               	addwfc	___ftadd@f2+2,f
 15536  0534  1FC1               	btfss	___ftadd@f2+2,7
 15537  0535  2D48               	goto	l8856
 15538  0536  30FF               	movlw	255
 15539  0537  06BF               	xorwf	___ftadd@f2,f
 15540  0538  30FF               	movlw	255
 15541  0539  06C0               	xorwf	___ftadd@f2+1,f
 15542  053A  30FF               	movlw	255
 15543  053B  06C1               	xorwf	___ftadd@f2+2,f
 15544  053C  3001               	movlw	1
 15545  053D  07BF               	addwf	___ftadd@f2,f
 15546  053E  3000               	movlw	0
 15547  053F  1803               	skipnc
 15548  0540  3001               	movlw	1
 15549  0541  07C0               	addwf	___ftadd@f2+1,f
 15550  0542  3000               	movlw	0
 15551  0543  1803               	skipnc
 15552  0544  3001               	movlw	1
 15553  0545  07C1               	addwf	___ftadd@f2+2,f
 15554  0546  01C6               	clrf	___ftadd@sign
 15555  0547  0AC6               	incf	___ftadd@sign,f
 15556  0548                     l8856:	
 15557  0548  083F               	movf	___ftadd@f2,w
 15558  0549  00F3               	movwf	___ftpack@arg
 15559  054A  0840               	movf	___ftadd@f2+1,w
 15560  054B  00F4               	movwf	___ftpack@arg+1
 15561  054C  0841               	movf	___ftadd@f2+2,w
 15562  054D  00F5               	movwf	___ftpack@arg+2
 15563  054E  0848               	movf	___ftadd@exp1,w
 15564  054F  00C2               	movwf	??___ftadd
 15565  0550  0842               	movf	??___ftadd,w
 15566  0551  00F6               	movwf	___ftpack@exp
 15567  0552  0846               	movf	___ftadd@sign,w
 15568  0553  00C3               	movwf	??___ftadd+1
 15569  0554  0843               	movf	??___ftadd+1,w
 15570  0555  00F7               	movwf	___ftpack@sign
 15571  0556  3189  2161         	fcall	___ftpack
 15572  0558  0873               	movf	?___ftpack,w
 15573  0559  0020               	movlb	0	; select bank0
 15574  055A  00BC               	movwf	?___ftadd
 15575  055B  0874               	movf	?___ftpack+1,w
 15576  055C  00BD               	movwf	?___ftadd+1
 15577  055D  0875               	movf	?___ftpack+2,w
 15578  055E  00BE               	movwf	?___ftadd+2
 15579  055F  0008               	return
 15580  0560                     __end_of___ftadd:	
 15581                           
 15582                           	psect	text103
 15583  111D                     __ptext103:	
 15584 ;; *************** function ___awtoft *****************
 15585 ;; Defined at:
 15586 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15587 ;; Parameters:    Size  Location     Type
 15588 ;;  c               2    3[BANK0 ] int 
 15589 ;; Auto vars:     Size  Location     Type
 15590 ;;  sign            1    8[BANK0 ] unsigned char 
 15591 ;; Return value:  Size  Location     Type
 15592 ;;                  3    3[BANK0 ] float 
 15593 ;; Registers used:
 15594 ;;		wreg, status,2, status,0, pclath, cstack
 15595 ;; Tracked objects:
 15596 ;;		On entry : 0/0
 15597 ;;		On exit  : 0/0
 15598 ;;		Unchanged: 0/0
 15599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15600 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15602 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15603 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15604 ;;Total ram usage:        6 bytes
 15605 ;; Hardware stack levels used:    1
 15606 ;; Hardware stack levels required when called:    4
 15607 ;; This function calls:
 15608 ;;		___ftpack
 15609 ;; This function is called by:
 15610 ;;		_setDimmerLights_PercentValue
 15611 ;;		_getDimmerLights_PercentValue
 15612 ;; This function uses a non-reentrant model
 15613 ;;
 15614                           
 15615                           
 15616                           ;psect for function ___awtoft
 15617  111D                     ___awtoft:	
 15618                           
 15619                           ;incstack = 0
 15620                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15621  111D  0020               	movlb	0	; select bank0
 15622  111E  01A8               	clrf	___awtoft@sign
 15623  111F  1FA4               	btfss	___awtoft@c+1,7
 15624  1120  2928               	goto	l8784
 15625  1121  09A3               	comf	___awtoft@c,f
 15626  1122  09A4               	comf	___awtoft@c+1,f
 15627  1123  0AA3               	incf	___awtoft@c,f
 15628  1124  1903               	skipnz
 15629  1125  0AA4               	incf	___awtoft@c+1,f
 15630  1126  01A8               	clrf	___awtoft@sign
 15631  1127  0AA8               	incf	___awtoft@sign,f
 15632  1128                     l8784:	
 15633  1128  0823               	movf	___awtoft@c,w
 15634  1129  00F3               	movwf	___ftpack@arg
 15635  112A  0824               	movf	___awtoft@c+1,w
 15636  112B  00F4               	movwf	___ftpack@arg+1
 15637  112C  01F5               	clrf	___ftpack@arg+2
 15638  112D  308E               	movlw	142
 15639  112E  00A6               	movwf	??___awtoft
 15640  112F  0826               	movf	??___awtoft,w
 15641  1130  00F6               	movwf	___ftpack@exp
 15642  1131  0828               	movf	___awtoft@sign,w
 15643  1132  00A7               	movwf	??___awtoft+1
 15644  1133  0827               	movf	??___awtoft+1,w
 15645  1134  00F7               	movwf	___ftpack@sign
 15646  1135  3189  2161         	fcall	___ftpack
 15647  1137  0873               	movf	?___ftpack,w
 15648  1138  0020               	movlb	0	; select bank0
 15649  1139  00A3               	movwf	?___awtoft
 15650  113A  0874               	movf	?___ftpack+1,w
 15651  113B  00A4               	movwf	?___awtoft+1
 15652  113C  0875               	movf	?___ftpack+2,w
 15653  113D  00A5               	movwf	?___awtoft+2
 15654  113E  0008               	return
 15655  113F                     __end_of___awtoft:	
 15656                           
 15657                           	psect	text104
 15658  0961                     __ptext104:	
 15659 ;; *************** function ___ftpack *****************
 15660 ;; Defined at:
 15661 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15662 ;; Parameters:    Size  Location     Type
 15663 ;;  arg             3    3[COMMON] unsigned um
 15664 ;;  exp             1    6[COMMON] unsigned char 
 15665 ;;  sign            1    7[COMMON] unsigned char 
 15666 ;; Auto vars:     Size  Location     Type
 15667 ;;		None
 15668 ;; Return value:  Size  Location     Type
 15669 ;;                  3    3[COMMON] float 
 15670 ;; Registers used:
 15671 ;;		wreg, status,2, status,0
 15672 ;; Tracked objects:
 15673 ;;		On entry : 0/0
 15674 ;;		On exit  : 0/0
 15675 ;;		Unchanged: 0/0
 15676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15677 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15679 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15680 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15681 ;;Total ram usage:        8 bytes
 15682 ;; Hardware stack levels used:    1
 15683 ;; Hardware stack levels required when called:    3
 15684 ;; This function calls:
 15685 ;;		Nothing
 15686 ;; This function is called by:
 15687 ;;		___awtoft
 15688 ;;		___ftadd
 15689 ;;		___ftdiv
 15690 ;; This function uses a non-reentrant model
 15691 ;;
 15692                           
 15693                           
 15694                           ;psect for function ___ftpack
 15695  0961                     ___ftpack:	
 15696                           
 15697                           ;incstack = 0
 15698                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15699  0961  0876               	movf	___ftpack@exp,w
 15700  0962  1903               	btfsc	3,2
 15701  0963  2969               	goto	l8664
 15702  0964  0875               	movf	___ftpack@arg+2,w
 15703  0965  0474               	iorwf	___ftpack@arg+1,w
 15704  0966  0473               	iorwf	___ftpack@arg,w
 15705  0967  1D03               	skipz
 15706  0968  297B               	goto	l8670
 15707  0969                     l8664:	
 15708  0969  3000               	movlw	0
 15709  096A  00F3               	movwf	?___ftpack
 15710  096B  3000               	movlw	0
 15711  096C  00F4               	movwf	?___ftpack+1
 15712  096D  3000               	movlw	0
 15713  096E  00F5               	movwf	?___ftpack+2
 15714  096F  0008               	return
 15715  0970                     l8668:	
 15716  0970  3001               	movlw	1
 15717  0971  0020               	movlb	0	; select bank0
 15718  0972  00A0               	movwf	??___ftpack
 15719  0973  0820               	movf	??___ftpack,w
 15720  0974  07F6               	addwf	___ftpack@exp,f
 15721  0975  3001               	movlw	1
 15722  0976                     u9205:	
 15723  0976  36F5               	lsrf	___ftpack@arg+2,f
 15724  0977  0CF4               	rrf	___ftpack@arg+1,f
 15725  0978  0CF3               	rrf	___ftpack@arg,f
 15726  0979  0B89               	decfsz	9,f
 15727  097A  2976               	goto	u9205
 15728  097B                     l8670:	
 15729  097B  30FE               	movlw	254
 15730  097C  0575               	andwf	___ftpack@arg+2,w
 15731  097D  1903               	btfsc	3,2
 15732  097E  2995               	goto	l3024
 15733  097F  2970               	goto	l8668
 15734  0980                     l8672:	
 15735  0980  3001               	movlw	1
 15736  0981  0020               	movlb	0	; select bank0
 15737  0982  00A0               	movwf	??___ftpack
 15738  0983  0820               	movf	??___ftpack,w
 15739  0984  07F6               	addwf	___ftpack@exp,f
 15740  0985  3001               	movlw	1
 15741  0986  07F3               	addwf	___ftpack@arg,f
 15742  0987  3000               	movlw	0
 15743  0988  1803               	skipnc
 15744  0989  3001               	movlw	1
 15745  098A  07F4               	addwf	___ftpack@arg+1,f
 15746  098B  3000               	movlw	0
 15747  098C  1803               	skipnc
 15748  098D  3001               	movlw	1
 15749  098E  07F5               	addwf	___ftpack@arg+2,f
 15750  098F  3001               	movlw	1
 15751  0990                     u9225:	
 15752  0990  36F5               	lsrf	___ftpack@arg+2,f
 15753  0991  0CF4               	rrf	___ftpack@arg+1,f
 15754  0992  0CF3               	rrf	___ftpack@arg,f
 15755  0993  0B89               	decfsz	9,f
 15756  0994  2990               	goto	u9225
 15757  0995                     l3024:	
 15758  0995  30FF               	movlw	255
 15759  0996  0575               	andwf	___ftpack@arg+2,w
 15760  0997  1903               	btfsc	3,2
 15761  0998  29A2               	goto	l8680
 15762  0999  2980               	goto	l8672
 15763  099A                     l8678:	
 15764  099A  3001               	movlw	1
 15765  099B  02F6               	subwf	___ftpack@exp,f
 15766  099C  3001               	movlw	1
 15767  099D                     u9245:	
 15768  099D  35F3               	lslf	___ftpack@arg,f
 15769  099E  0DF4               	rlf	___ftpack@arg+1,f
 15770  099F  0DF5               	rlf	___ftpack@arg+2,f
 15771  09A0  0B89               	decfsz	9,f
 15772  09A1  299D               	goto	u9245
 15773  09A2                     l8680:	
 15774  09A2  1FF4               	btfss	___ftpack@arg+1,7
 15775  09A3  299A               	goto	l8678
 15776  09A4  1876               	btfsc	___ftpack@exp,0
 15777  09A5  29AC               	goto	l3030
 15778  09A6  30FF               	movlw	255
 15779  09A7  05F3               	andwf	___ftpack@arg,f
 15780  09A8  307F               	movlw	127
 15781  09A9  05F4               	andwf	___ftpack@arg+1,f
 15782  09AA  30FF               	movlw	255
 15783  09AB  05F5               	andwf	___ftpack@arg+2,f
 15784  09AC                     l3030:	
 15785  09AC  1003               	clrc
 15786  09AD  0CF6               	rrf	___ftpack@exp,f
 15787  09AE  0876               	movf	___ftpack@exp,w
 15788  09AF  0020               	movlb	0	; select bank0
 15789  09B0  00A0               	movwf	??___ftpack
 15790  09B1  01A1               	clrf	??___ftpack+1
 15791  09B2  01A2               	clrf	??___ftpack+2
 15792  09B3  3010               	movlw	16
 15793  09B4                     u9275:	
 15794  09B4  35A0               	lslf	??___ftpack,f
 15795  09B5  0DA1               	rlf	??___ftpack+1,f
 15796  09B6  0DA2               	rlf	??___ftpack+2,f
 15797  09B7  0B89               	decfsz	9,f
 15798  09B8  29B4               	goto	u9275
 15799  09B9  0820               	movf	??___ftpack,w
 15800  09BA  04F3               	iorwf	___ftpack@arg,f
 15801  09BB  0821               	movf	??___ftpack+1,w
 15802  09BC  04F4               	iorwf	___ftpack@arg+1,f
 15803  09BD  0822               	movf	??___ftpack+2,w
 15804  09BE  04F5               	iorwf	___ftpack@arg+2,f
 15805  09BF  0877               	movf	___ftpack@sign,w
 15806  09C0  1903               	btfsc	3,2
 15807  09C1  0008               	return
 15808  09C2  17F5               	bsf	___ftpack@arg+2,7
 15809  09C3  0008               	return
 15810  09C4                     __end_of___ftpack:	
 15811                           
 15812                           	psect	text105
 15813  1E15                     __ptext105:	
 15814 ;; *************** function _setDimmerLights_Line *****************
 15815 ;; Defined at:
 15816 ;;		line 929 in file "../src/Dimmer_B1.c"
 15817 ;; Parameters:    Size  Location     Type
 15818 ;;  lights          1    wreg     unsigned char 
 15819 ;; Auto vars:     Size  Location     Type
 15820 ;;  lights          1    3[COMMON] unsigned char 
 15821 ;; Return value:  Size  Location     Type
 15822 ;;		None               void
 15823 ;; Registers used:
 15824 ;;		wreg
 15825 ;; Tracked objects:
 15826 ;;		On entry : 0/0
 15827 ;;		On exit  : 0/0
 15828 ;;		Unchanged: 0/0
 15829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15831 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15833 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15834 ;;Total ram usage:        1 bytes
 15835 ;; Hardware stack levels used:    1
 15836 ;; Hardware stack levels required when called:    3
 15837 ;; This function calls:
 15838 ;;		Nothing
 15839 ;; This function is called by:
 15840 ;;		_setDimmerLights_OnOff
 15841 ;;		_setDimmerLights_Dimming
 15842 ;; This function uses a non-reentrant model
 15843 ;;
 15844                           
 15845                           
 15846                           ;psect for function _setDimmerLights_Line
 15847  1E15                     _setDimmerLights_Line:	
 15848                           
 15849                           ;incstack = 0
 15850                           ; Regs used in _setDimmerLights_Line: [wreg]
 15851                           ;setDimmerLights_Line@lights stored from wreg
 15852  1E15  00F3               	movwf	setDimmerLights_Line@lights
 15853                           
 15854                           ;Dimmer_B1.c: 930: Dimmer.LoadGO = 1;
 15855  1E16  0021               	movlb	1	; select bank1
 15856  1E17  14C8               	bsf	_Dimmer^(0+128),1	;volatile
 15857                           
 15858                           ;Dimmer_B1.c: 932: DimmerLights1.Line = 0;
 15859  1E18  0023               	movlb	3	; select bank3
 15860  1E19  1140               	bcf	(_DimmerLights1^(0+384)+2),2
 15861                           
 15862                           ;Dimmer_B1.c: 935: DimmerLights2.Line = 0;
 15863  1E1A  1149               	bcf	(_DimmerLights2^(0+384)+2),2
 15864                           
 15865                           ;Dimmer_B1.c: 941: if (lights == 1) {
 15866  1E1B  0873               	movf	setDimmerLights_Line@lights,w
 15867  1E1C  3A01               	xorlw	1
 15868  1E1D  1D03               	skipz
 15869  1E1E  2E21               	goto	l6752
 15870                           
 15871                           ;Dimmer_B1.c: 942: DimmerLights1.Line = 1;
 15872  1E1F  1540               	bsf	(_DimmerLights1^(0+384)+2),2
 15873                           
 15874                           ;Dimmer_B1.c: 943: }
 15875  1E20  0008               	return
 15876  1E21                     l6752:	
 15877                           
 15878                           ;Dimmer_B1.c: 946: else if (lights == 2) {
 15879  1E21  0873               	movf	setDimmerLights_Line@lights,w
 15880  1E22  3A02               	xorlw	2
 15881  1E23  1D03               	skipz
 15882  1E24  0008               	return
 15883                           
 15884                           ;Dimmer_B1.c: 947: DimmerLights2.Line = 1;
 15885  1E25  1549               	bsf	(_DimmerLights2^(0+384)+2),2
 15886  1E26  0008               	return
 15887  1E27                     __end_of_setDimmerLights_Line:	
 15888                           
 15889                           	psect	text106
 15890  1EF4                     __ptext106:	
 15891 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15892 ;; Defined at:
 15893 ;;		line 86 in file "../src/Dimmer_B1.c"
 15894 ;; Parameters:    Size  Location     Type
 15895 ;;  lights          1    wreg     unsigned char 
 15896 ;;  value           1    6[COMMON] unsigned char 
 15897 ;; Auto vars:     Size  Location     Type
 15898 ;;  lights          1    0[BANK0 ] unsigned char 
 15899 ;; Return value:  Size  Location     Type
 15900 ;;		None               void
 15901 ;; Registers used:
 15902 ;;		wreg
 15903 ;; Tracked objects:
 15904 ;;		On entry : 0/0
 15905 ;;		On exit  : 0/0
 15906 ;;		Unchanged: 0/0
 15907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15908 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15910 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15911 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;Total ram usage:        3 bytes
 15913 ;; Hardware stack levels used:    1
 15914 ;; Hardware stack levels required when called:    3
 15915 ;; This function calls:
 15916 ;;		Nothing
 15917 ;; This function is called by:
 15918 ;;		_setDimmerLights_Dimming
 15919 ;; This function uses a non-reentrant model
 15920 ;;
 15921                           
 15922                           
 15923                           ;psect for function _setDimmerIntr_MaxmumValue
 15924  1EF4                     _setDimmerIntr_MaxmumValue:	
 15925                           
 15926                           ;incstack = 0
 15927                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15928                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15929  1EF4  0020               	movlb	0	; select bank0
 15930  1EF5  00A0               	movwf	setDimmerIntr_MaxmumValue@lights
 15931                           
 15932                           ;Dimmer_B1.c: 88: if (lights == 1) {
 15933  1EF6  0820               	movf	setDimmerIntr_MaxmumValue@lights,w
 15934  1EF7  3A01               	xorlw	1
 15935  1EF8  1D03               	skipz
 15936  1EF9  2F00               	goto	l8998
 15937                           
 15938                           ;Dimmer_B1.c: 89: DimmerIntr1.MaxmumValue = value;
 15939  1EFA  0876               	movf	setDimmerIntr_MaxmumValue@value,w
 15940  1EFB  00F7               	movwf	??_setDimmerIntr_MaxmumValue
 15941  1EFC  0877               	movf	??_setDimmerIntr_MaxmumValue,w
 15942  1EFD  0022               	movlb	2	; select bank2
 15943  1EFE  00D3               	movwf	(_DimmerIntr1^(0+256)+5)
 15944                           
 15945                           ;Dimmer_B1.c: 90: }
 15946  1EFF  0008               	return
 15947  1F00                     l8998:	
 15948                           
 15949                           ;Dimmer_B1.c: 93: else if (lights == 2) {
 15950  1F00  0020               	movlb	0	; select bank0
 15951  1F01  0820               	movf	setDimmerIntr_MaxmumValue@lights,w
 15952  1F02  3A02               	xorlw	2
 15953  1F03  1D03               	skipz
 15954  1F04  0008               	return
 15955                           
 15956                           ;Dimmer_B1.c: 94: DimmerIntr2.MaxmumValue = value;
 15957  1F05  0876               	movf	setDimmerIntr_MaxmumValue@value,w
 15958  1F06  00F7               	movwf	??_setDimmerIntr_MaxmumValue
 15959  1F07  0877               	movf	??_setDimmerIntr_MaxmumValue,w
 15960  1F08  0022               	movlb	2	; select bank2
 15961  1F09  00DA               	movwf	(_DimmerIntr2^(0+256)+5)
 15962  1F0A  0008               	return
 15963  1F0B                     __end_of_setDimmerIntr_MaxmumValue:	
 15964                           
 15965                           	psect	text107
 15966  11A7                     __ptext107:	
 15967 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15968 ;; Defined at:
 15969 ;;		line 162 in file "../src/Dimmer_B1.c"
 15970 ;; Parameters:    Size  Location     Type
 15971 ;;  lights          1    wreg     unsigned char 
 15972 ;;  command         1    3[COMMON] unsigned char 
 15973 ;; Auto vars:     Size  Location     Type
 15974 ;;  lights          1    5[COMMON] unsigned char 
 15975 ;; Return value:  Size  Location     Type
 15976 ;;		None               void
 15977 ;; Registers used:
 15978 ;;		wreg, status,2, status,0
 15979 ;; Tracked objects:
 15980 ;;		On entry : 0/0
 15981 ;;		On exit  : 0/0
 15982 ;;		Unchanged: 0/0
 15983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15984 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15985 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15986 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15987 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15988 ;;Total ram usage:        3 bytes
 15989 ;; Hardware stack levels used:    1
 15990 ;; Hardware stack levels required when called:    3
 15991 ;; This function calls:
 15992 ;;		Nothing
 15993 ;; This function is called by:
 15994 ;;		_setDimmerLights_Dimming
 15995 ;; This function uses a non-reentrant model
 15996 ;;
 15997                           
 15998                           
 15999                           ;psect for function _setDimmerIntr_Dimming_Sw
 16000  11A7                     _setDimmerIntr_Dimming_Sw:	
 16001                           
 16002                           ;incstack = 0
 16003                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16004                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16005  11A7  00F5               	movwf	setDimmerIntr_Dimming_Sw@lights
 16006                           
 16007                           ;Dimmer_B1.c: 164: if (lights == 1) {
 16008  11A8  0875               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16009  11A9  3A01               	xorlw	1
 16010  11AA  1D03               	skipz
 16011  11AB  29BA               	goto	l6662
 16012                           
 16013                           ;Dimmer_B1.c: 165: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16014  11AC  0873               	movf	setDimmerIntr_Dimming_Sw@command,w
 16015  11AD  3A01               	xorlw	1
 16016  11AE  3000               	movlw	0
 16017  11AF  1903               	skipnz
 16018  11B0  3001               	movlw	1
 16019  11B1  00F4               	movwf	??_setDimmerIntr_Dimming_Sw
 16020  11B2  0EF4               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16021  11B3  0022               	movlb	2	; select bank2
 16022  11B4  084E               	movf	_DimmerIntr1^(0+256),w
 16023  11B5  0674               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16024  11B6  39EF               	andlw	-17
 16025  11B7  0674               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16026  11B8  00CE               	movwf	_DimmerIntr1^(0+256)
 16027                           
 16028                           ;Dimmer_B1.c: 166: }
 16029  11B9  0008               	return
 16030  11BA                     l6662:	
 16031                           
 16032                           ;Dimmer_B1.c: 169: else if (lights == 2) {
 16033  11BA  0875               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16034  11BB  3A02               	xorlw	2
 16035  11BC  1D03               	skipz
 16036  11BD  0008               	return
 16037                           
 16038                           ;Dimmer_B1.c: 170: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16039  11BE  0873               	movf	setDimmerIntr_Dimming_Sw@command,w
 16040  11BF  3A01               	xorlw	1
 16041  11C0  3000               	movlw	0
 16042  11C1  1903               	skipnz
 16043  11C2  3001               	movlw	1
 16044  11C3  00F4               	movwf	??_setDimmerIntr_Dimming_Sw
 16045  11C4  0EF4               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16046  11C5  0022               	movlb	2	; select bank2
 16047  11C6  0855               	movf	_DimmerIntr2^(0+256),w
 16048  11C7  0674               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16049  11C8  39EF               	andlw	-17
 16050  11C9  0674               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16051  11CA  00D5               	movwf	_DimmerIntr2^(0+256)
 16052  11CB  0008               	return
 16053  11CC                     __end_of_setDimmerIntr_Dimming_Sw:	
 16054                           
 16055                           	psect	text108
 16056  1E4C                     __ptext108:	
 16057 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16058 ;; Defined at:
 16059 ;;		line 66 in file "../src/Dimmer_B1.c"
 16060 ;; Parameters:    Size  Location     Type
 16061 ;;  lights          1    wreg     unsigned char 
 16062 ;; Auto vars:     Size  Location     Type
 16063 ;;  lights          1    5[COMMON] unsigned char 
 16064 ;;  value           1    4[COMMON] unsigned char 
 16065 ;; Return value:  Size  Location     Type
 16066 ;;                  1    wreg      unsigned char 
 16067 ;; Registers used:
 16068 ;;		wreg, status,2
 16069 ;; Tracked objects:
 16070 ;;		On entry : 0/0
 16071 ;;		On exit  : 0/0
 16072 ;;		Unchanged: 0/0
 16073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16075 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16076 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16077 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16078 ;;Total ram usage:        3 bytes
 16079 ;; Hardware stack levels used:    1
 16080 ;; Hardware stack levels required when called:    3
 16081 ;; This function calls:
 16082 ;;		Nothing
 16083 ;; This function is called by:
 16084 ;;		_setDimmerLights_Dimming
 16085 ;; This function uses a non-reentrant model
 16086 ;;
 16087                           
 16088                           
 16089                           ;psect for function _getDimmerIntr_DimmingValue
 16090  1E4C                     _getDimmerIntr_DimmingValue:	
 16091                           
 16092                           ;incstack = 0
 16093                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16094                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16095  1E4C  00F5               	movwf	getDimmerIntr_DimmingValue@lights
 16096                           
 16097                           ;Dimmer_B1.c: 67: char value = 0;
 16098  1E4D  01F4               	clrf	getDimmerIntr_DimmingValue@value
 16099                           
 16100                           ;Dimmer_B1.c: 69: if (lights == 1) {
 16101  1E4E  0875               	movf	getDimmerIntr_DimmingValue@lights,w
 16102  1E4F  3A01               	xorlw	1
 16103  1E50  1D03               	skipz
 16104  1E51  2E55               	goto	l6644
 16105                           
 16106                           ;Dimmer_B1.c: 70: value = DimmerIntr1.DimmingValue;
 16107  1E52  0022               	movlb	2	; select bank2
 16108  1E53  0852               	movf	(_DimmerIntr1^(0+256)+4),w
 16109  1E54  2E5B               	goto	L9
 16110  1E55                     l6644:	
 16111                           ;Dimmer_B1.c: 71: }
 16112                           
 16113                           
 16114                           ;Dimmer_B1.c: 74: else if (lights == 2) {
 16115  1E55  0875               	movf	getDimmerIntr_DimmingValue@lights,w
 16116  1E56  3A02               	xorlw	2
 16117  1E57  1D03               	skipz
 16118  1E58  2E5E               	goto	l731
 16119                           
 16120                           ;Dimmer_B1.c: 75: value = DimmerIntr2.DimmingValue;
 16121  1E59  0022               	movlb	2	; select bank2
 16122  1E5A  0859               	movf	(_DimmerIntr2^(0+256)+4),w
 16123  1E5B                     L9:	
 16124  1E5B  00F3               	movwf	??_getDimmerIntr_DimmingValue
 16125  1E5C  0873               	movf	??_getDimmerIntr_DimmingValue,w
 16126  1E5D  00F4               	movwf	getDimmerIntr_DimmingValue@value
 16127  1E5E                     l731:	
 16128                           
 16129                           ;Dimmer_B1.c: 76: }
 16130                           ;Dimmer_B1.c: 83: return value;
 16131  1E5E  0874               	movf	getDimmerIntr_DimmingValue@value,w
 16132  1E5F  0008               	return
 16133  1E60                     __end_of_getDimmerIntr_DimmingValue:	
 16134                           
 16135                           	psect	text109
 16136  1D35                     __ptext109:	
 16137 ;; *************** function _getMain_LightsStatus *****************
 16138 ;; Defined at:
 16139 ;;		line 374 in file "../src/Main_B1.c"
 16140 ;; Parameters:    Size  Location     Type
 16141 ;;		None
 16142 ;; Auto vars:     Size  Location     Type
 16143 ;;  status          1    3[COMMON] unsigned char 
 16144 ;; Return value:  Size  Location     Type
 16145 ;;                  1    wreg      unsigned char 
 16146 ;; Registers used:
 16147 ;;		wreg, status,2, status,0
 16148 ;; Tracked objects:
 16149 ;;		On entry : 0/0
 16150 ;;		On exit  : 0/0
 16151 ;;		Unchanged: 0/0
 16152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16154 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16156 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16157 ;;Total ram usage:        1 bytes
 16158 ;; Hardware stack levels used:    1
 16159 ;; Hardware stack levels required when called:    3
 16160 ;; This function calls:
 16161 ;;		Nothing
 16162 ;; This function is called by:
 16163 ;;		_DimmerLights_Main
 16164 ;;		_setDimmerLights_Main
 16165 ;;		_Flash_Memory_Main
 16166 ;;		_Exception_Main
 16167 ;;		_Load_Main
 16168 ;; This function uses a non-reentrant model
 16169 ;;
 16170                           
 16171                           
 16172                           ;psect for function _getMain_LightsStatus
 16173  1D35                     _getMain_LightsStatus:	
 16174                           
 16175                           ;Main_B1.c: 375: char status = 0;
 16176                           
 16177                           ;incstack = 0
 16178                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 16179  1D35  01F3               	clrf	getMain_LightsStatus@status
 16180                           
 16181                           ;Main_B1.c: 394: status = DimmerLights1.Status == 1 ? 1 : 0;
 16182  1D36  3000               	movlw	0
 16183  1D37  0023               	movlb	3	; select bank3
 16184  1D38  183E               	btfsc	_DimmerLights1^(0+384),0
 16185  1D39  3001               	movlw	1
 16186  1D3A  00F3               	movwf	getMain_LightsStatus@status
 16187                           
 16188                           ;Main_B1.c: 395: if (status == 0) {
 16189  1D3B  08F3               	movf	getMain_LightsStatus@status,f
 16190  1D3C  1D03               	skipz
 16191  1D3D  2D42               	goto	l6930
 16192                           
 16193                           ;Main_B1.c: 396: status = DimmerLights2.Status == 1 ? 1 : 0;
 16194  1D3E  3000               	movlw	0
 16195  1D3F  1847               	btfsc	_DimmerLights2^(0+384),0
 16196  1D40  3001               	movlw	1
 16197  1D41  00F3               	movwf	getMain_LightsStatus@status
 16198  1D42                     l6930:	
 16199                           
 16200                           ;Main_B1.c: 397: }
 16201                           ;Main_B1.c: 421: return status;
 16202  1D42  0873               	movf	getMain_LightsStatus@status,w
 16203  1D43  0008               	return
 16204  1D44                     __end_of_getMain_LightsStatus:	
 16205                           
 16206                           	psect	text110
 16207  1428                     __ptext110:	
 16208 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16209 ;; Defined at:
 16210 ;;		line 890 in file "../src/Dimmer_B1.c"
 16211 ;; Parameters:    Size  Location     Type
 16212 ;;  lights          1    wreg     unsigned char 
 16213 ;; Auto vars:     Size  Location     Type
 16214 ;;  lights          1    3[BANK0 ] unsigned char 
 16215 ;;  allow           1    4[BANK0 ] unsigned char 
 16216 ;; Return value:  Size  Location     Type
 16217 ;;                  1    wreg      unsigned char 
 16218 ;; Registers used:
 16219 ;;		wreg, status,2, status,0, pclath, cstack
 16220 ;; Tracked objects:
 16221 ;;		On entry : 0/0
 16222 ;;		On exit  : 0/0
 16223 ;;		Unchanged: 0/0
 16224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16226 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16227 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16228 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16229 ;;Total ram usage:        6 bytes
 16230 ;; Hardware stack levels used:    1
 16231 ;; Hardware stack levels required when called:    4
 16232 ;; This function calls:
 16233 ;;		_getLoad_OK
 16234 ;; This function is called by:
 16235 ;;		_setDimmerLights_Main
 16236 ;; This function uses a non-reentrant model
 16237 ;;
 16238                           
 16239                           
 16240                           ;psect for function _getDimmerLights_Allow_Condition
 16241  1428                     _getDimmerLights_Allow_Condition:	
 16242                           
 16243                           ;incstack = 0
 16244                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16245                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16246  1428  0020               	movlb	0	; select bank0
 16247  1429  00A3               	movwf	getDimmerLights_Allow_Condition@lights
 16248                           
 16249                           ;Dimmer_B1.c: 891: char allow = 0;
 16250  142A  01A4               	clrf	getDimmerLights_Allow_Condition@allow
 16251                           
 16252                           ;Dimmer_B1.c: 897: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16253  142B  01A0               	clrf	_getDimmerLights_Allow_Condition$2247
 16254  142C  0AA0               	incf	_getDimmerLights_Allow_Condition$2247,f
 16255  142D  319C  2436  3194   	fcall	_getLoad_OK
 16256  1430  3800               	iorlw	0
 16257  1431  1D03               	skipz
 16258  1432  2C38               	goto	l9198
 16259  1433  0021               	movlb	1	; select bank1
 16260  1434  18C8               	btfsc	_Dimmer^(0+128),1	;volatile
 16261  1435  2C38               	goto	l9198
 16262  1436  0020               	movlb	0	; select bank0
 16263  1437  01A0               	clrf	_getDimmerLights_Allow_Condition$2247
 16264  1438                     l9198:	
 16265  1438  0020               	movlb	0	; select bank0
 16266  1439  0820               	movf	_getDimmerLights_Allow_Condition$2247,w
 16267  143A  00F4               	movwf	??_getDimmerLights_Allow_Condition
 16268  143B  0874               	movf	??_getDimmerLights_Allow_Condition,w
 16269  143C  00A4               	movwf	getDimmerLights_Allow_Condition@allow
 16270                           
 16271                           ;Dimmer_B1.c: 901: if (allow == 0) {
 16272  143D  08A4               	movf	getDimmerLights_Allow_Condition@allow,f
 16273  143E  1D03               	skipz
 16274  143F  2C64               	goto	l9222
 16275                           
 16276                           ;Dimmer_B1.c: 902: if (lights == 1) {
 16277  1440  0823               	movf	getDimmerLights_Allow_Condition@lights,w
 16278  1441  3A01               	xorlw	1
 16279  1442  1D03               	skipz
 16280  1443  2C51               	goto	l9212
 16281                           
 16282                           ;Dimmer_B1.c: 903: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16283  1444  01A1               	clrf	_getDimmerLights_Allow_Condition$2248
 16284  1445  0AA1               	incf	_getDimmerLights_Allow_Condition$2248,f
 16285  1446  0023               	movlb	3	; select bank3
 16286  1447  1AC7               	btfsc	_DimmerLights2^(0+384),5
 16287  1448  2C4E               	goto	l9210
 16288  1449  0022               	movlb	2	; select bank2
 16289  144A  1A55               	btfsc	_DimmerIntr2^(0+256),4
 16290  144B  2C4E               	goto	l9210
 16291  144C  0020               	movlb	0	; select bank0
 16292  144D  01A1               	clrf	_getDimmerLights_Allow_Condition$2248
 16293  144E                     l9210:	
 16294  144E  0020               	movlb	0	; select bank0
 16295  144F  0821               	movf	_getDimmerLights_Allow_Condition$2248,w
 16296  1450  2C61               	goto	L10
 16297  1451                     l9212:	
 16298                           ;Dimmer_B1.c: 904: } else if (lights == 2) {
 16299                           
 16300  1451  0823               	movf	getDimmerLights_Allow_Condition@lights,w
 16301  1452  3A02               	xorlw	2
 16302  1453  1D03               	skipz
 16303  1454  2C64               	goto	l9222
 16304                           
 16305                           ;Dimmer_B1.c: 905: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16306  1455  01A2               	clrf	_getDimmerLights_Allow_Condition$2249
 16307  1456  0AA2               	incf	_getDimmerLights_Allow_Condition$2249,f
 16308  1457  0023               	movlb	3	; select bank3
 16309  1458  1ABE               	btfsc	_DimmerLights1^(0+384),5
 16310  1459  2C5F               	goto	l9220
 16311  145A  0022               	movlb	2	; select bank2
 16312  145B  1A4E               	btfsc	_DimmerIntr1^(0+256),4
 16313  145C  2C5F               	goto	l9220
 16314  145D  0020               	movlb	0	; select bank0
 16315  145E  01A2               	clrf	_getDimmerLights_Allow_Condition$2249
 16316  145F                     l9220:	
 16317  145F  0020               	movlb	0	; select bank0
 16318  1460  0822               	movf	_getDimmerLights_Allow_Condition$2249,w
 16319  1461                     L10:	
 16320  1461  00F4               	movwf	??_getDimmerLights_Allow_Condition
 16321  1462  0874               	movf	??_getDimmerLights_Allow_Condition,w
 16322  1463  00A4               	movwf	getDimmerLights_Allow_Condition@allow
 16323  1464                     l9222:	
 16324                           
 16325                           ;Dimmer_B1.c: 906: }
 16326                           ;Dimmer_B1.c: 907: }
 16327                           ;Dimmer_B1.c: 924: return allow;
 16328  1464  0824               	movf	getDimmerLights_Allow_Condition@allow,w
 16329  1465  0008               	return
 16330  1466                     __end_of_getDimmerLights_Allow_Condition:	
 16331                           
 16332                           	psect	text111
 16333  1C36                     __ptext111:	
 16334 ;; *************** function _getLoad_OK *****************
 16335 ;; Defined at:
 16336 ;;		line 246 in file "../src/OverLoad_B1.c"
 16337 ;; Parameters:    Size  Location     Type
 16338 ;;		None
 16339 ;; Auto vars:     Size  Location     Type
 16340 ;;  ok              1    3[COMMON] unsigned char 
 16341 ;; Return value:  Size  Location     Type
 16342 ;;                  1    wreg      unsigned char 
 16343 ;; Registers used:
 16344 ;;		wreg, status,2
 16345 ;; Tracked objects:
 16346 ;;		On entry : 0/0
 16347 ;;		On exit  : 0/0
 16348 ;;		Unchanged: 0/0
 16349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16353 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16354 ;;Total ram usage:        1 bytes
 16355 ;; Hardware stack levels used:    1
 16356 ;; Hardware stack levels required when called:    3
 16357 ;; This function calls:
 16358 ;;		Nothing
 16359 ;; This function is called by:
 16360 ;;		_DimmerLights_Main
 16361 ;;		_getDimmerLights_Allow_Condition
 16362 ;; This function uses a non-reentrant model
 16363 ;;
 16364                           
 16365                           
 16366                           ;psect for function _getLoad_OK
 16367  1C36                     _getLoad_OK:	
 16368                           
 16369                           ;OverLoad_B1.c: 247: char ok = Load.OK == 1 ? 1 : 0;
 16370                           
 16371                           ;incstack = 0
 16372                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16373  1C36  3000               	movlw	0
 16374  1C37  0022               	movlb	2	; select bank2
 16375  1C38  1BA0               	btfsc	_Load^(0+256),7
 16376  1C39  3001               	movlw	1
 16377  1C3A  00F3               	movwf	getLoad_OK@ok
 16378                           
 16379                           ;OverLoad_B1.c: 248: return ok;
 16380  1C3B  0873               	movf	getLoad_OK@ok,w
 16381  1C3C  0008               	return
 16382  1C3D                     __end_of_getLoad_OK:	
 16383                           
 16384                           	psect	text112
 16385  1319                     __ptext112:	
 16386 ;; *************** function _getMain_All_Error_Status *****************
 16387 ;; Defined at:
 16388 ;;		line 425 in file "../src/Main_B1.c"
 16389 ;; Parameters:    Size  Location     Type
 16390 ;;  command         1    wreg     unsigned char 
 16391 ;; Auto vars:     Size  Location     Type
 16392 ;;  command         1    4[BANK0 ] unsigned char 
 16393 ;;  status          1    5[BANK0 ] unsigned char 
 16394 ;; Return value:  Size  Location     Type
 16395 ;;                  1    wreg      unsigned char 
 16396 ;; Registers used:
 16397 ;;		wreg, status,2, status,0
 16398 ;; Tracked objects:
 16399 ;;		On entry : 0/0
 16400 ;;		On exit  : 0/0
 16401 ;;		Unchanged: 0/0
 16402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16404 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16405 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16406 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16407 ;;Total ram usage:        7 bytes
 16408 ;; Hardware stack levels used:    1
 16409 ;; Hardware stack levels required when called:    3
 16410 ;; This function calls:
 16411 ;;		Nothing
 16412 ;; This function is called by:
 16413 ;;		_DimmerLights_Main
 16414 ;;		_Exception_Main
 16415 ;;		_Load_Main
 16416 ;;		_setTemp_Main
 16417 ;;		_getRxData
 16418 ;;		_setSw_Main
 16419 ;; This function uses a non-reentrant model
 16420 ;;
 16421                           
 16422                           
 16423                           ;psect for function _getMain_All_Error_Status
 16424  1319                     _getMain_All_Error_Status:	
 16425                           
 16426                           ;incstack = 0
 16427                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16428                           ;getMain_All_Error_Status@command stored from wreg
 16429  1319  0020               	movlb	0	; select bank0
 16430  131A  00A4               	movwf	getMain_All_Error_Status@command
 16431                           
 16432                           ;Main_B1.c: 426: char status = 0;
 16433  131B  01A5               	clrf	getMain_All_Error_Status@status
 16434                           
 16435                           ;Main_B1.c: 437: if (status == 0 && command != 2) {
 16436  131C  08A5               	movf	getMain_All_Error_Status@status,f
 16437  131D  1D03               	skipz
 16438  131E  2B33               	goto	l9020
 16439  131F  0824               	movf	getMain_All_Error_Status@command,w
 16440  1320  3A02               	xorlw	2
 16441  1321  1903               	skipnz
 16442  1322  2B33               	goto	l9020
 16443                           
 16444                           ;Main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
 16445  1323  0021               	movlb	1	; select bank1
 16446  1324  18DE               	btfsc	_Temp^(0+128),1
 16447  1325  2B2A               	goto	l9018
 16448  1326  0020               	movlb	0	; select bank0
 16449  1327  01A0               	clrf	_getMain_All_Error_Status$3490
 16450  1328  01A1               	clrf	_getMain_All_Error_Status$3490+1
 16451  1329  2B2F               	goto	l1588
 16452  132A                     l9018:	
 16453  132A  3002               	movlw	2
 16454  132B  0020               	movlb	0	; select bank0
 16455  132C  00A0               	movwf	_getMain_All_Error_Status$3490
 16456  132D  3000               	movlw	0
 16457  132E  00A1               	movwf	_getMain_All_Error_Status$3490+1
 16458  132F                     l1588:	
 16459  132F  0820               	movf	_getMain_All_Error_Status$3490,w
 16460  1330  00F3               	movwf	??_getMain_All_Error_Status
 16461  1331  0873               	movf	??_getMain_All_Error_Status,w
 16462  1332  00A5               	movwf	getMain_All_Error_Status@status
 16463  1333                     l9020:	
 16464                           
 16465                           ;Main_B1.c: 439: }
 16466                           ;Main_B1.c: 444: if (status == 0 && command != 3) {
 16467  1333  08A5               	movf	getMain_All_Error_Status@status,f
 16468  1334  1D03               	skipz
 16469  1335  2B4A               	goto	l1589
 16470  1336  0824               	movf	getMain_All_Error_Status@command,w
 16471  1337  3A03               	xorlw	3
 16472  1338  1903               	skipnz
 16473  1339  2B4A               	goto	l1589
 16474                           
 16475                           ;Main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
 16476  133A  0022               	movlb	2	; select bank2
 16477  133B  1AA0               	btfsc	_Load^(0+256),5
 16478  133C  2B41               	goto	l9028
 16479  133D  0020               	movlb	0	; select bank0
 16480  133E  01A2               	clrf	_getMain_All_Error_Status$3491
 16481  133F  01A3               	clrf	_getMain_All_Error_Status$3491+1
 16482  1340  2B46               	goto	l1593
 16483  1341                     l9028:	
 16484  1341  3003               	movlw	3
 16485  1342  0020               	movlb	0	; select bank0
 16486  1343  00A2               	movwf	_getMain_All_Error_Status$3491
 16487  1344  3000               	movlw	0
 16488  1345  00A3               	movwf	_getMain_All_Error_Status$3491+1
 16489  1346                     l1593:	
 16490  1346  0822               	movf	_getMain_All_Error_Status$3491,w
 16491  1347  00F3               	movwf	??_getMain_All_Error_Status
 16492  1348  0873               	movf	??_getMain_All_Error_Status,w
 16493  1349  00A5               	movwf	getMain_All_Error_Status@status
 16494  134A                     l1589:	
 16495                           
 16496                           ;Main_B1.c: 446: }
 16497                           ;Main_B1.c: 462: return status;
 16498  134A  0825               	movf	getMain_All_Error_Status@status,w
 16499  134B  0008               	return
 16500  134C                     __end_of_getMain_All_Error_Status:	
 16501                           
 16502                           	psect	text113
 16503  1C87                     __ptext113:	
 16504 ;; *************** function _DimmerLights_Initialization *****************
 16505 ;; Defined at:
 16506 ;;		line 606 in file "../src/Dimmer_B1.c"
 16507 ;; Parameters:    Size  Location     Type
 16508 ;;		None
 16509 ;; Auto vars:     Size  Location     Type
 16510 ;;		None
 16511 ;; Return value:  Size  Location     Type
 16512 ;;		None               void
 16513 ;; Registers used:
 16514 ;;		wreg, status,2, status,0, pclath, cstack
 16515 ;; Tracked objects:
 16516 ;;		On entry : 0/0
 16517 ;;		On exit  : 0/0
 16518 ;;		Unchanged: 0/0
 16519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16524 ;;Total ram usage:        0 bytes
 16525 ;; Hardware stack levels used:    1
 16526 ;; Hardware stack levels required when called:    4
 16527 ;; This function calls:
 16528 ;;		_DimmerIntr_Initialization
 16529 ;;		_setDimmerLights_Initialization
 16530 ;; This function is called by:
 16531 ;;		_main
 16532 ;; This function uses a non-reentrant model
 16533 ;;
 16534                           
 16535                           
 16536                           ;psect for function _DimmerLights_Initialization
 16537  1C87                     _DimmerLights_Initialization:	
 16538                           
 16539                           ;Dimmer_B1.c: 608: setDimmerLights_Initialization(1);
 16540                           
 16541                           ;incstack = 0
 16542                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16543  1C87  3001               	movlw	1
 16544  1C88  319B  23F9  319C   	fcall	_setDimmerLights_Initialization
 16545                           
 16546                           ;Dimmer_B1.c: 612: setDimmerLights_Initialization(2);
 16547  1C8B  3002               	movlw	2
 16548  1C8C  319B  23F9  319C   	fcall	_setDimmerLights_Initialization
 16549                           
 16550                           ;Dimmer_B1.c: 618: DimmerIntr_Initialization();
 16551  1C8F  3190  20FB         	fcall	_DimmerIntr_Initialization
 16552  1C91  0008               	return
 16553  1C92                     __end_of_DimmerLights_Initialization:	
 16554                           
 16555                           	psect	text114
 16556  1BF9                     __ptext114:	
 16557 ;; *************** function _setDimmerLights_Initialization *****************
 16558 ;; Defined at:
 16559 ;;		line 622 in file "../src/Dimmer_B1.c"
 16560 ;; Parameters:    Size  Location     Type
 16561 ;;  lights          1    wreg     unsigned char 
 16562 ;; Auto vars:     Size  Location     Type
 16563 ;;  lights          1    0[COMMON] unsigned char 
 16564 ;; Return value:  Size  Location     Type
 16565 ;;		None               void
 16566 ;; Registers used:
 16567 ;;		wreg
 16568 ;; Tracked objects:
 16569 ;;		On entry : 0/0
 16570 ;;		On exit  : 0/0
 16571 ;;		Unchanged: 0/0
 16572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16577 ;;Total ram usage:        0 bytes
 16578 ;; Hardware stack levels used:    1
 16579 ;; Hardware stack levels required when called:    3
 16580 ;; This function calls:
 16581 ;;		Nothing
 16582 ;; This function is called by:
 16583 ;;		_DimmerLights_Initialization
 16584 ;; This function uses a non-reentrant model
 16585 ;;
 16586                           
 16587                           
 16588                           ;psect for function _setDimmerLights_Initialization
 16589  1BF9                     _setDimmerLights_Initialization:	
 16590                           
 16591                           ;incstack = 0
 16592                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16593  1BF9  0008               	return
 16594  1BFA                     __end_of_setDimmerLights_Initialization:	
 16595                           
 16596                           	psect	text115
 16597  10FB                     __ptext115:	
 16598 ;; *************** function _DimmerIntr_Initialization *****************
 16599 ;; Defined at:
 16600 ;;		line 7 in file "../src/Dimmer_B1.c"
 16601 ;; Parameters:    Size  Location     Type
 16602 ;;		None
 16603 ;; Auto vars:     Size  Location     Type
 16604 ;;		None
 16605 ;; Return value:  Size  Location     Type
 16606 ;;		None               void
 16607 ;; Registers used:
 16608 ;;		wreg
 16609 ;; Tracked objects:
 16610 ;;		On entry : 0/0
 16611 ;;		On exit  : 0/0
 16612 ;;		Unchanged: 0/0
 16613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16616 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16617 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16618 ;;Total ram usage:        1 bytes
 16619 ;; Hardware stack levels used:    1
 16620 ;; Hardware stack levels required when called:    3
 16621 ;; This function calls:
 16622 ;;		Nothing
 16623 ;; This function is called by:
 16624 ;;		_DimmerLights_Initialization
 16625 ;; This function uses a non-reentrant model
 16626 ;;
 16627                           
 16628                           
 16629                           ;psect for function _DimmerIntr_Initialization
 16630  10FB                     _DimmerIntr_Initialization:	
 16631                           
 16632                           ;Dimmer_B1.c: 9: DimmerIntr1.TuneTimeValue = 7;
 16633                           
 16634                           ;incstack = 0
 16635                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 16636  10FB  3007               	movlw	7
 16637  10FC  00F3               	movwf	??_DimmerIntr_Initialization
 16638  10FD  0873               	movf	??_DimmerIntr_Initialization,w
 16639  10FE  0022               	movlb	2	; select bank2
 16640  10FF  00D1               	movwf	(_DimmerIntr1^(0+256)+3)
 16641                           
 16642                           ;Dimmer_B1.c: 10: DimmerIntr1.MaxmumValue = ((char)(70*0.8));
 16643  1100  3038               	movlw	56
 16644  1101  00F3               	movwf	??_DimmerIntr_Initialization
 16645  1102  0873               	movf	??_DimmerIntr_Initialization,w
 16646  1103  00D3               	movwf	(_DimmerIntr1^(0+256)+5)
 16647                           
 16648                           ;Dimmer_B1.c: 11: DimmerIntr1.MinimumValue = ((char)(15*0.8));
 16649  1104  300C               	movlw	12
 16650  1105  00F3               	movwf	??_DimmerIntr_Initialization
 16651  1106  0873               	movf	??_DimmerIntr_Initialization,w
 16652  1107  00D4               	movwf	(_DimmerIntr1^(0+256)+6)
 16653                           
 16654                           ;Dimmer_B1.c: 12: DimmerIntr1.DimmingValue = ((char)(70*0.8));
 16655  1108  3038               	movlw	56
 16656  1109  00F3               	movwf	??_DimmerIntr_Initialization
 16657  110A  0873               	movf	??_DimmerIntr_Initialization,w
 16658  110B  00D2               	movwf	(_DimmerIntr1^(0+256)+4)
 16659                           
 16660                           ;Dimmer_B1.c: 15: DimmerIntr2.TuneTimeValue = 7;
 16661  110C  3007               	movlw	7
 16662  110D  00F3               	movwf	??_DimmerIntr_Initialization
 16663  110E  0873               	movf	??_DimmerIntr_Initialization,w
 16664  110F  00D8               	movwf	(_DimmerIntr2^(0+256)+3)
 16665                           
 16666                           ;Dimmer_B1.c: 16: DimmerIntr2.MaxmumValue = ((char)(70*0.8));
 16667  1110  3038               	movlw	56
 16668  1111  00F3               	movwf	??_DimmerIntr_Initialization
 16669  1112  0873               	movf	??_DimmerIntr_Initialization,w
 16670  1113  00DA               	movwf	(_DimmerIntr2^(0+256)+5)
 16671                           
 16672                           ;Dimmer_B1.c: 17: DimmerIntr2.MinimumValue = ((char)(15*0.8));
 16673  1114  300C               	movlw	12
 16674  1115  00F3               	movwf	??_DimmerIntr_Initialization
 16675  1116  0873               	movf	??_DimmerIntr_Initialization,w
 16676  1117  00DB               	movwf	(_DimmerIntr2^(0+256)+6)
 16677                           
 16678                           ;Dimmer_B1.c: 18: DimmerIntr2.DimmingValue = ((char)(70*0.8));
 16679  1118  3038               	movlw	56
 16680  1119  00F3               	movwf	??_DimmerIntr_Initialization
 16681  111A  0873               	movf	??_DimmerIntr_Initialization,w
 16682  111B  00D9               	movwf	(_DimmerIntr2^(0+256)+4)
 16683  111C  0008               	return
 16684  111D                     __end_of_DimmerIntr_Initialization:	
 16685                           
 16686                           	psect	text116
 16687  1C5A                     __ptext116:	
 16688 ;; *************** function _DelayOff_Main *****************
 16689 ;; Defined at:
 16690 ;;		line 41 in file "../src/DelayOff_B1.c"
 16691 ;; Parameters:    Size  Location     Type
 16692 ;;		None
 16693 ;; Auto vars:     Size  Location     Type
 16694 ;;		None
 16695 ;; Return value:  Size  Location     Type
 16696 ;;		None               void
 16697 ;; Registers used:
 16698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16699 ;; Tracked objects:
 16700 ;;		On entry : 0/0
 16701 ;;		On exit  : 0/0
 16702 ;;		Unchanged: 0/0
 16703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;Total ram usage:        0 bytes
 16709 ;; Hardware stack levels used:    1
 16710 ;; Hardware stack levels required when called:    8
 16711 ;; This function calls:
 16712 ;;		_DlyOff_Main
 16713 ;; This function is called by:
 16714 ;;		_main
 16715 ;; This function uses a non-reentrant model
 16716 ;;
 16717                           
 16718                           
 16719                           ;psect for function _DelayOff_Main
 16720  1C5A                     _DelayOff_Main:	
 16721                           
 16722                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 16723                           
 16724                           ;incstack = 0
 16725                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16726  1C5A  3001               	movlw	1
 16727  1C5B  318C  2422  319C   	fcall	_DlyOff_Main
 16728                           
 16729                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 16730  1C5E  3002               	movlw	2
 16731  1C5F  318C  2422         	fcall	_DlyOff_Main
 16732  1C61  0008               	return
 16733  1C62                     __end_of_DelayOff_Main:	
 16734                           
 16735                           	psect	text117
 16736  0C22                     __ptext117:	
 16737 ;; *************** function _DlyOff_Main *****************
 16738 ;; Defined at:
 16739 ;;		line 61 in file "../src/DelayOff_B1.c"
 16740 ;; Parameters:    Size  Location     Type
 16741 ;;  sw              1    wreg     unsigned char 
 16742 ;; Auto vars:     Size  Location     Type
 16743 ;;  sw              1   72[BANK0 ] unsigned char 
 16744 ;; Return value:  Size  Location     Type
 16745 ;;		None               void
 16746 ;; Registers used:
 16747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16748 ;; Tracked objects:
 16749 ;;		On entry : 0/0
 16750 ;;		On exit  : 0/0
 16751 ;;		Unchanged: 0/0
 16752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16754 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16755 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16756 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16757 ;;Total ram usage:        3 bytes
 16758 ;; Hardware stack levels used:    1
 16759 ;; Hardware stack levels required when called:    7
 16760 ;; This function calls:
 16761 ;;		_DelayOffPointSelect
 16762 ;;		_getDimmerLights_Status
 16763 ;;		_setBuz
 16764 ;;		_setDimmerLights_SwOff
 16765 ;;		_setDimmerLights_SwOn
 16766 ;; This function is called by:
 16767 ;;		_DelayOff_Main
 16768 ;; This function uses a non-reentrant model
 16769 ;;
 16770                           
 16771                           
 16772                           ;psect for function _DlyOff_Main
 16773  0C22                     _DlyOff_Main:	
 16774                           
 16775                           ;incstack = 0
 16776                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16777                           ;DlyOff_Main@sw stored from wreg
 16778  0C22  0020               	movlb	0	; select bank0
 16779  0C23  00E8               	movwf	DlyOff_Main@sw
 16780                           
 16781                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 16782  0C24  0868               	movf	DlyOff_Main@sw,w
 16783  0C25  319E  2674  318C   	fcall	_DelayOffPointSelect
 16784                           
 16785                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 16786  0C28  0021               	movlb	1	; select bank1
 16787  0C29  0853               	movf	_DelayOff^(0+128),w
 16788  0C2A  0086               	movwf	6
 16789  0C2B  3001               	movlw	1	; select bank2/3
 16790  0C2C  0087               	movwf	7
 16791  0C2D  1C81               	btfss	1,1
 16792  0C2E  0008               	return
 16793                           
 16794                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 16795  0C2F  0853               	movf	_DelayOff^(0+128),w
 16796  0C30  3E02               	addlw	2
 16797  0C31  0086               	movwf	6
 16798  0C32  3001               	movlw	1	; select bank2/3
 16799  0C33  0087               	movwf	7
 16800  0C34  3001               	movlw	1
 16801  0C35  0781               	addwf	1,f
 16802  0C36  3141               	addfsr 1,1
 16803  0C37  1803               	skipnc
 16804  0C38  0A81               	incf	1,f
 16805                           
 16806                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 16807  0C39  0853               	movf	_DelayOff^(0+128),w
 16808  0C3A  3E02               	addlw	2
 16809  0C3B  0086               	movwf	6
 16810  0C3C  3001               	movlw	1	; select bank2/3
 16811  0C3D  0087               	movwf	7
 16812  0C3E  3F40               	moviw [0]fsr1
 16813  0C3F  0020               	movlb	0	; select bank0
 16814  0C40  00E6               	movwf	??_DlyOff_Main
 16815  0C41  3F41               	moviw [1]fsr1
 16816  0C42  00E7               	movwf	??_DlyOff_Main+1
 16817  0C43  300B               	movlw	11
 16818  0C44  0267               	subwf	??_DlyOff_Main+1,w
 16819  0C45  30B8               	movlw	184
 16820  0C46  1903               	skipnz
 16821  0C47  0266               	subwf	??_DlyOff_Main,w
 16822  0C48  1C03               	skipc
 16823  0C49  0008               	return
 16824                           
 16825                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 16826  0C4A  0021               	movlb	1	; select bank1
 16827  0C4B  0853               	movf	_DelayOff^(0+128),w
 16828  0C4C  3E02               	addlw	2
 16829  0C4D  0086               	movwf	6
 16830  0C4E  3001               	movlw	1	; select bank2/3
 16831  0C4F  0087               	movwf	7
 16832  0C50  3000               	movlw	0
 16833  0C51  3FC0               	movwi [0]fsr1
 16834  0C52  3FC1               	movwi [1]fsr1
 16835                           
 16836                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 16837  0C53  3001               	movlw	1
 16838  0C54  0020               	movlb	0	; select bank0
 16839  0C55  00E6               	movwf	??_DlyOff_Main
 16840  0C56  0021               	movlb	1	; select bank1
 16841  0C57  0853               	movf	_DelayOff^(0+128),w
 16842  0C58  3E04               	addlw	4
 16843  0C59  0086               	movwf	6
 16844  0C5A  3001               	movlw	1	; select bank2/3
 16845  0C5B  0087               	movwf	7
 16846  0C5C  0020               	movlb	0	; select bank0
 16847  0C5D  0866               	movf	??_DlyOff_Main,w
 16848  0C5E  0781               	addwf	1,f
 16849                           
 16850                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 16851  0C5F  0021               	movlb	1	; select bank1
 16852  0C60  0853               	movf	_DelayOff^(0+128),w
 16853  0C61  3E04               	addlw	4
 16854  0C62  0086               	movwf	6
 16855  0C63  3001               	movlw	1	; select bank2/3
 16856  0C64  0087               	movwf	7
 16857  0C65  0A53               	incf	_DelayOff^(0+128),w
 16858  0C66  0084               	movwf	4
 16859  0C67  3001               	movlw	1	; select bank2/3
 16860  0C68  0085               	movwf	5
 16861  0C69  0800               	movf	0,w
 16862  0C6A  0201               	subwf	1,w
 16863  0C6B  1C03               	skipc
 16864  0C6C  0008               	return
 16865                           
 16866                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 16867  0C6D  0853               	movf	_DelayOff^(0+128),w
 16868  0C6E  3E04               	addlw	4
 16869  0C6F  0086               	movwf	6
 16870  0C70  3001               	movlw	1	; select bank2/3
 16871  0C71  0087               	movwf	7
 16872  0C72  0181               	clrf	1
 16873                           
 16874                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 16875  0C73  0853               	movf	_DelayOff^(0+128),w
 16876  0C74  0086               	movwf	6
 16877  0C75  3001               	movlw	1	; select bank2/3
 16878  0C76  0087               	movwf	7
 16879  0C77  1081               	bcf	1,1
 16880                           
 16881                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 16882  0C78  3064               	movlw	100
 16883  0C79  0020               	movlb	0	; select bank0
 16884  0C7A  00A4               	movwf	setBuz@time
 16885  0C7B  3000               	movlw	0
 16886  0C7C  00A5               	movwf	setBuz@time+1
 16887  0C7D  3001               	movlw	1
 16888  0C7E  3197  274E  318C   	fcall	_setBuz
 16889                           
 16890                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 16891  0C81  0020               	movlb	0	; select bank0
 16892  0C82  0868               	movf	DlyOff_Main@sw,w
 16893  0C83  319D  250A  318C   	fcall	_getDimmerLights_Status
 16894  0C86  3A01               	xorlw	1
 16895  0C87  1D03               	skipz
 16896  0C88  0008               	return
 16897                           
 16898                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 16899  0C89  0020               	movlb	0	; select bank0
 16900  0C8A  0868               	movf	DlyOff_Main@sw,w
 16901  0C8B  3188  204D  318C   	fcall	_setDimmerLights_SwOn
 16902                           
 16903                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 16904  0C8E  0020               	movlb	0	; select bank0
 16905  0C8F  0868               	movf	DlyOff_Main@sw,w
 16906  0C90  3188  2007         	fcall	_setDimmerLights_SwOff
 16907  0C92  0008               	return
 16908  0C93                     __end_of_DlyOff_Main:	
 16909                           
 16910                           	psect	text118
 16911  084D                     __ptext118:	
 16912 ;; *************** function _setDimmerLights_SwOn *****************
 16913 ;; Defined at:
 16914 ;;		line 662 in file "../src/Dimmer_B1.c"
 16915 ;; Parameters:    Size  Location     Type
 16916 ;;  sw              1    wreg     unsigned char 
 16917 ;; Auto vars:     Size  Location     Type
 16918 ;;  sw              1   12[BANK0 ] unsigned char 
 16919 ;;  idle            1   11[BANK0 ] unsigned char 
 16920 ;; Return value:  Size  Location     Type
 16921 ;;		None               void
 16922 ;; Registers used:
 16923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16924 ;; Tracked objects:
 16925 ;;		On entry : 0/0
 16926 ;;		On exit  : 0/0
 16927 ;;		Unchanged: 0/0
 16928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16931 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16932 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16933 ;;Total ram usage:        5 bytes
 16934 ;; Hardware stack levels used:    1
 16935 ;; Hardware stack levels required when called:    5
 16936 ;; This function calls:
 16937 ;;		_DimmerLights_SelectPointer
 16938 ;;		_setBuz
 16939 ;; This function is called by:
 16940 ;;		_DlyOff_Main
 16941 ;;		_setRFSW_Control
 16942 ;;		_setSw_Main
 16943 ;; This function uses a non-reentrant model
 16944 ;;
 16945                           
 16946                           
 16947                           ;psect for function _setDimmerLights_SwOn
 16948  084D                     _setDimmerLights_SwOn:	
 16949                           
 16950                           ;incstack = 0
 16951                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16952                           ;setDimmerLights_SwOn@sw stored from wreg
 16953  084D  0020               	movlb	0	; select bank0
 16954  084E  00AC               	movwf	setDimmerLights_SwOn@sw
 16955                           
 16956                           ;Dimmer_B1.c: 663: char idle = 0;
 16957  084F  01AB               	clrf	setDimmerLights_SwOn@idle
 16958                           
 16959                           ;Dimmer_B1.c: 665: if (idle == 0) {
 16960  0850  08AB               	movf	setDimmerLights_SwOn@idle,f
 16961  0851  1D03               	skipz
 16962  0852  2877               	goto	l8632
 16963                           
 16964                           ;Dimmer_B1.c: 666: if (sw == 1) {
 16965  0853  082C               	movf	setDimmerLights_SwOn@sw,w
 16966  0854  3A01               	xorlw	1
 16967  0855  1D03               	skipz
 16968  0856  2864               	goto	l8622
 16969                           
 16970                           ;Dimmer_B1.c: 667: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 16971  0857  01A9               	clrf	_setDimmerLights_SwOn$2195
 16972  0858  0AA9               	incf	_setDimmerLights_SwOn$2195,f
 16973  0859  0023               	movlb	3	; select bank3
 16974  085A  1AC7               	btfsc	_DimmerLights2^(0+384),5
 16975  085B  2861               	goto	l8620
 16976  085C  0022               	movlb	2	; select bank2
 16977  085D  1A55               	btfsc	_DimmerIntr2^(0+256),4
 16978  085E  2861               	goto	l8620
 16979  085F  0020               	movlb	0	; select bank0
 16980  0860  01A9               	clrf	_setDimmerLights_SwOn$2195
 16981  0861                     l8620:	
 16982  0861  0020               	movlb	0	; select bank0
 16983  0862  0829               	movf	_setDimmerLights_SwOn$2195,w
 16984  0863  2874               	goto	L11
 16985  0864                     l8622:	
 16986                           ;Dimmer_B1.c: 668: } else if (sw == 2) {
 16987                           
 16988  0864  082C               	movf	setDimmerLights_SwOn@sw,w
 16989  0865  3A02               	xorlw	2
 16990  0866  1D03               	skipz
 16991  0867  2877               	goto	l8632
 16992                           
 16993                           ;Dimmer_B1.c: 669: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 16994  0868  01AA               	clrf	_setDimmerLights_SwOn$2207
 16995  0869  0AAA               	incf	_setDimmerLights_SwOn$2207,f
 16996  086A  0023               	movlb	3	; select bank3
 16997  086B  1ABE               	btfsc	_DimmerLights1^(0+384),5
 16998  086C  2872               	goto	l8630
 16999  086D  0022               	movlb	2	; select bank2
 17000  086E  1A4E               	btfsc	_DimmerIntr1^(0+256),4
 17001  086F  2872               	goto	l8630
 17002  0870  0020               	movlb	0	; select bank0
 17003  0871  01AA               	clrf	_setDimmerLights_SwOn$2207
 17004  0872                     l8630:	
 17005  0872  0020               	movlb	0	; select bank0
 17006  0873  082A               	movf	_setDimmerLights_SwOn$2207,w
 17007  0874                     L11:	
 17008  0874  00A8               	movwf	??_setDimmerLights_SwOn
 17009  0875  0828               	movf	??_setDimmerLights_SwOn,w
 17010  0876  00AB               	movwf	setDimmerLights_SwOn@idle
 17011  0877                     l8632:	
 17012                           
 17013                           ;Dimmer_B1.c: 670: }
 17014                           ;Dimmer_B1.c: 671: }
 17015                           ;Dimmer_B1.c: 688: DimmerLights_SelectPointer(sw);
 17016  0877  082C               	movf	setDimmerLights_SwOn@sw,w
 17017  0878  319E  26DD  3188   	fcall	_DimmerLights_SelectPointer
 17018                           
 17019                           ;Dimmer_B1.c: 689: if (idle == 0) {
 17020  087B  0020               	movlb	0	; select bank0
 17021  087C  08AB               	movf	setDimmerLights_SwOn@idle,f
 17022  087D  1D03               	skipz
 17023  087E  0008               	return
 17024                           
 17025                           ;Dimmer_B1.c: 690: DimmerLights->SwFlag = 1;
 17026  087F  0879               	movf	_DimmerLights,w
 17027  0880  0086               	movwf	6
 17028  0881  3001               	movlw	1	; select bank2/3
 17029  0882  0087               	movwf	7
 17030  0883  1481               	bsf	1,1
 17031                           
 17032                           ;Dimmer_B1.c: 691: if (DimmerLights->Status == 0) {
 17033  0884  0879               	movf	_DimmerLights,w
 17034  0885  0086               	movwf	6
 17035  0886  3001               	movlw	1	; select bank2/3
 17036  0887  0087               	movwf	7
 17037  0888  1801               	btfsc	1,0
 17038  0889  289A               	goto	l8640
 17039                           
 17040                           ;Dimmer_B1.c: 692: DimmerLights->Status = 1;
 17041  088A  0879               	movf	_DimmerLights,w
 17042  088B  0086               	movwf	6
 17043  088C  3001               	movlw	1	; select bank2/3
 17044  088D  0087               	movwf	7
 17045  088E  1401               	bsf	1,0
 17046                           
 17047                           ;Dimmer_B1.c: 693: DimmerLights->Trigger = 1;
 17048  088F  0879               	movf	_DimmerLights,w
 17049  0890  0086               	movwf	6
 17050  0891  3001               	movlw	1	; select bank2/3
 17051  0892  0087               	movwf	7
 17052  0893  1501               	bsf	1,2
 17053                           
 17054                           ;Dimmer_B1.c: 694: DimmerLights->Switch = 1;
 17055  0894  0879               	movf	_DimmerLights,w
 17056  0895  0086               	movwf	6
 17057  0896  3001               	movlw	1	; select bank2/3
 17058  0897  0087               	movwf	7
 17059  0898  1581               	bsf	1,3
 17060                           
 17061                           ;Dimmer_B1.c: 695: } else {
 17062  0899  289F               	goto	l8642
 17063  089A                     l8640:	
 17064                           
 17065                           ;Dimmer_B1.c: 696: DimmerLights->Status = 0;
 17066  089A  0879               	movf	_DimmerLights,w
 17067  089B  0086               	movwf	6
 17068  089C  3001               	movlw	1	; select bank2/3
 17069  089D  0087               	movwf	7
 17070  089E  1001               	bcf	1,0
 17071  089F                     l8642:	
 17072                           
 17073                           ;Dimmer_B1.c: 697: }
 17074                           ;Dimmer_B1.c: 698: setBuz(1, 100);
 17075  089F  3064               	movlw	100
 17076  08A0  00A4               	movwf	setBuz@time
 17077  08A1  3000               	movlw	0
 17078  08A2  00A5               	movwf	setBuz@time+1
 17079  08A3  3001               	movlw	1
 17080  08A4  3197  274E         	fcall	_setBuz
 17081  08A6  0008               	return
 17082  08A7                     __end_of_setDimmerLights_SwOn:	
 17083                           
 17084                           	psect	text119
 17085  174E                     __ptext119:	
 17086 ;; *************** function _setBuz *****************
 17087 ;; Defined at:
 17088 ;;		line 22 in file "../src/Buzzer_B1.c"
 17089 ;; Parameters:    Size  Location     Type
 17090 ;;  count           1    wreg     unsigned char 
 17091 ;;  time            2    4[BANK0 ] int 
 17092 ;; Auto vars:     Size  Location     Type
 17093 ;;  count           1    7[BANK0 ] unsigned char 
 17094 ;; Return value:  Size  Location     Type
 17095 ;;		None               void
 17096 ;; Registers used:
 17097 ;;		wreg, status,2, status,0, pclath, cstack
 17098 ;; Tracked objects:
 17099 ;;		On entry : 0/0
 17100 ;;		On exit  : 0/0
 17101 ;;		Unchanged: 0/0
 17102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17103 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17106 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17107 ;;Total ram usage:        4 bytes
 17108 ;; Hardware stack levels used:    1
 17109 ;; Hardware stack levels required when called:    4
 17110 ;; This function calls:
 17111 ;;		___awdiv
 17112 ;; This function is called by:
 17113 ;;		_DlyOff_Main
 17114 ;;		_setDimmerLights_SwOn
 17115 ;;		_setDimmerLights_Dimming
 17116 ;;		_my_MainTimer
 17117 ;;		_Exception_Main
 17118 ;;		_setTemp_Main
 17119 ;;		_setLog_Code
 17120 ;;		_setControl_Lights_Table
 17121 ;;		_setRFSW_Control
 17122 ;;		_setSw_Main
 17123 ;; This function uses a non-reentrant model
 17124 ;;
 17125                           
 17126                           
 17127                           ;psect for function _setBuz
 17128  174E                     _setBuz:	
 17129                           
 17130                           ;incstack = 0
 17131                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 17132                           ;setBuz@count stored from wreg
 17133  174E  0020               	movlb	0	; select bank0
 17134  174F  00A7               	movwf	setBuz@count
 17135                           
 17136                           ;Buzzer_B1.c: 23: time /= 20;
 17137  1750  3014               	movlw	20
 17138  1751  00F3               	movwf	___awdiv@divisor
 17139  1752  3000               	movlw	0
 17140  1753  00F4               	movwf	___awdiv@divisor+1
 17141  1754  0825               	movf	setBuz@time+1,w
 17142  1755  01F6               	clrf	___awdiv@dividend+1
 17143  1756  07F6               	addwf	___awdiv@dividend+1,f
 17144  1757  0824               	movf	setBuz@time,w
 17145  1758  01F5               	clrf	___awdiv@dividend
 17146  1759  07F5               	addwf	___awdiv@dividend,f
 17147  175A  3196  26A2  3197   	fcall	___awdiv
 17148  175D  0874               	movf	?___awdiv+1,w
 17149  175E  0020               	movlb	0	; select bank0
 17150  175F  01A5               	clrf	setBuz@time+1
 17151  1760  07A5               	addwf	setBuz@time+1,f
 17152  1761  0873               	movf	?___awdiv,w
 17153  1762  01A4               	clrf	setBuz@time
 17154  1763  07A4               	addwf	setBuz@time,f
 17155                           
 17156                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 17157  1764  0021               	movlb	1	; select bank1
 17158  1765  1C3C               	btfss	_Buz1^(0+128),0
 17159  1766  0008               	return
 17160                           
 17161                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 17162  1767  18BC               	btfsc	_Buz1^(0+128),1
 17163  1768  2F7F               	goto	l94
 17164                           
 17165                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 17166  1769  14BC               	bsf	_Buz1^(0+128),1
 17167                           
 17168                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 17169  176A  01BD               	clrf	(_Buz1^(0+128)+1)
 17170  176B  01BE               	clrf	((_Buz1+1)^(0+128)+1)
 17171                           
 17172                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 17173  176C  0020               	movlb	0	; select bank0
 17174  176D  0827               	movf	setBuz@count,w
 17175  176E  00A6               	movwf	??_setBuz
 17176  176F  0826               	movf	??_setBuz,w
 17177  1770  0021               	movlb	1	; select bank1
 17178  1771  00BF               	movwf	(_Buz1^(0+128)+3)
 17179                           
 17180                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 17181  1772  0020               	movlb	0	; select bank0
 17182  1773  0825               	movf	setBuz@time+1,w
 17183  1774  0021               	movlb	1	; select bank1
 17184  1775  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 17185  1776  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 17186  1777  0020               	movlb	0	; select bank0
 17187  1778  0824               	movf	setBuz@time,w
 17188  1779  0021               	movlb	1	; select bank1
 17189  177A  01C2               	clrf	(_Buz1^(0+128)+6)
 17190  177B  07C2               	addwf	(_Buz1^(0+128)+6),f
 17191                           
 17192                           ;Buzzer_B1.c: 30: RB3 = 1;
 17193  177C  0020               	movlb	0	; select bank0
 17194  177D  158D               	bsf	13,3	;volatile
 17195                           
 17196                           ;Buzzer_B1.c: 31: } else {
 17197  177E  0008               	return
 17198  177F                     l94:	
 17199                           
 17200                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 17201  177F  19BC               	btfsc	_Buz1^(0+128),3
 17202  1780  2F93               	goto	l96
 17203                           
 17204                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 17205  1781  15BC               	bsf	_Buz1^(0+128),3
 17206                           
 17207                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 17208  1782  0020               	movlb	0	; select bank0
 17209  1783  0827               	movf	setBuz@count,w
 17210  1784  00A6               	movwf	??_setBuz
 17211  1785  0826               	movf	??_setBuz,w
 17212  1786  0021               	movlb	1	; select bank1
 17213  1787  00C0               	movwf	(_Buz1^(0+128)+4)
 17214                           
 17215                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17216  1788  0020               	movlb	0	; select bank0
 17217  1789  0825               	movf	setBuz@time+1,w
 17218  178A  0021               	movlb	1	; select bank1
 17219  178B  01C5               	clrf	((_Buz1+1)^(0+128)+8)
 17220  178C  07C5               	addwf	((_Buz1+1)^(0+128)+8),f
 17221  178D  0020               	movlb	0	; select bank0
 17222  178E  0824               	movf	setBuz@time,w
 17223  178F  0021               	movlb	1	; select bank1
 17224  1790  01C4               	clrf	(_Buz1^(0+128)+8)
 17225  1791  07C4               	addwf	(_Buz1^(0+128)+8),f
 17226                           
 17227                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17228  1792  0008               	return
 17229  1793                     l96:	
 17230  1793  1A3C               	btfsc	_Buz1^(0+128),4
 17231  1794  0008               	return
 17232                           
 17233                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17234  1795  163C               	bsf	_Buz1^(0+128),4
 17235                           
 17236                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17237  1796  0020               	movlb	0	; select bank0
 17238  1797  0827               	movf	setBuz@count,w
 17239  1798  00A6               	movwf	??_setBuz
 17240  1799  0826               	movf	??_setBuz,w
 17241  179A  0021               	movlb	1	; select bank1
 17242  179B  00C1               	movwf	(_Buz1^(0+128)+5)
 17243                           
 17244                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17245  179C  0020               	movlb	0	; select bank0
 17246  179D  0825               	movf	setBuz@time+1,w
 17247  179E  0021               	movlb	1	; select bank1
 17248  179F  01C7               	clrf	((_Buz1+1)^(0+128)+10)
 17249  17A0  07C7               	addwf	((_Buz1+1)^(0+128)+10),f
 17250  17A1  0020               	movlb	0	; select bank0
 17251  17A2  0824               	movf	setBuz@time,w
 17252  17A3  0021               	movlb	1	; select bank1
 17253  17A4  01C6               	clrf	(_Buz1^(0+128)+10)
 17254  17A5  07C6               	addwf	(_Buz1^(0+128)+10),f
 17255  17A6  0008               	return
 17256  17A7                     __end_of_setBuz:	
 17257                           
 17258                           	psect	text120
 17259  16A2                     __ptext120:	
 17260 ;; *************** function ___awdiv *****************
 17261 ;; Defined at:
 17262 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17263 ;; Parameters:    Size  Location     Type
 17264 ;;  divisor         2    3[COMMON] int 
 17265 ;;  dividend        2    5[COMMON] int 
 17266 ;; Auto vars:     Size  Location     Type
 17267 ;;  quotient        2    2[BANK0 ] int 
 17268 ;;  sign            1    1[BANK0 ] unsigned char 
 17269 ;;  counter         1    0[BANK0 ] unsigned char 
 17270 ;; Return value:  Size  Location     Type
 17271 ;;                  2    3[COMMON] int 
 17272 ;; Registers used:
 17273 ;;		wreg, status,2, status,0
 17274 ;; Tracked objects:
 17275 ;;		On entry : 0/0
 17276 ;;		On exit  : 0/0
 17277 ;;		Unchanged: 0/0
 17278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17279 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17280 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17281 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17282 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17283 ;;Total ram usage:        9 bytes
 17284 ;; Hardware stack levels used:    1
 17285 ;; Hardware stack levels required when called:    3
 17286 ;; This function calls:
 17287 ;;		Nothing
 17288 ;; This function is called by:
 17289 ;;		_setBuz
 17290 ;; This function uses a non-reentrant model
 17291 ;;
 17292                           
 17293                           
 17294                           ;psect for function ___awdiv
 17295  16A2                     ___awdiv:	
 17296                           
 17297                           ;incstack = 0
 17298                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17299  16A2  0020               	movlb	0	; select bank0
 17300  16A3  01A1               	clrf	___awdiv@sign
 17301  16A4  1FF4               	btfss	___awdiv@divisor+1,7
 17302  16A5  2EAD               	goto	l5934
 17303  16A6  09F3               	comf	___awdiv@divisor,f
 17304  16A7  09F4               	comf	___awdiv@divisor+1,f
 17305  16A8  0AF3               	incf	___awdiv@divisor,f
 17306  16A9  1903               	skipnz
 17307  16AA  0AF4               	incf	___awdiv@divisor+1,f
 17308  16AB  01A1               	clrf	___awdiv@sign
 17309  16AC  0AA1               	incf	___awdiv@sign,f
 17310  16AD                     l5934:	
 17311  16AD  1FF6               	btfss	___awdiv@dividend+1,7
 17312  16AE  2EB8               	goto	l5940
 17313  16AF  09F5               	comf	___awdiv@dividend,f
 17314  16B0  09F6               	comf	___awdiv@dividend+1,f
 17315  16B1  0AF5               	incf	___awdiv@dividend,f
 17316  16B2  1903               	skipnz
 17317  16B3  0AF6               	incf	___awdiv@dividend+1,f
 17318  16B4  3001               	movlw	1
 17319  16B5  00F7               	movwf	??___awdiv
 17320  16B6  0877               	movf	??___awdiv,w
 17321  16B7  06A1               	xorwf	___awdiv@sign,f
 17322  16B8                     l5940:	
 17323  16B8  01A2               	clrf	___awdiv@quotient
 17324  16B9  01A3               	clrf	___awdiv@quotient+1
 17325  16BA  0874               	movf	___awdiv@divisor+1,w
 17326  16BB  0473               	iorwf	___awdiv@divisor,w
 17327  16BC  1903               	skipnz
 17328  16BD  2EE7               	goto	l5962
 17329  16BE  01A0               	clrf	___awdiv@counter
 17330  16BF  0AA0               	incf	___awdiv@counter,f
 17331  16C0                     l5950:	
 17332  16C0  1BF4               	btfsc	___awdiv@divisor+1,7
 17333  16C1  2ECC               	goto	l5952
 17334  16C2  3001               	movlw	1
 17335  16C3                     u4555:	
 17336  16C3  35F3               	lslf	___awdiv@divisor,f
 17337  16C4  0DF4               	rlf	___awdiv@divisor+1,f
 17338  16C5  0B89               	decfsz	9,f
 17339  16C6  2EC3               	goto	u4555
 17340  16C7  3001               	movlw	1
 17341  16C8  00F7               	movwf	??___awdiv
 17342  16C9  0877               	movf	??___awdiv,w
 17343  16CA  07A0               	addwf	___awdiv@counter,f
 17344  16CB  2EC0               	goto	l5950
 17345  16CC                     l5952:	
 17346  16CC  3001               	movlw	1
 17347  16CD                     u4575:	
 17348  16CD  35A2               	lslf	___awdiv@quotient,f
 17349  16CE  0DA3               	rlf	___awdiv@quotient+1,f
 17350  16CF  0B89               	decfsz	9,f
 17351  16D0  2ECD               	goto	u4575
 17352  16D1  0874               	movf	___awdiv@divisor+1,w
 17353  16D2  0276               	subwf	___awdiv@dividend+1,w
 17354  16D3  1D03               	skipz
 17355  16D4  2ED7               	goto	u4585
 17356  16D5  0873               	movf	___awdiv@divisor,w
 17357  16D6  0275               	subwf	___awdiv@dividend,w
 17358  16D7                     u4585:	
 17359  16D7  1C03               	skipc
 17360  16D8  2EDE               	goto	l5958
 17361  16D9  0873               	movf	___awdiv@divisor,w
 17362  16DA  02F5               	subwf	___awdiv@dividend,f
 17363  16DB  0874               	movf	___awdiv@divisor+1,w
 17364  16DC  3BF6               	subwfb	___awdiv@dividend+1,f
 17365  16DD  1422               	bsf	___awdiv@quotient,0
 17366  16DE                     l5958:	
 17367  16DE  3001               	movlw	1
 17368  16DF                     u4595:	
 17369  16DF  36F4               	lsrf	___awdiv@divisor+1,f
 17370  16E0  0CF3               	rrf	___awdiv@divisor,f
 17371  16E1  0B89               	decfsz	9,f
 17372  16E2  2EDF               	goto	u4595
 17373  16E3  3001               	movlw	1
 17374  16E4  02A0               	subwf	___awdiv@counter,f
 17375  16E5  1D03               	btfss	3,2
 17376  16E6  2ECC               	goto	l5952
 17377  16E7                     l5962:	
 17378  16E7  0821               	movf	___awdiv@sign,w
 17379  16E8  1903               	btfsc	3,2
 17380  16E9  2EEF               	goto	l5966
 17381  16EA  09A2               	comf	___awdiv@quotient,f
 17382  16EB  09A3               	comf	___awdiv@quotient+1,f
 17383  16EC  0AA2               	incf	___awdiv@quotient,f
 17384  16ED  1903               	skipnz
 17385  16EE  0AA3               	incf	___awdiv@quotient+1,f
 17386  16EF                     l5966:	
 17387  16EF  0823               	movf	___awdiv@quotient+1,w
 17388  16F0  01F4               	clrf	?___awdiv+1
 17389  16F1  07F4               	addwf	?___awdiv+1,f
 17390  16F2  0822               	movf	___awdiv@quotient,w
 17391  16F3  01F3               	clrf	?___awdiv
 17392  16F4  07F3               	addwf	?___awdiv,f
 17393  16F5  0008               	return
 17394  16F6                     __end_of___awdiv:	
 17395                           
 17396                           	psect	text121
 17397  0807                     __ptext121:	
 17398 ;; *************** function _setDimmerLights_SwOff *****************
 17399 ;; Defined at:
 17400 ;;		line 703 in file "../src/Dimmer_B1.c"
 17401 ;; Parameters:    Size  Location     Type
 17402 ;;  sw              1    wreg     unsigned char 
 17403 ;; Auto vars:     Size  Location     Type
 17404 ;;  sw              1   69[BANK0 ] unsigned char 
 17405 ;; Return value:  Size  Location     Type
 17406 ;;		None               void
 17407 ;; Registers used:
 17408 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17409 ;; Tracked objects:
 17410 ;;		On entry : 0/0
 17411 ;;		On exit  : 0/0
 17412 ;;		Unchanged: 0/0
 17413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17417 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17418 ;;Total ram usage:        1 bytes
 17419 ;; Hardware stack levels used:    1
 17420 ;; Hardware stack levels required when called:    6
 17421 ;; This function calls:
 17422 ;;		_DimmerLights_SelectPointer
 17423 ;;		_getDelayOff_GO
 17424 ;;		_setDelayOff_GO
 17425 ;; This function is called by:
 17426 ;;		_DlyOff_Main
 17427 ;;		_Exception_Main
 17428 ;;		_setRFSW_Control
 17429 ;;		_setSw_Main
 17430 ;; This function uses a non-reentrant model
 17431 ;;
 17432                           
 17433                           
 17434                           ;psect for function _setDimmerLights_SwOff
 17435  0807                     _setDimmerLights_SwOff:	
 17436                           
 17437                           ;incstack = 0
 17438                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17439                           ;setDimmerLights_SwOff@sw stored from wreg
 17440  0807  0020               	movlb	0	; select bank0
 17441  0808  00E5               	movwf	setDimmerLights_SwOff@sw
 17442                           
 17443                           ;Dimmer_B1.c: 704: DimmerLights_SelectPointer(sw);
 17444  0809  0865               	movf	setDimmerLights_SwOff@sw,w
 17445  080A  319E  26DD  3188   	fcall	_DimmerLights_SelectPointer
 17446                           
 17447                           ;Dimmer_B1.c: 706: if (DimmerLights->SwFlag == 1) {
 17448  080D  0879               	movf	_DimmerLights,w
 17449  080E  0086               	movwf	6
 17450  080F  3001               	movlw	1	; select bank2/3
 17451  0810  0087               	movwf	7
 17452  0811  1C81               	btfss	1,1
 17453  0812  0008               	return
 17454                           
 17455                           ;Dimmer_B1.c: 707: DimmerLights->SwFlag = 0;
 17456  0813  0879               	movf	_DimmerLights,w
 17457  0814  0086               	movwf	6
 17458  0815  3001               	movlw	1	; select bank2/3
 17459  0816  0087               	movwf	7
 17460  0817  1081               	bcf	1,1
 17461                           
 17462                           ;Dimmer_B1.c: 708: if (DimmerLights->Status == 1) {
 17463  0818  0879               	movf	_DimmerLights,w
 17464  0819  0086               	movwf	6
 17465  081A  3001               	movlw	1	; select bank2/3
 17466  081B  0087               	movwf	7
 17467  081C  1C01               	btfss	1,0
 17468  081D  2834               	goto	l8654
 17469                           
 17470                           ;Dimmer_B1.c: 709: if (DimmerLights->DimmingSwFlag == 1) {
 17471  081E  0879               	movf	_DimmerLights,w
 17472  081F  0086               	movwf	6
 17473  0820  3001               	movlw	1	; select bank2/3
 17474  0821  0087               	movwf	7
 17475  0822  1E01               	btfss	1,4
 17476  0823  0008               	return
 17477                           
 17478                           ;Dimmer_B1.c: 710: DimmerLights->DimmingSwFlag = 0;
 17479  0824  0879               	movf	_DimmerLights,w
 17480  0825  0086               	movwf	6
 17481  0826  3001               	movlw	1	; select bank2/3
 17482  0827  0087               	movwf	7
 17483  0828  1201               	bcf	1,4
 17484                           
 17485                           ;Dimmer_B1.c: 712: DimmerLights->DimmingTrigger = 1;
 17486  0829  0879               	movf	_DimmerLights,w
 17487  082A  0086               	movwf	6
 17488  082B  3001               	movlw	1	; select bank2/3
 17489  082C  0087               	movwf	7
 17490  082D  1681               	bsf	1,5
 17491                           
 17492                           ;Dimmer_B1.c: 713: DimmerLights->DimmingSwitch = 0;
 17493  082E  0879               	movf	_DimmerLights,w
 17494  082F  0086               	movwf	6
 17495  0830  3001               	movlw	1	; select bank2/3
 17496  0831  0087               	movwf	7
 17497  0832  1301               	bcf	1,6
 17498                           
 17499                           ;Dimmer_B1.c: 714: }
 17500                           ;Dimmer_B1.c: 715: } else {
 17501  0833  0008               	return
 17502  0834                     l8654:	
 17503                           
 17504                           ;Dimmer_B1.c: 716: DimmerLights->Trigger = 1;
 17505  0834  0879               	movf	_DimmerLights,w
 17506  0835  0086               	movwf	6
 17507  0836  3001               	movlw	1	; select bank2/3
 17508  0837  0087               	movwf	7
 17509  0838  1501               	bsf	1,2
 17510                           
 17511                           ;Dimmer_B1.c: 717: DimmerLights->Switch = 0;
 17512  0839  0879               	movf	_DimmerLights,w
 17513  083A  0086               	movwf	6
 17514  083B  3001               	movlw	1	; select bank2/3
 17515  083C  0087               	movwf	7
 17516  083D  1181               	bcf	1,3
 17517                           
 17518                           ;Dimmer_B1.c: 720: if (getDelayOff_GO(sw) == 1) {
 17519  083E  0020               	movlb	0	; select bank0
 17520  083F  0865               	movf	setDimmerLights_SwOff@sw,w
 17521  0840  319D  2526  3188   	fcall	_getDelayOff_GO
 17522  0843  3A01               	xorlw	1
 17523  0844  1D03               	skipz
 17524  0845  0008               	return
 17525                           
 17526                           ;Dimmer_B1.c: 721: setDelayOff_GO(sw, 0, 0);
 17527  0846  0020               	movlb	0	; select bank0
 17528  0847  01E1               	clrf	setDelayOff_GO@command
 17529  0848  01E2               	clrf	setDelayOff_GO@value
 17530  0849  0865               	movf	setDimmerLights_SwOff@sw,w
 17531  084A  3196  26F6         	fcall	_setDelayOff_GO
 17532  084C  0008               	return
 17533  084D                     __end_of_setDimmerLights_SwOff:	
 17534                           
 17535                           	psect	text122
 17536  16F6                     __ptext122:	
 17537 ;; *************** function _setDelayOff_GO *****************
 17538 ;; Defined at:
 17539 ;;		line 86 in file "../src/DelayOff_B1.c"
 17540 ;; Parameters:    Size  Location     Type
 17541 ;;  sw              1    wreg     unsigned char 
 17542 ;;  command         1   65[BANK0 ] unsigned char 
 17543 ;;  value           1   66[BANK0 ] unsigned char 
 17544 ;; Auto vars:     Size  Location     Type
 17545 ;;  sw              1   68[BANK0 ] unsigned char 
 17546 ;; Return value:  Size  Location     Type
 17547 ;;		None               void
 17548 ;; Registers used:
 17549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17550 ;; Tracked objects:
 17551 ;;		On entry : 0/0
 17552 ;;		On exit  : 0/0
 17553 ;;		Unchanged: 0/0
 17554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17555 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17558 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17559 ;;Total ram usage:        4 bytes
 17560 ;; Hardware stack levels used:    1
 17561 ;; Hardware stack levels required when called:    5
 17562 ;; This function calls:
 17563 ;;		_DelayOffPointSelect
 17564 ;;		_DelayTimejudge
 17565 ;;		_setProductData
 17566 ;; This function is called by:
 17567 ;;		_setDimmerLights_SwOff
 17568 ;;		_setRFSW_Control
 17569 ;; This function uses a non-reentrant model
 17570 ;;
 17571                           
 17572                           
 17573                           ;psect for function _setDelayOff_GO
 17574  16F6                     _setDelayOff_GO:	
 17575                           
 17576                           ;incstack = 0
 17577                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17578                           ;setDelayOff_GO@sw stored from wreg
 17579  16F6  0020               	movlb	0	; select bank0
 17580  16F7  00E4               	movwf	setDelayOff_GO@sw
 17581                           
 17582                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 17583  16F8  0864               	movf	setDelayOff_GO@sw,w
 17584  16F9  319E  2674  3196   	fcall	_DelayOffPointSelect
 17585                           
 17586                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 17587  16FC  0020               	movlb	0	; select bank0
 17588  16FD  0861               	movf	setDelayOff_GO@command,w
 17589  16FE  3A01               	xorlw	1
 17590  16FF  3000               	movlw	0
 17591  1700  1903               	skipnz
 17592  1701  3001               	movlw	1
 17593  1702  00E3               	movwf	??_setDelayOff_GO
 17594  1703  0021               	movlb	1	; select bank1
 17595  1704  0853               	movf	_DelayOff^(0+128),w
 17596  1705  0086               	movwf	6
 17597  1706  3001               	movlw	1	; select bank2/3
 17598  1707  0087               	movwf	7
 17599  1708  0020               	movlb	0	; select bank0
 17600  1709  0DE3               	rlf	??_setDelayOff_GO,f
 17601  170A  0801               	movf	1,w
 17602  170B  0663               	xorwf	??_setDelayOff_GO,w
 17603  170C  39FD               	andlw	-3
 17604  170D  0663               	xorwf	??_setDelayOff_GO,w
 17605  170E  0081               	movwf	1
 17606                           
 17607                           ;DelayOff_B1.c: 92: if (command == 1) {
 17608  170F  0861               	movf	setDelayOff_GO@command,w
 17609  1710  3A01               	xorlw	1
 17610  1711  1D03               	skipz
 17611  1712  2F38               	goto	l8576
 17612                           
 17613                           ;DelayOff_B1.c: 93: DelayOff->Value = DelayTimejudge(value);
 17614  1713  0862               	movf	setDelayOff_GO@value,w
 17615  1714  3192  226A  3196   	fcall	_DelayTimejudge
 17616  1717  0020               	movlb	0	; select bank0
 17617  1718  00E3               	movwf	??_setDelayOff_GO
 17618  1719  0021               	movlb	1	; select bank1
 17619  171A  0A53               	incf	_DelayOff^(0+128),w
 17620  171B  0086               	movwf	6
 17621  171C  3001               	movlw	1	; select bank2/3
 17622  171D  0087               	movwf	7
 17623  171E  0020               	movlb	0	; select bank0
 17624  171F  0863               	movf	??_setDelayOff_GO,w
 17625  1720  0081               	movwf	1
 17626                           
 17627                           ;DelayOff_B1.c: 94: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 17628  1721  300F               	movlw	15
 17629  1722  0562               	andwf	setDelayOff_GO@value,w
 17630  1723  00E3               	movwf	??_setDelayOff_GO
 17631  1724  0863               	movf	??_setDelayOff_GO,w
 17632  1725  3A05               	xorlw	5
 17633  1726  1903               	skipnz
 17634  1727  2F2C               	goto	l8570
 17635  1728  0862               	movf	setDelayOff_GO@value,w
 17636  1729  390F               	andlw	15
 17637  172A  1D03               	btfss	3,2
 17638  172B  2F32               	goto	l8574
 17639  172C                     l8570:	
 17640  172C  3026               	movlw	38
 17641  172D  0262               	subwf	setDelayOff_GO@value,w
 17642  172E  1803               	skipnc
 17643  172F  2F32               	goto	l8574
 17644                           
 17645                           ;DelayOff_B1.c: 95: setProductData(26 + sw, value);
 17646  1730  0862               	movf	setDelayOff_GO@value,w
 17647  1731  2F34               	goto	L13
 17648  1732                     l8574:	
 17649                           ;DelayOff_B1.c: 96: } else {
 17650                           
 17651                           
 17652                           ;DelayOff_B1.c: 97: setProductData(26 + sw, 0x05);
 17653  1732  3005               	movlw	5
 17654  1733  0020               	movlb	0	; select bank0
 17655  1734                     L13:	
 17656  1734  00E3               	movwf	??_setDelayOff_GO
 17657  1735  0863               	movf	??_setDelayOff_GO,w
 17658  1736  00DD               	movwf	setProductData@value
 17659  1737  2F3A               	goto	L12
 17660  1738                     l8576:	
 17661                           ;DelayOff_B1.c: 98: }
 17662                           ;DelayOff_B1.c: 99: } else {
 17663                           
 17664                           
 17665                           ;DelayOff_B1.c: 100: setProductData(sw + 26, 0);
 17666  1738  0020               	movlb	0	; select bank0
 17667  1739  01DD               	clrf	setProductData@value
 17668  173A                     L12:	
 17669  173A  0864               	movf	setDelayOff_GO@sw,w
 17670  173B  3E1A               	addlw	26
 17671  173C  319D  2518         	fcall	_setProductData
 17672                           
 17673                           ;DelayOff_B1.c: 101: }
 17674                           ;DelayOff_B1.c: 102: DelayOff->SecondTime = 0;
 17675  173E  0021               	movlb	1	; select bank1
 17676  173F  0853               	movf	_DelayOff^(0+128),w
 17677  1740  3E02               	addlw	2
 17678  1741  0086               	movwf	6
 17679  1742  3001               	movlw	1	; select bank2/3
 17680  1743  0087               	movwf	7
 17681  1744  3000               	movlw	0
 17682  1745  3FC0               	movwi [0]fsr1
 17683  1746  3FC1               	movwi [1]fsr1
 17684                           
 17685                           ;DelayOff_B1.c: 103: DelayOff->MinuteTime = 0;
 17686  1747  0853               	movf	_DelayOff^(0+128),w
 17687  1748  3E04               	addlw	4
 17688  1749  0086               	movwf	6
 17689  174A  3001               	movlw	1	; select bank2/3
 17690  174B  0087               	movwf	7
 17691  174C  0181               	clrf	1
 17692  174D  0008               	return
 17693  174E                     __end_of_setDelayOff_GO:	
 17694                           
 17695                           	psect	text123
 17696  1D18                     __ptext123:	
 17697 ;; *************** function _setProductData *****************
 17698 ;; Defined at:
 17699 ;;		line 591 in file "../src/Main_B1.c"
 17700 ;; Parameters:    Size  Location     Type
 17701 ;;  address         1    wreg     unsigned char 
 17702 ;;  value           1   61[BANK0 ] unsigned char 
 17703 ;; Auto vars:     Size  Location     Type
 17704 ;;  address         1   64[BANK0 ] unsigned char 
 17705 ;; Return value:  Size  Location     Type
 17706 ;;		None               void
 17707 ;; Registers used:
 17708 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17709 ;; Tracked objects:
 17710 ;;		On entry : 0/0
 17711 ;;		On exit  : 0/0
 17712 ;;		Unchanged: 0/0
 17713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17714 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17715 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17716 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17717 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17718 ;;Total ram usage:        4 bytes
 17719 ;; Hardware stack levels used:    1
 17720 ;; Hardware stack levels required when called:    3
 17721 ;; This function calls:
 17722 ;;		Nothing
 17723 ;; This function is called by:
 17724 ;;		_setDelayOff_GO
 17725 ;;		_setDimmerLights_OnOff
 17726 ;;		_setDimmerLights_Dimming
 17727 ;;		_setTemp_Main
 17728 ;;		_setLog_Code
 17729 ;;		_setControl_Lights_Table
 17730 ;;		_setRFSW_AdjControl
 17731 ;;		_setRF_DimmerValue
 17732 ;;		_setRF_DimmerLights
 17733 ;; This function uses a non-reentrant model
 17734 ;;
 17735                           
 17736                           
 17737                           ;psect for function _setProductData
 17738  1D18                     _setProductData:	
 17739                           
 17740                           ;incstack = 0
 17741                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 17742                           ;setProductData@address stored from wreg
 17743  1D18  0020               	movlb	0	; select bank0
 17744  1D19  00E0               	movwf	setProductData@address
 17745                           
 17746                           ;Main_B1.c: 592: product->Data[address] = value;
 17747  1D1A  085D               	movf	setProductData@value,w
 17748  1D1B  00DE               	movwf	??_setProductData
 17749  1D1C  0860               	movf	setProductData@address,w
 17750  1D1D  076E               	addwf	_product,w
 17751  1D1E  00DF               	movwf	??_setProductData+1
 17752  1D1F  085F               	movf	??_setProductData+1,w
 17753  1D20  0086               	movwf	6
 17754  1D21  3002               	movlw	2	; select bank4/5
 17755  1D22  0087               	movwf	7
 17756  1D23  085E               	movf	??_setProductData,w
 17757  1D24  0081               	movwf	1
 17758  1D25  0008               	return
 17759  1D26                     __end_of_setProductData:	
 17760                           
 17761                           	psect	text124
 17762  126A                     __ptext124:	
 17763 ;; *************** function _DelayTimejudge *****************
 17764 ;; Defined at:
 17765 ;;		line 115 in file "../src/DelayOff_B1.c"
 17766 ;; Parameters:    Size  Location     Type
 17767 ;;  value           1    wreg     unsigned char 
 17768 ;; Auto vars:     Size  Location     Type
 17769 ;;  value           1    5[BANK0 ] unsigned char 
 17770 ;;  k               1    4[BANK0 ] unsigned char 
 17771 ;;  j               1    3[BANK0 ] unsigned char 
 17772 ;;  i               1    2[BANK0 ] unsigned char 
 17773 ;; Return value:  Size  Location     Type
 17774 ;;                  1    wreg      unsigned char 
 17775 ;; Registers used:
 17776 ;;		wreg, status,2, status,0, pclath, cstack
 17777 ;; Tracked objects:
 17778 ;;		On entry : 0/0
 17779 ;;		On exit  : 0/0
 17780 ;;		Unchanged: 0/0
 17781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17783 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17784 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17785 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17786 ;;Total ram usage:        6 bytes
 17787 ;; Hardware stack levels used:    1
 17788 ;; Hardware stack levels required when called:    4
 17789 ;; This function calls:
 17790 ;;		___bmul
 17791 ;; This function is called by:
 17792 ;;		_setDelayOff_GO
 17793 ;; This function uses a non-reentrant model
 17794 ;;
 17795                           
 17796                           
 17797                           ;psect for function _DelayTimejudge
 17798  126A                     _DelayTimejudge:	
 17799                           
 17800                           ;incstack = 0
 17801                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 17802                           ;DelayTimejudge@value stored from wreg
 17803  126A  0020               	movlb	0	; select bank0
 17804  126B  00A5               	movwf	DelayTimejudge@value
 17805                           
 17806                           ;DelayOff_B1.c: 116: char i = 5, j = 0, k = 0;
 17807  126C  3005               	movlw	5
 17808  126D  00A0               	movwf	??_DelayTimejudge
 17809  126E  0820               	movf	??_DelayTimejudge,w
 17810  126F  00A2               	movwf	DelayTimejudge@i
 17811  1270  01A3               	clrf	DelayTimejudge@j
 17812  1271  01A4               	clrf	DelayTimejudge@k
 17813                           
 17814                           ;DelayOff_B1.c: 117: if (value <= 0x30) {
 17815  1272  3031               	movlw	49
 17816  1273  0225               	subwf	DelayTimejudge@value,w
 17817  1274  1803               	skipnc
 17818  1275  2A92               	goto	l8526
 17819                           
 17820                           ;DelayOff_B1.c: 118: j = value & 0x0f;
 17821  1276  0825               	movf	DelayTimejudge@value,w
 17822  1277  390F               	andlw	15
 17823  1278  00A0               	movwf	??_DelayTimejudge
 17824  1279  0820               	movf	??_DelayTimejudge,w
 17825  127A  00A3               	movwf	DelayTimejudge@j
 17826                           
 17827                           ;DelayOff_B1.c: 119: k = (value >> 4) & 0x0f;
 17828  127B  0825               	movf	DelayTimejudge@value,w
 17829  127C  00A0               	movwf	??_DelayTimejudge
 17830  127D  3004               	movlw	4
 17831  127E                     u8925:	
 17832  127E  36A0               	lsrf	??_DelayTimejudge,f
 17833  127F  0B89               	decfsz	9,f
 17834  1280  2A7E               	goto	u8925
 17835  1281  0820               	movf	??_DelayTimejudge,w
 17836  1282  390F               	andlw	15
 17837  1283  00A1               	movwf	??_DelayTimejudge+1
 17838  1284  0821               	movf	??_DelayTimejudge+1,w
 17839  1285  00A4               	movwf	DelayTimejudge@k
 17840                           
 17841                           ;DelayOff_B1.c: 120: i = j + (k * 10);
 17842  1286  300A               	movlw	10
 17843  1287  00A0               	movwf	??_DelayTimejudge
 17844  1288  0820               	movf	??_DelayTimejudge,w
 17845  1289  00F3               	movwf	___bmul@multiplicand
 17846  128A  0824               	movf	DelayTimejudge@k,w
 17847  128B  319D  25D1         	fcall	___bmul
 17848  128D  0020               	movlb	0	; select bank0
 17849  128E  0723               	addwf	DelayTimejudge@j,w
 17850  128F  00A1               	movwf	??_DelayTimejudge+1
 17851  1290  0821               	movf	??_DelayTimejudge+1,w
 17852  1291  00A2               	movwf	DelayTimejudge@i
 17853  1292                     l8526:	
 17854                           
 17855                           ;DelayOff_B1.c: 121: }
 17856                           ;DelayOff_B1.c: 142: return i;
 17857  1292  0822               	movf	DelayTimejudge@i,w
 17858  1293  0008               	return
 17859  1294                     __end_of_DelayTimejudge:	
 17860                           
 17861                           	psect	text125
 17862  1DD1                     __ptext125:	
 17863 ;; *************** function ___bmul *****************
 17864 ;; Defined at:
 17865 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 17866 ;; Parameters:    Size  Location     Type
 17867 ;;  multiplier      1    wreg     unsigned char 
 17868 ;;  multiplicand    1    3[COMMON] unsigned char 
 17869 ;; Auto vars:     Size  Location     Type
 17870 ;;  multiplier      1    6[COMMON] unsigned char 
 17871 ;;  product         1    5[COMMON] unsigned char 
 17872 ;; Return value:  Size  Location     Type
 17873 ;;                  1    wreg      unsigned char 
 17874 ;; Registers used:
 17875 ;;		wreg, status,2, status,0
 17876 ;; Tracked objects:
 17877 ;;		On entry : 0/0
 17878 ;;		On exit  : 0/0
 17879 ;;		Unchanged: 0/0
 17880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17881 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17882 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17883 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17884 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17885 ;;Total ram usage:        4 bytes
 17886 ;; Hardware stack levels used:    1
 17887 ;; Hardware stack levels required when called:    3
 17888 ;; This function calls:
 17889 ;;		Nothing
 17890 ;; This function is called by:
 17891 ;;		_DelayTimejudge
 17892 ;; This function uses a non-reentrant model
 17893 ;;
 17894                           
 17895                           
 17896                           ;psect for function ___bmul
 17897  1DD1                     ___bmul:	
 17898                           
 17899                           ;incstack = 0
 17900                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 17901                           ;___bmul@multiplier stored from wreg
 17902  1DD1  00F6               	movwf	___bmul@multiplier
 17903  1DD2  01F5               	clrf	___bmul@product
 17904  1DD3                     l5886:	
 17905  1DD3  1C76               	btfss	___bmul@multiplier,0
 17906  1DD4  2DD9               	goto	l5890
 17907  1DD5  0873               	movf	___bmul@multiplicand,w
 17908  1DD6  00F4               	movwf	??___bmul
 17909  1DD7  0874               	movf	??___bmul,w
 17910  1DD8  07F5               	addwf	___bmul@product,f
 17911  1DD9                     l5890:	
 17912  1DD9  1003               	clrc
 17913  1DDA  0DF3               	rlf	___bmul@multiplicand,f
 17914  1DDB  1003               	clrc
 17915  1DDC  0CF6               	rrf	___bmul@multiplier,f
 17916  1DDD  08F6               	movf	___bmul@multiplier,f
 17917  1DDE  1D03               	skipz
 17918  1DDF  2DD3               	goto	l5886
 17919  1DE0  0875               	movf	___bmul@product,w
 17920  1DE1  0008               	return
 17921  1DE2                     __end_of___bmul:	
 17922                           
 17923                           	psect	text126
 17924  1D26                     __ptext126:	
 17925 ;; *************** function _getDelayOff_GO *****************
 17926 ;; Defined at:
 17927 ;;		line 108 in file "../src/DelayOff_B1.c"
 17928 ;; Parameters:    Size  Location     Type
 17929 ;;  sw              1    wreg     unsigned char 
 17930 ;; Auto vars:     Size  Location     Type
 17931 ;;  sw              1    5[COMMON] unsigned char 
 17932 ;;  go              1    6[COMMON] unsigned char 
 17933 ;; Return value:  Size  Location     Type
 17934 ;;                  1    wreg      unsigned char 
 17935 ;; Registers used:
 17936 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17937 ;; Tracked objects:
 17938 ;;		On entry : 0/0
 17939 ;;		On exit  : 0/0
 17940 ;;		Unchanged: 0/0
 17941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17943 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17945 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17946 ;;Total ram usage:        2 bytes
 17947 ;; Hardware stack levels used:    1
 17948 ;; Hardware stack levels required when called:    4
 17949 ;; This function calls:
 17950 ;;		_DelayOffPointSelect
 17951 ;; This function is called by:
 17952 ;;		_setDimmerLights_SwOff
 17953 ;;		_setRFSW_Control
 17954 ;; This function uses a non-reentrant model
 17955 ;;
 17956                           
 17957                           
 17958                           ;psect for function _getDelayOff_GO
 17959  1D26                     _getDelayOff_GO:	
 17960                           
 17961                           ;incstack = 0
 17962                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17963                           ;getDelayOff_GO@sw stored from wreg
 17964  1D26  00F5               	movwf	getDelayOff_GO@sw
 17965                           
 17966                           ;DelayOff_B1.c: 109: DelayOffPointSelect(sw);
 17967  1D27  0875               	movf	getDelayOff_GO@sw,w
 17968  1D28  319E  2674         	fcall	_DelayOffPointSelect
 17969                           
 17970                           ;DelayOff_B1.c: 110: char go = DelayOff->GO == 1 ? 1 : 0;
 17971  1D2A  0021               	movlb	1	; select bank1
 17972  1D2B  0853               	movf	_DelayOff^(0+128),w
 17973  1D2C  0086               	movwf	6
 17974  1D2D  3001               	movlw	1	; select bank2/3
 17975  1D2E  0087               	movwf	7
 17976  1D2F  3000               	movlw	0
 17977  1D30  1881               	btfsc	1,1
 17978  1D31  3001               	movlw	1
 17979  1D32  00F6               	movwf	getDelayOff_GO@go
 17980                           
 17981                           ;DelayOff_B1.c: 111: return go;
 17982  1D33  0876               	movf	getDelayOff_GO@go,w
 17983  1D34  0008               	return
 17984  1D35                     __end_of_getDelayOff_GO:	
 17985                           
 17986                           	psect	text127
 17987  1D0A                     __ptext127:	
 17988 ;; *************** function _getDimmerLights_Status *****************
 17989 ;; Defined at:
 17990 ;;		line 987 in file "../src/Dimmer_B1.c"
 17991 ;; Parameters:    Size  Location     Type
 17992 ;;  lights          1    wreg     unsigned char 
 17993 ;; Auto vars:     Size  Location     Type
 17994 ;;  lights          1    5[COMMON] unsigned char 
 17995 ;;  status          1    6[COMMON] unsigned char 
 17996 ;; Return value:  Size  Location     Type
 17997 ;;                  1    wreg      unsigned char 
 17998 ;; Registers used:
 17999 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18000 ;; Tracked objects:
 18001 ;;		On entry : 0/0
 18002 ;;		On exit  : 0/0
 18003 ;;		Unchanged: 0/0
 18004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18008 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18009 ;;Total ram usage:        2 bytes
 18010 ;; Hardware stack levels used:    1
 18011 ;; Hardware stack levels required when called:    4
 18012 ;; This function calls:
 18013 ;;		_DimmerLights_SelectPointer
 18014 ;; This function is called by:
 18015 ;;		_DlyOff_Main
 18016 ;;		_Exception_Main
 18017 ;;		_setRFSW_Control
 18018 ;;		_setRFSW_AdjControl
 18019 ;; This function uses a non-reentrant model
 18020 ;;
 18021                           
 18022                           
 18023                           ;psect for function _getDimmerLights_Status
 18024  1D0A                     _getDimmerLights_Status:	
 18025                           
 18026                           ;incstack = 0
 18027                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18028                           ;getDimmerLights_Status@lights stored from wreg
 18029  1D0A  00F5               	movwf	getDimmerLights_Status@lights
 18030                           
 18031                           ;Dimmer_B1.c: 988: DimmerLights_SelectPointer(lights);
 18032  1D0B  0875               	movf	getDimmerLights_Status@lights,w
 18033  1D0C  319E  26DD         	fcall	_DimmerLights_SelectPointer
 18034                           
 18035                           ;Dimmer_B1.c: 989: char status = DimmerLights->Status == 1 ? 1 : 0;
 18036  1D0E  0879               	movf	_DimmerLights,w
 18037  1D0F  0086               	movwf	6
 18038  1D10  3001               	movlw	1	; select bank2/3
 18039  1D11  0087               	movwf	7
 18040  1D12  3000               	movlw	0
 18041  1D13  1801               	btfsc	1,0
 18042  1D14  3001               	movlw	1
 18043  1D15  00F6               	movwf	getDimmerLights_Status@status
 18044                           
 18045                           ;Dimmer_B1.c: 990: return status;
 18046  1D16  0876               	movf	getDimmerLights_Status@status,w
 18047  1D17  0008               	return
 18048  1D18                     __end_of_getDimmerLights_Status:	
 18049                           
 18050                           	psect	text128
 18051  1EDD                     __ptext128:	
 18052 ;; *************** function _DimmerLights_SelectPointer *****************
 18053 ;; Defined at:
 18054 ;;		line 581 in file "../src/Dimmer_B1.c"
 18055 ;; Parameters:    Size  Location     Type
 18056 ;;  lights          1    wreg     unsigned char 
 18057 ;; Auto vars:     Size  Location     Type
 18058 ;;  lights          1    4[COMMON] unsigned char 
 18059 ;; Return value:  Size  Location     Type
 18060 ;;		None               void
 18061 ;; Registers used:
 18062 ;;		wreg
 18063 ;; Tracked objects:
 18064 ;;		On entry : 0/0
 18065 ;;		On exit  : 0/0
 18066 ;;		Unchanged: 0/0
 18067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18069 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18070 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18071 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18072 ;;Total ram usage:        2 bytes
 18073 ;; Hardware stack levels used:    1
 18074 ;; Hardware stack levels required when called:    3
 18075 ;; This function calls:
 18076 ;;		Nothing
 18077 ;; This function is called by:
 18078 ;;		_setDimmerLights_SwOn
 18079 ;;		_setDimmerLights_SwOff
 18080 ;;		_setDimmerLights_DimmingOn
 18081 ;;		_setDimmerLights_Main
 18082 ;;		_getDimmerLights_Status
 18083 ;;		_setDimmerLights_Status
 18084 ;; This function uses a non-reentrant model
 18085 ;;
 18086                           
 18087                           
 18088                           ;psect for function _DimmerLights_SelectPointer
 18089  1EDD                     _DimmerLights_SelectPointer:	
 18090                           
 18091                           ;incstack = 0
 18092                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18093                           ;DimmerLights_SelectPointer@lights stored from wreg
 18094  1EDD  00F4               	movwf	DimmerLights_SelectPointer@lights
 18095                           
 18096                           ;Dimmer_B1.c: 583: if (lights == 1) {
 18097  1EDE  0874               	movf	DimmerLights_SelectPointer@lights,w
 18098  1EDF  3A01               	xorlw	1
 18099  1EE0  1D03               	skipz
 18100  1EE1  2EE9               	goto	l6046
 18101                           
 18102                           ;Dimmer_B1.c: 584: DimmerLights = &DimmerLights1;
 18103  1EE2  30BE               	movlw	_DimmerLights1& (0+255)
 18104  1EE3  00F3               	movwf	??_DimmerLights_SelectPointer
 18105  1EE4  0873               	movf	??_DimmerLights_SelectPointer,w
 18106  1EE5  00F9               	movwf	_DimmerLights
 18107                           
 18108                           ;Dimmer_B1.c: 585: __nop();
 18109  1EE6  0000               	nop
 18110                           
 18111                           ;Dimmer_B1.c: 586: __nop();
 18112  1EE7  0000               	nop
 18113                           
 18114                           ;Dimmer_B1.c: 587: }
 18115  1EE8  0008               	return
 18116  1EE9                     l6046:	
 18117                           
 18118                           ;Dimmer_B1.c: 590: else if (lights == 2) {
 18119  1EE9  0874               	movf	DimmerLights_SelectPointer@lights,w
 18120  1EEA  3A02               	xorlw	2
 18121  1EEB  1D03               	skipz
 18122  1EEC  0008               	return
 18123                           
 18124                           ;Dimmer_B1.c: 591: DimmerLights = &DimmerLights2;
 18125  1EED  30C7               	movlw	_DimmerLights2& (0+255)
 18126  1EEE  00F3               	movwf	??_DimmerLights_SelectPointer
 18127  1EEF  0873               	movf	??_DimmerLights_SelectPointer,w
 18128  1EF0  00F9               	movwf	_DimmerLights
 18129                           
 18130                           ;Dimmer_B1.c: 592: __nop();
 18131  1EF1  0000               	nop
 18132                           
 18133                           ;Dimmer_B1.c: 593: __nop();
 18134  1EF2  0000               	nop
 18135  1EF3  0008               	return
 18136  1EF4                     __end_of_DimmerLights_SelectPointer:	
 18137                           
 18138                           	psect	text129
 18139  1C52                     __ptext129:	
 18140 ;; *************** function _DelayOff_Initialization *****************
 18141 ;; Defined at:
 18142 ;;		line 26 in file "../src/DelayOff_B1.c"
 18143 ;; Parameters:    Size  Location     Type
 18144 ;;		None
 18145 ;; Auto vars:     Size  Location     Type
 18146 ;;		None
 18147 ;; Return value:  Size  Location     Type
 18148 ;;		None               void
 18149 ;; Registers used:
 18150 ;;		wreg, status,2, status,0, pclath, cstack
 18151 ;; Tracked objects:
 18152 ;;		On entry : 0/0
 18153 ;;		On exit  : 0/0
 18154 ;;		Unchanged: 0/0
 18155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18160 ;;Total ram usage:        0 bytes
 18161 ;; Hardware stack levels used:    1
 18162 ;; Hardware stack levels required when called:    5
 18163 ;; This function calls:
 18164 ;;		_DlyOff_Initialization
 18165 ;; This function is called by:
 18166 ;;		_main
 18167 ;; This function uses a non-reentrant model
 18168 ;;
 18169                           
 18170                           
 18171                           ;psect for function _DelayOff_Initialization
 18172  1C52                     _DelayOff_Initialization:	
 18173                           
 18174                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18175                           
 18176                           ;incstack = 0
 18177                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18178  1C52  3001               	movlw	1
 18179  1C53  319C  2420  319C   	fcall	_DlyOff_Initialization
 18180                           
 18181                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 18182  1C56  3002               	movlw	2
 18183  1C57  319C  2420         	fcall	_DlyOff_Initialization
 18184  1C59  0008               	return
 18185  1C5A                     __end_of_DelayOff_Initialization:	
 18186                           
 18187                           	psect	text130
 18188  1C20                     __ptext130:	
 18189 ;; *************** function _DlyOff_Initialization *****************
 18190 ;; Defined at:
 18191 ;;		line 56 in file "../src/DelayOff_B1.c"
 18192 ;; Parameters:    Size  Location     Type
 18193 ;;  sw              1    wreg     unsigned char 
 18194 ;; Auto vars:     Size  Location     Type
 18195 ;;  sw              1    5[COMMON] unsigned char 
 18196 ;; Return value:  Size  Location     Type
 18197 ;;		None               void
 18198 ;; Registers used:
 18199 ;;		wreg, status,2, status,0, pclath, cstack
 18200 ;; Tracked objects:
 18201 ;;		On entry : 0/0
 18202 ;;		On exit  : 0/0
 18203 ;;		Unchanged: 0/0
 18204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18206 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18208 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18209 ;;Total ram usage:        1 bytes
 18210 ;; Hardware stack levels used:    1
 18211 ;; Hardware stack levels required when called:    4
 18212 ;; This function calls:
 18213 ;;		_DelayOffPointSelect
 18214 ;; This function is called by:
 18215 ;;		_DelayOff_Initialization
 18216 ;; This function uses a non-reentrant model
 18217 ;;
 18218                           
 18219                           
 18220                           ;psect for function _DlyOff_Initialization
 18221  1C20                     _DlyOff_Initialization:	
 18222                           
 18223                           ;incstack = 0
 18224                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18225                           ;DlyOff_Initialization@sw stored from wreg
 18226  1C20  00F5               	movwf	DlyOff_Initialization@sw
 18227                           
 18228                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18229  1C21  0875               	movf	DlyOff_Initialization@sw,w
 18230  1C22  319E  2674         	fcall	_DelayOffPointSelect
 18231  1C24  0008               	return
 18232  1C25                     __end_of_DlyOff_Initialization:	
 18233                           
 18234                           	psect	text131
 18235  1E74                     __ptext131:	
 18236 ;; *************** function _DelayOffPointSelect *****************
 18237 ;; Defined at:
 18238 ;;		line 7 in file "../src/DelayOff_B1.c"
 18239 ;; Parameters:    Size  Location     Type
 18240 ;;  sw              1    wreg     unsigned char 
 18241 ;; Auto vars:     Size  Location     Type
 18242 ;;  sw              1    4[COMMON] unsigned char 
 18243 ;; Return value:  Size  Location     Type
 18244 ;;		None               void
 18245 ;; Registers used:
 18246 ;;		wreg
 18247 ;; Tracked objects:
 18248 ;;		On entry : 0/0
 18249 ;;		On exit  : 0/0
 18250 ;;		Unchanged: 0/0
 18251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18254 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18255 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18256 ;;Total ram usage:        2 bytes
 18257 ;; Hardware stack levels used:    1
 18258 ;; Hardware stack levels required when called:    3
 18259 ;; This function calls:
 18260 ;;		Nothing
 18261 ;; This function is called by:
 18262 ;;		_DlyOff_Initialization
 18263 ;;		_DlyOff_Main
 18264 ;;		_setDelayOff_GO
 18265 ;;		_getDelayOff_GO
 18266 ;; This function uses a non-reentrant model
 18267 ;;
 18268                           
 18269                           
 18270                           ;psect for function _DelayOffPointSelect
 18271  1E74                     _DelayOffPointSelect:	
 18272                           
 18273                           ;incstack = 0
 18274                           ; Regs used in _DelayOffPointSelect: [wreg]
 18275                           ;DelayOffPointSelect@sw stored from wreg
 18276  1E74  00F4               	movwf	DelayOffPointSelect@sw
 18277                           
 18278                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18279  1E75  0874               	movf	DelayOffPointSelect@sw,w
 18280  1E76  3A01               	xorlw	1
 18281  1E77  1D03               	skipz
 18282  1E78  2E7F               	goto	l5904
 18283                           
 18284                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18285  1E79  305C               	movlw	_DlySw1& (0+255)
 18286  1E7A  00F3               	movwf	??_DelayOffPointSelect
 18287  1E7B  0873               	movf	??_DelayOffPointSelect,w
 18288  1E7C  0021               	movlb	1	; select bank1
 18289  1E7D  00D3               	movwf	_DelayOff^(0+128)
 18290                           
 18291                           ;DelayOff_B1.c: 11: }
 18292  1E7E  0008               	return
 18293  1E7F                     l5904:	
 18294                           
 18295                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 18296  1E7F  0874               	movf	DelayOffPointSelect@sw,w
 18297  1E80  3A02               	xorlw	2
 18298  1E81  1D03               	skipz
 18299  1E82  0008               	return
 18300                           
 18301                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 18302  1E83  30E2               	movlw	_DlySw2& (0+255)
 18303  1E84  00F3               	movwf	??_DelayOffPointSelect
 18304  1E85  0873               	movf	??_DelayOffPointSelect,w
 18305  1E86  0021               	movlb	1	; select bank1
 18306  1E87  00D3               	movwf	_DelayOff^(0+128)
 18307  1E88  0008               	return
 18308  1E89                     __end_of_DelayOffPointSelect:	
 18309                           
 18310                           	psect	text132
 18311  156E                     __ptext132:	
 18312 ;; *************** function _Buzzer_Main *****************
 18313 ;; Defined at:
 18314 ;;		line 46 in file "../src/Buzzer_B1.c"
 18315 ;; Parameters:    Size  Location     Type
 18316 ;;		None
 18317 ;; Auto vars:     Size  Location     Type
 18318 ;;		None
 18319 ;; Return value:  Size  Location     Type
 18320 ;;		None               void
 18321 ;; Registers used:
 18322 ;;		wreg, status,2, status,0
 18323 ;; Tracked objects:
 18324 ;;		On entry : 0/0
 18325 ;;		On exit  : 0/0
 18326 ;;		Unchanged: 0/0
 18327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18330 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18331 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18332 ;;Total ram usage:        1 bytes
 18333 ;; Hardware stack levels used:    1
 18334 ;; Hardware stack levels required when called:    3
 18335 ;; This function calls:
 18336 ;;		Nothing
 18337 ;; This function is called by:
 18338 ;;		_main
 18339 ;; This function uses a non-reentrant model
 18340 ;;
 18341                           
 18342                           
 18343                           ;psect for function _Buzzer_Main
 18344  156E                     _Buzzer_Main:	
 18345                           
 18346                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18347                           
 18348                           ;incstack = 0
 18349                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18350  156E  0021               	movlb	1	; select bank1
 18351  156F  1CBC               	btfss	_Buz1^(0+128),1
 18352  1570  0008               	return
 18353                           
 18354                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18355  1571  3001               	movlw	1
 18356  1572  07BD               	addwf	(_Buz1^(0+128)+1),f
 18357  1573  3000               	movlw	0
 18358  1574  3DBE               	addwfc	((_Buz1+1)^(0+128)+1),f
 18359                           
 18360                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18361  1575  0843               	movf	((_Buz1+1)^(0+128)+6),w
 18362  1576  023E               	subwf	((_Buz1+1)^(0+128)+1),w
 18363  1577  1D03               	skipz
 18364  1578  2D7B               	goto	u7875
 18365  1579  0842               	movf	(_Buz1^(0+128)+6),w
 18366  157A  023D               	subwf	(_Buz1^(0+128)+1),w
 18367  157B                     u7875:	
 18368  157B  1C03               	skipc
 18369  157C  0008               	return
 18370                           
 18371                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18372  157D  01BD               	clrf	(_Buz1^(0+128)+1)
 18373  157E  01BE               	clrf	((_Buz1+1)^(0+128)+1)
 18374                           
 18375                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18376  157F  12BC               	bcf	_Buz1^(0+128),5
 18377  1580  0020               	movlb	0	; select bank0
 18378  1581  1D8D               	btfss	13,3	;volatile
 18379  1582  2D85               	goto	l7848
 18380  1583  0021               	movlb	1	; select bank1
 18381  1584  16BC               	bsf	_Buz1^(0+128),5
 18382  1585                     l7848:	
 18383                           
 18384                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18385  1585  0021               	movlb	1	; select bank1
 18386  1586  1ABC               	btfsc	_Buz1^(0+128),5
 18387  1587  2DAD               	goto	l104
 18388                           
 18389                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18390  1588  08BF               	movf	(_Buz1^(0+128)+3),f
 18391  1589  1D03               	skipz
 18392  158A  2DA9               	goto	l105
 18393                           
 18394                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18395  158B  1DBC               	btfss	_Buz1^(0+128),3
 18396  158C  2D99               	goto	l106
 18397                           
 18398                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18399  158D  11BC               	bcf	_Buz1^(0+128),3
 18400                           
 18401                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18402  158E  0840               	movf	(_Buz1^(0+128)+4),w
 18403  158F  00F3               	movwf	??_Buzzer_Main
 18404  1590  0873               	movf	??_Buzzer_Main,w
 18405  1591  00BF               	movwf	(_Buz1^(0+128)+3)
 18406                           
 18407                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18408  1592  0845               	movf	((_Buz1+1)^(0+128)+8),w
 18409  1593  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 18410  1594  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 18411  1595  0844               	movf	(_Buz1^(0+128)+8),w
 18412  1596  01C2               	clrf	(_Buz1^(0+128)+6)
 18413  1597  07C2               	addwf	(_Buz1^(0+128)+6),f
 18414                           
 18415                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18416  1598  0008               	return
 18417  1599                     l106:	
 18418  1599  1E3C               	btfss	_Buz1^(0+128),4
 18419  159A  2DA7               	goto	l108
 18420                           
 18421                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18422  159B  123C               	bcf	_Buz1^(0+128),4
 18423                           
 18424                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18425  159C  0841               	movf	(_Buz1^(0+128)+5),w
 18426  159D  00F3               	movwf	??_Buzzer_Main
 18427  159E  0873               	movf	??_Buzzer_Main,w
 18428  159F  00BF               	movwf	(_Buz1^(0+128)+3)
 18429                           
 18430                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18431  15A0  0847               	movf	((_Buz1+1)^(0+128)+10),w
 18432  15A1  01C3               	clrf	((_Buz1+1)^(0+128)+6)
 18433  15A2  07C3               	addwf	((_Buz1+1)^(0+128)+6),f
 18434  15A3  0846               	movf	(_Buz1^(0+128)+10),w
 18435  15A4  01C2               	clrf	(_Buz1^(0+128)+6)
 18436  15A5  07C2               	addwf	(_Buz1^(0+128)+6),f
 18437                           
 18438                           ;Buzzer_B1.c: 62: } else {
 18439  15A6  0008               	return
 18440  15A7                     l108:	
 18441                           
 18442                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18443  15A7  10BC               	bcf	_Buz1^(0+128),1
 18444                           
 18445                           ;Buzzer_B1.c: 64: }
 18446                           ;Buzzer_B1.c: 65: } else {
 18447  15A8  0008               	return
 18448  15A9                     l105:	
 18449                           
 18450                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18451  15A9  16BC               	bsf	_Buz1^(0+128),5
 18452                           
 18453                           ;Buzzer_B1.c: 68: RB3 = 1;
 18454  15AA  0020               	movlb	0	; select bank0
 18455  15AB  158D               	bsf	13,3	;volatile
 18456                           
 18457                           ;Buzzer_B1.c: 69: }
 18458                           ;Buzzer_B1.c: 70: } else {
 18459  15AC  0008               	return
 18460  15AD                     l104:	
 18461                           
 18462                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18463  15AD  12BC               	bcf	_Buz1^(0+128),5
 18464                           
 18465                           ;Buzzer_B1.c: 73: RB3 = 0;
 18466  15AE  0020               	movlb	0	; select bank0
 18467  15AF  118D               	bcf	13,3	;volatile
 18468                           
 18469                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18470  15B0  3001               	movlw	1
 18471  15B1  0021               	movlb	1	; select bank1
 18472  15B2  02BF               	subwf	(_Buz1^(0+128)+3),f
 18473  15B3  0008               	return
 18474  15B4                     __end_of_Buzzer_Main:	
 18475                           
 18476                           	psect	text133
 18477  1BFA                     __ptext133:	
 18478 ;; *************** function _Buzzer_Initialization *****************
 18479 ;; Defined at:
 18480 ;;		line 11 in file "../src/Buzzer_B1.c"
 18481 ;; Parameters:    Size  Location     Type
 18482 ;;		None
 18483 ;; Auto vars:     Size  Location     Type
 18484 ;;		None
 18485 ;; Return value:  Size  Location     Type
 18486 ;;		None               void
 18487 ;; Registers used:
 18488 ;;		None
 18489 ;; Tracked objects:
 18490 ;;		On entry : 0/0
 18491 ;;		On exit  : 0/0
 18492 ;;		Unchanged: 0/0
 18493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18498 ;;Total ram usage:        0 bytes
 18499 ;; Hardware stack levels used:    1
 18500 ;; Hardware stack levels required when called:    3
 18501 ;; This function calls:
 18502 ;;		Nothing
 18503 ;; This function is called by:
 18504 ;;		_main
 18505 ;; This function uses a non-reentrant model
 18506 ;;
 18507                           
 18508                           
 18509                           ;psect for function _Buzzer_Initialization
 18510  1BFA                     _Buzzer_Initialization:	
 18511                           
 18512                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18513                           
 18514                           ;incstack = 0
 18515                           ; Regs used in _Buzzer_Initialization: []
 18516  1BFA  0021               	movlb	1	; select bank1
 18517  1BFB  143C               	bsf	_Buz1^(0+128),0
 18518  1BFC  0008               	return
 18519  1BFD                     __end_of_Buzzer_Initialization:	
 18520                           
 18521                           	psect	intentry
 18522  0004                     __pintentry:	
 18523 ;; *************** function _ISR *****************
 18524 ;; Defined at:
 18525 ;;		line 112 in file "../src/MCU_B1.c"
 18526 ;; Parameters:    Size  Location     Type
 18527 ;;		None
 18528 ;; Auto vars:     Size  Location     Type
 18529 ;;		None
 18530 ;; Return value:  Size  Location     Type
 18531 ;;		None               void
 18532 ;; Registers used:
 18533 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18534 ;; Tracked objects:
 18535 ;;		On entry : 0/0
 18536 ;;		On exit  : 0/0
 18537 ;;		Unchanged: 0/0
 18538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18541 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18542 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18543 ;;Total ram usage:        1 bytes
 18544 ;; Hardware stack levels used:    1
 18545 ;; Hardware stack levels required when called:    2
 18546 ;; This function calls:
 18547 ;;		_IOC_ISR
 18548 ;;		_TMR1_ISR
 18549 ;; This function is called by:
 18550 ;;		Interrupt level 1
 18551 ;; This function uses a non-reentrant model
 18552 ;;
 18553                           
 18554  0004                     _ISR:	
 18555                           
 18556                           ;incstack = 0
 18557                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18558  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18559  0005  3180               	pagesel	$
 18560  0006  0020               	movlb	0	; select bank0
 18561  0007  087F               	movf	127,w
 18562  0008  00F2               	movwf	??_ISR
 18563                           
 18564                           ;MCU_B1.c: 115: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18565  0009  198B               	btfsc	11,3	;volatile
 18566  000A  1C0B               	btfss	11,0	;volatile
 18567  000B  2813               	goto	i1l1315
 18568  000C  0027               	movlb	7	; select bank7
 18569  000D  1D16               	btfss	22,2	;volatile
 18570  000E  2813               	goto	i1l1315
 18571                           
 18572                           ;MCU_B1.c: 116: IOC_ISR();
 18573  000F  319C  24FC  3180   	fcall	_IOC_ISR
 18574                           
 18575                           ;MCU_B1.c: 117: }
 18576  0012  281B               	goto	i1l1318
 18577  0013                     i1l1315:	
 18578                           
 18579                           ;MCU_B1.c: 125: else if (TMR1IE == 1 && TMR1IF == 1) {
 18580  0013  0021               	movlb	1	; select bank1
 18581  0014  1C11               	btfss	17,0	;volatile
 18582  0015  281B               	goto	i1l1318
 18583  0016  0020               	movlb	0	; select bank0
 18584  0017  1C11               	btfss	17,0	;volatile
 18585  0018  281B               	goto	i1l1318
 18586                           
 18587                           ;MCU_B1.c: 126: TMR1_ISR();
 18588  0019  3191  2161         	fcall	_TMR1_ISR
 18589  001B                     i1l1318:	
 18590                           ;MCU_B1.c: 127: }
 18591                           ;MCU_B1.c: 143: return;
 18592                           
 18593  001B  0872               	movf	??_ISR,w
 18594  001C  0020               	movlb	0	; select bank0
 18595  001D  00FF               	movwf	127
 18596  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 18597  001F  0009               	retfie
 18598  0020                     __end_of_ISR:	
 18599                           
 18600                           	psect	text135
 18601  1161                     __ptext135:	
 18602 ;; *************** function _TMR1_ISR *****************
 18603 ;; Defined at:
 18604 ;;		line 231 in file "../src/MCU_B1.c"
 18605 ;; Parameters:    Size  Location     Type
 18606 ;;		None
 18607 ;; Auto vars:     Size  Location     Type
 18608 ;;		None
 18609 ;; Return value:  Size  Location     Type
 18610 ;;		None               void
 18611 ;; Registers used:
 18612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18613 ;; Tracked objects:
 18614 ;;		On entry : 0/0
 18615 ;;		On exit  : 0/0
 18616 ;;		Unchanged: 0/0
 18617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18622 ;;Total ram usage:        0 bytes
 18623 ;; Hardware stack levels used:    1
 18624 ;; Hardware stack levels required when called:    1
 18625 ;; This function calls:
 18626 ;;		_setDimmerIntr_TMR
 18627 ;; This function is called by:
 18628 ;;		_ISR
 18629 ;; This function uses a non-reentrant model
 18630 ;;
 18631                           
 18632                           
 18633                           ;psect for function _TMR1_ISR
 18634  1161                     _TMR1_ISR:	
 18635                           
 18636                           ;MCU_B1.c: 233: TMR1H = (int)((65536-1480)/256);
 18637                           
 18638                           ;incstack = 0
 18639                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18640  1161  30FA               	movlw	250
 18641  1162  0020               	movlb	0	; select bank0
 18642  1163  0097               	movwf	23	;volatile
 18643                           
 18644                           ;MCU_B1.c: 234: TMR1L = (int)((65536-1480)%256);
 18645  1164  3038               	movlw	56
 18646  1165  0096               	movwf	22	;volatile
 18647                           
 18648                           ;MCU_B1.c: 235: TMR1IF = 0;
 18649  1166  1011               	bcf	17,0	;volatile
 18650                           
 18651                           ;MCU_B1.c: 239: setDimmerIntr_TMR(1);
 18652  1167  3001               	movlw	1
 18653  1168  3183  235D  3191   	fcall	_setDimmerIntr_TMR
 18654                           
 18655                           ;MCU_B1.c: 243: setDimmerIntr_TMR(2);
 18656  116B  3002               	movlw	2
 18657  116C  3183  235D  3191   	fcall	_setDimmerIntr_TMR
 18658                           
 18659                           ;MCU_B1.c: 252: Timer1.Count++;
 18660  116F  3001               	movlw	1
 18661  1170  0021               	movlb	1	; select bank1
 18662  1171  07CC               	addwf	(_Timer1^(0+128)+1),f
 18663  1172  3000               	movlw	0
 18664  1173  3DCD               	addwfc	((_Timer1+1)^(0+128)+1),f
 18665                           
 18666                           ;MCU_B1.c: 253: if (Timer1.Count == (int)(20*10)) {
 18667  1174  3001               	movlw	1
 18668  1175  3ECB               	addlw	_Timer1& (0+255)
 18669  1176  0086               	movwf	6
 18670  1177  0187               	clrf	7
 18671  1178  3F40               	moviw [0]fsr1
 18672  1179  3AC8               	xorlw	200
 18673  117A  1D03               	skipz
 18674  117B  297E               	goto	u798_25
 18675  117C  3F41               	moviw [1]fsr1
 18676  117D  3A00               	xorlw	0
 18677  117E                     u798_25:	
 18678  117E  1D03               	skipz
 18679  117F  0008               	return
 18680                           
 18681                           ;MCU_B1.c: 254: Timer1.Count = 0;
 18682  1180  01CC               	clrf	(_Timer1^(0+128)+1)
 18683  1181  01CD               	clrf	((_Timer1+1)^(0+128)+1)
 18684                           
 18685                           ;MCU_B1.c: 255: Timer1.Timeout = 1;
 18686  1182  144B               	bsf	_Timer1^(0+128),0
 18687  1183  0008               	return
 18688  1184                     __end_of_TMR1_ISR:	
 18689                           
 18690                           	psect	text136
 18691  035D                     __ptext136:	
 18692 ;; *************** function _setDimmerIntr_TMR *****************
 18693 ;; Defined at:
 18694 ;;		line 338 in file "../src/Dimmer_B1.c"
 18695 ;; Parameters:    Size  Location     Type
 18696 ;;  lights          1    wreg     unsigned char 
 18697 ;; Auto vars:     Size  Location     Type
 18698 ;;  lights          1    1[COMMON] unsigned char 
 18699 ;; Return value:  Size  Location     Type
 18700 ;;		None               void
 18701 ;; Registers used:
 18702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 18703 ;; Tracked objects:
 18704 ;;		On entry : 0/0
 18705 ;;		On exit  : 0/0
 18706 ;;		Unchanged: 0/0
 18707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18709 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18710 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18711 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18712 ;;Total ram usage:        2 bytes
 18713 ;; Hardware stack levels used:    1
 18714 ;; This function calls:
 18715 ;;		Nothing
 18716 ;; This function is called by:
 18717 ;;		_TMR1_ISR
 18718 ;; This function uses a non-reentrant model
 18719 ;;
 18720                           
 18721                           
 18722                           ;psect for function _setDimmerIntr_TMR
 18723  035D                     _setDimmerIntr_TMR:	
 18724                           
 18725                           ;incstack = 0
 18726                           ; Regs used in _setDimmerIntr_TMR: [wreg-fsr1h+status,2+status,0]
 18727                           ;setDimmerIntr_TMR@lights stored from wreg
 18728  035D  00F1               	movwf	setDimmerIntr_TMR@lights
 18729                           
 18730                           ;Dimmer_B1.c: 341: if (lights == 1) {
 18731  035E  0871               	movf	setDimmerIntr_TMR@lights,w
 18732  035F  3A01               	xorlw	1
 18733  0360  1D03               	skipz
 18734  0361  2B6A               	goto	i1l7334
 18735                           
 18736                           ;Dimmer_B1.c: 342: DimmerIntr = &DimmerIntr1;
 18737  0362  304E               	movlw	_DimmerIntr1& (0+255)
 18738  0363  00F0               	movwf	??_setDimmerIntr_TMR
 18739  0364  0870               	movf	??_setDimmerIntr_TMR,w
 18740  0365  0021               	movlb	1	; select bank1
 18741  0366  00D4               	movwf	_DimmerIntr^(0+128)
 18742                           
 18743                           ;Dimmer_B1.c: 343: __nop();
 18744  0367  0000               	nop
 18745                           
 18746                           ;Dimmer_B1.c: 344: __nop();
 18747  0368  0000               	nop
 18748                           
 18749                           ;Dimmer_B1.c: 345: }
 18750  0369  2B75               	goto	i1l7342
 18751  036A                     i1l7334:	
 18752                           
 18753                           ;Dimmer_B1.c: 348: else if (lights == 2) {
 18754  036A  0871               	movf	setDimmerIntr_TMR@lights,w
 18755  036B  3A02               	xorlw	2
 18756  036C  1D03               	skipz
 18757  036D  2B75               	goto	i1l7342
 18758                           
 18759                           ;Dimmer_B1.c: 349: DimmerIntr = &DimmerIntr2;
 18760  036E  3055               	movlw	_DimmerIntr2& (0+255)
 18761  036F  00F0               	movwf	??_setDimmerIntr_TMR
 18762  0370  0870               	movf	??_setDimmerIntr_TMR,w
 18763  0371  0021               	movlb	1	; select bank1
 18764  0372  00D4               	movwf	_DimmerIntr^(0+128)
 18765                           
 18766                           ;Dimmer_B1.c: 350: __nop();
 18767  0373  0000               	nop
 18768                           
 18769                           ;Dimmer_B1.c: 351: __nop();
 18770  0374  0000               	nop
 18771  0375                     i1l7342:	
 18772                           
 18773                           ;Dimmer_B1.c: 352: }
 18774                           ;Dimmer_B1.c: 510: if (DimmerIntr->Start == 1) {
 18775  0375  0021               	movlb	1	; select bank1
 18776  0376  0854               	movf	_DimmerIntr^(0+128),w
 18777  0377  0086               	movwf	6
 18778  0378  3001               	movlw	1	; select bank2/3
 18779  0379  0087               	movwf	7
 18780  037A  1D01               	btfss	1,2
 18781  037B  2B96               	goto	i1l7352
 18782                           
 18783                           ;Dimmer_B1.c: 511: DimmerIntr->Count++;
 18784  037C  3001               	movlw	1
 18785  037D  00F0               	movwf	??_setDimmerIntr_TMR
 18786  037E  0A54               	incf	_DimmerIntr^(0+128),w
 18787  037F  0086               	movwf	6
 18788  0380  3001               	movlw	1	; select bank2/3
 18789  0381  0087               	movwf	7
 18790  0382  0870               	movf	??_setDimmerIntr_TMR,w
 18791  0383  0781               	addwf	1,f
 18792                           
 18793                           ;Dimmer_B1.c: 512: if (DimmerIntr->Count >= ((char)(70*0.8)) + 1) {
 18794  0384  0A54               	incf	_DimmerIntr^(0+128),w
 18795  0385  0086               	movwf	6
 18796  0386  3001               	movlw	1	; select bank2/3
 18797  0387  0087               	movwf	7
 18798  0388  3039               	movlw	57
 18799  0389  0201               	subwf	1,w
 18800  038A  1C03               	skipc
 18801  038B  2B96               	goto	i1l7352
 18802                           
 18803                           ;Dimmer_B1.c: 513: DimmerIntr->Count = 0;
 18804  038C  0A54               	incf	_DimmerIntr^(0+128),w
 18805  038D  0086               	movwf	6
 18806  038E  3001               	movlw	1	; select bank2/3
 18807  038F  0087               	movwf	7
 18808  0390  0181               	clrf	1
 18809                           
 18810                           ;Dimmer_B1.c: 514: DimmerIntr->Start = 0;
 18811  0391  0854               	movf	_DimmerIntr^(0+128),w
 18812  0392  0086               	movwf	6
 18813  0393  3001               	movlw	1	; select bank2/3
 18814  0394  0087               	movwf	7
 18815  0395  1101               	bcf	1,2
 18816  0396                     i1l7352:	
 18817                           
 18818                           ;Dimmer_B1.c: 515: }
 18819                           ;Dimmer_B1.c: 516: }
 18820                           ;Dimmer_B1.c: 518: if (DimmerIntr->GO == 1) {
 18821  0396  0854               	movf	_DimmerIntr^(0+128),w
 18822  0397  0086               	movwf	6
 18823  0398  3001               	movlw	1	; select bank2/3
 18824  0399  0087               	movwf	7
 18825  039A  1C01               	btfss	1,0
 18826  039B  2BCB               	goto	i1l7366
 18827                           
 18828                           ;Dimmer_B1.c: 519: if (DimmerIntr->Count >= DimmerIntr->DimmingValue) {
 18829  039C  0A54               	incf	_DimmerIntr^(0+128),w
 18830  039D  0086               	movwf	6
 18831  039E  3001               	movlw	1	; select bank2/3
 18832  039F  0087               	movwf	7
 18833  03A0  0854               	movf	_DimmerIntr^(0+128),w
 18834  03A1  3E04               	addlw	4
 18835  03A2  0084               	movwf	4
 18836  03A3  3001               	movlw	1	; select bank2/3
 18837  03A4  0085               	movwf	5
 18838  03A5  0800               	movf	0,w
 18839  03A6  0201               	subwf	1,w
 18840  03A7  1C03               	skipc
 18841  03A8  0008               	return
 18842                           
 18843                           ;Dimmer_B1.c: 520: DimmerIntr->GO = 0;
 18844  03A9  0854               	movf	_DimmerIntr^(0+128),w
 18845  03AA  0086               	movwf	6
 18846  03AB  3001               	movlw	1	; select bank2/3
 18847  03AC  0087               	movwf	7
 18848  03AD  1001               	bcf	1,0
 18849                           
 18850                           ;Dimmer_B1.c: 521: DimmerIntr->Tune = 1;
 18851  03AE  0854               	movf	_DimmerIntr^(0+128),w
 18852  03AF  0086               	movwf	6
 18853  03B0  3001               	movlw	1	; select bank2/3
 18854  03B1  0087               	movwf	7
 18855  03B2  1481               	bsf	1,1
 18856                           
 18857                           ;Dimmer_B1.c: 523: if (DimmerIntr->ControlStatus == 1) {
 18858  03B3  0854               	movf	_DimmerIntr^(0+128),w
 18859  03B4  0086               	movwf	6
 18860  03B5  3001               	movlw	1	; select bank2/3
 18861  03B6  0087               	movwf	7
 18862  03B7  1D81               	btfss	1,3
 18863  03B8  0008               	return
 18864                           
 18865                           ;Dimmer_B1.c: 525: if (lights == 1) {
 18866  03B9  0871               	movf	setDimmerIntr_TMR@lights,w
 18867  03BA  3A01               	xorlw	1
 18868  03BB  1D03               	skipz
 18869  03BC  2BC2               	goto	i1l7362
 18870                           
 18871                           ;Dimmer_B1.c: 526: RA7 = 0;
 18872  03BD  0020               	movlb	0	; select bank0
 18873  03BE  138C               	bcf	12,7	;volatile
 18874                           
 18875                           ;Dimmer_B1.c: 527: __nop();
 18876  03BF  0000               	nop
 18877                           
 18878                           ;Dimmer_B1.c: 528: __nop();
 18879  03C0  0000               	nop
 18880                           
 18881                           ;Dimmer_B1.c: 530: }
 18882  03C1  0008               	return
 18883  03C2                     i1l7362:	
 18884                           
 18885                           ;Dimmer_B1.c: 533: else if (lights == 2) {
 18886  03C2  0871               	movf	setDimmerIntr_TMR@lights,w
 18887  03C3  3A02               	xorlw	2
 18888  03C4  1D03               	skipz
 18889  03C5  0008               	return
 18890                           
 18891                           ;Dimmer_B1.c: 534: RB4 = 0;
 18892  03C6  0020               	movlb	0	; select bank0
 18893  03C7  120D               	bcf	13,4	;volatile
 18894                           
 18895                           ;Dimmer_B1.c: 535: __nop();
 18896  03C8  0000               	nop
 18897                           
 18898                           ;Dimmer_B1.c: 536: __nop();
 18899  03C9  0000               	nop
 18900                           
 18901                           ;Dimmer_B1.c: 537: }
 18902                           ;Dimmer_B1.c: 539: }
 18903                           ;Dimmer_B1.c: 540: }
 18904                           ;Dimmer_B1.c: 541: } else {
 18905  03CA  0008               	return
 18906  03CB                     i1l7366:	
 18907                           
 18908                           ;Dimmer_B1.c: 542: if (DimmerIntr->Tune == 1) {
 18909  03CB  0021               	movlb	1	; select bank1
 18910  03CC  0854               	movf	_DimmerIntr^(0+128),w
 18911  03CD  0086               	movwf	6
 18912  03CE  3001               	movlw	1	; select bank2/3
 18913  03CF  0087               	movwf	7
 18914  03D0  1C81               	btfss	1,1
 18915  03D1  0008               	return
 18916                           
 18917                           ;Dimmer_B1.c: 543: DimmerIntr->Tune = 0;
 18918  03D2  0854               	movf	_DimmerIntr^(0+128),w
 18919  03D3  0086               	movwf	6
 18920  03D4  3001               	movlw	1	; select bank2/3
 18921  03D5  0087               	movwf	7
 18922  03D6  1081               	bcf	1,1
 18923                           
 18924                           ;Dimmer_B1.c: 544: DimmerIntr->TuneTime++;
 18925  03D7  3001               	movlw	1
 18926  03D8  00F0               	movwf	??_setDimmerIntr_TMR
 18927  03D9  0854               	movf	_DimmerIntr^(0+128),w
 18928  03DA  3E02               	addlw	2
 18929  03DB  0086               	movwf	6
 18930  03DC  3001               	movlw	1	; select bank2/3
 18931  03DD  0087               	movwf	7
 18932  03DE  0870               	movf	??_setDimmerIntr_TMR,w
 18933  03DF  0781               	addwf	1,f
 18934                           
 18935                           ;Dimmer_B1.c: 545: if (DimmerIntr->TuneTime >= DimmerIntr->TuneTimeValue) {
 18936  03E0  0854               	movf	_DimmerIntr^(0+128),w
 18937  03E1  3E02               	addlw	2
 18938  03E2  0086               	movwf	6
 18939  03E3  3001               	movlw	1	; select bank2/3
 18940  03E4  0087               	movwf	7
 18941  03E5  0854               	movf	_DimmerIntr^(0+128),w
 18942  03E6  3E03               	addlw	3
 18943  03E7  0084               	movwf	4
 18944  03E8  3001               	movlw	1	; select bank2/3
 18945  03E9  0085               	movwf	5
 18946  03EA  0800               	movf	0,w
 18947  03EB  0201               	subwf	1,w
 18948  03EC  1C03               	skipc
 18949  03ED  0008               	return
 18950                           
 18951                           ;Dimmer_B1.c: 546: DimmerIntr->TuneTime = 0;
 18952  03EE  0854               	movf	_DimmerIntr^(0+128),w
 18953  03EF  3E02               	addlw	2
 18954  03F0  0086               	movwf	6
 18955  03F1  3001               	movlw	1	; select bank2/3
 18956  03F2  0087               	movwf	7
 18957  03F3  0181               	clrf	1
 18958                           
 18959                           ;Dimmer_B1.c: 547: if (DimmerIntr->Dimming_Sw == 1) {
 18960  03F4  0854               	movf	_DimmerIntr^(0+128),w
 18961  03F5  0086               	movwf	6
 18962  03F6  3001               	movlw	1	; select bank2/3
 18963  03F7  0087               	movwf	7
 18964  03F8  1E01               	btfss	1,4
 18965  03F9  2C30               	goto	i1l7392
 18966                           
 18967                           ;Dimmer_B1.c: 548: if (DimmerIntr->Dimming_Status == 0) {
 18968  03FA  0854               	movf	_DimmerIntr^(0+128),w
 18969  03FB  0086               	movwf	6
 18970  03FC  3001               	movlw	1	; select bank2/3
 18971  03FD  0087               	movwf	7
 18972  03FE  1A81               	btfsc	1,5
 18973  03FF  2C19               	goto	i1l7386
 18974                           
 18975                           ;Dimmer_B1.c: 549: if (DimmerIntr->DimmingValue < ((char)(70*0.8))) {
 18976  0400  0854               	movf	_DimmerIntr^(0+128),w
 18977  0401  3E04               	addlw	4
 18978  0402  0086               	movwf	6
 18979  0403  3001               	movlw	1	; select bank2/3
 18980  0404  0087               	movwf	7
 18981  0405  3038               	movlw	56
 18982  0406  0201               	subwf	1,w
 18983  0407  1803               	skipnc
 18984  0408  2C13               	goto	i1l7384
 18985                           
 18986                           ;Dimmer_B1.c: 550: DimmerIntr->DimmingValue++;
 18987  0409  3001               	movlw	1
 18988  040A  00F0               	movwf	??_setDimmerIntr_TMR
 18989  040B  0854               	movf	_DimmerIntr^(0+128),w
 18990  040C  3E04               	addlw	4
 18991  040D  0086               	movwf	6
 18992  040E  3001               	movlw	1	; select bank2/3
 18993  040F  0087               	movwf	7
 18994  0410  0870               	movf	??_setDimmerIntr_TMR,w
 18995  0411  0781               	addwf	1,f
 18996                           
 18997                           ;Dimmer_B1.c: 551: } else {
 18998  0412  0008               	return
 18999  0413                     i1l7384:	
 19000                           
 19001                           ;Dimmer_B1.c: 552: DimmerIntr->Dimming_Status = 1;
 19002  0413  0854               	movf	_DimmerIntr^(0+128),w
 19003  0414  0086               	movwf	6
 19004  0415  3001               	movlw	1	; select bank2/3
 19005  0416  0087               	movwf	7
 19006  0417  1681               	bsf	1,5
 19007                           
 19008                           ;Dimmer_B1.c: 553: }
 19009                           ;Dimmer_B1.c: 554: } else {
 19010  0418  0008               	return
 19011  0419                     i1l7386:	
 19012                           
 19013                           ;Dimmer_B1.c: 555: if (DimmerIntr->DimmingValue > ((char)(15*0.8))) {
 19014  0419  0854               	movf	_DimmerIntr^(0+128),w
 19015  041A  3E04               	addlw	4
 19016  041B  0086               	movwf	6
 19017  041C  3001               	movlw	1	; select bank2/3
 19018  041D  0087               	movwf	7
 19019  041E  300D               	movlw	13
 19020  041F  0201               	subwf	1,w
 19021  0420  1C03               	skipc
 19022  0421  2C2A               	goto	i1l7390
 19023                           
 19024                           ;Dimmer_B1.c: 556: DimmerIntr->DimmingValue--;
 19025  0422  0854               	movf	_DimmerIntr^(0+128),w
 19026  0423  3E04               	addlw	4
 19027  0424  0086               	movwf	6
 19028  0425  3001               	movlw	1	; select bank2/3
 19029  0426  0087               	movwf	7
 19030  0427  3001               	movlw	1
 19031  0428  0281               	subwf	1,f
 19032                           
 19033                           ;Dimmer_B1.c: 557: } else {
 19034  0429  0008               	return
 19035  042A                     i1l7390:	
 19036                           
 19037                           ;Dimmer_B1.c: 558: DimmerIntr->Dimming_Status = 0;
 19038  042A  0854               	movf	_DimmerIntr^(0+128),w
 19039  042B  0086               	movwf	6
 19040  042C  3001               	movlw	1	; select bank2/3
 19041  042D  0087               	movwf	7
 19042  042E  1281               	bcf	1,5
 19043                           
 19044                           ;Dimmer_B1.c: 559: }
 19045                           ;Dimmer_B1.c: 560: }
 19046                           ;Dimmer_B1.c: 561: } else if (DimmerIntr->Dimming_RF == 1) {
 19047  042F  0008               	return
 19048  0430                     i1l7392:	
 19049  0430  0854               	movf	_DimmerIntr^(0+128),w
 19050  0431  0086               	movwf	6
 19051  0432  3001               	movlw	1	; select bank2/3
 19052  0433  0087               	movwf	7
 19053  0434  1F01               	btfss	1,6
 19054  0435  0008               	return
 19055                           
 19056                           ;Dimmer_B1.c: 562: if (DimmerIntr->DimmingValue < DimmerIntr->MaxmumValue) {
 19057  0436  0854               	movf	_DimmerIntr^(0+128),w
 19058  0437  3E04               	addlw	4
 19059  0438  0086               	movwf	6
 19060  0439  3001               	movlw	1	; select bank2/3
 19061  043A  0087               	movwf	7
 19062  043B  0854               	movf	_DimmerIntr^(0+128),w
 19063  043C  3E05               	addlw	5
 19064  043D  0084               	movwf	4
 19065  043E  3001               	movlw	1	; select bank2/3
 19066  043F  0085               	movwf	5
 19067  0440  0800               	movf	0,w
 19068  0441  0201               	subwf	1,w
 19069  0442  1803               	skipnc
 19070  0443  2C4E               	goto	i1l7398
 19071                           
 19072                           ;Dimmer_B1.c: 563: DimmerIntr->DimmingValue++;
 19073  0444  3001               	movlw	1
 19074  0445  00F0               	movwf	??_setDimmerIntr_TMR
 19075  0446  0854               	movf	_DimmerIntr^(0+128),w
 19076  0447  3E04               	addlw	4
 19077  0448  0086               	movwf	6
 19078  0449  3001               	movlw	1	; select bank2/3
 19079  044A  0087               	movwf	7
 19080  044B  0870               	movf	??_setDimmerIntr_TMR,w
 19081  044C  0781               	addwf	1,f
 19082                           
 19083                           ;Dimmer_B1.c: 564: } else if (DimmerIntr->DimmingValue > DimmerIntr->MaxmumValue) {
 19084  044D  0008               	return
 19085  044E                     i1l7398:	
 19086  044E  0854               	movf	_DimmerIntr^(0+128),w
 19087  044F  3E05               	addlw	5
 19088  0450  0086               	movwf	6
 19089  0451  3001               	movlw	1	; select bank2/3
 19090  0452  0087               	movwf	7
 19091  0453  0854               	movf	_DimmerIntr^(0+128),w
 19092  0454  3E04               	addlw	4
 19093  0455  0084               	movwf	4
 19094  0456  3001               	movlw	1	; select bank2/3
 19095  0457  0085               	movwf	5
 19096  0458  0800               	movf	0,w
 19097  0459  0201               	subwf	1,w
 19098  045A  1803               	skipnc
 19099  045B  2C64               	goto	i1l7402
 19100                           
 19101                           ;Dimmer_B1.c: 565: DimmerIntr->DimmingValue--;
 19102  045C  0854               	movf	_DimmerIntr^(0+128),w
 19103  045D  3E04               	addlw	4
 19104  045E  0086               	movwf	6
 19105  045F  3001               	movlw	1	; select bank2/3
 19106  0460  0087               	movwf	7
 19107  0461  3001               	movlw	1
 19108  0462  0281               	subwf	1,f
 19109                           
 19110                           ;Dimmer_B1.c: 566: } else {
 19111  0463  0008               	return
 19112  0464                     i1l7402:	
 19113                           
 19114                           ;Dimmer_B1.c: 567: DimmerIntr->Dimming_RF = 0;
 19115  0464  0854               	movf	_DimmerIntr^(0+128),w
 19116  0465  0086               	movwf	6
 19117  0466  3001               	movlw	1	; select bank2/3
 19118  0467  0087               	movwf	7
 19119  0468  1301               	bcf	1,6
 19120  0469  0008               	return
 19121  046A                     __end_of_setDimmerIntr_TMR:	
 19122                           
 19123                           	psect	text137
 19124  1CFC                     __ptext137:	
 19125 ;; *************** function _IOC_ISR *****************
 19126 ;; Defined at:
 19127 ;;		line 395 in file "../src/MCU_B1.c"
 19128 ;; Parameters:    Size  Location     Type
 19129 ;;		None
 19130 ;; Auto vars:     Size  Location     Type
 19131 ;;		None
 19132 ;; Return value:  Size  Location     Type
 19133 ;;		None               void
 19134 ;; Registers used:
 19135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19136 ;; Tracked objects:
 19137 ;;		On entry : 0/0
 19138 ;;		On exit  : 0/0
 19139 ;;		Unchanged: 0/0
 19140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19145 ;;Total ram usage:        0 bytes
 19146 ;; Hardware stack levels used:    1
 19147 ;; Hardware stack levels required when called:    1
 19148 ;; This function calls:
 19149 ;;		_setDimmerIntr_IOC
 19150 ;; This function is called by:
 19151 ;;		_ISR
 19152 ;; This function uses a non-reentrant model
 19153 ;;
 19154                           
 19155                           
 19156                           ;psect for function _IOC_ISR
 19157  1CFC                     _IOC_ISR:	
 19158                           
 19159                           ;MCU_B1.c: 396: IOCBF2 = 0;
 19160                           
 19161                           ;incstack = 0
 19162                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19163  1CFC  0027               	movlb	7	; select bank7
 19164  1CFD  1116               	bcf	22,2	;volatile
 19165                           
 19166                           ;MCU_B1.c: 397: IOCIF = 0;
 19167  1CFE  100B               	bcf	11,0	;volatile
 19168                           
 19169                           ;MCU_B1.c: 399: if (myMain.PowerON == 1) {
 19170  1CFF  0021               	movlb	1	; select bank1
 19171  1D00  1C2E               	btfss	_myMain^(0+128),0
 19172  1D01  0008               	return
 19173                           
 19174                           ;MCU_B1.c: 404: setDimmerIntr_IOC(1);
 19175  1D02  3001               	movlw	1
 19176  1D03  3195  2529  319C   	fcall	_setDimmerIntr_IOC
 19177                           
 19178                           ;MCU_B1.c: 408: setDimmerIntr_IOC(2);
 19179  1D06  3002               	movlw	2
 19180  1D07  3195  2529         	fcall	_setDimmerIntr_IOC
 19181  1D09  0008               	return
 19182  1D0A                     __end_of_IOC_ISR:	
 19183                           
 19184                           	psect	text138
 19185  1529                     __ptext138:	
 19186 ;; *************** function _setDimmerIntr_IOC *****************
 19187 ;; Defined at:
 19188 ;;		line 273 in file "../src/Dimmer_B1.c"
 19189 ;; Parameters:    Size  Location     Type
 19190 ;;  lights          1    wreg     unsigned char 
 19191 ;; Auto vars:     Size  Location     Type
 19192 ;;  lights          1    1[COMMON] unsigned char 
 19193 ;; Return value:  Size  Location     Type
 19194 ;;		None               void
 19195 ;; Registers used:
 19196 ;;		wreg, fsr1l, fsr1h
 19197 ;; Tracked objects:
 19198 ;;		On entry : 0/0
 19199 ;;		On exit  : 0/0
 19200 ;;		Unchanged: 0/0
 19201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19203 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19204 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19205 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19206 ;;Total ram usage:        2 bytes
 19207 ;; Hardware stack levels used:    1
 19208 ;; This function calls:
 19209 ;;		Nothing
 19210 ;; This function is called by:
 19211 ;;		_IOC_ISR
 19212 ;; This function uses a non-reentrant model
 19213 ;;
 19214                           
 19215                           
 19216                           ;psect for function _setDimmerIntr_IOC
 19217  1529                     _setDimmerIntr_IOC:	
 19218                           
 19219                           ;incstack = 0
 19220                           ; Regs used in _setDimmerIntr_IOC: [wregfsr1]
 19221                           ;setDimmerIntr_IOC@lights stored from wreg
 19222  1529  00F1               	movwf	setDimmerIntr_IOC@lights
 19223                           
 19224                           ;Dimmer_B1.c: 276: if (lights == 1) {
 19225  152A  0871               	movf	setDimmerIntr_IOC@lights,w
 19226  152B  3A01               	xorlw	1
 19227  152C  1D03               	skipz
 19228  152D  2D36               	goto	i1l7304
 19229                           
 19230                           ;Dimmer_B1.c: 277: DimmerIntr = &DimmerIntr1;
 19231  152E  304E               	movlw	_DimmerIntr1& (0+255)
 19232  152F  00F0               	movwf	??_setDimmerIntr_IOC
 19233  1530  0870               	movf	??_setDimmerIntr_IOC,w
 19234  1531  0021               	movlb	1	; select bank1
 19235  1532  00D4               	movwf	_DimmerIntr^(0+128)
 19236                           
 19237                           ;Dimmer_B1.c: 278: __nop();
 19238  1533  0000               	nop
 19239                           
 19240                           ;Dimmer_B1.c: 279: __nop();
 19241  1534  0000               	nop
 19242                           
 19243                           ;Dimmer_B1.c: 280: }
 19244  1535  2D41               	goto	i1l7312
 19245  1536                     i1l7304:	
 19246                           
 19247                           ;Dimmer_B1.c: 283: else if (lights == 2) {
 19248  1536  0871               	movf	setDimmerIntr_IOC@lights,w
 19249  1537  3A02               	xorlw	2
 19250  1538  1D03               	skipz
 19251  1539  2D41               	goto	i1l7312
 19252                           
 19253                           ;Dimmer_B1.c: 284: DimmerIntr = &DimmerIntr2;
 19254  153A  3055               	movlw	_DimmerIntr2& (0+255)
 19255  153B  00F0               	movwf	??_setDimmerIntr_IOC
 19256  153C  0870               	movf	??_setDimmerIntr_IOC,w
 19257  153D  0021               	movlb	1	; select bank1
 19258  153E  00D4               	movwf	_DimmerIntr^(0+128)
 19259                           
 19260                           ;Dimmer_B1.c: 285: __nop();
 19261  153F  0000               	nop
 19262                           
 19263                           ;Dimmer_B1.c: 286: __nop();
 19264  1540  0000               	nop
 19265  1541                     i1l7312:	
 19266                           
 19267                           ;Dimmer_B1.c: 287: }
 19268                           ;Dimmer_B1.c: 311: if (DimmerIntr->Start == 0 && RB2 == 1) {
 19269  1541  0021               	movlb	1	; select bank1
 19270  1542  0854               	movf	_DimmerIntr^(0+128),w
 19271  1543  0086               	movwf	6
 19272  1544  3001               	movlw	1	; select bank2/3
 19273  1545  0087               	movwf	7
 19274  1546  1901               	btfsc	1,2
 19275  1547  0008               	return
 19276  1548  0020               	movlb	0	; select bank0
 19277  1549  1D0D               	btfss	13,2	;volatile
 19278  154A  0008               	return
 19279                           
 19280                           ;Dimmer_B1.c: 312: DimmerIntr->Start = 1;
 19281  154B  0021               	movlb	1	; select bank1
 19282  154C  0854               	movf	_DimmerIntr^(0+128),w
 19283  154D  0086               	movwf	6
 19284  154E  3001               	movlw	1	; select bank2/3
 19285  154F  0087               	movwf	7
 19286  1550  1501               	bsf	1,2
 19287                           
 19288                           ;Dimmer_B1.c: 313: DimmerIntr->GO = 1;
 19289  1551  0854               	movf	_DimmerIntr^(0+128),w
 19290  1552  0086               	movwf	6
 19291  1553  3001               	movlw	1	; select bank2/3
 19292  1554  0087               	movwf	7
 19293  1555  1401               	bsf	1,0
 19294                           
 19295                           ;Dimmer_B1.c: 315: if (DimmerIntr->ControlStatus == 1) {
 19296  1556  0854               	movf	_DimmerIntr^(0+128),w
 19297  1557  0086               	movwf	6
 19298  1558  3001               	movlw	1	; select bank2/3
 19299  1559  0087               	movwf	7
 19300  155A  1D81               	btfss	1,3
 19301  155B  0008               	return
 19302                           
 19303                           ;Dimmer_B1.c: 317: if (lights == 1) {
 19304  155C  0871               	movf	setDimmerIntr_IOC@lights,w
 19305  155D  3A01               	xorlw	1
 19306  155E  1D03               	skipz
 19307  155F  2D65               	goto	i1l7322
 19308                           
 19309                           ;Dimmer_B1.c: 318: RA7 = 1;
 19310  1560  0020               	movlb	0	; select bank0
 19311  1561  178C               	bsf	12,7	;volatile
 19312                           
 19313                           ;Dimmer_B1.c: 319: __nop();
 19314  1562  0000               	nop
 19315                           
 19316                           ;Dimmer_B1.c: 320: __nop();
 19317  1563  0000               	nop
 19318                           
 19319                           ;Dimmer_B1.c: 322: }
 19320  1564  0008               	return
 19321  1565                     i1l7322:	
 19322                           
 19323                           ;Dimmer_B1.c: 325: else if (lights == 2) {
 19324  1565  0871               	movf	setDimmerIntr_IOC@lights,w
 19325  1566  3A02               	xorlw	2
 19326  1567  1D03               	skipz
 19327  1568  0008               	return
 19328                           
 19329                           ;Dimmer_B1.c: 326: RB4 = 1;
 19330  1569  0020               	movlb	0	; select bank0
 19331  156A  160D               	bsf	13,4	;volatile
 19332                           
 19333                           ;Dimmer_B1.c: 327: __nop();
 19334  156B  0000               	nop
 19335                           
 19336                           ;Dimmer_B1.c: 328: __nop();
 19337  156C  0000               	nop
 19338  156D  0008               	return
 19339  156E                     __end_of_setDimmerIntr_IOC:	
 19340  007E                     btemp	set	126	;btemp
 19341  007E                     pic14e$flags	set	126
 19342  007E                     wtemp	set	126
 19343  007E                     wtemp0	set	126
 19344  0080                     wtemp1	set	128
 19345  0082                     wtemp2	set	130
 19346  0084                     wtemp3	set	132
 19347  0086                     wtemp4	set	134
 19348  0088                     wtemp5	set	136
 19349  007F                     wtemp6	set	127
 19350  007E                     ttemp	set	126
 19351  007E                     ttemp0	set	126
 19352  0081                     ttemp1	set	129
 19353  0084                     ttemp2	set	132
 19354  0087                     ttemp3	set	135
 19355  007F                     ttemp4	set	127
 19356  007E                     ltemp	set	126
 19357  007E                     ltemp0	set	126
 19358  0082                     ltemp1	set	130
 19359  0086                     ltemp2	set	134
 19360  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         267
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     78      79
    BANK1            80      0      80
    BANK2            80      0      77
    BANK3            80      4      75
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights2(BANK3[9]), DimmerLights1(BANK3[9]), 

    DimmerIntr	PTR struct Dimmer_Interrut size(1) Largest target is 7
		 -> NULL(NULL[0]), DimmerIntr2(BANK2[7]), DimmerIntr1(BANK2[7]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    _main->_getTemp_AD
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setSw_Main->_getSw_KeyStatus
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_CC2500_RxData
    _setRF_Main->_CC2500_TxData
    _setRF_Main->___lwdiv
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_CC2500_WriteByte
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_CC2500_WriteCommand
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _setLED->_LedPointSelect
    _setDimmerLights_Dimming->_setDimmerIntr_MaxmumValue
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _setDimmerIntr_MaxmumValue->_getDimmerIntr_DimmingValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _setBuz->___awdiv
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerIntr_TMR
    _IOC_ISR->_setDimmerIntr_IOC

Critical Paths under _main in BANK0

    _main->_Exception_Main
    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_FrequencyCabr->_DelayTime_1us
    _Load_Main->_getMain_All_Error_Status
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Initialization->_setDimmerLights_PercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Dimming
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setRF_DimmerLights
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerLights_PercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setDimmerLights_PercentValue

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  133228
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1842
                                              8 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              7 COMMON     1     1      0
                                              0 BANK0      1     1      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     669
                                              0 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              3 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              3 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4530
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4530
                                             65 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    8675
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    8675
                                             70 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              5 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              3 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              7 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   33861
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   33861
                                             75 BANK0      3     3      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   29430
                                             73 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4333
                                             65 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   24825
                             _setBuz
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   15176
                                             70 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0    5360
                                             67 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0    2690
                                             65 BANK0      2     2      0
           _setDimmerIntr_Dimming_RF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerIntr_Dimming_RF                             3     2      1     177
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              3 COMMON     4     2      2
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              7 COMMON     1     1      0
                                              0 BANK0      1     1      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              7 COMMON     1     1      0
                                              0 BANK0      1     1      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              5 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     620
                                              5 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              0 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              5 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     552
                                              3 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              5 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    2007
                                              6 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      50
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              3 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     344
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     865
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              5 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              7 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1489
                                              1 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1442
                                              7 COMMON     1     1      0
                                              0 BANK0      1     1      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   15176
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
       _setDimmerLights_PercentValue
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1102
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              3 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              3 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    7674
                                             70 BANK0      8     8      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   43881
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   43562
                                             73 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
               _getMain_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                3     2      1   20995
                                             70 BANK0      3     2      1
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
               _setDimmerLights_Line
       _setDimmerLights_PercentValue
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              5 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   21978
                                             70 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
       _setDimmerLights_PercentValue
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2870
                                             65 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_PercentValue                         6     6      0   13672
                                             55 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     417
                                             41 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     210
                                             25 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    4308
                                              9 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    5033
                                             28 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    3605
                                              3 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    3264
                                              3 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_MaxmumValue                            3     2      1     228
                                              6 COMMON     2     1      1
                                              0 BANK0      1     1      0
         _getDimmerIntr_DimmingValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     266
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      47
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     281
                                              4 COMMON     1     1      0
                                              0 BANK0      5     5      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              3 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    8290
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    8290
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
                             _setBuz
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    2124
                                              8 BANK0      5     5      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1842
                                              4 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    4067
                                             69 BANK0      1     1      0
         _DimmerLights_SelectPointer
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3841
                                             65 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2447
                                             61 BANK0      4     3      1
         _getDimmerIntr_DimmingValue (ARG)
       _setDimmerLights_PercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     385
                                              0 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     181
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              5 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              5 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              5 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                 1     1      0     176
                                              2 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR1_ISR                                            0     0      0      88
                  _setDimmerIntr_TMR
 ---------------------------------------------------------------------------------
 (12) _setDimmerIntr_TMR                                   2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _IOC_ISR                                             0     0      0      88
                  _setDimmerIntr_IOC
 ---------------------------------------------------------------------------------
 (12) _setDimmerIntr_IOC                                   2     2      0      88
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setBuz
         ___awdiv
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _setDimmerLights_PercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
         _setDimmerLights_Line
         _setDimmerLights_PercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _setDimmerLights_PercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _setDimmerLights_PercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerLights_Line
         _setDimmerLights_PercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _setDimmerLights_PercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _setDimmerLights_PercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _setDimmerLights_PercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setDimmerLights_PercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _setDimmerLights_PercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _setDimmerLights_PercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerIntr_Dimming_RF
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _setDimmerLights_PercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _setDimmerLights_PercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _getDimmerIntr_DimmingValue (ARG)
                   _setDimmerLights_PercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _setDimmerLights_PercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _setDimmerLights_PercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _setDimmerLights_PercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _setDimmerLights_PercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerIntr_IOC
   _TMR1_ISR
     _setDimmerIntr_TMR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      4B      11       93.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     187      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     187      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Fri Dec 26 16:32:30 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0075  
               getMain_Lights_Count@count 0073                                        l94 177F  
                                      l96 1793                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1161                                        _WR 0CA9  
                            ___awdiv@sign 0021                                        _Sw 007A  
                     ___wmul@multiplicand 0075                      _getDimmerLights_Line 1D44  
                  __end_of_setDelayOff_GO 174E                              ___ftadd@exp1 0048  
                            ___ftadd@exp2 0047                  __size_of_getRF_KeyStatus 0011  
                    _setDimmerLights_Main 0A8A                      _setDimmerLights_Line 1E15  
                            ___ftadd@sign 0046                                       l104 15AD  
                                     l105 15A9                                       l106 1599  
                                     l108 15A7                                       l320 1F18  
                                     l251 0BFA                      _setDimmerLights_SwOn 084D  
                                     l319 1F16                                       l363 11D1  
                                     l731 1E5E                                       l926 1D4B  
                                     l927 1D51                                       l873 1091  
                                     l896 0A15                                       _GIE 005F  
                                     _CRC 00D2                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 000B  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00D5  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 00D0              getDimmerLights_Status@lights 0075  
                                     _Sw1 01D0                                       _Sw2 01D9  
              ??_setDimmerIntr_Dimming_RF 0074                ??_setDimmerIntr_Dimming_Sw 0074  
         setDimmerIntr_Dimming_RF@command 0073                  __end_of_CC2500_WriteByte 1F23  
                   _Buzzer_Initialization 1BFA                           __end_of_ADC_Set 1C52  
                         ?_DelayTimejudge 0070                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0076  
     __end_of_setDimmerIntr_ControlStatus 1241               _setDimmerIntr_ControlStatus 1218  
                       ??_getSw_KeyStatus 0073                                      ?_ISR 0070  
                            ___ftdiv@cntr 0033                           __end_of_IOC_ISR 1D0A  
                   _setDimmerLights_OnOff 09C4                                Load_Main@i 002A  
                            ___ftdiv@sign 0038                                      l1052 1FCE  
                                    l1053 1FD7                                      l3030 09AC  
                                    l1086 14D6                                      l1087 14DD  
                                    l3024 0995                                      l1353 13B0  
                                    l2314 137C                                      l1620 070E  
                                    l2340 1490                                      l2252 0EA3  
                                    l3053 0509                                      l1367 12B7  
                                    l1376 15FA                                      l2328 0A89  
                                    l2256 0E3B                                      l2257 0E4B  
                                    l1561 07FD                                      l1740 008A  
                                    l2292 1D58                                      l1741 0086  
                         __end_of_IOC_Set 1CE3                                      l1742 0081  
                                    l1904 0FFC                                      l1593 1346  
                                    l2641 106D                                      l1738 01E8  
                                    l1588 132F                                      l1748 01C4  
                                    l1589 134A                                      l1749 01C2  
                                    l1909 0FF6                                      l2663 0354  
                                    l2665 0231                                      l6034 1256  
                                    l6046 1EE9                                      l6206 12F5  
                                    l2863 10A5                                      l7200 10C8  
                                    l6154 17F1                                      l7210 10D5  
                                    l7202 10CA                                      l7212 10D9  
                                    l6510 0DD9                                      l7118 1DFE  
                                    l6350 147F                                      l6520 0DFD  
                                    l6512 0DE7                                      l6522 0E00  
                                    l9020 1333                     _setDimmerLights_SwOff 0807  
                                    l6526 0E0E                                      l6518 0DF4  
                                    l5904 1E7F                                      l6704 0910  
                                    l6712 091C                                      l7280 1F7A  
                                    l9120 0C0D                                      l9112 0C00  
                                    l9018 132A                                      l9210 144E  
                                    l6626 122D                                      l6634 1E94  
                                    l6722 092C                                      l7290 1F87  
                                    l9122 0C10                                      l9114 0C03  
                                    l7186 1E43                                      l5940 16B8  
                                    l9028 1341                                      l9220 145F  
                                    l9212 1451                                      l6644 1E55  
                                    l6492 0DA9                                      l6708 0916  
                                    l7292 1F8B                                      l9108 0BE1  
                                    l9060 0A28                                      l5950 16C0  
                                    l5934 16AD                                      l9222 1464  
                                    l6662 11BA                                      l6734 094A  
                                    l6742 0956                                      l6718 0926  
                                    l6726 0932                                      l9150 0B6F  
                                    l9126 0C16                                      l9118 0C09  
                                    l9070 0A66                                      l5952 16CC  
                                    l6752 1E21                                      l9240 09F4  
                                    l9144 0B66                                      l9072 0A6A  
                                    l9064 0A49                                      l5890 1DD9  
                                    l5962 16E7                                      l6930 1D42  
                                    l6738 0950                                      l9250 0A0D  
                                    l9146 0B69                                      l9090 0BCB  
                                    l9066 0A5E                                      l9402 0D7B  
                                    l8620 0861                                      l8700 1F35  
                                    l9068 0A62                                      l9076 0A6E  
                                    l5886 1DD3                                      l8526 1292  
                                    l5966 16EF                                      l5958 16DE  
                                    l8630 0872                                      l8622 0864  
                                    l9166 0B7F                                      l9094 0BD1  
                                    l9502 1F4D                                      l8640 089A  
                                    l8632 0877                                      l8800 0499  
                                    l9264 166A                                      l9256 0A1B  
                                    l9328 12A2                                      l9520 15D0  
                                    l9432 13DD                                      l9424 13BF  
                                    l8720 1FBD                                      l9168 0B98  
                                    l9088 0BC8                                      l9408 0D86  
                                    l8570 172C                                      l8642 089F  
                                    l9514 15BB                                      l9426 13CB  
                                    l9436 13E6                                      l8732 11E2  
                                    l8740 1148                                      l9372 0D2F  
                                    l9700 025F                     _myMain_Initialization 1D62  
                                    l8574 1732                                      l8654 0834  
                                    l9198 1438                                      l8670 097B  
                                    l8830 04E8                                      l8806 04A8  
                                    l8734 11ED                                      l8742 114B  
                                    l8718 1FB8                                      l9382 0D41  
                                    l9710 0291                                      l7848 1585  
                                    l8576 1738                                      l8680 09A2  
                                    l8672 0980                                      l8664 0969  
                                    l8824 04D5                                      l8912 1197  
                                    l9624 0E5A                                      l9544 0F6C  
                                    l8842 051B                                      l8826 04DF  
                                    l8818 04C2                                      l9474 0AB0  
                                    l8746 1151                                      l8906 118E  
                                    l9394 0D57                                      l8668 0970  
                                    l8836 04FB                                      l8828 04E4  
                                    l9476 0AB6                                      l8940 1513  
                                    l8908 1191                                      l8772 1644  
                                    l9652 0E9C                                      l9724 02CF  
                                    l8678 099A                                      l8846 052D  
                                    l8838 0505                                      l9486 0ADC  
                                    l8694 1F2C                                      l8950 1523  
                                    l8934 150A                                      l9638 0E84  
                                    l9734 0301                                      l9574 0FCB  
                                    l8784 1128                                      l8856 0548  
                                    l8872 0ED4                                      l9488 0AE2  
                                    l9808 05D2                                      l8696 1F2F  
                                    l8944 151A                                      l8936 150D  
                                    l8768 1635                                      l9672 1078  
                                    l9576 0FCD                                      l9496 1F45  
                                    _CFGS 0CAE                                      l8866 0EBE  
                                    l8946 151D                                      l9586 0FE2  
                                    l9498 1F48                                      l9922 1419  
                                    l8796 0492                                      l9764 109E  
                                    l9668 1072                                      l9684 021C  
                                    l9588 0FE3                                      l9908 0D0B  
                                    l9940 07DD                                      l8894 0F2E  
                                    l8886 0F15                                      l9784 1093  
                                    l9880 0CB1                              __CFG_WDTE$ON 0000  
                                    l9892 0CDE                                      l8998 1F00  
                                    l9968 0068                                      l9888 0CD6  
                                    l9986 0089                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      _PEIE 005E  
                                    u4555 16C3                                      u4910 17B1  
                                    u4575 16CD                                      u5615 0DDA  
                                    u4585 16D7                                      u4595 16DF  
                                    u4915 17AF                                      u5645 0DF5  
                                    u9015 1EAD                                      u5585 0DB0  
                                    u9205 0976                                      u9225 0990  
                                    u9245 099D                                      u9275 09B4  
                                    u9365 11D7                                      u9535 04C3  
                                    u9625 04FC                                      u9705 0EF6  
                                    u7875 157B                                      u9715 0F16  
                                    u8925 127E                                      u9565 04D6  
                                    u9725 0F25                                      u9735 0F2F  
                                    u9595 04E9                                      _LWLO 0CAD  
                                    u9695 0EE6                                      _RSSI 00D6  
                                    _WREN 0CAA                                      _WPUB 020D  
                                    _Buz1 00BC                                      _Load 0120  
                                    _Temp 00DE                                      _main 08A7  
                            ___ftpack@arg 0073                       __end_of_DlyOff_Main 0C93  
                         __end_of_RF_Main 1C06                              ___ftpack@exp 0076  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1C7D  
                                    ltemp 007E             __size_of_setRF_Initialization 000A  
                                    start 0020                                      ttemp 007E  
                                    wtemp 007E                       DelayTimejudge@value 0025  
              __end_of_setRFSW_AdjControl 14A4                         ___bmul@multiplier 0076  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2247 0020  
    _getDimmerLights_Allow_Condition$2248 0021      _getDimmerLights_Allow_Condition$2249 0022  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0072  
                            ___fttol@exp1 0056                              ___fttol@lval 0052  
 __end_of_getDimmerLights_Allow_Condition 1466  __size_of_getDimmerLights_Allow_Condition 003E  
       ??_getDimmerLights_Allow_Condition 0074          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1428                    _getDimmerLights_Status 1D0A  
                      ??_getDimmer_LoadGO 0073                          __end_of_LED_Main 1CD7  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00D4  
                                   l10002 00AD                                     l10040 0166  
                                   l10008 00DF                                     l10130 066B  
                                   l10034 0159                                     l10124 065B  
                                   l10044 0182                                     l10142 06A1  
                                   l10134 067A                                     l10222 08CB  
                                   l10160 06E2                                     l10144 067D  
                                   l10048 018E                                     l10162 06BE  
                                   l10146 06A9                                     l10058 01A4  
                                   l10226 08D6                                     l10164 06EA  
                                   l10172 0704                                     l10166 06F4  
                                   l10096 01D7                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0061  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 01E7  
                         __end_of___awdiv 16F6                           __end_of___ftadd 0560  
                         __end_of___ftdiv 0F50                           __end_of___ftneg 1C6B  
                                   u10225 1ED7                                     u10505 13DE  
                                   u11145 10A6                                     u11155 10AB  
                                   u11315 0CC4                           ___awdiv@divisor 0073  
                                   u11415 1410                                     _T1CON 0018  
                                   u10465 13C2                                     u11425 141F  
                                   u11275 13A7                           __end_of___fttol 0E17  
                                   u10485 13CC                                     u11605 00AB  
                                   u11365 0CF8                                     u10495 13D6  
                                   u11615 00DD                                     u11705 0195  
                                   u11625 0112                                     u11465 07F5  
                                   u10765 0FB3                                     u11830 06A7  
                                   u10785 0FD3                                     u11835 0686  
                                   u11860 06E8                                     u10895 0E73  
                                   u11865 06C7                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 13ED                           ___awdiv@counter 0020  
           __size_of_CC2500_FrequencyCabr 000B                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0074  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _WPUB1 1069  
                                   _WPUB2 106A                   __end_of_Timeout_Counter 1EDD  
                           __CFG_WRT$HALF 0000                          __end_of_TMR1_ISR 1184  
                 __size_of_setProductData 000E              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1CEF                                     _getAD 1F3D  
                           ___awtoft@sign 0028                             ___ftpack@sign 0077  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0073  
                        __end_of_WDT_Main 1DD1               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0020                            __pbitbssCOMMON 03C0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1DA1  
                      Flash_Memory_Read@i 0074                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0010              __end_of_getMain_LightsStatus 1D44  
           __end_of_setLED_Initialization 1D91                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 17A7  
             __size_of_Flash_Memory_Write 002A                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0063  
             __size_of_setRF_TransceiveGO 0010                         _setDimmerIntr_IOC 1529  
                  ??_Flash_Memory_Erasing 0073                         _setDimmerIntr_TMR 035D  
             ??_setDimmerLights_DimmingOn 0075                        ??_CC2500_SIDLEMode 0077  
                         __initialization 0022                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                   __size_of_getDelayOff_GO 000F  
                      ?_setDimmerIntr_IOC 0070                              __end_of_main 0902  
                     ?_setRF_DimmerLights 0061                        ?_setDimmerIntr_TMR 0070  
                 setDimmerIntr_IOC@lights 0071                          __end_of_Fosc_Set 1C10  
                      ??_setMemory_Modify 0073              setDimmerLights_OnOff@command 0066  
                          _Exception_Main 063C                          ?_CC2500_WriteREG 0075  
                               ??_ADC_Set 0073                      _setSw_Initialization 0800  
                                  ??_main 0078                             ___fttol@sign1 0051  
                     ??_setDimmerIntr_IOC 0070                       ??_setDimmerIntr_TMR 0070  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0073  
            ??_DimmerLights_SelectPointer 0073                   _setControl_Lights_Table 0A27  
                          _setMemory_Data 1C92                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0075                                _Receive_OK 03C0  
      setDimmerIntr_ControlStatus@command 0073                   _setDimmerLights_Dimming 1651  
                               ??_IOC_ISR 0072                                 ??_IOC_Set 0073  
                             _DimmerIntr1 014E                               _DimmerIntr2 0155  
                __size_of_setRFSW_Control 004F                        _RF_Timeout_Counter 1E9E  
                 ??_Switch_Initialization 0078                    ?_setDimmerLights_OnOff 0066  
                    ??_setRF_DimmerLights 0062                                    ?_getAD 0073  
                       ??_getRF_KeyStatus 0073                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0C22                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 0078                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0075  
                   _getDimmer_Load_Status 1C44                                 ??_WDT_Set 0073  
                        __end_of___awtoft 113F                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 09C4                  _getMain_All_Error_Status 1319  
                                  _IOCBF2 1CB2                                    i1l1315 0013  
                                  i1l1318 001B                                    i1l7312 1541  
                                  i1l7304 1536                                    i1l7322 1565  
                                  i1l7402 0464                                    i1l7342 0375  
                                  i1l7334 036A                                    i1l7352 0396  
                                  i1l7362 03C2                                    i1l7390 042A  
                                  i1l7366 03CB                                    i1l7384 0413  
                                  i1l7392 0430                                    i1l7386 0419  
                                  i1l7398 044E                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0024                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 019A                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1F8D  
                                  _WDTCON 0097                                    u798_25 117E  
               __end_of_setDimmerIntr_IOC 156E                      Exception_Main@i_3502 006B  
                      DelayTime_1us@count 0073                 __end_of_setDimmerIntr_TMR 046A  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0077  
           __end_of_CC2500_PowerOnInitial 1EC8                                    _Dimmer 00C8  
                                  _DlySw1 015C                                    _DlySw2 01E2  
           __size_of_setRF_TimeoutCleared 0004                __end_of_Mcu_Initialization 1E39  
                     __end_of_Buzzer_Main 15B4                                    _Memory 0220  
                                  _Timer1 00CB                                    ___bmul 1DD1  
                  __end_of_Exception_Main 070F                      Load_Main@Load_Status 0029  
                    Exception_Main@lights 006D                                    ___wmul 109B  
                               ??___awdiv 0077                                 ??___ftadd 0042  
            __size_of_DelayOffPointSelect 0015                                 ??___ftdiv 002F  
                               ??___ftneg 0078                                 ??___fttol 004D  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0073  
                               ??___lwdiv 0077                    ??_setDimmerLights_Main 0078  
                  ??_setDimmerLights_Line 0073                                    _r_data 00DC  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1F8D  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 001B  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0073          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1F72                                    _s_data 00DD  
                  ??_setDimmerLights_SwOn 0028                                    _setLED 0902  
                                  _myMain 00AE                      ??_RF_Timeout_Counter 0073  
                  __end_of_setMemory_Data 1C9D                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0022                                    _setBuz 174E  
                      __size_of_Temp_Main 0003               __end_of_Load_Initialization 1C00  
        ??_setDimmerLights_Initialization 0073           ?_setDimmerLights_Initialization 0070  
        __end_of_setDimmerIntr_Dimming_RF 126A          __end_of_setDimmerIntr_Dimming_Sw 11CC  
               _setDimmerLights_DimmingOn 11F2                  Flash_Memory_Read@address 0075  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1DC1  
             getMain_Lights_Count@status1 0074               getMain_Lights_Count@status2 0075  
                   __end_of_SwPointSelect 1E4C              __size_of_Flash_Memory_Modify 004E  
                 __size_of_LedPointSelect 001D           setDimmerIntr_Dimming_Sw@command 0073  
                     Flash_Memory_Write@i 0074              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0073                                _TouchPower 1066  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0020  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0050  
         getDimmerIntr_DimmingValue@value 0074           setDimmerIntr_DimmingValue@value 0073  
                               ?_LED_Main 0070                                ___ftadd@f1 003C  
                              ___ftadd@f2 003F                      _getRF_KeyStatus$5151 0075  
                 setDimmerIntr_TMR@lights 0071                             ?_my_MainTimer 0070  
               _setDimmerLights_SwOn$2207 002A                 _setDimmerLights_SwOn$2195 0029  
                              ___ftdiv@f1 002C                                ___ftdiv@f2 0029  
                              ___ftdiv@f3 0034                                ___ftneg@f1 0039  
                              ___awtoft@c 0023                       ___bmul@multiplicand 0073  
            ?_DimmerLights_Initialization 0070                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 0049                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 10DB  
                           __end_of_getAD 1F57                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0074  
               setMemory_LoopSave@command 0074                        _LED_Initialization 1CBF  
                         _getSw_KeyStatus 10BB                 ??_setControl_Lights_Table 0078  
                      getRF_KeyStatus@key 0074                          ??_DelayTimejudge 0020  
                         ?_setMemory_Data 0073                 ??_setDimmerLights_Dimming 0067  
           ??_Flash_Memory_Initialization 005D                      _getMain_Lights_Count 1D91  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01EE  
       setDimmerIntr_ControlStatus@lights 0075                        __size_of_getBuz_GO 0011  
                    _getMain_LightsStatus 1D35                 _setDimmerIntr_MaxmumValue 1EF4  
              __end_of_set_TimeoutCleared 1C2A           setDimmerIntr_MaxmumValue@lights 0020  
                      __size_of_getRxData 007F                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1D18  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0076                       _Temp_Initialization 1C06  
                      ??_CC2500_WriteByte 0073                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 156E                         ??_setRFSW_Control 0066  
                       __end_of_Temp_Main 1C0C                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0028                                ??_LED_Main 0078  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1C52  
              __size_of_setDimmerIntr_IOC 0045                __size_of_setDimmerIntr_TMR 010D  
                           ??_Switch_Main 0078                            DelayTime_1us@i 0020  
                          DelayTime_1us@j 0022                      ??_LED_Initialization 0078  
                            _DimmerLights 0079                         LedPointSelect@led 0074  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0076                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0011                               setBuz@count 0027  
                 ?_getDimmerLights_Status 0070                                __pmaintext 08A7  
                          _getDelayOff_GO 1D26                       _CC2500_WriteCommand 1F23  
                    ?_Temp_Initialization 0070                                   ?___bmul 0073  
                        ??_setDelayOff_GO 0063         __end_of_DimmerIntr_Initialization 111D  
           ??_DimmerLights_Initialization 0074                                   ?___wmul 0073  
                              ??_TMR1_ISR 0072                             ?_setTemp_Main 0070  
                              _getLoad_AD 0C93                                ??_TMR1_Set 0073  
                              __pintentry 0004                    ??_setSw_Initialization 0077  
                              _getLoad_OK 1C36                        __size_of_setTxData 00B4  
                                 ?_setLED 0075                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1C4B  
                                 ?_setBuz 0024                                 ?___awtoft 0023  
                               ?___ftpack 0073                                _getTemp_AD 13ED  
      __end_of_DimmerLights_SelectPointer 1EF4                _DimmerLights_SelectPointer 1EDD  
                              ??_WDT_Main 0073                     ?_getMain_LightsStatus 0070  
            __end_of_setRF_Initialization 1C87                        _setRFSW_AdjControl 1466  
                  __end_of_setProductData 1D26             setDimmerLights_Dimming@lights 0068  
                                 _IOC_ISR 1CFC                                   _IOC_Set 1CD7  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 0066  
   getDimmerLights_Allow_Condition@lights 0023                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 1380                 __size_of_getDimmer_LoadGO 0007  
                       _Flash_Memory_Read 1E60                    __size_of_CC2500_RxData 0065  
                  __size_of_CC2500_TxData 006A                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1C03  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1C74           __end_of_setControl_Lights_Table 0A8A  
                         setRF_Main@error 006D                                ??_Fosc_Set 0073  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 16A2  
                 ??_setLoad_AH_AL_Restore 0073              __end_of_CC2500_FrequencyCabr 1CA8  
                         __size_of_IO_Set 001B         __size_of_setDimmerIntr_Dimming_RF 0029  
       __size_of_setDimmerIntr_Dimming_Sw 0025                         __end_of_getBuz_GO 1DF3  
               ?_setDimmerIntr_Dimming_RF 0073                       ??_Flash_Memory_Main 0021  
               ?_setDimmerIntr_Dimming_Sw 0073                       ??_Flash_Memory_Read 0073  
                  __end_of_getDelayOff_GO 1D35                                   _VarLED1 0165  
                                 _VarLED2 0169            __end_of_getDimmerLights_Status 1D18  
                       __end_of_getRxData 0D90                   __end_of_getSw_KeyStatus 10DB  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0073  
                    ??_setRFSW_AdjControl 0063                            ??_setTemp_Main 0061  
                         __size_of___bmul 0011                       setProductData@value 005D  
                                 ___awdiv 16A2                                   ___ftadd 046A  
                                 ___ftdiv 0EA7                                   ___ftneg 1C62  
                         __size_of___wmul 0020                                   ___fttol 0D90  
                     __end_of_Switch_Main 1CB3                                   ___lwdiv 13B6  
                 ??_Buzzer_Initialization 0073                           _getRF_KeyStatus 1DF3  
                              ??___awtoft 0026                                ??___ftpack 0020  
                         __size_of_setLED 005F                      setRFSW_AdjControl@sw 0066  
                         __size_of_setBuz 0059                                   __ptext1 07C3  
                                 __ptext2 1D62                                   __ptext3 13ED  
                                 __ptext4 0C93                                   __ptext5 1F3D  
                                 __ptext6 1DC1                                   __ptext7 0002  
                                 __ptext8 1C09                                   __ptext9 0F50  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0073                   ??_setDimmerLights_OnOff 0067  
                         ?_setProductData 005D                 __end_of_Flash_Memory_Main 13B6  
               __end_of_Flash_Memory_Read 1E74                   ??_setDimmerLights_SwOff 0078  
                              _setRF_Main 0E17                   ??_myMain_Initialization 0073  
                           _DelayOff_Main 1C5A                         _DimmerLights_Main 107B  
          __size_of_DlyOff_Initialization 0005                     ??_CC2500_WriteCommand 0075  
               __size_of_setMemory_Modify 0010             __end_of_DlyOff_Initialization 1C25  
              __end_of_CC2500_ClearRXFIFO 1C18                  ??_setTemp_Initialization 0073  
              __end_of_CC2500_ClearTXFIFO 1C1C                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 006E  
                          _LedPointSelect 1FC4                       _DelayOffPointSelect 1E74  
                                 clrloop0 1C31            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1CFC                      end_of_initialization 0050  
               ??_DelayOff_Initialization 0076                         _CC2500_InitSetREG 12BE  
                           _DelayTime_1us 11CC                         __end_of_setTxData 07C3  
              __end_of_Flash_Memory_Write 12BE        __size_of_setDimmerLights_DimmingOn 0026  
                                 init_ram 1C2A                __end_of_setRF_TransceiveGO 1D81  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0078  
                    Flash_Memory_Read@ret 0076                                   initloop 1C2B  
                              _setSw_Main 01EE                     CC2500_ReadByte@loop_b 0074  
                  setDimmerLights_SwOn@sw 002C                         _CC2500_ReadStatus 1184  
                    Flash_Memory_Modify@i 0020                     _setLED_Initialization 1D81  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0020  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001C  
                           _CC2500_RxData 0B53                             _CC2500_TxData 0BB8  
                     ??_CC2500_InitSetREG 0020             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 15B4  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0073                              __pstringtext 1000  
                     _Flash_Memory_Unlock 1C6B                       ??_CC2500_ReadStatus 0075  
                  ??_getMain_LightsStatus 0073                   CC2500_InitSetREG@loop_c 0023  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0077                    setSw_Initialization@sw 0077  
               __end_of_DimmerLights_Main 109B                        _Mcu_Initialization 1E27  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1C14  
                    __end_of_my_MainTimer 07FF                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1FE1  
                __size_of_CC2500_WriteREG 0022          getDimmerIntr_DimmingValue@lights 0075  
        setDimmerIntr_DimmingValue@lights 0075                 __end_of_CC2500_InitSetREG 12E8  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0073  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 0017  
               __end_of_CC2500_ReadStatus 11A7                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0075           getMain_All_Error_Status@command 0024  
                             ___ftdiv@exp 0037         __end_of_setDimmerLights_DimmingOn 1218  
                        ??_Exception_Main 0066                            __end_of_IO_Set 1FA8  
                    _setRF_Initialization 1C7D                        _setMemory_LoopSave 1DB1  
    __end_of_setDimmerLights_PercentValue 0B53     __size_of_setDimmerLights_PercentValue 0065  
            _setDimmerLights_PercentValue 0AEE                               _Switch_Main 1CA8  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1E04                          ??_setMemory_Data 0074  
                   _CC2500_PowerOnInitial 1EB3               ??_DimmerIntr_Initialization 0073  
                    ??_Mcu_Initialization 0074                     ??_DelayOffPointSelect 0073  
                           ?_WDT_Clearing 0070                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1DE2       __size_of_getDimmerIntr_DimmingValue 0014  
                    setRF_DimmerLights@on 0061                            __end_of___wmul 10BB  
                       getSw_KeyStatus@sw 0077               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 0023             __size_of_getDimmerLights_Line 000F  
        DimmerLights_SelectPointer@lights 0074                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 0064                            __end_of_setLED 0961  
           __size_of_setDimmerLights_Line 0012             __size_of_setDimmerLights_SwOn 005A  
                          __end_of_setBuz 17A7                      _CC2500_FrequencyCabr 1C9D  
                 ??_getDimmer_Load_Status 0073                __size_of_Flash_Memory_Main 0036  
              __size_of_Flash_Memory_Read 0014                               ?_setRF_Main 0070  
                         _setRFSW_Control 1602                         __size_of_WDT_Main 0010  
                     start_initialization 0022                         _setRF_DimmerValue 12E8  
                         ?_LedPointSelect 0070                                 _Load_Main 0054  
                             __end_of_ISR 0020                          _getDimmer_LoadGO 1C3D  
                   ??_Flash_Memory_Modify 0077              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0073                        ?_setRF_DimmerValue 0070  
              __end_of_CC2500_InitPATable 2000           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0073                     ??_Flash_Memory_Unlock 0073  
                    __end_of_setTemp_Main 1000                            ??_RF_RxDisable 0077  
                     __size_of_getLoad_AD 007E                              ?_Buzzer_Main 0070  
                     __size_of_getLoad_OK 0007                        _set_TimeoutCleared 1C25  
       __end_of_setDimmerIntr_MaxmumValue 1F0B                                  ??_IO_Set 0073  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 0161  
                             ?_setSw_Main 0070                       ??_setRF_DimmerValue 0061  
                     __size_of_getTemp_AD 003B                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0018                                 _Temp_Main 1C09  
           ?_setDimmerLights_PercentValue 0070                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0073                                 _Rx_Length 00D7  
                   setProductData@address 0060                       Exception_Main@count 0067  
                 setRF_DimmerValue@lights 0062                       Exception_Main@error 0068  
                                ??___bmul 0074                                  ??___wmul 0077  
                  __size_of_SwPointSelect 0013                                 _Tx_Length 00DA  
                             __pdataBANK4 0245                                  ??_setLED 0076  
                                ?_ADC_Set 0070                                  ??_setBuz 0026  
                         ??_DelayOff_Main 0078                         ??_CC2500_ReadByte 0073  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 134C  
                        _CC2500_SIDLEMode 1C1C                __size_of_DimmerLights_Main 0020  
               __end_of_setRF_DimmerValue 1319                        setMemory_Data@data 0073  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0075  
       setDimmerLights_PercentValue@value 0059                             ??_setLED_Main 0075  
                       __size_of___awtoft 0022                         __size_of___ftpack 0063  
                                ?_IOC_ISR 0070                               __pbssCOMMON 0079  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1DA1                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                 setRF_TransceiveGO@command 0074  
                           __pcstackBANK3 01E7                      ??_set_TimeoutCleared 0073  
               _DimmerIntr_Initialization 10FB                           ??_DelayTime_1us 0075  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0068  
                       ??_CC2500_PowerRST 0075                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0074  
                            ??_TouchPower 0073                      __size_of_DlyOff_Main 0071  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 0076  
             setDimmerLights_DimmingOn@sw 0075                         ??_CC2500_WriteREG 0076  
                           ??_setRF_Learn 0073                             _DimmerLights1 01BE  
                           _DimmerLights2 01C7                     CC2500_WriteREG@w_addr 0077  
                   setDelayOff_GO@command 0061            __size_of_setLoad_AH_AL_Restore 001B  
                         ??_CC2500_RxData 0077             __end_of_setLoad_AH_AL_Restore 1F72  
                setRFSW_AdjControl@status 0065                           ??_CC2500_TxData 0077  
                               __pnvBANK0 006E                            getRxData@error 006A  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 1C10  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0069  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 0090  
                        ___lwdiv@dividend 0075                     DelayOffPointSelect@sw 0074  
                              setBuz@time 0024                       setDelayOff_GO@value 0062  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0028                    _setTemp_Initialization 07FF  
                               _getBuz_GO 1DE2                  ?_setDimmerLights_Dimming 0066  
     __end_of_Flash_Memory_Initialization 063C               _Flash_Memory_Initialization 0560  
                                ?___awdiv 0073                                 __ptext100 1C62  
                               __ptext101 0EA7                                 __ptext110 1428  
                               __ptext102 046A                                 __ptext111 1C36  
                               __ptext103 111D                                 __ptext120 16A2  
                               __ptext112 1319                                 __ptext104 0961  
                               __ptext121 0807                                 __ptext113 1C87  
                               __ptext105 1E15                                 __ptext130 1C20  
                               __ptext122 16F6                                 __ptext114 1BF9  
                               __ptext106 1EF4                                 __ptext131 1E74  
                               __ptext123 1D18                                 __ptext115 10FB  
                               __ptext107 11A7                                 __ptext132 156E  
                               __ptext124 126A                                 __ptext116 1C5A  
                               __ptext108 1E4C                                 __ptext133 1BFA  
                               __ptext125 1DD1                                 __ptext117 0C22  
                               __ptext109 1D35                                  ?___ftadd 003C  
                               __ptext126 1D26                                 __ptext118 084D  
                               __ptext135 1161                                 __ptext127 1D0A  
                               __ptext119 174E                                 __ptext136 035D  
                               __ptext128 1EDD                                 __ptext137 1CFC  
                               __ptext129 1C52                                 __ptext138 1529  
                               _getRxData 0D11                                  ?___ftdiv 0029  
                                ?___ftneg 0039                                  ?___fttol 0049  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0073  
                 __end_of_setRFSW_Control 1651                          ??_setProductData 005E  
           __size_of_setSw_Initialization 0007            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1BFD                             ??_setLog_Code 0061  
                getDimmerLights_Line@line 0074                        __end_of_TouchPower 107B  
                         DelayTimejudge@i 0022                           DelayTimejudge@j 0023  
                         DelayTimejudge@k 0024                       __size_of_setSw_Main 016F  
            CC2500_ReadStatus@status_addr 0076        __end_of_getDimmerIntr_DimmingValue 1E60  
            ??_setDimmerIntr_DimmingValue 0074                _getDimmerIntr_DimmingValue 1E4C  
                  CC2500_WriteByte@loop_a 0074            __size_of_setDimmerLights_OnOff 0063  
                               _r_address 00DB             __end_of_setDimmerLights_OnOff 0A27  
          __size_of_setDimmerLights_SwOff 0046            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 084D              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1D71                            __size_of_getAD 001A  
                        ___lwdiv@quotient 0021                   __size_of_DelayTimejudge 002A  
                           _SwPointSelect 1E39                       __end_of_setLED_Main 14E5  
                        ??_getDelayOff_GO 0075                    ??_setRF_Initialization 0073  
             __end_of_Temp_Initialization 1C09                         _CC2500_rfSettings 102F  
                          ___wmul@product 0020                                  _LED_Main 1CCB  
                         SwPointSelect@sw 0074                                 clear_ram0 1C30  
                CC2500_InitPATable@loop_d 0022                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 07C3                                 _setTxData 070F  
           setDimmerLights_PercentValue@i 005A       __end_of_DimmerLights_Initialization 1C92  
             _DimmerLights_Initialization 1C87                        _CC2500_ClearRXFIFO 1C14  
                      _CC2500_ClearTXFIFO 1C18                  setRF_DimmerLights@lights 0065  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1E15  
                       ??_Timeout_Counter 0073                                ?_getBuz_GO 0073  
                setRF_DimmerLights@status 0064      __size_of_setDimmerIntr_ControlStatus 0029  
             __size_of_setRFSW_AdjControl 003E       __size_of_setDimmerIntr_DimmingValue 0015  
                      _Flash_Memory_Write 1294                                ?_getRxData 0070  
                            ??_getLoad_AD 0020                                  _TMR1_ISR 1161  
                  CC2500_InitSetREG@temp1 0021                    CC2500_InitSetREG@temp2 0022  
                            ??_getLoad_OK 0073                                  _TMR1_Set 1CE3  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1D71                                  _RF_Count 00CE  
                    __end_of_RF_RxDisable 1D62            ??_setDimmerLights_PercentValue 0057  
                            ??_getTemp_AD 0077               __end_of_CC2500_WriteCommand 1F3D  
                  ??_CC2500_FrequencyCabr 0077                                  _WDT_Main 1DC1  
                 DlyOff_Initialization@sw 0075                     getSw_KeyStatus@status 0076  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0073  
              __size_of_setRF_DimmerValue 0031                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 006C                     __size_of_setTemp_Main 00B0  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 0058  
                                _DelayOff 00D3                              setSw_Main@sw 0068  
                             ??_Load_Main 0026                          __size_of_IOC_ISR 000E  
          getMain_All_Error_Status@status 0025                          __size_of_IOC_Set 000C  
            __end_of_Flash_Memory_Erasing 1CBF                            ?_SwPointSelect 0070  
                             getAD@adcon0 0076                               getAD@adcon1 0073  
                          setLED_Main@led 0077                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 1380                     _DlyOff_Initialization 1C20  
                    ??_CC2500_ClearRXFIFO 0077                      ??_CC2500_ClearTXFIFO 0077  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1241               setDimmerLights_OnOff@lights 0068  
                _setDimmerIntr_Dimming_Sw 11A7                                  _Fosc_Set 1C0C  
                        __size_of_WDT_Set 0009                     setRFSW_Control@status 0067  
                      __end_of_getLoad_AD 0D11                        __end_of_getLoad_OK 1C3D  
                   _Switch_Initialization 1CEF         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0073                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 0046                        __end_of_getTemp_AD 1428  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1F0B                         getLoad_AD@channel 0022  
     __size_of_DimmerLights_SelectPointer 0017                      ??_setRF_TransceiveGO 0073  
            Flash_Memory_Initialization@i 005E                                  _SwDetect 00D9  
                             ??_Temp_Main 0078                         setRFSW_Control@sw 0068  
           _getMain_All_Error_Status$3490 0020             _getMain_All_Error_Status$3491 0022  
                __end_of_getDimmer_LoadGO 1C44                       _Load_Initialization 1BFD  
                               setLED@led 0076                              _setTemp_Main 0F50  
                        __size_of___awdiv 0054                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002B  
                                ___awtoft 111D                          ??_LedPointSelect 0073  
                                ___ftpack 0961             __size_of_getMain_Lights_Count 0010  
                  getDimmer_LoadGO@loadgo 0073             __size_of_getMain_LightsStatus 000F  
                       getTemp_AD@channel 0020                              ??_setRF_Main 006B  
                    CC2500_WriteREG@value 0075                               _setLED_Main 14A4  
              __end_of_setRF_DimmerLights 1800            __size_of_getDimmer_Load_Status 0007  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0076  
                        getDelayOff_GO@sw 0075             __end_of_getDimmer_Load_Status 1C4B  
                        setDelayOff_GO@sw 0064                           ___lwdiv@divisor 0073  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0020  
                                __ptext10 1C06                                  __ptext11 07FF  
                                __ptext20 1066                                  __ptext12 1CA8  
                                __ptext21 1C25                                  __ptext13 01EE  
                                __ptext30 1466                                  __ptext22 1EC8  
                                __ptext14 1E04                                  __ptext31 12E8  
                                __ptext23 1C03                                  __ptext15 11F2  
                                __ptext40 1FA8                                  __ptext32 1241  
                                __ptext24 0E17                                  __ptext16 10BB  
                                __ptext41 1EB3                                  __ptext33 1DA1  
                                __ptext25 0D11                                  __ptext17 1E39  
                                __ptext50 1C14                                  __ptext42 1C1C  
                                __ptext34 1DF3                                  __ptext26 134C  
                                __ptext18 1CEF                                  __ptext51 1F23  
                                __ptext43 14E5                                  __ptext35 1DE2  
                                __ptext27 1DB1                                  __ptext19 0800  
                                __ptext60 1F8D                                  __ptext52 1C10  
                                __ptext44 12BE                                  __ptext36 1D53  
                                __ptext28 0A27                                  __ptext61 1CD7  
                                __ptext53 1E9E                                  __ptext45 1FE1  
                                __ptext37 0BB8                                  __ptext29 1602  
                                __ptext70 13B6                                  __ptext62 1C0C  
                                __ptext54 1F0B                                  __ptext46 113F  
                                __ptext38 0B53                                  __ptext71 1BFD  
                                __ptext63 1C4B                                  __ptext55 1C00  
                                __ptext47 1C9D                                  __ptext39 1184  
                                __ptext80 0560                                  __ptext72 1F57  
                                __ptext64 0054                                  __ptext56 1C7D  
                                __ptext48 11CC                                  __ptext81 1C92  
                                __ptext73 1CCB                                  __ptext65 1D91  
                                __ptext57 1E27                                  __ptext49 1C18  
                                __ptext90 0902                                  __ptext82 1294  
                                __ptext74 14A4                                  __ptext66 1C44  
                                __ptext58 1C74                                  __ptext91 1FC4  
                                __ptext83 1C6B                                  __ptext75 1CBF  
                                __ptext67 1C3D                                  __ptext59 1CE3  
                                __ptext92 1E89                                  __ptext84 1E60  
                                __ptext76 1D81                                  __ptext68 1F72  
                                __ptext93 1218                                  __ptext85 063C  
                                __ptext77 1380                                  __ptext69 109B  
                                __ptext94 1651                                  __ptext86 1D44  
                                __ptext78 15B4                                  __ptext95 070F  
                                __ptext87 107B                                  __ptext79 1CB3  
                                __ptext96 1D71                                  __ptext88 0A8A  
                                __ptext97 17A7                                  __ptext89 09C4  
                                __ptext98 0AEE                                  __ptext99 0D90  
                                __product 0245                   ??_setLED_Initialization 0077  
                ??_getDimmerLights_Status 0075              __end_of_getDimmerLights_Line 1D53  
            __end_of_setDimmerLights_Main 0AEE              __end_of_setDimmerLights_Line 1E27  
            __end_of_setDimmerLights_SwOn 08A7                              ??_setSw_Main 0066  
                  ??_setRF_TimeoutCleared 0073                             setLED@command 0075  
                           __size_of_main 005B                               _setRF_Learn 1E04  
      __size_of_DimmerIntr_Initialization 0022                  __end_of_CC2500_SIDLEMode 1C20  
              setDimmerLights_Main@lights 0069               __end_of_DelayOffPointSelect 1E89  
              CC2500_WriteCommand@command 0076                           _CC2500_ReadByte 1FA8  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1FE1  
                __end_of_setMemory_Modify 1DB1      _getAll_DimmerIntr_Dimming_Sw_RF$2117 0074  
    _getAll_DimmerIntr_Dimming_Sw_RF$2118 0075                        __end_of_setRF_Main 0EA7  
                             ??_getBuz_GO 0075               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 105E                               ??_getRxData 0069  
                            getLoad_OK@ok 0073                __end_of_RF_Timeout_Counter 1EB3  
                                main@argc 01E7                                  main@argv 01E9  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6137 0074  
                    _getSw_KeyStatus$6138 0075                           _CC2500_PowerRST 14E5  
                __size_of_getSw_KeyStatus 0020        __end_of_setDimmerIntr_DimmingValue 1E9E  
              _setDimmerIntr_DimmingValue 1E89               __end_of_Flash_Memory_Modify 1602  
                             _setLog_Code 134C               __end_of_Flash_Memory_Unlock 1C74  
                         ??_SwPointSelect 0073                           _CC2500_WriteREG 113F  
                      __end_of_setSw_Main 035D                     ??_Load_Initialization 0075  
                           _Transceive_OK 03C1                    ?_DlyOff_Initialization 0070  
                          _DelayTimejudge 126A                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0073                setDimmerLights_Line@lights 0073  
                 setDimmerLights_SwOff@sw 0065               __size_of_setMemory_LoopSave 0010  
                                intlevel1 0000                      ??_CC2500_InitPATable 0020  
                  ?_Switch_Initialization 0070                   ??_CC2500_PowerOnInitial 0078  
  __end_of_setDimmerLights_Initialization 1BFA   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1BF9                ?_setDimmerIntr_MaxmumValue 0076  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0073  
                  CC2500_InitPATable@temp 0021                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1C00                               getLoad_AD@i 0025  
                             getLoad_AD@j 0024                               getLoad_AD@k 0023  
                    _Flash_Memory_Erasing 1CB3                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D8                   __size_of_Exception_Main 00D3  
         __end_of_DelayOff_Initialization 1C5A                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1C62                       ??_RF_Initialization 0074  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 16F6  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0063  
                  __end_of_DelayTimejudge 1294          __size_of_setDimmerLights_Dimming 0051  
             getDimmer_Load_Status@status 0073      __size_of_Flash_Memory_Initialization 00DC  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 0066  
                   setMemory_Data@address 0075                     __end_of_DelayTime_1us 11F2  
                 __end_of_CC2500_ReadByte 1FC4              __end_of_setSw_Initialization 0807  
                         _Timeout_Counter 1EC8           __size_of_getDimmerLights_Status 000E  
                            _RF_RxDisable 1D53                __end_of_LED_Initialization 1CCB  
          __end_of_setTemp_Initialization 0800                   setMemory_Modify@command 0074  
               __end_of_RF_Initialization 1C03                     __end_of_CC2500_RxData 0BB8  
                   __end_of_CC2500_TxData 0C22                     _setLoad_AH_AL_Restore 1F57  
                 __end_of_CC2500_PowerRST 1529  
