

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Dec 11 17:13:06 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	intentry,global,class=CODE,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	dabs	1,0x7E,2
   145  0000                     	;# 
   146  0001                     	;# 
   147  0002                     	;# 
   148  0003                     	;# 
   149  0004                     	;# 
   150  0005                     	;# 
   151  0006                     	;# 
   152  0007                     	;# 
   153  0008                     	;# 
   154  0009                     	;# 
   155  000A                     	;# 
   156  000B                     	;# 
   157  000C                     	;# 
   158  000D                     	;# 
   159  000E                     	;# 
   160  0010                     	;# 
   161  0011                     	;# 
   162  0012                     	;# 
   163  0015                     	;# 
   164  0016                     	;# 
   165  0016                     	;# 
   166  0017                     	;# 
   167  0018                     	;# 
   168  0019                     	;# 
   169  001A                     	;# 
   170  001B                     	;# 
   171  001C                     	;# 
   172  008C                     	;# 
   173  008D                     	;# 
   174  008E                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0095                     	;# 
   179  0096                     	;# 
   180  0097                     	;# 
   181  0099                     	;# 
   182  009A                     	;# 
   183  009B                     	;# 
   184  009B                     	;# 
   185  009C                     	;# 
   186  009D                     	;# 
   187  009E                     	;# 
   188  010C                     	;# 
   189  010D                     	;# 
   190  010E                     	;# 
   191  0116                     	;# 
   192  0117                     	;# 
   193  011D                     	;# 
   194  018C                     	;# 
   195  018D                     	;# 
   196  018E                     	;# 
   197  0191                     	;# 
   198  0191                     	;# 
   199  0192                     	;# 
   200  0193                     	;# 
   201  0193                     	;# 
   202  0194                     	;# 
   203  0195                     	;# 
   204  0196                     	;# 
   205  0197                     	;# 
   206  0199                     	;# 
   207  019A                     	;# 
   208  019B                     	;# 
   209  019B                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  019C                     	;# 
   214  019D                     	;# 
   215  019E                     	;# 
   216  019F                     	;# 
   217  020D                     	;# 
   218  0210                     	;# 
   219  0211                     	;# 
   220  0211                     	;# 
   221  0212                     	;# 
   222  0212                     	;# 
   223  0213                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0291                     	;# 
   235  0291                     	;# 
   236  0292                     	;# 
   237  0293                     	;# 
   238  0298                     	;# 
   239  0298                     	;# 
   240  0299                     	;# 
   241  029A                     	;# 
   242  0394                     	;# 
   243  0395                     	;# 
   244  0396                     	;# 
   245  0FE4                     	;# 
   246  0FE5                     	;# 
   247  0FE6                     	;# 
   248  0FE7                     	;# 
   249  0FE8                     	;# 
   250  0FE9                     	;# 
   251  0FEA                     	;# 
   252  0FEB                     	;# 
   253  0FED                     	;# 
   254  0FEE                     	;# 
   255  0FEF                     	;# 
   256  0000                     	;# 
   257  0001                     	;# 
   258  0002                     	;# 
   259  0003                     	;# 
   260  0004                     	;# 
   261  0005                     	;# 
   262  0006                     	;# 
   263  0007                     	;# 
   264  0008                     	;# 
   265  0009                     	;# 
   266  000A                     	;# 
   267  000B                     	;# 
   268  000C                     	;# 
   269  000D                     	;# 
   270  000E                     	;# 
   271  0010                     	;# 
   272  0011                     	;# 
   273  0012                     	;# 
   274  0015                     	;# 
   275  0016                     	;# 
   276  0016                     	;# 
   277  0017                     	;# 
   278  0018                     	;# 
   279  0019                     	;# 
   280  001A                     	;# 
   281  001B                     	;# 
   282  001C                     	;# 
   283  008C                     	;# 
   284  008D                     	;# 
   285  008E                     	;# 
   286  0090                     	;# 
   287  0091                     	;# 
   288  0092                     	;# 
   289  0095                     	;# 
   290  0096                     	;# 
   291  0097                     	;# 
   292  0099                     	;# 
   293  009A                     	;# 
   294  009B                     	;# 
   295  009B                     	;# 
   296  009C                     	;# 
   297  009D                     	;# 
   298  009E                     	;# 
   299  010C                     	;# 
   300  010D                     	;# 
   301  010E                     	;# 
   302  0116                     	;# 
   303  0117                     	;# 
   304  011D                     	;# 
   305  018C                     	;# 
   306  018D                     	;# 
   307  018E                     	;# 
   308  0191                     	;# 
   309  0191                     	;# 
   310  0192                     	;# 
   311  0193                     	;# 
   312  0193                     	;# 
   313  0194                     	;# 
   314  0195                     	;# 
   315  0196                     	;# 
   316  0197                     	;# 
   317  0199                     	;# 
   318  019A                     	;# 
   319  019B                     	;# 
   320  019B                     	;# 
   321  019B                     	;# 
   322  019B                     	;# 
   323  019C                     	;# 
   324  019C                     	;# 
   325  019D                     	;# 
   326  019E                     	;# 
   327  019F                     	;# 
   328  020D                     	;# 
   329  0210                     	;# 
   330  0211                     	;# 
   331  0211                     	;# 
   332  0212                     	;# 
   333  0212                     	;# 
   334  0213                     	;# 
   335  0213                     	;# 
   336  0214                     	;# 
   337  0214                     	;# 
   338  0215                     	;# 
   339  0215                     	;# 
   340  0215                     	;# 
   341  0216                     	;# 
   342  0216                     	;# 
   343  0217                     	;# 
   344  0217                     	;# 
   345  0291                     	;# 
   346  0291                     	;# 
   347  0292                     	;# 
   348  0293                     	;# 
   349  0298                     	;# 
   350  0298                     	;# 
   351  0299                     	;# 
   352  029A                     	;# 
   353  0394                     	;# 
   354  0395                     	;# 
   355  0396                     	;# 
   356  0FE4                     	;# 
   357  0FE5                     	;# 
   358  0FE6                     	;# 
   359  0FE7                     	;# 
   360  0FE8                     	;# 
   361  0FE9                     	;# 
   362  0FEA                     	;# 
   363  0FEB                     	;# 
   364  0FED                     	;# 
   365  0FEE                     	;# 
   366  0FEF                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0008                     	;# 
   376  0009                     	;# 
   377  000A                     	;# 
   378  000B                     	;# 
   379  000C                     	;# 
   380  000D                     	;# 
   381  000E                     	;# 
   382  0010                     	;# 
   383  0011                     	;# 
   384  0012                     	;# 
   385  0015                     	;# 
   386  0016                     	;# 
   387  0016                     	;# 
   388  0017                     	;# 
   389  0018                     	;# 
   390  0019                     	;# 
   391  001A                     	;# 
   392  001B                     	;# 
   393  001C                     	;# 
   394  008C                     	;# 
   395  008D                     	;# 
   396  008E                     	;# 
   397  0090                     	;# 
   398  0091                     	;# 
   399  0092                     	;# 
   400  0095                     	;# 
   401  0096                     	;# 
   402  0097                     	;# 
   403  0099                     	;# 
   404  009A                     	;# 
   405  009B                     	;# 
   406  009B                     	;# 
   407  009C                     	;# 
   408  009D                     	;# 
   409  009E                     	;# 
   410  010C                     	;# 
   411  010D                     	;# 
   412  010E                     	;# 
   413  0116                     	;# 
   414  0117                     	;# 
   415  011D                     	;# 
   416  018C                     	;# 
   417  018D                     	;# 
   418  018E                     	;# 
   419  0191                     	;# 
   420  0191                     	;# 
   421  0192                     	;# 
   422  0193                     	;# 
   423  0193                     	;# 
   424  0194                     	;# 
   425  0195                     	;# 
   426  0196                     	;# 
   427  0197                     	;# 
   428  0199                     	;# 
   429  019A                     	;# 
   430  019B                     	;# 
   431  019B                     	;# 
   432  019B                     	;# 
   433  019B                     	;# 
   434  019C                     	;# 
   435  019C                     	;# 
   436  019D                     	;# 
   437  019E                     	;# 
   438  019F                     	;# 
   439  020D                     	;# 
   440  0210                     	;# 
   441  0211                     	;# 
   442  0211                     	;# 
   443  0212                     	;# 
   444  0212                     	;# 
   445  0213                     	;# 
   446  0213                     	;# 
   447  0214                     	;# 
   448  0214                     	;# 
   449  0215                     	;# 
   450  0215                     	;# 
   451  0215                     	;# 
   452  0216                     	;# 
   453  0216                     	;# 
   454  0217                     	;# 
   455  0217                     	;# 
   456  0291                     	;# 
   457  0291                     	;# 
   458  0292                     	;# 
   459  0293                     	;# 
   460  0298                     	;# 
   461  0298                     	;# 
   462  0299                     	;# 
   463  029A                     	;# 
   464  0394                     	;# 
   465  0395                     	;# 
   466  0396                     	;# 
   467  0FE4                     	;# 
   468  0FE5                     	;# 
   469  0FE6                     	;# 
   470  0FE7                     	;# 
   471  0FE8                     	;# 
   472  0FE9                     	;# 
   473  0FEA                     	;# 
   474  0FEB                     	;# 
   475  0FED                     	;# 
   476  0FEE                     	;# 
   477  0FEF                     	;# 
   478  0000                     	;# 
   479  0001                     	;# 
   480  0002                     	;# 
   481  0003                     	;# 
   482  0004                     	;# 
   483  0005                     	;# 
   484  0006                     	;# 
   485  0007                     	;# 
   486  0008                     	;# 
   487  0009                     	;# 
   488  000A                     	;# 
   489  000B                     	;# 
   490  000C                     	;# 
   491  000D                     	;# 
   492  000E                     	;# 
   493  0010                     	;# 
   494  0011                     	;# 
   495  0012                     	;# 
   496  0015                     	;# 
   497  0016                     	;# 
   498  0016                     	;# 
   499  0017                     	;# 
   500  0018                     	;# 
   501  0019                     	;# 
   502  001A                     	;# 
   503  001B                     	;# 
   504  001C                     	;# 
   505  008C                     	;# 
   506  008D                     	;# 
   507  008E                     	;# 
   508  0090                     	;# 
   509  0091                     	;# 
   510  0092                     	;# 
   511  0095                     	;# 
   512  0096                     	;# 
   513  0097                     	;# 
   514  0099                     	;# 
   515  009A                     	;# 
   516  009B                     	;# 
   517  009B                     	;# 
   518  009C                     	;# 
   519  009D                     	;# 
   520  009E                     	;# 
   521  010C                     	;# 
   522  010D                     	;# 
   523  010E                     	;# 
   524  0116                     	;# 
   525  0117                     	;# 
   526  011D                     	;# 
   527  018C                     	;# 
   528  018D                     	;# 
   529  018E                     	;# 
   530  0191                     	;# 
   531  0191                     	;# 
   532  0192                     	;# 
   533  0193                     	;# 
   534  0193                     	;# 
   535  0194                     	;# 
   536  0195                     	;# 
   537  0196                     	;# 
   538  0197                     	;# 
   539  0199                     	;# 
   540  019A                     	;# 
   541  019B                     	;# 
   542  019B                     	;# 
   543  019B                     	;# 
   544  019B                     	;# 
   545  019C                     	;# 
   546  019C                     	;# 
   547  019D                     	;# 
   548  019E                     	;# 
   549  019F                     	;# 
   550  020D                     	;# 
   551  0210                     	;# 
   552  0211                     	;# 
   553  0211                     	;# 
   554  0212                     	;# 
   555  0212                     	;# 
   556  0213                     	;# 
   557  0213                     	;# 
   558  0214                     	;# 
   559  0214                     	;# 
   560  0215                     	;# 
   561  0215                     	;# 
   562  0215                     	;# 
   563  0216                     	;# 
   564  0216                     	;# 
   565  0217                     	;# 
   566  0217                     	;# 
   567  0291                     	;# 
   568  0291                     	;# 
   569  0292                     	;# 
   570  0293                     	;# 
   571  0298                     	;# 
   572  0298                     	;# 
   573  0299                     	;# 
   574  029A                     	;# 
   575  0394                     	;# 
   576  0395                     	;# 
   577  0396                     	;# 
   578  0FE4                     	;# 
   579  0FE5                     	;# 
   580  0FE6                     	;# 
   581  0FE7                     	;# 
   582  0FE8                     	;# 
   583  0FE9                     	;# 
   584  0FEA                     	;# 
   585  0FEB                     	;# 
   586  0FED                     	;# 
   587  0FEE                     	;# 
   588  0FEF                     	;# 
   589  0000                     	;# 
   590  0001                     	;# 
   591  0002                     	;# 
   592  0003                     	;# 
   593  0004                     	;# 
   594  0005                     	;# 
   595  0006                     	;# 
   596  0007                     	;# 
   597  0008                     	;# 
   598  0009                     	;# 
   599  000A                     	;# 
   600  000B                     	;# 
   601  000C                     	;# 
   602  000D                     	;# 
   603  000E                     	;# 
   604  0010                     	;# 
   605  0011                     	;# 
   606  0012                     	;# 
   607  0015                     	;# 
   608  0016                     	;# 
   609  0016                     	;# 
   610  0017                     	;# 
   611  0018                     	;# 
   612  0019                     	;# 
   613  001A                     	;# 
   614  001B                     	;# 
   615  001C                     	;# 
   616  008C                     	;# 
   617  008D                     	;# 
   618  008E                     	;# 
   619  0090                     	;# 
   620  0091                     	;# 
   621  0092                     	;# 
   622  0095                     	;# 
   623  0096                     	;# 
   624  0097                     	;# 
   625  0099                     	;# 
   626  009A                     	;# 
   627  009B                     	;# 
   628  009B                     	;# 
   629  009C                     	;# 
   630  009D                     	;# 
   631  009E                     	;# 
   632  010C                     	;# 
   633  010D                     	;# 
   634  010E                     	;# 
   635  0116                     	;# 
   636  0117                     	;# 
   637  011D                     	;# 
   638  018C                     	;# 
   639  018D                     	;# 
   640  018E                     	;# 
   641  0191                     	;# 
   642  0191                     	;# 
   643  0192                     	;# 
   644  0193                     	;# 
   645  0193                     	;# 
   646  0194                     	;# 
   647  0195                     	;# 
   648  0196                     	;# 
   649  0197                     	;# 
   650  0199                     	;# 
   651  019A                     	;# 
   652  019B                     	;# 
   653  019B                     	;# 
   654  019B                     	;# 
   655  019B                     	;# 
   656  019C                     	;# 
   657  019C                     	;# 
   658  019D                     	;# 
   659  019E                     	;# 
   660  019F                     	;# 
   661  020D                     	;# 
   662  0210                     	;# 
   663  0211                     	;# 
   664  0211                     	;# 
   665  0212                     	;# 
   666  0212                     	;# 
   667  0213                     	;# 
   668  0213                     	;# 
   669  0214                     	;# 
   670  0214                     	;# 
   671  0215                     	;# 
   672  0215                     	;# 
   673  0215                     	;# 
   674  0216                     	;# 
   675  0216                     	;# 
   676  0217                     	;# 
   677  0217                     	;# 
   678  0291                     	;# 
   679  0291                     	;# 
   680  0292                     	;# 
   681  0293                     	;# 
   682  0298                     	;# 
   683  0298                     	;# 
   684  0299                     	;# 
   685  029A                     	;# 
   686  0394                     	;# 
   687  0395                     	;# 
   688  0396                     	;# 
   689  0FE4                     	;# 
   690  0FE5                     	;# 
   691  0FE6                     	;# 
   692  0FE7                     	;# 
   693  0FE8                     	;# 
   694  0FE9                     	;# 
   695  0FEA                     	;# 
   696  0FEB                     	;# 
   697  0FED                     	;# 
   698  0FEE                     	;# 
   699  0FEF                     	;# 
   700  0000                     	;# 
   701  0001                     	;# 
   702  0002                     	;# 
   703  0003                     	;# 
   704  0004                     	;# 
   705  0005                     	;# 
   706  0006                     	;# 
   707  0007                     	;# 
   708  0008                     	;# 
   709  0009                     	;# 
   710  000A                     	;# 
   711  000B                     	;# 
   712  000C                     	;# 
   713  000D                     	;# 
   714  000E                     	;# 
   715  0010                     	;# 
   716  0011                     	;# 
   717  0012                     	;# 
   718  0015                     	;# 
   719  0016                     	;# 
   720  0016                     	;# 
   721  0017                     	;# 
   722  0018                     	;# 
   723  0019                     	;# 
   724  001A                     	;# 
   725  001B                     	;# 
   726  001C                     	;# 
   727  008C                     	;# 
   728  008D                     	;# 
   729  008E                     	;# 
   730  0090                     	;# 
   731  0091                     	;# 
   732  0092                     	;# 
   733  0095                     	;# 
   734  0096                     	;# 
   735  0097                     	;# 
   736  0099                     	;# 
   737  009A                     	;# 
   738  009B                     	;# 
   739  009B                     	;# 
   740  009C                     	;# 
   741  009D                     	;# 
   742  009E                     	;# 
   743  010C                     	;# 
   744  010D                     	;# 
   745  010E                     	;# 
   746  0116                     	;# 
   747  0117                     	;# 
   748  011D                     	;# 
   749  018C                     	;# 
   750  018D                     	;# 
   751  018E                     	;# 
   752  0191                     	;# 
   753  0191                     	;# 
   754  0192                     	;# 
   755  0193                     	;# 
   756  0193                     	;# 
   757  0194                     	;# 
   758  0195                     	;# 
   759  0196                     	;# 
   760  0197                     	;# 
   761  0199                     	;# 
   762  019A                     	;# 
   763  019B                     	;# 
   764  019B                     	;# 
   765  019B                     	;# 
   766  019B                     	;# 
   767  019C                     	;# 
   768  019C                     	;# 
   769  019D                     	;# 
   770  019E                     	;# 
   771  019F                     	;# 
   772  020D                     	;# 
   773  0210                     	;# 
   774  0211                     	;# 
   775  0211                     	;# 
   776  0212                     	;# 
   777  0212                     	;# 
   778  0213                     	;# 
   779  0213                     	;# 
   780  0214                     	;# 
   781  0214                     	;# 
   782  0215                     	;# 
   783  0215                     	;# 
   784  0215                     	;# 
   785  0216                     	;# 
   786  0216                     	;# 
   787  0217                     	;# 
   788  0217                     	;# 
   789  0291                     	;# 
   790  0291                     	;# 
   791  0292                     	;# 
   792  0293                     	;# 
   793  0298                     	;# 
   794  0298                     	;# 
   795  0299                     	;# 
   796  029A                     	;# 
   797  0394                     	;# 
   798  0395                     	;# 
   799  0396                     	;# 
   800  0FE4                     	;# 
   801  0FE5                     	;# 
   802  0FE6                     	;# 
   803  0FE7                     	;# 
   804  0FE8                     	;# 
   805  0FE9                     	;# 
   806  0FEA                     	;# 
   807  0FEB                     	;# 
   808  0FED                     	;# 
   809  0FEE                     	;# 
   810  0FEF                     	;# 
   811  0000                     	;# 
   812  0001                     	;# 
   813  0002                     	;# 
   814  0003                     	;# 
   815  0004                     	;# 
   816  0005                     	;# 
   817  0006                     	;# 
   818  0007                     	;# 
   819  0008                     	;# 
   820  0009                     	;# 
   821  000A                     	;# 
   822  000B                     	;# 
   823  000C                     	;# 
   824  000D                     	;# 
   825  000E                     	;# 
   826  0010                     	;# 
   827  0011                     	;# 
   828  0012                     	;# 
   829  0015                     	;# 
   830  0016                     	;# 
   831  0016                     	;# 
   832  0017                     	;# 
   833  0018                     	;# 
   834  0019                     	;# 
   835  001A                     	;# 
   836  001B                     	;# 
   837  001C                     	;# 
   838  008C                     	;# 
   839  008D                     	;# 
   840  008E                     	;# 
   841  0090                     	;# 
   842  0091                     	;# 
   843  0092                     	;# 
   844  0095                     	;# 
   845  0096                     	;# 
   846  0097                     	;# 
   847  0099                     	;# 
   848  009A                     	;# 
   849  009B                     	;# 
   850  009B                     	;# 
   851  009C                     	;# 
   852  009D                     	;# 
   853  009E                     	;# 
   854  010C                     	;# 
   855  010D                     	;# 
   856  010E                     	;# 
   857  0116                     	;# 
   858  0117                     	;# 
   859  011D                     	;# 
   860  018C                     	;# 
   861  018D                     	;# 
   862  018E                     	;# 
   863  0191                     	;# 
   864  0191                     	;# 
   865  0192                     	;# 
   866  0193                     	;# 
   867  0193                     	;# 
   868  0194                     	;# 
   869  0195                     	;# 
   870  0196                     	;# 
   871  0197                     	;# 
   872  0199                     	;# 
   873  019A                     	;# 
   874  019B                     	;# 
   875  019B                     	;# 
   876  019B                     	;# 
   877  019B                     	;# 
   878  019C                     	;# 
   879  019C                     	;# 
   880  019D                     	;# 
   881  019E                     	;# 
   882  019F                     	;# 
   883  020D                     	;# 
   884  0210                     	;# 
   885  0211                     	;# 
   886  0211                     	;# 
   887  0212                     	;# 
   888  0212                     	;# 
   889  0213                     	;# 
   890  0213                     	;# 
   891  0214                     	;# 
   892  0214                     	;# 
   893  0215                     	;# 
   894  0215                     	;# 
   895  0215                     	;# 
   896  0216                     	;# 
   897  0216                     	;# 
   898  0217                     	;# 
   899  0217                     	;# 
   900  0291                     	;# 
   901  0291                     	;# 
   902  0292                     	;# 
   903  0293                     	;# 
   904  0298                     	;# 
   905  0298                     	;# 
   906  0299                     	;# 
   907  029A                     	;# 
   908  0394                     	;# 
   909  0395                     	;# 
   910  0396                     	;# 
   911  0FE4                     	;# 
   912  0FE5                     	;# 
   913  0FE6                     	;# 
   914  0FE7                     	;# 
   915  0FE8                     	;# 
   916  0FE9                     	;# 
   917  0FEA                     	;# 
   918  0FEB                     	;# 
   919  0FED                     	;# 
   920  0FEE                     	;# 
   921  0FEF                     	;# 
   922  0000                     	;# 
   923  0001                     	;# 
   924  0002                     	;# 
   925  0003                     	;# 
   926  0004                     	;# 
   927  0005                     	;# 
   928  0006                     	;# 
   929  0007                     	;# 
   930  0008                     	;# 
   931  0009                     	;# 
   932  000A                     	;# 
   933  000B                     	;# 
   934  000C                     	;# 
   935  000D                     	;# 
   936  000E                     	;# 
   937  0010                     	;# 
   938  0011                     	;# 
   939  0012                     	;# 
   940  0015                     	;# 
   941  0016                     	;# 
   942  0016                     	;# 
   943  0017                     	;# 
   944  0018                     	;# 
   945  0019                     	;# 
   946  001A                     	;# 
   947  001B                     	;# 
   948  001C                     	;# 
   949  008C                     	;# 
   950  008D                     	;# 
   951  008E                     	;# 
   952  0090                     	;# 
   953  0091                     	;# 
   954  0092                     	;# 
   955  0095                     	;# 
   956  0096                     	;# 
   957  0097                     	;# 
   958  0099                     	;# 
   959  009A                     	;# 
   960  009B                     	;# 
   961  009B                     	;# 
   962  009C                     	;# 
   963  009D                     	;# 
   964  009E                     	;# 
   965  010C                     	;# 
   966  010D                     	;# 
   967  010E                     	;# 
   968  0116                     	;# 
   969  0117                     	;# 
   970  011D                     	;# 
   971  018C                     	;# 
   972  018D                     	;# 
   973  018E                     	;# 
   974  0191                     	;# 
   975  0191                     	;# 
   976  0192                     	;# 
   977  0193                     	;# 
   978  0193                     	;# 
   979  0194                     	;# 
   980  0195                     	;# 
   981  0196                     	;# 
   982  0197                     	;# 
   983  0199                     	;# 
   984  019A                     	;# 
   985  019B                     	;# 
   986  019B                     	;# 
   987  019B                     	;# 
   988  019B                     	;# 
   989  019C                     	;# 
   990  019C                     	;# 
   991  019D                     	;# 
   992  019E                     	;# 
   993  019F                     	;# 
   994  020D                     	;# 
   995  0210                     	;# 
   996  0211                     	;# 
   997  0211                     	;# 
   998  0212                     	;# 
   999  0212                     	;# 
  1000  0213                     	;# 
  1001  0213                     	;# 
  1002  0214                     	;# 
  1003  0214                     	;# 
  1004  0215                     	;# 
  1005  0215                     	;# 
  1006  0215                     	;# 
  1007  0216                     	;# 
  1008  0216                     	;# 
  1009  0217                     	;# 
  1010  0217                     	;# 
  1011  0291                     	;# 
  1012  0291                     	;# 
  1013  0292                     	;# 
  1014  0293                     	;# 
  1015  0298                     	;# 
  1016  0298                     	;# 
  1017  0299                     	;# 
  1018  029A                     	;# 
  1019  0394                     	;# 
  1020  0395                     	;# 
  1021  0396                     	;# 
  1022  0FE4                     	;# 
  1023  0FE5                     	;# 
  1024  0FE6                     	;# 
  1025  0FE7                     	;# 
  1026  0FE8                     	;# 
  1027  0FE9                     	;# 
  1028  0FEA                     	;# 
  1029  0FEB                     	;# 
  1030  0FED                     	;# 
  1031  0FEE                     	;# 
  1032  0FEF                     	;# 
  1033  0000                     	;# 
  1034  0001                     	;# 
  1035  0002                     	;# 
  1036  0003                     	;# 
  1037  0004                     	;# 
  1038  0005                     	;# 
  1039  0006                     	;# 
  1040  0007                     	;# 
  1041  0008                     	;# 
  1042  0009                     	;# 
  1043  000A                     	;# 
  1044  000B                     	;# 
  1045  000C                     	;# 
  1046  000D                     	;# 
  1047  000E                     	;# 
  1048  0010                     	;# 
  1049  0011                     	;# 
  1050  0012                     	;# 
  1051  0015                     	;# 
  1052  0016                     	;# 
  1053  0016                     	;# 
  1054  0017                     	;# 
  1055  0018                     	;# 
  1056  0019                     	;# 
  1057  001A                     	;# 
  1058  001B                     	;# 
  1059  001C                     	;# 
  1060  008C                     	;# 
  1061  008D                     	;# 
  1062  008E                     	;# 
  1063  0090                     	;# 
  1064  0091                     	;# 
  1065  0092                     	;# 
  1066  0095                     	;# 
  1067  0096                     	;# 
  1068  0097                     	;# 
  1069  0099                     	;# 
  1070  009A                     	;# 
  1071  009B                     	;# 
  1072  009B                     	;# 
  1073  009C                     	;# 
  1074  009D                     	;# 
  1075  009E                     	;# 
  1076  010C                     	;# 
  1077  010D                     	;# 
  1078  010E                     	;# 
  1079  0116                     	;# 
  1080  0117                     	;# 
  1081  011D                     	;# 
  1082  018C                     	;# 
  1083  018D                     	;# 
  1084  018E                     	;# 
  1085  0191                     	;# 
  1086  0191                     	;# 
  1087  0192                     	;# 
  1088  0193                     	;# 
  1089  0193                     	;# 
  1090  0194                     	;# 
  1091  0195                     	;# 
  1092  0196                     	;# 
  1093  0197                     	;# 
  1094  0199                     	;# 
  1095  019A                     	;# 
  1096  019B                     	;# 
  1097  019B                     	;# 
  1098  019B                     	;# 
  1099  019B                     	;# 
  1100  019C                     	;# 
  1101  019C                     	;# 
  1102  019D                     	;# 
  1103  019E                     	;# 
  1104  019F                     	;# 
  1105  020D                     	;# 
  1106  0210                     	;# 
  1107  0211                     	;# 
  1108  0211                     	;# 
  1109  0212                     	;# 
  1110  0212                     	;# 
  1111  0213                     	;# 
  1112  0213                     	;# 
  1113  0214                     	;# 
  1114  0214                     	;# 
  1115  0215                     	;# 
  1116  0215                     	;# 
  1117  0215                     	;# 
  1118  0216                     	;# 
  1119  0216                     	;# 
  1120  0217                     	;# 
  1121  0217                     	;# 
  1122  0291                     	;# 
  1123  0291                     	;# 
  1124  0292                     	;# 
  1125  0293                     	;# 
  1126  0298                     	;# 
  1127  0298                     	;# 
  1128  0299                     	;# 
  1129  029A                     	;# 
  1130  0394                     	;# 
  1131  0395                     	;# 
  1132  0396                     	;# 
  1133  0FE4                     	;# 
  1134  0FE5                     	;# 
  1135  0FE6                     	;# 
  1136  0FE7                     	;# 
  1137  0FE8                     	;# 
  1138  0FE9                     	;# 
  1139  0FEA                     	;# 
  1140  0FEB                     	;# 
  1141  0FED                     	;# 
  1142  0FEE                     	;# 
  1143  0FEF                     	;# 
  1144  0000                     	;# 
  1145  0001                     	;# 
  1146  0002                     	;# 
  1147  0003                     	;# 
  1148  0004                     	;# 
  1149  0005                     	;# 
  1150  0006                     	;# 
  1151  0007                     	;# 
  1152  0008                     	;# 
  1153  0009                     	;# 
  1154  000A                     	;# 
  1155  000B                     	;# 
  1156  000C                     	;# 
  1157  000D                     	;# 
  1158  000E                     	;# 
  1159  0010                     	;# 
  1160  0011                     	;# 
  1161  0012                     	;# 
  1162  0015                     	;# 
  1163  0016                     	;# 
  1164  0016                     	;# 
  1165  0017                     	;# 
  1166  0018                     	;# 
  1167  0019                     	;# 
  1168  001A                     	;# 
  1169  001B                     	;# 
  1170  001C                     	;# 
  1171  008C                     	;# 
  1172  008D                     	;# 
  1173  008E                     	;# 
  1174  0090                     	;# 
  1175  0091                     	;# 
  1176  0092                     	;# 
  1177  0095                     	;# 
  1178  0096                     	;# 
  1179  0097                     	;# 
  1180  0099                     	;# 
  1181  009A                     	;# 
  1182  009B                     	;# 
  1183  009B                     	;# 
  1184  009C                     	;# 
  1185  009D                     	;# 
  1186  009E                     	;# 
  1187  010C                     	;# 
  1188  010D                     	;# 
  1189  010E                     	;# 
  1190  0116                     	;# 
  1191  0117                     	;# 
  1192  011D                     	;# 
  1193  018C                     	;# 
  1194  018D                     	;# 
  1195  018E                     	;# 
  1196  0191                     	;# 
  1197  0191                     	;# 
  1198  0192                     	;# 
  1199  0193                     	;# 
  1200  0193                     	;# 
  1201  0194                     	;# 
  1202  0195                     	;# 
  1203  0196                     	;# 
  1204  0197                     	;# 
  1205  0199                     	;# 
  1206  019A                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019B                     	;# 
  1211  019C                     	;# 
  1212  019C                     	;# 
  1213  019D                     	;# 
  1214  019E                     	;# 
  1215  019F                     	;# 
  1216  020D                     	;# 
  1217  0210                     	;# 
  1218  0211                     	;# 
  1219  0211                     	;# 
  1220  0212                     	;# 
  1221  0212                     	;# 
  1222  0213                     	;# 
  1223  0213                     	;# 
  1224  0214                     	;# 
  1225  0214                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0216                     	;# 
  1230  0216                     	;# 
  1231  0217                     	;# 
  1232  0217                     	;# 
  1233  0291                     	;# 
  1234  0291                     	;# 
  1235  0292                     	;# 
  1236  0293                     	;# 
  1237  0298                     	;# 
  1238  0298                     	;# 
  1239  0299                     	;# 
  1240  029A                     	;# 
  1241  0394                     	;# 
  1242  0395                     	;# 
  1243  0396                     	;# 
  1244  0FE4                     	;# 
  1245  0FE5                     	;# 
  1246  0FE6                     	;# 
  1247  0FE7                     	;# 
  1248  0FE8                     	;# 
  1249  0FE9                     	;# 
  1250  0FEA                     	;# 
  1251  0FEB                     	;# 
  1252  0FED                     	;# 
  1253  0FEE                     	;# 
  1254  0FEF                     	;# 
  1255  0000                     	;# 
  1256  0001                     	;# 
  1257  0002                     	;# 
  1258  0003                     	;# 
  1259  0004                     	;# 
  1260  0005                     	;# 
  1261  0006                     	;# 
  1262  0007                     	;# 
  1263  0008                     	;# 
  1264  0009                     	;# 
  1265  000A                     	;# 
  1266  000B                     	;# 
  1267  000C                     	;# 
  1268  000D                     	;# 
  1269  000E                     	;# 
  1270  0010                     	;# 
  1271  0011                     	;# 
  1272  0012                     	;# 
  1273  0015                     	;# 
  1274  0016                     	;# 
  1275  0016                     	;# 
  1276  0017                     	;# 
  1277  0018                     	;# 
  1278  0019                     	;# 
  1279  001A                     	;# 
  1280  001B                     	;# 
  1281  001C                     	;# 
  1282  008C                     	;# 
  1283  008D                     	;# 
  1284  008E                     	;# 
  1285  0090                     	;# 
  1286  0091                     	;# 
  1287  0092                     	;# 
  1288  0095                     	;# 
  1289  0096                     	;# 
  1290  0097                     	;# 
  1291  0099                     	;# 
  1292  009A                     	;# 
  1293  009B                     	;# 
  1294  009B                     	;# 
  1295  009C                     	;# 
  1296  009D                     	;# 
  1297  009E                     	;# 
  1298  010C                     	;# 
  1299  010D                     	;# 
  1300  010E                     	;# 
  1301  0116                     	;# 
  1302  0117                     	;# 
  1303  011D                     	;# 
  1304  018C                     	;# 
  1305  018D                     	;# 
  1306  018E                     	;# 
  1307  0191                     	;# 
  1308  0191                     	;# 
  1309  0192                     	;# 
  1310  0193                     	;# 
  1311  0193                     	;# 
  1312  0194                     	;# 
  1313  0195                     	;# 
  1314  0196                     	;# 
  1315  0197                     	;# 
  1316  0199                     	;# 
  1317  019A                     	;# 
  1318  019B                     	;# 
  1319  019B                     	;# 
  1320  019B                     	;# 
  1321  019B                     	;# 
  1322  019C                     	;# 
  1323  019C                     	;# 
  1324  019D                     	;# 
  1325  019E                     	;# 
  1326  019F                     	;# 
  1327  020D                     	;# 
  1328  0210                     	;# 
  1329  0211                     	;# 
  1330  0211                     	;# 
  1331  0212                     	;# 
  1332  0212                     	;# 
  1333  0213                     	;# 
  1334  0213                     	;# 
  1335  0214                     	;# 
  1336  0214                     	;# 
  1337  0215                     	;# 
  1338  0215                     	;# 
  1339  0215                     	;# 
  1340  0216                     	;# 
  1341  0216                     	;# 
  1342  0217                     	;# 
  1343  0217                     	;# 
  1344  0291                     	;# 
  1345  0291                     	;# 
  1346  0292                     	;# 
  1347  0293                     	;# 
  1348  0298                     	;# 
  1349  0298                     	;# 
  1350  0299                     	;# 
  1351  029A                     	;# 
  1352  0394                     	;# 
  1353  0395                     	;# 
  1354  0396                     	;# 
  1355  0FE4                     	;# 
  1356  0FE5                     	;# 
  1357  0FE6                     	;# 
  1358  0FE7                     	;# 
  1359  0FE8                     	;# 
  1360  0FE9                     	;# 
  1361  0FEA                     	;# 
  1362  0FEB                     	;# 
  1363  0FED                     	;# 
  1364  0FEE                     	;# 
  1365  0FEF                     	;# 
  1366  0000                     	;# 
  1367  0001                     	;# 
  1368  0002                     	;# 
  1369  0003                     	;# 
  1370  0004                     	;# 
  1371  0005                     	;# 
  1372  0006                     	;# 
  1373  0007                     	;# 
  1374  0008                     	;# 
  1375  0009                     	;# 
  1376  000A                     	;# 
  1377  000B                     	;# 
  1378  000C                     	;# 
  1379  000D                     	;# 
  1380  000E                     	;# 
  1381  0010                     	;# 
  1382  0011                     	;# 
  1383  0012                     	;# 
  1384  0015                     	;# 
  1385  0016                     	;# 
  1386  0016                     	;# 
  1387  0017                     	;# 
  1388  0018                     	;# 
  1389  0019                     	;# 
  1390  001A                     	;# 
  1391  001B                     	;# 
  1392  001C                     	;# 
  1393  008C                     	;# 
  1394  008D                     	;# 
  1395  008E                     	;# 
  1396  0090                     	;# 
  1397  0091                     	;# 
  1398  0092                     	;# 
  1399  0095                     	;# 
  1400  0096                     	;# 
  1401  0097                     	;# 
  1402  0099                     	;# 
  1403  009A                     	;# 
  1404  009B                     	;# 
  1405  009B                     	;# 
  1406  009C                     	;# 
  1407  009D                     	;# 
  1408  009E                     	;# 
  1409  010C                     	;# 
  1410  010D                     	;# 
  1411  010E                     	;# 
  1412  0116                     	;# 
  1413  0117                     	;# 
  1414  011D                     	;# 
  1415  018C                     	;# 
  1416  018D                     	;# 
  1417  018E                     	;# 
  1418  0191                     	;# 
  1419  0191                     	;# 
  1420  0192                     	;# 
  1421  0193                     	;# 
  1422  0193                     	;# 
  1423  0194                     	;# 
  1424  0195                     	;# 
  1425  0196                     	;# 
  1426  0197                     	;# 
  1427  0199                     	;# 
  1428  019A                     	;# 
  1429  019B                     	;# 
  1430  019B                     	;# 
  1431  019B                     	;# 
  1432  019B                     	;# 
  1433  019C                     	;# 
  1434  019C                     	;# 
  1435  019D                     	;# 
  1436  019E                     	;# 
  1437  019F                     	;# 
  1438  020D                     	;# 
  1439  0210                     	;# 
  1440  0211                     	;# 
  1441  0211                     	;# 
  1442  0212                     	;# 
  1443  0212                     	;# 
  1444  0213                     	;# 
  1445  0213                     	;# 
  1446  0214                     	;# 
  1447  0214                     	;# 
  1448  0215                     	;# 
  1449  0215                     	;# 
  1450  0215                     	;# 
  1451  0216                     	;# 
  1452  0216                     	;# 
  1453  0217                     	;# 
  1454  0217                     	;# 
  1455  0291                     	;# 
  1456  0291                     	;# 
  1457  0292                     	;# 
  1458  0293                     	;# 
  1459  0298                     	;# 
  1460  0298                     	;# 
  1461  0299                     	;# 
  1462  029A                     	;# 
  1463  0394                     	;# 
  1464  0395                     	;# 
  1465  0396                     	;# 
  1466  0FE4                     	;# 
  1467  0FE5                     	;# 
  1468  0FE6                     	;# 
  1469  0FE7                     	;# 
  1470  0FE8                     	;# 
  1471  0FE9                     	;# 
  1472  0FEA                     	;# 
  1473  0FEB                     	;# 
  1474  0FED                     	;# 
  1475  0FEE                     	;# 
  1476  0FEF                     	;# 
  1477  0000                     	;# 
  1478  0001                     	;# 
  1479  0002                     	;# 
  1480  0003                     	;# 
  1481  0004                     	;# 
  1482  0005                     	;# 
  1483  0006                     	;# 
  1484  0007                     	;# 
  1485  0008                     	;# 
  1486  0009                     	;# 
  1487  000A                     	;# 
  1488  000B                     	;# 
  1489  000C                     	;# 
  1490  000D                     	;# 
  1491  000E                     	;# 
  1492  0010                     	;# 
  1493  0011                     	;# 
  1494  0012                     	;# 
  1495  0015                     	;# 
  1496  0016                     	;# 
  1497  0016                     	;# 
  1498  0017                     	;# 
  1499  0018                     	;# 
  1500  0019                     	;# 
  1501  001A                     	;# 
  1502  001B                     	;# 
  1503  001C                     	;# 
  1504  008C                     	;# 
  1505  008D                     	;# 
  1506  008E                     	;# 
  1507  0090                     	;# 
  1508  0091                     	;# 
  1509  0092                     	;# 
  1510  0095                     	;# 
  1511  0096                     	;# 
  1512  0097                     	;# 
  1513  0099                     	;# 
  1514  009A                     	;# 
  1515  009B                     	;# 
  1516  009B                     	;# 
  1517  009C                     	;# 
  1518  009D                     	;# 
  1519  009E                     	;# 
  1520  010C                     	;# 
  1521  010D                     	;# 
  1522  010E                     	;# 
  1523  0116                     	;# 
  1524  0117                     	;# 
  1525  011D                     	;# 
  1526  018C                     	;# 
  1527  018D                     	;# 
  1528  018E                     	;# 
  1529  0191                     	;# 
  1530  0191                     	;# 
  1531  0192                     	;# 
  1532  0193                     	;# 
  1533  0193                     	;# 
  1534  0194                     	;# 
  1535  0195                     	;# 
  1536  0196                     	;# 
  1537  0197                     	;# 
  1538  0199                     	;# 
  1539  019A                     	;# 
  1540  019B                     	;# 
  1541  019B                     	;# 
  1542  019B                     	;# 
  1543  019B                     	;# 
  1544  019C                     	;# 
  1545  019C                     	;# 
  1546  019D                     	;# 
  1547  019E                     	;# 
  1548  019F                     	;# 
  1549  020D                     	;# 
  1550  0210                     	;# 
  1551  0211                     	;# 
  1552  0211                     	;# 
  1553  0212                     	;# 
  1554  0212                     	;# 
  1555  0213                     	;# 
  1556  0213                     	;# 
  1557  0214                     	;# 
  1558  0214                     	;# 
  1559  0215                     	;# 
  1560  0215                     	;# 
  1561  0215                     	;# 
  1562  0216                     	;# 
  1563  0216                     	;# 
  1564  0217                     	;# 
  1565  0217                     	;# 
  1566  0291                     	;# 
  1567  0291                     	;# 
  1568  0292                     	;# 
  1569  0293                     	;# 
  1570  0298                     	;# 
  1571  0298                     	;# 
  1572  0299                     	;# 
  1573  029A                     	;# 
  1574  0394                     	;# 
  1575  0395                     	;# 
  1576  0396                     	;# 
  1577  0FE4                     	;# 
  1578  0FE5                     	;# 
  1579  0FE6                     	;# 
  1580  0FE7                     	;# 
  1581  0FE8                     	;# 
  1582  0FE9                     	;# 
  1583  0FEA                     	;# 
  1584  0FEB                     	;# 
  1585  0FED                     	;# 
  1586  0FEE                     	;# 
  1587  0FEF                     	;# 
  1588  0000                     	;# 
  1589  0001                     	;# 
  1590  0002                     	;# 
  1591  0003                     	;# 
  1592  0004                     	;# 
  1593  0005                     	;# 
  1594  0006                     	;# 
  1595  0007                     	;# 
  1596  0008                     	;# 
  1597  0009                     	;# 
  1598  000A                     	;# 
  1599  000B                     	;# 
  1600  000C                     	;# 
  1601  000D                     	;# 
  1602  000E                     	;# 
  1603  0010                     	;# 
  1604  0011                     	;# 
  1605  0012                     	;# 
  1606  0015                     	;# 
  1607  0016                     	;# 
  1608  0016                     	;# 
  1609  0017                     	;# 
  1610  0018                     	;# 
  1611  0019                     	;# 
  1612  001A                     	;# 
  1613  001B                     	;# 
  1614  001C                     	;# 
  1615  008C                     	;# 
  1616  008D                     	;# 
  1617  008E                     	;# 
  1618  0090                     	;# 
  1619  0091                     	;# 
  1620  0092                     	;# 
  1621  0095                     	;# 
  1622  0096                     	;# 
  1623  0097                     	;# 
  1624  0099                     	;# 
  1625  009A                     	;# 
  1626  009B                     	;# 
  1627  009B                     	;# 
  1628  009C                     	;# 
  1629  009D                     	;# 
  1630  009E                     	;# 
  1631  010C                     	;# 
  1632  010D                     	;# 
  1633  010E                     	;# 
  1634  0116                     	;# 
  1635  0117                     	;# 
  1636  011D                     	;# 
  1637  018C                     	;# 
  1638  018D                     	;# 
  1639  018E                     	;# 
  1640  0191                     	;# 
  1641  0191                     	;# 
  1642  0192                     	;# 
  1643  0193                     	;# 
  1644  0193                     	;# 
  1645  0194                     	;# 
  1646  0195                     	;# 
  1647  0196                     	;# 
  1648  0197                     	;# 
  1649  0199                     	;# 
  1650  019A                     	;# 
  1651  019B                     	;# 
  1652  019B                     	;# 
  1653  019B                     	;# 
  1654  019B                     	;# 
  1655  019C                     	;# 
  1656  019C                     	;# 
  1657  019D                     	;# 
  1658  019E                     	;# 
  1659  019F                     	;# 
  1660  020D                     	;# 
  1661  0210                     	;# 
  1662  0211                     	;# 
  1663  0211                     	;# 
  1664  0212                     	;# 
  1665  0212                     	;# 
  1666  0213                     	;# 
  1667  0213                     	;# 
  1668  0214                     	;# 
  1669  0214                     	;# 
  1670  0215                     	;# 
  1671  0215                     	;# 
  1672  0215                     	;# 
  1673  0216                     	;# 
  1674  0216                     	;# 
  1675  0217                     	;# 
  1676  0217                     	;# 
  1677  0291                     	;# 
  1678  0291                     	;# 
  1679  0292                     	;# 
  1680  0293                     	;# 
  1681  0298                     	;# 
  1682  0298                     	;# 
  1683  0299                     	;# 
  1684  029A                     	;# 
  1685  0394                     	;# 
  1686  0395                     	;# 
  1687  0396                     	;# 
  1688  0FE4                     	;# 
  1689  0FE5                     	;# 
  1690  0FE6                     	;# 
  1691  0FE7                     	;# 
  1692  0FE8                     	;# 
  1693  0FE9                     	;# 
  1694  0FEA                     	;# 
  1695  0FEB                     	;# 
  1696  0FED                     	;# 
  1697  0FEE                     	;# 
  1698  0FEF                     	;# 
  1699  0000                     	;# 
  1700  0001                     	;# 
  1701  0002                     	;# 
  1702  0003                     	;# 
  1703  0004                     	;# 
  1704  0005                     	;# 
  1705  0006                     	;# 
  1706  0007                     	;# 
  1707  0008                     	;# 
  1708  0009                     	;# 
  1709  000A                     	;# 
  1710  000B                     	;# 
  1711  000C                     	;# 
  1712  000D                     	;# 
  1713  000E                     	;# 
  1714  0010                     	;# 
  1715  0011                     	;# 
  1716  0012                     	;# 
  1717  0015                     	;# 
  1718  0016                     	;# 
  1719  0016                     	;# 
  1720  0017                     	;# 
  1721  0018                     	;# 
  1722  0019                     	;# 
  1723  001A                     	;# 
  1724  001B                     	;# 
  1725  001C                     	;# 
  1726  008C                     	;# 
  1727  008D                     	;# 
  1728  008E                     	;# 
  1729  0090                     	;# 
  1730  0091                     	;# 
  1731  0092                     	;# 
  1732  0095                     	;# 
  1733  0096                     	;# 
  1734  0097                     	;# 
  1735  0099                     	;# 
  1736  009A                     	;# 
  1737  009B                     	;# 
  1738  009B                     	;# 
  1739  009C                     	;# 
  1740  009D                     	;# 
  1741  009E                     	;# 
  1742  010C                     	;# 
  1743  010D                     	;# 
  1744  010E                     	;# 
  1745  0116                     	;# 
  1746  0117                     	;# 
  1747  011D                     	;# 
  1748  018C                     	;# 
  1749  018D                     	;# 
  1750  018E                     	;# 
  1751  0191                     	;# 
  1752  0191                     	;# 
  1753  0192                     	;# 
  1754  0193                     	;# 
  1755  0193                     	;# 
  1756  0194                     	;# 
  1757  0195                     	;# 
  1758  0196                     	;# 
  1759  0197                     	;# 
  1760  0199                     	;# 
  1761  019A                     	;# 
  1762  019B                     	;# 
  1763  019B                     	;# 
  1764  019B                     	;# 
  1765  019B                     	;# 
  1766  019C                     	;# 
  1767  019C                     	;# 
  1768  019D                     	;# 
  1769  019E                     	;# 
  1770  019F                     	;# 
  1771  020D                     	;# 
  1772  0210                     	;# 
  1773  0211                     	;# 
  1774  0211                     	;# 
  1775  0212                     	;# 
  1776  0212                     	;# 
  1777  0213                     	;# 
  1778  0213                     	;# 
  1779  0214                     	;# 
  1780  0214                     	;# 
  1781  0215                     	;# 
  1782  0215                     	;# 
  1783  0215                     	;# 
  1784  0216                     	;# 
  1785  0216                     	;# 
  1786  0217                     	;# 
  1787  0217                     	;# 
  1788  0291                     	;# 
  1789  0291                     	;# 
  1790  0292                     	;# 
  1791  0293                     	;# 
  1792  0298                     	;# 
  1793  0298                     	;# 
  1794  0299                     	;# 
  1795  029A                     	;# 
  1796  0394                     	;# 
  1797  0395                     	;# 
  1798  0396                     	;# 
  1799  0FE4                     	;# 
  1800  0FE5                     	;# 
  1801  0FE6                     	;# 
  1802  0FE7                     	;# 
  1803  0FE8                     	;# 
  1804  0FE9                     	;# 
  1805  0FEA                     	;# 
  1806  0FEB                     	;# 
  1807  0FED                     	;# 
  1808  0FEE                     	;# 
  1809  0FEF                     	;# 
  1810  0000                     	;# 
  1811  0001                     	;# 
  1812  0002                     	;# 
  1813  0003                     	;# 
  1814  0004                     	;# 
  1815  0005                     	;# 
  1816  0006                     	;# 
  1817  0007                     	;# 
  1818  0008                     	;# 
  1819  0009                     	;# 
  1820  000A                     	;# 
  1821  000B                     	;# 
  1822  000C                     	;# 
  1823  000D                     	;# 
  1824  000E                     	;# 
  1825  0010                     	;# 
  1826  0011                     	;# 
  1827  0012                     	;# 
  1828  0015                     	;# 
  1829  0016                     	;# 
  1830  0016                     	;# 
  1831  0017                     	;# 
  1832  0018                     	;# 
  1833  0019                     	;# 
  1834  001A                     	;# 
  1835  001B                     	;# 
  1836  001C                     	;# 
  1837  008C                     	;# 
  1838  008D                     	;# 
  1839  008E                     	;# 
  1840  0090                     	;# 
  1841  0091                     	;# 
  1842  0092                     	;# 
  1843  0095                     	;# 
  1844  0096                     	;# 
  1845  0097                     	;# 
  1846  0099                     	;# 
  1847  009A                     	;# 
  1848  009B                     	;# 
  1849  009B                     	;# 
  1850  009C                     	;# 
  1851  009D                     	;# 
  1852  009E                     	;# 
  1853  010C                     	;# 
  1854  010D                     	;# 
  1855  010E                     	;# 
  1856  0116                     	;# 
  1857  0117                     	;# 
  1858  011D                     	;# 
  1859  018C                     	;# 
  1860  018D                     	;# 
  1861  018E                     	;# 
  1862  0191                     	;# 
  1863  0191                     	;# 
  1864  0192                     	;# 
  1865  0193                     	;# 
  1866  0193                     	;# 
  1867  0194                     	;# 
  1868  0195                     	;# 
  1869  0196                     	;# 
  1870  0197                     	;# 
  1871  0199                     	;# 
  1872  019A                     	;# 
  1873  019B                     	;# 
  1874  019B                     	;# 
  1875  019B                     	;# 
  1876  019B                     	;# 
  1877  019C                     	;# 
  1878  019C                     	;# 
  1879  019D                     	;# 
  1880  019E                     	;# 
  1881  019F                     	;# 
  1882  020D                     	;# 
  1883  0210                     	;# 
  1884  0211                     	;# 
  1885  0211                     	;# 
  1886  0212                     	;# 
  1887  0212                     	;# 
  1888  0213                     	;# 
  1889  0213                     	;# 
  1890  0214                     	;# 
  1891  0214                     	;# 
  1892  0215                     	;# 
  1893  0215                     	;# 
  1894  0215                     	;# 
  1895  0216                     	;# 
  1896  0216                     	;# 
  1897  0217                     	;# 
  1898  0217                     	;# 
  1899  0291                     	;# 
  1900  0291                     	;# 
  1901  0292                     	;# 
  1902  0293                     	;# 
  1903  0298                     	;# 
  1904  0298                     	;# 
  1905  0299                     	;# 
  1906  029A                     	;# 
  1907  0394                     	;# 
  1908  0395                     	;# 
  1909  0396                     	;# 
  1910  0FE4                     	;# 
  1911  0FE5                     	;# 
  1912  0FE6                     	;# 
  1913  0FE7                     	;# 
  1914  0FE8                     	;# 
  1915  0FE9                     	;# 
  1916  0FEA                     	;# 
  1917  0FEB                     	;# 
  1918  0FED                     	;# 
  1919  0FEE                     	;# 
  1920  0FEF                     	;# 
  1921  0000                     	;# 
  1922  0001                     	;# 
  1923  0002                     	;# 
  1924  0003                     	;# 
  1925  0004                     	;# 
  1926  0005                     	;# 
  1927  0006                     	;# 
  1928  0007                     	;# 
  1929  0008                     	;# 
  1930  0009                     	;# 
  1931  000A                     	;# 
  1932  000B                     	;# 
  1933  000C                     	;# 
  1934  000D                     	;# 
  1935  000E                     	;# 
  1936  0010                     	;# 
  1937  0011                     	;# 
  1938  0012                     	;# 
  1939  0015                     	;# 
  1940  0016                     	;# 
  1941  0016                     	;# 
  1942  0017                     	;# 
  1943  0018                     	;# 
  1944  0019                     	;# 
  1945  001A                     	;# 
  1946  001B                     	;# 
  1947  001C                     	;# 
  1948  008C                     	;# 
  1949  008D                     	;# 
  1950  008E                     	;# 
  1951  0090                     	;# 
  1952  0091                     	;# 
  1953  0092                     	;# 
  1954  0095                     	;# 
  1955  0096                     	;# 
  1956  0097                     	;# 
  1957  0099                     	;# 
  1958  009A                     	;# 
  1959  009B                     	;# 
  1960  009B                     	;# 
  1961  009C                     	;# 
  1962  009D                     	;# 
  1963  009E                     	;# 
  1964  010C                     	;# 
  1965  010D                     	;# 
  1966  010E                     	;# 
  1967  0116                     	;# 
  1968  0117                     	;# 
  1969  011D                     	;# 
  1970  018C                     	;# 
  1971  018D                     	;# 
  1972  018E                     	;# 
  1973  0191                     	;# 
  1974  0191                     	;# 
  1975  0192                     	;# 
  1976  0193                     	;# 
  1977  0193                     	;# 
  1978  0194                     	;# 
  1979  0195                     	;# 
  1980  0196                     	;# 
  1981  0197                     	;# 
  1982  0199                     	;# 
  1983  019A                     	;# 
  1984  019B                     	;# 
  1985  019B                     	;# 
  1986  019B                     	;# 
  1987  019B                     	;# 
  1988  019C                     	;# 
  1989  019C                     	;# 
  1990  019D                     	;# 
  1991  019E                     	;# 
  1992  019F                     	;# 
  1993  020D                     	;# 
  1994  0210                     	;# 
  1995  0211                     	;# 
  1996  0211                     	;# 
  1997  0212                     	;# 
  1998  0212                     	;# 
  1999  0213                     	;# 
  2000  0213                     	;# 
  2001  0214                     	;# 
  2002  0214                     	;# 
  2003  0215                     	;# 
  2004  0215                     	;# 
  2005  0215                     	;# 
  2006  0216                     	;# 
  2007  0216                     	;# 
  2008  0217                     	;# 
  2009  0217                     	;# 
  2010  0291                     	;# 
  2011  0291                     	;# 
  2012  0292                     	;# 
  2013  0293                     	;# 
  2014  0298                     	;# 
  2015  0298                     	;# 
  2016  0299                     	;# 
  2017  029A                     	;# 
  2018  0394                     	;# 
  2019  0395                     	;# 
  2020  0396                     	;# 
  2021  0FE4                     	;# 
  2022  0FE5                     	;# 
  2023  0FE6                     	;# 
  2024  0FE7                     	;# 
  2025  0FE8                     	;# 
  2026  0FE9                     	;# 
  2027  0FEA                     	;# 
  2028  0FEB                     	;# 
  2029  0FED                     	;# 
  2030  0FEE                     	;# 
  2031  0FEF                     	;# 
  2032  0000                     	;# 
  2033  0001                     	;# 
  2034  0002                     	;# 
  2035  0003                     	;# 
  2036  0004                     	;# 
  2037  0005                     	;# 
  2038  0006                     	;# 
  2039  0007                     	;# 
  2040  0008                     	;# 
  2041  0009                     	;# 
  2042  000A                     	;# 
  2043  000B                     	;# 
  2044  000C                     	;# 
  2045  000D                     	;# 
  2046  000E                     	;# 
  2047  0010                     	;# 
  2048  0011                     	;# 
  2049  0012                     	;# 
  2050  0015                     	;# 
  2051  0016                     	;# 
  2052  0016                     	;# 
  2053  0017                     	;# 
  2054  0018                     	;# 
  2055  0019                     	;# 
  2056  001A                     	;# 
  2057  001B                     	;# 
  2058  001C                     	;# 
  2059  008C                     	;# 
  2060  008D                     	;# 
  2061  008E                     	;# 
  2062  0090                     	;# 
  2063  0091                     	;# 
  2064  0092                     	;# 
  2065  0095                     	;# 
  2066  0096                     	;# 
  2067  0097                     	;# 
  2068  0099                     	;# 
  2069  009A                     	;# 
  2070  009B                     	;# 
  2071  009B                     	;# 
  2072  009C                     	;# 
  2073  009D                     	;# 
  2074  009E                     	;# 
  2075  010C                     	;# 
  2076  010D                     	;# 
  2077  010E                     	;# 
  2078  0116                     	;# 
  2079  0117                     	;# 
  2080  011D                     	;# 
  2081  018C                     	;# 
  2082  018D                     	;# 
  2083  018E                     	;# 
  2084  0191                     	;# 
  2085  0191                     	;# 
  2086  0192                     	;# 
  2087  0193                     	;# 
  2088  0193                     	;# 
  2089  0194                     	;# 
  2090  0195                     	;# 
  2091  0196                     	;# 
  2092  0197                     	;# 
  2093  0199                     	;# 
  2094  019A                     	;# 
  2095  019B                     	;# 
  2096  019B                     	;# 
  2097  019B                     	;# 
  2098  019B                     	;# 
  2099  019C                     	;# 
  2100  019C                     	;# 
  2101  019D                     	;# 
  2102  019E                     	;# 
  2103  019F                     	;# 
  2104  020D                     	;# 
  2105  0210                     	;# 
  2106  0211                     	;# 
  2107  0211                     	;# 
  2108  0212                     	;# 
  2109  0212                     	;# 
  2110  0213                     	;# 
  2111  0213                     	;# 
  2112  0214                     	;# 
  2113  0214                     	;# 
  2114  0215                     	;# 
  2115  0215                     	;# 
  2116  0215                     	;# 
  2117  0216                     	;# 
  2118  0216                     	;# 
  2119  0217                     	;# 
  2120  0217                     	;# 
  2121  0291                     	;# 
  2122  0291                     	;# 
  2123  0292                     	;# 
  2124  0293                     	;# 
  2125  0298                     	;# 
  2126  0298                     	;# 
  2127  0299                     	;# 
  2128  029A                     	;# 
  2129  0394                     	;# 
  2130  0395                     	;# 
  2131  0396                     	;# 
  2132  0FE4                     	;# 
  2133  0FE5                     	;# 
  2134  0FE6                     	;# 
  2135  0FE7                     	;# 
  2136  0FE8                     	;# 
  2137  0FE9                     	;# 
  2138  0FEA                     	;# 
  2139  0FEB                     	;# 
  2140  0FED                     	;# 
  2141  0FEE                     	;# 
  2142  0FEF                     	;# 
  2143                           
  2144                           	psect	idataBANK4
  2145  1280                     __pidataBANK4:	
  2146                           
  2147                           ;initializer for __product
  2148  1280  3463               	retlw	99
  2149  1281  3402               	retlw	2
  2150  1282  3400               	retlw	0
  2151  1283  3400               	retlw	0
  2152  1284  3400               	retlw	0
  2153  1285  3400               	retlw	0
  2154  1286  3400               	retlw	0
  2155  1287  3400               	retlw	0
  2156  1288  3400               	retlw	0
  2157  1289  3400               	retlw	0
  2158  128A  3400               	retlw	0
  2159  128B  3400               	retlw	0
  2160  128C  34FF               	retlw	255
  2161  128D  34FF               	retlw	255
  2162  128E  34FF               	retlw	255
  2163  128F  3400               	retlw	0
  2164  1290  3400               	retlw	0
  2165  1291  3400               	retlw	0
  2166  1292  3400               	retlw	0
  2167  1293  3400               	retlw	0
  2168  1294  3400               	retlw	0
  2169  1295  3400               	retlw	0
  2170  1296  3400               	retlw	0
  2171  1297  3400               	retlw	0
  2172  1298  3400               	retlw	0
  2173  1299  3400               	retlw	0
  2174  129A  3400               	retlw	0
  2175  129B  3400               	retlw	0
  2176  129C  3400               	retlw	0
  2177  129D  3400               	retlw	0
  2178  129E  3400               	retlw	0
  2179  129F  3400               	retlw	0
  2180                           
  2181                           	psect	stringtext
  2182  1000                     __pstringtext:	
  2183  1000                     _CC2500_registers_address:	
  2184  1000  3403               	retlw	3
  2185  1001  3416               	retlw	22
  2186  1002  3417               	retlw	23
  2187  1003  341E               	retlw	30
  2188  1004  341F               	retlw	31
  2189  1005  3420               	retlw	32
  2190  1006  342A               	retlw	42
  2191  1007  342B               	retlw	43
  2192  1008  340B               	retlw	11
  2193  1009  340C               	retlw	12
  2194  100A  340D               	retlw	13
  2195  100B  340E               	retlw	14
  2196  100C  340F               	retlw	15
  2197  100D  3410               	retlw	16
  2198  100E  3411               	retlw	17
  2199  100F  3412               	retlw	18
  2200  1010  3413               	retlw	19
  2201  1011  3414               	retlw	20
  2202  1012  340A               	retlw	10
  2203  1013  3415               	retlw	21
  2204  1014  3421               	retlw	33
  2205  1015  3422               	retlw	34
  2206  1016  3418               	retlw	24
  2207  1017  3419               	retlw	25
  2208  1018  341A               	retlw	26
  2209  1019  341B               	retlw	27
  2210  101A  341C               	retlw	28
  2211  101B  341D               	retlw	29
  2212  101C  3423               	retlw	35
  2213  101D  3424               	retlw	36
  2214  101E  3425               	retlw	37
  2215  101F  3426               	retlw	38
  2216  1020  3429               	retlw	41
  2217  1021  342C               	retlw	44
  2218  1022  342D               	retlw	45
  2219  1023  342E               	retlw	46
  2220  1024  3400               	retlw	0
  2221  1025  3401               	retlw	1
  2222  1026  3402               	retlw	2
  2223  1027  3407               	retlw	7
  2224  1028  3408               	retlw	8
  2225  1029  3409               	retlw	9
  2226  102A  3406               	retlw	6
  2227  102B  3404               	retlw	4
  2228  102C  3405               	retlw	5
  2229  102D  3427               	retlw	39
  2230  102E  3428               	retlw	40
  2231  102F                     __end_of_CC2500_registers_address:	
  2232  102F                     _CC2500_rfSettings:	
  2233  102F  3407               	retlw	7
  2234  1030  3407               	retlw	7
  2235  1031  3430               	retlw	48
  2236  1032  3487               	retlw	135
  2237  1033  346B               	retlw	107
  2238  1034  34F8               	retlw	248
  2239  1035  347F               	retlw	127
  2240  1036  343F               	retlw	63
  2241  1037  3409               	retlw	9
  2242  1038  3400               	retlw	0
  2243  1039  345C               	retlw	92
  2244  103A  34A7               	retlw	167
  2245  103B  3462               	retlw	98
  2246  103C  3486               	retlw	134
  2247  103D  3483               	retlw	131
  2248  103E  3403               	retlw	3
  2249  103F  3422               	retlw	34
  2250  1040  34F8               	retlw	248
  2251  1041  3400               	retlw	0
  2252  1042  3444               	retlw	68
  2253  1043  34B6               	retlw	182
  2254  1044  3410               	retlw	16
  2255  1045  3418               	retlw	24
  2256  1046  341D               	retlw	29
  2257  1047  341C               	retlw	28
  2258  1048  34C7               	retlw	199
  2259  1049  3400               	retlw	0
  2260  104A  34B2               	retlw	178
  2261  104B  34EA               	retlw	234
  2262  104C  340A               	retlw	10
  2263  104D  3400               	retlw	0
  2264  104E  3411               	retlw	17
  2265  104F  3459               	retlw	89
  2266  1050  3488               	retlw	136
  2267  1051  3431               	retlw	49
  2268  1052  340B               	retlw	11
  2269  1053  342F               	retlw	47
  2270  1054  342E               	retlw	46
  2271  1055  3406               	retlw	6
  2272  1056  3404               	retlw	4
  2273  1057  3405               	retlw	5
  2274  1058  3400               	retlw	0
  2275  1059  3430               	retlw	48
  2276  105A  34D3               	retlw	211
  2277  105B  3491               	retlw	145
  2278  105C  3441               	retlw	65
  2279  105D  3400               	retlw	0
  2280  105E                     __end_of_CC2500_rfSettings:	
  2281  105E                     _CC2500_patable_vaule:	
  2282  105E  34FE               	retlw	254
  2283  105F  34FE               	retlw	254
  2284  1060  34FE               	retlw	254
  2285  1061  34FE               	retlw	254
  2286  1062  34FE               	retlw	254
  2287  1063  34FE               	retlw	254
  2288  1064  34FE               	retlw	254
  2289  1065  34FE               	retlw	254
  2290  1066                     __end_of_CC2500_patable_vaule:	
  2291                           
  2292                           	psect	nvCOMMON
  2293  0079                     __pnvCOMMON:	
  2294  0079                     _product:	
  2295  0079                     	ds	1
  2296  000C                     _PORTA	set	12
  2297  000D                     _PORTB	set	13
  2298  000E                     _PORTC	set	14
  2299  0018                     _T1CON	set	24
  2300  0015                     _TMR0	set	21
  2301  0017                     _TMR1H	set	23
  2302  0016                     _TMR1L	set	22
  2303  005F                     _GIE	set	95
  2304  005B                     _IOCIE	set	91
  2305  0058                     _IOCIF	set	88
  2306  005E                     _PEIE	set	94
  2307  0060                     _RA0	set	96
  2308  0063                     _RA3	set	99
  2309  0064                     _RA4	set	100
  2310  0066                     _RA6	set	102
  2311  0067                     _RA7	set	103
  2312  0068                     _RB0	set	104
  2313  0069                     _RB1	set	105
  2314  006A                     _RB2	set	106
  2315  006B                     _RB3	set	107
  2316  006C                     _RB4	set	108
  2317  006D                     _RB5	set	109
  2318  0070                     _RC0	set	112
  2319  0071                     _RC1	set	113
  2320  0072                     _RC2	set	114
  2321  0074                     _RC4	set	116
  2322  0075                     _RC5	set	117
  2323  0077                     _RC7	set	119
  2324  0088                     _TMR1IF	set	136
  2325  009D                     _ADCON0	set	157
  2326  009E                     _ADCON1	set	158
  2327  009C                     _ADRESH	set	156
  2328  009B                     _ADRESL	set	155
  2329  0099                     _OSCCON	set	153
  2330  008C                     _TRISA	set	140
  2331  008D                     _TRISB	set	141
  2332  008E                     _TRISC	set	142
  2333  0097                     _WDTCON	set	151
  2334  04E9                     _GO_nDONE	set	1257
  2335  0488                     _TMR1IE	set	1160
  2336  0117                     _FVRCON	set	279
  2337  010C                     _LATA	set	268
  2338  010D                     _LATB	set	269
  2339  010E                     _LATC	set	270
  2340  018C                     _ANSELA	set	396
  2341  018D                     _ANSELB	set	397
  2342  018E                     _ANSELC	set	398
  2343  0192                     _PMADRH	set	402
  2344  0191                     _PMADRL	set	401
  2345  0196                     _PMCON2	set	406
  2346  0194                     _PMDATH	set	404
  2347  0193                     _PMDATL	set	403
  2348  0CAE                     _CFGS	set	3246
  2349  0CAC                     _FREE	set	3244
  2350  0CAD                     _LWLO	set	3245
  2351  0CA8                     _RD	set	3240
  2352  0CA9                     _WR	set	3241
  2353  0CAA                     _WREN	set	3242
  2354  1069                     _WPUB1	set	4201
  2355  106A                     _WPUB2	set	4202
  2356  0396                     _IOCBF	set	918
  2357  0395                     _IOCBN	set	917
  2358  0394                     _IOCBP	set	916
  2359  1CB2                     _IOCBF2	set	7346
  2360                           
  2361                           ; #config settings
  2362  0000                     
  2363                           	psect	cinit
  2364  0015                     start_initialization:	
  2365  0015                     __initialization:	
  2366                           
  2367                           ; Clear objects allocated to BITCOMMON
  2368  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2369                           
  2370                           ; Clear objects allocated to COMMON
  2371  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2372  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2373  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2374                           
  2375                           ; Clear objects allocated to BANK1
  2376  0019  30A0               	movlw	low __pbssBANK1
  2377  001A  0084               	movwf	4
  2378  001B  3000               	movlw	high __pbssBANK1
  2379  001C  0085               	movwf	5
  2380  001D  3048               	movlw	72
  2381  001E  3187  27FA  3180   	fcall	clear_ram0
  2382                           
  2383                           ; Clear objects allocated to BANK2
  2384  0021  3020               	movlw	low __pbssBANK2
  2385  0022  0084               	movwf	4
  2386  0023  3001               	movlw	high __pbssBANK2
  2387  0024  0085               	movwf	5
  2388  0025  3050               	movlw	80
  2389  0026  3187  27FA  3180   	fcall	clear_ram0
  2390                           
  2391                           ; Clear objects allocated to BANK3
  2392  0029  30A0               	movlw	low __pbssBANK3
  2393  002A  0084               	movwf	4
  2394  002B  3001               	movlw	high __pbssBANK3
  2395  002C  0085               	movwf	5
  2396  002D  3045               	movlw	69
  2397  002E  3187  27FA  3180   	fcall	clear_ram0
  2398                           
  2399                           ; Initialize objects allocated to BANK4
  2400  0031  3080               	movlw	low __pidataBANK4
  2401  0032  0084               	movwf	4
  2402  0033  3092               	movlw	(high __pidataBANK4)| (0+128)
  2403  0034  0085               	movwf	5
  2404  0035  3020               	movlw	low __pdataBANK4
  2405  0036  0086               	movwf	6
  2406  0037  3002               	movlw	high __pdataBANK4
  2407  0038  0087               	movwf	7
  2408  0039  3020               	movlw	32
  2409  003A  319E  2654         	fcall	init_ram
  2410  003C                     end_of_initialization:	
  2411                           ;End of C runtime variable initialization code
  2412                           
  2413  003C                     __end_of__initialization:	
  2414  003C  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2415  003D  0020               	movlb	0
  2416  003E  3197  2FAF         	ljmp	_main	;jump to C main() function
  2417                           
  2418                           	psect	bitbssCOMMON
  2419  03C0                     __pbitbssCOMMON:	
  2420  03C0                     _Receive_OK:	
  2421  03C0                     	ds	1
  2422  03C1                     _Transceive_OK:	
  2423  03C1                     	ds	1
  2424                           
  2425                           	psect	bssCOMMON
  2426  0075                     __pbssCOMMON:	
  2427  0075                     _DimmerLights:	
  2428  0075                     	ds	1
  2429  0076                     _DimmerLightsIntr:	
  2430  0076                     	ds	1
  2431  0077                     _Sw:	
  2432  0077                     	ds	1
  2433                           
  2434                           	psect	bssBANK1
  2435  00A0                     __pbssBANK1:	
  2436  00A0                     _myMain:	
  2437  00A0                     	ds	14
  2438  00AE                     _Buz1:	
  2439  00AE                     	ds	12
  2440  00BA                     _RF1:	
  2441  00BA                     	ds	12
  2442  00C6                     _WDT:	
  2443  00C6                     	ds	2
  2444  00C8                     _CRC:	
  2445  00C8                     	ds	1
  2446  00C9                     _DelayOff:	
  2447  00C9                     	ds	1
  2448  00CA                     _DimmerLights11:	
  2449  00CA                     	ds	1
  2450  00CB                     _DimmerLights22:	
  2451  00CB                     	ds	1
  2452  00CC                     _DimmerLightsIntrIOC:	
  2453  00CC                     	ds	1
  2454  00CD                     _LED:	
  2455  00CD                     	ds	1
  2456  00CE                     _RSSI:	
  2457  00CE                     	ds	1
  2458  00CF                     _Rx_Length:	
  2459  00CF                     	ds	1
  2460  00D0                     _SPI0Buffer:	
  2461  00D0                     	ds	1
  2462  00D1                     _SwDetect:	
  2463  00D1                     	ds	1
  2464  00D2                     _Tx_Length:	
  2465  00D2                     	ds	1
  2466  00D3                     _r_address:	
  2467  00D3                     	ds	1
  2468  00D4                     _r_data:	
  2469  00D4                     	ds	1
  2470  00D5                     _s_data:	
  2471  00D5                     	ds	1
  2472  00D6                     _Temp:	
  2473  00D6                     	ds	18
  2474                           
  2475                           	psect	bssBANK2
  2476  0120                     __pbssBANK2:	
  2477  0120                     _RF_Data:	
  2478  0120                     	ds	30
  2479  013E                     _Dimmer:	
  2480  013E                     	ds	3
  2481  0141                     _Timer1:	
  2482  0141                     	ds	3
  2483  0144                     _RF_Count:	
  2484  0144                     	ds	2
  2485  0146                     _DimmerLights1:	
  2486  0146                     	ds	17
  2487  0157                     _DimmerLights2:	
  2488  0157                     	ds	17
  2489  0168                     _VarErrLED:	
  2490  0168                     	ds	4
  2491  016C                     _VarLED1:	
  2492  016C                     	ds	4
  2493                           
  2494                           	psect	bssBANK3
  2495  01A0                     __pbssBANK3:	
  2496  01A0                     _Memory:	
  2497  01A0                     	ds	37
  2498  01C5                     _Sw1:	
  2499  01C5                     	ds	9
  2500  01CE                     _Sw2:	
  2501  01CE                     	ds	9
  2502  01D7                     _DlySw1:	
  2503  01D7                     	ds	5
  2504  01DC                     _DlySw2:	
  2505  01DC                     	ds	5
  2506  01E1                     _VarLED2:	
  2507  01E1                     	ds	4
  2508                           
  2509                           	psect	dataBANK4
  2510  0220                     __pdataBANK4:	
  2511  0220                     __product:	
  2512  0220                     	ds	32
  2513                           
  2514                           	psect	clrtext
  2515  07FA                     clear_ram0:	
  2516                           ;	Called with FSR0 containing the base address, and
  2517                           ;	WREG with the size to clear
  2518                           
  2519  07FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2520  07FB                     clrloop0:	
  2521  07FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2522  07FC  3101               	addfsr 0,1
  2523  07FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2524  07FE  2FFB               	goto	clrloop0	;have we reached the end yet?
  2525  07FF  3400               	retlw	0	;all done for this memory range, return
  2526                           
  2527                           	psect	inittext
  2528  1E54                     init_ram:	
  2529  1E54  00FE               	movwf	126
  2530  1E55                     initloop:	
  2531  1E55  0012               	moviw fsr0++
  2532  1E56  001E               	movwi fsr1++
  2533  1E57  0BFE               	decfsz	126,f
  2534  1E58  2E55               	goto	initloop
  2535  1E59  3400               	retlw	0
  2536                           
  2537                           	psect	cstackBANK3
  2538  01E5                     __pcstackBANK3:	
  2539  01E5                     setRF_Main@loop_f:	
  2540                           
  2541                           ; 1 bytes @ 0x0
  2542  01E5                     	ds	1
  2543  01E6                     setRF_Main@Receive_OK:	
  2544                           
  2545                           ; 1 bytes @ 0x1
  2546  01E6                     	ds	1
  2547  01E7                     setRF_Main@error:	
  2548                           
  2549                           ; 1 bytes @ 0x2
  2550  01E7                     	ds	1
  2551  01E8                     ?_main:	
  2552  01E8                     main@argc:	
  2553                           ; 2 bytes @ 0x3
  2554                           
  2555                           
  2556                           ; 2 bytes @ 0x3
  2557  01E8                     	ds	2
  2558  01EA                     main@argv:	
  2559                           
  2560                           ; 2 bytes @ 0x5
  2561  01EA                     	ds	2
  2562                           
  2563                           	psect	cstackBANK1
  2564  00E8                     __pcstackBANK1:	
  2565  00E8                     setDimmerLights_ErrorClose@count:	
  2566  00E8                     Exception_Main@count:	
  2567                           ; 1 bytes @ 0x0
  2568                           
  2569                           
  2570                           ; 1 bytes @ 0x0
  2571  00E8                     	ds	1
  2572  00E9                     setDimmerLights_ErrorClose@lights:	
  2573  00E9                     Exception_Main@error:	
  2574                           ; 1 bytes @ 0x1
  2575                           
  2576                           
  2577                           ; 1 bytes @ 0x1
  2578  00E9                     	ds	1
  2579  00EA                     Exception_Main@lights:	
  2580  00EA                     setDimmerLights_ErrorClose@i:	
  2581                           ; 1 bytes @ 0x2
  2582                           
  2583                           
  2584                           ; 2 bytes @ 0x2
  2585  00EA                     	ds	1
  2586  00EB                     Exception_Main@i:	
  2587                           
  2588                           ; 2 bytes @ 0x3
  2589  00EB                     	ds	1
  2590  00EC                     getRxData@error:	
  2591                           
  2592                           ; 1 bytes @ 0x4
  2593  00EC                     	ds	1
  2594  00ED                     ??_setRF_Main:	
  2595                           
  2596                           ; 0 bytes @ 0x5
  2597  00ED                     	ds	1
  2598                           
  2599                           	psect	cstackCOMMON
  2600  0070                     __pcstackCOMMON:	
  2601  0070                     ?_Timeout_Counter:	
  2602  0070                     ?_set_TimeoutCleared:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_WriteByte:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_WriteCommand:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_ReadStatus:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_ReadByte:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_PowerRST:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_InitSetREG:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_InitPATable:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_ClearTXFIFO:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_ClearRXFIFO:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_FrequencyCabr:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_SIDLEMode:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_DlyOff_Initialization:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_DlyOff_Main:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setDimmerLights_ErrorClose:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setDimmerLights_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setDimmerLights_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_Line:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setTxData:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setLED_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setLED_Main:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Fosc_Set:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_IO_Set:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_TMR1_Set:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_ADC_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_IOC_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_WDT_Set:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_IOC_ISR:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_TMR1_ISR:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_Flash_Memory_Write:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_Flash_Memory_Modify:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_WDT_Clearing:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_myMain_Initialization:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_Temp_Initialization:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Switch_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_RF_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_getTemp_AD:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_my_MainTimer:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Temp_Main:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Switch_Main:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_RF_Main:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_Exception_Main:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setTemp_Initialization:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setTemp_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setRF_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_setRF_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_RF_RxDisable:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_getRxData:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setLog_Code:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setControl_Lights_Table:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setRFSW_Control:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setRFSW_AdjControl:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setRF_DimmerValue:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setSw_Initialization:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_setSw_Main:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_Buzzer_Initialization:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_Buzzer_Main:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_CC2500_TxData:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_CC2500_RxData:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_CC2500_PowerOnInitial:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_DelayOffPointSelect:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_DelayOff_Initialization:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_DelayOff_Main:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DimmerIntrIOCPointSelect:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ??_DimmerIntrIOCPointSelect:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_DimmerIntrPointSelect:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ??_DimmerIntrPointSelect:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setDimmerLights_IntrControl:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DimmerLightsPointSelect:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DimmerLights_Initialization:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_setDimmerLights_SwOn:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_setDimmerLights_SwOff:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_setDimmerLights_AdjOn:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerLights_Main:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_setDimmerLights_AdjRF:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_LedPointSelect:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_LED_Initialization:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_LED_Main:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_Mcu_Initialization:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_ISR:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_setDimmerReClock:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_Flash_Memory_Initialization:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_Flash_Memory_Main:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_Flash_Memory_Unlock:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_Flash_Memory_Erasing:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_setMemory_Modify:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_setMemory_LoopSave:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_WDT_Main:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_setRF_Learn:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_TouchPower:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_SwPointSelect:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_DelayTimejudge:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_setPercentValue:	
  2882                           ; 1 bytes @ 0x0
  2883                           
  2884  0070                     ?_getPercentValue:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_Flash_Memory_Read:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_getMain_LightsStatus:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getRF_KeyStatus:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getSw_KeyStatus:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDelayOff_GO:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getDimmerLights_Line:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getDimmerLights_Status:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getMain_All_Error_Status:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911                           
  2912                           ; 1 bytes @ 0x0
  2913  0070                     	ds	1
  2914  0071                     DimmerIntrIOCPointSelect@lights:	
  2915  0071                     DimmerIntrPointSelect@lights:	
  2916                           ; 1 bytes @ 0x1
  2917                           
  2918                           
  2919                           ; 1 bytes @ 0x1
  2920  0071                     	ds	1
  2921  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2922  0072                     ??_setDimmerLights_IntrControl:	
  2923                           ; 0 bytes @ 0x2
  2924                           
  2925  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2926                           ; 0 bytes @ 0x2
  2927                           
  2928                           
  2929                           ; 1 bytes @ 0x2
  2930  0072                     	ds	1
  2931  0073                     ??_IOC_ISR:	
  2932  0073                     ??_setDimmerReClock:	
  2933                           ; 0 bytes @ 0x3
  2934                           
  2935  0073                     setDimmerLights_IntrControl@lights:	
  2936                           ; 0 bytes @ 0x3
  2937                           
  2938                           
  2939                           ; 1 bytes @ 0x3
  2940  0073                     	ds	1
  2941  0074                     ??_TMR1_ISR:	
  2942  0074                     ??_ISR:	
  2943                           ; 0 bytes @ 0x4
  2944                           
  2945                           
  2946                           ; 0 bytes @ 0x4
  2947  0074                     	ds	1
  2948                           
  2949                           	psect	cstackBANK0
  2950  0020                     __pcstackBANK0:	
  2951  0020                     ??_Timeout_Counter:	
  2952  0020                     ??_set_TimeoutCleared:	
  2953                           ; 0 bytes @ 0x0
  2954                           
  2955  0020                     ??_CC2500_WriteByte:	
  2956                           ; 0 bytes @ 0x0
  2957                           
  2958  0020                     ??_CC2500_ReadByte:	
  2959                           ; 0 bytes @ 0x0
  2960                           
  2961  0020                     ?_DelayTime_1us:	
  2962                           ; 0 bytes @ 0x0
  2963                           
  2964  0020                     ??_setDimmerLights_Line:	
  2965                           ; 0 bytes @ 0x0
  2966                           
  2967  0020                     ??_setTxData:	
  2968                           ; 0 bytes @ 0x0
  2969                           
  2970  0020                     ??_Fosc_Set:	
  2971                           ; 0 bytes @ 0x0
  2972                           
  2973  0020                     ??_IO_Set:	
  2974                           ; 0 bytes @ 0x0
  2975                           
  2976  0020                     ??_TMR1_Set:	
  2977                           ; 0 bytes @ 0x0
  2978                           
  2979  0020                     ??_ADC_Set:	
  2980                           ; 0 bytes @ 0x0
  2981                           
  2982  0020                     ??_IOC_Set:	
  2983                           ; 0 bytes @ 0x0
  2984                           
  2985  0020                     ??_WDT_Set:	
  2986                           ; 0 bytes @ 0x0
  2987                           
  2988  0020                     ??_Flash_Memory_Read:	
  2989                           ; 0 bytes @ 0x0
  2990                           
  2991  0020                     ?_setMemory_Data:	
  2992                           ; 0 bytes @ 0x0
  2993                           
  2994  0020                     ??_Flash_Memory_Write:	
  2995                           ; 0 bytes @ 0x0
  2996                           
  2997  0020                     ??_WDT_Clearing:	
  2998                           ; 0 bytes @ 0x0
  2999                           
  3000  0020                     ??_myMain_Initialization:	
  3001                           ; 0 bytes @ 0x0
  3002                           
  3003  0020                     ??_Temp_Initialization:	
  3004                           ; 0 bytes @ 0x0
  3005                           
  3006  0020                     ??_setTemp_Initialization:	
  3007                           ; 0 bytes @ 0x0
  3008                           
  3009  0020                     ??_setRF_Initialization:	
  3010                           ; 0 bytes @ 0x0
  3011                           
  3012  0020                     ??_getRF_KeyStatus:	
  3013                           ; 0 bytes @ 0x0
  3014                           
  3015  0020                     ??_getSw_KeyStatus:	
  3016                           ; 0 bytes @ 0x0
  3017                           
  3018  0020                     ??_Buzzer_Initialization:	
  3019                           ; 0 bytes @ 0x0
  3020                           
  3021  0020                     ??_Buzzer_Main:	
  3022                           ; 0 bytes @ 0x0
  3023                           
  3024  0020                     ??_DelayOffPointSelect:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_DimmerLightsPointSelect:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_getDimmerLights_Line:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ??_LedPointSelect:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_Flash_Memory_Unlock:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_Flash_Memory_Erasing:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_setMemory_Modify:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_setMemory_LoopSave:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_WDT_Main:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_getMain_All_Error_Status:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_setRF_Learn:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ??_TouchPower:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_SwPointSelect:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ?___bmul:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ?_getBuz_GO:	
  3067                           ; 1 bytes @ 0x0
  3068                           
  3069  0020                     ?_getAD:	
  3070                           ; 2 bytes @ 0x0
  3071                           
  3072  0020                     ?___awdiv:	
  3073                           ; 2 bytes @ 0x0
  3074                           
  3075  0020                     ?___ftpack:	
  3076                           ; 2 bytes @ 0x0
  3077                           
  3078  0020                     setDimmerLights_Line@lights:	
  3079                           ; 3 bytes @ 0x0
  3080                           
  3081  0020                     getAD@adcon1:	
  3082                           ; 1 bytes @ 0x0
  3083                           
  3084  0020                     setMemory_Data@data:	
  3085                           ; 1 bytes @ 0x0
  3086                           
  3087  0020                     ___bmul@multiplicand:	
  3088                           ; 1 bytes @ 0x0
  3089                           
  3090  0020                     DelayTime_1us@count:	
  3091                           ; 1 bytes @ 0x0
  3092                           
  3093  0020                     ___awdiv@divisor:	
  3094                           ; 2 bytes @ 0x0
  3095                           
  3096  0020                     ___ftpack@arg:	
  3097                           ; 2 bytes @ 0x0
  3098                           
  3099                           
  3100                           ; 3 bytes @ 0x0
  3101  0020                     	ds	1
  3102  0021                     ??_setMemory_Data:	
  3103  0021                     ??_RF_Initialization:	
  3104                           ; 0 bytes @ 0x1
  3105                           
  3106  0021                     ??_Mcu_Initialization:	
  3107                           ; 0 bytes @ 0x1
  3108                           
  3109  0021                     ??___bmul:	
  3110                           ; 0 bytes @ 0x1
  3111                           
  3112  0021                     CC2500_WriteByte@loop_a:	
  3113                           ; 0 bytes @ 0x1
  3114                           
  3115  0021                     CC2500_ReadByte@loop_b:	
  3116                           ; 1 bytes @ 0x1
  3117                           
  3118  0021                     DelayOffPointSelect@sw:	
  3119                           ; 1 bytes @ 0x1
  3120                           
  3121  0021                     DimmerLightsPointSelect@lights:	
  3122                           ; 1 bytes @ 0x1
  3123                           
  3124  0021                     getDimmerLights_Line@line:	
  3125                           ; 1 bytes @ 0x1
  3126                           
  3127  0021                     LedPointSelect@led:	
  3128                           ; 1 bytes @ 0x1
  3129                           
  3130  0021                     Flash_Memory_Read@i:	
  3131                           ; 1 bytes @ 0x1
  3132                           
  3133  0021                     Flash_Memory_Write@i:	
  3134                           ; 1 bytes @ 0x1
  3135                           
  3136  0021                     setMemory_Modify@command:	
  3137                           ; 1 bytes @ 0x1
  3138                           
  3139  0021                     setMemory_LoopSave@command:	
  3140                           ; 1 bytes @ 0x1
  3141                           
  3142  0021                     getMain_All_Error_Status@command:	
  3143                           ; 1 bytes @ 0x1
  3144                           
  3145  0021                     setRF_Learn@command:	
  3146                           ; 1 bytes @ 0x1
  3147                           
  3148  0021                     getRF_KeyStatus@key:	
  3149                           ; 1 bytes @ 0x1
  3150                           
  3151  0021                     SwPointSelect@sw:	
  3152                           ; 1 bytes @ 0x1
  3153                           
  3154  0021                     _getSw_KeyStatus$5666:	
  3155                           ; 1 bytes @ 0x1
  3156                           
  3157                           
  3158                           ; 1 bytes @ 0x1
  3159  0021                     	ds	1
  3160  0022                     ??_CC2500_WriteCommand:	
  3161  0022                     ??_CC2500_ReadStatus:	
  3162                           ; 0 bytes @ 0x2
  3163                           
  3164  0022                     ??_DelayTime_1us:	
  3165                           ; 0 bytes @ 0x2
  3166                           
  3167  0022                     ?_CC2500_WriteREG:	
  3168                           ; 0 bytes @ 0x2
  3169                           
  3170  0022                     ??_DlyOff_Initialization:	
  3171                           ; 0 bytes @ 0x2
  3172                           
  3173  0022                     ??_setDimmerLights_Initialization:	
  3174                           ; 0 bytes @ 0x2
  3175                           
  3176  0022                     ?_setLED:	
  3177                           ; 0 bytes @ 0x2
  3178                           
  3179  0022                     ??_setLED_Main:	
  3180                           ; 0 bytes @ 0x2
  3181                           
  3182  0022                     ??_getBuz_GO:	
  3183                           ; 0 bytes @ 0x2
  3184                           
  3185  0022                     ??_getDelayOff_GO:	
  3186                           ; 0 bytes @ 0x2
  3187                           
  3188  0022                     ??_setDimmerLights_AdjOn:	
  3189                           ; 0 bytes @ 0x2
  3190                           
  3191  0022                     ??_getDimmerLights_Status:	
  3192                           ; 0 bytes @ 0x2
  3193                           
  3194  0022                     CC2500_WriteREG@value:	
  3195                           ; 0 bytes @ 0x2
  3196                           
  3197  0022                     DlyOff_Initialization@sw:	
  3198                           ; 1 bytes @ 0x2
  3199                           
  3200  0022                     getDelayOff_GO@sw:	
  3201                           ; 1 bytes @ 0x2
  3202                           
  3203  0022                     setDimmerLights_AdjOn@sw:	
  3204                           ; 1 bytes @ 0x2
  3205                           
  3206  0022                     getDimmerLights_Status@lights:	
  3207                           ; 1 bytes @ 0x2
  3208                           
  3209  0022                     setLED@command:	
  3210                           ; 1 bytes @ 0x2
  3211                           
  3212  0022                     Flash_Memory_Read@address:	
  3213                           ; 1 bytes @ 0x2
  3214                           
  3215  0022                     setMemory_Data@address:	
  3216                           ; 1 bytes @ 0x2
  3217                           
  3218  0022                     _getRF_KeyStatus$4770:	
  3219                           ; 1 bytes @ 0x2
  3220                           
  3221  0022                     _getSw_KeyStatus$5667:	
  3222                           ; 1 bytes @ 0x2
  3223                           
  3224  0022                     ___bmul@product:	
  3225                           ; 1 bytes @ 0x2
  3226                           
  3227  0022                     DelayTime_1us@i:	
  3228                           ; 1 bytes @ 0x2
  3229                           
  3230  0022                     _getMain_All_Error_Status$3302:	
  3231                           ; 2 bytes @ 0x2
  3232                           
  3233  0022                     ___awdiv@dividend:	
  3234                           ; 2 bytes @ 0x2
  3235                           
  3236                           
  3237                           ; 2 bytes @ 0x2
  3238  0022                     	ds	1
  3239  0023                     ??_CC2500_WriteREG:	
  3240  0023                     ??_setLED:	
  3241                           ; 0 bytes @ 0x3
  3242                           
  3243  0023                     ??_DelayOff_Initialization:	
  3244                           ; 0 bytes @ 0x3
  3245                           
  3246  0023                     ??_getAD:	
  3247                           ; 0 bytes @ 0x3
  3248                           
  3249  0023                     CC2500_WriteCommand@command:	
  3250                           ; 0 bytes @ 0x3
  3251                           
  3252  0023                     CC2500_ReadStatus@status_addr:	
  3253                           ; 1 bytes @ 0x3
  3254                           
  3255  0023                     getDelayOff_GO@go:	
  3256                           ; 1 bytes @ 0x3
  3257                           
  3258  0023                     setDimmerLights_Initialization@lights:	
  3259                           ; 1 bytes @ 0x3
  3260                           
  3261  0023                     setDimmerLights_AdjOn@idle:	
  3262                           ; 1 bytes @ 0x3
  3263                           
  3264  0023                     getDimmerLights_Status@status:	
  3265                           ; 1 bytes @ 0x3
  3266                           
  3267  0023                     setLED@led:	
  3268                           ; 1 bytes @ 0x3
  3269                           
  3270  0023                     getAD@adcon0:	
  3271                           ; 1 bytes @ 0x3
  3272                           
  3273  0023                     Flash_Memory_Read@ret:	
  3274                           ; 1 bytes @ 0x3
  3275                           
  3276  0023                     getSw_KeyStatus@status:	
  3277                           ; 1 bytes @ 0x3
  3278                           
  3279  0023                     ___bmul@multiplier:	
  3280                           ; 1 bytes @ 0x3
  3281                           
  3282  0023                     ___ftpack@exp:	
  3283                           ; 1 bytes @ 0x3
  3284                           
  3285                           
  3286                           ; 1 bytes @ 0x3
  3287  0023                     	ds	1
  3288  0024                     ??_CC2500_ClearTXFIFO:	
  3289  0024                     ??_CC2500_ClearRXFIFO:	
  3290                           ; 0 bytes @ 0x4
  3291                           
  3292  0024                     ??_CC2500_SIDLEMode:	
  3293                           ; 0 bytes @ 0x4
  3294                           
  3295  0024                     ??_DelayTimejudge:	
  3296                           ; 0 bytes @ 0x4
  3297                           
  3298  0024                     ??_setLED_Initialization:	
  3299                           ; 0 bytes @ 0x4
  3300                           
  3301  0024                     ??_getMain_LightsStatus:	
  3302                           ; 0 bytes @ 0x4
  3303                           
  3304  0024                     ??_Flash_Memory_Modify:	
  3305                           ; 0 bytes @ 0x4
  3306                           
  3307  0024                     ??_getTemp_AD:	
  3308                           ; 0 bytes @ 0x4
  3309                           
  3310  0024                     ??_RF_RxDisable:	
  3311                           ; 0 bytes @ 0x4
  3312                           
  3313  0024                     ??_setSw_Initialization:	
  3314                           ; 0 bytes @ 0x4
  3315                           
  3316  0024                     ??_CC2500_TxData:	
  3317                           ; 0 bytes @ 0x4
  3318                           
  3319  0024                     ??_CC2500_RxData:	
  3320                           ; 0 bytes @ 0x4
  3321                           
  3322  0024                     ??_DimmerLights_Initialization:	
  3323                           ; 0 bytes @ 0x4
  3324                           
  3325  0024                     ??___awdiv:	
  3326                           ; 0 bytes @ 0x4
  3327                           
  3328  0024                     CC2500_WriteREG@w_addr:	
  3329                           ; 0 bytes @ 0x4
  3330                           
  3331  0024                     setLED_Initialization@led:	
  3332                           ; 1 bytes @ 0x4
  3333                           
  3334  0024                     setLED_Main@led:	
  3335                           ; 1 bytes @ 0x4
  3336                           
  3337  0024                     getMain_All_Error_Status@status:	
  3338                           ; 1 bytes @ 0x4
  3339                           
  3340  0024                     setSw_Initialization@sw:	
  3341                           ; 1 bytes @ 0x4
  3342                           
  3343  0024                     getSw_KeyStatus@sw:	
  3344                           ; 1 bytes @ 0x4
  3345                           
  3346  0024                     ___ftpack@sign:	
  3347                           ; 1 bytes @ 0x4
  3348                           
  3349  0024                     getBuz_GO@i:	
  3350                           ; 1 bytes @ 0x4
  3351                           
  3352  0024                     DelayTime_1us@j:	
  3353                           ; 2 bytes @ 0x4
  3354                           
  3355                           
  3356                           ; 2 bytes @ 0x4
  3357  0024                     	ds	1
  3358  0025                     ??_CC2500_InitSetREG:	
  3359  0025                     ??_CC2500_InitPATable:	
  3360                           ; 0 bytes @ 0x5
  3361                           
  3362  0025                     ??_Switch_Initialization:	
  3363                           ; 0 bytes @ 0x5
  3364                           
  3365  0025                     ??___ftpack:	
  3366                           ; 0 bytes @ 0x5
  3367                           
  3368  0025                     ??_LED_Initialization:	
  3369                           ; 0 bytes @ 0x5
  3370                           
  3371  0025                     ??_LED_Main:	
  3372                           ; 0 bytes @ 0x5
  3373                           
  3374  0025                     CC2500_TxData@loop_e:	
  3375                           ; 0 bytes @ 0x5
  3376                           
  3377  0025                     CC2500_RxData@loop_f:	
  3378                           ; 1 bytes @ 0x5
  3379                           
  3380  0025                     Flash_Memory_Modify@i:	
  3381                           ; 1 bytes @ 0x5
  3382                           
  3383  0025                     getMain_LightsStatus@count:	
  3384                           ; 1 bytes @ 0x5
  3385                           
  3386  0025                     getTemp_AD@channel:	
  3387                           ; 1 bytes @ 0x5
  3388                           
  3389  0025                     ___awdiv@counter:	
  3390                           ; 1 bytes @ 0x5
  3391                           
  3392                           
  3393                           ; 1 bytes @ 0x5
  3394  0025                     	ds	1
  3395  0026                     ??_CC2500_PowerRST:	
  3396  0026                     ??_CC2500_FrequencyCabr:	
  3397                           ; 0 bytes @ 0x6
  3398                           
  3399  0026                     CC2500_InitSetREG@temp1:	
  3400                           ; 0 bytes @ 0x6
  3401                           
  3402  0026                     CC2500_InitPATable@temp:	
  3403                           ; 1 bytes @ 0x6
  3404                           
  3405  0026                     DelayTimejudge@i:	
  3406                           ; 1 bytes @ 0x6
  3407                           
  3408  0026                     ___awdiv@sign:	
  3409                           ; 1 bytes @ 0x6
  3410                           
  3411  0026                     getMain_LightsStatus@i:	
  3412                           ; 1 bytes @ 0x6
  3413                           
  3414                           
  3415                           ; 2 bytes @ 0x6
  3416  0026                     	ds	1
  3417  0027                     CC2500_InitSetREG@temp2:	
  3418  0027                     CC2500_InitPATable@loop_d:	
  3419                           ; 1 bytes @ 0x7
  3420                           
  3421  0027                     DelayTimejudge@j:	
  3422                           ; 1 bytes @ 0x7
  3423                           
  3424  0027                     ___awdiv@quotient:	
  3425                           ; 1 bytes @ 0x7
  3426                           
  3427                           
  3428                           ; 2 bytes @ 0x7
  3429  0027                     	ds	1
  3430  0028                     ?___awtoft:	
  3431  0028                     CC2500_InitSetREG@loop_c:	
  3432                           ; 3 bytes @ 0x8
  3433                           
  3434  0028                     DelayTimejudge@k:	
  3435                           ; 1 bytes @ 0x8
  3436                           
  3437  0028                     getMain_LightsStatus@status:	
  3438                           ; 1 bytes @ 0x8
  3439                           
  3440  0028                     ___awtoft@c:	
  3441                           ; 1 bytes @ 0x8
  3442                           
  3443                           
  3444                           ; 2 bytes @ 0x8
  3445  0028                     	ds	1
  3446  0029                     ?_setBuz:	
  3447  0029                     ??_CC2500_PowerOnInitial:	
  3448                           ; 0 bytes @ 0x9
  3449                           
  3450  0029                     ??_Flash_Memory_Main:	
  3451                           ; 0 bytes @ 0x9
  3452                           
  3453  0029                     DelayTimejudge@value:	
  3454                           ; 0 bytes @ 0x9
  3455                           
  3456  0029                     setBuz@time:	
  3457                           ; 1 bytes @ 0x9
  3458                           
  3459                           
  3460                           ; 2 bytes @ 0x9
  3461  0029                     	ds	2
  3462  002B                     ??_setBuz:	
  3463  002B                     ??___awtoft:	
  3464                           ; 0 bytes @ 0xB
  3465                           
  3466                           
  3467                           ; 0 bytes @ 0xB
  3468  002B                     	ds	1
  3469  002C                     setBuz@count:	
  3470                           
  3471                           ; 1 bytes @ 0xC
  3472  002C                     	ds	1
  3473  002D                     ??_my_MainTimer:	
  3474  002D                     ??_setDimmerLights_SwOn:	
  3475                           ; 0 bytes @ 0xD
  3476                           
  3477  002D                     setDimmerLights_SwOn@sw:	
  3478                           ; 0 bytes @ 0xD
  3479                           
  3480  002D                     ___awtoft@sign:	
  3481                           ; 1 bytes @ 0xD
  3482                           
  3483                           
  3484                           ; 1 bytes @ 0xD
  3485  002D                     	ds	1
  3486  002E                     ?___ftdiv:	
  3487  002E                     ?___ftmul:	
  3488                           ; 3 bytes @ 0xE
  3489                           
  3490  002E                     setDimmerLights_SwOn@idle:	
  3491                           ; 3 bytes @ 0xE
  3492                           
  3493  002E                     ___ftdiv@f2:	
  3494                           ; 1 bytes @ 0xE
  3495                           
  3496  002E                     ___ftmul@f1:	
  3497                           ; 3 bytes @ 0xE
  3498                           
  3499                           
  3500                           ; 3 bytes @ 0xE
  3501  002E                     	ds	3
  3502  0031                     ___ftdiv@f1:	
  3503  0031                     ___ftmul@f2:	
  3504                           ; 3 bytes @ 0x11
  3505                           
  3506                           
  3507                           ; 3 bytes @ 0x11
  3508  0031                     	ds	3
  3509  0034                     ??___ftdiv:	
  3510  0034                     ??___ftmul:	
  3511                           ; 0 bytes @ 0x14
  3512                           
  3513                           
  3514                           ; 0 bytes @ 0x14
  3515  0034                     	ds	4
  3516  0038                     ___ftdiv@cntr:	
  3517  0038                     ___ftmul@exp:	
  3518                           ; 1 bytes @ 0x18
  3519                           
  3520                           
  3521                           ; 1 bytes @ 0x18
  3522  0038                     	ds	1
  3523  0039                     ___ftdiv@f3:	
  3524  0039                     ___ftmul@f3_as_product:	
  3525                           ; 3 bytes @ 0x19
  3526                           
  3527                           
  3528                           ; 3 bytes @ 0x19
  3529  0039                     	ds	3
  3530  003C                     ___ftdiv@exp:	
  3531  003C                     ___ftmul@cntr:	
  3532                           ; 1 bytes @ 0x1C
  3533                           
  3534                           
  3535                           ; 1 bytes @ 0x1C
  3536  003C                     	ds	1
  3537  003D                     ___ftdiv@sign:	
  3538  003D                     ___ftmul@sign:	
  3539                           ; 1 bytes @ 0x1D
  3540                           
  3541                           
  3542                           ; 1 bytes @ 0x1D
  3543  003D                     	ds	1
  3544  003E                     ?___ftneg:	
  3545  003E                     ___ftneg@f1:	
  3546                           ; 3 bytes @ 0x1E
  3547                           
  3548                           
  3549                           ; 3 bytes @ 0x1E
  3550  003E                     	ds	3
  3551  0041                     ??___ftneg:	
  3552  0041                     ?___ftadd:	
  3553                           ; 0 bytes @ 0x21
  3554                           
  3555  0041                     ___ftadd@f1:	
  3556                           ; 3 bytes @ 0x21
  3557                           
  3558                           
  3559                           ; 3 bytes @ 0x21
  3560  0041                     	ds	3
  3561  0044                     ___ftadd@f2:	
  3562                           
  3563                           ; 3 bytes @ 0x24
  3564  0044                     	ds	3
  3565  0047                     ??___ftadd:	
  3566                           
  3567                           ; 0 bytes @ 0x27
  3568  0047                     	ds	4
  3569  004B                     ___ftadd@sign:	
  3570                           
  3571                           ; 1 bytes @ 0x2B
  3572  004B                     	ds	1
  3573  004C                     ___ftadd@exp2:	
  3574                           
  3575                           ; 1 bytes @ 0x2C
  3576  004C                     	ds	1
  3577  004D                     ___ftadd@exp1:	
  3578                           
  3579                           ; 1 bytes @ 0x2D
  3580  004D                     	ds	1
  3581  004E                     ?___fttol:	
  3582  004E                     ___fttol@f1:	
  3583                           ; 4 bytes @ 0x2E
  3584                           
  3585                           
  3586                           ; 3 bytes @ 0x2E
  3587  004E                     	ds	4
  3588  0052                     ??___fttol:	
  3589                           
  3590                           ; 0 bytes @ 0x32
  3591  0052                     	ds	4
  3592  0056                     ___fttol@sign1:	
  3593                           
  3594                           ; 1 bytes @ 0x36
  3595  0056                     	ds	1
  3596  0057                     ___fttol@lval:	
  3597                           
  3598                           ; 4 bytes @ 0x37
  3599  0057                     	ds	4
  3600  005B                     ___fttol@exp1:	
  3601                           
  3602                           ; 1 bytes @ 0x3B
  3603  005B                     	ds	1
  3604  005C                     ??_setPercentValue:	
  3605  005C                     ??_getPercentValue:	
  3606                           ; 0 bytes @ 0x3C
  3607                           
  3608                           
  3609                           ; 0 bytes @ 0x3C
  3610  005C                     	ds	2
  3611  005E                     getPercentValue@value:	
  3612  005E                     setPercentValue@value:	
  3613                           ; 1 bytes @ 0x3E
  3614                           
  3615                           
  3616                           ; 1 bytes @ 0x3E
  3617  005E                     	ds	1
  3618  005F                     getPercentValue@i:	
  3619  005F                     setPercentValue@i:	
  3620                           ; 3 bytes @ 0x3F
  3621                           
  3622                           
  3623                           ; 3 bytes @ 0x3F
  3624  005F                     	ds	3
  3625  0062                     ?_setProductData:	
  3626  0062                     ??_setDimmerLights_AdjRF:	
  3627                           ; 0 bytes @ 0x42
  3628                           
  3629  0062                     ??_Flash_Memory_Initialization:	
  3630                           ; 0 bytes @ 0x42
  3631                           
  3632  0062                     setProductData@value:	
  3633                           ; 0 bytes @ 0x42
  3634                           
  3635                           
  3636                           ; 1 bytes @ 0x42
  3637  0062                     	ds	1
  3638  0063                     ??_setProductData:	
  3639  0063                     setDimmerLights_AdjRF@lights:	
  3640                           ; 0 bytes @ 0x43
  3641                           
  3642  0063                     Flash_Memory_Initialization@i:	
  3643                           ; 1 bytes @ 0x43
  3644                           
  3645                           
  3646                           ; 1 bytes @ 0x43
  3647  0063                     	ds	2
  3648  0065                     setProductData@address:	
  3649                           
  3650                           ; 1 bytes @ 0x45
  3651  0065                     	ds	1
  3652  0066                     ?_setRF_DimmerLights:	
  3653  0066                     ??_setTemp_Main:	
  3654                           ; 0 bytes @ 0x46
  3655                           
  3656  0066                     ??_setLog_Code:	
  3657                           ; 0 bytes @ 0x46
  3658                           
  3659  0066                     ??_setRF_DimmerValue:	
  3660                           ; 0 bytes @ 0x46
  3661                           
  3662  0066                     ?_setDelayOff_GO:	
  3663                           ; 0 bytes @ 0x46
  3664                           
  3665  0066                     setDelayOff_GO@command:	
  3666                           ; 0 bytes @ 0x46
  3667                           
  3668  0066                     setRF_DimmerLights@on:	
  3669                           ; 1 bytes @ 0x46
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0x46
  3673  0066                     	ds	1
  3674  0067                     ??_setRF_DimmerLights:	
  3675  0067                     setDelayOff_GO@value:	
  3676                           ; 0 bytes @ 0x47
  3677                           
  3678  0067                     setRF_DimmerValue@lights:	
  3679                           ; 1 bytes @ 0x47
  3680                           
  3681                           
  3682                           ; 1 bytes @ 0x47
  3683  0067                     	ds	1
  3684  0068                     ??_setRFSW_AdjControl:	
  3685  0068                     ??_setDelayOff_GO:	
  3686                           ; 0 bytes @ 0x48
  3687                           
  3688  0068                     setTemp_Main@error:	
  3689                           ; 0 bytes @ 0x48
  3690                           
  3691                           
  3692                           ; 1 bytes @ 0x48
  3693  0068                     	ds	1
  3694  0069                     ??_Temp_Main:	
  3695  0069                     setDelayOff_GO@sw:	
  3696                           ; 0 bytes @ 0x49
  3697                           
  3698  0069                     setRF_DimmerLights@status:	
  3699                           ; 1 bytes @ 0x49
  3700                           
  3701                           
  3702                           ; 1 bytes @ 0x49
  3703  0069                     	ds	1
  3704  006A                     ??_setDimmerLights_SwOff:	
  3705  006A                     setDimmerLights_SwOff@command:	
  3706                           ; 0 bytes @ 0x4A
  3707                           
  3708  006A                     setRFSW_AdjControl@status:	
  3709                           ; 1 bytes @ 0x4A
  3710                           
  3711  006A                     setRF_DimmerLights@lights:	
  3712                           ; 1 bytes @ 0x4A
  3713                           
  3714                           
  3715                           ; 1 bytes @ 0x4A
  3716  006A                     	ds	1
  3717  006B                     ?_setDimmerLights:	
  3718  006B                     ?_setDimmerLights_Adj:	
  3719                           ; 0 bytes @ 0x4B
  3720                           
  3721  006B                     setDimmerLights_SwOff@sw:	
  3722                           ; 0 bytes @ 0x4B
  3723                           
  3724  006B                     setDimmerLights@status:	
  3725                           ; 1 bytes @ 0x4B
  3726                           
  3727  006B                     setDimmerLights_Adj@status:	
  3728                           ; 1 bytes @ 0x4B
  3729                           
  3730  006B                     setRFSW_AdjControl@sw:	
  3731                           ; 1 bytes @ 0x4B
  3732                           
  3733                           
  3734                           ; 1 bytes @ 0x4B
  3735  006B                     	ds	1
  3736  006C                     ??_setDimmerLights_ErrorClose:	
  3737  006C                     ??_setDimmerLights:	
  3738                           ; 0 bytes @ 0x4C
  3739                           
  3740  006C                     ??_setDimmerLights_Adj:	
  3741                           ; 0 bytes @ 0x4C
  3742                           
  3743  006C                     ??_Exception_Main:	
  3744                           ; 0 bytes @ 0x4C
  3745                           
  3746  006C                     ??_setRFSW_Control:	
  3747                           ; 0 bytes @ 0x4C
  3748                           
  3749  006C                     ??_setSw_Main:	
  3750                           ; 0 bytes @ 0x4C
  3751                           
  3752                           
  3753                           ; 0 bytes @ 0x4C
  3754  006C                     	ds	1
  3755  006D                     ??_DlyOff_Main:	
  3756  006D                     setDimmerLights@lights:	
  3757                           ; 0 bytes @ 0x4D
  3758                           
  3759  006D                     setDimmerLights_Adj@lights:	
  3760                           ; 1 bytes @ 0x4D
  3761                           
  3762  006D                     setRFSW_Control@status:	
  3763                           ; 1 bytes @ 0x4D
  3764                           
  3765                           
  3766                           ; 1 bytes @ 0x4D
  3767  006D                     	ds	1
  3768  006E                     ??_setDimmerLights_Main:	
  3769  006E                     setDimmerLights_Main@lights:	
  3770                           ; 0 bytes @ 0x4E
  3771                           
  3772  006E                     setRFSW_Control@sw:	
  3773                           ; 1 bytes @ 0x4E
  3774                           
  3775  006E                     setSw_Main@sw:	
  3776                           ; 1 bytes @ 0x4E
  3777                           
  3778                           
  3779                           ; 1 bytes @ 0x4E
  3780  006E                     	ds	1
  3781  006F                     ??_Switch_Main:	
  3782  006F                     ??_getRxData:	
  3783                           ; 0 bytes @ 0x4F
  3784                           
  3785  006F                     ??_setControl_Lights_Table:	
  3786                           ; 0 bytes @ 0x4F
  3787                           
  3788  006F                     ??_DimmerLights_Main:	
  3789                           ; 0 bytes @ 0x4F
  3790                           
  3791  006F                     DlyOff_Main@sw:	
  3792                           ; 0 bytes @ 0x4F
  3793                           
  3794                           
  3795                           ; 1 bytes @ 0x4F
  3796  006F                     	ds	1
  3797  0070                     ??_RF_Main:	
  3798  0070                     ??_DelayOff_Main:	
  3799                           ; 0 bytes @ 0x50
  3800                           
  3801  0070                     ??_main:	
  3802                           ; 0 bytes @ 0x50
  3803                           
  3804                           
  3805                           	psect	maintext
  3806  17AF                     __pmaintext:	
  3807                           ; 0 bytes @ 0x50
  3808 ;;
  3809 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3810 ;;
  3811 ;; *************** function _main *****************
  3812 ;; Defined at:
  3813 ;;		line 7 in file "../src/Main_B1.c"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  argc            2    3[BANK3 ] int 
  3816 ;;  argv            2    5[BANK3 ] PTR PTR unsigned char 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;		None
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  2    3[BANK3 ] int 
  3821 ;; Registers used:
  3822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 17F/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3828 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3831 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3832 ;;Total ram usage:        4 bytes
  3833 ;; Hardware stack levels required when called:   15
  3834 ;; This function calls:
  3835 ;;		_Buzzer_Initialization
  3836 ;;		_Buzzer_Main
  3837 ;;		_CC2500_PowerOnInitial
  3838 ;;		_DelayOff_Initialization
  3839 ;;		_DelayOff_Main
  3840 ;;		_DimmerLights_Initialization
  3841 ;;		_DimmerLights_Main
  3842 ;;		_Exception_Main
  3843 ;;		_Flash_Memory_Initialization
  3844 ;;		_Flash_Memory_Main
  3845 ;;		_LED_Initialization
  3846 ;;		_LED_Main
  3847 ;;		_Mcu_Initialization
  3848 ;;		_RF_Initialization
  3849 ;;		_RF_Main
  3850 ;;		_Switch_Initialization
  3851 ;;		_Switch_Main
  3852 ;;		_Temp_Initialization
  3853 ;;		_Temp_Main
  3854 ;;		_WDT_Main
  3855 ;;		_getTemp_AD
  3856 ;;		_myMain_Initialization
  3857 ;;		_my_MainTimer
  3858 ;; This function is called by:
  3859 ;;		Startup code after reset
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           
  3864                           ;psect for function _main
  3865  17AF                     _main:	
  3866                           
  3867                           ;Main_B1.c: 8: myMain_Initialization();
  3868                           
  3869                           ;incstack = 0
  3870                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3871  17AF  319F  2740  3197   	fcall	_myMain_Initialization
  3872                           
  3873                           ;Main_B1.c: 9: Mcu_Initialization();
  3874  17B2  319F  27C9  3197   	fcall	_Mcu_Initialization
  3875                           
  3876                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3877  17B5  3183  2394  3197   	fcall	_Flash_Memory_Initialization
  3878                           
  3879                           ;Main_B1.c: 11: LED_Initialization();
  3880  17B8  319E  26D7  3197   	fcall	_LED_Initialization
  3881                           
  3882                           ;Main_B1.c: 12: Buzzer_Initialization();
  3883  17BB  319E  262A  3197   	fcall	_Buzzer_Initialization
  3884                           
  3885                           ;Main_B1.c: 14: ;;
  3886                           ;Main_B1.c: 15: Temp_Initialization();
  3887  17BE  319E  2633  3197   	fcall	_Temp_Initialization
  3888                           
  3889                           ;Main_B1.c: 16: ;;
  3890                           ;Main_B1.c: 17: ;;
  3891                           ;Main_B1.c: 18: DelayOff_Initialization();
  3892  17C1  319E  2669  3197   	fcall	_DelayOff_Initialization
  3893                           
  3894                           ;Main_B1.c: 20: DimmerLights_Initialization();
  3895  17C4  3190  20BC  3197   	fcall	_DimmerLights_Initialization
  3896                           
  3897                           ;Main_B1.c: 21: ;;
  3898                           ;Main_B1.c: 22: ;;
  3899                           ;Main_B1.c: 23: ;;
  3900                           ;Main_B1.c: 24: Switch_Initialization();
  3901  17C7  319F  2707  3197   	fcall	_Switch_Initialization
  3902                           
  3903                           ;Main_B1.c: 25: RF_Initialization();
  3904  17CA  319E  262D  3197   	fcall	_RF_Initialization
  3905                           
  3906                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  3907  17CD  3191  210D  3197   	fcall	_CC2500_PowerOnInitial
  3908  17D0                     l9830:	
  3909                           ;Main_B1.c: 27: ;;
  3910                           ;Main_B1.c: 28: ;;
  3911                           ;Main_B1.c: 30: while (1) {
  3912                           
  3913                           
  3914                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  3915  17D0  0021               	movlb	1	; select bank1
  3916  17D1  1C20               	btfss	_myMain^(0+128),0
  3917  17D2  2FD7               	goto	l9834
  3918                           
  3919                           ;Main_B1.c: 42: getTemp_AD(0x09);
  3920  17D3  3009               	movlw	9
  3921  17D4  3196  2607  3197   	fcall	_getTemp_AD
  3922  17D7                     l9834:	
  3923                           
  3924                           ;Main_B1.c: 57: }
  3925                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  3926  17D7  0022               	movlb	2	; select bank2
  3927  17D8  1C41               	btfss	_Timer1^(0+256),0
  3928  17D9  2FD0               	goto	l9830
  3929                           
  3930                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  3931  17DA  1041               	bcf	_Timer1^(0+256),0
  3932                           
  3933                           ;Main_B1.c: 96: my_MainTimer();
  3934  17DB  3195  2550  3197   	fcall	_my_MainTimer
  3935                           
  3936                           ;Main_B1.c: 97: WDT_Main();
  3937  17DE  319F  27DB  3197   	fcall	_WDT_Main
  3938                           
  3939                           ;Main_B1.c: 98: ;;
  3940                           ;Main_B1.c: 99: ;;
  3941                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  3942  17E1  0021               	movlb	1	; select bank1
  3943  17E2  1C20               	btfss	_myMain^(0+128),0
  3944  17E3  2FD0               	goto	l9830
  3945                           
  3946                           ;Main_B1.c: 101: Flash_Memory_Main();
  3947  17E4  3194  24E1  3197   	fcall	_Flash_Memory_Main
  3948                           
  3949                           ;Main_B1.c: 103: LED_Main();
  3950  17E7  319E  26E3  3197   	fcall	_LED_Main
  3951                           
  3952                           ;Main_B1.c: 104: Buzzer_Main();
  3953  17EA  3188  2001  3197   	fcall	_Buzzer_Main
  3954                           
  3955                           ;Main_B1.c: 106: ;;
  3956                           ;Main_B1.c: 107: Temp_Main();
  3957  17ED  319E  2636  3197   	fcall	_Temp_Main
  3958                           
  3959                           ;Main_B1.c: 108: ;;
  3960                           ;Main_B1.c: 109: ;;
  3961                           ;Main_B1.c: 111: ;;
  3962                           ;Main_B1.c: 112: DimmerLights_Main();
  3963  17F0  319E  2679  3197   	fcall	_DimmerLights_Main
  3964                           
  3965                           ;Main_B1.c: 113: Switch_Main();
  3966  17F3  319E  26A8  3197   	fcall	_Switch_Main
  3967                           
  3968                           ;Main_B1.c: 114: ;;
  3969                           ;Main_B1.c: 115: ;;
  3970                           ;Main_B1.c: 117: RF_Main();
  3971  17F6  319E  2630  3197   	fcall	_RF_Main
  3972                           
  3973                           ;Main_B1.c: 118: DelayOff_Main();
  3974  17F9  319E  2671  3197   	fcall	_DelayOff_Main
  3975                           
  3976                           ;Main_B1.c: 119: ;;
  3977                           ;Main_B1.c: 120: ;;
  3978                           ;Main_B1.c: 121: Exception_Main();
  3979  17FC  3186  26AF  3197   	fcall	_Exception_Main
  3980  17FF  2FD0               	goto	l9830
  3981  1800                     __end_of_main:	
  3982                           ;Main_B1.c: 128: }
  3983                           ;Main_B1.c: 129: }
  3984                           ;Main_B1.c: 163: }
  3985                           ;Main_B1.c: 164: return (0);
  3986                           ;	Return value of _main is never used
  3987                           
  3988                           
  3989                           	psect	text1
  3990  1550                     __ptext1:	
  3991 ;; *************** function _my_MainTimer *****************
  3992 ;; Defined at:
  3993 ;;		line 185 in file "../src/Main_B1.c"
  3994 ;; Parameters:    Size  Location     Type
  3995 ;;		None
  3996 ;; Auto vars:     Size  Location     Type
  3997 ;;		None
  3998 ;; Return value:  Size  Location     Type
  3999 ;;		None               void
  4000 ;; Registers used:
  4001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4002 ;; Tracked objects:
  4003 ;;		On entry : 0/0
  4004 ;;		On exit  : 0/0
  4005 ;;		Unchanged: 0/0
  4006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4009 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4010 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4011 ;;Total ram usage:        1 bytes
  4012 ;; Hardware stack levels used:    1
  4013 ;; Hardware stack levels required when called:    7
  4014 ;; This function calls:
  4015 ;;		_setBuz
  4016 ;; This function is called by:
  4017 ;;		_main
  4018 ;; This function uses a non-reentrant model
  4019 ;;
  4020                           
  4021                           
  4022                           ;psect for function _my_MainTimer
  4023  1550                     _my_MainTimer:	
  4024                           
  4025                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4026                           
  4027                           ;incstack = 0
  4028                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4029  1550  0021               	movlb	1	; select bank1
  4030  1551  1820               	btfsc	_myMain^(0+128),0
  4031  1552  2D6A               	goto	l9694
  4032                           
  4033                           ;Main_B1.c: 189: myMain.PowerCount++;
  4034  1553  3001               	movlw	1
  4035  1554  0020               	movlb	0	; select bank0
  4036  1555  00AD               	movwf	??_my_MainTimer
  4037  1556  082D               	movf	??_my_MainTimer,w
  4038  1557  0021               	movlb	1	; select bank1
  4039  1558  07A1               	addwf	(_myMain^(0+128)+1),f
  4040                           
  4041                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4042  1559  0821               	movf	(_myMain^(0+128)+1),w
  4043  155A  3A96               	xorlw	150
  4044  155B  1D03               	skipz
  4045  155C  0008               	return
  4046                           
  4047                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4048  155D  01A1               	clrf	(_myMain^(0+128)+1)
  4049                           
  4050                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4051  155E  1420               	bsf	_myMain^(0+128),0
  4052                           
  4053                           ;Main_B1.c: 197: setBuz(3, 50);
  4054  155F  3032               	movlw	50
  4055  1560  0020               	movlb	0	; select bank0
  4056  1561  00A9               	movwf	setBuz@time
  4057  1562  3000               	movlw	0
  4058  1563  00AA               	movwf	setBuz@time+1
  4059  1564  3003               	movlw	3
  4060  1565  3189  21F8         	fcall	_setBuz
  4061                           
  4062                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4063  1567  0021               	movlb	1	; select bank1
  4064  1568  1620               	bsf	_myMain^(0+128),4
  4065                           
  4066                           ;Main_B1.c: 207: }
  4067                           ;Main_B1.c: 208: } else {
  4068  1569  0008               	return
  4069  156A                     l9694:	
  4070                           
  4071                           ;Main_B1.c: 209: myMain.PowerCount++;
  4072  156A  3001               	movlw	1
  4073  156B  0020               	movlb	0	; select bank0
  4074  156C  00AD               	movwf	??_my_MainTimer
  4075  156D  082D               	movf	??_my_MainTimer,w
  4076  156E  0021               	movlb	1	; select bank1
  4077  156F  07A1               	addwf	(_myMain^(0+128)+1),f
  4078                           
  4079                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4080  1570  0821               	movf	(_myMain^(0+128)+1),w
  4081  1571  3A64               	xorlw	100
  4082  1572  1903               	btfsc	3,2
  4083                           
  4084                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4085  1573  01A1               	clrf	(_myMain^(0+128)+1)
  4086                           
  4087                           ;Main_B1.c: 226: }
  4088                           ;Main_B1.c: 228: myMain.Count1++;
  4089  1574  3001               	movlw	1
  4090  1575  07A4               	addwf	(_myMain^(0+128)+4),f
  4091  1576  3000               	movlw	0
  4092  1577  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4093                           
  4094                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4095  1578  3004               	movlw	4
  4096  1579  3EA0               	addlw	_myMain& (0+255)
  4097  157A  0086               	movwf	6
  4098  157B  0187               	clrf	7
  4099  157C  3F40               	moviw [0]fsr1
  4100  157D  3A64               	xorlw	100
  4101  157E  1D03               	skipz
  4102  157F  2D82               	goto	u10595
  4103  1580  3F41               	moviw [1]fsr1
  4104  1581  3A00               	xorlw	0
  4105  1582                     u10595:	
  4106  1582  1D03               	skipz
  4107  1583  0008               	return
  4108                           
  4109                           ;Main_B1.c: 230: {
  4110                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4111  1584  01A4               	clrf	(_myMain^(0+128)+4)
  4112  1585  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4113                           
  4114                           ;Main_B1.c: 243: if (myMain.Flag) {
  4115  1586  1CA0               	btfss	_myMain^(0+128),1
  4116  1587  2D8A               	goto	l1484
  4117                           
  4118                           ;Main_B1.c: 244: myMain.Flag = 0;
  4119  1588  10A0               	bcf	_myMain^(0+128),1
  4120                           
  4121                           ;Main_B1.c: 253: } else {
  4122  1589  0008               	return
  4123  158A                     l1484:	
  4124                           
  4125                           ;Main_B1.c: 254: myMain.Flag = 1;
  4126  158A  14A0               	bsf	_myMain^(0+128),1
  4127  158B  0008               	return
  4128  158C                     __end_of_my_MainTimer:	
  4129                           
  4130                           	psect	text2
  4131  1F40                     __ptext2:	
  4132 ;; *************** function _myMain_Initialization *****************
  4133 ;; Defined at:
  4134 ;;		line 170 in file "../src/Main_B1.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;		None
  4137 ;; Auto vars:     Size  Location     Type
  4138 ;;		None
  4139 ;; Return value:  Size  Location     Type
  4140 ;;		None               void
  4141 ;; Registers used:
  4142 ;;		wreg, fsr1l, fsr1h
  4143 ;; Tracked objects:
  4144 ;;		On entry : 0/0
  4145 ;;		On exit  : 0/0
  4146 ;;		Unchanged: 0/0
  4147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4150 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4151 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4152 ;;Total ram usage:        1 bytes
  4153 ;; Hardware stack levels used:    1
  4154 ;; Hardware stack levels required when called:    5
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		_main
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           
  4163                           ;psect for function _myMain_Initialization
  4164  1F40                     _myMain_Initialization:	
  4165                           
  4166                           ;Main_B1.c: 173: product = &_product;
  4167                           
  4168                           ;incstack = 0
  4169                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4170  1F40  3020               	movlw	__product& (0+255)
  4171  1F41  0020               	movlb	0	; select bank0
  4172  1F42  00A0               	movwf	??_myMain_Initialization
  4173  1F43  0820               	movf	??_myMain_Initialization,w
  4174  1F44  00F9               	movwf	_product
  4175                           
  4176                           ;Main_B1.c: 174: product->Data[20] = 210;
  4177  1F45  30D2               	movlw	210
  4178  1F46  00A0               	movwf	??_myMain_Initialization
  4179  1F47  0879               	movf	_product,w
  4180  1F48  3E14               	addlw	20
  4181  1F49  0086               	movwf	6
  4182  1F4A  3002               	movlw	2	; select bank4/5
  4183  1F4B  0087               	movwf	7
  4184  1F4C  0820               	movf	??_myMain_Initialization,w
  4185  1F4D  0081               	movwf	1
  4186  1F4E  0008               	return
  4187  1F4F                     __end_of_myMain_Initialization:	
  4188                           
  4189                           	psect	text3
  4190  1607                     __ptext3:	
  4191 ;; *************** function _getTemp_AD *****************
  4192 ;; Defined at:
  4193 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;  channel         1    wreg     unsigned char 
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;  channel         1    5[BANK0 ] unsigned char 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;		None               void
  4200 ;; Registers used:
  4201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4208 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4209 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4210 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4211 ;;Total ram usage:        2 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    7
  4214 ;; This function calls:
  4215 ;;		_getAD
  4216 ;; This function is called by:
  4217 ;;		_main
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           
  4222                           ;psect for function _getTemp_AD
  4223  1607                     _getTemp_AD:	
  4224                           
  4225                           ;incstack = 0
  4226                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4227                           ;getTemp_AD@channel stored from wreg
  4228  1607  0020               	movlb	0	; select bank0
  4229  1608  00A5               	movwf	getTemp_AD@channel
  4230                           
  4231                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4232  1609  0021               	movlb	1	; select bank1
  4233  160A  1D56               	btfss	_Temp^(0+128),2
  4234  160B  0008               	return
  4235                           
  4236                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4237  160C  30F0               	movlw	240
  4238  160D  0020               	movlb	0	; select bank0
  4239  160E  00A4               	movwf	??_getTemp_AD
  4240  160F  0824               	movf	??_getTemp_AD,w
  4241  1610  00A0               	movwf	getAD@adcon1
  4242  1611  0825               	movf	getTemp_AD@channel,w
  4243  1612  3192  2260  3196   	fcall	_getAD
  4244  1615  0020               	movlb	0	; select bank0
  4245  1616  0821               	movf	?_getAD+1,w
  4246  1617  0021               	movlb	1	; select bank1
  4247  1618  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4248  1619  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4249  161A  0020               	movlb	0	; select bank0
  4250  161B  0820               	movf	?_getAD,w
  4251  161C  0021               	movlb	1	; select bank1
  4252  161D  01E2               	clrf	(_Temp^(0+128)+12)
  4253  161E  07E2               	addwf	(_Temp^(0+128)+12),f
  4254                           
  4255                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4256  161F  300C               	movlw	12
  4257  1620  3ED6               	addlw	_Temp& (0+255)
  4258  1621  0086               	movwf	6
  4259  1622  0187               	clrf	7
  4260  1623  0016               	moviw fsr1++
  4261  1624  0401               	iorwf	1,w
  4262  1625  1903               	skipnz
  4263  1626  0008               	return
  4264                           
  4265                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4266  1627  0863               	movf	((_Temp+1)^(0+128)+12),w
  4267  1628  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4268  1629  1D03               	skipz
  4269  162A  2E2D               	goto	u10545
  4270  162B  0862               	movf	(_Temp^(0+128)+12),w
  4271  162C  025E               	subwf	(_Temp^(0+128)+8),w
  4272  162D                     u10545:	
  4273  162D  1803               	skipnc
  4274  162E  2E36               	goto	l9676
  4275                           
  4276                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4277  162F  0863               	movf	((_Temp+1)^(0+128)+12),w
  4278  1630  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4279  1631  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4280  1632  0862               	movf	(_Temp^(0+128)+12),w
  4281  1633  01DE               	clrf	(_Temp^(0+128)+8)
  4282  1634  07DE               	addwf	(_Temp^(0+128)+8),f
  4283                           
  4284                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4285  1635  0008               	return
  4286  1636                     l9676:	
  4287  1636  0863               	movf	((_Temp+1)^(0+128)+12),w
  4288  1637  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4289  1638  1D03               	skipz
  4290  1639  2E3C               	goto	u10555
  4291  163A  0862               	movf	(_Temp^(0+128)+12),w
  4292  163B  0260               	subwf	(_Temp^(0+128)+10),w
  4293  163C                     u10555:	
  4294  163C  1803               	skipnc
  4295  163D  0008               	return
  4296                           
  4297                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4298  163E  0863               	movf	((_Temp+1)^(0+128)+12),w
  4299  163F  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4300  1640  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4301  1641  0862               	movf	(_Temp^(0+128)+12),w
  4302  1642  01E0               	clrf	(_Temp^(0+128)+10)
  4303  1643  07E0               	addwf	(_Temp^(0+128)+10),f
  4304  1644  0008               	return
  4305  1645                     __end_of_getTemp_AD:	
  4306                           
  4307                           	psect	text4
  4308  1260                     __ptext4:	
  4309 ;; *************** function _getAD *****************
  4310 ;; Defined at:
  4311 ;;		line 453 in file "../src/MCU_B1.c"
  4312 ;; Parameters:    Size  Location     Type
  4313 ;;  adcon0          1    wreg     unsigned char 
  4314 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  2    0[BANK0 ] int 
  4319 ;; Registers used:
  4320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4326 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4327 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4329 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;Total ram usage:        4 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    6
  4333 ;; This function calls:
  4334 ;;		_Timeout_Counter
  4335 ;;		_set_TimeoutCleared
  4336 ;; This function is called by:
  4337 ;;		_getTemp_AD
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           
  4342                           ;psect for function _getAD
  4343  1260                     _getAD:	
  4344                           
  4345                           ;incstack = 0
  4346                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4347                           ;getAD@adcon0 stored from wreg
  4348  1260  0020               	movlb	0	; select bank0
  4349  1261  00A3               	movwf	getAD@adcon0
  4350                           
  4351                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4352  1262  0823               	movf	getAD@adcon0,w
  4353  1263  0021               	movlb	1	; select bank1
  4354  1264  009D               	movwf	29	;volatile
  4355                           
  4356                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4357  1265  0020               	movlb	0	; select bank0
  4358  1266  0820               	movf	getAD@adcon1,w
  4359  1267  0021               	movlb	1	; select bank1
  4360  1268  009E               	movwf	30	;volatile
  4361                           
  4362                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4363  1269  149D               	bsf	29,1	;volatile
  4364                           
  4365                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4366  126A  2A6E               	goto	l9188
  4367  126B                     l9186:	
  4368                           
  4369                           ;MCU_B1.c: 458: Timeout_Counter();
  4370  126B  3190  20F8  3192   	fcall	_Timeout_Counter
  4371  126E                     l9188:	
  4372  126E  0021               	movlb	1	; select bank1
  4373  126F  1C9D               	btfss	29,1	;volatile
  4374  1270  2A73               	goto	l9192
  4375  1271  1D2B               	btfss	(_myMain^(0+128)+11),2
  4376  1272  2A6B               	goto	l9186
  4377  1273                     l9192:	
  4378                           
  4379                           ;MCU_B1.c: 459: };
  4380                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4381  1273  319E  2649         	fcall	_set_TimeoutCleared
  4382                           
  4383                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4384  1275  0021               	movlb	1	; select bank1
  4385  1276  081C               	movf	28,w	;volatile
  4386  1277  0020               	movlb	0	; select bank0
  4387  1278  01A1               	clrf	?_getAD+1
  4388  1279  07A1               	addwf	?_getAD+1,f
  4389  127A  0021               	movlb	1	; select bank1
  4390  127B  081B               	movf	27,w	;volatile
  4391  127C  0020               	movlb	0	; select bank0
  4392  127D  01A0               	clrf	?_getAD
  4393  127E  07A0               	addwf	?_getAD,f
  4394  127F  0008               	return
  4395  1280                     __end_of_getAD:	
  4396                           
  4397                           	psect	text5
  4398  1FDB                     __ptext5:	
  4399 ;; *************** function _WDT_Main *****************
  4400 ;; Defined at:
  4401 ;;		line 1097 in file "../src/MCU_B1.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;		None
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;		None
  4406 ;; Return value:  Size  Location     Type
  4407 ;;		None               void
  4408 ;; Registers used:
  4409 ;;		wreg, status,2, status,0, pclath, cstack
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;Total ram usage:        1 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    6
  4422 ;; This function calls:
  4423 ;;		_WDT_Clearing
  4424 ;; This function is called by:
  4425 ;;		_main
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           
  4430                           ;psect for function _WDT_Main
  4431  1FDB                     _WDT_Main:	
  4432                           
  4433                           ;MCU_B1.c: 1098: if (WDT.Enable == 1) {
  4434                           
  4435                           ;incstack = 0
  4436                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4437  1FDB  0021               	movlb	1	; select bank1
  4438  1FDC  1C46               	btfss	_WDT^(0+128),0
  4439  1FDD  0008               	return
  4440                           
  4441                           ;MCU_B1.c: 1099: if (WDT.Timer-- > 0) {
  4442  1FDE  3001               	movlw	1
  4443  1FDF  02C7               	subwf	(_WDT^(0+128)+1),f
  4444  1FE0  0847               	movf	(_WDT^(0+128)+1),w
  4445  1FE1  3AFF               	xorlw	255
  4446  1FE2  1903               	skipnz
  4447  1FE3  0008               	return
  4448                           
  4449                           ;MCU_B1.c: 1100: WDT.Timer = 100;
  4450  1FE4  3064               	movlw	100
  4451  1FE5  0020               	movlb	0	; select bank0
  4452  1FE6  00A0               	movwf	??_WDT_Main
  4453  1FE7  0820               	movf	??_WDT_Main,w
  4454  1FE8  0021               	movlb	1	; select bank1
  4455  1FE9  00C7               	movwf	(_WDT^(0+128)+1)
  4456                           
  4457                           ;MCU_B1.c: 1101: WDT_Clearing();
  4458  1FEA  3180  2002         	fcall	_WDT_Clearing
  4459  1FEC  0008               	return
  4460  1FED                     __end_of_WDT_Main:	
  4461                           
  4462                           	psect	text6
  4463  0002                     __ptext6:	
  4464 ;; *************** function _WDT_Clearing *****************
  4465 ;; Defined at:
  4466 ;;		line 1107 in file "../src/MCU_B1.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;		None
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;		None
  4471 ;; Return value:  Size  Location     Type
  4472 ;;		None               void
  4473 ;; Registers used:
  4474 ;;		None
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4484 ;;Total ram usage:        0 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    5
  4487 ;; This function calls:
  4488 ;;		Nothing
  4489 ;; This function is called by:
  4490 ;;		_WDT_Main
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           
  4495                           ;psect for function _WDT_Clearing
  4496  0002                     _WDT_Clearing:	
  4497                           
  4498                           ;incstack = 0
  4499                           ; Regs used in _WDT_Clearing: []
  4500  0002  0064               	clrwdt	;# 
  4501  0003  0008               	return
  4502  0004                     __end_of_WDT_Clearing:	
  4503                           
  4504                           	psect	text7
  4505  1E36                     __ptext7:	
  4506 ;; *************** function _Temp_Main *****************
  4507 ;; Defined at:
  4508 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;		None
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;		None
  4513 ;; Return value:  Size  Location     Type
  4514 ;;		None               void
  4515 ;; Registers used:
  4516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;Total ram usage:        0 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    8
  4529 ;; This function calls:
  4530 ;;		_setTemp_Main
  4531 ;; This function is called by:
  4532 ;;		_main
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           
  4537                           ;psect for function _Temp_Main
  4538  1E36                     _Temp_Main:	
  4539                           
  4540                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4541                           
  4542                           ;incstack = 0
  4543                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4544  1E36  3185  25FF         	fcall	_setTemp_Main
  4545  1E38  0008               	return
  4546  1E39                     __end_of_Temp_Main:	
  4547                           
  4548                           	psect	text8
  4549  05FF                     __ptext8:	
  4550 ;; *************** function _setTemp_Main *****************
  4551 ;; Defined at:
  4552 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;		None
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;  error           1   72[BANK0 ] unsigned char 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;		None               void
  4559 ;; Registers used:
  4560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4568 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4569 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4570 ;;Total ram usage:        3 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    7
  4573 ;; This function calls:
  4574 ;;		_getMain_All_Error_Status
  4575 ;;		_setBuz
  4576 ;;		_setProductData
  4577 ;; This function is called by:
  4578 ;;		_Temp_Main
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           
  4583                           ;psect for function _setTemp_Main
  4584  05FF                     _setTemp_Main:	
  4585                           
  4586                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4587                           
  4588                           ;incstack = 0
  4589                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4590  05FF  3000               	movlw	0
  4591  0600  3191  21C9  3185   	fcall	_getMain_All_Error_Status
  4592  0603  0020               	movlb	0	; select bank0
  4593  0604  00E6               	movwf	??_setTemp_Main
  4594  0605  0866               	movf	??_setTemp_Main,w
  4595  0606  00E8               	movwf	setTemp_Main@error
  4596                           
  4597                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4598  0607  0021               	movlb	1	; select bank1
  4599  0608  1C56               	btfss	_Temp^(0+128),0
  4600  0609  2EAB               	goto	l1749
  4601                           
  4602                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4603  060A  1956               	btfsc	_Temp^(0+128),2
  4604  060B  2E1B               	goto	l9254
  4605                           
  4606                           ;OverTemperature_B1.c: 66: Temp.Time++;
  4607  060C  3001               	movlw	1
  4608  060D  07D7               	addwf	(_Temp^(0+128)+1),f
  4609  060E  3000               	movlw	0
  4610  060F  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  4611                           
  4612                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  4613  0610  3001               	movlw	1
  4614  0611  0258               	subwf	((_Temp+1)^(0+128)+1),w
  4615  0612  30F4               	movlw	244
  4616  0613  1903               	skipnz
  4617  0614  0257               	subwf	(_Temp^(0+128)+1),w
  4618  0615  1C03               	skipc
  4619  0616  0008               	return
  4620                           
  4621                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  4622  0617  01D7               	clrf	(_Temp^(0+128)+1)
  4623  0618  01D8               	clrf	((_Temp+1)^(0+128)+1)
  4624                           
  4625                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  4626  0619  1556               	bsf	_Temp^(0+128),2
  4627                           
  4628                           ;OverTemperature_B1.c: 70: }
  4629                           ;OverTemperature_B1.c: 71: } else {
  4630  061A  0008               	return
  4631  061B                     l9254:	
  4632                           
  4633                           ;OverTemperature_B1.c: 72: Temp.Time++;
  4634  061B  3001               	movlw	1
  4635  061C  07D7               	addwf	(_Temp^(0+128)+1),f
  4636  061D  3000               	movlw	0
  4637  061E  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  4638                           
  4639                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  4640  061F  3000               	movlw	0
  4641  0620  0258               	subwf	((_Temp+1)^(0+128)+1),w
  4642  0621  3005               	movlw	5
  4643  0622  1903               	skipnz
  4644  0623  0257               	subwf	(_Temp^(0+128)+1),w
  4645  0624  1C03               	skipc
  4646  0625  0008               	return
  4647                           
  4648                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  4649  0626  01D7               	clrf	(_Temp^(0+128)+1)
  4650  0627  01D8               	clrf	((_Temp+1)^(0+128)+1)
  4651                           
  4652                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  4653  0628  3008               	movlw	8
  4654  0629  3ED6               	addlw	_Temp& (0+255)
  4655  062A  0086               	movwf	6
  4656  062B  0187               	clrf	7
  4657  062C  0016               	moviw fsr1++
  4658  062D  0401               	iorwf	1,w
  4659  062E  1903               	skipnz
  4660  062F  2EA5               	goto	l1754
  4661  0630  300A               	movlw	10
  4662  0631  3ED6               	addlw	_Temp& (0+255)
  4663  0632  0086               	movwf	6
  4664  0633  0187               	clrf	7
  4665  0634  0016               	moviw fsr1++
  4666  0635  0401               	iorwf	1,w
  4667  0636  1903               	skipnz
  4668  0637  2EA5               	goto	l1754
  4669                           
  4670                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  4671  0638  1156               	bcf	_Temp^(0+128),2
  4672                           
  4673                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  4674  0639  300A               	movlw	10
  4675  063A  3ED6               	addlw	_Temp& (0+255)
  4676  063B  0086               	movwf	6
  4677  063C  0187               	clrf	7
  4678  063D  3008               	movlw	8
  4679  063E  3ED6               	addlw	_Temp& (0+255)
  4680  063F  0084               	movwf	4
  4681  0640  0185               	clrf	5
  4682  0641  3F40               	moviw [0]fsr1
  4683  0642  0700               	addwf	0,w
  4684  0643  0020               	movlb	0	; select bank0
  4685  0644  00E6               	movwf	??_setTemp_Main
  4686  0645  3101               	addfsr 0,1
  4687  0646  3F41               	moviw [1]fsr1
  4688  0647  3D00               	addwfc	0,w
  4689  0648  00E7               	movwf	??_setTemp_Main+1
  4690  0649  36E7               	lsrf	??_setTemp_Main+1,f
  4691  064A  0CE6               	rrf	??_setTemp_Main,f
  4692  064B  0866               	movf	??_setTemp_Main,w
  4693  064C  0021               	movlb	1	; select bank1
  4694  064D  00DC               	movwf	(_Temp^(0+128)+6)
  4695  064E  0020               	movlb	0	; select bank0
  4696  064F  0867               	movf	??_setTemp_Main+1,w
  4697  0650  0021               	movlb	1	; select bank1
  4698  0651  00DD               	movwf	((_Temp+1)^(0+128)+6)
  4699                           
  4700                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  4701  0652  30C7               	movlw	199
  4702  0653  00E4               	movwf	(_Temp^(0+128)+14)
  4703  0654  3001               	movlw	1
  4704  0655  00E5               	movwf	(_Temp^(0+128)+15)
  4705                           
  4706                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  4707  0656  309F               	movlw	159
  4708  0657  00E6               	movwf	(_Temp^(0+128)+16)
  4709  0658  3001               	movlw	1
  4710  0659  00E7               	movwf	(_Temp^(0+128)+17)
  4711                           
  4712                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  4713  065A  1CD6               	btfss	_Temp^(0+128),1
  4714  065B  2E7C               	goto	l9286
  4715                           
  4716                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  4717  065C  0865               	movf	((_Temp+1)^(0+128)+14),w
  4718  065D  025D               	subwf	((_Temp+1)^(0+128)+6),w
  4719  065E  1D03               	skipz
  4720  065F  2E62               	goto	u9855
  4721  0660  0864               	movf	(_Temp^(0+128)+14),w
  4722  0661  025C               	subwf	(_Temp^(0+128)+6),w
  4723  0662                     u9855:	
  4724  0662  1C03               	skipc
  4725  0663  2E7A               	goto	l9284
  4726                           
  4727                           ;OverTemperature_B1.c: 98: Temp.Count++;
  4728  0664  3001               	movlw	1
  4729  0665  0020               	movlb	0	; select bank0
  4730  0666  00E6               	movwf	??_setTemp_Main
  4731  0667  0866               	movf	??_setTemp_Main,w
  4732  0668  0021               	movlb	1	; select bank1
  4733  0669  07D9               	addwf	(_Temp^(0+128)+3),f
  4734                           
  4735                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  4736  066A  3003               	movlw	3
  4737  066B  0259               	subwf	(_Temp^(0+128)+3),w
  4738  066C  1C03               	skipc
  4739  066D  2E92               	goto	l9298
  4740                           
  4741                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  4742  066E  01D9               	clrf	(_Temp^(0+128)+3)
  4743                           
  4744                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  4745  066F  10D6               	bcf	_Temp^(0+128),1
  4746                           
  4747                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  4748  0670  3064               	movlw	100
  4749  0671  0020               	movlb	0	; select bank0
  4750  0672  00A9               	movwf	setBuz@time
  4751  0673  3000               	movlw	0
  4752  0674  00AA               	movwf	setBuz@time+1
  4753  0675  3002               	movlw	2
  4754  0676  3189  21F8  3185   	fcall	_setBuz
  4755                           
  4756                           ;OverTemperature_B1.c: 103: }
  4757                           ;OverTemperature_B1.c: 104: } else {
  4758  0679  2E92               	goto	l9298
  4759  067A                     l9284:	
  4760                           
  4761                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  4762  067A  0021               	movlb	1	; select bank1
  4763  067B  2E91               	goto	l9296
  4764  067C                     l9286:	
  4765                           ;OverTemperature_B1.c: 106: }
  4766                           ;OverTemperature_B1.c: 107: } else {
  4767                           
  4768                           
  4769                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  4770  067C  085D               	movf	((_Temp+1)^(0+128)+6),w
  4771  067D  0267               	subwf	((_Temp+1)^(0+128)+16),w
  4772  067E  1D03               	skipz
  4773  067F  2E82               	goto	u9875
  4774  0680  085C               	movf	(_Temp^(0+128)+6),w
  4775  0681  0266               	subwf	(_Temp^(0+128)+16),w
  4776  0682                     u9875:	
  4777  0682  1C03               	skipc
  4778  0683  2E91               	goto	l9296
  4779                           
  4780                           ;OverTemperature_B1.c: 109: Temp.Count++;
  4781  0684  3001               	movlw	1
  4782  0685  0020               	movlb	0	; select bank0
  4783  0686  00E6               	movwf	??_setTemp_Main
  4784  0687  0866               	movf	??_setTemp_Main,w
  4785  0688  0021               	movlb	1	; select bank1
  4786  0689  07D9               	addwf	(_Temp^(0+128)+3),f
  4787                           
  4788                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  4789  068A  3003               	movlw	3
  4790  068B  0259               	subwf	(_Temp^(0+128)+3),w
  4791  068C  1C03               	skipc
  4792  068D  2E92               	goto	l9298
  4793                           
  4794                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  4795  068E  01D9               	clrf	(_Temp^(0+128)+3)
  4796                           
  4797                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  4798  068F  14D6               	bsf	_Temp^(0+128),1
  4799                           
  4800                           ;OverTemperature_B1.c: 113: }
  4801                           ;OverTemperature_B1.c: 114: } else {
  4802  0690  2E92               	goto	l9298
  4803  0691                     l9296:	
  4804                           
  4805                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  4806  0691  01D9               	clrf	(_Temp^(0+128)+3)
  4807  0692                     l9298:	
  4808                           
  4809                           ;OverTemperature_B1.c: 116: }
  4810                           ;OverTemperature_B1.c: 117: }
  4811                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  4812  0692  0021               	movlb	1	; select bank1
  4813  0693  085D               	movf	((_Temp+1)^(0+128)+6),w
  4814  0694  0020               	movlb	0	; select bank0
  4815  0695  00E6               	movwf	??_setTemp_Main
  4816  0696  0866               	movf	??_setTemp_Main,w
  4817  0697  00E2               	movwf	setProductData@value
  4818  0698  3018               	movlw	24
  4819  0699  319F  2714  3185   	fcall	_setProductData
  4820                           
  4821                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  4822  069C  0021               	movlb	1	; select bank1
  4823  069D  085C               	movf	(_Temp^(0+128)+6),w
  4824  069E  0020               	movlb	0	; select bank0
  4825  069F  00E6               	movwf	??_setTemp_Main
  4826  06A0  0866               	movf	??_setTemp_Main,w
  4827  06A1  00E2               	movwf	setProductData@value
  4828  06A2  3019               	movlw	25
  4829  06A3  319F  2714         	fcall	_setProductData
  4830  06A5                     l1754:	
  4831                           
  4832                           ;OverTemperature_B1.c: 135: }
  4833                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  4834  06A5  0021               	movlb	1	; select bank1
  4835  06A6  01DE               	clrf	(_Temp^(0+128)+8)
  4836  06A7  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4837                           
  4838                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  4839  06A8  01E0               	clrf	(_Temp^(0+128)+10)
  4840  06A9  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4841                           
  4842                           ;OverTemperature_B1.c: 138: }
  4843                           ;OverTemperature_B1.c: 139: }
  4844                           ;OverTemperature_B1.c: 141: } else {
  4845  06AA  0008               	return
  4846  06AB                     l1749:	
  4847                           
  4848                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  4849  06AB  1C20               	btfss	_myMain^(0+128),0
  4850  06AC  0008               	return
  4851                           
  4852                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  4853  06AD  1456               	bsf	_Temp^(0+128),0
  4854  06AE  0008               	return
  4855  06AF                     __end_of_setTemp_Main:	
  4856                           
  4857                           	psect	text9
  4858  1E33                     __ptext9:	
  4859 ;; *************** function _Temp_Initialization *****************
  4860 ;; Defined at:
  4861 ;;		line 8 in file "../src/OverTemperature_B1.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;		None
  4864 ;; Auto vars:     Size  Location     Type
  4865 ;;		None
  4866 ;; Return value:  Size  Location     Type
  4867 ;;		None               void
  4868 ;; Registers used:
  4869 ;;		status,2, status,0, pclath, cstack
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4879 ;;Total ram usage:        0 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:    6
  4882 ;; This function calls:
  4883 ;;		_setTemp_Initialization
  4884 ;; This function is called by:
  4885 ;;		_main
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           
  4890                           ;psect for function _Temp_Initialization
  4891  1E33                     _Temp_Initialization:	
  4892                           
  4893                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  4894                           
  4895                           ;incstack = 0
  4896                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4897  1E33  3188  2000         	fcall	_setTemp_Initialization
  4898  1E35  0008               	return
  4899  1E36                     __end_of_Temp_Initialization:	
  4900                           
  4901                           	psect	text10
  4902  0800                     __ptext10:	
  4903 ;; *************** function _setTemp_Initialization *****************
  4904 ;; Defined at:
  4905 ;;		line 44 in file "../src/OverTemperature_B1.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;		None
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;		None
  4910 ;; Return value:  Size  Location     Type
  4911 ;;		None               void
  4912 ;; Registers used:
  4913 ;;		None
  4914 ;; Tracked objects:
  4915 ;;		On entry : 0/0
  4916 ;;		On exit  : 0/0
  4917 ;;		Unchanged: 0/0
  4918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4923 ;;Total ram usage:        0 bytes
  4924 ;; Hardware stack levels used:    1
  4925 ;; Hardware stack levels required when called:    5
  4926 ;; This function calls:
  4927 ;;		Nothing
  4928 ;; This function is called by:
  4929 ;;		_Temp_Initialization
  4930 ;; This function uses a non-reentrant model
  4931 ;;
  4932                           
  4933                           
  4934                           ;psect for function _setTemp_Initialization
  4935  0800                     _setTemp_Initialization:	
  4936                           
  4937                           ;incstack = 0
  4938                           ; Regs used in _setTemp_Initialization: []
  4939  0800  0008               	return
  4940  0801                     __end_of_setTemp_Initialization:	
  4941                           
  4942                           	psect	text11
  4943  1EA8                     __ptext11:	
  4944 ;; *************** function _Switch_Main *****************
  4945 ;; Defined at:
  4946 ;;		line 72 in file "../src/Switch_B1.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;		None
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;		None
  4951 ;; Return value:  Size  Location     Type
  4952 ;;		None               void
  4953 ;; Registers used:
  4954 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4964 ;;Total ram usage:        0 bytes
  4965 ;; Hardware stack levels used:    1
  4966 ;; Hardware stack levels required when called:   10
  4967 ;; This function calls:
  4968 ;;		_TouchPower
  4969 ;;		_setSw_Main
  4970 ;; This function is called by:
  4971 ;;		_main
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           
  4976                           ;psect for function _Switch_Main
  4977  1EA8                     _Switch_Main:	
  4978                           
  4979                           ;Switch_B1.c: 75: setSw_Main(1);
  4980                           
  4981                           ;incstack = 0
  4982                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4983  1EA8  3001               	movlw	1
  4984  1EA9  3180  2040  319E   	fcall	_setSw_Main
  4985                           
  4986                           ;Switch_B1.c: 79: setSw_Main(2);
  4987  1EAC  3002               	movlw	2
  4988  1EAD  3180  2040  319E   	fcall	_setSw_Main
  4989                           
  4990                           ;Switch_B1.c: 87: TouchPower();
  4991  1EB0  3191  2137         	fcall	_TouchPower
  4992  1EB2  0008               	return
  4993  1EB3                     __end_of_Switch_Main:	
  4994                           
  4995                           	psect	text12
  4996  0040                     __ptext12:	
  4997 ;; *************** function _setSw_Main *****************
  4998 ;; Defined at:
  4999 ;;		line 121 in file "../src/Switch_B1.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;  sw              1    wreg     unsigned char 
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;  sw              1   78[BANK0 ] unsigned char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;		None               void
  5006 ;; Registers used:
  5007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5016 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5017 ;;Total ram usage:        3 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    9
  5020 ;; This function calls:
  5021 ;;		_SwPointSelect
  5022 ;;		_getMain_All_Error_Status
  5023 ;;		_getSw_KeyStatus
  5024 ;;		_setBuz
  5025 ;;		_setDimmerLights_AdjOn
  5026 ;;		_setDimmerLights_SwOff
  5027 ;;		_setDimmerLights_SwOn
  5028 ;;		_setRF_Learn
  5029 ;; This function is called by:
  5030 ;;		_Switch_Main
  5031 ;; This function uses a non-reentrant model
  5032 ;;
  5033                           
  5034                           
  5035                           ;psect for function _setSw_Main
  5036  0040                     _setSw_Main:	
  5037                           
  5038                           ;incstack = 0
  5039                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5040                           ;setSw_Main@sw stored from wreg
  5041  0040  0020               	movlb	0	; select bank0
  5042  0041  00EE               	movwf	setSw_Main@sw
  5043                           
  5044                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5045  0042  086E               	movf	setSw_Main@sw,w
  5046  0043  3190  20D0  3180   	fcall	_SwPointSelect
  5047                           
  5048                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5049  0046  0877               	movf	_Sw,w
  5050  0047  0086               	movwf	6
  5051  0048  3001               	movlw	1	; select bank2/3
  5052  0049  0087               	movwf	7
  5053  004A  1C01               	btfss	1,0
  5054  004B  29AA               	goto	l2512
  5055                           
  5056                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5057  004C  3000               	movlw	0
  5058  004D  3191  21C9  3180   	fcall	_getMain_All_Error_Status
  5059  0050  3800               	iorlw	0
  5060  0051  1D03               	skipz
  5061  0052  286E               	goto	l9434
  5062                           
  5063                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5064  0053  0A77               	incf	_Sw,w
  5065  0054  0086               	movwf	6
  5066  0055  3001               	movlw	1	; select bank2/3
  5067  0056  0087               	movwf	7
  5068  0057  1081               	bcf	1,1
  5069                           
  5070                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5071  0058  0020               	movlb	0	; select bank0
  5072  0059  086E               	movf	setSw_Main@sw,w
  5073  005A  3192  2221  3180   	fcall	_getSw_KeyStatus
  5074  005D  3A01               	xorlw	1
  5075  005E  3000               	movlw	0
  5076  005F  1903               	skipnz
  5077  0060  3001               	movlw	1
  5078  0061  0020               	movlb	0	; select bank0
  5079  0062  00EC               	movwf	??_setSw_Main
  5080  0063  0877               	movf	_Sw,w
  5081  0064  0086               	movwf	6
  5082  0065  3001               	movlw	1	; select bank2/3
  5083  0066  0087               	movwf	7
  5084  0067  0DEC               	rlf	??_setSw_Main,f
  5085  0068  0801               	movf	1,w
  5086  0069  066C               	xorwf	??_setSw_Main,w
  5087  006A  39FD               	andlw	-3
  5088  006B  066C               	xorwf	??_setSw_Main,w
  5089  006C  0081               	movwf	1
  5090                           
  5091                           ;Switch_B1.c: 128: } else {
  5092  006D  2883               	goto	l2514
  5093  006E                     l9434:	
  5094                           
  5095                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5096  006E  0A77               	incf	_Sw,w
  5097  006F  0086               	movwf	6
  5098  0070  3001               	movlw	1	; select bank2/3
  5099  0071  0087               	movwf	7
  5100  0072  1881               	btfsc	1,1
  5101  0073  2883               	goto	l2514
  5102                           
  5103                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5104  0074  0A77               	incf	_Sw,w
  5105  0075  0086               	movwf	6
  5106  0076  3001               	movlw	1	; select bank2/3
  5107  0077  0087               	movwf	7
  5108  0078  1481               	bsf	1,1
  5109                           
  5110                           ;Switch_B1.c: 131: Sw->Touch = 0;
  5111  0079  0877               	movf	_Sw,w
  5112  007A  0086               	movwf	6
  5113  007B  3001               	movlw	1	; select bank2/3
  5114  007C  0087               	movwf	7
  5115  007D  1081               	bcf	1,1
  5116                           
  5117                           ;Switch_B1.c: 132: Sw->Debounce = 1;
  5118  007E  0877               	movf	_Sw,w
  5119  007F  0086               	movwf	6
  5120  0080  3001               	movlw	1	; select bank2/3
  5121  0081  0087               	movwf	7
  5122  0082  1501               	bsf	1,2
  5123  0083                     l2514:	
  5124                           
  5125                           ;Switch_B1.c: 133: }
  5126                           ;Switch_B1.c: 134: }
  5127                           ;Switch_B1.c: 136: if (Sw->Touch == 1) {
  5128  0083  0877               	movf	_Sw,w
  5129  0084  0086               	movwf	6
  5130  0085  3001               	movlw	1	; select bank2/3
  5131  0086  0087               	movwf	7
  5132  0087  1C81               	btfss	1,1
  5133  0088  2953               	goto	l9484
  5134                           
  5135                           ;Switch_B1.c: 137: if (Sw->Debounce == 0) {
  5136  0089  0877               	movf	_Sw,w
  5137  008A  0086               	movwf	6
  5138  008B  3001               	movlw	1	; select bank2/3
  5139  008C  0087               	movwf	7
  5140  008D  1901               	btfsc	1,2
  5141  008E  28B1               	goto	l9450
  5142                           
  5143                           ;Switch_B1.c: 138: Sw->DebounceTime++;
  5144  008F  3001               	movlw	1
  5145  0090  0020               	movlb	0	; select bank0
  5146  0091  00EC               	movwf	??_setSw_Main
  5147  0092  0877               	movf	_Sw,w
  5148  0093  3E02               	addlw	2
  5149  0094  0086               	movwf	6
  5150  0095  3001               	movlw	1	; select bank2/3
  5151  0096  0087               	movwf	7
  5152  0097  086C               	movf	??_setSw_Main,w
  5153  0098  0781               	addwf	1,f
  5154                           
  5155                           ;Switch_B1.c: 139: if (Sw->DebounceTime >= 5) {
  5156  0099  0877               	movf	_Sw,w
  5157  009A  3E02               	addlw	2
  5158  009B  0086               	movwf	6
  5159  009C  3001               	movlw	1	; select bank2/3
  5160  009D  0087               	movwf	7
  5161  009E  3005               	movlw	5
  5162  009F  0201               	subwf	1,w
  5163  00A0  1C03               	skipc
  5164  00A1  0008               	return
  5165                           
  5166                           ;Switch_B1.c: 140: Sw->DebounceTime = 0;
  5167  00A2  0877               	movf	_Sw,w
  5168  00A3  3E02               	addlw	2
  5169  00A4  0086               	movwf	6
  5170  00A5  3001               	movlw	1	; select bank2/3
  5171  00A6  0087               	movwf	7
  5172  00A7  0181               	clrf	1
  5173                           
  5174                           ;Switch_B1.c: 141: Sw->Debounce = 1;
  5175  00A8  0877               	movf	_Sw,w
  5176  00A9  0086               	movwf	6
  5177  00AA  3001               	movlw	1	; select bank2/3
  5178  00AB  0087               	movwf	7
  5179  00AC  1501               	bsf	1,2
  5180                           
  5181                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5182  00AD  086E               	movf	setSw_Main@sw,w
  5183  00AE  3195  2517         	fcall	_setDimmerLights_SwOn
  5184                           
  5185                           ;Switch_B1.c: 147: }
  5186                           ;Switch_B1.c: 148: } else {
  5187  00B0  0008               	return
  5188  00B1                     l9450:	
  5189                           
  5190                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5191  00B1  0877               	movf	_Sw,w
  5192  00B2  0086               	movwf	6
  5193  00B3  3001               	movlw	1	; select bank2/3
  5194  00B4  0087               	movwf	7
  5195  00B5  1981               	btfsc	1,3
  5196  00B6  28E3               	goto	l9460
  5197                           
  5198                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5199  00B7  0877               	movf	_Sw,w
  5200  00B8  3E03               	addlw	3
  5201  00B9  0086               	movwf	6
  5202  00BA  3001               	movlw	1	; select bank2/3
  5203  00BB  0087               	movwf	7
  5204  00BC  3001               	movlw	1
  5205  00BD  0781               	addwf	1,f
  5206  00BE  3141               	addfsr 1,1
  5207  00BF  1803               	skipnc
  5208  00C0  0A81               	incf	1,f
  5209                           
  5210                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= 150) {
  5211  00C1  0877               	movf	_Sw,w
  5212  00C2  3E03               	addlw	3
  5213  00C3  0086               	movwf	6
  5214  00C4  3001               	movlw	1	; select bank2/3
  5215  00C5  0087               	movwf	7
  5216  00C6  3F40               	moviw [0]fsr1
  5217  00C7  0020               	movlb	0	; select bank0
  5218  00C8  00EC               	movwf	??_setSw_Main
  5219  00C9  3F41               	moviw [1]fsr1
  5220  00CA  00ED               	movwf	??_setSw_Main+1
  5221  00CB  3000               	movlw	0
  5222  00CC  026D               	subwf	??_setSw_Main+1,w
  5223  00CD  3096               	movlw	150
  5224  00CE  1903               	skipnz
  5225  00CF  026C               	subwf	??_setSw_Main,w
  5226  00D0  1C03               	skipc
  5227  00D1  0008               	return
  5228                           
  5229                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  5230  00D2  0877               	movf	_Sw,w
  5231  00D3  3E03               	addlw	3
  5232  00D4  0086               	movwf	6
  5233  00D5  3001               	movlw	1	; select bank2/3
  5234  00D6  0087               	movwf	7
  5235  00D7  3000               	movlw	0
  5236  00D8  3FC0               	movwi [0]fsr1
  5237  00D9  3FC1               	movwi [1]fsr1
  5238                           
  5239                           ;Switch_B1.c: 155: Sw->Hold1 = 1;
  5240  00DA  0877               	movf	_Sw,w
  5241  00DB  0086               	movwf	6
  5242  00DC  3001               	movlw	1	; select bank2/3
  5243  00DD  0087               	movwf	7
  5244  00DE  1581               	bsf	1,3
  5245                           
  5246                           ;Switch_B1.c: 156: setDimmerLights_AdjOn(sw);
  5247  00DF  086E               	movf	setSw_Main@sw,w
  5248  00E0  3193  23F7         	fcall	_setDimmerLights_AdjOn
  5249                           
  5250                           ;Switch_B1.c: 159: }
  5251                           ;Switch_B1.c: 160: } else {
  5252  00E2  0008               	return
  5253  00E3                     l9460:	
  5254                           
  5255                           ;Switch_B1.c: 161: if (Sw->Hold2 == 0) {
  5256  00E3  0877               	movf	_Sw,w
  5257  00E4  0086               	movwf	6
  5258  00E5  3001               	movlw	1	; select bank2/3
  5259  00E6  0087               	movwf	7
  5260  00E7  1A01               	btfsc	1,4
  5261  00E8  2921               	goto	l9474
  5262                           
  5263                           ;Switch_B1.c: 162: Sw->Hold2Time++;
  5264  00E9  0877               	movf	_Sw,w
  5265  00EA  3E05               	addlw	5
  5266  00EB  0086               	movwf	6
  5267  00EC  3001               	movlw	1	; select bank2/3
  5268  00ED  0087               	movwf	7
  5269  00EE  3001               	movlw	1
  5270  00EF  0781               	addwf	1,f
  5271  00F0  3141               	addfsr 1,1
  5272  00F1  1803               	skipnc
  5273  00F2  0A81               	incf	1,f
  5274                           
  5275                           ;Switch_B1.c: 163: if (Sw->Hold2Time >= 150) {
  5276  00F3  0877               	movf	_Sw,w
  5277  00F4  3E05               	addlw	5
  5278  00F5  0086               	movwf	6
  5279  00F6  3001               	movlw	1	; select bank2/3
  5280  00F7  0087               	movwf	7
  5281  00F8  3F40               	moviw [0]fsr1
  5282  00F9  0020               	movlb	0	; select bank0
  5283  00FA  00EC               	movwf	??_setSw_Main
  5284  00FB  3F41               	moviw [1]fsr1
  5285  00FC  00ED               	movwf	??_setSw_Main+1
  5286  00FD  3000               	movlw	0
  5287  00FE  026D               	subwf	??_setSw_Main+1,w
  5288  00FF  3096               	movlw	150
  5289  0100  1903               	skipnz
  5290  0101  026C               	subwf	??_setSw_Main,w
  5291  0102  1C03               	skipc
  5292  0103  0008               	return
  5293                           
  5294                           ;Switch_B1.c: 164: Sw->Hold2Time = 0;
  5295  0104  0877               	movf	_Sw,w
  5296  0105  3E05               	addlw	5
  5297  0106  0086               	movwf	6
  5298  0107  3001               	movlw	1	; select bank2/3
  5299  0108  0087               	movwf	7
  5300  0109  3000               	movlw	0
  5301  010A  3FC0               	movwi [0]fsr1
  5302  010B  3FC1               	movwi [1]fsr1
  5303                           
  5304                           ;Switch_B1.c: 165: Sw->Hold2 = 1;
  5305  010C  0877               	movf	_Sw,w
  5306  010D  0086               	movwf	6
  5307  010E  3001               	movlw	1	; select bank2/3
  5308  010F  0087               	movwf	7
  5309  0110  1601               	bsf	1,4
  5310                           
  5311                           ;Switch_B1.c: 168: setRF_Learn(1);
  5312  0111  3001               	movlw	1
  5313  0112  3190  20E4  3180   	fcall	_setRF_Learn
  5314                           
  5315                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5316  0115  0021               	movlb	1	; select bank1
  5317  0116  1EA0               	btfss	_myMain^(0+128),5
  5318  0117  0008               	return
  5319                           
  5320                           ;Switch_B1.c: 171: setBuz(2, 100);
  5321  0118  3064               	movlw	100
  5322  0119  0020               	movlb	0	; select bank0
  5323  011A  00A9               	movwf	setBuz@time
  5324  011B  3000               	movlw	0
  5325  011C  00AA               	movwf	setBuz@time+1
  5326  011D  3002               	movlw	2
  5327  011E  3189  21F8         	fcall	_setBuz
  5328                           
  5329                           ;Switch_B1.c: 172: }
  5330                           ;Switch_B1.c: 174: }
  5331                           ;Switch_B1.c: 175: } else {
  5332  0120  0008               	return
  5333  0121                     l9474:	
  5334                           
  5335                           ;Switch_B1.c: 176: if (Sw->Hold3 == 0) {
  5336  0121  0877               	movf	_Sw,w
  5337  0122  0086               	movwf	6
  5338  0123  3001               	movlw	1	; select bank2/3
  5339  0124  0087               	movwf	7
  5340  0125  1A81               	btfsc	1,5
  5341  0126  0008               	return
  5342                           
  5343                           ;Switch_B1.c: 177: Sw->Hold3Time++;
  5344  0127  0877               	movf	_Sw,w
  5345  0128  3E07               	addlw	7
  5346  0129  0086               	movwf	6
  5347  012A  3001               	movlw	1	; select bank2/3
  5348  012B  0087               	movwf	7
  5349  012C  3001               	movlw	1
  5350  012D  0781               	addwf	1,f
  5351  012E  3141               	addfsr 1,1
  5352  012F  1803               	skipnc
  5353  0130  0A81               	incf	1,f
  5354                           
  5355                           ;Switch_B1.c: 178: if (Sw->Hold3Time >= 300) {
  5356  0131  0877               	movf	_Sw,w
  5357  0132  3E07               	addlw	7
  5358  0133  0086               	movwf	6
  5359  0134  3001               	movlw	1	; select bank2/3
  5360  0135  0087               	movwf	7
  5361  0136  3F40               	moviw [0]fsr1
  5362  0137  0020               	movlb	0	; select bank0
  5363  0138  00EC               	movwf	??_setSw_Main
  5364  0139  3F41               	moviw [1]fsr1
  5365  013A  00ED               	movwf	??_setSw_Main+1
  5366  013B  3001               	movlw	1
  5367  013C  026D               	subwf	??_setSw_Main+1,w
  5368  013D  302C               	movlw	44
  5369  013E  1903               	skipnz
  5370  013F  026C               	subwf	??_setSw_Main,w
  5371  0140  1C03               	skipc
  5372  0141  0008               	return
  5373                           
  5374                           ;Switch_B1.c: 179: Sw->Hold3Time = 0;
  5375  0142  0877               	movf	_Sw,w
  5376  0143  3E07               	addlw	7
  5377  0144  0086               	movwf	6
  5378  0145  3001               	movlw	1	; select bank2/3
  5379  0146  0087               	movwf	7
  5380  0147  3000               	movlw	0
  5381  0148  3FC0               	movwi [0]fsr1
  5382  0149  3FC1               	movwi [1]fsr1
  5383                           
  5384                           ;Switch_B1.c: 180: Sw->Hold3 = 1;
  5385  014A  0877               	movf	_Sw,w
  5386  014B  0086               	movwf	6
  5387  014C  3001               	movlw	1	; select bank2/3
  5388  014D  0087               	movwf	7
  5389  014E  1681               	bsf	1,5
  5390                           
  5391                           ;Switch_B1.c: 183: setRF_Learn(0);
  5392  014F  3000               	movlw	0
  5393  0150  3190  20E4         	fcall	_setRF_Learn
  5394                           
  5395                           ;Switch_B1.c: 186: }
  5396                           ;Switch_B1.c: 187: }
  5397                           ;Switch_B1.c: 188: }
  5398                           ;Switch_B1.c: 189: }
  5399                           ;Switch_B1.c: 190: }
  5400                           ;Switch_B1.c: 191: } else {
  5401  0152  0008               	return
  5402  0153                     l9484:	
  5403                           
  5404                           ;Switch_B1.c: 192: if (Sw->Debounce == 1) {
  5405  0153  0877               	movf	_Sw,w
  5406  0154  0086               	movwf	6
  5407  0155  3001               	movlw	1	; select bank2/3
  5408  0156  0087               	movwf	7
  5409  0157  1D01               	btfss	1,2
  5410  0158  0008               	return
  5411                           
  5412                           ;Switch_B1.c: 193: Sw->DebounceTime++;
  5413  0159  3001               	movlw	1
  5414  015A  0020               	movlb	0	; select bank0
  5415  015B  00EC               	movwf	??_setSw_Main
  5416  015C  0877               	movf	_Sw,w
  5417  015D  3E02               	addlw	2
  5418  015E  0086               	movwf	6
  5419  015F  3001               	movlw	1	; select bank2/3
  5420  0160  0087               	movwf	7
  5421  0161  086C               	movf	??_setSw_Main,w
  5422  0162  0781               	addwf	1,f
  5423                           
  5424                           ;Switch_B1.c: 194: if (Sw->DebounceTime >= 5) {
  5425  0163  0877               	movf	_Sw,w
  5426  0164  3E02               	addlw	2
  5427  0165  0086               	movwf	6
  5428  0166  3001               	movlw	1	; select bank2/3
  5429  0167  0087               	movwf	7
  5430  0168  3005               	movlw	5
  5431  0169  0201               	subwf	1,w
  5432  016A  1C03               	skipc
  5433  016B  0008               	return
  5434                           
  5435                           ;Switch_B1.c: 195: Sw->DebounceTime = 0;
  5436  016C  0877               	movf	_Sw,w
  5437  016D  3E02               	addlw	2
  5438  016E  0086               	movwf	6
  5439  016F  3001               	movlw	1	; select bank2/3
  5440  0170  0087               	movwf	7
  5441  0171  0181               	clrf	1
  5442                           
  5443                           ;Switch_B1.c: 196: Sw->Debounce = 0;
  5444  0172  0877               	movf	_Sw,w
  5445  0173  0086               	movwf	6
  5446  0174  3001               	movlw	1	; select bank2/3
  5447  0175  0087               	movwf	7
  5448  0176  1101               	bcf	1,2
  5449                           
  5450                           ;Switch_B1.c: 197: Sw->Hold1Time = 0;
  5451  0177  0877               	movf	_Sw,w
  5452  0178  3E03               	addlw	3
  5453  0179  0086               	movwf	6
  5454  017A  3001               	movlw	1	; select bank2/3
  5455  017B  0087               	movwf	7
  5456  017C  3000               	movlw	0
  5457  017D  3FC0               	movwi [0]fsr1
  5458  017E  3FC1               	movwi [1]fsr1
  5459                           
  5460                           ;Switch_B1.c: 198: Sw->Hold1 = 0;
  5461  017F  0877               	movf	_Sw,w
  5462  0180  0086               	movwf	6
  5463  0181  3001               	movlw	1	; select bank2/3
  5464  0182  0087               	movwf	7
  5465  0183  1181               	bcf	1,3
  5466                           
  5467                           ;Switch_B1.c: 199: Sw->Hold2Time = 0;
  5468  0184  0877               	movf	_Sw,w
  5469  0185  3E05               	addlw	5
  5470  0186  0086               	movwf	6
  5471  0187  3001               	movlw	1	; select bank2/3
  5472  0188  0087               	movwf	7
  5473  0189  3000               	movlw	0
  5474  018A  3FC0               	movwi [0]fsr1
  5475  018B  3FC1               	movwi [1]fsr1
  5476                           
  5477                           ;Switch_B1.c: 200: Sw->Hold2 = 0;
  5478  018C  0877               	movf	_Sw,w
  5479  018D  0086               	movwf	6
  5480  018E  3001               	movlw	1	; select bank2/3
  5481  018F  0087               	movwf	7
  5482  0190  1201               	bcf	1,4
  5483                           
  5484                           ;Switch_B1.c: 201: Sw->Hold3Time = 0;
  5485  0191  0877               	movf	_Sw,w
  5486  0192  3E07               	addlw	7
  5487  0193  0086               	movwf	6
  5488  0194  3001               	movlw	1	; select bank2/3
  5489  0195  0087               	movwf	7
  5490  0196  3000               	movlw	0
  5491  0197  3FC0               	movwi [0]fsr1
  5492  0198  3FC1               	movwi [1]fsr1
  5493                           
  5494                           ;Switch_B1.c: 202: Sw->Hold3 = 0;
  5495  0199  0877               	movf	_Sw,w
  5496  019A  0086               	movwf	6
  5497  019B  3001               	movlw	1	; select bank2/3
  5498  019C  0087               	movwf	7
  5499  019D  1281               	bcf	1,5
  5500                           
  5501                           ;Switch_B1.c: 204: if (SwDetect.Error == 0) {
  5502  019E  0021               	movlb	1	; select bank1
  5503  019F  1851               	btfsc	_SwDetect^(0+128),0
  5504  01A0  29A6               	goto	l9510
  5505                           
  5506                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5507  01A1  0020               	movlb	0	; select bank0
  5508  01A2  086E               	movf	setSw_Main@sw,w
  5509  01A3  3189  21A0  3180   	fcall	_setDimmerLights_SwOff
  5510  01A6                     l9510:	
  5511                           
  5512                           ;Switch_B1.c: 206: }
  5513                           ;Switch_B1.c: 209: setRF_Learn(0);
  5514  01A6  3000               	movlw	0
  5515  01A7  3190  20E4         	fcall	_setRF_Learn
  5516                           
  5517                           ;Switch_B1.c: 211: }
  5518                           ;Switch_B1.c: 212: }
  5519                           ;Switch_B1.c: 213: }
  5520                           ;Switch_B1.c: 214: } else {
  5521  01A9  0008               	return
  5522  01AA                     l2512:	
  5523                           
  5524                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5525  01AA  0021               	movlb	1	; select bank1
  5526  01AB  1C20               	btfss	_myMain^(0+128),0
  5527  01AC  0008               	return
  5528                           
  5529                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5530  01AD  0877               	movf	_Sw,w
  5531  01AE  0086               	movwf	6
  5532  01AF  3001               	movlw	1	; select bank2/3
  5533  01B0  0087               	movwf	7
  5534  01B1  1401               	bsf	1,0
  5535  01B2  0008               	return
  5536  01B3                     __end_of_setSw_Main:	
  5537                           
  5538                           	psect	text13
  5539  10E4                     __ptext13:	
  5540 ;; *************** function _setRF_Learn *****************
  5541 ;; Defined at:
  5542 ;;		line 23 in file "../src/RF_Control_B1.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;  command         1    wreg     unsigned char 
  5545 ;; Auto vars:     Size  Location     Type
  5546 ;;  command         1    1[BANK0 ] unsigned char 
  5547 ;; Return value:  Size  Location     Type
  5548 ;;		None               void
  5549 ;; Registers used:
  5550 ;;		wreg, status,2, status,0
  5551 ;; Tracked objects:
  5552 ;;		On entry : 0/0
  5553 ;;		On exit  : 0/0
  5554 ;;		Unchanged: 0/0
  5555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5557 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5559 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5560 ;;Total ram usage:        2 bytes
  5561 ;; Hardware stack levels used:    1
  5562 ;; Hardware stack levels required when called:    5
  5563 ;; This function calls:
  5564 ;;		Nothing
  5565 ;; This function is called by:
  5566 ;;		_setSw_Main
  5567 ;; This function uses a non-reentrant model
  5568 ;;
  5569                           
  5570                           
  5571                           ;psect for function _setRF_Learn
  5572  10E4                     _setRF_Learn:	
  5573                           
  5574                           ;incstack = 0
  5575                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5576                           ;setRF_Learn@command stored from wreg
  5577  10E4  0020               	movlb	0	; select bank0
  5578  10E5  00A1               	movwf	setRF_Learn@command
  5579                           
  5580                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5581  10E6  0821               	movf	setRF_Learn@command,w
  5582  10E7  3A01               	xorlw	1
  5583  10E8  3000               	movlw	0
  5584  10E9  1903               	skipnz
  5585  10EA  3001               	movlw	1
  5586  10EB  00A0               	movwf	??_setRF_Learn
  5587  10EC  0EA0               	swapf	??_setRF_Learn,f
  5588  10ED  0DA0               	rlf	??_setRF_Learn,f
  5589  10EE  0DA0               	rlf	??_setRF_Learn,f
  5590  10EF  0021               	movlb	1	; select bank1
  5591  10F0  083A               	movf	_RF1^(0+128),w
  5592  10F1  0020               	movlb	0	; select bank0
  5593  10F2  0620               	xorwf	??_setRF_Learn,w
  5594  10F3  39BF               	andlw	-65
  5595  10F4  0620               	xorwf	??_setRF_Learn,w
  5596  10F5  0021               	movlb	1	; select bank1
  5597  10F6  00BA               	movwf	_RF1^(0+128)
  5598  10F7  0008               	return
  5599  10F8                     __end_of_setRF_Learn:	
  5600                           
  5601                           	psect	text14
  5602  13F7                     __ptext14:	
  5603 ;; *************** function _setDimmerLights_AdjOn *****************
  5604 ;; Defined at:
  5605 ;;		line 452 in file "../src/Dimmer_B1.c"
  5606 ;; Parameters:    Size  Location     Type
  5607 ;;  sw              1    wreg     unsigned char 
  5608 ;; Auto vars:     Size  Location     Type
  5609 ;;  sw              1    2[BANK0 ] unsigned char 
  5610 ;;  idle            1    3[BANK0 ] unsigned char 
  5611 ;; Return value:  Size  Location     Type
  5612 ;;		None               void
  5613 ;; Registers used:
  5614 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5621 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5623 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5624 ;;Total ram usage:        2 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    6
  5627 ;; This function calls:
  5628 ;;		_DimmerLightsPointSelect
  5629 ;; This function is called by:
  5630 ;;		_setSw_Main
  5631 ;; This function uses a non-reentrant model
  5632 ;;
  5633                           
  5634                           
  5635                           ;psect for function _setDimmerLights_AdjOn
  5636  13F7                     _setDimmerLights_AdjOn:	
  5637                           
  5638                           ;incstack = 0
  5639                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5640                           ;setDimmerLights_AdjOn@sw stored from wreg
  5641  13F7  0020               	movlb	0	; select bank0
  5642  13F8  00A2               	movwf	setDimmerLights_AdjOn@sw
  5643                           
  5644                           ;Dimmer_B1.c: 453: DimmerLightsPointSelect(sw);
  5645  13F9  0822               	movf	setDimmerLights_AdjOn@sw,w
  5646  13FA  319F  27ED  3193   	fcall	_DimmerLightsPointSelect
  5647                           
  5648                           ;Dimmer_B1.c: 454: char idle = 0;
  5649  13FD  0020               	movlb	0	; select bank0
  5650  13FE  01A3               	clrf	setDimmerLights_AdjOn@idle
  5651                           
  5652                           ;Dimmer_B1.c: 458: if (idle == 0) {
  5653  13FF  08A3               	movf	setDimmerLights_AdjOn@idle,f
  5654  1400  1D03               	skipz
  5655  1401  0008               	return
  5656                           
  5657                           ;Dimmer_B1.c: 459: if (DimmerLights->SwFlag == 1) {
  5658  1402  0875               	movf	_DimmerLights,w
  5659  1403  3E0B               	addlw	11
  5660  1404  0086               	movwf	6
  5661  1405  3001               	movlw	1	; select bank2/3
  5662  1406  0087               	movwf	7
  5663  1407  1C81               	btfss	1,1
  5664  1408  0008               	return
  5665                           
  5666                           ;Dimmer_B1.c: 461: DimmerLights->SwAdj = 1;
  5667  1409  0875               	movf	_DimmerLights,w
  5668  140A  3E0B               	addlw	11
  5669  140B  0086               	movwf	6
  5670  140C  3001               	movlw	1	; select bank2/3
  5671  140D  0087               	movwf	7
  5672  140E  1501               	bsf	1,2
  5673                           
  5674                           ;Dimmer_B1.c: 463: DimmerLights->Status = 1;
  5675  140F  0875               	movf	_DimmerLights,w
  5676  1410  3E02               	addlw	2
  5677  1411  0086               	movwf	6
  5678  1412  3001               	movlw	1	; select bank2/3
  5679  1413  0087               	movwf	7
  5680  1414  1481               	bsf	1,1
  5681                           
  5682                           ;Dimmer_B1.c: 465: DimmerLights->TriggerAdj = 1;
  5683  1415  0875               	movf	_DimmerLights,w
  5684  1416  3E0A               	addlw	10
  5685  1417  0086               	movwf	6
  5686  1418  3001               	movlw	1	; select bank2/3
  5687  1419  0087               	movwf	7
  5688  141A  1581               	bsf	1,3
  5689                           
  5690                           ;Dimmer_B1.c: 466: DimmerLights->SwitchAdj = 1;
  5691  141B  0875               	movf	_DimmerLights,w
  5692  141C  3E0A               	addlw	10
  5693  141D  0086               	movwf	6
  5694  141E  3001               	movlw	1	; select bank2/3
  5695  141F  0087               	movwf	7
  5696  1420  1501               	bsf	1,2
  5697  1421  0008               	return
  5698  1422                     __end_of_setDimmerLights_AdjOn:	
  5699                           
  5700                           	psect	text15
  5701  1221                     __ptext15:	
  5702 ;; *************** function _getSw_KeyStatus *****************
  5703 ;; Defined at:
  5704 ;;		line 222 in file "../src/Switch_B1.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;  sw              1    wreg     unsigned char 
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  sw              1    4[BANK0 ] unsigned char 
  5709 ;;  status          1    3[BANK0 ] unsigned char 
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  1    wreg      unsigned char 
  5712 ;; Registers used:
  5713 ;;		wreg, status,2
  5714 ;; Tracked objects:
  5715 ;;		On entry : 0/0
  5716 ;;		On exit  : 0/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5720 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5721 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5722 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5723 ;;Total ram usage:        5 bytes
  5724 ;; Hardware stack levels used:    1
  5725 ;; Hardware stack levels required when called:    5
  5726 ;; This function calls:
  5727 ;;		Nothing
  5728 ;; This function is called by:
  5729 ;;		_setSw_Main
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           
  5734                           ;psect for function _getSw_KeyStatus
  5735  1221                     _getSw_KeyStatus:	
  5736                           
  5737                           ;incstack = 0
  5738                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  5739                           ;getSw_KeyStatus@sw stored from wreg
  5740  1221  0020               	movlb	0	; select bank0
  5741  1222  00A4               	movwf	getSw_KeyStatus@sw
  5742                           
  5743                           ;Switch_B1.c: 223: char status = 0;
  5744  1223  01A3               	clrf	getSw_KeyStatus@status
  5745                           
  5746                           ;Switch_B1.c: 235: if (sw == 1) {
  5747  1224  0824               	movf	getSw_KeyStatus@sw,w
  5748  1225  3A01               	xorlw	1
  5749  1226  1D03               	skipz
  5750  1227  2A30               	goto	l8962
  5751                           
  5752                           ;Switch_B1.c: 236: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  5753  1228  01A1               	clrf	_getSw_KeyStatus$5666
  5754  1229  0AA1               	incf	_getSw_KeyStatus$5666,f
  5755  122A  1F0C               	btfss	12,6	;volatile
  5756  122B  1A0C               	btfsc	12,4	;volatile
  5757  122C  2A2E               	goto	l8960
  5758  122D  01A1               	clrf	_getSw_KeyStatus$5666
  5759  122E                     l8960:	
  5760  122E  0821               	movf	_getSw_KeyStatus$5666,w
  5761  122F  2A3B               	goto	L1
  5762  1230                     l8962:	
  5763                           ;Switch_B1.c: 237: } else if (sw == 2) {
  5764                           
  5765  1230  0824               	movf	getSw_KeyStatus@sw,w
  5766  1231  3A02               	xorlw	2
  5767  1232  1D03               	skipz
  5768  1233  2A3E               	goto	l8972
  5769                           
  5770                           ;Switch_B1.c: 238: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  5771  1234  01A2               	clrf	_getSw_KeyStatus$5667
  5772  1235  0AA2               	incf	_getSw_KeyStatus$5667,f
  5773  1236  1C0C               	btfss	12,0	;volatile
  5774  1237  188D               	btfsc	13,1	;volatile
  5775  1238  2A3A               	goto	l8970
  5776  1239  01A2               	clrf	_getSw_KeyStatus$5667
  5777  123A                     l8970:	
  5778  123A  0822               	movf	_getSw_KeyStatus$5667,w
  5779  123B                     L1:	
  5780  123B  00A0               	movwf	??_getSw_KeyStatus
  5781  123C  0820               	movf	??_getSw_KeyStatus,w
  5782  123D  00A3               	movwf	getSw_KeyStatus@status
  5783  123E                     l8972:	
  5784                           
  5785                           ;Switch_B1.c: 239: }
  5786                           ;Switch_B1.c: 246: return status;
  5787  123E  0823               	movf	getSw_KeyStatus@status,w
  5788  123F  0008               	return
  5789  1240                     __end_of_getSw_KeyStatus:	
  5790                           
  5791                           	psect	text16
  5792  10D0                     __ptext16:	
  5793 ;; *************** function _SwPointSelect *****************
  5794 ;; Defined at:
  5795 ;;		line 25 in file "../src/Switch_B1.c"
  5796 ;; Parameters:    Size  Location     Type
  5797 ;;  sw              1    wreg     unsigned char 
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;  sw              1    1[BANK0 ] unsigned char 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;		None               void
  5802 ;; Registers used:
  5803 ;;		wreg
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5811 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5812 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5813 ;;Total ram usage:        2 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    5
  5816 ;; This function calls:
  5817 ;;		Nothing
  5818 ;; This function is called by:
  5819 ;;		_setSw_Main
  5820 ;; This function uses a non-reentrant model
  5821 ;;
  5822                           
  5823                           
  5824                           ;psect for function _SwPointSelect
  5825  10D0                     _SwPointSelect:	
  5826                           
  5827                           ;incstack = 0
  5828                           ; Regs used in _SwPointSelect: [wreg]
  5829                           ;SwPointSelect@sw stored from wreg
  5830  10D0  0020               	movlb	0	; select bank0
  5831  10D1  00A1               	movwf	SwPointSelect@sw
  5832                           
  5833                           ;Switch_B1.c: 28: if (sw == 1) {
  5834  10D2  0821               	movf	SwPointSelect@sw,w
  5835  10D3  3A01               	xorlw	1
  5836  10D4  1D03               	skipz
  5837  10D5  28DB               	goto	l8946
  5838                           
  5839                           ;Switch_B1.c: 29: Sw = &Sw1;
  5840  10D6  30C5               	movlw	_Sw1& (0+255)
  5841  10D7  00A0               	movwf	??_SwPointSelect
  5842  10D8  0820               	movf	??_SwPointSelect,w
  5843  10D9  00F7               	movwf	_Sw
  5844                           
  5845                           ;Switch_B1.c: 30: }
  5846  10DA  0008               	return
  5847  10DB                     l8946:	
  5848                           
  5849                           ;Switch_B1.c: 33: else if (sw == 2) {
  5850  10DB  0821               	movf	SwPointSelect@sw,w
  5851  10DC  3A02               	xorlw	2
  5852  10DD  1D03               	skipz
  5853  10DE  0008               	return
  5854                           
  5855                           ;Switch_B1.c: 34: Sw = &Sw2;
  5856  10DF  30CE               	movlw	_Sw2& (0+255)
  5857  10E0  00A0               	movwf	??_SwPointSelect
  5858  10E1  0820               	movf	??_SwPointSelect,w
  5859  10E2  00F7               	movwf	_Sw
  5860  10E3  0008               	return
  5861  10E4                     __end_of_SwPointSelect:	
  5862                           
  5863                           	psect	text17
  5864  1F07                     __ptext17:	
  5865 ;; *************** function _Switch_Initialization *****************
  5866 ;; Defined at:
  5867 ;;		line 46 in file "../src/Switch_B1.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;		None
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;		None
  5872 ;; Return value:  Size  Location     Type
  5873 ;;		None               void
  5874 ;; Registers used:
  5875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5885 ;;Total ram usage:        0 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; Hardware stack levels required when called:    8
  5888 ;; This function calls:
  5889 ;;		_TouchPower
  5890 ;;		_setSw_Initialization
  5891 ;; This function is called by:
  5892 ;;		_main
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           
  5897                           ;psect for function _Switch_Initialization
  5898  1F07                     _Switch_Initialization:	
  5899                           
  5900                           ;Switch_B1.c: 47: TouchPower();
  5901                           
  5902                           ;incstack = 0
  5903                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5904  1F07  3191  2137  319F   	fcall	_TouchPower
  5905                           
  5906                           ;Switch_B1.c: 49: WPUB1 = 0;
  5907  1F0A  0024               	movlb	4	; select bank4
  5908  1F0B  108D               	bcf	13,1	;volatile
  5909                           
  5910                           ;Switch_B1.c: 58: setSw_Initialization(1);
  5911  1F0C  3001               	movlw	1
  5912  1F0D  319E  2681  319F   	fcall	_setSw_Initialization
  5913                           
  5914                           ;Switch_B1.c: 62: setSw_Initialization(2);
  5915  1F10  3002               	movlw	2
  5916  1F11  319E  2681         	fcall	_setSw_Initialization
  5917  1F13  0008               	return
  5918  1F14                     __end_of_Switch_Initialization:	
  5919                           
  5920                           	psect	text18
  5921  1E81                     __ptext18:	
  5922 ;; *************** function _setSw_Initialization *****************
  5923 ;; Defined at:
  5924 ;;		line 93 in file "../src/Switch_B1.c"
  5925 ;; Parameters:    Size  Location     Type
  5926 ;;  sw              1    wreg     unsigned char 
  5927 ;; Auto vars:     Size  Location     Type
  5928 ;;  sw              1    4[BANK0 ] unsigned char 
  5929 ;; Return value:  Size  Location     Type
  5930 ;;		None               void
  5931 ;; Registers used:
  5932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5933 ;; Tracked objects:
  5934 ;;		On entry : 0/0
  5935 ;;		On exit  : 0/0
  5936 ;;		Unchanged: 0/0
  5937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5941 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;Total ram usage:        1 bytes
  5943 ;; Hardware stack levels used:    1
  5944 ;; Hardware stack levels required when called:    7
  5945 ;; This function calls:
  5946 ;;		_setLED
  5947 ;; This function is called by:
  5948 ;;		_Switch_Initialization
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952                           
  5953                           ;psect for function _setSw_Initialization
  5954  1E81                     _setSw_Initialization:	
  5955                           
  5956                           ;incstack = 0
  5957                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5958                           ;setSw_Initialization@sw stored from wreg
  5959  1E81  0020               	movlb	0	; select bank0
  5960  1E82  00A4               	movwf	setSw_Initialization@sw
  5961                           
  5962                           ;Switch_B1.c: 94: setLED(sw, 1);
  5963  1E83  01A2               	clrf	setLED@command
  5964  1E84  0AA2               	incf	setLED@command,f
  5965  1E85  0824               	movf	setSw_Initialization@sw,w
  5966  1E86  3188  204B         	fcall	_setLED
  5967  1E88  0008               	return
  5968  1E89                     __end_of_setSw_Initialization:	
  5969                           
  5970                           	psect	text19
  5971  1137                     __ptext19:	
  5972 ;; *************** function _TouchPower *****************
  5973 ;; Defined at:
  5974 ;;		line 10 in file "../src/Switch_B1.c"
  5975 ;; Parameters:    Size  Location     Type
  5976 ;;		None
  5977 ;; Auto vars:     Size  Location     Type
  5978 ;;		None
  5979 ;; Return value:  Size  Location     Type
  5980 ;;		None               void
  5981 ;; Registers used:
  5982 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5983 ;; Tracked objects:
  5984 ;;		On entry : 0/0
  5985 ;;		On exit  : 0/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5992 ;;Total ram usage:        0 bytes
  5993 ;; Hardware stack levels used:    1
  5994 ;; Hardware stack levels required when called:    6
  5995 ;; This function calls:
  5996 ;;		_Timeout_Counter
  5997 ;;		_set_TimeoutCleared
  5998 ;; This function is called by:
  5999 ;;		_Switch_Initialization
  6000 ;;		_Switch_Main
  6001 ;; This function uses a non-reentrant model
  6002 ;;
  6003                           
  6004                           
  6005                           ;psect for function _TouchPower
  6006  1137                     _TouchPower:	
  6007                           
  6008                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6009                           
  6010                           ;incstack = 0
  6011                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6012  1137  0020               	movlb	0	; select bank0
  6013  1138  1A8E               	btfsc	14,5	;volatile
  6014  1139  0008               	return
  6015                           
  6016                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6017  113A  0021               	movlb	1	; select bank1
  6018  113B  1C20               	btfss	_myMain^(0+128),0
  6019  113C  0008               	return
  6020  113D  2943               	goto	l9416
  6021  113E                     l2490:	
  6022                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6023                           
  6024                           
  6025                           ;Switch_B1.c: 14: RC5 = 1;
  6026  113E  0020               	movlb	0	; select bank0
  6027  113F  168E               	bsf	14,5	;volatile
  6028                           
  6029                           ;Switch_B1.c: 15: Timeout_Counter();
  6030  1140  3190  20F8  3191   	fcall	_Timeout_Counter
  6031  1143                     l9416:	
  6032  1143  0020               	movlb	0	; select bank0
  6033  1144  1A8E               	btfsc	14,5	;volatile
  6034  1145  2949               	goto	l9420
  6035  1146  0021               	movlb	1	; select bank1
  6036  1147  1D2B               	btfss	(_myMain^(0+128)+11),2
  6037  1148  293E               	goto	l2490
  6038  1149                     l9420:	
  6039                           
  6040                           ;Switch_B1.c: 16: }
  6041                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6042  1149  319E  2649         	fcall	_set_TimeoutCleared
  6043  114B  0008               	return
  6044  114C                     __end_of_TouchPower:	
  6045                           
  6046                           	psect	text20
  6047  1E30                     __ptext20:	
  6048 ;; *************** function _RF_Main *****************
  6049 ;; Defined at:
  6050 ;;		line 16 in file "../src/RF_Control_B1.c"
  6051 ;; Parameters:    Size  Location     Type
  6052 ;;		None
  6053 ;; Auto vars:     Size  Location     Type
  6054 ;;		None
  6055 ;; Return value:  Size  Location     Type
  6056 ;;		None               void
  6057 ;; Registers used:
  6058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6059 ;; Tracked objects:
  6060 ;;		On entry : 0/0
  6061 ;;		On exit  : 0/0
  6062 ;;		Unchanged: 0/0
  6063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6068 ;;Total ram usage:        0 bytes
  6069 ;; Hardware stack levels used:    1
  6070 ;; Hardware stack levels required when called:   14
  6071 ;; This function calls:
  6072 ;;		_setRF_Main
  6073 ;; This function is called by:
  6074 ;;		_main
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           
  6079                           ;psect for function _RF_Main
  6080  1E30                     _RF_Main:	
  6081                           
  6082                           ;RF_Control_B1.c: 18: setRF_Main();
  6083                           
  6084                           ;incstack = 0
  6085                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6086  1E30  3184  2470         	fcall	_setRF_Main
  6087  1E32  0008               	return
  6088  1E33                     __end_of_RF_Main:	
  6089                           
  6090                           	psect	text21
  6091  0470                     __ptext21:	
  6092 ;; *************** function _setRF_Main *****************
  6093 ;; Defined at:
  6094 ;;		line 52 in file "../src/RF_Control_B1.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;		None
  6097 ;; Auto vars:     Size  Location     Type
  6098 ;;  error           1    2[BANK3 ] unsigned char 
  6099 ;;  Receive_OK      1    1[BANK3 ] unsigned char 
  6100 ;;  loop_f          1    0[BANK3 ] unsigned char 
  6101 ;; Return value:  Size  Location     Type
  6102 ;;		None               void
  6103 ;; Registers used:
  6104 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6111 ;;      Locals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  6112 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6113 ;;      Totals:         0       0       1       0       3       0       0       0       0       0       0       0       
      +0       0
  6114 ;;Total ram usage:        4 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:   13
  6117 ;; This function calls:
  6118 ;;		_CC2500_RxData
  6119 ;;		_CC2500_TxData
  6120 ;;		_CC2500_WriteCommand
  6121 ;;		_RF_RxDisable
  6122 ;;		_getBuz_GO
  6123 ;;		_getMain_All_Error_Status
  6124 ;;		_getRF_KeyStatus
  6125 ;;		_getRxData
  6126 ;; This function is called by:
  6127 ;;		_RF_Main
  6128 ;; This function uses a non-reentrant model
  6129 ;;
  6130                           
  6131                           
  6132                           ;psect for function _setRF_Main
  6133  0470                     _setRF_Main:	
  6134                           
  6135                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6136                           
  6137                           ;incstack = 0
  6138                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6139  0470  0023               	movlb	3	; select bank3
  6140  0471  01E5               	clrf	setRF_Main@loop_f^(0+384)
  6141  0472  01E6               	clrf	setRF_Main@Receive_OK^(0+384)
  6142  0473  01E7               	clrf	setRF_Main@error^(0+384)
  6143                           
  6144                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6145  0474  0021               	movlb	1	; select bank1
  6146  0475  1C3A               	btfss	_RF1^(0+128),0
  6147  0476  2D47               	goto	l2097
  6148                           
  6149                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6150  0477  319F  2771  3184   	fcall	_getBuz_GO
  6151  047A  0020               	movlb	0	; select bank0
  6152  047B  0821               	movf	?_getBuz_GO+1,w
  6153  047C  0420               	iorwf	?_getBuz_GO,w
  6154  047D  1D03               	skipz
  6155  047E  0008               	return
  6156                           
  6157                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6158  047F  3000               	movlw	0
  6159  0480  3191  21C9  3184   	fcall	_getMain_All_Error_Status
  6160  0483  3800               	iorlw	0
  6161  0484  1D03               	skipz
  6162  0485  2C97               	goto	l2099
  6163                           
  6164                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6165  0486  319F  2782  3184   	fcall	_getRF_KeyStatus
  6166  0489  3A01               	xorlw	1
  6167  048A  3000               	movlw	0
  6168  048B  1903               	skipnz
  6169  048C  3001               	movlw	1
  6170  048D  0021               	movlb	1	; select bank1
  6171  048E  00ED               	movwf	??_setRF_Main^(0+128)
  6172  048F  0CED               	rrf	??_setRF_Main^(0+128),f
  6173  0490  0CED               	rrf	??_setRF_Main^(0+128),f
  6174  0491  083A               	movf	_RF1^(0+128),w
  6175  0492  066D               	xorwf	??_setRF_Main^(0+128),w
  6176  0493  397F               	andlw	-129
  6177  0494  066D               	xorwf	??_setRF_Main^(0+128),w
  6178  0495  00BA               	movwf	_RF1^(0+128)
  6179                           
  6180                           ;RF_Control_B1.c: 65: } else {
  6181  0496  2C99               	goto	l2100
  6182  0497                     l2099:	
  6183                           
  6184                           ;RF_Control_B1.c: 66: RF1.Key = 0;
  6185  0497  0021               	movlb	1	; select bank1
  6186  0498  13BA               	bcf	_RF1^(0+128),7
  6187  0499                     l2100:	
  6188                           
  6189                           ;RF_Control_B1.c: 67: }
  6190                           ;RF_Control_B1.c: 69: if (RF1.Key == 1 && RF1.Learn == 0) {
  6191  0499  1BBA               	btfsc	_RF1^(0+128),7
  6192  049A  1B3A               	btfsc	_RF1^(0+128),6
  6193  049B  2CA1               	goto	l2101
  6194                           
  6195                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  6196  049C  01BC               	clrf	(_RF1^(0+128)+2)
  6197  049D  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6198                           
  6199                           ;RF_Control_B1.c: 71: RF1.Run = 1;
  6200  049E  14BB               	bsf	(_RF1^(0+128)+1),1
  6201                           
  6202                           ;RF_Control_B1.c: 72: RF1.RxStatus = 0;
  6203  049F  11BA               	bcf	_RF1^(0+128),3
  6204                           
  6205                           ;RF_Control_B1.c: 73: } else {
  6206  04A0  0008               	return
  6207  04A1                     l2101:	
  6208                           
  6209                           ;RF_Control_B1.c: 74: if (RF1.Run == 1 && RF1.Learn == 0) {
  6210  04A1  18BB               	btfsc	(_RF1^(0+128)+1),1
  6211  04A2  1B3A               	btfsc	_RF1^(0+128),6
  6212  04A3  2CB8               	goto	l9334
  6213                           
  6214                           ;RF_Control_B1.c: 75: RF1.Count++;
  6215  04A4  3001               	movlw	1
  6216  04A5  07BC               	addwf	(_RF1^(0+128)+2),f
  6217  04A6  3000               	movlw	0
  6218  04A7  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6219                           
  6220                           ;RF_Control_B1.c: 76: if (RF1.Count == RF1.RunTime) {
  6221  04A8  3002               	movlw	2
  6222  04A9  3EBA               	addlw	_RF1& (0+255)
  6223  04AA  0086               	movwf	6
  6224  04AB  0187               	clrf	7
  6225  04AC  3F40               	moviw [0]fsr1
  6226  04AD  0641               	xorwf	(_RF1^(0+128)+7),w
  6227  04AE  1D03               	skipz
  6228  04AF  2CB2               	goto	u9975
  6229  04B0  3F41               	moviw [1]fsr1
  6230  04B1  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6231  04B2                     u9975:	
  6232  04B2  1D03               	skipz
  6233  04B3  2D14               	goto	l9386
  6234                           
  6235                           ;RF_Control_B1.c: 77: RF1.Count = 0;
  6236  04B4  01BC               	clrf	(_RF1^(0+128)+2)
  6237  04B5  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6238                           
  6239                           ;RF_Control_B1.c: 78: RF1.Run = 0;
  6240  04B6  10BB               	bcf	(_RF1^(0+128)+1),1
  6241                           
  6242                           ;RF_Control_B1.c: 79: }
  6243                           ;RF_Control_B1.c: 80: } else {
  6244  04B7  2D14               	goto	l9386
  6245  04B8                     l9334:	
  6246                           
  6247                           ;RF_Control_B1.c: 81: RF1.Count = 0;
  6248  04B8  01BC               	clrf	(_RF1^(0+128)+2)
  6249  04B9  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6250                           
  6251                           ;RF_Control_B1.c: 82: RF1.Run = 0;
  6252  04BA  10BB               	bcf	(_RF1^(0+128)+1),1
  6253                           
  6254                           ;RF_Control_B1.c: 84: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6255  04BB  193A               	btfsc	_RF1^(0+128),2
  6256  04BC  1B3A               	btfsc	_RF1^(0+128),6
  6257  04BD  2CCC               	goto	l2106
  6258                           
  6259                           ;RF_Control_B1.c: 85: RF1.TransceiveGO = 0;
  6260  04BE  113A               	bcf	_RF1^(0+128),2
  6261                           
  6262                           ;RF_Control_B1.c: 86: RF1.RxStatus = 0;
  6263  04BF  11BA               	bcf	_RF1^(0+128),3
  6264                           
  6265                           ;RF_Control_B1.c: 87: RF1.ReceiveGO = 0;
  6266  04C0  10BA               	bcf	_RF1^(0+128),1
  6267                           
  6268                           ;RF_Control_B1.c: 88: RF1.RunTime = 5;
  6269  04C1  3005               	movlw	5
  6270  04C2  00C1               	movwf	(_RF1^(0+128)+7)
  6271  04C3  3000               	movlw	0
  6272  04C4  00C2               	movwf	(_RF1^(0+128)+8)
  6273                           
  6274                           ;RF_Control_B1.c: 92: RF_RxDisable();
  6275  04C5  319F  2731  3184   	fcall	_RF_RxDisable
  6276                           
  6277                           ;RF_Control_B1.c: 99: CC2500_TxData();
  6278  04C8  318B  23CF  3184   	fcall	_CC2500_TxData
  6279                           
  6280                           ;RF_Control_B1.c: 101: } else {
  6281  04CB  2D14               	goto	l9386
  6282  04CC                     l2106:	
  6283                           
  6284                           ;RF_Control_B1.c: 103: if (RF1.RxStatus == 1) {
  6285  04CC  1DBA               	btfss	_RF1^(0+128),3
  6286  04CD  2D03               	goto	l2108
  6287                           
  6288                           ;RF_Control_B1.c: 105: CC2500_RxData();
  6289  04CE  318D  2564  3184   	fcall	_CC2500_RxData
  6290                           
  6291                           ;RF_Control_B1.c: 107: if (RF1.ReceiveGO == 1) {
  6292  04D1  0021               	movlb	1	; select bank1
  6293  04D2  1CBA               	btfss	_RF1^(0+128),1
  6294  04D3  2D14               	goto	l9386
  6295                           
  6296                           ;RF_Control_B1.c: 108: RF1.ReceiveGO = 0;
  6297  04D4  10BA               	bcf	_RF1^(0+128),1
  6298                           
  6299                           ;RF_Control_B1.c: 109: RF1.Correction = 0;
  6300  04D5  12BB               	bcf	(_RF1^(0+128)+1),5
  6301                           
  6302                           ;RF_Control_B1.c: 110: RF1.CorrectionCounter = 0;
  6303  04D6  01C4               	clrf	(_RF1^(0+128)+10)
  6304  04D7  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6305                           
  6306                           ;RF_Control_B1.c: 121: getRxData();
  6307  04D8  318E  26CC  3184   	fcall	_getRxData
  6308                           
  6309                           ;RF_Control_B1.c: 122: RF1.Run = 1;
  6310  04DB  0021               	movlb	1	; select bank1
  6311  04DC  14BB               	bsf	(_RF1^(0+128)+1),1
  6312                           
  6313                           ;RF_Control_B1.c: 124: if (RF1.Checked == 1) {
  6314  04DD  1DBB               	btfss	(_RF1^(0+128)+1),3
  6315  04DE  2CEC               	goto	l9370
  6316                           
  6317                           ;RF_Control_B1.c: 125: if (RF1.RunTime > 5) {
  6318  04DF  3000               	movlw	0
  6319  04E0  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6320  04E1  3006               	movlw	6
  6321  04E2  1903               	skipnz
  6322  04E3  0241               	subwf	(_RF1^(0+128)+7),w
  6323  04E4  1C03               	skipc
  6324  04E5  2CEA               	goto	l9368
  6325                           
  6326                           ;RF_Control_B1.c: 126: RF1.RunTime = 5;
  6327  04E6  3005               	movlw	5
  6328  04E7  00C1               	movwf	(_RF1^(0+128)+7)
  6329  04E8  3000               	movlw	0
  6330  04E9  00C2               	movwf	(_RF1^(0+128)+8)
  6331  04EA                     l9368:	
  6332                           
  6333                           ;RF_Control_B1.c: 127: }
  6334                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  6335  04EA  01BE               	clrf	(_RF1^(0+128)+4)
  6336                           
  6337                           ;RF_Control_B1.c: 129: } else {
  6338  04EB  2D14               	goto	l9386
  6339  04EC                     l9370:	
  6340                           
  6341                           ;RF_Control_B1.c: 130: RF1.CheckCount++;
  6342  04EC  3001               	movlw	1
  6343  04ED  00ED               	movwf	??_setRF_Main^(0+128)
  6344  04EE  086D               	movf	??_setRF_Main^(0+128),w
  6345  04EF  07BE               	addwf	(_RF1^(0+128)+4),f
  6346                           
  6347                           ;RF_Control_B1.c: 131: if (RF1.CheckCount == 2) {
  6348  04F0  083E               	movf	(_RF1^(0+128)+4),w
  6349  04F1  3A02               	xorlw	2
  6350  04F2  1D03               	skipz
  6351  04F3  2D14               	goto	l9386
  6352                           
  6353                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  6354  04F4  01BE               	clrf	(_RF1^(0+128)+4)
  6355                           
  6356                           ;RF_Control_B1.c: 133: RF1.CheckedCounter = 0;
  6357  04F5  01BF               	clrf	(_RF1^(0+128)+5)
  6358  04F6  01C0               	clrf	((_RF1+1)^(0+128)+5)
  6359                           
  6360                           ;RF_Control_B1.c: 135: if (RF1.RunTime < (5 * 20)) {
  6361  04F7  3000               	movlw	0
  6362  04F8  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6363  04F9  3064               	movlw	100
  6364  04FA  1903               	skipnz
  6365  04FB  0241               	subwf	(_RF1^(0+128)+7),w
  6366  04FC  1803               	skipnc
  6367  04FD  2D14               	goto	l9386
  6368                           
  6369                           ;RF_Control_B1.c: 136: RF1.RunTime += 5;
  6370  04FE  3005               	movlw	5
  6371  04FF  07C1               	addwf	(_RF1^(0+128)+7),f
  6372  0500  3000               	movlw	0
  6373  0501  3DC2               	addwfc	((_RF1+1)^(0+128)+7),f
  6374                           
  6375                           ;RF_Control_B1.c: 137: }
  6376                           ;RF_Control_B1.c: 138: }
  6377                           ;RF_Control_B1.c: 139: }
  6378                           ;RF_Control_B1.c: 140: }
  6379                           ;RF_Control_B1.c: 141: } else {
  6380  0502  2D14               	goto	l9386
  6381  0503                     l2108:	
  6382                           
  6383                           ;RF_Control_B1.c: 143: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6384  0503  1DBA               	btfss	_RF1^(0+128),3
  6385  0504  18BA               	btfsc	_RF1^(0+128),1
  6386  0505  2D14               	goto	l9386
  6387                           
  6388                           ;RF_Control_B1.c: 144: RF1.RxStatus = 1;
  6389  0506  15BA               	bsf	_RF1^(0+128),3
  6390                           
  6391                           ;RF_Control_B1.c: 145: RF1.Correction = 1;
  6392  0507  16BB               	bsf	(_RF1^(0+128)+1),5
  6393                           
  6394                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x36);
  6395  0508  3036               	movlw	54
  6396  0509  3191  2195  3184   	fcall	_CC2500_WriteCommand
  6397                           
  6398                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x3A);
  6399  050C  303A               	movlw	58
  6400  050D  3191  2195  3184   	fcall	_CC2500_WriteCommand
  6401                           
  6402                           ;RF_Control_B1.c: 150: CC2500_WriteCommand(0x34);
  6403  0510  3034               	movlw	52
  6404  0511  3191  2195  3184   	fcall	_CC2500_WriteCommand
  6405  0514                     l9386:	
  6406                           
  6407                           ;RF_Control_B1.c: 151: }
  6408                           ;RF_Control_B1.c: 153: }
  6409                           ;RF_Control_B1.c: 154: }
  6410                           ;RF_Control_B1.c: 155: }
  6411                           ;RF_Control_B1.c: 157: if (RF1.RxStatus == 1) {
  6412  0514  0021               	movlb	1	; select bank1
  6413  0515  1DBA               	btfss	_RF1^(0+128),3
  6414  0516  2D35               	goto	l9398
  6415                           
  6416                           ;RF_Control_B1.c: 158: RF1.CheckedCounter++;
  6417  0517  3001               	movlw	1
  6418  0518  07BF               	addwf	(_RF1^(0+128)+5),f
  6419  0519  3000               	movlw	0
  6420  051A  3DC0               	addwfc	((_RF1+1)^(0+128)+5),f
  6421                           
  6422                           ;RF_Control_B1.c: 159: if (RF1.CheckedCounter == 100) {
  6423  051B  3005               	movlw	5
  6424  051C  3EBA               	addlw	_RF1& (0+255)
  6425  051D  0086               	movwf	6
  6426  051E  0187               	clrf	7
  6427  051F  3F40               	moviw [0]fsr1
  6428  0520  3A64               	xorlw	100
  6429  0521  1D03               	skipz
  6430  0522  2D25               	goto	u10095
  6431  0523  3F41               	moviw [1]fsr1
  6432  0524  3A00               	xorlw	0
  6433  0525                     u10095:	
  6434  0525  1D03               	skipz
  6435  0526  2D35               	goto	l9398
  6436                           
  6437                           ;RF_Control_B1.c: 160: RF1.CheckedCounter = 0;
  6438  0527  01BF               	clrf	(_RF1^(0+128)+5)
  6439  0528  01C0               	clrf	((_RF1+1)^(0+128)+5)
  6440                           
  6441                           ;RF_Control_B1.c: 161: RF1.CheckCount = 0;
  6442  0529  01BE               	clrf	(_RF1^(0+128)+4)
  6443                           
  6444                           ;RF_Control_B1.c: 162: if (RF1.RunTime > 5) {
  6445  052A  3000               	movlw	0
  6446  052B  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6447  052C  3006               	movlw	6
  6448  052D  1903               	skipnz
  6449  052E  0241               	subwf	(_RF1^(0+128)+7),w
  6450  052F  1C03               	skipc
  6451  0530  2D35               	goto	l9398
  6452                           
  6453                           ;RF_Control_B1.c: 163: RF1.RunTime -= 5;
  6454  0531  3005               	movlw	5
  6455  0532  02C1               	subwf	(_RF1^(0+128)+7),f
  6456  0533  3000               	movlw	0
  6457  0534  3BC2               	subwfb	((_RF1+1)^(0+128)+7),f
  6458  0535                     l9398:	
  6459                           
  6460                           ;RF_Control_B1.c: 164: }
  6461                           ;RF_Control_B1.c: 165: }
  6462                           ;RF_Control_B1.c: 166: }
  6463                           ;RF_Control_B1.c: 167: if (RF1.Correction == 1) {
  6464  0535  1EBB               	btfss	(_RF1^(0+128)+1),5
  6465  0536  0008               	return
  6466                           
  6467                           ;RF_Control_B1.c: 168: RF1.CorrectionCounter++;
  6468  0537  3001               	movlw	1
  6469  0538  07C4               	addwf	(_RF1^(0+128)+10),f
  6470  0539  3000               	movlw	0
  6471  053A  3DC5               	addwfc	((_RF1+1)^(0+128)+10),f
  6472                           
  6473                           ;RF_Control_B1.c: 169: if (RF1.CorrectionCounter >= 6000) {
  6474  053B  3017               	movlw	23
  6475  053C  0245               	subwf	((_RF1+1)^(0+128)+10),w
  6476  053D  3070               	movlw	112
  6477  053E  1903               	skipnz
  6478  053F  0244               	subwf	(_RF1^(0+128)+10),w
  6479  0540  1C03               	skipc
  6480  0541  0008               	return
  6481                           
  6482                           ;RF_Control_B1.c: 170: RF1.CorrectionCounter = 0;
  6483  0542  01C4               	clrf	(_RF1^(0+128)+10)
  6484  0543  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6485                           
  6486                           ;RF_Control_B1.c: 171: RF_RxDisable();
  6487  0544  319F  2731         	fcall	_RF_RxDisable
  6488                           
  6489                           ;RF_Control_B1.c: 172: }
  6490                           ;RF_Control_B1.c: 173: }
  6491                           ;RF_Control_B1.c: 174: }
  6492                           ;RF_Control_B1.c: 175: }
  6493                           ;RF_Control_B1.c: 182: } else {
  6494  0546  0008               	return
  6495  0547                     l2097:	
  6496                           
  6497                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  6498  0547  1C20               	btfss	_myMain^(0+128),0
  6499  0548  0008               	return
  6500                           
  6501                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  6502  0549  143A               	bsf	_RF1^(0+128),0
  6503  054A  0008               	return
  6504  054B                     __end_of_setRF_Main:	
  6505                           
  6506                           	psect	text22
  6507  0ECC                     __ptext22:	
  6508 ;; *************** function _getRxData *****************
  6509 ;; Defined at:
  6510 ;;		line 278 in file "../src/RF_Control_B1.c"
  6511 ;; Parameters:    Size  Location     Type
  6512 ;;		None
  6513 ;; Auto vars:     Size  Location     Type
  6514 ;;  error           1    4[BANK1 ] unsigned char 
  6515 ;; Return value:  Size  Location     Type
  6516 ;;		None               void
  6517 ;; Registers used:
  6518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6519 ;; Tracked objects:
  6520 ;;		On entry : 0/0
  6521 ;;		On exit  : 0/0
  6522 ;;		Unchanged: 0/0
  6523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6525 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6526 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;Total ram usage:        2 bytes
  6529 ;; Hardware stack levels used:    1
  6530 ;; Hardware stack levels required when called:   12
  6531 ;; This function calls:
  6532 ;;		_getMain_All_Error_Status
  6533 ;;		_setControl_Lights_Table
  6534 ;;		_setLog_Code
  6535 ;;		_setTxData
  6536 ;; This function is called by:
  6537 ;;		_setRF_Main
  6538 ;; This function uses a non-reentrant model
  6539 ;;
  6540                           
  6541                           
  6542                           ;psect for function _getRxData
  6543  0ECC                     _getRxData:	
  6544                           
  6545                           ;RF_Control_B1.c: 279: char error = getMain_All_Error_Status(0);
  6546                           
  6547                           ;incstack = 0
  6548                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6549  0ECC  3000               	movlw	0
  6550  0ECD  3191  21C9  318E   	fcall	_getMain_All_Error_Status
  6551  0ED0  0020               	movlb	0	; select bank0
  6552  0ED1  00EF               	movwf	??_getRxData
  6553  0ED2  086F               	movf	??_getRxData,w
  6554  0ED3  0021               	movlb	1	; select bank1
  6555  0ED4  00EC               	movwf	getRxData@error^(0+128)
  6556                           
  6557                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6558  0ED5  0022               	movlb	2	; select bank2
  6559  0ED6  0820               	movf	_RF_Data^(0+256),w
  6560  0ED7  3AAA               	xorlw	170
  6561  0ED8  1D03               	skipz
  6562  0ED9  2EF0               	goto	l8896
  6563  0EDA  0821               	movf	(_RF_Data^(0+256)+1),w
  6564  0EDB  3A01               	xorlw	1
  6565  0EDC  1D03               	skipz
  6566  0EDD  2EF0               	goto	l8896
  6567                           
  6568                           ;RF_Control_B1.c: 282: product->Data[2] = 0x55;
  6569  0EDE  3055               	movlw	85
  6570  0EDF  0020               	movlb	0	; select bank0
  6571  0EE0  00EF               	movwf	??_getRxData
  6572  0EE1  0879               	movf	_product,w
  6573  0EE2  3E02               	addlw	2
  6574  0EE3  0086               	movwf	6
  6575  0EE4  3002               	movlw	2	; select bank4/5
  6576  0EE5  0087               	movwf	7
  6577  0EE6  086F               	movf	??_getRxData,w
  6578  0EE7  0081               	movwf	1
  6579                           
  6580                           ;RF_Control_B1.c: 283: setTxData();
  6581  0EE8  3187  275F         	fcall	_setTxData
  6582                           
  6583                           ;RF_Control_B1.c: 284: RF1.RunTime = 10;
  6584  0EEA  300A               	movlw	10
  6585  0EEB  0021               	movlb	1	; select bank1
  6586  0EEC  00C1               	movwf	(_RF1^(0+128)+7)
  6587  0EED  3000               	movlw	0
  6588  0EEE  00C2               	movwf	(_RF1^(0+128)+8)
  6589                           
  6590                           ;RF_Control_B1.c: 290: } else {
  6591  0EEF  0008               	return
  6592  0EF0                     l8896:	
  6593                           
  6594                           ;RF_Control_B1.c: 292: if (error == 0) {
  6595  0EF0  0021               	movlb	1	; select bank1
  6596  0EF1  08EC               	movf	getRxData@error^(0+128),f
  6597  0EF2  1D03               	skipz
  6598  0EF3  0008               	return
  6599                           
  6600                           ;RF_Control_B1.c: 293: if (RF1.Learn == 1) {
  6601  0EF4  1F3A               	btfss	_RF1^(0+128),6
  6602  0EF5  2F06               	goto	l8908
  6603                           
  6604                           ;RF_Control_B1.c: 294: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6605  0EF6  0022               	movlb	2	; select bank2
  6606  0EF7  08A0               	movf	_RF_Data^(0+256),f
  6607  0EF8  1D03               	skipz
  6608  0EF9  2F03               	goto	l2150
  6609  0EFA  0821               	movf	(_RF_Data^(0+256)+1),w
  6610  0EFB  3A64               	xorlw	100
  6611  0EFC  1D03               	skipz
  6612  0EFD  2F03               	goto	l2150
  6613                           
  6614                           ;RF_Control_B1.c: 295: setLog_Code();
  6615  0EFE  3194  24AD         	fcall	_setLog_Code
  6616                           
  6617                           ;RF_Control_B1.c: 296: RF1.Checked = 1;
  6618  0F00  0021               	movlb	1	; select bank1
  6619  0F01  15BB               	bsf	(_RF1^(0+128)+1),3
  6620                           
  6621                           ;RF_Control_B1.c: 297: } else {
  6622  0F02  0008               	return
  6623  0F03                     l2150:	
  6624                           
  6625                           ;RF_Control_B1.c: 298: RF1.Checked = 0;
  6626  0F03  0021               	movlb	1	; select bank1
  6627  0F04  11BB               	bcf	(_RF1^(0+128)+1),3
  6628                           
  6629                           ;RF_Control_B1.c: 299: }
  6630                           ;RF_Control_B1.c: 300: } else {
  6631  0F05  0008               	return
  6632  0F06                     l8908:	
  6633                           
  6634                           ;RF_Control_B1.c: 301: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6635  0F06  0022               	movlb	2	; select bank2
  6636  0F07  08A0               	movf	_RF_Data^(0+256),f
  6637  0F08  1D03               	skipz
  6638  0F09  2F3F               	goto	l8930
  6639  0F0A  0821               	movf	(_RF_Data^(0+256)+1),w
  6640  0F0B  3A02               	xorlw	2
  6641  0F0C  1D03               	skipz
  6642  0F0D  2F3F               	goto	l8930
  6643                           
  6644                           ;RF_Control_B1.c: 303: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6645  0F0E  082C               	movf	(_RF_Data^(0+256)+12),w
  6646  0F0F  3AFF               	xorlw	255
  6647  0F10  1D03               	skipz
  6648  0F11  2F1E               	goto	l8920
  6649  0F12  082D               	movf	(_RF_Data^(0+256)+13),w
  6650  0F13  3AFF               	xorlw	255
  6651  0F14  1D03               	skipz
  6652  0F15  2F1E               	goto	l8920
  6653  0F16  082E               	movf	(_RF_Data^(0+256)+14),w
  6654  0F17  3AFF               	xorlw	255
  6655  0F18  1D03               	skipz
  6656  0F19  2F1E               	goto	l8920
  6657                           
  6658                           ;RF_Control_B1.c: 304: __nop();
  6659  0F1A  0000               	nop
  6660                           
  6661                           ;RF_Control_B1.c: 305: RF1.Checked = 0;
  6662  0F1B  0021               	movlb	1	; select bank1
  6663  0F1C  11BB               	bcf	(_RF1^(0+128)+1),3
  6664                           
  6665                           ;RF_Control_B1.c: 306: } else {
  6666  0F1D  0008               	return
  6667  0F1E                     l8920:	
  6668                           
  6669                           ;RF_Control_B1.c: 307: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6670  0F1E  0879               	movf	_product,w
  6671  0F1F  3E0C               	addlw	12
  6672  0F20  0086               	movwf	6
  6673  0F21  3002               	movlw	2	; select bank4/5
  6674  0F22  0087               	movwf	7
  6675  0F23  0022               	movlb	2	; select bank2
  6676  0F24  082C               	movf	(_RF_Data^(0+256)+12),w
  6677  0F25  0601               	xorwf	1,w
  6678  0F26  1D03               	skipz
  6679  0F27  0008               	return
  6680  0F28  0879               	movf	_product,w
  6681  0F29  3E0D               	addlw	13
  6682  0F2A  0086               	movwf	6
  6683  0F2B  3002               	movlw	2	; select bank4/5
  6684  0F2C  0087               	movwf	7
  6685  0F2D  082D               	movf	(_RF_Data^(0+256)+13),w
  6686  0F2E  0601               	xorwf	1,w
  6687  0F2F  1D03               	skipz
  6688  0F30  0008               	return
  6689  0F31  0879               	movf	_product,w
  6690  0F32  3E0E               	addlw	14
  6691  0F33  0086               	movwf	6
  6692  0F34  3002               	movlw	2	; select bank4/5
  6693  0F35  0087               	movwf	7
  6694  0F36  082E               	movf	(_RF_Data^(0+256)+14),w
  6695  0F37  0601               	xorwf	1,w
  6696  0F38  1D03               	skipz
  6697  0F39  0008               	return
  6698                           
  6699                           ;RF_Control_B1.c: 308: setControl_Lights_Table();
  6700  0F3A  318C  24FD         	fcall	_setControl_Lights_Table
  6701                           
  6702                           ;RF_Control_B1.c: 309: RF1.Checked = 1;
  6703  0F3C  0021               	movlb	1	; select bank1
  6704  0F3D  15BB               	bsf	(_RF1^(0+128)+1),3
  6705                           
  6706                           ;RF_Control_B1.c: 310: }
  6707                           ;RF_Control_B1.c: 311: }
  6708                           ;RF_Control_B1.c: 312: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6709  0F3E  0008               	return
  6710  0F3F                     l8930:	
  6711  0F3F  0022               	movlb	2	; select bank2
  6712  0F40  0820               	movf	_RF_Data^(0+256),w
  6713  0F41  3AFF               	xorlw	255
  6714  0F42  1D03               	skipz
  6715  0F43  2F4A               	goto	l8936
  6716  0F44  0821               	movf	(_RF_Data^(0+256)+1),w
  6717  0F45  3A02               	xorlw	2
  6718  0F46  1D03               	skipz
  6719  0F47  2F4A               	goto	l8936
  6720                           
  6721                           ;RF_Control_B1.c: 313: __nop();
  6722  0F48  0000               	nop
  6723                           
  6724                           ;RF_Control_B1.c: 314: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6725  0F49  0008               	return
  6726  0F4A                     l8936:	
  6727  0F4A  0022               	movlb	2	; select bank2
  6728  0F4B  08A0               	movf	_RF_Data^(0+256),f
  6729  0F4C  1D03               	skipz
  6730  0F4D  2F54               	goto	l2160
  6731  0F4E  0821               	movf	(_RF_Data^(0+256)+1),w
  6732  0F4F  3A65               	xorlw	101
  6733  0F50  1D03               	skipz
  6734  0F51  2F54               	goto	l2160
  6735                           
  6736                           ;RF_Control_B1.c: 315: __nop();
  6737  0F52  0000               	nop
  6738                           
  6739                           ;RF_Control_B1.c: 316: } else {
  6740  0F53  0008               	return
  6741  0F54                     l2160:	
  6742                           
  6743                           ;RF_Control_B1.c: 317: RF1.Checked = 0;
  6744  0F54  0021               	movlb	1	; select bank1
  6745  0F55  11BB               	bcf	(_RF1^(0+128)+1),3
  6746                           
  6747                           ;RF_Control_B1.c: 325: ;
  6748                           
  6749                           ;RF_Control_B1.c: 318: }
  6750                           ;RF_Control_B1.c: 323: }
  6751                           ;RF_Control_B1.c: 324: } else {
  6752  0F56  0008               	return
  6753  0F57                     __end_of_getRxData:	
  6754                           
  6755                           	psect	text23
  6756  14AD                     __ptext23:	
  6757 ;; *************** function _setLog_Code *****************
  6758 ;; Defined at:
  6759 ;;		line 331 in file "../src/RF_Control_B1.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;		None
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;		None
  6764 ;; Return value:  Size  Location     Type
  6765 ;;		None               void
  6766 ;; Registers used:
  6767 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6775 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6776 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6777 ;;Total ram usage:        1 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; Hardware stack levels required when called:    7
  6780 ;; This function calls:
  6781 ;;		_setBuz
  6782 ;;		_setMemory_LoopSave
  6783 ;;		_setMemory_Modify
  6784 ;;		_setProductData
  6785 ;; This function is called by:
  6786 ;;		_getRxData
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           
  6791                           ;psect for function _setLog_Code
  6792  14AD                     _setLog_Code:	
  6793                           
  6794                           ;RF_Control_B1.c: 332: RF1.Learn = 0;
  6795                           
  6796                           ;incstack = 0
  6797                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6798  14AD  0021               	movlb	1	; select bank1
  6799  14AE  133A               	bcf	_RF1^(0+128),6
  6800                           
  6801                           ;RF_Control_B1.c: 333: setProductData(12, RF_Data[12]);
  6802  14AF  0022               	movlb	2	; select bank2
  6803  14B0  082C               	movf	(_RF_Data^(0+256)+12),w
  6804  14B1  0020               	movlb	0	; select bank0
  6805  14B2  00E6               	movwf	??_setLog_Code
  6806  14B3  0866               	movf	??_setLog_Code,w
  6807  14B4  00E2               	movwf	setProductData@value
  6808  14B5  300C               	movlw	12
  6809  14B6  319F  2714  3194   	fcall	_setProductData
  6810                           
  6811                           ;RF_Control_B1.c: 334: setProductData(13, RF_Data[13]);
  6812  14B9  0022               	movlb	2	; select bank2
  6813  14BA  082D               	movf	(_RF_Data^(0+256)+13),w
  6814  14BB  0020               	movlb	0	; select bank0
  6815  14BC  00E6               	movwf	??_setLog_Code
  6816  14BD  0866               	movf	??_setLog_Code,w
  6817  14BE  00E2               	movwf	setProductData@value
  6818  14BF  300D               	movlw	13
  6819  14C0  319F  2714  3194   	fcall	_setProductData
  6820                           
  6821                           ;RF_Control_B1.c: 335: setProductData(14, RF_Data[14]);
  6822  14C3  0022               	movlb	2	; select bank2
  6823  14C4  082E               	movf	(_RF_Data^(0+256)+14),w
  6824  14C5  0020               	movlb	0	; select bank0
  6825  14C6  00E6               	movwf	??_setLog_Code
  6826  14C7  0866               	movf	??_setLog_Code,w
  6827  14C8  00E2               	movwf	setProductData@value
  6828  14C9  300E               	movlw	14
  6829  14CA  319F  2714  3194   	fcall	_setProductData
  6830                           
  6831                           ;RF_Control_B1.c: 336: setBuz(1, 100);
  6832  14CD  3064               	movlw	100
  6833  14CE  0020               	movlb	0	; select bank0
  6834  14CF  00A9               	movwf	setBuz@time
  6835  14D0  3000               	movlw	0
  6836  14D1  00AA               	movwf	setBuz@time+1
  6837  14D2  3001               	movlw	1
  6838  14D3  3189  21F8  3194   	fcall	_setBuz
  6839                           
  6840                           ;RF_Control_B1.c: 337: if (myMain.First == 1) {
  6841  14D6  0021               	movlb	1	; select bank1
  6842  14D7  1EA0               	btfss	_myMain^(0+128),5
  6843  14D8  2CDD               	goto	l2166
  6844                           
  6845                           ;RF_Control_B1.c: 338: setMemory_LoopSave(1);
  6846  14D9  3001               	movlw	1
  6847  14DA  3190  2095  3194   	fcall	_setMemory_LoopSave
  6848  14DD                     l2166:	
  6849                           
  6850                           ;RF_Control_B1.c: 339: }
  6851                           ;RF_Control_B1.c: 340: setMemory_Modify(1);
  6852  14DD  3001               	movlw	1
  6853  14DE  3190  2082         	fcall	_setMemory_Modify
  6854  14E0  0008               	return
  6855  14E1                     __end_of_setLog_Code:	
  6856                           
  6857                           	psect	text24
  6858  1095                     __ptext24:	
  6859 ;; *************** function _setMemory_LoopSave *****************
  6860 ;; Defined at:
  6861 ;;		line 1070 in file "../src/MCU_B1.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;  command         1    wreg     unsigned char 
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;  command         1    1[BANK0 ] unsigned char 
  6866 ;; Return value:  Size  Location     Type
  6867 ;;		None               void
  6868 ;; Registers used:
  6869 ;;		wreg, status,2, status,0
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;Total ram usage:        2 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; Hardware stack levels required when called:    5
  6882 ;; This function calls:
  6883 ;;		Nothing
  6884 ;; This function is called by:
  6885 ;;		_setLog_Code
  6886 ;; This function uses a non-reentrant model
  6887 ;;
  6888                           
  6889                           
  6890                           ;psect for function _setMemory_LoopSave
  6891  1095                     _setMemory_LoopSave:	
  6892                           
  6893                           ;incstack = 0
  6894                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  6895                           ;setMemory_LoopSave@command stored from wreg
  6896  1095  0020               	movlb	0	; select bank0
  6897  1096  00A1               	movwf	setMemory_LoopSave@command
  6898                           
  6899                           ;MCU_B1.c: 1071: Memory.LoopSave = command == 1 ? 1 : 0;
  6900  1097  0821               	movf	setMemory_LoopSave@command,w
  6901  1098  3A01               	xorlw	1
  6902  1099  3000               	movlw	0
  6903  109A  1903               	skipnz
  6904  109B  3001               	movlw	1
  6905  109C  00A0               	movwf	??_setMemory_LoopSave
  6906  109D  0DA0               	rlf	??_setMemory_LoopSave,f
  6907  109E  0DA0               	rlf	??_setMemory_LoopSave,f
  6908  109F  0023               	movlb	3	; select bank3
  6909  10A0  0844               	movf	(_Memory^(0+384)+36),w
  6910  10A1  0020               	movlb	0	; select bank0
  6911  10A2  0620               	xorwf	??_setMemory_LoopSave,w
  6912  10A3  39FB               	andlw	-5
  6913  10A4  0620               	xorwf	??_setMemory_LoopSave,w
  6914  10A5  0023               	movlb	3	; select bank3
  6915  10A6  00C4               	movwf	(_Memory^(0+384)+36)
  6916  10A7  0008               	return
  6917  10A8                     __end_of_setMemory_LoopSave:	
  6918                           
  6919                           	psect	text25
  6920  0CFD                     __ptext25:	
  6921 ;; *************** function _setControl_Lights_Table *****************
  6922 ;; Defined at:
  6923 ;;		line 344 in file "../src/RF_Control_B1.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;		None
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;		None
  6928 ;; Return value:  Size  Location     Type
  6929 ;;		None               void
  6930 ;; Registers used:
  6931 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;Total ram usage:        0 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:   11
  6944 ;; This function calls:
  6945 ;;		_setBuz
  6946 ;;		_setDimmerLights_ErrorClose
  6947 ;;		_setProductData
  6948 ;;		_setRFSW_AdjControl
  6949 ;;		_setRFSW_Control
  6950 ;;		_setTxData
  6951 ;; This function is called by:
  6952 ;;		_getRxData
  6953 ;; This function uses a non-reentrant model
  6954 ;;
  6955                           
  6956                           
  6957                           ;psect for function _setControl_Lights_Table
  6958  0CFD                     _setControl_Lights_Table:	
  6959                           
  6960                           ;RF_Control_B1.c: 345: switch (RF_Data[15]) {
  6961                           
  6962                           ;incstack = 0
  6963                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6964  0CFD  2D48               	goto	l8586
  6965  0CFE                     l8570:	
  6966                           ;RF_Control_B1.c: 346: case 0x00:
  6967                           
  6968                           
  6969                           ;RF_Control_B1.c: 348: setDimmerLights_ErrorClose(255);
  6970  0CFE  30FF               	movlw	255
  6971  0CFF  318A  22AA  318C   	fcall	_setDimmerLights_ErrorClose
  6972                           
  6973                           ;RF_Control_B1.c: 350: setProductData(9, 0);
  6974  0D02  0020               	movlb	0	; select bank0
  6975  0D03  01E2               	clrf	setProductData@value
  6976  0D04  3009               	movlw	9
  6977  0D05  319F  2714  318C   	fcall	_setProductData
  6978                           
  6979                           ;RF_Control_B1.c: 351: setProductData(11, 0);
  6980  0D08  0020               	movlb	0	; select bank0
  6981  0D09  01E2               	clrf	setProductData@value
  6982  0D0A  300B               	movlw	11
  6983  0D0B  319F  2714  318C   	fcall	_setProductData
  6984                           
  6985                           ;RF_Control_B1.c: 352: setProductData(15, 0);
  6986  0D0E  0020               	movlb	0	; select bank0
  6987  0D0F  01E2               	clrf	setProductData@value
  6988  0D10  300F               	movlw	15
  6989  0D11  319F  2714  318C   	fcall	_setProductData
  6990                           
  6991                           ;RF_Control_B1.c: 353: setProductData(17, 0);
  6992  0D14  0020               	movlb	0	; select bank0
  6993  0D15  01E2               	clrf	setProductData@value
  6994  0D16  3011               	movlw	17
  6995  0D17  319F  2714  318C   	fcall	_setProductData
  6996                           
  6997                           ;RF_Control_B1.c: 354: setBuz(1, 100);
  6998  0D1A  3064               	movlw	100
  6999  0D1B  0020               	movlb	0	; select bank0
  7000  0D1C  00A9               	movwf	setBuz@time
  7001  0D1D  3000               	movlw	0
  7002  0D1E  00AA               	movwf	setBuz@time+1
  7003  0D1F  3001               	movlw	1
  7004  0D20  3189  21F8         	fcall	_setBuz
  7005                           
  7006                           ;RF_Control_B1.c: 356: break;
  7007  0D22  0008               	return
  7008  0D23                     l8574:	
  7009                           ;RF_Control_B1.c: 357: case 0x20:
  7010                           
  7011                           
  7012                           ;RF_Control_B1.c: 358: setProductData(9, 0);
  7013  0D23  0020               	movlb	0	; select bank0
  7014  0D24  01E2               	clrf	setProductData@value
  7015  0D25  3009               	movlw	9
  7016  0D26  319F  2714  318C   	fcall	_setProductData
  7017                           
  7018                           ;RF_Control_B1.c: 359: setProductData(11, 0);
  7019  0D29  0020               	movlb	0	; select bank0
  7020  0D2A  01E2               	clrf	setProductData@value
  7021  0D2B  300B               	movlw	11
  7022  0D2C  319F  2714  318C   	fcall	_setProductData
  7023                           
  7024                           ;RF_Control_B1.c: 360: setProductData(17, 0);
  7025  0D2F  0020               	movlb	0	; select bank0
  7026  0D30  01E2               	clrf	setProductData@value
  7027  0D31  3011               	movlw	17
  7028  0D32  319F  2714  318C   	fcall	_setProductData
  7029                           
  7030                           ;RF_Control_B1.c: 361: setTxData();
  7031  0D35  3187  275F         	fcall	_setTxData
  7032                           
  7033                           ;RF_Control_B1.c: 362: break;
  7034  0D37  0008               	return
  7035  0D38                     l8576:	
  7036                           ;RF_Control_B1.c: 363: case 0x01:
  7037                           
  7038                           
  7039                           ;RF_Control_B1.c: 365: setRFSW_Control(1);
  7040  0D38  3001               	movlw	1
  7041  0D39  3197  2760         	fcall	_setRFSW_Control
  7042                           
  7043                           ;RF_Control_B1.c: 367: break;
  7044  0D3B  0008               	return
  7045  0D3C                     l8578:	
  7046                           ;RF_Control_B1.c: 368: case 0x02:
  7047                           
  7048                           
  7049                           ;RF_Control_B1.c: 370: setRFSW_Control(2);
  7050  0D3C  3002               	movlw	2
  7051  0D3D  3197  2760         	fcall	_setRFSW_Control
  7052                           
  7053                           ;RF_Control_B1.c: 377: break;
  7054                           
  7055                           ;RF_Control_B1.c: 373: case 0x03:
  7056                           
  7057                           ;RF_Control_B1.c: 372: break;
  7058  0D3F  0008               	return
  7059  0D40                     l8580:	
  7060                           ;RF_Control_B1.c: 378: case 0x11:
  7061                           
  7062                           
  7063                           ;RF_Control_B1.c: 381: setRFSW_AdjControl(1);
  7064  0D40  3001               	movlw	1
  7065  0D41  3195  25C9         	fcall	_setRFSW_AdjControl
  7066                           
  7067                           ;RF_Control_B1.c: 384: break;
  7068  0D43  0008               	return
  7069  0D44                     l8582:	
  7070                           ;RF_Control_B1.c: 385: case 0x21:
  7071                           
  7072                           
  7073                           ;RF_Control_B1.c: 388: setRFSW_AdjControl(2);
  7074  0D44  3002               	movlw	2
  7075  0D45  3195  25C9         	fcall	_setRFSW_AdjControl
  7076                           
  7077                           ;RF_Control_B1.c: 399: }
  7078                           
  7079                           ;RF_Control_B1.c: 398: break;
  7080                           
  7081                           ;RF_Control_B1.c: 392: case 0x31:
  7082                           
  7083                           ;RF_Control_B1.c: 391: break;
  7084  0D47  0008               	return
  7085  0D48                     l8586:	
  7086  0D48  0022               	movlb	2	; select bank2
  7087  0D49  082F               	movf	(_RF_Data^(0+256)+15),w
  7088                           
  7089                           ; Switch size 1, requested type "space"
  7090                           ; Number of cases is 8, Range of values is 0 to 49
  7091                           ; switch strategies available:
  7092                           ; Name         Instructions Cycles
  7093                           ; simple_byte           25    13 (average)
  7094                           ; direct_byte          106     6 (fixed)
  7095                           ; jumptable            260     6 (fixed)
  7096                           ;	Chosen strategy is simple_byte
  7097  0D4A  3A00               	xorlw	0	; case 0
  7098  0D4B  1903               	skipnz
  7099  0D4C  2CFE               	goto	l8570
  7100  0D4D  3A01               	xorlw	1	; case 1
  7101  0D4E  1903               	skipnz
  7102  0D4F  2D38               	goto	l8576
  7103  0D50  3A03               	xorlw	3	; case 2
  7104  0D51  1903               	skipnz
  7105  0D52  2D3C               	goto	l8578
  7106  0D53  3A01               	xorlw	1	; case 3
  7107  0D54  1903               	skipnz
  7108  0D55  2D63               	goto	l2180
  7109  0D56  3A12               	xorlw	18	; case 17
  7110  0D57  1903               	skipnz
  7111  0D58  2D40               	goto	l8580
  7112  0D59  3A31               	xorlw	49	; case 32
  7113  0D5A  1903               	skipnz
  7114  0D5B  2D23               	goto	l8574
  7115  0D5C  3A01               	xorlw	1	; case 33
  7116  0D5D  1903               	skipnz
  7117  0D5E  2D44               	goto	l8582
  7118  0D5F  3A10               	xorlw	16	; case 49
  7119  0D60  1903               	skipnz
  7120  0D61  2D63               	goto	l2180
  7121  0D62  2D63               	goto	l2180
  7122  0D63                     l2180:	
  7123  0D63  0008               	return
  7124  0D64                     __end_of_setControl_Lights_Table:	
  7125                           
  7126                           	psect	text26
  7127  1760                     __ptext26:	
  7128 ;; *************** function _setRFSW_Control *****************
  7129 ;; Defined at:
  7130 ;;		line 426 in file "../src/RF_Control_B1.c"
  7131 ;; Parameters:    Size  Location     Type
  7132 ;;  sw              1    wreg     unsigned char 
  7133 ;; Auto vars:     Size  Location     Type
  7134 ;;  sw              1   78[BANK0 ] unsigned char 
  7135 ;;  status          1   77[BANK0 ] unsigned char 
  7136 ;; Return value:  Size  Location     Type
  7137 ;;		None               void
  7138 ;; Registers used:
  7139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7140 ;; Tracked objects:
  7141 ;;		On entry : 0/0
  7142 ;;		On exit  : 0/0
  7143 ;;		Unchanged: 0/0
  7144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;Total ram usage:        3 bytes
  7150 ;; Hardware stack levels used:    1
  7151 ;; Hardware stack levels required when called:    9
  7152 ;; This function calls:
  7153 ;;		_getDelayOff_GO
  7154 ;;		_getDimmerLights_Status
  7155 ;;		_setBuz
  7156 ;;		_setDelayOff_GO
  7157 ;;		_setDimmerLights_SwOff
  7158 ;;		_setDimmerLights_SwOn
  7159 ;;		_setRF_DimmerLights
  7160 ;;		_setTxData
  7161 ;; This function is called by:
  7162 ;;		_setControl_Lights_Table
  7163 ;; This function uses a non-reentrant model
  7164 ;;
  7165                           
  7166                           
  7167                           ;psect for function _setRFSW_Control
  7168  1760                     _setRFSW_Control:	
  7169                           
  7170                           ;incstack = 0
  7171                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7172                           ;setRFSW_Control@sw stored from wreg
  7173  1760  0020               	movlb	0	; select bank0
  7174  1761  00EE               	movwf	setRFSW_Control@sw
  7175                           
  7176                           ;RF_Control_B1.c: 427: char status = 0;
  7177  1762  01ED               	clrf	setRFSW_Control@status
  7178                           
  7179                           ;RF_Control_B1.c: 430: if (RF_Data[16] == 0x80) {
  7180  1763  0022               	movlb	2	; select bank2
  7181  1764  0830               	movf	(_RF_Data^(0+256)+16),w
  7182  1765  3A80               	xorlw	128
  7183  1766  1D03               	skipz
  7184  1767  2F93               	goto	l8412
  7185                           
  7186                           ;RF_Control_B1.c: 431: setDelayOff_GO(sw, 1, RF_Data[17]);
  7187  1768  0020               	movlb	0	; select bank0
  7188  1769  01E6               	clrf	setDelayOff_GO@command
  7189  176A  0AE6               	incf	setDelayOff_GO@command,f
  7190  176B  0022               	movlb	2	; select bank2
  7191  176C  0831               	movf	(_RF_Data^(0+256)+17),w
  7192  176D  0020               	movlb	0	; select bank0
  7193  176E  00EC               	movwf	??_setRFSW_Control
  7194  176F  086C               	movf	??_setRFSW_Control,w
  7195  1770  00E7               	movwf	setDelayOff_GO@value
  7196  1771  086E               	movf	setRFSW_Control@sw,w
  7197  1772  3189  2148  3197   	fcall	_setDelayOff_GO
  7198                           
  7199                           ;RF_Control_B1.c: 432: if (getDimmerLights_Status(sw) == 1) {
  7200  1775  0020               	movlb	0	; select bank0
  7201  1776  086E               	movf	setRFSW_Control@sw,w
  7202  1777  319F  274F  3197   	fcall	_getDimmerLights_Status
  7203  177A  3A01               	xorlw	1
  7204  177B  1D03               	skipz
  7205  177C  2FA2               	goto	l8416
  7206                           
  7207                           ;RF_Control_B1.c: 433: setBuz(1, 100);
  7208  177D  3064               	movlw	100
  7209  177E  0020               	movlb	0	; select bank0
  7210  177F  00A9               	movwf	setBuz@time
  7211  1780  3000               	movlw	0
  7212  1781  00AA               	movwf	setBuz@time+1
  7213  1782  3001               	movlw	1
  7214  1783  3189  21F8  3197   	fcall	_setBuz
  7215                           
  7216                           ;RF_Control_B1.c: 434: status = 1;
  7217  1786  0020               	movlb	0	; select bank0
  7218  1787  01ED               	clrf	setRFSW_Control@status
  7219  1788  0AED               	incf	setRFSW_Control@status,f
  7220                           
  7221                           ;RF_Control_B1.c: 435: setRF_DimmerLights(sw, 1);
  7222  1789  01E6               	clrf	setRF_DimmerLights@on
  7223  178A  0AE6               	incf	setRF_DimmerLights@on,f
  7224  178B  086E               	movf	setRFSW_Control@sw,w
  7225  178C  318A  2251  3197   	fcall	_setRF_DimmerLights
  7226                           
  7227                           ;RF_Control_B1.c: 436: setTxData();
  7228  178F  3187  275F  3197   	fcall	_setTxData
  7229                           
  7230                           ;RF_Control_B1.c: 438: }
  7231                           ;RF_Control_B1.c: 439: } else {
  7232  1792  2FA2               	goto	l8416
  7233  1793                     l8412:	
  7234                           
  7235                           ;RF_Control_B1.c: 441: if (getDelayOff_GO(sw) == 1) {
  7236  1793  0020               	movlb	0	; select bank0
  7237  1794  086E               	movf	setRFSW_Control@sw,w
  7238  1795  319F  2760  3197   	fcall	_getDelayOff_GO
  7239  1798  3A01               	xorlw	1
  7240  1799  1D03               	skipz
  7241  179A  2FA2               	goto	l8416
  7242                           
  7243                           ;RF_Control_B1.c: 442: setDelayOff_GO(sw, 0, 0);
  7244  179B  0020               	movlb	0	; select bank0
  7245  179C  01E6               	clrf	setDelayOff_GO@command
  7246  179D  01E7               	clrf	setDelayOff_GO@value
  7247  179E  086E               	movf	setRFSW_Control@sw,w
  7248  179F  3189  2148  3197   	fcall	_setDelayOff_GO
  7249  17A2                     l8416:	
  7250                           
  7251                           ;RF_Control_B1.c: 443: }
  7252                           ;RF_Control_B1.c: 445: }
  7253                           ;RF_Control_B1.c: 446: if (status == 0) {
  7254  17A2  0020               	movlb	0	; select bank0
  7255  17A3  08ED               	movf	setRFSW_Control@status,f
  7256  17A4  1D03               	skipz
  7257  17A5  0008               	return
  7258                           
  7259                           ;RF_Control_B1.c: 448: setDimmerLights_SwOn(sw);
  7260  17A6  086E               	movf	setRFSW_Control@sw,w
  7261  17A7  3195  2517  3197   	fcall	_setDimmerLights_SwOn
  7262                           
  7263                           ;RF_Control_B1.c: 449: setDimmerLights_SwOff(sw);
  7264  17AA  0020               	movlb	0	; select bank0
  7265  17AB  086E               	movf	setRFSW_Control@sw,w
  7266  17AC  3189  21A0         	fcall	_setDimmerLights_SwOff
  7267  17AE  0008               	return
  7268  17AF                     __end_of_setRFSW_Control:	
  7269                           
  7270                           	psect	text27
  7271  1517                     __ptext27:	
  7272 ;; *************** function _setDimmerLights_SwOn *****************
  7273 ;; Defined at:
  7274 ;;		line 400 in file "../src/Dimmer_B1.c"
  7275 ;; Parameters:    Size  Location     Type
  7276 ;;  sw              1    wreg     unsigned char 
  7277 ;; Auto vars:     Size  Location     Type
  7278 ;;  sw              1   13[BANK0 ] unsigned char 
  7279 ;;  idle            1   14[BANK0 ] unsigned char 
  7280 ;; Return value:  Size  Location     Type
  7281 ;;		None               void
  7282 ;; Registers used:
  7283 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7284 ;; Tracked objects:
  7285 ;;		On entry : 0/0
  7286 ;;		On exit  : 0/0
  7287 ;;		Unchanged: 0/0
  7288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;Total ram usage:        2 bytes
  7294 ;; Hardware stack levels used:    1
  7295 ;; Hardware stack levels required when called:    7
  7296 ;; This function calls:
  7297 ;;		_DimmerLightsPointSelect
  7298 ;;		_setBuz
  7299 ;; This function is called by:
  7300 ;;		_setRFSW_Control
  7301 ;;		_setSw_Main
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           
  7306                           ;psect for function _setDimmerLights_SwOn
  7307  1517                     _setDimmerLights_SwOn:	
  7308                           
  7309                           ;incstack = 0
  7310                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7311                           ;setDimmerLights_SwOn@sw stored from wreg
  7312  1517  0020               	movlb	0	; select bank0
  7313  1518  00AD               	movwf	setDimmerLights_SwOn@sw
  7314                           
  7315                           ;Dimmer_B1.c: 401: DimmerLightsPointSelect(sw);
  7316  1519  082D               	movf	setDimmerLights_SwOn@sw,w
  7317  151A  319F  27ED  3195   	fcall	_DimmerLightsPointSelect
  7318                           
  7319                           ;Dimmer_B1.c: 402: char idle = 0;
  7320  151D  0020               	movlb	0	; select bank0
  7321  151E  01AE               	clrf	setDimmerLights_SwOn@idle
  7322                           
  7323                           ;Dimmer_B1.c: 407: if (idle == 0) {
  7324  151F  08AE               	movf	setDimmerLights_SwOn@idle,f
  7325  1520  1D03               	skipz
  7326  1521  0008               	return
  7327                           
  7328                           ;Dimmer_B1.c: 408: DimmerLights->SwFlag = 1;
  7329  1522  0875               	movf	_DimmerLights,w
  7330  1523  3E0B               	addlw	11
  7331  1524  0086               	movwf	6
  7332  1525  3001               	movlw	1	; select bank2/3
  7333  1526  0087               	movwf	7
  7334  1527  1481               	bsf	1,1
  7335                           
  7336                           ;Dimmer_B1.c: 409: if (DimmerLights->Status == 0) {
  7337  1528  0875               	movf	_DimmerLights,w
  7338  1529  3E02               	addlw	2
  7339  152A  0086               	movwf	6
  7340  152B  3001               	movlw	1	; select bank2/3
  7341  152C  0087               	movwf	7
  7342  152D  1881               	btfsc	1,1
  7343  152E  2D42               	goto	l8210
  7344                           
  7345                           ;Dimmer_B1.c: 410: DimmerLights->Status = 1;
  7346  152F  0875               	movf	_DimmerLights,w
  7347  1530  3E02               	addlw	2
  7348  1531  0086               	movwf	6
  7349  1532  3001               	movlw	1	; select bank2/3
  7350  1533  0087               	movwf	7
  7351  1534  1481               	bsf	1,1
  7352                           
  7353                           ;Dimmer_B1.c: 412: DimmerLights->Trigger = 1;
  7354  1535  0875               	movf	_DimmerLights,w
  7355  1536  3E0A               	addlw	10
  7356  1537  0086               	movwf	6
  7357  1538  3001               	movlw	1	; select bank2/3
  7358  1539  0087               	movwf	7
  7359  153A  1481               	bsf	1,1
  7360                           
  7361                           ;Dimmer_B1.c: 413: DimmerLights->Switch = 1;
  7362  153B  0875               	movf	_DimmerLights,w
  7363  153C  3E0A               	addlw	10
  7364  153D  0086               	movwf	6
  7365  153E  3001               	movlw	1	; select bank2/3
  7366  153F  0087               	movwf	7
  7367  1540  1401               	bsf	1,0
  7368                           
  7369                           ;Dimmer_B1.c: 415: } else {
  7370  1541  2D48               	goto	l8212
  7371  1542                     l8210:	
  7372                           
  7373                           ;Dimmer_B1.c: 417: DimmerLights->Status = 0;
  7374  1542  0875               	movf	_DimmerLights,w
  7375  1543  3E02               	addlw	2
  7376  1544  0086               	movwf	6
  7377  1545  3001               	movlw	1	; select bank2/3
  7378  1546  0087               	movwf	7
  7379  1547  1081               	bcf	1,1
  7380  1548                     l8212:	
  7381                           
  7382                           ;Dimmer_B1.c: 418: }
  7383                           ;Dimmer_B1.c: 419: setBuz(1, 100);
  7384  1548  3064               	movlw	100
  7385  1549  00A9               	movwf	setBuz@time
  7386  154A  3000               	movlw	0
  7387  154B  00AA               	movwf	setBuz@time+1
  7388  154C  3001               	movlw	1
  7389  154D  3189  21F8         	fcall	_setBuz
  7390  154F  0008               	return
  7391  1550                     __end_of_setDimmerLights_SwOn:	
  7392                           
  7393                           	psect	text28
  7394  15C9                     __ptext28:	
  7395 ;; *************** function _setRFSW_AdjControl *****************
  7396 ;; Defined at:
  7397 ;;		line 455 in file "../src/RF_Control_B1.c"
  7398 ;; Parameters:    Size  Location     Type
  7399 ;;  sw              1    wreg     unsigned char 
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;  sw              1   75[BANK0 ] unsigned char 
  7402 ;;  status          1   74[BANK0 ] unsigned char 
  7403 ;; Return value:  Size  Location     Type
  7404 ;;		None               void
  7405 ;; Registers used:
  7406 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7407 ;; Tracked objects:
  7408 ;;		On entry : 0/0
  7409 ;;		On exit  : 0/0
  7410 ;;		Unchanged: 0/0
  7411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7416 ;;Total ram usage:        4 bytes
  7417 ;; Hardware stack levels used:    1
  7418 ;; Hardware stack levels required when called:   10
  7419 ;; This function calls:
  7420 ;;		_getDimmerLights_Status
  7421 ;;		_setMemory_Modify
  7422 ;;		_setProductData
  7423 ;;		_setRF_DimmerValue
  7424 ;;		_setTxData
  7425 ;; This function is called by:
  7426 ;;		_setControl_Lights_Table
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           
  7431                           ;psect for function _setRFSW_AdjControl
  7432  15C9                     _setRFSW_AdjControl:	
  7433                           
  7434                           ;incstack = 0
  7435                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7436                           ;setRFSW_AdjControl@sw stored from wreg
  7437  15C9  0020               	movlb	0	; select bank0
  7438  15CA  00EB               	movwf	setRFSW_AdjControl@sw
  7439                           
  7440                           ;RF_Control_B1.c: 456: char status = 0;
  7441  15CB  01EA               	clrf	setRFSW_AdjControl@status
  7442                           
  7443                           ;RF_Control_B1.c: 458: status = getDimmerLights_Status(sw);
  7444  15CC  086B               	movf	setRFSW_AdjControl@sw,w
  7445  15CD  319F  274F  3195   	fcall	_getDimmerLights_Status
  7446  15D0  0020               	movlb	0	; select bank0
  7447  15D1  00E8               	movwf	??_setRFSW_AdjControl
  7448  15D2  0868               	movf	??_setRFSW_AdjControl,w
  7449  15D3  00EA               	movwf	setRFSW_AdjControl@status
  7450                           
  7451                           ;RF_Control_B1.c: 461: if (status == 1) {
  7452  15D4  086A               	movf	setRFSW_AdjControl@status,w
  7453  15D5  3A01               	xorlw	1
  7454  15D6  1D03               	skipz
  7455  15D7  2DE2               	goto	l8430
  7456                           
  7457                           ;RF_Control_B1.c: 462: setMemory_Modify(1);
  7458  15D8  3001               	movlw	1
  7459  15D9  3190  2082  3195   	fcall	_setMemory_Modify
  7460                           
  7461                           ;RF_Control_B1.c: 463: setRF_DimmerValue(sw);
  7462  15DC  0020               	movlb	0	; select bank0
  7463  15DD  086B               	movf	setRFSW_AdjControl@sw,w
  7464  15DE  3194  247E  3195   	fcall	_setRF_DimmerValue
  7465                           
  7466                           ;RF_Control_B1.c: 464: } else {
  7467  15E1  2DF3               	goto	l2192
  7468  15E2                     l8430:	
  7469                           
  7470                           ;RF_Control_B1.c: 465: setProductData(9, product->Data[20 + sw]);
  7471  15E2  0020               	movlb	0	; select bank0
  7472  15E3  086B               	movf	setRFSW_AdjControl@sw,w
  7473  15E4  3E14               	addlw	20
  7474  15E5  0779               	addwf	_product,w
  7475  15E6  00E8               	movwf	??_setRFSW_AdjControl
  7476  15E7  0868               	movf	??_setRFSW_AdjControl,w
  7477  15E8  0086               	movwf	6
  7478  15E9  3002               	movlw	2	; select bank4/5
  7479  15EA  0087               	movwf	7
  7480  15EB  0801               	movf	1,w
  7481  15EC  00E9               	movwf	??_setRFSW_AdjControl+1
  7482  15ED  0869               	movf	??_setRFSW_AdjControl+1,w
  7483  15EE  00E2               	movwf	setProductData@value
  7484  15EF  3009               	movlw	9
  7485  15F0  319F  2714  3195   	fcall	_setProductData
  7486  15F3                     l2192:	
  7487                           
  7488                           ;RF_Control_B1.c: 466: }
  7489                           ;RF_Control_B1.c: 467: setProductData(17, product->Data[26 + sw]);
  7490  15F3  0020               	movlb	0	; select bank0
  7491  15F4  086B               	movf	setRFSW_AdjControl@sw,w
  7492  15F5  3E1A               	addlw	26
  7493  15F6  0779               	addwf	_product,w
  7494  15F7  00E8               	movwf	??_setRFSW_AdjControl
  7495  15F8  0868               	movf	??_setRFSW_AdjControl,w
  7496  15F9  0086               	movwf	6
  7497  15FA  3002               	movlw	2	; select bank4/5
  7498  15FB  0087               	movwf	7
  7499  15FC  0801               	movf	1,w
  7500  15FD  00E9               	movwf	??_setRFSW_AdjControl+1
  7501  15FE  0869               	movf	??_setRFSW_AdjControl+1,w
  7502  15FF  00E2               	movwf	setProductData@value
  7503  1600  3011               	movlw	17
  7504  1601  319F  2714  3195   	fcall	_setProductData
  7505                           
  7506                           ;RF_Control_B1.c: 468: setTxData();
  7507  1604  3187  275F         	fcall	_setTxData
  7508  1606  0008               	return
  7509  1607                     __end_of_setRFSW_AdjControl:	
  7510                           
  7511                           	psect	text29
  7512  147E                     __ptext29:	
  7513 ;; *************** function _setRF_DimmerValue *****************
  7514 ;; Defined at:
  7515 ;;		line 473 in file "../src/RF_Control_B1.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;  lights          1    wreg     unsigned char 
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;  lights          1   71[BANK0 ] unsigned char 
  7520 ;; Return value:  Size  Location     Type
  7521 ;;		None               void
  7522 ;; Registers used:
  7523 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;Total ram usage:        2 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    9
  7536 ;; This function calls:
  7537 ;;		_setDimmerLights_AdjRF
  7538 ;;		_setProductData
  7539 ;; This function is called by:
  7540 ;;		_setRFSW_AdjControl
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           
  7545                           ;psect for function _setRF_DimmerValue
  7546  147E                     _setRF_DimmerValue:	
  7547                           
  7548                           ;incstack = 0
  7549                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7550                           ;setRF_DimmerValue@lights stored from wreg
  7551  147E  0020               	movlb	0	; select bank0
  7552  147F  00E7               	movwf	setRF_DimmerValue@lights
  7553                           
  7554                           ;RF_Control_B1.c: 474: if (RF_Data[9] > 0x64) {
  7555  1480  3065               	movlw	101
  7556  1481  0022               	movlb	2	; select bank2
  7557  1482  0229               	subwf	(_RF_Data^(0+256)+9),w
  7558  1483  1C03               	skipc
  7559  1484  2C8B               	goto	l8308
  7560                           
  7561                           ;RF_Control_B1.c: 475: RF_Data[9] = 0x64;
  7562  1485  3064               	movlw	100
  7563  1486  0020               	movlb	0	; select bank0
  7564  1487  00E6               	movwf	??_setRF_DimmerValue
  7565  1488  0866               	movf	??_setRF_DimmerValue,w
  7566  1489  0022               	movlb	2	; select bank2
  7567  148A  00A9               	movwf	(_RF_Data^(0+256)+9)
  7568  148B                     l8308:	
  7569                           
  7570                           ;RF_Control_B1.c: 476: }
  7571                           ;RF_Control_B1.c: 477: setProductData(9, RF_Data[9]);
  7572  148B  0829               	movf	(_RF_Data^(0+256)+9),w
  7573  148C  0020               	movlb	0	; select bank0
  7574  148D  00E6               	movwf	??_setRF_DimmerValue
  7575  148E  0866               	movf	??_setRF_DimmerValue,w
  7576  148F  00E2               	movwf	setProductData@value
  7577  1490  3009               	movlw	9
  7578  1491  319F  2714  3194   	fcall	_setProductData
  7579                           
  7580                           ;RF_Control_B1.c: 478: setProductData(11, lights);
  7581  1494  0020               	movlb	0	; select bank0
  7582  1495  0867               	movf	setRF_DimmerValue@lights,w
  7583  1496  00E6               	movwf	??_setRF_DimmerValue
  7584  1497  0866               	movf	??_setRF_DimmerValue,w
  7585  1498  00E2               	movwf	setProductData@value
  7586  1499  300B               	movlw	11
  7587  149A  319F  2714  3194   	fcall	_setProductData
  7588                           
  7589                           ;RF_Control_B1.c: 479: setProductData((20 + lights), RF_Data[9]);
  7590  149D  0022               	movlb	2	; select bank2
  7591  149E  0829               	movf	(_RF_Data^(0+256)+9),w
  7592  149F  0020               	movlb	0	; select bank0
  7593  14A0  00E6               	movwf	??_setRF_DimmerValue
  7594  14A1  0866               	movf	??_setRF_DimmerValue,w
  7595  14A2  00E2               	movwf	setProductData@value
  7596  14A3  0867               	movf	setRF_DimmerValue@lights,w
  7597  14A4  3E14               	addlw	20
  7598  14A5  319F  2714  3194   	fcall	_setProductData
  7599                           
  7600                           ;RF_Control_B1.c: 480: setDimmerLights_AdjRF(lights);
  7601  14A8  0020               	movlb	0	; select bank0
  7602  14A9  0867               	movf	setRF_DimmerValue@lights,w
  7603  14AA  3192  22E5         	fcall	_setDimmerLights_AdjRF
  7604  14AC  0008               	return
  7605  14AD                     __end_of_setRF_DimmerValue:	
  7606                           
  7607                           	psect	text30
  7608  12E5                     __ptext30:	
  7609 ;; *************** function _setDimmerLights_AdjRF *****************
  7610 ;; Defined at:
  7611 ;;		line 832 in file "../src/Dimmer_B1.c"
  7612 ;; Parameters:    Size  Location     Type
  7613 ;;  lights          1    wreg     unsigned char 
  7614 ;; Auto vars:     Size  Location     Type
  7615 ;;  lights          1   67[BANK0 ] unsigned char 
  7616 ;; Return value:  Size  Location     Type
  7617 ;;		None               void
  7618 ;; Registers used:
  7619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7620 ;; Tracked objects:
  7621 ;;		On entry : 0/0
  7622 ;;		On exit  : 0/0
  7623 ;;		Unchanged: 0/0
  7624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7626 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7628 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7629 ;;Total ram usage:        2 bytes
  7630 ;; Hardware stack levels used:    1
  7631 ;; Hardware stack levels required when called:    8
  7632 ;; This function calls:
  7633 ;;		_DimmerLightsPointSelect
  7634 ;;		_getPercentValue
  7635 ;; This function is called by:
  7636 ;;		_setRF_DimmerValue
  7637 ;; This function uses a non-reentrant model
  7638 ;;
  7639                           
  7640                           
  7641                           ;psect for function _setDimmerLights_AdjRF
  7642  12E5                     _setDimmerLights_AdjRF:	
  7643                           
  7644                           ;incstack = 0
  7645                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7646                           ;setDimmerLights_AdjRF@lights stored from wreg
  7647  12E5  0020               	movlb	0	; select bank0
  7648  12E6  00E3               	movwf	setDimmerLights_AdjRF@lights
  7649                           
  7650                           ;Dimmer_B1.c: 834: DimmerLightsPointSelect(lights);
  7651  12E7  0863               	movf	setDimmerLights_AdjRF@lights,w
  7652  12E8  319F  27ED  3192   	fcall	_DimmerLightsPointSelect
  7653                           
  7654                           ;Dimmer_B1.c: 835: DimmerLights->AdjRF = 1;
  7655  12EB  0875               	movf	_DimmerLights,w
  7656  12EC  3E02               	addlw	2
  7657  12ED  0086               	movwf	6
  7658  12EE  3001               	movlw	1	; select bank2/3
  7659  12EF  0087               	movwf	7
  7660  12F0  1401               	bsf	1,0
  7661                           
  7662                           ;Dimmer_B1.c: 836: DimmerLights->Signal = 1;
  7663  12F1  0A75               	incf	_DimmerLights,w
  7664  12F2  0086               	movwf	6
  7665  12F3  3001               	movlw	1	; select bank2/3
  7666  12F4  0087               	movwf	7
  7667  12F5  1681               	bsf	1,5
  7668                           
  7669                           ;Dimmer_B1.c: 837: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7670  12F6  0879               	movf	_product,w
  7671  12F7  3E09               	addlw	9
  7672  12F8  0086               	movwf	6
  7673  12F9  3002               	movlw	2	; select bank4/5
  7674  12FA  0087               	movwf	7
  7675  12FB  0801               	movf	1,w
  7676  12FC  318C  2498         	fcall	_getPercentValue
  7677  12FE  0020               	movlb	0	; select bank0
  7678  12FF  00E2               	movwf	??_setDimmerLights_AdjRF
  7679  1300  0875               	movf	_DimmerLights,w
  7680  1301  3E06               	addlw	6
  7681  1302  0086               	movwf	6
  7682  1303  3001               	movlw	1	; select bank2/3
  7683  1304  0087               	movwf	7
  7684  1305  0862               	movf	??_setDimmerLights_AdjRF,w
  7685  1306  0081               	movwf	1
  7686  1307  0008               	return
  7687  1308                     __end_of_setDimmerLights_AdjRF:	
  7688                           
  7689                           	psect	text31
  7690  0C98                     __ptext31:	
  7691 ;; *************** function _getPercentValue *****************
  7692 ;; Defined at:
  7693 ;;		line 947 in file "../src/Dimmer_B1.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;  value           1    wreg     unsigned char 
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;  value           1   62[BANK0 ] unsigned char 
  7698 ;;  i               3   63[BANK0 ] float 
  7699 ;; Return value:  Size  Location     Type
  7700 ;;                  1    wreg      unsigned char 
  7701 ;; Registers used:
  7702 ;;		wreg, status,2, status,0, pclath, cstack
  7703 ;; Tracked objects:
  7704 ;;		On entry : 0/0
  7705 ;;		On exit  : 0/0
  7706 ;;		Unchanged: 0/0
  7707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7710 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7711 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7712 ;;Total ram usage:        6 bytes
  7713 ;; Hardware stack levels used:    1
  7714 ;; Hardware stack levels required when called:    7
  7715 ;; This function calls:
  7716 ;;		___awtoft
  7717 ;;		___ftadd
  7718 ;;		___ftdiv
  7719 ;;		___ftmul
  7720 ;;		___ftneg
  7721 ;;		___fttol
  7722 ;; This function is called by:
  7723 ;;		_setDimmerLights_AdjRF
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           
  7728                           ;psect for function _getPercentValue
  7729  0C98                     _getPercentValue:	
  7730                           
  7731                           ;incstack = 0
  7732                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7733                           ;getPercentValue@value stored from wreg
  7734  0C98  0020               	movlb	0	; select bank0
  7735  0C99  00DE               	movwf	getPercentValue@value
  7736                           
  7737                           ;Dimmer_B1.c: 955: float i = ((char)(75*0.8)) - ((char)(15*0.8));
  7738  0C9A  3000               	movlw	0
  7739  0C9B  00DF               	movwf	getPercentValue@i
  7740  0C9C  3040               	movlw	64
  7741  0C9D  00E0               	movwf	getPercentValue@i+1
  7742  0C9E  3042               	movlw	66
  7743  0C9F  00E1               	movwf	getPercentValue@i+2
  7744                           
  7745                           ;Dimmer_B1.c: 956: i /= 100;
  7746  0CA0  3000               	movlw	0
  7747  0CA1  00AE               	movwf	___ftdiv@f2
  7748  0CA2  30C8               	movlw	200
  7749  0CA3  00AF               	movwf	___ftdiv@f2+1
  7750  0CA4  3042               	movlw	66
  7751  0CA5  00B0               	movwf	___ftdiv@f2+2
  7752  0CA6  085F               	movf	getPercentValue@i,w
  7753  0CA7  00B1               	movwf	___ftdiv@f1
  7754  0CA8  0860               	movf	getPercentValue@i+1,w
  7755  0CA9  00B2               	movwf	___ftdiv@f1+1
  7756  0CAA  0861               	movf	getPercentValue@i+2,w
  7757  0CAB  00B3               	movwf	___ftdiv@f1+2
  7758  0CAC  318F  2757  318C   	fcall	___ftdiv
  7759  0CAF  0020               	movlb	0	; select bank0
  7760  0CB0  082E               	movf	?___ftdiv,w
  7761  0CB1  00DF               	movwf	getPercentValue@i
  7762  0CB2  082F               	movf	?___ftdiv+1,w
  7763  0CB3  00E0               	movwf	getPercentValue@i+1
  7764  0CB4  0830               	movf	?___ftdiv+2,w
  7765  0CB5  00E1               	movwf	getPercentValue@i+2
  7766                           
  7767                           ;Dimmer_B1.c: 958: return (char) (((char)(75*0.8)) - ((100 - value) * i));
  7768  0CB6  085E               	movf	getPercentValue@value,w
  7769  0CB7  00DC               	movwf	??_getPercentValue
  7770  0CB8  01DD               	clrf	??_getPercentValue+1
  7771  0CB9  09DC               	comf	??_getPercentValue,f
  7772  0CBA  09DD               	comf	??_getPercentValue+1,f
  7773  0CBB  0ADC               	incf	??_getPercentValue,f
  7774  0CBC  1903               	skipnz
  7775  0CBD  0ADD               	incf	??_getPercentValue+1,f
  7776  0CBE  085C               	movf	??_getPercentValue,w
  7777  0CBF  3E64               	addlw	100
  7778  0CC0  00A8               	movwf	___awtoft@c
  7779  0CC1  3000               	movlw	0
  7780  0CC2  3D5D               	addwfc	??_getPercentValue+1,w
  7781  0CC3  00A9               	movwf	___awtoft@c+1
  7782  0CC4  3192  22A0  318C   	fcall	___awtoft
  7783  0CC7  0020               	movlb	0	; select bank0
  7784  0CC8  0828               	movf	?___awtoft,w
  7785  0CC9  00B1               	movwf	___ftmul@f2
  7786  0CCA  0829               	movf	?___awtoft+1,w
  7787  0CCB  00B2               	movwf	___ftmul@f2+1
  7788  0CCC  082A               	movf	?___awtoft+2,w
  7789  0CCD  00B3               	movwf	___ftmul@f2+2
  7790  0CCE  085F               	movf	getPercentValue@i,w
  7791  0CCF  00AE               	movwf	___ftmul@f1
  7792  0CD0  0860               	movf	getPercentValue@i+1,w
  7793  0CD1  00AF               	movwf	___ftmul@f1+1
  7794  0CD2  0861               	movf	getPercentValue@i+2,w
  7795  0CD3  00B0               	movwf	___ftmul@f1+2
  7796  0CD4  3185  254B  318C   	fcall	___ftmul
  7797  0CD7  0020               	movlb	0	; select bank0
  7798  0CD8  082E               	movf	?___ftmul,w
  7799  0CD9  00BE               	movwf	___ftneg@f1
  7800  0CDA  082F               	movf	?___ftmul+1,w
  7801  0CDB  00BF               	movwf	___ftneg@f1+1
  7802  0CDC  0830               	movf	?___ftmul+2,w
  7803  0CDD  00C0               	movwf	___ftneg@f1+2
  7804  0CDE  319E  2689  318C   	fcall	___ftneg
  7805  0CE1  0020               	movlb	0	; select bank0
  7806  0CE2  083E               	movf	?___ftneg,w
  7807  0CE3  00C4               	movwf	___ftadd@f2
  7808  0CE4  083F               	movf	?___ftneg+1,w
  7809  0CE5  00C5               	movwf	___ftadd@f2+1
  7810  0CE6  0840               	movf	?___ftneg+2,w
  7811  0CE7  00C6               	movwf	___ftadd@f2+2
  7812  0CE8  3000               	movlw	0
  7813  0CE9  00C1               	movwf	___ftadd@f1
  7814  0CEA  3070               	movlw	112
  7815  0CEB  00C2               	movwf	___ftadd@f1+1
  7816  0CEC  3042               	movlw	66
  7817  0CED  00C3               	movwf	___ftadd@f1+2
  7818  0CEE  3181  21B3  318C   	fcall	___ftadd
  7819  0CF1  0020               	movlb	0	; select bank0
  7820  0CF2  0841               	movf	?___ftadd,w
  7821  0CF3  00CE               	movwf	___fttol@f1
  7822  0CF4  0842               	movf	?___ftadd+1,w
  7823  0CF5  00CF               	movwf	___fttol@f1+1
  7824  0CF6  0843               	movf	?___ftadd+2,w
  7825  0CF7  00D0               	movwf	___fttol@f1+2
  7826  0CF8  318E  2645         	fcall	___fttol
  7827  0CFA  0020               	movlb	0	; select bank0
  7828  0CFB  084E               	movf	?___fttol,w
  7829  0CFC  0008               	return
  7830  0CFD                     __end_of_getPercentValue:	
  7831                           
  7832                           	psect	text32
  7833  054B                     __ptext32:	
  7834 ;; *************** function ___ftmul *****************
  7835 ;; Defined at:
  7836 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7837 ;; Parameters:    Size  Location     Type
  7838 ;;  f1              3   14[BANK0 ] float 
  7839 ;;  f2              3   17[BANK0 ] float 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7842 ;;  sign            1   29[BANK0 ] unsigned char 
  7843 ;;  cntr            1   28[BANK0 ] unsigned char 
  7844 ;;  exp             1   24[BANK0 ] unsigned char 
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  3   14[BANK0 ] float 
  7847 ;; Registers used:
  7848 ;;		wreg, status,2, status,0, pclath, cstack
  7849 ;; Tracked objects:
  7850 ;;		On entry : 0/0
  7851 ;;		On exit  : 0/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7854 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7855 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7856 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7857 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7858 ;;Total ram usage:       16 bytes
  7859 ;; Hardware stack levels used:    1
  7860 ;; Hardware stack levels required when called:    6
  7861 ;; This function calls:
  7862 ;;		___ftpack
  7863 ;; This function is called by:
  7864 ;;		_getPercentValue
  7865 ;; This function uses a non-reentrant model
  7866 ;;
  7867                           
  7868                           
  7869                           ;psect for function ___ftmul
  7870  054B                     ___ftmul:	
  7871                           
  7872                           ;incstack = 0
  7873                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  7874  054B  0020               	movlb	0	; select bank0
  7875  054C  082E               	movf	___ftmul@f1,w
  7876  054D  00B4               	movwf	??___ftmul
  7877  054E  082F               	movf	___ftmul@f1+1,w
  7878  054F  00B5               	movwf	??___ftmul+1
  7879  0550  0830               	movf	___ftmul@f1+2,w
  7880  0551  00B6               	movwf	??___ftmul+2
  7881  0552  1003               	clrc
  7882  0553  0D35               	rlf	??___ftmul+1,w
  7883  0554  0D36               	rlf	??___ftmul+2,w
  7884  0555  00B7               	movwf	??___ftmul+3
  7885  0556  0837               	movf	??___ftmul+3,w
  7886  0557  00B8               	movwf	___ftmul@exp
  7887  0558  08B8               	movf	___ftmul@exp,f
  7888  0559  1D03               	skipz
  7889  055A  2D62               	goto	l7952
  7890  055B  3000               	movlw	0
  7891  055C  00AE               	movwf	?___ftmul
  7892  055D  3000               	movlw	0
  7893  055E  00AF               	movwf	?___ftmul+1
  7894  055F  3000               	movlw	0
  7895  0560  00B0               	movwf	?___ftmul+2
  7896  0561  0008               	return
  7897  0562                     l7952:	
  7898  0562  0831               	movf	___ftmul@f2,w
  7899  0563  00B4               	movwf	??___ftmul
  7900  0564  0832               	movf	___ftmul@f2+1,w
  7901  0565  00B5               	movwf	??___ftmul+1
  7902  0566  0833               	movf	___ftmul@f2+2,w
  7903  0567  00B6               	movwf	??___ftmul+2
  7904  0568  1003               	clrc
  7905  0569  0D35               	rlf	??___ftmul+1,w
  7906  056A  0D36               	rlf	??___ftmul+2,w
  7907  056B  00B7               	movwf	??___ftmul+3
  7908  056C  0837               	movf	??___ftmul+3,w
  7909  056D  00BD               	movwf	___ftmul@sign
  7910  056E  08BD               	movf	___ftmul@sign,f
  7911  056F  1D03               	skipz
  7912  0570  2D78               	goto	l7958
  7913  0571  3000               	movlw	0
  7914  0572  00AE               	movwf	?___ftmul
  7915  0573  3000               	movlw	0
  7916  0574  00AF               	movwf	?___ftmul+1
  7917  0575  3000               	movlw	0
  7918  0576  00B0               	movwf	?___ftmul+2
  7919  0577  0008               	return
  7920  0578                     l7958:	
  7921  0578  083D               	movf	___ftmul@sign,w
  7922  0579  3E7B               	addlw	123
  7923  057A  00B4               	movwf	??___ftmul
  7924  057B  0834               	movf	??___ftmul,w
  7925  057C  07B8               	addwf	___ftmul@exp,f
  7926  057D  082E               	movf	___ftmul@f1,w
  7927  057E  00B4               	movwf	??___ftmul
  7928  057F  082F               	movf	___ftmul@f1+1,w
  7929  0580  00B5               	movwf	??___ftmul+1
  7930  0581  0830               	movf	___ftmul@f1+2,w
  7931  0582  00B6               	movwf	??___ftmul+2
  7932  0583  3010               	movlw	16
  7933  0584                     u7905:	
  7934  0584  36B6               	lsrf	??___ftmul+2,f
  7935  0585  0CB5               	rrf	??___ftmul+1,f
  7936  0586  0CB4               	rrf	??___ftmul,f
  7937  0587  0B89               	decfsz	9,f
  7938  0588  2D84               	goto	u7905
  7939  0589  0834               	movf	??___ftmul,w
  7940  058A  00B7               	movwf	??___ftmul+3
  7941  058B  0837               	movf	??___ftmul+3,w
  7942  058C  00BD               	movwf	___ftmul@sign
  7943  058D  0831               	movf	___ftmul@f2,w
  7944  058E  00B4               	movwf	??___ftmul
  7945  058F  0832               	movf	___ftmul@f2+1,w
  7946  0590  00B5               	movwf	??___ftmul+1
  7947  0591  0833               	movf	___ftmul@f2+2,w
  7948  0592  00B6               	movwf	??___ftmul+2
  7949  0593  3010               	movlw	16
  7950  0594                     u7915:	
  7951  0594  36B6               	lsrf	??___ftmul+2,f
  7952  0595  0CB5               	rrf	??___ftmul+1,f
  7953  0596  0CB4               	rrf	??___ftmul,f
  7954  0597  0B89               	decfsz	9,f
  7955  0598  2D94               	goto	u7915
  7956  0599  0834               	movf	??___ftmul,w
  7957  059A  00B7               	movwf	??___ftmul+3
  7958  059B  0837               	movf	??___ftmul+3,w
  7959  059C  06BD               	xorwf	___ftmul@sign,f
  7960  059D  3080               	movlw	128
  7961  059E  00B4               	movwf	??___ftmul
  7962  059F  0834               	movf	??___ftmul,w
  7963  05A0  05BD               	andwf	___ftmul@sign,f
  7964  05A1  17AF               	bsf	___ftmul@f1+1,7
  7965  05A2  17B2               	bsf	___ftmul@f2+1,7
  7966  05A3  30FF               	movlw	255
  7967  05A4  05B1               	andwf	___ftmul@f2,f
  7968  05A5  30FF               	movlw	255
  7969  05A6  05B2               	andwf	___ftmul@f2+1,f
  7970  05A7  3000               	movlw	0
  7971  05A8  05B3               	andwf	___ftmul@f2+2,f
  7972  05A9  3000               	movlw	0
  7973  05AA  00B9               	movwf	___ftmul@f3_as_product
  7974  05AB  3000               	movlw	0
  7975  05AC  00BA               	movwf	___ftmul@f3_as_product+1
  7976  05AD  3000               	movlw	0
  7977  05AE  00BB               	movwf	___ftmul@f3_as_product+2
  7978  05AF  3007               	movlw	7
  7979  05B0  00B4               	movwf	??___ftmul
  7980  05B1  0834               	movf	??___ftmul,w
  7981  05B2  00BC               	movwf	___ftmul@cntr
  7982  05B3                     l7970:	
  7983  05B3  1C2E               	btfss	___ftmul@f1,0
  7984  05B4  2DBB               	goto	l7974
  7985  05B5  0831               	movf	___ftmul@f2,w
  7986  05B6  07B9               	addwf	___ftmul@f3_as_product,f
  7987  05B7  0832               	movf	___ftmul@f2+1,w
  7988  05B8  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  7989  05B9  0833               	movf	___ftmul@f2+2,w
  7990  05BA  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  7991  05BB                     l7974:	
  7992  05BB  3001               	movlw	1
  7993  05BC                     u7935:	
  7994  05BC  36B0               	lsrf	___ftmul@f1+2,f
  7995  05BD  0CAF               	rrf	___ftmul@f1+1,f
  7996  05BE  0CAE               	rrf	___ftmul@f1,f
  7997  05BF  0B89               	decfsz	9,f
  7998  05C0  2DBC               	goto	u7935
  7999  05C1  3001               	movlw	1
  8000  05C2                     u7945:	
  8001  05C2  35B1               	lslf	___ftmul@f2,f
  8002  05C3  0DB2               	rlf	___ftmul@f2+1,f
  8003  05C4  0DB3               	rlf	___ftmul@f2+2,f
  8004  05C5  0B89               	decfsz	9,f
  8005  05C6  2DC2               	goto	u7945
  8006  05C7  3001               	movlw	1
  8007  05C8  02BC               	subwf	___ftmul@cntr,f
  8008  05C9  1D03               	btfss	3,2
  8009  05CA  2DB3               	goto	l7970
  8010  05CB  3009               	movlw	9
  8011  05CC  00B4               	movwf	??___ftmul
  8012  05CD  0834               	movf	??___ftmul,w
  8013  05CE  00BC               	movwf	___ftmul@cntr
  8014  05CF                     l7982:	
  8015  05CF  1C2E               	btfss	___ftmul@f1,0
  8016  05D0  2DD7               	goto	l7986
  8017  05D1  0831               	movf	___ftmul@f2,w
  8018  05D2  07B9               	addwf	___ftmul@f3_as_product,f
  8019  05D3  0832               	movf	___ftmul@f2+1,w
  8020  05D4  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8021  05D5  0833               	movf	___ftmul@f2+2,w
  8022  05D6  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8023  05D7                     l7986:	
  8024  05D7  3001               	movlw	1
  8025  05D8                     u7975:	
  8026  05D8  36B0               	lsrf	___ftmul@f1+2,f
  8027  05D9  0CAF               	rrf	___ftmul@f1+1,f
  8028  05DA  0CAE               	rrf	___ftmul@f1,f
  8029  05DB  0B89               	decfsz	9,f
  8030  05DC  2DD8               	goto	u7975
  8031  05DD  3001               	movlw	1
  8032  05DE                     u7985:	
  8033  05DE  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8034  05DF  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8035  05E0  0CB9               	rrf	___ftmul@f3_as_product,f
  8036  05E1  0B89               	decfsz	9,f
  8037  05E2  2DDE               	goto	u7985
  8038  05E3  3001               	movlw	1
  8039  05E4  02BC               	subwf	___ftmul@cntr,f
  8040  05E5  1D03               	btfss	3,2
  8041  05E6  2DCF               	goto	l7982
  8042  05E7  0839               	movf	___ftmul@f3_as_product,w
  8043  05E8  00A0               	movwf	___ftpack@arg
  8044  05E9  083A               	movf	___ftmul@f3_as_product+1,w
  8045  05EA  00A1               	movwf	___ftpack@arg+1
  8046  05EB  083B               	movf	___ftmul@f3_as_product+2,w
  8047  05EC  00A2               	movwf	___ftpack@arg+2
  8048  05ED  0838               	movf	___ftmul@exp,w
  8049  05EE  00B4               	movwf	??___ftmul
  8050  05EF  0834               	movf	??___ftmul,w
  8051  05F0  00A3               	movwf	___ftpack@exp
  8052  05F1  083D               	movf	___ftmul@sign,w
  8053  05F2  00B5               	movwf	??___ftmul+1
  8054  05F3  0835               	movf	??___ftmul+1,w
  8055  05F4  00A4               	movwf	___ftpack@sign
  8056  05F5  318B  230A         	fcall	___ftpack
  8057  05F7  0020               	movlb	0	; select bank0
  8058  05F8  0820               	movf	?___ftpack,w
  8059  05F9  00AE               	movwf	?___ftmul
  8060  05FA  0821               	movf	?___ftpack+1,w
  8061  05FB  00AF               	movwf	?___ftmul+1
  8062  05FC  0822               	movf	?___ftpack+2,w
  8063  05FD  00B0               	movwf	?___ftmul+2
  8064  05FE  0008               	return
  8065  05FF                     __end_of___ftmul:	
  8066                           
  8067                           	psect	text33
  8068  1082                     __ptext33:	
  8069 ;; *************** function _setMemory_Modify *****************
  8070 ;; Defined at:
  8071 ;;		line 1064 in file "../src/MCU_B1.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;  command         1    wreg     unsigned char 
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;  command         1    1[BANK0 ] unsigned char 
  8076 ;; Return value:  Size  Location     Type
  8077 ;;		None               void
  8078 ;; Registers used:
  8079 ;;		wreg, status,2, status,0
  8080 ;; Tracked objects:
  8081 ;;		On entry : 0/0
  8082 ;;		On exit  : 0/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8086 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8087 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8088 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8089 ;;Total ram usage:        2 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; Hardware stack levels required when called:    5
  8092 ;; This function calls:
  8093 ;;		Nothing
  8094 ;; This function is called by:
  8095 ;;		_setLog_Code
  8096 ;;		_setRFSW_AdjControl
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           
  8101                           ;psect for function _setMemory_Modify
  8102  1082                     _setMemory_Modify:	
  8103                           
  8104                           ;incstack = 0
  8105                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8106                           ;setMemory_Modify@command stored from wreg
  8107  1082  0020               	movlb	0	; select bank0
  8108  1083  00A1               	movwf	setMemory_Modify@command
  8109                           
  8110                           ;MCU_B1.c: 1065: Memory.Modify = command == 1 ? 1 : 0;
  8111  1084  0821               	movf	setMemory_Modify@command,w
  8112  1085  3A01               	xorlw	1
  8113  1086  3000               	movlw	0
  8114  1087  1903               	skipnz
  8115  1088  3001               	movlw	1
  8116  1089  00A0               	movwf	??_setMemory_Modify
  8117  108A  0023               	movlb	3	; select bank3
  8118  108B  0844               	movf	(_Memory^(0+384)+36),w
  8119  108C  0020               	movlb	0	; select bank0
  8120  108D  0620               	xorwf	??_setMemory_Modify,w
  8121  108E  39FE               	andlw	-2
  8122  108F  0620               	xorwf	??_setMemory_Modify,w
  8123  1090  0023               	movlb	3	; select bank3
  8124  1091  00C4               	movwf	(_Memory^(0+384)+36)
  8125                           
  8126                           ;MCU_B1.c: 1066: Memory.Time = 0;
  8127  1092  01C2               	clrf	(_Memory^(0+384)+34)
  8128  1093  01C3               	clrf	((_Memory+1)^(0+384)+34)
  8129  1094  0008               	return
  8130  1095                     __end_of_setMemory_Modify:	
  8131                           
  8132                           	psect	text34
  8133  1F82                     __ptext34:	
  8134 ;; *************** function _getRF_KeyStatus *****************
  8135 ;; Defined at:
  8136 ;;		line 190 in file "../src/RF_Control_B1.c"
  8137 ;; Parameters:    Size  Location     Type
  8138 ;;		None
  8139 ;; Auto vars:     Size  Location     Type
  8140 ;;  key             1    1[BANK0 ] unsigned char 
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  1    wreg      unsigned char 
  8143 ;; Registers used:
  8144 ;;		wreg, status,2
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8151 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8153 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;Total ram usage:        3 bytes
  8155 ;; Hardware stack levels used:    1
  8156 ;; Hardware stack levels required when called:    5
  8157 ;; This function calls:
  8158 ;;		Nothing
  8159 ;; This function is called by:
  8160 ;;		_setRF_Main
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164                           
  8165                           ;psect for function _getRF_KeyStatus
  8166  1F82                     _getRF_KeyStatus:	
  8167                           
  8168                           ;RF_Control_B1.c: 191: char key = 0;
  8169                           
  8170                           ;incstack = 0
  8171                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8172  1F82  0020               	movlb	0	; select bank0
  8173  1F83  01A1               	clrf	getRF_KeyStatus@key
  8174                           
  8175                           ;RF_Control_B1.c: 197: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8176  1F84  01A2               	clrf	_getRF_KeyStatus$4770
  8177  1F85  0AA2               	incf	_getRF_KeyStatus$4770,f
  8178  1F86  1F0C               	btfss	12,6	;volatile
  8179  1F87  1A0C               	btfsc	12,4	;volatile
  8180  1F88  2F8D               	goto	l8872
  8181  1F89  1C0C               	btfss	12,0	;volatile
  8182  1F8A  188D               	btfsc	13,1	;volatile
  8183  1F8B  2F8D               	goto	l8872
  8184  1F8C  01A2               	clrf	_getRF_KeyStatus$4770
  8185  1F8D                     l8872:	
  8186  1F8D  0822               	movf	_getRF_KeyStatus$4770,w
  8187  1F8E  00A0               	movwf	??_getRF_KeyStatus
  8188  1F8F  0820               	movf	??_getRF_KeyStatus,w
  8189  1F90  00A1               	movwf	getRF_KeyStatus@key
  8190                           
  8191                           ;RF_Control_B1.c: 203: return key;
  8192  1F91  0821               	movf	getRF_KeyStatus@key,w
  8193  1F92  0008               	return
  8194  1F93                     __end_of_getRF_KeyStatus:	
  8195                           
  8196                           	psect	text35
  8197  1F71                     __ptext35:	
  8198 ;; *************** function _getBuz_GO *****************
  8199 ;; Defined at:
  8200 ;;		line 82 in file "../src/Buzzer_B1.c"
  8201 ;; Parameters:    Size  Location     Type
  8202 ;;		None
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;  i               2    4[BANK0 ] int 
  8205 ;; Return value:  Size  Location     Type
  8206 ;;                  2    0[BANK0 ] int 
  8207 ;; Registers used:
  8208 ;;		wreg, status,2, status,0
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8214 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;Total ram usage:        6 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    5
  8221 ;; This function calls:
  8222 ;;		Nothing
  8223 ;; This function is called by:
  8224 ;;		_setRF_Main
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           
  8229                           ;psect for function _getBuz_GO
  8230  1F71                     _getBuz_GO:	
  8231                           
  8232                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8233                           
  8234                           ;incstack = 0
  8235                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8236  1F71  0021               	movlb	1	; select bank1
  8237  1F72  0C2E               	rrf	_Buz1^(0+128),w
  8238  1F73  3901               	andlw	1
  8239  1F74  0020               	movlb	0	; select bank0
  8240  1F75  00A2               	movwf	??_getBuz_GO
  8241  1F76  01A3               	clrf	??_getBuz_GO+1
  8242  1F77  0822               	movf	??_getBuz_GO,w
  8243  1F78  00A4               	movwf	getBuz_GO@i
  8244  1F79  0823               	movf	??_getBuz_GO+1,w
  8245  1F7A  00A5               	movwf	getBuz_GO@i+1
  8246                           
  8247                           ;Buzzer_B1.c: 84: return i;
  8248  1F7B  0825               	movf	getBuz_GO@i+1,w
  8249  1F7C  01A1               	clrf	?_getBuz_GO+1
  8250  1F7D  07A1               	addwf	?_getBuz_GO+1,f
  8251  1F7E  0824               	movf	getBuz_GO@i,w
  8252  1F7F  01A0               	clrf	?_getBuz_GO
  8253  1F80  07A0               	addwf	?_getBuz_GO,f
  8254  1F81  0008               	return
  8255  1F82                     __end_of_getBuz_GO:	
  8256                           
  8257                           	psect	text36
  8258  1F31                     __ptext36:	
  8259 ;; *************** function _RF_RxDisable *****************
  8260 ;; Defined at:
  8261 ;;		line 265 in file "../src/RF_Control_B1.c"
  8262 ;; Parameters:    Size  Location     Type
  8263 ;;		None
  8264 ;; Auto vars:     Size  Location     Type
  8265 ;;		None
  8266 ;; Return value:  Size  Location     Type
  8267 ;;		None               void
  8268 ;; Registers used:
  8269 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8270 ;; Tracked objects:
  8271 ;;		On entry : 0/0
  8272 ;;		On exit  : 0/0
  8273 ;;		Unchanged: 0/0
  8274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8279 ;;Total ram usage:        0 bytes
  8280 ;; Hardware stack levels used:    1
  8281 ;; Hardware stack levels required when called:    7
  8282 ;; This function calls:
  8283 ;;		_CC2500_WriteCommand
  8284 ;; This function is called by:
  8285 ;;		_setRF_Main
  8286 ;; This function uses a non-reentrant model
  8287 ;;
  8288                           
  8289                           
  8290                           ;psect for function _RF_RxDisable
  8291  1F31                     _RF_RxDisable:	
  8292                           
  8293                           ;RF_Control_B1.c: 266: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8294                           
  8295                           ;incstack = 0
  8296                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8297  1F31  0021               	movlb	1	; select bank1
  8298  1F32  18BA               	btfsc	_RF1^(0+128),1
  8299  1F33  2F36               	goto	l2142
  8300  1F34  1DBA               	btfss	_RF1^(0+128),3
  8301  1F35  0008               	return
  8302  1F36                     l2142:	
  8303                           
  8304                           ;RF_Control_B1.c: 267: RF1.RxStatus = 0;
  8305  1F36  11BA               	bcf	_RF1^(0+128),3
  8306                           
  8307                           ;RF_Control_B1.c: 268: RF1.ReceiveGO = 0;
  8308  1F37  10BA               	bcf	_RF1^(0+128),1
  8309                           
  8310                           ;RF_Control_B1.c: 269: CC2500_WriteCommand(0x36);
  8311  1F38  3036               	movlw	54
  8312  1F39  3191  2195  319F   	fcall	_CC2500_WriteCommand
  8313                           
  8314                           ;RF_Control_B1.c: 271: CC2500_WriteCommand(0x3A);
  8315  1F3C  303A               	movlw	58
  8316  1F3D  3191  2195         	fcall	_CC2500_WriteCommand
  8317  1F3F  0008               	return
  8318  1F40                     __end_of_RF_RxDisable:	
  8319                           
  8320                           	psect	text37
  8321  0BCF                     __ptext37:	
  8322 ;; *************** function _CC2500_TxData *****************
  8323 ;; Defined at:
  8324 ;;		line 32 in file "../src/CC2500_B1.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;		None
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8329 ;; Return value:  Size  Location     Type
  8330 ;;		None               void
  8331 ;; Registers used:
  8332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8333 ;; Tracked objects:
  8334 ;;		On entry : 0/0
  8335 ;;		On exit  : 0/0
  8336 ;;		Unchanged: 0/0
  8337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;Total ram usage:        2 bytes
  8343 ;; Hardware stack levels used:    1
  8344 ;; Hardware stack levels required when called:    7
  8345 ;; This function calls:
  8346 ;;		_CC2500_WriteByte
  8347 ;;		_CC2500_WriteCommand
  8348 ;;		_Timeout_Counter
  8349 ;;		_set_TimeoutCleared
  8350 ;; This function is called by:
  8351 ;;		_setRF_Main
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           
  8356                           ;psect for function _CC2500_TxData
  8357  0BCF                     _CC2500_TxData:	
  8358                           
  8359                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8360                           ;CC2500_B1.c: 35: RC4 = 0;
  8361                           
  8362                           ;incstack = 0
  8363                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8364  0BCF  0020               	movlb	0	; select bank0
  8365  0BD0  120E               	bcf	14,4	;volatile
  8366                           
  8367                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8368  0BD1  307F               	movlw	127
  8369  0BD2  00A4               	movwf	??_CC2500_TxData
  8370  0BD3  0824               	movf	??_CC2500_TxData,w
  8371  0BD4  0021               	movlb	1	; select bank1
  8372  0BD5  00D0               	movwf	_SPI0Buffer^(0+128)
  8373                           
  8374                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8375  0BD6  2BDA               	goto	l8598
  8376  0BD7                     l8596:	
  8377                           
  8378                           ;CC2500_B1.c: 38: Timeout_Counter();
  8379  0BD7  3190  20F8  318B   	fcall	_Timeout_Counter
  8380  0BDA                     l8598:	
  8381  0BDA  0020               	movlb	0	; select bank0
  8382  0BDB  1D0E               	btfss	14,2	;volatile
  8383  0BDC  2BE0               	goto	l8602
  8384  0BDD  0021               	movlb	1	; select bank1
  8385  0BDE  1D2B               	btfss	(_myMain^(0+128)+11),2
  8386  0BDF  2BD7               	goto	l8596
  8387  0BE0                     l8602:	
  8388                           
  8389                           ;CC2500_B1.c: 39: };
  8390                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8391  0BE0  319E  2649  318B   	fcall	_set_TimeoutCleared
  8392                           
  8393                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8394  0BE3  3191  2163  318B   	fcall	_CC2500_WriteByte
  8395                           
  8396                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8397  0BE6  0021               	movlb	1	; select bank1
  8398  0BE7  0852               	movf	_Tx_Length^(0+128),w
  8399  0BE8  0020               	movlb	0	; select bank0
  8400  0BE9  00A4               	movwf	??_CC2500_TxData
  8401  0BEA  0824               	movf	??_CC2500_TxData,w
  8402  0BEB  0021               	movlb	1	; select bank1
  8403  0BEC  00D0               	movwf	_SPI0Buffer^(0+128)
  8404                           
  8405                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8406  0BED  3191  2163  318B   	fcall	_CC2500_WriteByte
  8407                           
  8408                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8409  0BF0  0020               	movlb	0	; select bank0
  8410  0BF1  01A5               	clrf	CC2500_TxData@loop_e
  8411  0BF2                     l8616:	
  8412  0BF2  0021               	movlb	1	; select bank1
  8413  0BF3  0852               	movf	_Tx_Length^(0+128),w
  8414  0BF4  0020               	movlb	0	; select bank0
  8415  0BF5  0225               	subwf	CC2500_TxData@loop_e,w
  8416  0BF6  1803               	btfsc	3,0
  8417  0BF7  2C0B               	goto	l251
  8418                           
  8419                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8420  0BF8  0825               	movf	CC2500_TxData@loop_e,w
  8421  0BF9  3E20               	addlw	_RF_Data& (0+255)
  8422  0BFA  0086               	movwf	6
  8423  0BFB  3001               	movlw	1	; select bank2/3
  8424  0BFC  0087               	movwf	7
  8425  0BFD  0801               	movf	1,w
  8426  0BFE  00A4               	movwf	??_CC2500_TxData
  8427  0BFF  0824               	movf	??_CC2500_TxData,w
  8428  0C00  0021               	movlb	1	; select bank1
  8429  0C01  00D0               	movwf	_SPI0Buffer^(0+128)
  8430                           
  8431                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8432  0C02  3191  2163  318B   	fcall	_CC2500_WriteByte
  8433  0C05  3001               	movlw	1
  8434  0C06  0020               	movlb	0	; select bank0
  8435  0C07  00A4               	movwf	??_CC2500_TxData
  8436  0C08  0824               	movf	??_CC2500_TxData,w
  8437  0C09  07A5               	addwf	CC2500_TxData@loop_e,f
  8438  0C0A  2BF2               	goto	l8616
  8439  0C0B                     l251:	
  8440                           
  8441                           ;CC2500_B1.c: 48: }
  8442                           ;CC2500_B1.c: 49: RC4 = 1;
  8443  0C0B  160E               	bsf	14,4	;volatile
  8444                           
  8445                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8446  0C0C  3035               	movlw	53
  8447  0C0D  3191  2195  318B   	fcall	_CC2500_WriteCommand
  8448                           
  8449                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8450  0C10  2C14               	goto	l8622
  8451  0C11                     l8620:	
  8452                           
  8453                           ;CC2500_B1.c: 52: Timeout_Counter();
  8454  0C11  3190  20F8  318B   	fcall	_Timeout_Counter
  8455  0C14                     l8622:	
  8456  0C14  0020               	movlb	0	; select bank0
  8457  0C15  180D               	btfsc	13,0	;volatile
  8458  0C16  2C1A               	goto	l8626
  8459  0C17  0021               	movlb	1	; select bank1
  8460  0C18  1D2B               	btfss	(_myMain^(0+128)+11),2
  8461  0C19  2C11               	goto	l8620
  8462  0C1A                     l8626:	
  8463                           
  8464                           ;CC2500_B1.c: 53: };
  8465                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8466  0C1A  319E  2649  318B   	fcall	_set_TimeoutCleared
  8467                           
  8468                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8469  0C1D  2C21               	goto	l8630
  8470  0C1E                     l8628:	
  8471                           
  8472                           ;CC2500_B1.c: 57: Timeout_Counter();
  8473  0C1E  3190  20F8  318B   	fcall	_Timeout_Counter
  8474  0C21                     l8630:	
  8475  0C21  0020               	movlb	0	; select bank0
  8476  0C22  1C0D               	btfss	13,0	;volatile
  8477  0C23  2C27               	goto	l8634
  8478  0C24  0021               	movlb	1	; select bank1
  8479  0C25  1D2B               	btfss	(_myMain^(0+128)+11),2
  8480  0C26  2C1E               	goto	l8628
  8481  0C27                     l8634:	
  8482                           
  8483                           ;CC2500_B1.c: 58: };
  8484                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8485  0C27  319E  2649  318B   	fcall	_set_TimeoutCleared
  8486                           
  8487                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8488  0C2A  3036               	movlw	54
  8489  0C2B  3191  2195  318B   	fcall	_CC2500_WriteCommand
  8490                           
  8491                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8492  0C2E  303B               	movlw	59
  8493  0C2F  3191  2195         	fcall	_CC2500_WriteCommand
  8494                           
  8495                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8496  0C31  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8497  0C32  0008               	return
  8498  0C33                     __end_of_CC2500_TxData:	
  8499                           
  8500                           	psect	text38
  8501  0D64                     __ptext38:	
  8502 ;; *************** function _CC2500_RxData *****************
  8503 ;; Defined at:
  8504 ;;		line 70 in file "../src/CC2500_B1.c"
  8505 ;; Parameters:    Size  Location     Type
  8506 ;;		None
  8507 ;; Auto vars:     Size  Location     Type
  8508 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8509 ;; Return value:  Size  Location     Type
  8510 ;;		None               void
  8511 ;; Registers used:
  8512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8513 ;; Tracked objects:
  8514 ;;		On entry : 0/0
  8515 ;;		On exit  : 0/0
  8516 ;;		Unchanged: 0/0
  8517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8519 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8522 ;;Total ram usage:        2 bytes
  8523 ;; Hardware stack levels used:    1
  8524 ;; Hardware stack levels required when called:    7
  8525 ;; This function calls:
  8526 ;;		_CC2500_ReadByte
  8527 ;;		_CC2500_ReadStatus
  8528 ;;		_CC2500_WriteByte
  8529 ;;		_Timeout_Counter
  8530 ;;		_set_TimeoutCleared
  8531 ;; This function is called by:
  8532 ;;		_setRF_Main
  8533 ;; This function uses a non-reentrant model
  8534 ;;
  8535                           
  8536                           
  8537                           ;psect for function _CC2500_RxData
  8538  0D64                     _CC2500_RxData:	
  8539                           
  8540                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8541                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8542                           
  8543                           ;incstack = 0
  8544                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8545  0D64  0020               	movlb	0	; select bank0
  8546  0D65  180D               	btfsc	13,0	;volatile
  8547  0D66  2D6B               	goto	l8648
  8548  0D67  2D74               	goto	l8654
  8549  0D68                     l8646:	
  8550                           ;CC2500_B1.c: 76: {
  8551                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8552                           
  8553                           
  8554                           ;CC2500_B1.c: 78: Timeout_Counter();
  8555  0D68  3190  20F8  318D   	fcall	_Timeout_Counter
  8556  0D6B                     l8648:	
  8557  0D6B  0020               	movlb	0	; select bank0
  8558  0D6C  1C0D               	btfss	13,0	;volatile
  8559  0D6D  2D71               	goto	l8652
  8560  0D6E  0021               	movlb	1	; select bank1
  8561  0D6F  1D2B               	btfss	(_myMain^(0+128)+11),2
  8562  0D70  2D68               	goto	l8646
  8563  0D71                     l8652:	
  8564                           
  8565                           ;CC2500_B1.c: 79: };
  8566                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8567  0D71  319E  2649  318D   	fcall	_set_TimeoutCleared
  8568  0D74                     l8654:	
  8569                           
  8570                           ;CC2500_B1.c: 81: }
  8571                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8572  0D74  303B               	movlw	59
  8573  0D75  3193  2308  318D   	fcall	_CC2500_ReadStatus
  8574                           
  8575                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8576  0D78  0021               	movlb	1	; select bank1
  8577  0D79  0855               	movf	_s_data^(0+128),w
  8578  0D7A  1903               	btfsc	3,2
  8579  0D7B  0008               	return
  8580                           
  8581                           ;CC2500_B1.c: 86: RC4 = 0;
  8582  0D7C  0020               	movlb	0	; select bank0
  8583  0D7D  120E               	bcf	14,4	;volatile
  8584                           
  8585                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8586  0D7E  30FF               	movlw	255
  8587  0D7F  00A4               	movwf	??_CC2500_RxData
  8588  0D80  0824               	movf	??_CC2500_RxData,w
  8589  0D81  0021               	movlb	1	; select bank1
  8590  0D82  00D0               	movwf	_SPI0Buffer^(0+128)
  8591                           
  8592                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8593  0D83  2D87               	goto	l8664
  8594  0D84                     l8662:	
  8595                           
  8596                           ;CC2500_B1.c: 89: Timeout_Counter();
  8597  0D84  3190  20F8  318D   	fcall	_Timeout_Counter
  8598  0D87                     l8664:	
  8599  0D87  0020               	movlb	0	; select bank0
  8600  0D88  1D0E               	btfss	14,2	;volatile
  8601  0D89  2D8D               	goto	l8668
  8602  0D8A  0021               	movlb	1	; select bank1
  8603  0D8B  1D2B               	btfss	(_myMain^(0+128)+11),2
  8604  0D8C  2D84               	goto	l8662
  8605  0D8D                     l8668:	
  8606                           
  8607                           ;CC2500_B1.c: 90: };
  8608                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  8609  0D8D  319E  2649  318D   	fcall	_set_TimeoutCleared
  8610                           
  8611                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  8612  0D90  3191  2163  318D   	fcall	_CC2500_WriteByte
  8613                           
  8614                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  8615  0D93  3191  21E5  318D   	fcall	_CC2500_ReadByte
  8616                           
  8617                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  8618  0D96  0021               	movlb	1	; select bank1
  8619  0D97  0850               	movf	_SPI0Buffer^(0+128),w
  8620  0D98  0020               	movlb	0	; select bank0
  8621  0D99  00A4               	movwf	??_CC2500_RxData
  8622  0D9A  0824               	movf	??_CC2500_RxData,w
  8623  0D9B  0021               	movlb	1	; select bank1
  8624  0D9C  00CF               	movwf	_Rx_Length^(0+128)
  8625                           
  8626                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8627  0D9D  0020               	movlb	0	; select bank0
  8628  0D9E  01A5               	clrf	CC2500_RxData@loop_f
  8629  0D9F                     l8684:	
  8630  0D9F  0021               	movlb	1	; select bank1
  8631  0DA0  084F               	movf	_Rx_Length^(0+128),w
  8632  0DA1  0020               	movlb	0	; select bank0
  8633  0DA2  0225               	subwf	CC2500_RxData@loop_f,w
  8634  0DA3  1803               	btfsc	3,0
  8635  0DA4  2DB8               	goto	l8686
  8636                           
  8637                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  8638  0DA5  3191  21E5  318D   	fcall	_CC2500_ReadByte
  8639                           
  8640                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  8641  0DA8  0021               	movlb	1	; select bank1
  8642  0DA9  0850               	movf	_SPI0Buffer^(0+128),w
  8643  0DAA  0020               	movlb	0	; select bank0
  8644  0DAB  00A4               	movwf	??_CC2500_RxData
  8645  0DAC  0825               	movf	CC2500_RxData@loop_f,w
  8646  0DAD  3E20               	addlw	_RF_Data& (0+255)
  8647  0DAE  0086               	movwf	6
  8648  0DAF  3001               	movlw	1	; select bank2/3
  8649  0DB0  0087               	movwf	7
  8650  0DB1  0824               	movf	??_CC2500_RxData,w
  8651  0DB2  0081               	movwf	1
  8652  0DB3  3001               	movlw	1
  8653  0DB4  00A4               	movwf	??_CC2500_RxData
  8654  0DB5  0824               	movf	??_CC2500_RxData,w
  8655  0DB6  07A5               	addwf	CC2500_RxData@loop_f,f
  8656  0DB7  2D9F               	goto	l8684
  8657  0DB8                     l8686:	
  8658                           
  8659                           ;CC2500_B1.c: 99: }
  8660                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  8661  0DB8  3191  21E5  318D   	fcall	_CC2500_ReadByte
  8662                           
  8663                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  8664  0DBB  0021               	movlb	1	; select bank1
  8665  0DBC  0850               	movf	_SPI0Buffer^(0+128),w
  8666  0DBD  0020               	movlb	0	; select bank0
  8667  0DBE  00A4               	movwf	??_CC2500_RxData
  8668  0DBF  0824               	movf	??_CC2500_RxData,w
  8669  0DC0  0021               	movlb	1	; select bank1
  8670  0DC1  00CE               	movwf	_RSSI^(0+128)
  8671                           
  8672                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8673  0DC2  3191  21E5         	fcall	_CC2500_ReadByte
  8674                           
  8675                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  8676  0DC4  0021               	movlb	1	; select bank1
  8677  0DC5  0850               	movf	_SPI0Buffer^(0+128),w
  8678  0DC6  0020               	movlb	0	; select bank0
  8679  0DC7  00A4               	movwf	??_CC2500_RxData
  8680  0DC8  0824               	movf	??_CC2500_RxData,w
  8681  0DC9  0021               	movlb	1	; select bank1
  8682  0DCA  00C8               	movwf	_CRC^(0+128)
  8683                           
  8684                           ;CC2500_B1.c: 104: RC4 = 1;
  8685  0DCB  0020               	movlb	0	; select bank0
  8686  0DCC  160E               	bsf	14,4	;volatile
  8687                           
  8688                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  8689  0DCD  0021               	movlb	1	; select bank1
  8690  0DCE  1BC8               	btfsc	_CRC^(0+128),7
  8691                           
  8692                           ;CC2500_B1.c: 106: Receive_OK = 1;
  8693  0DCF  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8694                           
  8695                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  8696  0DD0  11BA               	bcf	_RF1^(0+128),3
  8697                           
  8698                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  8699  0DD1  14BA               	bsf	_RF1^(0+128),1
  8700  0DD2  0008               	return
  8701  0DD3                     __end_of_CC2500_RxData:	
  8702                           
  8703                           	psect	text39
  8704  1308                     __ptext39:	
  8705 ;; *************** function _CC2500_ReadStatus *****************
  8706 ;; Defined at:
  8707 ;;		line 301 in file "../src/CC2500_B1.c"
  8708 ;; Parameters:    Size  Location     Type
  8709 ;;  status_addr     1    wreg     unsigned char 
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8712 ;; Return value:  Size  Location     Type
  8713 ;;		None               void
  8714 ;; Registers used:
  8715 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8724 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8725 ;;Total ram usage:        2 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; Hardware stack levels required when called:    6
  8728 ;; This function calls:
  8729 ;;		_CC2500_ReadByte
  8730 ;;		_CC2500_WriteByte
  8731 ;;		_Timeout_Counter
  8732 ;;		_set_TimeoutCleared
  8733 ;; This function is called by:
  8734 ;;		_CC2500_RxData
  8735 ;; This function uses a non-reentrant model
  8736 ;;
  8737                           
  8738                           
  8739                           ;psect for function _CC2500_ReadStatus
  8740  1308                     _CC2500_ReadStatus:	
  8741                           
  8742                           ;incstack = 0
  8743                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8744                           ;CC2500_ReadStatus@status_addr stored from wreg
  8745  1308  0020               	movlb	0	; select bank0
  8746  1309  00A3               	movwf	CC2500_ReadStatus@status_addr
  8747                           
  8748                           ;CC2500_B1.c: 302: RC4 = 0;
  8749  130A  120E               	bcf	14,4	;volatile
  8750                           
  8751                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  8752  130B  0823               	movf	CC2500_ReadStatus@status_addr,w
  8753  130C  3EC0               	addlw	192
  8754  130D  00A2               	movwf	??_CC2500_ReadStatus
  8755  130E  0822               	movf	??_CC2500_ReadStatus,w
  8756  130F  0021               	movlb	1	; select bank1
  8757  1310  00D0               	movwf	_SPI0Buffer^(0+128)
  8758                           
  8759                           ;CC2500_B1.c: 305: while (RC2 == 1 && myMain.Timeout == 0) {
  8760  1311  2B15               	goto	l8454
  8761  1312                     l8452:	
  8762                           
  8763                           ;CC2500_B1.c: 306: Timeout_Counter();
  8764  1312  3190  20F8  3193   	fcall	_Timeout_Counter
  8765  1315                     l8454:	
  8766  1315  0020               	movlb	0	; select bank0
  8767  1316  1D0E               	btfss	14,2	;volatile
  8768  1317  2B1B               	goto	l8458
  8769  1318  0021               	movlb	1	; select bank1
  8770  1319  1D2B               	btfss	(_myMain^(0+128)+11),2
  8771  131A  2B12               	goto	l8452
  8772  131B                     l8458:	
  8773                           
  8774                           ;CC2500_B1.c: 307: };
  8775                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  8776  131B  319E  2649  3193   	fcall	_set_TimeoutCleared
  8777                           
  8778                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  8779  131E  3191  2163  3193   	fcall	_CC2500_WriteByte
  8780                           
  8781                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  8782  1321  3191  21E5         	fcall	_CC2500_ReadByte
  8783                           
  8784                           ;CC2500_B1.c: 312: RC4 = 1;
  8785  1323  0020               	movlb	0	; select bank0
  8786  1324  160E               	bsf	14,4	;volatile
  8787                           
  8788                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  8789  1325  0021               	movlb	1	; select bank1
  8790  1326  0850               	movf	_SPI0Buffer^(0+128),w
  8791  1327  0020               	movlb	0	; select bank0
  8792  1328  00A2               	movwf	??_CC2500_ReadStatus
  8793  1329  0822               	movf	??_CC2500_ReadStatus,w
  8794  132A  0021               	movlb	1	; select bank1
  8795  132B  00D5               	movwf	_s_data^(0+128)
  8796  132C  0008               	return
  8797  132D                     __end_of_CC2500_ReadStatus:	
  8798                           
  8799                           	psect	text40
  8800  11E5                     __ptext40:	
  8801 ;; *************** function _CC2500_ReadByte *****************
  8802 ;; Defined at:
  8803 ;;		line 235 in file "../src/CC2500_B1.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;		None
  8806 ;; Auto vars:     Size  Location     Type
  8807 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8808 ;; Return value:  Size  Location     Type
  8809 ;;		None               void
  8810 ;; Registers used:
  8811 ;;		wreg, status,2, status,0
  8812 ;; Tracked objects:
  8813 ;;		On entry : 0/0
  8814 ;;		On exit  : 0/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;Total ram usage:        2 bytes
  8822 ;; Hardware stack levels used:    1
  8823 ;; Hardware stack levels required when called:    5
  8824 ;; This function calls:
  8825 ;;		Nothing
  8826 ;; This function is called by:
  8827 ;;		_CC2500_RxData
  8828 ;;		_CC2500_ReadStatus
  8829 ;;		_CC2500_ReadREG
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           
  8834                           ;psect for function _CC2500_ReadByte
  8835  11E5                     _CC2500_ReadByte:	
  8836                           
  8837                           ;CC2500_B1.c: 236: unsigned char loop_b;
  8838                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  8839                           
  8840                           ;incstack = 0
  8841                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8842  11E5  0020               	movlb	0	; select bank0
  8843  11E6  01A1               	clrf	CC2500_ReadByte@loop_b
  8844  11E7                     L2:	
  8845  11E7  3008               	movlw	8
  8846  11E8  0221               	subwf	CC2500_ReadByte@loop_b,w
  8847  11E9  1803               	btfsc	3,0
  8848  11EA  0008               	return
  8849                           
  8850                           ;CC2500_B1.c: 238: RC1 = 1;
  8851  11EB  148E               	bsf	14,1	;volatile
  8852                           
  8853                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  8854  11EC  1003               	clrc
  8855  11ED  0021               	movlb	1	; select bank1
  8856  11EE  0DD0               	rlf	_SPI0Buffer^(0+128),f
  8857                           
  8858                           ;CC2500_B1.c: 240: if (RC2 == 1)
  8859  11EF  0020               	movlb	0	; select bank0
  8860  11F0  1D0E               	btfss	14,2	;volatile
  8861  11F1  29F5               	goto	l8356
  8862                           
  8863                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  8864  11F2  0021               	movlb	1	; select bank1
  8865  11F3  1450               	bsf	_SPI0Buffer^(0+128),0
  8866  11F4  29FB               	goto	l8358
  8867  11F5                     l8356:	
  8868                           
  8869                           ;CC2500_B1.c: 242: else
  8870                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  8871  11F5  30FE               	movlw	254
  8872  11F6  0020               	movlb	0	; select bank0
  8873  11F7  00A0               	movwf	??_CC2500_ReadByte
  8874  11F8  0820               	movf	??_CC2500_ReadByte,w
  8875  11F9  0021               	movlb	1	; select bank1
  8876  11FA  05D0               	andwf	_SPI0Buffer^(0+128),f
  8877  11FB                     l8358:	
  8878                           
  8879                           ;CC2500_B1.c: 244: RC1 = 0;
  8880  11FB  0020               	movlb	0	; select bank0
  8881  11FC  108E               	bcf	14,1	;volatile
  8882  11FD  3001               	movlw	1
  8883  11FE  00A0               	movwf	??_CC2500_ReadByte
  8884  11FF  0820               	movf	??_CC2500_ReadByte,w
  8885  1200  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8886  1201  29E7               	goto	L2
  8887  1202                     __end_of_CC2500_ReadByte:	
  8888                           
  8889                           	psect	text41
  8890  1E2D                     __ptext41:	
  8891 ;; *************** function _RF_Initialization *****************
  8892 ;; Defined at:
  8893 ;;		line 9 in file "../src/RF_Control_B1.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;		None
  8896 ;; Auto vars:     Size  Location     Type
  8897 ;;		None
  8898 ;; Return value:  Size  Location     Type
  8899 ;;		None               void
  8900 ;; Registers used:
  8901 ;;		wreg, status,2, status,0, pclath, cstack
  8902 ;; Tracked objects:
  8903 ;;		On entry : 0/0
  8904 ;;		On exit  : 0/0
  8905 ;;		Unchanged: 0/0
  8906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8911 ;;Total ram usage:        0 bytes
  8912 ;; Hardware stack levels used:    1
  8913 ;; Hardware stack levels required when called:    6
  8914 ;; This function calls:
  8915 ;;		_setRF_Initialization
  8916 ;; This function is called by:
  8917 ;;		_main
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           
  8922                           ;psect for function _RF_Initialization
  8923  1E2D                     _RF_Initialization:	
  8924                           
  8925                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8926                           
  8927                           ;incstack = 0
  8928                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8929  1E2D  319E  269D         	fcall	_setRF_Initialization
  8930  1E2F  0008               	return
  8931  1E30                     __end_of_RF_Initialization:	
  8932                           
  8933                           	psect	text42
  8934  1E9D                     __ptext42:	
  8935 ;; *************** function _setRF_Initialization *****************
  8936 ;; Defined at:
  8937 ;;		line 43 in file "../src/RF_Control_B1.c"
  8938 ;; Parameters:    Size  Location     Type
  8939 ;;		None
  8940 ;; Auto vars:     Size  Location     Type
  8941 ;;		None
  8942 ;; Return value:  Size  Location     Type
  8943 ;;		None               void
  8944 ;; Registers used:
  8945 ;;		wreg
  8946 ;; Tracked objects:
  8947 ;;		On entry : 0/0
  8948 ;;		On exit  : 0/0
  8949 ;;		Unchanged: 0/0
  8950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8953 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;Total ram usage:        1 bytes
  8956 ;; Hardware stack levels used:    1
  8957 ;; Hardware stack levels required when called:    5
  8958 ;; This function calls:
  8959 ;;		Nothing
  8960 ;; This function is called by:
  8961 ;;		_RF_Initialization
  8962 ;; This function uses a non-reentrant model
  8963 ;;
  8964                           
  8965                           
  8966                           ;psect for function _setRF_Initialization
  8967  1E9D                     _setRF_Initialization:	
  8968                           
  8969                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  8970                           
  8971                           ;incstack = 0
  8972                           ; Regs used in _setRF_Initialization: [wreg]
  8973  1E9D  3015               	movlw	21
  8974  1E9E  0020               	movlb	0	; select bank0
  8975  1E9F  00A0               	movwf	??_setRF_Initialization
  8976  1EA0  0820               	movf	??_setRF_Initialization,w
  8977  1EA1  0021               	movlb	1	; select bank1
  8978  1EA2  00D2               	movwf	_Tx_Length^(0+128)
  8979                           
  8980                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  8981  1EA3  3005               	movlw	5
  8982  1EA4  00C1               	movwf	(_RF1^(0+128)+7)
  8983  1EA5  3000               	movlw	0
  8984  1EA6  00C2               	movwf	(_RF1^(0+128)+8)
  8985  1EA7  0008               	return
  8986  1EA8                     __end_of_setRF_Initialization:	
  8987                           
  8988                           	psect	text43
  8989  1FC9                     __ptext43:	
  8990 ;; *************** function _Mcu_Initialization *****************
  8991 ;; Defined at:
  8992 ;;		line 30 in file "../src/MCU_B1.c"
  8993 ;; Parameters:    Size  Location     Type
  8994 ;;		None
  8995 ;; Auto vars:     Size  Location     Type
  8996 ;;		None
  8997 ;; Return value:  Size  Location     Type
  8998 ;;		None               void
  8999 ;; Registers used:
  9000 ;;		wreg, status,2, status,0, pclath, cstack
  9001 ;; Tracked objects:
  9002 ;;		On entry : 0/0
  9003 ;;		On exit  : 0/0
  9004 ;;		Unchanged: 0/0
  9005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;Total ram usage:        0 bytes
  9011 ;; Hardware stack levels used:    1
  9012 ;; Hardware stack levels required when called:    6
  9013 ;; This function calls:
  9014 ;;		_ADC_Set
  9015 ;;		_Fosc_Set
  9016 ;;		_IOC_Set
  9017 ;;		_IO_Set
  9018 ;;		_TMR1_Set
  9019 ;;		_WDT_Set
  9020 ;; This function is called by:
  9021 ;;		_main
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           
  9026                           ;psect for function _Mcu_Initialization
  9027  1FC9                     _Mcu_Initialization:	
  9028                           
  9029                           ;MCU_B1.c: 32: Fosc_Set();
  9030                           
  9031                           ;incstack = 0
  9032                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9033  1FC9  319E  2645  319F   	fcall	_Fosc_Set
  9034                           
  9035                           ;MCU_B1.c: 34: IO_Set();
  9036  1FCC  3191  217C  319F   	fcall	_IO_Set
  9037                           
  9038                           ;MCU_B1.c: 36: ;;
  9039                           ;MCU_B1.c: 38: TMR1_Set();
  9040  1FCF  319E  26FB  319F   	fcall	_TMR1_Set
  9041                           
  9042                           ;MCU_B1.c: 40: ADC_Set();
  9043  1FD2  319E  265A  319F   	fcall	_ADC_Set
  9044                           
  9045                           ;MCU_B1.c: 42: ;;
  9046                           ;MCU_B1.c: 44: ;;
  9047                           ;MCU_B1.c: 46: IOC_Set();
  9048  1FD5  319E  26EF  319F   	fcall	_IOC_Set
  9049                           
  9050                           ;MCU_B1.c: 48: ;;
  9051                           ;MCU_B1.c: 50: ;;
  9052                           ;MCU_B1.c: 52: WDT_Set();
  9053  1FD8  319E  2692         	fcall	_WDT_Set
  9054  1FDA  0008               	return
  9055  1FDB                     __end_of_Mcu_Initialization:	
  9056                           
  9057                           	psect	text44
  9058  1E92                     __ptext44:	
  9059 ;; *************** function _WDT_Set *****************
  9060 ;; Defined at:
  9061 ;;		line 1083 in file "../src/MCU_B1.c"
  9062 ;; Parameters:    Size  Location     Type
  9063 ;;		None
  9064 ;; Auto vars:     Size  Location     Type
  9065 ;;		None
  9066 ;; Return value:  Size  Location     Type
  9067 ;;		None               void
  9068 ;; Registers used:
  9069 ;;		wreg
  9070 ;; Tracked objects:
  9071 ;;		On entry : 0/0
  9072 ;;		On exit  : 0/0
  9073 ;;		Unchanged: 0/0
  9074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9078 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9079 ;;Total ram usage:        1 bytes
  9080 ;; Hardware stack levels used:    1
  9081 ;; Hardware stack levels required when called:    5
  9082 ;; This function calls:
  9083 ;;		Nothing
  9084 ;; This function is called by:
  9085 ;;		_Mcu_Initialization
  9086 ;; This function uses a non-reentrant model
  9087 ;;
  9088                           
  9089                           
  9090                           ;psect for function _WDT_Set
  9091  1E92                     _WDT_Set:	
  9092                           
  9093                           ;MCU_B1.c: 1090: WDTCON = 0b00010111;;
  9094                           
  9095                           ;incstack = 0
  9096                           ; Regs used in _WDT_Set: [wreg]
  9097  1E92  3017               	movlw	23
  9098  1E93  0021               	movlb	1	; select bank1
  9099  1E94  0097               	movwf	23	;volatile
  9100                           
  9101                           ;MCU_B1.c: 1092: WDT.Enable = 1;
  9102  1E95  1446               	bsf	_WDT^(0+128),0
  9103                           
  9104                           ;MCU_B1.c: 1093: WDT.Timer = 10;
  9105  1E96  300A               	movlw	10
  9106  1E97  0020               	movlb	0	; select bank0
  9107  1E98  00A0               	movwf	??_WDT_Set
  9108  1E99  0820               	movf	??_WDT_Set,w
  9109  1E9A  0021               	movlb	1	; select bank1
  9110  1E9B  00C7               	movwf	(_WDT^(0+128)+1)
  9111  1E9C  0008               	return
  9112  1E9D                     __end_of_WDT_Set:	
  9113                           
  9114                           	psect	text45
  9115  1EFB                     __ptext45:	
  9116 ;; *************** function _TMR1_Set *****************
  9117 ;; Defined at:
  9118 ;;		line 199 in file "../src/MCU_B1.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;		None
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;		None
  9123 ;; Return value:  Size  Location     Type
  9124 ;;		None               void
  9125 ;; Registers used:
  9126 ;;		wreg
  9127 ;; Tracked objects:
  9128 ;;		On entry : 0/0
  9129 ;;		On exit  : 0/0
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;Total ram usage:        0 bytes
  9137 ;; Hardware stack levels used:    1
  9138 ;; Hardware stack levels required when called:    5
  9139 ;; This function calls:
  9140 ;;		Nothing
  9141 ;; This function is called by:
  9142 ;;		_Mcu_Initialization
  9143 ;; This function uses a non-reentrant model
  9144 ;;
  9145                           
  9146                           
  9147                           ;psect for function _TMR1_Set
  9148  1EFB                     _TMR1_Set:	
  9149                           
  9150                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9151                           
  9152                           ;incstack = 0
  9153                           ; Regs used in _TMR1_Set: [wreg]
  9154  1EFB  3041               	movlw	65
  9155  1EFC  0020               	movlb	0	; select bank0
  9156  1EFD  0098               	movwf	24	;volatile
  9157                           
  9158                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9159  1EFE  30FA               	movlw	250
  9160  1EFF  0097               	movwf	23	;volatile
  9161                           
  9162                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9163  1F00  3038               	movlw	56
  9164  1F01  0096               	movwf	22	;volatile
  9165                           
  9166                           ;MCU_B1.c: 203: TMR1IE = 1;
  9167  1F02  0021               	movlb	1	; select bank1
  9168  1F03  1411               	bsf	17,0	;volatile
  9169                           
  9170                           ;MCU_B1.c: 204: PEIE = 1;
  9171  1F04  170B               	bsf	11,6	;volatile
  9172                           
  9173                           ;MCU_B1.c: 205: GIE = 1;
  9174  1F05  178B               	bsf	11,7	;volatile
  9175  1F06  0008               	return
  9176  1F07                     __end_of_TMR1_Set:	
  9177                           
  9178                           	psect	text46
  9179  117C                     __ptext46:	
  9180 ;; *************** function _IO_Set *****************
  9181 ;; Defined at:
  9182 ;;		line 60 in file "../src/MCU_B1.c"
  9183 ;; Parameters:    Size  Location     Type
  9184 ;;		None
  9185 ;; Auto vars:     Size  Location     Type
  9186 ;;		None
  9187 ;; Return value:  Size  Location     Type
  9188 ;;		None               void
  9189 ;; Registers used:
  9190 ;;		wreg, status,2
  9191 ;; Tracked objects:
  9192 ;;		On entry : 0/0
  9193 ;;		On exit  : 0/0
  9194 ;;		Unchanged: 0/0
  9195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;Total ram usage:        0 bytes
  9201 ;; Hardware stack levels used:    1
  9202 ;; Hardware stack levels required when called:    5
  9203 ;; This function calls:
  9204 ;;		Nothing
  9205 ;; This function is called by:
  9206 ;;		_Mcu_Initialization
  9207 ;; This function uses a non-reentrant model
  9208 ;;
  9209                           
  9210                           
  9211                           ;psect for function _IO_Set
  9212  117C                     _IO_Set:	
  9213                           
  9214                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9215                           
  9216                           ;incstack = 0
  9217                           ; Regs used in _IO_Set: [wreg+status,2]
  9218  117C  3077               	movlw	119
  9219  117D  0021               	movlb	1	; select bank1
  9220  117E  008C               	movwf	12	;volatile
  9221                           
  9222                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9223  117F  3007               	movlw	7
  9224  1180  008D               	movwf	13	;volatile
  9225                           
  9226                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9227  1181  300C               	movlw	12
  9228  1182  008E               	movwf	14	;volatile
  9229                           
  9230                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9231  1183  0022               	movlb	2	; select bank2
  9232  1184  018C               	clrf	12	;volatile
  9233                           
  9234                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9235  1185  3002               	movlw	2
  9236  1186  008D               	movwf	13	;volatile
  9237                           
  9238                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9239  1187  018E               	clrf	14	;volatile
  9240                           
  9241                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9242  1188  3022               	movlw	34
  9243  1189  0023               	movlb	3	; select bank3
  9244  118A  008C               	movwf	12	;volatile
  9245                           
  9246                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9247  118B  018D               	clrf	13	;volatile
  9248                           
  9249                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9250  118C  018E               	clrf	14	;volatile
  9251                           
  9252                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9253  118D  3077               	movlw	119
  9254  118E  0020               	movlb	0	; select bank0
  9255  118F  008C               	movwf	12	;volatile
  9256                           
  9257                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9258  1190  3007               	movlw	7
  9259  1191  008D               	movwf	13	;volatile
  9260                           
  9261                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9262  1192  300C               	movlw	12
  9263  1193  008E               	movwf	14	;volatile
  9264  1194  0008               	return
  9265  1195                     __end_of_IO_Set:	
  9266                           
  9267                           	psect	text47
  9268  1EEF                     __ptext47:	
  9269 ;; *************** function _IOC_Set *****************
  9270 ;; Defined at:
  9271 ;;		line 365 in file "../src/MCU_B1.c"
  9272 ;; Parameters:    Size  Location     Type
  9273 ;;		None
  9274 ;; Auto vars:     Size  Location     Type
  9275 ;;		None
  9276 ;; Return value:  Size  Location     Type
  9277 ;;		None               void
  9278 ;; Registers used:
  9279 ;;		wreg, status,2
  9280 ;; Tracked objects:
  9281 ;;		On entry : 0/0
  9282 ;;		On exit  : 0/0
  9283 ;;		Unchanged: 0/0
  9284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9289 ;;Total ram usage:        0 bytes
  9290 ;; Hardware stack levels used:    1
  9291 ;; Hardware stack levels required when called:    5
  9292 ;; This function calls:
  9293 ;;		Nothing
  9294 ;; This function is called by:
  9295 ;;		_Mcu_Initialization
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           
  9300                           ;psect for function _IOC_Set
  9301  1EEF                     _IOC_Set:	
  9302                           
  9303                           ;MCU_B1.c: 366: WPUB2 = 0;
  9304                           
  9305                           ;incstack = 0
  9306                           ; Regs used in _IOC_Set: [wreg+status,2]
  9307  1EEF  0024               	movlb	4	; select bank4
  9308  1EF0  110D               	bcf	13,2	;volatile
  9309                           
  9310                           ;MCU_B1.c: 386: IOCBP = 0b00000000;
  9311  1EF1  0027               	movlb	7	; select bank7
  9312  1EF2  0194               	clrf	20	;volatile
  9313                           
  9314                           ;MCU_B1.c: 387: IOCBN = 0b00000100;
  9315  1EF3  3004               	movlw	4
  9316  1EF4  0095               	movwf	21	;volatile
  9317                           
  9318                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9319  1EF5  0196               	clrf	22	;volatile
  9320                           
  9321                           ;MCU_B1.c: 393: IOCIE = 1;
  9322  1EF6  158B               	bsf	11,3	;volatile
  9323                           
  9324                           ;MCU_B1.c: 394: IOCIF = 0;
  9325  1EF7  100B               	bcf	11,0	;volatile
  9326                           
  9327                           ;MCU_B1.c: 395: PEIE = 1;
  9328  1EF8  170B               	bsf	11,6	;volatile
  9329                           
  9330                           ;MCU_B1.c: 396: GIE = 1;
  9331  1EF9  178B               	bsf	11,7	;volatile
  9332  1EFA  0008               	return
  9333  1EFB                     __end_of_IOC_Set:	
  9334                           
  9335                           	psect	text48
  9336  1E45                     __ptext48:	
  9337 ;; *************** function _Fosc_Set *****************
  9338 ;; Defined at:
  9339 ;;		line 56 in file "../src/MCU_B1.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;		None
  9342 ;; Auto vars:     Size  Location     Type
  9343 ;;		None
  9344 ;; Return value:  Size  Location     Type
  9345 ;;		None               void
  9346 ;; Registers used:
  9347 ;;		wreg
  9348 ;; Tracked objects:
  9349 ;;		On entry : 0/0
  9350 ;;		On exit  : 0/0
  9351 ;;		Unchanged: 0/0
  9352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;Total ram usage:        0 bytes
  9358 ;; Hardware stack levels used:    1
  9359 ;; Hardware stack levels required when called:    5
  9360 ;; This function calls:
  9361 ;;		Nothing
  9362 ;; This function is called by:
  9363 ;;		_Mcu_Initialization
  9364 ;; This function uses a non-reentrant model
  9365 ;;
  9366                           
  9367                           
  9368                           ;psect for function _Fosc_Set
  9369  1E45                     _Fosc_Set:	
  9370                           
  9371                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9372                           
  9373                           ;incstack = 0
  9374                           ; Regs used in _Fosc_Set: [wreg]
  9375  1E45  3078               	movlw	120
  9376  1E46  0021               	movlb	1	; select bank1
  9377  1E47  0099               	movwf	25	;volatile
  9378  1E48  0008               	return
  9379  1E49                     __end_of_Fosc_Set:	
  9380                           
  9381                           	psect	text49
  9382  1E5A                     __ptext49:	
  9383 ;; *************** function _ADC_Set *****************
  9384 ;; Defined at:
  9385 ;;		line 419 in file "../src/MCU_B1.c"
  9386 ;; Parameters:    Size  Location     Type
  9387 ;;		None
  9388 ;; Auto vars:     Size  Location     Type
  9389 ;;		None
  9390 ;; Return value:  Size  Location     Type
  9391 ;;		None               void
  9392 ;; Registers used:
  9393 ;;		wreg
  9394 ;; Tracked objects:
  9395 ;;		On entry : 0/0
  9396 ;;		On exit  : 0/0
  9397 ;;		Unchanged: 0/0
  9398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9403 ;;Total ram usage:        0 bytes
  9404 ;; Hardware stack levels used:    1
  9405 ;; Hardware stack levels required when called:    5
  9406 ;; This function calls:
  9407 ;;		Nothing
  9408 ;; This function is called by:
  9409 ;;		_Mcu_Initialization
  9410 ;; This function uses a non-reentrant model
  9411 ;;
  9412                           
  9413                           
  9414                           ;psect for function _ADC_Set
  9415  1E5A                     _ADC_Set:	
  9416                           
  9417                           ;MCU_B1.c: 420: ADCON1 = 0xf3;
  9418                           
  9419                           ;incstack = 0
  9420                           ; Regs used in _ADC_Set: [wreg]
  9421  1E5A  30F3               	movlw	243
  9422  1E5B  0021               	movlb	1	; select bank1
  9423  1E5C  009E               	movwf	30	;volatile
  9424                           
  9425                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  9426  1E5D  30C1               	movlw	193
  9427  1E5E  0022               	movlb	2	; select bank2
  9428  1E5F  0097               	movwf	23	;volatile
  9429  1E60  0008               	return
  9430  1E61                     __end_of_ADC_Set:	
  9431                           
  9432                           	psect	text50
  9433  1EE3                     __ptext50:	
  9434 ;; *************** function _LED_Main *****************
  9435 ;; Defined at:
  9436 ;;		line 47 in file "../src/LED_B1.c"
  9437 ;; Parameters:    Size  Location     Type
  9438 ;;		None
  9439 ;; Auto vars:     Size  Location     Type
  9440 ;;		None
  9441 ;; Return value:  Size  Location     Type
  9442 ;;		None               void
  9443 ;; Registers used:
  9444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9445 ;; Tracked objects:
  9446 ;;		On entry : 0/0
  9447 ;;		On exit  : 0/0
  9448 ;;		Unchanged: 0/0
  9449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;Total ram usage:        0 bytes
  9455 ;; Hardware stack levels used:    1
  9456 ;; Hardware stack levels required when called:    7
  9457 ;; This function calls:
  9458 ;;		_setLED_Main
  9459 ;; This function is called by:
  9460 ;;		_main
  9461 ;; This function uses a non-reentrant model
  9462 ;;
  9463                           
  9464                           
  9465                           ;psect for function _LED_Main
  9466  1EE3                     _LED_Main:	
  9467                           
  9468                           ;LED_B1.c: 53: setLED_Main(1);
  9469                           
  9470                           ;incstack = 0
  9471                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9472  1EE3  3001               	movlw	1
  9473  1EE4  3196  2645  319E   	fcall	_setLED_Main
  9474                           
  9475                           ;LED_B1.c: 56: setLED_Main(2);
  9476  1EE7  3002               	movlw	2
  9477  1EE8  3196  2645  319E   	fcall	_setLED_Main
  9478                           
  9479                           ;LED_B1.c: 62: setLED_Main(99);
  9480  1EEB  3063               	movlw	99
  9481  1EEC  3196  2645         	fcall	_setLED_Main
  9482  1EEE  0008               	return
  9483  1EEF                     __end_of_LED_Main:	
  9484                           
  9485                           	psect	text51
  9486  1645                     __ptext51:	
  9487 ;; *************** function _setLED_Main *****************
  9488 ;; Defined at:
  9489 ;;		line 221 in file "../src/LED_B1.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;  led             1    wreg     unsigned char 
  9492 ;; Auto vars:     Size  Location     Type
  9493 ;;  led             1    4[BANK0 ] unsigned char 
  9494 ;; Return value:  Size  Location     Type
  9495 ;;		None               void
  9496 ;; Registers used:
  9497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9498 ;; Tracked objects:
  9499 ;;		On entry : 0/0
  9500 ;;		On exit  : 0/0
  9501 ;;		Unchanged: 0/0
  9502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;Total ram usage:        3 bytes
  9508 ;; Hardware stack levels used:    1
  9509 ;; Hardware stack levels required when called:    6
  9510 ;; This function calls:
  9511 ;;		_LedPointSelect
  9512 ;; This function is called by:
  9513 ;;		_LED_Main
  9514 ;; This function uses a non-reentrant model
  9515 ;;
  9516                           
  9517                           
  9518                           ;psect for function _setLED_Main
  9519  1645                     _setLED_Main:	
  9520                           
  9521                           ;incstack = 0
  9522                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9523                           ;setLED_Main@led stored from wreg
  9524  1645  0020               	movlb	0	; select bank0
  9525  1646  00A4               	movwf	setLED_Main@led
  9526                           
  9527                           ;LED_B1.c: 222: LedPointSelect(led);
  9528  1647  0824               	movf	setLED_Main@led,w
  9529  1648  3192  2240  3196   	fcall	_LedPointSelect
  9530                           
  9531                           ;LED_B1.c: 223: if (LED->GO == 1) {
  9532  164B  0021               	movlb	1	; select bank1
  9533  164C  084D               	movf	_LED^(0+128),w
  9534  164D  0086               	movwf	6
  9535  164E  3001               	movlw	1	; select bank2/3
  9536  164F  0087               	movwf	7
  9537  1650  1C81               	btfss	1,1
  9538  1651  0008               	return
  9539                           
  9540                           ;LED_B1.c: 224: LED->Time++;
  9541  1652  0A4D               	incf	_LED^(0+128),w
  9542  1653  0086               	movwf	6
  9543  1654  3001               	movlw	1	; select bank2/3
  9544  1655  0087               	movwf	7
  9545  1656  3001               	movlw	1
  9546  1657  0781               	addwf	1,f
  9547  1658  3141               	addfsr 1,1
  9548  1659  1803               	skipnc
  9549  165A  0A81               	incf	1,f
  9550                           
  9551                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
  9552  165B  0A4D               	incf	_LED^(0+128),w
  9553  165C  0086               	movwf	6
  9554  165D  3001               	movlw	1	; select bank2/3
  9555  165E  0087               	movwf	7
  9556  165F  3F40               	moviw [0]fsr1
  9557  1660  0020               	movlb	0	; select bank0
  9558  1661  00A2               	movwf	??_setLED_Main
  9559  1662  3F41               	moviw [1]fsr1
  9560  1663  00A3               	movwf	??_setLED_Main+1
  9561  1664  3000               	movlw	0
  9562  1665  0223               	subwf	??_setLED_Main+1,w
  9563  1666  3032               	movlw	50
  9564  1667  1903               	skipnz
  9565  1668  0222               	subwf	??_setLED_Main,w
  9566  1669  1C03               	skipc
  9567  166A  0008               	return
  9568                           
  9569                           ;LED_B1.c: 226: LED->Time = 0;
  9570  166B  0021               	movlb	1	; select bank1
  9571  166C  0A4D               	incf	_LED^(0+128),w
  9572  166D  0086               	movwf	6
  9573  166E  3001               	movlw	1	; select bank2/3
  9574  166F  0087               	movwf	7
  9575  1670  3000               	movlw	0
  9576  1671  3FC0               	movwi [0]fsr1
  9577  1672  3FC1               	movwi [1]fsr1
  9578                           
  9579                           ;LED_B1.c: 228: if (led == 1) {
  9580  1673  0020               	movlb	0	; select bank0
  9581  1674  0824               	movf	setLED_Main@led,w
  9582  1675  3A01               	xorlw	1
  9583                           
  9584                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
  9585  1676  3008               	movlw	8
  9586  1677  1903               	btfsc	3,2
  9587  1678  068C               	xorwf	12,f
  9588                           
  9589                           ;LED_B1.c: 230: }
  9590                           ;LED_B1.c: 233: if (led == 2) {
  9591  1679  0824               	movf	setLED_Main@led,w
  9592  167A  3A02               	xorlw	2
  9593  167B  1D03               	skipz
  9594  167C  2E7F               	goto	l1008
  9595                           
  9596                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
  9597  167D  3080               	movlw	128
  9598  167E  068E               	xorwf	14,f
  9599  167F                     l1008:	
  9600                           
  9601                           ;LED_B1.c: 235: }
  9602                           ;LED_B1.c: 243: if (led == 99) {
  9603  167F  0824               	movf	setLED_Main@led,w
  9604  1680  3A63               	xorlw	99
  9605  1681  1D03               	skipz
  9606  1682  0008               	return
  9607                           
  9608                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
  9609  1683  3020               	movlw	32
  9610  1684  068D               	xorwf	13,f
  9611  1685  0008               	return
  9612  1686                     __end_of_setLED_Main:	
  9613                           
  9614                           	psect	text52
  9615  1ED7                     __ptext52:	
  9616 ;; *************** function _LED_Initialization *****************
  9617 ;; Defined at:
  9618 ;;		line 31 in file "../src/LED_B1.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;		None
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;		None
  9623 ;; Return value:  Size  Location     Type
  9624 ;;		None               void
  9625 ;; Registers used:
  9626 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;Total ram usage:        0 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:    8
  9639 ;; This function calls:
  9640 ;;		_setLED_Initialization
  9641 ;; This function is called by:
  9642 ;;		_main
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           
  9647                           ;psect for function _LED_Initialization
  9648  1ED7                     _LED_Initialization:	
  9649                           
  9650                           ;LED_B1.c: 33: setLED_Initialization(1);
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9654  1ED7  3001               	movlw	1
  9655  1ED8  319F  27B7  319E   	fcall	_setLED_Initialization
  9656                           
  9657                           ;LED_B1.c: 36: setLED_Initialization(2);
  9658  1EDB  3002               	movlw	2
  9659  1EDC  319F  27B7  319E   	fcall	_setLED_Initialization
  9660                           
  9661                           ;LED_B1.c: 42: setLED_Initialization(99);
  9662  1EDF  3063               	movlw	99
  9663  1EE0  319F  27B7         	fcall	_setLED_Initialization
  9664  1EE2  0008               	return
  9665  1EE3                     __end_of_LED_Initialization:	
  9666                           
  9667                           	psect	text53
  9668  1FB7                     __ptext53:	
  9669 ;; *************** function _setLED_Initialization *****************
  9670 ;; Defined at:
  9671 ;;		line 69 in file "../src/LED_B1.c"
  9672 ;; Parameters:    Size  Location     Type
  9673 ;;  led             1    wreg     unsigned char 
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;  led             1    4[BANK0 ] unsigned char 
  9676 ;; Return value:  Size  Location     Type
  9677 ;;		None               void
  9678 ;; Registers used:
  9679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9680 ;; Tracked objects:
  9681 ;;		On entry : 0/0
  9682 ;;		On exit  : 0/0
  9683 ;;		Unchanged: 0/0
  9684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;Total ram usage:        1 bytes
  9690 ;; Hardware stack levels used:    1
  9691 ;; Hardware stack levels required when called:    7
  9692 ;; This function calls:
  9693 ;;		_LedPointSelect
  9694 ;;		_setLED
  9695 ;; This function is called by:
  9696 ;;		_LED_Initialization
  9697 ;; This function uses a non-reentrant model
  9698 ;;
  9699                           
  9700                           
  9701                           ;psect for function _setLED_Initialization
  9702  1FB7                     _setLED_Initialization:	
  9703                           
  9704                           ;incstack = 0
  9705                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9706                           ;setLED_Initialization@led stored from wreg
  9707  1FB7  0020               	movlb	0	; select bank0
  9708  1FB8  00A4               	movwf	setLED_Initialization@led
  9709                           
  9710                           ;LED_B1.c: 70: LedPointSelect(led);
  9711  1FB9  0824               	movf	setLED_Initialization@led,w
  9712  1FBA  3192  2240  319F   	fcall	_LedPointSelect
  9713                           
  9714                           ;LED_B1.c: 71: LED->Enable = 1;
  9715  1FBD  0021               	movlb	1	; select bank1
  9716  1FBE  084D               	movf	_LED^(0+128),w
  9717  1FBF  0086               	movwf	6
  9718  1FC0  3001               	movlw	1	; select bank2/3
  9719  1FC1  0087               	movwf	7
  9720  1FC2  1401               	bsf	1,0
  9721                           
  9722                           ;LED_B1.c: 72: setLED(led, 0);
  9723  1FC3  0020               	movlb	0	; select bank0
  9724  1FC4  01A2               	clrf	setLED@command
  9725  1FC5  0824               	movf	setLED_Initialization@led,w
  9726  1FC6  3188  204B         	fcall	_setLED
  9727  1FC8  0008               	return
  9728  1FC9                     __end_of_setLED_Initialization:	
  9729                           
  9730                           	psect	text54
  9731  14E1                     __ptext54:	
  9732 ;; *************** function _Flash_Memory_Main *****************
  9733 ;; Defined at:
  9734 ;;		line 965 in file "../src/MCU_B1.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;		None
  9737 ;; Auto vars:     Size  Location     Type
  9738 ;;		None
  9739 ;; Return value:  Size  Location     Type
  9740 ;;		None               void
  9741 ;; Registers used:
  9742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9743 ;; Tracked objects:
  9744 ;;		On entry : 0/0
  9745 ;;		On exit  : 0/0
  9746 ;;		Unchanged: 0/0
  9747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;Total ram usage:        1 bytes
  9753 ;; Hardware stack levels used:    1
  9754 ;; Hardware stack levels required when called:    8
  9755 ;; This function calls:
  9756 ;;		_Flash_Memory_Modify
  9757 ;;		_getMain_LightsStatus
  9758 ;; This function is called by:
  9759 ;;		_main
  9760 ;; This function uses a non-reentrant model
  9761 ;;
  9762                           
  9763                           
  9764                           ;psect for function _Flash_Memory_Main
  9765  14E1                     _Flash_Memory_Main:	
  9766                           
  9767                           ;MCU_B1.c: 966: if (Memory.Modify == 1) {
  9768                           
  9769                           ;incstack = 0
  9770                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9771  14E1  0023               	movlb	3	; select bank3
  9772  14E2  1C44               	btfss	(_Memory^(0+384)+36),0
  9773  14E3  0008               	return
  9774                           
  9775                           ;MCU_B1.c: 967: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
  9776  14E4  3194  2422  3194   	fcall	_getMain_LightsStatus
  9777  14E7  3A00               	xorlw	0
  9778  14E8  3000               	movlw	0
  9779  14E9  1903               	skipnz
  9780  14EA  3001               	movlw	1
  9781  14EB  0020               	movlb	0	; select bank0
  9782  14EC  00A9               	movwf	??_Flash_Memory_Main
  9783  14ED  0DA9               	rlf	??_Flash_Memory_Main,f
  9784  14EE  0023               	movlb	3	; select bank3
  9785  14EF  0844               	movf	(_Memory^(0+384)+36),w
  9786  14F0  0020               	movlb	0	; select bank0
  9787  14F1  0629               	xorwf	??_Flash_Memory_Main,w
  9788  14F2  39FD               	andlw	-3
  9789  14F3  0629               	xorwf	??_Flash_Memory_Main,w
  9790  14F4  0023               	movlb	3	; select bank3
  9791  14F5  00C4               	movwf	(_Memory^(0+384)+36)
  9792                           
  9793                           ;MCU_B1.c: 968: if (Memory.GO == 1) {
  9794  14F6  1CC4               	btfss	(_Memory^(0+384)+36),1
  9795  14F7  2D11               	goto	l1274
  9796                           
  9797                           ;MCU_B1.c: 969: Memory.Runtime = 1;
  9798  14F8  15C4               	bsf	(_Memory^(0+384)+36),3
  9799                           
  9800                           ;MCU_B1.c: 970: Memory.Time++;
  9801  14F9  3001               	movlw	1
  9802  14FA  07C2               	addwf	(_Memory^(0+384)+34),f
  9803  14FB  3000               	movlw	0
  9804  14FC  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9805                           
  9806                           ;MCU_B1.c: 971: if (Memory.Time == 25) {
  9807  14FD  3022               	movlw	34
  9808  14FE  3EA0               	addlw	_Memory& (0+255)
  9809  14FF  0086               	movwf	6
  9810  1500  3001               	movlw	1	; select bank3/4
  9811  1501  0087               	movwf	7
  9812  1502  3F40               	moviw [0]fsr1
  9813  1503  3A19               	xorlw	25
  9814  1504  1D03               	skipz
  9815  1505  2D08               	goto	u10485
  9816  1506  3F41               	moviw [1]fsr1
  9817  1507  3A00               	xorlw	0
  9818  1508                     u10485:	
  9819  1508  1D03               	skipz
  9820  1509  0008               	return
  9821                           
  9822                           ;MCU_B1.c: 972: Memory.Time = 0;
  9823  150A  01C2               	clrf	(_Memory^(0+384)+34)
  9824  150B  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9825                           
  9826                           ;MCU_B1.c: 973: Memory.Modify = 0;
  9827  150C  1044               	bcf	(_Memory^(0+384)+36),0
  9828                           
  9829                           ;MCU_B1.c: 974: Memory.GO = 0;
  9830  150D  10C4               	bcf	(_Memory^(0+384)+36),1
  9831                           
  9832                           ;MCU_B1.c: 975: Flash_Memory_Modify();
  9833  150E  3197  2712         	fcall	_Flash_Memory_Modify
  9834                           
  9835                           ;MCU_B1.c: 976: }
  9836                           ;MCU_B1.c: 977: } else {
  9837  1510  0008               	return
  9838  1511                     l1274:	
  9839                           
  9840                           ;MCU_B1.c: 978: if (Memory.Runtime == 1) {
  9841  1511  1DC4               	btfss	(_Memory^(0+384)+36),3
  9842  1512  0008               	return
  9843                           
  9844                           ;MCU_B1.c: 979: Memory.Runtime = 0;
  9845  1513  11C4               	bcf	(_Memory^(0+384)+36),3
  9846                           
  9847                           ;MCU_B1.c: 980: Memory.Time = 0;
  9848  1514  01C2               	clrf	(_Memory^(0+384)+34)
  9849  1515  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9850  1516  0008               	return
  9851  1517                     __end_of_Flash_Memory_Main:	
  9852                           
  9853                           	psect	text55
  9854  1712                     __ptext55:	
  9855 ;; *************** function _Flash_Memory_Modify *****************
  9856 ;; Defined at:
  9857 ;;		line 1038 in file "../src/MCU_B1.c"
  9858 ;; Parameters:    Size  Location     Type
  9859 ;;		None
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;  i               1    5[BANK0 ] unsigned char 
  9862 ;; Return value:  Size  Location     Type
  9863 ;;		None               void
  9864 ;; Registers used:
  9865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9866 ;; Tracked objects:
  9867 ;;		On entry : 0/0
  9868 ;;		On exit  : 0/0
  9869 ;;		Unchanged: 0/0
  9870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9872 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9873 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9874 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9875 ;;Total ram usage:        2 bytes
  9876 ;; Hardware stack levels used:    1
  9877 ;; Hardware stack levels required when called:    7
  9878 ;; This function calls:
  9879 ;;		_Flash_Memory_Erasing
  9880 ;;		_Flash_Memory_Read
  9881 ;;		_Flash_Memory_Write
  9882 ;;		_setMemory_Data
  9883 ;; This function is called by:
  9884 ;;		_Flash_Memory_Main
  9885 ;; This function uses a non-reentrant model
  9886 ;;
  9887                           
  9888                           
  9889                           ;psect for function _Flash_Memory_Modify
  9890  1712                     _Flash_Memory_Modify:	
  9891                           
  9892                           ;MCU_B1.c: 1039: char i = 0;
  9893                           
  9894                           ;incstack = 0
  9895                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9896  1712  0020               	movlb	0	; select bank0
  9897  1713  01A5               	clrf	Flash_Memory_Modify@i
  9898                           
  9899                           ;MCU_B1.c: 1040: for (i = 0; i < 32; i++) {
  9900  1714  01A5               	clrf	Flash_Memory_Modify@i
  9901  1715  3020               	movlw	32
  9902  1716  0225               	subwf	Flash_Memory_Modify@i,w
  9903  1717  1803               	btfsc	3,0
  9904  1718  2F2E               	goto	l9228
  9905  1719                     l9222:	
  9906                           
  9907                           ;MCU_B1.c: 1041: Memory.Data[i] = Flash_Memory_Read(i);
  9908  1719  0825               	movf	Flash_Memory_Modify@i,w
  9909  171A  3191  21AF  3197   	fcall	_Flash_Memory_Read
  9910  171D  0020               	movlb	0	; select bank0
  9911  171E  00A4               	movwf	??_Flash_Memory_Modify
  9912  171F  0825               	movf	Flash_Memory_Modify@i,w
  9913  1720  3EA0               	addlw	_Memory& (0+255)
  9914  1721  0086               	movwf	6
  9915  1722  3001               	movlw	1	; select bank3/4
  9916  1723  0087               	movwf	7
  9917  1724  0824               	movf	??_Flash_Memory_Modify,w
  9918  1725  0081               	movwf	1
  9919  1726  3001               	movlw	1
  9920  1727  00A4               	movwf	??_Flash_Memory_Modify
  9921  1728  0824               	movf	??_Flash_Memory_Modify,w
  9922  1729  07A5               	addwf	Flash_Memory_Modify@i,f
  9923  172A  3020               	movlw	32
  9924  172B  0225               	subwf	Flash_Memory_Modify@i,w
  9925  172C  1C03               	skipc
  9926  172D  2F19               	goto	l9222
  9927  172E                     l9228:	
  9928                           
  9929                           ;MCU_B1.c: 1042: }
  9930                           ;MCU_B1.c: 1043: setMemory_Data(0, product->Data[12]);
  9931  172E  0879               	movf	_product,w
  9932  172F  0086               	movwf	6
  9933  1730  3002               	movlw	2	; select bank4/5
  9934  1731  0087               	movwf	7
  9935  1732  3002               	movlw	2	; select bank4/5
  9936  1733  3F4C               	moviw [12]fsr1
  9937  1734  00A0               	movwf	setMemory_Data@data
  9938  1735  3000               	movlw	0
  9939  1736  319E  26BF  3197   	fcall	_setMemory_Data
  9940                           
  9941                           ;MCU_B1.c: 1044: setMemory_Data(1, product->Data[13]);
  9942  1739  0879               	movf	_product,w
  9943  173A  0086               	movwf	6
  9944  173B  3002               	movlw	2	; select bank4/5
  9945  173C  0087               	movwf	7
  9946  173D  3002               	movlw	2	; select bank4/5
  9947  173E  3F4D               	moviw [13]fsr1
  9948  173F  0020               	movlb	0	; select bank0
  9949  1740  00A0               	movwf	setMemory_Data@data
  9950  1741  3001               	movlw	1
  9951  1742  319E  26BF  3197   	fcall	_setMemory_Data
  9952                           
  9953                           ;MCU_B1.c: 1045: setMemory_Data(2, product->Data[14]);
  9954  1745  0879               	movf	_product,w
  9955  1746  0086               	movwf	6
  9956  1747  3002               	movlw	2	; select bank4/5
  9957  1748  0087               	movwf	7
  9958  1749  3002               	movlw	2	; select bank4/5
  9959  174A  3F4E               	moviw [14]fsr1
  9960  174B  0020               	movlb	0	; select bank0
  9961  174C  00A0               	movwf	setMemory_Data@data
  9962  174D  3002               	movlw	2
  9963  174E  319E  26BF  3197   	fcall	_setMemory_Data
  9964                           
  9965                           ;MCU_B1.c: 1051: if (Memory.LoopSave == 1) {
  9966  1751  0023               	movlb	3	; select bank3
  9967  1752  1D44               	btfss	(_Memory^(0+384)+36),2
  9968  1753  2F58               	goto	l1297
  9969                           
  9970                           ;MCU_B1.c: 1052: Memory.LoopSave = 0;
  9971  1754  1144               	bcf	(_Memory^(0+384)+36),2
  9972                           
  9973                           ;MCU_B1.c: 1053: myMain.FirstOpen = 0;
  9974  1755  0021               	movlb	1	; select bank1
  9975  1756  11A0               	bcf	_myMain^(0+128),3
  9976                           
  9977                           ;MCU_B1.c: 1054: myMain.First = 0;
  9978  1757  12A0               	bcf	_myMain^(0+128),5
  9979  1758                     l1297:	
  9980                           
  9981                           ;MCU_B1.c: 1056: }
  9982                           ;MCU_B1.c: 1057: GIE = 0;
  9983  1758  138B               	bcf	11,7	;volatile
  9984                           
  9985                           ;MCU_B1.c: 1058: Flash_Memory_Erasing();
  9986  1759  319E  26CB  3197   	fcall	_Flash_Memory_Erasing
  9987                           
  9988                           ;MCU_B1.c: 1059: Flash_Memory_Write();
  9989  175C  3194  244F         	fcall	_Flash_Memory_Write
  9990                           
  9991                           ;MCU_B1.c: 1060: GIE = 1;
  9992  175E  178B               	bsf	11,7	;volatile
  9993  175F  0008               	return
  9994  1760                     __end_of_Flash_Memory_Modify:	
  9995                           
  9996                           	psect	text56
  9997  1ECB                     __ptext56:	
  9998 ;; *************** function _Flash_Memory_Erasing *****************
  9999 ;; Defined at:
 10000 ;;		line 1027 in file "../src/MCU_B1.c"
 10001 ;; Parameters:    Size  Location     Type
 10002 ;;		None
 10003 ;; Auto vars:     Size  Location     Type
 10004 ;;		None
 10005 ;; Return value:  Size  Location     Type
 10006 ;;		None               void
 10007 ;; Registers used:
 10008 ;;		wreg, status,2, status,0, pclath, cstack
 10009 ;; Tracked objects:
 10010 ;;		On entry : 0/0
 10011 ;;		On exit  : 0/0
 10012 ;;		Unchanged: 0/0
 10013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;Total ram usage:        0 bytes
 10019 ;; Hardware stack levels used:    1
 10020 ;; Hardware stack levels required when called:    6
 10021 ;; This function calls:
 10022 ;;		_Flash_Memory_Unlock
 10023 ;; This function is called by:
 10024 ;;		_Flash_Memory_Modify
 10025 ;; This function uses a non-reentrant model
 10026 ;;
 10027                           
 10028                           
 10029                           ;psect for function _Flash_Memory_Erasing
 10030  1ECB                     _Flash_Memory_Erasing:	
 10031                           
 10032                           ;MCU_B1.c: 1028: CFGS = 0;
 10033                           
 10034                           ;incstack = 0
 10035                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10036  1ECB  0023               	movlb	3	; select bank3
 10037  1ECC  1315               	bcf	21,6	;volatile
 10038                           
 10039                           ;MCU_B1.c: 1029: PMADRH = 0x30;
 10040  1ECD  3030               	movlw	48
 10041  1ECE  0092               	movwf	18	;volatile
 10042                           
 10043                           ;MCU_B1.c: 1030: PMADRL = 0x00;
 10044  1ECF  0191               	clrf	17	;volatile
 10045                           
 10046                           ;MCU_B1.c: 1031: FREE = 1;
 10047  1ED0  1615               	bsf	21,4	;volatile
 10048                           
 10049                           ;MCU_B1.c: 1032: WREN = 1;
 10050  1ED1  1515               	bsf	21,2	;volatile
 10051                           
 10052                           ;MCU_B1.c: 1033: Flash_Memory_Unlock();
 10053  1ED2  3190  2066         	fcall	_Flash_Memory_Unlock
 10054                           
 10055                           ;MCU_B1.c: 1034: WREN = 0;
 10056  1ED4  0023               	movlb	3	; select bank3
 10057  1ED5  1115               	bcf	21,2	;volatile
 10058  1ED6  0008               	return
 10059  1ED7                     __end_of_Flash_Memory_Erasing:	
 10060                           
 10061                           	psect	text57
 10062  0394                     __ptext57:	
 10063 ;; *************** function _Flash_Memory_Initialization *****************
 10064 ;; Defined at:
 10065 ;;		line 924 in file "../src/MCU_B1.c"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;		None
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;  i               1   67[BANK0 ] unsigned char 
 10070 ;; Return value:  Size  Location     Type
 10071 ;;		None               void
 10072 ;; Registers used:
 10073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;Total ram usage:        2 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    8
 10086 ;; This function calls:
 10087 ;;		_Flash_Memory_Read
 10088 ;;		_Flash_Memory_Write
 10089 ;;		_setMemory_Data
 10090 ;;		_setPercentValue
 10091 ;; This function is called by:
 10092 ;;		_main
 10093 ;; This function uses a non-reentrant model
 10094 ;;
 10095                           
 10096                           
 10097                           ;psect for function _Flash_Memory_Initialization
 10098  0394                     _Flash_Memory_Initialization:	
 10099                           
 10100                           ;MCU_B1.c: 925: char i = 0;
 10101                           
 10102                           ;incstack = 0
 10103                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10104  0394  0020               	movlb	0	; select bank0
 10105  0395  01E3               	clrf	Flash_Memory_Initialization@i
 10106                           
 10107                           ;MCU_B1.c: 926: if (Flash_Memory_Read(31) == 0xaa) {
 10108  0396  301F               	movlw	31
 10109  0397  3191  21AF  3183   	fcall	_Flash_Memory_Read
 10110  039A  3AAA               	xorlw	170
 10111  039B  1D03               	skipz
 10112  039C  2C06               	goto	l9590
 10113                           
 10114                           ;MCU_B1.c: 927: product->Data[12] = Flash_Memory_Read(0);
 10115  039D  3000               	movlw	0
 10116  039E  3191  21AF  3183   	fcall	_Flash_Memory_Read
 10117  03A1  0020               	movlb	0	; select bank0
 10118  03A2  00E2               	movwf	??_Flash_Memory_Initialization
 10119  03A3  0879               	movf	_product,w
 10120  03A4  3E0C               	addlw	12
 10121  03A5  0086               	movwf	6
 10122  03A6  3002               	movlw	2	; select bank4/5
 10123  03A7  0087               	movwf	7
 10124  03A8  0862               	movf	??_Flash_Memory_Initialization,w
 10125  03A9  0081               	movwf	1
 10126                           
 10127                           ;MCU_B1.c: 928: product->Data[13] = Flash_Memory_Read(1);
 10128  03AA  3001               	movlw	1
 10129  03AB  3191  21AF  3183   	fcall	_Flash_Memory_Read
 10130  03AE  0020               	movlb	0	; select bank0
 10131  03AF  00E2               	movwf	??_Flash_Memory_Initialization
 10132  03B0  0879               	movf	_product,w
 10133  03B1  3E0D               	addlw	13
 10134  03B2  0086               	movwf	6
 10135  03B3  3002               	movlw	2	; select bank4/5
 10136  03B4  0087               	movwf	7
 10137  03B5  0862               	movf	??_Flash_Memory_Initialization,w
 10138  03B6  0081               	movwf	1
 10139                           
 10140                           ;MCU_B1.c: 929: product->Data[14] = Flash_Memory_Read(2);
 10141  03B7  3002               	movlw	2
 10142  03B8  3191  21AF  3183   	fcall	_Flash_Memory_Read
 10143  03BB  0020               	movlb	0	; select bank0
 10144  03BC  00E2               	movwf	??_Flash_Memory_Initialization
 10145  03BD  0879               	movf	_product,w
 10146  03BE  3E0E               	addlw	14
 10147  03BF  0086               	movwf	6
 10148  03C0  3002               	movlw	2	; select bank4/5
 10149  03C1  0087               	movwf	7
 10150  03C2  0862               	movf	??_Flash_Memory_Initialization,w
 10151  03C3  0081               	movwf	1
 10152                           
 10153                           ;MCU_B1.c: 935: i = setPercentValue(((char)(75*0.8)));
 10154  03C4  303C               	movlw	60
 10155  03C5  318C  2433  3183   	fcall	_setPercentValue
 10156  03C8  0020               	movlb	0	; select bank0
 10157  03C9  00E2               	movwf	??_Flash_Memory_Initialization
 10158  03CA  0862               	movf	??_Flash_Memory_Initialization,w
 10159  03CB  00E3               	movwf	Flash_Memory_Initialization@i
 10160                           
 10161                           ;MCU_B1.c: 936: product->Data[21] = i;
 10162  03CC  0863               	movf	Flash_Memory_Initialization@i,w
 10163  03CD  00E2               	movwf	??_Flash_Memory_Initialization
 10164  03CE  0879               	movf	_product,w
 10165  03CF  3E15               	addlw	21
 10166  03D0  0086               	movwf	6
 10167  03D1  3002               	movlw	2	; select bank4/5
 10168  03D2  0087               	movwf	7
 10169  03D3  0862               	movf	??_Flash_Memory_Initialization,w
 10170  03D4  0081               	movwf	1
 10171                           
 10172                           ;MCU_B1.c: 937: product->Data[22] = i;
 10173  03D5  0863               	movf	Flash_Memory_Initialization@i,w
 10174  03D6  00E2               	movwf	??_Flash_Memory_Initialization
 10175  03D7  0879               	movf	_product,w
 10176  03D8  3E16               	addlw	22
 10177  03D9  0086               	movwf	6
 10178  03DA  3002               	movlw	2	; select bank4/5
 10179  03DB  0087               	movwf	7
 10180  03DC  0862               	movf	??_Flash_Memory_Initialization,w
 10181  03DD  0081               	movwf	1
 10182                           
 10183                           ;MCU_B1.c: 938: product->Data[23] = i;
 10184  03DE  0863               	movf	Flash_Memory_Initialization@i,w
 10185  03DF  00E2               	movwf	??_Flash_Memory_Initialization
 10186  03E0  0879               	movf	_product,w
 10187  03E1  3E17               	addlw	23
 10188  03E2  0086               	movwf	6
 10189  03E3  3002               	movlw	2	; select bank4/5
 10190  03E4  0087               	movwf	7
 10191  03E5  0862               	movf	??_Flash_Memory_Initialization,w
 10192  03E6  0081               	movwf	1
 10193                           
 10194                           ;MCU_B1.c: 940: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10195  03E7  0879               	movf	_product,w
 10196  03E8  3E0C               	addlw	12
 10197  03E9  0086               	movwf	6
 10198  03EA  3002               	movlw	2	; select bank4/5
 10199  03EB  0087               	movwf	7
 10200  03EC  0801               	movf	1,w
 10201  03ED  3AFF               	xorlw	255
 10202  03EE  1D03               	skipz
 10203  03EF  0008               	return
 10204  03F0  0879               	movf	_product,w
 10205  03F1  3E0D               	addlw	13
 10206  03F2  0086               	movwf	6
 10207  03F3  3002               	movlw	2	; select bank4/5
 10208  03F4  0087               	movwf	7
 10209  03F5  0801               	movf	1,w
 10210  03F6  3AFF               	xorlw	255
 10211  03F7  1D03               	skipz
 10212  03F8  0008               	return
 10213  03F9  0879               	movf	_product,w
 10214  03FA  3E0E               	addlw	14
 10215  03FB  0086               	movwf	6
 10216  03FC  3002               	movlw	2	; select bank4/5
 10217  03FD  0087               	movwf	7
 10218  03FE  0801               	movf	1,w
 10219  03FF  3AFF               	xorlw	255
 10220  0400  1D03               	skipz
 10221  0401  0008               	return
 10222                           
 10223                           ;MCU_B1.c: 941: myMain.FirstOpen = 1;
 10224  0402  0021               	movlb	1	; select bank1
 10225  0403  15A0               	bsf	_myMain^(0+128),3
 10226                           
 10227                           ;MCU_B1.c: 942: myMain.First = 1;
 10228  0404  16A0               	bsf	_myMain^(0+128),5
 10229                           
 10230                           ;MCU_B1.c: 943: }
 10231                           ;MCU_B1.c: 944: } else {
 10232  0405  0008               	return
 10233  0406                     l9590:	
 10234                           
 10235                           ;MCU_B1.c: 945: i = setPercentValue(((char)(75*0.8)));
 10236  0406  303C               	movlw	60
 10237  0407  318C  2433  3183   	fcall	_setPercentValue
 10238  040A  0020               	movlb	0	; select bank0
 10239  040B  00E2               	movwf	??_Flash_Memory_Initialization
 10240  040C  0862               	movf	??_Flash_Memory_Initialization,w
 10241  040D  00E3               	movwf	Flash_Memory_Initialization@i
 10242                           
 10243                           ;MCU_B1.c: 946: setMemory_Data(0, 0xff);
 10244  040E  30FF               	movlw	255
 10245  040F  00E2               	movwf	??_Flash_Memory_Initialization
 10246  0410  0862               	movf	??_Flash_Memory_Initialization,w
 10247  0411  00A0               	movwf	setMemory_Data@data
 10248  0412  3000               	movlw	0
 10249  0413  319E  26BF  3183   	fcall	_setMemory_Data
 10250                           
 10251                           ;MCU_B1.c: 947: setMemory_Data(1, 0xff);
 10252  0416  30FF               	movlw	255
 10253  0417  0020               	movlb	0	; select bank0
 10254  0418  00E2               	movwf	??_Flash_Memory_Initialization
 10255  0419  0862               	movf	??_Flash_Memory_Initialization,w
 10256  041A  00A0               	movwf	setMemory_Data@data
 10257  041B  3001               	movlw	1
 10258  041C  319E  26BF  3183   	fcall	_setMemory_Data
 10259                           
 10260                           ;MCU_B1.c: 948: setMemory_Data(2, 0xff);
 10261  041F  30FF               	movlw	255
 10262  0420  0020               	movlb	0	; select bank0
 10263  0421  00E2               	movwf	??_Flash_Memory_Initialization
 10264  0422  0862               	movf	??_Flash_Memory_Initialization,w
 10265  0423  00A0               	movwf	setMemory_Data@data
 10266  0424  3002               	movlw	2
 10267  0425  319E  26BF  3183   	fcall	_setMemory_Data
 10268                           
 10269                           ;MCU_B1.c: 949: setMemory_Data(3, 0xff);
 10270  0428  30FF               	movlw	255
 10271  0429  0020               	movlb	0	; select bank0
 10272  042A  00E2               	movwf	??_Flash_Memory_Initialization
 10273  042B  0862               	movf	??_Flash_Memory_Initialization,w
 10274  042C  00A0               	movwf	setMemory_Data@data
 10275  042D  3003               	movlw	3
 10276  042E  319E  26BF  3183   	fcall	_setMemory_Data
 10277                           
 10278                           ;MCU_B1.c: 950: setMemory_Data(4, 0xff);
 10279  0431  30FF               	movlw	255
 10280  0432  0020               	movlb	0	; select bank0
 10281  0433  00E2               	movwf	??_Flash_Memory_Initialization
 10282  0434  0862               	movf	??_Flash_Memory_Initialization,w
 10283  0435  00A0               	movwf	setMemory_Data@data
 10284  0436  3004               	movlw	4
 10285  0437  319E  26BF  3183   	fcall	_setMemory_Data
 10286                           
 10287                           ;MCU_B1.c: 951: setMemory_Data(5, 0xff);
 10288  043A  30FF               	movlw	255
 10289  043B  0020               	movlb	0	; select bank0
 10290  043C  00E2               	movwf	??_Flash_Memory_Initialization
 10291  043D  0862               	movf	??_Flash_Memory_Initialization,w
 10292  043E  00A0               	movwf	setMemory_Data@data
 10293  043F  3005               	movlw	5
 10294  0440  319E  26BF  3183   	fcall	_setMemory_Data
 10295                           
 10296                           ;MCU_B1.c: 952: setMemory_Data(31, 0xaa);
 10297  0443  30AA               	movlw	170
 10298  0444  0020               	movlb	0	; select bank0
 10299  0445  00E2               	movwf	??_Flash_Memory_Initialization
 10300  0446  0862               	movf	??_Flash_Memory_Initialization,w
 10301  0447  00A0               	movwf	setMemory_Data@data
 10302  0448  301F               	movlw	31
 10303  0449  319E  26BF  3183   	fcall	_setMemory_Data
 10304                           
 10305                           ;MCU_B1.c: 953: product->Data[21] = i;
 10306  044C  0020               	movlb	0	; select bank0
 10307  044D  0863               	movf	Flash_Memory_Initialization@i,w
 10308  044E  00E2               	movwf	??_Flash_Memory_Initialization
 10309  044F  0879               	movf	_product,w
 10310  0450  3E15               	addlw	21
 10311  0451  0086               	movwf	6
 10312  0452  3002               	movlw	2	; select bank4/5
 10313  0453  0087               	movwf	7
 10314  0454  0862               	movf	??_Flash_Memory_Initialization,w
 10315  0455  0081               	movwf	1
 10316                           
 10317                           ;MCU_B1.c: 954: product->Data[22] = i;
 10318  0456  0863               	movf	Flash_Memory_Initialization@i,w
 10319  0457  00E2               	movwf	??_Flash_Memory_Initialization
 10320  0458  0879               	movf	_product,w
 10321  0459  3E16               	addlw	22
 10322  045A  0086               	movwf	6
 10323  045B  3002               	movlw	2	; select bank4/5
 10324  045C  0087               	movwf	7
 10325  045D  0862               	movf	??_Flash_Memory_Initialization,w
 10326  045E  0081               	movwf	1
 10327                           
 10328                           ;MCU_B1.c: 955: product->Data[23] = i;
 10329  045F  0863               	movf	Flash_Memory_Initialization@i,w
 10330  0460  00E2               	movwf	??_Flash_Memory_Initialization
 10331  0461  0879               	movf	_product,w
 10332  0462  3E17               	addlw	23
 10333  0463  0086               	movwf	6
 10334  0464  3002               	movlw	2	; select bank4/5
 10335  0465  0087               	movwf	7
 10336  0466  0862               	movf	??_Flash_Memory_Initialization,w
 10337  0467  0081               	movwf	1
 10338                           
 10339                           ;MCU_B1.c: 956: GIE = 0;
 10340  0468  138B               	bcf	11,7	;volatile
 10341                           
 10342                           ;MCU_B1.c: 957: Flash_Memory_Write();
 10343  0469  3194  244F         	fcall	_Flash_Memory_Write
 10344                           
 10345                           ;MCU_B1.c: 958: GIE = 1;
 10346  046B  178B               	bsf	11,7	;volatile
 10347                           
 10348                           ;MCU_B1.c: 959: myMain.FirstOpen = 1;
 10349  046C  0021               	movlb	1	; select bank1
 10350  046D  15A0               	bsf	_myMain^(0+128),3
 10351                           
 10352                           ;MCU_B1.c: 960: myMain.First = 1;
 10353  046E  16A0               	bsf	_myMain^(0+128),5
 10354  046F  0008               	return
 10355  0470                     __end_of_Flash_Memory_Initialization:	
 10356                           
 10357                           	psect	text58
 10358  1EBF                     __ptext58:	
 10359 ;; *************** function _setMemory_Data *****************
 10360 ;; Defined at:
 10361 ;;		line 1075 in file "../src/MCU_B1.c"
 10362 ;; Parameters:    Size  Location     Type
 10363 ;;  address         1    wreg     unsigned char 
 10364 ;;  data            1    0[BANK0 ] unsigned char 
 10365 ;; Auto vars:     Size  Location     Type
 10366 ;;  address         1    2[BANK0 ] unsigned char 
 10367 ;; Return value:  Size  Location     Type
 10368 ;;		None               void
 10369 ;; Registers used:
 10370 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10371 ;; Tracked objects:
 10372 ;;		On entry : 0/0
 10373 ;;		On exit  : 0/0
 10374 ;;		Unchanged: 0/0
 10375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10376 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;Total ram usage:        3 bytes
 10381 ;; Hardware stack levels used:    1
 10382 ;; Hardware stack levels required when called:    5
 10383 ;; This function calls:
 10384 ;;		Nothing
 10385 ;; This function is called by:
 10386 ;;		_Flash_Memory_Initialization
 10387 ;;		_Flash_Memory_Modify
 10388 ;; This function uses a non-reentrant model
 10389 ;;
 10390                           
 10391                           
 10392                           ;psect for function _setMemory_Data
 10393  1EBF                     _setMemory_Data:	
 10394                           
 10395                           ;incstack = 0
 10396                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 10397                           ;setMemory_Data@address stored from wreg
 10398  1EBF  0020               	movlb	0	; select bank0
 10399  1EC0  00A2               	movwf	setMemory_Data@address
 10400                           
 10401                           ;MCU_B1.c: 1076: Memory.Data[address] = data;
 10402  1EC1  0820               	movf	setMemory_Data@data,w
 10403  1EC2  00A1               	movwf	??_setMemory_Data
 10404  1EC3  0822               	movf	setMemory_Data@address,w
 10405  1EC4  3EA0               	addlw	_Memory& (0+255)
 10406  1EC5  0086               	movwf	6
 10407  1EC6  3001               	movlw	1	; select bank3/4
 10408  1EC7  0087               	movwf	7
 10409  1EC8  0821               	movf	??_setMemory_Data,w
 10410  1EC9  0081               	movwf	1
 10411  1ECA  0008               	return
 10412  1ECB                     __end_of_setMemory_Data:	
 10413                           
 10414                           	psect	text59
 10415  144F                     __ptext59:	
 10416 ;; *************** function _Flash_Memory_Write *****************
 10417 ;; Defined at:
 10418 ;;		line 1008 in file "../src/MCU_B1.c"
 10419 ;; Parameters:    Size  Location     Type
 10420 ;;		None
 10421 ;; Auto vars:     Size  Location     Type
 10422 ;;  i               1    1[BANK0 ] unsigned char 
 10423 ;; Return value:  Size  Location     Type
 10424 ;;		None               void
 10425 ;; Registers used:
 10426 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10427 ;; Tracked objects:
 10428 ;;		On entry : 0/0
 10429 ;;		On exit  : 0/0
 10430 ;;		Unchanged: 0/0
 10431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;Total ram usage:        2 bytes
 10437 ;; Hardware stack levels used:    1
 10438 ;; Hardware stack levels required when called:    6
 10439 ;; This function calls:
 10440 ;;		_Flash_Memory_Unlock
 10441 ;; This function is called by:
 10442 ;;		_Flash_Memory_Initialization
 10443 ;;		_Flash_Memory_Modify
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           
 10448                           ;psect for function _Flash_Memory_Write
 10449  144F                     _Flash_Memory_Write:	
 10450                           
 10451                           ;MCU_B1.c: 1009: char i = 0;
 10452                           
 10453                           ;incstack = 0
 10454                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10455  144F  0020               	movlb	0	; select bank0
 10456  1450  01A1               	clrf	Flash_Memory_Write@i
 10457                           
 10458                           ;MCU_B1.c: 1010: CFGS = 0;
 10459  1451  0023               	movlb	3	; select bank3
 10460  1452  1315               	bcf	21,6	;volatile
 10461                           
 10462                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 10463  1453  3030               	movlw	48
 10464  1454  0092               	movwf	18	;volatile
 10465                           
 10466                           ;MCU_B1.c: 1012: PMDATH = 0;
 10467  1455  0194               	clrf	20	;volatile
 10468                           
 10469                           ;MCU_B1.c: 1013: FREE = 0;
 10470  1456  1215               	bcf	21,4	;volatile
 10471                           
 10472                           ;MCU_B1.c: 1014: LWLO = 1;
 10473  1457  1695               	bsf	21,5	;volatile
 10474                           
 10475                           ;MCU_B1.c: 1015: WREN = 1;
 10476  1458  1515               	bsf	21,2	;volatile
 10477                           
 10478                           ;MCU_B1.c: 1016: for (i = 0; i < 32; i++) {
 10479  1459  0020               	movlb	0	; select bank0
 10480  145A  01A1               	clrf	Flash_Memory_Write@i
 10481  145B  3020               	movlw	32
 10482  145C  0221               	subwf	Flash_Memory_Write@i,w
 10483  145D  1803               	btfsc	3,0
 10484  145E  2C77               	goto	l1288
 10485  145F                     l8828:	
 10486                           
 10487                           ;MCU_B1.c: 1017: PMADRL = i;
 10488  145F  0821               	movf	Flash_Memory_Write@i,w
 10489  1460  0023               	movlb	3	; select bank3
 10490  1461  0091               	movwf	17	;volatile
 10491                           
 10492                           ;MCU_B1.c: 1018: PMDATL = Memory.Data[i];
 10493  1462  0020               	movlb	0	; select bank0
 10494  1463  0821               	movf	Flash_Memory_Write@i,w
 10495  1464  3EA0               	addlw	_Memory& (0+255)
 10496  1465  0086               	movwf	6
 10497  1466  3001               	movlw	1	; select bank3/4
 10498  1467  0087               	movwf	7
 10499  1468  0801               	movf	1,w
 10500  1469  0023               	movlb	3	; select bank3
 10501  146A  0093               	movwf	19	;volatile
 10502                           
 10503                           ;MCU_B1.c: 1019: Flash_Memory_Unlock();
 10504  146B  3190  2066  3194   	fcall	_Flash_Memory_Unlock
 10505  146E  3001               	movlw	1
 10506  146F  0020               	movlb	0	; select bank0
 10507  1470  00A0               	movwf	??_Flash_Memory_Write
 10508  1471  0820               	movf	??_Flash_Memory_Write,w
 10509  1472  07A1               	addwf	Flash_Memory_Write@i,f
 10510  1473  3020               	movlw	32
 10511  1474  0221               	subwf	Flash_Memory_Write@i,w
 10512  1475  1C03               	skipc
 10513  1476  2C5F               	goto	l8828
 10514  1477                     l1288:	
 10515                           
 10516                           ;MCU_B1.c: 1020: }
 10517                           ;MCU_B1.c: 1021: LWLO = 0;
 10518  1477  0023               	movlb	3	; select bank3
 10519  1478  1295               	bcf	21,5	;volatile
 10520                           
 10521                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 10522  1479  3190  2066         	fcall	_Flash_Memory_Unlock
 10523                           
 10524                           ;MCU_B1.c: 1023: WREN = 0;
 10525  147B  0023               	movlb	3	; select bank3
 10526  147C  1115               	bcf	21,2	;volatile
 10527  147D  0008               	return
 10528  147E                     __end_of_Flash_Memory_Write:	
 10529                           
 10530                           	psect	text60
 10531  1066                     __ptext60:	
 10532 ;; *************** function _Flash_Memory_Unlock *****************
 10533 ;; Defined at:
 10534 ;;		line 987 in file "../src/MCU_B1.c"
 10535 ;; Parameters:    Size  Location     Type
 10536 ;;		None
 10537 ;; Auto vars:     Size  Location     Type
 10538 ;;		None
 10539 ;; Return value:  Size  Location     Type
 10540 ;;		None               void
 10541 ;; Registers used:
 10542 ;;		wreg
 10543 ;; Tracked objects:
 10544 ;;		On entry : 0/0
 10545 ;;		On exit  : 0/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10552 ;;Total ram usage:        0 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    5
 10555 ;; This function calls:
 10556 ;;		Nothing
 10557 ;; This function is called by:
 10558 ;;		_Flash_Memory_Write
 10559 ;;		_Flash_Memory_Erasing
 10560 ;; This function uses a non-reentrant model
 10561 ;;
 10562                           
 10563                           
 10564                           ;psect for function _Flash_Memory_Unlock
 10565  1066                     _Flash_Memory_Unlock:	
 10566                           
 10567                           ;MCU_B1.c: 988: PMCON2 = 0x55;
 10568                           
 10569                           ;incstack = 0
 10570                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10571  1066  3055               	movlw	85
 10572  1067  0023               	movlb	3	; select bank3
 10573  1068  0096               	movwf	22	;volatile
 10574                           
 10575                           ;MCU_B1.c: 989: PMCON2 = 0xaa;
 10576  1069  30AA               	movlw	170
 10577  106A  0096               	movwf	22	;volatile
 10578                           
 10579                           ;MCU_B1.c: 990: WR = 1;
 10580  106B  1495               	bsf	21,1	;volatile
 10581                           
 10582                           ;MCU_B1.c: 991: __nop();
 10583  106C  0000               	nop
 10584                           
 10585                           ;MCU_B1.c: 992: __nop();
 10586  106D  0000               	nop
 10587  106E  0008               	return
 10588  106F                     __end_of_Flash_Memory_Unlock:	
 10589                           
 10590                           	psect	text61
 10591  11AF                     __ptext61:	
 10592 ;; *************** function _Flash_Memory_Read *****************
 10593 ;; Defined at:
 10594 ;;		line 996 in file "../src/MCU_B1.c"
 10595 ;; Parameters:    Size  Location     Type
 10596 ;;  address         1    wreg     unsigned char 
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;  address         1    2[BANK0 ] unsigned char 
 10599 ;;  ret             1    3[BANK0 ] unsigned char 
 10600 ;;  i               1    1[BANK0 ] unsigned char 
 10601 ;; Return value:  Size  Location     Type
 10602 ;;                  1    wreg      unsigned char 
 10603 ;; Registers used:
 10604 ;;		wreg, status,2
 10605 ;; Tracked objects:
 10606 ;;		On entry : 0/0
 10607 ;;		On exit  : 0/0
 10608 ;;		Unchanged: 0/0
 10609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;Total ram usage:        4 bytes
 10615 ;; Hardware stack levels used:    1
 10616 ;; Hardware stack levels required when called:    5
 10617 ;; This function calls:
 10618 ;;		Nothing
 10619 ;; This function is called by:
 10620 ;;		_Flash_Memory_Initialization
 10621 ;;		_Flash_Memory_Modify
 10622 ;; This function uses a non-reentrant model
 10623 ;;
 10624                           
 10625                           
 10626                           ;psect for function _Flash_Memory_Read
 10627  11AF                     _Flash_Memory_Read:	
 10628                           
 10629                           ;incstack = 0
 10630                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10631                           ;Flash_Memory_Read@address stored from wreg
 10632  11AF  0020               	movlb	0	; select bank0
 10633  11B0  00A2               	movwf	Flash_Memory_Read@address
 10634                           
 10635                           ;MCU_B1.c: 997: char i = 0, ret = 0;
 10636  11B1  01A1               	clrf	Flash_Memory_Read@i
 10637  11B2  01A3               	clrf	Flash_Memory_Read@ret
 10638                           
 10639                           ;MCU_B1.c: 998: PMADRH = 0x30;
 10640  11B3  3030               	movlw	48
 10641  11B4  0023               	movlb	3	; select bank3
 10642  11B5  0092               	movwf	18	;volatile
 10643                           
 10644                           ;MCU_B1.c: 999: PMADRL = address;
 10645  11B6  0020               	movlb	0	; select bank0
 10646  11B7  0822               	movf	Flash_Memory_Read@address,w
 10647  11B8  0023               	movlb	3	; select bank3
 10648  11B9  0091               	movwf	17	;volatile
 10649                           
 10650                           ;MCU_B1.c: 1000: CFGS = 0;
 10651  11BA  1315               	bcf	21,6	;volatile
 10652                           
 10653                           ;MCU_B1.c: 1001: RD = 1;
 10654  11BB  1415               	bsf	21,0	;volatile
 10655                           
 10656                           ;MCU_B1.c: 1002: i = PMDATH;
 10657  11BC  0814               	movf	20,w	;volatile
 10658  11BD  0020               	movlb	0	; select bank0
 10659  11BE  00A0               	movwf	??_Flash_Memory_Read
 10660  11BF  0820               	movf	??_Flash_Memory_Read,w
 10661  11C0  00A1               	movwf	Flash_Memory_Read@i
 10662                           
 10663                           ;MCU_B1.c: 1003: ret = PMDATL;
 10664  11C1  0023               	movlb	3	; select bank3
 10665  11C2  0813               	movf	19,w	;volatile
 10666  11C3  0020               	movlb	0	; select bank0
 10667  11C4  00A0               	movwf	??_Flash_Memory_Read
 10668  11C5  0820               	movf	??_Flash_Memory_Read,w
 10669  11C6  00A3               	movwf	Flash_Memory_Read@ret
 10670                           
 10671                           ;MCU_B1.c: 1004: return ret;
 10672  11C7  0823               	movf	Flash_Memory_Read@ret,w
 10673  11C8  0008               	return
 10674  11C9                     __end_of_Flash_Memory_Read:	
 10675                           
 10676                           	psect	text62
 10677  06AF                     __ptext62:	
 10678 ;; *************** function _Exception_Main *****************
 10679 ;; Defined at:
 10680 ;;		line 488 in file "../src/Main_B1.c"
 10681 ;; Parameters:    Size  Location     Type
 10682 ;;		None
 10683 ;; Auto vars:     Size  Location     Type
 10684 ;;  i               2    3[BANK1 ] int 
 10685 ;;  lights          1    2[BANK1 ] unsigned char 
 10686 ;;  count           1    0[BANK1 ] unsigned char 
 10687 ;;  error           1    1[BANK1 ] unsigned char 
 10688 ;; Return value:  Size  Location     Type
 10689 ;;		None               void
 10690 ;; Registers used:
 10691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10698 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10700 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0
 10701 ;;Total ram usage:        6 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    9
 10704 ;; This function calls:
 10705 ;;		_DimmerLightsPointSelect
 10706 ;;		_getDimmerLights_Line
 10707 ;;		_getDimmerLights_Status
 10708 ;;		_getMain_All_Error_Status
 10709 ;;		_getMain_LightsStatus
 10710 ;;		_setBuz
 10711 ;;		_setDimmerLights_SwOff
 10712 ;;		_setLED
 10713 ;; This function is called by:
 10714 ;;		_main
 10715 ;; This function uses a non-reentrant model
 10716 ;;
 10717                           
 10718                           
 10719                           ;psect for function _Exception_Main
 10720  06AF                     _Exception_Main:	
 10721                           
 10722                           ;Main_B1.c: 489: char error = getMain_All_Error_Status(0);
 10723                           
 10724                           ;incstack = 0
 10725                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10726  06AF  3000               	movlw	0
 10727  06B0  3191  21C9  3186   	fcall	_getMain_All_Error_Status
 10728  06B3  0020               	movlb	0	; select bank0
 10729  06B4  00EC               	movwf	??_Exception_Main
 10730  06B5  086C               	movf	??_Exception_Main,w
 10731  06B6  0021               	movlb	1	; select bank1
 10732  06B7  00E9               	movwf	Exception_Main@error^(0+128)
 10733                           
 10734                           ;Main_B1.c: 491: if (myMain.Error_Run == 1) {
 10735  06B8  1DAB               	btfss	(_myMain^(0+128)+11),3
 10736  06B9  2EC7               	goto	l9726
 10737                           
 10738                           ;Main_B1.c: 492: if (error == 0) {
 10739  06BA  08E9               	movf	Exception_Main@error^(0+128),f
 10740  06BB  1D03               	skipz
 10741  06BC  0008               	return
 10742                           
 10743                           ;Main_B1.c: 493: myMain.Error_Run = 0;
 10744  06BD  11AB               	bcf	(_myMain^(0+128)+11),3
 10745                           
 10746                           ;Main_B1.c: 498: setLED(99, 10);
 10747  06BE  300A               	movlw	10
 10748  06BF  0020               	movlb	0	; select bank0
 10749  06C0  00EC               	movwf	??_Exception_Main
 10750  06C1  086C               	movf	??_Exception_Main,w
 10751  06C2  00A2               	movwf	setLED@command
 10752  06C3  3063               	movlw	99
 10753  06C4  3188  204B         	fcall	_setLED
 10754                           
 10755                           ;Main_B1.c: 500: }
 10756                           ;Main_B1.c: 501: } else {
 10757  06C6  0008               	return
 10758  06C7                     l9726:	
 10759                           
 10760                           ;Main_B1.c: 502: if (error != 0) {
 10761  06C7  0021               	movlb	1	; select bank1
 10762  06C8  0869               	movf	Exception_Main@error^(0+128),w
 10763  06C9  1903               	btfsc	3,2
 10764  06CA  0008               	return
 10765                           
 10766                           ;Main_B1.c: 503: myMain.Error_Run = 1;
 10767  06CB  15AB               	bsf	(_myMain^(0+128)+11),3
 10768                           
 10769                           ;Main_B1.c: 506: setLED(99, 11);
 10770  06CC  300B               	movlw	11
 10771  06CD  0020               	movlb	0	; select bank0
 10772  06CE  00EC               	movwf	??_Exception_Main
 10773  06CF  086C               	movf	??_Exception_Main,w
 10774  06D0  00A2               	movwf	setLED@command
 10775  06D1  3063               	movlw	99
 10776  06D2  3188  204B  3186   	fcall	_setLED
 10777                           
 10778                           ;Main_B1.c: 508: switch (error) {
 10779  06D5  2F54               	goto	l9766
 10780  06D6                     l9732:	
 10781                           ;Main_B1.c: 509: case 2:
 10782                           
 10783                           
 10784                           ;Main_B1.c: 510: if (getMain_LightsStatus() == 1) {
 10785  06D6  3194  2422  3186   	fcall	_getMain_LightsStatus
 10786  06D9  3A01               	xorlw	1
 10787  06DA  1D03               	skipz
 10788  06DB  2EE5               	goto	l9736
 10789                           
 10790                           ;Main_B1.c: 511: setBuz(10, 300);
 10791  06DC  302C               	movlw	44
 10792  06DD  0020               	movlb	0	; select bank0
 10793  06DE  00A9               	movwf	setBuz@time
 10794  06DF  3001               	movlw	1
 10795  06E0  00AA               	movwf	setBuz@time+1
 10796  06E1  300A               	movlw	10
 10797  06E2  3189  21F8  3186   	fcall	_setBuz
 10798  06E5                     l9736:	
 10799                           
 10800                           ;Main_B1.c: 512: }
 10801                           ;Main_B1.c: 518: char count = 2;
 10802  06E5  3002               	movlw	2
 10803  06E6  0020               	movlb	0	; select bank0
 10804  06E7  00EC               	movwf	??_Exception_Main
 10805  06E8  086C               	movf	??_Exception_Main,w
 10806  06E9  0021               	movlb	1	; select bank1
 10807  06EA  00E8               	movwf	Exception_Main@count^(0+128)
 10808                           
 10809                           ;Main_B1.c: 523: for (int i = 0; i < count; i++) {
 10810  06EB  01EB               	clrf	Exception_Main@i^(0+128)
 10811  06EC  01EC               	clrf	(Exception_Main@i+1)^(0+128)
 10812  06ED                     l9750:	
 10813  06ED  086C               	movf	(Exception_Main@i+1)^(0+128),w
 10814  06EE  3A80               	xorlw	128
 10815  06EF  0020               	movlb	0	; select bank0
 10816  06F0  00EC               	movwf	??_Exception_Main
 10817  06F1  3080               	movlw	128
 10818  06F2  026C               	subwf	??_Exception_Main,w
 10819  06F3  1D03               	skipz
 10820  06F4  2EF8               	goto	u10665
 10821  06F5  0021               	movlb	1	; select bank1
 10822  06F6  0868               	movf	Exception_Main@count^(0+128),w
 10823  06F7  026B               	subwf	Exception_Main@i^(0+128),w
 10824  06F8                     u10665:	
 10825  06F8  1803               	btfsc	3,0
 10826  06F9  2F21               	goto	u10660
 10827                           
 10828                           ;Main_B1.c: 524: DimmerLightsPointSelect(i + 1);
 10829  06FA  0021               	movlb	1	; select bank1
 10830  06FB  086B               	movf	Exception_Main@i^(0+128),w
 10831  06FC  3E01               	addlw	1
 10832  06FD  319F  27ED  3186   	fcall	_DimmerLightsPointSelect
 10833                           
 10834                           ;Main_B1.c: 525: if (getDimmerLights_Status(i + 1) == 1) {
 10835  0700  0021               	movlb	1	; select bank1
 10836  0701  086B               	movf	Exception_Main@i^(0+128),w
 10837  0702  3E01               	addlw	1
 10838  0703  319F  274F  3186   	fcall	_getDimmerLights_Status
 10839  0706  3A01               	xorlw	1
 10840  0707  1D03               	skipz
 10841  0708  2F1B               	goto	l9748
 10842                           
 10843                           ;Main_B1.c: 526: DimmerLights->SwFlag = 1;
 10844  0709  0875               	movf	_DimmerLights,w
 10845  070A  3E0B               	addlw	11
 10846  070B  0086               	movwf	6
 10847  070C  3001               	movlw	1	; select bank2/3
 10848  070D  0087               	movwf	7
 10849  070E  1481               	bsf	1,1
 10850                           
 10851                           ;Main_B1.c: 527: DimmerLights->Status = 0;
 10852  070F  0875               	movf	_DimmerLights,w
 10853  0710  3E02               	addlw	2
 10854  0711  0086               	movwf	6
 10855  0712  3001               	movlw	1	; select bank2/3
 10856  0713  0087               	movwf	7
 10857  0714  1081               	bcf	1,1
 10858                           
 10859                           ;Main_B1.c: 528: setDimmerLights_SwOff(i + 1);
 10860  0715  0021               	movlb	1	; select bank1
 10861  0716  086B               	movf	Exception_Main@i^(0+128),w
 10862  0717  3E01               	addlw	1
 10863  0718  3189  21A0  3186   	fcall	_setDimmerLights_SwOff
 10864  071B                     l9748:	
 10865  071B  3001               	movlw	1
 10866  071C  0021               	movlb	1	; select bank1
 10867  071D  07EB               	addwf	Exception_Main@i^(0+128),f
 10868  071E  3000               	movlw	0
 10869  071F  3DEC               	addwfc	(Exception_Main@i+1)^(0+128),f
 10870  0720  2EED               	goto	l9750
 10871  0721                     u10660:	
 10872  0721  0021               	movlb	1	; select bank1
 10873  0722  0008               	return
 10874  0723                     l9752:	
 10875                           ;Main_B1.c: 532: case 3:
 10876                           
 10877                           ;Main_B1.c: 529: }
 10878                           ;Main_B1.c: 530: }
 10879                           ;Main_B1.c: 531: break;
 10880                           
 10881                           
 10882                           ;Main_B1.c: 533: setBuz(5, 300);
 10883  0723  302C               	movlw	44
 10884  0724  0020               	movlb	0	; select bank0
 10885  0725  00A9               	movwf	setBuz@time
 10886  0726  3001               	movlw	1
 10887  0727  00AA               	movwf	setBuz@time+1
 10888  0728  3005               	movlw	5
 10889  0729  3189  21F8  3186   	fcall	_setBuz
 10890                           
 10891                           ;Main_B1.c: 534: char lights = getDimmerLights_Line();
 10892  072C  3190  206F  3186   	fcall	_getDimmerLights_Line
 10893  072F  0020               	movlb	0	; select bank0
 10894  0730  00EC               	movwf	??_Exception_Main
 10895  0731  086C               	movf	??_Exception_Main,w
 10896  0732  0021               	movlb	1	; select bank1
 10897  0733  00EA               	movwf	Exception_Main@lights^(0+128)
 10898                           
 10899                           ;Main_B1.c: 535: DimmerLightsPointSelect(lights);
 10900  0734  086A               	movf	Exception_Main@lights^(0+128),w
 10901  0735  319F  27ED  3186   	fcall	_DimmerLightsPointSelect
 10902                           
 10903                           ;Main_B1.c: 536: if (getDimmerLights_Status(lights) == 1) {
 10904  0738  0021               	movlb	1	; select bank1
 10905  0739  086A               	movf	Exception_Main@lights^(0+128),w
 10906  073A  319F  274F  3186   	fcall	_getDimmerLights_Status
 10907  073D  3A01               	xorlw	1
 10908  073E  1903               	btfsc	3,2
 10909  073F  2F42               	goto	l9760
 10910  0740  0021               	movlb	1	; select bank1
 10911  0741  0008               	return
 10912  0742                     l9760:	
 10913                           
 10914                           ;Main_B1.c: 537: DimmerLights->SwFlag = 1;
 10915  0742  0875               	movf	_DimmerLights,w
 10916  0743  3E0B               	addlw	11
 10917  0744  0086               	movwf	6
 10918  0745  3001               	movlw	1	; select bank2/3
 10919  0746  0087               	movwf	7
 10920  0747  1481               	bsf	1,1
 10921                           
 10922                           ;Main_B1.c: 538: DimmerLights->Status = 0;
 10923  0748  0875               	movf	_DimmerLights,w
 10924  0749  3E02               	addlw	2
 10925  074A  0086               	movwf	6
 10926  074B  3001               	movlw	1	; select bank2/3
 10927  074C  0087               	movwf	7
 10928  074D  1081               	bcf	1,1
 10929                           
 10930                           ;Main_B1.c: 539: setDimmerLights_SwOff(lights);
 10931  074E  0021               	movlb	1	; select bank1
 10932  074F  086A               	movf	Exception_Main@lights^(0+128),w
 10933  0750  3189  21A0         	fcall	_setDimmerLights_SwOff
 10934  0752  0021               	movlb	1	; select bank1
 10935  0753  0008               	return
 10936  0754                     l9766:	
 10937                           ;Main_B1.c: 542: }
 10938                           
 10939                           ;Main_B1.c: 540: }
 10940                           ;Main_B1.c: 541: break;
 10941                           
 10942  0754  0021               	movlb	1	; select bank1
 10943  0755  0869               	movf	Exception_Main@error^(0+128),w
 10944                           
 10945                           ; Switch size 1, requested type "space"
 10946                           ; Number of cases is 2, Range of values is 2 to 3
 10947                           ; switch strategies available:
 10948                           ; Name         Instructions Cycles
 10949                           ; simple_byte            7     4 (average)
 10950                           ; direct_byte           13     9 (fixed)
 10951                           ; jumptable            263     9 (fixed)
 10952                           ;	Chosen strategy is simple_byte
 10953  0756  3A02               	xorlw	2	; case 2
 10954  0757  1903               	skipnz
 10955  0758  2ED6               	goto	l9732
 10956  0759  3A01               	xorlw	1	; case 3
 10957  075A  1903               	skipnz
 10958  075B  2F23               	goto	l9752
 10959  075C  2F5E               	goto	l1550
 10960  075D  0008               	return
 10961  075E                     l1550:	
 10962  075E  0008               	return
 10963  075F                     __end_of_Exception_Main:	
 10964                           
 10965                           	psect	text63
 10966  1422                     __ptext63:	
 10967 ;; *************** function _getMain_LightsStatus *****************
 10968 ;; Defined at:
 10969 ;;		line 375 in file "../src/Main_B1.c"
 10970 ;; Parameters:    Size  Location     Type
 10971 ;;		None
 10972 ;; Auto vars:     Size  Location     Type
 10973 ;;  i               2    6[BANK0 ] int 
 10974 ;;  status          1    8[BANK0 ] unsigned char 
 10975 ;;  count           1    5[BANK0 ] unsigned char 
 10976 ;; Return value:  Size  Location     Type
 10977 ;;                  1    wreg      unsigned char 
 10978 ;; Registers used:
 10979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10980 ;; Tracked objects:
 10981 ;;		On entry : 0/0
 10982 ;;		On exit  : 0/0
 10983 ;;		Unchanged: 0/0
 10984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10986 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10988 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10989 ;;Total ram usage:        5 bytes
 10990 ;; Hardware stack levels used:    1
 10991 ;; Hardware stack levels required when called:    7
 10992 ;; This function calls:
 10993 ;;		_getDimmerLights_Status
 10994 ;; This function is called by:
 10995 ;;		_Flash_Memory_Main
 10996 ;;		_Exception_Main
 10997 ;;		_setMain_Exception
 10998 ;; This function uses a non-reentrant model
 10999 ;;
 11000                           
 11001                           
 11002                           ;psect for function _getMain_LightsStatus
 11003  1422                     _getMain_LightsStatus:	
 11004                           
 11005                           ;Main_B1.c: 376: char status = 0, count = 0;
 11006                           
 11007                           ;incstack = 0
 11008                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11009  1422  0020               	movlb	0	; select bank0
 11010  1423  01A8               	clrf	getMain_LightsStatus@status
 11011  1424  01A5               	clrf	getMain_LightsStatus@count
 11012                           
 11013                           ;Main_B1.c: 383: count = 2;
 11014  1425  3002               	movlw	2
 11015  1426  00A4               	movwf	??_getMain_LightsStatus
 11016  1427  0824               	movf	??_getMain_LightsStatus,w
 11017  1428  00A5               	movwf	getMain_LightsStatus@count
 11018                           
 11019                           ;Main_B1.c: 390: for (int i = 0; i < count; i++) {
 11020  1429  01A6               	clrf	getMain_LightsStatus@i
 11021  142A  01A7               	clrf	getMain_LightsStatus@i+1
 11022  142B                     l9210:	
 11023  142B  0827               	movf	getMain_LightsStatus@i+1,w
 11024  142C  3A80               	xorlw	128
 11025  142D  00A4               	movwf	??_getMain_LightsStatus
 11026  142E  3080               	movlw	128
 11027  142F  0224               	subwf	??_getMain_LightsStatus,w
 11028  1430  1D03               	skipz
 11029  1431  2C34               	goto	u9745
 11030  1432  0825               	movf	getMain_LightsStatus@count,w
 11031  1433  0226               	subwf	getMain_LightsStatus@i,w
 11032  1434                     u9745:	
 11033  1434  1803               	btfsc	3,0
 11034  1435  2C4C               	goto	l9212
 11035                           
 11036                           ;Main_B1.c: 391: if (status == 0) {
 11037  1436  0020               	movlb	0	; select bank0
 11038  1437  08A8               	movf	getMain_LightsStatus@status,f
 11039  1438  1D03               	skipz
 11040  1439  2C47               	goto	l9208
 11041                           
 11042                           ;Main_B1.c: 396: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 11043  143A  0826               	movf	getMain_LightsStatus@i,w
 11044  143B  3E01               	addlw	1
 11045  143C  319F  274F  3194   	fcall	_getDimmerLights_Status
 11046  143F  3A01               	xorlw	1
 11047  1440  3000               	movlw	0
 11048  1441  1903               	skipnz
 11049  1442  3001               	movlw	1
 11050  1443  0020               	movlb	0	; select bank0
 11051  1444  00A4               	movwf	??_getMain_LightsStatus
 11052  1445  0824               	movf	??_getMain_LightsStatus,w
 11053  1446  00A8               	movwf	getMain_LightsStatus@status
 11054  1447                     l9208:	
 11055  1447  3001               	movlw	1
 11056  1448  07A6               	addwf	getMain_LightsStatus@i,f
 11057  1449  3000               	movlw	0
 11058  144A  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 11059  144B  2C2B               	goto	l9210
 11060  144C                     l9212:	
 11061                           
 11062                           ;Main_B1.c: 398: }
 11063                           ;Main_B1.c: 399: }
 11064                           ;Main_B1.c: 400: return status;
 11065  144C  0020               	movlb	0	; select bank0
 11066  144D  0828               	movf	getMain_LightsStatus@status,w
 11067  144E  0008               	return
 11068  144F                     __end_of_getMain_LightsStatus:	
 11069                           
 11070                           	psect	text64
 11071  11C9                     __ptext64:	
 11072 ;; *************** function _getMain_All_Error_Status *****************
 11073 ;; Defined at:
 11074 ;;		line 404 in file "../src/Main_B1.c"
 11075 ;; Parameters:    Size  Location     Type
 11076 ;;  command         1    wreg     unsigned char 
 11077 ;; Auto vars:     Size  Location     Type
 11078 ;;  command         1    1[BANK0 ] unsigned char 
 11079 ;;  status          1    4[BANK0 ] unsigned char 
 11080 ;; Return value:  Size  Location     Type
 11081 ;;                  1    wreg      unsigned char 
 11082 ;; Registers used:
 11083 ;;		wreg, status,2, status,0
 11084 ;; Tracked objects:
 11085 ;;		On entry : 0/0
 11086 ;;		On exit  : 0/0
 11087 ;;		Unchanged: 0/0
 11088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;Total ram usage:        5 bytes
 11094 ;; Hardware stack levels used:    1
 11095 ;; Hardware stack levels required when called:    5
 11096 ;; This function calls:
 11097 ;;		Nothing
 11098 ;; This function is called by:
 11099 ;;		_Exception_Main
 11100 ;;		_setTemp_Main
 11101 ;;		_setRF_Main
 11102 ;;		_getRxData
 11103 ;;		_setSw_Main
 11104 ;; This function uses a non-reentrant model
 11105 ;;
 11106                           
 11107                           
 11108                           ;psect for function _getMain_All_Error_Status
 11109  11C9                     _getMain_All_Error_Status:	
 11110                           
 11111                           ;incstack = 0
 11112                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 11113                           ;getMain_All_Error_Status@command stored from wreg
 11114  11C9  0020               	movlb	0	; select bank0
 11115  11CA  00A1               	movwf	getMain_All_Error_Status@command
 11116                           
 11117                           ;Main_B1.c: 405: char status = 0;
 11118  11CB  01A4               	clrf	getMain_All_Error_Status@status
 11119                           
 11120                           ;Main_B1.c: 416: if (status == 0 && command != 2) {
 11121  11CC  08A4               	movf	getMain_All_Error_Status@status,f
 11122  11CD  1D03               	skipz
 11123  11CE  29E3               	goto	l1522
 11124  11CF  0821               	movf	getMain_All_Error_Status@command,w
 11125  11D0  3A02               	xorlw	2
 11126  11D1  1903               	skipnz
 11127  11D2  29E3               	goto	l1522
 11128                           
 11129                           ;Main_B1.c: 417: status = Temp.ERROR == 1 ? 2 : 0;
 11130  11D3  0021               	movlb	1	; select bank1
 11131  11D4  18D6               	btfsc	_Temp^(0+128),1
 11132  11D5  29DA               	goto	l8554
 11133  11D6  0020               	movlb	0	; select bank0
 11134  11D7  01A2               	clrf	_getMain_All_Error_Status$3302
 11135  11D8  01A3               	clrf	_getMain_All_Error_Status$3302+1
 11136  11D9  29DF               	goto	l1526
 11137  11DA                     l8554:	
 11138  11DA  3002               	movlw	2
 11139  11DB  0020               	movlb	0	; select bank0
 11140  11DC  00A2               	movwf	_getMain_All_Error_Status$3302
 11141  11DD  3000               	movlw	0
 11142  11DE  00A3               	movwf	_getMain_All_Error_Status$3302+1
 11143  11DF                     l1526:	
 11144  11DF  0822               	movf	_getMain_All_Error_Status$3302,w
 11145  11E0  00A0               	movwf	??_getMain_All_Error_Status
 11146  11E1  0820               	movf	??_getMain_All_Error_Status,w
 11147  11E2  00A4               	movwf	getMain_All_Error_Status@status
 11148  11E3                     l1522:	
 11149                           
 11150                           ;Main_B1.c: 418: }
 11151                           ;Main_B1.c: 441: return status;
 11152  11E3  0824               	movf	getMain_All_Error_Status@status,w
 11153  11E4  0008               	return
 11154  11E5                     __end_of_getMain_All_Error_Status:	
 11155                           
 11156                           	psect	text65
 11157  106F                     __ptext65:	
 11158 ;; *************** function _getDimmerLights_Line *****************
 11159 ;; Defined at:
 11160 ;;		line 678 in file "../src/Dimmer_B1.c"
 11161 ;; Parameters:    Size  Location     Type
 11162 ;;		None
 11163 ;; Auto vars:     Size  Location     Type
 11164 ;;  line            1    1[BANK0 ] unsigned char 
 11165 ;; Return value:  Size  Location     Type
 11166 ;;                  1    wreg      unsigned char 
 11167 ;; Registers used:
 11168 ;;		wreg, status,2
 11169 ;; Tracked objects:
 11170 ;;		On entry : 0/0
 11171 ;;		On exit  : 0/0
 11172 ;;		Unchanged: 0/0
 11173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11175 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11176 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11177 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11178 ;;Total ram usage:        2 bytes
 11179 ;; Hardware stack levels used:    1
 11180 ;; Hardware stack levels required when called:    5
 11181 ;; This function calls:
 11182 ;;		Nothing
 11183 ;; This function is called by:
 11184 ;;		_Exception_Main
 11185 ;;		_setMain_Exception
 11186 ;; This function uses a non-reentrant model
 11187 ;;
 11188                           
 11189                           
 11190                           ;psect for function _getDimmerLights_Line
 11191  106F                     _getDimmerLights_Line:	
 11192                           
 11193                           ;Dimmer_B1.c: 679: char line = 0;
 11194                           
 11195                           ;incstack = 0
 11196                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 11197  106F  0020               	movlb	0	; select bank0
 11198  1070  01A1               	clrf	getDimmerLights_Line@line
 11199                           
 11200                           ;Dimmer_B1.c: 681: if (DimmerLights1.Line == 1) {
 11201  1071  0022               	movlb	2	; select bank2
 11202  1072  1F50               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 11203  1073  2878               	goto	l813
 11204                           
 11205                           ;Dimmer_B1.c: 682: line = 1;
 11206  1074  0020               	movlb	0	; select bank0
 11207  1075  01A1               	clrf	getDimmerLights_Line@line
 11208  1076  0AA1               	incf	getDimmerLights_Line@line,f
 11209                           
 11210                           ;Dimmer_B1.c: 683: }
 11211  1077  287F               	goto	l814
 11212  1078                     l813:	
 11213                           
 11214                           ;Dimmer_B1.c: 686: else if (DimmerLights2.Line == 1) {
 11215  1078  1F61               	btfss	(_DimmerLights2^(0+256)+10),6	;volatile
 11216  1079  287F               	goto	l814
 11217                           
 11218                           ;Dimmer_B1.c: 687: line = 2;
 11219  107A  3002               	movlw	2
 11220  107B  0020               	movlb	0	; select bank0
 11221  107C  00A0               	movwf	??_getDimmerLights_Line
 11222  107D  0820               	movf	??_getDimmerLights_Line,w
 11223  107E  00A1               	movwf	getDimmerLights_Line@line
 11224  107F                     l814:	
 11225                           
 11226                           ;Dimmer_B1.c: 688: }
 11227                           ;Dimmer_B1.c: 696: return line;
 11228  107F  0020               	movlb	0	; select bank0
 11229  1080  0821               	movf	getDimmerLights_Line@line,w
 11230  1081  0008               	return
 11231  1082                     __end_of_getDimmerLights_Line:	
 11232                           
 11233                           	psect	text66
 11234  1E79                     __ptext66:	
 11235 ;; *************** function _DimmerLights_Main *****************
 11236 ;; Defined at:
 11237 ;;		line 473 in file "../src/Dimmer_B1.c"
 11238 ;; Parameters:    Size  Location     Type
 11239 ;;		None
 11240 ;; Auto vars:     Size  Location     Type
 11241 ;;		None
 11242 ;; Return value:  Size  Location     Type
 11243 ;;		None               void
 11244 ;; Registers used:
 11245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11246 ;; Tracked objects:
 11247 ;;		On entry : 0/0
 11248 ;;		On exit  : 0/0
 11249 ;;		Unchanged: 0/0
 11250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11255 ;;Total ram usage:        0 bytes
 11256 ;; Hardware stack levels used:    1
 11257 ;; Hardware stack levels required when called:   10
 11258 ;; This function calls:
 11259 ;;		_setDimmerLights_Main
 11260 ;; This function is called by:
 11261 ;;		_main
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           
 11266                           ;psect for function _DimmerLights_Main
 11267  1E79                     _DimmerLights_Main:	
 11268                           
 11269                           ;Dimmer_B1.c: 486: setDimmerLights_Main(1);
 11270                           
 11271                           ;incstack = 0
 11272                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11273  1E79  3001               	movlw	1
 11274  1E7A  3196  26CA  319E   	fcall	_setDimmerLights_Main
 11275                           
 11276                           ;Dimmer_B1.c: 490: setDimmerLights_Main(2);
 11277  1E7D  3002               	movlw	2
 11278  1E7E  3196  26CA         	fcall	_setDimmerLights_Main
 11279  1E80  0008               	return
 11280  1E81                     __end_of_DimmerLights_Main:	
 11281                           
 11282                           	psect	text67
 11283  16CA                     __ptext67:	
 11284 ;; *************** function _setDimmerLights_Main *****************
 11285 ;; Defined at:
 11286 ;;		line 500 in file "../src/Dimmer_B1.c"
 11287 ;; Parameters:    Size  Location     Type
 11288 ;;  lights          1    wreg     unsigned char 
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;  lights          1   78[BANK0 ] unsigned char 
 11291 ;;  adjGO           1    0        unsigned char 
 11292 ;;  switchGO        1    0        unsigned char 
 11293 ;; Return value:  Size  Location     Type
 11294 ;;		None               void
 11295 ;; Registers used:
 11296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11297 ;; Tracked objects:
 11298 ;;		On entry : 0/0
 11299 ;;		On exit  : 0/0
 11300 ;;		Unchanged: 0/0
 11301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11306 ;;Total ram usage:        1 bytes
 11307 ;; Hardware stack levels used:    1
 11308 ;; Hardware stack levels required when called:    9
 11309 ;; This function calls:
 11310 ;;		_DimmerLightsPointSelect
 11311 ;;		_setDimmerLights
 11312 ;;		_setDimmerLights_Adj
 11313 ;; This function is called by:
 11314 ;;		_DimmerLights_Main
 11315 ;; This function uses a non-reentrant model
 11316 ;;
 11317                           
 11318                           
 11319                           ;psect for function _setDimmerLights_Main
 11320  16CA                     _setDimmerLights_Main:	
 11321                           
 11322                           ;incstack = 0
 11323                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11324                           ;setDimmerLights_Main@lights stored from wreg
 11325  16CA  0020               	movlb	0	; select bank0
 11326  16CB  00EE               	movwf	setDimmerLights_Main@lights
 11327                           
 11328                           ;Dimmer_B1.c: 501: DimmerLightsPointSelect(lights);
 11329  16CC  086E               	movf	setDimmerLights_Main@lights,w
 11330  16CD  319F  27ED  3196   	fcall	_DimmerLightsPointSelect
 11331                           
 11332                           ;Dimmer_B1.c: 502: char switchGO;
 11333                           ;Dimmer_B1.c: 503: char adjGO;
 11334                           ;Dimmer_B1.c: 505: if (DimmerLights->Trigger == 1) {
 11335  16D0  0875               	movf	_DimmerLights,w
 11336  16D1  3E0A               	addlw	10
 11337  16D2  0086               	movwf	6
 11338  16D3  3001               	movlw	1	; select bank2/3
 11339  16D4  0087               	movwf	7
 11340  16D5  1C81               	btfss	1,1
 11341  16D6  2EF1               	goto	l9090
 11342                           
 11343                           ;Dimmer_B1.c: 506: DimmerLights->Trigger = 0;
 11344  16D7  0875               	movf	_DimmerLights,w
 11345  16D8  3E0A               	addlw	10
 11346  16D9  0086               	movwf	6
 11347  16DA  3001               	movlw	1	; select bank2/3
 11348  16DB  0087               	movwf	7
 11349  16DC  1081               	bcf	1,1
 11350                           
 11351                           ;Dimmer_B1.c: 507: if (DimmerLights->Switch == 1) {
 11352  16DD  0875               	movf	_DimmerLights,w
 11353  16DE  3E0A               	addlw	10
 11354  16DF  0086               	movwf	6
 11355  16E0  3001               	movlw	1	; select bank2/3
 11356  16E1  0087               	movwf	7
 11357  16E2  1C01               	btfss	1,0
 11358  16E3  2EEB               	goto	l9088
 11359                           
 11360                           ;Dimmer_B1.c: 508: setDimmerLights(lights, 1);
 11361  16E4  0020               	movlb	0	; select bank0
 11362  16E5  01EB               	clrf	setDimmerLights@status
 11363  16E6  0AEB               	incf	setDimmerLights@status,f
 11364  16E7  086E               	movf	setDimmerLights_Main@lights,w
 11365  16E8  318D  25D3         	fcall	_setDimmerLights
 11366                           
 11367                           ;Dimmer_B1.c: 509: } else {
 11368  16EA  0008               	return
 11369  16EB                     l9088:	
 11370                           
 11371                           ;Dimmer_B1.c: 510: setDimmerLights(lights, 0);
 11372  16EB  0020               	movlb	0	; select bank0
 11373  16EC  01EB               	clrf	setDimmerLights@status
 11374  16ED  086E               	movf	setDimmerLights_Main@lights,w
 11375  16EE  318D  25D3         	fcall	_setDimmerLights
 11376                           
 11377                           ;Dimmer_B1.c: 511: }
 11378                           ;Dimmer_B1.c: 512: } else {
 11379  16F0  0008               	return
 11380  16F1                     l9090:	
 11381                           
 11382                           ;Dimmer_B1.c: 513: if (DimmerLights->TriggerAdj == 1) {
 11383  16F1  0875               	movf	_DimmerLights,w
 11384  16F2  3E0A               	addlw	10
 11385  16F3  0086               	movwf	6
 11386  16F4  3001               	movlw	1	; select bank2/3
 11387  16F5  0087               	movwf	7
 11388  16F6  1D81               	btfss	1,3
 11389  16F7  0008               	return
 11390                           
 11391                           ;Dimmer_B1.c: 514: DimmerLights->TriggerAdj = 0;
 11392  16F8  0875               	movf	_DimmerLights,w
 11393  16F9  3E0A               	addlw	10
 11394  16FA  0086               	movwf	6
 11395  16FB  3001               	movlw	1	; select bank2/3
 11396  16FC  0087               	movwf	7
 11397  16FD  1181               	bcf	1,3
 11398                           
 11399                           ;Dimmer_B1.c: 515: if (DimmerLights->SwitchAdj == 1) {
 11400  16FE  0875               	movf	_DimmerLights,w
 11401  16FF  3E0A               	addlw	10
 11402  1700  0086               	movwf	6
 11403  1701  3001               	movlw	1	; select bank2/3
 11404  1702  0087               	movwf	7
 11405  1703  1D01               	btfss	1,2
 11406  1704  2F0C               	goto	l9096
 11407                           
 11408                           ;Dimmer_B1.c: 516: setDimmerLights_Adj(lights, 1);
 11409  1705  0020               	movlb	0	; select bank0
 11410  1706  01EB               	clrf	setDimmerLights_Adj@status
 11411  1707  0AEB               	incf	setDimmerLights_Adj@status,f
 11412  1708  086E               	movf	setDimmerLights_Main@lights,w
 11413  1709  3188  20F2         	fcall	_setDimmerLights_Adj
 11414                           
 11415                           ;Dimmer_B1.c: 517: } else {
 11416  170B  0008               	return
 11417  170C                     l9096:	
 11418                           
 11419                           ;Dimmer_B1.c: 519: setDimmerLights_Adj(lights, 0);
 11420  170C  0020               	movlb	0	; select bank0
 11421  170D  01EB               	clrf	setDimmerLights_Adj@status
 11422  170E  086E               	movf	setDimmerLights_Main@lights,w
 11423  170F  3188  20F2         	fcall	_setDimmerLights_Adj
 11424  1711  0008               	return
 11425  1712                     __end_of_setDimmerLights_Main:	
 11426                           
 11427                           	psect	text68
 11428  08F2                     __ptext68:	
 11429 ;; *************** function _setDimmerLights_Adj *****************
 11430 ;; Defined at:
 11431 ;;		line 612 in file "../src/Dimmer_B1.c"
 11432 ;; Parameters:    Size  Location     Type
 11433 ;;  lights          1    wreg     unsigned char 
 11434 ;;  status          1   75[BANK0 ] unsigned char 
 11435 ;; Auto vars:     Size  Location     Type
 11436 ;;  lights          1   77[BANK0 ] unsigned char 
 11437 ;; Return value:  Size  Location     Type
 11438 ;;		None               void
 11439 ;; Registers used:
 11440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11441 ;; Tracked objects:
 11442 ;;		On entry : 0/0
 11443 ;;		On exit  : 0/0
 11444 ;;		Unchanged: 0/0
 11445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11446 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11447 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11448 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;Total ram usage:        3 bytes
 11451 ;; Hardware stack levels used:    1
 11452 ;; Hardware stack levels required when called:    8
 11453 ;; This function calls:
 11454 ;;		_setBuz
 11455 ;;		_setPercentValue
 11456 ;;		_setProductData
 11457 ;;		_setRF_DimmerLights
 11458 ;;		_setTxData
 11459 ;; This function is called by:
 11460 ;;		_setDimmerLights_Main
 11461 ;; This function uses a non-reentrant model
 11462 ;;
 11463                           
 11464                           
 11465                           ;psect for function _setDimmerLights_Adj
 11466  08F2                     _setDimmerLights_Adj:	
 11467                           
 11468                           ;incstack = 0
 11469                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11470                           ;setDimmerLights_Adj@lights stored from wreg
 11471  08F2  0020               	movlb	0	; select bank0
 11472  08F3  00ED               	movwf	setDimmerLights_Adj@lights
 11473                           
 11474                           ;Dimmer_B1.c: 614: if (status == 1) {
 11475  08F4  086B               	movf	setDimmerLights_Adj@status,w
 11476  08F5  3A01               	xorlw	1
 11477  08F6  1D03               	skipz
 11478  08F7  290A               	goto	l8776
 11479                           
 11480                           ;Dimmer_B1.c: 615: DimmerLights->AdjSw = 1;
 11481  08F8  0A75               	incf	_DimmerLights,w
 11482  08F9  0086               	movwf	6
 11483  08FA  3001               	movlw	1	; select bank2/3
 11484  08FB  0087               	movwf	7
 11485  08FC  1701               	bsf	1,6
 11486                           
 11487                           ;Dimmer_B1.c: 616: DimmerLights->Signal = 1;
 11488  08FD  0A75               	incf	_DimmerLights,w
 11489  08FE  0086               	movwf	6
 11490  08FF  3001               	movlw	1	; select bank2/3
 11491  0900  0087               	movwf	7
 11492  0901  1681               	bsf	1,5
 11493                           
 11494                           ;Dimmer_B1.c: 617: setBuz(1, 100);
 11495  0902  3064               	movlw	100
 11496  0903  00A9               	movwf	setBuz@time
 11497  0904  3000               	movlw	0
 11498  0905  00AA               	movwf	setBuz@time+1
 11499  0906  3001               	movlw	1
 11500  0907  3189  21F8         	fcall	_setBuz
 11501                           
 11502                           ;Dimmer_B1.c: 618: } else if (status == 0) {
 11503  0909  0008               	return
 11504  090A                     l8776:	
 11505  090A  0020               	movlb	0	; select bank0
 11506  090B  08EB               	movf	setDimmerLights_Adj@status,f
 11507  090C  1D03               	skipz
 11508  090D  0008               	return
 11509                           
 11510                           ;Dimmer_B1.c: 619: if (DimmerLights->AdjSw == 1) {
 11511  090E  0A75               	incf	_DimmerLights,w
 11512  090F  0086               	movwf	6
 11513  0910  3001               	movlw	1	; select bank2/3
 11514  0911  0087               	movwf	7
 11515  0912  1F01               	btfss	1,6
 11516  0913  0008               	return
 11517                           
 11518                           ;Dimmer_B1.c: 621: DimmerLights->AdjSw = 0;
 11519  0914  0A75               	incf	_DimmerLights,w
 11520  0915  0086               	movwf	6
 11521  0916  3001               	movlw	1	; select bank2/3
 11522  0917  0087               	movwf	7
 11523  0918  1301               	bcf	1,6
 11524                           
 11525                           ;Dimmer_B1.c: 622: DimmerLights->Signal = 0;
 11526  0919  0A75               	incf	_DimmerLights,w
 11527  091A  0086               	movwf	6
 11528  091B  3001               	movlw	1	; select bank2/3
 11529  091C  0087               	movwf	7
 11530  091D  1281               	bcf	1,5
 11531                           
 11532                           ;Dimmer_B1.c: 623: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 11533  091E  0875               	movf	_DimmerLights,w
 11534  091F  3E04               	addlw	4
 11535  0920  0086               	movwf	6
 11536  0921  3001               	movlw	1	; select bank2/3
 11537  0922  0087               	movwf	7
 11538  0923  0801               	movf	1,w
 11539  0924  00EC               	movwf	??_setDimmerLights_Adj
 11540  0925  0875               	movf	_DimmerLights,w
 11541  0926  3E06               	addlw	6
 11542  0927  0086               	movwf	6
 11543  0928  3001               	movlw	1	; select bank2/3
 11544  0929  0087               	movwf	7
 11545  092A  086C               	movf	??_setDimmerLights_Adj,w
 11546  092B  0081               	movwf	1
 11547                           
 11548                           ;Dimmer_B1.c: 625: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 11549  092C  0875               	movf	_DimmerLights,w
 11550  092D  3E04               	addlw	4
 11551  092E  0086               	movwf	6
 11552  092F  3001               	movlw	1	; select bank2/3
 11553  0930  0087               	movwf	7
 11554  0931  0801               	movf	1,w
 11555  0932  318C  2433  3188   	fcall	_setPercentValue
 11556  0935  0020               	movlb	0	; select bank0
 11557  0936  00EC               	movwf	??_setDimmerLights_Adj
 11558  0937  086C               	movf	??_setDimmerLights_Adj,w
 11559  0938  00E2               	movwf	setProductData@value
 11560  0939  086D               	movf	setDimmerLights_Adj@lights,w
 11561  093A  3E14               	addlw	20
 11562  093B  319F  2714  3188   	fcall	_setProductData
 11563                           
 11564                           ;Dimmer_B1.c: 639: setRF_DimmerLights(lights, 1);
 11565  093E  0020               	movlb	0	; select bank0
 11566  093F  01E6               	clrf	setRF_DimmerLights@on
 11567  0940  0AE6               	incf	setRF_DimmerLights@on,f
 11568  0941  086D               	movf	setDimmerLights_Adj@lights,w
 11569  0942  318A  2251  3188   	fcall	_setRF_DimmerLights
 11570                           
 11571                           ;Dimmer_B1.c: 640: setTxData();
 11572  0945  3187  275F         	fcall	_setTxData
 11573  0947  0008               	return
 11574  0948                     __end_of_setDimmerLights_Adj:	
 11575                           
 11576                           	psect	text69
 11577  0DD3                     __ptext69:	
 11578 ;; *************** function _setDimmerLights *****************
 11579 ;; Defined at:
 11580 ;;		line 551 in file "../src/Dimmer_B1.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;  lights          1    wreg     unsigned char 
 11583 ;;  status          1   75[BANK0 ] unsigned char 
 11584 ;; Auto vars:     Size  Location     Type
 11585 ;;  lights          1   77[BANK0 ] unsigned char 
 11586 ;; Return value:  Size  Location     Type
 11587 ;;		None               void
 11588 ;; Registers used:
 11589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11590 ;; Tracked objects:
 11591 ;;		On entry : 0/0
 11592 ;;		On exit  : 0/0
 11593 ;;		Unchanged: 0/0
 11594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11595 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11598 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11599 ;;Total ram usage:        3 bytes
 11600 ;; Hardware stack levels used:    1
 11601 ;; Hardware stack levels required when called:    8
 11602 ;; This function calls:
 11603 ;;		_setDimmerLights_Line
 11604 ;;		_setLED
 11605 ;;		_setPercentValue
 11606 ;;		_setProductData
 11607 ;;		_setRF_DimmerLights
 11608 ;;		_setTxData
 11609 ;; This function is called by:
 11610 ;;		_setDimmerLights_Main
 11611 ;; This function uses a non-reentrant model
 11612 ;;
 11613                           
 11614                           
 11615                           ;psect for function _setDimmerLights
 11616  0DD3                     _setDimmerLights:	
 11617                           
 11618                           ;incstack = 0
 11619                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11620                           ;setDimmerLights@lights stored from wreg
 11621  0DD3  0020               	movlb	0	; select bank0
 11622  0DD4  00ED               	movwf	setDimmerLights@lights
 11623                           
 11624                           ;Dimmer_B1.c: 559: if (status == 1) {
 11625  0DD5  086B               	movf	setDimmerLights@status,w
 11626  0DD6  3A01               	xorlw	1
 11627  0DD7  1D03               	skipz
 11628  0DD8  2E06               	goto	l8754
 11629                           
 11630                           ;Dimmer_B1.c: 560: DimmerLights->Loop = 1;
 11631  0DD9  0875               	movf	_DimmerLights,w
 11632  0DDA  3E0A               	addlw	10
 11633  0DDB  0086               	movwf	6
 11634  0DDC  3001               	movlw	1	; select bank2/3
 11635  0DDD  0087               	movwf	7
 11636  0DDE  1781               	bsf	1,7
 11637                           
 11638                           ;Dimmer_B1.c: 561: setLED(lights, 0);
 11639  0DDF  01A2               	clrf	setLED@command
 11640  0DE0  086D               	movf	setDimmerLights@lights,w
 11641  0DE1  3188  204B  318D   	fcall	_setLED
 11642                           
 11643                           ;Dimmer_B1.c: 563: setDimmerLights_Line(lights);
 11644  0DE4  0020               	movlb	0	; select bank0
 11645  0DE5  086D               	movf	setDimmerLights@lights,w
 11646  0DE6  3191  2122  318D   	fcall	_setDimmerLights_Line
 11647                           
 11648                           ;Dimmer_B1.c: 564: DimmerLights->StatusFlag = 1;
 11649  0DE9  0A75               	incf	_DimmerLights,w
 11650  0DEA  0086               	movwf	6
 11651  0DEB  3001               	movlw	1	; select bank2/3
 11652  0DEC  0087               	movwf	7
 11653  0DED  1501               	bsf	1,2
 11654                           
 11655                           ;Dimmer_B1.c: 572: DimmerLights->DimmingValue = ((char)(75*0.8));
 11656  0DEE  303C               	movlw	60
 11657  0DEF  0020               	movlb	0	; select bank0
 11658  0DF0  00EC               	movwf	??_setDimmerLights
 11659  0DF1  0875               	movf	_DimmerLights,w
 11660  0DF2  3E04               	addlw	4
 11661  0DF3  0086               	movwf	6
 11662  0DF4  3001               	movlw	1	; select bank2/3
 11663  0DF5  0087               	movwf	7
 11664  0DF6  086C               	movf	??_setDimmerLights,w
 11665  0DF7  0081               	movwf	1
 11666                           
 11667                           ;Dimmer_B1.c: 573: setProductData((20 + lights), setPercentValue(((char)(75*0.8))));
 11668  0DF8  303C               	movlw	60
 11669  0DF9  318C  2433  318D   	fcall	_setPercentValue
 11670  0DFC  0020               	movlb	0	; select bank0
 11671  0DFD  00EC               	movwf	??_setDimmerLights
 11672  0DFE  086C               	movf	??_setDimmerLights,w
 11673  0DFF  00E2               	movwf	setProductData@value
 11674  0E00  086D               	movf	setDimmerLights@lights,w
 11675  0E01  3E14               	addlw	20
 11676  0E02  319F  2714  318D   	fcall	_setProductData
 11677  0E05  2E30               	goto	l8768
 11678  0E06                     l8754:	
 11679                           ;Dimmer_B1.c: 583: } else if (status == 0) {
 11680                           
 11681                           ;Dimmer_B1.c: 581: DimmerLights->DimmingTimeValue = 7;
 11682                           
 11683  0E06  08EB               	movf	setDimmerLights@status,f
 11684  0E07  1D03               	skipz
 11685  0E08  2E3A               	goto	l795
 11686                           
 11687                           ;Dimmer_B1.c: 585: DimmerLights->StatusFlag = 0;
 11688  0E09  0A75               	incf	_DimmerLights,w
 11689  0E0A  0086               	movwf	6
 11690  0E0B  3001               	movlw	1	; select bank2/3
 11691  0E0C  0087               	movwf	7
 11692  0E0D  1101               	bcf	1,2
 11693                           
 11694                           ;Dimmer_B1.c: 586: DimmerLights->Loop = 0;
 11695  0E0E  0875               	movf	_DimmerLights,w
 11696  0E0F  3E0A               	addlw	10
 11697  0E10  0086               	movwf	6
 11698  0E11  3001               	movlw	1	; select bank2/3
 11699  0E12  0087               	movwf	7
 11700  0E13  1381               	bcf	1,7
 11701                           
 11702                           ;Dimmer_B1.c: 587: setLED(lights, 1);
 11703  0E14  01A2               	clrf	setLED@command
 11704  0E15  0AA2               	incf	setLED@command,f
 11705  0E16  086D               	movf	setDimmerLights@lights,w
 11706  0E17  3188  204B  318D   	fcall	_setLED
 11707                           
 11708                           ;Dimmer_B1.c: 595: DimmerLights->MosfetClose = 1;
 11709  0E1A  0875               	movf	_DimmerLights,w
 11710  0E1B  3E0A               	addlw	10
 11711  0E1C  0086               	movwf	6
 11712  0E1D  3001               	movlw	1	; select bank2/3
 11713  0E1E  0087               	movwf	7
 11714  0E1F  1681               	bsf	1,5
 11715                           
 11716                           ;Dimmer_B1.c: 598: DimmerLights->AdjSw = 0;
 11717  0E20  0A75               	incf	_DimmerLights,w
 11718  0E21  0086               	movwf	6
 11719  0E22  3001               	movlw	1	; select bank2/3
 11720  0E23  0087               	movwf	7
 11721  0E24  1301               	bcf	1,6
 11722                           
 11723                           ;Dimmer_B1.c: 599: DimmerLights->AdjStatus = 0;
 11724  0E25  0A75               	incf	_DimmerLights,w
 11725  0E26  0086               	movwf	6
 11726  0E27  3001               	movlw	1	; select bank2/3
 11727  0E28  0087               	movwf	7
 11728  0E29  1381               	bcf	1,7
 11729                           
 11730                           ;Dimmer_B1.c: 600: DimmerLights->AdjRF = 0;
 11731  0E2A  0875               	movf	_DimmerLights,w
 11732  0E2B  3E02               	addlw	2
 11733  0E2C  0086               	movwf	6
 11734  0E2D  3001               	movlw	1	; select bank2/3
 11735  0E2E  0087               	movwf	7
 11736  0E2F  1001               	bcf	1,0
 11737  0E30                     l8768:	
 11738                           
 11739                           ;Dimmer_B1.c: 601: DimmerLights->DimmingTimeValue = 7;
 11740  0E30  3007               	movlw	7
 11741  0E31  0020               	movlb	0	; select bank0
 11742  0E32  00EC               	movwf	??_setDimmerLights
 11743  0E33  0875               	movf	_DimmerLights,w
 11744  0E34  3E08               	addlw	8
 11745  0E35  0086               	movwf	6
 11746  0E36  3001               	movlw	1	; select bank2/3
 11747  0E37  0087               	movwf	7
 11748  0E38  086C               	movf	??_setDimmerLights,w
 11749  0E39  0081               	movwf	1
 11750  0E3A                     l795:	
 11751                           
 11752                           ;Dimmer_B1.c: 603: }
 11753                           ;Dimmer_B1.c: 606: setRF_DimmerLights(lights, status);
 11754  0E3A  086B               	movf	setDimmerLights@status,w
 11755  0E3B  00EC               	movwf	??_setDimmerLights
 11756  0E3C  086C               	movf	??_setDimmerLights,w
 11757  0E3D  00E6               	movwf	setRF_DimmerLights@on
 11758  0E3E  086D               	movf	setDimmerLights@lights,w
 11759  0E3F  318A  2251  318D   	fcall	_setRF_DimmerLights
 11760                           
 11761                           ;Dimmer_B1.c: 607: setTxData();
 11762  0E42  3187  275F         	fcall	_setTxData
 11763  0E44  0008               	return
 11764  0E45                     __end_of_setDimmerLights:	
 11765                           
 11766                           	psect	text70
 11767  075F                     __ptext70:	
 11768 ;; *************** function _setTxData *****************
 11769 ;; Defined at:
 11770 ;;		line 207 in file "../src/RF_Control_B1.c"
 11771 ;; Parameters:    Size  Location     Type
 11772 ;;		None
 11773 ;; Auto vars:     Size  Location     Type
 11774 ;;  i               1    0        unsigned char 
 11775 ;; Return value:  Size  Location     Type
 11776 ;;		None               void
 11777 ;; Registers used:
 11778 ;;		wreg, fsr1l, fsr1h
 11779 ;; Tracked objects:
 11780 ;;		On entry : 0/0
 11781 ;;		On exit  : 0/0
 11782 ;;		Unchanged: 0/0
 11783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11786 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11787 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;Total ram usage:        1 bytes
 11789 ;; Hardware stack levels used:    1
 11790 ;; Hardware stack levels required when called:    5
 11791 ;; This function calls:
 11792 ;;		Nothing
 11793 ;; This function is called by:
 11794 ;;		_setDimmerLights
 11795 ;;		_setDimmerLights_Adj
 11796 ;;		_getRxData
 11797 ;;		_setControl_Lights_Table
 11798 ;;		_setRFSW_Control
 11799 ;;		_setRFSW_AdjControl
 11800 ;; This function uses a non-reentrant model
 11801 ;;
 11802                           
 11803                           
 11804                           ;psect for function _setTxData
 11805  075F                     _setTxData:	
 11806                           
 11807                           ;RF_Control_B1.c: 208: char i;
 11808                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
 11809                           
 11810                           ;incstack = 0
 11811                           ; Regs used in _setTxData: [wregfsr1]
 11812  075F  0021               	movlb	1	; select bank1
 11813  0760  1C3A               	btfss	_RF1^(0+128),0
 11814  0761  0008               	return
 11815                           
 11816                           ;RF_Control_B1.c: 211: if (RF1.TransceiveGO == 0) {
 11817  0762  193A               	btfsc	_RF1^(0+128),2
 11818  0763  0008               	return
 11819                           
 11820                           ;RF_Control_B1.c: 212: RF1.TransceiveGO = 1;
 11821  0764  153A               	bsf	_RF1^(0+128),2
 11822                           
 11823                           ;RF_Control_B1.c: 213: RF1.RunTime = 20;
 11824  0765  3014               	movlw	20
 11825  0766  00C1               	movwf	(_RF1^(0+128)+7)
 11826  0767  3000               	movlw	0
 11827  0768  00C2               	movwf	(_RF1^(0+128)+8)
 11828                           
 11829                           ;RF_Control_B1.c: 225: RF_Data[0] = 0x63;
 11830  0769  3063               	movlw	99
 11831  076A  0020               	movlb	0	; select bank0
 11832  076B  00A0               	movwf	??_setTxData
 11833  076C  0820               	movf	??_setTxData,w
 11834  076D  0022               	movlb	2	; select bank2
 11835  076E  00A0               	movwf	_RF_Data^(0+256)
 11836                           
 11837                           ;RF_Control_B1.c: 226: RF_Data[1] = 0x02;
 11838  076F  3002               	movlw	2
 11839  0770  0020               	movlb	0	; select bank0
 11840  0771  00A0               	movwf	??_setTxData
 11841  0772  0820               	movf	??_setTxData,w
 11842  0773  0022               	movlb	2	; select bank2
 11843  0774  00A1               	movwf	(_RF_Data^(0+256)+1)
 11844                           
 11845                           ;RF_Control_B1.c: 228: RF_Data[2] = product->Data[2];
 11846  0775  0879               	movf	_product,w
 11847  0776  0086               	movwf	6
 11848  0777  3002               	movlw	2	; select bank4/5
 11849  0778  0087               	movwf	7
 11850  0779  3002               	movlw	2	; select bank4/5
 11851  077A  3F42               	moviw [2]fsr1
 11852  077B  00A2               	movwf	(_RF_Data^(0+256)+2)
 11853                           
 11854                           ;RF_Control_B1.c: 229: RF_Data[3] = product->Data[3];
 11855  077C  0879               	movf	_product,w
 11856  077D  0086               	movwf	6
 11857  077E  3002               	movlw	2	; select bank4/5
 11858  077F  0087               	movwf	7
 11859  0780  3002               	movlw	2	; select bank4/5
 11860  0781  3F43               	moviw [3]fsr1
 11861  0782  00A3               	movwf	(_RF_Data^(0+256)+3)
 11862                           
 11863                           ;RF_Control_B1.c: 230: RF_Data[4] = product->Data[4];
 11864  0783  0879               	movf	_product,w
 11865  0784  0086               	movwf	6
 11866  0785  3002               	movlw	2	; select bank4/5
 11867  0786  0087               	movwf	7
 11868  0787  3002               	movlw	2	; select bank4/5
 11869  0788  3F44               	moviw [4]fsr1
 11870  0789  00A4               	movwf	(_RF_Data^(0+256)+4)
 11871                           
 11872                           ;RF_Control_B1.c: 231: RF_Data[5] = product->Data[5];
 11873  078A  0879               	movf	_product,w
 11874  078B  0086               	movwf	6
 11875  078C  3002               	movlw	2	; select bank4/5
 11876  078D  0087               	movwf	7
 11877  078E  3002               	movlw	2	; select bank4/5
 11878  078F  3F45               	moviw [5]fsr1
 11879  0790  00A5               	movwf	(_RF_Data^(0+256)+5)
 11880                           
 11881                           ;RF_Control_B1.c: 232: RF_Data[6] = product->Data[6];
 11882  0791  0879               	movf	_product,w
 11883  0792  0086               	movwf	6
 11884  0793  3002               	movlw	2	; select bank4/5
 11885  0794  0087               	movwf	7
 11886  0795  3002               	movlw	2	; select bank4/5
 11887  0796  3F46               	moviw [6]fsr1
 11888  0797  00A6               	movwf	(_RF_Data^(0+256)+6)
 11889                           
 11890                           ;RF_Control_B1.c: 233: RF_Data[7] = product->Data[7];
 11891  0798  0879               	movf	_product,w
 11892  0799  0086               	movwf	6
 11893  079A  3002               	movlw	2	; select bank4/5
 11894  079B  0087               	movwf	7
 11895  079C  3002               	movlw	2	; select bank4/5
 11896  079D  3F47               	moviw [7]fsr1
 11897  079E  00A7               	movwf	(_RF_Data^(0+256)+7)
 11898                           
 11899                           ;RF_Control_B1.c: 234: RF_Data[8] = product->Data[8];
 11900  079F  0879               	movf	_product,w
 11901  07A0  0086               	movwf	6
 11902  07A1  3002               	movlw	2	; select bank4/5
 11903  07A2  0087               	movwf	7
 11904  07A3  3002               	movlw	2	; select bank4/5
 11905  07A4  3F48               	moviw [8]fsr1
 11906  07A5  00A8               	movwf	(_RF_Data^(0+256)+8)
 11907                           
 11908                           ;RF_Control_B1.c: 235: RF_Data[9] = product->Data[9];
 11909  07A6  0879               	movf	_product,w
 11910  07A7  0086               	movwf	6
 11911  07A8  3002               	movlw	2	; select bank4/5
 11912  07A9  0087               	movwf	7
 11913  07AA  3002               	movlw	2	; select bank4/5
 11914  07AB  3F49               	moviw [9]fsr1
 11915  07AC  00A9               	movwf	(_RF_Data^(0+256)+9)
 11916                           
 11917                           ;RF_Control_B1.c: 236: RF_Data[10] = product->Data[10];
 11918  07AD  0879               	movf	_product,w
 11919  07AE  0086               	movwf	6
 11920  07AF  3002               	movlw	2	; select bank4/5
 11921  07B0  0087               	movwf	7
 11922  07B1  3002               	movlw	2	; select bank4/5
 11923  07B2  3F4A               	moviw [10]fsr1
 11924  07B3  00AA               	movwf	(_RF_Data^(0+256)+10)
 11925                           
 11926                           ;RF_Control_B1.c: 237: RF_Data[11] = product->Data[11];
 11927  07B4  0879               	movf	_product,w
 11928  07B5  0086               	movwf	6
 11929  07B6  3002               	movlw	2	; select bank4/5
 11930  07B7  0087               	movwf	7
 11931  07B8  3002               	movlw	2	; select bank4/5
 11932  07B9  3F4B               	moviw [11]fsr1
 11933  07BA  00AB               	movwf	(_RF_Data^(0+256)+11)
 11934                           
 11935                           ;RF_Control_B1.c: 238: RF_Data[12] = product->Data[12];
 11936  07BB  0879               	movf	_product,w
 11937  07BC  0086               	movwf	6
 11938  07BD  3002               	movlw	2	; select bank4/5
 11939  07BE  0087               	movwf	7
 11940  07BF  3002               	movlw	2	; select bank4/5
 11941  07C0  3F4C               	moviw [12]fsr1
 11942  07C1  00AC               	movwf	(_RF_Data^(0+256)+12)
 11943                           
 11944                           ;RF_Control_B1.c: 239: RF_Data[13] = product->Data[13];
 11945  07C2  0879               	movf	_product,w
 11946  07C3  0086               	movwf	6
 11947  07C4  3002               	movlw	2	; select bank4/5
 11948  07C5  0087               	movwf	7
 11949  07C6  3002               	movlw	2	; select bank4/5
 11950  07C7  3F4D               	moviw [13]fsr1
 11951  07C8  00AD               	movwf	(_RF_Data^(0+256)+13)
 11952                           
 11953                           ;RF_Control_B1.c: 240: RF_Data[14] = product->Data[14];
 11954  07C9  0879               	movf	_product,w
 11955  07CA  0086               	movwf	6
 11956  07CB  3002               	movlw	2	; select bank4/5
 11957  07CC  0087               	movwf	7
 11958  07CD  3002               	movlw	2	; select bank4/5
 11959  07CE  3F4E               	moviw [14]fsr1
 11960  07CF  00AE               	movwf	(_RF_Data^(0+256)+14)
 11961                           
 11962                           ;RF_Control_B1.c: 241: RF_Data[15] = product->Data[15];
 11963  07D0  0879               	movf	_product,w
 11964  07D1  0086               	movwf	6
 11965  07D2  3002               	movlw	2	; select bank4/5
 11966  07D3  0087               	movwf	7
 11967  07D4  3002               	movlw	2	; select bank4/5
 11968  07D5  3F4F               	moviw [15]fsr1
 11969  07D6  00AF               	movwf	(_RF_Data^(0+256)+15)
 11970                           
 11971                           ;RF_Control_B1.c: 242: RF_Data[16] = product->Data[16];
 11972  07D7  0879               	movf	_product,w
 11973  07D8  0086               	movwf	6
 11974  07D9  3002               	movlw	2	; select bank4/5
 11975  07DA  0087               	movwf	7
 11976  07DB  3002               	movlw	2	; select bank4/5
 11977  07DC  3F50               	moviw [16]fsr1
 11978  07DD  00B0               	movwf	(_RF_Data^(0+256)+16)
 11979                           
 11980                           ;RF_Control_B1.c: 243: RF_Data[17] = product->Data[17];
 11981  07DE  0879               	movf	_product,w
 11982  07DF  0086               	movwf	6
 11983  07E0  3002               	movlw	2	; select bank4/5
 11984  07E1  0087               	movwf	7
 11985  07E2  3002               	movlw	2	; select bank4/5
 11986  07E3  3F51               	moviw [17]fsr1
 11987  07E4  00B1               	movwf	(_RF_Data^(0+256)+17)
 11988                           
 11989                           ;RF_Control_B1.c: 244: RF_Data[18] = product->Data[18];
 11990  07E5  0879               	movf	_product,w
 11991  07E6  0086               	movwf	6
 11992  07E7  3002               	movlw	2	; select bank4/5
 11993  07E8  0087               	movwf	7
 11994  07E9  3002               	movlw	2	; select bank4/5
 11995  07EA  3F52               	moviw [18]fsr1
 11996  07EB  00B2               	movwf	(_RF_Data^(0+256)+18)
 11997                           
 11998                           ;RF_Control_B1.c: 245: RF_Data[19] = product->Data[19];
 11999  07EC  0879               	movf	_product,w
 12000  07ED  0086               	movwf	6
 12001  07EE  3002               	movlw	2	; select bank4/5
 12002  07EF  0087               	movwf	7
 12003  07F0  3002               	movlw	2	; select bank4/5
 12004  07F1  3F53               	moviw [19]fsr1
 12005  07F2  00B3               	movwf	(_RF_Data^(0+256)+19)
 12006                           
 12007                           ;RF_Control_B1.c: 246: RF_Data[20] = 210;
 12008  07F3  30D2               	movlw	210
 12009  07F4  0020               	movlb	0	; select bank0
 12010  07F5  00A0               	movwf	??_setTxData
 12011  07F6  0820               	movf	??_setTxData,w
 12012  07F7  0022               	movlb	2	; select bank2
 12013  07F8  00B4               	movwf	(_RF_Data^(0+256)+20)
 12014  07F9  0008               	return
 12015  07FA                     __end_of_setTxData:	
 12016                           
 12017                           	psect	text71
 12018  0A51                     __ptext71:	
 12019 ;; *************** function _setRF_DimmerLights *****************
 12020 ;; Defined at:
 12021 ;;		line 484 in file "../src/RF_Control_B1.c"
 12022 ;; Parameters:    Size  Location     Type
 12023 ;;  lights          1    wreg     unsigned char 
 12024 ;;  on              1   70[BANK0 ] unsigned char 
 12025 ;; Auto vars:     Size  Location     Type
 12026 ;;  lights          1   74[BANK0 ] unsigned char 
 12027 ;;  status          1   73[BANK0 ] unsigned char 
 12028 ;; Return value:  Size  Location     Type
 12029 ;;		None               void
 12030 ;; Registers used:
 12031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12032 ;; Tracked objects:
 12033 ;;		On entry : 0/0
 12034 ;;		On exit  : 0/0
 12035 ;;		Unchanged: 0/0
 12036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12037 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12038 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12039 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12040 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12041 ;;Total ram usage:        5 bytes
 12042 ;; Hardware stack levels used:    1
 12043 ;; Hardware stack levels required when called:    6
 12044 ;; This function calls:
 12045 ;;		_setProductData
 12046 ;; This function is called by:
 12047 ;;		_setDimmerLights
 12048 ;;		_setDimmerLights_Adj
 12049 ;;		_setRFSW_Control
 12050 ;; This function uses a non-reentrant model
 12051 ;;
 12052                           
 12053                           
 12054                           ;psect for function _setRF_DimmerLights
 12055  0A51                     _setRF_DimmerLights:	
 12056                           
 12057                           ;incstack = 0
 12058                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12059                           ;setRF_DimmerLights@lights stored from wreg
 12060  0A51  0020               	movlb	0	; select bank0
 12061  0A52  00EA               	movwf	setRF_DimmerLights@lights
 12062                           
 12063                           ;RF_Control_B1.c: 485: char status = 1;
 12064  0A53  01E9               	clrf	setRF_DimmerLights@status
 12065  0A54  0AE9               	incf	setRF_DimmerLights@status,f
 12066                           
 12067                           ;RF_Control_B1.c: 486: status <<= (lights - 1);
 12068  0A55  086A               	movf	setRF_DimmerLights@lights,w
 12069  0A56  3EFF               	addlw	-1
 12070  0A57  0A89               	incf	9,f
 12071  0A58  2A5B               	goto	u8410
 12072  0A59                     u8415:	
 12073  0A59  1003               	clrc
 12074  0A5A  0DE9               	rlf	setRF_DimmerLights@status,f
 12075  0A5B                     u8410:	
 12076  0A5B  3EFF               	addlw	-1
 12077  0A5C  1D03               	skipz
 12078  0A5D  2A59               	goto	u8415
 12079                           
 12080                           ;RF_Control_B1.c: 487: setProductData(11, lights);
 12081  0A5E  086A               	movf	setRF_DimmerLights@lights,w
 12082  0A5F  00E7               	movwf	??_setRF_DimmerLights
 12083  0A60  0867               	movf	??_setRF_DimmerLights,w
 12084  0A61  00E2               	movwf	setProductData@value
 12085  0A62  300B               	movlw	11
 12086  0A63  319F  2714  318A   	fcall	_setProductData
 12087                           
 12088                           ;RF_Control_B1.c: 495: setProductData(9, product->Data[20 + lights]);
 12089  0A66  0020               	movlb	0	; select bank0
 12090  0A67  086A               	movf	setRF_DimmerLights@lights,w
 12091  0A68  3E14               	addlw	20
 12092  0A69  0779               	addwf	_product,w
 12093  0A6A  00E7               	movwf	??_setRF_DimmerLights
 12094  0A6B  0867               	movf	??_setRF_DimmerLights,w
 12095  0A6C  0086               	movwf	6
 12096  0A6D  3002               	movlw	2	; select bank4/5
 12097  0A6E  0087               	movwf	7
 12098  0A6F  0801               	movf	1,w
 12099  0A70  00E8               	movwf	??_setRF_DimmerLights+1
 12100  0A71  0868               	movf	??_setRF_DimmerLights+1,w
 12101  0A72  00E2               	movwf	setProductData@value
 12102  0A73  3009               	movlw	9
 12103  0A74  319F  2714  318A   	fcall	_setProductData
 12104                           
 12105                           ;RF_Control_B1.c: 496: setProductData(17, product->Data[26 + lights]);
 12106  0A77  0020               	movlb	0	; select bank0
 12107  0A78  086A               	movf	setRF_DimmerLights@lights,w
 12108  0A79  3E1A               	addlw	26
 12109  0A7A  0779               	addwf	_product,w
 12110  0A7B  00E7               	movwf	??_setRF_DimmerLights
 12111  0A7C  0867               	movf	??_setRF_DimmerLights,w
 12112  0A7D  0086               	movwf	6
 12113  0A7E  3002               	movlw	2	; select bank4/5
 12114  0A7F  0087               	movwf	7
 12115  0A80  0801               	movf	1,w
 12116  0A81  00E8               	movwf	??_setRF_DimmerLights+1
 12117  0A82  0868               	movf	??_setRF_DimmerLights+1,w
 12118  0A83  00E2               	movwf	setProductData@value
 12119  0A84  3011               	movlw	17
 12120  0A85  319F  2714  318A   	fcall	_setProductData
 12121                           
 12122                           ;RF_Control_B1.c: 497: if (on == 1) {
 12123  0A88  0020               	movlb	0	; select bank0
 12124  0A89  0866               	movf	setRF_DimmerLights@on,w
 12125  0A8A  3A01               	xorlw	1
 12126  0A8B  1D03               	skipz
 12127  0A8C  2A9B               	goto	l8246
 12128                           
 12129                           ;RF_Control_B1.c: 498: setProductData(15, (product->Data[15] | status));
 12130  0A8D  0879               	movf	_product,w
 12131  0A8E  3E0F               	addlw	15
 12132  0A8F  0086               	movwf	6
 12133  0A90  3002               	movlw	2	; select bank4/5
 12134  0A91  0087               	movwf	7
 12135  0A92  0801               	movf	1,w
 12136  0A93  0469               	iorwf	setRF_DimmerLights@status,w
 12137  0A94  00E7               	movwf	??_setRF_DimmerLights
 12138  0A95  0867               	movf	??_setRF_DimmerLights,w
 12139  0A96  00E2               	movwf	setProductData@value
 12140  0A97  300F               	movlw	15
 12141  0A98  319F  2714         	fcall	_setProductData
 12142                           
 12143                           ;RF_Control_B1.c: 499: } else {
 12144  0A9A  0008               	return
 12145  0A9B                     l8246:	
 12146                           
 12147                           ;RF_Control_B1.c: 500: setProductData(15, (product->Data[15]&(~status)));
 12148  0A9B  0879               	movf	_product,w
 12149  0A9C  3E0F               	addlw	15
 12150  0A9D  0086               	movwf	6
 12151  0A9E  3002               	movlw	2	; select bank4/5
 12152  0A9F  0087               	movwf	7
 12153  0AA0  0020               	movlb	0	; select bank0
 12154  0AA1  0969               	comf	setRF_DimmerLights@status,w
 12155  0AA2  0501               	andwf	1,w
 12156  0AA3  00E7               	movwf	??_setRF_DimmerLights
 12157  0AA4  0867               	movf	??_setRF_DimmerLights,w
 12158  0AA5  00E2               	movwf	setProductData@value
 12159  0AA6  300F               	movlw	15
 12160  0AA7  319F  2714         	fcall	_setProductData
 12161  0AA9  0008               	return
 12162  0AAA                     __end_of_setRF_DimmerLights:	
 12163                           
 12164                           	psect	text72
 12165  0C33                     __ptext72:	
 12166 ;; *************** function _setPercentValue *****************
 12167 ;; Defined at:
 12168 ;;		line 963 in file "../src/Dimmer_B1.c"
 12169 ;; Parameters:    Size  Location     Type
 12170 ;;  value           1    wreg     unsigned char 
 12171 ;; Auto vars:     Size  Location     Type
 12172 ;;  value           1   62[BANK0 ] unsigned char 
 12173 ;;  i               3   63[BANK0 ] float 
 12174 ;; Return value:  Size  Location     Type
 12175 ;;                  1    wreg      unsigned char 
 12176 ;; Registers used:
 12177 ;;		wreg, status,2, status,0, pclath, cstack
 12178 ;; Tracked objects:
 12179 ;;		On entry : 0/0
 12180 ;;		On exit  : 0/0
 12181 ;;		Unchanged: 0/0
 12182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12184 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12185 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12186 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12187 ;;Total ram usage:        6 bytes
 12188 ;; Hardware stack levels used:    1
 12189 ;; Hardware stack levels required when called:    7
 12190 ;; This function calls:
 12191 ;;		___awtoft
 12192 ;;		___ftadd
 12193 ;;		___ftdiv
 12194 ;;		___ftneg
 12195 ;;		___fttol
 12196 ;; This function is called by:
 12197 ;;		_setDimmerLights
 12198 ;;		_setDimmerLights_Adj
 12199 ;;		_Flash_Memory_Initialization
 12200 ;; This function uses a non-reentrant model
 12201 ;;
 12202                           
 12203                           
 12204                           ;psect for function _setPercentValue
 12205  0C33                     _setPercentValue:	
 12206                           
 12207                           ;incstack = 0
 12208                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 12209                           ;setPercentValue@value stored from wreg
 12210  0C33  0020               	movlb	0	; select bank0
 12211  0C34  00DE               	movwf	setPercentValue@value
 12212                           
 12213                           ;Dimmer_B1.c: 971: float i = ((char)(75*0.8)) - ((char)(15*0.8));
 12214  0C35  3000               	movlw	0
 12215  0C36  00DF               	movwf	setPercentValue@i
 12216  0C37  3040               	movlw	64
 12217  0C38  00E0               	movwf	setPercentValue@i+1
 12218  0C39  3042               	movlw	66
 12219  0C3A  00E1               	movwf	setPercentValue@i+2
 12220                           
 12221                           ;Dimmer_B1.c: 972: i /= 100;
 12222  0C3B  3000               	movlw	0
 12223  0C3C  00AE               	movwf	___ftdiv@f2
 12224  0C3D  30C8               	movlw	200
 12225  0C3E  00AF               	movwf	___ftdiv@f2+1
 12226  0C3F  3042               	movlw	66
 12227  0C40  00B0               	movwf	___ftdiv@f2+2
 12228  0C41  085F               	movf	setPercentValue@i,w
 12229  0C42  00B1               	movwf	___ftdiv@f1
 12230  0C43  0860               	movf	setPercentValue@i+1,w
 12231  0C44  00B2               	movwf	___ftdiv@f1+1
 12232  0C45  0861               	movf	setPercentValue@i+2,w
 12233  0C46  00B3               	movwf	___ftdiv@f1+2
 12234  0C47  318F  2757  318C   	fcall	___ftdiv
 12235  0C4A  0020               	movlb	0	; select bank0
 12236  0C4B  082E               	movf	?___ftdiv,w
 12237  0C4C  00DF               	movwf	setPercentValue@i
 12238  0C4D  082F               	movf	?___ftdiv+1,w
 12239  0C4E  00E0               	movwf	setPercentValue@i+1
 12240  0C4F  0830               	movf	?___ftdiv+2,w
 12241  0C50  00E1               	movwf	setPercentValue@i+2
 12242                           
 12243                           ;Dimmer_B1.c: 974: return (char) (100 - ((((char)(75*0.8)) - value) / i));
 12244  0C51  085E               	movf	setPercentValue@value,w
 12245  0C52  00DC               	movwf	??_setPercentValue
 12246  0C53  01DD               	clrf	??_setPercentValue+1
 12247  0C54  09DC               	comf	??_setPercentValue,f
 12248  0C55  09DD               	comf	??_setPercentValue+1,f
 12249  0C56  0ADC               	incf	??_setPercentValue,f
 12250  0C57  1903               	skipnz
 12251  0C58  0ADD               	incf	??_setPercentValue+1,f
 12252  0C59  085C               	movf	??_setPercentValue,w
 12253  0C5A  3E3C               	addlw	60
 12254  0C5B  00A8               	movwf	___awtoft@c
 12255  0C5C  3000               	movlw	0
 12256  0C5D  3D5D               	addwfc	??_setPercentValue+1,w
 12257  0C5E  00A9               	movwf	___awtoft@c+1
 12258  0C5F  3192  22A0  318C   	fcall	___awtoft
 12259  0C62  0020               	movlb	0	; select bank0
 12260  0C63  0828               	movf	?___awtoft,w
 12261  0C64  00B1               	movwf	___ftdiv@f1
 12262  0C65  0829               	movf	?___awtoft+1,w
 12263  0C66  00B2               	movwf	___ftdiv@f1+1
 12264  0C67  082A               	movf	?___awtoft+2,w
 12265  0C68  00B3               	movwf	___ftdiv@f1+2
 12266  0C69  085F               	movf	setPercentValue@i,w
 12267  0C6A  00AE               	movwf	___ftdiv@f2
 12268  0C6B  0860               	movf	setPercentValue@i+1,w
 12269  0C6C  00AF               	movwf	___ftdiv@f2+1
 12270  0C6D  0861               	movf	setPercentValue@i+2,w
 12271  0C6E  00B0               	movwf	___ftdiv@f2+2
 12272  0C6F  318F  2757  318C   	fcall	___ftdiv
 12273  0C72  0020               	movlb	0	; select bank0
 12274  0C73  082E               	movf	?___ftdiv,w
 12275  0C74  00BE               	movwf	___ftneg@f1
 12276  0C75  082F               	movf	?___ftdiv+1,w
 12277  0C76  00BF               	movwf	___ftneg@f1+1
 12278  0C77  0830               	movf	?___ftdiv+2,w
 12279  0C78  00C0               	movwf	___ftneg@f1+2
 12280  0C79  319E  2689  318C   	fcall	___ftneg
 12281  0C7C  0020               	movlb	0	; select bank0
 12282  0C7D  083E               	movf	?___ftneg,w
 12283  0C7E  00C4               	movwf	___ftadd@f2
 12284  0C7F  083F               	movf	?___ftneg+1,w
 12285  0C80  00C5               	movwf	___ftadd@f2+1
 12286  0C81  0840               	movf	?___ftneg+2,w
 12287  0C82  00C6               	movwf	___ftadd@f2+2
 12288  0C83  3000               	movlw	0
 12289  0C84  00C1               	movwf	___ftadd@f1
 12290  0C85  30C8               	movlw	200
 12291  0C86  00C2               	movwf	___ftadd@f1+1
 12292  0C87  3042               	movlw	66
 12293  0C88  00C3               	movwf	___ftadd@f1+2
 12294  0C89  3181  21B3  318C   	fcall	___ftadd
 12295  0C8C  0020               	movlb	0	; select bank0
 12296  0C8D  0841               	movf	?___ftadd,w
 12297  0C8E  00CE               	movwf	___fttol@f1
 12298  0C8F  0842               	movf	?___ftadd+1,w
 12299  0C90  00CF               	movwf	___fttol@f1+1
 12300  0C91  0843               	movf	?___ftadd+2,w
 12301  0C92  00D0               	movwf	___fttol@f1+2
 12302  0C93  318E  2645         	fcall	___fttol
 12303  0C95  0020               	movlb	0	; select bank0
 12304  0C96  084E               	movf	?___fttol,w
 12305  0C97  0008               	return
 12306  0C98                     __end_of_setPercentValue:	
 12307                           
 12308                           	psect	text73
 12309  0E45                     __ptext73:	
 12310 ;; *************** function ___fttol *****************
 12311 ;; Defined at:
 12312 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 12313 ;; Parameters:    Size  Location     Type
 12314 ;;  f1              3   46[BANK0 ] float 
 12315 ;; Auto vars:     Size  Location     Type
 12316 ;;  lval            4   55[BANK0 ] unsigned long 
 12317 ;;  exp1            1   59[BANK0 ] unsigned char 
 12318 ;;  sign1           1   54[BANK0 ] unsigned char 
 12319 ;; Return value:  Size  Location     Type
 12320 ;;                  4   46[BANK0 ] long 
 12321 ;; Registers used:
 12322 ;;		wreg, status,2, status,0
 12323 ;; Tracked objects:
 12324 ;;		On entry : 0/0
 12325 ;;		On exit  : 0/0
 12326 ;;		Unchanged: 0/0
 12327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12328 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12329 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12330 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12331 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12332 ;;Total ram usage:       14 bytes
 12333 ;; Hardware stack levels used:    1
 12334 ;; Hardware stack levels required when called:    5
 12335 ;; This function calls:
 12336 ;;		Nothing
 12337 ;; This function is called by:
 12338 ;;		_getPercentValue
 12339 ;;		_setPercentValue
 12340 ;; This function uses a non-reentrant model
 12341 ;;
 12342                           
 12343                           
 12344                           ;psect for function ___fttol
 12345  0E45                     ___fttol:	
 12346                           
 12347                           ;incstack = 0
 12348                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 12349  0E45  0020               	movlb	0	; select bank0
 12350  0E46  084E               	movf	___fttol@f1,w
 12351  0E47  00D2               	movwf	??___fttol
 12352  0E48  084F               	movf	___fttol@f1+1,w
 12353  0E49  00D3               	movwf	??___fttol+1
 12354  0E4A  0850               	movf	___fttol@f1+2,w
 12355  0E4B  00D4               	movwf	??___fttol+2
 12356  0E4C  1003               	clrc
 12357  0E4D  0D53               	rlf	??___fttol+1,w
 12358  0E4E  0D54               	rlf	??___fttol+2,w
 12359  0E4F  00D5               	movwf	??___fttol+3
 12360  0E50  0855               	movf	??___fttol+3,w
 12361  0E51  00DB               	movwf	___fttol@exp1
 12362  0E52  08DB               	movf	___fttol@exp1,f
 12363  0E53  1D03               	skipz
 12364  0E54  2E5E               	goto	l8010
 12365  0E55  3000               	movlw	0
 12366  0E56  00D1               	movwf	?___fttol+3
 12367  0E57  3000               	movlw	0
 12368  0E58  00D0               	movwf	?___fttol+2
 12369  0E59  3000               	movlw	0
 12370  0E5A  00CF               	movwf	?___fttol+1
 12371  0E5B  3000               	movlw	0
 12372  0E5C  00CE               	movwf	?___fttol
 12373  0E5D  0008               	return
 12374  0E5E                     l8010:	
 12375  0E5E  084E               	movf	___fttol@f1,w
 12376  0E5F  00D2               	movwf	??___fttol
 12377  0E60  084F               	movf	___fttol@f1+1,w
 12378  0E61  00D3               	movwf	??___fttol+1
 12379  0E62  0850               	movf	___fttol@f1+2,w
 12380  0E63  00D4               	movwf	??___fttol+2
 12381  0E64  3017               	movlw	23
 12382  0E65                     u8025:	
 12383  0E65  36D4               	lsrf	??___fttol+2,f
 12384  0E66  0CD3               	rrf	??___fttol+1,f
 12385  0E67  0CD2               	rrf	??___fttol,f
 12386  0E68  0B89               	decfsz	9,f
 12387  0E69  2E65               	goto	u8025
 12388  0E6A  0852               	movf	??___fttol,w
 12389  0E6B  00D5               	movwf	??___fttol+3
 12390  0E6C  0855               	movf	??___fttol+3,w
 12391  0E6D  00D6               	movwf	___fttol@sign1
 12392  0E6E  17CF               	bsf	___fttol@f1+1,7
 12393  0E6F  30FF               	movlw	255
 12394  0E70  05CE               	andwf	___fttol@f1,f
 12395  0E71  30FF               	movlw	255
 12396  0E72  05CF               	andwf	___fttol@f1+1,f
 12397  0E73  3000               	movlw	0
 12398  0E74  05D0               	andwf	___fttol@f1+2,f
 12399  0E75  084E               	movf	___fttol@f1,w
 12400  0E76  00D7               	movwf	___fttol@lval
 12401  0E77  084F               	movf	___fttol@f1+1,w
 12402  0E78  00D8               	movwf	___fttol@lval+1
 12403  0E79  0850               	movf	___fttol@f1+2,w
 12404  0E7A  00D9               	movwf	___fttol@lval+2
 12405  0E7B  01DA               	clrf	___fttol@lval+3
 12406  0E7C  308E               	movlw	142
 12407  0E7D  02DB               	subwf	___fttol@exp1,f
 12408  0E7E  1FDB               	btfss	___fttol@exp1,7
 12409  0E7F  2E9C               	goto	l8030
 12410  0E80  085B               	movf	___fttol@exp1,w
 12411  0E81  3A80               	xorlw	128
 12412  0E82  3E8F               	addlw	143
 12413  0E83  1803               	skipnc
 12414  0E84  2E8E               	goto	l8028
 12415  0E85  3000               	movlw	0
 12416  0E86  00D1               	movwf	?___fttol+3
 12417  0E87  3000               	movlw	0
 12418  0E88  00D0               	movwf	?___fttol+2
 12419  0E89  3000               	movlw	0
 12420  0E8A  00CF               	movwf	?___fttol+1
 12421  0E8B  3000               	movlw	0
 12422  0E8C  00CE               	movwf	?___fttol
 12423  0E8D  0008               	return
 12424  0E8E                     l8028:	
 12425  0E8E  3001               	movlw	1
 12426  0E8F                     u8055:	
 12427  0E8F  36DA               	lsrf	___fttol@lval+3,f
 12428  0E90  0CD9               	rrf	___fttol@lval+2,f
 12429  0E91  0CD8               	rrf	___fttol@lval+1,f
 12430  0E92  0CD7               	rrf	___fttol@lval,f
 12431  0E93  0B89               	decfsz	9,f
 12432  0E94  2E8F               	goto	u8055
 12433  0E95  3001               	movlw	1
 12434  0E96  00D2               	movwf	??___fttol
 12435  0E97  0852               	movf	??___fttol,w
 12436  0E98  07DB               	addwf	___fttol@exp1,f
 12437  0E99  1903               	btfsc	3,2
 12438  0E9A  2EB5               	goto	l8040
 12439  0E9B  2E8E               	goto	l8028
 12440  0E9C                     l8030:	
 12441  0E9C  3018               	movlw	24
 12442  0E9D  025B               	subwf	___fttol@exp1,w
 12443  0E9E  1C03               	skipc
 12444  0E9F  2EB2               	goto	l8038
 12445  0EA0  3000               	movlw	0
 12446  0EA1  00D1               	movwf	?___fttol+3
 12447  0EA2  3000               	movlw	0
 12448  0EA3  00D0               	movwf	?___fttol+2
 12449  0EA4  3000               	movlw	0
 12450  0EA5  00CF               	movwf	?___fttol+1
 12451  0EA6  3000               	movlw	0
 12452  0EA7  00CE               	movwf	?___fttol
 12453  0EA8  0008               	return
 12454  0EA9                     l8036:	
 12455  0EA9  3001               	movlw	1
 12456  0EAA                     u8085:	
 12457  0EAA  35D7               	lslf	___fttol@lval,f
 12458  0EAB  0DD8               	rlf	___fttol@lval+1,f
 12459  0EAC  0DD9               	rlf	___fttol@lval+2,f
 12460  0EAD  0DDA               	rlf	___fttol@lval+3,f
 12461  0EAE  0B89               	decfsz	9,f
 12462  0EAF  2EAA               	goto	u8085
 12463  0EB0  3001               	movlw	1
 12464  0EB1  02DB               	subwf	___fttol@exp1,f
 12465  0EB2                     l8038:	
 12466  0EB2  08DB               	movf	___fttol@exp1,f
 12467  0EB3  1D03               	skipz
 12468  0EB4  2EA9               	goto	l8036
 12469  0EB5                     l8040:	
 12470  0EB5  0856               	movf	___fttol@sign1,w
 12471  0EB6  1903               	btfsc	3,2
 12472  0EB7  2EC3               	goto	l8044
 12473  0EB8  09D7               	comf	___fttol@lval,f
 12474  0EB9  09D8               	comf	___fttol@lval+1,f
 12475  0EBA  09D9               	comf	___fttol@lval+2,f
 12476  0EBB  09DA               	comf	___fttol@lval+3,f
 12477  0EBC  0AD7               	incf	___fttol@lval,f
 12478  0EBD  1903               	skipnz
 12479  0EBE  0AD8               	incf	___fttol@lval+1,f
 12480  0EBF  1903               	skipnz
 12481  0EC0  0AD9               	incf	___fttol@lval+2,f
 12482  0EC1  1903               	skipnz
 12483  0EC2  0ADA               	incf	___fttol@lval+3,f
 12484  0EC3                     l8044:	
 12485  0EC3  085A               	movf	___fttol@lval+3,w
 12486  0EC4  00D1               	movwf	?___fttol+3
 12487  0EC5  0859               	movf	___fttol@lval+2,w
 12488  0EC6  00D0               	movwf	?___fttol+2
 12489  0EC7  0858               	movf	___fttol@lval+1,w
 12490  0EC8  00CF               	movwf	?___fttol+1
 12491  0EC9  0857               	movf	___fttol@lval,w
 12492  0ECA  00CE               	movwf	?___fttol
 12493  0ECB  0008               	return
 12494  0ECC                     __end_of___fttol:	
 12495                           
 12496                           	psect	text74
 12497  1E89                     __ptext74:	
 12498 ;; *************** function ___ftneg *****************
 12499 ;; Defined at:
 12500 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 12501 ;; Parameters:    Size  Location     Type
 12502 ;;  f1              3   30[BANK0 ] float 
 12503 ;; Auto vars:     Size  Location     Type
 12504 ;;		None
 12505 ;; Return value:  Size  Location     Type
 12506 ;;                  3   30[BANK0 ] float 
 12507 ;; Registers used:
 12508 ;;		wreg
 12509 ;; Tracked objects:
 12510 ;;		On entry : 0/0
 12511 ;;		On exit  : 0/0
 12512 ;;		Unchanged: 0/0
 12513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12514 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12517 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12518 ;;Total ram usage:        3 bytes
 12519 ;; Hardware stack levels used:    1
 12520 ;; Hardware stack levels required when called:    5
 12521 ;; This function calls:
 12522 ;;		Nothing
 12523 ;; This function is called by:
 12524 ;;		_getPercentValue
 12525 ;;		_setPercentValue
 12526 ;; This function uses a non-reentrant model
 12527 ;;
 12528                           
 12529                           
 12530                           ;psect for function ___ftneg
 12531  1E89                     ___ftneg:	
 12532                           
 12533                           ;incstack = 0
 12534                           ; Regs used in ___ftneg: [wreg]
 12535  1E89  0020               	movlb	0	; select bank0
 12536  1E8A  0840               	movf	___ftneg@f1+2,w
 12537  1E8B  043F               	iorwf	___ftneg@f1+1,w
 12538  1E8C  043E               	iorwf	___ftneg@f1,w
 12539  1E8D  1903               	skipnz
 12540  1E8E  0008               	return
 12541  1E8F  3080               	movlw	128
 12542  1E90  06C0               	xorwf	___ftneg@f1+2,f
 12543  1E91  0008               	return
 12544  1E92                     __end_of___ftneg:	
 12545                           
 12546                           	psect	text75
 12547  0F57                     __ptext75:	
 12548 ;; *************** function ___ftdiv *****************
 12549 ;; Defined at:
 12550 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 12551 ;; Parameters:    Size  Location     Type
 12552 ;;  f2              3   14[BANK0 ] float 
 12553 ;;  f1              3   17[BANK0 ] float 
 12554 ;; Auto vars:     Size  Location     Type
 12555 ;;  f3              3   25[BANK0 ] float 
 12556 ;;  sign            1   29[BANK0 ] unsigned char 
 12557 ;;  exp             1   28[BANK0 ] unsigned char 
 12558 ;;  cntr            1   24[BANK0 ] unsigned char 
 12559 ;; Return value:  Size  Location     Type
 12560 ;;                  3   14[BANK0 ] float 
 12561 ;; Registers used:
 12562 ;;		wreg, status,2, status,0, pclath, cstack
 12563 ;; Tracked objects:
 12564 ;;		On entry : 0/0
 12565 ;;		On exit  : 0/0
 12566 ;;		Unchanged: 0/0
 12567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12568 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12569 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12570 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12571 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12572 ;;Total ram usage:       16 bytes
 12573 ;; Hardware stack levels used:    1
 12574 ;; Hardware stack levels required when called:    6
 12575 ;; This function calls:
 12576 ;;		___ftpack
 12577 ;; This function is called by:
 12578 ;;		_getPercentValue
 12579 ;;		_setPercentValue
 12580 ;; This function uses a non-reentrant model
 12581 ;;
 12582                           
 12583                           
 12584                           ;psect for function ___ftdiv
 12585  0F57                     ___ftdiv:	
 12586                           
 12587                           ;incstack = 0
 12588                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 12589  0F57  0020               	movlb	0	; select bank0
 12590  0F58  0831               	movf	___ftdiv@f1,w
 12591  0F59  00B4               	movwf	??___ftdiv
 12592  0F5A  0832               	movf	___ftdiv@f1+1,w
 12593  0F5B  00B5               	movwf	??___ftdiv+1
 12594  0F5C  0833               	movf	___ftdiv@f1+2,w
 12595  0F5D  00B6               	movwf	??___ftdiv+2
 12596  0F5E  1003               	clrc
 12597  0F5F  0D35               	rlf	??___ftdiv+1,w
 12598  0F60  0D36               	rlf	??___ftdiv+2,w
 12599  0F61  00B7               	movwf	??___ftdiv+3
 12600  0F62  0837               	movf	??___ftdiv+3,w
 12601  0F63  00BC               	movwf	___ftdiv@exp
 12602  0F64  08BC               	movf	___ftdiv@exp,f
 12603  0F65  1D03               	skipz
 12604  0F66  2F6E               	goto	l7910
 12605  0F67  3000               	movlw	0
 12606  0F68  00AE               	movwf	?___ftdiv
 12607  0F69  3000               	movlw	0
 12608  0F6A  00AF               	movwf	?___ftdiv+1
 12609  0F6B  3000               	movlw	0
 12610  0F6C  00B0               	movwf	?___ftdiv+2
 12611  0F6D  0008               	return
 12612  0F6E                     l7910:	
 12613  0F6E  082E               	movf	___ftdiv@f2,w
 12614  0F6F  00B4               	movwf	??___ftdiv
 12615  0F70  082F               	movf	___ftdiv@f2+1,w
 12616  0F71  00B5               	movwf	??___ftdiv+1
 12617  0F72  0830               	movf	___ftdiv@f2+2,w
 12618  0F73  00B6               	movwf	??___ftdiv+2
 12619  0F74  1003               	clrc
 12620  0F75  0D35               	rlf	??___ftdiv+1,w
 12621  0F76  0D36               	rlf	??___ftdiv+2,w
 12622  0F77  00B7               	movwf	??___ftdiv+3
 12623  0F78  0837               	movf	??___ftdiv+3,w
 12624  0F79  00BD               	movwf	___ftdiv@sign
 12625  0F7A  08BD               	movf	___ftdiv@sign,f
 12626  0F7B  1D03               	skipz
 12627  0F7C  2F84               	goto	l7916
 12628  0F7D  3000               	movlw	0
 12629  0F7E  00AE               	movwf	?___ftdiv
 12630  0F7F  3000               	movlw	0
 12631  0F80  00AF               	movwf	?___ftdiv+1
 12632  0F81  3000               	movlw	0
 12633  0F82  00B0               	movwf	?___ftdiv+2
 12634  0F83  0008               	return
 12635  0F84                     l7916:	
 12636  0F84  3000               	movlw	0
 12637  0F85  00B9               	movwf	___ftdiv@f3
 12638  0F86  3000               	movlw	0
 12639  0F87  00BA               	movwf	___ftdiv@f3+1
 12640  0F88  3000               	movlw	0
 12641  0F89  00BB               	movwf	___ftdiv@f3+2
 12642  0F8A  3089               	movlw	137
 12643  0F8B  073D               	addwf	___ftdiv@sign,w
 12644  0F8C  00B4               	movwf	??___ftdiv
 12645  0F8D  0834               	movf	??___ftdiv,w
 12646  0F8E  02BC               	subwf	___ftdiv@exp,f
 12647  0F8F  0831               	movf	___ftdiv@f1,w
 12648  0F90  00B4               	movwf	??___ftdiv
 12649  0F91  0832               	movf	___ftdiv@f1+1,w
 12650  0F92  00B5               	movwf	??___ftdiv+1
 12651  0F93  0833               	movf	___ftdiv@f1+2,w
 12652  0F94  00B6               	movwf	??___ftdiv+2
 12653  0F95  3010               	movlw	16
 12654  0F96                     u7825:	
 12655  0F96  36B6               	lsrf	??___ftdiv+2,f
 12656  0F97  0CB5               	rrf	??___ftdiv+1,f
 12657  0F98  0CB4               	rrf	??___ftdiv,f
 12658  0F99  0B89               	decfsz	9,f
 12659  0F9A  2F96               	goto	u7825
 12660  0F9B  0834               	movf	??___ftdiv,w
 12661  0F9C  00B7               	movwf	??___ftdiv+3
 12662  0F9D  0837               	movf	??___ftdiv+3,w
 12663  0F9E  00BD               	movwf	___ftdiv@sign
 12664  0F9F  082E               	movf	___ftdiv@f2,w
 12665  0FA0  00B4               	movwf	??___ftdiv
 12666  0FA1  082F               	movf	___ftdiv@f2+1,w
 12667  0FA2  00B5               	movwf	??___ftdiv+1
 12668  0FA3  0830               	movf	___ftdiv@f2+2,w
 12669  0FA4  00B6               	movwf	??___ftdiv+2
 12670  0FA5  3010               	movlw	16
 12671  0FA6                     u7835:	
 12672  0FA6  36B6               	lsrf	??___ftdiv+2,f
 12673  0FA7  0CB5               	rrf	??___ftdiv+1,f
 12674  0FA8  0CB4               	rrf	??___ftdiv,f
 12675  0FA9  0B89               	decfsz	9,f
 12676  0FAA  2FA6               	goto	u7835
 12677  0FAB  0834               	movf	??___ftdiv,w
 12678  0FAC  00B7               	movwf	??___ftdiv+3
 12679  0FAD  0837               	movf	??___ftdiv+3,w
 12680  0FAE  06BD               	xorwf	___ftdiv@sign,f
 12681  0FAF  3080               	movlw	128
 12682  0FB0  00B4               	movwf	??___ftdiv
 12683  0FB1  0834               	movf	??___ftdiv,w
 12684  0FB2  05BD               	andwf	___ftdiv@sign,f
 12685  0FB3  17B2               	bsf	___ftdiv@f1+1,7
 12686  0FB4  30FF               	movlw	255
 12687  0FB5  05B1               	andwf	___ftdiv@f1,f
 12688  0FB6  30FF               	movlw	255
 12689  0FB7  05B2               	andwf	___ftdiv@f1+1,f
 12690  0FB8  3000               	movlw	0
 12691  0FB9  05B3               	andwf	___ftdiv@f1+2,f
 12692  0FBA  17AF               	bsf	___ftdiv@f2+1,7
 12693  0FBB  30FF               	movlw	255
 12694  0FBC  05AE               	andwf	___ftdiv@f2,f
 12695  0FBD  30FF               	movlw	255
 12696  0FBE  05AF               	andwf	___ftdiv@f2+1,f
 12697  0FBF  3000               	movlw	0
 12698  0FC0  05B0               	andwf	___ftdiv@f2+2,f
 12699  0FC1  3018               	movlw	24
 12700  0FC2  00B4               	movwf	??___ftdiv
 12701  0FC3  0834               	movf	??___ftdiv,w
 12702  0FC4  00B8               	movwf	___ftdiv@cntr
 12703  0FC5                     l7930:	
 12704  0FC5  3001               	movlw	1
 12705  0FC6                     u7845:	
 12706  0FC6  35B9               	lslf	___ftdiv@f3,f
 12707  0FC7  0DBA               	rlf	___ftdiv@f3+1,f
 12708  0FC8  0DBB               	rlf	___ftdiv@f3+2,f
 12709  0FC9  0B89               	decfsz	9,f
 12710  0FCA  2FC6               	goto	u7845
 12711  0FCB  0830               	movf	___ftdiv@f2+2,w
 12712  0FCC  0233               	subwf	___ftdiv@f1+2,w
 12713  0FCD  1D03               	skipz
 12714  0FCE  2FD5               	goto	u7855
 12715  0FCF  082F               	movf	___ftdiv@f2+1,w
 12716  0FD0  0232               	subwf	___ftdiv@f1+1,w
 12717  0FD1  1D03               	skipz
 12718  0FD2  2FD5               	goto	u7855
 12719  0FD3  082E               	movf	___ftdiv@f2,w
 12720  0FD4  0231               	subwf	___ftdiv@f1,w
 12721  0FD5                     u7855:	
 12722  0FD5  1C03               	skipc
 12723  0FD6  2FDE               	goto	l7938
 12724  0FD7  082E               	movf	___ftdiv@f2,w
 12725  0FD8  02B1               	subwf	___ftdiv@f1,f
 12726  0FD9  082F               	movf	___ftdiv@f2+1,w
 12727  0FDA  3BB2               	subwfb	___ftdiv@f1+1,f
 12728  0FDB  0830               	movf	___ftdiv@f2+2,w
 12729  0FDC  3BB3               	subwfb	___ftdiv@f1+2,f
 12730  0FDD  1439               	bsf	___ftdiv@f3,0
 12731  0FDE                     l7938:	
 12732  0FDE  3001               	movlw	1
 12733  0FDF                     u7865:	
 12734  0FDF  35B1               	lslf	___ftdiv@f1,f
 12735  0FE0  0DB2               	rlf	___ftdiv@f1+1,f
 12736  0FE1  0DB3               	rlf	___ftdiv@f1+2,f
 12737  0FE2  0B89               	decfsz	9,f
 12738  0FE3  2FDF               	goto	u7865
 12739  0FE4  3001               	movlw	1
 12740  0FE5  02B8               	subwf	___ftdiv@cntr,f
 12741  0FE6  1D03               	btfss	3,2
 12742  0FE7  2FC5               	goto	l7930
 12743  0FE8  0839               	movf	___ftdiv@f3,w
 12744  0FE9  00A0               	movwf	___ftpack@arg
 12745  0FEA  083A               	movf	___ftdiv@f3+1,w
 12746  0FEB  00A1               	movwf	___ftpack@arg+1
 12747  0FEC  083B               	movf	___ftdiv@f3+2,w
 12748  0FED  00A2               	movwf	___ftpack@arg+2
 12749  0FEE  083C               	movf	___ftdiv@exp,w
 12750  0FEF  00B4               	movwf	??___ftdiv
 12751  0FF0  0834               	movf	??___ftdiv,w
 12752  0FF1  00A3               	movwf	___ftpack@exp
 12753  0FF2  083D               	movf	___ftdiv@sign,w
 12754  0FF3  00B5               	movwf	??___ftdiv+1
 12755  0FF4  0835               	movf	??___ftdiv+1,w
 12756  0FF5  00A4               	movwf	___ftpack@sign
 12757  0FF6  318B  230A         	fcall	___ftpack
 12758  0FF8  0020               	movlb	0	; select bank0
 12759  0FF9  0820               	movf	?___ftpack,w
 12760  0FFA  00AE               	movwf	?___ftdiv
 12761  0FFB  0821               	movf	?___ftpack+1,w
 12762  0FFC  00AF               	movwf	?___ftdiv+1
 12763  0FFD  0822               	movf	?___ftpack+2,w
 12764  0FFE  00B0               	movwf	?___ftdiv+2
 12765  0FFF  0008               	return
 12766  1000                     __end_of___ftdiv:	
 12767                           
 12768                           	psect	text76
 12769  01B3                     __ptext76:	
 12770 ;; *************** function ___ftadd *****************
 12771 ;; Defined at:
 12772 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 12773 ;; Parameters:    Size  Location     Type
 12774 ;;  f1              3   33[BANK0 ] float 
 12775 ;;  f2              3   36[BANK0 ] float 
 12776 ;; Auto vars:     Size  Location     Type
 12777 ;;  exp1            1   45[BANK0 ] unsigned char 
 12778 ;;  exp2            1   44[BANK0 ] unsigned char 
 12779 ;;  sign            1   43[BANK0 ] unsigned char 
 12780 ;; Return value:  Size  Location     Type
 12781 ;;                  3   33[BANK0 ] float 
 12782 ;; Registers used:
 12783 ;;		wreg, status,2, status,0, pclath, cstack
 12784 ;; Tracked objects:
 12785 ;;		On entry : 0/0
 12786 ;;		On exit  : 0/0
 12787 ;;		Unchanged: 0/0
 12788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12789 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12791 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;Total ram usage:       13 bytes
 12794 ;; Hardware stack levels used:    1
 12795 ;; Hardware stack levels required when called:    6
 12796 ;; This function calls:
 12797 ;;		___ftpack
 12798 ;; This function is called by:
 12799 ;;		_getPercentValue
 12800 ;;		_setPercentValue
 12801 ;; This function uses a non-reentrant model
 12802 ;;
 12803                           
 12804                           
 12805                           ;psect for function ___ftadd
 12806  01B3                     ___ftadd:	
 12807                           
 12808                           ;incstack = 0
 12809                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 12810  01B3  0020               	movlb	0	; select bank0
 12811  01B4  0841               	movf	___ftadd@f1,w
 12812  01B5  00C7               	movwf	??___ftadd
 12813  01B6  0842               	movf	___ftadd@f1+1,w
 12814  01B7  00C8               	movwf	??___ftadd+1
 12815  01B8  0843               	movf	___ftadd@f1+2,w
 12816  01B9  00C9               	movwf	??___ftadd+2
 12817  01BA  1003               	clrc
 12818  01BB  0D48               	rlf	??___ftadd+1,w
 12819  01BC  0D49               	rlf	??___ftadd+2,w
 12820  01BD  00CA               	movwf	??___ftadd+3
 12821  01BE  084A               	movf	??___ftadd+3,w
 12822  01BF  00CD               	movwf	___ftadd@exp1
 12823  01C0  0844               	movf	___ftadd@f2,w
 12824  01C1  00C7               	movwf	??___ftadd
 12825  01C2  0845               	movf	___ftadd@f2+1,w
 12826  01C3  00C8               	movwf	??___ftadd+1
 12827  01C4  0846               	movf	___ftadd@f2+2,w
 12828  01C5  00C9               	movwf	??___ftadd+2
 12829  01C6  1003               	clrc
 12830  01C7  0D48               	rlf	??___ftadd+1,w
 12831  01C8  0D49               	rlf	??___ftadd+2,w
 12832  01C9  00CA               	movwf	??___ftadd+3
 12833  01CA  084A               	movf	??___ftadd+3,w
 12834  01CB  00CC               	movwf	___ftadd@exp2
 12835  01CC  084D               	movf	___ftadd@exp1,w
 12836  01CD  1903               	btfsc	3,2
 12837  01CE  29DB               	goto	l7840
 12838  01CF  084C               	movf	___ftadd@exp2,w
 12839  01D0  024D               	subwf	___ftadd@exp1,w
 12840  01D1  1803               	skipnc
 12841  01D2  29E2               	goto	l7844
 12842  01D3  034D               	decf	___ftadd@exp1,w
 12843  01D4  3AFF               	xorlw	255
 12844  01D5  074C               	addwf	___ftadd@exp2,w
 12845  01D6  00C7               	movwf	??___ftadd
 12846  01D7  3019               	movlw	25
 12847  01D8  0247               	subwf	??___ftadd,w
 12848  01D9  1C03               	skipc
 12849  01DA  29E2               	goto	l7844
 12850  01DB                     l7840:	
 12851  01DB  0844               	movf	___ftadd@f2,w
 12852  01DC  00C1               	movwf	?___ftadd
 12853  01DD  0845               	movf	___ftadd@f2+1,w
 12854  01DE  00C2               	movwf	?___ftadd+1
 12855  01DF  0846               	movf	___ftadd@f2+2,w
 12856  01E0  00C3               	movwf	?___ftadd+2
 12857  01E1  0008               	return
 12858  01E2                     l7844:	
 12859  01E2  084C               	movf	___ftadd@exp2,w
 12860  01E3  1903               	btfsc	3,2
 12861  01E4  0008               	return
 12862  01E5  084D               	movf	___ftadd@exp1,w
 12863  01E6  024C               	subwf	___ftadd@exp2,w
 12864  01E7  1803               	skipnc
 12865  01E8  29F1               	goto	l7850
 12866  01E9  034C               	decf	___ftadd@exp2,w
 12867  01EA  3AFF               	xorlw	255
 12868  01EB  074D               	addwf	___ftadd@exp1,w
 12869  01EC  00C7               	movwf	??___ftadd
 12870  01ED  3019               	movlw	25
 12871  01EE  0247               	subwf	??___ftadd,w
 12872  01EF  1803               	btfsc	3,0
 12873  01F0  0008               	return
 12874  01F1                     l7850:	
 12875  01F1  3006               	movlw	6
 12876  01F2  00C7               	movwf	??___ftadd
 12877  01F3  0847               	movf	??___ftadd,w
 12878  01F4  00CB               	movwf	___ftadd@sign
 12879  01F5  1BC3               	btfsc	___ftadd@f1+2,7
 12880  01F6  17CB               	bsf	___ftadd@sign,7
 12881  01F7  1BC6               	btfsc	___ftadd@f2+2,7
 12882  01F8  174B               	bsf	___ftadd@sign,6
 12883  01F9  17C2               	bsf	___ftadd@f1+1,7
 12884  01FA  30FF               	movlw	255
 12885  01FB  05C1               	andwf	___ftadd@f1,f
 12886  01FC  30FF               	movlw	255
 12887  01FD  05C2               	andwf	___ftadd@f1+1,f
 12888  01FE  3000               	movlw	0
 12889  01FF  05C3               	andwf	___ftadd@f1+2,f
 12890  0200  17C5               	bsf	___ftadd@f2+1,7
 12891  0201  30FF               	movlw	255
 12892  0202  05C4               	andwf	___ftadd@f2,f
 12893  0203  30FF               	movlw	255
 12894  0204  05C5               	andwf	___ftadd@f2+1,f
 12895  0205  3000               	movlw	0
 12896  0206  05C6               	andwf	___ftadd@f2+2,f
 12897  0207  084C               	movf	___ftadd@exp2,w
 12898  0208  024D               	subwf	___ftadd@exp1,w
 12899  0209  1803               	skipnc
 12900  020A  2A2D               	goto	l7872
 12901  020B                     l7862:	
 12902  020B  3001               	movlw	1
 12903  020C                     u7665:	
 12904  020C  35C4               	lslf	___ftadd@f2,f
 12905  020D  0DC5               	rlf	___ftadd@f2+1,f
 12906  020E  0DC6               	rlf	___ftadd@f2+2,f
 12907  020F  0B89               	decfsz	9,f
 12908  0210  2A0C               	goto	u7665
 12909  0211  3001               	movlw	1
 12910  0212  02CC               	subwf	___ftadd@exp2,f
 12911  0213  084C               	movf	___ftadd@exp2,w
 12912  0214  064D               	xorwf	___ftadd@exp1,w
 12913  0215  1903               	skipnz
 12914  0216  2A28               	goto	l7870
 12915  0217  3001               	movlw	1
 12916  0218  02CB               	subwf	___ftadd@sign,f
 12917  0219  084B               	movf	___ftadd@sign,w
 12918  021A  3907               	andlw	7
 12919  021B  1903               	btfsc	3,2
 12920  021C  2A28               	goto	l7870
 12921  021D  2A0B               	goto	l7862
 12922  021E                     l7868:	
 12923  021E  3001               	movlw	1
 12924  021F                     u7695:	
 12925  021F  36C3               	lsrf	___ftadd@f1+2,f
 12926  0220  0CC2               	rrf	___ftadd@f1+1,f
 12927  0221  0CC1               	rrf	___ftadd@f1,f
 12928  0222  0B89               	decfsz	9,f
 12929  0223  2A1F               	goto	u7695
 12930  0224  3001               	movlw	1
 12931  0225  00C7               	movwf	??___ftadd
 12932  0226  0847               	movf	??___ftadd,w
 12933  0227  07CD               	addwf	___ftadd@exp1,f
 12934  0228                     l7870:	
 12935  0228  084D               	movf	___ftadd@exp1,w
 12936  0229  064C               	xorwf	___ftadd@exp2,w
 12937  022A  1903               	btfsc	3,2
 12938  022B  2A52               	goto	l2903
 12939  022C  2A1E               	goto	l7868
 12940  022D                     l7872:	
 12941  022D  084D               	movf	___ftadd@exp1,w
 12942  022E  024C               	subwf	___ftadd@exp2,w
 12943  022F  1803               	skipnc
 12944  0230  2A52               	goto	l2903
 12945  0231                     l7874:	
 12946  0231  3001               	movlw	1
 12947  0232                     u7725:	
 12948  0232  35C1               	lslf	___ftadd@f1,f
 12949  0233  0DC2               	rlf	___ftadd@f1+1,f
 12950  0234  0DC3               	rlf	___ftadd@f1+2,f
 12951  0235  0B89               	decfsz	9,f
 12952  0236  2A32               	goto	u7725
 12953  0237  3001               	movlw	1
 12954  0238  02CD               	subwf	___ftadd@exp1,f
 12955  0239  084C               	movf	___ftadd@exp2,w
 12956  023A  064D               	xorwf	___ftadd@exp1,w
 12957  023B  1903               	skipnz
 12958  023C  2A4E               	goto	l7882
 12959  023D  3001               	movlw	1
 12960  023E  02CB               	subwf	___ftadd@sign,f
 12961  023F  084B               	movf	___ftadd@sign,w
 12962  0240  3907               	andlw	7
 12963  0241  1903               	btfsc	3,2
 12964  0242  2A4E               	goto	l7882
 12965  0243  2A31               	goto	l7874
 12966  0244                     l7880:	
 12967  0244  3001               	movlw	1
 12968  0245                     u7755:	
 12969  0245  36C6               	lsrf	___ftadd@f2+2,f
 12970  0246  0CC5               	rrf	___ftadd@f2+1,f
 12971  0247  0CC4               	rrf	___ftadd@f2,f
 12972  0248  0B89               	decfsz	9,f
 12973  0249  2A45               	goto	u7755
 12974  024A  3001               	movlw	1
 12975  024B  00C7               	movwf	??___ftadd
 12976  024C  0847               	movf	??___ftadd,w
 12977  024D  07CC               	addwf	___ftadd@exp2,f
 12978  024E                     l7882:	
 12979  024E  084D               	movf	___ftadd@exp1,w
 12980  024F  064C               	xorwf	___ftadd@exp2,w
 12981  0250  1D03               	skipz
 12982  0251  2A44               	goto	l7880
 12983  0252                     l2903:	
 12984  0252  1FCB               	btfss	___ftadd@sign,7
 12985  0253  2A64               	goto	l7886
 12986  0254  30FF               	movlw	255
 12987  0255  06C1               	xorwf	___ftadd@f1,f
 12988  0256  30FF               	movlw	255
 12989  0257  06C2               	xorwf	___ftadd@f1+1,f
 12990  0258  30FF               	movlw	255
 12991  0259  06C3               	xorwf	___ftadd@f1+2,f
 12992  025A  3001               	movlw	1
 12993  025B  07C1               	addwf	___ftadd@f1,f
 12994  025C  3000               	movlw	0
 12995  025D  1803               	skipnc
 12996  025E  3001               	movlw	1
 12997  025F  07C2               	addwf	___ftadd@f1+1,f
 12998  0260  3000               	movlw	0
 12999  0261  1803               	skipnc
 13000  0262  3001               	movlw	1
 13001  0263  07C3               	addwf	___ftadd@f1+2,f
 13002  0264                     l7886:	
 13003  0264  1F4B               	btfss	___ftadd@sign,6
 13004  0265  2A76               	goto	l7890
 13005  0266  30FF               	movlw	255
 13006  0267  06C4               	xorwf	___ftadd@f2,f
 13007  0268  30FF               	movlw	255
 13008  0269  06C5               	xorwf	___ftadd@f2+1,f
 13009  026A  30FF               	movlw	255
 13010  026B  06C6               	xorwf	___ftadd@f2+2,f
 13011  026C  3001               	movlw	1
 13012  026D  07C4               	addwf	___ftadd@f2,f
 13013  026E  3000               	movlw	0
 13014  026F  1803               	skipnc
 13015  0270  3001               	movlw	1
 13016  0271  07C5               	addwf	___ftadd@f2+1,f
 13017  0272  3000               	movlw	0
 13018  0273  1803               	skipnc
 13019  0274  3001               	movlw	1
 13020  0275  07C6               	addwf	___ftadd@f2+2,f
 13021  0276                     l7890:	
 13022  0276  01CB               	clrf	___ftadd@sign
 13023  0277  0841               	movf	___ftadd@f1,w
 13024  0278  07C4               	addwf	___ftadd@f2,f
 13025  0279  0842               	movf	___ftadd@f1+1,w
 13026  027A  3DC5               	addwfc	___ftadd@f2+1,f
 13027  027B  0843               	movf	___ftadd@f1+2,w
 13028  027C  3DC6               	addwfc	___ftadd@f2+2,f
 13029  027D  1FC6               	btfss	___ftadd@f2+2,7
 13030  027E  2A91               	goto	l7900
 13031  027F  30FF               	movlw	255
 13032  0280  06C4               	xorwf	___ftadd@f2,f
 13033  0281  30FF               	movlw	255
 13034  0282  06C5               	xorwf	___ftadd@f2+1,f
 13035  0283  30FF               	movlw	255
 13036  0284  06C6               	xorwf	___ftadd@f2+2,f
 13037  0285  3001               	movlw	1
 13038  0286  07C4               	addwf	___ftadd@f2,f
 13039  0287  3000               	movlw	0
 13040  0288  1803               	skipnc
 13041  0289  3001               	movlw	1
 13042  028A  07C5               	addwf	___ftadd@f2+1,f
 13043  028B  3000               	movlw	0
 13044  028C  1803               	skipnc
 13045  028D  3001               	movlw	1
 13046  028E  07C6               	addwf	___ftadd@f2+2,f
 13047  028F  01CB               	clrf	___ftadd@sign
 13048  0290  0ACB               	incf	___ftadd@sign,f
 13049  0291                     l7900:	
 13050  0291  0844               	movf	___ftadd@f2,w
 13051  0292  00A0               	movwf	___ftpack@arg
 13052  0293  0845               	movf	___ftadd@f2+1,w
 13053  0294  00A1               	movwf	___ftpack@arg+1
 13054  0295  0846               	movf	___ftadd@f2+2,w
 13055  0296  00A2               	movwf	___ftpack@arg+2
 13056  0297  084D               	movf	___ftadd@exp1,w
 13057  0298  00C7               	movwf	??___ftadd
 13058  0299  0847               	movf	??___ftadd,w
 13059  029A  00A3               	movwf	___ftpack@exp
 13060  029B  084B               	movf	___ftadd@sign,w
 13061  029C  00C8               	movwf	??___ftadd+1
 13062  029D  0848               	movf	??___ftadd+1,w
 13063  029E  00A4               	movwf	___ftpack@sign
 13064  029F  318B  230A         	fcall	___ftpack
 13065  02A1  0020               	movlb	0	; select bank0
 13066  02A2  0820               	movf	?___ftpack,w
 13067  02A3  00C1               	movwf	?___ftadd
 13068  02A4  0821               	movf	?___ftpack+1,w
 13069  02A5  00C2               	movwf	?___ftadd+1
 13070  02A6  0822               	movf	?___ftpack+2,w
 13071  02A7  00C3               	movwf	?___ftadd+2
 13072  02A8  0008               	return
 13073  02A9                     __end_of___ftadd:	
 13074                           
 13075                           	psect	text77
 13076  12A0                     __ptext77:	
 13077 ;; *************** function ___awtoft *****************
 13078 ;; Defined at:
 13079 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 13080 ;; Parameters:    Size  Location     Type
 13081 ;;  c               2    8[BANK0 ] int 
 13082 ;; Auto vars:     Size  Location     Type
 13083 ;;  sign            1   13[BANK0 ] unsigned char 
 13084 ;; Return value:  Size  Location     Type
 13085 ;;                  3    8[BANK0 ] float 
 13086 ;; Registers used:
 13087 ;;		wreg, status,2, status,0, pclath, cstack
 13088 ;; Tracked objects:
 13089 ;;		On entry : 0/0
 13090 ;;		On exit  : 0/0
 13091 ;;		Unchanged: 0/0
 13092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13093 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13095 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13096 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13097 ;;Total ram usage:        6 bytes
 13098 ;; Hardware stack levels used:    1
 13099 ;; Hardware stack levels required when called:    6
 13100 ;; This function calls:
 13101 ;;		___ftpack
 13102 ;; This function is called by:
 13103 ;;		_getPercentValue
 13104 ;;		_setPercentValue
 13105 ;; This function uses a non-reentrant model
 13106 ;;
 13107                           
 13108                           
 13109                           ;psect for function ___awtoft
 13110  12A0                     ___awtoft:	
 13111                           
 13112                           ;incstack = 0
 13113                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 13114  12A0  0020               	movlb	0	; select bank0
 13115  12A1  01AD               	clrf	___awtoft@sign
 13116  12A2  1FA9               	btfss	___awtoft@c+1,7
 13117  12A3  2AAB               	goto	l7828
 13118  12A4  09A8               	comf	___awtoft@c,f
 13119  12A5  09A9               	comf	___awtoft@c+1,f
 13120  12A6  0AA8               	incf	___awtoft@c,f
 13121  12A7  1903               	skipnz
 13122  12A8  0AA9               	incf	___awtoft@c+1,f
 13123  12A9  01AD               	clrf	___awtoft@sign
 13124  12AA  0AAD               	incf	___awtoft@sign,f
 13125  12AB                     l7828:	
 13126  12AB  0828               	movf	___awtoft@c,w
 13127  12AC  00A0               	movwf	___ftpack@arg
 13128  12AD  0829               	movf	___awtoft@c+1,w
 13129  12AE  00A1               	movwf	___ftpack@arg+1
 13130  12AF  01A2               	clrf	___ftpack@arg+2
 13131  12B0  308E               	movlw	142
 13132  12B1  00AB               	movwf	??___awtoft
 13133  12B2  082B               	movf	??___awtoft,w
 13134  12B3  00A3               	movwf	___ftpack@exp
 13135  12B4  082D               	movf	___awtoft@sign,w
 13136  12B5  00AC               	movwf	??___awtoft+1
 13137  12B6  082C               	movf	??___awtoft+1,w
 13138  12B7  00A4               	movwf	___ftpack@sign
 13139  12B8  318B  230A         	fcall	___ftpack
 13140  12BA  0020               	movlb	0	; select bank0
 13141  12BB  0820               	movf	?___ftpack,w
 13142  12BC  00A8               	movwf	?___awtoft
 13143  12BD  0821               	movf	?___ftpack+1,w
 13144  12BE  00A9               	movwf	?___awtoft+1
 13145  12BF  0822               	movf	?___ftpack+2,w
 13146  12C0  00AA               	movwf	?___awtoft+2
 13147  12C1  0008               	return
 13148  12C2                     __end_of___awtoft:	
 13149                           
 13150                           	psect	text78
 13151  0B0A                     __ptext78:	
 13152 ;; *************** function ___ftpack *****************
 13153 ;; Defined at:
 13154 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 13155 ;; Parameters:    Size  Location     Type
 13156 ;;  arg             3    0[BANK0 ] unsigned um
 13157 ;;  exp             1    3[BANK0 ] unsigned char 
 13158 ;;  sign            1    4[BANK0 ] unsigned char 
 13159 ;; Auto vars:     Size  Location     Type
 13160 ;;		None
 13161 ;; Return value:  Size  Location     Type
 13162 ;;                  3    0[BANK0 ] float 
 13163 ;; Registers used:
 13164 ;;		wreg, status,2, status,0
 13165 ;; Tracked objects:
 13166 ;;		On entry : 0/0
 13167 ;;		On exit  : 0/0
 13168 ;;		Unchanged: 0/0
 13169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13170 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13172 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13174 ;;Total ram usage:        8 bytes
 13175 ;; Hardware stack levels used:    1
 13176 ;; Hardware stack levels required when called:    5
 13177 ;; This function calls:
 13178 ;;		Nothing
 13179 ;; This function is called by:
 13180 ;;		___awtoft
 13181 ;;		___ftadd
 13182 ;;		___ftdiv
 13183 ;;		___ftmul
 13184 ;; This function uses a non-reentrant model
 13185 ;;
 13186                           
 13187                           
 13188                           ;psect for function ___ftpack
 13189  0B0A                     ___ftpack:	
 13190                           
 13191                           ;incstack = 0
 13192                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 13193  0B0A  0020               	movlb	0	; select bank0
 13194  0B0B  0823               	movf	___ftpack@exp,w
 13195  0B0C  1903               	btfsc	3,2
 13196  0B0D  2B13               	goto	l7778
 13197  0B0E  0822               	movf	___ftpack@arg+2,w
 13198  0B0F  0421               	iorwf	___ftpack@arg+1,w
 13199  0B10  0420               	iorwf	___ftpack@arg,w
 13200  0B11  1D03               	skipz
 13201  0B12  2B24               	goto	l7784
 13202  0B13                     l7778:	
 13203  0B13  3000               	movlw	0
 13204  0B14  00A0               	movwf	?___ftpack
 13205  0B15  3000               	movlw	0
 13206  0B16  00A1               	movwf	?___ftpack+1
 13207  0B17  3000               	movlw	0
 13208  0B18  00A2               	movwf	?___ftpack+2
 13209  0B19  0008               	return
 13210  0B1A                     l7782:	
 13211  0B1A  3001               	movlw	1
 13212  0B1B  00A5               	movwf	??___ftpack
 13213  0B1C  0825               	movf	??___ftpack,w
 13214  0B1D  07A3               	addwf	___ftpack@exp,f
 13215  0B1E  3001               	movlw	1
 13216  0B1F                     u7455:	
 13217  0B1F  36A2               	lsrf	___ftpack@arg+2,f
 13218  0B20  0CA1               	rrf	___ftpack@arg+1,f
 13219  0B21  0CA0               	rrf	___ftpack@arg,f
 13220  0B22  0B89               	decfsz	9,f
 13221  0B23  2B1F               	goto	u7455
 13222  0B24                     l7784:	
 13223  0B24  30FE               	movlw	254
 13224  0B25  0522               	andwf	___ftpack@arg+2,w
 13225  0B26  1903               	btfsc	3,2
 13226  0B27  2B3D               	goto	l2874
 13227  0B28  2B1A               	goto	l7782
 13228  0B29                     l7786:	
 13229  0B29  3001               	movlw	1
 13230  0B2A  00A5               	movwf	??___ftpack
 13231  0B2B  0825               	movf	??___ftpack,w
 13232  0B2C  07A3               	addwf	___ftpack@exp,f
 13233  0B2D  3001               	movlw	1
 13234  0B2E  07A0               	addwf	___ftpack@arg,f
 13235  0B2F  3000               	movlw	0
 13236  0B30  1803               	skipnc
 13237  0B31  3001               	movlw	1
 13238  0B32  07A1               	addwf	___ftpack@arg+1,f
 13239  0B33  3000               	movlw	0
 13240  0B34  1803               	skipnc
 13241  0B35  3001               	movlw	1
 13242  0B36  07A2               	addwf	___ftpack@arg+2,f
 13243  0B37  3001               	movlw	1
 13244  0B38                     u7475:	
 13245  0B38  36A2               	lsrf	___ftpack@arg+2,f
 13246  0B39  0CA1               	rrf	___ftpack@arg+1,f
 13247  0B3A  0CA0               	rrf	___ftpack@arg,f
 13248  0B3B  0B89               	decfsz	9,f
 13249  0B3C  2B38               	goto	u7475
 13250  0B3D                     l2874:	
 13251  0B3D  30FF               	movlw	255
 13252  0B3E  0522               	andwf	___ftpack@arg+2,w
 13253  0B3F  1903               	btfsc	3,2
 13254  0B40  2B4A               	goto	l7794
 13255  0B41  2B29               	goto	l7786
 13256  0B42                     l7792:	
 13257  0B42  3001               	movlw	1
 13258  0B43  02A3               	subwf	___ftpack@exp,f
 13259  0B44  3001               	movlw	1
 13260  0B45                     u7495:	
 13261  0B45  35A0               	lslf	___ftpack@arg,f
 13262  0B46  0DA1               	rlf	___ftpack@arg+1,f
 13263  0B47  0DA2               	rlf	___ftpack@arg+2,f
 13264  0B48  0B89               	decfsz	9,f
 13265  0B49  2B45               	goto	u7495
 13266  0B4A                     l7794:	
 13267  0B4A  1FA1               	btfss	___ftpack@arg+1,7
 13268  0B4B  2B42               	goto	l7792
 13269  0B4C  1823               	btfsc	___ftpack@exp,0
 13270  0B4D  2B54               	goto	l2880
 13271  0B4E  30FF               	movlw	255
 13272  0B4F  05A0               	andwf	___ftpack@arg,f
 13273  0B50  307F               	movlw	127
 13274  0B51  05A1               	andwf	___ftpack@arg+1,f
 13275  0B52  30FF               	movlw	255
 13276  0B53  05A2               	andwf	___ftpack@arg+2,f
 13277  0B54                     l2880:	
 13278  0B54  1003               	clrc
 13279  0B55  0CA3               	rrf	___ftpack@exp,f
 13280  0B56  0823               	movf	___ftpack@exp,w
 13281  0B57  00A5               	movwf	??___ftpack
 13282  0B58  01A6               	clrf	??___ftpack+1
 13283  0B59  01A7               	clrf	??___ftpack+2
 13284  0B5A  3010               	movlw	16
 13285  0B5B                     u7525:	
 13286  0B5B  35A5               	lslf	??___ftpack,f
 13287  0B5C  0DA6               	rlf	??___ftpack+1,f
 13288  0B5D  0DA7               	rlf	??___ftpack+2,f
 13289  0B5E  0B89               	decfsz	9,f
 13290  0B5F  2B5B               	goto	u7525
 13291  0B60  0825               	movf	??___ftpack,w
 13292  0B61  04A0               	iorwf	___ftpack@arg,f
 13293  0B62  0826               	movf	??___ftpack+1,w
 13294  0B63  04A1               	iorwf	___ftpack@arg+1,f
 13295  0B64  0827               	movf	??___ftpack+2,w
 13296  0B65  04A2               	iorwf	___ftpack@arg+2,f
 13297  0B66  0824               	movf	___ftpack@sign,w
 13298  0B67  1903               	btfsc	3,2
 13299  0B68  0008               	return
 13300  0B69  17A2               	bsf	___ftpack@arg+2,7
 13301  0B6A  0008               	return
 13302  0B6B                     __end_of___ftpack:	
 13303                           
 13304                           	psect	text79
 13305  084B                     __ptext79:	
 13306 ;; *************** function _setLED *****************
 13307 ;; Defined at:
 13308 ;;		line 76 in file "../src/LED_B1.c"
 13309 ;; Parameters:    Size  Location     Type
 13310 ;;  led             1    wreg     unsigned char 
 13311 ;;  command         1    2[BANK0 ] unsigned char 
 13312 ;; Auto vars:     Size  Location     Type
 13313 ;;  led             1    3[BANK0 ] unsigned char 
 13314 ;; Return value:  Size  Location     Type
 13315 ;;		None               void
 13316 ;; Registers used:
 13317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13318 ;; Tracked objects:
 13319 ;;		On entry : 0/0
 13320 ;;		On exit  : 0/0
 13321 ;;		Unchanged: 0/0
 13322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13323 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13324 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13326 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13327 ;;Total ram usage:        2 bytes
 13328 ;; Hardware stack levels used:    1
 13329 ;; Hardware stack levels required when called:    6
 13330 ;; This function calls:
 13331 ;;		_LedPointSelect
 13332 ;; This function is called by:
 13333 ;;		_setDimmerLights
 13334 ;;		_setLED_Initialization
 13335 ;;		_Exception_Main
 13336 ;;		_setSw_Initialization
 13337 ;;		_setMain_Exception
 13338 ;; This function uses a non-reentrant model
 13339 ;;
 13340                           
 13341                           
 13342                           ;psect for function _setLED
 13343  084B                     _setLED:	
 13344                           
 13345                           ;incstack = 0
 13346                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13347                           ;setLED@led stored from wreg
 13348  084B  0020               	movlb	0	; select bank0
 13349  084C  00A3               	movwf	setLED@led
 13350                           
 13351                           ;LED_B1.c: 77: LedPointSelect(led);
 13352  084D  0823               	movf	setLED@led,w
 13353  084E  3192  2240  3188   	fcall	_LedPointSelect
 13354                           
 13355                           ;LED_B1.c: 78: if (command == 0) {
 13356  0851  0020               	movlb	0	; select bank0
 13357  0852  08A2               	movf	setLED@command,f
 13358  0853  1D03               	skipz
 13359  0854  2862               	goto	l8484
 13360                           
 13361                           ;LED_B1.c: 80: if (led == 1) {
 13362  0855  0823               	movf	setLED@led,w
 13363  0856  3A01               	xorlw	1
 13364  0857  1D03               	skipz
 13365  0858  285A               	goto	l8476
 13366                           
 13367                           ;LED_B1.c: 84: RA3 = 1;
 13368  0859  158C               	bsf	12,3	;volatile
 13369  085A                     l8476:	
 13370                           
 13371                           ;LED_B1.c: 86: }
 13372                           ;LED_B1.c: 89: if (led == 2) {
 13373  085A  0823               	movf	setLED@led,w
 13374  085B  3A02               	xorlw	2
 13375  085C  1903               	btfsc	3,2
 13376                           
 13377                           ;LED_B1.c: 93: RC7 = 1;
 13378  085D  178E               	bsf	14,7	;volatile
 13379                           
 13380                           ;LED_B1.c: 95: }
 13381                           ;LED_B1.c: 107: if (led == 99) {
 13382  085E  0823               	movf	setLED@led,w
 13383  085F  3A63               	xorlw	99
 13384  0860  1903               	btfsc	3,2
 13385                           
 13386                           ;LED_B1.c: 111: RB5 = 1;
 13387  0861  168D               	bsf	13,5	;volatile
 13388  0862                     l8484:	
 13389                           
 13390                           ;LED_B1.c: 113: }
 13391                           ;LED_B1.c: 115: }
 13392                           ;LED_B1.c: 116: if (command == 1) {
 13393  0862  0822               	movf	setLED@command,w
 13394  0863  3A01               	xorlw	1
 13395  0864  1D03               	skipz
 13396  0865  2873               	goto	l8498
 13397                           
 13398                           ;LED_B1.c: 118: if (led == 1) {
 13399  0866  0823               	movf	setLED@led,w
 13400  0867  3A01               	xorlw	1
 13401  0868  1D03               	skipz
 13402  0869  286B               	goto	l8490
 13403                           
 13404                           ;LED_B1.c: 122: RA3 = 0;
 13405  086A  118C               	bcf	12,3	;volatile
 13406  086B                     l8490:	
 13407                           
 13408                           ;LED_B1.c: 124: }
 13409                           ;LED_B1.c: 127: if (led == 2) {
 13410  086B  0823               	movf	setLED@led,w
 13411  086C  3A02               	xorlw	2
 13412  086D  1903               	btfsc	3,2
 13413                           
 13414                           ;LED_B1.c: 131: RC7 = 0;
 13415  086E  138E               	bcf	14,7	;volatile
 13416                           
 13417                           ;LED_B1.c: 133: }
 13418                           ;LED_B1.c: 145: if (led == 99) {
 13419  086F  0823               	movf	setLED@led,w
 13420  0870  3A63               	xorlw	99
 13421  0871  1903               	btfsc	3,2
 13422                           
 13423                           ;LED_B1.c: 149: RB5 = 0;
 13424  0872  128D               	bcf	13,5	;volatile
 13425  0873                     l8498:	
 13426                           
 13427                           ;LED_B1.c: 151: }
 13428                           ;LED_B1.c: 153: }
 13429                           ;LED_B1.c: 154: if (command == 10) {
 13430  0873  0822               	movf	setLED@command,w
 13431  0874  3A0A               	xorlw	10
 13432  0875  1D03               	skipz
 13433  0876  2893               	goto	l8514
 13434                           
 13435                           ;LED_B1.c: 155: LED->GO = 0;
 13436  0877  0021               	movlb	1	; select bank1
 13437  0878  084D               	movf	_LED^(0+128),w
 13438  0879  0086               	movwf	6
 13439  087A  3001               	movlw	1	; select bank2/3
 13440  087B  0087               	movwf	7
 13441  087C  1081               	bcf	1,1
 13442                           
 13443                           ;LED_B1.c: 156: LED->Time = 0;
 13444  087D  0A4D               	incf	_LED^(0+128),w
 13445  087E  0086               	movwf	6
 13446  087F  3001               	movlw	1	; select bank2/3
 13447  0880  0087               	movwf	7
 13448  0881  3000               	movlw	0
 13449  0882  3FC0               	movwi [0]fsr1
 13450  0883  3FC1               	movwi [1]fsr1
 13451                           
 13452                           ;LED_B1.c: 158: if (led == 1) {
 13453  0884  0020               	movlb	0	; select bank0
 13454  0885  0823               	movf	setLED@led,w
 13455  0886  3A01               	xorlw	1
 13456  0887  1D03               	skipz
 13457  0888  288B               	goto	l8506
 13458                           
 13459                           ;LED_B1.c: 162: RA3 = 1;
 13460  0889  158C               	bsf	12,3	;volatile
 13461                           
 13462                           ;LED_B1.c: 164: }
 13463  088A  288F               	goto	l8510
 13464  088B                     l8506:	
 13465                           
 13466                           ;LED_B1.c: 167: else if (led == 2) {
 13467  088B  0823               	movf	setLED@led,w
 13468  088C  3A02               	xorlw	2
 13469  088D  1903               	btfsc	3,2
 13470                           
 13471                           ;LED_B1.c: 171: RC7 = 1;
 13472  088E  178E               	bsf	14,7	;volatile
 13473  088F                     l8510:	
 13474                           
 13475                           ;LED_B1.c: 173: }
 13476                           ;LED_B1.c: 185: if (led == 99) {
 13477  088F  0823               	movf	setLED@led,w
 13478  0890  3A63               	xorlw	99
 13479  0891  1903               	btfsc	3,2
 13480                           
 13481                           ;LED_B1.c: 189: RB5 = 1;
 13482  0892  168D               	bsf	13,5	;volatile
 13483  0893                     l8514:	
 13484                           
 13485                           ;LED_B1.c: 191: }
 13486                           ;LED_B1.c: 193: }
 13487                           ;LED_B1.c: 194: if (command == 11) {
 13488  0893  0822               	movf	setLED@command,w
 13489  0894  3A0B               	xorlw	11
 13490  0895  1D03               	skipz
 13491  0896  0008               	return
 13492                           
 13493                           ;LED_B1.c: 195: LED->GO = 1;
 13494  0897  0021               	movlb	1	; select bank1
 13495  0898  084D               	movf	_LED^(0+128),w
 13496  0899  0086               	movwf	6
 13497  089A  3001               	movlw	1	; select bank2/3
 13498  089B  0087               	movwf	7
 13499  089C  1481               	bsf	1,1
 13500  089D  0008               	return
 13501  089E                     __end_of_setLED:	
 13502                           
 13503                           	psect	text80
 13504  1240                     __ptext80:	
 13505 ;; *************** function _LedPointSelect *****************
 13506 ;; Defined at:
 13507 ;;		line 7 in file "../src/LED_B1.c"
 13508 ;; Parameters:    Size  Location     Type
 13509 ;;  led             1    wreg     unsigned char 
 13510 ;; Auto vars:     Size  Location     Type
 13511 ;;  led             1    1[BANK0 ] unsigned char 
 13512 ;; Return value:  Size  Location     Type
 13513 ;;		None               void
 13514 ;; Registers used:
 13515 ;;		wreg
 13516 ;; Tracked objects:
 13517 ;;		On entry : 0/0
 13518 ;;		On exit  : 0/0
 13519 ;;		Unchanged: 0/0
 13520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13524 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13525 ;;Total ram usage:        2 bytes
 13526 ;; Hardware stack levels used:    1
 13527 ;; Hardware stack levels required when called:    5
 13528 ;; This function calls:
 13529 ;;		Nothing
 13530 ;; This function is called by:
 13531 ;;		_setLED_Initialization
 13532 ;;		_setLED
 13533 ;;		_setLED_Main
 13534 ;; This function uses a non-reentrant model
 13535 ;;
 13536                           
 13537                           
 13538                           ;psect for function _LedPointSelect
 13539  1240                     _LedPointSelect:	
 13540                           
 13541                           ;incstack = 0
 13542                           ; Regs used in _LedPointSelect: [wreg]
 13543                           ;LedPointSelect@led stored from wreg
 13544  1240  0020               	movlb	0	; select bank0
 13545  1241  00A1               	movwf	LedPointSelect@led
 13546                           
 13547                           ;LED_B1.c: 9: if (led == 1) {
 13548  1242  0821               	movf	LedPointSelect@led,w
 13549  1243  3A01               	xorlw	1
 13550  1244  1D03               	skipz
 13551  1245  2A4B               	goto	l973
 13552                           
 13553                           ;LED_B1.c: 10: LED = &VarLED1;
 13554  1246  306C               	movlw	_VarLED1& (0+255)
 13555  1247  00A0               	movwf	??_LedPointSelect
 13556  1248  0820               	movf	??_LedPointSelect,w
 13557  1249  0021               	movlb	1	; select bank1
 13558  124A  00CD               	movwf	_LED^(0+128)
 13559  124B                     l973:	
 13560                           
 13561                           ;LED_B1.c: 11: }
 13562                           ;LED_B1.c: 14: if (led == 2) {
 13563  124B  0020               	movlb	0	; select bank0
 13564  124C  0821               	movf	LedPointSelect@led,w
 13565  124D  3A02               	xorlw	2
 13566  124E  1D03               	skipz
 13567  124F  2A55               	goto	l974
 13568                           
 13569                           ;LED_B1.c: 15: LED = &VarLED2;
 13570  1250  30E1               	movlw	_VarLED2& (0+255)
 13571  1251  00A0               	movwf	??_LedPointSelect
 13572  1252  0820               	movf	??_LedPointSelect,w
 13573  1253  0021               	movlb	1	; select bank1
 13574  1254  00CD               	movwf	_LED^(0+128)
 13575  1255                     l974:	
 13576                           
 13577                           ;LED_B1.c: 16: }
 13578                           ;LED_B1.c: 24: if (led == 99) {
 13579  1255  0020               	movlb	0	; select bank0
 13580  1256  0821               	movf	LedPointSelect@led,w
 13581  1257  3A63               	xorlw	99
 13582  1258  1D03               	skipz
 13583  1259  0008               	return
 13584                           
 13585                           ;LED_B1.c: 25: LED = &VarErrLED;
 13586  125A  3068               	movlw	_VarErrLED& (0+255)
 13587  125B  00A0               	movwf	??_LedPointSelect
 13588  125C  0820               	movf	??_LedPointSelect,w
 13589  125D  0021               	movlb	1	; select bank1
 13590  125E  00CD               	movwf	_LED^(0+128)
 13591  125F  0008               	return
 13592  1260                     __end_of_LedPointSelect:	
 13593                           
 13594                           	psect	text81
 13595  1122                     __ptext81:	
 13596 ;; *************** function _setDimmerLights_Line *****************
 13597 ;; Defined at:
 13598 ;;		line 647 in file "../src/Dimmer_B1.c"
 13599 ;; Parameters:    Size  Location     Type
 13600 ;;  lights          1    wreg     unsigned char 
 13601 ;; Auto vars:     Size  Location     Type
 13602 ;;  lights          1    0[BANK0 ] unsigned char 
 13603 ;; Return value:  Size  Location     Type
 13604 ;;		None               void
 13605 ;; Registers used:
 13606 ;;		wreg
 13607 ;; Tracked objects:
 13608 ;;		On entry : 0/0
 13609 ;;		On exit  : 0/0
 13610 ;;		Unchanged: 0/0
 13611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13613 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13615 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13616 ;;Total ram usage:        1 bytes
 13617 ;; Hardware stack levels used:    1
 13618 ;; Hardware stack levels required when called:    5
 13619 ;; This function calls:
 13620 ;;		Nothing
 13621 ;; This function is called by:
 13622 ;;		_setDimmerLights
 13623 ;; This function uses a non-reentrant model
 13624 ;;
 13625                           
 13626                           
 13627                           ;psect for function _setDimmerLights_Line
 13628  1122                     _setDimmerLights_Line:	
 13629                           
 13630                           ;incstack = 0
 13631                           ; Regs used in _setDimmerLights_Line: [wreg]
 13632                           ;setDimmerLights_Line@lights stored from wreg
 13633  1122  0020               	movlb	0	; select bank0
 13634  1123  00A0               	movwf	setDimmerLights_Line@lights
 13635                           
 13636                           ;Dimmer_B1.c: 650: DimmerLights1.Line = 0;
 13637  1124  0022               	movlb	2	; select bank2
 13638  1125  1350               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 13639                           
 13640                           ;Dimmer_B1.c: 653: DimmerLights2.Line = 0;
 13641  1126  1361               	bcf	(_DimmerLights2^(0+256)+10),6	;volatile
 13642                           
 13643                           ;Dimmer_B1.c: 660: if (lights == 1) {
 13644  1127  0020               	movlb	0	; select bank0
 13645  1128  0820               	movf	setDimmerLights_Line@lights,w
 13646  1129  3A01               	xorlw	1
 13647  112A  1D03               	skipz
 13648  112B  292F               	goto	l8524
 13649                           
 13650                           ;Dimmer_B1.c: 661: DimmerLights1.Line = 1;
 13651  112C  0022               	movlb	2	; select bank2
 13652  112D  1750               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 13653                           
 13654                           ;Dimmer_B1.c: 662: }
 13655  112E  0008               	return
 13656  112F                     l8524:	
 13657                           
 13658                           ;Dimmer_B1.c: 665: else if (lights == 2) {
 13659  112F  0020               	movlb	0	; select bank0
 13660  1130  0820               	movf	setDimmerLights_Line@lights,w
 13661  1131  3A02               	xorlw	2
 13662  1132  1D03               	skipz
 13663  1133  0008               	return
 13664                           
 13665                           ;Dimmer_B1.c: 666: DimmerLights2.Line = 1;
 13666  1134  0022               	movlb	2	; select bank2
 13667  1135  1761               	bsf	(_DimmerLights2^(0+256)+10),6	;volatile
 13668  1136  0008               	return
 13669  1137                     __end_of_setDimmerLights_Line:	
 13670                           
 13671                           	psect	text82
 13672  10BC                     __ptext82:	
 13673 ;; *************** function _DimmerLights_Initialization *****************
 13674 ;; Defined at:
 13675 ;;		line 337 in file "../src/Dimmer_B1.c"
 13676 ;; Parameters:    Size  Location     Type
 13677 ;;		None
 13678 ;; Auto vars:     Size  Location     Type
 13679 ;;		None
 13680 ;; Return value:  Size  Location     Type
 13681 ;;		None               void
 13682 ;; Registers used:
 13683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13684 ;; Tracked objects:
 13685 ;;		On entry : 0/0
 13686 ;;		On exit  : 0/0
 13687 ;;		Unchanged: 0/0
 13688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13692 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13693 ;;Total ram usage:        1 bytes
 13694 ;; Hardware stack levels used:    1
 13695 ;; Hardware stack levels required when called:    7
 13696 ;; This function calls:
 13697 ;;		_setDimmerLights_Initialization
 13698 ;; This function is called by:
 13699 ;;		_main
 13700 ;; This function uses a non-reentrant model
 13701 ;;
 13702                           
 13703                           
 13704                           ;psect for function _DimmerLights_Initialization
 13705  10BC                     _DimmerLights_Initialization:	
 13706                           
 13707                           ;Dimmer_B1.c: 340: DimmerLights11 = &DimmerLights1;
 13708                           
 13709                           ;incstack = 0
 13710                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13711  10BC  3046               	movlw	_DimmerLights1& (0+255)
 13712  10BD  0020               	movlb	0	; select bank0
 13713  10BE  00A4               	movwf	??_DimmerLights_Initialization
 13714  10BF  0824               	movf	??_DimmerLights_Initialization,w
 13715  10C0  0021               	movlb	1	; select bank1
 13716  10C1  00CA               	movwf	_DimmerLights11^(0+128)
 13717                           
 13718                           ;Dimmer_B1.c: 341: setDimmerLights_Initialization(1);
 13719  10C2  3001               	movlw	1
 13720  10C3  3193  2353  3190   	fcall	_setDimmerLights_Initialization
 13721                           
 13722                           ;Dimmer_B1.c: 345: DimmerLights22 = &DimmerLights2;
 13723  10C6  3057               	movlw	_DimmerLights2& (0+255)
 13724  10C7  0020               	movlb	0	; select bank0
 13725  10C8  00A4               	movwf	??_DimmerLights_Initialization
 13726  10C9  0824               	movf	??_DimmerLights_Initialization,w
 13727  10CA  0021               	movlb	1	; select bank1
 13728  10CB  00CB               	movwf	_DimmerLights22^(0+128)
 13729                           
 13730                           ;Dimmer_B1.c: 346: setDimmerLights_Initialization(2);
 13731  10CC  3002               	movlw	2
 13732  10CD  3193  2353         	fcall	_setDimmerLights_Initialization
 13733  10CF  0008               	return
 13734  10D0                     __end_of_DimmerLights_Initialization:	
 13735                           
 13736                           	psect	text83
 13737  1353                     __ptext83:	
 13738 ;; *************** function _setDimmerLights_Initialization *****************
 13739 ;; Defined at:
 13740 ;;		line 361 in file "../src/Dimmer_B1.c"
 13741 ;; Parameters:    Size  Location     Type
 13742 ;;  lights          1    wreg     unsigned char 
 13743 ;; Auto vars:     Size  Location     Type
 13744 ;;  lights          1    3[BANK0 ] unsigned char 
 13745 ;; Return value:  Size  Location     Type
 13746 ;;		None               void
 13747 ;; Registers used:
 13748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13749 ;; Tracked objects:
 13750 ;;		On entry : 0/0
 13751 ;;		On exit  : 0/0
 13752 ;;		Unchanged: 0/0
 13753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13755 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13756 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13757 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13758 ;;Total ram usage:        2 bytes
 13759 ;; Hardware stack levels used:    1
 13760 ;; Hardware stack levels required when called:    6
 13761 ;; This function calls:
 13762 ;;		_DimmerLightsPointSelect
 13763 ;; This function is called by:
 13764 ;;		_DimmerLights_Initialization
 13765 ;; This function uses a non-reentrant model
 13766 ;;
 13767                           
 13768                           
 13769                           ;psect for function _setDimmerLights_Initialization
 13770  1353                     _setDimmerLights_Initialization:	
 13771                           
 13772                           ;incstack = 0
 13773                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13774                           ;setDimmerLights_Initialization@lights stored from wreg
 13775  1353  0020               	movlb	0	; select bank0
 13776  1354  00A3               	movwf	setDimmerLights_Initialization@lights
 13777                           
 13778                           ;Dimmer_B1.c: 363: DimmerLightsPointSelect(lights);
 13779  1355  0823               	movf	setDimmerLights_Initialization@lights,w
 13780  1356  319F  27ED         	fcall	_DimmerLightsPointSelect
 13781                           
 13782                           ;Dimmer_B1.c: 369: DimmerLights->MaxmumValue = ((char)(75*0.8));
 13783  1358  303C               	movlw	60
 13784  1359  0020               	movlb	0	; select bank0
 13785  135A  00A2               	movwf	??_setDimmerLights_Initialization
 13786  135B  0875               	movf	_DimmerLights,w
 13787  135C  3E06               	addlw	6
 13788  135D  0086               	movwf	6
 13789  135E  3001               	movlw	1	; select bank2/3
 13790  135F  0087               	movwf	7
 13791  1360  0822               	movf	??_setDimmerLights_Initialization,w
 13792  1361  0081               	movwf	1
 13793                           
 13794                           ;Dimmer_B1.c: 370: DimmerLights->MinimumValue = ((char)(15*0.8));
 13795  1362  300C               	movlw	12
 13796  1363  00A2               	movwf	??_setDimmerLights_Initialization
 13797  1364  0875               	movf	_DimmerLights,w
 13798  1365  3E09               	addlw	9
 13799  1366  0086               	movwf	6
 13800  1367  3001               	movlw	1	; select bank2/3
 13801  1368  0087               	movwf	7
 13802  1369  0822               	movf	??_setDimmerLights_Initialization,w
 13803  136A  0081               	movwf	1
 13804                           
 13805                           ;Dimmer_B1.c: 384: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 13806  136B  0875               	movf	_DimmerLights,w
 13807  136C  3E06               	addlw	6
 13808  136D  0086               	movwf	6
 13809  136E  3001               	movlw	1	; select bank2/3
 13810  136F  0087               	movwf	7
 13811  1370  0801               	movf	1,w
 13812  1371  00A2               	movwf	??_setDimmerLights_Initialization
 13813  1372  0875               	movf	_DimmerLights,w
 13814  1373  3E04               	addlw	4
 13815  1374  0086               	movwf	6
 13816  1375  3001               	movlw	1	; select bank2/3
 13817  1376  0087               	movwf	7
 13818  1377  0822               	movf	??_setDimmerLights_Initialization,w
 13819  1378  0081               	movwf	1
 13820  1379  0008               	return
 13821  137A                     __end_of_setDimmerLights_Initialization:	
 13822                           
 13823                           	psect	text84
 13824  1E71                     __ptext84:	
 13825 ;; *************** function _DelayOff_Main *****************
 13826 ;; Defined at:
 13827 ;;		line 41 in file "../src/DelayOff_B1.c"
 13828 ;; Parameters:    Size  Location     Type
 13829 ;;		None
 13830 ;; Auto vars:     Size  Location     Type
 13831 ;;		None
 13832 ;; Return value:  Size  Location     Type
 13833 ;;		None               void
 13834 ;; Registers used:
 13835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13836 ;; Tracked objects:
 13837 ;;		On entry : 0/0
 13838 ;;		On exit  : 0/0
 13839 ;;		Unchanged: 0/0
 13840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13845 ;;Total ram usage:        0 bytes
 13846 ;; Hardware stack levels used:    1
 13847 ;; Hardware stack levels required when called:   11
 13848 ;; This function calls:
 13849 ;;		_DlyOff_Main
 13850 ;; This function is called by:
 13851 ;;		_main
 13852 ;; This function uses a non-reentrant model
 13853 ;;
 13854                           
 13855                           
 13856                           ;psect for function _DelayOff_Main
 13857  1E71                     _DelayOff_Main:	
 13858                           
 13859                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13860                           
 13861                           ;incstack = 0
 13862                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13863  1E71  3001               	movlw	1
 13864  1E72  318B  236B  319E   	fcall	_DlyOff_Main
 13865                           
 13866                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 13867  1E75  3002               	movlw	2
 13868  1E76  318B  236B         	fcall	_DlyOff_Main
 13869  1E78  0008               	return
 13870  1E79                     __end_of_DelayOff_Main:	
 13871                           
 13872                           	psect	text85
 13873  0B6B                     __ptext85:	
 13874 ;; *************** function _DlyOff_Main *****************
 13875 ;; Defined at:
 13876 ;;		line 61 in file "../src/DelayOff_B1.c"
 13877 ;; Parameters:    Size  Location     Type
 13878 ;;  sw              1    wreg     unsigned char 
 13879 ;; Auto vars:     Size  Location     Type
 13880 ;;  sw              1   79[BANK0 ] unsigned char 
 13881 ;; Return value:  Size  Location     Type
 13882 ;;		None               void
 13883 ;; Registers used:
 13884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13885 ;; Tracked objects:
 13886 ;;		On entry : 0/0
 13887 ;;		On exit  : 0/0
 13888 ;;		Unchanged: 0/0
 13889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13891 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13892 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13893 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13894 ;;Total ram usage:        3 bytes
 13895 ;; Hardware stack levels used:    1
 13896 ;; Hardware stack levels required when called:   10
 13897 ;; This function calls:
 13898 ;;		_DelayOffPointSelect
 13899 ;;		_setBuz
 13900 ;;		_setDimmerLights_ErrorClose
 13901 ;; This function is called by:
 13902 ;;		_DelayOff_Main
 13903 ;; This function uses a non-reentrant model
 13904 ;;
 13905                           
 13906                           
 13907                           ;psect for function _DlyOff_Main
 13908  0B6B                     _DlyOff_Main:	
 13909                           
 13910                           ;incstack = 0
 13911                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13912                           ;DlyOff_Main@sw stored from wreg
 13913  0B6B  0020               	movlb	0	; select bank0
 13914  0B6C  00EF               	movwf	DlyOff_Main@sw
 13915                           
 13916                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13917  0B6D  086F               	movf	DlyOff_Main@sw,w
 13918  0B6E  3191  214C  318B   	fcall	_DelayOffPointSelect
 13919                           
 13920                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13921  0B71  0021               	movlb	1	; select bank1
 13922  0B72  0849               	movf	_DelayOff^(0+128),w
 13923  0B73  0086               	movwf	6
 13924  0B74  3001               	movlw	1	; select bank2/3
 13925  0B75  0087               	movwf	7
 13926  0B76  1C81               	btfss	1,1
 13927  0B77  0008               	return
 13928                           
 13929                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13930  0B78  0849               	movf	_DelayOff^(0+128),w
 13931  0B79  3E02               	addlw	2
 13932  0B7A  0086               	movwf	6
 13933  0B7B  3001               	movlw	1	; select bank2/3
 13934  0B7C  0087               	movwf	7
 13935  0B7D  3001               	movlw	1
 13936  0B7E  0781               	addwf	1,f
 13937  0B7F  3141               	addfsr 1,1
 13938  0B80  1803               	skipnc
 13939  0B81  0A81               	incf	1,f
 13940                           
 13941                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 13942  0B82  0849               	movf	_DelayOff^(0+128),w
 13943  0B83  3E02               	addlw	2
 13944  0B84  0086               	movwf	6
 13945  0B85  3001               	movlw	1	; select bank2/3
 13946  0B86  0087               	movwf	7
 13947  0B87  3F40               	moviw [0]fsr1
 13948  0B88  0020               	movlb	0	; select bank0
 13949  0B89  00ED               	movwf	??_DlyOff_Main
 13950  0B8A  3F41               	moviw [1]fsr1
 13951  0B8B  00EE               	movwf	??_DlyOff_Main+1
 13952  0B8C  3017               	movlw	23
 13953  0B8D  026E               	subwf	??_DlyOff_Main+1,w
 13954  0B8E  3070               	movlw	112
 13955  0B8F  1903               	skipnz
 13956  0B90  026D               	subwf	??_DlyOff_Main,w
 13957  0B91  1C03               	skipc
 13958  0B92  0008               	return
 13959                           
 13960                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13961  0B93  0021               	movlb	1	; select bank1
 13962  0B94  0849               	movf	_DelayOff^(0+128),w
 13963  0B95  3E02               	addlw	2
 13964  0B96  0086               	movwf	6
 13965  0B97  3001               	movlw	1	; select bank2/3
 13966  0B98  0087               	movwf	7
 13967  0B99  3000               	movlw	0
 13968  0B9A  3FC0               	movwi [0]fsr1
 13969  0B9B  3FC1               	movwi [1]fsr1
 13970                           
 13971                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13972  0B9C  3001               	movlw	1
 13973  0B9D  0020               	movlb	0	; select bank0
 13974  0B9E  00ED               	movwf	??_DlyOff_Main
 13975  0B9F  0021               	movlb	1	; select bank1
 13976  0BA0  0849               	movf	_DelayOff^(0+128),w
 13977  0BA1  3E04               	addlw	4
 13978  0BA2  0086               	movwf	6
 13979  0BA3  3001               	movlw	1	; select bank2/3
 13980  0BA4  0087               	movwf	7
 13981  0BA5  0020               	movlb	0	; select bank0
 13982  0BA6  086D               	movf	??_DlyOff_Main,w
 13983  0BA7  0781               	addwf	1,f
 13984                           
 13985                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13986  0BA8  0021               	movlb	1	; select bank1
 13987  0BA9  0849               	movf	_DelayOff^(0+128),w
 13988  0BAA  3E04               	addlw	4
 13989  0BAB  0086               	movwf	6
 13990  0BAC  3001               	movlw	1	; select bank2/3
 13991  0BAD  0087               	movwf	7
 13992  0BAE  0A49               	incf	_DelayOff^(0+128),w
 13993  0BAF  0084               	movwf	4
 13994  0BB0  3001               	movlw	1	; select bank2/3
 13995  0BB1  0085               	movwf	5
 13996  0BB2  0800               	movf	0,w
 13997  0BB3  0201               	subwf	1,w
 13998  0BB4  1C03               	skipc
 13999  0BB5  0008               	return
 14000                           
 14001                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 14002  0BB6  0849               	movf	_DelayOff^(0+128),w
 14003  0BB7  3E04               	addlw	4
 14004  0BB8  0086               	movwf	6
 14005  0BB9  3001               	movlw	1	; select bank2/3
 14006  0BBA  0087               	movwf	7
 14007  0BBB  0181               	clrf	1
 14008                           
 14009                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 14010  0BBC  0849               	movf	_DelayOff^(0+128),w
 14011  0BBD  0086               	movwf	6
 14012  0BBE  3001               	movlw	1	; select bank2/3
 14013  0BBF  0087               	movwf	7
 14014  0BC0  1081               	bcf	1,1
 14015                           
 14016                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 14017  0BC1  3064               	movlw	100
 14018  0BC2  0020               	movlb	0	; select bank0
 14019  0BC3  00A9               	movwf	setBuz@time
 14020  0BC4  3000               	movlw	0
 14021  0BC5  00AA               	movwf	setBuz@time+1
 14022  0BC6  3001               	movlw	1
 14023  0BC7  3189  21F8  318B   	fcall	_setBuz
 14024                           
 14025                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 14026  0BCA  0020               	movlb	0	; select bank0
 14027  0BCB  086F               	movf	DlyOff_Main@sw,w
 14028  0BCC  318A  22AA         	fcall	_setDimmerLights_ErrorClose
 14029  0BCE  0008               	return
 14030  0BCF                     __end_of_DlyOff_Main:	
 14031                           
 14032                           	psect	text86
 14033  0AAA                     __ptext86:	
 14034 ;; *************** function _setDimmerLights_ErrorClose *****************
 14035 ;; Defined at:
 14036 ;;		line 778 in file "../src/Dimmer_B1.c"
 14037 ;; Parameters:    Size  Location     Type
 14038 ;;  lights          1    wreg     unsigned char 
 14039 ;; Auto vars:     Size  Location     Type
 14040 ;;  lights          1    1[BANK1 ] unsigned char 
 14041 ;;  i               2    2[BANK1 ] int 
 14042 ;;  count           1    0[BANK1 ] unsigned char 
 14043 ;; Return value:  Size  Location     Type
 14044 ;;		None               void
 14045 ;; Registers used:
 14046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14047 ;; Tracked objects:
 14048 ;;		On entry : 0/0
 14049 ;;		On exit  : 0/0
 14050 ;;		Unchanged: 0/0
 14051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14053 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 14054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14055 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 14056 ;;Total ram usage:        5 bytes
 14057 ;; Hardware stack levels used:    1
 14058 ;; Hardware stack levels required when called:    9
 14059 ;; This function calls:
 14060 ;;		_DimmerLightsPointSelect
 14061 ;;		_getDimmerLights_Status
 14062 ;;		_setDimmerLights_SwOff
 14063 ;; This function is called by:
 14064 ;;		_DlyOff_Main
 14065 ;;		_setControl_Lights_Table
 14066 ;;		_setMain_Exception
 14067 ;; This function uses a non-reentrant model
 14068 ;;
 14069                           
 14070                           
 14071                           ;psect for function _setDimmerLights_ErrorClose
 14072  0AAA                     _setDimmerLights_ErrorClose:	
 14073                           
 14074                           ;incstack = 0
 14075                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 14076                           ;setDimmerLights_ErrorClose@lights stored from wreg
 14077  0AAA  0021               	movlb	1	; select bank1
 14078  0AAB  00E9               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 14079                           
 14080                           ;Dimmer_B1.c: 779: if (lights == 255) {
 14081  0AAC  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 14082  0AAD  3AFF               	xorlw	255
 14083  0AAE  1D03               	skipz
 14084  0AAF  2AEC               	goto	l8380
 14085                           
 14086                           ;Dimmer_B1.c: 784: char count = 2;
 14087  0AB0  3002               	movlw	2
 14088  0AB1  0020               	movlb	0	; select bank0
 14089  0AB2  00EC               	movwf	??_setDimmerLights_ErrorClose
 14090  0AB3  086C               	movf	??_setDimmerLights_ErrorClose,w
 14091  0AB4  0021               	movlb	1	; select bank1
 14092  0AB5  00E8               	movwf	setDimmerLights_ErrorClose@count^(0+128)
 14093                           
 14094                           ;Dimmer_B1.c: 789: for (int i = 0; i < count; i++) {
 14095  0AB6  01EA               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 14096  0AB7  01EB               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 14097  0AB8                     l8378:	
 14098  0AB8  086B               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 14099  0AB9  3A80               	xorlw	128
 14100  0ABA  0020               	movlb	0	; select bank0
 14101  0ABB  00EC               	movwf	??_setDimmerLights_ErrorClose
 14102  0ABC  3080               	movlw	128
 14103  0ABD  026C               	subwf	??_setDimmerLights_ErrorClose,w
 14104  0ABE  1D03               	skipz
 14105  0ABF  2AC3               	goto	u8555
 14106  0AC0  0021               	movlb	1	; select bank1
 14107  0AC1  0868               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 14108  0AC2  026A               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 14109  0AC3                     u8555:	
 14110  0AC3  1803               	btfsc	3,0
 14111  0AC4  0008               	return
 14112                           
 14113                           ;Dimmer_B1.c: 790: DimmerLightsPointSelect(i + 1);
 14114  0AC5  0021               	movlb	1	; select bank1
 14115  0AC6  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 14116  0AC7  3E01               	addlw	1
 14117  0AC8  319F  27ED  318A   	fcall	_DimmerLightsPointSelect
 14118                           
 14119                           ;Dimmer_B1.c: 791: if (getDimmerLights_Status(i + 1) == 1) {
 14120  0ACB  0021               	movlb	1	; select bank1
 14121  0ACC  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 14122  0ACD  3E01               	addlw	1
 14123  0ACE  319F  274F  318A   	fcall	_getDimmerLights_Status
 14124  0AD1  3A01               	xorlw	1
 14125  0AD2  1D03               	skipz
 14126  0AD3  2AE6               	goto	l8376
 14127                           
 14128                           ;Dimmer_B1.c: 792: DimmerLights->SwFlag = 1;
 14129  0AD4  0875               	movf	_DimmerLights,w
 14130  0AD5  3E0B               	addlw	11
 14131  0AD6  0086               	movwf	6
 14132  0AD7  3001               	movlw	1	; select bank2/3
 14133  0AD8  0087               	movwf	7
 14134  0AD9  1481               	bsf	1,1
 14135                           
 14136                           ;Dimmer_B1.c: 793: DimmerLights->Status = 0;
 14137  0ADA  0875               	movf	_DimmerLights,w
 14138  0ADB  3E02               	addlw	2
 14139  0ADC  0086               	movwf	6
 14140  0ADD  3001               	movlw	1	; select bank2/3
 14141  0ADE  0087               	movwf	7
 14142  0ADF  1081               	bcf	1,1
 14143                           
 14144                           ;Dimmer_B1.c: 794: setDimmerLights_SwOff(i + 1);
 14145  0AE0  0021               	movlb	1	; select bank1
 14146  0AE1  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 14147  0AE2  3E01               	addlw	1
 14148  0AE3  3189  21A0  318A   	fcall	_setDimmerLights_SwOff
 14149  0AE6                     l8376:	
 14150  0AE6  3001               	movlw	1
 14151  0AE7  0021               	movlb	1	; select bank1
 14152  0AE8  07EA               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 14153  0AE9  3000               	movlw	0
 14154  0AEA  3DEB               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 14155  0AEB  2AB8               	goto	l8378
 14156  0AEC                     l8380:	
 14157                           ;Dimmer_B1.c: 795: }
 14158                           ;Dimmer_B1.c: 796: }
 14159                           ;Dimmer_B1.c: 797: } else {
 14160                           
 14161                           
 14162                           ;Dimmer_B1.c: 798: DimmerLightsPointSelect(lights);
 14163  0AEC  0021               	movlb	1	; select bank1
 14164  0AED  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 14165  0AEE  319F  27ED  318A   	fcall	_DimmerLightsPointSelect
 14166                           
 14167                           ;Dimmer_B1.c: 799: if (getDimmerLights_Status(lights) == 1) {
 14168  0AF1  0021               	movlb	1	; select bank1
 14169  0AF2  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 14170  0AF3  319F  274F  318A   	fcall	_getDimmerLights_Status
 14171  0AF6  3A01               	xorlw	1
 14172  0AF7  1D03               	skipz
 14173  0AF8  0008               	return
 14174                           
 14175                           ;Dimmer_B1.c: 801: DimmerLights->SwFlag = 1;
 14176  0AF9  0875               	movf	_DimmerLights,w
 14177  0AFA  3E0B               	addlw	11
 14178  0AFB  0086               	movwf	6
 14179  0AFC  3001               	movlw	1	; select bank2/3
 14180  0AFD  0087               	movwf	7
 14181  0AFE  1481               	bsf	1,1
 14182                           
 14183                           ;Dimmer_B1.c: 802: DimmerLights->Status = 0;
 14184  0AFF  0875               	movf	_DimmerLights,w
 14185  0B00  3E02               	addlw	2
 14186  0B01  0086               	movwf	6
 14187  0B02  3001               	movlw	1	; select bank2/3
 14188  0B03  0087               	movwf	7
 14189  0B04  1081               	bcf	1,1
 14190                           
 14191                           ;Dimmer_B1.c: 803: setDimmerLights_SwOff(lights);
 14192  0B05  0021               	movlb	1	; select bank1
 14193  0B06  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 14194  0B07  3189  21A0         	fcall	_setDimmerLights_SwOff
 14195  0B09  0008               	return
 14196  0B0A                     __end_of_setDimmerLights_ErrorClose:	
 14197                           
 14198                           	psect	text87
 14199  09A0                     __ptext87:	
 14200 ;; *************** function _setDimmerLights_SwOff *****************
 14201 ;; Defined at:
 14202 ;;		line 424 in file "../src/Dimmer_B1.c"
 14203 ;; Parameters:    Size  Location     Type
 14204 ;;  sw              1    wreg     unsigned char 
 14205 ;; Auto vars:     Size  Location     Type
 14206 ;;  sw              1   75[BANK0 ] unsigned char 
 14207 ;;  command         1   74[BANK0 ] unsigned char 
 14208 ;; Return value:  Size  Location     Type
 14209 ;;		None               void
 14210 ;; Registers used:
 14211 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14212 ;; Tracked objects:
 14213 ;;		On entry : 0/0
 14214 ;;		On exit  : 0/0
 14215 ;;		Unchanged: 0/0
 14216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14218 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14220 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14221 ;;Total ram usage:        2 bytes
 14222 ;; Hardware stack levels used:    1
 14223 ;; Hardware stack levels required when called:    8
 14224 ;; This function calls:
 14225 ;;		_DimmerLightsPointSelect
 14226 ;;		_getDelayOff_GO
 14227 ;;		_setDelayOff_GO
 14228 ;; This function is called by:
 14229 ;;		_setDimmerLights_ErrorClose
 14230 ;;		_Exception_Main
 14231 ;;		_setRFSW_Control
 14232 ;;		_setSw_Main
 14233 ;; This function uses a non-reentrant model
 14234 ;;
 14235                           
 14236                           
 14237                           ;psect for function _setDimmerLights_SwOff
 14238  09A0                     _setDimmerLights_SwOff:	
 14239                           
 14240                           ;incstack = 0
 14241                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14242                           ;setDimmerLights_SwOff@sw stored from wreg
 14243  09A0  0020               	movlb	0	; select bank0
 14244  09A1  00EB               	movwf	setDimmerLights_SwOff@sw
 14245                           
 14246                           ;Dimmer_B1.c: 425: DimmerLightsPointSelect(sw);
 14247  09A2  086B               	movf	setDimmerLights_SwOff@sw,w
 14248  09A3  319F  27ED  3189   	fcall	_DimmerLightsPointSelect
 14249                           
 14250                           ;Dimmer_B1.c: 426: char command = DimmerLights->Status == 1 ? 1 : 0;
 14251  09A6  0875               	movf	_DimmerLights,w
 14252  09A7  3E02               	addlw	2
 14253  09A8  0086               	movwf	6
 14254  09A9  3001               	movlw	1	; select bank2/3
 14255  09AA  0087               	movwf	7
 14256  09AB  3000               	movlw	0
 14257  09AC  1881               	btfsc	1,1
 14258  09AD  3001               	movlw	1
 14259  09AE  0020               	movlb	0	; select bank0
 14260  09AF  00EA               	movwf	setDimmerLights_SwOff@command
 14261                           
 14262                           ;Dimmer_B1.c: 427: if (DimmerLights->SwFlag == 1) {
 14263  09B0  0875               	movf	_DimmerLights,w
 14264  09B1  3E0B               	addlw	11
 14265  09B2  0086               	movwf	6
 14266  09B3  3001               	movlw	1	; select bank2/3
 14267  09B4  0087               	movwf	7
 14268  09B5  1C81               	btfss	1,1
 14269  09B6  0008               	return
 14270                           
 14271                           ;Dimmer_B1.c: 428: DimmerLights->SwFlag = 0;
 14272  09B7  0875               	movf	_DimmerLights,w
 14273  09B8  3E0B               	addlw	11
 14274  09B9  0086               	movwf	6
 14275  09BA  3001               	movlw	1	; select bank2/3
 14276  09BB  0087               	movwf	7
 14277  09BC  1081               	bcf	1,1
 14278                           
 14279                           ;Dimmer_B1.c: 429: if (DimmerLights->Status == 1) {
 14280  09BD  0875               	movf	_DimmerLights,w
 14281  09BE  3E02               	addlw	2
 14282  09BF  0086               	movwf	6
 14283  09C0  3001               	movlw	1	; select bank2/3
 14284  09C1  0087               	movwf	7
 14285  09C2  1C81               	btfss	1,1
 14286  09C3  29DE               	goto	l8226
 14287                           
 14288                           ;Dimmer_B1.c: 431: if (DimmerLights->SwAdj == 1) {
 14289  09C4  0875               	movf	_DimmerLights,w
 14290  09C5  3E0B               	addlw	11
 14291  09C6  0086               	movwf	6
 14292  09C7  3001               	movlw	1	; select bank2/3
 14293  09C8  0087               	movwf	7
 14294  09C9  1D01               	btfss	1,2
 14295  09CA  0008               	return
 14296                           
 14297                           ;Dimmer_B1.c: 432: DimmerLights->SwAdj = 0;
 14298  09CB  0875               	movf	_DimmerLights,w
 14299  09CC  3E0B               	addlw	11
 14300  09CD  0086               	movwf	6
 14301  09CE  3001               	movlw	1	; select bank2/3
 14302  09CF  0087               	movwf	7
 14303  09D0  1101               	bcf	1,2
 14304                           
 14305                           ;Dimmer_B1.c: 434: DimmerLights->TriggerAdj = 1;
 14306  09D1  0875               	movf	_DimmerLights,w
 14307  09D2  3E0A               	addlw	10
 14308  09D3  0086               	movwf	6
 14309  09D4  3001               	movlw	1	; select bank2/3
 14310  09D5  0087               	movwf	7
 14311  09D6  1581               	bsf	1,3
 14312                           
 14313                           ;Dimmer_B1.c: 435: DimmerLights->SwitchAdj = 0;
 14314  09D7  0875               	movf	_DimmerLights,w
 14315  09D8  3E0A               	addlw	10
 14316  09D9  0086               	movwf	6
 14317  09DA  3001               	movlw	1	; select bank2/3
 14318  09DB  0087               	movwf	7
 14319  09DC  1101               	bcf	1,2
 14320                           
 14321                           ;Dimmer_B1.c: 436: }
 14322                           ;Dimmer_B1.c: 437: } else {
 14323  09DD  0008               	return
 14324  09DE                     l8226:	
 14325                           
 14326                           ;Dimmer_B1.c: 438: DimmerLights->Trigger = 1;
 14327  09DE  0875               	movf	_DimmerLights,w
 14328  09DF  3E0A               	addlw	10
 14329  09E0  0086               	movwf	6
 14330  09E1  3001               	movlw	1	; select bank2/3
 14331  09E2  0087               	movwf	7
 14332  09E3  1481               	bsf	1,1
 14333                           
 14334                           ;Dimmer_B1.c: 439: DimmerLights->Switch = 0;
 14335  09E4  0875               	movf	_DimmerLights,w
 14336  09E5  3E0A               	addlw	10
 14337  09E6  0086               	movwf	6
 14338  09E7  3001               	movlw	1	; select bank2/3
 14339  09E8  0087               	movwf	7
 14340  09E9  1001               	bcf	1,0
 14341                           
 14342                           ;Dimmer_B1.c: 442: if (getDelayOff_GO(sw) == 1) {
 14343  09EA  086B               	movf	setDimmerLights_SwOff@sw,w
 14344  09EB  319F  2760  3189   	fcall	_getDelayOff_GO
 14345  09EE  3A01               	xorlw	1
 14346  09EF  1D03               	skipz
 14347  09F0  0008               	return
 14348                           
 14349                           ;Dimmer_B1.c: 444: setDelayOff_GO(sw, 0, 0);
 14350  09F1  0020               	movlb	0	; select bank0
 14351  09F2  01E6               	clrf	setDelayOff_GO@command
 14352  09F3  01E7               	clrf	setDelayOff_GO@value
 14353  09F4  086B               	movf	setDimmerLights_SwOff@sw,w
 14354  09F5  3189  2148         	fcall	_setDelayOff_GO
 14355  09F7  0008               	return
 14356  09F8                     __end_of_setDimmerLights_SwOff:	
 14357                           
 14358                           	psect	text88
 14359  0948                     __ptext88:	
 14360 ;; *************** function _setDelayOff_GO *****************
 14361 ;; Defined at:
 14362 ;;		line 83 in file "../src/DelayOff_B1.c"
 14363 ;; Parameters:    Size  Location     Type
 14364 ;;  sw              1    wreg     unsigned char 
 14365 ;;  command         1   70[BANK0 ] unsigned char 
 14366 ;;  value           1   71[BANK0 ] unsigned char 
 14367 ;; Auto vars:     Size  Location     Type
 14368 ;;  sw              1   73[BANK0 ] unsigned char 
 14369 ;; Return value:  Size  Location     Type
 14370 ;;		None               void
 14371 ;; Registers used:
 14372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14373 ;; Tracked objects:
 14374 ;;		On entry : 0/0
 14375 ;;		On exit  : 0/0
 14376 ;;		Unchanged: 0/0
 14377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14378 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14381 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14382 ;;Total ram usage:        4 bytes
 14383 ;; Hardware stack levels used:    1
 14384 ;; Hardware stack levels required when called:    7
 14385 ;; This function calls:
 14386 ;;		_DelayOffPointSelect
 14387 ;;		_DelayTimejudge
 14388 ;;		_setProductData
 14389 ;; This function is called by:
 14390 ;;		_setDimmerLights_SwOff
 14391 ;;		_setRFSW_Control
 14392 ;; This function uses a non-reentrant model
 14393 ;;
 14394                           
 14395                           
 14396                           ;psect for function _setDelayOff_GO
 14397  0948                     _setDelayOff_GO:	
 14398                           
 14399                           ;incstack = 0
 14400                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14401                           ;setDelayOff_GO@sw stored from wreg
 14402  0948  0020               	movlb	0	; select bank0
 14403  0949  00E9               	movwf	setDelayOff_GO@sw
 14404                           
 14405                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 14406  094A  0869               	movf	setDelayOff_GO@sw,w
 14407  094B  3191  214C  3189   	fcall	_DelayOffPointSelect
 14408                           
 14409                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 14410  094E  0020               	movlb	0	; select bank0
 14411  094F  0866               	movf	setDelayOff_GO@command,w
 14412  0950  3A01               	xorlw	1
 14413  0951  3000               	movlw	0
 14414  0952  1903               	skipnz
 14415  0953  3001               	movlw	1
 14416  0954  00E8               	movwf	??_setDelayOff_GO
 14417  0955  0021               	movlb	1	; select bank1
 14418  0956  0849               	movf	_DelayOff^(0+128),w
 14419  0957  0086               	movwf	6
 14420  0958  3001               	movlw	1	; select bank2/3
 14421  0959  0087               	movwf	7
 14422  095A  0020               	movlb	0	; select bank0
 14423  095B  0DE8               	rlf	??_setDelayOff_GO,f
 14424  095C  0801               	movf	1,w
 14425  095D  0668               	xorwf	??_setDelayOff_GO,w
 14426  095E  39FD               	andlw	-3
 14427  095F  0668               	xorwf	??_setDelayOff_GO,w
 14428  0960  0081               	movwf	1
 14429                           
 14430                           ;DelayOff_B1.c: 89: if (command == 1) {
 14431  0961  0866               	movf	setDelayOff_GO@command,w
 14432  0962  3A01               	xorlw	1
 14433  0963  1D03               	skipz
 14434  0964  298A               	goto	l8178
 14435                           
 14436                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 14437  0965  0867               	movf	setDelayOff_GO@value,w
 14438  0966  3193  23CD  3189   	fcall	_DelayTimejudge
 14439  0969  0020               	movlb	0	; select bank0
 14440  096A  00E8               	movwf	??_setDelayOff_GO
 14441  096B  0021               	movlb	1	; select bank1
 14442  096C  0A49               	incf	_DelayOff^(0+128),w
 14443  096D  0086               	movwf	6
 14444  096E  3001               	movlw	1	; select bank2/3
 14445  096F  0087               	movwf	7
 14446  0970  0020               	movlb	0	; select bank0
 14447  0971  0868               	movf	??_setDelayOff_GO,w
 14448  0972  0081               	movwf	1
 14449                           
 14450                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 14451  0973  300F               	movlw	15
 14452  0974  0567               	andwf	setDelayOff_GO@value,w
 14453  0975  00E8               	movwf	??_setDelayOff_GO
 14454  0976  0868               	movf	??_setDelayOff_GO,w
 14455  0977  3A05               	xorlw	5
 14456  0978  1903               	skipnz
 14457  0979  297E               	goto	l8172
 14458  097A  0867               	movf	setDelayOff_GO@value,w
 14459  097B  390F               	andlw	15
 14460  097C  1D03               	btfss	3,2
 14461  097D  2984               	goto	l8176
 14462  097E                     l8172:	
 14463  097E  3026               	movlw	38
 14464  097F  0267               	subwf	setDelayOff_GO@value,w
 14465  0980  1803               	skipnc
 14466  0981  2984               	goto	l8176
 14467                           
 14468                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 14469  0982  0867               	movf	setDelayOff_GO@value,w
 14470  0983  2986               	goto	L4
 14471  0984                     l8176:	
 14472                           ;DelayOff_B1.c: 93: } else {
 14473                           
 14474                           
 14475                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 14476  0984  3005               	movlw	5
 14477  0985  0020               	movlb	0	; select bank0
 14478  0986                     L4:	
 14479  0986  00E8               	movwf	??_setDelayOff_GO
 14480  0987  0868               	movf	??_setDelayOff_GO,w
 14481  0988  00E2               	movwf	setProductData@value
 14482  0989  298C               	goto	L3
 14483  098A                     l8178:	
 14484                           ;DelayOff_B1.c: 95: }
 14485                           ;DelayOff_B1.c: 96: } else {
 14486                           
 14487                           
 14488                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 14489  098A  0020               	movlb	0	; select bank0
 14490  098B  01E2               	clrf	setProductData@value
 14491  098C                     L3:	
 14492  098C  0869               	movf	setDelayOff_GO@sw,w
 14493  098D  3E1A               	addlw	26
 14494  098E  319F  2714         	fcall	_setProductData
 14495                           
 14496                           ;DelayOff_B1.c: 98: }
 14497                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 14498  0990  0021               	movlb	1	; select bank1
 14499  0991  0849               	movf	_DelayOff^(0+128),w
 14500  0992  3E02               	addlw	2
 14501  0993  0086               	movwf	6
 14502  0994  3001               	movlw	1	; select bank2/3
 14503  0995  0087               	movwf	7
 14504  0996  3000               	movlw	0
 14505  0997  3FC0               	movwi [0]fsr1
 14506  0998  3FC1               	movwi [1]fsr1
 14507                           
 14508                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 14509  0999  0849               	movf	_DelayOff^(0+128),w
 14510  099A  3E04               	addlw	4
 14511  099B  0086               	movwf	6
 14512  099C  3001               	movlw	1	; select bank2/3
 14513  099D  0087               	movwf	7
 14514  099E  0181               	clrf	1
 14515  099F  0008               	return
 14516  09A0                     __end_of_setDelayOff_GO:	
 14517                           
 14518                           	psect	text89
 14519  1F14                     __ptext89:	
 14520 ;; *************** function _setProductData *****************
 14521 ;; Defined at:
 14522 ;;		line 573 in file "../src/Main_B1.c"
 14523 ;; Parameters:    Size  Location     Type
 14524 ;;  address         1    wreg     unsigned char 
 14525 ;;  value           1   66[BANK0 ] unsigned char 
 14526 ;; Auto vars:     Size  Location     Type
 14527 ;;  address         1   69[BANK0 ] unsigned char 
 14528 ;; Return value:  Size  Location     Type
 14529 ;;		None               void
 14530 ;; Registers used:
 14531 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14532 ;; Tracked objects:
 14533 ;;		On entry : 0/0
 14534 ;;		On exit  : 0/0
 14535 ;;		Unchanged: 0/0
 14536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14537 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14538 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14539 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14540 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14541 ;;Total ram usage:        4 bytes
 14542 ;; Hardware stack levels used:    1
 14543 ;; Hardware stack levels required when called:    5
 14544 ;; This function calls:
 14545 ;;		Nothing
 14546 ;; This function is called by:
 14547 ;;		_setDelayOff_GO
 14548 ;;		_setDimmerLights
 14549 ;;		_setDimmerLights_Adj
 14550 ;;		_setTemp_Main
 14551 ;;		_setLog_Code
 14552 ;;		_setControl_Lights_Table
 14553 ;;		_setRFSW_AdjControl
 14554 ;;		_setRF_DimmerValue
 14555 ;;		_setRF_DimmerLights
 14556 ;; This function uses a non-reentrant model
 14557 ;;
 14558                           
 14559                           
 14560                           ;psect for function _setProductData
 14561  1F14                     _setProductData:	
 14562                           
 14563                           ;incstack = 0
 14564                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 14565                           ;setProductData@address stored from wreg
 14566  1F14  0020               	movlb	0	; select bank0
 14567  1F15  00E5               	movwf	setProductData@address
 14568                           
 14569                           ;Main_B1.c: 574: product->Data[address] = value;
 14570  1F16  0862               	movf	setProductData@value,w
 14571  1F17  00E3               	movwf	??_setProductData
 14572  1F18  0865               	movf	setProductData@address,w
 14573  1F19  0779               	addwf	_product,w
 14574  1F1A  00E4               	movwf	??_setProductData+1
 14575  1F1B  0864               	movf	??_setProductData+1,w
 14576  1F1C  0086               	movwf	6
 14577  1F1D  3002               	movlw	2	; select bank4/5
 14578  1F1E  0087               	movwf	7
 14579  1F1F  0863               	movf	??_setProductData,w
 14580  1F20  0081               	movwf	1
 14581  1F21  0008               	return
 14582  1F22                     __end_of_setProductData:	
 14583                           
 14584                           	psect	text90
 14585  13CD                     __ptext90:	
 14586 ;; *************** function _DelayTimejudge *****************
 14587 ;; Defined at:
 14588 ;;		line 112 in file "../src/DelayOff_B1.c"
 14589 ;; Parameters:    Size  Location     Type
 14590 ;;  value           1    wreg     unsigned char 
 14591 ;; Auto vars:     Size  Location     Type
 14592 ;;  value           1    9[BANK0 ] unsigned char 
 14593 ;;  k               1    8[BANK0 ] unsigned char 
 14594 ;;  j               1    7[BANK0 ] unsigned char 
 14595 ;;  i               1    6[BANK0 ] unsigned char 
 14596 ;; Return value:  Size  Location     Type
 14597 ;;                  1    wreg      unsigned char 
 14598 ;; Registers used:
 14599 ;;		wreg, status,2, status,0, pclath, cstack
 14600 ;; Tracked objects:
 14601 ;;		On entry : 0/0
 14602 ;;		On exit  : 0/0
 14603 ;;		Unchanged: 0/0
 14604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14607 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14608 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14609 ;;Total ram usage:        6 bytes
 14610 ;; Hardware stack levels used:    1
 14611 ;; Hardware stack levels required when called:    6
 14612 ;; This function calls:
 14613 ;;		___bmul
 14614 ;; This function is called by:
 14615 ;;		_setDelayOff_GO
 14616 ;; This function uses a non-reentrant model
 14617 ;;
 14618                           
 14619                           
 14620                           ;psect for function _DelayTimejudge
 14621  13CD                     _DelayTimejudge:	
 14622                           
 14623                           ;incstack = 0
 14624                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 14625                           ;DelayTimejudge@value stored from wreg
 14626  13CD  0020               	movlb	0	; select bank0
 14627  13CE  00A9               	movwf	DelayTimejudge@value
 14628                           
 14629                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 14630  13CF  3005               	movlw	5
 14631  13D0  00A4               	movwf	??_DelayTimejudge
 14632  13D1  0824               	movf	??_DelayTimejudge,w
 14633  13D2  00A6               	movwf	DelayTimejudge@i
 14634  13D3  01A7               	clrf	DelayTimejudge@j
 14635  13D4  01A8               	clrf	DelayTimejudge@k
 14636                           
 14637                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 14638  13D5  3031               	movlw	49
 14639  13D6  0229               	subwf	DelayTimejudge@value,w
 14640  13D7  1803               	skipnc
 14641  13D8  2BF5               	goto	l8068
 14642                           
 14643                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 14644  13D9  0829               	movf	DelayTimejudge@value,w
 14645  13DA  390F               	andlw	15
 14646  13DB  00A4               	movwf	??_DelayTimejudge
 14647  13DC  0824               	movf	??_DelayTimejudge,w
 14648  13DD  00A7               	movwf	DelayTimejudge@j
 14649                           
 14650                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 14651  13DE  0829               	movf	DelayTimejudge@value,w
 14652  13DF  00A4               	movwf	??_DelayTimejudge
 14653  13E0  3004               	movlw	4
 14654  13E1                     u8145:	
 14655  13E1  36A4               	lsrf	??_DelayTimejudge,f
 14656  13E2  0B89               	decfsz	9,f
 14657  13E3  2BE1               	goto	u8145
 14658  13E4  0824               	movf	??_DelayTimejudge,w
 14659  13E5  390F               	andlw	15
 14660  13E6  00A5               	movwf	??_DelayTimejudge+1
 14661  13E7  0825               	movf	??_DelayTimejudge+1,w
 14662  13E8  00A8               	movwf	DelayTimejudge@k
 14663                           
 14664                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 14665  13E9  300A               	movlw	10
 14666  13EA  00A4               	movwf	??_DelayTimejudge
 14667  13EB  0824               	movf	??_DelayTimejudge,w
 14668  13EC  00A0               	movwf	___bmul@multiplicand
 14669  13ED  0828               	movf	DelayTimejudge@k,w
 14670  13EE  319F  27A5         	fcall	___bmul
 14671  13F0  0020               	movlb	0	; select bank0
 14672  13F1  0727               	addwf	DelayTimejudge@j,w
 14673  13F2  00A5               	movwf	??_DelayTimejudge+1
 14674  13F3  0825               	movf	??_DelayTimejudge+1,w
 14675  13F4  00A6               	movwf	DelayTimejudge@i
 14676  13F5                     l8068:	
 14677                           
 14678                           ;DelayOff_B1.c: 118: }
 14679                           ;DelayOff_B1.c: 139: return i;
 14680  13F5  0826               	movf	DelayTimejudge@i,w
 14681  13F6  0008               	return
 14682  13F7                     __end_of_DelayTimejudge:	
 14683                           
 14684                           	psect	text91
 14685  1FA5                     __ptext91:	
 14686 ;; *************** function ___bmul *****************
 14687 ;; Defined at:
 14688 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14689 ;; Parameters:    Size  Location     Type
 14690 ;;  multiplier      1    wreg     unsigned char 
 14691 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14692 ;; Auto vars:     Size  Location     Type
 14693 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14694 ;;  product         1    2[BANK0 ] unsigned char 
 14695 ;; Return value:  Size  Location     Type
 14696 ;;                  1    wreg      unsigned char 
 14697 ;; Registers used:
 14698 ;;		wreg, status,2, status,0
 14699 ;; Tracked objects:
 14700 ;;		On entry : 0/0
 14701 ;;		On exit  : 0/0
 14702 ;;		Unchanged: 0/0
 14703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14704 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14707 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14708 ;;Total ram usage:        4 bytes
 14709 ;; Hardware stack levels used:    1
 14710 ;; Hardware stack levels required when called:    5
 14711 ;; This function calls:
 14712 ;;		Nothing
 14713 ;; This function is called by:
 14714 ;;		_DelayTimejudge
 14715 ;; This function uses a non-reentrant model
 14716 ;;
 14717                           
 14718                           
 14719                           ;psect for function ___bmul
 14720  1FA5                     ___bmul:	
 14721                           
 14722                           ;incstack = 0
 14723                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14724                           ;___bmul@multiplier stored from wreg
 14725  1FA5  0020               	movlb	0	; select bank0
 14726  1FA6  00A3               	movwf	___bmul@multiplier
 14727  1FA7  01A2               	clrf	___bmul@product
 14728  1FA8                     l7806:	
 14729  1FA8  1C23               	btfss	___bmul@multiplier,0
 14730  1FA9  2FAE               	goto	l7810
 14731  1FAA  0820               	movf	___bmul@multiplicand,w
 14732  1FAB  00A1               	movwf	??___bmul
 14733  1FAC  0821               	movf	??___bmul,w
 14734  1FAD  07A2               	addwf	___bmul@product,f
 14735  1FAE                     l7810:	
 14736  1FAE  1003               	clrc
 14737  1FAF  0DA0               	rlf	___bmul@multiplicand,f
 14738  1FB0  1003               	clrc
 14739  1FB1  0CA3               	rrf	___bmul@multiplier,f
 14740  1FB2  08A3               	movf	___bmul@multiplier,f
 14741  1FB3  1D03               	skipz
 14742  1FB4  2FA8               	goto	l7806
 14743  1FB5  0822               	movf	___bmul@product,w
 14744  1FB6  0008               	return
 14745  1FB7                     __end_of___bmul:	
 14746                           
 14747                           	psect	text92
 14748  1F60                     __ptext92:	
 14749 ;; *************** function _getDelayOff_GO *****************
 14750 ;; Defined at:
 14751 ;;		line 105 in file "../src/DelayOff_B1.c"
 14752 ;; Parameters:    Size  Location     Type
 14753 ;;  sw              1    wreg     unsigned char 
 14754 ;; Auto vars:     Size  Location     Type
 14755 ;;  sw              1    2[BANK0 ] unsigned char 
 14756 ;;  go              1    3[BANK0 ] unsigned char 
 14757 ;; Return value:  Size  Location     Type
 14758 ;;                  1    wreg      unsigned char 
 14759 ;; Registers used:
 14760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14761 ;; Tracked objects:
 14762 ;;		On entry : 0/0
 14763 ;;		On exit  : 0/0
 14764 ;;		Unchanged: 0/0
 14765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14769 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14770 ;;Total ram usage:        2 bytes
 14771 ;; Hardware stack levels used:    1
 14772 ;; Hardware stack levels required when called:    6
 14773 ;; This function calls:
 14774 ;;		_DelayOffPointSelect
 14775 ;; This function is called by:
 14776 ;;		_setDimmerLights_SwOff
 14777 ;;		_setRFSW_Control
 14778 ;; This function uses a non-reentrant model
 14779 ;;
 14780                           
 14781                           
 14782                           ;psect for function _getDelayOff_GO
 14783  1F60                     _getDelayOff_GO:	
 14784                           
 14785                           ;incstack = 0
 14786                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14787                           ;getDelayOff_GO@sw stored from wreg
 14788  1F60  0020               	movlb	0	; select bank0
 14789  1F61  00A2               	movwf	getDelayOff_GO@sw
 14790                           
 14791                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 14792  1F62  0822               	movf	getDelayOff_GO@sw,w
 14793  1F63  3191  214C         	fcall	_DelayOffPointSelect
 14794                           
 14795                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 14796  1F65  0021               	movlb	1	; select bank1
 14797  1F66  0849               	movf	_DelayOff^(0+128),w
 14798  1F67  0086               	movwf	6
 14799  1F68  3001               	movlw	1	; select bank2/3
 14800  1F69  0087               	movwf	7
 14801  1F6A  3000               	movlw	0
 14802  1F6B  1881               	btfsc	1,1
 14803  1F6C  3001               	movlw	1
 14804  1F6D  0020               	movlb	0	; select bank0
 14805  1F6E  00A3               	movwf	getDelayOff_GO@go
 14806                           
 14807                           ;DelayOff_B1.c: 108: return go;
 14808  1F6F  0823               	movf	getDelayOff_GO@go,w
 14809  1F70  0008               	return
 14810  1F71                     __end_of_getDelayOff_GO:	
 14811                           
 14812                           	psect	text93
 14813  1F4F                     __ptext93:	
 14814 ;; *************** function _getDimmerLights_Status *****************
 14815 ;; Defined at:
 14816 ;;		line 700 in file "../src/Dimmer_B1.c"
 14817 ;; Parameters:    Size  Location     Type
 14818 ;;  lights          1    wreg     unsigned char 
 14819 ;; Auto vars:     Size  Location     Type
 14820 ;;  lights          1    2[BANK0 ] unsigned char 
 14821 ;;  status          1    3[BANK0 ] unsigned char 
 14822 ;; Return value:  Size  Location     Type
 14823 ;;                  1    wreg      unsigned char 
 14824 ;; Registers used:
 14825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14826 ;; Tracked objects:
 14827 ;;		On entry : 0/0
 14828 ;;		On exit  : 0/0
 14829 ;;		Unchanged: 0/0
 14830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14832 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14834 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14835 ;;Total ram usage:        2 bytes
 14836 ;; Hardware stack levels used:    1
 14837 ;; Hardware stack levels required when called:    6
 14838 ;; This function calls:
 14839 ;;		_DimmerLightsPointSelect
 14840 ;; This function is called by:
 14841 ;;		_setDimmerLights_ErrorClose
 14842 ;;		_getMain_LightsStatus
 14843 ;;		_Exception_Main
 14844 ;;		_setRFSW_Control
 14845 ;;		_setRFSW_AdjControl
 14846 ;; This function uses a non-reentrant model
 14847 ;;
 14848                           
 14849                           
 14850                           ;psect for function _getDimmerLights_Status
 14851  1F4F                     _getDimmerLights_Status:	
 14852                           
 14853                           ;incstack = 0
 14854                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14855                           ;getDimmerLights_Status@lights stored from wreg
 14856  1F4F  0020               	movlb	0	; select bank0
 14857  1F50  00A2               	movwf	getDimmerLights_Status@lights
 14858                           
 14859                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
 14860  1F51  0822               	movf	getDimmerLights_Status@lights,w
 14861  1F52  319F  27ED         	fcall	_DimmerLightsPointSelect
 14862                           
 14863                           ;Dimmer_B1.c: 702: char status = DimmerLights->Status == 1 ? 1 : 0;
 14864  1F54  0875               	movf	_DimmerLights,w
 14865  1F55  3E02               	addlw	2
 14866  1F56  0086               	movwf	6
 14867  1F57  3001               	movlw	1	; select bank2/3
 14868  1F58  0087               	movwf	7
 14869  1F59  3000               	movlw	0
 14870  1F5A  1881               	btfsc	1,1
 14871  1F5B  3001               	movlw	1
 14872  1F5C  0020               	movlb	0	; select bank0
 14873  1F5D  00A3               	movwf	getDimmerLights_Status@status
 14874                           
 14875                           ;Dimmer_B1.c: 704: return status;
 14876  1F5E  0823               	movf	getDimmerLights_Status@status,w
 14877  1F5F  0008               	return
 14878  1F60                     __end_of_getDimmerLights_Status:	
 14879                           
 14880                           	psect	text94
 14881  1FED                     __ptext94:	
 14882 ;; *************** function _DimmerLightsPointSelect *****************
 14883 ;; Defined at:
 14884 ;;		line 317 in file "../src/Dimmer_B1.c"
 14885 ;; Parameters:    Size  Location     Type
 14886 ;;  lights          1    wreg     unsigned char 
 14887 ;; Auto vars:     Size  Location     Type
 14888 ;;  lights          1    1[BANK0 ] unsigned char 
 14889 ;; Return value:  Size  Location     Type
 14890 ;;		None               void
 14891 ;; Registers used:
 14892 ;;		wreg
 14893 ;; Tracked objects:
 14894 ;;		On entry : 0/0
 14895 ;;		On exit  : 0/0
 14896 ;;		Unchanged: 0/0
 14897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14900 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14901 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14902 ;;Total ram usage:        2 bytes
 14903 ;; Hardware stack levels used:    1
 14904 ;; Hardware stack levels required when called:    5
 14905 ;; This function calls:
 14906 ;;		Nothing
 14907 ;; This function is called by:
 14908 ;;		_setDimmerLights_Initialization
 14909 ;;		_setDimmerLights_SwOn
 14910 ;;		_setDimmerLights_SwOff
 14911 ;;		_setDimmerLights_AdjOn
 14912 ;;		_setDimmerLights_Main
 14913 ;;		_getDimmerLights_Status
 14914 ;;		_setDimmerLights_ErrorClose
 14915 ;;		_setDimmerLights_AdjRF
 14916 ;;		_Exception_Main
 14917 ;;		_setDimmerLights_Status
 14918 ;;		_setDimmerLights_GO
 14919 ;;		_setDimmerLights_MaxmumValue
 14920 ;;		_setDimmerLights_Trigger
 14921 ;;		_setDimmerLights_TriggerAdj
 14922 ;; This function uses a non-reentrant model
 14923 ;;
 14924                           
 14925                           
 14926                           ;psect for function _DimmerLightsPointSelect
 14927  1FED                     _DimmerLightsPointSelect:	
 14928                           
 14929                           ;incstack = 0
 14930                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 14931                           ;DimmerLightsPointSelect@lights stored from wreg
 14932  1FED  0020               	movlb	0	; select bank0
 14933  1FEE  00A1               	movwf	DimmerLightsPointSelect@lights
 14934                           
 14935                           ;Dimmer_B1.c: 319: if (lights == 1) {
 14936  1FEF  0821               	movf	DimmerLightsPointSelect@lights,w
 14937  1FF0  3A01               	xorlw	1
 14938  1FF1  1D03               	skipz
 14939  1FF2  2FF7               	goto	l751
 14940                           
 14941                           ;Dimmer_B1.c: 320: DimmerLights = &DimmerLights1;
 14942  1FF3  3046               	movlw	_DimmerLights1& (0+255)
 14943  1FF4  00A0               	movwf	??_DimmerLightsPointSelect
 14944  1FF5  0820               	movf	??_DimmerLightsPointSelect,w
 14945  1FF6  00F5               	movwf	_DimmerLights
 14946  1FF7                     l751:	
 14947                           
 14948                           ;Dimmer_B1.c: 321: }
 14949                           ;Dimmer_B1.c: 324: if (lights == 2) {
 14950  1FF7  0821               	movf	DimmerLightsPointSelect@lights,w
 14951  1FF8  3A02               	xorlw	2
 14952  1FF9  1D03               	skipz
 14953  1FFA  0008               	return
 14954                           
 14955                           ;Dimmer_B1.c: 325: DimmerLights = &DimmerLights2;
 14956  1FFB  3057               	movlw	_DimmerLights2& (0+255)
 14957  1FFC  00A0               	movwf	??_DimmerLightsPointSelect
 14958  1FFD  0820               	movf	??_DimmerLightsPointSelect,w
 14959  1FFE  00F5               	movwf	_DimmerLights
 14960  1FFF  0008               	return
 14961  2000                     __end_of_DimmerLightsPointSelect:	
 14962                           
 14963                           	psect	text95
 14964  09F8                     __ptext95:	
 14965 ;; *************** function _setBuz *****************
 14966 ;; Defined at:
 14967 ;;		line 22 in file "../src/Buzzer_B1.c"
 14968 ;; Parameters:    Size  Location     Type
 14969 ;;  count           1    wreg     unsigned char 
 14970 ;;  time            2    9[BANK0 ] int 
 14971 ;; Auto vars:     Size  Location     Type
 14972 ;;  count           1   12[BANK0 ] unsigned char 
 14973 ;; Return value:  Size  Location     Type
 14974 ;;		None               void
 14975 ;; Registers used:
 14976 ;;		wreg, status,2, status,0, pclath, cstack
 14977 ;; Tracked objects:
 14978 ;;		On entry : 0/0
 14979 ;;		On exit  : 0/0
 14980 ;;		Unchanged: 0/0
 14981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14982 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14983 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14984 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14985 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;Total ram usage:        4 bytes
 14987 ;; Hardware stack levels used:    1
 14988 ;; Hardware stack levels required when called:    6
 14989 ;; This function calls:
 14990 ;;		___awdiv
 14991 ;; This function is called by:
 14992 ;;		_DlyOff_Main
 14993 ;;		_setDimmerLights_SwOn
 14994 ;;		_setDimmerLights_Adj
 14995 ;;		_my_MainTimer
 14996 ;;		_Exception_Main
 14997 ;;		_setTemp_Main
 14998 ;;		_setLog_Code
 14999 ;;		_setControl_Lights_Table
 15000 ;;		_setRFSW_Control
 15001 ;;		_setSw_Main
 15002 ;;		_setMain_Exception
 15003 ;; This function uses a non-reentrant model
 15004 ;;
 15005                           
 15006                           
 15007                           ;psect for function _setBuz
 15008  09F8                     _setBuz:	
 15009                           
 15010                           ;incstack = 0
 15011                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15012                           ;setBuz@count stored from wreg
 15013  09F8  0020               	movlb	0	; select bank0
 15014  09F9  00AC               	movwf	setBuz@count
 15015                           
 15016                           ;Buzzer_B1.c: 23: time /= 10;
 15017  09FA  300A               	movlw	10
 15018  09FB  00A0               	movwf	___awdiv@divisor
 15019  09FC  3000               	movlw	0
 15020  09FD  00A1               	movwf	___awdiv@divisor+1
 15021  09FE  082A               	movf	setBuz@time+1,w
 15022  09FF  01A3               	clrf	___awdiv@dividend+1
 15023  0A00  07A3               	addwf	___awdiv@dividend+1,f
 15024  0A01  0829               	movf	setBuz@time,w
 15025  0A02  01A2               	clrf	___awdiv@dividend
 15026  0A03  07A2               	addwf	___awdiv@dividend,f
 15027  0A04  3188  209E  3189   	fcall	___awdiv
 15028  0A07  0020               	movlb	0	; select bank0
 15029  0A08  0821               	movf	?___awdiv+1,w
 15030  0A09  01AA               	clrf	setBuz@time+1
 15031  0A0A  07AA               	addwf	setBuz@time+1,f
 15032  0A0B  0820               	movf	?___awdiv,w
 15033  0A0C  01A9               	clrf	setBuz@time
 15034  0A0D  07A9               	addwf	setBuz@time,f
 15035                           
 15036                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15037  0A0E  0021               	movlb	1	; select bank1
 15038  0A0F  1C2E               	btfss	_Buz1^(0+128),0
 15039  0A10  0008               	return
 15040                           
 15041                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15042  0A11  18AE               	btfsc	_Buz1^(0+128),1
 15043  0A12  2A29               	goto	l94
 15044                           
 15045                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15046  0A13  14AE               	bsf	_Buz1^(0+128),1
 15047                           
 15048                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15049  0A14  01AF               	clrf	(_Buz1^(0+128)+1)
 15050  0A15  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 15051                           
 15052                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15053  0A16  0020               	movlb	0	; select bank0
 15054  0A17  082C               	movf	setBuz@count,w
 15055  0A18  00AB               	movwf	??_setBuz
 15056  0A19  082B               	movf	??_setBuz,w
 15057  0A1A  0021               	movlb	1	; select bank1
 15058  0A1B  00B1               	movwf	(_Buz1^(0+128)+3)
 15059                           
 15060                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15061  0A1C  0020               	movlb	0	; select bank0
 15062  0A1D  082A               	movf	setBuz@time+1,w
 15063  0A1E  0021               	movlb	1	; select bank1
 15064  0A1F  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 15065  0A20  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 15066  0A21  0020               	movlb	0	; select bank0
 15067  0A22  0829               	movf	setBuz@time,w
 15068  0A23  0021               	movlb	1	; select bank1
 15069  0A24  01B4               	clrf	(_Buz1^(0+128)+6)
 15070  0A25  07B4               	addwf	(_Buz1^(0+128)+6),f
 15071                           
 15072                           ;Buzzer_B1.c: 30: RB3 = 1;
 15073  0A26  0020               	movlb	0	; select bank0
 15074  0A27  158D               	bsf	13,3	;volatile
 15075                           
 15076                           ;Buzzer_B1.c: 31: } else {
 15077  0A28  0008               	return
 15078  0A29                     l94:	
 15079                           
 15080                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15081  0A29  19AE               	btfsc	_Buz1^(0+128),3
 15082  0A2A  2A3D               	goto	l96
 15083                           
 15084                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15085  0A2B  15AE               	bsf	_Buz1^(0+128),3
 15086                           
 15087                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15088  0A2C  0020               	movlb	0	; select bank0
 15089  0A2D  082C               	movf	setBuz@count,w
 15090  0A2E  00AB               	movwf	??_setBuz
 15091  0A2F  082B               	movf	??_setBuz,w
 15092  0A30  0021               	movlb	1	; select bank1
 15093  0A31  00B2               	movwf	(_Buz1^(0+128)+4)
 15094                           
 15095                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15096  0A32  0020               	movlb	0	; select bank0
 15097  0A33  082A               	movf	setBuz@time+1,w
 15098  0A34  0021               	movlb	1	; select bank1
 15099  0A35  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 15100  0A36  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 15101  0A37  0020               	movlb	0	; select bank0
 15102  0A38  0829               	movf	setBuz@time,w
 15103  0A39  0021               	movlb	1	; select bank1
 15104  0A3A  01B6               	clrf	(_Buz1^(0+128)+8)
 15105  0A3B  07B6               	addwf	(_Buz1^(0+128)+8),f
 15106                           
 15107                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15108  0A3C  0008               	return
 15109  0A3D                     l96:	
 15110  0A3D  1A2E               	btfsc	_Buz1^(0+128),4
 15111  0A3E  0008               	return
 15112                           
 15113                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15114  0A3F  162E               	bsf	_Buz1^(0+128),4
 15115                           
 15116                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15117  0A40  0020               	movlb	0	; select bank0
 15118  0A41  082C               	movf	setBuz@count,w
 15119  0A42  00AB               	movwf	??_setBuz
 15120  0A43  082B               	movf	??_setBuz,w
 15121  0A44  0021               	movlb	1	; select bank1
 15122  0A45  00B3               	movwf	(_Buz1^(0+128)+5)
 15123                           
 15124                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15125  0A46  0020               	movlb	0	; select bank0
 15126  0A47  082A               	movf	setBuz@time+1,w
 15127  0A48  0021               	movlb	1	; select bank1
 15128  0A49  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 15129  0A4A  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 15130  0A4B  0020               	movlb	0	; select bank0
 15131  0A4C  0829               	movf	setBuz@time,w
 15132  0A4D  0021               	movlb	1	; select bank1
 15133  0A4E  01B8               	clrf	(_Buz1^(0+128)+10)
 15134  0A4F  07B8               	addwf	(_Buz1^(0+128)+10),f
 15135  0A50  0008               	return
 15136  0A51                     __end_of_setBuz:	
 15137                           
 15138                           	psect	text96
 15139  089E                     __ptext96:	
 15140 ;; *************** function ___awdiv *****************
 15141 ;; Defined at:
 15142 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15143 ;; Parameters:    Size  Location     Type
 15144 ;;  divisor         2    0[BANK0 ] int 
 15145 ;;  dividend        2    2[BANK0 ] int 
 15146 ;; Auto vars:     Size  Location     Type
 15147 ;;  quotient        2    7[BANK0 ] int 
 15148 ;;  sign            1    6[BANK0 ] unsigned char 
 15149 ;;  counter         1    5[BANK0 ] unsigned char 
 15150 ;; Return value:  Size  Location     Type
 15151 ;;                  2    0[BANK0 ] int 
 15152 ;; Registers used:
 15153 ;;		wreg, status,2, status,0
 15154 ;; Tracked objects:
 15155 ;;		On entry : 0/0
 15156 ;;		On exit  : 0/0
 15157 ;;		Unchanged: 0/0
 15158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15159 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15160 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15161 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15162 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15163 ;;Total ram usage:        9 bytes
 15164 ;; Hardware stack levels used:    1
 15165 ;; Hardware stack levels required when called:    5
 15166 ;; This function calls:
 15167 ;;		Nothing
 15168 ;; This function is called by:
 15169 ;;		_setBuz
 15170 ;; This function uses a non-reentrant model
 15171 ;;
 15172                           
 15173                           
 15174                           ;psect for function ___awdiv
 15175  089E                     ___awdiv:	
 15176                           
 15177                           ;incstack = 0
 15178                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15179  089E  0020               	movlb	0	; select bank0
 15180  089F  01A6               	clrf	___awdiv@sign
 15181  08A0  1FA1               	btfss	___awdiv@divisor+1,7
 15182  08A1  28A9               	goto	l8096
 15183  08A2  09A0               	comf	___awdiv@divisor,f
 15184  08A3  09A1               	comf	___awdiv@divisor+1,f
 15185  08A4  0AA0               	incf	___awdiv@divisor,f
 15186  08A5  1903               	skipnz
 15187  08A6  0AA1               	incf	___awdiv@divisor+1,f
 15188  08A7  01A6               	clrf	___awdiv@sign
 15189  08A8  0AA6               	incf	___awdiv@sign,f
 15190  08A9                     l8096:	
 15191  08A9  1FA3               	btfss	___awdiv@dividend+1,7
 15192  08AA  28B4               	goto	l8102
 15193  08AB  09A2               	comf	___awdiv@dividend,f
 15194  08AC  09A3               	comf	___awdiv@dividend+1,f
 15195  08AD  0AA2               	incf	___awdiv@dividend,f
 15196  08AE  1903               	skipnz
 15197  08AF  0AA3               	incf	___awdiv@dividend+1,f
 15198  08B0  3001               	movlw	1
 15199  08B1  00A4               	movwf	??___awdiv
 15200  08B2  0824               	movf	??___awdiv,w
 15201  08B3  06A6               	xorwf	___awdiv@sign,f
 15202  08B4                     l8102:	
 15203  08B4  01A7               	clrf	___awdiv@quotient
 15204  08B5  01A8               	clrf	___awdiv@quotient+1
 15205  08B6  0821               	movf	___awdiv@divisor+1,w
 15206  08B7  0420               	iorwf	___awdiv@divisor,w
 15207  08B8  1903               	skipnz
 15208  08B9  28E3               	goto	l8124
 15209  08BA  01A5               	clrf	___awdiv@counter
 15210  08BB  0AA5               	incf	___awdiv@counter,f
 15211  08BC                     l8112:	
 15212  08BC  1BA1               	btfsc	___awdiv@divisor+1,7
 15213  08BD  28C8               	goto	l8114
 15214  08BE  3001               	movlw	1
 15215  08BF                     u8205:	
 15216  08BF  35A0               	lslf	___awdiv@divisor,f
 15217  08C0  0DA1               	rlf	___awdiv@divisor+1,f
 15218  08C1  0B89               	decfsz	9,f
 15219  08C2  28BF               	goto	u8205
 15220  08C3  3001               	movlw	1
 15221  08C4  00A4               	movwf	??___awdiv
 15222  08C5  0824               	movf	??___awdiv,w
 15223  08C6  07A5               	addwf	___awdiv@counter,f
 15224  08C7  28BC               	goto	l8112
 15225  08C8                     l8114:	
 15226  08C8  3001               	movlw	1
 15227  08C9                     u8225:	
 15228  08C9  35A7               	lslf	___awdiv@quotient,f
 15229  08CA  0DA8               	rlf	___awdiv@quotient+1,f
 15230  08CB  0B89               	decfsz	9,f
 15231  08CC  28C9               	goto	u8225
 15232  08CD  0821               	movf	___awdiv@divisor+1,w
 15233  08CE  0223               	subwf	___awdiv@dividend+1,w
 15234  08CF  1D03               	skipz
 15235  08D0  28D3               	goto	u8235
 15236  08D1  0820               	movf	___awdiv@divisor,w
 15237  08D2  0222               	subwf	___awdiv@dividend,w
 15238  08D3                     u8235:	
 15239  08D3  1C03               	skipc
 15240  08D4  28DA               	goto	l8120
 15241  08D5  0820               	movf	___awdiv@divisor,w
 15242  08D6  02A2               	subwf	___awdiv@dividend,f
 15243  08D7  0821               	movf	___awdiv@divisor+1,w
 15244  08D8  3BA3               	subwfb	___awdiv@dividend+1,f
 15245  08D9  1427               	bsf	___awdiv@quotient,0
 15246  08DA                     l8120:	
 15247  08DA  3001               	movlw	1
 15248  08DB                     u8245:	
 15249  08DB  36A1               	lsrf	___awdiv@divisor+1,f
 15250  08DC  0CA0               	rrf	___awdiv@divisor,f
 15251  08DD  0B89               	decfsz	9,f
 15252  08DE  28DB               	goto	u8245
 15253  08DF  3001               	movlw	1
 15254  08E0  02A5               	subwf	___awdiv@counter,f
 15255  08E1  1D03               	btfss	3,2
 15256  08E2  28C8               	goto	l8114
 15257  08E3                     l8124:	
 15258  08E3  0826               	movf	___awdiv@sign,w
 15259  08E4  1903               	btfsc	3,2
 15260  08E5  28EB               	goto	l8128
 15261  08E6  09A7               	comf	___awdiv@quotient,f
 15262  08E7  09A8               	comf	___awdiv@quotient+1,f
 15263  08E8  0AA7               	incf	___awdiv@quotient,f
 15264  08E9  1903               	skipnz
 15265  08EA  0AA8               	incf	___awdiv@quotient+1,f
 15266  08EB                     l8128:	
 15267  08EB  0828               	movf	___awdiv@quotient+1,w
 15268  08EC  01A1               	clrf	?___awdiv+1
 15269  08ED  07A1               	addwf	?___awdiv+1,f
 15270  08EE  0827               	movf	___awdiv@quotient,w
 15271  08EF  01A0               	clrf	?___awdiv
 15272  08F0  07A0               	addwf	?___awdiv,f
 15273  08F1  0008               	return
 15274  08F2                     __end_of___awdiv:	
 15275                           
 15276                           	psect	text97
 15277  1E69                     __ptext97:	
 15278 ;; *************** function _DelayOff_Initialization *****************
 15279 ;; Defined at:
 15280 ;;		line 26 in file "../src/DelayOff_B1.c"
 15281 ;; Parameters:    Size  Location     Type
 15282 ;;		None
 15283 ;; Auto vars:     Size  Location     Type
 15284 ;;		None
 15285 ;; Return value:  Size  Location     Type
 15286 ;;		None               void
 15287 ;; Registers used:
 15288 ;;		wreg, status,2, status,0, pclath, cstack
 15289 ;; Tracked objects:
 15290 ;;		On entry : 0/0
 15291 ;;		On exit  : 0/0
 15292 ;;		Unchanged: 0/0
 15293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15298 ;;Total ram usage:        0 bytes
 15299 ;; Hardware stack levels used:    1
 15300 ;; Hardware stack levels required when called:    7
 15301 ;; This function calls:
 15302 ;;		_DlyOff_Initialization
 15303 ;; This function is called by:
 15304 ;;		_main
 15305 ;; This function uses a non-reentrant model
 15306 ;;
 15307                           
 15308                           
 15309                           ;psect for function _DelayOff_Initialization
 15310  1E69                     _DelayOff_Initialization:	
 15311                           
 15312                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15313                           
 15314                           ;incstack = 0
 15315                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 15316  1E69  3001               	movlw	1
 15317  1E6A  319E  264E  319E   	fcall	_DlyOff_Initialization
 15318                           
 15319                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 15320  1E6D  3002               	movlw	2
 15321  1E6E  319E  264E         	fcall	_DlyOff_Initialization
 15322  1E70  0008               	return
 15323  1E71                     __end_of_DelayOff_Initialization:	
 15324                           
 15325                           	psect	text98
 15326  1E4E                     __ptext98:	
 15327 ;; *************** function _DlyOff_Initialization *****************
 15328 ;; Defined at:
 15329 ;;		line 56 in file "../src/DelayOff_B1.c"
 15330 ;; Parameters:    Size  Location     Type
 15331 ;;  sw              1    wreg     unsigned char 
 15332 ;; Auto vars:     Size  Location     Type
 15333 ;;  sw              1    2[BANK0 ] unsigned char 
 15334 ;; Return value:  Size  Location     Type
 15335 ;;		None               void
 15336 ;; Registers used:
 15337 ;;		wreg, status,2, status,0, pclath, cstack
 15338 ;; Tracked objects:
 15339 ;;		On entry : 0/0
 15340 ;;		On exit  : 0/0
 15341 ;;		Unchanged: 0/0
 15342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15346 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15347 ;;Total ram usage:        1 bytes
 15348 ;; Hardware stack levels used:    1
 15349 ;; Hardware stack levels required when called:    6
 15350 ;; This function calls:
 15351 ;;		_DelayOffPointSelect
 15352 ;; This function is called by:
 15353 ;;		_DelayOff_Initialization
 15354 ;; This function uses a non-reentrant model
 15355 ;;
 15356                           
 15357                           
 15358                           ;psect for function _DlyOff_Initialization
 15359  1E4E                     _DlyOff_Initialization:	
 15360                           
 15361                           ;incstack = 0
 15362                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 15363                           ;DlyOff_Initialization@sw stored from wreg
 15364  1E4E  0020               	movlb	0	; select bank0
 15365  1E4F  00A2               	movwf	DlyOff_Initialization@sw
 15366                           
 15367                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15368  1E50  0822               	movf	DlyOff_Initialization@sw,w
 15369  1E51  3191  214C         	fcall	_DelayOffPointSelect
 15370  1E53  0008               	return
 15371  1E54                     __end_of_DlyOff_Initialization:	
 15372                           
 15373                           	psect	text99
 15374  114C                     __ptext99:	
 15375 ;; *************** function _DelayOffPointSelect *****************
 15376 ;; Defined at:
 15377 ;;		line 7 in file "../src/DelayOff_B1.c"
 15378 ;; Parameters:    Size  Location     Type
 15379 ;;  sw              1    wreg     unsigned char 
 15380 ;; Auto vars:     Size  Location     Type
 15381 ;;  sw              1    1[BANK0 ] unsigned char 
 15382 ;; Return value:  Size  Location     Type
 15383 ;;		None               void
 15384 ;; Registers used:
 15385 ;;		wreg
 15386 ;; Tracked objects:
 15387 ;;		On entry : 0/0
 15388 ;;		On exit  : 0/0
 15389 ;;		Unchanged: 0/0
 15390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15394 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15395 ;;Total ram usage:        2 bytes
 15396 ;; Hardware stack levels used:    1
 15397 ;; Hardware stack levels required when called:    5
 15398 ;; This function calls:
 15399 ;;		Nothing
 15400 ;; This function is called by:
 15401 ;;		_DlyOff_Initialization
 15402 ;;		_DlyOff_Main
 15403 ;;		_setDelayOff_GO
 15404 ;;		_getDelayOff_GO
 15405 ;; This function uses a non-reentrant model
 15406 ;;
 15407                           
 15408                           
 15409                           ;psect for function _DelayOffPointSelect
 15410  114C                     _DelayOffPointSelect:	
 15411                           
 15412                           ;incstack = 0
 15413                           ; Regs used in _DelayOffPointSelect: [wreg]
 15414                           ;DelayOffPointSelect@sw stored from wreg
 15415  114C  0020               	movlb	0	; select bank0
 15416  114D  00A1               	movwf	DelayOffPointSelect@sw
 15417                           
 15418                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15419  114E  0821               	movf	DelayOffPointSelect@sw,w
 15420  114F  3A01               	xorlw	1
 15421  1150  1D03               	skipz
 15422  1151  2958               	goto	l8052
 15423                           
 15424                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15425  1152  30D7               	movlw	_DlySw1& (0+255)
 15426  1153  00A0               	movwf	??_DelayOffPointSelect
 15427  1154  0820               	movf	??_DelayOffPointSelect,w
 15428  1155  0021               	movlb	1	; select bank1
 15429  1156  00C9               	movwf	_DelayOff^(0+128)
 15430                           
 15431                           ;DelayOff_B1.c: 11: }
 15432  1157  0008               	return
 15433  1158                     l8052:	
 15434                           
 15435                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 15436  1158  0020               	movlb	0	; select bank0
 15437  1159  0821               	movf	DelayOffPointSelect@sw,w
 15438  115A  3A02               	xorlw	2
 15439  115B  1D03               	skipz
 15440  115C  0008               	return
 15441                           
 15442                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 15443  115D  30DC               	movlw	_DlySw2& (0+255)
 15444  115E  00A0               	movwf	??_DelayOffPointSelect
 15445  115F  0820               	movf	??_DelayOffPointSelect,w
 15446  1160  0021               	movlb	1	; select bank1
 15447  1161  00C9               	movwf	_DelayOff^(0+128)
 15448  1162  0008               	return
 15449  1163                     __end_of_DelayOffPointSelect:	
 15450                           
 15451                           	psect	text100
 15452  110D                     __ptext100:	
 15453 ;; *************** function _CC2500_PowerOnInitial *****************
 15454 ;; Defined at:
 15455 ;;		line 119 in file "../src/CC2500_B1.c"
 15456 ;; Parameters:    Size  Location     Type
 15457 ;;		None
 15458 ;; Auto vars:     Size  Location     Type
 15459 ;;		None
 15460 ;; Return value:  Size  Location     Type
 15461 ;;		None               void
 15462 ;; Registers used:
 15463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15464 ;; Tracked objects:
 15465 ;;		On entry : 0/0
 15466 ;;		On exit  : 0/0
 15467 ;;		Unchanged: 0/0
 15468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15473 ;;Total ram usage:        0 bytes
 15474 ;; Hardware stack levels used:    1
 15475 ;; Hardware stack levels required when called:    8
 15476 ;; This function calls:
 15477 ;;		_CC2500_ClearRXFIFO
 15478 ;;		_CC2500_ClearTXFIFO
 15479 ;;		_CC2500_FrequencyCabr
 15480 ;;		_CC2500_InitPATable
 15481 ;;		_CC2500_InitSetREG
 15482 ;;		_CC2500_PowerRST
 15483 ;;		_CC2500_SIDLEMode
 15484 ;; This function is called by:
 15485 ;;		_main
 15486 ;; This function uses a non-reentrant model
 15487 ;;
 15488                           
 15489                           
 15490                           ;psect for function _CC2500_PowerOnInitial
 15491  110D                     _CC2500_PowerOnInitial:	
 15492                           
 15493                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 15494                           
 15495                           ;incstack = 0
 15496                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15497  110D  3196  2686  3191   	fcall	_CC2500_PowerRST
 15498                           
 15499                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 15500  1110  3193  23A3  3191   	fcall	_CC2500_InitSetREG
 15501                           
 15502                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 15503  1113  3192  2202  3191   	fcall	_CC2500_InitPATable
 15504                           
 15505                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 15506  1116  319E  263D  3191   	fcall	_CC2500_ClearTXFIFO
 15507                           
 15508                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 15509  1119  319E  2639  3191   	fcall	_CC2500_ClearRXFIFO
 15510                           
 15511                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 15512  111C  319E  26B3  3191   	fcall	_CC2500_FrequencyCabr
 15513                           
 15514                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 15515  111F  319E  2641         	fcall	_CC2500_SIDLEMode
 15516  1121  0008               	return
 15517  1122                     __end_of_CC2500_PowerOnInitial:	
 15518                           
 15519                           	psect	text101
 15520  1E41                     __ptext101:	
 15521 ;; *************** function _CC2500_SIDLEMode *****************
 15522 ;; Defined at:
 15523 ;;		line 209 in file "../src/CC2500_B1.c"
 15524 ;; Parameters:    Size  Location     Type
 15525 ;;		None
 15526 ;; Auto vars:     Size  Location     Type
 15527 ;;		None
 15528 ;; Return value:  Size  Location     Type
 15529 ;;		None               void
 15530 ;; Registers used:
 15531 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15532 ;; Tracked objects:
 15533 ;;		On entry : 0/0
 15534 ;;		On exit  : 0/0
 15535 ;;		Unchanged: 0/0
 15536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15541 ;;Total ram usage:        0 bytes
 15542 ;; Hardware stack levels used:    1
 15543 ;; Hardware stack levels required when called:    7
 15544 ;; This function calls:
 15545 ;;		_CC2500_WriteCommand
 15546 ;; This function is called by:
 15547 ;;		_CC2500_PowerOnInitial
 15548 ;; This function uses a non-reentrant model
 15549 ;;
 15550                           
 15551                           
 15552                           ;psect for function _CC2500_SIDLEMode
 15553  1E41                     _CC2500_SIDLEMode:	
 15554                           
 15555                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 15556                           
 15557                           ;incstack = 0
 15558                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15559  1E41  3036               	movlw	54
 15560  1E42  3191  2195         	fcall	_CC2500_WriteCommand
 15561  1E44  0008               	return
 15562  1E45                     __end_of_CC2500_SIDLEMode:	
 15563                           
 15564                           	psect	text102
 15565  1686                     __ptext102:	
 15566 ;; *************** function _CC2500_PowerRST *****************
 15567 ;; Defined at:
 15568 ;;		line 132 in file "../src/CC2500_B1.c"
 15569 ;; Parameters:    Size  Location     Type
 15570 ;;		None
 15571 ;; Auto vars:     Size  Location     Type
 15572 ;;		None
 15573 ;; Return value:  Size  Location     Type
 15574 ;;		None               void
 15575 ;; Registers used:
 15576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15577 ;; Tracked objects:
 15578 ;;		On entry : 0/0
 15579 ;;		On exit  : 0/0
 15580 ;;		Unchanged: 0/0
 15581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15585 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15586 ;;Total ram usage:        1 bytes
 15587 ;; Hardware stack levels used:    1
 15588 ;; Hardware stack levels required when called:    6
 15589 ;; This function calls:
 15590 ;;		_CC2500_WriteByte
 15591 ;;		_DelayTime_1us
 15592 ;;		_Timeout_Counter
 15593 ;;		_set_TimeoutCleared
 15594 ;; This function is called by:
 15595 ;;		_CC2500_PowerOnInitial
 15596 ;; This function uses a non-reentrant model
 15597 ;;
 15598                           
 15599                           
 15600                           ;psect for function _CC2500_PowerRST
 15601  1686                     _CC2500_PowerRST:	
 15602                           
 15603                           ;CC2500_B1.c: 133: RC1 = 0;
 15604                           
 15605                           ;incstack = 0
 15606                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15607  1686  0020               	movlb	0	; select bank0
 15608  1687  108E               	bcf	14,1	;volatile
 15609                           
 15610                           ;CC2500_B1.c: 134: RC0 = 0;
 15611  1688  100E               	bcf	14,0	;volatile
 15612                           
 15613                           ;CC2500_B1.c: 135: RC4 = 1;
 15614  1689  160E               	bsf	14,4	;volatile
 15615                           
 15616                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 15617  168A  300A               	movlw	10
 15618  168B  00A0               	movwf	DelayTime_1us@count
 15619  168C  3000               	movlw	0
 15620  168D  00A1               	movwf	DelayTime_1us@count+1
 15621  168E  3193  232D  3196   	fcall	_DelayTime_1us
 15622                           
 15623                           ;CC2500_B1.c: 137: RC4 = 0;
 15624  1691  0020               	movlb	0	; select bank0
 15625  1692  120E               	bcf	14,4	;volatile
 15626                           
 15627                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 15628  1693  300A               	movlw	10
 15629  1694  00A0               	movwf	DelayTime_1us@count
 15630  1695  3000               	movlw	0
 15631  1696  00A1               	movwf	DelayTime_1us@count+1
 15632  1697  3193  232D  3196   	fcall	_DelayTime_1us
 15633                           
 15634                           ;CC2500_B1.c: 139: RC4 = 1;
 15635  169A  0020               	movlb	0	; select bank0
 15636  169B  160E               	bsf	14,4	;volatile
 15637                           
 15638                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 15639  169C  3028               	movlw	40
 15640  169D  00A0               	movwf	DelayTime_1us@count
 15641  169E  3000               	movlw	0
 15642  169F  00A1               	movwf	DelayTime_1us@count+1
 15643  16A0  3193  232D  3196   	fcall	_DelayTime_1us
 15644                           
 15645                           ;CC2500_B1.c: 141: RC4 = 0;
 15646  16A3  0020               	movlb	0	; select bank0
 15647  16A4  120E               	bcf	14,4	;volatile
 15648                           
 15649                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 15650  16A5  3030               	movlw	48
 15651  16A6  00A6               	movwf	??_CC2500_PowerRST
 15652  16A7  0826               	movf	??_CC2500_PowerRST,w
 15653  16A8  0021               	movlb	1	; select bank1
 15654  16A9  00D0               	movwf	_SPI0Buffer^(0+128)
 15655                           
 15656                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 15657  16AA  2EAE               	goto	l8990
 15658  16AB                     l8988:	
 15659                           
 15660                           ;CC2500_B1.c: 144: Timeout_Counter();
 15661  16AB  3190  20F8  3196   	fcall	_Timeout_Counter
 15662  16AE                     l8990:	
 15663  16AE  0020               	movlb	0	; select bank0
 15664  16AF  1D0E               	btfss	14,2	;volatile
 15665  16B0  2EB4               	goto	l8994
 15666  16B1  0021               	movlb	1	; select bank1
 15667  16B2  1D2B               	btfss	(_myMain^(0+128)+11),2
 15668  16B3  2EAB               	goto	l8988
 15669  16B4                     l8994:	
 15670                           
 15671                           ;CC2500_B1.c: 145: };
 15672                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 15673  16B4  319E  2649  3196   	fcall	_set_TimeoutCleared
 15674                           
 15675                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 15676  16B7  3191  2163  3196   	fcall	_CC2500_WriteByte
 15677                           
 15678                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 15679  16BA  2EBE               	goto	l9000
 15680  16BB                     l8998:	
 15681                           
 15682                           ;CC2500_B1.c: 149: Timeout_Counter();
 15683  16BB  3190  20F8  3196   	fcall	_Timeout_Counter
 15684  16BE                     l9000:	
 15685  16BE  0020               	movlb	0	; select bank0
 15686  16BF  1D0E               	btfss	14,2	;volatile
 15687  16C0  2EC4               	goto	l9004
 15688  16C1  0021               	movlb	1	; select bank1
 15689  16C2  1D2B               	btfss	(_myMain^(0+128)+11),2
 15690  16C3  2EBB               	goto	l8998
 15691  16C4                     l9004:	
 15692                           
 15693                           ;CC2500_B1.c: 150: };
 15694                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 15695  16C4  319E  2649         	fcall	_set_TimeoutCleared
 15696                           
 15697                           ;CC2500_B1.c: 152: RC0 = 0;
 15698  16C6  0020               	movlb	0	; select bank0
 15699  16C7  100E               	bcf	14,0	;volatile
 15700                           
 15701                           ;CC2500_B1.c: 153: RC4 = 1;
 15702  16C8  160E               	bsf	14,4	;volatile
 15703  16C9  0008               	return
 15704  16CA                     __end_of_CC2500_PowerRST:	
 15705                           
 15706                           	psect	text103
 15707  13A3                     __ptext103:	
 15708 ;; *************** function _CC2500_InitSetREG *****************
 15709 ;; Defined at:
 15710 ;;		line 159 in file "../src/CC2500_B1.c"
 15711 ;; Parameters:    Size  Location     Type
 15712 ;;		None
 15713 ;; Auto vars:     Size  Location     Type
 15714 ;;  loop_c          1    8[BANK0 ] unsigned char 
 15715 ;;  temp2           1    7[BANK0 ] unsigned char 
 15716 ;;  temp1           1    6[BANK0 ] unsigned char 
 15717 ;; Return value:  Size  Location     Type
 15718 ;;		None               void
 15719 ;; Registers used:
 15720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15721 ;; Tracked objects:
 15722 ;;		On entry : 0/0
 15723 ;;		On exit  : 0/0
 15724 ;;		Unchanged: 0/0
 15725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15727 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15728 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15729 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15730 ;;Total ram usage:        4 bytes
 15731 ;; Hardware stack levels used:    1
 15732 ;; Hardware stack levels required when called:    7
 15733 ;; This function calls:
 15734 ;;		_CC2500_WriteREG
 15735 ;; This function is called by:
 15736 ;;		_CC2500_PowerOnInitial
 15737 ;; This function uses a non-reentrant model
 15738 ;;
 15739                           
 15740                           
 15741                           ;psect for function _CC2500_InitSetREG
 15742  13A3                     _CC2500_InitSetREG:	
 15743                           
 15744                           ;CC2500_B1.c: 160: unsigned char loop_c;
 15745                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 15746                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 15747                           
 15748                           ;incstack = 0
 15749                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15750  13A3  0020               	movlb	0	; select bank0
 15751  13A4  01A8               	clrf	CC2500_InitSetREG@loop_c
 15752  13A5                     L5:	
 15753  13A5  302F               	movlw	47
 15754  13A6  0228               	subwf	CC2500_InitSetREG@loop_c,w
 15755  13A7  1803               	btfsc	3,0
 15756  13A8  0008               	return
 15757                           
 15758                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 15759  13A9  0828               	movf	CC2500_InitSetREG@loop_c,w
 15760  13AA  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 15761  13AB  0084               	movwf	4
 15762  13AC  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 15763  13AD  1803               	skipnc
 15764  13AE  3E01               	addlw	1
 15765  13AF  0085               	movwf	5
 15766  13B0  0800               	movf	0,w	;code access
 15767  13B1  00A5               	movwf	??_CC2500_InitSetREG
 15768  13B2  0825               	movf	??_CC2500_InitSetREG,w
 15769  13B3  00A6               	movwf	CC2500_InitSetREG@temp1
 15770                           
 15771                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 15772  13B4  0828               	movf	CC2500_InitSetREG@loop_c,w
 15773  13B5  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 15774  13B6  0084               	movwf	4
 15775  13B7  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 15776  13B8  1803               	skipnc
 15777  13B9  3E01               	addlw	1
 15778  13BA  0085               	movwf	5
 15779  13BB  0800               	movf	0,w	;code access
 15780  13BC  00A5               	movwf	??_CC2500_InitSetREG
 15781  13BD  0825               	movf	??_CC2500_InitSetREG,w
 15782  13BE  00A7               	movwf	CC2500_InitSetREG@temp2
 15783                           
 15784                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 15785  13BF  0827               	movf	CC2500_InitSetREG@temp2,w
 15786  13C0  00A5               	movwf	??_CC2500_InitSetREG
 15787  13C1  0825               	movf	??_CC2500_InitSetREG,w
 15788  13C2  00A2               	movwf	CC2500_WriteREG@value
 15789  13C3  0826               	movf	CC2500_InitSetREG@temp1,w
 15790  13C4  3192  22C2  3193   	fcall	_CC2500_WriteREG
 15791  13C7  3001               	movlw	1
 15792  13C8  0020               	movlb	0	; select bank0
 15793  13C9  00A5               	movwf	??_CC2500_InitSetREG
 15794  13CA  0825               	movf	??_CC2500_InitSetREG,w
 15795  13CB  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 15796  13CC  2BA5               	goto	L5
 15797  13CD                     __end_of_CC2500_InitSetREG:	
 15798                           
 15799                           	psect	text104
 15800  1202                     __ptext104:	
 15801 ;; *************** function _CC2500_InitPATable *****************
 15802 ;; Defined at:
 15803 ;;		line 174 in file "../src/CC2500_B1.c"
 15804 ;; Parameters:    Size  Location     Type
 15805 ;;		None
 15806 ;; Auto vars:     Size  Location     Type
 15807 ;;  loop_d          1    7[BANK0 ] unsigned char 
 15808 ;;  temp            1    6[BANK0 ] unsigned char 
 15809 ;; Return value:  Size  Location     Type
 15810 ;;		None               void
 15811 ;; Registers used:
 15812 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15813 ;; Tracked objects:
 15814 ;;		On entry : 0/0
 15815 ;;		On exit  : 0/0
 15816 ;;		Unchanged: 0/0
 15817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15819 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15820 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15821 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15822 ;;Total ram usage:        3 bytes
 15823 ;; Hardware stack levels used:    1
 15824 ;; Hardware stack levels required when called:    7
 15825 ;; This function calls:
 15826 ;;		_CC2500_WriteREG
 15827 ;; This function is called by:
 15828 ;;		_CC2500_PowerOnInitial
 15829 ;; This function uses a non-reentrant model
 15830 ;;
 15831                           
 15832                           
 15833                           ;psect for function _CC2500_InitPATable
 15834  1202                     _CC2500_InitPATable:	
 15835                           
 15836                           ;CC2500_B1.c: 175: unsigned char loop_d;
 15837                           ;CC2500_B1.c: 176: unsigned char temp;
 15838                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 15839                           
 15840                           ;incstack = 0
 15841                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15842  1202  0020               	movlb	0	; select bank0
 15843  1203  01A7               	clrf	CC2500_InitPATable@loop_d
 15844  1204                     L6:	
 15845  1204  3008               	movlw	8
 15846  1205  0227               	subwf	CC2500_InitPATable@loop_d,w
 15847  1206  1803               	btfsc	3,0
 15848  1207  0008               	return
 15849                           
 15850                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 15851  1208  0827               	movf	CC2500_InitPATable@loop_d,w
 15852  1209  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 15853  120A  0084               	movwf	4
 15854  120B  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 15855  120C  1803               	skipnc
 15856  120D  3E01               	addlw	1
 15857  120E  0085               	movwf	5
 15858  120F  0800               	movf	0,w	;code access
 15859  1210  00A5               	movwf	??_CC2500_InitPATable
 15860  1211  0825               	movf	??_CC2500_InitPATable,w
 15861  1212  00A6               	movwf	CC2500_InitPATable@temp
 15862                           
 15863                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 15864  1213  0826               	movf	CC2500_InitPATable@temp,w
 15865  1214  00A5               	movwf	??_CC2500_InitPATable
 15866  1215  0825               	movf	??_CC2500_InitPATable,w
 15867  1216  00A2               	movwf	CC2500_WriteREG@value
 15868  1217  303E               	movlw	62
 15869  1218  3192  22C2  3192   	fcall	_CC2500_WriteREG
 15870  121B  3001               	movlw	1
 15871  121C  0020               	movlb	0	; select bank0
 15872  121D  00A5               	movwf	??_CC2500_InitPATable
 15873  121E  0825               	movf	??_CC2500_InitPATable,w
 15874  121F  07A7               	addwf	CC2500_InitPATable@loop_d,f
 15875  1220  2A04               	goto	L6
 15876  1221                     __end_of_CC2500_InitPATable:	
 15877                           
 15878                           	psect	text105
 15879  12C2                     __ptext105:	
 15880 ;; *************** function _CC2500_WriteREG *****************
 15881 ;; Defined at:
 15882 ;;		line 251 in file "../src/CC2500_B1.c"
 15883 ;; Parameters:    Size  Location     Type
 15884 ;;  w_addr          1    wreg     unsigned char 
 15885 ;;  value           1    2[BANK0 ] unsigned char 
 15886 ;; Auto vars:     Size  Location     Type
 15887 ;;  w_addr          1    4[BANK0 ] unsigned char 
 15888 ;; Return value:  Size  Location     Type
 15889 ;;		None               void
 15890 ;; Registers used:
 15891 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15892 ;; Tracked objects:
 15893 ;;		On entry : 0/0
 15894 ;;		On exit  : 0/0
 15895 ;;		Unchanged: 0/0
 15896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15897 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15900 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15901 ;;Total ram usage:        3 bytes
 15902 ;; Hardware stack levels used:    1
 15903 ;; Hardware stack levels required when called:    6
 15904 ;; This function calls:
 15905 ;;		_CC2500_WriteByte
 15906 ;;		_Timeout_Counter
 15907 ;;		_set_TimeoutCleared
 15908 ;; This function is called by:
 15909 ;;		_CC2500_InitSetREG
 15910 ;;		_CC2500_InitPATable
 15911 ;; This function uses a non-reentrant model
 15912 ;;
 15913                           
 15914                           
 15915                           ;psect for function _CC2500_WriteREG
 15916  12C2                     _CC2500_WriteREG:	
 15917                           
 15918                           ;incstack = 0
 15919                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15920                           ;CC2500_WriteREG@w_addr stored from wreg
 15921  12C2  0020               	movlb	0	; select bank0
 15922  12C3  00A4               	movwf	CC2500_WriteREG@w_addr
 15923                           
 15924                           ;CC2500_B1.c: 252: RC4 = 0;
 15925  12C4  120E               	bcf	14,4	;volatile
 15926                           
 15927                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 15928  12C5  0824               	movf	CC2500_WriteREG@w_addr,w
 15929  12C6  00A3               	movwf	??_CC2500_WriteREG
 15930  12C7  0823               	movf	??_CC2500_WriteREG,w
 15931  12C8  0021               	movlb	1	; select bank1
 15932  12C9  00D0               	movwf	_SPI0Buffer^(0+128)
 15933                           
 15934                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 15935  12CA  2ACE               	goto	l8716
 15936  12CB                     l8714:	
 15937                           
 15938                           ;CC2500_B1.c: 255: Timeout_Counter();
 15939  12CB  3190  20F8  3192   	fcall	_Timeout_Counter
 15940  12CE                     l8716:	
 15941  12CE  0020               	movlb	0	; select bank0
 15942  12CF  1D0E               	btfss	14,2	;volatile
 15943  12D0  2AD4               	goto	l8720
 15944  12D1  0021               	movlb	1	; select bank1
 15945  12D2  1D2B               	btfss	(_myMain^(0+128)+11),2
 15946  12D3  2ACB               	goto	l8714
 15947  12D4                     l8720:	
 15948                           
 15949                           ;CC2500_B1.c: 256: };
 15950                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 15951  12D4  319E  2649  3192   	fcall	_set_TimeoutCleared
 15952                           
 15953                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 15954  12D7  3191  2163  3192   	fcall	_CC2500_WriteByte
 15955                           
 15956                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 15957  12DA  0020               	movlb	0	; select bank0
 15958  12DB  0822               	movf	CC2500_WriteREG@value,w
 15959  12DC  00A3               	movwf	??_CC2500_WriteREG
 15960  12DD  0823               	movf	??_CC2500_WriteREG,w
 15961  12DE  0021               	movlb	1	; select bank1
 15962  12DF  00D0               	movwf	_SPI0Buffer^(0+128)
 15963                           
 15964                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 15965  12E0  3191  2163         	fcall	_CC2500_WriteByte
 15966                           
 15967                           ;CC2500_B1.c: 262: RC4 = 1;
 15968  12E2  0020               	movlb	0	; select bank0
 15969  12E3  160E               	bsf	14,4	;volatile
 15970  12E4  0008               	return
 15971  12E5                     __end_of_CC2500_WriteREG:	
 15972                           
 15973                           	psect	text106
 15974  1EB3                     __ptext106:	
 15975 ;; *************** function _CC2500_FrequencyCabr *****************
 15976 ;; Defined at:
 15977 ;;		line 201 in file "../src/CC2500_B1.c"
 15978 ;; Parameters:    Size  Location     Type
 15979 ;;		None
 15980 ;; Auto vars:     Size  Location     Type
 15981 ;;		None
 15982 ;; Return value:  Size  Location     Type
 15983 ;;		None               void
 15984 ;; Registers used:
 15985 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15986 ;; Tracked objects:
 15987 ;;		On entry : 0/0
 15988 ;;		On exit  : 0/0
 15989 ;;		Unchanged: 0/0
 15990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15995 ;;Total ram usage:        0 bytes
 15996 ;; Hardware stack levels used:    1
 15997 ;; Hardware stack levels required when called:    7
 15998 ;; This function calls:
 15999 ;;		_CC2500_WriteCommand
 16000 ;;		_DelayTime_1us
 16001 ;; This function is called by:
 16002 ;;		_CC2500_PowerOnInitial
 16003 ;; This function uses a non-reentrant model
 16004 ;;
 16005                           
 16006                           
 16007                           ;psect for function _CC2500_FrequencyCabr
 16008  1EB3                     _CC2500_FrequencyCabr:	
 16009                           
 16010                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 16011                           
 16012                           ;incstack = 0
 16013                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16014  1EB3  3033               	movlw	51
 16015  1EB4  3191  2195  319E   	fcall	_CC2500_WriteCommand
 16016                           
 16017                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 16018  1EB7  30E8               	movlw	232
 16019  1EB8  0020               	movlb	0	; select bank0
 16020  1EB9  00A0               	movwf	DelayTime_1us@count
 16021  1EBA  3003               	movlw	3
 16022  1EBB  00A1               	movwf	DelayTime_1us@count+1
 16023  1EBC  3193  232D         	fcall	_DelayTime_1us
 16024  1EBE  0008               	return
 16025  1EBF                     __end_of_CC2500_FrequencyCabr:	
 16026                           
 16027                           	psect	text107
 16028  132D                     __ptext107:	
 16029 ;; *************** function _DelayTime_1us *****************
 16030 ;; Defined at:
 16031 ;;		line 320 in file "../src/CC2500_B1.c"
 16032 ;; Parameters:    Size  Location     Type
 16033 ;;  count           2    0[BANK0 ] int 
 16034 ;; Auto vars:     Size  Location     Type
 16035 ;;  j               2    4[BANK0 ] unsigned int 
 16036 ;;  i               2    2[BANK0 ] unsigned int 
 16037 ;; Return value:  Size  Location     Type
 16038 ;;		None               void
 16039 ;; Registers used:
 16040 ;;		wreg, status,2
 16041 ;; Tracked objects:
 16042 ;;		On entry : 0/0
 16043 ;;		On exit  : 0/0
 16044 ;;		Unchanged: 0/0
 16045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16046 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16047 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16049 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16050 ;;Total ram usage:        6 bytes
 16051 ;; Hardware stack levels used:    1
 16052 ;; Hardware stack levels required when called:    5
 16053 ;; This function calls:
 16054 ;;		Nothing
 16055 ;; This function is called by:
 16056 ;;		_CC2500_PowerRST
 16057 ;;		_CC2500_FrequencyCabr
 16058 ;; This function uses a non-reentrant model
 16059 ;;
 16060                           
 16061                           
 16062                           ;psect for function _DelayTime_1us
 16063  132D                     _DelayTime_1us:	
 16064                           
 16065                           ;CC2500_B1.c: 321: unsigned int i, j;
 16066                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 16067                           
 16068                           ;incstack = 0
 16069                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16070  132D  3001               	movlw	1
 16071  132E  0020               	movlb	0	; select bank0
 16072  132F  00A2               	movwf	DelayTime_1us@i
 16073  1330  3000               	movlw	0
 16074  1331  00A3               	movwf	DelayTime_1us@i+1
 16075  1332                     l368:	
 16076  1332  0821               	movf	DelayTime_1us@count+1,w
 16077  1333  0223               	subwf	DelayTime_1us@i+1,w
 16078  1334  1D03               	skipz
 16079  1335  2B38               	goto	u9055
 16080  1336  0820               	movf	DelayTime_1us@count,w
 16081  1337  0222               	subwf	DelayTime_1us@i,w
 16082  1338                     u9055:	
 16083  1338  1803               	btfsc	3,0
 16084  1339  0008               	return
 16085                           
 16086                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 16087  133A  01A4               	clrf	DelayTime_1us@j
 16088  133B  01A5               	clrf	DelayTime_1us@j+1
 16089  133C  3000               	movlw	0
 16090  133D  0225               	subwf	DelayTime_1us@j+1,w
 16091  133E  3002               	movlw	2
 16092  133F  1903               	skipnz
 16093  1340  0224               	subwf	DelayTime_1us@j,w
 16094  1341  1803               	btfsc	3,0
 16095  1342  2B4E               	goto	l8708
 16096  1343                     l8706:	
 16097  1343  3001               	movlw	1
 16098  1344  07A4               	addwf	DelayTime_1us@j,f
 16099  1345  3000               	movlw	0
 16100  1346  3DA5               	addwfc	DelayTime_1us@j+1,f
 16101  1347  3000               	movlw	0
 16102  1348  0225               	subwf	DelayTime_1us@j+1,w
 16103  1349  3002               	movlw	2
 16104  134A  1903               	skipnz
 16105  134B  0224               	subwf	DelayTime_1us@j,w
 16106  134C  1C03               	skipc
 16107  134D  2B43               	goto	l8706
 16108  134E                     l8708:	
 16109  134E  3001               	movlw	1
 16110  134F  07A2               	addwf	DelayTime_1us@i,f
 16111  1350  3000               	movlw	0
 16112  1351  3DA3               	addwfc	DelayTime_1us@i+1,f
 16113  1352  2B32               	goto	l368
 16114  1353                     __end_of_DelayTime_1us:	
 16115                           
 16116                           	psect	text108
 16117  1E3D                     __ptext108:	
 16118 ;; *************** function _CC2500_ClearTXFIFO *****************
 16119 ;; Defined at:
 16120 ;;		line 187 in file "../src/CC2500_B1.c"
 16121 ;; Parameters:    Size  Location     Type
 16122 ;;		None
 16123 ;; Auto vars:     Size  Location     Type
 16124 ;;		None
 16125 ;; Return value:  Size  Location     Type
 16126 ;;		None               void
 16127 ;; Registers used:
 16128 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16129 ;; Tracked objects:
 16130 ;;		On entry : 0/0
 16131 ;;		On exit  : 0/0
 16132 ;;		Unchanged: 0/0
 16133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16137 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16138 ;;Total ram usage:        0 bytes
 16139 ;; Hardware stack levels used:    1
 16140 ;; Hardware stack levels required when called:    7
 16141 ;; This function calls:
 16142 ;;		_CC2500_WriteCommand
 16143 ;; This function is called by:
 16144 ;;		_CC2500_PowerOnInitial
 16145 ;; This function uses a non-reentrant model
 16146 ;;
 16147                           
 16148                           
 16149                           ;psect for function _CC2500_ClearTXFIFO
 16150  1E3D                     _CC2500_ClearTXFIFO:	
 16151                           
 16152                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 16153                           
 16154                           ;incstack = 0
 16155                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16156  1E3D  303B               	movlw	59
 16157  1E3E  3191  2195         	fcall	_CC2500_WriteCommand
 16158  1E40  0008               	return
 16159  1E41                     __end_of_CC2500_ClearTXFIFO:	
 16160                           
 16161                           	psect	text109
 16162  1E39                     __ptext109:	
 16163 ;; *************** function _CC2500_ClearRXFIFO *****************
 16164 ;; Defined at:
 16165 ;;		line 194 in file "../src/CC2500_B1.c"
 16166 ;; Parameters:    Size  Location     Type
 16167 ;;		None
 16168 ;; Auto vars:     Size  Location     Type
 16169 ;;		None
 16170 ;; Return value:  Size  Location     Type
 16171 ;;		None               void
 16172 ;; Registers used:
 16173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16174 ;; Tracked objects:
 16175 ;;		On entry : 0/0
 16176 ;;		On exit  : 0/0
 16177 ;;		Unchanged: 0/0
 16178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16183 ;;Total ram usage:        0 bytes
 16184 ;; Hardware stack levels used:    1
 16185 ;; Hardware stack levels required when called:    7
 16186 ;; This function calls:
 16187 ;;		_CC2500_WriteCommand
 16188 ;; This function is called by:
 16189 ;;		_CC2500_PowerOnInitial
 16190 ;; This function uses a non-reentrant model
 16191 ;;
 16192                           
 16193                           
 16194                           ;psect for function _CC2500_ClearRXFIFO
 16195  1E39                     _CC2500_ClearRXFIFO:	
 16196                           
 16197                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 16198                           
 16199                           ;incstack = 0
 16200                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16201  1E39  303A               	movlw	58
 16202  1E3A  3191  2195         	fcall	_CC2500_WriteCommand
 16203  1E3C  0008               	return
 16204  1E3D                     __end_of_CC2500_ClearRXFIFO:	
 16205                           
 16206                           	psect	text110
 16207  1195                     __ptext110:	
 16208 ;; *************** function _CC2500_WriteCommand *****************
 16209 ;; Defined at:
 16210 ;;		line 285 in file "../src/CC2500_B1.c"
 16211 ;; Parameters:    Size  Location     Type
 16212 ;;  command         1    wreg     unsigned char 
 16213 ;; Auto vars:     Size  Location     Type
 16214 ;;  command         1    3[BANK0 ] unsigned char 
 16215 ;; Return value:  Size  Location     Type
 16216 ;;		None               void
 16217 ;; Registers used:
 16218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16219 ;; Tracked objects:
 16220 ;;		On entry : 0/0
 16221 ;;		On exit  : 0/0
 16222 ;;		Unchanged: 0/0
 16223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16228 ;;Total ram usage:        2 bytes
 16229 ;; Hardware stack levels used:    1
 16230 ;; Hardware stack levels required when called:    6
 16231 ;; This function calls:
 16232 ;;		_CC2500_WriteByte
 16233 ;;		_Timeout_Counter
 16234 ;;		_set_TimeoutCleared
 16235 ;; This function is called by:
 16236 ;;		_CC2500_TxData
 16237 ;;		_CC2500_ClearTXFIFO
 16238 ;;		_CC2500_ClearRXFIFO
 16239 ;;		_CC2500_FrequencyCabr
 16240 ;;		_CC2500_SIDLEMode
 16241 ;;		_setRF_Main
 16242 ;;		_RF_RxDisable
 16243 ;; This function uses a non-reentrant model
 16244 ;;
 16245                           
 16246                           
 16247                           ;psect for function _CC2500_WriteCommand
 16248  1195                     _CC2500_WriteCommand:	
 16249                           
 16250                           ;incstack = 0
 16251                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16252                           ;CC2500_WriteCommand@command stored from wreg
 16253  1195  0020               	movlb	0	; select bank0
 16254  1196  00A3               	movwf	CC2500_WriteCommand@command
 16255                           
 16256                           ;CC2500_B1.c: 286: RC4 = 0;
 16257  1197  120E               	bcf	14,4	;volatile
 16258                           
 16259                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 16260  1198  0823               	movf	CC2500_WriteCommand@command,w
 16261  1199  00A2               	movwf	??_CC2500_WriteCommand
 16262  119A  0822               	movf	??_CC2500_WriteCommand,w
 16263  119B  0021               	movlb	1	; select bank1
 16264  119C  00D0               	movwf	_SPI0Buffer^(0+128)
 16265                           
 16266                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 16267  119D  29A1               	goto	l8438
 16268  119E                     l8436:	
 16269                           
 16270                           ;CC2500_B1.c: 290: Timeout_Counter();
 16271  119E  3190  20F8  3191   	fcall	_Timeout_Counter
 16272  11A1                     l8438:	
 16273  11A1  0020               	movlb	0	; select bank0
 16274  11A2  1D0E               	btfss	14,2	;volatile
 16275  11A3  29A7               	goto	l8442
 16276  11A4  0021               	movlb	1	; select bank1
 16277  11A5  1D2B               	btfss	(_myMain^(0+128)+11),2
 16278  11A6  299E               	goto	l8436
 16279  11A7                     l8442:	
 16280                           
 16281                           ;CC2500_B1.c: 291: };
 16282                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 16283  11A7  319E  2649  3191   	fcall	_set_TimeoutCleared
 16284                           
 16285                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 16286  11AA  3191  2163         	fcall	_CC2500_WriteByte
 16287                           
 16288                           ;CC2500_B1.c: 295: RC4 = 1;
 16289  11AC  0020               	movlb	0	; select bank0
 16290  11AD  160E               	bsf	14,4	;volatile
 16291  11AE  0008               	return
 16292  11AF                     __end_of_CC2500_WriteCommand:	
 16293                           
 16294                           	psect	text111
 16295  1E49                     __ptext111:	
 16296 ;; *************** function _set_TimeoutCleared *****************
 16297 ;; Defined at:
 16298 ;;		line 283 in file "../src/Main_B1.c"
 16299 ;; Parameters:    Size  Location     Type
 16300 ;;		None
 16301 ;; Auto vars:     Size  Location     Type
 16302 ;;		None
 16303 ;; Return value:  Size  Location     Type
 16304 ;;		None               void
 16305 ;; Registers used:
 16306 ;;		status,2
 16307 ;; Tracked objects:
 16308 ;;		On entry : 0/0
 16309 ;;		On exit  : 0/0
 16310 ;;		Unchanged: 0/0
 16311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16316 ;;Total ram usage:        0 bytes
 16317 ;; Hardware stack levels used:    1
 16318 ;; Hardware stack levels required when called:    5
 16319 ;; This function calls:
 16320 ;;		Nothing
 16321 ;; This function is called by:
 16322 ;;		_CC2500_TxData
 16323 ;;		_CC2500_RxData
 16324 ;;		_CC2500_PowerRST
 16325 ;;		_CC2500_WriteREG
 16326 ;;		_CC2500_WriteCommand
 16327 ;;		_CC2500_ReadStatus
 16328 ;;		_getAD
 16329 ;;		_TouchPower
 16330 ;;		_CC2500_ReadREG
 16331 ;; This function uses a non-reentrant model
 16332 ;;
 16333                           
 16334                           
 16335                           ;psect for function _set_TimeoutCleared
 16336  1E49                     _set_TimeoutCleared:	
 16337                           
 16338                           ;Main_B1.c: 284: myMain.Timeout = 0;
 16339                           
 16340                           ;incstack = 0
 16341                           ; Regs used in _set_TimeoutCleared: [status,2]
 16342  1E49  0021               	movlb	1	; select bank1
 16343  1E4A  112B               	bcf	(_myMain^(0+128)+11),2
 16344                           
 16345                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 16346  1E4B  01AC               	clrf	(_myMain^(0+128)+12)
 16347  1E4C  01AD               	clrf	((_myMain+1)^(0+128)+12)
 16348  1E4D  0008               	return
 16349  1E4E                     __end_of_set_TimeoutCleared:	
 16350                           
 16351                           	psect	text112
 16352  10F8                     __ptext112:	
 16353 ;; *************** function _Timeout_Counter *****************
 16354 ;; Defined at:
 16355 ;;		line 274 in file "../src/Main_B1.c"
 16356 ;; Parameters:    Size  Location     Type
 16357 ;;		None
 16358 ;; Auto vars:     Size  Location     Type
 16359 ;;		None
 16360 ;; Return value:  Size  Location     Type
 16361 ;;		None               void
 16362 ;; Registers used:
 16363 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16364 ;; Tracked objects:
 16365 ;;		On entry : 0/0
 16366 ;;		On exit  : 0/0
 16367 ;;		Unchanged: 0/0
 16368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16373 ;;Total ram usage:        0 bytes
 16374 ;; Hardware stack levels used:    1
 16375 ;; Hardware stack levels required when called:    5
 16376 ;; This function calls:
 16377 ;;		Nothing
 16378 ;; This function is called by:
 16379 ;;		_CC2500_TxData
 16380 ;;		_CC2500_RxData
 16381 ;;		_CC2500_PowerRST
 16382 ;;		_CC2500_WriteREG
 16383 ;;		_CC2500_WriteCommand
 16384 ;;		_CC2500_ReadStatus
 16385 ;;		_getAD
 16386 ;;		_TouchPower
 16387 ;;		_CC2500_ReadREG
 16388 ;; This function uses a non-reentrant model
 16389 ;;
 16390                           
 16391                           
 16392                           ;psect for function _Timeout_Counter
 16393  10F8                     _Timeout_Counter:	
 16394                           
 16395                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 16396                           
 16397                           ;incstack = 0
 16398                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16399  10F8  3001               	movlw	1
 16400  10F9  0021               	movlb	1	; select bank1
 16401  10FA  07AC               	addwf	(_myMain^(0+128)+12),f
 16402  10FB  3000               	movlw	0
 16403  10FC  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 16404                           
 16405                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 16406  10FD  300C               	movlw	12
 16407  10FE  3EA0               	addlw	_myMain& (0+255)
 16408  10FF  0086               	movwf	6
 16409  1100  0187               	clrf	7
 16410  1101  3F40               	moviw [0]fsr1
 16411  1102  3A10               	xorlw	16
 16412  1103  1D03               	skipz
 16413  1104  2907               	goto	u8465
 16414  1105  3F41               	moviw [1]fsr1
 16415  1106  3A27               	xorlw	39
 16416  1107                     u8465:	
 16417  1107  1D03               	skipz
 16418  1108  0008               	return
 16419                           
 16420                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 16421  1109  01AC               	clrf	(_myMain^(0+128)+12)
 16422  110A  01AD               	clrf	((_myMain+1)^(0+128)+12)
 16423                           
 16424                           ;Main_B1.c: 278: myMain.Timeout = 1;
 16425  110B  152B               	bsf	(_myMain^(0+128)+11),2
 16426  110C  0008               	return
 16427  110D                     __end_of_Timeout_Counter:	
 16428                           
 16429                           	psect	text113
 16430  1163                     __ptext113:	
 16431 ;; *************** function _CC2500_WriteByte *****************
 16432 ;; Defined at:
 16433 ;;		line 219 in file "../src/CC2500_B1.c"
 16434 ;; Parameters:    Size  Location     Type
 16435 ;;		None
 16436 ;; Auto vars:     Size  Location     Type
 16437 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16438 ;; Return value:  Size  Location     Type
 16439 ;;		None               void
 16440 ;; Registers used:
 16441 ;;		wreg, status,2, status,0
 16442 ;; Tracked objects:
 16443 ;;		On entry : 0/0
 16444 ;;		On exit  : 0/0
 16445 ;;		Unchanged: 0/0
 16446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16448 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16449 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16450 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16451 ;;Total ram usage:        2 bytes
 16452 ;; Hardware stack levels used:    1
 16453 ;; Hardware stack levels required when called:    5
 16454 ;; This function calls:
 16455 ;;		Nothing
 16456 ;; This function is called by:
 16457 ;;		_CC2500_TxData
 16458 ;;		_CC2500_RxData
 16459 ;;		_CC2500_PowerRST
 16460 ;;		_CC2500_WriteREG
 16461 ;;		_CC2500_WriteCommand
 16462 ;;		_CC2500_ReadStatus
 16463 ;;		_CC2500_ReadREG
 16464 ;; This function uses a non-reentrant model
 16465 ;;
 16466                           
 16467                           
 16468                           ;psect for function _CC2500_WriteByte
 16469  1163                     _CC2500_WriteByte:	
 16470                           
 16471                           ;CC2500_B1.c: 220: unsigned char loop_a;
 16472                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 16473                           
 16474                           ;incstack = 0
 16475                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16476  1163  0020               	movlb	0	; select bank0
 16477  1164  01A1               	clrf	CC2500_WriteByte@loop_a
 16478  1165                     L7:	
 16479  1165  3008               	movlw	8
 16480  1166  0221               	subwf	CC2500_WriteByte@loop_a,w
 16481  1167  1803               	btfsc	3,0
 16482  1168  0008               	return
 16483                           
 16484                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 16485  1169  0021               	movlb	1	; select bank1
 16486  116A  1FD0               	btfss	_SPI0Buffer^(0+128),7
 16487  116B  296F               	goto	l324
 16488                           
 16489                           ;CC2500_B1.c: 223: RC0 = 1;
 16490  116C  0020               	movlb	0	; select bank0
 16491  116D  140E               	bsf	14,0	;volatile
 16492  116E  2971               	goto	l325
 16493  116F                     l324:	
 16494                           
 16495                           ;CC2500_B1.c: 224: else
 16496                           ;CC2500_B1.c: 225: RC0 = 0;
 16497  116F  0020               	movlb	0	; select bank0
 16498  1170  100E               	bcf	14,0	;volatile
 16499  1171                     l325:	
 16500                           
 16501                           ;CC2500_B1.c: 226: RC1 = 1;
 16502  1171  148E               	bsf	14,1	;volatile
 16503                           
 16504                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 16505  1172  1003               	clrc
 16506  1173  0021               	movlb	1	; select bank1
 16507  1174  0DD0               	rlf	_SPI0Buffer^(0+128),f
 16508                           
 16509                           ;CC2500_B1.c: 228: RC1 = 0;
 16510  1175  0020               	movlb	0	; select bank0
 16511  1176  108E               	bcf	14,1	;volatile
 16512  1177  3001               	movlw	1
 16513  1178  00A0               	movwf	??_CC2500_WriteByte
 16514  1179  0820               	movf	??_CC2500_WriteByte,w
 16515  117A  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16516  117B  2965               	goto	L7
 16517  117C                     __end_of_CC2500_WriteByte:	
 16518                           
 16519                           	psect	text114
 16520  0801                     __ptext114:	
 16521 ;; *************** function _Buzzer_Main *****************
 16522 ;; Defined at:
 16523 ;;		line 46 in file "../src/Buzzer_B1.c"
 16524 ;; Parameters:    Size  Location     Type
 16525 ;;		None
 16526 ;; Auto vars:     Size  Location     Type
 16527 ;;		None
 16528 ;; Return value:  Size  Location     Type
 16529 ;;		None               void
 16530 ;; Registers used:
 16531 ;;		wreg, status,2, status,0
 16532 ;; Tracked objects:
 16533 ;;		On entry : 0/0
 16534 ;;		On exit  : 0/0
 16535 ;;		Unchanged: 0/0
 16536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16539 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16540 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16541 ;;Total ram usage:        1 bytes
 16542 ;; Hardware stack levels used:    1
 16543 ;; Hardware stack levels required when called:    5
 16544 ;; This function calls:
 16545 ;;		Nothing
 16546 ;; This function is called by:
 16547 ;;		_main
 16548 ;; This function uses a non-reentrant model
 16549 ;;
 16550                           
 16551                           
 16552                           ;psect for function _Buzzer_Main
 16553  0801                     _Buzzer_Main:	
 16554                           
 16555                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16556                           
 16557                           ;incstack = 0
 16558                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16559  0801  0021               	movlb	1	; select bank1
 16560  0802  1CAE               	btfss	_Buz1^(0+128),1
 16561  0803  0008               	return
 16562                           
 16563                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16564  0804  3001               	movlw	1
 16565  0805  07AF               	addwf	(_Buz1^(0+128)+1),f
 16566  0806  3000               	movlw	0
 16567  0807  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 16568                           
 16569                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16570  0808  0835               	movf	((_Buz1+1)^(0+128)+6),w
 16571  0809  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 16572  080A  1D03               	skipz
 16573  080B  280E               	goto	u10365
 16574  080C  0834               	movf	(_Buz1^(0+128)+6),w
 16575  080D  022F               	subwf	(_Buz1^(0+128)+1),w
 16576  080E                     u10365:	
 16577  080E  1C03               	skipc
 16578  080F  0008               	return
 16579                           
 16580                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16581  0810  01AF               	clrf	(_Buz1^(0+128)+1)
 16582  0811  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16583                           
 16584                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16585  0812  12AE               	bcf	_Buz1^(0+128),5
 16586  0813  0020               	movlb	0	; select bank0
 16587  0814  1D8D               	btfss	13,3	;volatile
 16588  0815  2818               	goto	l9524
 16589  0816  0021               	movlb	1	; select bank1
 16590  0817  16AE               	bsf	_Buz1^(0+128),5
 16591  0818                     l9524:	
 16592                           
 16593                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16594  0818  0021               	movlb	1	; select bank1
 16595  0819  1AAE               	btfsc	_Buz1^(0+128),5
 16596  081A  2844               	goto	l104
 16597                           
 16598                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16599  081B  08B1               	movf	(_Buz1^(0+128)+3),f
 16600  081C  1D03               	skipz
 16601  081D  2840               	goto	l105
 16602                           
 16603                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16604  081E  1DAE               	btfss	_Buz1^(0+128),3
 16605  081F  282E               	goto	l106
 16606                           
 16607                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 16608  0820  11AE               	bcf	_Buz1^(0+128),3
 16609                           
 16610                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 16611  0821  0832               	movf	(_Buz1^(0+128)+4),w
 16612  0822  0020               	movlb	0	; select bank0
 16613  0823  00A0               	movwf	??_Buzzer_Main
 16614  0824  0820               	movf	??_Buzzer_Main,w
 16615  0825  0021               	movlb	1	; select bank1
 16616  0826  00B1               	movwf	(_Buz1^(0+128)+3)
 16617                           
 16618                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 16619  0827  0837               	movf	((_Buz1+1)^(0+128)+8),w
 16620  0828  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16621  0829  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16622  082A  0836               	movf	(_Buz1^(0+128)+8),w
 16623  082B  01B4               	clrf	(_Buz1^(0+128)+6)
 16624  082C  07B4               	addwf	(_Buz1^(0+128)+6),f
 16625                           
 16626                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 16627  082D  0008               	return
 16628  082E                     l106:	
 16629  082E  1E2E               	btfss	_Buz1^(0+128),4
 16630  082F  283E               	goto	l108
 16631                           
 16632                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 16633  0830  122E               	bcf	_Buz1^(0+128),4
 16634                           
 16635                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 16636  0831  0833               	movf	(_Buz1^(0+128)+5),w
 16637  0832  0020               	movlb	0	; select bank0
 16638  0833  00A0               	movwf	??_Buzzer_Main
 16639  0834  0820               	movf	??_Buzzer_Main,w
 16640  0835  0021               	movlb	1	; select bank1
 16641  0836  00B1               	movwf	(_Buz1^(0+128)+3)
 16642                           
 16643                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 16644  0837  0839               	movf	((_Buz1+1)^(0+128)+10),w
 16645  0838  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16646  0839  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16647  083A  0838               	movf	(_Buz1^(0+128)+10),w
 16648  083B  01B4               	clrf	(_Buz1^(0+128)+6)
 16649  083C  07B4               	addwf	(_Buz1^(0+128)+6),f
 16650                           
 16651                           ;Buzzer_B1.c: 62: } else {
 16652  083D  0008               	return
 16653  083E                     l108:	
 16654                           
 16655                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 16656  083E  10AE               	bcf	_Buz1^(0+128),1
 16657                           
 16658                           ;Buzzer_B1.c: 64: }
 16659                           ;Buzzer_B1.c: 65: } else {
 16660  083F  0008               	return
 16661  0840                     l105:	
 16662                           
 16663                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 16664  0840  16AE               	bsf	_Buz1^(0+128),5
 16665                           
 16666                           ;Buzzer_B1.c: 68: RB3 = 1;
 16667  0841  0020               	movlb	0	; select bank0
 16668  0842  158D               	bsf	13,3	;volatile
 16669                           
 16670                           ;Buzzer_B1.c: 69: }
 16671                           ;Buzzer_B1.c: 70: } else {
 16672  0843  0008               	return
 16673  0844                     l104:	
 16674                           
 16675                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 16676  0844  12AE               	bcf	_Buz1^(0+128),5
 16677                           
 16678                           ;Buzzer_B1.c: 73: RB3 = 0;
 16679  0845  0020               	movlb	0	; select bank0
 16680  0846  118D               	bcf	13,3	;volatile
 16681                           
 16682                           ;Buzzer_B1.c: 75: Buz1.Count--;
 16683  0847  3001               	movlw	1
 16684  0848  0021               	movlb	1	; select bank1
 16685  0849  02B1               	subwf	(_Buz1^(0+128)+3),f
 16686  084A  0008               	return
 16687  084B                     __end_of_Buzzer_Main:	
 16688                           
 16689                           	psect	text115
 16690  1E2A                     __ptext115:	
 16691 ;; *************** function _Buzzer_Initialization *****************
 16692 ;; Defined at:
 16693 ;;		line 11 in file "../src/Buzzer_B1.c"
 16694 ;; Parameters:    Size  Location     Type
 16695 ;;		None
 16696 ;; Auto vars:     Size  Location     Type
 16697 ;;		None
 16698 ;; Return value:  Size  Location     Type
 16699 ;;		None               void
 16700 ;; Registers used:
 16701 ;;		None
 16702 ;; Tracked objects:
 16703 ;;		On entry : 0/0
 16704 ;;		On exit  : 0/0
 16705 ;;		Unchanged: 0/0
 16706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16711 ;;Total ram usage:        0 bytes
 16712 ;; Hardware stack levels used:    1
 16713 ;; Hardware stack levels required when called:    5
 16714 ;; This function calls:
 16715 ;;		Nothing
 16716 ;; This function is called by:
 16717 ;;		_main
 16718 ;; This function uses a non-reentrant model
 16719 ;;
 16720                           
 16721                           
 16722                           ;psect for function _Buzzer_Initialization
 16723  1E2A                     _Buzzer_Initialization:	
 16724                           
 16725                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 16726                           
 16727                           ;incstack = 0
 16728                           ; Regs used in _Buzzer_Initialization: []
 16729  1E2A  0021               	movlb	1	; select bank1
 16730  1E2B  142E               	bsf	_Buz1^(0+128),0
 16731  1E2C  0008               	return
 16732  1E2D                     __end_of_Buzzer_Initialization:	
 16733                           
 16734                           	psect	intentry
 16735  0004                     __pintentry:	
 16736 ;; *************** function _ISR *****************
 16737 ;; Defined at:
 16738 ;;		line 107 in file "../src/MCU_B1.c"
 16739 ;; Parameters:    Size  Location     Type
 16740 ;;		None
 16741 ;; Auto vars:     Size  Location     Type
 16742 ;;		None
 16743 ;; Return value:  Size  Location     Type
 16744 ;;		None               void
 16745 ;; Registers used:
 16746 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16747 ;; Tracked objects:
 16748 ;;		On entry : 0/0
 16749 ;;		On exit  : 0/0
 16750 ;;		Unchanged: 0/0
 16751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16754 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16755 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16756 ;;Total ram usage:        1 bytes
 16757 ;; Hardware stack levels used:    1
 16758 ;; Hardware stack levels required when called:    4
 16759 ;; This function calls:
 16760 ;;		_IOC_ISR
 16761 ;;		_TMR1_ISR
 16762 ;; This function is called by:
 16763 ;;		Interrupt level 1
 16764 ;; This function uses a non-reentrant model
 16765 ;;
 16766                           
 16767  0004                     _ISR:	
 16768                           
 16769                           ;incstack = 0
 16770                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16771  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16772  0005  3180               	pagesel	$
 16773  0006  0020               	movlb	0	; select bank0
 16774  0007  087F               	movf	127,w
 16775  0008  00F4               	movwf	??_ISR
 16776                           
 16777                           ;MCU_B1.c: 109: IOC_ISR();
 16778  0009  319F  2722  3180   	fcall	_IOC_ISR
 16779                           
 16780                           ;MCU_B1.c: 111: ;;
 16781                           ;MCU_B1.c: 113: TMR1_ISR();
 16782  000C  3193  237A         	fcall	_TMR1_ISR
 16783  000E  0874               	movf	??_ISR,w
 16784  000F  0020               	movlb	0	; select bank0
 16785  0010  00FF               	movwf	127
 16786  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 16787  0012  0009               	retfie
 16788  0013                     __end_of_ISR:	
 16789                           
 16790                           	psect	text117
 16791  137A                     __ptext117:	
 16792 ;; *************** function _TMR1_ISR *****************
 16793 ;; Defined at:
 16794 ;;		line 209 in file "../src/MCU_B1.c"
 16795 ;; Parameters:    Size  Location     Type
 16796 ;;		None
 16797 ;; Auto vars:     Size  Location     Type
 16798 ;;		None
 16799 ;; Return value:  Size  Location     Type
 16800 ;;		None               void
 16801 ;; Registers used:
 16802 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16803 ;; Tracked objects:
 16804 ;;		On entry : 0/0
 16805 ;;		On exit  : 0/0
 16806 ;;		Unchanged: 0/0
 16807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16812 ;;Total ram usage:        0 bytes
 16813 ;; Hardware stack levels used:    1
 16814 ;; Hardware stack levels required when called:    2
 16815 ;; This function calls:
 16816 ;;		_setDimmerLights_IntrControl
 16817 ;; This function is called by:
 16818 ;;		_ISR
 16819 ;; This function uses a non-reentrant model
 16820 ;;
 16821                           
 16822                           
 16823                           ;psect for function _TMR1_ISR
 16824  137A                     _TMR1_ISR:	
 16825                           
 16826                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 16827                           
 16828                           ;incstack = 0
 16829                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16830  137A  0021               	movlb	1	; select bank1
 16831  137B  1C11               	btfss	17,0	;volatile
 16832  137C  0008               	return
 16833  137D  0020               	movlb	0	; select bank0
 16834  137E  1C11               	btfss	17,0	;volatile
 16835  137F  0008               	return
 16836                           
 16837                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 16838  1380  30FA               	movlw	250
 16839  1381  0097               	movwf	23	;volatile
 16840                           
 16841                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 16842  1382  3038               	movlw	56
 16843  1383  0096               	movwf	22	;volatile
 16844                           
 16845                           ;MCU_B1.c: 214: TMR1IF = 0;
 16846  1384  1011               	bcf	17,0	;volatile
 16847                           
 16848                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 16849  1385  3001               	movlw	1
 16850  1386  3182  22A9  3193   	fcall	_setDimmerLights_IntrControl
 16851                           
 16852                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 16853  1389  3002               	movlw	2
 16854  138A  3182  22A9  3193   	fcall	_setDimmerLights_IntrControl
 16855                           
 16856                           ;MCU_B1.c: 234: Timer1.Count++;
 16857  138D  3001               	movlw	1
 16858  138E  0022               	movlb	2	; select bank2
 16859  138F  07C2               	addwf	(_Timer1^(0+256)+1),f
 16860  1390  3000               	movlw	0
 16861  1391  3DC3               	addwfc	((_Timer1+1)^(0+256)+1),f
 16862                           
 16863                           ;MCU_B1.c: 235: if (Timer1.Count == 100) {
 16864  1392  3001               	movlw	1
 16865  1393  3E41               	addlw	_Timer1& (0+255)
 16866  1394  0086               	movwf	6
 16867  1395  3001               	movlw	1	; select bank2/3
 16868  1396  0087               	movwf	7
 16869  1397  3F40               	moviw [0]fsr1
 16870  1398  3A64               	xorlw	100
 16871  1399  1D03               	skipz
 16872  139A  2B9D               	goto	u701_25
 16873  139B  3F41               	moviw [1]fsr1
 16874  139C  3A00               	xorlw	0
 16875  139D                     u701_25:	
 16876  139D  1D03               	skipz
 16877  139E  0008               	return
 16878                           
 16879                           ;MCU_B1.c: 236: Timer1.Count = 0;
 16880  139F  01C2               	clrf	(_Timer1^(0+256)+1)
 16881  13A0  01C3               	clrf	((_Timer1+1)^(0+256)+1)
 16882                           
 16883                           ;MCU_B1.c: 237: Timer1.Timeout = 1;
 16884  13A1  1441               	bsf	_Timer1^(0+256),0
 16885  13A2  0008               	return
 16886  13A3                     __end_of_TMR1_ISR:	
 16887                           
 16888                           	psect	text118
 16889  02A9                     __ptext118:	
 16890 ;; *************** function _setDimmerLights_IntrControl *****************
 16891 ;; Defined at:
 16892 ;;		line 99 in file "../src/Dimmer_B1.c"
 16893 ;; Parameters:    Size  Location     Type
 16894 ;;  lights          1    wreg     unsigned char 
 16895 ;; Auto vars:     Size  Location     Type
 16896 ;;  lights          1    3[COMMON] unsigned char 
 16897 ;; Return value:  Size  Location     Type
 16898 ;;		None               void
 16899 ;; Registers used:
 16900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16901 ;; Tracked objects:
 16902 ;;		On entry : 0/0
 16903 ;;		On exit  : 0/0
 16904 ;;		Unchanged: 0/0
 16905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16907 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16908 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16909 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16910 ;;Total ram usage:        2 bytes
 16911 ;; Hardware stack levels used:    1
 16912 ;; Hardware stack levels required when called:    1
 16913 ;; This function calls:
 16914 ;;		_DimmerIntrPointSelect
 16915 ;; This function is called by:
 16916 ;;		_TMR1_ISR
 16917 ;; This function uses a non-reentrant model
 16918 ;;
 16919                           
 16920                           
 16921                           ;psect for function _setDimmerLights_IntrControl
 16922  02A9                     _setDimmerLights_IntrControl:	
 16923                           
 16924                           ;incstack = 0
 16925                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16926                           ;setDimmerLights_IntrControl@lights stored from wreg
 16927  02A9  00F3               	movwf	setDimmerLights_IntrControl@lights
 16928                           
 16929                           ;Dimmer_B1.c: 237: DimmerIntrPointSelect(lights);
 16930  02AA  0873               	movf	setDimmerLights_IntrControl@lights,w
 16931  02AB  319F  2793  3182   	fcall	_DimmerIntrPointSelect
 16932                           
 16933                           ;Dimmer_B1.c: 238: DimmerLightsIntr->Count++;
 16934  02AE  3001               	movlw	1
 16935  02AF  00F2               	movwf	??_setDimmerLights_IntrControl
 16936  02B0  0876               	movf	_DimmerLightsIntr,w
 16937  02B1  3E03               	addlw	3
 16938  02B2  0086               	movwf	6
 16939  02B3  3001               	movlw	1	; select bank2/3
 16940  02B4  0087               	movwf	7
 16941  02B5  0872               	movf	??_setDimmerLights_IntrControl,w
 16942  02B6  0781               	addwf	1,f
 16943                           
 16944                           ;Dimmer_B1.c: 239: if (DimmerLightsIntr->GO == 1) {
 16945  02B7  0A76               	incf	_DimmerLightsIntr,w
 16946  02B8  0086               	movwf	6
 16947  02B9  3001               	movlw	1	; select bank2/3
 16948  02BA  0087               	movwf	7
 16949  02BB  1C01               	btfss	1,0
 16950  02BC  2AF4               	goto	i1l6796
 16951                           
 16952                           ;Dimmer_B1.c: 240: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 16953  02BD  0876               	movf	_DimmerLightsIntr,w
 16954  02BE  3E03               	addlw	3
 16955  02BF  0086               	movwf	6
 16956  02C0  3001               	movlw	1	; select bank2/3
 16957  02C1  0087               	movwf	7
 16958  02C2  0876               	movf	_DimmerLightsIntr,w
 16959  02C3  3E04               	addlw	4
 16960  02C4  0084               	movwf	4
 16961  02C5  3001               	movlw	1	; select bank2/3
 16962  02C6  0085               	movwf	5
 16963  02C7  0800               	movf	0,w
 16964  02C8  0201               	subwf	1,w
 16965  02C9  1C03               	skipc
 16966  02CA  0008               	return
 16967                           
 16968                           ;Dimmer_B1.c: 241: DimmerLightsIntr->Count = 0;
 16969  02CB  0876               	movf	_DimmerLightsIntr,w
 16970  02CC  3E03               	addlw	3
 16971  02CD  0086               	movwf	6
 16972  02CE  3001               	movlw	1	; select bank2/3
 16973  02CF  0087               	movwf	7
 16974  02D0  0181               	clrf	1
 16975                           
 16976                           ;Dimmer_B1.c: 242: DimmerLightsIntr->GO = 0;
 16977  02D1  0A76               	incf	_DimmerLightsIntr,w
 16978  02D2  0086               	movwf	6
 16979  02D3  3001               	movlw	1	; select bank2/3
 16980  02D4  0087               	movwf	7
 16981  02D5  1001               	bcf	1,0
 16982                           
 16983                           ;Dimmer_B1.c: 243: DimmerLightsIntr->Flag = 1;
 16984  02D6  0A76               	incf	_DimmerLightsIntr,w
 16985  02D7  0086               	movwf	6
 16986  02D8  3001               	movlw	1	; select bank2/3
 16987  02D9  0087               	movwf	7
 16988  02DA  1581               	bsf	1,3
 16989                           
 16990                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->MOSFET == 1) {
 16991  02DB  0876               	movf	_DimmerLightsIntr,w
 16992  02DC  0086               	movwf	6
 16993  02DD  3001               	movlw	1	; select bank2/3
 16994  02DE  0087               	movwf	7
 16995  02DF  1C01               	btfss	1,0
 16996  02E0  0008               	return
 16997                           
 16998                           ;Dimmer_B1.c: 246: DimmerLightsIntr->MOSFET = 0;
 16999  02E1  0876               	movf	_DimmerLightsIntr,w
 17000  02E2  0086               	movwf	6
 17001  02E3  3001               	movlw	1	; select bank2/3
 17002  02E4  0087               	movwf	7
 17003  02E5  1001               	bcf	1,0
 17004                           
 17005                           ;Dimmer_B1.c: 248: if (lights == 1) {
 17006  02E6  0873               	movf	setDimmerLights_IntrControl@lights,w
 17007  02E7  3A01               	xorlw	1
 17008  02E8  1D03               	skipz
 17009  02E9  2AED               	goto	i1l6792
 17010                           
 17011                           ;Dimmer_B1.c: 249: RA7 = 0;
 17012  02EA  0020               	movlb	0	; select bank0
 17013  02EB  138C               	bcf	12,7	;volatile
 17014                           
 17015                           ;Dimmer_B1.c: 251: }
 17016  02EC  0008               	return
 17017  02ED                     i1l6792:	
 17018                           
 17019                           ;Dimmer_B1.c: 254: else if (lights == 2) {
 17020  02ED  0873               	movf	setDimmerLights_IntrControl@lights,w
 17021  02EE  3A02               	xorlw	2
 17022  02EF  1D03               	skipz
 17023  02F0  0008               	return
 17024                           
 17025                           ;Dimmer_B1.c: 255: RB4 = 0;
 17026  02F1  0020               	movlb	0	; select bank0
 17027  02F2  120D               	bcf	13,4	;volatile
 17028                           
 17029                           ;Dimmer_B1.c: 256: }
 17030                           ;Dimmer_B1.c: 258: }
 17031                           ;Dimmer_B1.c: 259: }
 17032                           ;Dimmer_B1.c: 260: } else {
 17033  02F3  0008               	return
 17034  02F4                     i1l6796:	
 17035                           
 17036                           ;Dimmer_B1.c: 261: if (DimmerLightsIntr->Flag == 1) {
 17037  02F4  0A76               	incf	_DimmerLightsIntr,w
 17038  02F5  0086               	movwf	6
 17039  02F6  3001               	movlw	1	; select bank2/3
 17040  02F7  0087               	movwf	7
 17041  02F8  1D81               	btfss	1,3
 17042  02F9  0008               	return
 17043                           
 17044                           ;Dimmer_B1.c: 262: DimmerLightsIntr->Flag = 0;
 17045  02FA  0A76               	incf	_DimmerLightsIntr,w
 17046  02FB  0086               	movwf	6
 17047  02FC  3001               	movlw	1	; select bank2/3
 17048  02FD  0087               	movwf	7
 17049  02FE  1181               	bcf	1,3
 17050                           
 17051                           ;Dimmer_B1.c: 263: DimmerLightsIntr->DimmingTime++;
 17052  02FF  3001               	movlw	1
 17053  0300  00F2               	movwf	??_setDimmerLights_IntrControl
 17054  0301  0876               	movf	_DimmerLightsIntr,w
 17055  0302  3E05               	addlw	5
 17056  0303  0086               	movwf	6
 17057  0304  3001               	movlw	1	; select bank2/3
 17058  0305  0087               	movwf	7
 17059  0306  0872               	movf	??_setDimmerLights_IntrControl,w
 17060  0307  0781               	addwf	1,f
 17061                           
 17062                           ;Dimmer_B1.c: 264: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17063  0308  0876               	movf	_DimmerLightsIntr,w
 17064  0309  3E05               	addlw	5
 17065  030A  0086               	movwf	6
 17066  030B  3001               	movlw	1	; select bank2/3
 17067  030C  0087               	movwf	7
 17068  030D  0876               	movf	_DimmerLightsIntr,w
 17069  030E  3E08               	addlw	8
 17070  030F  0084               	movwf	4
 17071  0310  3001               	movlw	1	; select bank2/3
 17072  0311  0085               	movwf	5
 17073  0312  0800               	movf	0,w
 17074  0313  0201               	subwf	1,w
 17075  0314  1C03               	skipc
 17076  0315  2B58               	goto	i1l6822
 17077                           
 17078                           ;Dimmer_B1.c: 265: DimmerLightsIntr->DimmingTime = 0;
 17079  0316  0876               	movf	_DimmerLightsIntr,w
 17080  0317  3E05               	addlw	5
 17081  0318  0086               	movwf	6
 17082  0319  3001               	movlw	1	; select bank2/3
 17083  031A  0087               	movwf	7
 17084  031B  0181               	clrf	1
 17085                           
 17086                           ;Dimmer_B1.c: 266: if (DimmerLightsIntr->AdjSw == 1) {
 17087  031C  0A76               	incf	_DimmerLightsIntr,w
 17088  031D  0086               	movwf	6
 17089  031E  3001               	movlw	1	; select bank2/3
 17090  031F  0087               	movwf	7
 17091  0320  1F01               	btfss	1,6
 17092  0321  0008               	return
 17093                           
 17094                           ;Dimmer_B1.c: 267: if (DimmerLightsIntr->AdjStatus == 0) {
 17095  0322  0A76               	incf	_DimmerLightsIntr,w
 17096  0323  0086               	movwf	6
 17097  0324  3001               	movlw	1	; select bank2/3
 17098  0325  0087               	movwf	7
 17099  0326  1B81               	btfsc	1,7
 17100  0327  2B41               	goto	i1l6816
 17101                           
 17102                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingValue < ((char)(75*0.8))) {
 17103  0328  0876               	movf	_DimmerLightsIntr,w
 17104  0329  3E04               	addlw	4
 17105  032A  0086               	movwf	6
 17106  032B  3001               	movlw	1	; select bank2/3
 17107  032C  0087               	movwf	7
 17108  032D  303C               	movlw	60
 17109  032E  0201               	subwf	1,w
 17110  032F  1803               	skipnc
 17111  0330  2B3B               	goto	i1l6814
 17112                           
 17113                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingValue++;
 17114  0331  3001               	movlw	1
 17115  0332  00F2               	movwf	??_setDimmerLights_IntrControl
 17116  0333  0876               	movf	_DimmerLightsIntr,w
 17117  0334  3E04               	addlw	4
 17118  0335  0086               	movwf	6
 17119  0336  3001               	movlw	1	; select bank2/3
 17120  0337  0087               	movwf	7
 17121  0338  0872               	movf	??_setDimmerLights_IntrControl,w
 17122  0339  0781               	addwf	1,f
 17123                           
 17124                           ;Dimmer_B1.c: 270: } else {
 17125  033A  0008               	return
 17126  033B                     i1l6814:	
 17127                           
 17128                           ;Dimmer_B1.c: 271: DimmerLightsIntr->AdjStatus = 1;
 17129  033B  0A76               	incf	_DimmerLightsIntr,w
 17130  033C  0086               	movwf	6
 17131  033D  3001               	movlw	1	; select bank2/3
 17132  033E  0087               	movwf	7
 17133  033F  1781               	bsf	1,7
 17134                           
 17135                           ;Dimmer_B1.c: 272: }
 17136                           ;Dimmer_B1.c: 273: } else {
 17137  0340  0008               	return
 17138  0341                     i1l6816:	
 17139                           
 17140                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 17141  0341  0876               	movf	_DimmerLightsIntr,w
 17142  0342  3E04               	addlw	4
 17143  0343  0086               	movwf	6
 17144  0344  3001               	movlw	1	; select bank2/3
 17145  0345  0087               	movwf	7
 17146  0346  300D               	movlw	13
 17147  0347  0201               	subwf	1,w
 17148  0348  1C03               	skipc
 17149  0349  2B52               	goto	i1l6820
 17150                           
 17151                           ;Dimmer_B1.c: 275: DimmerLightsIntr->DimmingValue--;
 17152  034A  0876               	movf	_DimmerLightsIntr,w
 17153  034B  3E04               	addlw	4
 17154  034C  0086               	movwf	6
 17155  034D  3001               	movlw	1	; select bank2/3
 17156  034E  0087               	movwf	7
 17157  034F  3001               	movlw	1
 17158  0350  0281               	subwf	1,f
 17159                           
 17160                           ;Dimmer_B1.c: 276: } else
 17161  0351  0008               	return
 17162  0352                     i1l6820:	
 17163                           
 17164                           ;Dimmer_B1.c: 277: DimmerLightsIntr->AdjStatus = 0;
 17165  0352  0A76               	incf	_DimmerLightsIntr,w
 17166  0353  0086               	movwf	6
 17167  0354  3001               	movlw	1	; select bank2/3
 17168  0355  0087               	movwf	7
 17169  0356  1381               	bcf	1,7
 17170                           
 17171                           ;Dimmer_B1.c: 278: }
 17172                           ;Dimmer_B1.c: 279: }
 17173                           ;Dimmer_B1.c: 280: } else if (DimmerLightsIntr->AdjRF == 1) {
 17174  0357  0008               	return
 17175  0358                     i1l6822:	
 17176  0358  0876               	movf	_DimmerLightsIntr,w
 17177  0359  3E02               	addlw	2
 17178  035A  0086               	movwf	6
 17179  035B  3001               	movlw	1	; select bank2/3
 17180  035C  0087               	movwf	7
 17181  035D  1C01               	btfss	1,0
 17182  035E  0008               	return
 17183                           
 17184                           ;Dimmer_B1.c: 281: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 17185  035F  0876               	movf	_DimmerLightsIntr,w
 17186  0360  3E04               	addlw	4
 17187  0361  0086               	movwf	6
 17188  0362  3001               	movlw	1	; select bank2/3
 17189  0363  0087               	movwf	7
 17190  0364  0876               	movf	_DimmerLightsIntr,w
 17191  0365  3E06               	addlw	6
 17192  0366  0084               	movwf	4
 17193  0367  3001               	movlw	1	; select bank2/3
 17194  0368  0085               	movwf	5
 17195  0369  0800               	movf	0,w
 17196  036A  0201               	subwf	1,w
 17197  036B  1803               	skipnc
 17198  036C  2B77               	goto	i1l6828
 17199                           
 17200                           ;Dimmer_B1.c: 282: DimmerLightsIntr->DimmingValue++;
 17201  036D  3001               	movlw	1
 17202  036E  00F2               	movwf	??_setDimmerLights_IntrControl
 17203  036F  0876               	movf	_DimmerLightsIntr,w
 17204  0370  3E04               	addlw	4
 17205  0371  0086               	movwf	6
 17206  0372  3001               	movlw	1	; select bank2/3
 17207  0373  0087               	movwf	7
 17208  0374  0872               	movf	??_setDimmerLights_IntrControl,w
 17209  0375  0781               	addwf	1,f
 17210                           
 17211                           ;Dimmer_B1.c: 283: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 17212  0376  0008               	return
 17213  0377                     i1l6828:	
 17214  0377  0876               	movf	_DimmerLightsIntr,w
 17215  0378  3E06               	addlw	6
 17216  0379  0086               	movwf	6
 17217  037A  3001               	movlw	1	; select bank2/3
 17218  037B  0087               	movwf	7
 17219  037C  0876               	movf	_DimmerLightsIntr,w
 17220  037D  3E04               	addlw	4
 17221  037E  0084               	movwf	4
 17222  037F  3001               	movlw	1	; select bank2/3
 17223  0380  0085               	movwf	5
 17224  0381  0800               	movf	0,w
 17225  0382  0201               	subwf	1,w
 17226  0383  1803               	skipnc
 17227  0384  2B8D               	goto	i1l6832
 17228                           
 17229                           ;Dimmer_B1.c: 284: DimmerLightsIntr->DimmingValue--;
 17230  0385  0876               	movf	_DimmerLightsIntr,w
 17231  0386  3E04               	addlw	4
 17232  0387  0086               	movwf	6
 17233  0388  3001               	movlw	1	; select bank2/3
 17234  0389  0087               	movwf	7
 17235  038A  3001               	movlw	1
 17236  038B  0281               	subwf	1,f
 17237                           
 17238                           ;Dimmer_B1.c: 285: } else {
 17239  038C  0008               	return
 17240  038D                     i1l6832:	
 17241                           
 17242                           ;Dimmer_B1.c: 286: DimmerLightsIntr->AdjRF = 0;
 17243  038D  0876               	movf	_DimmerLightsIntr,w
 17244  038E  3E02               	addlw	2
 17245  038F  0086               	movwf	6
 17246  0390  3001               	movlw	1	; select bank2/3
 17247  0391  0087               	movwf	7
 17248  0392  1001               	bcf	1,0
 17249  0393  0008               	return
 17250  0394                     __end_of_setDimmerLights_IntrControl:	
 17251                           
 17252                           	psect	text119
 17253  1F93                     __ptext119:	
 17254 ;; *************** function _DimmerIntrPointSelect *****************
 17255 ;; Defined at:
 17256 ;;		line 77 in file "../src/Dimmer_B1.c"
 17257 ;; Parameters:    Size  Location     Type
 17258 ;;  lights          1    wreg     unsigned char 
 17259 ;; Auto vars:     Size  Location     Type
 17260 ;;  lights          1    1[COMMON] unsigned char 
 17261 ;; Return value:  Size  Location     Type
 17262 ;;		None               void
 17263 ;; Registers used:
 17264 ;;		wreg
 17265 ;; Tracked objects:
 17266 ;;		On entry : 0/0
 17267 ;;		On exit  : 0/0
 17268 ;;		Unchanged: 0/0
 17269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17271 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17272 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17274 ;;Total ram usage:        2 bytes
 17275 ;; Hardware stack levels used:    1
 17276 ;; This function calls:
 17277 ;;		Nothing
 17278 ;; This function is called by:
 17279 ;;		_setDimmerLights_IntrControl
 17280 ;; This function uses a non-reentrant model
 17281 ;;
 17282                           
 17283                           
 17284                           ;psect for function _DimmerIntrPointSelect
 17285  1F93                     _DimmerIntrPointSelect:	
 17286                           
 17287                           ;incstack = 0
 17288                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17289                           ;DimmerIntrPointSelect@lights stored from wreg
 17290  1F93  00F1               	movwf	DimmerIntrPointSelect@lights
 17291                           
 17292                           ;Dimmer_B1.c: 79: if (lights == 1) {
 17293  1F94  0871               	movf	DimmerIntrPointSelect@lights,w
 17294  1F95  3A01               	xorlw	1
 17295  1F96  1D03               	skipz
 17296  1F97  2F9C               	goto	i1l721
 17297                           
 17298                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights1;
 17299  1F98  3046               	movlw	_DimmerLights1& (0+255)
 17300  1F99  00F0               	movwf	??_DimmerIntrPointSelect
 17301  1F9A  0870               	movf	??_DimmerIntrPointSelect,w
 17302  1F9B  00F6               	movwf	_DimmerLightsIntr
 17303  1F9C                     i1l721:	
 17304                           
 17305                           ;Dimmer_B1.c: 81: }
 17306                           ;Dimmer_B1.c: 84: if (lights == 2) {
 17307  1F9C  0871               	movf	DimmerIntrPointSelect@lights,w
 17308  1F9D  3A02               	xorlw	2
 17309  1F9E  1D03               	skipz
 17310  1F9F  0008               	return
 17311                           
 17312                           ;Dimmer_B1.c: 85: DimmerLightsIntr = &DimmerLights2;
 17313  1FA0  3057               	movlw	_DimmerLights2& (0+255)
 17314  1FA1  00F0               	movwf	??_DimmerIntrPointSelect
 17315  1FA2  0870               	movf	??_DimmerIntrPointSelect,w
 17316  1FA3  00F6               	movwf	_DimmerLightsIntr
 17317  1FA4  0008               	return
 17318  1FA5                     __end_of_DimmerIntrPointSelect:	
 17319                           
 17320                           	psect	text120
 17321  1F22                     __ptext120:	
 17322 ;; *************** function _IOC_ISR *****************
 17323 ;; Defined at:
 17324 ;;		line 400 in file "../src/MCU_B1.c"
 17325 ;; Parameters:    Size  Location     Type
 17326 ;;		None
 17327 ;; Auto vars:     Size  Location     Type
 17328 ;;		None
 17329 ;; Return value:  Size  Location     Type
 17330 ;;		None               void
 17331 ;; Registers used:
 17332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17333 ;; Tracked objects:
 17334 ;;		On entry : 0/0
 17335 ;;		On exit  : 0/0
 17336 ;;		Unchanged: 0/0
 17337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17342 ;;Total ram usage:        0 bytes
 17343 ;; Hardware stack levels used:    1
 17344 ;; Hardware stack levels required when called:    3
 17345 ;; This function calls:
 17346 ;;		_setDimmerReClock
 17347 ;; This function is called by:
 17348 ;;		_ISR
 17349 ;; This function uses a non-reentrant model
 17350 ;;
 17351                           
 17352                           
 17353                           ;psect for function _IOC_ISR
 17354  1F22                     _IOC_ISR:	
 17355                           
 17356                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 17357                           
 17358                           ;incstack = 0
 17359                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17360  1F22  1D8B               	btfss	11,3	;volatile
 17361  1F23  0008               	return
 17362  1F24  1C0B               	btfss	11,0	;volatile
 17363  1F25  0008               	return
 17364  1F26  0027               	movlb	7	; select bank7
 17365  1F27  1D16               	btfss	22,2	;volatile
 17366  1F28  0008               	return
 17367                           
 17368                           ;MCU_B1.c: 402: IOCBF2 = 0;
 17369  1F29  1116               	bcf	22,2	;volatile
 17370                           
 17371                           ;MCU_B1.c: 403: IOCIF = 0;
 17372  1F2A  100B               	bcf	11,0	;volatile
 17373                           
 17374                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 17375  1F2B  0021               	movlb	1	; select bank1
 17376  1F2C  1C20               	btfss	_myMain^(0+128),0
 17377  1F2D  0008               	return
 17378                           
 17379                           ;MCU_B1.c: 407: setDimmerReClock();
 17380  1F2E  319E  2661         	fcall	_setDimmerReClock
 17381  1F30  0008               	return
 17382  1F31                     __end_of_IOC_ISR:	
 17383                           
 17384                           	psect	text121
 17385  1E61                     __ptext121:	
 17386 ;; *************** function _setDimmerReClock *****************
 17387 ;; Defined at:
 17388 ;;		line 243 in file "../src/MCU_B1.c"
 17389 ;; Parameters:    Size  Location     Type
 17390 ;;		None
 17391 ;; Auto vars:     Size  Location     Type
 17392 ;;		None
 17393 ;; Return value:  Size  Location     Type
 17394 ;;		None               void
 17395 ;; Registers used:
 17396 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17397 ;; Tracked objects:
 17398 ;;		On entry : 0/0
 17399 ;;		On exit  : 0/0
 17400 ;;		Unchanged: 0/0
 17401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17406 ;;Total ram usage:        0 bytes
 17407 ;; Hardware stack levels used:    1
 17408 ;; Hardware stack levels required when called:    2
 17409 ;; This function calls:
 17410 ;;		_setDimmerLights_IntrIOC_GO
 17411 ;; This function is called by:
 17412 ;;		_IOC_ISR
 17413 ;; This function uses a non-reentrant model
 17414 ;;
 17415                           
 17416                           
 17417                           ;psect for function _setDimmerReClock
 17418  1E61                     _setDimmerReClock:	
 17419                           
 17420                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 17421                           
 17422                           ;incstack = 0
 17423                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17424  1E61  3001               	movlw	1
 17425  1E62  3195  258C  319E   	fcall	_setDimmerLights_IntrIOC_GO
 17426                           
 17427                           ;MCU_B1.c: 252: setDimmerLights_IntrIOC_GO(2);
 17428  1E65  3002               	movlw	2
 17429  1E66  3195  258C         	fcall	_setDimmerLights_IntrIOC_GO
 17430  1E68  0008               	return
 17431  1E69                     __end_of_setDimmerReClock:	
 17432                           
 17433                           	psect	text122
 17434  158C                     __ptext122:	
 17435 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 17436 ;; Defined at:
 17437 ;;		line 28 in file "../src/Dimmer_B1.c"
 17438 ;; Parameters:    Size  Location     Type
 17439 ;;  lights          1    wreg     unsigned char 
 17440 ;; Auto vars:     Size  Location     Type
 17441 ;;  lights          1    2[COMMON] unsigned char 
 17442 ;; Return value:  Size  Location     Type
 17443 ;;		None               void
 17444 ;; Registers used:
 17445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17446 ;; Tracked objects:
 17447 ;;		On entry : 0/0
 17448 ;;		On exit  : 0/0
 17449 ;;		Unchanged: 0/0
 17450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17452 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17454 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17455 ;;Total ram usage:        1 bytes
 17456 ;; Hardware stack levels used:    1
 17457 ;; Hardware stack levels required when called:    1
 17458 ;; This function calls:
 17459 ;;		_DimmerIntrIOCPointSelect
 17460 ;; This function is called by:
 17461 ;;		_setDimmerReClock
 17462 ;; This function uses a non-reentrant model
 17463 ;;
 17464                           
 17465                           
 17466                           ;psect for function _setDimmerLights_IntrIOC_GO
 17467  158C                     _setDimmerLights_IntrIOC_GO:	
 17468                           
 17469                           ;incstack = 0
 17470                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17471                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 17472  158C  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 17473                           
 17474                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 17475  158D  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17476  158E  3190  20A8  3195   	fcall	_DimmerIntrIOCPointSelect
 17477                           
 17478                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->GO == 0 && RB2 == 0) {
 17479  1591  0021               	movlb	1	; select bank1
 17480  1592  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 17481  1593  0086               	movwf	6
 17482  1594  3001               	movlw	1	; select bank2/3
 17483  1595  0087               	movwf	7
 17484  1596  1801               	btfsc	1,0
 17485  1597  2DC1               	goto	i1l6416
 17486  1598  0020               	movlb	0	; select bank0
 17487  1599  190D               	btfsc	13,2	;volatile
 17488  159A  2DC1               	goto	i1l6416
 17489                           
 17490                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->GO = 1;
 17491  159B  0021               	movlb	1	; select bank1
 17492  159C  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 17493  159D  0086               	movwf	6
 17494  159E  3001               	movlw	1	; select bank2/3
 17495  159F  0087               	movwf	7
 17496  15A0  1401               	bsf	1,0
 17497                           
 17498                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->MosfetSignal = 1;
 17499  15A1  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 17500  15A2  0086               	movwf	6
 17501  15A3  3001               	movlw	1	; select bank2/3
 17502  15A4  0087               	movwf	7
 17503  15A5  1481               	bsf	1,1
 17504                           
 17505                           ;Dimmer_B1.c: 49: Dimmer.Correction = 0;
 17506  15A6  0022               	movlb	2	; select bank2
 17507  15A7  01C0               	clrf	(_Dimmer^(0+256)+2)	;volatile
 17508                           
 17509                           ;Dimmer_B1.c: 51: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 17510  15A8  0021               	movlb	1	; select bank1
 17511  15A9  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 17512  15AA  0086               	movwf	6
 17513  15AB  3001               	movlw	1	; select bank2/3
 17514  15AC  0087               	movwf	7
 17515  15AD  1D01               	btfss	1,2
 17516  15AE  2DC1               	goto	i1l6416
 17517                           
 17518                           ;Dimmer_B1.c: 52: DimmerLightsIntrIOC->MOSFET = 1;
 17519  15AF  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 17520  15B0  0086               	movwf	6
 17521  15B1  3001               	movlw	1	; select bank2/3
 17522  15B2  0087               	movwf	7
 17523  15B3  1401               	bsf	1,0
 17524                           
 17525                           ;Dimmer_B1.c: 54: if (lights == 1) {
 17526  15B4  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17527  15B5  3A01               	xorlw	1
 17528  15B6  1D03               	skipz
 17529  15B7  2DBB               	goto	i1l6412
 17530                           
 17531                           ;Dimmer_B1.c: 55: RA7 = 1;
 17532  15B8  0020               	movlb	0	; select bank0
 17533  15B9  178C               	bsf	12,7	;volatile
 17534                           
 17535                           ;Dimmer_B1.c: 57: }
 17536  15BA  2DC1               	goto	i1l6416
 17537  15BB                     i1l6412:	
 17538                           
 17539                           ;Dimmer_B1.c: 60: else if (lights == 2) {
 17540  15BB  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17541  15BC  3A02               	xorlw	2
 17542  15BD  1D03               	skipz
 17543  15BE  2DC1               	goto	i1l6416
 17544                           
 17545                           ;Dimmer_B1.c: 61: RB4 = 1;
 17546  15BF  0020               	movlb	0	; select bank0
 17547  15C0  160D               	bsf	13,4	;volatile
 17548  15C1                     i1l6416:	
 17549                           
 17550                           ;Dimmer_B1.c: 62: }
 17551                           ;Dimmer_B1.c: 64: }
 17552                           ;Dimmer_B1.c: 68: }
 17553                           ;Dimmer_B1.c: 70: if (lights == 1) {
 17554  15C1  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17555  15C2  3A01               	xorlw	1
 17556  15C3  1D03               	skipz
 17557  15C4  0008               	return
 17558                           
 17559                           ;Dimmer_B1.c: 71: TMR0 = 255;
 17560  15C5  30FF               	movlw	255
 17561  15C6  0020               	movlb	0	; select bank0
 17562  15C7  0095               	movwf	21	;volatile
 17563  15C8  0008               	return
 17564  15C9                     __end_of_setDimmerLights_IntrIOC_GO:	
 17565                           
 17566                           	psect	text123
 17567  10A8                     __ptext123:	
 17568 ;; *************** function _DimmerIntrIOCPointSelect *****************
 17569 ;; Defined at:
 17570 ;;		line 8 in file "../src/Dimmer_B1.c"
 17571 ;; Parameters:    Size  Location     Type
 17572 ;;  lights          1    wreg     unsigned char 
 17573 ;; Auto vars:     Size  Location     Type
 17574 ;;  lights          1    1[COMMON] unsigned char 
 17575 ;; Return value:  Size  Location     Type
 17576 ;;		None               void
 17577 ;; Registers used:
 17578 ;;		wreg
 17579 ;; Tracked objects:
 17580 ;;		On entry : 0/0
 17581 ;;		On exit  : 0/0
 17582 ;;		Unchanged: 0/0
 17583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17585 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17586 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17587 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17588 ;;Total ram usage:        2 bytes
 17589 ;; Hardware stack levels used:    1
 17590 ;; This function calls:
 17591 ;;		Nothing
 17592 ;; This function is called by:
 17593 ;;		_setDimmerLights_IntrIOC_GO
 17594 ;; This function uses a non-reentrant model
 17595 ;;
 17596                           
 17597                           
 17598                           ;psect for function _DimmerIntrIOCPointSelect
 17599  10A8                     _DimmerIntrIOCPointSelect:	
 17600                           
 17601                           ;incstack = 0
 17602                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 17603                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17604  10A8  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 17605                           
 17606                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17607  10A9  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17608  10AA  3A01               	xorlw	1
 17609  10AB  1D03               	skipz
 17610  10AC  28B2               	goto	i1l707
 17611                           
 17612                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17613  10AD  3046               	movlw	_DimmerLights1& (0+255)
 17614  10AE  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17615  10AF  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17616  10B0  0021               	movlb	1	; select bank1
 17617  10B1  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 17618  10B2                     i1l707:	
 17619                           
 17620                           ;Dimmer_B1.c: 12: }
 17621                           ;Dimmer_B1.c: 15: if (lights == 2) {
 17622  10B2  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17623  10B3  3A02               	xorlw	2
 17624  10B4  1D03               	skipz
 17625  10B5  0008               	return
 17626                           
 17627                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 17628  10B6  3057               	movlw	_DimmerLights2& (0+255)
 17629  10B7  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17630  10B8  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17631  10B9  0021               	movlb	1	; select bank1
 17632  10BA  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 17633  10BB  0008               	return
 17634  10BC                     __end_of_DimmerIntrIOCPointSelect:	
 17635  007E                     btemp	set	126	;btemp
 17636  007E                     pic14e$flags	set	126
 17637  007E                     wtemp	set	126
 17638  007E                     wtemp0	set	126
 17639  0080                     wtemp1	set	128
 17640  0082                     wtemp2	set	130
 17641  0084                     wtemp3	set	132
 17642  0086                     wtemp4	set	134
 17643  0088                     wtemp5	set	136
 17644  007F                     wtemp6	set	127
 17645  007E                     ttemp	set	126
 17646  007E                     ttemp0	set	126
 17647  0081                     ttemp1	set	129
 17648  0084                     ttemp2	set	132
 17649  0087                     ttemp3	set	135
 17650  007F                     ttemp4	set	127
 17651  007E                     ltemp	set	126
 17652  007E                     ltemp0	set	126
 17653  0082                     ltemp1	set	130
 17654  0086                     ltemp2	set	134
 17655  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         224
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     80      80
    BANK1            80      6      78
    BANK2            80      0      80
    BANK3            80      7      76
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights22	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK2[17]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  128390
                                              3 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1820
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     170
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     139
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4100
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4100
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    8162
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    8162
                                             76 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1174
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1174
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   46217
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   46217
                                              5 BANK1      1     1      0
                                              0 BANK3      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   45160
                                             79 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4023
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40967
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   14001
                                             76 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 2     2      0    1947
                                             13 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   18820
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   16360
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14126
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1298
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1298
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1472
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       6     6      0    7692
                                             76 BANK0      1     1      0
                                              0 BANK1      5     5      0
            _DimmerLightsPointSelect
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 5     5      0     300
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             5     5      0     136
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   35310
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 3     3      0   35310
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   17792
                                             75 BANK0      3     2      1
                             _setBuz
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   17301
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2595
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1143
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    6129
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    6129
                                             77 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    4185
                                             76 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    3708
                                             74 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3423
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2141
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1820
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     242
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0     110
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     132
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     132
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     132
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _DimmerLightsPointSelect
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      6      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      7      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     164      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     164      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Dec 11 17:13:06 2014

                   __size_of_Switch_Main 000B                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002                           ___bmul@product 0022  
                                     l94 0A29                                       l96 0A3D  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 12E5  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 0077                     _getDimmerLights_Line 106F  
                 __end_of_setDelayOff_GO 09A0                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 006D  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 16CA  
                   _setDimmerLights_Line 1122                             ___ftadd@sign 004B  
                                    l104 0844                                      l105 0840  
                                    l106 082E                                      l108 083E  
                                    l251 0C0B                     _setDimmerLights_SwOn 1517  
                                    l324 116F                                      l325 1171  
                                    l368 1332                                      l813 1078  
                                    l814 107F                                      l751 1FF7  
                                    l795 0E3A                                      l973 124B  
                                    l974 1255                                      _GIE 005F  
                                    _CRC 00C8                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0014  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 00CD  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00BA                                      _ISR 0004  
                                    _WDT 00C6             getDimmerLights_Status@lights 0022  
                                    _Sw1 01C5                                      _Sw2 01CE  
              setDimmerLights_AdjOn@idle 0023                setDimmerLights_Adj@status 006B  
               __end_of_CC2500_WriteByte 117C                    _Buzzer_Initialization 1E2A  
                        __end_of_ADC_Set 1E61                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
           getDimmerLights_Status@status 0023                          _setDimmerLights 0DD3  
                      ??_getSw_KeyStatus 0020                    _setDimmerLights_AdjRF 12E5  
                  _setDimmerLights_AdjOn 13F7                                     ?_ISR 0070  
        setDimmerLights_ErrorClose@count 00E8                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1F31                             ___ftdiv@sign 003D  
                                   l1008 167F                                     l2100 0499  
                                   l2101 04A1                                     l2106 04CC  
                                   l2108 0503                                     l2142 1F36  
                                   l2150 0F03                                     l2160 0F54  
                                   l1522 11E3                                     l1274 1511  
               ?_DimmerLightsPointSelect 0070                                     l2180 0D63  
                                   l1526 11DF                                     l1550 075E  
                                   l2166 14DD                                     l1288 1477  
                                   l2192 15F3                                     l2512 01AA  
                                   l1297 1758                                     l2097 0547  
                                   l2514 0083                                     l2099 0497  
                                   l1484 158A                          __end_of_IOC_Set 1EFB  
                                   l2490 113E                                     l1754 06A5  
                                   l1749 06AB                                     l2903 0252  
                                   l2880 0B54                                     l2874 0B3D  
                                   l8010 0E5E                                     l8102 08B4  
                                   l8030 0E9C                                     l9000 16BE  
                                   l8120 08DA                                     l8112 08BC  
                                   l8040 0EB5                                     l8114 08C8  
                                   l8210 1542                                     l9004 16C4  
                                   l8052 1158                                     l8124 08E3  
                                   l8044 0EC3                                     l8036 0EA9  
                                   l8028 0E8E                                     l8212 1548  
                  _setDimmerLights_SwOff 09A0                                     l8038 0EB2  
                                   l8128 08EB                                     l8226 09DE  
                                   l9210 142B                                     l8068 13F5  
                                   l8172 097E                                     l9212 144C  
                                   l8308 148B                                     l8412 1793  
                                   l8510 088F                                     l8246 0A9B  
                                   l9222 1719                                     l8430 15E2  
                                   l8096 08A9                                     l8176 0984  
                                   l9208 1447                                     l8416 17A2  
                                   l8442 11A7                                     l7810 1FAE  
                                   l8178 098A                                     l8506 088B  
                                   l8514 0893                                     l9090 16F1  
                                   l8602 0BE0                                     l8436 119E  
                                   l8380 0AEC                                     l8524 112F  
                                   l7900 0291                                     l9228 172E  
                                   l8356 11F5                                     l8452 1312  
                                   l8620 0C11                                     l9420 1149  
                                   l8438 11A1                                     l7806 1FA8  
                                   l7910 0F6E                                     l8358 11FB  
                                   l8454 1315                                     l8630 0C21  
                                   l8622 0C14                                     l9334 04B8  
                                   l9510 01A6                                     l9254 061B  
                                   l8720 12D4                                     l8376 0AE6  
                                   l7840 01DB                                     l9096 170C  
                                   l9088 16EB                                     l8616 0BF2  
                                   l9416 1143                                     l9192 1273  
                                   l8706 1343                                     l8714 12CB  
                                   l8378 0AB8                                     l8490 086B  
                                   l7850 01F1                                     l7930 0FC5  
                                   l8554 11DA                                     l8458 131B  
                                   l8634 0C27                                     l8626 0C1A  
                                   l8570 0CFE                                     l9370 04EC  
                                   l9450 00B1                                     l9434 006E  
                                   l9186 126B                                     l9524 0818  
                                   l8708 134E                                     l8716 12CE  
                                   l8476 085A                                     l8484 0862  
                                   l7828 12AB                                     l7844 01E2  
                                   l7916 0F84                                     l8652 0D71  
                                   l8628 0C1E                                     l8580 0D40  
                                   l9460 00E3                                     l9284 067A  
                                   l9188 126E                    _myMain_Initialization 1F40  
                                   l7782 0B1A                                     l7870 0228  
                                   l7862 020B                                     l8662 0D84  
                                   l8646 0D68                                     l8654 0D74  
                                   l8582 0D44                                     l8574 0D23  
                                   l9286 067C                                     l7792 0B42  
                                   l7784 0B24                                     l7880 0244  
                                   l7872 022D                                     l8664 0D87  
                                   l8648 0D6B                                     l7952 0562  
                                   l8576 0D38                                     l8920 0F1E  
                                   l9368 04EA                                     l9296 0691  
                                   l8498 0873                                     l7794 0B4A  
                                   l7786 0B29                                     l7778 0B13  
                                   l7890 0276                                     l7882 024E  
                                   l7874 0231                                     l7938 0FDE  
                                   l8754 0E06                                     l7970 05B3  
                                   l8578 0D3C                                     l8586 0D48  
                                   l8930 0F3F                                     l9386 0514  
                                   l9474 0121                                     l9298 0692  
                                   l7868 021E                                     l9732 06D6  
                                   l8828 145F                                     l8684 0D9F  
                                   l8668 0D8D                                     l8596 0BD7  
                                   l8908 0F06                                     l9484 0153  
                                   l7886 0264                                     l9750 06ED  
                                   l9726 06C7                                     l9590 0406  
                                   l8686 0DB8                                     l8598 0BDA  
                                   l7982 05CF                                     l7974 05BB  
                                   l7958 0578                                     l9398 0535  
                                   l9830 17D0                                     l8768 0E30  
                                   l8776 090A                                     l9760 0742  
                                   l9752 0723                                     l9736 06E5  
                                   l8872 1F8D                                     l8936 0F4A  
                                   l8960 122E                                     _CFGS 0CAE  
                                   l7986 05D7                                     l8946 10DB  
                                   l8970 123A                                     l8962 1230  
                                   l9834 17D7                                     l9748 071B  
                                   l8972 123E                                     l9676 1636  
                                   l8990 16AE                                     l9766 0754  
                                   l9694 156A                                     l8896 0EF0  
                           __CFG_WDTE$ON 0000                                     l8994 16B4  
                                   l8988 16AB                                     l8998 16BB  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   _PEIE 005E                                     u8025 0E65  
                                   u8205 08BF                                     u8055 0E8F  
                                   u8225 08C9                                     u8145 13E1  
                                   u8410 0A5B                                     u8235 08D3  
                                   u8245 08DB                                     u7525 0B5B  
                                   u8085 0EAA                                     u9055 1338  
                                   u7455 0B1F                                     u8415 0A59  
                                   u7475 0B38                                     u7725 0232  
                                   u7495 0B45                                     u8465 1107  
                                   u7665 020C                                     u7825 0F96  
                                   u7905 0584                                     u8555 0AC3  
                                   u7755 0245                                     u7835 0FA6  
                                   u7915 0594                                     u7845 0FC6  
                                   u7695 021F                                     u7855 0FD5  
                                   u7935 05BC                                     u7865 0FDF  
                                   u7945 05C2                                     u7975 05D8  
                                   u9745 1434                                     u7985 05DE  
                                   _LWLO 0CAD                                     u9855 0662  
                                   _TMR0 0015                                     u9875 0682  
                                   u9975 04B2                                     _RSSI 00CE  
                                   _WREN 0CAA                                     _Buz1 00AE  
                                   _Temp 00D6                                     _main 17AF  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 0BCF  
                        __end_of_RF_Main 1E33                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
                                   btemp 007E                          __end_of_WDT_Set 1E9D  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1E61                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 1607  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
                                  ??_ISR 0074                             ___fttol@exp1 005B  
                           ___fttol@lval 0057                   _getDimmerLights_Status 1F4F  
         __size_of_DimmerIntrPointSelect 0012                         __end_of_LED_Main 1EEF  
       setDimmerLights_ErrorClose@lights 00E9            __end_of_DimmerIntrPointSelect 1FA5  
                  ?_getDimmerLights_Line 0070                    ?_setDimmerLights_Main 0070  
                  ?_setDimmerLights_Line 0070                          ?_setDelayOff_GO 0066  
                  ?_setDimmerLights_SwOn 0070                                    ?_main 01E8  
                        __end_of___awdiv 08F2                          __end_of___ftadd 02A9  
                        __end_of___ftdiv 1000                          __end_of___ftneg 1E92  
                        __end_of___ftmul 05FF                                    u10095 0525  
                        ___awdiv@divisor 0020                                    u10365 080E  
                                  _T1CON 0018                                    u10545 162D  
                                  u10555 163C                                    u10660 0721  
                        __end_of___fttol 0ECC                                    u10485 1508  
                                  u10665 06F8                                    u10595 1582  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                                    i1l721 1F9C  
                                  i1l707 10B2                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0021  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                  __end_of_Timeout_Counter 110D  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 15C9  
             _setDimmerLights_IntrIOC_GO 158C                         __end_of_TMR1_ISR 13A3  
                __size_of_setProductData 000E             __size_of_CC2500_WriteCommand 001A  
     __end_of_setDimmerLights_ErrorClose 0B0A               _setDimmerLights_ErrorClose 0AAA  
                       __end_of_TMR1_Set 1F07                                    _getAD 1260  
                          ___awtoft@sign 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1FED  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03C0                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0012             __end_of_getMain_LightsStatus 144F  
          __end_of_setLED_Initialization 1FC9                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0A51  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
                      setTemp_Main@error 0068                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0C98                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                  __size_of_getDelayOff_GO 0011  
                      ??_setPercentValue 005C                             __end_of_main 1800  
                    ?_setRF_DimmerLights 0066                         __end_of_Fosc_Set 1E49  
                     ??_setMemory_Modify 0020                           _Exception_Main 06AF  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0E45                     _setSw_Initialization 1E81  
                                 ??_main 0070                            ___fttol@sign1 0056  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0CFD  
                         _setMemory_Data 1EBF                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 0014                  ??_DlyOff_Initialization 0022  
                             _Receive_OK 03C0                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 2000                   ?_setDimmerLights_AdjRF 0070  
                 ?_setDimmerLights_AdjOn 0070                 __size_of_setRFSW_Control 004F  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0067  
                                 ?_getAD 0020                        ??_getRF_KeyStatus 0020  
                 ?_setDimmerLights_SwOff 0070                              _DlyOff_Main 0B6B  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 0070  
                                 _ADRESH 009C                                   _ADRESL 009B  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 12C2                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0B6B                 _getMain_All_Error_Status 11C9  
                                 _IOCBF2 1CB2                                   i1l6412 15BB  
                                 i1l6416 15C1                                   i1l6820 0352  
                                 i1l6814 033B                                   i1l6822 0358  
                                 i1l6832 038D                                   i1l6816 0341  
                                 i1l6828 0377                                   i1l6792 02ED  
                                 i1l6796 02F4                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   u701_25 139D  
                                 _OSCCON 0099                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 117C  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1122  
                                 _Dimmer 013E                                   _DlySw1 01D7  
                                 _DlySw2 01DC               __end_of_Mcu_Initialization 1FDB  
                    __end_of_Buzzer_Main 084B                                   _Memory 01A0  
                                 _Timer1 0141                                   ___bmul 1FA5  
                 __end_of_Exception_Main 075F                     Exception_Main@lights 00EA  
                              ??___awdiv 0024                                ??___ftadd 0047  
           __size_of_DelayOffPointSelect 0017                                ??___ftdiv 0034  
                              ??___ftneg 0041                    setDimmerLights@lights 006D  
                              ??___ftmul 0034                                ??___fttol 0052  
           ?_Flash_Memory_Initialization 0070                   ??_getDimmerLights_Line 0020  
            setDimmerLights_AdjRF@lights 0063                   ??_setDimmerLights_Main 006E  
                 ??_setDimmerLights_Line 0020                                   _r_data 00D4  
                                 _s_data 00D5                   ??_setDimmerLights_SwOn 002D  
                                 _setLED 084B                                   _myMain 00A0  
                 __end_of_setMemory_Data 1ECB                         _DimmerLightsIntr 0076  
                  ?_setSw_Initialization 0070                    setDimmerLights@status 006B  
                       ___awdiv@quotient 0027                                   _setBuz 09F8  
                     __size_of_Temp_Main 0003         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
    __end_of_setDimmerLights_IntrControl 0394              _setDimmerLights_IntrControl 02A9  
               Flash_Memory_Read@address 0022                         ?_Timeout_Counter 0070  
             __end_of_setMemory_LoopSave 10A8                    __end_of_SwPointSelect 10E4  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0073  
                __size_of_LedPointSelect 0020                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009               getMain_LightsStatus@status 0028  
                             _TouchPower 1137              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0CFD  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 003C  
                              ?_LED_Main 0070                               ___ftadd@f1 0041  
                             ___ftadd@f2 0044                     _getRF_KeyStatus$4770 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___ftneg@f1 003E                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004E                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                          ?_Exception_Main 0070  
                           __pidataBANK4 1280                            __end_of_getAD 1280  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
              setMemory_LoopSave@command 0021             __size_of_setDimmerLights_Adj 0056  
                     _LED_Initialization 1ED7                          _getSw_KeyStatus 1221  
              ??_setControl_Lights_Table 006F                       getRF_KeyStatus@key 0021  
                       ??_DelayTimejudge 0024                          ?_setMemory_Data 0020  
          ??_Flash_Memory_Initialization 0062                         ?_setDimmerLights 006B  
                              ?_WDT_Main 0070                       __size_of_getBuz_GO 0011  
                   _getMain_LightsStatus 1422               __end_of_set_TimeoutCleared 1E4E  
               __end_of_setDimmerReClock 1E69                       __size_of_getRxData 008B  
                    ?_LED_Initialization 0070                    getMain_LightsStatus@i 0026  
                      ?_CC2500_WriteByte 0070                           _setProductData 1F14  
                         _DimmerLights11 00CA                           _DimmerLights22 00CB  
                   __size_of_setLED_Main 0041                                  ??_getAD 0023  
                    _Temp_Initialization 1E33                       ??_CC2500_WriteByte 0020  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01A0                                ?_Fosc_Set 0070  
                            _Buzzer_Main 0801                        ??_setRFSW_Control 006C  
                      __end_of_Temp_Main 1E39                                  ?_IO_Set 0070  
                         ??_my_MainTimer 002D                               ??_LED_Main 0025  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1E69  
                             __pnvCOMMON 0079                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 006F                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 0075                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 17AF                           _getDelayOff_GO 1F60  
                    _CC2500_WriteCommand 1195                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 0068            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0074                            ?_setTemp_Main 0070  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                       __size_of_setTxData 009B  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1E5A                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1607                               ??_WDT_Main 0020  
                  ?_getMain_LightsStatus 0070             __end_of_setRF_Initialization 1EA8  
                     _setRFSW_AdjControl 15C9                   __end_of_setProductData 1F22  
                                _IOC_ISR 1F22                                  _IOC_Set 1EEF  
                   __size_of_setLog_Code 0034                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 14E1                        _Flash_Memory_Read 11AF  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 006F  
                 __size_of_CC2500_TxData 0064              ?_setDimmerLights_ErrorClose 0070  
                    ?_setRFSW_AdjControl 0070                                  _RF_Data 0120  
                                _RF_Main 1E30                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1E92  
        __end_of_setControl_Lights_Table 0D64                          setRF_Main@error 01E7  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _setPercentValue 0C33                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1EBF                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1F82                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                   __end_of_getDelayOff_GO 1F71  
                                _VarLED1 016C                                  _VarLED2 01E1  
         __end_of_getDimmerLights_Status 1F60                        __end_of_getRxData 0F57  
                __end_of_getSw_KeyStatus 1240                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 10BC                    ??_Temp_Initialization 0020  
                   ??_setRFSW_AdjControl 0068                           ??_setTemp_Main 0066  
                        __size_of___bmul 0012                      setProductData@value 0062  
                                ___awdiv 089E                                  ___ftadd 01B3  
                                ___ftdiv 0F57                                  ___ftneg 1E89  
                                ___ftmul 054B                                  ___fttol 0E45  
                    __end_of_Switch_Main 1EB3                  ??_Buzzer_Initialization 0020  
                        _getRF_KeyStatus 1F82                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 0053  
                   setRFSW_AdjControl@sw 006B                          __size_of_setBuz 0059  
                                __ptext1 1550                                  __ptext2 1F40  
                                __ptext3 1607                                  __ptext4 1260  
                                __ptext5 1FDB                                  __ptext6 0002  
                                __ptext7 1E36                                  __ptext8 05FF  
                                __ptext9 1E33                  ??_setDimmerLights_AdjRF 0062  
                ??_setDimmerLights_AdjOn 0022                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1F93                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                          ?_setProductData 0062  
              __end_of_Flash_Memory_Main 1517                __end_of_Flash_Memory_Read 11C9  
                ??_setDimmerLights_SwOff 006A                               _setRF_Main 0470  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1E71  
                      _DimmerLights_Main 1E79           __size_of_DlyOff_Initialization 0006  
                  ??_CC2500_WriteCommand 0022                __size_of_setMemory_Modify 0013  
          __end_of_DlyOff_Initialization 1E54               __end_of_CC2500_ClearRXFIFO 1E3D  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1E41  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 0079  
                         _LedPointSelect 1240                      _DelayOffPointSelect 114C  
                                clrloop0 07FB           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1F14                     end_of_initialization 003C  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 13A3  
                          _DelayTime_1us 132D                        __end_of_setTxData 07FA  
             __end_of_Flash_Memory_Write 147E                                  init_ram 1E54  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 006F  
                   Flash_Memory_Read@ret 0023                                  initloop 1E55  
                             _setSw_Main 0040                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 002D                        _CC2500_ReadStatus 1308  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1FB7  
                        ?_getDelayOff_GO 0070                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 0D64                            _CC2500_TxData 0BCF  
                    ??_CC2500_InitSetREG 0025            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 1712  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1066  
                    ??_CC2500_ReadStatus 0022                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 0015                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 1E81  
                     _Mcu_Initialization 1FC9                 __size_of_CC2500_PowerRST 0044  
                   __end_of_my_MainTimer 158C                           ?_DelayOff_Main 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1260  
                __end_of_setPercentValue 0C98                 __size_of_CC2500_WriteREG 0023  
              __end_of_CC2500_InitSetREG 13CD                      ?_Mcu_Initialization 0070  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 0059  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 08F2  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 132D  
                          ?_RF_RxDisable 0070          getMain_All_Error_Status@command 0021  
                            ___ftdiv@exp 003C                         ??_Exception_Main 006C  
                         __end_of_IO_Set 1195                     _setRF_Initialization 1E9D  
                     _setMemory_LoopSave 1095                              _Switch_Main 1EA8  
                      __size_of_LED_Main 000C                         ?_getSw_KeyStatus 0070  
                         ?_CC2500_RxData 0070                           ?_CC2500_TxData 0070  
                _DimmerLightsPointSelect 1FED                  __end_of_getRF_KeyStatus 1F93  
                       ??_setMemory_Data 0021                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 110D                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                    ?_setMemory_LoopSave 0070                     ?_setDimmerLights_Adj 006B  
                         __end_of___bmul 1FB7                     setRF_DimmerLights@on 0066  
               _DimmerIntrIOCPointSelect 10A8                        getSw_KeyStatus@sw 0024  
                      __size_of_TMR1_ISR 0029            __size_of_getDimmerLights_Line 0013  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
          __size_of_setDimmerLights_Main 0048                           __end_of_setLED 089E  
          __size_of_setDimmerLights_Line 0015            __size_of_setDimmerLights_SwOn 0039  
                         __end_of_setBuz 0A51                     _CC2500_FrequencyCabr 1EB3  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 1760  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 147E  
                        ?_LedPointSelect 0070                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1221  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                     __end_of_setTemp_Main 06AF  
                         ??_RF_RxDisable 0024                             ?_Buzzer_Main 0070  
                     _set_TimeoutCleared 1E49                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 0168  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0066  
                    __size_of_getTemp_AD 003E                   ?_setLED_Initialization 0070  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
              __size_of_CC2500_WriteByte 0019                                _Temp_Main 1E36  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00CF                    setProductData@address 0065  
                    Exception_Main@count 00E8                  setRF_DimmerValue@lights 0067  
                    Exception_Main@error 00E9                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 006C                   __size_of_SwPointSelect 0014  
                              _Tx_Length 00D2                              __pdataBANK4 0220  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0070  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 11E5  
                       _CC2500_SIDLEMode 1E41               __size_of_DimmerLights_Main 0008  
              __end_of_setRF_DimmerValue 14AD                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                              __pbssCOMMON 0075  
                               ?_IOC_Set 0070                                ___latbits 0003  
                       _setMemory_Modify 1082                            __pcstackBANK0 0020  
                          __pcstackBANK1 00E8                            __pcstackBANK3 01E5  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0072                            DlyOff_Main@sw 006F  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
                   __size_of_DlyOff_Main 0064               __size_of_CC2500_ReadStatus 0025  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 0146                            _DimmerLights2 0157  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 0066  
              ??_DimmerLightsPointSelect 0020                          ??_CC2500_RxData 0024  
               setRFSW_AdjControl@status 006A                          ??_CC2500_TxData 0024  
                         getRxData@error 00EC              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                          Exception_Main@i 00EB  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 00DB  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 0067                 ?_setControl_Lights_Table 0070  
                       ?_getRF_KeyStatus 0070                   _setTemp_Initialization 0800  
                              _getBuz_GO 1F71      __end_of_Flash_Memory_Initialization 0470  
            _Flash_Memory_Initialization 0394                                 ?___awdiv 0020  
                              __ptext100 110D                                __ptext101 1E41  
                              __ptext110 1195                                __ptext102 1686  
                              __ptext111 1E49                                __ptext103 13A3  
                              __ptext120 1F22                                __ptext112 10F8  
                              __ptext104 1202                                __ptext121 1E61  
                              __ptext113 1163                                __ptext105 12C2  
                              __ptext122 158C                                __ptext114 0801  
                              __ptext106 1EB3                                __ptext123 10A8  
                              __ptext115 1E2A                                __ptext107 132D  
                              __ptext108 1E3D                                __ptext117 137A  
                              __ptext109 1E39                                 ?___ftadd 0041  
                              __ptext118 02A9                                __ptext119 1F93  
                              _getRxData 0ECC                                 ?___ftdiv 002E  
                               ?___ftneg 003E                                 ?___ftmul 002E  
                               ?___fttol 004E                    __size_of_my_MainTimer 003C  
                __end_of_setRFSW_Control 17AF                         ??_setProductData 0063  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1E2D                         getPercentValue@i 005F  
                       setPercentValue@i 005F                            ??_setLog_Code 0066  
               getDimmerLights_Line@line 0021                       __end_of_TouchPower 114C  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 0173  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjOn 002B            __end_of_setDimmerLights_AdjRF 1308  
          __end_of_setDimmerLights_AdjOn 1422                   CC2500_WriteByte@loop_a 0021  
                              _r_address 00D3           __size_of_setDimmerLights_SwOff 0058  
         __size_of_myMain_Initialization 000F            __end_of_setDimmerLights_SwOff 09F8  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1F4F  
                         __size_of_getAD 0020                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 10D0                      __end_of_setLED_Main 1686  
                       ??_getDelayOff_GO 0022                      _DimmerLightsIntrIOC 00CC  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1E36  
           setDimmerLights_SwOff@command 006A                        _CC2500_rfSettings 102F  
                               _LED_Main 1EE3                          SwPointSelect@sw 0021  
                              clear_ram0 07FA                 CC2500_InitPATable@loop_d 0027  
                           _my_MainTimer 1550                                _setTxData 075F  
    __end_of_DimmerLights_Initialization 10D0              _DimmerLights_Initialization 10BC  
                     _CC2500_ClearRXFIFO 1E39                       _CC2500_ClearTXFIFO 1E3D  
               setRF_DimmerLights@lights 006A                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 10F8                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 0065  
               setRF_DimmerLights@status 0069              __size_of_setRFSW_AdjControl 003E  
                     _Flash_Memory_Write 144F                               ?_getRxData 0070  
                               _TMR1_ISR 137A                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR1_Set 1EFB  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                               _RF_Count 0144                     __end_of_RF_RxDisable 1F40  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 11AF  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1FDB  
                DlyOff_Initialization@sw 0022                    getSw_KeyStatus@status 0023  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 002F  
                    ?_Flash_Memory_Write 0070                         setRF_Main@loop_f 01E5  
                  __size_of_setTemp_Main 00B0                  __size_of_setDelayOff_GO 0058  
                               _DelayOff 00C9                             setSw_Main@sw 006E  
       setDimmerLights_IntrIOC_GO@lights 0072                         __size_of_IOC_ISR 000F  
           ?_setDimmerLights_IntrControl 0070           getMain_All_Error_Status@status 0024  
                       __size_of_IOC_Set 000C             __end_of_Flash_Memory_Erasing 1ED7  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 14E1  
                  _DlyOff_Initialization 1E4E                     ??_CC2500_ClearRXFIFO 0024  
                   ??_CC2500_ClearTXFIFO 0024                __end_of_CC2500_rfSettings 105E  
                       __size_of_RF_Main 0003                                 _Fosc_Set 1E45  
                       __size_of_WDT_Set 000B                    setRFSW_Control@status 006D  
                  _Switch_Initialization 1F07        __size_of_getMain_All_Error_Status 001C  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 006C  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 1645                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1163             Flash_Memory_Initialization@i 0063  
                               _SwDetect 00D1                              ??_Temp_Main 0069  
                      setRFSW_Control@sw 006E            _getMain_All_Error_Status$3302 0022  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
                           _setTemp_Main 05FF                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                         __size_of___ftneg 0009  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
               setDimmerLights_SwOn@idle 002E                                 ___awtoft 12A0  
                       ??_LedPointSelect 0020                                 ___ftpack 0B0A  
          __size_of_getMain_LightsStatus 002D                        getTemp_AD@channel 0025  
                           ??_setRF_Main 00ED                     CC2500_WriteREG@value 0022  
                            _setLED_Main 1645               __end_of_setRF_DimmerLights 0AAA  
               ?_DelayOff_Initialization 0070                         getDelayOff_GO@go 0023  
                       getDelayOff_GO@sw 0022                         setDelayOff_GO@sw 0069  
                               __ptext10 0800                                 __ptext11 1EA8  
                               __ptext20 1E30                                 __ptext12 0040  
                               __ptext21 0470                                 __ptext13 10E4  
                               __ptext30 12E5                                 __ptext22 0ECC  
                               __ptext14 13F7                                 __ptext31 0C98  
                               __ptext23 14AD                                 __ptext15 1221  
                               __ptext40 11E5                                 __ptext32 054B  
                               __ptext24 1095                                 __ptext16 10D0  
                               __ptext41 1E2D                                 __ptext33 1082  
                               __ptext25 0CFD                                 __ptext17 1F07  
                               __ptext50 1EE3                                 __ptext42 1E9D  
                               __ptext34 1F82                                 __ptext26 1760  
                               __ptext18 1E81                                 __ptext51 1645  
                               __ptext43 1FC9                                 __ptext35 1F71  
                               __ptext27 1517                                 __ptext19 1137  
                               __ptext60 1066                                 __ptext52 1ED7  
                               __ptext44 1E92                                 __ptext36 1F31  
                               __ptext28 15C9                                 __ptext61 11AF  
                               __ptext53 1FB7                                 __ptext45 1EFB  
                               __ptext37 0BCF                                 __ptext29 147E  
                               __ptext70 075F                                 __ptext62 06AF  
                               __ptext54 14E1                                 __ptext46 117C  
                               __ptext38 0D64                                 __ptext71 0A51  
                               __ptext63 1422                                 __ptext55 1712  
                               __ptext47 1EEF                                 __ptext39 1308  
                               __ptext80 1240                                 __ptext72 0C33  
                               __ptext64 11C9                                 __ptext56 1ECB  
                               __ptext48 1E45                                 __ptext81 1122  
                               __ptext73 0E45                                 __ptext65 106F  
                               __ptext57 0394                                 __ptext49 1E5A  
                               __ptext90 13CD                                 __ptext82 10BC  
                               __ptext74 1E89                                 __ptext66 1E79  
                               __ptext58 1EBF                                 __ptext91 1FA5  
                               __ptext83 1353                                 __ptext75 0F57  
                               __ptext67 16CA                                 __ptext59 144F  
                               __ptext92 1F60                                 __ptext84 1E71  
                               __ptext76 01B3                                 __ptext68 08F2  
                               __ptext93 1F4F                                 __ptext85 0B6B  
                               __ptext77 12A0                                 __ptext69 0DD3  
                               __ptext94 1FED                                 __ptext86 0AAA  
                               __ptext78 0B0A                                 __ptext95 09F8  
                               __ptext87 09A0                                 __ptext79 084B  
                               __ptext96 089E                                 __ptext88 0948  
                               __ptext97 1E69                                 __ptext89 1F14  
                               __ptext98 1E4E                                 __ptext99 114C  
                               __product 0220            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
           __end_of_getDimmerLights_Line 1082             __end_of_setDimmerLights_Main 1712  
           __end_of_setDimmerLights_Line 1137             __end_of_setDimmerLights_SwOn 1550  
                           ??_setSw_Main 006C                            setLED@command 0022  
                          __size_of_main 0051                              _setRF_Learn 10E4  
               __end_of_CC2500_SIDLEMode 1E45               setDimmerLights_Main@lights 006E  
            __end_of_DelayOffPointSelect 1163               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 01E6                __size_of_setDimmerReClock 0008  
                setDimmerLights_AdjOn@sw 0022                          _CC2500_ReadByte 11E5  
                     _CC2500_InitPATable 1202                 __end_of_setMemory_Modify 1095  
                     __end_of_setRF_Main 054B                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012              setDimmerLights_ErrorClose@i 00EA  
                   _CC2500_patable_vaule 105E                              ??_getRxData 006F  
                               main@argc 01E8                                 main@argv 01EA  
                    ?_CC2500_InitPATable 0070                     _getSw_KeyStatus$5666 0021  
                   _getSw_KeyStatus$5667 0022                          _CC2500_PowerRST 1686  
               __size_of_getSw_KeyStatus 001F              __end_of_Flash_Memory_Modify 1760  
                      ??_getPercentValue 005C                              _setLog_Code 14AD  
            __end_of_Flash_Memory_Unlock 106F                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 12C2                       __end_of_setSw_Main 01B3  
                          _Transceive_OK 03C1                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 13CD                              pic14e$flags 007E  
           ??_setDimmerLights_IntrIOC_GO 0072               setDimmerLights_Line@lights 0020  
           ??_setDimmerLights_ErrorClose 006C                  setDimmerLights_SwOff@sw 006B  
            __size_of_setMemory_LoopSave 0013                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 137A  
__size_of_setDimmerLights_Initialization 0027           _setDimmerLights_Initialization 1353  
            __end_of_setDimmerLights_Adj 0948                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1E2D  
   __size_of_setDimmerLights_IntrControl 00EB                     _Flash_Memory_Erasing 1ECB  
                     ?_RF_Initialization 0070                               _SPI0Buffer 00D0  
                __size_of_Exception_Main 00B0          __end_of_DelayOff_Initialization 1E71  
    __size_of_setDimmerLights_IntrIOC_GO 003D      __size_of_setDimmerLights_ErrorClose 0060  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1E79  
                    ??_RF_Initialization 0021                  __size_of_setMemory_Data 000C  
                         _setDelayOff_GO 0948         __size_of_setControl_Lights_Table 0067  
                 __end_of_DelayTimejudge 13F7     __size_of_Flash_Memory_Initialization 00DC  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 006D  
                  setMemory_Data@address 0022                    __end_of_DelayTime_1us 1353  
                __end_of_CC2500_ReadByte 1202             __end_of_setSw_Initialization 1E89  
                        _Timeout_Counter 10F8          __size_of_getDimmerLights_Status 0011  
                   getPercentValue@value 005E                             _RF_RxDisable 1F31  
             __end_of_LED_Initialization 1EE3           __end_of_setTemp_Initialization 0801  
               __size_of_setPercentValue 0065                  setMemory_Modify@command 0021  
                   setPercentValue@value 005E                __end_of_RF_Initialization 1E30  
                  __end_of_CC2500_RxData 0DD3                    __end_of_CC2500_TxData 0C33  
                __end_of_CC2500_PowerRST 16CA  
